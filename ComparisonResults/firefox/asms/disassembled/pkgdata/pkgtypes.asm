;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1CC7E4BB9268CAD29255EC2A9A20B227
; Input	CRC32 :	5FCFB267

; File Name   :	D:\compspace\objfiles\firefox\pkgdata\pkgtypes.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkg_writeCharListWrap(int, int, char *, char *Str, int)
		public _pkg_writeCharListWrap
_pkg_writeCharListWrap proc near

var_4D8		= byte ptr -4D8h
var_415		= byte ptr -415h
Dest		= byte ptr -414h
Source		= byte ptr -413h
var_19		= byte ptr -19h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Str		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 4D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_4D8]
		mov	ecx, 136h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_C], 0

loc_2F:					; CODE XREF: _pkg_writeCharListWrap+209j
		cmp	[ebp+arg_4], 0
		jz	loc_20E
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jz	loc_1A4
		push	1
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	esi, esp
		push	3FCh		; Count
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		push	eax		; Source
		lea	ecx, [ebp+Dest]
		push	ecx		; Dest
		call	dword ptr ds:__imp__strncpy
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_19], 0
		cmp	[ebp+arg_10], 0
		jge	short loc_DD
		lea	eax, [ebp+Dest]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		movsx	ecx, [ebp+eax+var_415]
		cmp	ecx, 22h ; '"'
		jnz	short loc_B6
		lea	eax, [ebp+Dest]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		mov	[ebp+eax+var_415], 0

loc_B6:					; CODE XREF: _pkg_writeCharListWrap+9Dj
		movsx	eax, [ebp+Dest]
		cmp	eax, 22h ; '"'
		jnz	short loc_D8
		lea	eax, [ebp+Source]
		push	eax		; Source
		lea	ecx, [ebp+Dest]
		push	ecx		; Dest
		call	_strcpy
		add	esp, 8

loc_D8:					; CODE XREF: _pkg_writeCharListWrap+C0j
		jmp	loc_16D
; ---------------------------------------------------------------------------

loc_DD:					; CODE XREF: _pkg_writeCharListWrap+81j
		cmp	[ebp+arg_10], 0
		jle	loc_16D
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		movsx	edx, byte ptr [ecx]
		cmp	edx, 22h ; '"'
		jz	short loc_13C
		push	offset ??_C@_01BJJEKLCA@?$CC?$AA@ ; "\""
		lea	eax, [ebp+Dest]
		push	eax		; Dest
		call	_strcpy
		add	esp, 8
		push	1
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	esi, esp
		push	3FCh		; Count
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		push	eax		; Source
		lea	ecx, [ebp+Dest]
		push	ecx		; Dest
		call	dword ptr ds:__imp__strncat
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_13C:				; CODE XREF: _pkg_writeCharListWrap+F2j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx		; Str
		call	_strlen
		add	esp, 4
		mov	edx, [ebp+arg_4]
		mov	ecx, [edx]
		movsx	edx, byte ptr [ecx+eax-1]
		cmp	edx, 22h ; '"'
		jz	short loc_16D
		push	offset ??_C@_01BJJEKLCA@?$CC?$AA@ ; "\""
		lea	eax, [ebp+Dest]
		push	eax		; Dest
		call	_strcat
		add	esp, 8

loc_16D:				; CODE XREF: _pkg_writeCharListWrap:loc_D8j
					; _pkg_writeCharListWrap+E1j ...
		lea	eax, [ebp+Dest]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		push	eax
		lea	ecx, [ebp+Dest]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_T_FileStream_write
		add	esp, 0Ch
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx		; Str
		call	_strlen
		add	esp, 4
		add	eax, [ebp+var_C]
		mov	[ebp+var_C], eax

loc_1A4:				; CODE XREF: _pkg_writeCharListWrap+3Fj
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax+4], 0
		jz	short loc_200
		cmp	[ebp+arg_8], 0
		jz	short loc_200
		cmp	[ebp+var_C], 3Ch ; '<'
		jle	short loc_1E3
		cmp	[ebp+Str], 0
		jz	short loc_1E3
		mov	[ebp+var_C], 0
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		push	eax
		mov	ecx, [ebp+Str]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_T_FileStream_write
		add	esp, 0Ch

loc_1E3:				; CODE XREF: _pkg_writeCharListWrap+1B7j
					; _pkg_writeCharListWrap+1BDj
		mov	eax, [ebp+arg_8]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_T_FileStream_write
		add	esp, 0Ch

loc_200:				; CODE XREF: _pkg_writeCharListWrap+1ABj
					; _pkg_writeCharListWrap+1B1j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+4]
		mov	[ebp+arg_4], ecx
		jmp	loc_2F
; ---------------------------------------------------------------------------

loc_20E:				; CODE XREF: _pkg_writeCharListWrap+33j
		xor	eax, eax
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN17
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_pkg_writeCharListWrap endp

; ---------------------------------------------------------------------------
		align 10h
$LN17		dd 1			; DATA XREF: _pkg_writeCharListWrap+214o
		dd offset $LN16
$LN16		dd 0FFFFFBECh, 400h	; DATA XREF: .text:00000244o
		dd offset $LN15		; "buffer"
$LN15		db 'buffer',0           ; DATA XREF: .text:00000250o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 25Ch
		public ??_C@_01BJJEKLCA@?$CC?$AA@
; char `string'[2]
??_C@_01BJJEKLCA@?$CC?$AA@ db '"',0     ; DATA XREF: _pkg_writeCharListWrap+F4o
					; _pkg_writeCharListWrap+159o ...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 260h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 264h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 268h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkg_writeCharList(int, int, char *Str, int)
		public _pkg_writeCharList
_pkg_writeCharList proc	near

var_4CC		= byte ptr -4CCh
var_409		= byte ptr -409h
Dest		= byte ptr -408h
Source		= byte ptr -407h
var_9		= byte ptr -9
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Str		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 4CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_4CC]
		mov	ecx, 133h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax

loc_290:				; CODE XREF: _pkg_writeCharList+1F6j
		cmp	[ebp+arg_4], 0
		jz	loc_463
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jz	loc_429
		push	1
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	esi, esp
		push	3FFh		; Count
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		push	eax		; Source
		lea	ecx, [ebp+Dest]
		push	ecx		; Dest
		call	dword ptr ds:__imp__strncpy
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_9], 0
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx		; Str
		call	_strlen
		add	esp, 4
		cmp	eax, 3FFh
		jb	short loc_33C
		mov	eax, ds:?__LINE__Var@?1??pkg_writeCharList@@9@9	; `pkg_writeCharList'::`2'::__LINE__Var
		add	eax, 0Bh
		mov	esi, esp
		push	eax
		push	offset ??_C@_0DE@BCCCKHNP@d?3?2mozilla?2intl?2icu?2source?2tools@ ; "d:\\mozilla\\intl\\icu\\source\\tools\\"...
		push	offset ??_C@_0EA@LCGHKMPN@?$CFs?3?$CFd?3?5Internal?5error?0?5line?5too?5@ ; "%s:%d: Internal error, line too long (g"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	0		; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_33C:				; CODE XREF: _pkg_writeCharList+89j
		cmp	[ebp+arg_C], 0
		jge	short loc_399
		lea	eax, [ebp+Dest]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		movsx	ecx, [ebp+eax+var_409]
		cmp	ecx, 22h ; '"'
		jnz	short loc_375
		lea	eax, [ebp+Dest]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		mov	[ebp+eax+var_409], 0

loc_375:				; CODE XREF: _pkg_writeCharList+F4j
		movsx	eax, [ebp+Dest]
		cmp	eax, 22h ; '"'
		jnz	short loc_397
		lea	eax, [ebp+Source]
		push	eax		; Source
		lea	ecx, [ebp+Dest]
		push	ecx		; Dest
		call	_strcpy
		add	esp, 8

loc_397:				; CODE XREF: _pkg_writeCharList+117j
		jmp	short loc_406
; ---------------------------------------------------------------------------

loc_399:				; CODE XREF: _pkg_writeCharList+D8j
		cmp	[ebp+arg_C], 0
		jle	short loc_406
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		movsx	edx, byte ptr [ecx]
		cmp	edx, 22h ; '"'
		jz	short loc_3D5
		push	offset ??_C@_01BJJEKLCA@?$CC?$AA@ ; "\""
		lea	eax, [ebp+Dest]
		push	eax		; Dest
		call	_strcpy
		add	esp, 8
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx		; Source
		lea	edx, [ebp+Dest]
		push	edx		; Dest
		call	_strcat
		add	esp, 8

loc_3D5:				; CODE XREF: _pkg_writeCharList+142j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx		; Str
		call	_strlen
		add	esp, 4
		mov	edx, [ebp+arg_4]
		mov	ecx, [edx]
		movsx	edx, byte ptr [ecx+eax-1]
		cmp	edx, 22h ; '"'
		jz	short loc_406
		push	offset ??_C@_01BJJEKLCA@?$CC?$AA@ ; "\""
		lea	eax, [ebp+Dest]
		push	eax		; Dest
		call	_strcat
		add	esp, 8

loc_406:				; CODE XREF: _pkg_writeCharList:loc_397j
					; _pkg_writeCharList+135j ...
		lea	eax, [ebp+Dest]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		push	eax
		lea	ecx, [ebp+Dest]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_T_FileStream_write
		add	esp, 0Ch

loc_429:				; CODE XREF: _pkg_writeCharList+38j
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax+4], 0
		jz	short loc_455
		cmp	[ebp+Str], 0
		jz	short loc_455
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		push	eax
		mov	ecx, [ebp+Str]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_T_FileStream_write
		add	esp, 0Ch

loc_455:				; CODE XREF: _pkg_writeCharList+1C8j
					; _pkg_writeCharList+1CEj
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+4]
		mov	[ebp+arg_4], ecx
		jmp	loc_290
; ---------------------------------------------------------------------------

loc_463:				; CODE XREF: _pkg_writeCharList+2Cj
		xor	eax, eax
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN17_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_pkg_writeCharList endp

; ---------------------------------------------------------------------------
$LN17_0		dd 1			; DATA XREF: _pkg_writeCharList+201o
		dd offset $LN16_0
$LN16_0		dd 0FFFFFBF8h, 400h	; DATA XREF: .text:00000498o
		dd offset $LN15_0	; "buffer"
$LN15_0		db 'buffer',0           ; DATA XREF: .text:000004A4o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 4B0h
		public ??_C@_0EA@LCGHKMPN@?$CFs?3?$CFd?3?5Internal?5error?0?5line?5too?5@
; char `string'[]
??_C@_0EA@LCGHKMPN@?$CFs?3?$CFd?3?5Internal?5error?0?5line?5too?5@ db '%s:%d: Internal error, line too long (greater than 1023 chars)',0Ah,0
					; DATA XREF: _pkg_writeCharList+9Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4F0h
		public ??_C@_0DE@BCCCKHNP@d?3?2mozilla?2intl?2icu?2source?2tools@
; `string'
??_C@_0DE@BCCCKHNP@d?3?2mozilla?2intl?2icu?2source?2tools@ db 'd:\mozilla\intl\icu\source\tools\pkgdata\pkgtypes.c',0
					; DATA XREF: _pkg_writeCharList+96o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 524h
		public ?__LINE__Var@?1??pkg_writeCharList@@9@9
; `pkg_writeCharList'::`2'::__LINE__Var
?__LINE__Var@?1??pkg_writeCharList@@9@9	dd 4Ah ; DATA XREF: _pkg_writeCharList+8Br
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 528h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _pkg_countCharList
_pkg_countCharList proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0

loc_54D:				; CODE XREF: _pkg_countCharList+3Dj
		cmp	[ebp+arg_0], 0
		jz	short loc_567
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+arg_0], ecx
		jmp	short loc_54D
; ---------------------------------------------------------------------------

loc_567:				; CODE XREF: _pkg_countCharList+29j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_pkg_countCharList endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 574h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _pkg_prependToList
_pkg_prependToList proc	near		; CODE XREF: _pkg_appendToList+6Dp
					; _pkg_appendToList+80p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	8
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_5A9
		xor	eax, eax
		jmp	short loc_5BD
; ---------------------------------------------------------------------------

loc_5A9:				; CODE XREF: _pkg_prependToList+2Fj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	[eax], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_8]

loc_5BD:				; CODE XREF: _pkg_prependToList+33j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_pkg_prependToList endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5D4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _pkg_appendToList
_pkg_appendToList proc near		; CODE XREF: _pkg_appendUniqueDirToList+165p

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		cmp	[ebp+arg_4], 0
		jnz	short loc_605
		lea	eax, [ebp+var_8]
		mov	[ebp+arg_4], eax

loc_605:				; CODE XREF: _pkg_appendToList+29j
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jnz	short loc_635
		cmp	[ebp+arg_0], 0
		jz	short loc_635
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax

loc_619:				; CODE XREF: _pkg_appendToList+57j
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+4], 0
		jz	short loc_62D
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	[ebp+var_14], ecx
		jmp	short loc_619
; ---------------------------------------------------------------------------

loc_62D:				; CODE XREF: _pkg_appendToList+4Cj
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_14]
		mov	[eax], ecx

loc_635:				; CODE XREF: _pkg_appendToList+37j
					; _pkg_appendToList+3Dj
		cmp	[ebp+arg_0], 0
		jnz	short loc_64E
		mov	eax, [ebp+arg_8]
		push	eax
		push	0
		call	_pkg_prependToList
		add	esp, 8
		mov	[ebp+arg_0], eax
		jmp	short loc_664
; ---------------------------------------------------------------------------

loc_64E:				; CODE XREF: _pkg_appendToList+65j
		mov	eax, [ebp+arg_8]
		push	eax
		push	0
		call	_pkg_prependToList
		add	esp, 8
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	[edx+4], eax

loc_664:				; CODE XREF: _pkg_appendToList+78j
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jz	short loc_67B
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_4]
		mov	eax, [ecx+4]
		mov	[edx], eax
		jmp	short loc_683
; ---------------------------------------------------------------------------

loc_67B:				; CODE XREF: _pkg_appendToList+96j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx

loc_683:				; CODE XREF: _pkg_appendToList+A5j
		mov	eax, [ebp+arg_0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN13
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_pkg_appendToList endp

; ---------------------------------------------------------------------------
		align 4
$LN13		dd 1			; DATA XREF: _pkg_appendToList+B6o
		dd offset $LN12
$LN12		dd 0FFFFFFF8h, 4	; DATA XREF: .text:000006B0o
		dd offset $LN11		; "endptr"
$LN11		db 'endptr',0           ; DATA XREF: .text:000006BCo
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6C8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl convertToNativePathSeparators(char *Str)
		public _convertToNativePathSeparators
_convertToNativePathSeparators proc near ; CODE	XREF: _pkg_appendUniqueDirToList+12Bp

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
Str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd

loc_6E6:				; CODE XREF: _convertToNativePathSeparators+45j
		mov	esi, esp
		push	2Fh ; '/'       ; Val
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	dword ptr ds:__imp__strchr
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_70F
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5Ch ; '\'
		jmp	short loc_6E6
; ---------------------------------------------------------------------------

loc_70F:				; CODE XREF: _convertToNativePathSeparators+3Dj
		mov	eax, [ebp+Str]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_convertToNativePathSeparators endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 728h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkg_appendUniqueDirToList(int, int, char *Str)
		public _pkg_appendUniqueDirToList
_pkg_appendUniqueDirToList proc	near

var_4E4		= byte ptr -4E4h
var_420		= dword	ptr -420h
var_414		= dword	ptr -414h
Dest		= byte ptr -408h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Str		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 4E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_4E4]
		mov	ecx, 139h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	esi, esp
		push	5Ch ; '\'       ; Ch
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	dword ptr ds:__imp__strrchr
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_414], eax
		mov	esi, esp
		push	2Fh ; '/'       ; Ch
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	dword ptr ds:__imp__strrchr
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_420], eax
		cmp	[ebp+var_414], 0
		jz	short loc_7AC
		cmp	[ebp+var_420], 0
		jz	short loc_7B8
		mov	eax, [ebp+var_420]
		cmp	eax, [ebp+var_414]
		jbe	short loc_7B8

loc_7AC:				; CODE XREF: _pkg_appendUniqueDirToList+6Bj
		mov	eax, [ebp+var_420]
		mov	[ebp+var_414], eax

loc_7B8:				; CODE XREF: _pkg_appendUniqueDirToList+74j
					; _pkg_appendUniqueDirToList+82j
		cmp	[ebp+var_414], 0
		jnz	short loc_7C9
		mov	eax, [ebp+arg_0]
		jmp	loc_89C
; ---------------------------------------------------------------------------

loc_7C9:				; CODE XREF: _pkg_appendUniqueDirToList+97j
		mov	eax, [ebp+var_414]
		sub	eax, [ebp+Str]
		cmp	eax, 400h
		jb	short loc_814
		mov	esi, esp
		mov	eax, [ebp+Str]
		push	eax
		push	400h
		push	offset ??_C@_0CG@LLLLPABP@?$CD?$CD?5ERR?3?5Path?5too?5long?5?$FL?$CFd?5chars?$FN@ ; "##	ERR: Path too long [%d chars]: %s\n"
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		jmp	loc_89C
; ---------------------------------------------------------------------------

loc_814:				; CODE XREF: _pkg_appendUniqueDirToList+AFj
		mov	eax, [ebp+var_414]
		sub	eax, [ebp+Str]
		mov	esi, esp
		push	eax		; Count
		mov	ecx, [ebp+Str]
		push	ecx		; Source
		lea	edx, [ebp+Dest]
		push	edx		; Dest
		call	dword ptr ds:__imp__strncpy
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_414]
		sub	eax, [ebp+Str]
		mov	[ebp+eax+Dest],	0
		lea	eax, [ebp+Dest]
		push	eax		; Str
		call	_convertToNativePathSeparators
		add	esp, 4
		lea	eax, [ebp+Dest]
		push	eax		; Str2
		mov	ecx, [ebp+arg_0]
		push	ecx		; int
		call	_pkg_listContains
		add	esp, 8
		movsx	edx, al
		test	edx, edx
		jnz	short loc_899
		lea	eax, [ebp+Dest]
		push	eax
		call	_uprv_strdup_56
		add	esp, 4
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_pkg_appendToList
		add	esp, 0Ch
		jmp	short loc_89C
; ---------------------------------------------------------------------------
		jmp	short loc_89C
; ---------------------------------------------------------------------------

loc_899:				; CODE XREF: _pkg_appendUniqueDirToList+14Bj
		mov	eax, [ebp+arg_0]

loc_89C:				; CODE XREF: _pkg_appendUniqueDirToList+9Cj
					; _pkg_appendUniqueDirToList+E7j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN11_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_pkg_appendUniqueDirToList endp

; ---------------------------------------------------------------------------
		align 4
$LN11_0		dd 1			; DATA XREF: _pkg_appendUniqueDirToList+178o
		dd offset $LN10
$LN10		dd 0FFFFFBF8h, 400h	; DATA XREF: .text:000008D0o
		dd offset $LN9		; "aBuf"
$LN9		db 'aBuf',0             ; DATA XREF: .text:000008DCo
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8E8h
		public ??_C@_0CG@LLLLPABP@?$CD?$CD?5ERR?3?5Path?5too?5long?5?$FL?$CFd?5chars?$FN@
; char `string'[]
??_C@_0CG@LLLLPABP@?$CD?$CD?5ERR?3?5Path?5too?5long?5?$FL?$CFd?5chars?$FN@ db '## ERR: Path too long [%d chars]: %s',0Ah,0
					; DATA XREF: _pkg_appendUniqueDirToList+BCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 910h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _pkg_deleteList
_pkg_deleteList	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd

loc_92E:				; CODE XREF: _pkg_deleteList+4Dj
		cmp	[ebp+arg_0], 0
		jz	short loc_95F
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	_uprv_free_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+arg_0], ecx
		mov	eax, [ebp+var_8]
		push	eax
		call	_uprv_free_56
		add	esp, 4
		jmp	short loc_92E
; ---------------------------------------------------------------------------

loc_95F:				; CODE XREF: _pkg_deleteList+22j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_pkg_deleteList	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 974h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkg_listContains(int, char *Str2)
		public _pkg_listContains
_pkg_listContains proc near		; CODE XREF: _pkg_appendUniqueDirToList+13Ep

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
Str2		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		jmp	short loc_99D
; ---------------------------------------------------------------------------

loc_994:				; CODE XREF: _pkg_listContains:loc_9BDj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+arg_0], ecx

loc_99D:				; CODE XREF: _pkg_listContains+1Ej
		cmp	[ebp+arg_0], 0
		jz	short loc_9BF
		mov	eax, [ebp+Str2]
		push	eax		; Str2
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		push	edx		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_9BD
		mov	al, 1
		jmp	short loc_9C1
; ---------------------------------------------------------------------------

loc_9BD:				; CODE XREF: _pkg_listContains+43j
		jmp	short loc_994
; ---------------------------------------------------------------------------

loc_9BF:				; CODE XREF: _pkg_listContains+2Dj
		xor	al, al

loc_9C1:				; CODE XREF: _pkg_listContains+47j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_pkg_listContains endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _T_FileStream_write:near ; CODE XREF: _pkg_writeCharListWrap+188p
					; _pkg_writeCharListWrap+1DBp ...
; char *__cdecl	strcat(char *Dest, const char *Source)
		extrn _strcat:near	; CODE XREF: _pkg_writeCharListWrap+165p
					; _pkg_writeCharList+165p ...
; char *__cdecl	_strncat(char *Dest, const char	*Source, size_t	Count)
		extrn __imp__strncat:near ; CODE XREF: _pkg_writeCharListWrap+12Cp
					; DATA XREF: _pkg_writeCharListWrap+12Cr
; char *__cdecl	strcpy(char *Dest, const char *Source)
		extrn _strcpy:near	; CODE XREF: _pkg_writeCharListWrap+D0p
					; _pkg_writeCharListWrap+100p ...
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: _pkg_writeCharListWrap+8Ap
					; _pkg_writeCharListWrap+A6p ...
; char *__cdecl	_strncpy(char *Dest, const char	*Source, size_t	Count)
		extrn __imp__strncpy:near ; CODE XREF: _pkg_writeCharListWrap+69p
					; _pkg_writeCharList+62p ...
		extrn _uprv_checkValidMemory:near ; CODE XREF: _pkg_writeCharListWrap+4Dp
					; _pkg_writeCharListWrap+110p ...
		extrn ___security_cookie:near ;	DATA XREF: _pkg_writeCharListWrap+1Er
					; _pkg_writeCharList+1Er ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _pkg_writeCharListWrap+229p
					; _pkg_writeCharList+216p ...
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _pkg_writeCharListWrap+21Ap
					; _pkg_writeCharList+207p ...
		extrn __RTC_CheckEsp:near ; CODE XREF: _pkg_writeCharListWrap+74p
					; _pkg_writeCharListWrap+137p ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _pkg_writeCharList+C7p
					; DATA XREF: _pkg_writeCharList+C7r
; int _fprintf(FILE *File, const char *Format, ...)
		extrn __imp__fprintf:near ; CODE XREF: _pkg_writeCharList+B3p
					; _pkg_appendUniqueDirToList+D4p
					; DATA XREF: ...
; FILE *__cdecl	___iob_func()
		extrn __imp____iob_func:near ; CODE XREF: _pkg_writeCharList+A2p
					; _pkg_appendUniqueDirToList+C3p
					; DATA XREF: ...
		extrn _uprv_malloc_56:near ; CODE XREF:	_pkg_prependToList+20p
; char *__cdecl	_strchr(const char *Str, int Val)
		extrn __imp__strchr:near ; CODE	XREF: _convertToNativePathSeparators+26p
					; DATA XREF: _convertToNativePathSeparators+26r
		extrn _uprv_strdup_56:near ; CODE XREF:	_pkg_appendUniqueDirToList+154p
; char *__cdecl	_strrchr(const char *Str, int Ch)
		extrn __imp__strrchr:near ; CODE XREF: _pkg_appendUniqueDirToList+30p
					; _pkg_appendUniqueDirToList+4Ep
					; DATA XREF: ...
		extrn _uprv_free_56:near ; CODE	XREF: _pkg_deleteList+2Ap
					; _pkg_deleteList+45p
; int __cdecl strcmp(const char	*Str1, const char *Str2)
		extrn _strcmp:near	; CODE XREF: _pkg_listContains+39p


		end
