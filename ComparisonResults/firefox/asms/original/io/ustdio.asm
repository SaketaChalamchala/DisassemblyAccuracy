; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\io\ustdio.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_DELIMITERS DW	0dH
	DW	0aH
	DW	00H
	ORG $+2
_DELIMITERS_LEN DD 02H
CONST	ENDS
PUBLIC	_ufile_flush_translit_56
PUBLIC	_u_fsettransliterator_56
EXTRN	_uprv_malloc_56:PROC
EXTRN	_uprv_free_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\io\ustdio.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _u_fsettransliterator_56
_TEXT	SEGMENT
_old$ = -8						; size = 4
_file$ = 8						; size = 4
_direction$ = 12					; size = 4
_adopt$ = 16						; size = 4
_status$ = 20						; size = 4
_u_fsettransliterator_56 PROC				; COMDAT
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 68
	mov	DWORD PTR _old$[ebp], 0
; Line 70
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN9@u_fsettran
; Line 72
	mov	eax, DWORD PTR _adopt$[ebp]
	jmp	$LN10@u_fsettran
$LN9@u_fsettran:
; Line 75
	cmp	DWORD PTR _file$[ebp], 0
	jne	SHORT $LN8@u_fsettran
; Line 77
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 78
	mov	eax, DWORD PTR _adopt$[ebp]
	jmp	$LN10@u_fsettran
$LN8@u_fsettran:
; Line 81
	mov	eax, DWORD PTR _direction$[ebp]
	and	eax, 1
	je	SHORT $LN7@u_fsettran
; Line 84
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 85
	mov	eax, DWORD PTR _adopt$[ebp]
	jmp	$LN10@u_fsettran
$LN7@u_fsettran:
; Line 88
	cmp	DWORD PTR _adopt$[ebp], 0
	jne	SHORT $LN6@u_fsettran
; Line 90
	mov	eax, DWORD PTR _file$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@u_fsettran
; Line 93
	mov	eax, DWORD PTR _file$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _old$[ebp], edx
; Line 94
	mov	eax, DWORD PTR _file$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_uprv_free_56
	add	esp, 4
; Line 95
	mov	eax, DWORD PTR _file$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0
; Line 96
	mov	eax, DWORD PTR _file$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 97
	mov	eax, DWORD PTR _file$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@u_fsettran:
; Line 100
	jmp	$LN4@u_fsettran
$LN6@u_fsettran:
; Line 102
	mov	eax, DWORD PTR _file$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@u_fsettran
; Line 104
	push	20					; 00000014H
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _file$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 105
	mov	eax, DWORD PTR _file$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@u_fsettran
; Line 107
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 108
	mov	eax, DWORD PTR _adopt$[ebp]
	jmp	SHORT $LN10@u_fsettran
$LN2@u_fsettran:
; Line 110
	mov	eax, DWORD PTR _file$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], 0
; Line 111
	mov	eax, DWORD PTR _file$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], 0
; Line 112
	mov	eax, DWORD PTR _file$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], 0
; Line 113
	mov	eax, DWORD PTR _file$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0
; Line 115
	jmp	SHORT $LN1@u_fsettran
$LN3@u_fsettran:
; Line 117
	mov	eax, DWORD PTR _file$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _old$[ebp], edx
; Line 118
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_ufile_flush_translit_56
	add	esp, 4
$LN1@u_fsettran:
; Line 121
	mov	eax, DWORD PTR _file$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _adopt$[ebp]
	mov	DWORD PTR [ecx+16], edx
$LN4@u_fsettran:
; Line 124
	mov	eax, DWORD PTR _old$[ebp]
$LN10@u_fsettran:
; Line 125
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_fsettransliterator_56 ENDP
_TEXT	ENDS
PUBLIC	_u_file_write_flush_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufile_flush_translit_56
_TEXT	SEGMENT
_f$ = 8							; size = 4
_ufile_flush_translit_56 PROC				; COMDAT
; Line 234
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 236
	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN1@ufile_flus
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@ufile_flus
$LN1@ufile_flus:
; Line 237
	jmp	SHORT $LN3@ufile_flus
$LN2@ufile_flus:
; Line 240
	push	1
	push	0
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	push	0
	push	0
	call	_u_file_write_flush_56
	add	esp, 20					; 00000014H
$LN3@ufile_flus:
; Line 241
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ufile_flush_translit_56 ENDP
_TEXT	ENDS
PUBLIC	_ufile_flush_io_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufile_flush_io_56
_TEXT	SEGMENT
_f$ = 8							; size = 4
_ufile_flush_io_56 PROC					; COMDAT
; Line 246
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 247
	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN1@ufile_flus@2
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@ufile_flus@2
$LN1@ufile_flus@2:
; Line 248
	jmp	SHORT $LN3@ufile_flus@2
$LN2@ufile_flus@2:
; Line 251
	push	0
	push	1
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	push	0
	push	0
	call	_u_file_write_flush_56
	add	esp, 20					; 00000014H
$LN3@ufile_flus@2:
; Line 252
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ufile_flush_io_56 ENDP
_TEXT	ENDS
PUBLIC	_ufile_close_translit_56
EXTRN	_utrans_close_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufile_close_translit_56
_TEXT	SEGMENT
_f$ = 8							; size = 4
_ufile_close_translit_56 PROC				; COMDAT
; Line 257
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 259
	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN3@ufile_clos
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@ufile_clos
$LN3@ufile_clos:
; Line 260
	jmp	SHORT $LN5@ufile_clos
$LN4@ufile_clos:
; Line 263
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_ufile_flush_translit_56
	add	esp, 4
; Line 266
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN2@ufile_clos
; Line 267
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_utrans_close_56
	add	esp, 4
$LN2@ufile_clos:
; Line 269
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@ufile_clos
; Line 271
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_uprv_free_56
	add	esp, 4
$LN1@ufile_clos:
; Line 274
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 275
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@ufile_clos:
; Line 277
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ufile_close_translit_56 ENDP
_TEXT	ENDS
PUBLIC	_u_file_write_56
PUBLIC	_u_fputs_56
EXTRN	_u_strlen_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_fputs_56
_TEXT	SEGMENT
_count$ = -8						; size = 4
_s$ = 8							; size = 4
_f$ = 12						; size = 4
_u_fputs_56 PROC					; COMDAT
; Line 285
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 286
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_strlen_56
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_u_file_write_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _count$[ebp], eax
; Line 287
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _DELIMITERS_LEN
	push	ecx
	push	OFFSET _DELIMITERS
	call	_u_file_write_56
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 288
	mov	eax, DWORD PTR _count$[ebp]
; Line 289
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_fputs_56 ENDP
_TEXT	ENDS
PUBLIC	_u_fputc_56
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_fputc_56
_TEXT	SEGMENT
tv90 = -232						; size = 4
_isError$ = -29						; size = 1
_idx$ = -20						; size = 4
_buf$ = -8						; size = 4
_uc$ = 8						; size = 4
_f$ = 12						; size = 4
_u_fputc_56 PROC					; COMDAT
; Line 294
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 296
	mov	DWORD PTR _idx$[ebp], 0
; Line 297
	mov	BYTE PTR _isError$[ebp], 0
; Line 299
	cmp	DWORD PTR _uc$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN5@u_fputc_56
	mov	eax, DWORD PTR _idx$[ebp]
	mov	cx, WORD PTR _uc$[ebp]
	mov	WORD PTR _buf$[ebp+eax*2], cx
	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, 1
	mov	DWORD PTR _idx$[ebp], edx
	jmp	SHORT $LN4@u_fputc_56
$LN5@u_fputc_56:
	cmp	DWORD PTR _uc$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN3@u_fputc_56
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	cmp	eax, 2
	jae	SHORT $LN3@u_fputc_56
	mov	eax, DWORD PTR _uc$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	WORD PTR _buf$[ebp+ecx*2], ax
	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, 1
	mov	DWORD PTR _idx$[ebp], edx
	mov	eax, DWORD PTR _uc$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	WORD PTR _buf$[ebp+ecx*2], ax
	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, 1
	mov	DWORD PTR _idx$[ebp], edx
	jmp	SHORT $LN4@u_fputc_56
$LN3@u_fputc_56:
	mov	BYTE PTR _isError$[ebp], 1
$LN4@u_fputc_56:
; Line 300
	movsx	eax, BYTE PTR _isError$[ebp]
	test	eax, eax
	je	SHORT $LN1@u_fputc_56
; Line 301
	mov	eax, 65535				; 0000ffffH
	jmp	SHORT $LN6@u_fputc_56
$LN1@u_fputc_56:
; Line 303
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_u_file_write_56
	add	esp, 12					; 0000000cH
	cmp	eax, DWORD PTR _idx$[ebp]
	jne	SHORT $LN8@u_fputc_56
	mov	eax, DWORD PTR _uc$[ebp]
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN9@u_fputc_56
$LN8@u_fputc_56:
	mov	DWORD PTR tv90[ebp], 65535		; 0000ffffH
$LN9@u_fputc_56:
	mov	eax, DWORD PTR tv90[ebp]
$LN6@u_fputc_56:
; Line 304
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@u_fputc_56
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@u_fputc_56:
	DD	1
	DD	$LN11@u_fputc_56
$LN11@u_fputc_56:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@u_fputc_56
$LN10@u_fputc_56:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_u_fputc_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__fwrite:PROC
EXTRN	_u_UCharsToChars_56:PROC
EXTRN	_ucnv_fromUnicode_56:PROC
EXTRN	_u_strncpy_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_file_write_flush_56
_TEXT	SEGMENT
tv86 = -1340						; size = 4
_convertChars$13551 = -1140				; size = 4
_charsLeft$13541 = -1128				; size = 4
_numConverted$ = -1116					; size = 4
_written$ = -1104					; size = 4
_myTarget$ = -1092					; size = 4
_charBuffer$ = -1080					; size = 1024
_mySourceEnd$ = -48					; size = 4
_mySourceBegin$ = -36					; size = 4
_mySource$ = -24					; size = 4
_status$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_chars$ = 8						; size = 4
_count$ = 12						; size = 4
_f$ = 16						; size = 4
_flushIO$ = 20						; size = 1
_flushTranslit$ = 24					; size = 1
_u_file_write_flush_56 PROC				; COMDAT
; Line 313
	push	ebp
	mov	ebp, esp
	sub	esp, 1340				; 0000053cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1340]
	mov	ecx, 335				; 0000014fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 315
	mov	DWORD PTR _status$[ebp], 0
; Line 316
	mov	eax, DWORD PTR _chars$[ebp]
	mov	DWORD PTR _mySource$[ebp], eax
; Line 320
	lea	eax, DWORD PTR _charBuffer$[ebp]
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 321
	mov	DWORD PTR _written$[ebp], 0
; Line 322
	mov	DWORD PTR _numConverted$[ebp], 0
; Line 324
	cmp	DWORD PTR _count$[ebp], 0
	jge	SHORT $LN11@u_file_wri
; Line 325
	mov	eax, DWORD PTR _chars$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _count$[ebp], eax
$LN11@u_file_wri:
; Line 329
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN10@u_file_wri
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN10@u_file_wri
; Line 332
	movzx	eax, BYTE PTR _flushTranslit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _chars$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_u_file_translit
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mySource$[ebp], eax
$LN10@u_file_wri:
; Line 337
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN9@u_file_wri
; Line 338
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+12]
	sar	edx, 1
	mov	DWORD PTR _charsLeft$13541[ebp], edx
; Line 339
	movsx	eax, BYTE PTR _flushIO$[ebp]
	test	eax, eax
	je	SHORT $LN8@u_file_wri
	mov	eax, DWORD PTR _charsLeft$13541[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jle	SHORT $LN8@u_file_wri
; Line 340
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN8@u_file_wri:
; Line 342
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _charsLeft$13541[ebp]
	jge	SHORT $LN14@u_file_wri
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN15@u_file_wri
$LN14@u_file_wri:
	mov	edx, DWORD PTR _charsLeft$13541[ebp]
	mov	DWORD PTR tv86[ebp], edx
$LN15@u_file_wri:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR _written$[ebp], eax
; Line 343
	mov	eax, DWORD PTR _written$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mySource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_u_strncpy_56
	add	esp, 12					; 0000000cH
; Line 344
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _written$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 345
	mov	eax, DWORD PTR _written$[ebp]
	jmp	$LN12@u_file_wri
$LN9@u_file_wri:
; Line 348
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _mySourceEnd$[ebp], edx
$LN7@u_file_wri:
; Line 352
	mov	eax, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR _mySourceBegin$[ebp], eax
; Line 353
	mov	DWORD PTR _status$[ebp], 0
; Line 354
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@u_file_wri
; Line 362
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _flushIO$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _mySourceEnd$[ebp]
	push	edx
	lea	eax, DWORD PTR _mySource$[ebp]
	push	eax
	lea	ecx, DWORD PTR _charBuffer$[ebp+1024]
	push	ecx
	lea	edx, DWORD PTR _myTarget$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_ucnv_fromUnicode_56
	add	esp, 32					; 00000020H
; Line 363
	jmp	SHORT $LN3@u_file_wri
$LN4@u_file_wri:
; Line 364
	mov	eax, DWORD PTR _mySourceEnd$[ebp]
	sub	eax, DWORD PTR _mySource$[ebp]
	sar	eax, 1
	mov	DWORD PTR _convertChars$13551[ebp], eax
; Line 365
	cmp	DWORD PTR _convertChars$13551[ebp], 1024 ; 00000400H
	jle	SHORT $LN2@u_file_wri
; Line 366
	mov	DWORD PTR _convertChars$13551[ebp], 1024 ; 00000400H
; Line 367
	mov	DWORD PTR _status$[ebp], 15		; 0000000fH
$LN2@u_file_wri:
; Line 369
	mov	eax, DWORD PTR _convertChars$13551[ebp]
	push	eax
	mov	ecx, DWORD PTR _myTarget$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	push	edx
	call	_u_UCharsToChars_56
	add	esp, 12					; 0000000cH
; Line 370
	mov	eax, DWORD PTR _convertChars$13551[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _mySource$[ebp], edx
; Line 371
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, DWORD PTR _convertChars$13551[ebp]
	mov	DWORD PTR _myTarget$[ebp], eax
$LN3@u_file_wri:
; Line 373
	mov	eax, DWORD PTR _myTarget$[ebp]
	lea	ecx, DWORD PTR _charBuffer$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _numConverted$[ebp], eax
; Line 375
	cmp	DWORD PTR _numConverted$[ebp], 0
	jle	SHORT $LN1@u_file_wri
; Line 380
	mov	esi, esp
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _numConverted$[ebp]
	push	edx
	push	1
	lea	eax, DWORD PTR _charBuffer$[ebp]
	push	eax
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 382
	mov	eax, DWORD PTR _mySource$[ebp]
	sub	eax, DWORD PTR _mySourceBegin$[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _written$[ebp]
	mov	DWORD PTR _written$[ebp], eax
$LN1@u_file_wri:
; Line 384
	lea	eax, DWORD PTR _charBuffer$[ebp]
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 386
	cmp	DWORD PTR _status$[ebp], 15		; 0000000fH
	je	$LN7@u_file_wri
; Line 389
	mov	eax, DWORD PTR _written$[ebp]
$LN12@u_file_wri:
; Line 390
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@u_file_wri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1340				; 0000053cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@u_file_wri:
	DD	4
	DD	$LN20@u_file_wri
$LN20@u_file_wri:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@u_file_wri
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@u_file_wri
	DD	-1080					; fffffbc8H
	DD	1024					; 00000400H
	DD	$LN18@u_file_wri
	DD	-1092					; fffffbbcH
	DD	4
	DD	$LN19@u_file_wri
$LN19@u_file_wri:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN18@u_file_wri:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN17@u_file_wri:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN16@u_file_wri:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_u_file_write_flush_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_utrans_transUChars_56:PROC
EXTRN	_utrans_transIncrementalUChars_56:PROC
EXTRN	_uprv_realloc_56:PROC
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_file_translit
_TEXT	SEGMENT
_status$ = -84						; size = 4
_pos$ = -72						; size = 16
_textLimit$ = -48					; size = 4
_textLength$ = -36					; size = 4
_junkCount$ = -24					; size = 4
_newlen$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 4
_src$ = 12						; size = 4
_count$ = 16						; size = 4
_flush$ = 20						; size = 1
_u_file_translit PROC					; COMDAT
; Line 128
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 130
	mov	DWORD PTR _junkCount$[ebp], 0
; Line 134
	mov	DWORD PTR _status$[ebp], 0
; Line 136
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN10@u_file_tra
; Line 138
	lea	eax, DWORD PTR _junkCount$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN10@u_file_tra:
; Line 141
	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN8@u_file_tra
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN8@u_file_tra
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN9@u_file_tra
$LN8@u_file_tra:
; Line 144
	mov	eax, DWORD PTR _src$[ebp]
	jmp	$LN11@u_file_tra
$LN9@u_file_tra:
; Line 148
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+12]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN7@u_file_tra
; Line 151
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+12]
	sub	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@u_file_tra:
; Line 153
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+12]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+12], ecx
; Line 154
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], 0
; Line 157
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR [ecx+12]
	shl	eax, 2
	mov	DWORD PTR _newlen$[ebp], eax
; Line 159
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _newlen$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN6@u_file_tra
; Line 161
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN5@u_file_tra
; Line 163
	mov	eax, DWORD PTR _newlen$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
; Line 165
	jmp	SHORT $LN4@u_file_tra
$LN5@u_file_tra:
; Line 167
	mov	eax, DWORD PTR _newlen$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_uprv_realloc_56
	add	esp, 8
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
$LN4@u_file_tra:
; Line 170
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN3@u_file_tra
; Line 171
	xor	eax, eax
	jmp	$LN11@u_file_tra
$LN3@u_file_tra:
; Line 173
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _newlen$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN6@u_file_tra:
; Line 179
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+edx*2]
	push	ecx
	call	_u_strncpy_56
	add	esp, 12					; 0000000cH
; Line 180
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _count$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
; Line 183
	movsx	eax, BYTE PTR _flush$[ebp]
	test	eax, eax
	jne	SHORT $LN2@u_file_tra
; Line 185
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _textLength$[ebp], edx
; Line 186
	mov	DWORD PTR _pos$[ebp], 0
; Line 187
	mov	eax, DWORD PTR _textLength$[ebp]
	mov	DWORD PTR _pos$[ebp+4], eax
; Line 188
	mov	DWORD PTR _pos$[ebp+8], 0
; Line 189
	mov	eax, DWORD PTR _textLength$[ebp]
	mov	DWORD PTR _pos$[ebp+12], eax
; Line 196
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _textLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_utrans_transIncrementalUChars_56
	add	esp, 24					; 00000018H
; Line 200
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp+8]
	mov	DWORD PTR [eax], ecx
; Line 201
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
; Line 202
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp+12]
	mov	DWORD PTR [ecx+12], edx
; Line 204
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN11@u_file_tra
; Line 206
	jmp	SHORT $LN11@u_file_tra
$LN2@u_file_tra:
; Line 208
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _textLength$[ebp], edx
; Line 209
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _textLimit$[ebp], edx
; Line 217
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _textLimit$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _textLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_utrans_transUChars_56
	add	esp, 28					; 0000001cH
; Line 220
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _textLimit$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 223
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], 0
; Line 224
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], 0
; Line 226
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
$LN11@u_file_tra:
; Line 228
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@u_file_tra
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN19@u_file_tra:
	DD	5
	DD	$LN18@u_file_tra
$LN18@u_file_tra:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN13@u_file_tra
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@u_file_tra
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN15@u_file_tra
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN16@u_file_tra
	DD	-84					; ffffffacH
	DD	4
	DD	$LN17@u_file_tra
$LN17@u_file_tra:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN16@u_file_tra:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN15@u_file_tra:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN14@u_file_tra:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN13@u_file_tra:
	DB	106					; 0000006aH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_u_file_translit ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _u_file_write_56
_TEXT	SEGMENT
_chars$ = 8						; size = 4
_count$ = 12						; size = 4
_f$ = 16						; size = 4
_u_file_write_56 PROC					; COMDAT
; Line 396
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 397
	push	0
	push	0
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _chars$[ebp]
	push	edx
	call	_u_file_write_flush_56
	add	esp, 20					; 00000014H
; Line 398
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_file_write_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ufile_fill_uchar_buffer_56
EXTRN	_u_charsToUChars_56:PROC
EXTRN	_ucnv_toUnicode_56:PROC
EXTRN	__imp__feof:PROC
EXTRN	__imp__fread:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__fgets:PROC
EXTRN	_ucnv_getMinCharSize_56:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufile_fill_uchar_buffer_56
_TEXT	SEGMENT
tv140 = -1364						; size = 4
tv135 = -1364						; size = 4
tv129 = -1364						; size = 4
tv89 = -1364						; size = 4
_retStr$13587 = -1164					; size = 4
_str$ = -1152						; size = 4
_charBuffer$ = -1140					; size = 1024
_dataSize$ = -108					; size = 4
_availLength$ = -96					; size = 4
_bytesRead$ = -84					; size = 4
_maxCPBytes$ = -72					; size = 4
_bufferSize$ = -60					; size = 4
_myTarget$ = -48					; size = 4
_mySourceEnd$ = -36					; size = 4
_mySource$ = -24					; size = 4
_status$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 4
_ufile_fill_uchar_buffer_56 PROC			; COMDAT
; Line 404
	push	ebp
	mov	ebp, esp
	sub	esp, 1364				; 00000554H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1364]
	mov	ecx, 341				; 00000155H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 417
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@ufile_fill
; Line 419
	jmp	$LN8@ufile_fill
$LN7@ufile_fill:
; Line 422
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _str$[ebp], eax
; Line 423
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 1
	mov	DWORD PTR _dataSize$[ebp], edx
; Line 424
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax+2104], 0
	jne	SHORT $LN6@ufile_fill
	cmp	DWORD PTR _dataSize$[ebp], 0
	jle	SHORT $LN6@ufile_fill
; Line 426
	jmp	$LN8@ufile_fill
$LN6@ufile_fill:
; Line 430
	cmp	DWORD PTR _dataSize$[ebp], 0
	je	SHORT $LN5@ufile_fill
; Line 431
	push	1
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _dataSize$[ebp]
	shl	edx, 1
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@ufile_fill:
; Line 436
	mov	eax, 1024				; 00000400H
	sub	eax, DWORD PTR _dataSize$[ebp]
	mov	DWORD PTR _availLength$[ebp], eax
; Line 440
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN10@ufile_fill
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_ucnv_getMinCharSize_56
	add	esp, 4
	movsx	eax, al
	shl	eax, 1
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN11@ufile_fill
$LN10@ufile_fill:
	mov	DWORD PTR tv89[ebp], 1
$LN11@ufile_fill:
	mov	eax, DWORD PTR _availLength$[ebp]
	cdq
	idiv	DWORD PTR tv89[ebp]
	mov	DWORD PTR _maxCPBytes$[ebp], eax
; Line 443
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax+2104], 0
	jne	$LN4@ufile_fill
; Line 445
	cmp	DWORD PTR _maxCPBytes$[ebp], 1024	; 00000400H
	jge	SHORT $LN12@ufile_fill
	mov	eax, DWORD PTR _maxCPBytes$[ebp]
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN13@ufile_fill
$LN12@ufile_fill:
	mov	DWORD PTR tv129[ebp], 1024		; 00000400H
$LN13@ufile_fill:
	mov	esi, esp
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR tv129[ebp]
	push	eax
	lea	ecx, DWORD PTR _charBuffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__fgets
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _retStr$13587[ebp], eax
; Line 446
	cmp	DWORD PTR _retStr$13587[ebp], 0
	je	SHORT $LN14@ufile_fill
	lea	eax, DWORD PTR _charBuffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN15@ufile_fill
$LN14@ufile_fill:
	mov	DWORD PTR tv135[ebp], 0
$LN15@ufile_fill:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR _bytesRead$[ebp], ecx
; Line 448
	jmp	SHORT $LN3@ufile_fill
$LN4@ufile_fill:
; Line 453
	cmp	DWORD PTR _maxCPBytes$[ebp], 1024	; 00000400H
	jge	SHORT $LN16@ufile_fill
	mov	eax, DWORD PTR _maxCPBytes$[ebp]
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN17@ufile_fill
$LN16@ufile_fill:
	mov	DWORD PTR tv140[ebp], 1024		; 00000400H
$LN17@ufile_fill:
	mov	esi, esp
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR tv140[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _charBuffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__fread
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bytesRead$[ebp], eax
$LN3@ufile_fill:
; Line 457
	mov	DWORD PTR _status$[ebp], 0
; Line 458
	lea	eax, DWORD PTR _charBuffer$[ebp]
	mov	DWORD PTR _mySource$[ebp], eax
; Line 459
	mov	eax, DWORD PTR _bytesRead$[ebp]
	lea	ecx, DWORD PTR _charBuffer$[ebp+eax]
	mov	DWORD PTR _mySourceEnd$[ebp], ecx
; Line 460
	mov	eax, DWORD PTR _dataSize$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+52]
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 461
	mov	DWORD PTR _bufferSize$[ebp], 1024	; 00000400H
; Line 463
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@ufile_fill
; Line 472
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	esi, esp
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__feof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	setne	al
	movzx	ecx, al
	push	ecx
	push	0
	mov	edx, DWORD PTR _mySourceEnd$[ebp]
	push	edx
	lea	eax, DWORD PTR _mySource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+52]
	push	eax
	lea	ecx, DWORD PTR _myTarget$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_ucnv_toUnicode_56
	add	esp, 32					; 00000020H
; Line 474
	jmp	SHORT $LN1@ufile_fill
$LN2@ufile_fill:
; Line 475
	mov	eax, DWORD PTR _bytesRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _myTarget$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	push	edx
	call	_u_charsToUChars_56
	add	esp, 12					; 0000000cH
; Line 476
	mov	eax, DWORD PTR _bytesRead$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _myTarget$[ebp], edx
$LN1@ufile_fill:
; Line 480
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
; Line 481
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN8@ufile_fill:
; Line 482
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@ufile_fill
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1364				; 00000554H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@ufile_fill:
	DD	4
	DD	$LN22@ufile_fill
$LN22@ufile_fill:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN18@ufile_fill
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN19@ufile_fill
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN20@ufile_fill
	DD	-1140					; fffffb8cH
	DD	1024					; 00000400H
	DD	$LN21@ufile_fill
$LN21@ufile_fill:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN20@ufile_fill:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN19@ufile_fill:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN18@ufile_fill:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_ufile_fill_uchar_buffer_56 ENDP
_TEXT	ENDS
PUBLIC	_u_fgets_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_fgets_56
_TEXT	SEGMENT
tv162 = -277						; size = 1
tv144 = -277						; size = 1
tv95 = -277						; size = 1
_str$ = -80						; size = 4
_currDelim$ = -68					; size = 2
_sItr$ = -56						; size = 4
_limit$ = -44						; size = 4
_alias$ = -32						; size = 4
_count$ = -20						; size = 4
_dataSize$ = -8						; size = 4
_s$ = 8							; size = 4
_n$ = 12						; size = 4
_f$ = 16						; size = 4
_u_fgets_56 PROC					; COMDAT
; Line 488
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 494
	xor	eax, eax
	mov	WORD PTR _currDelim$[ebp], ax
; Line 497
	cmp	DWORD PTR _n$[ebp], 0
	jg	SHORT $LN16@u_fgets_56
; Line 499
	xor	eax, eax
	jmp	$LN17@u_fgets_56
$LN16@u_fgets_56:
; Line 503
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _str$[ebp], eax
; Line 504
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN15@u_fgets_56
; Line 505
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_ufile_fill_uchar_buffer_56
	add	esp, 4
$LN15@u_fgets_56:
; Line 509
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 512
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 1
	mov	DWORD PTR _dataSize$[ebp], edx
; Line 515
	jne	SHORT $LN14@u_fgets_56
; Line 516
	xor	eax, eax
	jmp	$LN17@u_fgets_56
$LN14@u_fgets_56:
; Line 519
	mov	DWORD PTR _count$[ebp], 0
; Line 520
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _sItr$[ebp], eax
; Line 521
	xor	eax, eax
	mov	WORD PTR _currDelim$[ebp], ax
$LN13@u_fgets_56:
; Line 522
	cmp	DWORD PTR _dataSize$[ebp], 0
	jle	$LN12@u_fgets_56
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	$LN12@u_fgets_56
; Line 523
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _alias$[ebp], ecx
; Line 526
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, DWORD PTR _count$[ebp]
	cmp	DWORD PTR _dataSize$[ebp], eax
	jge	SHORT $LN11@u_fgets_56
; Line 527
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 529
	jmp	SHORT $LN10@u_fgets_56
$LN11@u_fgets_56:
; Line 530
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _alias$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit$[ebp], edx
$LN10@u_fgets_56:
; Line 533
	movzx	eax, WORD PTR _currDelim$[ebp]
	test	eax, eax
	jne	$LN9@u_fgets_56
$LN8@u_fgets_56:
; Line 535
	mov	eax, DWORD PTR _alias$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN7@u_fgets_56
	mov	eax, DWORD PTR _alias$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jl	SHORT $LN19@u_fgets_56
	mov	edx, DWORD PTR _alias$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 13					; 0000000dH
	jle	SHORT $LN20@u_fgets_56
$LN19@u_fgets_56:
	mov	ecx, DWORD PTR _alias$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 133				; 00000085H
	je	SHORT $LN20@u_fgets_56
	mov	eax, DWORD PTR _alias$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 8232				; 00002028H
	je	SHORT $LN20@u_fgets_56
	mov	edx, DWORD PTR _alias$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 8233				; 00002029H
	je	SHORT $LN20@u_fgets_56
	mov	BYTE PTR tv95[ebp], 0
	jmp	SHORT $LN21@u_fgets_56
$LN20@u_fgets_56:
	mov	BYTE PTR tv95[ebp], 1
$LN21@u_fgets_56:
	movsx	ecx, BYTE PTR tv95[ebp]
	test	ecx, ecx
	jne	SHORT $LN7@u_fgets_56
; Line 536
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 537
	mov	eax, DWORD PTR _sItr$[ebp]
	mov	ecx, DWORD PTR _alias$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _sItr$[ebp]
	add	eax, 2
	mov	DWORD PTR _sItr$[ebp], eax
	mov	ecx, DWORD PTR _alias$[ebp]
	add	ecx, 2
	mov	DWORD PTR _alias$[ebp], ecx
; Line 538
	jmp	$LN8@u_fgets_56
$LN7@u_fgets_56:
; Line 540
	mov	eax, DWORD PTR _alias$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN9@u_fgets_56
	mov	eax, DWORD PTR _alias$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jl	SHORT $LN22@u_fgets_56
	mov	edx, DWORD PTR _alias$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 13					; 0000000dH
	jle	SHORT $LN23@u_fgets_56
$LN22@u_fgets_56:
	mov	ecx, DWORD PTR _alias$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 133				; 00000085H
	je	SHORT $LN23@u_fgets_56
	mov	eax, DWORD PTR _alias$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 8232				; 00002028H
	je	SHORT $LN23@u_fgets_56
	mov	edx, DWORD PTR _alias$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 8233				; 00002029H
	je	SHORT $LN23@u_fgets_56
	mov	BYTE PTR tv144[ebp], 0
	jmp	SHORT $LN24@u_fgets_56
$LN23@u_fgets_56:
	mov	BYTE PTR tv144[ebp], 1
$LN24@u_fgets_56:
	movsx	ecx, BYTE PTR tv144[ebp]
	test	ecx, ecx
	je	SHORT $LN9@u_fgets_56
; Line 541
	mov	eax, DWORD PTR _alias$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 13					; 0000000dH
	sete	dl
	movsx	eax, dl
	test	eax, eax
	je	SHORT $LN5@u_fgets_56
; Line 542
	mov	eax, DWORD PTR _alias$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _currDelim$[ebp], cx
; Line 544
	jmp	SHORT $LN4@u_fgets_56
$LN5@u_fgets_56:
; Line 545
	mov	eax, 1
	mov	WORD PTR _currDelim$[ebp], ax
$LN4@u_fgets_56:
; Line 550
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 551
	mov	eax, DWORD PTR _sItr$[ebp]
	mov	ecx, DWORD PTR _alias$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _sItr$[ebp]
	add	eax, 2
	mov	DWORD PTR _sItr$[ebp], eax
	mov	ecx, DWORD PTR _alias$[ebp]
	add	ecx, 2
	mov	DWORD PTR _alias$[ebp], ecx
$LN9@u_fgets_56:
; Line 555
	mov	eax, DWORD PTR _alias$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN3@u_fgets_56
; Line 556
	movzx	eax, WORD PTR _currDelim$[ebp]
	test	eax, eax
	je	SHORT $LN2@u_fgets_56
	movzx	eax, WORD PTR _currDelim$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN25@u_fgets_56
	mov	ecx, DWORD PTR _alias$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN25@u_fgets_56
	mov	BYTE PTR tv162[ebp], 1
	jmp	SHORT $LN26@u_fgets_56
$LN25@u_fgets_56:
	mov	BYTE PTR tv162[ebp], 0
$LN26@u_fgets_56:
	movsx	eax, BYTE PTR tv162[ebp]
	test	eax, eax
	je	SHORT $LN2@u_fgets_56
; Line 557
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 558
	mov	eax, DWORD PTR _sItr$[ebp]
	mov	ecx, DWORD PTR _alias$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _sItr$[ebp]
	add	eax, 2
	mov	DWORD PTR _sItr$[ebp], eax
	mov	ecx, DWORD PTR _alias$[ebp]
	add	ecx, 2
	mov	DWORD PTR _alias$[ebp], ecx
$LN2@u_fgets_56:
; Line 560
	mov	eax, 1
	mov	WORD PTR _currDelim$[ebp], ax
$LN3@u_fgets_56:
; Line 567
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _alias$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 570
	movzx	eax, WORD PTR _currDelim$[ebp]
	cmp	eax, 1
	jne	SHORT $LN1@u_fgets_56
; Line 572
	jmp	SHORT $LN12@u_fgets_56
$LN1@u_fgets_56:
; Line 576
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_ufile_fill_uchar_buffer_56
	add	esp, 4
; Line 579
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 1
	mov	DWORD PTR _dataSize$[ebp], edx
; Line 580
	jmp	$LN13@u_fgets_56
$LN12@u_fgets_56:
; Line 583
	xor	eax, eax
	mov	ecx, DWORD PTR _sItr$[ebp]
	mov	WORD PTR [ecx], ax
; Line 584
	mov	eax, DWORD PTR _s$[ebp]
$LN17@u_fgets_56:
; Line 585
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_fgets_56 ENDP
_TEXT	ENDS
PUBLIC	_ufile_getch_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufile_getch_56
_TEXT	SEGMENT
_isValidChar$ = -5					; size = 1
_f$ = 8							; size = 4
_ch$ = 12						; size = 4
_ufile_getch_56 PROC					; COMDAT
; Line 589
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 590
	mov	BYTE PTR _isValidChar$[ebp], 0
; Line 592
	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	WORD PTR [ecx], ax
; Line 594
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $LN4@ufile_getc
; Line 595
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	ax, WORD PTR [ecx]
	mov	WORD PTR [edx], ax
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 596
	mov	BYTE PTR _isValidChar$[ebp], 1
; Line 598
	jmp	SHORT $LN3@ufile_getc
$LN4@ufile_getc:
; Line 600
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+16]
	jb	SHORT $LN2@ufile_getc
; Line 601
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_ufile_fill_uchar_buffer_56
	add	esp, 4
$LN2@ufile_getc:
; Line 603
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $LN3@ufile_getc
; Line 604
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	ax, WORD PTR [ecx]
	mov	WORD PTR [edx], ax
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 605
	mov	BYTE PTR _isValidChar$[ebp], 1
$LN3@ufile_getc:
; Line 608
	mov	al, BYTE PTR _isValidChar$[ebp]
; Line 609
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ufile_getch_56 ENDP
_TEXT	ENDS
PUBLIC	_u_fgetc_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_fgetc_56
_TEXT	SEGMENT
_ch$ = -8						; size = 2
_f$ = 8							; size = 4
_u_fgetc_56 PROC					; COMDAT
; Line 613
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 615
	lea	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	_ufile_getch_56
	add	esp, 8
; Line 616
	mov	ax, WORD PTR _ch$[ebp]
; Line 617
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@u_fgetc_56
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@u_fgetc_56:
	DD	1
	DD	$LN4@u_fgetc_56
$LN4@u_fgetc_56:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN3@u_fgetc_56
$LN3@u_fgetc_56:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_u_fgetc_56 ENDP
_TEXT	ENDS
PUBLIC	_ufile_getch32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufile_getch32_56
_TEXT	SEGMENT
_c16$13662 = -32					; size = 2
_str$ = -20						; size = 4
_isValidChar$ = -5					; size = 1
_f$ = 8							; size = 4
_c32$ = 12						; size = 4
_ufile_getch32_56 PROC					; COMDAT
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 622
	mov	BYTE PTR _isValidChar$[ebp], 0
; Line 625
	mov	eax, DWORD PTR _c32$[ebp]
	mov	DWORD PTR [eax], 65535			; 0000ffffH
; Line 628
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _str$[ebp], eax
; Line 629
	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN6@ufile_getc@2
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _str$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	jb	SHORT $LN6@ufile_getc@2
; Line 630
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_ufile_fill_uchar_buffer_56
	add	esp, 4
$LN6@ufile_getc@2:
; Line 634
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	jae	$LN5@ufile_getc@2
; Line 635
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _c32$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [eax], edx
; Line 636
	mov	eax, DWORD PTR _c32$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 55296				; 0000d800H
	jne	SHORT $LN4@ufile_getc@2
; Line 637
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN3@ufile_getc@2
; Line 638
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _c16$13662[ebp], dx
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 639
	mov	eax, DWORD PTR _c32$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 10					; 0000000aH
	movzx	edx, WORD PTR _c16$13662[ebp]
	lea	eax, DWORD PTR [ecx+edx-56613888]
	mov	ecx, DWORD PTR _c32$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 640
	mov	BYTE PTR _isValidChar$[ebp], 1
; Line 642
	jmp	SHORT $LN2@ufile_getc@2
$LN3@ufile_getc@2:
; Line 643
	mov	eax, DWORD PTR _c32$[ebp]
	mov	DWORD PTR [eax], 65535			; 0000ffffH
$LN2@ufile_getc@2:
; Line 646
	jmp	SHORT $LN5@ufile_getc@2
$LN4@ufile_getc@2:
; Line 647
	mov	BYTE PTR _isValidChar$[ebp], 1
$LN5@ufile_getc@2:
; Line 651
	mov	al, BYTE PTR _isValidChar$[ebp]
; Line 652
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ufile_getch32_56 ENDP
_TEXT	ENDS
PUBLIC	_u_fgetcx_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_fgetcx_56
_TEXT	SEGMENT
_ch$ = -8						; size = 4
_f$ = 8							; size = 4
_u_fgetcx_56 PROC					; COMDAT
; Line 656
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 658
	lea	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	_ufile_getch32_56
	add	esp, 8
; Line 659
	mov	eax, DWORD PTR _ch$[ebp]
; Line 660
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@u_fgetcx_5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@u_fgetcx_5:
	DD	1
	DD	$LN4@u_fgetcx_5
$LN4@u_fgetcx_5:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@u_fgetcx_5
$LN3@u_fgetcx_5:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_u_fgetcx_56 ENDP
_TEXT	ENDS
PUBLIC	_u_fungetc_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_fungetc_56
_TEXT	SEGMENT
_str$ = -8						; size = 4
_ch$ = 8						; size = 4
_f$ = 12						; size = 4
_u_fungetc_56 PROC					; COMDAT
; Line 665
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 668
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _str$[ebp], eax
; Line 672
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN7@u_fungetc_
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN8@u_fungetc_
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 2
	mov	edx, DWORD PTR _str$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	jne	SHORT $LN8@u_fungetc_
$LN7@u_fungetc_:
; Line 674
	mov	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
; Line 676
	jmp	$LN6@u_fungetc_
$LN8@u_fungetc_:
; Line 679
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN5@u_fungetc_
; Line 681
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 2
	mov	edx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	movzx	ecx, ax
	cmp	edx, ecx
	jne	SHORT $LN3@u_fungetc_
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 2
	mov	edx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	movzx	ecx, ax
	cmp	edx, ecx
	je	SHORT $LN4@u_fungetc_
$LN3@u_fungetc_:
; Line 683
	mov	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
$LN4@u_fungetc_:
; Line 684
	jmp	SHORT $LN6@u_fungetc_
$LN5@u_fungetc_:
; Line 686
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 2
	mov	edx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, DWORD PTR _ch$[ebp]
	je	SHORT $LN6@u_fungetc_
; Line 687
	mov	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
$LN6@u_fungetc_:
; Line 690
	mov	eax, DWORD PTR _ch$[ebp]
; Line 691
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_u_fungetc_56 ENDP
_TEXT	ENDS
PUBLIC	_u_file_read_56
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_file_read_56
_TEXT	SEGMENT
_str$ = -32						; size = 4
_read$ = -20						; size = 4
_dataSize$ = -8						; size = 4
_chars$ = 8						; size = 4
_count$ = 12						; size = 4
_f$ = 16						; size = 4
_u_file_read_56 PROC					; COMDAT
; Line 697
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 699
	mov	DWORD PTR _read$[ebp], 0
; Line 700
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _str$[ebp], eax
$LN6@u_file_rea:
; Line 705
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 1
	mov	DWORD PTR _dataSize$[ebp], edx
; Line 706
	cmp	DWORD PTR _dataSize$[ebp], 0
	jg	SHORT $LN3@u_file_rea
; Line 708
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_ufile_fill_uchar_buffer_56
	add	esp, 4
; Line 709
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 1
	mov	DWORD PTR _dataSize$[ebp], edx
$LN3@u_file_rea:
; Line 713
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, DWORD PTR _read$[ebp]
	cmp	DWORD PTR _dataSize$[ebp], eax
	jle	SHORT $LN2@u_file_rea
; Line 714
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, DWORD PTR _read$[ebp]
	mov	DWORD PTR _dataSize$[ebp], eax
$LN2@u_file_rea:
; Line 718
	mov	eax, DWORD PTR _dataSize$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _read$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 721
	mov	eax, DWORD PTR _read$[ebp]
	add	eax, DWORD PTR _dataSize$[ebp]
	mov	DWORD PTR _read$[ebp], eax
; Line 724
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _dataSize$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 726
	cmp	DWORD PTR _dataSize$[ebp], 0
	je	SHORT $LN4@u_file_rea
	mov	eax, DWORD PTR _read$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jl	$LN6@u_file_rea
$LN4@u_file_rea:
; Line 728
	mov	eax, DWORD PTR _read$[ebp]
; Line 729
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_file_read_56 ENDP
_TEXT	ENDS
END
