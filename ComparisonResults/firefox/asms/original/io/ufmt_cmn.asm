; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\io\ufmt_cmn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ufmt_digitvalue_56
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\io\ufmt_cmn.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ufmt_digitvalue_56
_TEXT	SEGMENT
tv83 = -196						; size = 4
_c$ = 8							; size = 2
_ufmt_digitvalue_56 PROC				; COMDAT
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 43
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@ufmt_digit
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN4@ufmt_digit
$LN3@ufmt_digit:
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN2@ufmt_digit
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 122				; 0000007aH
	jle	SHORT $LN4@ufmt_digit
$LN2@ufmt_digit:
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN5@ufmt_digit
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN5@ufmt_digit
$LN4@ufmt_digit:
; Line 45
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN8@ufmt_digit
	movzx	ecx, WORD PTR _c$[ebp]
	xor	edx, edx
	cmp	ecx, 97					; 00000061H
	setl	dl
	sub	edx, 1
	and	edx, 32					; 00000020H
	add	edx, 7
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN9@ufmt_digit
$LN8@ufmt_digit:
	mov	DWORD PTR tv83[ebp], 0
$LN9@ufmt_digit:
	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	sub	eax, DWORD PTR tv83[ebp]
	jmp	SHORT $LN6@ufmt_digit
; Line 47
	jmp	SHORT $LN6@ufmt_digit
$LN5@ufmt_digit:
; Line 49
	or	eax, -1
$LN6@ufmt_digit:
; Line 51
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ufmt_digitvalue_56 ENDP
_TEXT	ENDS
PUBLIC	_ufmt_isdigit_56
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufmt_isdigit_56
_TEXT	SEGMENT
tv68 = -205						; size = 1
_digitVal$ = -8						; size = 4
_c$ = 8							; size = 2
_radix$ = 12						; size = 4
_ufmt_isdigit_56 PROC					; COMDAT
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 57
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	_ufmt_digitvalue_56
	add	esp, 4
	mov	DWORD PTR _digitVal$[ebp], eax
; Line 59
	mov	eax, DWORD PTR _digitVal$[ebp]
	cmp	eax, DWORD PTR _radix$[ebp]
	jge	SHORT $LN3@ufmt_isdig
	cmp	DWORD PTR _digitVal$[ebp], 0
	jl	SHORT $LN3@ufmt_isdig
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN4@ufmt_isdig
$LN3@ufmt_isdig:
	mov	BYTE PTR tv68[ebp], 0
$LN4@ufmt_isdig:
	mov	al, BYTE PTR tv68[ebp]
; Line 60
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ufmt_isdigit_56 ENDP
_TEXT	ENDS
PUBLIC	_ufmt_64tou_56
EXTRN	__aulldiv:PROC
EXTRN	__aullrem:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufmt_64tou_56
_TEXT	SEGMENT
tv82 = -264						; size = 4
tv84 = -260						; size = 4
tv78 = -256						; size = 4
_temp$ = -56						; size = 2
_right$ = -44						; size = 4
_left$ = -32						; size = 4
_digit$ = -20						; size = 4
_length$ = -8						; size = 4
_buffer$ = 8						; size = 4
_len$ = 12						; size = 4
_value$ = 16						; size = 8
_radix$ = 24						; size = 1
_uselower$ = 28						; size = 1
_minDigits$ = 32					; size = 4
_ufmt_64tou_56 PROC					; COMDAT
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 73
	mov	DWORD PTR _length$[ebp], 0
$LN8@ufmt_64tou:
; Line 78
	movzx	eax, BYTE PTR _radix$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _value$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	__aullrem
	mov	DWORD PTR _digit$[ebp], eax
; Line 79
	movzx	eax, BYTE PTR _radix$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _value$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	__aulldiv
	mov	DWORD PTR _value$[ebp], eax
	mov	DWORD PTR _value$[ebp+4], edx
; Line 81
	movsx	eax, BYTE PTR _uselower$[ebp]
	test	eax, eax
	je	SHORT $LN15@ufmt_64tou
	cmp	DWORD PTR _digit$[ebp], 9
	ja	SHORT $LN11@ufmt_64tou
	mov	ecx, DWORD PTR _digit$[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv78[ebp], ecx
	jmp	SHORT $LN12@ufmt_64tou
$LN11@ufmt_64tou:
	mov	edx, DWORD PTR _digit$[ebp]
	add	edx, 87					; 00000057H
	mov	DWORD PTR tv78[ebp], edx
$LN12@ufmt_64tou:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN16@ufmt_64tou
$LN15@ufmt_64tou:
	cmp	DWORD PTR _digit$[ebp], 9
	ja	SHORT $LN13@ufmt_64tou
	mov	ecx, DWORD PTR _digit$[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $LN14@ufmt_64tou
$LN13@ufmt_64tou:
	mov	edx, DWORD PTR _digit$[ebp]
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv82[ebp], edx
$LN14@ufmt_64tou:
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv84[ebp], eax
$LN16@ufmt_64tou:
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	ax, WORD PTR tv84[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 1
	mov	DWORD PTR _length$[ebp], ecx
; Line 82
	mov	eax, DWORD PTR _value$[ebp]
	or	eax, DWORD PTR _value$[ebp+4]
	jne	$LN8@ufmt_64tou
; Line 85
	cmp	DWORD PTR _minDigits$[ebp], -1
	je	SHORT $LN5@ufmt_64tou
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _minDigits$[ebp]
	jge	SHORT $LN5@ufmt_64tou
$LN4@ufmt_64tou:
; Line 86
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _minDigits$[ebp]
	jge	SHORT $LN5@ufmt_64tou
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN5@ufmt_64tou
; Line 87
	mov	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
	jmp	SHORT $LN4@ufmt_64tou
$LN5@ufmt_64tou:
; Line 91
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _left$[ebp], eax
; Line 92
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _right$[ebp], edx
$LN2@ufmt_64tou:
; Line 93
	mov	eax, DWORD PTR _right$[ebp]
	sub	eax, 2
	mov	DWORD PTR _right$[ebp], eax
	mov	ecx, DWORD PTR _left$[ebp]
	cmp	ecx, DWORD PTR _right$[ebp]
	jae	SHORT $LN1@ufmt_64tou
; Line 94
	mov	eax, DWORD PTR _left$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _temp$[ebp], cx
; Line 95
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, 2
	mov	DWORD PTR _left$[ebp], eax
; Line 96
	mov	eax, DWORD PTR _right$[ebp]
	mov	cx, WORD PTR _temp$[ebp]
	mov	WORD PTR [eax], cx
; Line 97
	jmp	SHORT $LN2@ufmt_64tou
$LN1@ufmt_64tou:
; Line 99
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 100
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ufmt_64tou_56 ENDP
_TEXT	ENDS
PUBLIC	_ufmt_ptou_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufmt_ptou_56
_TEXT	SEGMENT
tv149 = -268						; size = 4
tv138 = -268						; size = 4
tv95 = -268						; size = 4
tv84 = -268						; size = 4
_secondNibble$9174 = -68				; size = 2
_firstNibble$9172 = -56					; size = 2
_byteVal$9171 = -41					; size = 1
_ptrIdx$ = -32						; size = 4
_length$ = -20						; size = 4
_i$ = -8						; size = 4
_buffer$ = 8						; size = 4
_len$ = 12						; size = 4
_value$ = 16						; size = 4
_uselower$ = 20						; size = 1
_ufmt_ptou_56 PROC					; COMDAT
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 109
	mov	DWORD PTR _length$[ebp], 0
; Line 110
	lea	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _ptrIdx$[ebp], eax
; Line 115
	mov	DWORD PTR _i$[ebp], 3
	jmp	SHORT $LN5@ufmt_ptou_
$LN4@ufmt_ptou_:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@ufmt_ptou_:
	cmp	DWORD PTR _i$[ebp], 0
	jl	$LN3@ufmt_ptou_
; Line 118
	mov	eax, DWORD PTR _ptrIdx$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _byteVal$9171[ebp], cl
; Line 119
	movzx	eax, BYTE PTR _byteVal$9171[ebp]
	sar	eax, 4
	mov	WORD PTR _firstNibble$9172[ebp], ax
; Line 120
	movzx	eax, BYTE PTR _byteVal$9171[ebp]
	and	eax, 15					; 0000000fH
	mov	WORD PTR _secondNibble$9174[ebp], ax
; Line 121
	movsx	eax, BYTE PTR _uselower$[ebp]
	test	eax, eax
	je	$LN2@ufmt_ptou_
; Line 122
	movzx	eax, WORD PTR _firstNibble$9172[ebp]
	cmp	eax, 9
	jg	SHORT $LN8@ufmt_ptou_
	movzx	ecx, WORD PTR _firstNibble$9172[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN9@ufmt_ptou_
$LN8@ufmt_ptou_:
	movzx	edx, WORD PTR _firstNibble$9172[ebp]
	add	edx, 87					; 00000057H
	mov	DWORD PTR tv84[ebp], edx
$LN9@ufmt_ptou_:
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	dx, WORD PTR tv84[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 123
	movzx	eax, WORD PTR _secondNibble$9174[ebp]
	cmp	eax, 9
	jg	SHORT $LN10@ufmt_ptou_
	movzx	ecx, WORD PTR _secondNibble$9174[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv95[ebp], ecx
	jmp	SHORT $LN11@ufmt_ptou_
$LN10@ufmt_ptou_:
	movzx	edx, WORD PTR _secondNibble$9174[ebp]
	add	edx, 87					; 00000057H
	mov	DWORD PTR tv95[ebp], edx
$LN11@ufmt_ptou_:
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	dx, WORD PTR tv95[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 125
	jmp	SHORT $LN1@ufmt_ptou_
$LN2@ufmt_ptou_:
; Line 126
	movzx	eax, WORD PTR _firstNibble$9172[ebp]
	cmp	eax, 9
	jg	SHORT $LN12@ufmt_ptou_
	movzx	ecx, WORD PTR _firstNibble$9172[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv138[ebp], ecx
	jmp	SHORT $LN13@ufmt_ptou_
$LN12@ufmt_ptou_:
	movzx	edx, WORD PTR _firstNibble$9172[ebp]
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv138[ebp], edx
$LN13@ufmt_ptou_:
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	dx, WORD PTR tv138[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 127
	movzx	eax, WORD PTR _secondNibble$9174[ebp]
	cmp	eax, 9
	jg	SHORT $LN14@ufmt_ptou_
	movzx	ecx, WORD PTR _secondNibble$9174[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv149[ebp], ecx
	jmp	SHORT $LN15@ufmt_ptou_
$LN14@ufmt_ptou_:
	movzx	edx, WORD PTR _secondNibble$9174[ebp]
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv149[ebp], edx
$LN15@ufmt_ptou_:
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	dx, WORD PTR tv149[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
$LN1@ufmt_ptou_:
; Line 129
	jmp	$LN4@ufmt_ptou_
$LN3@ufmt_ptou_:
; Line 131
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 132
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ufmt_ptou_56 ENDP
_TEXT	ENDS
PUBLIC	_ufmt_uto64_56
EXTRN	__allmul:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufmt_uto64_56
_TEXT	SEGMENT
tv78 = -234						; size = 2
_result$ = -36						; size = 8
_count$ = -20						; size = 4
_limit$ = -8						; size = 4
_buffer$ = 8						; size = 4
_len$ = 12						; size = 4
_radix$ = 16						; size = 1
_ufmt_uto64_56 PROC					; COMDAT
; Line 138
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 145
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _buffer$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _limit$[ebp], eax
; Line 146
	mov	DWORD PTR _count$[ebp], 0
; Line 147
	mov	DWORD PTR _result$[ebp], 0
	mov	DWORD PTR _result$[ebp+4], 0
$LN2@ufmt_uto64:
; Line 150
	movsx	eax, BYTE PTR _radix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	call	_ufmt_isdigit_56
	add	esp, 8
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN1@ufmt_uto64
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN1@ufmt_uto64
; Line 153
	movsx	eax, BYTE PTR _radix$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _result$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	call	__allmul
	mov	DWORD PTR _result$[ebp], eax
	mov	DWORD PTR _result$[ebp+4], edx
; Line 154
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv78[ebp], cx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
	movzx	eax, WORD PTR tv78[ebp]
	push	eax
	call	_ufmt_digitvalue_56
	add	esp, 4
	cdq
	add	eax, DWORD PTR _result$[ebp]
	adc	edx, DWORD PTR _result$[ebp+4]
	mov	DWORD PTR _result$[ebp], eax
	mov	DWORD PTR _result$[ebp+4], edx
; Line 157
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 158
	jmp	SHORT $LN2@ufmt_uto64
$LN1@ufmt_uto64:
; Line 160
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 161
	mov	eax, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR _result$[ebp+4]
; Line 162
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ufmt_uto64_56 ENDP
_TEXT	ENDS
PUBLIC	_ufmt_utop_56
EXTRN	_u_isspace_56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufmt_utop_56
_TEXT	SEGMENT
_byte$9222 = -65					; size = 1
_result$ = -56						; size = 4
_offset$ = -44						; size = 4
_incVal$ = -32						; size = 4
_resultIdx$ = -20					; size = 4
_count$ = -8						; size = 4
_buffer$ = 8						; size = 4
_len$ = 12						; size = 4
_ufmt_utop_56 PROC					; COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 177
	mov	DWORD PTR _count$[ebp], 0
; Line 178
	mov	DWORD PTR _offset$[ebp], 0
; Line 179
	mov	DWORD PTR _result$[ebp], 0
$LN9@ufmt_utop_:
; Line 182
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 48					; 00000030H
	je	SHORT $LN7@ufmt_utop_
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	_u_isspace_56
	add	esp, 4
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN6@ufmt_utop_
$LN7@ufmt_utop_:
; Line 183
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 184
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, 1
	mov	DWORD PTR _offset$[ebp], eax
; Line 185
	jmp	SHORT $LN9@ufmt_utop_
$LN6@ufmt_utop_:
; Line 188
	push	16					; 00000010H
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	_ufmt_isdigit_56
	add	esp, 8
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN5@ufmt_utop_
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN5@ufmt_utop_
; Line 190
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 191
	jmp	SHORT $LN6@ufmt_utop_
$LN5@ufmt_utop_:
; Line 194
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, DWORD PTR _offset$[ebp]
	cmp	eax, 8
	jle	SHORT $LN4@ufmt_utop_
; Line 195
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 8
	mov	DWORD PTR _offset$[ebp], eax
$LN4@ufmt_utop_:
; Line 203
	mov	DWORD PTR _incVal$[ebp], 1
; Line 204
	mov	DWORD PTR _resultIdx$[ebp], 0
; Line 207
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@ufmt_utop_:
; Line 208
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _count$[ebp]
	cmp	ecx, DWORD PTR _offset$[ebp]
	jl	SHORT $LN2@ufmt_utop_
; Line 210
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	_ufmt_digitvalue_56
	add	esp, 4
	mov	BYTE PTR _byte$9222[ebp], al
; Line 212
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _offset$[ebp]
	jle	SHORT $LN1@ufmt_utop_
; Line 214
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	push	eax
	call	_ufmt_digitvalue_56
	add	esp, 4
	shl	eax, 4
	movzx	ecx, BYTE PTR _byte$9222[ebp]
	add	ecx, eax
	mov	BYTE PTR _byte$9222[ebp], cl
$LN1@ufmt_utop_:
; Line 217
	mov	eax, DWORD PTR _resultIdx$[ebp]
	mov	cl, BYTE PTR _byte$9222[ebp]
	mov	BYTE PTR _result$[ebp+eax], cl
; Line 218
	mov	eax, DWORD PTR _resultIdx$[ebp]
	add	eax, DWORD PTR _incVal$[ebp]
	mov	DWORD PTR _resultIdx$[ebp], eax
; Line 219
	jmp	SHORT $LN3@ufmt_utop_
$LN2@ufmt_utop_:
; Line 221
	mov	eax, DWORD PTR _result$[ebp]
; Line 222
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ufmt_utop_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@ufmt_utop_:
	DD	1
	DD	$LN13@ufmt_utop_
$LN13@ufmt_utop_:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN12@ufmt_utop_
$LN12@ufmt_utop_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_ufmt_utop_56 ENDP
_TEXT	ENDS
PUBLIC	_ufmt_defaultCPToUnicode_56
EXTRN	_u_releaseDefaultConverter_56:PROC
EXTRN	_ucnv_toUnicode_56:PROC
EXTRN	_strlen:PROC
EXTRN	_u_getDefaultConverter_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ufmt_defaultCPToUnicode_56
_TEXT	SEGMENT
_defConverter$ = -32					; size = 4
_status$ = -20						; size = 4
_alias$ = -8						; size = 4
_s$ = 8							; size = 4
_sSize$ = 12						; size = 4
_target$ = 16						; size = 4
_tSize$ = 20						; size = 4
_ufmt_defaultCPToUnicode_56 PROC			; COMDAT
; Line 227
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 229
	mov	DWORD PTR _status$[ebp], 0
; Line 230
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	call	_u_getDefaultConverter_56
	add	esp, 4
	mov	DWORD PTR _defConverter$[ebp], eax
; Line 232
	cmp	DWORD PTR _status$[ebp], 0
	jg	SHORT $LN3@ufmt_defau
	cmp	DWORD PTR _defConverter$[ebp], 0
	jne	SHORT $LN4@ufmt_defau
$LN3@ufmt_defau:
; Line 233
	xor	eax, eax
	jmp	SHORT $LN5@ufmt_defau
$LN4@ufmt_defau:
; Line 235
	cmp	DWORD PTR _sSize$[ebp], 0
	jg	SHORT $LN2@ufmt_defau
; Line 236
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _sSize$[ebp], eax
$LN2@ufmt_defau:
; Line 240
	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN1@ufmt_defau
; Line 242
	mov	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _alias$[ebp], eax
; Line 244
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _sSize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tSize$[ebp]
	mov	eax, DWORD PTR _alias$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	push	ecx
	lea	edx, DWORD PTR _alias$[ebp]
	push	edx
	mov	eax, DWORD PTR _defConverter$[ebp]
	push	eax
	call	_ucnv_toUnicode_56
	add	esp, 32					; 00000020H
; Line 248
	xor	eax, eax
	mov	ecx, DWORD PTR _alias$[ebp]
	mov	WORD PTR [ecx], ax
$LN1@ufmt_defau:
; Line 251
	mov	eax, DWORD PTR _defConverter$[ebp]
	push	eax
	call	_u_releaseDefaultConverter_56
	add	esp, 4
; Line 253
	mov	eax, DWORD PTR _target$[ebp]
$LN5@ufmt_defau:
; Line 254
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ufmt_defau
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@ufmt_defau:
	DD	2
	DD	$LN9@ufmt_defau
$LN9@ufmt_defau:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@ufmt_defau
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@ufmt_defau
$LN8@ufmt_defau:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN7@ufmt_defau:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	0
_ufmt_defaultCPToUnicode_56 ENDP
_TEXT	ENDS
END
