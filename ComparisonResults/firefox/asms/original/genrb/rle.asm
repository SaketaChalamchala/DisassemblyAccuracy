; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\genrb\rle.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

CONST	SEGMENT
_ESCAPE	DW	0a5a5H
_ESCAPE_BYTE DB	0a5H
CONST	ENDS
PUBLIC	_usArrayToRLEString
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\tools\genrb\rle.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _usArrayToRLEString
_TEXT	SEGMENT
_s$5553 = -68						; size = 2
_i$5548 = -56						; size = 4
_runLength$5547 = -44					; size = 4
_runValue$5546 = -32					; size = 2
_saveBuffer$ = -20					; size = 4
_bufLimit$ = -8						; size = 4
_src$ = 8						; size = 4
_srcLen$ = 12						; size = 4
_buffer$ = 16						; size = 4
_bufLen$ = 20						; size = 4
_status$ = 24						; size = 4
_usArrayToRLEString PROC				; COMDAT
; Line 148
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 149
	mov	eax, DWORD PTR _bufLen$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _bufLimit$[ebp], edx
; Line 150
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _saveBuffer$[ebp], eax
; Line 151
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _bufLimit$[ebp]
	jae	$LN9@usArrayToR
; Line 152
	mov	eax, DWORD PTR _srcLen$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
; Line 153
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _bufLimit$[ebp]
	jae	$LN8@usArrayToR
; Line 154
	mov	eax, DWORD PTR _src$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _runValue$5546[ebp], cx
; Line 155
	mov	DWORD PTR _runLength$5547[ebp], 1
; Line 156
	mov	DWORD PTR _i$5548[ebp], 1
; Line 157
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cx, WORD PTR _srcLen$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
	jmp	SHORT $LN7@usArrayToR
$LN6@usArrayToR:
; Line 159
	mov	eax, DWORD PTR _i$5548[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5548[ebp], eax
$LN7@usArrayToR:
	mov	eax, DWORD PTR _i$5548[ebp]
	cmp	eax, DWORD PTR _srcLen$[ebp]
	jge	SHORT $LN5@usArrayToR
; Line 160
	mov	eax, DWORD PTR _i$5548[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _s$5553[ebp], dx
; Line 161
	movzx	eax, WORD PTR _s$5553[ebp]
	movzx	ecx, WORD PTR _runValue$5546[ebp]
	cmp	eax, ecx
	jne	SHORT $LN4@usArrayToR
	cmp	DWORD PTR _runLength$5547[ebp], 65535	; 0000ffffH
	jge	SHORT $LN4@usArrayToR
; Line 162
	mov	eax, DWORD PTR _runLength$5547[ebp]
	add	eax, 1
	mov	DWORD PTR _runLength$5547[ebp], eax
; Line 163
	jmp	SHORT $LN3@usArrayToR
$LN4@usArrayToR:
; Line 164
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _runLength$5547[ebp]
	push	ecx
	movzx	edx, WORD PTR _runValue$5546[ebp]
	push	edx
	mov	eax, DWORD PTR _bufLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_encodeRunShort
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buffer$[ebp], eax
; Line 165
	mov	ax, WORD PTR _s$5553[ebp]
	mov	WORD PTR _runValue$5546[ebp], ax
; Line 166
	mov	DWORD PTR _runLength$5547[ebp], 1
$LN3@usArrayToR:
; Line 168
	jmp	SHORT $LN6@usArrayToR
$LN5@usArrayToR:
; Line 169
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _runLength$5547[ebp]
	push	ecx
	movzx	edx, WORD PTR _runValue$5546[ebp]
	push	edx
	mov	eax, DWORD PTR _bufLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_encodeRunShort
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buffer$[ebp], eax
; Line 170
	jmp	SHORT $LN2@usArrayToR
$LN8@usArrayToR:
; Line 171
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN2@usArrayToR:
; Line 173
	jmp	SHORT $LN1@usArrayToR
$LN9@usArrayToR:
; Line 174
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@usArrayToR:
; Line 176
	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, DWORD PTR _saveBuffer$[ebp]
	sar	eax, 1
; Line 177
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_usArrayToRLEString ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _encodeRunShort
_TEXT	SEGMENT
_j$5503 = -20						; size = 4
_num$ = -8						; size = 4
_buffer$ = 8						; size = 4
_bufLimit$ = 12						; size = 4
_value$ = 16						; size = 2
_length$ = 20						; size = 4
_status$ = 24						; size = 4
_encodeRunShort PROC					; COMDAT
; Line 106
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 107
	mov	DWORD PTR _num$[ebp], 0
; Line 108
	cmp	DWORD PTR _length$[ebp], 4
	jge	$LN22@encodeRunS
; Line 109
	mov	DWORD PTR _j$5503[ebp], 0
	jmp	SHORT $LN21@encodeRunS
$LN20@encodeRunS:
; Line 110
	mov	eax, DWORD PTR _j$5503[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5503[ebp], eax
$LN21@encodeRunS:
	mov	eax, DWORD PTR _j$5503[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN19@encodeRunS
; Line 111
	movzx	eax, WORD PTR _value$[ebp]
	movzx	ecx, WORD PTR _ESCAPE
	cmp	eax, ecx
	jne	SHORT $LN18@encodeRunS
; Line 112
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _bufLimit$[ebp]
	jae	SHORT $LN17@encodeRunS
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cx, WORD PTR _ESCAPE
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
	jmp	SHORT $LN16@encodeRunS
$LN17@encodeRunS:
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN16@encodeRunS:
	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
$LN18@encodeRunS:
; Line 115
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _bufLimit$[ebp]
	jae	SHORT $LN15@encodeRunS
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cx, WORD PTR _value$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
	jmp	SHORT $LN14@encodeRunS
$LN15@encodeRunS:
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN14@encodeRunS:
	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
; Line 116
	jmp	$LN20@encodeRunS
$LN19@encodeRunS:
; Line 118
	jmp	$LN13@encodeRunS
$LN22@encodeRunS:
; Line 119
	movzx	eax, WORD PTR _ESCAPE
	cmp	DWORD PTR _length$[ebp], eax
	jne	SHORT $LN12@encodeRunS
; Line 120
	movzx	eax, WORD PTR _value$[ebp]
	movzx	ecx, WORD PTR _ESCAPE
	cmp	eax, ecx
	jne	SHORT $LN11@encodeRunS
; Line 121
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _bufLimit$[ebp]
	jae	SHORT $LN10@encodeRunS
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cx, WORD PTR _ESCAPE
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
	jmp	SHORT $LN9@encodeRunS
$LN10@encodeRunS:
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN9@encodeRunS:
	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
$LN11@encodeRunS:
; Line 124
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _bufLimit$[ebp]
	jae	SHORT $LN8@encodeRunS
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cx, WORD PTR _value$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
	jmp	SHORT $LN7@encodeRunS
$LN8@encodeRunS:
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN7@encodeRunS:
	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
; Line 125
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
$LN12@encodeRunS:
; Line 127
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _bufLimit$[ebp]
	jae	SHORT $LN6@encodeRunS
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cx, WORD PTR _ESCAPE
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
	jmp	SHORT $LN5@encodeRunS
$LN6@encodeRunS:
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN5@encodeRunS:
	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
; Line 128
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _bufLimit$[ebp]
	jae	SHORT $LN4@encodeRunS
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cx, WORD PTR _length$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
	jmp	SHORT $LN3@encodeRunS
$LN4@encodeRunS:
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN3@encodeRunS:
	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
; Line 129
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _bufLimit$[ebp]
	jae	SHORT $LN2@encodeRunS
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cx, WORD PTR _value$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
	jmp	SHORT $LN1@encodeRunS
$LN2@encodeRunS:
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@encodeRunS:
	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
$LN13@encodeRunS:
; Line 131
	mov	eax, DWORD PTR _buffer$[ebp]
; Line 132
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_encodeRunShort ENDP
_TEXT	ENDS
PUBLIC	_byteArrayToRLEString
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _byteArrayToRLEString
_TEXT	SEGMENT
_b$5585 = -77						; size = 1
_i$5580 = -68						; size = 4
_state$5579 = -56					; size = 2
_runLength$5578 = -44					; size = 4
_runValue$5577 = -29					; size = 1
_bufLimit$ = -20					; size = 4
_saveBuf$ = -8						; size = 4
_src$ = 8						; size = 4
_srcLen$ = 12						; size = 4
_buffer$ = 16						; size = 4
_bufLen$ = 20						; size = 4
_status$ = 24						; size = 4
_byteArrayToRLEString PROC				; COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 195
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _saveBuf$[ebp], eax
; Line 196
	mov	eax, DWORD PTR _bufLen$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _bufLimit$[ebp], edx
; Line 197
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _bufLimit$[ebp]
	jae	$LN10@byteArrayT
; Line 198
	mov	eax, DWORD PTR _srcLen$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
; Line 200
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _bufLimit$[ebp]
	jae	$LN9@byteArrayT
; Line 201
	mov	eax, DWORD PTR _src$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _runValue$5577[ebp], cl
; Line 202
	mov	DWORD PTR _runLength$5578[ebp], 1
; Line 203
	mov	BYTE PTR _state$5579[ebp], 0
	xor	eax, eax
	mov	BYTE PTR _state$5579[ebp+1], al
; Line 204
	mov	DWORD PTR _i$5580[ebp], 1
; Line 205
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cx, WORD PTR _srcLen$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
	jmp	SHORT $LN8@byteArrayT
$LN7@byteArrayT:
; Line 206
	mov	eax, DWORD PTR _i$5580[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5580[ebp], eax
$LN8@byteArrayT:
	mov	eax, DWORD PTR _i$5580[ebp]
	cmp	eax, DWORD PTR _srcLen$[ebp]
	jge	SHORT $LN6@byteArrayT
; Line 207
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, DWORD PTR _i$5580[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$5585[ebp], cl
; Line 208
	movzx	eax, BYTE PTR _b$5585[ebp]
	movzx	ecx, BYTE PTR _runValue$5577[ebp]
	cmp	eax, ecx
	jne	SHORT $LN5@byteArrayT
	cmp	DWORD PTR _runLength$5578[ebp], 255	; 000000ffH
	jge	SHORT $LN5@byteArrayT
; Line 209
	mov	eax, DWORD PTR _runLength$5578[ebp]
	add	eax, 1
	mov	DWORD PTR _runLength$5578[ebp], eax
; Line 211
	jmp	SHORT $LN4@byteArrayT
$LN5@byteArrayT:
; Line 212
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _state$5579[ebp]
	push	ecx
	mov	edx, DWORD PTR _runLength$5578[ebp]
	push	edx
	movzx	eax, BYTE PTR _runValue$5577[ebp]
	push	eax
	mov	ecx, DWORD PTR _bufLimit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_encodeRunByte
	add	esp, 24					; 00000018H
	mov	DWORD PTR _buffer$[ebp], eax
; Line 213
	mov	al, BYTE PTR _b$5585[ebp]
	mov	BYTE PTR _runValue$5577[ebp], al
; Line 214
	mov	DWORD PTR _runLength$5578[ebp], 1
$LN4@byteArrayT:
; Line 216
	jmp	SHORT $LN7@byteArrayT
$LN6@byteArrayT:
; Line 217
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _state$5579[ebp]
	push	ecx
	mov	edx, DWORD PTR _runLength$5578[ebp]
	push	edx
	movzx	eax, BYTE PTR _runValue$5577[ebp]
	push	eax
	mov	ecx, DWORD PTR _bufLimit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_encodeRunByte
	add	esp, 24					; 00000018H
	mov	DWORD PTR _buffer$[ebp], eax
; Line 222
	movzx	eax, BYTE PTR _state$5579[ebp]
	test	eax, eax
	je	SHORT $LN3@byteArrayT
; Line 223
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _state$5579[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _bufLimit$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_appendEncodedByte
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buffer$[ebp], eax
$LN3@byteArrayT:
; Line 225
	jmp	SHORT $LN2@byteArrayT
$LN9@byteArrayT:
; Line 226
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN2@byteArrayT:
; Line 228
	jmp	SHORT $LN1@byteArrayT
$LN10@byteArrayT:
; Line 229
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@byteArrayT:
; Line 231
	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, DWORD PTR _saveBuf$[ebp]
	sar	eax, 1
; Line 232
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@byteArrayT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@byteArrayT:
	DD	1
	DD	$LN14@byteArrayT
$LN14@byteArrayT:
	DD	-56					; ffffffc8H
	DD	2
	DD	$LN13@byteArrayT
$LN13@byteArrayT:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_byteArrayToRLEString ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _appendEncodedByte
_TEXT	SEGMENT
_c$5455 = -8						; size = 2
_buffer$ = 8						; size = 4
_buffLimit$ = 12					; size = 4
_value$ = 16						; size = 1
_state$ = 20						; size = 4
_status$ = 24						; size = 4
_appendEncodedByte PROC					; COMDAT
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 40
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN5@appendEnco
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN6@appendEnco
$LN5@appendEnco:
; Line 41
	xor	eax, eax
	jmp	SHORT $LN7@appendEnco
$LN6@appendEnco:
; Line 43
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@appendEnco
; Line 44
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	movzx	edx, BYTE PTR _value$[ebp]
	and	edx, 255				; 000000ffH
	or	ecx, edx
	mov	WORD PTR _c$5455[ebp], cx
; Line 45
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _buffLimit$[ebp]
	jae	SHORT $LN3@appendEnco
; Line 46
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cx, WORD PTR _c$5455[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 2
	mov	DWORD PTR _buffer$[ebp], edx
; Line 47
	jmp	SHORT $LN2@appendEnco
$LN3@appendEnco:
; Line 48
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN2@appendEnco:
; Line 50
	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax], 0
; Line 51
	mov	eax, DWORD PTR _buffer$[ebp]
	jmp	SHORT $LN7@appendEnco
; Line 53
	jmp	SHORT $LN7@appendEnco
$LN4@appendEnco:
; Line 54
	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax], 1
; Line 55
	mov	eax, DWORD PTR _state$[ebp]
	mov	cl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [eax+1], cl
; Line 56
	mov	eax, DWORD PTR _buffer$[ebp]
$LN7@appendEnco:
; Line 58
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_appendEncodedByte ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _encodeRunByte
_TEXT	SEGMENT
_j$5479 = -8						; size = 4
_buffer$ = 8						; size = 4
_bufLimit$ = 12						; size = 4
_value$ = 16						; size = 1
_length$ = 20						; size = 4
_state$ = 24						; size = 4
_status$ = 28						; size = 4
_encodeRunByte PROC					; COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 65
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN9@encodeRunB
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN10@encodeRunB
$LN9@encodeRunB:
; Line 66
	xor	eax, eax
	jmp	$LN11@encodeRunB
$LN10@encodeRunB:
; Line 68
	cmp	DWORD PTR _length$[ebp], 4
	jge	SHORT $LN8@encodeRunB
; Line 69
	mov	DWORD PTR _j$5479[ebp], 0
	jmp	SHORT $LN7@encodeRunB
$LN6@encodeRunB:
; Line 70
	mov	eax, DWORD PTR _j$5479[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5479[ebp], eax
$LN7@encodeRunB:
	mov	eax, DWORD PTR _j$5479[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN5@encodeRunB
; Line 71
	movzx	eax, BYTE PTR _value$[ebp]
	movzx	ecx, BYTE PTR _ESCAPE_BYTE
	cmp	eax, ecx
	jne	SHORT $LN4@encodeRunB
; Line 72
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _ESCAPE_BYTE
	push	edx
	mov	eax, DWORD PTR _bufLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_appendEncodedByte
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buffer$[ebp], eax
$LN4@encodeRunB:
; Line 74
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _bufLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_appendEncodedByte
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buffer$[ebp], eax
; Line 75
	jmp	SHORT $LN6@encodeRunB
$LN5@encodeRunB:
; Line 77
	jmp	$LN3@encodeRunB
$LN8@encodeRunB:
; Line 78
	movzx	eax, BYTE PTR _ESCAPE_BYTE
	cmp	DWORD PTR _length$[ebp], eax
	jne	SHORT $LN2@encodeRunB
; Line 79
	movzx	eax, BYTE PTR _value$[ebp]
	movzx	ecx, BYTE PTR _ESCAPE_BYTE
	cmp	eax, ecx
	jne	SHORT $LN1@encodeRunB
; Line 80
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _ESCAPE_BYTE
	push	edx
	mov	eax, DWORD PTR _bufLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_appendEncodedByte
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buffer$[ebp], eax
$LN1@encodeRunB:
; Line 82
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _bufLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_appendEncodedByte
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buffer$[ebp], eax
; Line 83
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
$LN2@encodeRunB:
; Line 85
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _ESCAPE_BYTE
	push	edx
	mov	eax, DWORD PTR _bufLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_appendEncodedByte
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buffer$[ebp], eax
; Line 86
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _bufLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_appendEncodedByte
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buffer$[ebp], eax
; Line 87
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _bufLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_appendEncodedByte
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buffer$[ebp], eax
$LN3@encodeRunB:
; Line 89
	mov	eax, DWORD PTR _buffer$[ebp]
$LN11@encodeRunB:
; Line 90
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encodeRunByte ENDP
_TEXT	ENDS
PUBLIC	_rleStringToUCharArray
EXTRN	_u_strlen_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _rleStringToUCharArray
_TEXT	SEGMENT
_j$5625 = -80						; size = 4
_runValue$5624 = -68					; size = 2
_runLength$5622 = -56					; size = 4
_c$5618 = -44						; size = 2
_i$ = -32						; size = 4
_ai$ = -20						; size = 4
_length$ = -8						; size = 4
_src$ = 8						; size = 4
_srcLen$ = 12						; size = 4
_target$ = 16						; size = 4
_tgtLen$ = 20						; size = 4
_status$ = 24						; size = 4
_rleStringToUCharArray PROC				; COMDAT
; Line 239
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 240
	mov	DWORD PTR _length$[ebp], 0
; Line 241
	mov	DWORD PTR _ai$[ebp], 0
; Line 242
	mov	DWORD PTR _i$[ebp], 2
; Line 244
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN16@rleStringT
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN17@rleStringT
$LN16@rleStringT:
; Line 245
	xor	eax, eax
	jmp	$LN18@rleStringT
$LN17@rleStringT:
; Line 248
	cmp	DWORD PTR _srcLen$[ebp], -1
	jne	SHORT $LN15@rleStringT
; Line 249
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLen$[ebp], eax
$LN15@rleStringT:
; Line 251
	cmp	DWORD PTR _srcLen$[ebp], 2
	jg	SHORT $LN14@rleStringT
; Line 252
	mov	eax, 2
	jmp	$LN18@rleStringT
$LN14@rleStringT:
; Line 254
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, WORD PTR [edx+2]
	or	ecx, eax
	mov	DWORD PTR _length$[ebp], ecx
; Line 256
	cmp	DWORD PTR _target$[ebp], 0
	jne	SHORT $LN13@rleStringT
; Line 257
	mov	eax, DWORD PTR _length$[ebp]
	jmp	$LN18@rleStringT
$LN13@rleStringT:
; Line 259
	mov	eax, DWORD PTR _tgtLen$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN12@rleStringT
; Line 260
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 261
	mov	eax, DWORD PTR _length$[ebp]
	jmp	$LN18@rleStringT
$LN12@rleStringT:
; Line 262
	jmp	SHORT $LN11@rleStringT
$LN10@rleStringT:
; Line 264
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@rleStringT:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _srcLen$[ebp]
	jge	$LN9@rleStringT
; Line 265
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c$5618[ebp], dx
; Line 266
	movzx	eax, WORD PTR _c$5618[ebp]
	movzx	ecx, WORD PTR _ESCAPE
	cmp	eax, ecx
	jne	$LN8@rleStringT
; Line 267
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	ax, WORD PTR [edx+ecx*2]
	mov	WORD PTR _c$5618[ebp], ax
; Line 268
	movzx	eax, WORD PTR _c$5618[ebp]
	movzx	ecx, WORD PTR _ESCAPE
	cmp	eax, ecx
	jne	SHORT $LN7@rleStringT
; Line 269
	mov	eax, DWORD PTR _ai$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	dx, WORD PTR _c$5618[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _ai$[ebp]
	add	eax, 1
	mov	DWORD PTR _ai$[ebp], eax
; Line 270
	jmp	SHORT $LN6@rleStringT
$LN7@rleStringT:
; Line 271
	movzx	eax, WORD PTR _c$5618[ebp]
	mov	DWORD PTR _runLength$5622[ebp], eax
; Line 272
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	ax, WORD PTR [edx+ecx*2]
	mov	WORD PTR _runValue$5624[ebp], ax
; Line 273
	mov	DWORD PTR _j$5625[ebp], 0
	jmp	SHORT $LN5@rleStringT
$LN4@rleStringT:
; Line 274
	mov	eax, DWORD PTR _j$5625[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5625[ebp], eax
$LN5@rleStringT:
	mov	eax, DWORD PTR _j$5625[ebp]
	cmp	eax, DWORD PTR _runLength$5622[ebp]
	jge	SHORT $LN6@rleStringT
; Line 275
	mov	eax, DWORD PTR _ai$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	dx, WORD PTR _runValue$5624[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _ai$[ebp]
	add	eax, 1
	mov	DWORD PTR _ai$[ebp], eax
; Line 276
	jmp	SHORT $LN4@rleStringT
$LN6@rleStringT:
; Line 279
	jmp	SHORT $LN2@rleStringT
$LN8@rleStringT:
; Line 280
	mov	eax, DWORD PTR _ai$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	dx, WORD PTR _c$5618[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _ai$[ebp]
	add	eax, 1
	mov	DWORD PTR _ai$[ebp], eax
$LN2@rleStringT:
; Line 282
	jmp	$LN10@rleStringT
$LN9@rleStringT:
; Line 284
	mov	eax, DWORD PTR _ai$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	je	SHORT $LN1@rleStringT
; Line 285
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 5
$LN1@rleStringT:
; Line 288
	mov	eax, DWORD PTR _length$[ebp]
$LN18@rleStringT:
; Line 289
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rleStringToUCharArray ENDP
_TEXT	ENDS
PUBLIC	_rleStringToByteArray
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _rleStringToByteArray
_TEXT	SEGMENT
tv89 = -304						; size = 4
_j$5677 = -104						; size = 4
_b$5661 = -89						; size = 1
_ai$ = -80						; size = 4
_i$ = -68						; size = 4
_runLength$ = -56					; size = 4
_node$ = -44						; size = 4
_c$ = -32						; size = 2
_nextChar$ = -17					; size = 1
_length$ = -8						; size = 4
_src$ = 8						; size = 4
_srcLen$ = 12						; size = 4
_target$ = 16						; size = 4
_tgtLen$ = 20						; size = 4
_status$ = 24						; size = 4
_rleStringToByteArray PROC				; COMDAT
; Line 295
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 297
	mov	DWORD PTR _length$[ebp], 0
; Line 298
	mov	BYTE PTR _nextChar$[ebp], 1
; Line 299
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 300
	mov	DWORD PTR _node$[ebp], 0
; Line 301
	mov	DWORD PTR _runLength$[ebp], 0
; Line 302
	mov	DWORD PTR _i$[ebp], 2
; Line 303
	mov	DWORD PTR _ai$[ebp], 0
; Line 305
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN25@rleStringT@2
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN26@rleStringT@2
$LN25@rleStringT@2:
; Line 306
	xor	eax, eax
	jmp	$LN27@rleStringT@2
$LN26@rleStringT@2:
; Line 309
	cmp	DWORD PTR _srcLen$[ebp], -1
	jne	SHORT $LN24@rleStringT@2
; Line 310
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLen$[ebp], eax
$LN24@rleStringT@2:
; Line 312
	cmp	DWORD PTR _srcLen$[ebp], 2
	jg	SHORT $LN23@rleStringT@2
; Line 313
	mov	eax, 2
	jmp	$LN27@rleStringT@2
$LN23@rleStringT@2:
; Line 315
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, WORD PTR [edx+2]
	or	ecx, eax
	mov	DWORD PTR _length$[ebp], ecx
; Line 317
	cmp	DWORD PTR _target$[ebp], 0
	jne	SHORT $LN22@rleStringT@2
; Line 318
	mov	eax, DWORD PTR _length$[ebp]
	jmp	$LN27@rleStringT@2
$LN22@rleStringT@2:
; Line 320
	mov	eax, DWORD PTR _tgtLen$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN20@rleStringT@2
; Line 321
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 322
	mov	eax, DWORD PTR _length$[ebp]
	jmp	$LN27@rleStringT@2
$LN20@rleStringT@2:
; Line 325
	mov	eax, DWORD PTR _ai$[ebp]
	cmp	eax, DWORD PTR _tgtLen$[ebp]
	jge	$LN19@rleStringT@2
; Line 332
	movsx	eax, BYTE PTR _nextChar$[ebp]
	test	eax, eax
	je	SHORT $LN18@rleStringT@2
; Line 333
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c$[ebp], dx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 334
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	BYTE PTR _b$5661[ebp], al
; Line 335
	mov	BYTE PTR _nextChar$[ebp], 0
; Line 337
	jmp	SHORT $LN17@rleStringT@2
$LN18@rleStringT@2:
; Line 338
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _b$5661[ebp], al
; Line 339
	mov	BYTE PTR _nextChar$[ebp], 1
$LN17@rleStringT@2:
; Line 347
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	cmp	DWORD PTR tv89[ebp], 0
	je	SHORT $LN14@rleStringT@2
	cmp	DWORD PTR tv89[ebp], 1
	je	SHORT $LN11@rleStringT@2
	cmp	DWORD PTR tv89[ebp], 2
	je	SHORT $LN8@rleStringT@2
	jmp	$LN15@rleStringT@2
$LN14@rleStringT@2:
; Line 350
	movzx	eax, BYTE PTR _b$5661[ebp]
	movzx	ecx, BYTE PTR _ESCAPE_BYTE
	cmp	eax, ecx
	jne	SHORT $LN13@rleStringT@2
; Line 351
	mov	DWORD PTR _node$[ebp], 1
; Line 353
	jmp	SHORT $LN12@rleStringT@2
$LN13@rleStringT@2:
; Line 354
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, DWORD PTR _ai$[ebp]
	mov	cl, BYTE PTR _b$5661[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _ai$[ebp]
	add	edx, 1
	mov	DWORD PTR _ai$[ebp], edx
$LN12@rleStringT@2:
; Line 356
	jmp	$LN15@rleStringT@2
$LN11@rleStringT@2:
; Line 361
	movzx	eax, BYTE PTR _b$5661[ebp]
	movzx	ecx, BYTE PTR _ESCAPE_BYTE
	cmp	eax, ecx
	jne	SHORT $LN10@rleStringT@2
; Line 362
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, DWORD PTR _ai$[ebp]
	mov	cl, BYTE PTR _ESCAPE_BYTE
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _ai$[ebp]
	add	edx, 1
	mov	DWORD PTR _ai$[ebp], edx
; Line 363
	mov	DWORD PTR _node$[ebp], 0
; Line 365
	jmp	SHORT $LN9@rleStringT@2
$LN10@rleStringT@2:
; Line 366
	movzx	eax, BYTE PTR _b$5661[ebp]
	mov	DWORD PTR _runLength$[ebp], eax
; Line 367
	mov	DWORD PTR _node$[ebp], 2
$LN9@rleStringT@2:
; Line 369
	jmp	SHORT $LN15@rleStringT@2
$LN8@rleStringT@2:
; Line 372
	mov	DWORD PTR _j$5677[ebp], 0
	jmp	SHORT $LN7@rleStringT@2
$LN6@rleStringT@2:
; Line 376
	mov	eax, DWORD PTR _j$5677[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5677[ebp], eax
$LN7@rleStringT@2:
	mov	eax, DWORD PTR _j$5677[ebp]
	cmp	eax, DWORD PTR _runLength$[ebp]
	jge	SHORT $LN5@rleStringT@2
; Line 377
	mov	eax, DWORD PTR _ai$[ebp]
	cmp	eax, DWORD PTR _tgtLen$[ebp]
	jge	SHORT $LN4@rleStringT@2
; Line 378
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, DWORD PTR _ai$[ebp]
	mov	cl, BYTE PTR _b$5661[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _ai$[ebp]
	add	edx, 1
	mov	DWORD PTR _ai$[ebp], edx
; Line 379
	jmp	SHORT $LN3@rleStringT@2
$LN4@rleStringT@2:
; Line 380
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 381
	mov	eax, DWORD PTR _ai$[ebp]
	jmp	SHORT $LN27@rleStringT@2
$LN3@rleStringT@2:
; Line 383
	jmp	SHORT $LN6@rleStringT@2
$LN5@rleStringT@2:
; Line 384
	mov	DWORD PTR _node$[ebp], 0
$LN15@rleStringT@2:
; Line 388
	jmp	$LN20@rleStringT@2
$LN19@rleStringT@2:
; Line 390
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@rleStringT@2
; Line 391
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 5
; Line 393
	xor	eax, eax
	jmp	SHORT $LN27@rleStringT@2
$LN2@rleStringT@2:
; Line 397
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _srcLen$[ebp]
	je	SHORT $LN1@rleStringT@2
; Line 399
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 5
; Line 400
	mov	eax, DWORD PTR _ai$[ebp]
	jmp	SHORT $LN27@rleStringT@2
$LN1@rleStringT@2:
; Line 403
	mov	eax, DWORD PTR _ai$[ebp]
$LN27@rleStringT@2:
; Line 404
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rleStringToByteArray ENDP
_TEXT	ENDS
END
