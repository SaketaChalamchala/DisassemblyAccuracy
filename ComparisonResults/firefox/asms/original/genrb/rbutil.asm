; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\genrb\rbutil.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_get_dirname
EXTRN	__imp__strncpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	__imp__strrchr:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\tools\genrb\rbutil.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _get_dirname
_TEXT	SEGMENT
_lastSlash$ = -8					; size = 4
_dirname$ = 8						; size = 4
_filename$ = 12						; size = 4
_get_dirname PROC					; COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 31
	mov	esi, esp
	push	92					; 0000005cH
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	DWORD PTR _lastSlash$[ebp], eax
; Line 33
	mov	eax, DWORD PTR _lastSlash$[ebp]
	cmp	eax, DWORD PTR _filename$[ebp]
	jbe	SHORT $LN2@get_dirnam
; Line 34
	push	1
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _lastSlash$[ebp]
	sub	ecx, DWORD PTR _filename$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	mov	eax, DWORD PTR _dirname$[ebp]
	push	eax
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 35
	mov	eax, DWORD PTR _lastSlash$[ebp]
	sub	eax, DWORD PTR _filename$[ebp]
	mov	ecx, DWORD PTR _dirname$[ebp]
	mov	BYTE PTR [ecx+eax], 0
; Line 36
	jmp	SHORT $LN3@get_dirnam
$LN2@get_dirnam:
; Line 37
	mov	eax, DWORD PTR _dirname$[ebp]
	mov	BYTE PTR [eax], 0
$LN3@get_dirnam:
; Line 39
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_dirname ENDP
_TEXT	ENDS
PUBLIC	_get_basename
EXTRN	_strcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _get_basename
_TEXT	SEGMENT
_lastDot$ = -20						; size = 4
_lastSlash$ = -8					; size = 4
_basename$ = 8						; size = 4
_filename$ = 12						; size = 4
_get_basename PROC					; COMDAT
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 47
	mov	esi, esp
	push	92					; 0000005cH
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	DWORD PTR _lastSlash$[ebp], eax
; Line 50
	mov	eax, DWORD PTR _lastSlash$[ebp]
	cmp	eax, DWORD PTR _filename$[ebp]
	jbe	SHORT $LN3@get_basena
; Line 51
	mov	eax, DWORD PTR _lastSlash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _basename$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 52
	jmp	SHORT $LN2@get_basena
$LN3@get_basena:
; Line 53
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _basename$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN2@get_basena:
; Line 57
	mov	esi, esp
	push	46					; 0000002eH
	mov	eax, DWORD PTR _basename$[ebp]
	push	eax
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lastDot$[ebp], eax
; Line 59
	cmp	DWORD PTR _lastDot$[ebp], 0
	je	SHORT $LN4@get_basena
; Line 60
	mov	eax, DWORD PTR _lastDot$[ebp]
	mov	BYTE PTR [eax], 0
$LN4@get_basena:
; Line 62
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_basename ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_itostr
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _itostr
_TEXT	SEGMENT
tv81 = -296						; size = 4
_temp$ = -93						; size = 1
_j$ = -84						; size = 4
_digit$ = -72						; size = 4
_save$ = -60						; size = 4
_num$ = -48						; size = 4
_length$ = -36						; size = 4
_digits$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_buffer$ = 8						; size = 4
_i$ = 12						; size = 4
_radix$ = 16						; size = 4
_pad$ = 20						; size = 4
_itostr	PROC						; COMDAT
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 68
	mov	BYTE PTR _digits$[ebp], 48		; 00000030H
	mov	BYTE PTR _digits$[ebp+1], 49		; 00000031H
	mov	BYTE PTR _digits$[ebp+2], 50		; 00000032H
	mov	BYTE PTR _digits$[ebp+3], 51		; 00000033H
	mov	BYTE PTR _digits$[ebp+4], 52		; 00000034H
	mov	BYTE PTR _digits$[ebp+5], 53		; 00000035H
	mov	BYTE PTR _digits$[ebp+6], 54		; 00000036H
	mov	BYTE PTR _digits$[ebp+7], 55		; 00000037H
	mov	BYTE PTR _digits$[ebp+8], 56		; 00000038H
	mov	BYTE PTR _digits$[ebp+9], 57		; 00000039H
	mov	BYTE PTR _digits$[ebp+10], 97		; 00000061H
	mov	BYTE PTR _digits$[ebp+11], 98		; 00000062H
	mov	BYTE PTR _digits$[ebp+12], 99		; 00000063H
	mov	BYTE PTR _digits$[ebp+13], 100		; 00000064H
	mov	BYTE PTR _digits$[ebp+14], 101		; 00000065H
	mov	BYTE PTR _digits$[ebp+15], 102		; 00000066H
; Line 69
	mov	DWORD PTR _length$[ebp], 0
; Line 70
	mov	DWORD PTR _num$[ebp], 0
; Line 71
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _save$[ebp], eax
; Line 77
	cmp	DWORD PTR _i$[ebp], 0
	jge	SHORT $LN10@itostr
; Line 78
	mov	eax, DWORD PTR _i$[ebp]
	neg	eax
	mov	DWORD PTR _i$[ebp], eax
$LN10@itostr:
; Line 82
	mov	eax, DWORD PTR _i$[ebp]
	xor	edx, edx
	div	DWORD PTR _radix$[ebp]
	mov	DWORD PTR _digit$[ebp], edx
; Line 83
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _digit$[ebp]
	mov	dl, BYTE PTR _digits$[ebp+ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 84
	mov	eax, DWORD PTR _i$[ebp]
	xor	edx, edx
	div	DWORD PTR _radix$[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 85
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN10@itostr
$LN7@itostr:
; Line 87
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _pad$[ebp]
	jge	SHORT $LN6@itostr
; Line 88
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 1
	mov	DWORD PTR _length$[ebp], ecx
; Line 89
	jmp	SHORT $LN7@itostr
$LN6@itostr:
; Line 92
	cmp	DWORD PTR _save$[ebp], 0
	jge	SHORT $LN5@itostr
; Line 93
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 1
	mov	DWORD PTR _length$[ebp], ecx
$LN5@itostr:
; Line 97
	cmp	DWORD PTR _length$[ebp], 10		; 0000000aH
	jge	SHORT $LN4@itostr
; Line 98
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	BYTE PTR [eax], 0
$LN4@itostr:
; Line 101
	mov	eax, DWORD PTR _pad$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jl	SHORT $LN14@itostr
	mov	ecx, DWORD PTR _pad$[ebp]
	mov	DWORD PTR tv81[ebp], ecx
	jmp	SHORT $LN15@itostr
$LN14@itostr:
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv81[ebp], edx
$LN15@itostr:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _num$[ebp], eax
; Line 105
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@itostr
$LN2@itostr:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@itostr:
	mov	eax, DWORD PTR _num$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN1@itostr
; Line 106
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _temp$[ebp], dl
; Line 107
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [edx+eax], cl
; Line 108
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	cl, BYTE PTR _temp$[ebp]
	mov	BYTE PTR [eax], cl
; Line 109
	jmp	SHORT $LN2@itostr
$LN1@itostr:
; Line 110
	mov	eax, DWORD PTR _length$[ebp]
; Line 111
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@itostr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@itostr:
	DD	1
	DD	$LN17@itostr
$LN17@itostr:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN16@itostr
$LN16@itostr:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_itostr	ENDP
_TEXT	ENDS
END
