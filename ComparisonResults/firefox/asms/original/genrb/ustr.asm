; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\genrb\ustr.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_ustr_init
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\tools\genrb\ustr.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ustr_init
_TEXT	SEGMENT
_s$ = 8							; size = 4
_ustr_init PROC						; COMDAT
; Line 33
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 34
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], 0
; Line 35
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 36
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_init ENDP
_TEXT	ENDS
PUBLIC	_ustr_ucat
PUBLIC	_ustr_initChars
EXTRN	_u_charsToUChars_56:PROC
EXTRN	_strlen:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ustr_initChars
_TEXT	SEGMENT
tv77 = -220						; size = 4
_charToAppend$7979 = -20				; size = 2
_i$ = -8						; size = 4
_s$ = 8							; size = 4
_source$ = 12						; size = 4
_length$ = 16						; size = 4
_status$ = 20						; size = 4
_ustr_initChars PROC					; COMDAT
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 41
	mov	DWORD PTR _i$[ebp], 0
; Line 42
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN7@ustr_initC
	jmp	$LN8@ustr_initC
$LN7@ustr_initC:
; Line 43
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], 0
; Line 44
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 45
	cmp	DWORD PTR _length$[ebp], -1
	jne	SHORT $LN6@ustr_initC
; Line 46
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
$LN6@ustr_initC:
; Line 48
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	SHORT $LN5@ustr_initC
; Line 49
	cmp	DWORD PTR _length$[ebp], 128		; 00000080H
	jge	SHORT $LN10@ustr_initC
	mov	DWORD PTR tv77[ebp], 128		; 00000080H
	jmp	SHORT $LN11@ustr_initC
$LN10@ustr_initC:
	mov	eax, DWORD PTR _length$[ebp]
	lea	ecx, DWORD PTR [eax+eax+128]
	and	ecx, -128				; ffffff80H
	mov	DWORD PTR tv77[ebp], ecx
$LN11@ustr_initC:
	mov	edx, DWORD PTR _status$[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_ustr_resize
	add	esp, 12					; 0000000cH
; Line 50
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN5@ustr_initC
	jmp	SHORT $LN8@ustr_initC
$LN5@ustr_initC:
; Line 51
	jmp	SHORT $LN3@ustr_initC
$LN2@ustr_initC:
; Line 52
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@ustr_initC:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN8@ustr_initC
; Line 55
	push	1
	lea	eax, DWORD PTR _charToAppend$7979[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_u_charsToUChars_56
	add	esp, 12					; 0000000cH
; Line 56
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, WORD PTR _charToAppend$7979[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_ustr_ucat
	add	esp, 12					; 0000000cH
; Line 66
	jmp	SHORT $LN2@ustr_initC
$LN8@ustr_initC:
; Line 67
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ustr_initC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@ustr_initC:
	DD	1
	DD	$LN13@ustr_initC
$LN13@ustr_initC:
	DD	-20					; ffffffecH
	DD	2
	DD	$LN12@ustr_initC
$LN12@ustr_initC:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	65					; 00000041H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_ustr_initChars ENDP
_TEXT	ENDS
PUBLIC	_ustr_deinit
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ustr_deinit
_TEXT	SEGMENT
_s$ = 8							; size = 4
_ustr_deinit PROC					; COMDAT
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 72
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN2@ustr_deini
; Line 73
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 74
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], 0
; Line 75
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN2@ustr_deini:
; Line 77
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_deinit ENDP
_TEXT	ENDS
PUBLIC	_ustr_cpy
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ustr_cpy
_TEXT	SEGMENT
tv76 = -196						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_status$ = 16						; size = 4
_ustr_cpy PROC						; COMDAT
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 84
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN5@ustr_cpy
	mov	eax, DWORD PTR _dst$[ebp]
	cmp	eax, DWORD PTR _src$[ebp]
	jne	SHORT $LN6@ustr_cpy
$LN5@ustr_cpy:
; Line 85
	jmp	$LN7@ustr_cpy
$LN6@ustr_cpy:
; Line 87
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN4@ustr_cpy
; Line 88
	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax+4], 128			; 00000080H
	jge	SHORT $LN9@ustr_cpy
	mov	DWORD PTR tv76[ebp], 128		; 00000080H
	jmp	SHORT $LN10@ustr_cpy
$LN9@ustr_cpy:
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+edx+128]
	and	eax, -128				; ffffff80H
	mov	DWORD PTR tv76[ebp], eax
$LN10@ustr_cpy:
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv76[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_ustr_resize
	add	esp, 12					; 0000000cH
; Line 89
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@ustr_cpy
; Line 90
	jmp	SHORT $LN7@ustr_cpy
$LN4@ustr_cpy:
; Line 92
	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@ustr_cpy
	mov	eax, DWORD PTR _dst$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@ustr_cpy
$LN1@ustr_cpy:
; Line 93
	jmp	SHORT $LN7@ustr_cpy
$LN2@ustr_cpy:
; Line 95
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 96
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 97
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
$LN7@ustr_cpy:
; Line 98
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_cpy ENDP
_TEXT	ENDS
PUBLIC	_ustr_setlen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ustr_setlen
_TEXT	SEGMENT
tv73 = -196						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
_status$ = 16						; size = 4
_ustr_setlen PROC					; COMDAT
; Line 104
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 105
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@ustr_setle
; Line 106
	jmp	SHORT $LN4@ustr_setle
$LN3@ustr_setle:
; Line 108
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jge	SHORT $LN2@ustr_setle
; Line 109
	cmp	DWORD PTR _len$[ebp], 128		; 00000080H
	jge	SHORT $LN6@ustr_setle
	mov	DWORD PTR tv73[ebp], 128		; 00000080H
	jmp	SHORT $LN7@ustr_setle
$LN6@ustr_setle:
	mov	eax, DWORD PTR _len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+128]
	and	ecx, -128				; ffffff80H
	mov	DWORD PTR tv73[ebp], ecx
$LN7@ustr_setle:
	mov	edx, DWORD PTR _status$[ebp]
	push	edx
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_ustr_resize
	add	esp, 12					; 0000000cH
; Line 110
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@ustr_setle
; Line 111
	jmp	SHORT $LN4@ustr_setle
$LN2@ustr_setle:
; Line 114
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 115
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
$LN4@ustr_setle:
; Line 116
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_setlen ENDP
_TEXT	ENDS
PUBLIC	_ustr_ncat
PUBLIC	_ustr_cat
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ustr_cat
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_status$ = 16						; size = 4
_ustr_cat PROC						; COMDAT
; Line 122
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 123
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	call	_ustr_ncat
	add	esp, 16					; 00000010H
; Line 124
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_cat ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ustr_ncat
_TEXT	SEGMENT
tv79 = -196						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_n$ = 16						; size = 4
_status$ = 20						; size = 4
_ustr_ncat PROC						; COMDAT
; Line 131
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 132
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN3@ustr_ncat
	mov	eax, DWORD PTR _dst$[ebp]
	cmp	eax, DWORD PTR _src$[ebp]
	jne	SHORT $LN4@ustr_ncat
$LN3@ustr_ncat:
; Line 133
	jmp	$LN5@ustr_ncat
$LN4@ustr_ncat:
; Line 135
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	cmp	DWORD PTR [edx+8], ecx
	jge	SHORT $LN2@ustr_ncat
; Line 136
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, 128				; 00000080H
	jge	SHORT $LN7@ustr_ncat
	mov	DWORD PTR tv79[ebp], 128		; 00000080H
	jmp	SHORT $LN8@ustr_ncat
$LN7@ustr_ncat:
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _n$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+128]
	and	edx, -128				; ffffff80H
	mov	DWORD PTR tv79[ebp], edx
$LN8@ustr_ncat:
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv79[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_ustr_resize
	add	esp, 12					; 0000000cH
; Line 137
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@ustr_ncat
; Line 138
	jmp	SHORT $LN5@ustr_ncat
$LN2@ustr_ncat:
; Line 142
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _n$[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*2]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 143
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 144
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
$LN5@ustr_ncat:
; Line 145
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_ncat ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ustr_ucat
_TEXT	SEGMENT
tv78 = -196						; size = 4
_dst$ = 8						; size = 4
_c$ = 12						; size = 2
_status$ = 16						; size = 4
_ustr_ucat PROC						; COMDAT
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 152
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@ustr_ucat
; Line 153
	jmp	$LN4@ustr_ucat
$LN3@ustr_ucat:
; Line 155
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _dst$[ebp]
	cmp	DWORD PTR [edx+8], ecx
	jge	SHORT $LN2@ustr_ucat
; Line 156
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	cmp	ecx, 128				; 00000080H
	jge	SHORT $LN6@ustr_ucat
	mov	DWORD PTR tv78[ebp], 128		; 00000080H
	jmp	SHORT $LN7@ustr_ucat
$LN6@ustr_ucat:
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+eax+129]
	and	ecx, -128				; ffffff80H
	mov	DWORD PTR tv78[ebp], ecx
$LN7@ustr_ucat:
	mov	edx, DWORD PTR _status$[ebp]
	push	edx
	mov	eax, DWORD PTR tv78[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	call	_ustr_resize
	add	esp, 12					; 0000000cH
; Line 157
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@ustr_ucat
; Line 158
	jmp	SHORT $LN4@ustr_ucat
$LN2@ustr_ucat:
; Line 162
	push	1
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	2
	lea	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*2]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 163
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 164
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
$LN4@ustr_ucat:
; Line 165
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_ucat ENDP
_TEXT	ENDS
PUBLIC	_ustr_u32cat
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ustr_u32cat
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_c$ = 12						; size = 4
_status$ = 16						; size = 4
_ustr_u32cat PROC					; COMDAT
; Line 167
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 168
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	jle	SHORT $LN3@ustr_u32ca
; Line 169
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 170
	jmp	SHORT $LN4@ustr_u32ca
$LN3@ustr_u32ca:
; Line 172
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	jle	SHORT $LN2@ustr_u32ca
; Line 173
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	sar	ecx, 10					; 0000000aH
	add	ecx, 55232				; 0000d7c0H
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_ustr_ucat
	add	esp, 12					; 0000000cH
; Line 174
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 1023				; 000003ffH
	or	ecx, 56320				; 0000dc00H
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_ustr_ucat
	add	esp, 12					; 0000000cH
; Line 175
	jmp	SHORT $LN4@ustr_u32ca
$LN2@ustr_u32ca:
; Line 176
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, WORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_ustr_ucat
	add	esp, 12					; 0000000cH
$LN4@ustr_u32ca:
; Line 178
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_u32cat ENDP
_TEXT	ENDS
PUBLIC	_ustr_uscat
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ustr_uscat
_TEXT	SEGMENT
tv78 = -196						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_len$ = 16						; size = 4
_status$ = 20						; size = 4
_ustr_uscat PROC					; COMDAT
; Line 183
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 184
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@ustr_uscat
; Line 185
	jmp	$LN4@ustr_uscat
$LN3@ustr_uscat:
; Line 187
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	cmp	DWORD PTR [edx+8], ecx
	jge	SHORT $LN2@ustr_uscat
; Line 188
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, 128				; 00000080H
	jge	SHORT $LN6@ustr_uscat
	mov	DWORD PTR tv78[ebp], 128		; 00000080H
	jmp	SHORT $LN7@ustr_uscat
$LN6@ustr_uscat:
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _len$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+128]
	and	edx, -128				; ffffff80H
	mov	DWORD PTR tv78[ebp], edx
$LN7@ustr_uscat:
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv78[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_ustr_resize
	add	esp, 12					; 0000000cH
; Line 189
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@ustr_uscat
; Line 190
	jmp	SHORT $LN4@ustr_uscat
$LN2@ustr_uscat:
; Line 194
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _len$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*2]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 195
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 196
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
$LN4@ustr_uscat:
; Line 197
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_uscat ENDP
_TEXT	ENDS
EXTRN	_uprv_realloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ustr_resize
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
_status$ = 16						; size = 4
_ustr_resize PROC					; COMDAT
; Line 204
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 205
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@ustr_resiz
; Line 206
	jmp	SHORT $LN3@ustr_resiz
$LN2@ustr_resiz:
; Line 209
	mov	eax, DWORD PTR _len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_uprv_realloc_56
	add	esp, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 210
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@ustr_resiz
; Line 211
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 212
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 213
	jmp	SHORT $LN3@ustr_resiz
$LN1@ustr_resiz:
; Line 216
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ustr_resiz:
; Line 217
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_resize ENDP
_TEXT	ENDS
END
