; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\makeconv\gencnvex.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@	; `string'
PUBLIC	_CnvExtOpen
EXTRN	_memset:PROC
EXTRN	__imp__exit:PROC
EXTRN	__imp__printf:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@
; File d:\mozilla\intl\icu\source\tools\makeconv\gencnvex.c
CONST	SEGMENT
??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@ DB 'out of memory', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _CnvExtOpen
_TEXT	SEGMENT
_extData$ = -8						; size = 4
_ucm$ = 8						; size = 4
_CnvExtOpen PROC					; COMDAT
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 75
	push	917588					; 000e0054H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _extData$[ebp], eax
; Line 76
	cmp	DWORD PTR _extData$[ebp], 0
	jne	SHORT $LN1@CnvExtOpen
; Line 77
	mov	esi, esp
	push	OFFSET ??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 78
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@CnvExtOpen:
; Line 80
	push	917588					; 000e0054H
	push	0
	mov	eax, DWORD PTR _extData$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 82
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _ucm$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 84
	mov	eax, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [eax], OFFSET _CnvExtClose
; Line 85
	mov	eax, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [eax+4], OFFSET _CnvExtIsValid
; Line 86
	mov	eax, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _CnvExtAddTable
; Line 87
	mov	eax, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _CnvExtWrite
; Line 88
	mov	eax, DWORD PTR _extData$[ebp]
$LN3@CnvExtOpen:
; Line 89
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CnvExtOpen ENDP
_TEXT	ENDS
EXTRN	_uprv_free_56:PROC
EXTRN	_utm_close:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _CnvExtClose
_TEXT	SEGMENT
_extData$ = -8						; size = 4
_cnvData$ = 8						; size = 4
_CnvExtClose PROC					; COMDAT
; Line 92
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 93
	mov	eax, DWORD PTR _cnvData$[ebp]
	mov	DWORD PTR _extData$[ebp], eax
; Line 94
	cmp	DWORD PTR _extData$[ebp], 0
	je	SHORT $LN2@CnvExtClos
; Line 95
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_utm_close
	add	esp, 4
; Line 96
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_utm_close
	add	esp, 4
; Line 97
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_utm_close
	add	esp, 4
; Line 98
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_utm_close
	add	esp, 4
; Line 99
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_utm_close
	add	esp, 4
; Line 100
	mov	eax, DWORD PTR _extData$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@CnvExtClos:
; Line 102
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CnvExtClose ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _CnvExtIsValid
_TEXT	SEGMENT
_cnvData$ = 8						; size = 4
_bytes$ = 12						; size = 4
_length$ = 16						; size = 4
_CnvExtIsValid PROC					; COMDAT
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 108
	xor	al, al
; Line 109
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CnvExtIsValid ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@FBDKGFID@size?5of?5extension?5data?3?5?$CFld?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	_VERBOSE:BYTE
EXTRN	_utm_getStart:PROC
EXTRN	_utm_alloc:PROC
EXTRN	_utm_countItems:PROC
EXTRN	_udata_writeBlock:PROC
EXTRN	_strlen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BN@FBDKGFID@size?5of?5extension?5data?3?5?$CFld?6?$AA@
CONST	SEGMENT
??_C@_0BN@FBDKGFID@size?5of?5extension?5data?3?5?$CFld?6?$AA@ DB 'size of'
	DB	' extension data: %ld', 0aH, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _CnvExtWrite
_TEXT	SEGMENT
_header$13572 = -232					; size = 40
_indexes$ = -184					; size = 128
_headerSize$ = -48					; size = 4
_top$ = -36						; size = 4
_length$ = -24						; size = 4
_extData$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_cnvData$ = 8						; size = 4
_staticData$ = 12					; size = 4
_pData$ = 16						; size = 4
_tableType$ = 20					; size = 4
_CnvExtWrite PROC					; COMDAT
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-428]
	mov	ecx, 107				; 0000006bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 114
	mov	eax, DWORD PTR _cnvData$[ebp]
	mov	DWORD PTR _extData$[ebp], eax
; Line 117
	mov	DWORD PTR _indexes$[ebp], 0
	push	124					; 0000007cH
	push	0
	lea	eax, DWORD PTR _indexes$[ebp+4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 119
	mov	eax, DWORD PTR _tableType$[ebp]
	and	eax, 1
	je	SHORT $LN8@CnvExtWrit
; Line 120
	mov	DWORD PTR _headerSize$[ebp], 0
; Line 121
	jmp	$LN7@CnvExtWrit
$LN8@CnvExtWrit:
; Line 122
	mov	BYTE PTR _header$13572[ebp], 0
	mov	BYTE PTR _header$13572[ebp+1], 0
	mov	BYTE PTR _header$13572[ebp+2], 0
	mov	BYTE PTR _header$13572[ebp+3], 0
	mov	DWORD PTR _header$13572[ebp+4], 0
	mov	DWORD PTR _header$13572[ebp+8], 0
	mov	DWORD PTR _header$13572[ebp+12], 0
	mov	DWORD PTR _header$13572[ebp+16], 0
	mov	DWORD PTR _header$13572[ebp+20], 0
	mov	DWORD PTR _header$13572[ebp+24], 0
	mov	DWORD PTR _header$13572[ebp+28], 0
	xor	eax, eax
	mov	DWORD PTR _header$13572[ebp+32], eax
	mov	DWORD PTR _header$13572[ebp+36], eax
; Line 125
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 132124				; 0002041cH
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
$LN6@CnvExtWrit:
; Line 126
	mov	eax, DWORD PTR _length$[ebp]
	and	eax, 3
	je	SHORT $LN5@CnvExtWrit
; Line 128
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _length$[ebp]
	mov	BYTE PTR [ecx+edx+132124], 0
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 129
	jmp	SHORT $LN6@CnvExtWrit
$LN5@CnvExtWrit:
; Line 131
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _headerSize$[ebp], eax
; Line 134
	mov	BYTE PTR _header$13572[ebp], 4
; Line 135
	mov	BYTE PTR _header$13572[ebp+1], 2
; Line 136
	mov	eax, DWORD PTR _headerSize$[ebp]
	shl	eax, 8
	or	eax, 14					; 0000000eH
	mov	DWORD PTR _header$13572[ebp+24], eax
; Line 139
	push	32					; 00000020H
	lea	eax, DWORD PTR _header$13572[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 140
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 132124				; 0002041cH
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
$LN7@CnvExtWrit:
; Line 144
	mov	DWORD PTR _top$[ebp], 0
; Line 146
	mov	DWORD PTR _length$[ebp], 32		; 00000020H
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _indexes$[ebp], eax
; Line 147
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _top$[ebp], edx
; Line 149
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _indexes$[ebp+4], eax
; Line 150
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_utm_countItems
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR _indexes$[ebp+8], edx
; Line 151
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _top$[ebp], edx
; Line 153
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _indexes$[ebp+12], eax
; Line 154
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_utm_countItems
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR _indexes$[ebp+16], edx
; Line 155
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _top$[ebp], edx
; Line 157
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _indexes$[ebp+20], eax
; Line 158
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_utm_countItems
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
; Line 159
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _top$[ebp], edx
; Line 161
	mov	eax, DWORD PTR _top$[ebp]
	and	eax, 3
	je	SHORT $LN4@CnvExtWrit
; Line 163
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_utm_alloc
	add	esp, 4
	xor	edx, edx
	mov	WORD PTR [eax], dx
; Line 164
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_utm_alloc
	add	esp, 4
	mov	DWORD PTR [eax], 0
; Line 165
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 166
	mov	eax, DWORD PTR _top$[ebp]
	add	eax, 2
	mov	DWORD PTR _top$[ebp], eax
$LN4@CnvExtWrit:
; Line 168
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _indexes$[ebp+28], eax
; Line 170
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _indexes$[ebp+24], eax
; Line 171
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _top$[ebp], edx
; Line 173
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _indexes$[ebp+32], eax
; Line 174
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_utm_countItems
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
; Line 175
	mov	eax, DWORD PTR _top$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _top$[ebp], eax
; Line 177
	mov	eax, DWORD PTR _top$[ebp]
	and	eax, 1
	je	SHORT $LN3@CnvExtWrit
; Line 179
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_utm_alloc
	add	esp, 4
	mov	BYTE PTR [eax], 0
; Line 180
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 181
	mov	eax, DWORD PTR _top$[ebp]
	add	eax, 1
	mov	DWORD PTR _top$[ebp], eax
$LN3@CnvExtWrit:
; Line 183
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _indexes$[ebp+36], eax
; Line 185
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _indexes$[ebp+40], eax
; Line 186
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917544]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR _indexes$[ebp+44], edx
; Line 187
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, DWORD PTR [eax+917548]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR _indexes$[ebp+48], edx
; Line 188
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _top$[ebp], edx
; Line 190
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _indexes$[ebp+52], eax
; Line 191
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917552]
	mov	DWORD PTR _length$[ebp], ecx
; Line 192
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _top$[ebp], edx
; Line 194
	mov	eax, DWORD PTR _top$[ebp]
	and	eax, 3
	je	SHORT $LN2@CnvExtWrit
; Line 196
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917552]
	xor	edx, edx
	mov	eax, DWORD PTR _extData$[ebp]
	mov	WORD PTR [eax+ecx*2+131112], dx
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR [ecx+917552]
	add	edx, 1
	mov	eax, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [eax+917552], edx
; Line 197
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 198
	mov	eax, DWORD PTR _top$[ebp]
	add	eax, 2
	mov	DWORD PTR _top$[ebp], eax
$LN2@CnvExtWrit:
; Line 200
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _indexes$[ebp+56], eax
; Line 202
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _indexes$[ebp+60], eax
; Line 203
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917556]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR _indexes$[ebp+64], edx
; Line 204
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _top$[ebp], edx
; Line 206
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _indexes$[ebp+124], eax
; Line 212
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917564]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _extData$[ebp]
	mov	eax, DWORD PTR [edx+917568]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _extData$[ebp]
	or	ecx, DWORD PTR [edx+917572]
	mov	DWORD PTR _indexes$[ebp+68], ecx
; Line 216
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917576]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _extData$[ebp]
	mov	eax, DWORD PTR [edx+917580]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _extData$[ebp]
	or	ecx, DWORD PTR [edx+917584]
	mov	DWORD PTR _indexes$[ebp+72], ecx
; Line 218
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	movzx	eax, BYTE PTR [edx+40]
	mov	DWORD PTR _indexes$[ebp+76], eax
; Line 221
	push	128					; 00000080H
	lea	eax, DWORD PTR _indexes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 222
	mov	eax, DWORD PTR _indexes$[ebp+8]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_utm_getStart
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 223
	mov	eax, DWORD PTR _indexes$[ebp+16]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_utm_getStart
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 225
	mov	eax, DWORD PTR _indexes$[ebp+28]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_utm_getStart
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 226
	mov	eax, DWORD PTR _indexes$[ebp+28]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_utm_getStart
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 227
	mov	eax, DWORD PTR _indexes$[ebp+36]
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_utm_getStart
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 229
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917544]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 230
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917548]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	add	edx, 2216				; 000008a8H
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 231
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917552]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	add	edx, 131112				; 00020028H
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 232
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917556]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	add	edx, 655400				; 000a0028H
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 277
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	SHORT $LN1@CnvExtWrit
; Line 278
	mov	esi, esp
	mov	eax, DWORD PTR _top$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@FBDKGFID@size?5of?5extension?5data?3?5?$CFld?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@CnvExtWrit:
; Line 282
	mov	eax, DWORD PTR _headerSize$[ebp]
	add	eax, DWORD PTR _top$[ebp]
; Line 283
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@CnvExtWrit
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 428				; 000001acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@CnvExtWrit:
	DD	2
	DD	$LN13@CnvExtWrit
$LN13@CnvExtWrit:
	DD	-184					; ffffff48H
	DD	128					; 00000080H
	DD	$LN11@CnvExtWrit
	DD	-232					; ffffff18H
	DD	40					; 00000028H
	DD	$LN12@CnvExtWrit
$LN12@CnvExtWrit:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN11@CnvExtWrit:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_CnvExtWrite ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@ODGLNIIO@error?3?5contains?5mappings?5for?5sur@ ; `string'
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
;	COMDAT ??_C@_0DE@ODGLNIIO@error?3?5contains?5mappings?5for?5sur@
CONST	SEGMENT
??_C@_0DE@ODGLNIIO@error?3?5contains?5mappings?5for?5sur@ DB 'error: cont'
	DB	'ains mappings for surrogate code points', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _CnvExtAddTable
_TEXT	SEGMENT
tv83 = -208						; size = 4
_extData$ = -8						; size = 4
_cnvData$ = 8						; size = 4
_table$ = 12						; size = 4
_staticData$ = 16					; size = 4
_CnvExtAddTable PROC					; COMDAT
; Line 1054
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1057
	mov	eax, DWORD PTR _table$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	and	ecx, 2
	je	SHORT $LN1@CnvExtAddT
; Line 1058
	mov	esi, esp
	push	OFFSET ??_C@_0DE@ODGLNIIO@error?3?5contains?5mappings?5for?5sur@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1059
	xor	al, al
	jmp	SHORT $LN2@CnvExtAddT
$LN1@CnvExtAddT:
; Line 1062
	mov	eax, DWORD PTR _staticData$[ebp]
	mov	BYTE PTR [eax+69], 2
; Line 1064
	mov	eax, DWORD PTR _cnvData$[ebp]
	mov	DWORD PTR _extData$[ebp], eax
; Line 1075
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	push	ecx
	call	_makeToUTable
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@CnvExtAddT
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	push	ecx
	call	_makeFromUTable
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@CnvExtAddT
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN5@CnvExtAddT
$LN4@CnvExtAddT:
	mov	DWORD PTR tv83[ebp], 0
$LN5@CnvExtAddT:
	mov	al, BYTE PTR tv83[ebp]
$LN2@CnvExtAddT:
; Line 1076
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CnvExtAddTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@KKDGMKJA@cnv?5extension?5toUUChars?$AA@ ; `string'
PUBLIC	??_C@_0BH@OHDBLHII@cnv?5extension?5toUTable?$AA@ ; `string'
EXTRN	_utm_open:PROC
;	COMDAT ??_C@_0BI@KKDGMKJA@cnv?5extension?5toUUChars?$AA@
CONST	SEGMENT
??_C@_0BI@KKDGMKJA@cnv?5extension?5toUUChars?$AA@ DB 'cnv extension toUUC'
	DB	'hars', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OHDBLHII@cnv?5extension?5toUTable?$AA@
CONST	SEGMENT
??_C@_0BH@OHDBLHII@cnv?5extension?5toUTable?$AA@ DB 'cnv extension toUTab'
	DB	'le', 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _makeToUTable
_TEXT	SEGMENT
_toUCount$ = -8						; size = 4
_extData$ = 8						; size = 4
_table$ = 12						; size = 4
_makeToUTable PROC					; COMDAT
; Line 547
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 550
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_reduceToUMappings
	add	esp, 4
	mov	DWORD PTR _toUCount$[ebp], eax
; Line 552
	push	4
	push	2031616					; 001f0000H
	push	65536					; 00010000H
	push	OFFSET ??_C@_0BH@OHDBLHII@cnv?5extension?5toUTable?$AA@
	call	_utm_open
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 553
	push	2
	push	262144					; 00040000H
	push	65536					; 00010000H
	push	OFFSET ??_C@_0BI@KKDGMKJA@cnv?5extension?5toUUChars?$AA@
	call	_utm_open
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 555
	push	0
	push	0
	mov	eax, DWORD PTR _toUCount$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	push	edx
	call	_generateToUTable
	add	esp, 24					; 00000018H
; Line 556
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_makeToUTable ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _reduceToUMappings
_TEXT	SEGMENT
_flag$ = -65						; size = 1
_count$ = -56						; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_map$ = -20						; size = 4
_mappings$ = -8						; size = 4
_table$ = 8						; size = 4
_reduceToUMappings PROC					; COMDAT
; Line 296
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 302
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mappings$[ebp], ecx
; Line 303
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _map$[ebp], ecx
; Line 304
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _count$[ebp], ecx
; Line 307
	mov	DWORD PTR _j$[ebp], 0
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN9@reduceToUM
$LN8@reduceToUM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@reduceToUM:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN7@reduceToUM
; Line 308
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _mappings$[ebp]
	mov	cl, BYTE PTR [eax+edx+10]
	mov	BYTE PTR _flag$[ebp], cl
; Line 309
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	je	SHORT $LN6@reduceToUM
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 3
	je	SHORT $LN6@reduceToUM
; Line 310
	jmp	SHORT $LN7@reduceToUM
$LN6@reduceToUM:
; Line 312
	jmp	SHORT $LN8@reduceToUM
$LN7@reduceToUM:
; Line 315
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN5@reduceToUM
$LN4@reduceToUM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@reduceToUM:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN3@reduceToUM
; Line 316
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _mappings$[ebp]
	mov	cl, BYTE PTR [eax+edx+10]
	mov	BYTE PTR _flag$[ebp], cl
; Line 317
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	je	SHORT $LN1@reduceToUM
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 3
	jne	SHORT $LN2@reduceToUM
$LN1@reduceToUM:
; Line 318
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN2@reduceToUM:
; Line 320
	jmp	SHORT $LN4@reduceToUM
$LN3@reduceToUM:
; Line 322
	mov	eax, DWORD PTR _j$[ebp]
; Line 323
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_reduceToUMappings ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@JFIGFLCM@error?3?5multiple?5mappings?5from?5sa@ ; `string'
PUBLIC	??_C@_0EI@HMFAJFBO@error?3?5toUnicode?5extension?5table@ ; `string'
EXTRN	_ucm_printMapping:PROC
EXTRN	_utm_allocN:PROC
;	COMDAT ??_C@_0CK@JFIGFLCM@error?3?5multiple?5mappings?5from?5sa@
CONST	SEGMENT
??_C@_0CK@JFIGFLCM@error?3?5multiple?5mappings?5from?5sa@ DB 'error: mult'
	DB	'iple mappings from same bytes', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@HMFAJFBO@error?3?5toUnicode?5extension?5table@
CONST	SEGMENT
??_C@_0EI@HMFAJFBO@error?3?5toUnicode?5extension?5table@ DB 'error: toUni'
	DB	'code extension table section overflow: %ld section entries', 0aH
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _generateToUTable
_TEXT	SEGMENT
tv191 = -364						; size = 4
tv165 = -364						; size = 4
tv93 = -364						; size = 4
tv76 = -364						; size = 4
_section$ = -164					; size = 4
_prev$ = -152						; size = 4
_high$ = -140						; size = 4
_low$ = -128						; size = 4
_bytes$ = -116						; size = 4
_subLimit$ = -104					; size = 4
_subStart$ = -92					; size = 4
_count$ = -80						; size = 4
_uniqueCount$ = -68					; size = 4
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_map$ = -32						; size = 4
_m$ = -20						; size = 4
_mappings$ = -8						; size = 4
_extData$ = 8						; size = 4
_table$ = 12						; size = 4
_start$ = 16						; size = 4
_limit$ = 20						; size = 4
_unitIndex$ = 24					; size = 4
_defaultValue$ = 28					; size = 4
_generateToUTable PROC					; COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 421
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mappings$[ebp], ecx
; Line 422
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _map$[ebp], ecx
; Line 425
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 426
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN28@generateTo
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 4
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN29@generateTo
$LN28@generateTo:
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv76[ebp], ecx
$LN29@generateTo:
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR _bytes$[ebp], eax
; Line 427
	mov	eax, DWORD PTR _bytes$[ebp]
	add	eax, DWORD PTR _unitIndex$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _low$[ebp], ecx
; Line 428
	mov	DWORD PTR _uniqueCount$[ebp], 1
; Line 430
	mov	eax, DWORD PTR _low$[ebp]
	mov	DWORD PTR _high$[ebp], eax
	mov	ecx, DWORD PTR _high$[ebp]
	mov	DWORD PTR _prev$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN25@generateTo
$LN24@generateTo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN25@generateTo:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN23@generateTo
; Line 432
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 433
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN30@generateTo
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 4
	mov	DWORD PTR tv93[ebp], edx
	jmp	SHORT $LN31@generateTo
$LN30@generateTo:
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv93[ebp], ecx
$LN31@generateTo:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR _bytes$[ebp], eax
; Line 434
	mov	eax, DWORD PTR _bytes$[ebp]
	add	eax, DWORD PTR _unitIndex$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _high$[ebp], ecx
; Line 436
	mov	eax, DWORD PTR _high$[ebp]
	cmp	eax, DWORD PTR _prev$[ebp]
	je	SHORT $LN22@generateTo
; Line 437
	mov	eax, DWORD PTR _high$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 438
	mov	eax, DWORD PTR _uniqueCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _uniqueCount$[ebp], eax
$LN22@generateTo:
; Line 440
	jmp	$LN24@generateTo
$LN23@generateTo:
; Line 443
	mov	eax, DWORD PTR _high$[ebp]
	sub	eax, DWORD PTR _low$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 444
	cmp	DWORD PTR _count$[ebp], 256		; 00000100H
	jge	SHORT $LN21@generateTo
	cmp	DWORD PTR _unitIndex$[ebp], 0
	je	SHORT $LN20@generateTo
	mov	eax, DWORD PTR _count$[ebp]
	imul	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cmp	DWORD PTR _uniqueCount$[ebp], eax
	jl	SHORT $LN21@generateTo
$LN20@generateTo:
; Line 453
	jmp	SHORT $LN19@generateTo
$LN21@generateTo:
; Line 454
	mov	eax, DWORD PTR _uniqueCount$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN19@generateTo:
; Line 457
	cmp	DWORD PTR _count$[ebp], 256		; 00000100H
	jl	SHORT $LN18@generateTo
; Line 458
	mov	esi, esp
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	OFFSET ??_C@_0EI@HMFAJFBO@error?3?5toUnicode?5extension?5table@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 459
	xor	al, al
	jmp	$LN26@generateTo
$LN18@generateTo:
; Line 463
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_utm_allocN
	add	esp, 8
	mov	DWORD PTR _section$[ebp], eax
; Line 466
	mov	eax, DWORD PTR _count$[ebp]
	shl	eax, 24					; 00000018H
	or	eax, DWORD PTR _defaultValue$[ebp]
	mov	ecx, DWORD PTR _section$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _section$[ebp]
	add	edx, 4
	mov	DWORD PTR _section$[ebp], edx
; Line 469
	mov	eax, DWORD PTR _low$[ebp]
	sub	eax, 1
	mov	DWORD PTR _prev$[ebp], eax
; Line 470
	mov	DWORD PTR _j$[ebp], 0
; Line 471
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN17@generateTo
$LN16@generateTo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN17@generateTo:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	$LN15@generateTo
; Line 472
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 473
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN32@generateTo
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 4
	mov	DWORD PTR tv165[ebp], edx
	jmp	SHORT $LN33@generateTo
$LN32@generateTo:
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv165[ebp], ecx
$LN33@generateTo:
	mov	eax, DWORD PTR tv165[ebp]
	mov	DWORD PTR _bytes$[ebp], eax
; Line 474
	mov	eax, DWORD PTR _bytes$[ebp]
	add	eax, DWORD PTR _unitIndex$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _high$[ebp], ecx
; Line 476
	mov	eax, DWORD PTR _high$[ebp]
	cmp	eax, DWORD PTR _prev$[ebp]
	je	SHORT $LN14@generateTo
; Line 478
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _uniqueCount$[ebp]
	jle	SHORT $LN13@generateTo
$LN12@generateTo:
; Line 480
	mov	eax, DWORD PTR _prev$[ebp]
	add	eax, 1
	mov	DWORD PTR _prev$[ebp], eax
	mov	ecx, DWORD PTR _prev$[ebp]
	cmp	ecx, DWORD PTR _high$[ebp]
	jge	SHORT $LN11@generateTo
; Line 481
	mov	eax, DWORD PTR _prev$[ebp]
	shl	eax, 24					; 00000018H
	or	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _section$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 482
	jmp	SHORT $LN12@generateTo
$LN11@generateTo:
; Line 483
	jmp	SHORT $LN10@generateTo
$LN13@generateTo:
; Line 484
	mov	eax, DWORD PTR _high$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
$LN10@generateTo:
; Line 488
	mov	eax, DWORD PTR _high$[ebp]
	shl	eax, 24					; 00000018H
	or	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _section$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN14@generateTo:
; Line 490
	jmp	$LN16@generateTo
$LN15@generateTo:
; Line 494
	mov	eax, DWORD PTR _section$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _subLimit$[ebp], ecx
; Line 495
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN9@generateTo
$LN8@generateTo:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN9@generateTo:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN7@generateTo
; Line 496
	mov	eax, DWORD PTR _subLimit$[ebp]
	mov	DWORD PTR _subStart$[ebp], eax
; Line 497
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN34@generateTo
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _section$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR tv191[ebp], eax
	jmp	SHORT $LN35@generateTo
$LN34@generateTo:
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	DWORD PTR tv191[ebp], ecx
$LN35@generateTo:
	mov	edx, DWORD PTR tv191[ebp]
	mov	DWORD PTR _subLimit$[ebp], edx
; Line 500
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _section$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, -16777216				; ff000000H
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _section$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 502
	mov	eax, DWORD PTR _subStart$[ebp]
	cmp	eax, DWORD PTR _subLimit$[ebp]
	jne	SHORT $LN6@generateTo
; Line 504
	jmp	SHORT $LN8@generateTo
$LN6@generateTo:
; Line 508
	mov	DWORD PTR _defaultValue$[ebp], 0
; Line 509
	mov	eax, DWORD PTR _subStart$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 510
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _unitIndex$[ebp]
	add	edx, 1
	cmp	ecx, edx
	jne	$LN5@generateTo
; Line 512
	mov	eax, DWORD PTR _subStart$[ebp]
	add	eax, 1
	mov	DWORD PTR _subStart$[ebp], eax
; Line 514
	mov	eax, DWORD PTR _subStart$[ebp]
	cmp	eax, DWORD PTR _subLimit$[ebp]
	jge	$LN4@generateTo
	mov	eax, DWORD PTR _subStart$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _mappings$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+9]
	mov	edx, DWORD PTR _unitIndex$[ebp]
	add	edx, 1
	cmp	ecx, edx
	jne	$LN4@generateTo
; Line 516
	mov	esi, esp
	push	OFFSET ??_C@_0CK@JFIGFLCM@error?3?5multiple?5mappings?5from?5sa@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 517
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 518
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _subStart$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 519
	xor	al, al
	jmp	$LN26@generateTo
$LN4@generateTo:
; Line 522
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	push	edx
	call	_getToUnicodeValue
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _defaultValue$[ebp], eax
$LN5@generateTo:
; Line 525
	mov	eax, DWORD PTR _subStart$[ebp]
	cmp	eax, DWORD PTR _subLimit$[ebp]
	jne	SHORT $LN3@generateTo
; Line 527
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _section$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	or	edx, DWORD PTR _defaultValue$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _section$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 528
	jmp	SHORT $LN2@generateTo
$LN3@generateTo:
; Line 530
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_utm_countItems
	add	esp, 4
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _section$[ebp]
	or	eax, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _section$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 533
	mov	eax, DWORD PTR _defaultValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unitIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _subLimit$[ebp]
	push	edx
	mov	eax, DWORD PTR _subStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	push	edx
	call	_generateToUTable
	add	esp, 24					; 00000018H
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN2@generateTo
; Line 534
	xor	al, al
	jmp	SHORT $LN26@generateTo
$LN2@generateTo:
; Line 537
	jmp	$LN8@generateTo
$LN7@generateTo:
; Line 538
	mov	al, 1
$LN26@generateTo:
; Line 539
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_generateToUTable ENDP
_TEXT	ENDS
EXTRN	_u_strFromUTF32_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _getToUnicodeValue
_TEXT	SEGMENT
tv76 = -268						; size = 4
_errorCode$ = -68					; size = 4
_ratio$ = -56						; size = 4
_u16Length$ = -44					; size = 4
_value$ = -32						; size = 4
_u$ = -20						; size = 4
_u32$ = -8						; size = 4
_extData$ = 8						; size = 4
_table$ = 12						; size = 4
_m$ = 16						; size = 4
_getToUnicodeValue PROC					; COMDAT
; Line 326
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 334
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN8@getToUnico
; Line 335
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, 65535				; 0000ffffH
	cmp	ecx, DWORD PTR [eax]
	sbb	edx, edx
	neg	edx
	add	edx, 1
	mov	DWORD PTR _u16Length$[ebp], edx
; Line 336
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2031616				; 001f0000H
	mov	DWORD PTR _value$[ebp], ecx
; Line 337
	jmp	$LN7@getToUnico
$LN8@getToUnico:
; Line 341
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN11@getToUnico
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN12@getToUnico
$LN11@getToUnico:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv76[ebp], ecx
$LN12@getToUnico:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _u32$[ebp], edx
; Line 342
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 343
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u32$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u16Length$[ebp]
	push	ecx
	push	0
	push	0
	call	_u_strFromUTF32_56
	add	esp, 24					; 00000018H
; Line 344
	cmp	DWORD PTR _errorCode$[ebp], 0
	jle	SHORT $LN6@getToUnico
	cmp	DWORD PTR _errorCode$[ebp], 15		; 0000000fH
	je	SHORT $LN6@getToUnico
; Line 345
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@getToUnico:
; Line 351
	mov	esi, DWORD PTR _u16Length$[ebp]
	add	esi, 12					; 0000000cH
	shl	esi, 18					; 00000012H
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_utm_countItems
	add	esp, 4
	or	esi, eax
	mov	DWORD PTR _value$[ebp], esi
; Line 352
	mov	eax, DWORD PTR _u16Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_utm_allocN
	add	esp, 8
	mov	DWORD PTR _u$[ebp], eax
; Line 355
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 356
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u32$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _u16Length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_u_strFromUTF32_56
	add	esp, 24					; 00000018H
; Line 357
	cmp	DWORD PTR _errorCode$[ebp], 0
	jle	SHORT $LN7@getToUnico
	cmp	DWORD PTR _errorCode$[ebp], 15		; 0000000fH
	je	SHORT $LN7@getToUnico
; Line 358
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@getToUnico:
; Line 361
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	test	ecx, ecx
	jne	SHORT $LN4@getToUnico
; Line 362
	mov	eax, DWORD PTR _value$[ebp]
	or	eax, 8388608				; 00800000H
	mov	DWORD PTR _value$[ebp], eax
$LN4@getToUnico:
; Line 366
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _extData$[ebp]
	cmp	ecx, DWORD PTR [edx+917564]
	jle	SHORT $LN3@getToUnico
; Line 367
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [edx+917564], ecx
$LN3@getToUnico:
; Line 369
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _u16Length$[ebp]
	cmp	ecx, DWORD PTR [eax+917580]
	jle	SHORT $LN2@getToUnico
; Line 370
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _u16Length$[ebp]
	mov	DWORD PTR [eax+917580], ecx
$LN2@getToUnico:
; Line 373
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _u16Length$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [ecx+9]
	cdq
	idiv	ecx
	mov	DWORD PTR _ratio$[ebp], eax
; Line 374
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _ratio$[ebp]
	cmp	ecx, DWORD PTR [eax+917584]
	jle	SHORT $LN1@getToUnico
; Line 375
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _ratio$[ebp]
	mov	DWORD PTR [eax+917584], ecx
$LN1@getToUnico:
; Line 378
	mov	eax, DWORD PTR _value$[ebp]
$LN10@getToUnico:
; Line 379
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@getToUnico
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@getToUnico:
	DD	2
	DD	$LN15@getToUnico
$LN15@getToUnico:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN13@getToUnico
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN14@getToUnico
$LN14@getToUnico:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN13@getToUnico:
	DB	117					; 00000075H
	DB	49					; 00000031H
	DB	54					; 00000036H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_getToUnicodeValue ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@PCCDCJJE@cnv?5extension?5fromUBytes?$AA@ ; `string'
PUBLIC	??_C@_0BP@EMLGEFOK@cnv?5extension?5fromUTableValues?$AA@ ; `string'
PUBLIC	??_C@_0BP@EKICILH@cnv?5extension?5fromUTableUChars?$AA@ ; `string'
;	COMDAT ??_C@_0BJ@PCCDCJJE@cnv?5extension?5fromUBytes?$AA@
CONST	SEGMENT
??_C@_0BJ@PCCDCJJE@cnv?5extension?5fromUBytes?$AA@ DB 'cnv extension from'
	DB	'UBytes', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EMLGEFOK@cnv?5extension?5fromUTableValues?$AA@
CONST	SEGMENT
??_C@_0BP@EMLGEFOK@cnv?5extension?5fromUTableValues?$AA@ DB 'cnv extensio'
	DB	'n fromUTableValues', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EKICILH@cnv?5extension?5fromUTableUChars?$AA@
CONST	SEGMENT
??_C@_0BP@EKICILH@cnv?5extension?5fromUTableUChars?$AA@ DB 'cnv extension'
	DB	' fromUTableUChars', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _makeFromUTable
_TEXT	SEGMENT
_fromUCount$ = -44					; size = 4
_stage1Top$ = -32					; size = 4
_i$ = -20						; size = 4
_stage1$ = -8						; size = 4
_extData$ = 8						; size = 4
_table$ = 12						; size = 4
_makeFromUTable PROC					; COMDAT
; Line 1008
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1012
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_prepareFromUMappings
	add	esp, 4
	mov	DWORD PTR _fromUCount$[ebp], eax
; Line 1014
	push	2
	push	16777216				; 01000000H
	push	65536					; 00010000H
	push	OFFSET ??_C@_0BP@EKICILH@cnv?5extension?5fromUTableUChars?$AA@
	call	_utm_open
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 1015
	push	4
	push	16777216				; 01000000H
	push	65536					; 00010000H
	push	OFFSET ??_C@_0BP@EMLGEFOK@cnv?5extension?5fromUTableValues?$AA@
	call	_utm_open
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 1016
	push	1
	push	16777216				; 01000000H
	push	65536					; 00010000H
	push	OFFSET ??_C@_0BJ@PCCDCJJE@cnv?5extension?5fromUBytes?$AA@
	call	_utm_open
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 1019
	mov	eax, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [eax+917548], 64		; 00000040H
; Line 1020
	mov	eax, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [eax+917552], 16		; 00000010H
; Line 1027
	mov	eax, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [eax+655404], -2147483647	; 80000001H
; Line 1028
	mov	eax, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [eax+917556], 2
; Line 1031
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_utm_alloc
	add	esp, 4
; Line 1032
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_utm_alloc
	add	esp, 4
; Line 1034
	mov	eax, DWORD PTR _fromUCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	push	edx
	call	_generateFromUTrie
	add	esp, 12					; 0000000cH
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN4@makeFromUT
; Line 1035
	xor	al, al
	jmp	SHORT $LN5@makeFromUT
$LN4@makeFromUT:
; Line 1042
	mov	eax, DWORD PTR _extData$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _stage1$[ebp], eax
; Line 1043
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917544]
	mov	DWORD PTR _stage1Top$[ebp], ecx
; Line 1044
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@makeFromUT
$LN2@makeFromUT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@makeFromUT:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _stage1Top$[ebp]
	jge	SHORT $LN1@makeFromUT
; Line 1045
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _stage1$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _stage1Top$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _stage1$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 1046
	jmp	SHORT $LN2@makeFromUT
$LN1@makeFromUT:
; Line 1048
	mov	al, 1
$LN5@makeFromUT:
; Line 1049
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_makeFromUTable ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _prepareFromUMappings
_TEXT	SEGMENT
tv131 = -340						; size = 4
_r$13732 = -140						; size = 4
_q$13731 = -128						; size = 4
_c$13730 = -116						; size = 4
_u$13729 = -104						; size = 4
_u32$13728 = -92					; size = 4
_flag$ = -77						; size = 1
_count$ = -68						; size = 4
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_map$ = -32						; size = 4
_m$ = -20						; size = 4
_mappings$ = -8						; size = 4
_table$ = 8						; size = 4
_prepareFromUMappings PROC				; COMDAT
; Line 584
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 590
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mappings$[ebp], ecx
; Line 591
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _map$[ebp], ecx
; Line 592
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _count$[ebp], ecx
; Line 598
	mov	eax, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], eax
; Line 600
	mov	DWORD PTR _j$[ebp], 0
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN13@prepareFro
$LN12@prepareFro:
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _m$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@prepareFro:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN11@prepareFro
; Line 601
	mov	eax, DWORD PTR _m$[ebp]
	mov	cl, BYTE PTR [eax+10]
	mov	BYTE PTR _flag$[ebp], cl
; Line 602
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	jl	SHORT $LN10@prepareFro
; Line 603
	movsx	eax, BYTE PTR _flag$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _flag$[ebp], al
; Line 604
	mov	eax, DWORD PTR _m$[ebp]
	mov	cl, BYTE PTR _flag$[ebp]
	mov	BYTE PTR [eax+10], cl
$LN10@prepareFro:
; Line 606
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	je	SHORT $LN8@prepareFro
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 1
	je	SHORT $LN8@prepareFro
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 2
	jne	SHORT $LN7@prepareFro
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	je	SHORT $LN8@prepareFro
$LN7@prepareFro:
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 4
	jne	$LN9@prepareFro
$LN8@prepareFro:
; Line 607
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 609
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jle	$LN9@prepareFro
; Line 616
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN16@prepareFro
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv131[ebp], edx
	jmp	SHORT $LN17@prepareFro
$LN16@prepareFro:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv131[ebp], ecx
$LN17@prepareFro:
	mov	edx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _u32$13728[ebp], edx
; Line 617
	mov	eax, DWORD PTR _u32$13728[ebp]
	mov	DWORD PTR _u$13729[ebp], eax
; Line 618
	mov	DWORD PTR _r$13732[ebp], 2
	mov	DWORD PTR _q$13731[ebp], 1
	jmp	SHORT $LN5@prepareFro
$LN4@prepareFro:
	mov	eax, DWORD PTR _q$13731[ebp]
	add	eax, 1
	mov	DWORD PTR _q$13731[ebp], eax
$LN5@prepareFro:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	DWORD PTR _q$13731[ebp], ecx
	jge	$LN3@prepareFro
; Line 619
	mov	eax, DWORD PTR _q$13731[ebp]
	mov	ecx, DWORD PTR _u32$13728[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _c$13730[ebp], edx
; Line 620
	cmp	DWORD PTR _c$13730[ebp], 65535		; 0000ffffH
	ja	SHORT $LN2@prepareFro
	mov	eax, DWORD PTR _r$13732[ebp]
	mov	ecx, DWORD PTR _u$13729[ebp]
	mov	dx, WORD PTR _c$13730[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _r$13732[ebp]
	add	eax, 1
	mov	DWORD PTR _r$13732[ebp], eax
	jmp	SHORT $LN1@prepareFro
$LN2@prepareFro:
	mov	eax, DWORD PTR _c$13730[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _r$13732[ebp]
	mov	edx, DWORD PTR _u$13729[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _r$13732[ebp]
	add	eax, 1
	mov	DWORD PTR _r$13732[ebp], eax
	mov	eax, DWORD PTR _c$13730[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _r$13732[ebp]
	mov	edx, DWORD PTR _u$13729[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _r$13732[ebp]
	add	eax, 1
	mov	DWORD PTR _r$13732[ebp], eax
$LN1@prepareFro:
; Line 621
	jmp	$LN4@prepareFro
$LN3@prepareFro:
; Line 624
	mov	eax, DWORD PTR _m$[ebp]
	mov	cl, BYTE PTR _r$13732[ebp]
	mov	BYTE PTR [eax+8], cl
$LN9@prepareFro:
; Line 627
	jmp	$LN12@prepareFro
$LN11@prepareFro:
; Line 629
	mov	eax, DWORD PTR _j$[ebp]
; Line 630
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_prepareFromUMappings ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DI@LLPMIKEF@error?3?5multiple?5mappings?5from?5sa@ ; `string'
;	COMDAT ??_C@_0DI@LLPMIKEF@error?3?5multiple?5mappings?5from?5sa@
CONST	SEGMENT
??_C@_0DI@LLPMIKEF@error?3?5multiple?5mappings?5from?5sa@ DB 'error: mult'
	DB	'iple mappings from same Unicode code points', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _generateFromUTrie
_TEXT	SEGMENT
tv132 = -304						; size = 4
tv89 = -304						; size = 4
tv74 = -304						; size = 4
_next$ = -104						; size = 4
_c$ = -92						; size = 4
_codePoints$ = -80					; size = 4
_subLimit$ = -68					; size = 4
_subStart$ = -56					; size = 4
_value$ = -44						; size = 4
_map$ = -32						; size = 4
_m$ = -20						; size = 4
_mappings$ = -8						; size = 4
_extData$ = 8						; size = 4
_table$ = 12						; size = 4
_mapLength$ = 16					; size = 4
_generateFromUTrie PROC					; COMDAT
; Line 927
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 936
	cmp	DWORD PTR _mapLength$[ebp], 0
	jne	SHORT $LN10@generateFr
; Line 937
	mov	al, 1
	jmp	$LN11@generateFr
$LN10@generateFr:
; Line 940
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mappings$[ebp], ecx
; Line 941
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _map$[ebp], ecx
; Line 949
	mov	eax, DWORD PTR _map$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], ecx
; Line 950
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN13@generateFr
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN14@generateFr
$LN13@generateFr:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv74[ebp], ecx
$LN14@generateFr:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _codePoints$[ebp], edx
; Line 951
	mov	eax, DWORD PTR _codePoints$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx
; Line 952
	mov	DWORD PTR _subLimit$[ebp], 0
$LN9@generateFr:
; Line 953
	mov	eax, DWORD PTR _subLimit$[ebp]
	cmp	eax, DWORD PTR _mapLength$[ebp]
	jge	$LN8@generateFr
; Line 955
	mov	eax, DWORD PTR _subLimit$[ebp]
	mov	DWORD PTR _subStart$[ebp], eax
; Line 956
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN7@generateFr:
; Line 957
	mov	eax, DWORD PTR _next$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jne	SHORT $LN6@generateFr
	mov	eax, DWORD PTR _subLimit$[ebp]
	add	eax, 1
	mov	DWORD PTR _subLimit$[ebp], eax
	mov	ecx, DWORD PTR _subLimit$[ebp]
	cmp	ecx, DWORD PTR _mapLength$[ebp]
	jge	SHORT $LN6@generateFr
; Line 958
	mov	eax, DWORD PTR _subLimit$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 959
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN15@generateFr
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $LN16@generateFr
$LN15@generateFr:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv89[ebp], ecx
$LN16@generateFr:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _codePoints$[ebp], edx
; Line 960
	mov	eax, DWORD PTR _codePoints$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx
; Line 961
	jmp	SHORT $LN7@generateFr
$LN6@generateFr:
; Line 968
	mov	DWORD PTR _value$[ebp], 0
; Line 969
	mov	eax, DWORD PTR _subStart$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 970
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN17@generateFr
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv132[ebp], edx
	jmp	SHORT $LN18@generateFr
$LN17@generateFr:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv132[ebp], ecx
$LN18@generateFr:
	mov	edx, DWORD PTR tv132[ebp]
	mov	DWORD PTR _codePoints$[ebp], edx
; Line 971
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	$LN5@generateFr
; Line 973
	mov	eax, DWORD PTR _subStart$[ebp]
	add	eax, 1
	mov	DWORD PTR _subStart$[ebp], eax
; Line 975
	mov	eax, DWORD PTR _subStart$[ebp]
	cmp	eax, DWORD PTR _subLimit$[ebp]
	jge	$LN4@generateFr
	mov	eax, DWORD PTR _subStart$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _mappings$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+8]
	cmp	ecx, 1
	jne	$LN4@generateFr
; Line 977
	mov	esi, esp
	push	OFFSET ??_C@_0DI@LLPMIKEF@error?3?5multiple?5mappings?5from?5sa@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 978
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 979
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _subStart$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 980
	xor	al, al
	jmp	$LN11@generateFr
$LN4@generateFr:
; Line 983
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	push	edx
	call	_getFromUBytesValue
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _value$[ebp], eax
$LN5@generateFr:
; Line 986
	mov	eax, DWORD PTR _subStart$[ebp]
	cmp	eax, DWORD PTR _subLimit$[ebp]
	jne	SHORT $LN3@generateFr
; Line 988
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	push	edx
	call	_addFromUTrieEntry
	add	esp, 12					; 0000000cH
; Line 989
	jmp	SHORT $LN2@generateFr
$LN3@generateFr:
; Line 991
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_utm_countItems
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _extData$[ebp]
	push	eax
	call	_addFromUTrieEntry
	add	esp, 12					; 0000000cH
; Line 994
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _subLimit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _subStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	push	ecx
	call	_generateFromUTable
	add	esp, 24					; 00000018H
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN2@generateFr
; Line 995
	xor	al, al
	jmp	SHORT $LN11@generateFr
$LN2@generateFr:
; Line 998
	jmp	$LN9@generateFr
$LN8@generateFr:
; Line 999
	mov	al, 1
$LN11@generateFr:
; Line 1000
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_generateFromUTrie ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _getFromUBytesValue
_TEXT	SEGMENT
tv163 = -256						; size = 4
tv77 = -256						; size = 4
tv74 = -256						; size = 4
_ratio$ = -56						; size = 4
_u16Length$ = -44					; size = 4
_value$ = -32						; size = 4
_resultBytes$ = -20					; size = 4
_bytes$ = -8						; size = 4
_extData$ = 8						; size = 4
_table$ = 12						; size = 4
_m$ = 16						; size = 4
_getFromUBytesValue PROC				; COMDAT
; Line 633
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 638
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 2
	jne	SHORT $LN15@getFromUBy
; Line 647
	mov	eax, -2147483647			; 80000001H
	jmp	$LN16@getFromUBy
$LN15@getFromUBy:
; Line 650
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN18@getFromUBy
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 4
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN19@getFromUBy
$LN18@getFromUBy:
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv74[ebp], ecx
$LN19@getFromUBy:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR _bytes$[ebp], eax
; Line 651
	mov	DWORD PTR _value$[ebp], 0
; Line 652
	mov	eax, DWORD PTR _m$[ebp]
	mov	cl, BYTE PTR [eax+9]
	mov	BYTE PTR tv77[ebp], cl
	cmp	BYTE PTR tv77[ebp], 1
	je	SHORT $LN10@getFromUBy
	cmp	BYTE PTR tv77[ebp], 2
	je	SHORT $LN11@getFromUBy
	cmp	BYTE PTR tv77[ebp], 3
	je	SHORT $LN12@getFromUBy
	jmp	SHORT $LN9@getFromUBy
$LN12@getFromUBy:
; Line 655
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 16					; 00000010H
	mov	DWORD PTR _value$[ebp], ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	add	edx, 1
	mov	DWORD PTR _bytes$[ebp], edx
$LN11@getFromUBy:
; Line 657
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	or	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _value$[ebp], ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	add	edx, 1
	mov	DWORD PTR _bytes$[ebp], edx
$LN10@getFromUBy:
; Line 659
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	or	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _value$[ebp], ecx
; Line 660
	jmp	SHORT $LN13@getFromUBy
$LN9@getFromUBy:
; Line 664
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_utm_countItems
	add	esp, 4
	mov	DWORD PTR _value$[ebp], eax
; Line 665
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_utm_allocN
	add	esp, 8
	mov	DWORD PTR _resultBytes$[ebp], eax
; Line 666
	push	1
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, BYTE PTR [ecx+9]
	push	edx
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _resultBytes$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN13@getFromUBy:
; Line 669
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	shl	ecx, 24					; 00000018H
	or	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _value$[ebp], ecx
; Line 670
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	test	ecx, ecx
	jne	SHORT $LN8@getFromUBy
; Line 671
	mov	eax, DWORD PTR _value$[ebp]
	or	eax, -2147483648			; 80000000H
	mov	DWORD PTR _value$[ebp], eax
	jmp	SHORT $LN7@getFromUBy
$LN8@getFromUBy:
; Line 672
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 4
	jne	SHORT $LN7@getFromUBy
; Line 673
	mov	eax, DWORD PTR _value$[ebp]
	or	eax, 1073741824				; 40000000H
	mov	DWORD PTR _value$[ebp], eax
$LN7@getFromUBy:
; Line 677
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN5@getFromUBy
; Line 678
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, 65535				; 0000ffffH
	cmp	ecx, DWORD PTR [eax]
	sbb	edx, edx
	neg	edx
	add	edx, 1
	mov	DWORD PTR _u16Length$[ebp], edx
; Line 679
	jmp	SHORT $LN4@getFromUBy
$LN5@getFromUBy:
; Line 680
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN20@getFromUBy
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv163[ebp], edx
	jmp	SHORT $LN21@getFromUBy
$LN20@getFromUBy:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv163[ebp], ecx
$LN21@getFromUBy:
	mov	edx, DWORD PTR tv163[ebp]
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR [edx]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, BYTE PTR [edx+8]
	lea	ecx, DWORD PTR [ecx+eax-2]
	mov	DWORD PTR _u16Length$[ebp], ecx
$LN4@getFromUBy:
; Line 684
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _u16Length$[ebp]
	cmp	ecx, DWORD PTR [eax+917576]
	jle	SHORT $LN3@getFromUBy
; Line 685
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _u16Length$[ebp]
	mov	DWORD PTR [eax+917576], ecx
$LN3@getFromUBy:
; Line 687
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _extData$[ebp]
	cmp	ecx, DWORD PTR [edx+917568]
	jle	SHORT $LN2@getFromUBy
; Line 688
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [edx+917568], ecx
$LN2@getFromUBy:
; Line 691
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _u16Length$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	cdq
	idiv	DWORD PTR _u16Length$[ebp]
	mov	DWORD PTR _ratio$[ebp], eax
; Line 692
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _ratio$[ebp]
	cmp	ecx, DWORD PTR [eax+917572]
	jle	SHORT $LN1@getFromUBy
; Line 693
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _ratio$[ebp]
	mov	DWORD PTR [eax+917572], ecx
$LN1@getFromUBy:
; Line 696
	mov	eax, DWORD PTR _value$[ebp]
$LN16@getFromUBy:
; Line 697
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getFromUBytesValue ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _generateFromUTable
_TEXT	SEGMENT
tv172 = -376						; size = 4
tv155 = -376						; size = 4
tv92 = -376						; size = 4
tv75 = -376						; size = 4
_sectionValues$ = -176					; size = 4
_sectionUChars$ = -164					; size = 4
_prev$ = -152						; size = 4
_high$ = -140						; size = 4
_low$ = -128						; size = 4
_uchars$ = -116						; size = 4
_subLimit$ = -104					; size = 4
_subStart$ = -92					; size = 4
_count$ = -80						; size = 4
_uniqueCount$ = -68					; size = 4
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_map$ = -32						; size = 4
_m$ = -20						; size = 4
_mappings$ = -8						; size = 4
_extData$ = 8						; size = 4
_table$ = 12						; size = 4
_start$ = 16						; size = 4
_limit$ = 20						; size = 4
_unitIndex$ = 24					; size = 4
_defaultValue$ = 28					; size = 4
_generateFromUTable PROC				; COMDAT
; Line 710
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 721
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mappings$[ebp], ecx
; Line 722
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _map$[ebp], ecx
; Line 725
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 726
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN19@generateFr@2
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN20@generateFr@2
$LN19@generateFr@2:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv75[ebp], ecx
$LN20@generateFr@2:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _uchars$[ebp], edx
; Line 727
	mov	eax, DWORD PTR _unitIndex$[ebp]
	mov	ecx, DWORD PTR _uchars$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _low$[ebp], edx
; Line 728
	mov	DWORD PTR _uniqueCount$[ebp], 1
; Line 730
	mov	eax, DWORD PTR _low$[ebp]
	mov	DWORD PTR _high$[ebp], eax
	mov	ecx, DWORD PTR _high$[ebp]
	mov	DWORD PTR _prev$[ebp], ecx
; Line 731
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN16@generateFr@2
$LN15@generateFr@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@generateFr@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN14@generateFr@2
; Line 732
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 733
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN21@generateFr@2
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN22@generateFr@2
$LN21@generateFr@2:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv92[ebp], ecx
$LN22@generateFr@2:
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _uchars$[ebp], edx
; Line 734
	mov	eax, DWORD PTR _unitIndex$[ebp]
	mov	ecx, DWORD PTR _uchars$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _high$[ebp], edx
; Line 736
	mov	eax, DWORD PTR _high$[ebp]
	cmp	eax, DWORD PTR _prev$[ebp]
	je	SHORT $LN13@generateFr@2
; Line 737
	mov	eax, DWORD PTR _high$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 738
	mov	eax, DWORD PTR _uniqueCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _uniqueCount$[ebp], eax
$LN13@generateFr@2:
; Line 740
	jmp	$LN15@generateFr@2
$LN14@generateFr@2:
; Line 744
	mov	eax, DWORD PTR _uniqueCount$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 747
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_utm_allocN
	add	esp, 8
	mov	DWORD PTR _sectionUChars$[ebp], eax
; Line 748
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_utm_allocN
	add	esp, 8
	mov	DWORD PTR _sectionValues$[ebp], eax
; Line 751
	mov	eax, DWORD PTR _sectionUChars$[ebp]
	mov	cx, WORD PTR _count$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _sectionUChars$[ebp]
	add	edx, 2
	mov	DWORD PTR _sectionUChars$[ebp], edx
; Line 752
	mov	eax, DWORD PTR _sectionValues$[ebp]
	mov	ecx, DWORD PTR _defaultValue$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _sectionValues$[ebp]
	add	edx, 4
	mov	DWORD PTR _sectionValues$[ebp], edx
; Line 755
	mov	eax, DWORD PTR _low$[ebp]
	sub	eax, 1
	mov	DWORD PTR _prev$[ebp], eax
; Line 756
	mov	DWORD PTR _j$[ebp], 0
; Line 757
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN12@generateFr@2
$LN11@generateFr@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@generateFr@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	$LN10@generateFr@2
; Line 758
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 759
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN23@generateFr@2
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv155[ebp], edx
	jmp	SHORT $LN24@generateFr@2
$LN23@generateFr@2:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv155[ebp], ecx
$LN24@generateFr@2:
	mov	edx, DWORD PTR tv155[ebp]
	mov	DWORD PTR _uchars$[ebp], edx
; Line 760
	mov	eax, DWORD PTR _unitIndex$[ebp]
	mov	ecx, DWORD PTR _uchars$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _high$[ebp], edx
; Line 762
	mov	eax, DWORD PTR _high$[ebp]
	cmp	eax, DWORD PTR _prev$[ebp]
	je	SHORT $LN9@generateFr@2
; Line 764
	mov	eax, DWORD PTR _high$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 767
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _sectionUChars$[ebp]
	mov	dx, WORD PTR _high$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 768
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _sectionValues$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 769
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN9@generateFr@2:
; Line 771
	jmp	$LN11@generateFr@2
$LN10@generateFr@2:
; Line 775
	mov	eax, DWORD PTR _sectionValues$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _subLimit$[ebp], ecx
; Line 776
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN8@generateFr@2
$LN7@generateFr@2:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN8@generateFr@2:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN6@generateFr@2
; Line 777
	mov	eax, DWORD PTR _subLimit$[ebp]
	mov	DWORD PTR _subStart$[ebp], eax
; Line 778
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN25@generateFr@2
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _sectionValues$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR tv172[ebp], eax
	jmp	SHORT $LN26@generateFr@2
$LN25@generateFr@2:
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	DWORD PTR tv172[ebp], ecx
$LN26@generateFr@2:
	mov	edx, DWORD PTR tv172[ebp]
	mov	DWORD PTR _subLimit$[ebp], edx
; Line 781
	mov	DWORD PTR _defaultValue$[ebp], 0
; Line 782
	mov	eax, DWORD PTR _subStart$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 783
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _unitIndex$[ebp]
	add	edx, 1
	cmp	ecx, edx
	jne	$LN5@generateFr@2
; Line 785
	mov	eax, DWORD PTR _subStart$[ebp]
	add	eax, 1
	mov	DWORD PTR _subStart$[ebp], eax
; Line 787
	mov	eax, DWORD PTR _subStart$[ebp]
	cmp	eax, DWORD PTR _subLimit$[ebp]
	jge	$LN4@generateFr@2
	mov	eax, DWORD PTR _subStart$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _mappings$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+8]
	mov	edx, DWORD PTR _unitIndex$[ebp]
	add	edx, 1
	cmp	ecx, edx
	jne	$LN4@generateFr@2
; Line 789
	mov	esi, esp
	push	OFFSET ??_C@_0DI@LLPMIKEF@error?3?5multiple?5mappings?5from?5sa@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 790
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 791
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _subStart$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _mappings$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 792
	xor	al, al
	jmp	$LN17@generateFr@2
$LN4@generateFr@2:
; Line 795
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	push	edx
	call	_getFromUBytesValue
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _defaultValue$[ebp], eax
$LN5@generateFr@2:
; Line 798
	mov	eax, DWORD PTR _subStart$[ebp]
	cmp	eax, DWORD PTR _subLimit$[ebp]
	jne	SHORT $LN3@generateFr@2
; Line 800
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _sectionValues$[ebp]
	mov	edx, DWORD PTR _defaultValue$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 801
	jmp	SHORT $LN2@generateFr@2
$LN3@generateFr@2:
; Line 803
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_utm_countItems
	add	esp, 4
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _sectionValues$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 806
	mov	eax, DWORD PTR _defaultValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unitIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _subLimit$[ebp]
	push	edx
	mov	eax, DWORD PTR _subStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extData$[ebp]
	push	edx
	call	_generateFromUTable
	add	esp, 24					; 00000018H
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN2@generateFr@2
; Line 807
	xor	al, al
	jmp	SHORT $LN17@generateFr@2
$LN2@generateFr@2:
; Line 810
	jmp	$LN7@generateFr@2
$LN6@generateFr@2:
; Line 811
	mov	al, 1
$LN17@generateFr@2:
; Line 812
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_generateFromUTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@KLFBLKEK@error?3?5too?5many?5stage?53b?5entries@ ; `string'
PUBLIC	??_C@_0CL@FAEAGBIO@error?3?5too?5many?5stage?53?5entries?5@ ; `string'
PUBLIC	??_C@_0CL@MPJKOCBA@error?3?5too?5many?5stage?52?5entries?5@ ; `string'
;	COMDAT ??_C@_0CM@KLFBLKEK@error?3?5too?5many?5stage?53b?5entries@
CONST	SEGMENT
??_C@_0CM@KLFBLKEK@error?3?5too?5many?5stage?53b?5entries@ DB 'error: too'
	DB	' many stage 3b entries at U+%04x', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FAEAGBIO@error?3?5too?5many?5stage?53?5entries?5@
CONST	SEGMENT
??_C@_0CL@FAEAGBIO@error?3?5too?5many?5stage?53?5entries?5@ DB 'error: to'
	DB	'o many stage 3 entries at U+%04x', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MPJKOCBA@error?3?5too?5many?5stage?52?5entries?5@
CONST	SEGMENT
??_C@_0CL@MPJKOCBA@error?3?5too?5many?5stage?52?5entries?5@ DB 'error: to'
	DB	'o many stage 2 entries at U+%04x', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _addFromUTrieEntry
_TEXT	SEGMENT
tv216 = -280						; size = 4
_newBlock$ = -80					; size = 4
_min$ = -68						; size = 4
_nextOffset$ = -56					; size = 4
_i3b$ = -44						; size = 4
_i3$ = -32						; size = 4
_i2$ = -20						; size = 4
_i1$ = -8						; size = 4
_extData$ = 8						; size = 4
_c$ = 12						; size = 4
_value$ = 16						; size = 4
_addFromUTrieEntry PROC					; COMDAT
; Line 820
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 823
	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN20@addFromUTr
; Line 824
	jmp	$LN22@addFromUTr
$LN20@addFromUTr:
; Line 832
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	mov	DWORD PTR _i1$[ebp], eax
; Line 833
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _i1$[ebp]
	cmp	ecx, DWORD PTR [eax+917544]
	jl	SHORT $LN19@addFromUTr
; Line 834
	mov	eax, DWORD PTR _i1$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [ecx+917544], eax
$LN19@addFromUTr:
; Line 837
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _nextOffset$[ebp], eax
; Line 839
	mov	eax, DWORD PTR _i1$[ebp]
	mov	ecx, DWORD PTR _extData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+40]
	test	edx, edx
	jne	$LN18@addFromUTr
; Line 841
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917548]
	mov	DWORD PTR _newBlock$[ebp], ecx
; Line 842
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, DWORD PTR _nextOffset$[ebp]
	mov	DWORD PTR _min$[ebp], eax
$LN17@addFromUTr:
; Line 843
	mov	eax, DWORD PTR _min$[ebp]
	cmp	eax, DWORD PTR _newBlock$[ebp]
	jge	SHORT $LN16@addFromUTr
	mov	eax, DWORD PTR _newBlock$[ebp]
	mov	ecx, DWORD PTR _extData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2214]
	test	edx, edx
	jne	SHORT $LN16@addFromUTr
; Line 844
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, 1
	mov	DWORD PTR _newBlock$[ebp], eax
; Line 845
	jmp	SHORT $LN17@addFromUTr
$LN16@addFromUTr:
; Line 847
	mov	eax, DWORD PTR _i1$[ebp]
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	dx, WORD PTR _newBlock$[ebp]
	mov	WORD PTR [ecx+eax*2+40], dx
; Line 848
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [ecx+917548], eax
; Line 849
	mov	eax, DWORD PTR _extData$[ebp]
	cmp	DWORD PTR [eax+917548], 64448		; 0000fbc0H
	jle	SHORT $LN18@addFromUTr
; Line 850
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_0CL@MPJKOCBA@error?3?5too?5many?5stage?52?5entries?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 851
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@addFromUTr:
; Line 855
	mov	eax, DWORD PTR _i1$[ebp]
	mov	ecx, DWORD PTR _extData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+40]
	add	edx, DWORD PTR _nextOffset$[ebp]
	mov	DWORD PTR _i2$[ebp], edx
; Line 856
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _nextOffset$[ebp], eax
; Line 858
	mov	eax, DWORD PTR _i2$[ebp]
	mov	ecx, DWORD PTR _extData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2216]
	test	edx, edx
	jne	$LN14@addFromUTr
; Line 860
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917552]
	mov	DWORD PTR _newBlock$[ebp], ecx
; Line 861
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, DWORD PTR _nextOffset$[ebp]
	mov	DWORD PTR _min$[ebp], eax
$LN13@addFromUTr:
; Line 862
	mov	eax, DWORD PTR _min$[ebp]
	cmp	eax, DWORD PTR _newBlock$[ebp]
	jge	SHORT $LN12@addFromUTr
	mov	eax, DWORD PTR _newBlock$[ebp]
	mov	ecx, DWORD PTR _extData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+131110]
	test	edx, edx
	jne	SHORT $LN12@addFromUTr
; Line 863
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, 1
	mov	DWORD PTR _newBlock$[ebp], eax
; Line 864
	jmp	SHORT $LN13@addFromUTr
$LN12@addFromUTr:
; Line 867
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _newBlock$[ebp], eax
; Line 868
	mov	eax, DWORD PTR _newBlock$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _i2$[ebp]
	mov	edx, DWORD PTR _extData$[ebp]
	mov	WORD PTR [edx+ecx*2+2216], ax
; Line 870
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [ecx+917552], eax
; Line 871
	mov	eax, DWORD PTR _extData$[ebp]
	cmp	DWORD PTR [eax+917552], 262144		; 00040000H
	jle	SHORT $LN14@addFromUTr
; Line 872
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_0CL@FAEAGBIO@error?3?5too?5many?5stage?53?5entries?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 873
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@addFromUTr:
; Line 877
	mov	eax, DWORD PTR _i2$[ebp]
	mov	ecx, DWORD PTR _extData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2216]
	mov	eax, DWORD PTR _nextOffset$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _i3$[ebp], ecx
; Line 883
	cmp	DWORD PTR _value$[ebp], -2147483647	; 80000001H
	jne	$LN10@addFromUTr
; Line 885
	mov	eax, 1
	mov	ecx, DWORD PTR _i3$[ebp]
	mov	edx, DWORD PTR _extData$[ebp]
	mov	WORD PTR [edx+ecx*2+131112], ax
; Line 896
	cmp	DWORD PTR _nextOffset$[ebp], 15		; 0000000fH
	jne	$LN9@addFromUTr
; Line 899
	mov	eax, DWORD PTR _i3$[ebp]
	sub	eax, DWORD PTR _nextOffset$[ebp]
	mov	DWORD PTR _min$[ebp], eax
	jmp	SHORT $LN8@addFromUTr
$LN7@addFromUTr:
	mov	eax, DWORD PTR _min$[ebp]
	add	eax, 1
	mov	DWORD PTR _min$[ebp], eax
$LN8@addFromUTr:
	mov	eax, DWORD PTR _min$[ebp]
	cmp	eax, DWORD PTR _i3$[ebp]
	jge	SHORT $LN6@addFromUTr
	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _extData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+131112]
	cmp	edx, 1
	jne	SHORT $LN6@addFromUTr
	jmp	SHORT $LN7@addFromUTr
$LN6@addFromUTr:
; Line 901
	mov	eax, DWORD PTR _min$[ebp]
	cmp	eax, DWORD PTR _i3$[ebp]
	jne	SHORT $LN9@addFromUTr
; Line 903
	mov	eax, DWORD PTR _extData$[ebp]
	movzx	ecx, WORD PTR [eax+917560]
	test	ecx, ecx
	je	SHORT $LN4@addFromUTr
; Line 905
	mov	eax, DWORD PTR _i2$[ebp]
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR _extData$[ebp]
	mov	dx, WORD PTR [edx+917560]
	mov	WORD PTR [ecx+eax*2+2216], dx
; Line 906
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917552]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [edx+917552], ecx
; Line 907
	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917552]
	mov	edx, DWORD PTR _extData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+131112]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 908
	jmp	SHORT $LN9@addFromUTr
$LN4@addFromUTr:
; Line 910
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR _i2$[ebp]
	mov	edx, DWORD PTR _extData$[ebp]
	mov	cx, WORD PTR [edx+ecx*2+2216]
	mov	WORD PTR [eax+917560], cx
$LN9@addFromUTr:
; Line 914
	jmp	$LN22@addFromUTr
$LN10@addFromUTr:
; Line 915
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917556]
	mov	DWORD PTR _i3b$[ebp], ecx
	mov	edx, DWORD PTR _i3b$[ebp]
	mov	eax, DWORD PTR _extData$[ebp]
	mov	ecx, DWORD PTR [eax+917556]
	add	ecx, 1
	mov	eax, DWORD PTR _extData$[ebp]
	mov	DWORD PTR [eax+917556], ecx
	cmp	edx, 65536				; 00010000H
	jl	SHORT $LN23@addFromUTr
	mov	DWORD PTR tv216[ebp], 1
	jmp	SHORT $LN24@addFromUTr
$LN23@addFromUTr:
	mov	DWORD PTR tv216[ebp], 0
$LN24@addFromUTr:
	cmp	DWORD PTR tv216[ebp], 0
	je	SHORT $LN1@addFromUTr
; Line 916
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_0CM@KLFBLKEK@error?3?5too?5many?5stage?53b?5entries@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 917
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@addFromUTr:
; Line 921
	mov	eax, DWORD PTR _i3$[ebp]
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	dx, WORD PTR _i3b$[ebp]
	mov	WORD PTR [ecx+eax*2+131112], dx
; Line 922
	mov	eax, DWORD PTR _i3b$[ebp]
	mov	ecx, DWORD PTR _extData$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+eax*4+655400], edx
$LN22@addFromUTr:
; Line 924
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_addFromUTrieEntry ENDP
_TEXT	ENDS
END
