; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\makeconv\genmbcs.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	_MBCSGetDummy
EXTRN	_SMALL:BYTE
EXTRN	_memset:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_gDummy	DB	06f72cH DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\tools\makeconv\genmbcs.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _MBCSGetDummy
_TEXT	SEGMENT
_MBCSGetDummy PROC					; COMDAT
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 130
	push	456492					; 0006f72cH
	push	0
	push	OFFSET _gDummy
	call	_memset
	add	esp, 12					; 0000000cH
; Line 139
	mov	BYTE PTR _gDummy+456490, 1
; Line 140
	movsx	eax, BYTE PTR _SMALL
	test	eax, eax
	je	SHORT $LN2@MBCSGetDum
; Line 141
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR _gDummy+456488, ax
; Line 142
	mov	BYTE PTR _gDummy+456491, 1
; Line 143
	jmp	SHORT $LN1@MBCSGetDum
$LN2@MBCSGetDum:
; Line 144
	mov	eax, 55295				; 0000d7ffH
	mov	WORD PTR _gDummy+456488, ax
$LN1@MBCSGetDum:
; Line 146
	mov	eax, OFFSET _gDummy
; Line 147
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MBCSGetDummy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@	; `string'
PUBLIC	_MBCSOpen
EXTRN	__imp__exit:PROC
EXTRN	__imp__printf:PROC
EXTRN	_uprv_malloc_56:PROC
;	COMDAT ??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@
CONST	SEGMENT
??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@ DB 'out of memory', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _MBCSOpen
_TEXT	SEGMENT
_mbcsData$ = -8						; size = 4
_ucm$ = 8						; size = 4
_MBCSOpen PROC						; COMDAT
; Line 162
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 163
	push	456492					; 0006f72cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _mbcsData$[ebp], eax
; Line 164
	cmp	DWORD PTR _mbcsData$[ebp], 0
	jne	SHORT $LN1@MBCSOpen
; Line 165
	mov	esi, esp
	push	OFFSET ??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 166
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@MBCSOpen:
; Line 169
	mov	eax, DWORD PTR _ucm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	push	ecx
	call	?MBCSInit@@YAXPAUMBCSData@@PAUUCMFile@@@Z ; MBCSInit
	add	esp, 8
; Line 170
	mov	eax, DWORD PTR _mbcsData$[ebp]
$LN3@MBCSOpen:
; Line 171
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MBCSOpen ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?MBCSInit@@YAXPAUMBCSData@@PAUUCMFile@@@Z
_TEXT	SEGMENT
_mbcsData$ = 8						; size = 4
_ucm$ = 12						; size = 4
?MBCSInit@@YAXPAUMBCSData@@PAUUCMFile@@@Z PROC		; MBCSInit, COMDAT
; Line 150
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 151
	push	456492					; 0006f72cH
	push	0
	mov	eax, DWORD PTR _mbcsData$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 153
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR _ucm$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 155
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [eax], OFFSET ?MBCSClose@@YAXPAUNewConverter@@@Z ; MBCSClose
; Line 156
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?MBCSIsValid@@YACPAUNewConverter@@PBEH@Z ; MBCSIsValid
; Line 157
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [eax+8], OFFSET ?MBCSAddTable@@YACPAUNewConverter@@PAUUCMTable@@PAUUConverterStaticData@@@Z ; MBCSAddTable
; Line 158
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ?MBCSWrite@@YAIPAUNewConverter@@PBUUConverterStaticData@@PAUUNewDataMemory@@H@Z ; MBCSWrite
; Line 159
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MBCSInit@@YAXPAUMBCSData@@PAUUCMFile@@@Z ENDP		; MBCSInit
_TEXT	ENDS
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?MBCSClose@@YAXPAUNewConverter@@@Z
_TEXT	SEGMENT
_mbcsData$ = -8						; size = 4
_cnvData$ = 8						; size = 4
?MBCSClose@@YAXPAUNewConverter@@@Z PROC			; MBCSClose, COMDAT
; Line 180
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 181
	mov	eax, DWORD PTR _cnvData$[ebp]
	mov	DWORD PTR _mbcsData$[ebp], eax
; Line 182
	cmp	DWORD PTR _mbcsData$[ebp], 0
	je	SHORT $LN2@MBCSClose
; Line 183
	mov	eax, DWORD PTR _mbcsData$[ebp]
	push	eax
	call	?MBCSDestruct@@YAXPAUMBCSData@@@Z	; MBCSDestruct
	add	esp, 4
; Line 184
	mov	eax, DWORD PTR _mbcsData$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@MBCSClose:
; Line 186
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MBCSClose@@YAXPAUNewConverter@@@Z ENDP			; MBCSClose
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?MBCSDestruct@@YAXPAUMBCSData@@@Z
_TEXT	SEGMENT
_mbcsData$ = 8						; size = 4
?MBCSDestruct@@YAXPAUMBCSData@@@Z PROC			; MBCSDestruct, COMDAT
; Line 174
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 175
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 176
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454428]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 177
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MBCSDestruct@@YAXPAUMBCSData@@@Z ENDP			; MBCSDestruct
_TEXT	ENDS
EXTRN	_ucm_countChars:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?MBCSIsValid@@YACPAUNewConverter@@PBEH@Z
_TEXT	SEGMENT
_mbcsData$ = -8						; size = 4
_cnvData$ = 8						; size = 4
_bytes$ = 12						; size = 4
_length$ = 16						; size = 4
?MBCSIsValid@@YACPAUNewConverter@@PBEH@Z PROC		; MBCSIsValid, COMDAT
; Line 550
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 551
	mov	eax, DWORD PTR _cnvData$[ebp]
	mov	DWORD PTR _mbcsData$[ebp], eax
; Line 553
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 8
	push	eax
	call	_ucm_countChars
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	sete	al
; Line 554
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MBCSIsValid@@YACPAUNewConverter@@PBEH@Z ENDP		; MBCSIsValid
_TEXT	ENDS
PUBLIC	_MBCSOkForBaseFromUnicode
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MBCSOkForBaseFromUnicode
_TEXT	SEGMENT
_mbcsData$ = 8						; size = 4
_bytes$ = 12						; size = 4
_length$ = 16						; size = 4
_c$ = 20						; size = 4
_flag$ = 24						; size = 1
_MBCSOkForBaseFromUnicode PROC				; COMDAT
; Line 892
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 906
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 2
	jne	SHORT $LN5@MBCSOkForB
	cmp	DWORD PTR _length$[ebp], 1
	je	SHORT $LN6@MBCSOkForB
$LN5@MBCSOkForB:
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 1
	jne	SHORT $LN4@MBCSOkForB
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@MBCSOkForB
$LN4@MBCSOkForB:
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 1
	jg	SHORT $LN7@MBCSOkForB
	cmp	DWORD PTR _length$[ebp], 1
	jle	SHORT $LN7@MBCSOkForB
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN7@MBCSOkForB
$LN6@MBCSOkForB:
; Line 907
	xor	al, al
	jmp	SHORT $LN8@MBCSOkForB
$LN7@MBCSOkForB:
; Line 917
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	SHORT $LN3@MBCSOkForB
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 1
	jg	SHORT $LN3@MBCSOkForB
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [eax+456488]
	cmp	DWORD PTR _c$[ebp], ecx
	jg	SHORT $LN3@MBCSOkForB
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@MBCSOkForB
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 1
	jne	SHORT $LN3@MBCSOkForB
$LN2@MBCSOkForB:
; Line 918
	xor	al, al
	jmp	SHORT $LN8@MBCSOkForB
$LN3@MBCSOkForB:
; Line 926
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456491]
	test	ecx, ecx
	je	SHORT $LN1@MBCSOkForB
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	je	SHORT $LN1@MBCSOkForB
; Line 927
	xor	al, al
	jmp	SHORT $LN8@MBCSOkForB
$LN1@MBCSOkForB:
; Line 931
	mov	al, 1
$LN8@MBCSOkForB:
; Line 932
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MBCSOkForBaseFromUnicode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@LMBBJPIA@error?3?5illegal?5fallback?5indicato@ ; `string'
PUBLIC	??_C@_0EI@NGLGFNMN@makeconv?5warning?3?5?9?9small?5not?5av@ ; `string'
PUBLIC	??_C@_0EL@GIDGGLCP@error?3?5contains?5mappings?5for?5bot@ ; `string'
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
;	COMDAT ??_C@_0CG@LMBBJPIA@error?3?5illegal?5fallback?5indicato@
CONST	SEGMENT
??_C@_0CG@LMBBJPIA@error?3?5illegal?5fallback?5indicato@ DB 'error: illeg'
	DB	'al fallback indicator %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@NGLGFNMN@makeconv?5warning?3?5?9?9small?5not?5av@
CONST	SEGMENT
??_C@_0EI@NGLGFNMN@makeconv?5warning?3?5?9?9small?5not?5av@ DB 'makeconv '
	DB	'warning: --small not available for .ucm files without |0 etc.'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@GIDGGLCP@error?3?5contains?5mappings?5for?5bot@
CONST	SEGMENT
??_C@_0EL@GIDGGLCP@error?3?5contains?5mappings?5for?5bot@ DB 'error: cont'
	DB	'ains mappings for both supplementary and surrogate code point'
	DB	's', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?MBCSAddTable@@YACPAUNewConverter@@PAUUCMTable@@PAUUConverterStaticData@@@Z
_TEXT	SEGMENT
tv155 = -292						; size = 4
_utf8Friendly$ = -89					; size = 1
_isOK$ = -77						; size = 1
_f$ = -65						; size = 1
_maxCharLength$ = -56					; size = 4
_i$ = -44						; size = 4
_c$ = -32						; size = 4
_m$ = -20						; size = 4
_mbcsData$ = -8						; size = 4
_cnvData$ = 8						; size = 4
_table$ = 12						; size = 4
_staticData$ = 16					; size = 4
?MBCSAddTable@@YACPAUNewConverter@@PAUUCMTable@@PAUUConverterStaticData@@@Z PROC ; MBCSAddTable, COMDAT
; Line 936
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 944
	mov	eax, DWORD PTR _staticData$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	dl, BYTE PTR [ecx+40]
	mov	BYTE PTR [eax+79], dl
; Line 945
	mov	eax, DWORD PTR _staticData$[ebp]
	movzx	ecx, BYTE PTR [eax+79]
	cmp	ecx, 3
	jne	SHORT $LN27@MBCSAddTab
; Line 946
	mov	esi, esp
	push	OFFSET ??_C@_0EL@GIDGGLCP@error?3?5contains?5mappings?5for?5bot@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 947
	xor	al, al
	jmp	$LN28@MBCSAddTab
$LN27@MBCSAddTab:
; Line 950
	mov	eax, DWORD PTR _staticData$[ebp]
	mov	BYTE PTR [eax+69], 2
; Line 952
	mov	eax, DWORD PTR _cnvData$[ebp]
	mov	DWORD PTR _mbcsData$[ebp], eax
; Line 953
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+132112]
	mov	DWORD PTR _maxCharLength$[ebp], edx
; Line 960
	mov	eax, DWORD PTR _table$[ebp]
	movsx	ecx, BYTE PTR [eax+41]
	and	ecx, 1
	setne	dl
	mov	BYTE PTR _utf8Friendly$[ebp], dl
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	cl, BYTE PTR _utf8Friendly$[ebp]
	mov	BYTE PTR [eax+456490], cl
; Line 961
	movsx	eax, BYTE PTR _utf8Friendly$[ebp]
	test	eax, eax
	je	SHORT $LN26@MBCSAddTab
; Line 962
	mov	eax, 55295				; 0000d7ffH
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	WORD PTR [ecx+456488], ax
; Line 963
	movsx	eax, BYTE PTR _SMALL
	test	eax, eax
	je	SHORT $LN25@MBCSAddTab
	cmp	DWORD PTR _maxCharLength$[ebp], 1
	jle	SHORT $LN25@MBCSAddTab
; Line 964
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	BYTE PTR [eax+456491], 1
$LN25@MBCSAddTab:
; Line 966
	jmp	SHORT $LN24@MBCSAddTab
$LN26@MBCSAddTab:
; Line 967
	xor	eax, eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	WORD PTR [ecx+456488], ax
; Line 968
	movsx	eax, BYTE PTR _SMALL
	test	eax, eax
	je	SHORT $LN24@MBCSAddTab
	cmp	DWORD PTR _maxCharLength$[ebp], 1
	jle	SHORT $LN24@MBCSAddTab
; Line 970
	mov	esi, esp
	push	OFFSET ??_C@_0EI@NGLGFNMN@makeconv?5warning?3?5?9?9small?5not?5av@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@MBCSAddTab:
; Line 974
	mov	eax, DWORD PTR _mbcsData$[ebp]
	push	eax
	call	?MBCSStartMappings@@YACPAUMBCSData@@@Z	; MBCSStartMappings
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN22@MBCSAddTab
; Line 975
	xor	al, al
	jmp	$LN28@MBCSAddTab
$LN22@MBCSAddTab:
; Line 978
	mov	eax, DWORD PTR _staticData$[ebp]
	mov	BYTE PTR [eax+78], 0
; Line 979
	mov	eax, DWORD PTR _staticData$[ebp]
	mov	BYTE PTR [eax+77], 0
; Line 981
	mov	BYTE PTR _isOK$[ebp], 1
; Line 983
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _m$[ebp], ecx
; Line 984
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@MBCSAddTab
$LN20@MBCSAddTab:
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _m$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN21@MBCSAddTab:
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	$LN19@MBCSAddTab
; Line 985
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _c$[ebp], ecx
; Line 986
	mov	eax, DWORD PTR _m$[ebp]
	mov	cl, BYTE PTR [eax+10]
	mov	BYTE PTR _f$[ebp], cl
; Line 1006
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456491]
	test	ecx, ecx
	je	SHORT $LN18@MBCSAddTab
	movsx	eax, BYTE PTR _f$[ebp]
	cmp	eax, 1
	jg	SHORT $LN18@MBCSAddTab
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [eax+456488]
	cmp	ecx, DWORD PTR _c$[ebp]
	jge	SHORT $LN18@MBCSAddTab
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN18@MBCSAddTab
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [eax+456488]
	cmp	ecx, 65279				; 0000feffH
	jge	SHORT $LN18@MBCSAddTab
; Line 1007
	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	WORD PTR [ecx+456488], ax
$LN18@MBCSAddTab:
; Line 1010
	movsx	eax, BYTE PTR _f$[ebp]
	mov	DWORD PTR tv155[ebp], eax
	mov	ecx, DWORD PTR tv155[ebp]
	add	ecx, 1
	mov	DWORD PTR tv155[ebp], ecx
	cmp	DWORD PTR tv155[ebp], 5
	ja	$LN1@MBCSAddTab
	mov	edx, DWORD PTR tv155[ebp]
	jmp	DWORD PTR $LN30@MBCSAddTab[edx*4]
$LN15@MBCSAddTab:
; Line 1016
	movzx	eax, BYTE PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	push	edx
	call	?MBCSAddToUnicode@@YACPAUMBCSData@@PBEHHC@Z ; MBCSAddToUnicode
	add	esp, 20					; 00000014H
	movsx	eax, al
	movsx	ecx, BYTE PTR _isOK$[ebp]
	and	ecx, eax
	mov	BYTE PTR _isOK$[ebp], cl
; Line 1018
	cmp	DWORD PTR _maxCharLength$[ebp], 1
	jne	SHORT $LN14@MBCSAddTab
; Line 1019
	movzx	eax, BYTE PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	push	edx
	call	?MBCSSingleAddFromUnicode@@YACPAUMBCSData@@PBEHHC@Z ; MBCSSingleAddFromUnicode
	add	esp, 20					; 00000014H
	movsx	eax, al
	movsx	ecx, BYTE PTR _isOK$[ebp]
	and	ecx, eax
	mov	BYTE PTR _isOK$[ebp], cl
	jmp	SHORT $LN13@MBCSAddTab
$LN14@MBCSAddTab:
; Line 1020
	movzx	eax, BYTE PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	push	edx
	call	_MBCSOkForBaseFromUnicode
	add	esp, 20					; 00000014H
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN12@MBCSAddTab
; Line 1021
	movzx	eax, BYTE PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	push	edx
	call	?MBCSAddFromUnicode@@YACPAUMBCSData@@PBEHHC@Z ; MBCSAddFromUnicode
	add	esp, 20					; 00000014H
	movsx	eax, al
	movsx	ecx, BYTE PTR _isOK$[ebp]
	and	ecx, eax
	mov	BYTE PTR _isOK$[ebp], cl
; Line 1022
	jmp	SHORT $LN13@MBCSAddTab
$LN12@MBCSAddTab:
; Line 1023
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _m$[ebp]
	mov	BYTE PTR [edx+10], cl
; Line 1024
	mov	eax, DWORD PTR _m$[ebp]
	mov	BYTE PTR [eax+11], 1
$LN13@MBCSAddTab:
; Line 1026
	jmp	$LN16@MBCSAddTab
$LN10@MBCSAddTab:
; Line 1029
	cmp	DWORD PTR _maxCharLength$[ebp], 1
	jne	SHORT $LN9@MBCSAddTab
; Line 1030
	mov	eax, DWORD PTR _staticData$[ebp]
	mov	BYTE PTR [eax+78], 1
; Line 1031
	movzx	eax, BYTE PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	push	edx
	call	?MBCSSingleAddFromUnicode@@YACPAUMBCSData@@PBEHHC@Z ; MBCSSingleAddFromUnicode
	add	esp, 20					; 00000014H
	movsx	eax, al
	movsx	ecx, BYTE PTR _isOK$[ebp]
	and	ecx, eax
	mov	BYTE PTR _isOK$[ebp], cl
	jmp	SHORT $LN8@MBCSAddTab
$LN9@MBCSAddTab:
; Line 1032
	movzx	eax, BYTE PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	push	edx
	call	_MBCSOkForBaseFromUnicode
	add	esp, 20					; 00000014H
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN7@MBCSAddTab
; Line 1033
	mov	eax, DWORD PTR _staticData$[ebp]
	mov	BYTE PTR [eax+78], 1
; Line 1034
	movzx	eax, BYTE PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	push	edx
	call	?MBCSAddFromUnicode@@YACPAUMBCSData@@PBEHHC@Z ; MBCSAddFromUnicode
	add	esp, 20					; 00000014H
	movsx	eax, al
	movsx	ecx, BYTE PTR _isOK$[ebp]
	and	ecx, eax
	mov	BYTE PTR _isOK$[ebp], cl
; Line 1035
	jmp	SHORT $LN8@MBCSAddTab
$LN7@MBCSAddTab:
; Line 1036
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _m$[ebp]
	mov	BYTE PTR [edx+10], cl
; Line 1037
	mov	eax, DWORD PTR _m$[ebp]
	mov	BYTE PTR [eax+11], 1
$LN8@MBCSAddTab:
; Line 1039
	jmp	$LN16@MBCSAddTab
$LN5@MBCSAddTab:
; Line 1042
	cmp	DWORD PTR _maxCharLength$[ebp], 1
	jle	SHORT $LN4@MBCSAddTab
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	jne	SHORT $LN4@MBCSAddTab
; Line 1043
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _m$[ebp]
	mov	BYTE PTR [edx+10], cl
; Line 1044
	mov	eax, DWORD PTR _m$[ebp]
	mov	BYTE PTR [eax+11], 1
$LN4@MBCSAddTab:
; Line 1046
	jmp	$LN16@MBCSAddTab
$LN3@MBCSAddTab:
; Line 1049
	mov	eax, DWORD PTR _staticData$[ebp]
	mov	BYTE PTR [eax+77], 1
; Line 1050
	movzx	eax, BYTE PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	push	edx
	call	?MBCSAddToUnicode@@YACPAUMBCSData@@PBEHHC@Z ; MBCSAddToUnicode
	add	esp, 20					; 00000014H
	movsx	eax, al
	movsx	ecx, BYTE PTR _isOK$[ebp]
	and	ecx, eax
	mov	BYTE PTR _isOK$[ebp], cl
; Line 1051
	jmp	SHORT $LN16@MBCSAddTab
$LN2@MBCSAddTab:
; Line 1054
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _m$[ebp]
	mov	BYTE PTR [edx+10], cl
; Line 1055
	mov	eax, DWORD PTR _m$[ebp]
	mov	BYTE PTR [eax+11], 1
; Line 1056
	jmp	SHORT $LN16@MBCSAddTab
$LN1@MBCSAddTab:
; Line 1059
	movsx	eax, BYTE PTR _f$[ebp]
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0CG@LMBBJPIA@error?3?5illegal?5fallback?5indicato@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1060
	xor	al, al
	jmp	SHORT $LN28@MBCSAddTab
$LN16@MBCSAddTab:
; Line 1062
	jmp	$LN20@MBCSAddTab
$LN19@MBCSAddTab:
; Line 1064
	mov	eax, DWORD PTR _staticData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	push	ecx
	call	?MBCSPostprocess@@YAXPAUMBCSData@@PBUUConverterStaticData@@@Z ; MBCSPostprocess
	add	esp, 8
; Line 1066
	mov	al, BYTE PTR _isOK$[ebp]
$LN28@MBCSAddTab:
; Line 1067
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN30@MBCSAddTab:
	DD	$LN15@MBCSAddTab
	DD	$LN15@MBCSAddTab
	DD	$LN10@MBCSAddTab
	DD	$LN5@MBCSAddTab
	DD	$LN3@MBCSAddTab
	DD	$LN2@MBCSAddTab
?MBCSAddTable@@YACPAUNewConverter@@PAUUCMTable@@PAUUConverterStaticData@@@Z ENDP ; MBCSAddTable
_TEXT	ENDS
PUBLIC	??_C@_0DL@HLFAOCEM@error?3?5out?5of?5memory?5allocating?5@ ; `string'
PUBLIC	??_C@_0DH@HHELGJEO@error?3?5out?5of?5memory?5allocating?5@ ; `string'
PUBLIC	??_C@_0CK@HMAMFBNL@the?5total?5number?5of?5offsets?5is?50@ ; `string'
EXTRN	_VERBOSE:BYTE
;	COMDAT ??_C@_0DL@HLFAOCEM@error?3?5out?5of?5memory?5allocating?5@
CONST	SEGMENT
??_C@_0DL@HLFAOCEM@error?3?5out?5of?5memory?5allocating?5@ DB 'error: out'
	DB	' of memory allocating %ld B for target mappings', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HHELGJEO@error?3?5out?5of?5memory?5allocating?5@
CONST	SEGMENT
??_C@_0DH@HHELGJEO@error?3?5out?5of?5memory?5allocating?5@ DB 'error: out'
	DB	' of memory allocating %ld 16-bit code units', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HMAMFBNL@the?5total?5number?5of?5offsets?5is?50@
CONST	SEGMENT
??_C@_0CK@HMAMFBNL@the?5total?5number?5of?5offsets?5is?50@ DB 'the total '
	DB	'number of offsets is 0x%lx=%ld', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?MBCSStartMappings@@YACPAUMBCSData@@@Z
_TEXT	SEGMENT
_stage3AllocLength$ = -80				; size = 4
_stage3NullLength$ = -68				; size = 4
_stage2AllocLength$ = -56				; size = 4
_stage2NullLength$ = -44				; size = 4
_maxCharLength$ = -32					; size = 4
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_mbcsData$ = 8						; size = 4
?MBCSStartMappings@@YACPAUMBCSData@@@Z PROC		; MBCSStartMappings, COMDAT
; Line 189
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 197
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+132116]
	mov	DWORD PTR _sum$[ebp], edx
; Line 198
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	SHORT $LN23@MBCSStartM
; Line 199
	mov	esi, esp
	mov	eax, DWORD PTR _sum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CK@HMAMFBNL@the?5total?5number?5of?5offsets?5is?50@
	call	DWORD PTR __imp__printf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@MBCSStartM:
; Line 202
	cmp	DWORD PTR _sum$[ebp], 0
	jle	$LN22@MBCSStartM
; Line 203
	mov	eax, DWORD PTR _sum$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [ecx+65560], eax
; Line 204
	mov	eax, DWORD PTR _mbcsData$[ebp]
	cmp	DWORD PTR [eax+65560], 0
	jne	SHORT $LN21@MBCSStartM
; Line 206
	mov	esi, esp
	mov	eax, DWORD PTR _sum$[ebp]
	push	eax
	push	OFFSET ??_C@_0DH@HHELGJEO@error?3?5out?5of?5memory?5allocating?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 207
	xor	al, al
	jmp	$LN24@MBCSStartM
$LN21@MBCSStartM:
; Line 209
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@MBCSStartM
$LN19@MBCSStartM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@MBCSStartM:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sum$[ebp]
	jge	SHORT $LN22@MBCSStartM
; Line 210
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	mov	edx, 65534				; 0000fffeH
	mov	eax, DWORD PTR _i$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 211
	jmp	SHORT $LN19@MBCSStartM
$LN22@MBCSStartM:
; Line 215
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+132112]
	mov	DWORD PTR _maxCharLength$[ebp], edx
; Line 218
	cmp	DWORD PTR _maxCharLength$[ebp], 1
	jne	SHORT $LN17@MBCSStartM
; Line 220
	mov	DWORD PTR _sum$[ebp], 131072		; 00020000H
; Line 221
	jmp	SHORT $LN16@MBCSStartM
$LN17@MBCSStartM:
; Line 223
	mov	eax, DWORD PTR _maxCharLength$[ebp]
	shl	eax, 20					; 00000014H
	mov	DWORD PTR _sum$[ebp], eax
$LN16@MBCSStartM:
; Line 225
	mov	eax, DWORD PTR _sum$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [ecx+454428], eax
; Line 226
	mov	eax, DWORD PTR _mbcsData$[ebp]
	cmp	DWORD PTR [eax+454428], 0
	jne	SHORT $LN15@MBCSStartM
; Line 227
	mov	esi, esp
	mov	eax, DWORD PTR _sum$[ebp]
	push	eax
	push	OFFSET ??_C@_0DL@HLFAOCEM@error?3?5out?5of?5memory?5allocating?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 228
	xor	al, al
	jmp	$LN24@MBCSStartM
$LN15@MBCSStartM:
; Line 230
	mov	eax, DWORD PTR _sum$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+454428]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 264
	mov	DWORD PTR _stage2NullLength$[ebp], 64	; 00000040H
; Line 265
	mov	DWORD PTR _stage2AllocLength$[ebp], 64	; 00000040H
; Line 267
	mov	DWORD PTR _stage3NullLength$[ebp], 64	; 00000040H
; Line 268
	mov	DWORD PTR _stage3AllocLength$[ebp], 128	; 00000080H
; Line 271
	mov	eax, DWORD PTR _stage2NullLength$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
; Line 272
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@MBCSStartM
$LN13@MBCSStartM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@MBCSStartM:
	mov	eax, DWORD PTR _stage2AllocLength$[ebp]
	sar	eax, 6
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN12@MBCSStartM
; Line 273
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	dx, WORD PTR _sum$[ebp]
	mov	WORD PTR [ecx+eax*2+65564], dx
; Line 274
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _sum$[ebp], eax
; Line 275
	jmp	SHORT $LN13@MBCSStartM
$LN12@MBCSStartM:
; Line 276
	mov	eax, DWORD PTR _stage2NullLength$[ebp]
	add	eax, DWORD PTR _stage2AllocLength$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [ecx+454432], eax
; Line 284
	cmp	DWORD PTR _maxCharLength$[ebp], 1
	jne	SHORT $LN11@MBCSStartM
; Line 285
	mov	eax, DWORD PTR _stage3NullLength$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
; Line 286
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@MBCSStartM
$LN9@MBCSStartM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@MBCSStartM:
	mov	eax, DWORD PTR _stage3AllocLength$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN8@MBCSStartM
; Line 287
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [eax+65564]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	ax, WORD PTR _sum$[ebp]
	mov	WORD PTR [edx+ecx*2+67740], ax
; Line 288
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _sum$[ebp], eax
; Line 289
	jmp	SHORT $LN9@MBCSStartM
$LN8@MBCSStartM:
	jmp	SHORT $LN7@MBCSStartM
$LN11@MBCSStartM:
; Line 291
	mov	eax, DWORD PTR _stage3NullLength$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	mov	DWORD PTR _sum$[ebp], eax
; Line 292
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@MBCSStartM
$LN5@MBCSStartM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@MBCSStartM:
	mov	eax, DWORD PTR _stage3AllocLength$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN7@MBCSStartM
; Line 293
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [eax+65564]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx+ecx*4+196636], eax
; Line 294
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, 1
	mov	DWORD PTR _sum$[ebp], eax
; Line 295
	jmp	SHORT $LN5@MBCSStartM
$LN7@MBCSStartM:
; Line 298
	mov	eax, DWORD PTR _stage3NullLength$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
; Line 299
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MBCSStartM
$LN2@MBCSStartM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MBCSStartM:
	mov	eax, DWORD PTR _stage3AllocLength$[ebp]
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@MBCSStartM
; Line 300
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	dx, WORD PTR _sum$[ebp]
	mov	WORD PTR [ecx+eax*2+454440], dx
; Line 301
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _sum$[ebp], eax
; Line 302
	jmp	SHORT $LN2@MBCSStartM
$LN1@MBCSStartM:
; Line 309
	mov	eax, DWORD PTR _stage3NullLength$[ebp]
	add	eax, DWORD PTR _stage3AllocLength$[ebp]
	imul	eax, DWORD PTR _maxCharLength$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [ecx+454436], eax
; Line 311
	mov	al, 1
$LN24@MBCSStartM:
; Line 312
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MBCSStartMappings@@YACPAUMBCSData@@@Z ENDP		; MBCSStartMappings
_TEXT	ENDS
PUBLIC	??_C@_0FH@KDCIKFOB@internal?5error?3?5byte?5sequence?5re@ ; `string'
PUBLIC	??_C@_0EJ@MOMGMCDC@error?3?5code?5point?5does?5not?5fit?5i@ ; `string'
PUBLIC	??_C@_0DO@MKHAKDC@duplicate?5codepage?5byte?5sequence@ ; `string'
PUBLIC	??_C@_0EF@PGJNLKIL@error?3?5duplicate?5codepage?5byte?5s@ ; `string'
PUBLIC	??_C@_0EA@FOEEAGEJ@error?3?5byte?5sequence?5ends?5in?5una@ ; `string'
PUBLIC	??_C@_0EB@IHGDKPFP@error?3?5byte?5sequence?5ends?5in?5sta@ ; `string'
PUBLIC	??_C@_0DN@INKFOFLD@error?3?5byte?5sequence?5ends?5in?5ill@ ; `string'
PUBLIC	??_C@_0EI@JPCHFLKG@error?3?5byte?5sequence?5too?5long?5by@ ; `string'
PUBLIC	??_C@_0EK@IHMOJLEM@error?3?5byte?5sequence?5too?5short?0?5@ ; `string'
PUBLIC	??_C@_0CH@IEHFNBLJ@error?3?5there?5is?5no?5state?5informa@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_0FH@KDCIKFOB@internal?5error?3?5byte?5sequence?5re@
CONST	SEGMENT
??_C@_0FH@KDCIKFOB@internal?5error?3?5byte?5sequence?5re@ DB 'internal er'
	DB	'ror: byte sequence reached reserved action code, entry 0x%02x'
	DB	': 0x%s (U+%x)', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@MOMGMCDC@error?3?5code?5point?5does?5not?5fit?5i@
CONST	SEGMENT
??_C@_0EJ@MOMGMCDC@error?3?5code?5point?5does?5not?5fit?5i@ DB 'error: co'
	DB	'de point does not fit into valid-16-bit state at U+%04x<->0x%'
	DB	's', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@MKHAKDC@duplicate?5codepage?5byte?5sequence@
CONST	SEGMENT
??_C@_0DO@MKHAKDC@duplicate?5codepage?5byte?5sequence@ DB 'duplicate code'
	DB	'page byte sequence at U+%04x<->0x%s see U+%04x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@PGJNLKIL@error?3?5duplicate?5codepage?5byte?5s@
CONST	SEGMENT
??_C@_0EF@PGJNLKIL@error?3?5duplicate?5codepage?5byte?5s@ DB 'error: dupl'
	DB	'icate codepage byte sequence at U+%04x<->0x%s see U+%04x', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@FOEEAGEJ@error?3?5byte?5sequence?5ends?5in?5una@
CONST	SEGMENT
??_C@_0EA@FOEEAGEJ@error?3?5byte?5sequence?5ends?5in?5una@ DB 'error: byt'
	DB	'e sequence ends in unassigned state at U+%04x<->0x%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IHGDKPFP@error?3?5byte?5sequence?5ends?5in?5sta@
CONST	SEGMENT
??_C@_0EB@IHGDKPFP@error?3?5byte?5sequence?5ends?5in?5sta@ DB 'error: byt'
	DB	'e sequence ends in state-change-only at U+%04x<->0x%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@INKFOFLD@error?3?5byte?5sequence?5ends?5in?5ill@
CONST	SEGMENT
??_C@_0DN@INKFOFLD@error?3?5byte?5sequence?5ends?5in?5ill@ DB 'error: byt'
	DB	'e sequence ends in illegal state at U+%04x<->0x%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@JPCHFLKG@error?3?5byte?5sequence?5too?5long?5by@
CONST	SEGMENT
??_C@_0EI@JPCHFLKG@error?3?5byte?5sequence?5too?5long?5by@ DB 'error: byt'
	DB	'e sequence too long by %d bytes, final state %u: 0x%s (U+%x)', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@IHMOJLEM@error?3?5byte?5sequence?5too?5short?0?5@
CONST	SEGMENT
??_C@_0EK@IHMOJLEM@error?3?5byte?5sequence?5too?5short?0?5@ DB 'error: by'
	DB	'te sequence too short, ends in non-final state %hu: 0x%s (U+%'
	DB	'x)', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IEHFNBLJ@error?3?5there?5is?5no?5state?5informa@
CONST	SEGMENT
??_C@_0CH@IEHFNBLJ@error?3?5there?5is?5no?5state?5informa@ DB 'error: the'
	DB	're is no state information!', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?MBCSAddToUnicode@@YACPAUMBCSData@@PBEHHC@Z
_TEXT	SEGMENT
tv156 = -292						; size = 4
_real$37756 = -92					; size = 4
_state$ = -77						; size = 1
_old$ = -68						; size = 4
_entry$ = -56						; size = 4
_i$ = -44						; size = 4
_offset$ = -32						; size = 4
_buffer$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_mbcsData$ = 8						; size = 4
_bytes$ = 12						; size = 4
_length$ = 16						; size = 4
_c$ = 20						; size = 4
_flag$ = 24						; size = 1
?MBCSAddToUnicode@@YACPAUMBCSData@@PBEHHC@Z PROC	; MBCSAddToUnicode, COMDAT
; Line 369
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 371
	mov	DWORD PTR _offset$[ebp], 0
; Line 372
	mov	DWORD PTR _i$[ebp], 0
; Line 373
	mov	BYTE PTR _state$[ebp], 0
; Line 375
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+132104], 0
	jne	SHORT $LN54@MBCSAddToU
; Line 376
	mov	esi, esp
	push	OFFSET ??_C@_0CH@IEHFNBLJ@error?3?5there?5is?5no?5state?5informa@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 377
	xor	al, al
	jmp	$LN55@MBCSAddToU
$LN54@MBCSAddToU:
; Line 381
	cmp	DWORD PTR _length$[ebp], 2
	jne	SHORT $LN53@MBCSAddToU
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	movsx	edx, BYTE PTR [ecx+132121]
	cmp	edx, 12					; 0000000cH
	jne	SHORT $LN53@MBCSAddToU
; Line 382
	mov	BYTE PTR _state$[ebp], 1
$LN53@MBCSAddToU:
; Line 390
	mov	DWORD PTR _i$[ebp], 0
$LN52@MBCSAddToU:
; Line 391
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	movzx	edx, BYTE PTR _state$[ebp]
	shl	edx, 10					; 0000000aH
	lea	eax, DWORD PTR [ecx+edx+8]
	mov	ecx, DWORD PTR _bytes$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _entry$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 392
	cmp	DWORD PTR _entry$[ebp], 0
	jl	SHORT $LN50@MBCSAddToU
; Line 393
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jne	SHORT $LN49@MBCSAddToU
; Line 395
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	push	eax
	movzx	ecx, BYTE PTR _state$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EK@IHMOJLEM@error?3?5byte?5sequence?5too?5short?0?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 396
	xor	al, al
	jmp	$LN55@MBCSAddToU
$LN49@MBCSAddToU:
; Line 398
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _state$[ebp], al
; Line 399
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, 16777215				; 00ffffffH
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 400
	jmp	$LN48@MBCSAddToU
$LN50@MBCSAddToU:
; Line 401
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN47@MBCSAddToU
; Line 403
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	push	eax
	movzx	ecx, BYTE PTR _state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET ??_C@_0EI@JPCHFLKG@error?3?5byte?5sequence?5too?5long?5by@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 404
	xor	al, al
	jmp	$LN55@MBCSAddToU
$LN47@MBCSAddToU:
; Line 406
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR tv156[ebp], eax
	cmp	DWORD PTR tv156[ebp], 8
	ja	$LN1@MBCSAddToU
	mov	ecx, DWORD PTR tv156[ebp]
	jmp	DWORD PTR $LN60@MBCSAddToU[ecx*4]
$LN44@MBCSAddToU:
; Line 409
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_0DN@INKFOFLD@error?3?5byte?5sequence?5ends?5in?5ill@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 410
	xor	al, al
	jmp	$LN55@MBCSAddToU
$LN43@MBCSAddToU:
; Line 413
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_0EB@IHGDKPFP@error?3?5byte?5sequence?5ends?5in?5sta@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 414
	xor	al, al
	jmp	$LN55@MBCSAddToU
$LN42@MBCSAddToU:
; Line 417
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_0EA@FOEEAGEJ@error?3?5byte?5sequence?5ends?5in?5una@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 418
	xor	al, al
	jmp	$LN55@MBCSAddToU
$LN41@MBCSAddToU:
; Line 423
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -2130706433			; 80ffffffH
	cmp	eax, -2147418114			; 8000fffeH
	je	$LN40@MBCSAddToU
; Line 425
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	je	SHORT $LN38@MBCSAddToU
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	cmp	eax, 2
	jne	SHORT $LN39@MBCSAddToU
$LN38@MBCSAddToU:
; Line 426
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, 1048575				; 000fffffH
	mov	DWORD PTR _old$[ebp], eax
; Line 427
	jmp	SHORT $LN37@MBCSAddToU
$LN39@MBCSAddToU:
; Line 428
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, 1048575				; 000fffffH
	add	eax, 65536				; 00010000H
	mov	DWORD PTR _old$[ebp], eax
$LN37@MBCSAddToU:
; Line 430
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	jl	SHORT $LN36@MBCSAddToU
; Line 432
	mov	esi, esp
	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EF@PGJNLKIL@error?3?5duplicate?5codepage?5byte?5s@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 433
	xor	al, al
	jmp	$LN55@MBCSAddToU
	jmp	SHORT $LN40@MBCSAddToU
$LN36@MBCSAddToU:
; Line 434
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	SHORT $LN40@MBCSAddToU
; Line 436
	mov	esi, esp
	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DO@MKHAKDC@duplicate?5codepage?5byte?5sequence@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN40@MBCSAddToU:
; Line 444
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -15728641				; ff0fffffH
	movsx	ecx, BYTE PTR _flag$[ebp]
	sub	ecx, 3
	neg	ecx
	sbb	ecx, ecx
	and	ecx, -2					; fffffffeH
	add	ecx, 2
	xor	edx, edx
	cmp	DWORD PTR _c$[ebp], 65536		; 00010000H
	setge	dl
	add	ecx, edx
	shl	ecx, 20					; 00000014H
	or	eax, ecx
	mov	DWORD PTR _entry$[ebp], eax
; Line 447
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN33@MBCSAddToU
; Line 448
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -1048576				; fff00000H
	or	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _entry$[ebp], eax
; Line 449
	jmp	SHORT $LN32@MBCSAddToU
$LN33@MBCSAddToU:
; Line 450
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -1048576				; fff00000H
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, 65536				; 00010000H
	or	eax, ecx
	mov	DWORD PTR _entry$[ebp], eax
$LN32@MBCSAddToU:
; Line 452
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	movzx	edx, BYTE PTR _state$[ebp]
	shl	edx, 10					; 0000000aH
	lea	eax, DWORD PTR [ecx+edx+8]
	mov	ecx, DWORD PTR _bytes$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx-1]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 453
	jmp	$LN45@MBCSAddToU
$LN31@MBCSAddToU:
; Line 457
	movzx	eax, WORD PTR _entry$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 459
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	mov	edx, DWORD PTR _offset$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _old$[ebp], eax
	cmp	DWORD PTR _old$[ebp], 65534		; 0000fffeH
	jne	SHORT $LN29@MBCSAddToU
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	push	ecx
	call	?removeFallback@@YAHPAUMBCSData@@I@Z	; removeFallback
	add	esp, 8
	mov	DWORD PTR _old$[ebp], eax
	cmp	DWORD PTR _old$[ebp], -1
	je	$LN30@MBCSAddToU
$LN29@MBCSAddToU:
; Line 460
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	jl	SHORT $LN28@MBCSAddToU
; Line 462
	mov	esi, esp
	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EF@PGJNLKIL@error?3?5duplicate?5codepage?5byte?5s@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 463
	xor	al, al
	jmp	$LN55@MBCSAddToU
	jmp	SHORT $LN30@MBCSAddToU
$LN28@MBCSAddToU:
; Line 464
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	SHORT $LN30@MBCSAddToU
; Line 466
	mov	esi, esp
	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DO@MKHAKDC@duplicate?5codepage?5byte?5sequence@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN30@MBCSAddToU:
; Line 469
	cmp	DWORD PTR _c$[ebp], 65536		; 00010000H
	jl	SHORT $LN25@MBCSAddToU
; Line 471
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_0EJ@MOMGMCDC@error?3?5code?5point?5does?5not?5fit?5i@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 472
	xor	al, al
	jmp	$LN55@MBCSAddToU
$LN25@MBCSAddToU:
; Line 474
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	jle	SHORT $LN24@MBCSAddToU
; Line 476
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	mov	edx, DWORD PTR _offset$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN23@MBCSAddToU
; Line 477
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	push	edx
	call	?setFallback@@YACPAUMBCSData@@IH@Z	; setFallback
	add	esp, 12					; 0000000cH
	jmp	$LN55@MBCSAddToU
$LN23@MBCSAddToU:
; Line 479
	jmp	SHORT $LN22@MBCSAddToU
$LN24@MBCSAddToU:
; Line 480
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+edx*2], ax
$LN22@MBCSAddToU:
; Line 482
	jmp	$LN45@MBCSAddToU
$LN21@MBCSAddToU:
; Line 486
	movzx	eax, WORD PTR _entry$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 488
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	mov	edx, DWORD PTR _offset$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _old$[ebp], eax
; Line 489
	cmp	DWORD PTR _old$[ebp], 65534		; 0000fffeH
	jge	$LN20@MBCSAddToU
; Line 491
	cmp	DWORD PTR _old$[ebp], 55296		; 0000d800H
	jge	SHORT $LN19@MBCSAddToU
; Line 492
	mov	eax, DWORD PTR _old$[ebp]
	mov	DWORD PTR _real$37756[ebp], eax
	jmp	SHORT $LN18@MBCSAddToU
$LN19@MBCSAddToU:
; Line 493
	cmp	DWORD PTR _old$[ebp], 57343		; 0000dfffH
	jg	SHORT $LN17@MBCSAddToU
; Line 494
	mov	eax, DWORD PTR _old$[ebp]
	and	eax, 1023				; 000003ffH
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+65560]
	mov	ecx, DWORD PTR _offset$[ebp]
	movzx	edx, WORD PTR [edx+ecx*2+2]
	and	edx, 1023				; 000003ffH
	lea	eax, DWORD PTR [eax+edx+65536]
	mov	DWORD PTR _real$37756[ebp], eax
; Line 495
	jmp	SHORT $LN18@MBCSAddToU
$LN17@MBCSAddToU:
; Line 496
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	mov	edx, DWORD PTR _offset$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2+2]
	mov	DWORD PTR _real$37756[ebp], eax
$LN18@MBCSAddToU:
; Line 498
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	jl	SHORT $LN15@MBCSAddToU
; Line 500
	mov	esi, esp
	mov	eax, DWORD PTR _real$37756[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EF@PGJNLKIL@error?3?5duplicate?5codepage?5byte?5s@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 501
	xor	al, al
	jmp	$LN55@MBCSAddToU
	jmp	SHORT $LN20@MBCSAddToU
$LN15@MBCSAddToU:
; Line 502
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	SHORT $LN20@MBCSAddToU
; Line 504
	mov	esi, esp
	mov	eax, DWORD PTR _real$37756[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DO@MKHAKDC@duplicate?5codepage?5byte?5sequence@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@MBCSAddToU:
; Line 507
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	jle	$LN12@MBCSAddToU
; Line 509
	cmp	DWORD PTR _old$[ebp], 56319		; 0000dbffH
	jle	SHORT $LN10@MBCSAddToU
	cmp	DWORD PTR _old$[ebp], 57344		; 0000e000H
	jne	SHORT $LN11@MBCSAddToU
$LN10@MBCSAddToU:
; Line 511
	jmp	SHORT $LN9@MBCSAddToU
$LN11@MBCSAddToU:
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN8@MBCSAddToU
; Line 513
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	mov	edx, 57345				; 0000e001H
	mov	eax, DWORD PTR _offset$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	ecx, DWORD PTR _offset$[ebp]
	add	ecx, 1
	mov	DWORD PTR _offset$[ebp], ecx
; Line 514
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+edx*2], ax
; Line 515
	jmp	SHORT $LN9@MBCSAddToU
$LN8@MBCSAddToU:
; Line 517
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 56256				; 0000dbc0H
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+65560]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, 1
	mov	DWORD PTR _offset$[ebp], edx
; Line 518
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1023				; 000003ffH
	add	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+65560]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN9@MBCSAddToU:
; Line 520
	jmp	$LN6@MBCSAddToU
$LN12@MBCSAddToU:
; Line 521
	cmp	DWORD PTR _c$[ebp], 55296		; 0000d800H
	jge	SHORT $LN5@MBCSAddToU
; Line 523
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+edx*2], ax
	jmp	SHORT $LN6@MBCSAddToU
$LN5@MBCSAddToU:
; Line 524
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN3@MBCSAddToU
; Line 526
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	mov	edx, 57344				; 0000e000H
	mov	eax, DWORD PTR _offset$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	ecx, DWORD PTR _offset$[ebp]
	add	ecx, 1
	mov	DWORD PTR _offset$[ebp], ecx
; Line 527
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+edx*2], ax
; Line 528
	jmp	SHORT $LN6@MBCSAddToU
$LN3@MBCSAddToU:
; Line 530
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+65560]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, 1
	mov	DWORD PTR _offset$[ebp], edx
; Line 531
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1023				; 000003ffH
	add	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+65560]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN6@MBCSAddToU:
; Line 534
	jmp	SHORT $LN45@MBCSAddToU
$LN1@MBCSAddToU:
; Line 538
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	push	OFFSET ??_C@_0FH@KDCIKFOB@internal?5error?3?5byte?5sequence?5re@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 539
	xor	al, al
	jmp	SHORT $LN55@MBCSAddToU
$LN45@MBCSAddToU:
; Line 542
	mov	al, 1
	jmp	SHORT $LN55@MBCSAddToU
$LN48@MBCSAddToU:
; Line 544
	jmp	$LN52@MBCSAddToU
$LN55@MBCSAddToU:
; Line 545
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN59@MBCSAddToU
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN59@MBCSAddToU:
	DD	1
	DD	$LN58@MBCSAddToU
$LN58@MBCSAddToU:
	DD	-20					; ffffffecH
	DD	10					; 0000000aH
	DD	$LN57@MBCSAddToU
$LN57@MBCSAddToU:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
	npad	1
$LN60@MBCSAddToU:
	DD	$LN41@MBCSAddToU
	DD	$LN41@MBCSAddToU
	DD	$LN41@MBCSAddToU
	DD	$LN41@MBCSAddToU
	DD	$LN31@MBCSAddToU
	DD	$LN21@MBCSAddToU
	DD	$LN42@MBCSAddToU
	DD	$LN44@MBCSAddToU
	DD	$LN43@MBCSAddToU
?MBCSAddToUnicode@@YACPAUMBCSData@@PBEHHC@Z ENDP	; MBCSAddToUnicode
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?printBytes@@YAPADPADPBEH@Z
_TEXT	SEGMENT
_s$ = -8						; size = 4
_buffer$ = 8						; size = 4
_bytes$ = 12						; size = 4
_length$ = 16						; size = 4
?printBytes@@YAPADPADPBEH@Z PROC			; printBytes, COMDAT
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 112
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _s$[ebp], eax
$LN2@printBytes:
; Line 113
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@printBytes
; Line 114
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sar	ecx, 4
	push	ecx
	call	?hexDigit@@YADE@Z			; hexDigit
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 115
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 15					; 0000000fH
	push	ecx
	call	?hexDigit@@YADE@Z			; hexDigit
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 116
	mov	eax, DWORD PTR _bytes$[ebp]
	add	eax, 1
	mov	DWORD PTR _bytes$[ebp], eax
; Line 117
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 118
	jmp	SHORT $LN2@printBytes
$LN1@printBytes:
; Line 120
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 0
; Line 121
	mov	eax, DWORD PTR _buffer$[ebp]
; Line 122
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?printBytes@@YAPADPADPBEH@Z ENDP			; printBytes
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?hexDigit@@YADE@Z
_TEXT	SEGMENT
tv72 = -193						; size = 1
_digit$ = 8						; size = 1
?hexDigit@@YADE@Z PROC					; hexDigit, COMDAT
; Line 106
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 107
	movzx	eax, BYTE PTR _digit$[ebp]
	cmp	eax, 9
	jg	SHORT $LN3@hexDigit
	movzx	ecx, BYTE PTR _digit$[ebp]
	add	ecx, 48					; 00000030H
	mov	BYTE PTR tv72[ebp], cl
	jmp	SHORT $LN4@hexDigit
$LN3@hexDigit:
	movzx	edx, BYTE PTR _digit$[ebp]
	add	edx, 87					; 00000057H
	mov	BYTE PTR tv72[ebp], dl
$LN4@hexDigit:
	mov	al, BYTE PTR tv72[ebp]
; Line 108
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?hexDigit@@YADE@Z ENDP					; hexDigit
_TEXT	ENDS
PUBLIC	??_C@_0DJ@MCOAJFMC@error?3?5too?5many?5toUnicode?5fallba@ ; `string'
EXTRN	_ucm_findFallback:PROC
;	COMDAT ??_C@_0DJ@MCOAJFMC@error?3?5too?5many?5toUnicode?5fallba@
CONST	SEGMENT
??_C@_0DJ@MCOAJFMC@error?3?5too?5many?5toUnicode?5fallba@ DB 'error: too '
	DB	'many toUnicode fallbacks, currently at: U+%x', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?setFallback@@YACPAUMBCSData@@IH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_mbcsData$ = 8						; size = 4
_offset$ = 12						; size = 4
_c$ = 16						; size = 4
?setFallback@@YACPAUMBCSData@@IH@Z PROC			; setFallback, COMDAT
; Line 316
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 317
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+65556]
	push	edx
	mov	eax, DWORD PTR _mbcsData$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	_ucm_findFallback
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _i$[ebp], eax
; Line 318
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN4@setFallbac
; Line 320
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+eax*8+24], edx
; Line 321
	mov	al, 1
	jmp	SHORT $LN5@setFallbac
; Line 322
	jmp	SHORT $LN5@setFallbac
$LN4@setFallbac:
; Line 324
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65556]
	mov	DWORD PTR _i$[ebp], ecx
; Line 325
	cmp	DWORD PTR _i$[ebp], 8192		; 00002000H
	jl	SHORT $LN2@setFallbac
; Line 326
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_0DJ@MCOAJFMC@error?3?5too?5many?5toUnicode?5fallba@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 327
	xor	al, al
	jmp	SHORT $LN5@setFallbac
; Line 328
	jmp	SHORT $LN5@setFallbac
$LN2@setFallbac:
; Line 329
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+eax*8+20], edx
; Line 330
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+eax*8+24], edx
; Line 331
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [ecx+65556], eax
; Line 332
	mov	al, 1
$LN5@setFallbac:
; Line 335
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setFallback@@YACPAUMBCSData@@IH@Z ENDP			; setFallback
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?removeFallback@@YAHPAUMBCSData@@I@Z
_TEXT	SEGMENT
_old$37661 = -44					; size = 4
_limit$37660 = -32					; size = 4
_toUFallbacks$37659 = -20				; size = 4
_i$ = -8						; size = 4
_mbcsData$ = 8						; size = 4
_offset$ = 12						; size = 4
?removeFallback@@YAHPAUMBCSData@@I@Z PROC		; removeFallback, COMDAT
; Line 339
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 340
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+65556]
	push	edx
	mov	eax, DWORD PTR _mbcsData$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	_ucm_findFallback
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _i$[ebp], eax
; Line 341
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@removeFall
; Line 345
	mov	eax, DWORD PTR _mbcsData$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _toUFallbacks$37659[ebp], eax
; Line 346
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65556]
	mov	DWORD PTR _limit$37660[ebp], ecx
; Line 347
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _toUFallbacks$37659[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _old$37661[ebp], edx
; Line 350
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _toUFallbacks$37659[ebp]
	mov	edx, DWORD PTR _limit$37660[ebp]
	mov	esi, DWORD PTR _toUFallbacks$37659[ebp]
	mov	edx, DWORD PTR [esi+edx*8-8]
	mov	DWORD PTR [ecx+eax*8], edx
; Line 351
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _toUFallbacks$37659[ebp]
	mov	edx, DWORD PTR _limit$37660[ebp]
	mov	esi, DWORD PTR _toUFallbacks$37659[ebp]
	mov	edx, DWORD PTR [esi+edx*8-4]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 352
	mov	eax, DWORD PTR _limit$37660[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [ecx+65556], eax
; Line 353
	mov	eax, DWORD PTR _old$37661[ebp]
	jmp	SHORT $LN3@removeFall
; Line 354
	jmp	SHORT $LN3@removeFall
$LN2@removeFall:
; Line 355
	or	eax, -1
$LN3@removeFall:
; Line 357
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?removeFallback@@YAHPAUMBCSData@@I@Z ENDP		; removeFallback
_TEXT	ENDS
PUBLIC	??_C@_0DM@NGGBIDF@duplicate?5Unicode?5code?5point?5at?5@ ; `string'
PUBLIC	??_C@_0ED@DFBEPMBN@error?3?5duplicate?5Unicode?5code?5po@ ; `string'
PUBLIC	??_C@_0DA@INMEGIJN@error?3?5too?5many?5code?5points?5at?5U@ ; `string'
PUBLIC	??_C@_0DE@MJJPHHL@error?3?5too?5many?5stage?52?5entries?5@ ; `string'
;	COMDAT ??_C@_0DM@NGGBIDF@duplicate?5Unicode?5code?5point?5at?5@
CONST	SEGMENT
??_C@_0DM@NGGBIDF@duplicate?5Unicode?5code?5point?5at?5@ DB 'duplicate Un'
	DB	'icode code point at U+%04x<->0x%02x see 0x%02x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@DFBEPMBN@error?3?5duplicate?5Unicode?5code?5po@
CONST	SEGMENT
??_C@_0ED@DFBEPMBN@error?3?5duplicate?5Unicode?5code?5po@ DB 'error: dupl'
	DB	'icate Unicode code point at U+%04x<->0x%02x see 0x%02x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@INMEGIJN@error?3?5too?5many?5code?5points?5at?5U@
CONST	SEGMENT
??_C@_0DA@INMEGIJN@error?3?5too?5many?5code?5points?5at?5U@ DB 'error: to'
	DB	'o many code points at U+%04x<->0x%02x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MJJPHHL@error?3?5too?5many?5stage?52?5entries?5@
CONST	SEGMENT
??_C@_0DE@MJJPHHL@error?3?5too?5many?5stage?52?5entries?5@ DB 'error: too'
	DB	' many stage 2 entries at U+%04x<->0x%02x', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?MBCSSingleAddFromUnicode@@YACPAUMBCSData@@PBEHHC@Z
_TEXT	SEGMENT
_min$ = -128						; size = 4
_newBlock$ = -116					; size = 4
_nextOffset$ = -104					; size = 4
_i$ = -92						; size = 4
_newTop$ = -80						; size = 4
_blockSize$ = -68					; size = 4
_b$ = -53						; size = 1
_old$ = -44						; size = 2
_idx$ = -32						; size = 4
_p$ = -20						; size = 4
_stage3$ = -8						; size = 4
_mbcsData$ = 8						; size = 4
_bytes$ = 12						; size = 4
___formal$ = 16						; size = 4
_c$ = 20						; size = 4
_flag$ = 24						; size = 1
?MBCSSingleAddFromUnicode@@YACPAUMBCSData@@PBEHHC@Z PROC ; MBCSSingleAddFromUnicode, COMDAT
; Line 560
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 569
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 2
	jne	SHORT $LN26@MBCSSingle
; Line 570
	mov	al, 1
	jmp	$LN27@MBCSSingle
$LN26@MBCSSingle:
; Line 579
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454428]
	mov	DWORD PTR _stage3$[ebp], ecx
; Line 580
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
; Line 583
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	mov	DWORD PTR _idx$[ebp], eax
; Line 584
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	SHORT $LN25@MBCSSingle
	cmp	DWORD PTR _c$[ebp], 8191		; 00001fffH
	jg	SHORT $LN25@MBCSSingle
; Line 585
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _nextOffset$[ebp], eax
; Line 586
	jmp	SHORT $LN24@MBCSSingle
$LN25@MBCSSingle:
; Line 587
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _nextOffset$[ebp], eax
$LN24@MBCSSingle:
; Line 589
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+65564]
	test	edx, edx
	jne	$LN23@MBCSSingle
; Line 591
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454432]
	mov	DWORD PTR _newBlock$[ebp], ecx
; Line 592
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	SHORT $LN22@MBCSSingle
; Line 593
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, DWORD PTR _nextOffset$[ebp]
	mov	DWORD PTR _min$[ebp], eax
$LN21@MBCSSingle:
; Line 594
	mov	eax, DWORD PTR _min$[ebp]
	cmp	eax, DWORD PTR _newBlock$[ebp]
	jae	SHORT $LN22@MBCSSingle
	mov	eax, DWORD PTR _newBlock$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+67738]
	test	edx, edx
	jne	SHORT $LN22@MBCSSingle
; Line 595
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, 1
	mov	DWORD PTR _newBlock$[ebp], eax
; Line 596
	jmp	SHORT $LN21@MBCSSingle
$LN22@MBCSSingle:
; Line 598
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _newTop$[ebp], eax
; Line 600
	cmp	DWORD PTR _newTop$[ebp], 64448		; 0000fbc0H
	jbe	SHORT $LN19@MBCSSingle
; Line 601
	movzx	eax, BYTE PTR _b$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DE@MJJPHHL@error?3?5too?5many?5stage?52?5entries?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 602
	xor	al, al
	jmp	$LN27@MBCSSingle
$LN19@MBCSSingle:
; Line 609
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	dx, WORD PTR _newBlock$[ebp]
	mov	WORD PTR [ecx+eax*2+65564], dx
; Line 610
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR _newTop$[ebp]
	mov	DWORD PTR [eax+454432], ecx
$LN23@MBCSSingle:
; Line 614
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+65564]
	add	edx, DWORD PTR _nextOffset$[ebp]
	mov	DWORD PTR _idx$[ebp], edx
; Line 615
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	SHORT $LN18@MBCSSingle
	cmp	DWORD PTR _c$[ebp], 8191		; 00001fffH
	jg	SHORT $LN18@MBCSSingle
; Line 617
	mov	DWORD PTR _blockSize$[ebp], 64		; 00000040H
; Line 618
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _nextOffset$[ebp], eax
; Line 619
	jmp	SHORT $LN17@MBCSSingle
$LN18@MBCSSingle:
; Line 620
	mov	DWORD PTR _blockSize$[ebp], 16		; 00000010H
; Line 621
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _nextOffset$[ebp], eax
$LN17@MBCSSingle:
; Line 623
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+67740]
	test	edx, edx
	jne	$LN16@MBCSSingle
; Line 625
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454436]
	mov	DWORD PTR _newBlock$[ebp], ecx
; Line 626
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	SHORT $LN15@MBCSSingle
; Line 627
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, DWORD PTR _nextOffset$[ebp]
	mov	DWORD PTR _min$[ebp], eax
$LN14@MBCSSingle:
; Line 628
	mov	eax, DWORD PTR _min$[ebp]
	cmp	eax, DWORD PTR _newBlock$[ebp]
	jae	SHORT $LN15@MBCSSingle
	mov	eax, DWORD PTR _newBlock$[ebp]
	mov	ecx, DWORD PTR _stage3$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	test	edx, edx
	jne	SHORT $LN15@MBCSSingle
; Line 629
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, 1
	mov	DWORD PTR _newBlock$[ebp], eax
; Line 630
	jmp	SHORT $LN14@MBCSSingle
$LN15@MBCSSingle:
; Line 632
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, DWORD PTR _blockSize$[ebp]
	mov	DWORD PTR _newTop$[ebp], eax
; Line 634
	cmp	DWORD PTR _newTop$[ebp], 65536		; 00010000H
	jbe	SHORT $LN12@MBCSSingle
; Line 635
	movzx	eax, BYTE PTR _b$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DA@INMEGIJN@error?3?5too?5many?5code?5points?5at?5U@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 636
	xor	al, al
	jmp	$LN27@MBCSSingle
$LN12@MBCSSingle:
; Line 639
	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN11@MBCSSingle:
; Line 640
	mov	eax, DWORD PTR _newBlock$[ebp]
	cmp	eax, DWORD PTR _newTop$[ebp]
	jae	SHORT $LN10@MBCSSingle
; Line 641
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	dx, WORD PTR _newBlock$[ebp]
	mov	WORD PTR [ecx+eax*2+67740], dx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 642
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _newBlock$[ebp], eax
; Line 643
	jmp	SHORT $LN11@MBCSSingle
$LN10@MBCSSingle:
; Line 644
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR _newTop$[ebp]
	mov	DWORD PTR [eax+454436], ecx
$LN16@MBCSSingle:
; Line 648
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+67740]
	mov	eax, DWORD PTR _stage3$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	edx, DWORD PTR _nextOffset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$[ebp], eax
; Line 649
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _old$[ebp], cx
; Line 650
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	jg	SHORT $LN9@MBCSSingle
; Line 651
	movzx	eax, BYTE PTR _b$[ebp]
	or	eax, 3840				; 00000f00H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx], ax
	jmp	SHORT $LN8@MBCSSingle
$LN9@MBCSSingle:
; Line 652
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 57344				; 0000e000H
	cmp	eax, 6400				; 00001900H
	jb	SHORT $LN6@MBCSSingle
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 983040				; 000f0000H
	cmp	eax, 131072				; 00020000H
	jae	SHORT $LN7@MBCSSingle
$LN6@MBCSSingle:
; Line 653
	movzx	eax, BYTE PTR _b$[ebp]
	or	eax, 3072				; 00000c00H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx], ax
; Line 654
	jmp	SHORT $LN8@MBCSSingle
$LN7@MBCSSingle:
; Line 655
	movzx	eax, BYTE PTR _b$[ebp]
	or	eax, 2048				; 00000800H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx], ax
$LN8@MBCSSingle:
; Line 659
	movzx	eax, WORD PTR _old$[ebp]
	cmp	eax, 256				; 00000100H
	jl	$LN4@MBCSSingle
; Line 660
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	jl	SHORT $LN3@MBCSSingle
; Line 662
	movzx	eax, WORD PTR _old$[ebp]
	and	eax, 255				; 000000ffH
	mov	esi, esp
	push	eax
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	push	OFFSET ??_C@_0ED@DFBEPMBN@error?3?5duplicate?5Unicode?5code?5po@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 663
	xor	al, al
	jmp	SHORT $LN27@MBCSSingle
	jmp	SHORT $LN4@MBCSSingle
$LN3@MBCSSingle:
; Line 664
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	SHORT $LN4@MBCSSingle
; Line 666
	movzx	eax, WORD PTR _old$[ebp]
	and	eax, 255				; 000000ffH
	mov	esi, esp
	push	eax
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	push	OFFSET ??_C@_0DM@NGGBIDF@duplicate?5Unicode?5code?5point?5at?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@MBCSSingle:
; Line 671
	mov	al, 1
$LN27@MBCSSingle:
; Line 672
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MBCSSingleAddFromUnicode@@YACPAUMBCSData@@PBEHHC@Z ENDP ; MBCSSingleAddFromUnicode
_TEXT	ENDS
PUBLIC	??_C@_0DK@OEANOAED@duplicate?5Unicode?5code?5point?5at?5@ ; `string'
PUBLIC	??_C@_0EB@MIKNBNCN@error?3?5duplicate?5Unicode?5code?5po@ ; `string'
PUBLIC	??_C@_0CO@FCICPMNC@error?3?5too?5many?5code?5points?5at?5U@ ; `string'
PUBLIC	??_C@_0DC@LIKCDKFK@error?3?5too?5many?5stage?52?5entries?5@ ; `string'
PUBLIC	??_C@_0DN@MPOALDBM@error?3?5unable?5to?5encode?5a?5?$HM1?5fal@ ; `string'
PUBLIC	??_C@_0EG@CCNIKDPG@error?3?5illegal?5mapping?5to?5SI?5or?5@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	_IGNORE_SISO_CHECK:BYTE
;	COMDAT ??_C@_0DK@OEANOAED@duplicate?5Unicode?5code?5point?5at?5@
CONST	SEGMENT
??_C@_0DK@OEANOAED@duplicate?5Unicode?5code?5point?5at?5@ DB 'duplicate U'
	DB	'nicode code point at U+%04x<->0x%s see 0x%02x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@MIKNBNCN@error?3?5duplicate?5Unicode?5code?5po@
CONST	SEGMENT
??_C@_0EB@MIKNBNCN@error?3?5duplicate?5Unicode?5code?5po@ DB 'error: dupl'
	DB	'icate Unicode code point at U+%04x<->0x%s see 0x%02x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FCICPMNC@error?3?5too?5many?5code?5points?5at?5U@
CONST	SEGMENT
??_C@_0CO@FCICPMNC@error?3?5too?5many?5code?5points?5at?5U@ DB 'error: to'
	DB	'o many code points at U+%04x<->0x%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LIKCDKFK@error?3?5too?5many?5stage?52?5entries?5@
CONST	SEGMENT
??_C@_0DC@LIKCDKFK@error?3?5too?5many?5stage?52?5entries?5@ DB 'error: to'
	DB	'o many stage 2 entries at U+%04x<->0x%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@MPOALDBM@error?3?5unable?5to?5encode?5a?5?$HM1?5fal@
CONST	SEGMENT
??_C@_0DN@MPOALDBM@error?3?5unable?5to?5encode?5a?5?$HM1?5fal@ DB 'error:'
	DB	' unable to encode a |1 fallback from U+%04x to 0x%02x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@CCNIKDPG@error?3?5illegal?5mapping?5to?5SI?5or?5@
CONST	SEGMENT
??_C@_0EG@CCNIKDPG@error?3?5illegal?5mapping?5to?5SI?5or?5@ DB 'error: il'
	DB	'legal mapping to SI or SO for SI/SO codepage: U+%04x<->0x%s', 0aH
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?MBCSAddFromUnicode@@YACPAUMBCSData@@PBEHHC@Z
_TEXT	SEGMENT
tv280 = -412						; size = 4
tv259 = -412						; size = 4
_maxOverlap$ = -212					; size = 4
_overlap$ = -200					; size = 4
_min$ = -188						; size = 4
_newBlock$ = -176					; size = 4
_nextOffset$ = -164					; size = 4
_i$ = -152						; size = 4
_newTop$ = -140						; size = 4
_blockSize$ = -128					; size = 4
_maxCharLength$ = -116					; size = 4
_stage3Index$ = -104					; size = 4
_old$ = -92						; size = 4
_b$ = -80						; size = 4
_idx$ = -68						; size = 4
_p$ = -56						; size = 4
_stage3$ = -44						; size = 4
_pb$ = -32						; size = 4
_buffer$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_mbcsData$ = 8						; size = 4
_bytes$ = 12						; size = 4
_length$ = 16						; size = 4
_c$ = 20						; size = 4
_flag$ = 24						; size = 1
?MBCSAddFromUnicode@@YACPAUMBCSData@@PBEHHC@Z PROC	; MBCSAddFromUnicode, COMDAT
; Line 678
	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-412]
	mov	ecx, 103				; 00000067H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 687
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+132112]
	mov	DWORD PTR _maxCharLength$[ebp], edx
; Line 691
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	movsx	edx, BYTE PTR [ecx+132121]
	cmp	edx, 12					; 0000000cH
	jne	SHORT $LN43@MBCSAddFro
	movsx	eax, BYTE PTR _IGNORE_SISO_CHECK
	test	eax, eax
	jne	SHORT $LN43@MBCSAddFro
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 14					; 0000000eH
	je	SHORT $LN42@MBCSAddFro
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 15					; 0000000fH
	jne	SHORT $LN43@MBCSAddFro
$LN42@MBCSAddFro:
; Line 693
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_0EG@CCNIKDPG@error?3?5illegal?5mapping?5to?5SI?5or?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 694
	xor	al, al
	jmp	$LN44@MBCSAddFro
$LN43@MBCSAddFro:
; Line 697
	movsx	eax, BYTE PTR _flag$[ebp]
	cmp	eax, 1
	jne	SHORT $LN41@MBCSAddFro
	cmp	DWORD PTR _length$[ebp], 1
	jne	SHORT $LN41@MBCSAddFro
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN41@MBCSAddFro
; Line 699
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	push	OFFSET ??_C@_0DN@MPOALDBM@error?3?5unable?5to?5encode?5a?5?$HM1?5fal@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 700
	xor	al, al
	jmp	$LN44@MBCSAddFro
$LN41@MBCSAddFro:
; Line 710
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454428]
	mov	DWORD PTR _stage3$[ebp], ecx
; Line 713
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	mov	DWORD PTR _idx$[ebp], eax
; Line 714
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	SHORT $LN40@MBCSAddFro
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [eax+456488]
	cmp	DWORD PTR _c$[ebp], ecx
	jg	SHORT $LN40@MBCSAddFro
; Line 715
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _nextOffset$[ebp], eax
; Line 716
	jmp	SHORT $LN39@MBCSAddFro
$LN40@MBCSAddFro:
; Line 717
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _nextOffset$[ebp], eax
$LN39@MBCSAddFro:
; Line 719
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+65564]
	test	edx, edx
	jne	$LN38@MBCSAddFro
; Line 721
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454432]
	mov	DWORD PTR _newBlock$[ebp], ecx
; Line 722
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	SHORT $LN37@MBCSAddFro
; Line 723
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, DWORD PTR _nextOffset$[ebp]
	mov	DWORD PTR _min$[ebp], eax
$LN36@MBCSAddFro:
; Line 724
	mov	eax, DWORD PTR _min$[ebp]
	cmp	eax, DWORD PTR _newBlock$[ebp]
	jae	SHORT $LN37@MBCSAddFro
	mov	eax, DWORD PTR _newBlock$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	cmp	DWORD PTR [ecx+eax*4+196632], 0
	jne	SHORT $LN37@MBCSAddFro
; Line 725
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, 1
	mov	DWORD PTR _newBlock$[ebp], eax
; Line 726
	jmp	SHORT $LN36@MBCSAddFro
$LN37@MBCSAddFro:
; Line 728
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _newTop$[ebp], eax
; Line 730
	cmp	DWORD PTR _newTop$[ebp], 64448		; 0000fbc0H
	jbe	SHORT $LN34@MBCSAddFro
; Line 732
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_0DC@LIKCDKFK@error?3?5too?5many?5stage?52?5entries?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 733
	xor	al, al
	jmp	$LN44@MBCSAddFro
$LN34@MBCSAddFro:
; Line 740
	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN33@MBCSAddFro:
; Line 741
	mov	eax, DWORD PTR _newBlock$[ebp]
	cmp	eax, DWORD PTR _newTop$[ebp]
	jae	SHORT $LN32@MBCSAddFro
; Line 742
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	dx, WORD PTR _newBlock$[ebp]
	mov	WORD PTR [ecx+eax*2+65564], dx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 743
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _newBlock$[ebp], eax
; Line 744
	jmp	SHORT $LN33@MBCSAddFro
$LN32@MBCSAddFro:
; Line 745
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR _newTop$[ebp]
	mov	DWORD PTR [eax+454432], ecx
$LN38@MBCSAddFro:
; Line 749
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+65564]
	add	edx, DWORD PTR _nextOffset$[ebp]
	mov	DWORD PTR _idx$[ebp], edx
; Line 750
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	SHORT $LN31@MBCSAddFro
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [eax+456488]
	cmp	DWORD PTR _c$[ebp], ecx
	jg	SHORT $LN31@MBCSAddFro
; Line 752
	mov	eax, DWORD PTR _maxCharLength$[ebp]
	shl	eax, 6
	mov	DWORD PTR _blockSize$[ebp], eax
; Line 753
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _nextOffset$[ebp], eax
; Line 754
	jmp	SHORT $LN30@MBCSAddFro
$LN31@MBCSAddFro:
; Line 755
	mov	eax, DWORD PTR _maxCharLength$[ebp]
	shl	eax, 4
	mov	DWORD PTR _blockSize$[ebp], eax
; Line 756
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _nextOffset$[ebp], eax
$LN30@MBCSAddFro:
; Line 758
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	cmp	DWORD PTR [ecx+eax*4+196636], 0
	jne	$LN29@MBCSAddFro
; Line 760
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454436]
	mov	DWORD PTR _newBlock$[ebp], ecx
; Line 761
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	$LN28@MBCSAddFro
	cmp	DWORD PTR _nextOffset$[ebp], 16		; 00000010H
	jb	$LN28@MBCSAddFro
; Line 766
	mov	eax, DWORD PTR _nextOffset$[ebp]
	and	eax, -16				; fffffff0H
	imul	eax, DWORD PTR _maxCharLength$[ebp]
	mov	DWORD PTR _maxOverlap$[ebp], eax
; Line 767
	mov	DWORD PTR _overlap$[ebp], 0
; Line 768
	jmp	SHORT $LN27@MBCSAddFro
$LN26@MBCSAddFro:
; Line 769
	mov	eax, DWORD PTR _overlap$[ebp]
	add	eax, 1
	mov	DWORD PTR _overlap$[ebp], eax
$LN27@MBCSAddFro:
	mov	eax, DWORD PTR _overlap$[ebp]
	cmp	eax, DWORD PTR _maxOverlap$[ebp]
	jae	SHORT $LN25@MBCSAddFro
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, DWORD PTR _overlap$[ebp]
	mov	ecx, DWORD PTR _stage3$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-1]
	test	edx, edx
	jne	SHORT $LN25@MBCSAddFro
	jmp	SHORT $LN26@MBCSAddFro
$LN25@MBCSAddFro:
; Line 771
	mov	eax, DWORD PTR _overlap$[ebp]
	shr	eax, 4
	xor	edx, edx
	div	DWORD PTR _maxCharLength$[ebp]
	mov	DWORD PTR _overlap$[ebp], eax
; Line 772
	mov	eax, DWORD PTR _overlap$[ebp]
	shl	eax, 4
	imul	eax, DWORD PTR _maxCharLength$[ebp]
	mov	DWORD PTR _overlap$[ebp], eax
; Line 774
	mov	eax, DWORD PTR _newBlock$[ebp]
	sub	eax, DWORD PTR _overlap$[ebp]
	mov	DWORD PTR _newBlock$[ebp], eax
$LN28@MBCSAddFro:
; Line 776
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, DWORD PTR _blockSize$[ebp]
	mov	DWORD PTR _newTop$[ebp], eax
; Line 778
	mov	eax, DWORD PTR _maxCharLength$[ebp]
	shl	eax, 20					; 00000014H
	cmp	DWORD PTR _newTop$[ebp], eax
	jbe	SHORT $LN24@MBCSAddFro
; Line 780
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_0CO@FCICPMNC@error?3?5too?5many?5code?5points?5at?5U@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 781
	xor	al, al
	jmp	$LN44@MBCSAddFro
$LN24@MBCSAddFro:
; Line 784
	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN23@MBCSAddFro:
; Line 785
	mov	eax, DWORD PTR _newBlock$[ebp]
	cmp	eax, DWORD PTR _newTop$[ebp]
	jae	SHORT $LN22@MBCSAddFro
; Line 786
	mov	eax, DWORD PTR _newBlock$[ebp]
	shr	eax, 4
	xor	edx, edx
	div	DWORD PTR _maxCharLength$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [edx+ecx*4+196636], eax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 787
	mov	eax, DWORD PTR _maxCharLength$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _newBlock$[ebp]
	mov	DWORD PTR _newBlock$[ebp], eax
; Line 788
	jmp	SHORT $LN23@MBCSAddFro
$LN22@MBCSAddFro:
; Line 789
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR _newTop$[ebp]
	mov	DWORD PTR [eax+454436], ecx
$LN29@MBCSAddFro:
; Line 792
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+196636]
	shl	edx, 4
	mov	DWORD PTR _stage3Index$[ebp], edx
; Line 795
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	SHORT $LN21@MBCSAddFro
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [eax+456488]
	cmp	DWORD PTR _c$[ebp], ecx
	jg	SHORT $LN21@MBCSAddFro
; Line 797
	cmp	DWORD PTR _stage3Index$[ebp], 65535	; 0000ffffH
	jbe	SHORT $LN20@MBCSAddFro
; Line 816
	mov	eax, 65279				; 0000feffH
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	WORD PTR [ecx+456488], ax
; Line 817
	jmp	SHORT $LN21@MBCSAddFro
$LN20@MBCSAddFro:
; Line 822
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 6
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	dx, WORD PTR _stage3Index$[ebp]
	mov	WORD PTR [ecx+eax*2+454440], dx
$LN21@MBCSAddFro:
; Line 829
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	DWORD PTR _pb$[ebp], eax
; Line 830
	mov	DWORD PTR _b$[ebp], 0
; Line 831
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv259[ebp], eax
	cmp	DWORD PTR tv259[ebp], 2
	je	SHORT $LN14@MBCSAddFro
	cmp	DWORD PTR tv259[ebp], 3
	je	SHORT $LN15@MBCSAddFro
	cmp	DWORD PTR tv259[ebp], 4
	je	SHORT $LN16@MBCSAddFro
	jmp	SHORT $LN13@MBCSAddFro
$LN16@MBCSAddFro:
; Line 833
	mov	eax, DWORD PTR _pb$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _pb$[ebp]
	add	edx, 1
	mov	DWORD PTR _pb$[ebp], edx
$LN15@MBCSAddFro:
; Line 835
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _pb$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _pb$[ebp]
	add	eax, 1
	mov	DWORD PTR _pb$[ebp], eax
$LN14@MBCSAddFro:
; Line 837
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _pb$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _pb$[ebp]
	add	eax, 1
	mov	DWORD PTR _pb$[ebp], eax
$LN13@MBCSAddFro:
; Line 840
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _pb$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _pb$[ebp]
	add	eax, 1
	mov	DWORD PTR _pb$[ebp], eax
; Line 844
	mov	DWORD PTR _old$[ebp], 0
; Line 845
	mov	eax, DWORD PTR _stage3Index$[ebp]
	add	eax, DWORD PTR _nextOffset$[ebp]
	imul	eax, DWORD PTR _maxCharLength$[ebp]
	add	eax, DWORD PTR _stage3$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 846
	mov	eax, DWORD PTR _maxCharLength$[ebp]
	mov	DWORD PTR tv280[ebp], eax
	cmp	DWORD PTR tv280[ebp], 2
	je	SHORT $LN10@MBCSAddFro
	cmp	DWORD PTR tv280[ebp], 3
	je	SHORT $LN9@MBCSAddFro
	cmp	DWORD PTR tv280[ebp], 4
	je	SHORT $LN8@MBCSAddFro
	jmp	SHORT $LN11@MBCSAddFro
$LN10@MBCSAddFro:
; Line 848
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _old$[ebp], ecx
; Line 849
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR _b$[ebp]
	mov	WORD PTR [eax], cx
; Line 850
	jmp	SHORT $LN11@MBCSAddFro
$LN9@MBCSAddFro:
; Line 852
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 16					; 00000010H
	mov	DWORD PTR _old$[ebp], ecx
; Line 853
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 854
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	or	ecx, DWORD PTR _old$[ebp]
	mov	DWORD PTR _old$[ebp], ecx
; Line 855
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 856
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	or	ecx, DWORD PTR _old$[ebp]
	mov	DWORD PTR _old$[ebp], ecx
; Line 857
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
; Line 858
	jmp	SHORT $LN11@MBCSAddFro
$LN8@MBCSAddFro:
; Line 860
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old$[ebp], ecx
; Line 861
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax], ecx
$LN11@MBCSAddFro:
; Line 869
	mov	eax, DWORD PTR _nextOffset$[ebp]
	shr	eax, 4
	add	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 15					; 0000000fH
	add	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, cl
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	and	edx, DWORD PTR [ecx+eax*4+196636]
	jne	SHORT $LN5@MBCSAddFro
	cmp	DWORD PTR _old$[ebp], 0
	je	$LN6@MBCSAddFro
$LN5@MBCSAddFro:
; Line 870
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	jl	SHORT $LN4@MBCSAddFro
; Line 872
	mov	esi, esp
	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EB@MIKNBNCN@error?3?5duplicate?5Unicode?5code?5po@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 873
	xor	al, al
	jmp	$LN44@MBCSAddFro
	jmp	SHORT $LN6@MBCSAddFro
$LN4@MBCSAddFro:
; Line 874
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	SHORT $LN6@MBCSAddFro
; Line 876
	mov	esi, esp
	mov	eax, DWORD PTR _old$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?printBytes@@YAPADPADPBEH@Z		; printBytes
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DK@OEANOAED@duplicate?5Unicode?5code?5point?5at?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@MBCSAddFro:
; Line 881
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	jg	SHORT $LN1@MBCSAddFro
; Line 883
	mov	eax, DWORD PTR _nextOffset$[ebp]
	shr	eax, 4
	add	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 15					; 0000000fH
	add	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, cl
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	or	edx, DWORD PTR [ecx+eax*4+196636]
	mov	eax, DWORD PTR _nextOffset$[ebp]
	shr	eax, 4
	add	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [ecx+eax*4+196636], edx
$LN1@MBCSAddFro:
; Line 886
	mov	al, 1
$LN44@MBCSAddFro:
; Line 887
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN48@MBCSAddFro
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 412				; 0000019cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN48@MBCSAddFro:
	DD	1
	DD	$LN47@MBCSAddFro
$LN47@MBCSAddFro:
	DD	-20					; ffffffecH
	DD	10					; 0000000aH
	DD	$LN46@MBCSAddFro
$LN46@MBCSAddFro:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?MBCSAddFromUnicode@@YACPAUMBCSData@@PBEHHC@Z ENDP	; MBCSAddFromUnicode
_TEXT	ENDS
PUBLIC	??_C@_0EC@FJCFIHFI@fromUnicode?5number?5of?5?$CFd?9byte?5st@ ; `string'
PUBLIC	??_C@_0DG@BECNOHKB@fromUnicode?5number?5of?5uint?$CFs_t?5i@ ; `string'
PUBLIC	??_C@_02MLODCJFF@32?$AA@			; `string'
PUBLIC	??_C@_02KMALDIDP@16?$AA@			; `string'
EXTRN	_ucm_optimizeStates:PROC
;	COMDAT ??_C@_0EC@FJCFIHFI@fromUnicode?5number?5of?5?$CFd?9byte?5st@
CONST	SEGMENT
??_C@_0EC@FJCFIHFI@fromUnicode?5number?5of?5?$CFd?9byte?5st@ DB 'fromUnic'
	DB	'ode number of %d-byte stage 3 mapping entries: 0x%lx=%lu', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@BECNOHKB@fromUnicode?5number?5of?5uint?$CFs_t?5i@
CONST	SEGMENT
??_C@_0DG@BECNOHKB@fromUnicode?5number?5of?5uint?$CFs_t?5i@ DB 'fromUnico'
	DB	'de number of uint%s_t in stage 2: 0x%lx=%lu', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02MLODCJFF@32?$AA@
CONST	SEGMENT
??_C@_02MLODCJFF@32?$AA@ DB '32', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMALDIDP@16?$AA@
CONST	SEGMENT
??_C@_02KMALDIDP@16?$AA@ DB '16', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?MBCSPostprocess@@YAXPAUMBCSData@@PBUUConverterStaticData@@@Z
_TEXT	SEGMENT
tv95 = -232						; size = 4
_stage3Width$ = -32					; size = 4
_maxCharLength$ = -20					; size = 4
_states$ = -8						; size = 4
_mbcsData$ = 8						; size = 4
___formal$ = 12						; size = 4
?MBCSPostprocess@@YAXPAUMBCSData@@PBUUConverterStaticData@@@Z PROC ; MBCSPostprocess, COMDAT
; Line 1330
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1334
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 8
	mov	DWORD PTR _states$[ebp], ecx
; Line 1335
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132104]
	mov	DWORD PTR _maxCharLength$[ebp], ecx
	mov	edx, DWORD PTR _maxCharLength$[ebp]
	mov	DWORD PTR _stage3Width$[ebp], edx
; Line 1340
	movzx	eax, BYTE PTR _VERBOSE
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+65556]
	push	edx
	mov	eax, DWORD PTR _mbcsData$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	add	ecx, 65560				; 00010018H
	push	ecx
	mov	edx, DWORD PTR _states$[ebp]
	push	edx
	call	_ucm_optimizeStates
	add	esp, 20					; 00000014H
; Line 1343
	mov	eax, DWORD PTR _mbcsData$[ebp]
	push	eax
	call	?transformEUC@@YACPAUMBCSData@@@Z	; transformEUC
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@MBCSPostpr
; Line 1344
	mov	eax, DWORD PTR _stage3Width$[ebp]
	sub	eax, 1
	mov	DWORD PTR _stage3Width$[ebp], eax
$LN5@MBCSPostpr:
; Line 1357
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	jne	SHORT $LN4@MBCSPostpr
; Line 1358
	cmp	DWORD PTR _maxCharLength$[ebp], 1
	jne	SHORT $LN3@MBCSPostpr
; Line 1359
	mov	eax, DWORD PTR _mbcsData$[ebp]
	push	eax
	call	?singleCompactStage3@@YAXPAUMBCSData@@@Z ; singleCompactStage3
	add	esp, 4
; Line 1360
	mov	eax, DWORD PTR _mbcsData$[ebp]
	push	eax
	call	?singleCompactStage2@@YAXPAUMBCSData@@@Z ; singleCompactStage2
	add	esp, 4
; Line 1361
	jmp	SHORT $LN4@MBCSPostpr
$LN3@MBCSPostpr:
; Line 1362
	mov	eax, DWORD PTR _mbcsData$[ebp]
	push	eax
	call	?compactStage2@@YAXPAUMBCSData@@@Z	; compactStage2
	add	esp, 4
$LN4@MBCSPostpr:
; Line 1366
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	$LN6@MBCSPostpr
; Line 1372
	cmp	DWORD PTR _maxCharLength$[ebp], 1
	jne	SHORT $LN8@MBCSPostpr
	mov	DWORD PTR tv95[ebp], OFFSET ??_C@_02KMALDIDP@16?$AA@
	jmp	SHORT $LN9@MBCSPostpr
$LN8@MBCSPostpr:
	mov	DWORD PTR tv95[ebp], OFFSET ??_C@_02MLODCJFF@32?$AA@
$LN9@MBCSPostpr:
	mov	esi, esp
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454432]
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	eax, DWORD PTR [edx+454432]
	push	eax
	mov	ecx, DWORD PTR tv95[ebp]
	push	ecx
	push	OFFSET ??_C@_0DG@BECNOHKB@fromUnicode?5number?5of?5uint?$CFs_t?5i@
	call	DWORD PTR __imp__printf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1376
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	eax, DWORD PTR [eax+454436]
	xor	edx, edx
	div	DWORD PTR _stage3Width$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	eax, DWORD PTR [ecx+454436]
	xor	edx, edx
	div	DWORD PTR _stage3Width$[ebp]
	push	eax
	mov	edx, DWORD PTR _stage3Width$[ebp]
	push	edx
	push	OFFSET ??_C@_0EC@FJCFIHFI@fromUnicode?5number?5of?5?$CFd?9byte?5st@
	call	DWORD PTR __imp__printf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@MBCSPostpr:
; Line 1405
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MBCSPostprocess@@YAXPAUMBCSData@@PBUUConverterStaticData@@@Z ENDP ; MBCSPostprocess
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?transformEUC@@YACPAUMBCSData@@@Z
_TEXT	SEGMENT
_p32$38056 = -104					; size = 4
_q$38055 = -92						; size = 4
_q$38042 = -80						; size = 4
_b$ = -65						; size = 1
_old3Top$ = -56						; size = 4
_oldLength$ = -44					; size = 4
_value$ = -32						; size = 4
_i$ = -20						; size = 4
_p8$ = -8						; size = 4
_mbcsData$ = 8						; size = 4
?transformEUC@@YACPAUMBCSData@@@Z PROC			; transformEUC, COMDAT
; Line 1070
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1075
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+132112]
	mov	DWORD PTR _oldLength$[ebp], edx
; Line 1076
	cmp	DWORD PTR _oldLength$[ebp], 3
	jae	SHORT $LN22@transformE
; Line 1077
	xor	al, al
	jmp	$LN23@transformE
$LN22@transformE:
; Line 1080
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454436]
	mov	DWORD PTR _old3Top$[ebp], ecx
; Line 1085
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454428]
	mov	DWORD PTR _p8$[ebp], ecx
; Line 1088
	cmp	DWORD PTR _oldLength$[ebp], 4
	jne	SHORT $LN21@transformE
; Line 1089
	mov	eax, DWORD PTR _p8$[ebp]
	add	eax, 3
	mov	DWORD PTR _p8$[ebp], eax
$LN21@transformE:
; Line 1093
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@transformE
$LN19@transformE:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _oldLength$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN20@transformE:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _old3Top$[ebp]
	jae	SHORT $LN18@transformE
; Line 1094
	mov	eax, DWORD PTR _p8$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
; Line 1095
	movzx	eax, BYTE PTR _b$[ebp]
	test	eax, eax
	je	SHORT $LN17@transformE
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 142				; 0000008eH
	je	SHORT $LN17@transformE
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 143				; 0000008fH
	je	SHORT $LN17@transformE
; Line 1097
	xor	al, al
	jmp	$LN23@transformE
$LN17@transformE:
; Line 1099
	jmp	SHORT $LN19@transformE
$LN18@transformE:
; Line 1101
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454428]
	mov	DWORD PTR _p8$[ebp], ecx
; Line 1104
	mov	eax, DWORD PTR _oldLength$[ebp]
	add	eax, 5
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	BYTE PTR [edx+132121], al
; Line 1105
	mov	eax, DWORD PTR _oldLength$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _old3Top$[ebp]
	xor	edx, edx
	div	DWORD PTR _oldLength$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [ecx+454436], eax
; Line 1114
	cmp	DWORD PTR _oldLength$[ebp], 3
	jne	$LN16@transformE
; Line 1115
	mov	eax, DWORD PTR _p8$[ebp]
	mov	DWORD PTR _q$38042[ebp], eax
; Line 1116
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@transformE
$LN14@transformE:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _oldLength$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN15@transformE:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _old3Top$[ebp]
	jae	$LN13@transformE
; Line 1117
	mov	eax, DWORD PTR _p8$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
; Line 1118
	movzx	eax, BYTE PTR _b$[ebp]
	test	eax, eax
	jne	SHORT $LN12@transformE
; Line 1121
	mov	eax, DWORD PTR _p8$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	mov	edx, DWORD PTR _p8$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	or	ecx, eax
	mov	edx, DWORD PTR _q$38042[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _q$38042[ebp]
	add	eax, 2
	mov	DWORD PTR _q$38042[ebp], eax
	jmp	SHORT $LN11@transformE
$LN12@transformE:
; Line 1122
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN10@transformE
; Line 1124
	mov	eax, DWORD PTR _p8$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	and	ecx, 127				; 0000007fH
	shl	ecx, 8
	mov	edx, DWORD PTR _p8$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	or	ecx, eax
	mov	edx, DWORD PTR _q$38042[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _q$38042[ebp]
	add	eax, 2
	mov	DWORD PTR _q$38042[ebp], eax
; Line 1125
	jmp	SHORT $LN11@transformE
$LN10@transformE:
; Line 1127
	mov	eax, DWORD PTR _p8$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	mov	edx, DWORD PTR _p8$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	and	eax, 127				; 0000007fH
	or	ecx, eax
	mov	edx, DWORD PTR _q$38042[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _q$38042[ebp]
	add	eax, 2
	mov	DWORD PTR _q$38042[ebp], eax
$LN11@transformE:
; Line 1129
	mov	eax, DWORD PTR _p8$[ebp]
	add	eax, 3
	mov	DWORD PTR _p8$[ebp], eax
; Line 1130
	jmp	$LN14@transformE
$LN13@transformE:
	jmp	$LN8@transformE
$LN16@transformE:
; Line 1132
	mov	eax, DWORD PTR _p8$[ebp]
	mov	DWORD PTR _q$38055[ebp], eax
; Line 1133
	mov	eax, DWORD PTR _p8$[ebp]
	mov	DWORD PTR _p32$38056[ebp], eax
; Line 1134
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@transformE
$LN6@transformE:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN7@transformE:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _old3Top$[ebp]
	jae	$LN8@transformE
; Line 1135
	mov	eax, DWORD PTR _p32$38056[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _value$[ebp], ecx
	mov	edx, DWORD PTR _p32$38056[ebp]
	add	edx, 4
	mov	DWORD PTR _p32$38056[ebp], edx
; Line 1136
	cmp	DWORD PTR _value$[ebp], 16777215	; 00ffffffH
	ja	SHORT $LN4@transformE
; Line 1139
	mov	eax, DWORD PTR _value$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _q$38055[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _q$38055[ebp]
	add	edx, 1
	mov	DWORD PTR _q$38055[ebp], edx
; Line 1140
	mov	eax, DWORD PTR _value$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _q$38055[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _q$38055[ebp]
	add	edx, 1
	mov	DWORD PTR _q$38055[ebp], edx
; Line 1141
	mov	eax, DWORD PTR _q$38055[ebp]
	mov	cl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _q$38055[ebp]
	add	edx, 1
	mov	DWORD PTR _q$38055[ebp], edx
	jmp	$LN3@transformE
$LN4@transformE:
; Line 1142
	cmp	DWORD PTR _value$[ebp], -1895825409	; 8effffffH
	ja	SHORT $LN2@transformE
; Line 1144
	mov	eax, DWORD PTR _value$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 127				; 0000007fH
	mov	ecx, DWORD PTR _q$38055[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _q$38055[ebp]
	add	edx, 1
	mov	DWORD PTR _q$38055[ebp], edx
; Line 1145
	mov	eax, DWORD PTR _value$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _q$38055[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _q$38055[ebp]
	add	edx, 1
	mov	DWORD PTR _q$38055[ebp], edx
; Line 1146
	mov	eax, DWORD PTR _q$38055[ebp]
	mov	cl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _q$38055[ebp]
	add	edx, 1
	mov	DWORD PTR _q$38055[ebp], edx
; Line 1147
	jmp	SHORT $LN3@transformE
$LN2@transformE:
; Line 1149
	mov	eax, DWORD PTR _value$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _q$38055[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _q$38055[ebp]
	add	edx, 1
	mov	DWORD PTR _q$38055[ebp], edx
; Line 1150
	mov	eax, DWORD PTR _value$[ebp]
	shr	eax, 8
	and	eax, 127				; 0000007fH
	mov	ecx, DWORD PTR _q$38055[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _q$38055[ebp]
	add	edx, 1
	mov	DWORD PTR _q$38055[ebp], edx
; Line 1151
	mov	eax, DWORD PTR _q$38055[ebp]
	mov	cl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _q$38055[ebp]
	add	edx, 1
	mov	DWORD PTR _q$38055[ebp], edx
$LN3@transformE:
; Line 1153
	jmp	$LN6@transformE
$LN8@transformE:
; Line 1156
	mov	al, 1
$LN23@transformE:
; Line 1157
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?transformEUC@@YACPAUMBCSData@@@Z ENDP			; transformEUC
_TEXT	ENDS
PUBLIC	??_C@_0EE@JKLNCONI@compacting?5stage?52?5from?5stage2To@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0EE@JKLNCONI@compacting?5stage?52?5from?5stage2To@
CONST	SEGMENT
??_C@_0EE@JKLNCONI@compacting?5stage?52?5from?5stage2To@ DB 'compacting s'
	DB	'tage 2 from stage2Top=0x%lx to 0x%lx, saving %ld bytes', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?singleCompactStage2@@YAXPAUMBCSData@@@Z
_TEXT	SEGMENT
_newStart$ = -2072					; size = 2
_prevEnd$ = -2060					; size = 2
_start$ = -2048						; size = 2
_i$ = -2036						; size = 2
_map$ = -2024						; size = 2014
__$ArrayPad$ = -4					; size = 4
_mbcsData$ = 8						; size = 4
?singleCompactStage2@@YAXPAUMBCSData@@@Z PROC		; singleCompactStage2, COMDAT
; Line 1167
	push	ebp
	mov	ebp, esp
	sub	esp, 2268				; 000008dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2268]
	mov	ecx, 567				; 00000237H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1173
	xor	eax, eax
	mov	WORD PTR _map$[ebp], ax
; Line 1176
	mov	eax, 64					; 00000040H
	mov	WORD PTR _newStart$[ebp], ax
	mov	cx, WORD PTR _newStart$[ebp]
	mov	WORD PTR _start$[ebp], cx
$LN19@singleComp:
; Line 1177
	movzx	eax, WORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	cmp	eax, DWORD PTR [ecx+454432]
	jae	$LN18@singleComp
; Line 1178
	movzx	eax, WORD PTR _newStart$[ebp]
	sub	eax, 1
	mov	WORD PTR _prevEnd$[ebp], ax
; Line 1181
	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN17@singleComp
$LN16@singleComp:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN17@singleComp:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN15@singleComp
	movzx	eax, WORD PTR _start$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	movzx	eax, WORD PTR [edx+eax*2+67740]
	test	eax, eax
	jne	SHORT $LN15@singleComp
	movzx	eax, WORD PTR _prevEnd$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	movzx	eax, WORD PTR [edx+eax*2+67740]
	test	eax, eax
	jne	SHORT $LN15@singleComp
	jmp	SHORT $LN16@singleComp
$LN15@singleComp:
; Line 1183
	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	jle	$LN14@singleComp
; Line 1184
	movzx	eax, WORD PTR _newStart$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	sub	eax, ecx
	movzx	edx, WORD PTR _start$[ebp]
	sar	edx, 6
	mov	WORD PTR _map$[ebp+edx*2], ax
; Line 1187
	movzx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _start$[ebp]
	add	ecx, eax
	mov	WORD PTR _start$[ebp], cx
; Line 1188
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	WORD PTR _i$[ebp], cx
	jmp	SHORT $LN13@singleComp
$LN12@singleComp:
	mov	ax, WORD PTR _i$[ebp]
	sub	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN13@singleComp:
	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	jle	SHORT $LN11@singleComp
; Line 1189
	movzx	eax, WORD PTR _start$[ebp]
	movzx	ecx, WORD PTR _newStart$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	esi, DWORD PTR _mbcsData$[ebp]
	mov	ax, WORD PTR [esi+eax*2+67740]
	mov	WORD PTR [edx+ecx*2+67740], ax
	mov	cx, WORD PTR _newStart$[ebp]
	add	cx, 1
	mov	WORD PTR _newStart$[ebp], cx
	mov	dx, WORD PTR _start$[ebp]
	add	dx, 1
	mov	WORD PTR _start$[ebp], dx
; Line 1190
	jmp	SHORT $LN12@singleComp
$LN11@singleComp:
	jmp	$LN10@singleComp
$LN14@singleComp:
; Line 1191
	movzx	eax, WORD PTR _newStart$[ebp]
	movzx	ecx, WORD PTR _start$[ebp]
	cmp	eax, ecx
	jge	$LN9@singleComp
; Line 1193
	movzx	eax, WORD PTR _start$[ebp]
	sar	eax, 6
	mov	cx, WORD PTR _newStart$[ebp]
	mov	WORD PTR _map$[ebp+eax*2], cx
; Line 1194
	mov	eax, 64					; 00000040H
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN8@singleComp
$LN7@singleComp:
	mov	ax, WORD PTR _i$[ebp]
	sub	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN8@singleComp:
	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	jle	SHORT $LN6@singleComp
; Line 1195
	movzx	eax, WORD PTR _start$[ebp]
	movzx	ecx, WORD PTR _newStart$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	esi, DWORD PTR _mbcsData$[ebp]
	mov	ax, WORD PTR [esi+eax*2+67740]
	mov	WORD PTR [edx+ecx*2+67740], ax
	mov	cx, WORD PTR _newStart$[ebp]
	add	cx, 1
	mov	WORD PTR _newStart$[ebp], cx
	mov	dx, WORD PTR _start$[ebp]
	add	dx, 1
	mov	WORD PTR _start$[ebp], dx
; Line 1196
	jmp	SHORT $LN7@singleComp
$LN6@singleComp:
	jmp	SHORT $LN10@singleComp
$LN9@singleComp:
; Line 1198
	movzx	eax, WORD PTR _start$[ebp]
	sar	eax, 6
	mov	cx, WORD PTR _start$[ebp]
	mov	WORD PTR _map$[ebp+eax*2], cx
; Line 1199
	movzx	eax, WORD PTR _newStart$[ebp]
	add	eax, 64					; 00000040H
	mov	WORD PTR _newStart$[ebp], ax
	mov	cx, WORD PTR _newStart$[ebp]
	mov	WORD PTR _start$[ebp], cx
$LN10@singleComp:
; Line 1201
	jmp	$LN19@singleComp
$LN18@singleComp:
; Line 1204
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	SHORT $LN4@singleComp
	movzx	eax, WORD PTR _newStart$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	cmp	eax, DWORD PTR [ecx+454432]
	jae	SHORT $LN4@singleComp
; Line 1207
	movzx	eax, WORD PTR _newStart$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+454432]
	sub	edx, eax
	shl	edx, 1
	mov	esi, esp
	push	edx
	movzx	eax, WORD PTR _newStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+454432]
	push	edx
	push	OFFSET ??_C@_0EE@JKLNCONI@compacting?5stage?52?5from?5stage2To@
	call	DWORD PTR __imp__printf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@singleComp:
; Line 1209
	movzx	eax, WORD PTR _newStart$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [ecx+454432], eax
; Line 1212
	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN3@singleComp
$LN2@singleComp:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN3@singleComp:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 1088				; 00000440H
	jge	SHORT $LN20@singleComp
; Line 1213
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+65564]
	sar	edx, 6
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	dx, WORD PTR _map$[ebp+edx*2]
	mov	WORD PTR [ecx+eax*2+65564], dx
; Line 1214
	jmp	SHORT $LN2@singleComp
$LN20@singleComp:
; Line 1215
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@singleComp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2268				; 000008dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN24@singleComp:
	DD	1
	DD	$LN23@singleComp
$LN23@singleComp:
	DD	-2024					; fffff818H
	DD	2014					; 000007deH
	DD	$LN22@singleComp
$LN22@singleComp:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
?singleCompactStage2@@YAXPAUMBCSData@@@Z ENDP		; singleCompactStage2
_TEXT	ENDS
PUBLIC	??_C@_0EE@BOAKNGOC@compacting?5stage?53?5from?5stage3To@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0EE@BOAKNGOC@compacting?5stage?53?5from?5stage3To@
CONST	SEGMENT
??_C@_0EE@BOAKNGOC@compacting?5stage?53?5from?5stage3To@ DB 'compacting s'
	DB	'tage 3 from stage3Top=0x%lx to 0x%lx, saving %ld bytes', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?singleCompactStage3@@YAXPAUMBCSData@@@Z
_TEXT	SEGMENT
_newStart$ = -8260					; size = 2
_prevEnd$ = -8248					; size = 2
_start$ = -8236						; size = 2
_i$ = -8224						; size = 2
_map$ = -8212						; size = 8192
_stage3$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_mbcsData$ = 8						; size = 4
?singleCompactStage3@@YAXPAUMBCSData@@@Z PROC		; singleCompactStage3, COMDAT
; Line 1219
	push	ebp
	mov	ebp, esp
	mov	eax, 8456				; 00002108H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-8456]
	mov	ecx, 2114				; 00000842H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1220
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454428]
	mov	DWORD PTR _stage3$[ebp], ecx
; Line 1227
	xor	eax, eax
	mov	WORD PTR _map$[ebp], ax
; Line 1230
	mov	eax, 16					; 00000010H
	mov	WORD PTR _newStart$[ebp], ax
	mov	cx, WORD PTR _newStart$[ebp]
	mov	WORD PTR _start$[ebp], cx
$LN19@singleComp@2:
; Line 1231
	movzx	eax, WORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	cmp	eax, DWORD PTR [ecx+454436]
	jae	$LN18@singleComp@2
; Line 1232
	movzx	eax, WORD PTR _newStart$[ebp]
	sub	eax, 1
	mov	WORD PTR _prevEnd$[ebp], ax
; Line 1235
	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN17@singleComp@2
$LN16@singleComp@2:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN17@singleComp@2:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 16					; 00000010H
	jge	SHORT $LN15@singleComp@2
	movzx	eax, WORD PTR _start$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _stage3$[ebp]
	movzx	eax, WORD PTR [edx+eax*2]
	test	eax, eax
	jne	SHORT $LN15@singleComp@2
	movzx	eax, WORD PTR _prevEnd$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR _stage3$[ebp]
	movzx	eax, WORD PTR [edx+eax*2]
	test	eax, eax
	jne	SHORT $LN15@singleComp@2
	jmp	SHORT $LN16@singleComp@2
$LN15@singleComp@2:
; Line 1237
	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	jle	$LN14@singleComp@2
; Line 1238
	movzx	eax, WORD PTR _newStart$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	sub	eax, ecx
	movzx	edx, WORD PTR _start$[ebp]
	sar	edx, 4
	mov	WORD PTR _map$[ebp+edx*2], ax
; Line 1241
	movzx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _start$[ebp]
	add	ecx, eax
	mov	WORD PTR _start$[ebp], cx
; Line 1242
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, 16					; 00000010H
	sub	ecx, eax
	mov	WORD PTR _i$[ebp], cx
	jmp	SHORT $LN13@singleComp@2
$LN12@singleComp@2:
	mov	ax, WORD PTR _i$[ebp]
	sub	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN13@singleComp@2:
	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	jle	SHORT $LN11@singleComp@2
; Line 1243
	movzx	eax, WORD PTR _start$[ebp]
	movzx	ecx, WORD PTR _newStart$[ebp]
	mov	edx, DWORD PTR _stage3$[ebp]
	mov	esi, DWORD PTR _stage3$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [edx+ecx*2], ax
	mov	cx, WORD PTR _newStart$[ebp]
	add	cx, 1
	mov	WORD PTR _newStart$[ebp], cx
	mov	dx, WORD PTR _start$[ebp]
	add	dx, 1
	mov	WORD PTR _start$[ebp], dx
; Line 1244
	jmp	SHORT $LN12@singleComp@2
$LN11@singleComp@2:
	jmp	$LN10@singleComp@2
$LN14@singleComp@2:
; Line 1245
	movzx	eax, WORD PTR _newStart$[ebp]
	movzx	ecx, WORD PTR _start$[ebp]
	cmp	eax, ecx
	jge	$LN9@singleComp@2
; Line 1247
	movzx	eax, WORD PTR _start$[ebp]
	sar	eax, 4
	mov	cx, WORD PTR _newStart$[ebp]
	mov	WORD PTR _map$[ebp+eax*2], cx
; Line 1248
	mov	eax, 16					; 00000010H
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN8@singleComp@2
$LN7@singleComp@2:
	mov	ax, WORD PTR _i$[ebp]
	sub	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN8@singleComp@2:
	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	jle	SHORT $LN6@singleComp@2
; Line 1249
	movzx	eax, WORD PTR _start$[ebp]
	movzx	ecx, WORD PTR _newStart$[ebp]
	mov	edx, DWORD PTR _stage3$[ebp]
	mov	esi, DWORD PTR _stage3$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [edx+ecx*2], ax
	mov	cx, WORD PTR _newStart$[ebp]
	add	cx, 1
	mov	WORD PTR _newStart$[ebp], cx
	mov	dx, WORD PTR _start$[ebp]
	add	dx, 1
	mov	WORD PTR _start$[ebp], dx
; Line 1250
	jmp	SHORT $LN7@singleComp@2
$LN6@singleComp@2:
	jmp	SHORT $LN10@singleComp@2
$LN9@singleComp@2:
; Line 1252
	movzx	eax, WORD PTR _start$[ebp]
	sar	eax, 4
	mov	cx, WORD PTR _start$[ebp]
	mov	WORD PTR _map$[ebp+eax*2], cx
; Line 1253
	movzx	eax, WORD PTR _newStart$[ebp]
	add	eax, 16					; 00000010H
	mov	WORD PTR _newStart$[ebp], ax
	mov	cx, WORD PTR _newStart$[ebp]
	mov	WORD PTR _start$[ebp], cx
$LN10@singleComp@2:
; Line 1255
	jmp	$LN19@singleComp@2
$LN18@singleComp@2:
; Line 1258
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	SHORT $LN4@singleComp@2
	movzx	eax, WORD PTR _newStart$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	cmp	eax, DWORD PTR [ecx+454436]
	jae	SHORT $LN4@singleComp@2
; Line 1261
	movzx	eax, WORD PTR _newStart$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+454436]
	sub	edx, eax
	shl	edx, 1
	mov	esi, esp
	push	edx
	movzx	eax, WORD PTR _newStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+454436]
	push	edx
	push	OFFSET ??_C@_0EE@BOAKNGOC@compacting?5stage?53?5from?5stage3To@
	call	DWORD PTR __imp__printf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@singleComp@2:
; Line 1263
	movzx	eax, WORD PTR _newStart$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [ecx+454436], eax
; Line 1266
	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN3@singleComp@2
$LN2@singleComp@2:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN3@singleComp@2:
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	cmp	eax, DWORD PTR [ecx+454432]
	jae	SHORT $LN20@singleComp@2
; Line 1267
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+67740]
	sar	edx, 4
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	dx, WORD PTR _map$[ebp+edx*2]
	mov	WORD PTR [ecx+eax*2+67740], dx
; Line 1268
	jmp	SHORT $LN2@singleComp@2
$LN20@singleComp@2:
; Line 1269
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@singleComp@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 8456				; 00002108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN24@singleComp@2:
	DD	1
	DD	$LN23@singleComp@2
$LN23@singleComp@2:
	DD	-8212					; ffffdfecH
	DD	8192					; 00002000H
	DD	$LN22@singleComp@2
$LN22@singleComp@2:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
?singleCompactStage3@@YAXPAUMBCSData@@@Z ENDP		; singleCompactStage3
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compactStage2@@YAXPAUMBCSData@@@Z
_TEXT	SEGMENT
_newStart$ = -2072					; size = 2
_prevEnd$ = -2060					; size = 2
_start$ = -2048						; size = 2
_i$ = -2036						; size = 2
_map$ = -2024						; size = 2014
__$ArrayPad$ = -4					; size = 4
_mbcsData$ = 8						; size = 4
?compactStage2@@YAXPAUMBCSData@@@Z PROC			; compactStage2, COMDAT
; Line 1279
	push	ebp
	mov	ebp, esp
	sub	esp, 2268				; 000008dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2268]
	mov	ecx, 567				; 00000237H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1285
	xor	eax, eax
	mov	WORD PTR _map$[ebp], ax
; Line 1288
	mov	eax, 64					; 00000040H
	mov	WORD PTR _newStart$[ebp], ax
	mov	cx, WORD PTR _newStart$[ebp]
	mov	WORD PTR _start$[ebp], cx
$LN19@compactSta:
; Line 1289
	movzx	eax, WORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	cmp	eax, DWORD PTR [ecx+454432]
	jae	$LN18@compactSta
; Line 1290
	movzx	eax, WORD PTR _newStart$[ebp]
	sub	eax, 1
	mov	WORD PTR _prevEnd$[ebp], ax
; Line 1293
	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN17@compactSta
$LN16@compactSta:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN17@compactSta:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN15@compactSta
	movzx	eax, WORD PTR _start$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	cmp	DWORD PTR [edx+eax*4+196636], 0
	jne	SHORT $LN15@compactSta
	movzx	eax, WORD PTR _prevEnd$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	cmp	DWORD PTR [edx+eax*4+196636], 0
	jne	SHORT $LN15@compactSta
	jmp	SHORT $LN16@compactSta
$LN15@compactSta:
; Line 1295
	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	jle	$LN14@compactSta
; Line 1296
	movzx	eax, WORD PTR _newStart$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	sub	eax, ecx
	movzx	edx, WORD PTR _start$[ebp]
	sar	edx, 6
	mov	WORD PTR _map$[ebp+edx*2], ax
; Line 1299
	movzx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _start$[ebp]
	add	ecx, eax
	mov	WORD PTR _start$[ebp], cx
; Line 1300
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	WORD PTR _i$[ebp], cx
	jmp	SHORT $LN13@compactSta
$LN12@compactSta:
	mov	ax, WORD PTR _i$[ebp]
	sub	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN13@compactSta:
	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	jle	SHORT $LN11@compactSta
; Line 1301
	movzx	eax, WORD PTR _start$[ebp]
	movzx	ecx, WORD PTR _newStart$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	esi, DWORD PTR _mbcsData$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+196636]
	mov	DWORD PTR [edx+ecx*4+196636], eax
	mov	cx, WORD PTR _newStart$[ebp]
	add	cx, 1
	mov	WORD PTR _newStart$[ebp], cx
	mov	dx, WORD PTR _start$[ebp]
	add	dx, 1
	mov	WORD PTR _start$[ebp], dx
; Line 1302
	jmp	SHORT $LN12@compactSta
$LN11@compactSta:
	jmp	$LN10@compactSta
$LN14@compactSta:
; Line 1303
	movzx	eax, WORD PTR _newStart$[ebp]
	movzx	ecx, WORD PTR _start$[ebp]
	cmp	eax, ecx
	jge	$LN9@compactSta
; Line 1305
	movzx	eax, WORD PTR _start$[ebp]
	sar	eax, 6
	mov	cx, WORD PTR _newStart$[ebp]
	mov	WORD PTR _map$[ebp+eax*2], cx
; Line 1306
	mov	eax, 64					; 00000040H
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN8@compactSta
$LN7@compactSta:
	mov	ax, WORD PTR _i$[ebp]
	sub	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN8@compactSta:
	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	jle	SHORT $LN6@compactSta
; Line 1307
	movzx	eax, WORD PTR _start$[ebp]
	movzx	ecx, WORD PTR _newStart$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	esi, DWORD PTR _mbcsData$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+196636]
	mov	DWORD PTR [edx+ecx*4+196636], eax
	mov	cx, WORD PTR _newStart$[ebp]
	add	cx, 1
	mov	WORD PTR _newStart$[ebp], cx
	mov	dx, WORD PTR _start$[ebp]
	add	dx, 1
	mov	WORD PTR _start$[ebp], dx
; Line 1308
	jmp	SHORT $LN7@compactSta
$LN6@compactSta:
	jmp	SHORT $LN10@compactSta
$LN9@compactSta:
; Line 1310
	movzx	eax, WORD PTR _start$[ebp]
	sar	eax, 6
	mov	cx, WORD PTR _start$[ebp]
	mov	WORD PTR _map$[ebp+eax*2], cx
; Line 1311
	movzx	eax, WORD PTR _newStart$[ebp]
	add	eax, 64					; 00000040H
	mov	WORD PTR _newStart$[ebp], ax
	mov	cx, WORD PTR _newStart$[ebp]
	mov	WORD PTR _start$[ebp], cx
$LN10@compactSta:
; Line 1313
	jmp	$LN19@compactSta
$LN18@compactSta:
; Line 1316
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	SHORT $LN4@compactSta
	movzx	eax, WORD PTR _newStart$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	cmp	eax, DWORD PTR [ecx+454432]
	jae	SHORT $LN4@compactSta
; Line 1319
	movzx	eax, WORD PTR _newStart$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+454432]
	sub	edx, eax
	shl	edx, 2
	mov	esi, esp
	push	edx
	movzx	eax, WORD PTR _newStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+454432]
	push	edx
	push	OFFSET ??_C@_0EE@JKLNCONI@compacting?5stage?52?5from?5stage2To@
	call	DWORD PTR __imp__printf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@compactSta:
; Line 1321
	movzx	eax, WORD PTR _newStart$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [ecx+454432], eax
; Line 1324
	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN3@compactSta
$LN2@compactSta:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN3@compactSta:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 1088				; 00000440H
	jge	SHORT $LN20@compactSta
; Line 1325
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+65564]
	sar	edx, 6
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	dx, WORD PTR _map$[ebp+edx*2]
	mov	WORD PTR [ecx+eax*2+65564], dx
; Line 1326
	jmp	SHORT $LN2@compactSta
$LN20@compactSta:
; Line 1327
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@compactSta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2268				; 000008dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@compactSta:
	DD	1
	DD	$LN23@compactSta
$LN23@compactSta:
	DD	-2024					; fffff818H
	DD	2014					; 000007deH
	DD	$LN22@compactSta
$LN22@compactSta:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
?compactStage2@@YAXPAUMBCSData@@@Z ENDP			; compactStage2
_TEXT	ENDS
PUBLIC	??_C@_0DJ@MAFGALNE@error?3?5offset?50x?$CFlx?5to?5extension@ ; `string'
PUBLIC	??_C@_0CB@FBPIBKCK@?$CL?5total?5size?5savings?3?5?$CFlu?5bytes?6@ ; `string'
PUBLIC	??_C@_0DN@KGEGBIPJ@?$CL?5omitting?5?$CFlu?5out?5of?5?$CFlu?5stage2@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	_udata_writeBlock:PROC
;	COMDAT ??_C@_0DJ@MAFGALNE@error?3?5offset?50x?$CFlx?5to?5extension@
CONST	SEGMENT
??_C@_0DJ@MAFGALNE@error?3?5offset?50x?$CFlx?5to?5extension@ DB 'error: o'
	DB	'ffset 0x%lx to extension table exceeds 0xffffff', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FBPIBKCK@?$CL?5total?5size?5savings?3?5?$CFlu?5bytes?6@
CONST	SEGMENT
??_C@_0CB@FBPIBKCK@?$CL?5total?5size?5savings?3?5?$CFlu?5bytes?6@ DB '+ t'
	DB	'otal size savings: %lu bytes', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@KGEGBIPJ@?$CL?5omitting?5?$CFlu?5out?5of?5?$CFlu?5stage2@
CONST	SEGMENT
??_C@_0DN@KGEGBIPJ@?$CL?5omitting?5?$CFlu?5out?5of?5?$CFlu?5stage2@ DB '+'
	DB	' omitting %lu out of %lu stage2 entries and %lu fromUBytes', 0aH
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?MBCSWrite@@YAIPAUNewConverter@@PBUUConverterStaticData@@PAUUNewDataMemory@@H@Z
_TEXT	SEGMENT
_st2$38220 = -168					; size = 4
_utf8Limit$38218 = -156					; size = 4
_header$ = -144						; size = 40
_headerLength$ = -96					; size = 4
_stage1Top$ = -84					; size = 4
_i$ = -72						; size = 4
_stageUTF8Length$ = -60					; size = 4
_top$ = -48						; size = 4
_stage2Length$ = -36					; size = 4
_stage2Start$ = -24					; size = 4
_mbcsData$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_cnvData$ = 8						; size = 4
_staticData$ = 12					; size = 4
_pData$ = 16						; size = 4
_tableType$ = 20					; size = 4
?MBCSWrite@@YAIPAUNewConverter@@PBUUConverterStaticData@@PAUUNewDataMemory@@H@Z PROC ; MBCSWrite, COMDAT
; Line 1409
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1410
	mov	eax, DWORD PTR _cnvData$[ebp]
	mov	DWORD PTR _mbcsData$[ebp], eax
; Line 1412
	mov	DWORD PTR _stageUTF8Length$[ebp], 0
; Line 1416
	mov	BYTE PTR _header$[ebp], 0
	xor	eax, eax
	mov	WORD PTR _header$[ebp+1], ax
	mov	BYTE PTR _header$[ebp+3], al
	mov	DWORD PTR _header$[ebp+4], 0
	mov	DWORD PTR _header$[ebp+8], 0
	mov	DWORD PTR _header$[ebp+12], 0
	mov	DWORD PTR _header$[ebp+16], 0
	mov	DWORD PTR _header$[ebp+20], 0
	mov	DWORD PTR _header$[ebp+24], 0
	mov	DWORD PTR _header$[ebp+28], 0
	mov	DWORD PTR _header$[ebp+32], 0
	mov	DWORD PTR _header$[ebp+36], 0
; Line 1418
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454432]
	mov	DWORD PTR _stage2Length$[ebp], ecx
; Line 1419
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456491]
	test	ecx, ecx
	je	$LN30@MBCSWrite
; Line 1421
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [eax+456488]
	add	ecx, 1
	mov	DWORD PTR _utf8Limit$38218[ebp], ecx
; Line 1422
	mov	DWORD PTR _st2$38220[ebp], 0
; Line 1424
	mov	eax, DWORD PTR _utf8Limit$38218[ebp]
	sar	eax, 10					; 0000000aH
	mov	DWORD PTR _i$[ebp], eax
; Line 1425
	mov	eax, DWORD PTR _utf8Limit$38218[ebp]
	and	eax, 1023				; 000003ffH
	je	SHORT $LN27@MBCSWrite
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+65564]
	mov	DWORD PTR _st2$38220[ebp], edx
	cmp	DWORD PTR _st2$38220[ebp], 0
	je	SHORT $LN27@MBCSWrite
; Line 1427
	mov	eax, DWORD PTR _utf8Limit$38218[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	add	eax, DWORD PTR _st2$38220[ebp]
	mov	DWORD PTR _stage2Start$[ebp], eax
; Line 1428
	jmp	SHORT $LN28@MBCSWrite
$LN27@MBCSWrite:
; Line 1430
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN26@MBCSWrite
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2+65564]
	mov	DWORD PTR _st2$38220[ebp], eax
	cmp	DWORD PTR _st2$38220[ebp], 0
	jne	SHORT $LN26@MBCSWrite
	jmp	SHORT $LN27@MBCSWrite
$LN26@MBCSWrite:
; Line 1432
	mov	eax, DWORD PTR _st2$38220[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _stage2Start$[ebp], eax
$LN28@MBCSWrite:
; Line 1434
	mov	eax, DWORD PTR _header$[ebp+32]
	or	eax, 64					; 00000040H
	mov	DWORD PTR _header$[ebp+32], eax
; Line 1435
	mov	eax, DWORD PTR _stage2Length$[ebp]
	mov	DWORD PTR _header$[ebp+36], eax
; Line 1436
	mov	eax, DWORD PTR _stage2Length$[ebp]
	sub	eax, DWORD PTR _stage2Start$[ebp]
	mov	DWORD PTR _stage2Length$[ebp], eax
; Line 1437
	movsx	eax, BYTE PTR _VERBOSE
	test	eax, eax
	je	SHORT $LN25@MBCSWrite
; Line 1441
	mov	esi, esp
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454436]
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	eax, DWORD PTR [edx+454432]
	push	eax
	mov	ecx, DWORD PTR _stage2Start$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DN@KGEGBIPJ@?$CL?5omitting?5?$CFlu?5out?5of?5?$CFlu?5stage2@
	call	DWORD PTR __imp__printf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1442
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454436]
	mov	edx, DWORD PTR _stage2Start$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0CB@FBPIBKCK@?$CL?5total?5size?5savings?3?5?$CFlu?5bytes?6@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@MBCSWrite:
; Line 1444
	jmp	SHORT $LN24@MBCSWrite
$LN30@MBCSWrite:
; Line 1445
	mov	DWORD PTR _stage2Start$[ebp], 0
$LN24@MBCSWrite:
; Line 1448
	mov	eax, DWORD PTR _staticData$[ebp]
	movzx	ecx, BYTE PTR [eax+79]
	and	ecx, 1
	je	SHORT $LN23@MBCSWrite
; Line 1449
	mov	DWORD PTR _stage1Top$[ebp], 1088	; 00000440H
; Line 1450
	jmp	SHORT $LN22@MBCSWrite
$LN23@MBCSWrite:
; Line 1451
	mov	DWORD PTR _stage1Top$[ebp], 64		; 00000040H
$LN22@MBCSWrite:
; Line 1455
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+132112], 1
	jne	SHORT $LN21@MBCSWrite
; Line 1456
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@MBCSWrite
$LN19@MBCSWrite:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@MBCSWrite:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _stage1Top$[ebp]
	jge	SHORT $LN18@MBCSWrite
; Line 1457
	movzx	eax, WORD PTR _stage1Top$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2+65564]
	add	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	WORD PTR [eax+edx*2+65564], cx
; Line 1458
	jmp	SHORT $LN19@MBCSWrite
$LN18@MBCSWrite:
; Line 1462
	mov	eax, DWORD PTR _stage2Length$[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	and	ecx, -2					; fffffffeH
	mov	DWORD PTR _stage2Length$[ebp], ecx
; Line 1465
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454436]
	shl	ecx, 1
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [edx+454436], ecx
; Line 1467
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	SHORT $LN17@MBCSWrite
; Line 1468
	mov	BYTE PTR _header$[ebp+2], 31		; 0000001fH
$LN17@MBCSWrite:
; Line 1470
	jmp	$LN16@MBCSWrite
$LN21@MBCSWrite:
; Line 1471
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@MBCSWrite
$LN14@MBCSWrite:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@MBCSWrite:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _stage1Top$[ebp]
	jge	SHORT $LN13@MBCSWrite
; Line 1472
	movzx	eax, WORD PTR _stage1Top$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2+65564]
	add	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	WORD PTR [eax+edx*2+65564], cx
; Line 1473
	jmp	SHORT $LN14@MBCSWrite
$LN13@MBCSWrite:
; Line 1476
	mov	eax, DWORD PTR _stage2Length$[ebp]
	shl	eax, 2
	mov	DWORD PTR _stage2Length$[ebp], eax
; Line 1479
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movsx	ecx, BYTE PTR [eax+456490]
	test	ecx, ecx
	je	SHORT $LN16@MBCSWrite
; Line 1480
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [eax+456488]
	add	ecx, 1
	sar	ecx, 6
	mov	DWORD PTR _stageUTF8Length$[ebp], ecx
; Line 1481
	mov	eax, DWORD PTR _mbcsData$[ebp]
	movzx	ecx, WORD PTR [eax+456488]
	sar	ecx, 8
	mov	BYTE PTR _header$[ebp+2], cl
$LN16@MBCSWrite:
; Line 1488
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454436]
	add	ecx, 3
	and	ecx, -4					; fffffffcH
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	DWORD PTR [edx+454436], ecx
; Line 1491
	mov	eax, DWORD PTR _header$[ebp+32]
	and	eax, 65472				; 0000ffc0H
	je	SHORT $LN11@MBCSWrite
; Line 1492
	mov	BYTE PTR _header$[ebp], 5
; Line 1493
	mov	eax, DWORD PTR _header$[ebp+32]
	and	eax, 64					; 00000040H
	je	SHORT $LN10@MBCSWrite
; Line 1494
	mov	DWORD PTR _headerLength$[ebp], 10	; 0000000aH
; Line 1495
	jmp	SHORT $LN9@MBCSWrite
$LN10@MBCSWrite:
; Line 1496
	mov	DWORD PTR _headerLength$[ebp], 9
$LN9@MBCSWrite:
; Line 1498
	jmp	SHORT $LN8@MBCSWrite
$LN11@MBCSWrite:
; Line 1499
	mov	BYTE PTR _header$[ebp], 4
; Line 1500
	mov	DWORD PTR _headerLength$[ebp], 8
$LN8@MBCSWrite:
; Line 1502
	mov	BYTE PTR _header$[ebp+1], 4
; Line 1505
	mov	eax, DWORD PTR _header$[ebp+32]
	or	eax, DWORD PTR _headerLength$[ebp]
	mov	DWORD PTR _header$[ebp+32], eax
; Line 1507
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+132104]
	mov	DWORD PTR _header$[ebp+4], edx
; Line 1508
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65556]
	mov	DWORD PTR _header$[ebp+8], ecx
; Line 1513
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+132104]
	shl	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _headerLength$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	eax, DWORD PTR [edx+65556]
	lea	ecx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _header$[ebp+12], ecx
; Line 1516
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+132116]
	mov	eax, DWORD PTR _header$[ebp+12]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _header$[ebp+16], ecx
; Line 1520
	mov	eax, DWORD PTR _stage1Top$[ebp]
	mov	ecx, DWORD PTR _header$[ebp+16]
	lea	edx, DWORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _stage2Length$[ebp]
	mov	DWORD PTR _header$[ebp+20], edx
; Line 1521
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454436]
	mov	DWORD PTR _header$[ebp+28], ecx
; Line 1523
	mov	eax, DWORD PTR _stageUTF8Length$[ebp]
	mov	ecx, DWORD PTR _header$[ebp+20]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _top$[ebp], edx
; Line 1524
	mov	eax, DWORD PTR _header$[ebp+32]
	and	eax, 64					; 00000040H
	jne	SHORT $LN7@MBCSWrite
; Line 1525
	mov	eax, DWORD PTR _top$[ebp]
	add	eax, DWORD PTR _header$[ebp+28]
	mov	DWORD PTR _top$[ebp], eax
$LN7@MBCSWrite:
; Line 1528
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	movzx	edx, BYTE PTR [ecx+132121]
	mov	DWORD PTR _header$[ebp+24], edx
; Line 1530
	mov	eax, DWORD PTR _tableType$[ebp]
	and	eax, 2
	je	SHORT $LN6@MBCSWrite
; Line 1531
	cmp	DWORD PTR _top$[ebp], 16777215		; 00ffffffH
	jbe	SHORT $LN5@MBCSWrite
; Line 1532
	mov	esi, esp
	mov	eax, DWORD PTR _top$[ebp]
	push	eax
	push	OFFSET ??_C@_0DJ@MAFGALNE@error?3?5offset?50x?$CFlx?5to?5extension@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1533
	xor	eax, eax
	jmp	$LN31@MBCSWrite
$LN5@MBCSWrite:
; Line 1536
	mov	eax, DWORD PTR _top$[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _header$[ebp+24]
	mov	DWORD PTR _header$[ebp+24], eax
$LN6@MBCSWrite:
; Line 1540
	mov	eax, DWORD PTR _headerLength$[ebp]
	shl	eax, 2
	push	eax
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 1541
	mov	eax, DWORD PTR _header$[ebp+4]
	shl	eax, 10					; 0000000aH
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 1542
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65556]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 1543
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+132116]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+65560]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 1544
	mov	eax, DWORD PTR _stage1Top$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	add	ecx, 65564				; 0001001cH
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 1545
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+132112], 1
	jne	SHORT $LN4@MBCSWrite
; Line 1546
	mov	eax, DWORD PTR _stage2Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stage2Start$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+67740]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
; Line 1547
	jmp	SHORT $LN3@MBCSWrite
$LN4@MBCSWrite:
; Line 1548
	mov	eax, DWORD PTR _stage2Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stage2Start$[ebp]
	mov	edx, DWORD PTR _mbcsData$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+196636]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
$LN3@MBCSWrite:
; Line 1550
	mov	eax, DWORD PTR _header$[ebp+32]
	and	eax, 64					; 00000040H
	jne	SHORT $LN2@MBCSWrite
; Line 1551
	mov	eax, DWORD PTR _mbcsData$[ebp]
	mov	ecx, DWORD PTR [eax+454436]
	push	ecx
	mov	edx, DWORD PTR _mbcsData$[ebp]
	mov	eax, DWORD PTR [edx+454428]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
$LN2@MBCSWrite:
; Line 1554
	cmp	DWORD PTR _stageUTF8Length$[ebp], 0
	jbe	SHORT $LN1@MBCSWrite
; Line 1555
	mov	eax, DWORD PTR _stageUTF8Length$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _mbcsData$[ebp]
	add	ecx, 454440				; 0006ef28H
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	call	_udata_writeBlock
	add	esp, 12					; 0000000cH
$LN1@MBCSWrite:
; Line 1559
	mov	eax, DWORD PTR _top$[ebp]
$LN31@MBCSWrite:
; Line 1560
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@MBCSWrite
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN35@MBCSWrite:
	DD	1
	DD	$LN34@MBCSWrite
$LN34@MBCSWrite:
	DD	-144					; ffffff70H
	DD	40					; 00000028H
	DD	$LN33@MBCSWrite
$LN33@MBCSWrite:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?MBCSWrite@@YAIPAUNewConverter@@PBUUConverterStaticData@@PAUUNewDataMemory@@H@Z ENDP ; MBCSWrite
_TEXT	ENDS
END
