; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\ctestfw\uperf.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06NDGIILMC@locale?$AA@			; `string'
PUBLIC	??_C@_09JDCHNGOK@bulk?9mode?$AA@		; `string'
PUBLIC	??_C@_09NFAACLBM@line?9mode?$AA@		; `string'
PUBLIC	??_C@_04CLCEDBPF@time?$AA@			; `string'
PUBLIC	??_C@_0L@LEIMKHLK@iterations?$AA@		; `string'
PUBLIC	??_C@_06MAKFJKMG@passes?$AA@			; `string'
PUBLIC	??_C@_09CIKJIKME@file?9name?$AA@		; `string'
PUBLIC	??_C@_06MEDFFPAG@uselen?$AA@			; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_09CMGPLHNH@sourcedir?$AA@			; `string'
PUBLIC	??_C@_07KBAMPNJK@verbose?$AA@			; `string'
PUBLIC	??_C@_04PCJFHION@help?$AA@			; `string'
PUBLIC	?gTest@UPerfTest@@2PAV1@A			; UPerfTest::gTest
PUBLIC	?gUsageString@UPerfTest@@2QBDB			; UPerfTest::gUsageString
_BSS	SEGMENT
_execCount DD	01H DUP (?)
?gTest@UPerfTest@@2PAV1@A DD 01H DUP (?)		; UPerfTest::gTest
_BSS	ENDS
_DATA	SEGMENT
_options DD	FLAT:??_C@_04PCJFHION@help?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	068H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_04PCJFHION@help?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	03fH
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_07KBAMPNJK@verbose?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	076H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_09CMGPLHNH@sourcedir?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	073H
	DB	01H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	065H
	DB	01H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_06MEDFFPAG@uselen?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	075H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_09CIKJIKME@file?9name?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	066H
	DB	01H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_06MAKFJKMG@passes?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	070H
	DB	01H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0L@LEIMKHLK@iterations?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	069H
	DB	01H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_04CLCEDBPF@time?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	074H
	DB	01H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_09NFAACLBM@line?9mode?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	06cH
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_09JDCHNGOK@bulk?9mode?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	062H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_06NDGIILMC@locale?$AA@
	DD	00H
	DD	00H
	DD	00H
	DB	04cH
	DB	01H
	DB	00H
	ORG $+1
	ORG $+400
_DATA	ENDS
;	COMDAT ??_C@_06NDGIILMC@locale?$AA@
CONST	SEGMENT
??_C@_06NDGIILMC@locale?$AA@ DB 'locale', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JDCHNGOK@bulk?9mode?$AA@
CONST	SEGMENT
??_C@_09JDCHNGOK@bulk?9mode?$AA@ DB 'bulk-mode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NFAACLBM@line?9mode?$AA@
CONST	SEGMENT
??_C@_09NFAACLBM@line?9mode?$AA@ DB 'line-mode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLCEDBPF@time?$AA@
CONST	SEGMENT
??_C@_04CLCEDBPF@time?$AA@ DB 'time', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LEIMKHLK@iterations?$AA@
CONST	SEGMENT
??_C@_0L@LEIMKHLK@iterations?$AA@ DB 'iterations', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MAKFJKMG@passes?$AA@
CONST	SEGMENT
??_C@_06MAKFJKMG@passes?$AA@ DB 'passes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIKJIKME@file?9name?$AA@
CONST	SEGMENT
??_C@_09CIKJIKME@file?9name?$AA@ DB 'file-name', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MEDFFPAG@uselen?$AA@
CONST	SEGMENT
??_C@_06MEDFFPAG@uselen?$AA@ DB 'uselen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CMGPLHNH@sourcedir?$AA@
CONST	SEGMENT
??_C@_09CMGPLHNH@sourcedir?$AA@ DB 'sourcedir', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBAMPNJK@verbose?$AA@
CONST	SEGMENT
??_C@_07KBAMPNJK@verbose?$AA@ DB 'verbose', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCJFHION@help?$AA@
CONST	SEGMENT
??_C@_04PCJFHION@help?$AA@ DB 'help', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
?gUsageString@UPerfTest@@2QBDB DB 'Usage: %s [OPTIONS] [FILES]', 0aH, 09H
	DB	'Reads the input file and prints out time taken in seconds', 0aH
	DB	'Options:', 0aH, 09H, '-h or -? or --help   this usage text', 0aH
	DB	09H, '-v or --verbose      print extra information when proces'
	DB	'sing files', 0aH, 09H, '-s or --sourcedir    source directory'
	DB	' for files followed by path', 0aH, 09H, '                    '
	DB	' followed by path', 0aH, 09H, '-e or --encoding     encoding '
	DB	'of source files', 0aH, 09H, '-u or --uselen       perform tim'
	DB	'ing analysis on non-null terminated buffer using length', 0aH
	DB	09H, '-f or --file-name    file to be used as input data', 0aH
	DB	09H, '-p or --passes       Number of passes to be performed. R'
	DB	'equires Numeric argument.', 0aH, 09H, '                     C'
	DB	'annot be used with --time', 0aH, 09H, '-i or --iterations   N'
	DB	'umber of iterations to be performed. Requires Numeric argumen'
	DB	't', 0aH, 09H, '-t or --time         Threshold time for loopin'
	DB	'g until in seconds. Requires Numeric argument.', 0aH, 09H, ' '
	DB	'                    Cannot be used with --iterations', 0aH, 09H
	DB	'-l or --line-mode    The data file should be processed in lin'
	DB	'e mode', 0aH, 09H, '-b or --bulk-mode    The data file should'
	DB	' be processed in file based.', 0aH, 09H, '                   '
	DB	'  Cannot be used with --line-mode', 0aH, 09H, '-L or --locale'
	DB	'       Locale for the test', 0aH, 00H	; UPerfTest::gUsageString
CONST	ENDS
PUBLIC	?getEventsPerIteration@UPerfFunction@@UAEJXZ	; UPerfFunction::getEventsPerIteration
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\tools\ctestfw\unicode\uperf.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?getEventsPerIteration@UPerfFunction@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getEventsPerIteration@UPerfFunction@@UAEJXZ PROC	; UPerfFunction::getEventsPerIteration, COMDAT
; _this$ = ecx
; Line 109
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 110
	or	eax, -1
; Line 111
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getEventsPerIteration@UPerfFunction@@UAEJXZ ENDP	; UPerfFunction::getEventsPerIteration
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?time@UPerfFunction@@UAENHPAW4UErrorCode@@@Z	; UPerfFunction::time
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?time@UPerfFunction@@UAENHPAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv67 = -260						; size = 4
_stop$ = -60						; size = 16
_start$ = -36						; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_n$ = 8							; size = 4
_status$ = 12						; size = 4
?time@UPerfFunction@@UAENHPAW4UErrorCode@@@Z PROC	; UPerfFunction::time, COMDAT
; _this$ = ecx
; Line 118
	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 120
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?utimer_getTime@@YAXPAUUTimer@@@Z	; utimer_getTime
	add	esp, 4
$LN2@time:
; Line 121
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	test	eax, eax
	jle	SHORT $LN5@time
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN6@time
$LN5@time:
	mov	DWORD PTR tv67[ebp], 0
$LN6@time:
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN1@time
; Line 122
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 123
	jmp	SHORT $LN2@time
$LN1@time:
; Line 124
	lea	eax, DWORD PTR _stop$[ebp]
	push	eax
	call	?utimer_getTime@@YAXPAUUTimer@@@Z	; utimer_getTime
	add	esp, 4
; Line 125
	lea	eax, DWORD PTR _stop$[ebp]
	push	eax
	lea	ecx, DWORD PTR _start$[ebp]
	push	ecx
	call	?utimer_getDeltaSeconds@@YANPAUUTimer@@0@Z ; utimer_getDeltaSeconds
	add	esp, 8
; Line 126
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@time
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN10@time:
	DD	2
	DD	$LN9@time
$LN9@time:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN7@time
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN8@time
$LN8@time:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN7@time:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
?time@UPerfFunction@@UAENHPAW4UErrorCode@@@Z ENDP	; UPerfFunction::time
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?utimer_getTime@@YAXPAUUTimer@@@Z
_TEXT	SEGMENT
_timer$ = 8						; size = 4
?utimer_getTime@@YAXPAUUTimer@@@Z PROC			; utimer_getTime, COMDAT
; File d:\mozilla\intl\icu\source\tools\ctestfw\unicode\utimer.h
; Line 218
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 219
	mov	eax, DWORD PTR _timer$[ebp]
	push	eax
	call	?uprv_initFrequency@@YAHPAUUTimer@@@Z	; uprv_initFrequency
	add	esp, 4
; Line 220
	mov	eax, DWORD PTR _timer$[ebp]
	push	eax
	call	?uprv_start@@YAXPAUUTimer@@@Z		; uprv_start
	add	esp, 4
; Line 221
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?utimer_getTime@@YAXPAUUTimer@@@Z ENDP			; utimer_getTime
_TEXT	ENDS
EXTRN	__imp__QueryPerformanceFrequency@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?uprv_initFrequency@@YAHPAUUTimer@@@Z
_TEXT	SEGMENT
_timer$ = 8						; size = 4
?uprv_initFrequency@@YAHPAUUTimer@@@Z PROC		; uprv_initFrequency, COMDAT
; Line 171
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 172
	mov	eax, DWORD PTR _timer$[ebp]
	add	eax, 8
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__QueryPerformanceFrequency@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 173
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?uprv_initFrequency@@YAHPAUUTimer@@@Z ENDP		; uprv_initFrequency
_TEXT	ENDS
EXTRN	__imp__QueryPerformanceCounter@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?uprv_start@@YAXPAUUTimer@@@Z
_TEXT	SEGMENT
_timer$ = 8						; size = 4
?uprv_start@@YAXPAUUTimer@@@Z PROC			; uprv_start, COMDAT
; Line 175
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 176
	mov	esi, esp
	mov	eax, DWORD PTR _timer$[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 177
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?uprv_start@@YAXPAUUTimer@@@Z ENDP			; uprv_start
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?utimer_getDeltaSeconds@@YANPAUUTimer@@0@Z
_TEXT	SEGMENT
_timer1$ = 8						; size = 4
_timer2$ = 12						; size = 4
?utimer_getDeltaSeconds@@YANPAUUTimer@@0@Z PROC		; utimer_getDeltaSeconds, COMDAT
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 233
	mov	eax, DWORD PTR _timer2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _timer1$[ebp]
	push	ecx
	call	?uprv_compareFrequency@@YACPAUUTimer@@0@Z ; uprv_compareFrequency
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@utimer_get
; Line 234
	mov	eax, DWORD PTR _timer2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _timer1$[ebp]
	push	ecx
	call	?uprv_delta@@YANPAUUTimer@@0@Z		; uprv_delta
	add	esp, 8
	jmp	SHORT $LN2@utimer_get
$LN1@utimer_get:
; Line 237
	fld	QWORD PTR __real@bff0000000000000
$LN2@utimer_get:
; Line 238
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?utimer_getDeltaSeconds@@YANPAUUTimer@@0@Z ENDP		; utimer_getDeltaSeconds
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?uprv_delta@@YANPAUUTimer@@0@Z
_TEXT	SEGMENT
tv81 = -200						; size = 8
_timer1$ = 8						; size = 4
_timer2$ = 12						; size = 4
?uprv_delta@@YANPAUUTimer@@0@Z PROC			; uprv_delta, COMDAT
; Line 178
	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 179
	mov	eax, DWORD PTR _timer2$[ebp]
	mov	ecx, DWORD PTR _timer1$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	sbb	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR tv81[ebp], edx
	mov	DWORD PTR tv81[ebp+4], eax
	fild	QWORD PTR tv81[ebp]
	mov	ecx, DWORD PTR _timer1$[ebp]
	fild	QWORD PTR [ecx+8]
	fdivp	ST(1), ST(0)
; Line 180
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?uprv_delta@@YANPAUUTimer@@0@Z ENDP			; uprv_delta
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?uprv_compareFrequency@@YACPAUUTimer@@0@Z
_TEXT	SEGMENT
tv69 = -201						; size = 1
tv73 = -200						; size = 4
tv72 = -196						; size = 4
_timer1$ = 8						; size = 4
_timer2$ = 12						; size = 4
?uprv_compareFrequency@@YACPAUUTimer@@0@Z PROC		; uprv_compareFrequency, COMDAT
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 182
	mov	eax, DWORD PTR _timer1$[ebp]
	mov	ecx, DWORD PTR _timer2$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR tv73[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@uprv_compa
	mov	edx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR tv73[ebp]
	mov	ecx, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN3@uprv_compa
	mov	BYTE PTR tv69[ebp], 1
	jmp	SHORT $LN4@uprv_compa
$LN3@uprv_compa:
	mov	BYTE PTR tv69[ebp], 0
$LN4@uprv_compa:
	mov	al, BYTE PTR tv69[ebp]
; Line 183
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?uprv_compareFrequency@@YACPAUUTimer@@0@Z ENDP		; uprv_compareFrequency
_TEXT	ENDS
PUBLIC	??_7UPerfFunction@@6B@				; UPerfFunction::`vftable'
PUBLIC	??0UPerfFunction@@QAE@XZ			; UPerfFunction::UPerfFunction
PUBLIC	??_R4UPerfFunction@@6B@				; UPerfFunction::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUPerfFunction@@@8			; UPerfFunction `RTTI Type Descriptor'
PUBLIC	??_R3UPerfFunction@@8				; UPerfFunction::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UPerfFunction@@8				; UPerfFunction::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UPerfFunction@@8			; UPerfFunction::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EUPerfFunction@@UAEPAXI@Z			; UPerfFunction::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@UPerfFunction@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UPerfFunction@@8 DD FLAT:??_R0?AVUPerfFunction@@@8 ; UPerfFunction::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UPerfFunction@@8
rdata$r	ENDS
;	COMDAT ??_R2UPerfFunction@@8
rdata$r	SEGMENT
??_R2UPerfFunction@@8 DD FLAT:??_R1A@?0A@EA@UPerfFunction@@8 ; UPerfFunction::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UPerfFunction@@8
rdata$r	SEGMENT
??_R3UPerfFunction@@8 DD 00H				; UPerfFunction::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UPerfFunction@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUPerfFunction@@@8
_DATA	SEGMENT
??_R0?AVUPerfFunction@@@8 DD FLAT:??_7type_info@@6B@	; UPerfFunction `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUPerfFunction@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UPerfFunction@@6B@
rdata$r	SEGMENT
??_R4UPerfFunction@@6B@ DD 00H				; UPerfFunction::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUPerfFunction@@@8
	DD	FLAT:??_R3UPerfFunction@@8
rdata$r	ENDS
;	COMDAT ??_7UPerfFunction@@6B@
CONST	SEGMENT
??_7UPerfFunction@@6B@ DD FLAT:??_R4UPerfFunction@@6B@	; UPerfFunction::`vftable'
	DD	FLAT:??_EUPerfFunction@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?getEventsPerIteration@UPerfFunction@@UAEJXZ
	DD	FLAT:?time@UPerfFunction@@UAENHPAW4UErrorCode@@@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UPerfFunction@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0UPerfFunction@@QAE@XZ PROC				; UPerfFunction::UPerfFunction, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UPerfFunction@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0UPerfFunction@@QAE@XZ ENDP				; UPerfFunction::UPerfFunction
_TEXT	ENDS
PUBLIC	??0UPerfFunction@@QAE@ABV0@@Z			; UPerfFunction::UPerfFunction
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0UPerfFunction@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0UPerfFunction@@QAE@ABV0@@Z PROC			; UPerfFunction::UPerfFunction, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UPerfFunction@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0UPerfFunction@@QAE@ABV0@@Z ENDP			; UPerfFunction::UPerfFunction
_TEXT	ENDS
PUBLIC	??4UPerfFunction@@QAEAAV0@ABV0@@Z		; UPerfFunction::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UPerfFunction@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UPerfFunction@@QAEAAV0@ABV0@@Z PROC			; UPerfFunction::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UPerfFunction@@QAEAAV0@ABV0@@Z ENDP			; UPerfFunction::operator=
_TEXT	ENDS
PUBLIC	??1UPerfFunction@@UAE@XZ			; UPerfFunction::~UPerfFunction
PUBLIC	??_GUPerfFunction@@UAEPAXI@Z			; UPerfFunction::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUPerfFunction@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUPerfFunction@@UAEPAXI@Z PROC			; UPerfFunction::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UPerfFunction@@UAE@XZ		; UPerfFunction::~UPerfFunction
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUPerfFunction@@UAEPAXI@Z ENDP			; UPerfFunction::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUPerfFunction@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUPerfFunction@@UAEPAXI@Z PROC			; UPerfFunction::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1UPerfFunction@@UAE@XZ		; UPerfFunction::~UPerfFunction
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UPerfFunction@@UAE@XZ		; UPerfFunction::~UPerfFunction
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUPerfFunction@@UAEPAXI@Z ENDP			; UPerfFunction::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7UPerfTest@@6B@				; UPerfTest::`vftable'
PUBLIC	??0UPerfTest@@QAE@ABV0@@Z			; UPerfTest::UPerfTest
PUBLIC	??_R4UPerfTest@@6B@				; UPerfTest::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUPerfTest@@@8				; UPerfTest `RTTI Type Descriptor'
PUBLIC	??_R3UPerfTest@@8				; UPerfTest::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UPerfTest@@8				; UPerfTest::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UPerfTest@@8			; UPerfTest::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?usage@UPerfTest@@UAEXXZ			; UPerfTest::usage
PUBLIC	??_EUPerfTest@@UAEPAXI@Z			; UPerfTest::`vector deleting destructor'
PUBLIC	?runIndexedTest@UPerfTest@@MAEPAVUPerfFunction@@HCAAPBDPAD@Z ; UPerfTest::runIndexedTest
PUBLIC	?runTestLoop@UPerfTest@@MAECPAD0@Z		; UPerfTest::runTestLoop
PUBLIC	?callTest@UPerfTest@@MAECAAV1@PAD@Z		; UPerfTest::callTest
;	COMDAT ??_R1A@?0A@EA@UPerfTest@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UPerfTest@@8 DD FLAT:??_R0?AVUPerfTest@@@8 ; UPerfTest::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UPerfTest@@8
rdata$r	ENDS
;	COMDAT ??_R2UPerfTest@@8
rdata$r	SEGMENT
??_R2UPerfTest@@8 DD FLAT:??_R1A@?0A@EA@UPerfTest@@8	; UPerfTest::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UPerfTest@@8
rdata$r	SEGMENT
??_R3UPerfTest@@8 DD 00H				; UPerfTest::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UPerfTest@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUPerfTest@@@8
_DATA	SEGMENT
??_R0?AVUPerfTest@@@8 DD FLAT:??_7type_info@@6B@	; UPerfTest `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUPerfTest@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UPerfTest@@6B@
rdata$r	SEGMENT
??_R4UPerfTest@@6B@ DD 00H				; UPerfTest::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUPerfTest@@@8
	DD	FLAT:??_R3UPerfTest@@8
rdata$r	ENDS
;	COMDAT ??_7UPerfTest@@6B@
CONST	SEGMENT
??_7UPerfTest@@6B@ DD FLAT:??_R4UPerfTest@@6B@		; UPerfTest::`vftable'
	DD	FLAT:?usage@UPerfTest@@UAEXXZ
	DD	FLAT:??_EUPerfTest@@UAEPAXI@Z
	DD	FLAT:?runIndexedTest@UPerfTest@@MAEPAVUPerfFunction@@HCAAPBDPAD@Z
	DD	FLAT:?runTestLoop@UPerfTest@@MAECPAD0@Z
	DD	FLAT:?callTest@UPerfTest@@MAECAAV1@PAD@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UPerfTest@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0UPerfTest@@QAE@ABV0@@Z PROC				; UPerfTest::UPerfTest, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UPerfTest@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+28]
	mov	BYTE PTR [eax+28], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+52]
	mov	BYTE PTR [eax+52], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+64]
	mov	BYTE PTR [eax+64], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+65]
	mov	BYTE PTR [eax+65], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+68], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+88], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0UPerfTest@@QAE@ABV0@@Z ENDP				; UPerfTest::UPerfTest
_TEXT	ENDS
PUBLIC	??4UPerfTest@@QAEAAV0@ABV0@@Z			; UPerfTest::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UPerfTest@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UPerfTest@@QAEAAV0@ABV0@@Z PROC			; UPerfTest::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+28]
	mov	BYTE PTR [eax+28], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+52]
	mov	BYTE PTR [eax+52], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+64]
	mov	BYTE PTR [eax+64], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+65]
	mov	BYTE PTR [eax+65], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+68], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+88], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UPerfTest@@QAEAAV0@ABV0@@Z ENDP			; UPerfTest::operator=
_TEXT	ENDS
PUBLIC	??1UPerfTest@@UAE@XZ				; UPerfTest::~UPerfTest
PUBLIC	??_GUPerfTest@@UAEPAXI@Z			; UPerfTest::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUPerfTest@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUPerfTest@@UAEPAXI@Z PROC				; UPerfTest::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UPerfTest@@UAE@XZ			; UPerfTest::~UPerfTest
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUPerfTest@@UAEPAXI@Z ENDP				; UPerfTest::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_EUPerfTest@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUPerfTest@@UAEPAXI@Z PROC				; UPerfTest::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1UPerfTest@@UAE@XZ		; UPerfTest::~UPerfTest
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UPerfTest@@UAE@XZ			; UPerfTest::~UPerfTest
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUPerfTest@@UAEPAXI@Z ENDP				; UPerfTest::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1UPerfFunction@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1UPerfFunction@@UAE@XZ PROC				; UPerfFunction::~UPerfFunction, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\tools\ctestfw\uperf.cpp
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UPerfFunction@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1UPerfFunction@@UAE@XZ ENDP				; UPerfFunction::~UPerfFunction
_TEXT	ENDS
PUBLIC	?init@UPerfTest@@IAEXQAUUOption@@HAAW4UErrorCode@@@Z ; UPerfTest::init
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??0UPerfTest@@IAE@HQAPBDAAW4UErrorCode@@@Z	; UPerfTest::UPerfTest
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UPerfTest@@IAE@HQAPBDAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_status$ = 16						; size = 4
??0UPerfTest@@IAE@HQAPBDAAW4UErrorCode@@@Z PROC		; UPerfTest::UPerfTest, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UPerfTest@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _argc$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], OFFSET ??_C@_01LFCBOECM@?4?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+52], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+65], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 91
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@UPerfTest@@IAEXQAUUOption@@HAAW4UErrorCode@@@Z ; UPerfTest::init
; Line 92
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0UPerfTest@@IAE@HQAPBDAAW4UErrorCode@@@Z ENDP		; UPerfTest::UPerfTest
_TEXT	ENDS
PUBLIC	??0UPerfTest@@IAE@HQAPBDQAUUOption@@HPBDAAW4UErrorCode@@@Z ; UPerfTest::UPerfTest
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0UPerfTest@@IAE@HQAPBDQAUUOption@@HPBDAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_addOptions$ = 16					; size = 4
_addOptionsCount$ = 20					; size = 4
_addUsage$ = 24						; size = 4
_status$ = 28						; size = 4
??0UPerfTest@@IAE@HQAPBDQAUUOption@@HPBDAAW4UErrorCode@@@Z PROC ; UPerfTest::UPerfTest, COMDAT
; _this$ = ecx
; Line 106
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UPerfTest@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _argc$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _addUsage$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], OFFSET ??_C@_01LFCBOECM@?4?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+52], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+65], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 107
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _addOptionsCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _addOptions$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@UPerfTest@@IAEXQAUUOption@@HAAW4UErrorCode@@@Z ; UPerfTest::init
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0UPerfTest@@IAE@HQAPBDQAUUOption@@HPBDAAW4UErrorCode@@@Z ENDP ; UPerfTest::UPerfTest
_TEXT	ENDS
PUBLIC	??_C@_0CN@DHEIFFPJ@Could?5not?5open?5the?5input?5file?5?$CFs@ ; `string'
EXTRN	__imp__printf:PROC
EXTRN	_u_errorName_56:PROC
EXTRN	_ucbuf_open:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	_ucbuf_resolveFileName:PROC
EXTRN	__imp__atoi:PROC
EXTRN	_u_parseArgs:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0CN@DHEIFFPJ@Could?5not?5open?5the?5input?5file?5?$CFs@
CONST	SEGMENT
??_C@_0CN@DHEIFFPJ@Could?5not?5open?5the?5input?5file?5?$CFs@ DB 'Could n'
	DB	'ot open the input file %s. Error: %s', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?init@UPerfTest@@IAEXQAUUOption@@HAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_len$ = -32						; size = 4
_optionsCount$ = -20					; size = 4
_this$ = -8						; size = 4
_addOptions$ = 8					; size = 4
_addOptionsCount$ = 12					; size = 4
_status$ = 16						; size = 4
?init@UPerfTest@@IAEXQAUUOption@@HAAW4UErrorCode@@@Z PROC ; UPerfTest::init, COMDAT
; _this$ = ecx
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 118
	mov	DWORD PTR _optionsCount$[ebp], 13	; 0000000dH
; Line 119
	cmp	DWORD PTR _addOptionsCount$[ebp], 0
	jle	SHORT $LN22@init
; Line 120
	mov	eax, DWORD PTR _addOptionsCount$[ebp]
	imul	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _addOptions$[ebp]
	push	ecx
	mov	edx, DWORD PTR _optionsCount$[ebp]
	imul	edx, 20					; 00000014H
	add	edx, OFFSET _options
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 121
	mov	eax, DWORD PTR _optionsCount$[ebp]
	add	eax, DWORD PTR _addOptionsCount$[ebp]
	mov	DWORD PTR _optionsCount$[ebp], eax
$LN22@init:
; Line 125
	push	OFFSET _options
	mov	eax, DWORD PTR _optionsCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_u_parseArgs
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 128
	cmp	DWORD PTR _addOptionsCount$[ebp], 0
	jle	SHORT $LN21@init
; Line 129
	mov	eax, DWORD PTR _addOptionsCount$[ebp]
	imul	eax, 20					; 00000014H
	push	eax
	push	OFFSET _options+260
	mov	ecx, DWORD PTR _addOptions$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN21@init:
; Line 133
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN19@init
	movsx	eax, BYTE PTR _options+18
	test	eax, eax
	jne	SHORT $LN19@init
	movsx	eax, BYTE PTR _options+38
	test	eax, eax
	je	SHORT $LN20@init
$LN19@init:
; Line 134
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 135
	jmp	$LN23@init
$LN20@init:
; Line 138
	movsx	eax, BYTE PTR _options+58
	test	eax, eax
	je	SHORT $LN18@init
; Line 139
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+64], 1
$LN18@init:
; Line 142
	movsx	eax, BYTE PTR _options+78
	test	eax, eax
	je	SHORT $LN17@init
; Line 143
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _options+64
	mov	DWORD PTR [eax+36], ecx
$LN17@init:
; Line 146
	movsx	eax, BYTE PTR _options+98
	test	eax, eax
	je	SHORT $LN16@init
; Line 147
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _options+84
	mov	DWORD PTR [eax+24], ecx
$LN16@init:
; Line 150
	movsx	eax, BYTE PTR _options+118
	test	eax, eax
	je	SHORT $LN15@init
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 1
$LN15@init:
; Line 154
	movsx	eax, BYTE PTR _options+138
	test	eax, eax
	je	SHORT $LN14@init
; Line 155
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _options+124
	mov	DWORD PTR [eax+32], ecx
$LN14@init:
; Line 158
	movsx	eax, BYTE PTR _options+158
	test	eax, eax
	je	SHORT $LN13@init
; Line 159
	mov	esi, esp
	mov	eax, DWORD PTR _options+144
	push	eax
	call	DWORD PTR __imp__atoi
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], eax
$LN13@init:
; Line 161
	movsx	eax, BYTE PTR _options+178
	test	eax, eax
	je	SHORT $LN12@init
; Line 162
	mov	esi, esp
	mov	eax, DWORD PTR _options+164
	push	eax
	call	DWORD PTR __imp__atoi
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax
; Line 163
	movsx	eax, BYTE PTR _options+198
	test	eax, eax
	je	SHORT $LN11@init
; Line 164
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 165
	jmp	$LN23@init
$LN11@init:
; Line 166
	jmp	SHORT $LN10@init
$LN12@init:
; Line 167
	movsx	eax, BYTE PTR _options+198
	test	eax, eax
	je	SHORT $LN9@init
; Line 168
	mov	esi, esp
	mov	eax, DWORD PTR _options+184
	push	eax
	call	DWORD PTR __imp__atoi
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], eax
; Line 169
	jmp	SHORT $LN10@init
$LN9@init:
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 1000		; 000003e8H
$LN10@init:
; Line 173
	movsx	eax, BYTE PTR _options+218
	test	eax, eax
	je	SHORT $LN7@init
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+52], 1
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+65], 0
$LN7@init:
; Line 178
	movsx	eax, BYTE PTR _options+238
	test	eax, eax
	je	SHORT $LN6@init
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+65], 1
; Line 180
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+52], 0
$LN6@init:
; Line 183
	movsx	eax, BYTE PTR _options+258
	test	eax, eax
	je	SHORT $LN5@init
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _options+244
	mov	DWORD PTR [eax+80], ecx
$LN5@init:
; Line 187
	mov	DWORD PTR _len$[ebp], 0
; Line 188
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	$LN23@init
; Line 190
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_ucbuf_resolveFileName
	add	esp, 20					; 00000014H
; Line 191
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 192
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN3@init
; Line 193
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 194
	jmp	$LN23@init
$LN3@init:
; Line 196
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN2@init
; Line 197
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@init:
; Line 199
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_ucbuf_resolveFileName
	add	esp, 20					; 00000014H
; Line 200
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_ucbuf_open
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 202
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN23@init
; Line 203
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_u_errorName_56
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	push	OFFSET ??_C@_0CN@DHEIFFPJ@Could?5not?5open?5the?5input?5file?5?$CFs@
	call	DWORD PTR __imp__printf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@init:
; Line 207
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@init
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN27@init:
	DD	1
	DD	$LN26@init
$LN26@init:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN25@init
$LN25@init:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
?init@UPerfTest@@IAEXQAUUOption@@HAAW4UErrorCode@@@Z ENDP ; UPerfTest::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\include\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	??_C@_0CA@BBPGOECO@Out?5of?5memory?5reading?5line?5?$CFd?4?6?$AA@ ; `string'
PUBLIC	?getLines@UPerfTest@@QAEPAUULine@@AAW4UErrorCode@@@Z ; UPerfTest::getLines
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	_ucbuf_readline:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_C@_0CA@BBPGOECO@Out?5of?5memory?5reading?5line?5?$CFd?4?6?$AA@
; File d:\mozilla\intl\icu\source\tools\ctestfw\uperf.cpp
CONST	SEGMENT
??_C@_0CA@BBPGOECO@Out?5of?5memory?5reading?5line?5?$CFd?4?6?$AA@ DB 'Out'
	DB	' of memory reading line %d.', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?getLines@UPerfTest@@QAEPAUULine@@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
$T54514 = -308						; size = 4
$T54515 = -296						; size = 4
$T54516 = -284						; size = 4
$T54517 = -272						; size = 4
$T54518 = -260						; size = 4
_newLines$53967 = -56					; size = 4
_len$ = -44						; size = 4
_line$ = -32						; size = 4
_maxLines$ = -20					; size = 4
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?getLines@UPerfTest@@QAEPAUULine@@AAW4UErrorCode@@@Z PROC ; UPerfTest::getLines, COMDAT
; _this$ = ecx
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 210
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@getLines
; Line 211
	xor	eax, eax
	jmp	$LN9@getLines
$LN8@getLines:
; Line 213
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN7@getLines
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	jmp	$LN9@getLines
$LN7@getLines:
; Line 216
	push	320000					; 0004e200H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T54514[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T54514[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 217
	mov	DWORD PTR _maxLines$[ebp], 40000	; 00009c40H
; Line 218
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 219
	mov	DWORD PTR _line$[ebp], 0
; Line 220
	mov	DWORD PTR _len$[ebp], 0
$LN6@getLines:
; Line 222
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ucbuf_readline
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _line$[ebp], eax
; Line 223
	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN3@getLines
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@getLines
$LN3@getLines:
; Line 224
	jmp	$LN5@getLines
$LN4@getLines:
; Line 226
	xor	ecx, ecx
	mov	eax, DWORD PTR _len$[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T54515[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	edx, DWORD PTR $T54515[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
; Line 227
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 228
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+eax*8]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 230
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx
; Line 231
	mov	DWORD PTR _len$[ebp], 0
; Line 232
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	cmp	ecx, DWORD PTR _maxLines$[ebp]
	jl	$LN2@getLines
; Line 233
	mov	eax, DWORD PTR _maxLines$[ebp]
	add	eax, 40000				; 00009c40H
	mov	DWORD PTR _maxLines$[ebp], eax
; Line 234
	xor	ecx, ecx
	mov	eax, DWORD PTR _maxLines$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T54516[ebp], eax
	mov	eax, DWORD PTR $T54516[ebp]
	mov	DWORD PTR _newLines$53967[ebp], eax
; Line 235
	cmp	DWORD PTR _newLines$53967[ebp], 0
	jne	SHORT $LN1@getLines
; Line 236
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	push	OFFSET ??_C@_0CA@BBPGOECO@Out?5of?5memory?5reading?5line?5?$CFd?4?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 237
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 238
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T54517[ebp], ecx
	mov	edx, DWORD PTR $T54517[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 239
	xor	eax, eax
	jmp	SHORT $LN9@getLines
$LN1@getLines:
; Line 242
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _newLines$53967[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 243
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T54518[ebp], ecx
	mov	edx, DWORD PTR $T54518[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 244
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newLines$53967[ebp]
	mov	DWORD PTR [eax+44], ecx
$LN2@getLines:
; Line 246
	jmp	$LN6@getLines
$LN5@getLines:
; Line 247
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
$LN9@getLines:
; Line 248
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@getLines
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN13@getLines:
	DD	1
	DD	$LN12@getLines
$LN12@getLines:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN11@getLines
$LN11@getLines:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
?getLines@UPerfTest@@QAEPAUULine@@AAW4UErrorCode@@@Z ENDP ; UPerfTest::getLines
_TEXT	ENDS
PUBLIC	?getBuffer@UPerfTest@@QAEPB_WAAHAAW4UErrorCode@@@Z ; UPerfTest::getBuffer
EXTRN	_u_strncpy_56:PROC
EXTRN	_ucbuf_getBuffer:PROC
EXTRN	_ucbuf_size:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getBuffer@UPerfTest@@QAEPB_WAAHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_len$ = 8						; size = 4
_status$ = 12						; size = 4
?getBuffer@UPerfTest@@QAEPB_WAAHAAW4UErrorCode@@@Z PROC	; UPerfTest::getBuffer, COMDAT
; _this$ = ecx
; Line 249
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 250
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@getBuffer
; Line 251
	xor	eax, eax
	jmp	SHORT $LN2@getBuffer
$LN1@getBuffer:
; Line 253
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ucbuf_size
	add	esp, 4
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx], eax
; Line 254
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+ecx+2]
	push	edx
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax
; Line 255
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _status$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ucbuf_getBuffer
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_u_strncpy_56
	add	esp, 12					; 0000000cH
; Line 256
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
; Line 257
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax], edx
; Line 258
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
$LN2@getBuffer:
; Line 259
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?getBuffer@UPerfTest@@QAEPB_WAAHAAW4UErrorCode@@@Z ENDP	; UPerfTest::getBuffer
_TEXT	ENDS
PUBLIC	??_C@_0CE@BGDELAFC@?6?9?9?9ERROR?3?5Test?5doesn?8t?5exist?3?5?$CF@ ; `string'
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
PUBLIC	?runTest@UPerfTest@@QAECPAD0@Z			; UPerfTest::runTest
PUBLIC	?run@UPerfTest@@QAECXZ				; UPerfTest::run
;	COMDAT ??_C@_0CE@BGDELAFC@?6?9?9?9ERROR?3?5Test?5doesn?8t?5exist?3?5?$CF@
CONST	SEGMENT
??_C@_0CE@BGDELAFC@?6?9?9?9ERROR?3?5Test?5doesn?8t?5exist?3?5?$CF@ DB 0aH
	DB	'---ERROR: Test doesn''t exist: %s!', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?run@UPerfTest@@QAECXZ
_TEXT	SEGMENT
_parameter$53996 = -56					; size = 4
_name$53993 = -44					; size = 4
_i$53988 = -32						; size = 4
_res$ = -17						; size = 1
_this$ = -8						; size = 4
?run@UPerfTest@@QAECXZ PROC				; UPerfTest::run, COMDAT
; _this$ = ecx
; Line 260
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 261
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 1
	jne	SHORT $LN9@run
; Line 263
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?runTest@UPerfTest@@QAECPAD0@Z		; UPerfTest::runTest
	jmp	$LN10@run
$LN9@run:
; Line 265
	mov	BYTE PTR _res$[ebp], 0
; Line 267
	mov	DWORD PTR _i$53988[ebp], 1
	jmp	SHORT $LN8@run
$LN7@run:
	mov	eax, DWORD PTR _i$53988[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53988[ebp], eax
$LN8@run:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$53988[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jge	$LN6@run
; Line 268
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$53988[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	$LN5@run
; Line 269
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$53988[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _name$53993[ebp], eax
; Line 274
	push	64					; 00000040H
	mov	eax, DWORD PTR _name$53993[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _parameter$53996[ebp], eax
; Line 275
	cmp	DWORD PTR _parameter$53996[ebp], 0
	je	SHORT $LN3@run
; Line 276
	mov	eax, DWORD PTR _parameter$53996[ebp]
	mov	BYTE PTR [eax], 0
; Line 277
	mov	eax, DWORD PTR _parameter$53996[ebp]
	add	eax, 1
	mov	DWORD PTR _parameter$53996[ebp], eax
$LN3@run:
; Line 279
	mov	DWORD PTR _execCount, 0
; Line 280
	mov	eax, DWORD PTR _parameter$53996[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$53993[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?runTest@UPerfTest@@QAECPAD0@Z		; UPerfTest::runTest
	mov	BYTE PTR _res$[ebp], al
; Line 281
	movsx	eax, BYTE PTR _res$[ebp]
	test	eax, eax
	je	SHORT $LN1@run
	cmp	DWORD PTR _execCount, 0
	jg	SHORT $LN5@run
$LN1@run:
; Line 282
	mov	esi, esp
	mov	eax, DWORD PTR _name$53993[ebp]
	push	eax
	push	OFFSET ??_C@_0CE@BGDELAFC@?6?9?9?9ERROR?3?5Test?5doesn?8t?5exist?3?5?$CF@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 283
	xor	al, al
	jmp	SHORT $LN10@run
$LN5@run:
; Line 286
	jmp	$LN7@run
$LN6@run:
; Line 287
	mov	al, BYTE PTR _res$[ebp]
$LN10@run:
; Line 288
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?run@UPerfTest@@QAECXZ ENDP				; UPerfTest::run
_TEXT	ENDS
EXTRN	__imp__strchr:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string.h
; Line 215
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	esi, esp
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	DWORD PTR __imp__strchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
PUBLIC	??_C@_04PCOPKCKE@LIST?$AA@			; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
EXTRN	_strcmp:PROC
;	COMDAT ??_C@_04PCOPKCKE@LIST?$AA@
; File d:\mozilla\intl\icu\source\tools\ctestfw\uperf.cpp
CONST	SEGMENT
??_C@_04PCOPKCKE@LIST?$AA@ DB 'LIST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?runTest@UPerfTest@@QAECPAD0@Z
_TEXT	SEGMENT
_pos$ = -32						; size = 4
_rval$ = -17						; size = 1
_this$ = -8						; size = 4
_name$ = 8						; size = 4
_par$ = 12						; size = 4
?runTest@UPerfTest@@QAECPAD0@Z PROC			; UPerfTest::runTest, COMDAT
; _this$ = ecx
; Line 289
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 291
	mov	DWORD PTR _pos$[ebp], 0
; Line 293
	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN9@runTest
; Line 294
	push	47					; 0000002fH
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _pos$[ebp], eax
$LN9@runTest:
; Line 295
	cmp	DWORD PTR _pos$[ebp], 0
	je	SHORT $LN8@runTest
; Line 296
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+88], eax
; Line 297
	mov	eax, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [eax], 0
; Line 298
	jmp	SHORT $LN7@runTest
$LN8@runTest:
; Line 299
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
$LN7@runTest:
; Line 302
	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN5@runTest
	mov	eax, DWORD PTR _name$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@runTest
	push	OFFSET ??_C@_01NBENCBCI@?$CK?$AA@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@runTest
$LN5@runTest:
; Line 303
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _rval$[ebp], al
	jmp	SHORT $LN4@runTest
$LN6@runTest:
; Line 305
	push	OFFSET ??_C@_04PCOPKCKE@LIST?$AA@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@runTest
; Line 306
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 307
	mov	BYTE PTR _rval$[ebp], 1
; Line 309
	jmp	SHORT $LN4@runTest
$LN3@runTest:
; Line 310
	mov	esi, esp
	mov	eax, DWORD PTR _par$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _rval$[ebp], al
$LN4@runTest:
; Line 313
	cmp	DWORD PTR _pos$[ebp], 0
	je	SHORT $LN1@runTest
; Line 314
	mov	eax, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [eax], 47			; 0000002fH
$LN1@runTest:
; Line 315
	mov	al, BYTE PTR _rval$[ebp]
; Line 316
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?runTest@UPerfTest@@QAECPAD0@Z ENDP			; UPerfTest::runTest
_TEXT	ENDS
PUBLIC	?setPath@UPerfTest@@QAEXPAD@Z			; UPerfTest::setPath
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setPath@UPerfTest@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pathVal$ = 8						; size = 4
?setPath@UPerfTest@@QAEXPAD@Z PROC			; UPerfTest::setPath, COMDAT
; _this$ = ecx
; Line 320
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 321
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pathVal$[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 322
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?setPath@UPerfTest@@QAEXPAD@Z ENDP			; UPerfTest::setPath
_TEXT	ENDS
PUBLIC	??_C@_0CO@LMIDGJJA@?$CK?$CK?$CK?5runIndexedTest?5needs?5to?5be?5o@ ; `string'
;	COMDAT ??_C@_0CO@LMIDGJJA@?$CK?$CK?$CK?5runIndexedTest?5needs?5to?5be?5o@
CONST	SEGMENT
??_C@_0CO@LMIDGJJA@?$CK?$CK?$CK?5runIndexedTest?5needs?5to?5be?5o@ DB '**'
	DB	'* runIndexedTest needs to be overriden! ***', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?runIndexedTest@UPerfTest@@MAEPAVUPerfFunction@@HCAAPBDPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?runIndexedTest@UPerfTest@@MAEPAVUPerfFunction@@HCAAPBDPAD@Z PROC ; UPerfTest::runIndexedTest, COMDAT
; _this$ = ecx
; Line 326
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 335
	mov	esi, esp
	push	OFFSET ??_C@_0CO@LMIDGJJA@?$CK?$CK?$CK?5runIndexedTest?5needs?5to?5be?5o@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 336
	xor	eax, eax
; Line 337
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?runIndexedTest@UPerfTest@@MAEPAVUPerfFunction@@HCAAPBDPAD@Z ENDP ; UPerfTest::runIndexedTest
_TEXT	ENDS
PUBLIC	??_C@_0DO@BAPFMIBB@_?$DN?5?$CFs?5min?3?5?$CF?44g?5loops?3?5?$CFi?5min?1op@ ; `string'
PUBLIC	??_C@_0DP@DMEJJKKH@?$CF?$CF?$DN?5?$CFs?5avg?3?5?$CF?44g?5loops?3?5?$CFi?5avg?1o@ ; `string'
PUBLIC	??_C@_0CL@FGKMDIJE@_?$DN?5?$CFs?5min?3?5?$CF?44g?5loops?3?5?$CFi?5min?1op@ ; `string'
PUBLIC	??_C@_0CM@CAIGJCLE@?$CF?$CF?$DN?5?$CFs?5avg?3?5?$CF?44g?5loops?3?5?$CFi?5avg?1o@ ; `string'
PUBLIC	__real@41cdcd6500000000
PUBLIC	??_C@_0BA@JFDCCOHJ@?$CFs?5did?5not?5run?6?$AA@	; `string'
PUBLIC	??_C@_0BI@NIKOPCAD@?$DN?5?$CFs?5end?5?$CFf?5?$CFi?5?$CFli?5?$CFli?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@CHADNHJA@?$DN?5?$CFs?5end?5?$CFf?5?$CFi?5?$CFli?6?$AA@ ; `string'
PUBLIC	??_C@_0DE@OHJBABJJ@?$DN?5?$CFs?5end?3?5?$CFf?5loops?3?5?$CFi?5operation@ ; `string'
PUBLIC	??_C@_0CJ@KFLKAPCK@?$DN?5?$CFs?5end?3?5?$CFf?5loops?3?5?$CFi?5operation@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_03PELOGHMK@?$CFi?6?$AA@			; `string'
PUBLIC	??_C@_0M@OPPNMGAG@?$DN?5?$CFs?5begin?5?$AA@	; `string'
PUBLIC	__real@412e848000000000
PUBLIC	??_C@_0CJ@JFALIDEG@Performance?5test?5failed?5with?5err@ ; `string'
PUBLIC	??_C@_0CH@KJLAKLPI@Unable?5to?5converge?5on?5desired?5du@ ; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3feccccccccccccd
PUBLIC	??_C@_0BO@DPGPFGBP@?$DN?5?$CFs?5calibrating?5?$CFi?5seconds?5?6?$AA@ ; `string'
PUBLIC	??_C@_0CP@NMJIIHCA@?$CFs?5returned?5an?5illegal?5operation@ ; `string'
PUBLIC	??_C@_0BK@FCJFGPEI@?$CFs?5function?5returned?5NULL?$AA@ ; `string'
PUBLIC	__real@0000000000000000
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0DO@BAPFMIBB@_?$DN?5?$CFs?5min?3?5?$CF?44g?5loops?3?5?$CFi?5min?1op@
CONST	SEGMENT
??_C@_0DO@BAPFMIBB@_?$DN?5?$CFs?5min?3?5?$CF?44g?5loops?3?5?$CFi?5min?1op@ DB '_'
	DB	'= %s min: %.4g loops: %i min/op: %.4g ns min/event: %.4g ns', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@DMEJJKKH@?$CF?$CF?$DN?5?$CFs?5avg?3?5?$CF?44g?5loops?3?5?$CFi?5avg?1o@
CONST	SEGMENT
??_C@_0DP@DMEJJKKH@?$CF?$CF?$DN?5?$CFs?5avg?3?5?$CF?44g?5loops?3?5?$CFi?5avg?1o@ DB '%'
	DB	'%= %s avg: %.4g loops: %i avg/op: %.4g ns avg/event: %.4g ns', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FGKMDIJE@_?$DN?5?$CFs?5min?3?5?$CF?44g?5loops?3?5?$CFi?5min?1op@
CONST	SEGMENT
??_C@_0CL@FGKMDIJE@_?$DN?5?$CFs?5min?3?5?$CF?44g?5loops?3?5?$CFi?5min?1op@ DB '_'
	DB	'= %s min: %.4g loops: %i min/op: %.4g ns', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CAIGJCLE@?$CF?$CF?$DN?5?$CFs?5avg?3?5?$CF?44g?5loops?3?5?$CFi?5avg?1o@
CONST	SEGMENT
??_C@_0CM@CAIGJCLE@?$CF?$CF?$DN?5?$CFs?5avg?3?5?$CF?44g?5loops?3?5?$CFi?5avg?1o@ DB '%'
	DB	'%= %s avg: %.4g loops: %i avg/op: %.4g ns', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@41cdcd6500000000
CONST	SEGMENT
__real@41cdcd6500000000 DQ 041cdcd6500000000r	; 1e+009
CONST	ENDS
;	COMDAT ??_C@_0BA@JFDCCOHJ@?$CFs?5did?5not?5run?6?$AA@
CONST	SEGMENT
??_C@_0BA@JFDCCOHJ@?$CFs?5did?5not?5run?6?$AA@ DB '%s did not run', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NIKOPCAD@?$DN?5?$CFs?5end?5?$CFf?5?$CFi?5?$CFli?5?$CFli?6?$AA@
CONST	SEGMENT
??_C@_0BI@NIKOPCAD@?$DN?5?$CFs?5end?5?$CFf?5?$CFi?5?$CFli?5?$CFli?6?$AA@ DB '='
	DB	' %s end %f %i %li %li', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CHADNHJA@?$DN?5?$CFs?5end?5?$CFf?5?$CFi?5?$CFli?6?$AA@
CONST	SEGMENT
??_C@_0BE@CHADNHJA@?$DN?5?$CFs?5end?5?$CFf?5?$CFi?5?$CFli?6?$AA@ DB '= %s'
	DB	' end %f %i %li', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@OHJBABJJ@?$DN?5?$CFs?5end?3?5?$CFf?5loops?3?5?$CFi?5operation@
CONST	SEGMENT
??_C@_0DE@OHJBABJJ@?$DN?5?$CFs?5end?3?5?$CFf?5loops?3?5?$CFi?5operation@ DB '='
	DB	' %s end: %f loops: %i operations: %li events: %li', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KFLKAPCK@?$DN?5?$CFs?5end?3?5?$CFf?5loops?3?5?$CFi?5operation@
CONST	SEGMENT
??_C@_0CJ@KFLKAPCK@?$DN?5?$CFs?5end?3?5?$CFf?5loops?3?5?$CFi?5operation@ DB '='
	DB	' %s end: %f loops: %i operations: %li ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PELOGHMK@?$CFi?6?$AA@
CONST	SEGMENT
??_C@_03PELOGHMK@?$CFi?6?$AA@ DB '%i', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OPPNMGAG@?$DN?5?$CFs?5begin?5?$AA@
CONST	SEGMENT
??_C@_0M@OPPNMGAG@?$DN?5?$CFs?5begin?5?$AA@ DB '= %s begin ', 00H ; `string'
CONST	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+006
CONST	ENDS
;	COMDAT ??_C@_0CJ@JFALIDEG@Performance?5test?5failed?5with?5err@
CONST	SEGMENT
??_C@_0CJ@JFALIDEG@Performance?5test?5failed?5with?5err@ DB 'Performance '
	DB	'test failed with error: %s ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KJLAKLPI@Unable?5to?5converge?5on?5desired?5du@
CONST	SEGMENT
??_C@_0CH@KJLAKLPI@Unable?5to?5converge?5on?5desired?5du@ DB 'Unable to c'
	DB	'onverge on desired duration', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3feccccccccccccd
CONST	SEGMENT
__real@3feccccccccccccd DQ 03feccccccccccccdr	; 0.9
CONST	ENDS
;	COMDAT ??_C@_0BO@DPGPFGBP@?$DN?5?$CFs?5calibrating?5?$CFi?5seconds?5?6?$AA@
CONST	SEGMENT
??_C@_0BO@DPGPFGBP@?$DN?5?$CFs?5calibrating?5?$CFi?5seconds?5?6?$AA@ DB '='
	DB	' %s calibrating %i seconds ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NMJIIHCA@?$CFs?5returned?5an?5illegal?5operation@
CONST	SEGMENT
??_C@_0CP@NMJIIHCA@?$CFs?5returned?5an?5illegal?5operation@ DB '%s return'
	DB	'ed an illegal operations/iteration()', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FCJFGPEI@?$CFs?5function?5returned?5NULL?$AA@
CONST	SEGMENT
??_C@_0BK@FCJFGPEI@?$CFs?5function?5returned?5NULL?$AA@ DB '%s function r'
	DB	'eturned NULL', 00H				; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?runTestLoop@UPerfTest@@MAECPAD0@Z
_TEXT	SEGMENT
tv629 = -456						; size = 4
tv608 = -456						; size = 4
tv625 = -452						; size = 4
tv604 = -452						; size = 4
tv589 = -452						; size = 4
tv574 = -452						; size = 4
tv426 = -452						; size = 4
tv361 = -452						; size = 4
$T54536 = -444						; size = 4
$T54537 = -432						; size = 4
_avg_t$54112 = -228					; size = 8
_ps$54082 = -212					; size = 4
_events$54081 = -200					; size = 4
_sum_t$54080 = -188					; size = 8
_min_t$54079 = -172					; size = 8
_failsafe$54064 = -156					; size = 4
_testFunction$54055 = -144				; size = 4
_ops$ = -132						; size = 4
_n$ = -120						; size = 4
_t$ = -108						; size = 8
_loops$ = -92						; size = 4
_saveTest$ = -80					; size = 4
_status$ = -68						; size = 4
_rval$ = -53						; size = 1
_run_this_test$ = -41					; size = 1
_name$ = -32						; size = 4
_index$ = -20						; size = 4
_this$ = -8						; size = 4
_testname$ = 8						; size = 4
_par$ = 12						; size = 4
?runTestLoop@UPerfTest@@MAECPAD0@Z PROC			; UPerfTest::runTestLoop, COMDAT
; _this$ = ecx
; Line 341
	push	ebp
	mov	ebp, esp
	sub	esp, 456				; 000001c8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-456]
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 342
	mov	DWORD PTR _index$[ebp], 0
; Line 345
	mov	BYTE PTR _rval$[ebp], 0
; Line 346
	mov	DWORD PTR _status$[ebp], 0
; Line 347
	mov	eax, DWORD PTR ?gTest@UPerfTest@@2PAV1@A ; UPerfTest::gTest
	mov	DWORD PTR _saveTest$[ebp], eax
; Line 348
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR ?gTest@UPerfTest@@2PAV1@A, eax ; UPerfTest::gTest
; Line 349
	mov	DWORD PTR _loops$[ebp], 0
; Line 350
	fldz
	fstp	QWORD PTR _t$[ebp]
; Line 351
	mov	DWORD PTR _n$[ebp], 1
$LN41@runTestLoo:
; Line 354
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 355
	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN37@runTestLoo
	mov	eax, DWORD PTR _name$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN38@runTestLoo
$LN37@runTestLoo:
; Line 356
	jmp	$LN39@runTestLoo
$LN38@runTestLoo:
; Line 357
	cmp	DWORD PTR _testname$[ebp], 0
	jne	SHORT $LN36@runTestLoo
; Line 358
	mov	BYTE PTR _run_this_test$[ebp], 1
; Line 359
	jmp	SHORT $LN35@runTestLoo
$LN36@runTestLoo:
; Line 360
	mov	eax, DWORD PTR _testname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	sete	dl
	mov	BYTE PTR _run_this_test$[ebp], dl
$LN35@runTestLoo:
; Line 362
	movsx	eax, BYTE PTR _run_this_test$[ebp]
	test	eax, eax
	je	$LN45@runTestLoo
; Line 363
	mov	esi, esp
	mov	eax, DWORD PTR _par$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _testFunction$54055[ebp], eax
; Line 364
	mov	eax, DWORD PTR _execCount
	add	eax, 1
	mov	DWORD PTR _execCount, eax
; Line 365
	mov	BYTE PTR _rval$[ebp], 1
; Line 366
	cmp	DWORD PTR _testFunction$54055[ebp], 0
	jne	SHORT $LN33@runTestLoo
; Line 367
	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0BK@FCJFGPEI@?$CFs?5function?5returned?5NULL?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 368
	xor	al, al
	jmp	$LN42@runTestLoo
$LN33@runTestLoo:
; Line 370
	mov	eax, DWORD PTR _testFunction$54055[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _testFunction$54055[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ops$[ebp], eax
; Line 371
	cmp	DWORD PTR _ops$[ebp], 1
	jge	SHORT $LN32@runTestLoo
; Line 372
	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0CP@NMJIIHCA@?$CFs?5returned?5an?5illegal?5operation@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 373
	xor	al, al
	jmp	$LN42@runTestLoo
$LN32@runTestLoo:
; Line 375
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jne	$LN31@runTestLoo
; Line 376
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _n$[ebp], ecx
; Line 378
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+64]
	cmp	ecx, 1
	jne	SHORT $LN30@runTestLoo
; Line 379
	mov	esi, esp
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BO@DPGPFGBP@?$DN?5?$CFs?5calibrating?5?$CFi?5seconds?5?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN30@runTestLoo:
; Line 384
	mov	DWORD PTR _failsafe$54064[ebp], 1
; Line 385
	fldz
	fstp	QWORD PTR _t$[ebp]
$LN29@runTestLoo:
; Line 386
	fild	DWORD PTR _n$[ebp]
	fmul	QWORD PTR __real@3feccccccccccccd
	call	__ftol2_sse
	mov	DWORD PTR tv426[ebp], eax
	fild	DWORD PTR tv426[ebp]
	fcomp	QWORD PTR _t$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN28@runTestLoo
; Line 387
	cmp	DWORD PTR _loops$[ebp], 0
	je	SHORT $LN26@runTestLoo
	fld	QWORD PTR _t$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN27@runTestLoo
$LN26@runTestLoo:
; Line 388
	mov	eax, DWORD PTR _failsafe$54064[ebp]
	mov	DWORD PTR _loops$[ebp], eax
; Line 389
	mov	eax, DWORD PTR _failsafe$54064[ebp]
	imul	eax, 10					; 0000000aH
	mov	DWORD PTR _failsafe$54064[ebp], eax
; Line 390
	jmp	SHORT $LN24@runTestLoo
$LN27@runTestLoo:
; Line 392
	fild	DWORD PTR _n$[ebp]
	fdiv	QWORD PTR _t$[ebp]
	fimul	DWORD PTR _loops$[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	DWORD PTR _loops$[ebp], eax
; Line 393
	cmp	DWORD PTR _loops$[ebp], 0
	jne	SHORT $LN24@runTestLoo
; Line 394
	mov	esi, esp
	push	OFFSET ??_C@_0CH@KJLAKLPI@Unable?5to?5converge?5on?5desired?5du@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 395
	xor	al, al
	jmp	$LN42@runTestLoo
$LN24@runTestLoo:
; Line 399
	mov	esi, esp
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loops$[ebp]
	push	ecx
	mov	edx, DWORD PTR _testFunction$54055[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _testFunction$54055[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _t$[ebp]
; Line 400
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN23@runTestLoo
; Line 401
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	call	_u_errorName_56
	add	esp, 4
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0CJ@JFALIDEG@Performance?5test?5failed?5with?5err@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 402
	jmp	SHORT $LN28@runTestLoo
$LN23@runTestLoo:
; Line 404
	jmp	$LN29@runTestLoo
$LN28@runTestLoo:
; Line 405
	jmp	SHORT $LN22@runTestLoo
$LN31@runTestLoo:
; Line 406
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _loops$[ebp], ecx
$LN22@runTestLoo:
; Line 409
	fld	QWORD PTR __real@412e848000000000
	fstp	QWORD PTR _min_t$54079[ebp]
	fldz
	fstp	QWORD PTR _sum_t$54080[ebp]
; Line 410
	mov	DWORD PTR _events$54081[ebp], -1
; Line 412
	mov	DWORD PTR _ps$54082[ebp], 0
	jmp	SHORT $LN21@runTestLoo
$LN20@runTestLoo:
	mov	eax, DWORD PTR _ps$54082[ebp]
	add	eax, 1
	mov	DWORD PTR _ps$54082[ebp], eax
$LN21@runTestLoo:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ps$54082[ebp]
	cmp	ecx, DWORD PTR [eax+68]
	jge	$LN19@runTestLoo
; Line 413
	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@OPPNMGAG@?$DN?5?$CFs?5begin?5?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 414
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+64]
	cmp	ecx, 1
	jne	SHORT $LN18@runTestLoo
; Line 415
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jle	SHORT $LN17@runTestLoo
; Line 416
	mov	esi, esp
	mov	eax, DWORD PTR _loops$[ebp]
	push	eax
	push	OFFSET ??_C@_03PELOGHMK@?$CFi?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 417
	jmp	SHORT $LN16@runTestLoo
$LN17@runTestLoo:
; Line 418
	mov	esi, esp
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	OFFSET ??_C@_03PELOGHMK@?$CFi?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@runTestLoo:
; Line 420
	jmp	SHORT $LN15@runTestLoo
$LN18@runTestLoo:
; Line 421
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@runTestLoo:
; Line 423
	mov	esi, esp
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loops$[ebp]
	push	ecx
	mov	edx, DWORD PTR _testFunction$54055[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _testFunction$54055[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _t$[ebp]
; Line 424
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@runTestLoo
; Line 425
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	call	_u_errorName_56
	add	esp, 4
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0CJ@JFALIDEG@Performance?5test?5failed?5with?5err@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 426
	jmp	$LN19@runTestLoo
$LN14@runTestLoo:
; Line 428
	fld	QWORD PTR _sum_t$54080[ebp]
	fadd	QWORD PTR _t$[ebp]
	fstp	QWORD PTR _sum_t$54080[ebp]
; Line 429
	fld	QWORD PTR _min_t$54079[ebp]
	fcomp	QWORD PTR _t$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN13@runTestLoo
; Line 430
	fld	QWORD PTR _t$[ebp]
	fstp	QWORD PTR _min_t$54079[ebp]
$LN13@runTestLoo:
; Line 432
	mov	eax, DWORD PTR _testFunction$54055[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _testFunction$54055[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _events$54081[ebp], eax
; Line 434
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+64]
	cmp	ecx, 1
	jne	$LN12@runTestLoo
; Line 435
	cmp	DWORD PTR _events$54081[ebp], -1
	jne	SHORT $LN11@runTestLoo
; Line 436
	mov	esi, esp
	mov	eax, DWORD PTR _ops$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loops$[ebp]
	push	ecx
	sub	esp, 8
	fld	QWORD PTR _t$[ebp]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0CJ@KFLKAPCK@?$DN?5?$CFs?5end?3?5?$CFf?5loops?3?5?$CFi?5operation@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 437
	jmp	SHORT $LN10@runTestLoo
$LN11@runTestLoo:
; Line 438
	mov	esi, esp
	mov	eax, DWORD PTR _events$54081[ebp]
	push	eax
	mov	ecx, DWORD PTR _ops$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loops$[ebp]
	push	edx
	sub	esp, 8
	fld	QWORD PTR _t$[ebp]
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0DE@OHJBABJJ@?$DN?5?$CFs?5end?3?5?$CFf?5loops?3?5?$CFi?5operation@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@runTestLoo:
; Line 440
	jmp	$LN7@runTestLoo
$LN12@runTestLoo:
; Line 441
	cmp	DWORD PTR _events$54081[ebp], -1
	jne	SHORT $LN8@runTestLoo
; Line 442
	mov	esi, esp
	mov	eax, DWORD PTR _ops$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loops$[ebp]
	push	ecx
	sub	esp, 8
	fld	QWORD PTR _t$[ebp]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0BE@CHADNHJA@?$DN?5?$CFs?5end?5?$CFf?5?$CFi?5?$CFli?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 443
	jmp	SHORT $LN7@runTestLoo
$LN8@runTestLoo:
; Line 444
	mov	esi, esp
	mov	eax, DWORD PTR _events$54081[ebp]
	push	eax
	mov	ecx, DWORD PTR _ops$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loops$[ebp]
	push	edx
	sub	esp, 8
	fld	QWORD PTR _t$[ebp]
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0BI@NIKOPCAD@?$DN?5?$CFs?5end?5?$CFf?5?$CFi?5?$CFli?5?$CFli?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@runTestLoo:
; Line 447
	jmp	$LN20@runTestLoo
$LN19@runTestLoo:
; Line 448
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+64]
	test	ecx, ecx
	je	$LN1@runTestLoo
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN1@runTestLoo
; Line 449
	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+68]
	fdivr	QWORD PTR _sum_t$54080[ebp]
	fstp	QWORD PTR _avg_t$54112[ebp]
; Line 450
	cmp	DWORD PTR _loops$[ebp], 0
	je	SHORT $LN4@runTestLoo
	cmp	DWORD PTR _ops$[ebp], 0
	jne	SHORT $LN5@runTestLoo
$LN4@runTestLoo:
; Line 451
	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@JFDCCOHJ@?$CFs?5did?5not?5run?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@runTestLoo
$LN5@runTestLoo:
; Line 453
	cmp	DWORD PTR _events$54081[ebp], -1
	jne	$LN2@runTestLoo
; Line 455
	fld	QWORD PTR _avg_t$54112[ebp]
	fmul	QWORD PTR __real@41cdcd6500000000
	mov	eax, DWORD PTR _loops$[ebp]
	imul	eax, DWORD PTR _ops$[ebp]
	mov	DWORD PTR tv574[ebp], eax
	fild	DWORD PTR tv574[ebp]
	fdivp	ST(1), ST(0)
	mov	esi, esp
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _loops$[ebp]
	push	ecx
	sub	esp, 8
	fld	QWORD PTR _avg_t$54112[ebp]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0CM@CAIGJCLE@?$CF?$CF?$DN?5?$CFs?5avg?3?5?$CF?44g?5loops?3?5?$CFi?5avg?1o@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 457
	fld	QWORD PTR _min_t$54079[ebp]
	fmul	QWORD PTR __real@41cdcd6500000000
	mov	eax, DWORD PTR _loops$[ebp]
	imul	eax, DWORD PTR _ops$[ebp]
	mov	DWORD PTR tv589[ebp], eax
	fild	DWORD PTR tv589[ebp]
	fdivp	ST(1), ST(0)
	mov	esi, esp
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _loops$[ebp]
	push	ecx
	sub	esp, 8
	fld	QWORD PTR _min_t$54079[ebp]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0CL@FGKMDIJE@_?$DN?5?$CFs?5min?3?5?$CF?44g?5loops?3?5?$CFi?5min?1op@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 459
	jmp	$LN1@runTestLoo
$LN2@runTestLoo:
; Line 461
	fld	QWORD PTR _avg_t$54112[ebp]
	fmul	QWORD PTR __real@41cdcd6500000000
	mov	eax, DWORD PTR _loops$[ebp]
	imul	eax, DWORD PTR _events$54081[ebp]
	mov	DWORD PTR tv604[ebp], eax
	fild	DWORD PTR tv604[ebp]
	fdivp	ST(1), ST(0)
	mov	esi, esp
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	QWORD PTR _avg_t$54112[ebp]
	fmul	QWORD PTR __real@41cdcd6500000000
	mov	ecx, DWORD PTR _loops$[ebp]
	imul	ecx, DWORD PTR _ops$[ebp]
	mov	DWORD PTR tv608[ebp], ecx
	fild	DWORD PTR tv608[ebp]
	fdivp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _loops$[ebp]
	push	edx
	sub	esp, 8
	fld	QWORD PTR _avg_t$54112[ebp]
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0DP@DMEJJKKH@?$CF?$CF?$DN?5?$CFs?5avg?3?5?$CF?44g?5loops?3?5?$CFi?5avg?1o@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 463
	fld	QWORD PTR _min_t$54079[ebp]
	fmul	QWORD PTR __real@41cdcd6500000000
	mov	eax, DWORD PTR _loops$[ebp]
	imul	eax, DWORD PTR _events$54081[ebp]
	mov	DWORD PTR tv625[ebp], eax
	fild	DWORD PTR tv625[ebp]
	fdivp	ST(1), ST(0)
	mov	esi, esp
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	QWORD PTR _min_t$54079[ebp]
	fmul	QWORD PTR __real@41cdcd6500000000
	mov	ecx, DWORD PTR _loops$[ebp]
	imul	ecx, DWORD PTR _ops$[ebp]
	mov	DWORD PTR tv629[ebp], ecx
	fild	DWORD PTR tv629[ebp]
	fdivp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _loops$[ebp]
	push	edx
	sub	esp, 8
	fld	QWORD PTR _min_t$54079[ebp]
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0DO@BAPFMIBB@_?$DN?5?$CFs?5min?3?5?$CF?44g?5loops?3?5?$CFi?5min?1op@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@runTestLoo:
; Line 466
	mov	eax, DWORD PTR _testFunction$54055[ebp]
	mov	DWORD PTR $T54537[ebp], eax
	mov	ecx, DWORD PTR $T54537[ebp]
	mov	DWORD PTR $T54536[ebp], ecx
	cmp	DWORD PTR $T54536[ebp], 0
	je	SHORT $LN44@runTestLoo
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T54536[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T54536[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv361[ebp], eax
	jmp	SHORT $LN45@runTestLoo
$LN44@runTestLoo:
	mov	DWORD PTR tv361[ebp], 0
$LN45@runTestLoo:
; Line 468
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
; Line 469
	cmp	DWORD PTR _name$[ebp], 0
	jne	$LN41@runTestLoo
$LN39@runTestLoo:
; Line 471
	mov	eax, DWORD PTR _saveTest$[ebp]
	mov	DWORD PTR ?gTest@UPerfTest@@2PAV1@A, eax ; UPerfTest::gTest
; Line 472
	mov	al, BYTE PTR _rval$[ebp]
$LN42@runTestLoo:
; Line 473
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN49@runTestLoo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 456				; 000001c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN49@runTestLoo:
	DD	2
	DD	$LN48@runTestLoo
$LN48@runTestLoo:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN46@runTestLoo
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN47@runTestLoo
$LN47@runTestLoo:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN46@runTestLoo:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?runTestLoop@UPerfTest@@MAECPAD0@Z ENDP			; UPerfTest::runTestLoop
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_SUCCESS@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_SUCCESS@@YACW4UErrorCode@@@Z PROC			; U_SUCCESS, COMDAT
; File d:\mozilla\intl\icu\include\unicode\utypes.h
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setle	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_SUCCESS@@YACW4UErrorCode@@@Z ENDP			; U_SUCCESS
_TEXT	ENDS
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_0N@NAAKPPPI@?9?9?9?9?9?9?9?9?9?9?9?6?$AA@	; `string'
PUBLIC	??_C@_0N@DEFLPKOO@Test?5names?3?6?$AA@		; `string'
EXTRN	__imp__puts:PROC
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
; File d:\mozilla\intl\icu\source\tools\ctestfw\uperf.cpp
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAAKPPPI@?9?9?9?9?9?9?9?9?9?9?9?6?$AA@
CONST	SEGMENT
??_C@_0N@NAAKPPPI@?9?9?9?9?9?9?9?9?9?9?9?6?$AA@ DB '-----------', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DEFLPKOO@Test?5names?3?6?$AA@
CONST	SEGMENT
??_C@_0N@DEFLPKOO@Test?5names?3?6?$AA@ DB 'Test names:', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?usage@UPerfTest@@UAEXXZ
_TEXT	SEGMENT
_name$ = -44						; size = 4
_index$ = -32						; size = 4
_save_verbose$ = -17					; size = 1
_this$ = -8						; size = 4
?usage@UPerfTest@@UAEXXZ PROC				; UPerfTest::usage, COMDAT
; _this$ = ecx
; Line 479
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 480
	mov	esi, esp
	push	OFFSET ?gUsageString@UPerfTest@@2QBDB	; UPerfTest::gUsageString
	call	DWORD PTR __imp__puts
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 481
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN6@usage
; Line 482
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__puts
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@usage:
; Line 485
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+64]
	mov	BYTE PTR _save_verbose$[ebp], cl
; Line 486
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+64], 1
; Line 487
	mov	esi, esp
	push	OFFSET ??_C@_0N@DEFLPKOO@Test?5names?3?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 488
	mov	esi, esp
	push	OFFSET ??_C@_0N@NAAKPPPI@?9?9?9?9?9?9?9?9?9?9?9?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 490
	mov	DWORD PTR _index$[ebp], 0
; Line 491
	mov	DWORD PTR _name$[ebp], 0
$LN5@usage:
; Line 493
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 494
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN2@usage
; Line 495
	jmp	SHORT $LN3@usage
$LN2@usage:
; Line 496
	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 497
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
; Line 498
	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN3@usage
	mov	eax, DWORD PTR _name$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@usage
$LN3@usage:
; Line 499
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _save_verbose$[ebp]
	mov	BYTE PTR [eax+64], cl
; Line 500
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@usage
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN11@usage:
	DD	1
	DD	$LN10@usage
$LN10@usage:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN9@usage
$LN9@usage:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?usage@UPerfTest@@UAEXXZ ENDP				; UPerfTest::usage
_TEXT	ENDS
PUBLIC	?setCaller@UPerfTest@@QAEXPAV1@@Z		; UPerfTest::setCaller
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setCaller@UPerfTest@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_callingTest$ = 8					; size = 4
?setCaller@UPerfTest@@QAEXPAV1@@Z PROC			; UPerfTest::setCaller, COMDAT
; _this$ = ecx
; Line 506
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 507
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _callingTest$[ebp]
	mov	DWORD PTR [eax+84], ecx
; Line 508
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	SHORT $LN2@setCaller
; Line 509
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [ecx+64]
	mov	BYTE PTR [edx+64], al
$LN2@setCaller:
; Line 511
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?setCaller@UPerfTest@@QAEXPAV1@@Z ENDP			; UPerfTest::setCaller
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?callTest@UPerfTest@@MAECAAV1@PAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_testToBeCalled$ = 8					; size = 4
_par$ = 12						; size = 4
?callTest@UPerfTest@@MAECAAV1@PAD@Z PROC		; UPerfTest::callTest, COMDAT
; _this$ = ecx
; Line 514
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 515
	mov	eax, DWORD PTR _execCount
	sub	eax, 1
	mov	DWORD PTR _execCount, eax
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _testToBeCalled$[ebp]
	call	?setCaller@UPerfTest@@QAEXPAV1@@Z	; UPerfTest::setCaller
; Line 517
	mov	eax, DWORD PTR _par$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	ecx, DWORD PTR _testToBeCalled$[ebp]
	call	?runTest@UPerfTest@@QAECPAD0@Z		; UPerfTest::runTest
; Line 518
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?callTest@UPerfTest@@MAECAAV1@PAD@Z ENDP		; UPerfTest::callTest
_TEXT	ENDS
EXTRN	_ucbuf_close:PROC
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1UPerfTest@@UAE@XZ
_TEXT	SEGMENT
$T54568 = -212						; size = 4
_this$ = -8						; size = 4
??1UPerfTest@@UAE@XZ PROC				; UPerfTest::~UPerfTest, COMDAT
; _this$ = ecx
; Line 520
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UPerfTest@@6B@
; Line 521
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN3@UPerfTest
; Line 522
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T54568[ebp], ecx
	mov	edx, DWORD PTR $T54568[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN3@UPerfTest:
; Line 524
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN2@UPerfTest
; Line 525
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN2@UPerfTest:
; Line 527
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@UPerfTest
; Line 528
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN1@UPerfTest:
; Line 530
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ucbuf_close
	add	esp, 4
; Line 531
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UPerfTest@@UAE@XZ ENDP				; UPerfTest::~UPerfTest
_TEXT	ENDS
END
