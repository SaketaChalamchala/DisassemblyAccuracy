; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\builds\windows\ftdebug.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ft_trace_levels:DWORD:05fH
_DATA	ENDS
_DATA	SEGMENT
_ft_trace_toggles DD FLAT:$SG87641
	DD	FLAT:$SG87642
	DD	FLAT:$SG87643
	DD	FLAT:$SG87644
	DD	FLAT:$SG87645
	DD	FLAT:$SG87646
	DD	FLAT:$SG87647
	DD	FLAT:$SG87648
	DD	FLAT:$SG87649
	DD	FLAT:$SG87650
	DD	FLAT:$SG87651
	DD	FLAT:$SG87652
	DD	FLAT:$SG87653
	DD	FLAT:$SG87654
	DD	FLAT:$SG87655
	DD	FLAT:$SG87656
	DD	FLAT:$SG87657
	DD	FLAT:$SG87658
	DD	FLAT:$SG87659
	DD	FLAT:$SG87660
	DD	FLAT:$SG87661
	DD	FLAT:$SG87662
	DD	FLAT:$SG87663
	DD	FLAT:$SG87664
	DD	FLAT:$SG87665
	DD	FLAT:$SG87666
	DD	FLAT:$SG87667
	DD	FLAT:$SG87668
	DD	FLAT:$SG87669
	DD	FLAT:$SG87670
	DD	FLAT:$SG87671
	DD	FLAT:$SG87672
	DD	FLAT:$SG87673
	DD	FLAT:$SG87674
	DD	FLAT:$SG87675
	DD	FLAT:$SG87676
	DD	FLAT:$SG87677
	DD	FLAT:$SG87678
	DD	FLAT:$SG87679
	DD	FLAT:$SG87680
	DD	FLAT:$SG87681
	DD	FLAT:$SG87682
	DD	FLAT:$SG87683
	DD	FLAT:$SG87684
	DD	FLAT:$SG87685
	DD	FLAT:$SG87686
	DD	FLAT:$SG87687
	DD	FLAT:$SG87688
	DD	FLAT:$SG87689
	DD	FLAT:$SG87690
	DD	FLAT:$SG87691
	DD	FLAT:$SG87692
	DD	FLAT:$SG87693
	DD	FLAT:$SG87694
	DD	FLAT:$SG87695
	DD	FLAT:$SG87696
	DD	FLAT:$SG87697
	DD	FLAT:$SG87698
	DD	FLAT:$SG87699
	DD	FLAT:$SG87700
	DD	FLAT:$SG87701
	DD	FLAT:$SG87702
	DD	FLAT:$SG87703
	DD	FLAT:$SG87704
	DD	FLAT:$SG87705
	DD	FLAT:$SG87706
	DD	FLAT:$SG87707
	DD	FLAT:$SG87708
	DD	FLAT:$SG87709
	DD	FLAT:$SG87710
	DD	FLAT:$SG87711
	DD	FLAT:$SG87712
	DD	FLAT:$SG87713
	DD	FLAT:$SG87714
	DD	FLAT:$SG87715
	DD	FLAT:$SG87716
	DD	FLAT:$SG87717
	DD	FLAT:$SG87718
	DD	FLAT:$SG87719
	DD	FLAT:$SG87720
	DD	FLAT:$SG87721
	DD	FLAT:$SG87722
	DD	FLAT:$SG87723
	DD	FLAT:$SG87724
	DD	FLAT:$SG87725
	DD	FLAT:$SG87726
	DD	FLAT:$SG87727
	DD	FLAT:$SG87728
	DD	FLAT:$SG87729
	DD	FLAT:$SG87730
	DD	FLAT:$SG87731
	DD	FLAT:$SG87732
	DD	FLAT:$SG87733
	DD	FLAT:$SG87734
	DD	FLAT:$SG87735
	DD	00H
$SG87641 DB	'any', 00H
$SG87642 DB	'calc', 00H
	ORG $+3
$SG87643 DB	'memory', 00H
	ORG $+1
$SG87644 DB	'stream', 00H
	ORG $+1
$SG87645 DB	'io', 00H
	ORG $+1
$SG87646 DB	'list', 00H
	ORG $+3
$SG87647 DB	'init', 00H
	ORG $+3
$SG87648 DB	'objs', 00H
	ORG $+3
$SG87649 DB	'outline', 00H
$SG87650 DB	'glyph', 00H
	ORG $+2
$SG87651 DB	'gloader', 00H
$SG87652 DB	'raster', 00H
	ORG $+1
$SG87653 DB	'smooth', 00H
	ORG $+1
$SG87654 DB	'mm', 00H
	ORG $+1
$SG87655 DB	'raccess', 00H
$SG87656 DB	'synth', 00H
	ORG $+2
$SG87657 DB	'bitmap', 00H
	ORG $+1
$SG87658 DB	'cache', 00H
	ORG $+2
$SG87659 DB	'sfdriver', 00H
	ORG $+3
$SG87660 DB	'sfobjs', 00H
	ORG $+1
$SG87661 DB	'ttcmap', 00H
	ORG $+1
$SG87662 DB	'ttkern', 00H
	ORG $+1
$SG87663 DB	'ttload', 00H
	ORG $+1
$SG87664 DB	'ttmtx', 00H
	ORG $+2
$SG87665 DB	'ttpost', 00H
	ORG $+1
$SG87666 DB	'ttsbit', 00H
	ORG $+1
$SG87667 DB	'ttbdf', 00H
	ORG $+2
$SG87668 DB	'ttdriver', 00H
	ORG $+3
$SG87669 DB	'ttgload', 00H
$SG87670 DB	'ttinterp', 00H
	ORG $+3
$SG87671 DB	'ttobjs', 00H
	ORG $+1
$SG87672 DB	'ttpload', 00H
$SG87673 DB	'ttgxvar', 00H
$SG87674 DB	't1afm', 00H
	ORG $+2
$SG87675 DB	't1driver', 00H
	ORG $+3
$SG87676 DB	't1gload', 00H
$SG87677 DB	't1hint', 00H
	ORG $+1
$SG87678 DB	't1load', 00H
	ORG $+1
$SG87679 DB	't1objs', 00H
	ORG $+1
$SG87680 DB	't1parse', 00H
$SG87681 DB	't1decode', 00H
	ORG $+3
$SG87682 DB	'psobjs', 00H
	ORG $+1
$SG87683 DB	'psconv', 00H
	ORG $+1
$SG87684 DB	'pshrec', 00H
	ORG $+1
$SG87685 DB	'pshalgo1', 00H
	ORG $+3
$SG87686 DB	'pshalgo2', 00H
	ORG $+3
$SG87687 DB	'cffdriver', 00H
	ORG $+2
$SG87688 DB	'cffgload', 00H
	ORG $+3
$SG87689 DB	'cffload', 00H
$SG87690 DB	'cffobjs', 00H
$SG87691 DB	'cffparse', 00H
	ORG $+3
$SG87692 DB	'cf2blues', 00H
	ORG $+3
$SG87693 DB	'cf2hints', 00H
	ORG $+3
$SG87694 DB	'cf2interp', 00H
	ORG $+2
$SG87695 DB	't42', 00H
$SG87696 DB	'cidafm', 00H
	ORG $+1
$SG87697 DB	'ciddriver', 00H
	ORG $+2
$SG87698 DB	'cidgload', 00H
	ORG $+3
$SG87699 DB	'cidload', 00H
$SG87700 DB	'cidobjs', 00H
$SG87701 DB	'cidparse', 00H
	ORG $+3
$SG87702 DB	'winfnt', 00H
	ORG $+1
$SG87703 DB	'pcfdriver', 00H
	ORG $+2
$SG87704 DB	'pcfread', 00H
$SG87705 DB	'bdfdriver', 00H
	ORG $+2
$SG87706 DB	'bdflib', 00H
	ORG $+1
$SG87707 DB	'pfr', 00H
$SG87708 DB	'otvmodule', 00H
	ORG $+2
$SG87709 DB	'otvcommon', 00H
	ORG $+2
$SG87710 DB	'otvbase', 00H
$SG87711 DB	'otvgdef', 00H
$SG87712 DB	'otvgpos', 00H
$SG87713 DB	'otvgsub', 00H
$SG87714 DB	'otvjstf', 00H
$SG87715 DB	'otvmath', 00H
$SG87716 DB	'gxvmodule', 00H
	ORG $+2
$SG87717 DB	'gxvcommon', 00H
	ORG $+2
$SG87718 DB	'gxvfeat', 00H
$SG87719 DB	'gxvmort', 00H
$SG87720 DB	'gxvmorx', 00H
$SG87721 DB	'gxvbsln', 00H
$SG87722 DB	'gxvjust', 00H
$SG87723 DB	'gxvkern', 00H
$SG87724 DB	'gxvopbd', 00H
$SG87725 DB	'gxvtrak', 00H
$SG87726 DB	'gxvprop', 00H
$SG87727 DB	'gxvlcar', 00H
$SG87728 DB	'afmodule', 00H
	ORG $+3
$SG87729 DB	'afhints', 00H
$SG87730 DB	'afcjk', 00H
	ORG $+2
$SG87731 DB	'aflatin', 00H
$SG87732 DB	'aflatin2', 00H
	ORG $+3
$SG87733 DB	'afwarp', 00H
	ORG $+1
$SG87734 DB	'afharfbuzz', 00H
	ORG $+1
$SG87735 DB	'afglobal', 00H
	ORG $+3
$SG87739 DB	'FT2_DEBUG', 00H
_DATA	ENDS
PUBLIC	_FT_Message
PUBLIC	_FT_Panic
PUBLIC	_FT_Throw
PUBLIC	_ft_debug_init
EXTRN	__imp__vprintf:PROC
EXTRN	__imp__vsprintf:PROC
EXTRN	__imp__exit:PROC
EXTRN	__imp__getenv:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
_BSS	SEGMENT
?buf@?1??FT_Message@@9@9 DB 02000H DUP (?)		; `FT_Message'::`2'::buf
?buf@?1??FT_Panic@@9@9 DB 02020H DUP (?)		; `FT_Panic'::`2'::buf
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_toggle$1 = -36						; size = 4
_found$2 = -32						; size = 4
_level$3 = -28						; size = 4
_len$4 = -24						; size = 4
_i$5 = -20						; size = 4
_n$6 = -16						; size = 4
_q$7 = -12						; size = 4
_p$8 = -8						; size = 4
_ft2_debug$ = -4					; size = 4
_ft_debug_init PROC
; File d:\mozilla\modules\freetype2\builds\windows\ftdebug.c
; Line 148
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 149
	mov	esi, esp
	push	OFFSET $SG87739
	call	DWORD PTR __imp__getenv
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ft2_debug$[ebp], eax
; Line 152
	cmp	DWORD PTR _ft2_debug$[ebp], 0
	je	$LN28@ft_debug_i
; Line 154
	mov	eax, DWORD PTR _ft2_debug$[ebp]
	mov	DWORD PTR _p$8[ebp], eax
; Line 158
	jmp	SHORT $LN26@ft_debug_i
$LN25@ft_debug_i:
	mov	ecx, DWORD PTR _p$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$8[ebp], ecx
$LN26@ft_debug_i:
	mov	edx, DWORD PTR _p$8[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN28@ft_debug_i
; Line 161
	mov	ecx, DWORD PTR _p$8[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN22@ft_debug_i
	mov	eax, DWORD PTR _p$8[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	je	SHORT $LN22@ft_debug_i
	mov	edx, DWORD PTR _p$8[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN22@ft_debug_i
	mov	ecx, DWORD PTR _p$8[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 59					; 0000003bH
	je	SHORT $LN22@ft_debug_i
	mov	eax, DWORD PTR _p$8[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 61					; 0000003dH
	jne	SHORT $LN23@ft_debug_i
$LN22@ft_debug_i:
; Line 162
	jmp	SHORT $LN25@ft_debug_i
$LN23@ft_debug_i:
; Line 165
	mov	edx, DWORD PTR _p$8[ebp]
	mov	DWORD PTR _q$7[ebp], edx
$LN21@ft_debug_i:
; Line 166
	mov	eax, DWORD PTR _p$8[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN20@ft_debug_i
	mov	edx, DWORD PTR _p$8[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN20@ft_debug_i
; Line 167
	mov	ecx, DWORD PTR _p$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$8[ebp], ecx
	jmp	SHORT $LN21@ft_debug_i
$LN20@ft_debug_i:
; Line 169
	mov	edx, DWORD PTR _p$8[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN19@ft_debug_i
; Line 170
	jmp	$LN28@ft_debug_i
$LN19@ft_debug_i:
; Line 172
	mov	ecx, DWORD PTR _p$8[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 58					; 0000003aH
	jne	$LN18@ft_debug_i
	mov	eax, DWORD PTR _p$8[ebp]
	cmp	eax, DWORD PTR _q$7[ebp]
	jbe	$LN18@ft_debug_i
; Line 174
	mov	ecx, DWORD PTR _p$8[ebp]
	sub	ecx, DWORD PTR _q$7[ebp]
	mov	DWORD PTR _len$4[ebp], ecx
; Line 175
	mov	DWORD PTR _level$3[ebp], -1
	mov	DWORD PTR _found$2[ebp], -1
; Line 178
	mov	DWORD PTR _n$6[ebp], 0
	jmp	SHORT $LN17@ft_debug_i
$LN16@ft_debug_i:
	mov	edx, DWORD PTR _n$6[ebp]
	add	edx, 1
	mov	DWORD PTR _n$6[ebp], edx
$LN17@ft_debug_i:
	cmp	DWORD PTR _n$6[ebp], 95			; 0000005fH
	jge	SHORT $LN15@ft_debug_i
; Line 180
	mov	eax, DWORD PTR _n$6[ebp]
	mov	ecx, DWORD PTR _ft_trace_toggles[eax*4]
	mov	DWORD PTR _toggle$1[ebp], ecx
; Line 183
	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN14@ft_debug_i
$LN13@ft_debug_i:
	mov	edx, DWORD PTR _i$5[ebp]
	add	edx, 1
	mov	DWORD PTR _i$5[ebp], edx
$LN14@ft_debug_i:
	mov	eax, DWORD PTR _i$5[ebp]
	cmp	eax, DWORD PTR _len$4[ebp]
	jge	SHORT $LN12@ft_debug_i
; Line 185
	mov	ecx, DWORD PTR _toggle$1[ebp]
	add	ecx, DWORD PTR _i$5[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _q$7[ebp]
	add	eax, DWORD PTR _i$5[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN11@ft_debug_i
; Line 186
	jmp	SHORT $LN12@ft_debug_i
$LN11@ft_debug_i:
; Line 187
	jmp	SHORT $LN13@ft_debug_i
$LN12@ft_debug_i:
; Line 189
	mov	edx, DWORD PTR _i$5[ebp]
	cmp	edx, DWORD PTR _len$4[ebp]
	jne	SHORT $LN10@ft_debug_i
	mov	eax, DWORD PTR _toggle$1[ebp]
	add	eax, DWORD PTR _i$5[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN10@ft_debug_i
; Line 191
	mov	edx, DWORD PTR _n$6[ebp]
	mov	DWORD PTR _found$2[ebp], edx
; Line 192
	jmp	SHORT $LN15@ft_debug_i
$LN10@ft_debug_i:
; Line 194
	jmp	SHORT $LN16@ft_debug_i
$LN15@ft_debug_i:
; Line 197
	mov	eax, DWORD PTR _p$8[ebp]
	add	eax, 1
	mov	DWORD PTR _p$8[ebp], eax
; Line 198
	mov	ecx, DWORD PTR _p$8[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN9@ft_debug_i
; Line 200
	mov	eax, DWORD PTR _p$8[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR _level$3[ebp], ecx
; Line 201
	js	SHORT $LN7@ft_debug_i
	cmp	DWORD PTR _level$3[ebp], 7
	jle	SHORT $LN9@ft_debug_i
$LN7@ft_debug_i:
; Line 202
	mov	DWORD PTR _level$3[ebp], -1
$LN9@ft_debug_i:
; Line 205
	cmp	DWORD PTR _found$2[ebp], 0
	jl	SHORT $LN18@ft_debug_i
	cmp	DWORD PTR _level$3[ebp], 0
	jl	SHORT $LN18@ft_debug_i
; Line 207
	cmp	DWORD PTR _found$2[ebp], 0
	jne	SHORT $LN5@ft_debug_i
; Line 210
	mov	DWORD PTR _n$6[ebp], 0
	jmp	SHORT $LN4@ft_debug_i
$LN3@ft_debug_i:
	mov	edx, DWORD PTR _n$6[ebp]
	add	edx, 1
	mov	DWORD PTR _n$6[ebp], edx
$LN4@ft_debug_i:
	cmp	DWORD PTR _n$6[ebp], 95			; 0000005fH
	jge	SHORT $LN2@ft_debug_i
; Line 211
	mov	eax, DWORD PTR _n$6[ebp]
	mov	ecx, DWORD PTR _level$3[ebp]
	mov	DWORD PTR _ft_trace_levels[eax*4], ecx
	jmp	SHORT $LN3@ft_debug_i
$LN2@ft_debug_i:
; Line 213
	jmp	SHORT $LN18@ft_debug_i
$LN5@ft_debug_i:
; Line 214
	mov	edx, DWORD PTR _found$2[ebp]
	mov	eax, DWORD PTR _level$3[ebp]
	mov	DWORD PTR _ft_trace_levels[edx*4], eax
$LN18@ft_debug_i:
; Line 217
	jmp	$LN25@ft_debug_i
$LN28@ft_debug_i:
; Line 219
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_debug_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = 8						; size = 4
_line$ = 12						; size = 4
_file$ = 16						; size = 4
_FT_Throw PROC
; File d:\mozilla\modules\freetype2\builds\windows\ftdebug.c
; Line 101
	push	ebp
	mov	ebp, esp
; Line 102
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR _error$[ebp], eax
; Line 103
	mov	ecx, DWORD PTR _line$[ebp]
	mov	DWORD PTR _line$[ebp], ecx
; Line 104
	mov	edx, DWORD PTR _file$[ebp]
	mov	DWORD PTR _file$[ebp], edx
; Line 106
	xor	eax, eax
; Line 107
	pop	ebp
	ret	0
_FT_Throw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ap$ = -4						; size = 4
_fmt$ = 8						; size = 4
_FT_Panic PROC
; File d:\mozilla\modules\freetype2\builds\windows\ftdebug.c
; Line 81
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 86
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 87
	mov	esi, esp
	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	push	OFFSET ?buf@?1??FT_Panic@@9@9
	call	DWORD PTR __imp__vsprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 88
	mov	esi, esp
	push	OFFSET ?buf@?1??FT_Panic@@9@9
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 89
	mov	DWORD PTR _ap$[ebp], 0
; Line 91
	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@FT_Panic:
; Line 92
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Panic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ap$ = -4						; size = 4
_fmt$ = 8						; size = 4
_FT_Message PROC
; File d:\mozilla\modules\freetype2\builds\windows\ftdebug.c
; Line 62
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 67
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 68
	mov	esi, esp
	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	call	DWORD PTR __imp__vprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _ap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$[ebp]
	push	ecx
	push	OFFSET ?buf@?1??FT_Message@@9@9
	call	DWORD PTR __imp__vsprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	mov	esi, esp
	push	OFFSET ?buf@?1??FT_Message@@9@9
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 72
	mov	DWORD PTR _ap$[ebp], 0
; Line 73
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Message ENDP
_TEXT	ENDS
END
