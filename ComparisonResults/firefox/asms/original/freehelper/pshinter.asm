; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\pshinter\pshinter.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_pshinter_module_class
CONST	SEGMENT
_pshinter_interface DD FLAT:_pshinter_get_globals_funcs
	DD	FLAT:_pshinter_get_t1_funcs
	DD	FLAT:_pshinter_get_t2_funcs
_pshinter_module_class DD 00H
	DD	0a8H
	DD	FLAT:$SG9506
	DD	010000H
	DD	020000H
	DD	FLAT:_pshinter_interface
	DD	FLAT:_ps_hinter_init
	DD	FLAT:_ps_hinter_done
	DD	00H
CONST	ENDS
_DATA	SEGMENT
$SG8199	DB	'd:\mozilla\modules\freetype2\src\pshinter\pshrec.c', 00H
	ORG $+5
$SG8221	DB	'ps_hints_t2mask: called with invalid bitcount %d (instea'
	DB	'd of %d)', 0aH, 00H
	ORG $+6
$SG8244	DB	'ps_hints_t2counter: called with invalid bitcount %d (ins'
	DB	'tead of %d)', 0aH, 00H
	ORG $+3
$SG9506	DB	'pshinter', 00H
	ORG $+3
$SG8659	DB	'psh_hint_table_record: invalid hint index %d', 0aH, 00H
	ORG $+2
$SG8674	DB	'psh_hint_table_record: too many sorted hints!  BUG!', 0aH
	DB	00H
	ORG $+3
$SG8730	DB	'psh_hint_table_init: missing/incorrect hint masks', 0aH, 00H
	ORG $+1
$SG8761	DB	'psh_hint_tableactivate_mask: too many active hints', 0aH
	DB	00H
$SG7954	DB	'ps_mask_table_merge: ignoring invalid indices (%d,%d)', 0aH
	DB	00H
	ORG $+1
$SG8105	DB	'd:\mozilla\modules\freetype2\src\pshinter\pshrec.c', 00H
	ORG $+1
$SG8110	DB	'ps_hints_open: invalid charstring type', 0aH, 00H
$SG8128	DB	'ps_hints_stem: invalid dimension (%d) used', 0aH, 00H
$SG8144	DB	'ps_hints_stem: could not add stem (%d,%d) to hints table'
	DB	0aH, 00H
	ORG $+2
$SG8150	DB	'ps_hints_stem: called with invalid hint type (%d)', 0aH, 00H
	ORG $+1
$SG8171	DB	'ps_hints_t1stem3: invalid dimension (%d) used', 0aH, 00H
	ORG $+1
$SG8182	DB	'ps_hints_t1stem3: called with invalid hint type', 0aH, 00H
	ORG $+3
$SG8183	DB	'd:\mozilla\modules\freetype2\src\pshinter\pshrec.c', 00H
	ORG $+1
$SG8184	DB	'ps_hints_t1stem3: could not add counter stems to table', 0aH
	DB	00H
_DATA	ENDS
PUBLIC	_ps_hints_apply
EXTRN	_memset:PROC
EXTRN	__imp__memmove:PROC
EXTRN	_FT_MulDiv:PROC
EXTRN	_FT_DivFix:PROC
EXTRN	_FT_RoundFix:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_ft_corner_orientation:PROC
EXTRN	_ft_corner_is_flat:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_pshinter_get_t2_funcs PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshmod.c
; Line 91
	push	ebp
	mov	ebp, esp
; Line 92
	mov	eax, DWORD PTR _module$[ebp]
	add	eax, 140				; 0000008cH
; Line 93
	pop	ebp
	ret	0
_pshinter_get_t2_funcs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_pshinter_get_t1_funcs PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshmod.c
; Line 83
	push	ebp
	mov	ebp, esp
; Line 84
	mov	eax, DWORD PTR _module$[ebp]
	add	eax, 112				; 00000070H
; Line 85
	pop	ebp
	ret	0
_pshinter_get_t1_funcs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_pshinter_get_globals_funcs PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshmod.c
; Line 75
	push	ebp
	mov	ebp, esp
; Line 76
	mov	eax, DWORD PTR _module$[ebp]
	add	eax, 100				; 00000064H
; Line 77
	pop	ebp
	ret	0
_pshinter_get_globals_funcs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ph$ = -8						; size = 4
_memory$ = -4						; size = 4
_module$ = 8						; size = 4
_ps_hinter_init PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshmod.c
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 54
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 55
	mov	edx, DWORD PTR _module$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _ph$[ebp], edx
; Line 58
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _module$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_ps_hints_init
	add	esp, 8
; Line 60
	mov	edx, DWORD PTR _module$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_psh_globals_funcs_init
	add	esp, 4
; Line 62
	mov	eax, DWORD PTR _module$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	call	_t1_hints_funcs_init
	add	esp, 4
; Line 63
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR _ph$[ebp]
	mov	DWORD PTR [ecx+112], edx
; Line 65
	mov	eax, DWORD PTR _module$[ebp]
	add	eax, 140				; 0000008cH
	push	eax
	call	_t2_hints_funcs_init
	add	esp, 4
; Line 66
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR _ph$[ebp]
	mov	DWORD PTR [ecx+140], edx
; Line 68
	xor	eax, eax
; Line 69
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_hinter_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_ps_hinter_done PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshmod.c
; Line 42
	push	ebp
	mov	ebp, esp
; Line 43
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR [eax+112], 0
; Line 44
	mov	ecx, DWORD PTR _module$[ebp]
	mov	DWORD PTR [ecx+140], 0
; Line 46
	mov	edx, DWORD PTR _module$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_ps_hints_done
	add	esp, 4
; Line 47
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ps_hinter_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_scale_ab$1 = -72					; size = 4
_cur_c$2 = -68						; size = 4
_org_ac$3 = -64						; size = 4
_org_c$4 = -60						; size = 4
_cur_ab$5 = -56						; size = 4
_cur_a$6 = -52						; size = 4
_org_ab$7 = -48						; size = 4
_org_a$8 = -44						; size = 4
_fit_count$9 = -40					; size = 4
_point$10 = -36						; size = 4
_next$11 = -32						; size = 4
_first$12 = -28						; size = 4
_start$13 = -24						; size = 4
_num_contours$ = -20					; size = 4
_contour$ = -16						; size = 4
_delta$ = -12						; size = 4
_scale$ = -8						; size = 4
_dim$ = -4						; size = 4
_glyph$ = 8						; size = 4
_dimension$ = 12					; size = 4
_psh_glyph_interpolate_other_points PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 2033
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2034
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	imul	edx, DWORD PTR _dimension$[ebp], 204
	lea	eax, DWORD PTR [ecx+edx+4]
	mov	DWORD PTR _dim$[ebp], eax
; Line 2035
	mov	ecx, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	mov	DWORD PTR _scale$[ebp], edx
; Line 2036
	mov	eax, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	DWORD PTR _delta$[ebp], ecx
; Line 2037
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _contour$[ebp], eax
; Line 2038
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _num_contours$[ebp], edx
; Line 2041
	jmp	SHORT $LN34@psh_glyph_
$LN33@psh_glyph_:
	mov	eax, DWORD PTR _num_contours$[ebp]
	sub	eax, 1
	mov	DWORD PTR _num_contours$[ebp], eax
	mov	ecx, DWORD PTR _contour$[ebp]
	add	ecx, 8
	mov	DWORD PTR _contour$[ebp], ecx
$LN34@psh_glyph_:
	cmp	DWORD PTR _num_contours$[ebp], 0
	jbe	$LN35@psh_glyph_
; Line 2043
	mov	edx, DWORD PTR _contour$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _start$13[ebp], eax
; Line 2049
	mov	ecx, DWORD PTR _contour$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	add	edx, DWORD PTR _start$13[ebp]
	mov	DWORD PTR _next$11[ebp], edx
; Line 2050
	mov	DWORD PTR _fit_count$9[ebp], 0
; Line 2051
	mov	DWORD PTR _first$12[ebp], 0
; Line 2053
	mov	eax, DWORD PTR _start$13[ebp]
	mov	DWORD PTR _point$10[ebp], eax
	jmp	SHORT $LN31@psh_glyph_
$LN30@psh_glyph_:
	mov	ecx, DWORD PTR _point$10[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _point$10[ebp], ecx
$LN31@psh_glyph_:
	mov	edx, DWORD PTR _point$10[ebp]
	cmp	edx, DWORD PTR _next$11[ebp]
	jae	SHORT $LN29@psh_glyph_
; Line 2054
	mov	eax, DWORD PTR _point$10[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 32					; 00000020H
	je	SHORT $LN28@psh_glyph_
; Line 2056
	cmp	DWORD PTR _first$12[ebp], 0
	jne	SHORT $LN27@psh_glyph_
; Line 2057
	mov	edx, DWORD PTR _point$10[ebp]
	mov	DWORD PTR _first$12[ebp], edx
$LN27@psh_glyph_:
; Line 2059
	mov	eax, DWORD PTR _fit_count$9[ebp]
	add	eax, 1
	mov	DWORD PTR _fit_count$9[ebp], eax
$LN28@psh_glyph_:
; Line 2060
	jmp	SHORT $LN30@psh_glyph_
$LN29@psh_glyph_:
; Line 2064
	cmp	DWORD PTR _fit_count$9[ebp], 2
	jae	SHORT $LN26@psh_glyph_
; Line 2066
	cmp	DWORD PTR _fit_count$9[ebp], 1
	jne	SHORT $LN25@psh_glyph_
; Line 2067
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _first$12[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _first$12[ebp]
	mov	edx, DWORD PTR [ecx+36]
	sub	edx, eax
	mov	DWORD PTR _delta$[ebp], edx
$LN25@psh_glyph_:
; Line 2069
	mov	eax, DWORD PTR _start$13[ebp]
	mov	DWORD PTR _point$10[ebp], eax
	jmp	SHORT $LN24@psh_glyph_
$LN23@psh_glyph_:
	mov	ecx, DWORD PTR _point$10[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _point$10[ebp], ecx
$LN24@psh_glyph_:
	mov	edx, DWORD PTR _point$10[ebp]
	cmp	edx, DWORD PTR _next$11[ebp]
	jae	SHORT $LN22@psh_glyph_
; Line 2070
	mov	eax, DWORD PTR _point$10[ebp]
	cmp	eax, DWORD PTR _first$12[ebp]
	je	SHORT $LN21@psh_glyph_
; Line 2071
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _point$10[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _point$10[ebp]
	mov	DWORD PTR [ecx+36], eax
$LN21@psh_glyph_:
; Line 2073
	jmp	SHORT $LN23@psh_glyph_
$LN22@psh_glyph_:
	jmp	$Next_Contour$37
$LN26@psh_glyph_:
; Line 2078
	mov	edx, DWORD PTR _first$12[ebp]
	mov	DWORD PTR _start$13[ebp], edx
$LN17@psh_glyph_:
; Line 2084
	mov	eax, DWORD PTR _first$12[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$11[ebp], ecx
; Line 2085
	mov	edx, DWORD PTR _next$11[ebp]
	cmp	edx, DWORD PTR _start$13[ebp]
	jne	SHORT $LN15@psh_glyph_
; Line 2086
	jmp	$Next_Contour$37
$LN15@psh_glyph_:
; Line 2088
	mov	eax, DWORD PTR _next$11[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN14@psh_glyph_
; Line 2089
	jmp	SHORT $LN13@psh_glyph_
$LN14@psh_glyph_:
; Line 2091
	mov	edx, DWORD PTR _next$11[ebp]
	mov	DWORD PTR _first$12[ebp], edx
; Line 2092
	jmp	SHORT $LN17@psh_glyph_
$LN13@psh_glyph_:
; Line 2097
	mov	eax, DWORD PTR _next$11[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$11[ebp], ecx
; Line 2098
	mov	edx, DWORD PTR _next$11[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 32					; 00000020H
	je	SHORT $LN11@psh_glyph_
; Line 2099
	jmp	SHORT $LN12@psh_glyph_
$LN11@psh_glyph_:
; Line 2100
	jmp	SHORT $LN13@psh_glyph_
$LN12@psh_glyph_:
; Line 2109
	mov	ecx, DWORD PTR _first$12[ebp]
	mov	edx, DWORD PTR _next$11[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx+28]
	jg	SHORT $LN10@psh_glyph_
; Line 2111
	mov	ecx, DWORD PTR _first$12[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _org_a$8[ebp], edx
; Line 2112
	mov	eax, DWORD PTR _first$12[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _cur_a$6[ebp], ecx
; Line 2113
	mov	edx, DWORD PTR _next$11[ebp]
	mov	eax, DWORD PTR [edx+28]
	sub	eax, DWORD PTR _org_a$8[ebp]
	mov	DWORD PTR _org_ab$7[ebp], eax
; Line 2114
	mov	ecx, DWORD PTR _next$11[ebp]
	mov	edx, DWORD PTR [ecx+36]
	sub	edx, DWORD PTR _cur_a$6[ebp]
	mov	DWORD PTR _cur_ab$5[ebp], edx
; Line 2116
	jmp	SHORT $LN9@psh_glyph_
$LN10@psh_glyph_:
; Line 2118
	mov	eax, DWORD PTR _next$11[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _org_a$8[ebp], ecx
; Line 2119
	mov	edx, DWORD PTR _next$11[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _cur_a$6[ebp], eax
; Line 2120
	mov	ecx, DWORD PTR _first$12[ebp]
	mov	edx, DWORD PTR [ecx+28]
	sub	edx, DWORD PTR _org_a$8[ebp]
	mov	DWORD PTR _org_ab$7[ebp], edx
; Line 2121
	mov	eax, DWORD PTR _first$12[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, DWORD PTR _cur_a$6[ebp]
	mov	DWORD PTR _cur_ab$5[ebp], ecx
$LN9@psh_glyph_:
; Line 2124
	mov	DWORD PTR _scale_ab$1[ebp], 65536	; 00010000H
; Line 2125
	cmp	DWORD PTR _org_ab$7[ebp], 0
	jle	SHORT $LN8@psh_glyph_
; Line 2126
	mov	edx, DWORD PTR _org_ab$7[ebp]
	push	edx
	mov	eax, DWORD PTR _cur_ab$5[ebp]
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _scale_ab$1[ebp], eax
$LN8@psh_glyph_:
; Line 2128
	mov	ecx, DWORD PTR _first$12[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _point$10[ebp], edx
$LN7@psh_glyph_:
; Line 2131
	mov	eax, DWORD PTR _point$10[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _org_c$4[ebp], ecx
; Line 2132
	mov	edx, DWORD PTR _org_c$4[ebp]
	sub	edx, DWORD PTR _org_a$8[ebp]
	mov	DWORD PTR _org_ac$3[ebp], edx
; Line 2134
	cmp	DWORD PTR _org_ac$3[ebp], 0
	jg	SHORT $LN4@psh_glyph_
; Line 2137
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _org_ac$3[ebp]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _cur_a$6[ebp]
	mov	DWORD PTR _cur_c$2[ebp], eax
	jmp	SHORT $LN3@psh_glyph_
$LN4@psh_glyph_:
; Line 2139
	mov	edx, DWORD PTR _org_ac$3[ebp]
	cmp	edx, DWORD PTR _org_ab$7[ebp]
	jl	SHORT $LN2@psh_glyph_
; Line 2142
	mov	esi, DWORD PTR _cur_a$6[ebp]
	add	esi, DWORD PTR _cur_ab$5[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _org_ac$3[ebp]
	sub	ecx, DWORD PTR _org_ab$7[ebp]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	add	esi, eax
	mov	DWORD PTR _cur_c$2[ebp], esi
; Line 2144
	jmp	SHORT $LN3@psh_glyph_
$LN2@psh_glyph_:
; Line 2147
	mov	edx, DWORD PTR _scale_ab$1[ebp]
	push	edx
	mov	eax, DWORD PTR _org_ac$3[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _cur_a$6[ebp]
	mov	DWORD PTR _cur_c$2[ebp], eax
$LN3@psh_glyph_:
; Line 2150
	mov	ecx, DWORD PTR _point$10[ebp]
	mov	edx, DWORD PTR _cur_c$2[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 2152
	mov	eax, DWORD PTR _point$10[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _point$10[ebp], ecx
; Line 2154
	mov	edx, DWORD PTR _point$10[ebp]
	cmp	edx, DWORD PTR _next$11[ebp]
	jne	$LN7@psh_glyph_
; Line 2158
	mov	eax, DWORD PTR _next$11[ebp]
	mov	DWORD PTR _first$12[ebp], eax
; Line 2160
	mov	ecx, DWORD PTR _first$12[ebp]
	cmp	ecx, DWORD PTR _start$13[ebp]
	jne	$LN17@psh_glyph_
$Next_Contour$37:
; Line 2164
	jmp	$LN33@psh_glyph_
$LN35@psh_glyph_:
; Line 2165
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_glyph_interpolate_other_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_u$1 = -140						; size = 4
_nn$2 = -136						; size = 4
_after$3 = -132						; size = 4
_before$4 = -128					; size = 4
_insert$5 = -124					; size = 4
_error$6 = -116						; size = 4
_point$ = -108						; size = 4
_points_end$ = -104					; size = 4
_points$ = -100						; size = 4
_num_strongs$ = -96					; size = 4
_strongs_0$ = -88					; size = 64
_strongs$ = -20						; size = 4
_memory$ = -16						; size = 4
_scale$ = -12						; size = 4
_dim$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_glyph$ = 8						; size = 4
_dimension$ = 12					; size = 4
_psh_glyph_interpolate_normal_points PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1879
	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-140]
	mov	ecx, 35					; 00000023H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1884
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	imul	edx, DWORD PTR _dimension$[ebp], 204
	lea	eax, DWORD PTR [ecx+edx+4]
	mov	DWORD PTR _dim$[ebp], eax
; Line 1885
	mov	ecx, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	mov	DWORD PTR _scale$[ebp], edx
; Line 1886
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1888
	mov	DWORD PTR _strongs$[ebp], 0
; Line 1890
	mov	DWORD PTR _num_strongs$[ebp], 0
; Line 1892
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _points$[ebp], eax
; Line 1893
	mov	ecx, DWORD PTR _glyph$[ebp]
	imul	edx, DWORD PTR [ecx], 40
	add	edx, DWORD PTR _points$[ebp]
	mov	DWORD PTR _points_end$[ebp], edx
; Line 1898
	mov	eax, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point$[ebp], eax
	jmp	SHORT $LN44@psh_glyph_
$LN43@psh_glyph_:
	mov	ecx, DWORD PTR _point$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], ecx
$LN44@psh_glyph_:
	mov	edx, DWORD PTR _point$[ebp]
	cmp	edx, DWORD PTR _points_end$[ebp]
	jae	SHORT $LN42@psh_glyph_
; Line 1900
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 16					; 00000010H
	je	SHORT $LN41@psh_glyph_
; Line 1901
	mov	edx, DWORD PTR _num_strongs$[ebp]
	add	edx, 1
	mov	DWORD PTR _num_strongs$[ebp], edx
$LN41@psh_glyph_:
; Line 1902
	jmp	SHORT $LN43@psh_glyph_
$LN42@psh_glyph_:
; Line 1904
	cmp	DWORD PTR _num_strongs$[ebp], 0
	jne	SHORT $LN40@psh_glyph_
; Line 1905
	jmp	$LN45@psh_glyph_
$LN40@psh_glyph_:
; Line 1909
	cmp	DWORD PTR _num_strongs$[ebp], 16	; 00000010H
	ja	SHORT $LN39@psh_glyph_
; Line 1910
	lea	eax, DWORD PTR _strongs_0$[ebp]
	mov	DWORD PTR _strongs$[ebp], eax
; Line 1911
	jmp	SHORT $LN38@psh_glyph_
$LN39@psh_glyph_:
; Line 1916
	lea	ecx, DWORD PTR _error$6[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _num_strongs$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _strongs$[ebp], eax
	cmp	DWORD PTR _error$6[ebp], 0
	je	SHORT $LN38@psh_glyph_
; Line 1917
	jmp	$LN45@psh_glyph_
$LN38@psh_glyph_:
; Line 1920
	mov	DWORD PTR _num_strongs$[ebp], 0
; Line 1921
	mov	ecx, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point$[ebp], ecx
	jmp	SHORT $LN36@psh_glyph_
$LN35@psh_glyph_:
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
$LN36@psh_glyph_:
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _points_end$[ebp]
	jae	$LN34@psh_glyph_
; Line 1926
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 16					; 00000010H
	jne	SHORT $LN33@psh_glyph_
; Line 1927
	jmp	SHORT $LN35@psh_glyph_
$LN33@psh_glyph_:
; Line 1929
	mov	eax, DWORD PTR _num_strongs$[ebp]
	mov	ecx, DWORD PTR _strongs$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _insert$5[ebp], edx
	jmp	SHORT $LN32@psh_glyph_
$LN31@psh_glyph_:
	mov	eax, DWORD PTR _insert$5[ebp]
	sub	eax, 4
	mov	DWORD PTR _insert$5[ebp], eax
$LN32@psh_glyph_:
	mov	ecx, DWORD PTR _insert$5[ebp]
	cmp	ecx, DWORD PTR _strongs$[ebp]
	jbe	SHORT $LN30@psh_glyph_
; Line 1931
	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR _insert$5[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN29@psh_glyph_
; Line 1932
	jmp	SHORT $LN30@psh_glyph_
$LN29@psh_glyph_:
; Line 1934
	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _insert$5[ebp]
	mov	esi, DWORD PTR _insert$5[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax
; Line 1935
	jmp	SHORT $LN31@psh_glyph_
$LN30@psh_glyph_:
; Line 1936
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _insert$5[ebp]
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 1937
	mov	edx, DWORD PTR _num_strongs$[ebp]
	add	edx, 1
	mov	DWORD PTR _num_strongs$[ebp], edx
; Line 1938
	jmp	$LN35@psh_glyph_
$LN34@psh_glyph_:
; Line 1941
	mov	eax, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point$[ebp], eax
	jmp	SHORT $LN28@psh_glyph_
$LN27@psh_glyph_:
	mov	ecx, DWORD PTR _point$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], ecx
$LN28@psh_glyph_:
	mov	edx, DWORD PTR _point$[ebp]
	cmp	edx, DWORD PTR _points_end$[ebp]
	jae	$LN26@psh_glyph_
; Line 1943
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 16					; 00000010H
	je	SHORT $LN25@psh_glyph_
; Line 1944
	jmp	SHORT $LN27@psh_glyph_
$LN25@psh_glyph_:
; Line 1947
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 2
	je	SHORT $LN24@psh_glyph_
; Line 1950
	mov	ecx, DWORD PTR _point$[ebp]
	movsx	edx, BYTE PTR [ecx+20]
	cmp	edx, 4
	je	SHORT $LN22@psh_glyph_
	mov	eax, DWORD PTR _point$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	mov	edx, DWORD PTR _point$[ebp]
	movsx	eax, BYTE PTR [edx+21]
	cmp	ecx, eax
	je	SHORT $LN23@psh_glyph_
$LN22@psh_glyph_:
; Line 1951
	jmp	SHORT $LN27@psh_glyph_
$LN23@psh_glyph_:
; Line 1954
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 64					; 00000040H
	jne	SHORT $LN21@psh_glyph_
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 4
	jne	SHORT $LN21@psh_glyph_
; Line 1955
	jmp	SHORT $LN27@psh_glyph_
$LN21@psh_glyph_:
; Line 1957
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, -3					; fffffffdH
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN24@psh_glyph_:
; Line 1966
	mov	DWORD PTR _nn$2[ebp], 0
	jmp	SHORT $LN20@psh_glyph_
$LN19@psh_glyph_:
	mov	edx, DWORD PTR _nn$2[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$2[ebp], edx
$LN20@psh_glyph_:
	mov	eax, DWORD PTR _nn$2[ebp]
	cmp	eax, DWORD PTR _num_strongs$[ebp]
	jae	SHORT $LN18@psh_glyph_
; Line 1967
	mov	ecx, DWORD PTR _nn$2[ebp]
	mov	edx, DWORD PTR _strongs$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+28]
	jle	SHORT $LN17@psh_glyph_
; Line 1968
	jmp	SHORT $LN18@psh_glyph_
$LN17@psh_glyph_:
; Line 1970
	jmp	SHORT $LN19@psh_glyph_
$LN18@psh_glyph_:
	cmp	DWORD PTR _nn$2[ebp], 0
	jne	SHORT $LN16@psh_glyph_
; Line 1972
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _strongs$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _after$3[ebp], eax
; Line 1976
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR _after$3[ebp]
	mov	ecx, DWORD PTR [edx+28]
	sub	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _after$3[ebp]
	add	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 1978
	jmp	$LN15@psh_glyph_
$LN16@psh_glyph_:
; Line 1980
	mov	edx, DWORD PTR _nn$2[ebp]
	mov	eax, DWORD PTR _strongs$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4-4]
	mov	DWORD PTR _before$4[ebp], ecx
; Line 1982
	mov	edx, DWORD PTR _num_strongs$[ebp]
	mov	DWORD PTR _nn$2[ebp], edx
	jmp	SHORT $LN14@psh_glyph_
$LN13@psh_glyph_:
	mov	eax, DWORD PTR _nn$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _nn$2[ebp], eax
$LN14@psh_glyph_:
	cmp	DWORD PTR _nn$2[ebp], 0
	jbe	SHORT $LN12@psh_glyph_
; Line 1983
	mov	ecx, DWORD PTR _nn$2[ebp]
	mov	edx, DWORD PTR _strongs$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+28]
	jge	SHORT $LN11@psh_glyph_
; Line 1984
	jmp	SHORT $LN12@psh_glyph_
$LN11@psh_glyph_:
; Line 1986
	jmp	SHORT $LN13@psh_glyph_
$LN12@psh_glyph_:
	mov	eax, DWORD PTR _nn$2[ebp]
	cmp	eax, DWORD PTR _num_strongs$[ebp]
	jne	SHORT $LN10@psh_glyph_
; Line 1988
	mov	ecx, DWORD PTR _nn$2[ebp]
	mov	edx, DWORD PTR _strongs$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _before$4[ebp], eax
; Line 1992
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR _before$4[ebp]
	mov	ecx, DWORD PTR [edx+28]
	sub	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _before$4[ebp]
	add	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 1994
	jmp	$LN15@psh_glyph_
$LN10@psh_glyph_:
; Line 1999
	mov	edx, DWORD PTR _nn$2[ebp]
	mov	eax, DWORD PTR _strongs$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _after$3[ebp], ecx
; Line 2002
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _u$1[ebp], eax
; Line 2004
	mov	ecx, DWORD PTR _before$4[ebp]
	mov	edx, DWORD PTR _u$1[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	jne	SHORT $LN8@psh_glyph_
; Line 2005
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _before$4[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN15@psh_glyph_
$LN8@psh_glyph_:
; Line 2007
	mov	eax, DWORD PTR _after$3[ebp]
	mov	ecx, DWORD PTR _u$1[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN6@psh_glyph_
; Line 2008
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR _after$3[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx
; Line 2010
	jmp	SHORT $LN15@psh_glyph_
$LN6@psh_glyph_:
; Line 2014
	mov	edx, DWORD PTR _after$3[ebp]
	mov	eax, DWORD PTR _before$4[ebp]
	mov	ecx, DWORD PTR [edx+28]
	sub	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _after$3[ebp]
	mov	eax, DWORD PTR _before$4[ebp]
	mov	ecx, DWORD PTR [edx+36]
	sub	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _before$4[ebp]
	mov	eax, DWORD PTR _u$1[ebp]
	sub	eax, DWORD PTR [edx+28]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _before$4[ebp]
	add	eax, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [edx+36], eax
$LN15@psh_glyph_:
; Line 2017
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 2019
	jmp	$LN27@psh_glyph_
$LN26@psh_glyph_:
; Line 2021
	lea	eax, DWORD PTR _strongs_0$[ebp]
	cmp	DWORD PTR _strongs$[ebp], eax
	je	SHORT $LN45@psh_glyph_
$LN3@psh_glyph_:
; Line 2022
	mov	ecx, DWORD PTR _strongs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _strongs$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@psh_glyph_
$LN45@psh_glyph_:
; Line 2026
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN50@psh_glyph_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 140				; 0000008cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN50@psh_glyph_:
	DD	2
	DD	$LN49@psh_glyph_
$LN49@psh_glyph_:
	DD	-88					; ffffffa8H
	DD	64					; 00000040H
	DD	$LN47@psh_glyph_
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN48@psh_glyph_
$LN48@psh_glyph_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN47@psh_glyph_:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	48					; 00000030H
	DB	0
_psh_glyph_interpolate_normal_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_delta$1 = -24						; size = 4
_hint$2 = -20						; size = 4
_point$ = -16						; size = 4
_count$ = -12						; size = 4
_scale$ = -8						; size = 4
_dim$ = -4						; size = 4
_glyph$ = 8						; size = 4
_dimension$ = 12					; size = 4
_psh_glyph_interpolate_strong_points PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1828
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1829
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	imul	edx, DWORD PTR _dimension$[ebp], 204
	lea	eax, DWORD PTR [ecx+edx+4]
	mov	DWORD PTR _dim$[ebp], eax
; Line 1830
	mov	ecx, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	mov	DWORD PTR _scale$[ebp], edx
; Line 1832
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
; Line 1833
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _point$[ebp], eax
; Line 1836
	jmp	SHORT $LN12@psh_glyph_
$LN11@psh_glyph_:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
$LN12@psh_glyph_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN13@psh_glyph_
; Line 1838
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hint$2[ebp], ecx
; Line 1841
	cmp	DWORD PTR _hint$2[ebp], 0
	je	$LN9@psh_glyph_
; Line 1846
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 512				; 00000200H
	je	SHORT $LN8@psh_glyph_
; Line 1847
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR _hint$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+36], eax
	jmp	$LN7@psh_glyph_
$LN8@psh_glyph_:
; Line 1849
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1024				; 00000400H
	je	SHORT $LN6@psh_glyph_
; Line 1850
	mov	eax, DWORD PTR _hint$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _hint$2[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _point$[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 1852
	jmp	$LN7@psh_glyph_
$LN6@psh_glyph_:
; Line 1854
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR _hint$2[ebp]
	mov	eax, DWORD PTR [ecx+28]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR _delta$1[ebp], eax
; Line 1856
	cmp	DWORD PTR _delta$1[ebp], 0
	jg	SHORT $LN4@psh_glyph_
; Line 1857
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _delta$1[ebp]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _hint$2[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [edx+36], eax
	jmp	SHORT $LN7@psh_glyph_
$LN4@psh_glyph_:
; Line 1859
	mov	eax, DWORD PTR _hint$2[ebp]
	mov	ecx, DWORD PTR _delta$1[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN2@psh_glyph_
; Line 1861
	mov	edx, DWORD PTR _hint$2[ebp]
	mov	esi, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _hint$2[ebp]
	add	esi, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hint$2[ebp]
	mov	eax, DWORD PTR _delta$1[ebp]
	sub	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	add	esi, eax
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [ecx+36], esi
; Line 1863
	jmp	SHORT $LN7@psh_glyph_
$LN2@psh_glyph_:
; Line 1866
	mov	edx, DWORD PTR _hint$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _hint$2[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _delta$1[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _hint$2[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [edx+36], eax
$LN7@psh_glyph_:
; Line 1868
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN9@psh_glyph_:
; Line 1870
	jmp	$LN11@psh_glyph_
$LN13@psh_glyph_:
; Line 1871
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_glyph_interpolate_strong_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_delta$1 = -32						; size = 4
_delta$2 = -28						; size = 4
_y$3 = -24						; size = 4
_point$ = -20						; size = 4
_blue_count$ = -16					; size = 4
_glyph_count$ = -12					; size = 4
_zone$ = -8						; size = 4
_table$ = -4						; size = 4
_blues$ = 8						; size = 4
_glyph$ = 12						; size = 4
_psh_glyph_find_blue_points PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1753
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1756
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _glyph_count$[ebp], ecx
; Line 1758
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _point$[ebp], eax
; Line 1761
	jmp	SHORT $LN19@psh_glyph_
$LN18@psh_glyph_:
	mov	ecx, DWORD PTR _glyph_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _glyph_count$[ebp], ecx
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
$LN19@psh_glyph_:
	cmp	DWORD PTR _glyph_count$[ebp], 0
	jbe	$LN20@psh_glyph_
; Line 1768
	mov	eax, DWORD PTR _point$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	cmp	ecx, 2
	je	SHORT $LN16@psh_glyph_
	mov	edx, DWORD PTR _point$[ebp]
	movsx	eax, BYTE PTR [edx+20]
	cmp	eax, -2					; fffffffeH
	je	SHORT $LN16@psh_glyph_
	mov	ecx, DWORD PTR _point$[ebp]
	movsx	edx, BYTE PTR [ecx+21]
	cmp	edx, 2
	je	SHORT $LN16@psh_glyph_
	mov	eax, DWORD PTR _point$[ebp]
	movsx	ecx, BYTE PTR [eax+21]
	cmp	ecx, -2					; fffffffeH
	je	SHORT $LN16@psh_glyph_
; Line 1769
	jmp	SHORT $LN18@psh_glyph_
$LN16@psh_glyph_:
; Line 1772
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 16					; 00000010H
	je	SHORT $LN15@psh_glyph_
; Line 1773
	jmp	SHORT $LN18@psh_glyph_
$LN15@psh_glyph_:
; Line 1775
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _y$3[ebp], edx
; Line 1778
	mov	eax, DWORD PTR _blues$[ebp]
	mov	DWORD PTR _table$[ebp], eax
; Line 1779
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _blue_count$[ebp], edx
; Line 1780
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 4
	mov	DWORD PTR _zone$[ebp], eax
; Line 1782
	jmp	SHORT $LN14@psh_glyph_
$LN13@psh_glyph_:
	mov	ecx, DWORD PTR _blue_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _blue_count$[ebp], ecx
	mov	edx, DWORD PTR _zone$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _zone$[ebp], edx
$LN14@psh_glyph_:
	cmp	DWORD PTR _blue_count$[ebp], 0
	jbe	SHORT $LN12@psh_glyph_
; Line 1784
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR _y$3[ebp]
	sub	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _delta$2[ebp], ecx
; Line 1787
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx+2076]
	neg	eax
	cmp	DWORD PTR _delta$2[ebp], eax
	jge	SHORT $LN11@psh_glyph_
; Line 1788
	jmp	SHORT $LN12@psh_glyph_
$LN11@psh_glyph_:
; Line 1790
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _blues$[ebp]
	add	edx, DWORD PTR [eax+2076]
	cmp	DWORD PTR _y$3[ebp], edx
	jg	SHORT $LN10@psh_glyph_
; Line 1791
	mov	ecx, DWORD PTR _blues$[ebp]
	movzx	edx, BYTE PTR [ecx+2080]
	test	edx, edx
	jne	SHORT $LN8@psh_glyph_
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR _delta$2[ebp]
	cmp	ecx, DWORD PTR [eax+2072]
	jg	SHORT $LN10@psh_glyph_
$LN8@psh_glyph_:
; Line 1793
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+36], ecx
; Line 1794
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+16]
	or	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1795
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+16]
	or	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN10@psh_glyph_:
; Line 1797
	jmp	$LN13@psh_glyph_
$LN12@psh_glyph_:
; Line 1800
	mov	edx, DWORD PTR _blues$[ebp]
	add	edx, 516				; 00000204H
	mov	DWORD PTR _table$[ebp], edx
; Line 1801
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _blue_count$[ebp], ecx
; Line 1802
	mov	edx, DWORD PTR _blue_count$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _table$[ebp]
	lea	ecx, DWORD PTR [eax+edx-28]
	mov	DWORD PTR _zone$[ebp], ecx
; Line 1804
	jmp	SHORT $LN7@psh_glyph_
$LN6@psh_glyph_:
	mov	edx, DWORD PTR _blue_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _blue_count$[ebp], edx
	mov	eax, DWORD PTR _zone$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR _zone$[ebp], eax
$LN7@psh_glyph_:
	cmp	DWORD PTR _blue_count$[ebp], 0
	jbe	SHORT $LN5@psh_glyph_
; Line 1806
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _y$3[ebp]
	mov	DWORD PTR _delta$1[ebp], edx
; Line 1809
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [eax+2076]
	neg	ecx
	cmp	DWORD PTR _delta$1[ebp], ecx
	jge	SHORT $LN4@psh_glyph_
; Line 1810
	jmp	SHORT $LN5@psh_glyph_
$LN4@psh_glyph_:
; Line 1812
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+2076]
	cmp	DWORD PTR _y$3[ebp], ecx
	jl	SHORT $LN3@psh_glyph_
; Line 1813
	mov	edx, DWORD PTR _blues$[ebp]
	movzx	eax, BYTE PTR [edx+2080]
	test	eax, eax
	jne	SHORT $LN1@psh_glyph_
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR _delta$1[ebp]
	cmp	edx, DWORD PTR [ecx+2072]
	jge	SHORT $LN3@psh_glyph_
$LN1@psh_glyph_:
; Line 1815
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+36], edx
; Line 1816
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 1817
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN3@psh_glyph_:
; Line 1819
	jmp	$LN6@psh_glyph_
$LN5@psh_glyph_:
; Line 1820
	jmp	$LN18@psh_glyph_
$LN20@psh_glyph_:
; Line 1821
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_glyph_find_blue_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv132 = -72						; size = 4
tv90 = -68						; size = 4
tv72 = -64						; size = 4
_point$1 = -60						; size = 4
_count$2 = -56						; size = 4
_point$3 = -52						; size = 4
_count$4 = -48						; size = 4
_point$5 = -44						; size = 4
_count$6 = -40						; size = 4
_next$7 = -36						; size = 4
_threshold$ = -32					; size = 4
_scale$ = -28						; size = 4
_dim$ = -24						; size = 4
_major_dir$ = -20					; size = 4
_first$ = -16						; size = 4
_num_masks$ = -12					; size = 4
_mask$ = -8						; size = 4
_table$ = -4						; size = 4
_glyph$ = 8						; size = 4
_dimension$ = 12					; size = 4
_psh_glyph_find_strong_points PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1670
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1674
	imul	eax, DWORD PTR _dimension$[ebp], 40
	mov	ecx, DWORD PTR _glyph$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28]
	mov	DWORD PTR _table$[ebp], edx
; Line 1675
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _mask$[ebp], edx
; Line 1676
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _num_masks$[ebp], edx
; Line 1677
	mov	DWORD PTR _first$[ebp], 0
; Line 1679
	cmp	DWORD PTR _dimension$[ebp], 0
	jne	SHORT $LN14@psh_glyph_
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN15@psh_glyph_
$LN14@psh_glyph_:
	mov	DWORD PTR tv72[ebp], 2
$LN15@psh_glyph_:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _major_dir$[ebp], eax
; Line 1680
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	imul	eax, DWORD PTR _dimension$[ebp], 204
	lea	ecx, DWORD PTR [edx+eax+4]
	mov	DWORD PTR _dim$[ebp], ecx
; Line 1681
	mov	edx, DWORD PTR _dim$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR _scale$[ebp], eax
; Line 1685
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	push	32					; 00000020H
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _threshold$[ebp], eax
; Line 1686
	cmp	DWORD PTR _threshold$[ebp], 30		; 0000001eH
	jle	SHORT $LN11@psh_glyph_
; Line 1687
	mov	DWORD PTR _threshold$[ebp], 30		; 0000001eH
$LN11@psh_glyph_:
; Line 1690
	cmp	DWORD PTR _num_masks$[ebp], 1
	jbe	$LN10@psh_glyph_
	mov	edx, DWORD PTR _glyph$[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	$LN10@psh_glyph_
; Line 1695
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN16@psh_glyph_
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv90[ebp], ecx
	jmp	SHORT $LN17@psh_glyph_
$LN16@psh_glyph_:
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv90[ebp], eax
$LN17@psh_glyph_:
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR _first$[ebp], ecx
; Line 1696
	mov	edx, DWORD PTR _mask$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _mask$[ebp], edx
; Line 1697
	jmp	SHORT $LN9@psh_glyph_
$LN8@psh_glyph_:
	mov	eax, DWORD PTR _num_masks$[ebp]
	sub	eax, 1
	mov	DWORD PTR _num_masks$[ebp], eax
	mov	ecx, DWORD PTR _mask$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _mask$[ebp], ecx
$LN9@psh_glyph_:
	cmp	DWORD PTR _num_masks$[ebp], 1
	jbe	SHORT $LN10@psh_glyph_
; Line 1705
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN18@psh_glyph_
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN19@psh_glyph_
$LN18@psh_glyph_:
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv132[ebp], edx
$LN19@psh_glyph_:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR _next$7[ebp], eax
; Line 1706
	mov	ecx, DWORD PTR _next$7[ebp]
	sub	ecx, DWORD PTR _first$[ebp]
	mov	DWORD PTR _count$6[ebp], ecx
; Line 1707
	cmp	DWORD PTR _count$6[ebp], 0
	jle	SHORT $LN6@psh_glyph_
; Line 1709
	imul	edx, DWORD PTR _first$[ebp], 40
	mov	eax, DWORD PTR _glyph$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _point$5[ebp], edx
; Line 1712
	mov	ecx, DWORD PTR _mask$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_psh_hint_table_activate_mask
	add	esp, 8
; Line 1715
	mov	eax, DWORD PTR _major_dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _threshold$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$6[ebp]
	push	edx
	mov	eax, DWORD PTR _point$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_psh_hint_table_find_strong_points
	add	esp, 20					; 00000014H
$LN6@psh_glyph_:
; Line 1717
	mov	edx, DWORD PTR _next$7[ebp]
	mov	DWORD PTR _first$[ebp], edx
; Line 1718
	jmp	$LN8@psh_glyph_
$LN10@psh_glyph_:
; Line 1722
	cmp	DWORD PTR _num_masks$[ebp], 1
	jne	SHORT $LN5@psh_glyph_
; Line 1724
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$4[ebp], ecx
; Line 1725
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _point$3[ebp], eax
; Line 1728
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_psh_hint_table_activate_mask
	add	esp, 8
; Line 1731
	mov	edx, DWORD PTR _major_dir$[ebp]
	push	edx
	mov	eax, DWORD PTR _threshold$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _point$3[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_psh_hint_table_find_strong_points
	add	esp, 20					; 00000014H
$LN5@psh_glyph_:
; Line 1737
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _count$2[ebp], edx
; Line 1738
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _point$1[ebp], ecx
; Line 1741
	jmp	SHORT $LN4@psh_glyph_
$LN3@psh_glyph_:
	mov	edx, DWORD PTR _count$2[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$2[ebp], edx
	mov	eax, DWORD PTR _point$1[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _point$1[ebp], eax
$LN4@psh_glyph_:
	cmp	DWORD PTR _count$2[ebp], 0
	jbe	SHORT $LN12@psh_glyph_
; Line 1742
	mov	ecx, DWORD PTR _point$1[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN1@psh_glyph_
	mov	edx, DWORD PTR _point$1[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 16					; 00000010H
	jne	SHORT $LN1@psh_glyph_
; Line 1743
	mov	ecx, DWORD PTR _point$1[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 16					; 00000010H
	mov	eax, DWORD PTR _point$1[ebp]
	mov	DWORD PTR [eax+16], edx
$LN1@psh_glyph_:
; Line 1744
	jmp	SHORT $LN3@psh_glyph_
$LN12@psh_glyph_:
; Line 1745
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_glyph_find_strong_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hint$1 = -72						; size = 4
_d$2 = -68						; size = 4
_hint$3 = -64						; size = 4
_d$4 = -60						; size = 4
_hint$5 = -56						; size = 4
_max_flag$6 = -52					; size = 4
_min_flag$7 = -48					; size = 4
_nn$8 = -44						; size = 4
_d$9 = -40						; size = 4
_hint$10 = -36						; size = 4
_nn$11 = -32						; size = 4
_d$12 = -28						; size = 4
_hint$13 = -24						; size = 4
_nn$14 = -20						; size = 4
_org_u$15 = -16						; size = 4
_point_dir$16 = -12					; size = 4
_num_hints$ = -8					; size = 4
_sort$ = -4						; size = 4
_table$ = 8						; size = 4
_point$ = 12						; size = 4
_count$ = 16						; size = 4
_threshold$ = 20					; size = 4
_major_dir$ = 24					; size = 4
_psh_hint_table_find_strong_points PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1520
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1521
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sort$[ebp], ecx
; Line 1522
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _num_hints$[ebp], eax
; Line 1525
	jmp	SHORT $LN41@psh_hint_t
$LN40@psh_hint_t:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
$LN41@psh_hint_t:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN42@psh_hint_t
; Line 1527
	mov	DWORD PTR _point_dir$16[ebp], 0
; Line 1528
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _org_u$15[ebp], ecx
; Line 1531
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 16					; 00000010H
	je	SHORT $LN38@psh_hint_t
; Line 1532
	jmp	SHORT $LN40@psh_hint_t
$LN38@psh_hint_t:
; Line 1534
	mov	ecx, DWORD PTR _point$[ebp]
	movsx	edx, BYTE PTR [ecx+20]
	cmp	edx, DWORD PTR _major_dir$[ebp]
	je	SHORT $LN36@psh_hint_t
	mov	eax, DWORD PTR _point$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	mov	edx, DWORD PTR _major_dir$[ebp]
	neg	edx
	cmp	ecx, edx
	jne	SHORT $LN37@psh_hint_t
$LN36@psh_hint_t:
; Line 1535
	mov	eax, DWORD PTR _point$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	mov	DWORD PTR _point_dir$16[ebp], ecx
	jmp	SHORT $LN35@psh_hint_t
$LN37@psh_hint_t:
; Line 1537
	mov	edx, DWORD PTR _point$[ebp]
	movsx	eax, BYTE PTR [edx+21]
	cmp	eax, DWORD PTR _major_dir$[ebp]
	je	SHORT $LN33@psh_hint_t
	mov	ecx, DWORD PTR _point$[ebp]
	movsx	edx, BYTE PTR [ecx+21]
	mov	eax, DWORD PTR _major_dir$[ebp]
	neg	eax
	cmp	edx, eax
	jne	SHORT $LN35@psh_hint_t
$LN33@psh_hint_t:
; Line 1538
	mov	ecx, DWORD PTR _point$[ebp]
	movsx	edx, BYTE PTR [ecx+21]
	mov	DWORD PTR _point_dir$16[ebp], edx
$LN35@psh_hint_t:
; Line 1540
	cmp	DWORD PTR _point_dir$16[ebp], 0
	je	$LN32@psh_hint_t
; Line 1542
	mov	eax, DWORD PTR _point_dir$16[ebp]
	cmp	eax, DWORD PTR _major_dir$[ebp]
	jne	SHORT $LN31@psh_hint_t
; Line 1547
	mov	DWORD PTR _nn$14[ebp], 0
	jmp	SHORT $LN30@psh_hint_t
$LN29@psh_hint_t:
	mov	ecx, DWORD PTR _nn$14[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$14[ebp], ecx
$LN30@psh_hint_t:
	mov	edx, DWORD PTR _nn$14[ebp]
	cmp	edx, DWORD PTR _num_hints$[ebp]
	jae	SHORT $LN28@psh_hint_t
; Line 1549
	mov	eax, DWORD PTR _nn$14[ebp]
	mov	ecx, DWORD PTR _sort$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _hint$13[ebp], edx
; Line 1550
	mov	eax, DWORD PTR _hint$13[ebp]
	mov	ecx, DWORD PTR _org_u$15[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _d$12[ebp], ecx
; Line 1553
	mov	edx, DWORD PTR _d$12[ebp]
	cmp	edx, DWORD PTR _threshold$[ebp]
	jge	SHORT $LN27@psh_hint_t
	mov	eax, DWORD PTR _d$12[ebp]
	neg	eax
	cmp	eax, DWORD PTR _threshold$[ebp]
	jge	SHORT $LN27@psh_hint_t
; Line 1555
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 16					; 00000010H
	mov	eax, DWORD PTR _point$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 1556
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 512				; 00000200H
	mov	eax, DWORD PTR _point$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 1557
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR _hint$13[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 1558
	jmp	SHORT $LN28@psh_hint_t
$LN27@psh_hint_t:
; Line 1560
	jmp	SHORT $LN29@psh_hint_t
$LN28@psh_hint_t:
; Line 1562
	jmp	$LN26@psh_hint_t
$LN31@psh_hint_t:
	mov	eax, DWORD PTR _major_dir$[ebp]
	neg	eax
	cmp	DWORD PTR _point_dir$16[ebp], eax
	jne	SHORT $LN26@psh_hint_t
; Line 1567
	mov	DWORD PTR _nn$11[ebp], 0
	jmp	SHORT $LN24@psh_hint_t
$LN23@psh_hint_t:
	mov	ecx, DWORD PTR _nn$11[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$11[ebp], ecx
$LN24@psh_hint_t:
	mov	edx, DWORD PTR _nn$11[ebp]
	cmp	edx, DWORD PTR _num_hints$[ebp]
	jae	SHORT $LN26@psh_hint_t
; Line 1569
	mov	eax, DWORD PTR _nn$11[ebp]
	mov	ecx, DWORD PTR _sort$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _hint$10[ebp], edx
; Line 1570
	mov	eax, DWORD PTR _hint$10[ebp]
	mov	ecx, DWORD PTR _org_u$15[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _hint$10[ebp]
	sub	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _d$9[ebp], ecx
; Line 1573
	mov	eax, DWORD PTR _d$9[ebp]
	cmp	eax, DWORD PTR _threshold$[ebp]
	jge	SHORT $LN21@psh_hint_t
	mov	ecx, DWORD PTR _d$9[ebp]
	neg	ecx
	cmp	ecx, DWORD PTR _threshold$[ebp]
	jge	SHORT $LN21@psh_hint_t
; Line 1575
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+16]
	or	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1576
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+16]
	or	eax, 1024				; 00000400H
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1577
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR _hint$10[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 1578
	jmp	SHORT $LN26@psh_hint_t
$LN21@psh_hint_t:
; Line 1580
	jmp	SHORT $LN23@psh_hint_t
$LN26@psh_hint_t:
; Line 1581
	jmp	$LN20@psh_hint_t
$LN32@psh_hint_t:
; Line 1585
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 64					; 00000040H
	je	$LN20@psh_hint_t
; Line 1591
	cmp	DWORD PTR _major_dir$[ebp], 2
	jne	SHORT $LN18@psh_hint_t
; Line 1593
	mov	DWORD PTR _min_flag$7[ebp], 128		; 00000080H
; Line 1594
	mov	DWORD PTR _max_flag$6[ebp], 256		; 00000100H
; Line 1596
	jmp	SHORT $LN17@psh_hint_t
$LN18@psh_hint_t:
; Line 1598
	mov	DWORD PTR _min_flag$7[ebp], 256		; 00000100H
; Line 1599
	mov	DWORD PTR _max_flag$6[ebp], 128		; 00000080H
$LN17@psh_hint_t:
; Line 1602
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, DWORD PTR _min_flag$7[ebp]
	je	SHORT $LN16@psh_hint_t
; Line 1604
	mov	DWORD PTR _nn$8[ebp], 0
	jmp	SHORT $LN15@psh_hint_t
$LN14@psh_hint_t:
	mov	edx, DWORD PTR _nn$8[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$8[ebp], edx
$LN15@psh_hint_t:
	mov	eax, DWORD PTR _nn$8[ebp]
	cmp	eax, DWORD PTR _num_hints$[ebp]
	jae	SHORT $LN13@psh_hint_t
; Line 1606
	mov	ecx, DWORD PTR _nn$8[ebp]
	mov	edx, DWORD PTR _sort$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _hint$5[ebp], eax
; Line 1607
	mov	ecx, DWORD PTR _hint$5[ebp]
	mov	edx, DWORD PTR _org_u$15[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _d$4[ebp], edx
; Line 1610
	mov	eax, DWORD PTR _d$4[ebp]
	cmp	eax, DWORD PTR _threshold$[ebp]
	jge	SHORT $LN12@psh_hint_t
	mov	ecx, DWORD PTR _d$4[ebp]
	neg	ecx
	cmp	ecx, DWORD PTR _threshold$[ebp]
	jge	SHORT $LN12@psh_hint_t
; Line 1612
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+16]
	or	eax, 512				; 00000200H
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1613
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR _hint$5[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 1614
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 16					; 00000010H
	mov	eax, DWORD PTR _point$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 1615
	jmp	SHORT $LN13@psh_hint_t
$LN12@psh_hint_t:
; Line 1617
	jmp	SHORT $LN14@psh_hint_t
$LN13@psh_hint_t:
; Line 1619
	jmp	$LN11@psh_hint_t
$LN16@psh_hint_t:
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, DWORD PTR _max_flag$6[ebp]
	je	SHORT $LN11@psh_hint_t
; Line 1621
	mov	DWORD PTR _nn$8[ebp], 0
	jmp	SHORT $LN9@psh_hint_t
$LN8@psh_hint_t:
	mov	eax, DWORD PTR _nn$8[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$8[ebp], eax
$LN9@psh_hint_t:
	mov	ecx, DWORD PTR _nn$8[ebp]
	cmp	ecx, DWORD PTR _num_hints$[ebp]
	jae	SHORT $LN11@psh_hint_t
; Line 1623
	mov	edx, DWORD PTR _nn$8[ebp]
	mov	eax, DWORD PTR _sort$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _hint$3[ebp], ecx
; Line 1624
	mov	edx, DWORD PTR _hint$3[ebp]
	mov	eax, DWORD PTR _org_u$15[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _hint$3[ebp]
	sub	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _d$2[ebp], eax
; Line 1627
	mov	edx, DWORD PTR _d$2[ebp]
	cmp	edx, DWORD PTR _threshold$[ebp]
	jge	SHORT $LN6@psh_hint_t
	mov	eax, DWORD PTR _d$2[ebp]
	neg	eax
	cmp	eax, DWORD PTR _threshold$[ebp]
	jge	SHORT $LN6@psh_hint_t
; Line 1629
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 1024				; 00000400H
	mov	eax, DWORD PTR _point$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 1630
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR _hint$3[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 1631
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 1632
	jmp	SHORT $LN11@psh_hint_t
$LN6@psh_hint_t:
; Line 1634
	jmp	SHORT $LN8@psh_hint_t
$LN11@psh_hint_t:
; Line 1637
	mov	eax, DWORD PTR _point$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN20@psh_hint_t
; Line 1639
	mov	DWORD PTR _nn$8[ebp], 0
	jmp	SHORT $LN4@psh_hint_t
$LN3@psh_hint_t:
	mov	ecx, DWORD PTR _nn$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$8[ebp], ecx
$LN4@psh_hint_t:
	mov	edx, DWORD PTR _nn$8[ebp]
	cmp	edx, DWORD PTR _num_hints$[ebp]
	jae	SHORT $LN20@psh_hint_t
; Line 1641
	mov	eax, DWORD PTR _nn$8[ebp]
	mov	ecx, DWORD PTR _sort$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _hint$1[ebp], edx
; Line 1645
	mov	eax, DWORD PTR _hint$1[ebp]
	mov	ecx, DWORD PTR _org_u$15[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN1@psh_hint_t
	mov	edx, DWORD PTR _hint$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _hint$1[ebp]
	add	eax, DWORD PTR [ecx+4]
	cmp	DWORD PTR _org_u$15[ebp], eax
	jg	SHORT $LN1@psh_hint_t
; Line 1647
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR _hint$1[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 1648
	jmp	SHORT $LN20@psh_hint_t
$LN1@psh_hint_t:
; Line 1650
	jmp	SHORT $LN3@psh_hint_t
$LN20@psh_hint_t:
; Line 1655
	jmp	$LN40@psh_hint_t
$LN42@psh_hint_t:
; Line 1656
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_hint_table_find_strong_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_after$1 = -32						; size = 4
_before$2 = -28						; size = 4
_point$3 = -24						; size = 4
_after$4 = -20						; size = 4
_before$5 = -16						; size = 4
_point$6 = -12						; size = 4
_first$7 = -8						; size = 4
_n$ = -4						; size = 4
_glyph$ = 8						; size = 4
_psh_glyph_compute_extrema PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1393
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1398
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN36@psh_glyph_
$LN35@psh_glyph_:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN36@psh_glyph_:
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	$LN34@psh_glyph_
; Line 1400
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _first$7[ebp], eax
; Line 1404
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [edx+eax*8+4], 0
	jne	SHORT $LN33@psh_glyph_
; Line 1405
	jmp	SHORT $LN35@psh_glyph_
$LN33@psh_glyph_:
; Line 1407
	mov	ecx, DWORD PTR _first$7[ebp]
	mov	DWORD PTR _point$6[ebp], ecx
; Line 1408
	mov	edx, DWORD PTR _point$6[ebp]
	mov	DWORD PTR _before$5[ebp], edx
$LN32@psh_glyph_:
; Line 1412
	mov	eax, DWORD PTR _before$5[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _before$5[ebp], ecx
; Line 1413
	mov	edx, DWORD PTR _before$5[ebp]
	cmp	edx, DWORD PTR _first$7[ebp]
	jne	SHORT $LN31@psh_glyph_
; Line 1414
	jmp	$Skip$39
$LN31@psh_glyph_:
; Line 1416
	mov	eax, DWORD PTR _before$5[ebp]
	mov	ecx, DWORD PTR _point$6[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+28]
	je	SHORT $LN32@psh_glyph_
; Line 1418
	mov	eax, DWORD PTR _before$5[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _point$6[ebp], ecx
	mov	edx, DWORD PTR _point$6[ebp]
	mov	DWORD PTR _first$7[ebp], edx
$LN28@psh_glyph_:
; Line 1422
	mov	eax, DWORD PTR _point$6[ebp]
	mov	DWORD PTR _after$4[ebp], eax
$LN26@psh_glyph_:
; Line 1425
	mov	ecx, DWORD PTR _after$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _after$4[ebp], edx
; Line 1426
	mov	eax, DWORD PTR _after$4[ebp]
	cmp	eax, DWORD PTR _first$7[ebp]
	jne	SHORT $LN25@psh_glyph_
; Line 1427
	jmp	SHORT $Next$40
$LN25@psh_glyph_:
; Line 1429
	mov	ecx, DWORD PTR _after$4[ebp]
	mov	edx, DWORD PTR _point$6[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx+28]
	je	SHORT $LN26@psh_glyph_
; Line 1431
	mov	ecx, DWORD PTR _before$5[ebp]
	mov	edx, DWORD PTR _point$6[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx+28]
	jge	SHORT $LN22@psh_glyph_
; Line 1433
	mov	ecx, DWORD PTR _after$4[ebp]
	mov	edx, DWORD PTR _point$6[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx+28]
	jge	SHORT $LN21@psh_glyph_
; Line 1436
	jmp	SHORT $Extremum$41
$LN21@psh_glyph_:
; Line 1439
	jmp	SHORT $LN20@psh_glyph_
$LN22@psh_glyph_:
; Line 1441
	mov	ecx, DWORD PTR _after$4[ebp]
	mov	edx, DWORD PTR _point$6[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx+28]
	jle	SHORT $LN20@psh_glyph_
$Extremum$41:
; Line 1447
	mov	ecx, DWORD PTR _point$6[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 64					; 00000040H
	mov	eax, DWORD PTR _point$6[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 1448
	mov	ecx, DWORD PTR _point$6[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _point$6[ebp], edx
; Line 1450
	mov	eax, DWORD PTR _point$6[ebp]
	cmp	eax, DWORD PTR _after$4[ebp]
	jne	SHORT $Extremum$41
$LN20@psh_glyph_:
; Line 1454
	mov	ecx, DWORD PTR _after$4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _before$5[ebp], edx
; Line 1455
	mov	eax, DWORD PTR _after$4[ebp]
	mov	DWORD PTR _point$6[ebp], eax
; Line 1457
	jmp	$LN28@psh_glyph_
$Next$40:
; Line 1461
	jmp	$LN35@psh_glyph_
$LN34@psh_glyph_:
; Line 1465
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN15@psh_glyph_
$LN14@psh_glyph_:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN15@psh_glyph_:
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	$LN37@psh_glyph_
; Line 1470
	imul	ecx, DWORD PTR _n$[ebp], 40
	mov	edx, DWORD PTR _glyph$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _point$3[ebp], ecx
; Line 1471
	mov	eax, DWORD PTR _point$3[ebp]
	mov	DWORD PTR _before$2[ebp], eax
; Line 1472
	mov	ecx, DWORD PTR _point$3[ebp]
	mov	DWORD PTR _after$1[ebp], ecx
; Line 1474
	mov	edx, DWORD PTR _point$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 64					; 00000040H
	je	SHORT $LN12@psh_glyph_
$LN11@psh_glyph_:
; Line 1478
	mov	ecx, DWORD PTR _before$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _before$2[ebp], edx
; Line 1479
	mov	eax, DWORD PTR _before$2[ebp]
	cmp	eax, DWORD PTR _point$3[ebp]
	jne	SHORT $LN10@psh_glyph_
; Line 1480
	jmp	$Skip$39
$LN10@psh_glyph_:
; Line 1482
	mov	ecx, DWORD PTR _before$2[ebp]
	mov	edx, DWORD PTR _point$3[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cmp	eax, DWORD PTR [edx+32]
	je	SHORT $LN11@psh_glyph_
$LN7@psh_glyph_:
; Line 1486
	mov	ecx, DWORD PTR _after$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _after$1[ebp], edx
; Line 1487
	mov	eax, DWORD PTR _after$1[ebp]
	cmp	eax, DWORD PTR _point$3[ebp]
	jne	SHORT $LN6@psh_glyph_
; Line 1488
	jmp	SHORT $Skip$39
$LN6@psh_glyph_:
; Line 1490
	mov	ecx, DWORD PTR _after$1[ebp]
	mov	edx, DWORD PTR _point$3[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cmp	eax, DWORD PTR [edx+32]
	je	SHORT $LN7@psh_glyph_
$LN12@psh_glyph_:
; Line 1494
	mov	ecx, DWORD PTR _before$2[ebp]
	mov	edx, DWORD PTR _point$3[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cmp	eax, DWORD PTR [edx+32]
	jge	SHORT $LN3@psh_glyph_
	mov	ecx, DWORD PTR _after$1[ebp]
	mov	edx, DWORD PTR _point$3[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cmp	eax, DWORD PTR [edx+32]
	jle	SHORT $LN3@psh_glyph_
; Line 1496
	mov	ecx, DWORD PTR _point$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 128				; 00000080H
	mov	eax, DWORD PTR _point$3[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 1498
	jmp	SHORT $Skip$39
$LN3@psh_glyph_:
; Line 1499
	mov	ecx, DWORD PTR _before$2[ebp]
	mov	edx, DWORD PTR _point$3[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cmp	eax, DWORD PTR [edx+32]
	jle	SHORT $Skip$39
	mov	ecx, DWORD PTR _after$1[ebp]
	mov	edx, DWORD PTR _point$3[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cmp	eax, DWORD PTR [edx+32]
	jge	SHORT $Skip$39
; Line 1501
	mov	ecx, DWORD PTR _point$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 256				; 00000100H
	mov	eax, DWORD PTR _point$3[ebp]
	mov	DWORD PTR [eax+16], edx
$Skip$39:
; Line 1506
	jmp	$LN14@psh_glyph_
$LN37@psh_glyph_:
; Line 1507
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_glyph_compute_extrema ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dyo$1 = -84						; size = 4
_dxo$2 = -80						; size = 4
_dyi$3 = -76						; size = 4
_dxi$4 = -72						; size = 4
_n_next$5 = -68						; size = 4
_n_prev$6 = -64						; size = 4
_n$7 = -60						; size = 4
_vec$8 = -56						; size = 4
_point$9 = -52						; size = 4
_points$10 = -48					; size = 4
_point$11 = -44						; size = 4
_count$12 = -40						; size = 4
_contour$13 = -36					; size = 4
_points$14 = -32					; size = 4
_n$15 = -28						; size = 4
_next$16 = -24						; size = 4
_first$17 = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_glyph$ = 8						; size = 4
_outline$ = 12						; size = 4
_ps_hints$ = 16						; size = 4
_globals$ = 20						; size = 4
_psh_glyph_init PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1262
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1268
	push	128					; 00000080H
	push	0
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1270
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _memory$[ebp], edx
; Line 1274
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	push	edx
	push	0
	push	40					; 00000028H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN19@psh_glyph_
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax]
	push	ecx
	push	0
	push	8
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@psh_glyph_
$LN19@psh_glyph_:
; Line 1275
	jmp	$Exit$26
$LN20@psh_glyph_:
; Line 1277
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1278
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1281
	mov	DWORD PTR _first$17[ebp], 0
; Line 1282
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _points$14[ebp], eax
; Line 1283
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _contour$13[ebp], edx
; Line 1286
	mov	DWORD PTR _n$15[ebp], 0
	jmp	SHORT $LN18@psh_glyph_
$LN17@psh_glyph_:
	mov	eax, DWORD PTR _n$15[ebp]
	add	eax, 1
	mov	DWORD PTR _n$15[ebp], eax
$LN18@psh_glyph_:
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _n$15[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	$LN16@psh_glyph_
; Line 1292
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$15[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	add	eax, 1
	mov	DWORD PTR _next$16[ebp], eax
; Line 1293
	mov	ecx, DWORD PTR _next$16[ebp]
	sub	ecx, DWORD PTR _first$17[ebp]
	mov	DWORD PTR _count$12[ebp], ecx
; Line 1295
	imul	edx, DWORD PTR _first$17[ebp], 40
	add	edx, DWORD PTR _points$14[ebp]
	mov	eax, DWORD PTR _contour$13[ebp]
	mov	DWORD PTR [eax], edx
; Line 1296
	mov	ecx, DWORD PTR _contour$13[ebp]
	mov	edx, DWORD PTR _count$12[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1298
	cmp	DWORD PTR _count$12[ebp], 0
	jle	SHORT $LN15@psh_glyph_
; Line 1300
	imul	eax, DWORD PTR _first$17[ebp], 40
	add	eax, DWORD PTR _points$14[ebp]
	mov	DWORD PTR _point$11[ebp], eax
; Line 1302
	imul	ecx, DWORD PTR _next$16[ebp], 40
	mov	edx, DWORD PTR _points$14[ebp]
	lea	eax, DWORD PTR [edx+ecx-40]
	mov	ecx, DWORD PTR _point$11[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1303
	mov	edx, DWORD PTR _point$11[ebp]
	mov	eax, DWORD PTR _contour$13[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 1305
	jmp	SHORT $LN14@psh_glyph_
$LN13@psh_glyph_:
	mov	ecx, DWORD PTR _count$12[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$12[ebp], ecx
$LN14@psh_glyph_:
	cmp	DWORD PTR _count$12[ebp], 1
	jle	SHORT $LN12@psh_glyph_
; Line 1307
	mov	edx, DWORD PTR _point$11[ebp]
	add	edx, 40					; 00000028H
	mov	eax, 40					; 00000028H
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _point$11[ebp]
	mov	DWORD PTR [eax+ecx+4], edx
; Line 1308
	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	mov	edx, DWORD PTR _point$11[ebp]
	mov	eax, DWORD PTR _point$11[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 1309
	mov	ecx, DWORD PTR _point$11[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _point$11[ebp], ecx
; Line 1310
	mov	edx, DWORD PTR _point$11[ebp]
	mov	eax, DWORD PTR _contour$13[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 1311
	jmp	SHORT $LN13@psh_glyph_
$LN12@psh_glyph_:
; Line 1312
	imul	ecx, DWORD PTR _first$17[ebp], 40
	add	ecx, DWORD PTR _points$14[ebp]
	mov	edx, DWORD PTR _point$11[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN15@psh_glyph_:
; Line 1315
	mov	eax, DWORD PTR _contour$13[ebp]
	add	eax, 8
	mov	DWORD PTR _contour$13[ebp], eax
; Line 1316
	mov	ecx, DWORD PTR _next$16[ebp]
	mov	DWORD PTR _first$17[ebp], ecx
; Line 1317
	jmp	$LN17@psh_glyph_
$LN16@psh_glyph_:
; Line 1321
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _points$10[ebp], eax
; Line 1322
	mov	ecx, DWORD PTR _points$10[ebp]
	mov	DWORD PTR _point$9[ebp], ecx
; Line 1323
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _vec$8[ebp], eax
; Line 1327
	mov	DWORD PTR _n$7[ebp], 0
	jmp	SHORT $LN11@psh_glyph_
$LN10@psh_glyph_:
	mov	ecx, DWORD PTR _n$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$7[ebp], ecx
	mov	edx, DWORD PTR _point$9[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$9[ebp], edx
$LN11@psh_glyph_:
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR _n$7[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	$LN9@psh_glyph_
; Line 1329
	mov	edx, DWORD PTR _point$9[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _points$10[ebp]
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx
	mov	DWORD PTR _n_prev$6[ebp], eax
; Line 1330
	mov	edx, DWORD PTR _point$9[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR _points$10[ebp]
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx
	mov	DWORD PTR _n_next$5[ebp], eax
; Line 1334
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _n$7[ebp]
	movsx	edx, BYTE PTR [eax+ecx]
	and	edx, 1
	jne	SHORT $LN8@psh_glyph_
; Line 1335
	mov	eax, DWORD PTR _point$9[ebp]
	mov	DWORD PTR [eax+12], 1
$LN8@psh_glyph_:
; Line 1337
	mov	ecx, DWORD PTR _n$7[ebp]
	mov	edx, DWORD PTR _vec$8[ebp]
	mov	eax, DWORD PTR _n_prev$6[ebp]
	mov	esi, DWORD PTR _vec$8[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8]
	sub	ecx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR _dxi$4[ebp], ecx
; Line 1338
	mov	edx, DWORD PTR _n$7[ebp]
	mov	eax, DWORD PTR _vec$8[ebp]
	mov	ecx, DWORD PTR _n_prev$6[ebp]
	mov	esi, DWORD PTR _vec$8[ebp]
	mov	edx, DWORD PTR [eax+edx*8+4]
	sub	edx, DWORD PTR [esi+ecx*8+4]
	mov	DWORD PTR _dyi$3[ebp], edx
; Line 1340
	mov	eax, DWORD PTR _dyi$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _dxi$4[ebp]
	push	ecx
	call	_psh_compute_dir
	add	esp, 8
	mov	edx, DWORD PTR _point$9[ebp]
	mov	BYTE PTR [edx+20], al
; Line 1342
	mov	eax, DWORD PTR _n_next$5[ebp]
	mov	ecx, DWORD PTR _vec$8[ebp]
	mov	edx, DWORD PTR _n$7[ebp]
	mov	esi, DWORD PTR _vec$8[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	sub	eax, DWORD PTR [esi+edx*8]
	mov	DWORD PTR _dxo$2[ebp], eax
; Line 1343
	mov	ecx, DWORD PTR _n_next$5[ebp]
	mov	edx, DWORD PTR _vec$8[ebp]
	mov	eax, DWORD PTR _n$7[ebp]
	mov	esi, DWORD PTR _vec$8[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	sub	ecx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR _dyo$1[ebp], ecx
; Line 1345
	mov	edx, DWORD PTR _dyo$1[ebp]
	push	edx
	mov	eax, DWORD PTR _dxo$2[ebp]
	push	eax
	call	_psh_compute_dir
	add	esp, 8
	mov	ecx, DWORD PTR _point$9[ebp]
	mov	BYTE PTR [ecx+21], al
; Line 1348
	mov	edx, DWORD PTR _point$9[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 1
	je	SHORT $LN7@psh_glyph_
; Line 1349
	mov	ecx, DWORD PTR _point$9[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 2
	mov	eax, DWORD PTR _point$9[ebp]
	mov	DWORD PTR [eax+12], edx
	jmp	SHORT $LN6@psh_glyph_
$LN7@psh_glyph_:
; Line 1351
	mov	ecx, DWORD PTR _point$9[ebp]
	movsx	edx, BYTE PTR [ecx+20]
	mov	eax, DWORD PTR _point$9[ebp]
	movsx	ecx, BYTE PTR [eax+21]
	cmp	edx, ecx
	jne	SHORT $LN6@psh_glyph_
; Line 1354
	mov	edx, DWORD PTR _point$9[ebp]
	movsx	eax, BYTE PTR [edx+21]
	cmp	eax, 4
	jne	SHORT $LN3@psh_glyph_
	mov	ecx, DWORD PTR _dyo$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _dxo$2[ebp]
	push	edx
	mov	eax, DWORD PTR _dyi$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _dxi$4[ebp]
	push	ecx
	call	_ft_corner_is_flat
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN6@psh_glyph_
$LN3@psh_glyph_:
; Line 1355
	mov	edx, DWORD PTR _point$9[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 2
	mov	ecx, DWORD PTR _point$9[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN6@psh_glyph_:
; Line 1357
	jmp	$LN10@psh_glyph_
$LN9@psh_glyph_:
; Line 1360
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 1361
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 1364
	push	0
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	call	_psh_glyph_load_points
	add	esp, 8
; Line 1365
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_psh_glyph_compute_inflections
	add	esp, 4
; Line 1373
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, 36					; 00000024H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ps_hints$[ebp]
	lea	eax, DWORD PTR [edx+ecx+40]
	push	eax
	mov	ecx, 36					; 00000024H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _ps_hints$[ebp]
	lea	ecx, DWORD PTR [eax+edx+28]
	push	ecx
	mov	edx, 36					; 00000024H
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ps_hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	push	edx
	mov	eax, 40					; 00000028H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _glyph$[ebp]
	lea	eax, DWORD PTR [edx+ecx+28]
	push	eax
	call	_psh_hint_table_init
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 1374
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@psh_glyph_
; Line 1375
	jmp	SHORT $Exit$26
$LN2@psh_glyph_:
; Line 1381
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, 36					; 00000024H
	shl	edx, 0
	mov	eax, DWORD PTR _ps_hints$[ebp]
	lea	ecx, DWORD PTR [eax+edx+40]
	push	ecx
	mov	edx, 36					; 00000024H
	shl	edx, 0
	mov	eax, DWORD PTR _ps_hints$[ebp]
	lea	ecx, DWORD PTR [eax+edx+28]
	push	ecx
	mov	edx, 36					; 00000024H
	shl	edx, 0
	mov	eax, DWORD PTR _ps_hints$[ebp]
	lea	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	mov	edx, 40					; 00000028H
	shl	edx, 0
	mov	eax, DWORD PTR _glyph$[ebp]
	lea	ecx, DWORD PTR [eax+edx+28]
	push	ecx
	call	_psh_hint_table_init
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
$Exit$26:
; Line 1386
	mov	eax, DWORD PTR _error$[ebp]
; Line 1387
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@psh_glyph_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@psh_glyph_:
	DD	1
	DD	$LN24@psh_glyph_
$LN24@psh_glyph_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN23@psh_glyph_
$LN23@psh_glyph_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_psh_glyph_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv87 = -20						; size = 4
_tags$ = -16						; size = 4
_vec$ = -12						; size = 4
_point$ = -8						; size = 4
_n$ = -4						; size = 4
_glyph$ = 8						; size = 4
_dimension$ = 12					; size = 4
_psh_glyph_save_points PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1220
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1222
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _point$[ebp], ecx
; Line 1223
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vec$[ebp], ecx
; Line 1224
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tags$[ebp], ecx
; Line 1227
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@psh_glyph_
$LN5@psh_glyph_:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN6@psh_glyph_:
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN7@psh_glyph_
; Line 1229
	cmp	DWORD PTR _dimension$[ebp], 0
	jne	SHORT $LN3@psh_glyph_
; Line 1230
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+edx*8], ecx
; Line 1231
	jmp	SHORT $LN2@psh_glyph_
$LN3@psh_glyph_:
; Line 1232
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+edx*8+4], ecx
$LN2@psh_glyph_:
; Line 1234
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 16					; 00000010H
	je	SHORT $LN1@psh_glyph_
; Line 1235
	cmp	DWORD PTR _dimension$[ebp], 0
	jne	SHORT $LN9@psh_glyph_
	mov	DWORD PTR tv87[ebp], 32			; 00000020H
	jmp	SHORT $LN10@psh_glyph_
$LN9@psh_glyph_:
	mov	DWORD PTR tv87[ebp], 64			; 00000040H
$LN10@psh_glyph_:
	movsx	ecx, BYTE PTR tv87[ebp]
	mov	edx, DWORD PTR _tags$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	movsx	eax, BYTE PTR [edx]
	or	eax, ecx
	mov	ecx, DWORD PTR _tags$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	BYTE PTR [ecx], al
$LN1@psh_glyph_:
; Line 1252
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
; Line 1253
	jmp	SHORT $LN5@psh_glyph_
$LN7@psh_glyph_:
; Line 1254
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_glyph_save_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_count$ = -12						; size = 4
_point$ = -8						; size = 4
_vec$ = -4						; size = 4
_glyph$ = 8						; size = 4
_dimension$ = 12					; size = 4
_psh_glyph_load_points PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1186
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1187
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _vec$[ebp], edx
; Line 1188
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _point$[ebp], ecx
; Line 1189
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _count$[ebp], eax
; Line 1192
	jmp	SHORT $LN5@psh_glyph_
$LN4@psh_glyph_:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
	mov	eax, DWORD PTR _vec$[ebp]
	add	eax, 8
	mov	DWORD PTR _vec$[ebp], eax
$LN5@psh_glyph_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN6@psh_glyph_
; Line 1194
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 1195
	mov	edx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 1196
	cmp	DWORD PTR _dimension$[ebp], 0
	jne	SHORT $LN2@psh_glyph_
; Line 1198
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+28], edx
; Line 1199
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+32], edx
; Line 1201
	jmp	SHORT $LN1@psh_glyph_
$LN2@psh_glyph_:
; Line 1203
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx
; Line 1204
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+32], edx
$LN1@psh_glyph_:
; Line 1212
	jmp	SHORT $LN4@psh_glyph_
$LN6@psh_glyph_:
; Line 1213
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_glyph_load_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -28						; size = 4
tv73 = -24						; size = 4
tv69 = -20						; size = 4
tv66 = -16						; size = 4
_result$ = -12						; size = 4
_ay$ = -8						; size = 4
_ax$ = -4						; size = 4
_dx$ = 8						; size = 4
_dy$ = 12						; size = 4
_psh_compute_dir PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1159
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1161
	mov	DWORD PTR _result$[ebp], 4
; Line 1164
	cmp	DWORD PTR _dx$[ebp], 0
	jge	SHORT $LN6@psh_comput
	mov	eax, DWORD PTR _dx$[ebp]
	neg	eax
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN7@psh_comput
$LN6@psh_comput:
	mov	ecx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR tv66[ebp], ecx
$LN7@psh_comput:
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _ax$[ebp], edx
; Line 1165
	cmp	DWORD PTR _dy$[ebp], 0
	jge	SHORT $LN8@psh_comput
	mov	eax, DWORD PTR _dy$[ebp]
	neg	eax
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN9@psh_comput
$LN8@psh_comput:
	mov	ecx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
$LN9@psh_comput:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _ay$[ebp], edx
; Line 1167
	imul	eax, DWORD PTR _ay$[ebp], 12
	cmp	eax, DWORD PTR _ax$[ebp]
	jge	SHORT $LN3@psh_comput
; Line 1170
	cmp	DWORD PTR _dx$[ebp], 0
	jl	SHORT $LN10@psh_comput
	mov	DWORD PTR tv73[ebp], 2
	jmp	SHORT $LN11@psh_comput
$LN10@psh_comput:
	mov	DWORD PTR tv73[ebp], -2			; fffffffeH
$LN11@psh_comput:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _result$[ebp], ecx
	jmp	SHORT $LN2@psh_comput
$LN3@psh_comput:
; Line 1172
	imul	edx, DWORD PTR _ax$[ebp], 12
	cmp	edx, DWORD PTR _ay$[ebp]
	jge	SHORT $LN2@psh_comput
; Line 1175
	cmp	DWORD PTR _dy$[ebp], 0
	jl	SHORT $LN12@psh_comput
	mov	DWORD PTR tv77[ebp], -1
	jmp	SHORT $LN13@psh_comput
$LN12@psh_comput:
	mov	DWORD PTR tv77[ebp], 1
$LN13@psh_comput:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR _result$[ebp], eax
$LN2@psh_comput:
; Line 1178
	mov	eax, DWORD PTR _result$[ebp]
; Line 1179
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_compute_dir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_glyph$ = 8						; size = 4
_psh_glyph_done PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1139
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1140
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1143
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, 40					; 00000028H
	shl	eax, 0
	mov	ecx, DWORD PTR _glyph$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28]
	push	edx
	call	_psh_hint_table_done
	add	esp, 8
; Line 1144
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, 40					; 00000028H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _glyph$[ebp]
	lea	ecx, DWORD PTR [eax+edx+28]
	push	ecx
	call	_psh_hint_table_done
	add	esp, 8
$LN6@psh_glyph_:
; Line 1146
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+8], 0
	xor	eax, eax
	jne	SHORT $LN6@psh_glyph_
$LN3@psh_glyph_:
; Line 1147
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+12], 0
	xor	edx, edx
	jne	SHORT $LN3@psh_glyph_
; Line 1149
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1150
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 1152
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 1153
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_glyph_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_finished$1 = -52					; size = 4
_orient_cur$2 = -48					; size = 4
_orient_prev$3 = -44					; size = 4
_out_y$4 = -40						; size = 4
_out_x$5 = -36						; size = 4
_in_y$6 = -32						; size = 4
_in_x$7 = -28						; size = 4
_after$8 = -24						; size = 4
_before$9 = -20						; size = 4
_end$10 = -16						; size = 4
_start$11 = -12						; size = 4
_first$12 = -8						; size = 4
_n$ = -4						; size = 4
_glyph$ = 8						; size = 4
_psh_glyph_compute_inflections PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 1031
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1035
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN32@psh_glyph_
$LN31@psh_glyph_:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN32@psh_glyph_:
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	$LN33@psh_glyph_
; Line 1040
	mov	DWORD PTR _finished$1[ebp], 0
; Line 1044
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [ecx+edx*8+4], 4
	jae	SHORT $LN29@psh_glyph_
; Line 1045
	jmp	SHORT $LN31@psh_glyph_
$LN29@psh_glyph_:
; Line 1048
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _first$12[ebp], eax
; Line 1050
	mov	ecx, DWORD PTR _first$12[ebp]
	mov	DWORD PTR _end$10[ebp], ecx
	mov	edx, DWORD PTR _end$10[ebp]
	mov	DWORD PTR _start$11[ebp], edx
$LN28@psh_glyph_:
; Line 1053
	mov	eax, DWORD PTR _end$10[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _end$10[ebp], ecx
; Line 1054
	mov	edx, DWORD PTR _end$10[ebp]
	cmp	edx, DWORD PTR _first$12[ebp]
	jne	SHORT $LN25@psh_glyph_
; Line 1055
	jmp	$Skip$35
$LN25@psh_glyph_:
; Line 1057
	mov	eax, DWORD PTR _end$10[ebp]
	mov	ecx, DWORD PTR _start$11[ebp]
	mov	edx, DWORD PTR [eax+28]
	sub	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _in_x$7[ebp], edx
; Line 1058
	mov	eax, DWORD PTR _end$10[ebp]
	mov	ecx, DWORD PTR _start$11[ebp]
	mov	edx, DWORD PTR [eax+32]
	sub	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _in_y$6[ebp], edx
; Line 1060
	cmp	DWORD PTR _in_x$7[ebp], 0
	jne	SHORT $LN26@psh_glyph_
	cmp	DWORD PTR _in_y$6[ebp], 0
	je	SHORT $LN28@psh_glyph_
$LN26@psh_glyph_:
; Line 1063
	mov	eax, DWORD PTR _start$11[ebp]
	mov	DWORD PTR _before$9[ebp], eax
$LN20@psh_glyph_:
; Line 1068
	mov	ecx, DWORD PTR _before$9[ebp]
	mov	DWORD PTR _start$11[ebp], ecx
; Line 1069
	mov	edx, DWORD PTR _before$9[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _before$9[ebp], eax
; Line 1070
	mov	ecx, DWORD PTR _before$9[ebp]
	cmp	ecx, DWORD PTR _first$12[ebp]
	jne	SHORT $LN17@psh_glyph_
; Line 1071
	jmp	$Skip$35
$LN17@psh_glyph_:
; Line 1073
	mov	edx, DWORD PTR _start$11[ebp]
	mov	eax, DWORD PTR _before$9[ebp]
	mov	ecx, DWORD PTR [edx+28]
	sub	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _out_x$5[ebp], ecx
; Line 1074
	mov	edx, DWORD PTR _start$11[ebp]
	mov	eax, DWORD PTR _before$9[ebp]
	mov	ecx, DWORD PTR [edx+32]
	sub	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _out_y$4[ebp], ecx
; Line 1076
	cmp	DWORD PTR _out_x$5[ebp], 0
	jne	SHORT $LN18@psh_glyph_
	cmp	DWORD PTR _out_y$4[ebp], 0
	je	SHORT $LN20@psh_glyph_
$LN18@psh_glyph_:
; Line 1078
	mov	edx, DWORD PTR _out_y$4[ebp]
	push	edx
	mov	eax, DWORD PTR _out_x$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_y$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _in_x$7[ebp]
	push	edx
	call	_ft_corner_orientation
	add	esp, 16					; 00000010H
	mov	DWORD PTR _orient_prev$3[ebp], eax
; Line 1080
	cmp	DWORD PTR _orient_prev$3[ebp], 0
	je	SHORT $LN20@psh_glyph_
; Line 1082
	mov	eax, DWORD PTR _start$11[ebp]
	mov	DWORD PTR _first$12[ebp], eax
; Line 1083
	mov	ecx, DWORD PTR _out_x$5[ebp]
	mov	DWORD PTR _in_x$7[ebp], ecx
; Line 1084
	mov	edx, DWORD PTR _out_y$4[ebp]
	mov	DWORD PTR _in_y$6[ebp], edx
$LN15@psh_glyph_:
; Line 1090
	mov	eax, DWORD PTR _end$10[ebp]
	mov	DWORD PTR _after$8[ebp], eax
$LN9@psh_glyph_:
; Line 1095
	mov	ecx, DWORD PTR _after$8[ebp]
	mov	DWORD PTR _end$10[ebp], ecx
; Line 1096
	mov	edx, DWORD PTR _after$8[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _after$8[ebp], eax
; Line 1097
	mov	ecx, DWORD PTR _after$8[ebp]
	cmp	ecx, DWORD PTR _first$12[ebp]
	jne	SHORT $LN6@psh_glyph_
; Line 1098
	mov	DWORD PTR _finished$1[ebp], 1
$LN6@psh_glyph_:
; Line 1100
	mov	edx, DWORD PTR _after$8[ebp]
	mov	eax, DWORD PTR _end$10[ebp]
	mov	ecx, DWORD PTR [edx+28]
	sub	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _out_x$5[ebp], ecx
; Line 1101
	mov	edx, DWORD PTR _after$8[ebp]
	mov	eax, DWORD PTR _end$10[ebp]
	mov	ecx, DWORD PTR [edx+32]
	sub	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _out_y$4[ebp], ecx
; Line 1103
	cmp	DWORD PTR _out_x$5[ebp], 0
	jne	SHORT $LN7@psh_glyph_
	cmp	DWORD PTR _out_y$4[ebp], 0
	je	SHORT $LN9@psh_glyph_
$LN7@psh_glyph_:
; Line 1105
	mov	edx, DWORD PTR _out_y$4[ebp]
	push	edx
	mov	eax, DWORD PTR _out_x$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_y$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _in_x$7[ebp]
	push	edx
	call	_ft_corner_orientation
	add	esp, 16					; 00000010H
	mov	DWORD PTR _orient_cur$2[ebp], eax
; Line 1107
	cmp	DWORD PTR _orient_cur$2[ebp], 0
	je	SHORT $LN9@psh_glyph_
; Line 1109
	mov	eax, DWORD PTR _orient_cur$2[ebp]
	xor	eax, DWORD PTR _orient_prev$3[ebp]
	jge	SHORT $LN4@psh_glyph_
$LN3@psh_glyph_:
; Line 1113
	mov	ecx, DWORD PTR _start$11[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _start$11[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1114
	mov	ecx, DWORD PTR _start$11[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _start$11[ebp], edx
; Line 1116
	mov	eax, DWORD PTR _start$11[ebp]
	cmp	eax, DWORD PTR _end$10[ebp]
	jne	SHORT $LN3@psh_glyph_
; Line 1118
	mov	ecx, DWORD PTR _start$11[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _start$11[ebp]
	mov	DWORD PTR [eax+12], edx
$LN4@psh_glyph_:
; Line 1121
	mov	ecx, DWORD PTR _end$10[ebp]
	mov	DWORD PTR _start$11[ebp], ecx
; Line 1122
	mov	edx, DWORD PTR _after$8[ebp]
	mov	DWORD PTR _end$10[ebp], edx
; Line 1123
	mov	eax, DWORD PTR _orient_cur$2[ebp]
	mov	DWORD PTR _orient_prev$3[ebp], eax
; Line 1124
	mov	ecx, DWORD PTR _out_x$5[ebp]
	mov	DWORD PTR _in_x$7[ebp], ecx
; Line 1125
	mov	edx, DWORD PTR _out_y$4[ebp]
	mov	DWORD PTR _in_y$6[ebp], edx
; Line 1127
	cmp	DWORD PTR _finished$1[ebp], 0
	je	$LN15@psh_glyph_
$Skip$35:
; Line 1131
	jmp	$LN31@psh_glyph_
$LN33@psh_glyph_:
; Line 1132
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_glyph_compute_inflections ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_count$ = -8						; size = 4
_hint$ = -4						; size = 4
_table$ = 8						; size = 4
_globals$ = 12						; size = 4
_dimension$ = 16					; size = 4
_glyph$ = 20						; size = 4
_psh_hint_table_align_hints PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 852
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 877
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _hint$[ebp], ecx
; Line 878
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _count$[ebp], eax
; Line 880
	jmp	SHORT $LN3@psh_hint_t
$LN2@psh_hint_t:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _hint$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _hint$[ebp], edx
$LN3@psh_hint_t:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN4@psh_hint_t
; Line 881
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dimension$[ebp]
	push	ecx
	mov	edx, DWORD PTR _globals$[ebp]
	push	edx
	mov	eax, DWORD PTR _hint$[ebp]
	push	eax
	call	_psh_hint_align
	add	esp, 16					; 00000010H
	jmp	SHORT $LN2@psh_hint_t
$LN4@psh_hint_t:
; Line 882
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_hint_table_align_hints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv226 = -100						; size = 4
tv146 = -96						; size = 4
tv134 = -92						; size = 4
_right_disp$1 = -88					; size = 4
_left_disp$2 = -84					; size = 4
_right_nearest$3 = -80					; size = 4
_left_nearest$4 = -76					; size = 4
_cur_delta$5 = -72					; size = 4
_cur_org_center$6 = -68					; size = 4
_par_cur_center$7 = -64					; size = 4
_par_org_center$8 = -60					; size = 4
_parent$9 = -56						; size = 4
_align$10 = -48						; size = 12
_fit_len$11 = -32					; size = 4
_do_snapping$12 = -28					; size = 4
_len$13 = -24						; size = 4
_pos$14 = -20						; size = 4
_delta$ = -16						; size = 4
_scale$ = -12						; size = 4
_dim$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hint$ = 8						; size = 4
_globals$ = 12						; size = 4
_dimension$ = 16					; size = 4
_glyph$ = 20						; size = 4
_psh_hint_align PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 443
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 444
	imul	eax, DWORD PTR _dimension$[ebp], 204
	mov	ecx, DWORD PTR _globals$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _dim$[ebp], edx
; Line 445
	mov	eax, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	mov	DWORD PTR _scale$[ebp], ecx
; Line 446
	mov	edx, DWORD PTR _dim$[ebp]
	mov	eax, DWORD PTR [edx+200]
	mov	DWORD PTR _delta$[ebp], eax
; Line 449
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 8
	jne	$LN36@psh_hint_a
; Line 451
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _pos$14[ebp], eax
; Line 452
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _len$13[ebp], eax
; Line 461
	cmp	DWORD PTR _dimension$[ebp], 0
	jne	SHORT $LN32@psh_hint_a
	mov	eax, DWORD PTR _glyph$[ebp]
	movzx	ecx, BYTE PTR [eax+120]
	test	ecx, ecx
	je	SHORT $LN33@psh_hint_a
$LN32@psh_hint_a:
	cmp	DWORD PTR _dimension$[ebp], 1
	jne	SHORT $LN34@psh_hint_a
	mov	edx, DWORD PTR _glyph$[ebp]
	movzx	eax, BYTE PTR [edx+121]
	test	eax, eax
	jne	SHORT $LN34@psh_hint_a
$LN33@psh_hint_a:
; Line 463
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR _pos$14[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 464
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR _len$13[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 466
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR [edx+16]
	or	eax, 8
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 467
	jmp	$LN36@psh_hint_a
$LN34@psh_hint_a:
; Line 474
	cmp	DWORD PTR _dimension$[ebp], 0
	jne	SHORT $LN38@psh_hint_a
	mov	edx, DWORD PTR _glyph$[ebp]
	movzx	eax, BYTE PTR [edx+122]
	test	eax, eax
	jne	SHORT $LN40@psh_hint_a
$LN38@psh_hint_a:
	cmp	DWORD PTR _dimension$[ebp], 1
	jne	SHORT $LN39@psh_hint_a
	mov	ecx, DWORD PTR _glyph$[ebp]
	movzx	edx, BYTE PTR [ecx+123]
	test	edx, edx
	jne	SHORT $LN40@psh_hint_a
$LN39@psh_hint_a:
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN41@psh_hint_a
$LN40@psh_hint_a:
	mov	DWORD PTR tv134[ebp], 1
$LN41@psh_hint_a:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR _do_snapping$12[ebp], eax
; Line 476
	mov	ecx, DWORD PTR _len$13[ebp]
	mov	DWORD PTR _fit_len$11[ebp], ecx
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _fit_len$11[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 479
	mov	DWORD PTR _align$10[ebp], 0
; Line 480
	mov	DWORD PTR _align$10[ebp+4], 0
	mov	ecx, DWORD PTR _align$10[ebp+4]
	mov	DWORD PTR _align$10[ebp+8], ecx
; Line 482
	cmp	DWORD PTR _dimension$[ebp], 1
	jne	SHORT $LN31@psh_hint_a
; Line 486
	lea	edx, DWORD PTR _align$10[ebp]
	push	edx
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _hint$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	mov	edx, DWORD PTR _globals$[ebp]
	add	edx, 412				; 0000019cH
	push	edx
	call	_psh_blues_snap_stem
	add	esp, 16					; 00000010H
$LN31@psh_hint_a:
; Line 488
	mov	eax, DWORD PTR _align$10[ebp]
	mov	DWORD PTR tv146[ebp], eax
	cmp	DWORD PTR tv146[ebp], 1
	je	SHORT $LN28@psh_hint_a
	cmp	DWORD PTR tv146[ebp], 2
	je	SHORT $LN27@psh_hint_a
	cmp	DWORD PTR tv146[ebp], 3
	je	SHORT $LN26@psh_hint_a
	jmp	SHORT $LN25@psh_hint_a
$LN28@psh_hint_a:
; Line 492
	mov	ecx, DWORD PTR _align$10[ebp+4]
	sub	ecx, DWORD PTR _fit_len$11[ebp]
	mov	edx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 493
	jmp	$LN29@psh_hint_a
$LN27@psh_hint_a:
; Line 497
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR _align$10[ebp+8]
	mov	DWORD PTR [eax+8], ecx
; Line 498
	jmp	$LN29@psh_hint_a
$LN26@psh_hint_a:
; Line 502
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _align$10[ebp+8]
	mov	DWORD PTR [edx+8], eax
; Line 503
	mov	ecx, DWORD PTR _align$10[ebp+4]
	sub	ecx, DWORD PTR _align$10[ebp+8]
	mov	edx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 504
	jmp	$LN29@psh_hint_a
$LN25@psh_hint_a:
; Line 508
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _parent$9[ebp], ecx
; Line 511
	cmp	DWORD PTR _parent$9[ebp], 0
	je	SHORT $LN24@psh_hint_a
; Line 518
	mov	edx, DWORD PTR _parent$9[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 8
	jne	SHORT $LN23@psh_hint_a
; Line 519
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dimension$[ebp]
	push	edx
	mov	eax, DWORD PTR _globals$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parent$9[ebp]
	push	ecx
	call	_psh_hint_align
	add	esp, 16					; 00000010H
$LN23@psh_hint_a:
; Line 524
	mov	edx, DWORD PTR _parent$9[ebp]
	mov	eax, DWORD PTR [edx+4]
	sar	eax, 1
	mov	ecx, DWORD PTR _parent$9[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _par_org_center$8[ebp], eax
; Line 525
	mov	edx, DWORD PTR _parent$9[ebp]
	mov	eax, DWORD PTR [edx+12]
	sar	eax, 1
	mov	ecx, DWORD PTR _parent$9[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _par_cur_center$7[ebp], eax
; Line 526
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sar	eax, 1
	mov	ecx, DWORD PTR _hint$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _cur_org_center$6[ebp], eax
; Line 528
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur_org_center$6[ebp]
	sub	eax, DWORD PTR _par_org_center$8[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _cur_delta$5[ebp], eax
; Line 529
	mov	ecx, DWORD PTR _par_cur_center$7[ebp]
	add	ecx, DWORD PTR _cur_delta$5[ebp]
	mov	edx, DWORD PTR _len$13[ebp]
	sar	edx, 1
	sub	ecx, edx
	mov	DWORD PTR _pos$14[ebp], ecx
$LN24@psh_hint_a:
; Line 532
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR _pos$14[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 533
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _fit_len$11[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 539
	mov	ecx, DWORD PTR _glyph$[ebp]
	movzx	edx, BYTE PTR [ecx+124]
	test	edx, edx
	je	$LN22@psh_hint_a
; Line 541
	cmp	DWORD PTR _len$13[ebp], 64		; 00000040H
	jg	$LN21@psh_hint_a
; Line 546
	cmp	DWORD PTR _len$13[ebp], 32		; 00000020H
	jl	SHORT $LN20@psh_hint_a
; Line 559
	mov	eax, DWORD PTR _len$13[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _pos$14[ebp]
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _pos$14[ebp], eax
; Line 560
	mov	DWORD PTR _len$13[ebp], 64		; 00000040H
	jmp	SHORT $LN19@psh_hint_a
$LN20@psh_hint_a:
; Line 562
	cmp	DWORD PTR _len$13[ebp], 0
	jle	SHORT $LN18@psh_hint_a
; Line 578
	mov	ecx, DWORD PTR _pos$14[ebp]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _left_nearest$4[ebp], ecx
; Line 579
	mov	edx, DWORD PTR _len$13[ebp]
	mov	eax, DWORD PTR _pos$14[ebp]
	lea	ecx, DWORD PTR [eax+edx+32]
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _right_nearest$3[ebp], ecx
; Line 580
	mov	edx, DWORD PTR _left_nearest$4[ebp]
	sub	edx, DWORD PTR _pos$14[ebp]
	mov	DWORD PTR _left_disp$2[ebp], edx
; Line 581
	mov	eax, DWORD PTR _pos$14[ebp]
	add	eax, DWORD PTR _len$13[ebp]
	mov	ecx, DWORD PTR _right_nearest$3[ebp]
	sub	ecx, eax
	mov	DWORD PTR _right_disp$1[ebp], ecx
; Line 584
	cmp	DWORD PTR _left_disp$2[ebp], 0
	jge	SHORT $LN17@psh_hint_a
; Line 585
	mov	edx, DWORD PTR _left_disp$2[ebp]
	neg	edx
	mov	DWORD PTR _left_disp$2[ebp], edx
$LN17@psh_hint_a:
; Line 586
	cmp	DWORD PTR _right_disp$1[ebp], 0
	jge	SHORT $LN16@psh_hint_a
; Line 587
	mov	eax, DWORD PTR _right_disp$1[ebp]
	neg	eax
	mov	DWORD PTR _right_disp$1[ebp], eax
$LN16@psh_hint_a:
; Line 588
	mov	ecx, DWORD PTR _left_disp$2[ebp]
	cmp	ecx, DWORD PTR _right_disp$1[ebp]
	jg	SHORT $LN15@psh_hint_a
; Line 589
	mov	edx, DWORD PTR _left_nearest$4[ebp]
	mov	DWORD PTR _pos$14[ebp], edx
; Line 590
	jmp	SHORT $LN14@psh_hint_a
$LN15@psh_hint_a:
; Line 591
	mov	eax, DWORD PTR _right_nearest$3[ebp]
	mov	DWORD PTR _pos$14[ebp], eax
$LN14@psh_hint_a:
; Line 593
	jmp	SHORT $LN19@psh_hint_a
$LN18@psh_hint_a:
; Line 596
	mov	ecx, DWORD PTR _pos$14[ebp]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _pos$14[ebp], ecx
$LN19@psh_hint_a:
; Line 599
	jmp	SHORT $LN22@psh_hint_a
$LN21@psh_hint_a:
; Line 601
	push	0
	mov	edx, DWORD PTR _len$13[ebp]
	push	edx
	mov	eax, DWORD PTR _dim$[ebp]
	push	eax
	call	_psh_dimension_quantize_len
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _len$13[ebp], eax
$LN22@psh_hint_a:
; Line 607
	mov	ecx, DWORD PTR _len$13[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$14[ebp]
	push	edx
	call	_psh_hint_snap_stem_side_delta
	add	esp, 8
	add	eax, DWORD PTR _pos$14[ebp]
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 608
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _len$13[ebp]
	mov	DWORD PTR [edx+12], eax
$LN29@psh_hint_a:
; Line 612
	cmp	DWORD PTR _do_snapping$12[ebp], 0
	je	$LN11@psh_hint_a
; Line 614
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _pos$14[ebp], edx
; Line 615
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _len$13[ebp], ecx
; Line 617
	cmp	DWORD PTR _len$13[ebp], 64		; 00000040H
	jge	SHORT $LN10@psh_hint_a
; Line 618
	mov	DWORD PTR _len$13[ebp], 64		; 00000040H
; Line 619
	jmp	SHORT $LN9@psh_hint_a
$LN10@psh_hint_a:
; Line 620
	mov	edx, DWORD PTR _len$13[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _len$13[ebp], edx
$LN9@psh_hint_a:
; Line 622
	mov	eax, DWORD PTR _align$10[ebp]
	mov	DWORD PTR tv226[ebp], eax
	cmp	DWORD PTR tv226[ebp], 1
	je	SHORT $LN6@psh_hint_a
	cmp	DWORD PTR tv226[ebp], 2
	je	SHORT $LN5@psh_hint_a
	cmp	DWORD PTR tv226[ebp], 3
	je	SHORT $LN4@psh_hint_a
	jmp	SHORT $LN3@psh_hint_a
$LN6@psh_hint_a:
; Line 625
	mov	ecx, DWORD PTR _align$10[ebp+4]
	sub	ecx, DWORD PTR _len$13[ebp]
	mov	edx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 626
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR _len$13[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 627
	jmp	SHORT $LN11@psh_hint_a
$LN5@psh_hint_a:
; Line 630
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _len$13[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 631
	jmp	SHORT $LN11@psh_hint_a
$LN4@psh_hint_a:
; Line 635
	jmp	SHORT $LN11@psh_hint_a
$LN3@psh_hint_a:
; Line 639
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR _len$13[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 640
	mov	eax, DWORD PTR _len$13[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN2@psh_hint_a
; Line 641
	mov	ecx, DWORD PTR _len$13[ebp]
	sar	ecx, 1
	add	ecx, DWORD PTR _pos$14[ebp]
	and	ecx, -64				; ffffffc0H
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pos$14[ebp], ecx
; Line 642
	jmp	SHORT $LN1@psh_hint_a
$LN2@psh_hint_a:
; Line 643
	mov	edx, DWORD PTR _len$13[ebp]
	sar	edx, 1
	mov	eax, DWORD PTR _pos$14[ebp]
	lea	ecx, DWORD PTR [eax+edx+32]
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _pos$14[ebp], ecx
$LN1@psh_hint_a:
; Line 645
	mov	edx, DWORD PTR _len$13[ebp]
	sar	edx, 1
	mov	eax, DWORD PTR _pos$14[ebp]
	sub	eax, edx
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 646
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _len$13[ebp]
	mov	DWORD PTR [edx+12], eax
$LN11@psh_hint_a:
; Line 650
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 8
	mov	eax, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [eax+16], edx
$LN36@psh_hint_a:
; Line 657
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@psh_hint_a
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN44@psh_hint_a:
	DD	1
	DD	$LN43@psh_hint_a
$LN43@psh_hint_a:
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN42@psh_hint_a
$LN42@psh_hint_a:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
_psh_hint_align ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -16						; size = 4
tv74 = -12						; size = 4
_delta2$ = -8						; size = 4
_delta1$ = -4						; size = 4
_pos$ = 8						; size = 4
_len$ = 12						; size = 4
_psh_hint_snap_stem_side_delta PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 426
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 427
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	sub	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _delta1$[ebp], eax
; Line 428
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [edx+ecx+32]
	and	eax, -64				; ffffffc0H
	sub	eax, DWORD PTR _pos$[ebp]
	sub	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _delta2$[ebp], eax
; Line 431
	cmp	DWORD PTR _delta1$[ebp], 0
	jge	SHORT $LN5@psh_hint_s
	mov	ecx, DWORD PTR _delta1$[ebp]
	neg	ecx
	mov	DWORD PTR tv74[ebp], ecx
	jmp	SHORT $LN6@psh_hint_s
$LN5@psh_hint_s:
	mov	edx, DWORD PTR _delta1$[ebp]
	mov	DWORD PTR tv74[ebp], edx
$LN6@psh_hint_s:
	cmp	DWORD PTR _delta2$[ebp], 0
	jge	SHORT $LN7@psh_hint_s
	mov	eax, DWORD PTR _delta2$[ebp]
	neg	eax
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN8@psh_hint_s
$LN7@psh_hint_s:
	mov	ecx, DWORD PTR _delta2$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
$LN8@psh_hint_s:
	mov	edx, DWORD PTR tv74[ebp]
	cmp	edx, DWORD PTR tv77[ebp]
	jg	SHORT $LN2@psh_hint_s
; Line 432
	mov	eax, DWORD PTR _delta1$[ebp]
	jmp	SHORT $LN3@psh_hint_s
; Line 433
	jmp	SHORT $LN3@psh_hint_s
$LN2@psh_hint_s:
; Line 434
	mov	eax, DWORD PTR _delta2$[ebp]
$LN3@psh_hint_s:
; Line 435
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_hint_snap_stem_side_delta ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_delta$1 = -4						; size = 4
_dim$ = 8						; size = 4
_len$ = 12						; size = 4
_do_snapping$ = 16					; size = 1
_psh_dimension_quantize_len PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 349
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 350
	cmp	DWORD PTR _len$[ebp], 64		; 00000040H
	jg	SHORT $LN14@psh_dimens
; Line 351
	mov	DWORD PTR _len$[ebp], 64		; 00000040H
; Line 352
	jmp	$LN13@psh_dimens
$LN14@psh_dimens:
; Line 354
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _dim$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR [edx+ecx+8]
	mov	DWORD PTR _delta$1[ebp], eax
; Line 357
	jns	SHORT $LN12@psh_dimens
; Line 358
	mov	ecx, DWORD PTR _delta$1[ebp]
	neg	ecx
	mov	DWORD PTR _delta$1[ebp], ecx
$LN12@psh_dimens:
; Line 360
	cmp	DWORD PTR _delta$1[ebp], 40		; 00000028H
	jge	SHORT $LN11@psh_dimens
; Line 362
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _len$[ebp], edx
; Line 363
	cmp	DWORD PTR _len$[ebp], 48		; 00000030H
	jge	SHORT $LN11@psh_dimens
; Line 364
	mov	DWORD PTR _len$[ebp], 48		; 00000030H
$LN11@psh_dimens:
; Line 367
	cmp	DWORD PTR _len$[ebp], 192		; 000000c0H
	jge	SHORT $LN9@psh_dimens
; Line 369
	mov	eax, DWORD PTR _len$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _delta$1[ebp], eax
; Line 370
	mov	ecx, DWORD PTR _len$[ebp]
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _len$[ebp], ecx
; Line 372
	cmp	DWORD PTR _delta$1[ebp], 10		; 0000000aH
	jge	SHORT $LN8@psh_dimens
; Line 373
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, DWORD PTR _delta$1[ebp]
	mov	DWORD PTR _len$[ebp], edx
	jmp	SHORT $LN7@psh_dimens
$LN8@psh_dimens:
; Line 375
	cmp	DWORD PTR _delta$1[ebp], 32		; 00000020H
	jge	SHORT $LN6@psh_dimens
; Line 376
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _len$[ebp], eax
	jmp	SHORT $LN7@psh_dimens
$LN6@psh_dimens:
; Line 378
	cmp	DWORD PTR _delta$1[ebp], 54		; 00000036H
	jge	SHORT $LN4@psh_dimens
; Line 379
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 54					; 00000036H
	mov	DWORD PTR _len$[ebp], ecx
; Line 381
	jmp	SHORT $LN7@psh_dimens
$LN4@psh_dimens:
; Line 382
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, DWORD PTR _delta$1[ebp]
	mov	DWORD PTR _len$[ebp], edx
$LN7@psh_dimens:
; Line 384
	jmp	SHORT $LN13@psh_dimens
$LN9@psh_dimens:
; Line 385
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _len$[ebp], eax
$LN13@psh_dimens:
; Line 388
	movzx	ecx, BYTE PTR _do_snapping$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@psh_dimens
; Line 389
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _len$[ebp], edx
$LN1@psh_dimens:
; Line 391
	mov	eax, DWORD PTR _len$[ebp]
; Line 392
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_dimension_quantize_len ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sort$1 = -52						; size = 4
_hint2$2 = -48						; size = 4
_hint1$3 = -44						; size = 4
_i2$4 = -40						; size = 4
_i1$5 = -36						; size = 4
_count2$6 = -32						; size = 4
_hint$7 = -28						; size = 4
_count$ = -24						; size = 4
_limit$ = -20						; size = 4
_idx$ = -16						; size = 4
_cursor$ = -12						; size = 4
_val$ = -8						; size = 4
_mask$ = -4						; size = 4
_table$ = 8						; size = 4
_hint_mask$ = 12					; size = 4
_psh_hint_table_activate_mask PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 248
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 249
	mov	DWORD PTR _mask$[ebp], 0
	mov	DWORD PTR _val$[ebp], 0
; Line 250
	mov	eax, DWORD PTR _hint_mask$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cursor$[ebp], ecx
; Line 254
	mov	edx, DWORD PTR _hint_mask$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _limit$[ebp], eax
; Line 255
	mov	DWORD PTR _count$[ebp], 0
; Line 257
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_psh_hint_table_deactivate
	add	esp, 4
; Line 259
	mov	DWORD PTR _idx$[ebp], 0
	jmp	SHORT $LN20@psh_hint_t
$LN19@psh_hint_t:
	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, 1
	mov	DWORD PTR _idx$[ebp], edx
$LN20@psh_hint_t:
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN18@psh_hint_t
; Line 261
	cmp	DWORD PTR _mask$[ebp], 0
	jne	SHORT $LN17@psh_hint_t
; Line 263
	mov	ecx, DWORD PTR _cursor$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _val$[ebp], edx
	mov	eax, DWORD PTR _cursor$[ebp]
	add	eax, 1
	mov	DWORD PTR _cursor$[ebp], eax
; Line 264
	mov	DWORD PTR _mask$[ebp], 128		; 00000080H
$LN17@psh_hint_t:
; Line 267
	mov	ecx, DWORD PTR _val$[ebp]
	and	ecx, DWORD PTR _mask$[ebp]
	je	SHORT $LN16@psh_hint_t
; Line 269
	imul	edx, DWORD PTR _idx$[ebp], 28
	mov	eax, DWORD PTR _table$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _hint$7[ebp], edx
; Line 272
	mov	ecx, DWORD PTR _hint$7[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 4
	jne	SHORT $LN16@psh_hint_t
; Line 289
	mov	DWORD PTR _count2$6[ebp], 0
; Line 292
	cmp	DWORD PTR _count2$6[ebp], 0
	jne	SHORT $LN16@psh_hint_t
; Line 294
	mov	eax, DWORD PTR _hint$7[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 4
	mov	edx, DWORD PTR _hint$7[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 295
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN11@psh_hint_t
; Line 296
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _hint$7[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 297
	jmp	SHORT $LN16@psh_hint_t
$LN11@psh_hint_t:
; Line 299
	mov	ecx, 4
	imul	edx, ecx, 45
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN10@psh_hint_t
	push	OFFSET $SG8761
	call	_FT_Message
	add	esp, 4
$LN10@psh_hint_t:
	xor	eax, eax
	jne	SHORT $LN11@psh_hint_t
$LN16@psh_hint_t:
; Line 304
	mov	ecx, DWORD PTR _mask$[ebp]
	sar	ecx, 1
	mov	DWORD PTR _mask$[ebp], ecx
; Line 305
	jmp	$LN19@psh_hint_t
$LN18@psh_hint_t:
; Line 306
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 313
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _sort$1[ebp], edx
; Line 318
	mov	DWORD PTR _i1$5[ebp], 1
	jmp	SHORT $LN7@psh_hint_t
$LN6@psh_hint_t:
	mov	eax, DWORD PTR _i1$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i1$5[ebp], eax
$LN7@psh_hint_t:
	mov	ecx, DWORD PTR _i1$5[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jge	SHORT $LN21@psh_hint_t
; Line 320
	mov	edx, DWORD PTR _i1$5[ebp]
	mov	eax, DWORD PTR _sort$1[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _hint1$3[ebp], ecx
; Line 321
	mov	edx, DWORD PTR _i1$5[ebp]
	sub	edx, 1
	mov	DWORD PTR _i2$4[ebp], edx
	jmp	SHORT $LN4@psh_hint_t
$LN3@psh_hint_t:
	mov	eax, DWORD PTR _i2$4[ebp]
	sub	eax, 1
	mov	DWORD PTR _i2$4[ebp], eax
$LN4@psh_hint_t:
	cmp	DWORD PTR _i2$4[ebp], 0
	jl	SHORT $LN2@psh_hint_t
; Line 323
	mov	ecx, DWORD PTR _i2$4[ebp]
	mov	edx, DWORD PTR _sort$1[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _hint2$2[ebp], eax
; Line 325
	mov	ecx, DWORD PTR _hint2$2[ebp]
	mov	edx, DWORD PTR _hint1$3[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN1@psh_hint_t
; Line 326
	jmp	SHORT $LN2@psh_hint_t
$LN1@psh_hint_t:
; Line 328
	mov	ecx, DWORD PTR _i2$4[ebp]
	mov	edx, DWORD PTR _sort$1[ebp]
	mov	eax, DWORD PTR _hint2$2[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax
; Line 329
	mov	ecx, DWORD PTR _i2$4[ebp]
	mov	edx, DWORD PTR _sort$1[ebp]
	mov	eax, DWORD PTR _hint1$3[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 330
	jmp	SHORT $LN3@psh_hint_t
$LN2@psh_hint_t:
; Line 331
	jmp	SHORT $LN6@psh_hint_t
$LN21@psh_hint_t:
; Line 333
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_hint_table_activate_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$1 = -32						; size = 4
_mask$2 = -28						; size = 4
_read$3 = -24						; size = 4
_write$4 = -20						; size = 4
_error$ = -12						; size = 4
_count$ = -4						; size = 4
_table$ = 8						; size = 4
_hints$ = 12						; size = 4
_hint_masks$ = 16					; size = 4
_counter_masks$ = 20					; size = 4
_memory$ = 24						; size = 4
_psh_hint_table_init PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 178
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 182
	mov	eax, DWORD PTR _counter_masks$[ebp]
	mov	DWORD PTR _counter_masks$[ebp], eax
; Line 185
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _count$[ebp], edx
; Line 190
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _count$[ebp]
	shl	ecx, 1
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN16@psh_hint_t
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	0
	push	28					; 0000001cH
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN16@psh_hint_t
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _count$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+1]
	push	edx
	push	0
	push	16					; 00000010H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+24], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@psh_hint_t
$LN16@psh_hint_t:
; Line 191
	jmp	$Exit$23
$LN17@psh_hint_t:
; Line 193
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR [edx], eax
; Line 194
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 195
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 196
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 197
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 201
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _write$4[ebp], ecx
; Line 202
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _read$3[ebp], eax
; Line 205
	jmp	SHORT $LN15@psh_hint_t
$LN14@psh_hint_t:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _write$4[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _write$4[ebp], edx
	mov	eax, DWORD PTR _read$3[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _read$3[ebp], eax
$LN15@psh_hint_t:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN13@psh_hint_t
; Line 207
	mov	ecx, DWORD PTR _write$4[ebp]
	mov	edx, DWORD PTR _read$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
; Line 208
	mov	ecx, DWORD PTR _write$4[ebp]
	mov	edx, DWORD PTR _read$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
; Line 209
	mov	ecx, DWORD PTR _write$4[ebp]
	mov	edx, DWORD PTR _read$3[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+16], eax
; Line 210
	jmp	SHORT $LN14@psh_hint_t
$LN13@psh_hint_t:
; Line 215
	cmp	DWORD PTR _hint_masks$[ebp], 0
	je	SHORT $LN12@psh_hint_t
; Line 217
	mov	ecx, DWORD PTR _hint_masks$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _mask$2[ebp], edx
; Line 220
	mov	eax, DWORD PTR _hint_masks$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
; Line 221
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _hint_masks$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 223
	jmp	SHORT $LN11@psh_hint_t
$LN10@psh_hint_t:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _mask$2[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _mask$2[ebp], edx
$LN11@psh_hint_t:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN12@psh_hint_t
; Line 224
	mov	eax, DWORD PTR _mask$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_psh_hint_table_record_mask
	add	esp, 8
	jmp	SHORT $LN10@psh_hint_t
$LN12@psh_hint_t:
; Line 228
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $Exit$23
$LN7@psh_hint_t:
; Line 233
	mov	edx, 4
	imul	eax, edx, 45
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN6@psh_hint_t
	push	OFFSET $SG8730
	call	_FT_Message
	add	esp, 4
$LN6@psh_hint_t:
	xor	ecx, ecx
	jne	SHORT $LN7@psh_hint_t
; Line 235
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _count$[ebp], eax
; Line 236
	mov	DWORD PTR _idx$1[ebp], 0
	jmp	SHORT $LN3@psh_hint_t
$LN2@psh_hint_t:
	mov	ecx, DWORD PTR _idx$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$1[ebp], ecx
$LN3@psh_hint_t:
	mov	edx, DWORD PTR _idx$1[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jae	SHORT $Exit$23
; Line 237
	mov	eax, DWORD PTR _idx$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_psh_hint_table_record
	add	esp, 8
	jmp	SHORT $LN2@psh_hint_t
$Exit$23:
; Line 241
	mov	eax, DWORD PTR _error$[ebp]
; Line 242
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@psh_hint_t
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@psh_hint_t:
	DD	1
	DD	$LN21@psh_hint_t
$LN21@psh_hint_t:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN20@psh_hint_t
$LN20@psh_hint_t:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_psh_hint_table_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$ = -20						; size = 4
_idx$ = -16						; size = 4
_cursor$ = -12						; size = 4
_val$ = -8						; size = 4
_mask$ = -4						; size = 4
_table$ = 8						; size = 4
_hint_mask$ = 12					; size = 4
_psh_hint_table_record_mask PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 147
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 148
	mov	DWORD PTR _mask$[ebp], 0
	mov	DWORD PTR _val$[ebp], 0
; Line 149
	mov	eax, DWORD PTR _hint_mask$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cursor$[ebp], ecx
; Line 153
	mov	edx, DWORD PTR _hint_mask$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _limit$[ebp], eax
; Line 155
	mov	DWORD PTR _idx$[ebp], 0
	jmp	SHORT $LN5@psh_hint_t
$LN4@psh_hint_t:
	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx
$LN5@psh_hint_t:
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN6@psh_hint_t
; Line 157
	cmp	DWORD PTR _mask$[ebp], 0
	jne	SHORT $LN2@psh_hint_t
; Line 159
	mov	eax, DWORD PTR _cursor$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _val$[ebp], ecx
	mov	edx, DWORD PTR _cursor$[ebp]
	add	edx, 1
	mov	DWORD PTR _cursor$[ebp], edx
; Line 160
	mov	DWORD PTR _mask$[ebp], 128		; 00000080H
$LN2@psh_hint_t:
; Line 163
	mov	eax, DWORD PTR _val$[ebp]
	and	eax, DWORD PTR _mask$[ebp]
	je	SHORT $LN1@psh_hint_t
; Line 164
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_psh_hint_table_record
	add	esp, 8
$LN1@psh_hint_t:
; Line 166
	mov	eax, DWORD PTR _mask$[ebp]
	sar	eax, 1
	mov	DWORD PTR _mask$[ebp], eax
; Line 167
	jmp	SHORT $LN4@psh_hint_t
$LN6@psh_hint_t:
; Line 168
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_hint_table_record_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hint2$1 = -16						; size = 4
_count$2 = -12						; size = 4
_sorted$3 = -8						; size = 4
_hint$ = -4						; size = 4
_table$ = 8						; size = 4
_idx$ = 12						; size = 4
_psh_hint_table_record PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 100
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 101
	imul	eax, DWORD PTR _idx$[ebp], 28
	mov	ecx, DWORD PTR _table$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _hint$[ebp], eax
; Line 104
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR [edx]
	jb	SHORT $LN16@psh_hint_t
$LN15@psh_hint_t:
; Line 106
	mov	ecx, 4
	imul	edx, ecx, 45
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN14@psh_hint_t
	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	push	OFFSET $SG8659
	call	_FT_Message
	add	esp, 8
$LN14@psh_hint_t:
	xor	ecx, ecx
	jne	SHORT $LN15@psh_hint_t
; Line 107
	jmp	$LN17@psh_hint_t
$LN16@psh_hint_t:
; Line 111
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 4
	je	SHORT $LN11@psh_hint_t
; Line 112
	jmp	$LN17@psh_hint_t
$LN11@psh_hint_t:
; Line 114
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 4
	mov	eax, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 119
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _sorted$3[ebp], edx
; Line 120
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _count$2[ebp], ecx
; Line 124
	mov	edx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 125
	jmp	SHORT $LN10@psh_hint_t
$LN9@psh_hint_t:
	mov	eax, DWORD PTR _count$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$2[ebp], eax
	mov	ecx, DWORD PTR _sorted$3[ebp]
	add	ecx, 4
	mov	DWORD PTR _sorted$3[ebp], ecx
$LN10@psh_hint_t:
	cmp	DWORD PTR _count$2[ebp], 0
	jbe	SHORT $LN8@psh_hint_t
; Line 127
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _sorted$3[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _hint2$1[ebp], edx
; Line 129
	mov	eax, DWORD PTR _hint2$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _hint$[ebp]
	push	ecx
	call	_psh_hint_overlap
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@psh_hint_t
; Line 131
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _hint2$1[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 132
	jmp	SHORT $LN8@psh_hint_t
$LN7@psh_hint_t:
; Line 134
	jmp	SHORT $LN9@psh_hint_t
$LN8@psh_hint_t:
; Line 137
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN4@psh_hint_t
; Line 138
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 139
	jmp	SHORT $LN17@psh_hint_t
$LN4@psh_hint_t:
; Line 140
	mov	ecx, 4
	imul	edx, ecx, 45
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN3@psh_hint_t
	push	OFFSET $SG8674
	call	_FT_Message
	add	esp, 4
$LN3@psh_hint_t:
	xor	eax, eax
	jne	SHORT $LN4@psh_hint_t
$LN17@psh_hint_t:
; Line 141
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_hint_table_record ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hint$ = -8						; size = 4
_count$ = -4						; size = 4
_table$ = 8						; size = 4
_psh_hint_table_deactivate PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 84
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
; Line 85
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _hint$[ebp], eax
; Line 88
	jmp	SHORT $LN3@psh_hint_t
$LN2@psh_hint_t:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _hint$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _hint$[ebp], edx
$LN3@psh_hint_t:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN4@psh_hint_t
; Line 90
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 91
	mov	eax, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [eax+24], -1
; Line 92
	jmp	SHORT $LN2@psh_hint_t
$LN4@psh_hint_t:
; Line 93
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_hint_table_deactivate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_table$ = 8						; size = 4
_memory$ = 12						; size = 4
_psh_hint_table_done PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 67
	push	ebp
	mov	ebp, esp
$LN9@psh_hint_t:
; Line 68
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+24], 0
	xor	ecx, ecx
	jne	SHORT $LN9@psh_hint_t
; Line 69
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 70
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN6@psh_hint_t:
; Line 72
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+12], 0
	xor	edx, edx
	jne	SHORT $LN6@psh_hint_t
$LN3@psh_hint_t:
; Line 73
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+8], 0
	xor	ecx, ecx
	jne	SHORT $LN3@psh_hint_t
; Line 74
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 75
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax], 0
; Line 76
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 77
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_psh_hint_table_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -4						; size = 4
_hint1$ = 8						; size = 4
_hint2$ = 12						; size = 4
_psh_hint_overlap PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 57
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 59
	mov	eax, DWORD PTR _hint1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _hint1$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _hint2$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN3@psh_hint_o
	mov	ecx, DWORD PTR _hint2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _hint2$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _hint1$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN3@psh_hint_o
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@psh_hint_o
$LN3@psh_hint_o:
	mov	DWORD PTR tv74[ebp], 0
$LN4@psh_hint_o:
	mov	eax, DWORD PTR tv74[ebp]
; Line 60
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_hint_overlap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv214 = -52						; size = 4
_max_height$1 = -48					; size = 2
_max_scale$2 = -44					; size = 4
_write$3 = -40						; size = 4
_dim$4 = -36						; size = 4
_write$5 = -32						; size = 4
_dim$6 = -28						; size = 4
_read$7 = -24						; size = 4
_count$8 = -20						; size = 4
_error$ = -12						; size = 4
_globals$ = -4						; size = 4
_memory$ = 8						; size = 4
_priv$ = 12						; size = 4
_aglobals$ = 16						; size = 4
_psh_globals_new PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshglob.c
; Line 648
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 649
	mov	DWORD PTR _globals$[ebp], 0
; Line 653
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	2496					; 000009c0H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _globals$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN7@psh_global
; Line 659
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [edx], eax
; Line 663
	mov	ecx, 204				; 000000ccH
	shl	ecx, 0
	mov	edx, DWORD PTR _globals$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _dim$6[ebp], eax
; Line 664
	mov	ecx, DWORD PTR _dim$6[ebp]
	add	ecx, 4
	mov	DWORD PTR _write$5[ebp], ecx
; Line 667
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _priv$[ebp]
	movzx	edx, WORD PTR [ecx+eax+120]
	mov	eax, DWORD PTR _write$5[ebp]
	mov	DWORD PTR [eax], edx
; Line 668
	mov	ecx, DWORD PTR _write$5[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _write$5[ebp], ecx
; Line 670
	mov	edx, DWORD PTR _priv$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _read$7[ebp], edx
; Line 671
	mov	eax, DWORD PTR _priv$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	mov	DWORD PTR _count$8[ebp], ecx
	jmp	SHORT $LN6@psh_global
$LN5@psh_global:
	mov	edx, DWORD PTR _count$8[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$8[ebp], edx
$LN6@psh_global:
	cmp	DWORD PTR _count$8[ebp], 0
	jbe	SHORT $LN4@psh_global
; Line 673
	mov	eax, DWORD PTR _read$7[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _write$5[ebp]
	mov	DWORD PTR [edx], ecx
; Line 674
	mov	eax, DWORD PTR _write$5[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _write$5[ebp], eax
; Line 675
	mov	ecx, DWORD PTR _read$7[ebp]
	add	ecx, 2
	mov	DWORD PTR _read$7[ebp], ecx
; Line 676
	jmp	SHORT $LN5@psh_global
$LN4@psh_global:
; Line 678
	mov	edx, DWORD PTR _priv$[ebp]
	movzx	eax, BYTE PTR [edx+124]
	add	eax, 1
	mov	ecx, DWORD PTR _dim$6[ebp]
	mov	DWORD PTR [ecx], eax
; Line 683
	mov	edx, 204				; 000000ccH
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _globals$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _dim$4[ebp], edx
; Line 684
	mov	eax, DWORD PTR _dim$4[ebp]
	add	eax, 4
	mov	DWORD PTR _write$3[ebp], eax
; Line 687
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _priv$[ebp]
	movzx	ecx, WORD PTR [eax+edx+122]
	mov	edx, DWORD PTR _write$3[ebp]
	mov	DWORD PTR [edx], ecx
; Line 688
	mov	eax, DWORD PTR _write$3[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _write$3[ebp], eax
; Line 689
	mov	ecx, DWORD PTR _priv$[ebp]
	add	ecx, 154				; 0000009aH
	mov	DWORD PTR _read$7[ebp], ecx
; Line 690
	mov	edx, DWORD PTR _priv$[ebp]
	movzx	eax, BYTE PTR [edx+125]
	mov	DWORD PTR _count$8[ebp], eax
	jmp	SHORT $LN3@psh_global
$LN2@psh_global:
	mov	ecx, DWORD PTR _count$8[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$8[ebp], ecx
$LN3@psh_global:
	cmp	DWORD PTR _count$8[ebp], 0
	jbe	SHORT $LN1@psh_global
; Line 692
	mov	edx, DWORD PTR _read$7[ebp]
	movsx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _write$3[ebp]
	mov	DWORD PTR [ecx], eax
; Line 693
	mov	edx, DWORD PTR _write$3[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _write$3[ebp], edx
; Line 694
	mov	eax, DWORD PTR _read$7[ebp]
	add	eax, 2
	mov	DWORD PTR _read$7[ebp], eax
; Line 695
	jmp	SHORT $LN2@psh_global
$LN1@psh_global:
; Line 697
	mov	ecx, DWORD PTR _priv$[ebp]
	movzx	edx, BYTE PTR [ecx+125]
	add	edx, 1
	mov	eax, DWORD PTR _dim$4[ebp]
	mov	DWORD PTR [eax], edx
; Line 703
	push	0
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	mov	eax, DWORD PTR _priv$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _priv$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	push	edx
	mov	eax, DWORD PTR _priv$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _priv$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _globals$[ebp]
	add	eax, 412				; 0000019cH
	push	eax
	call	_psh_blues_set_zones
	add	esp, 28					; 0000001cH
; Line 707
	push	1
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	mov	eax, DWORD PTR _priv$[ebp]
	add	eax, 88					; 00000058H
	push	eax
	mov	ecx, DWORD PTR _priv$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	push	edx
	mov	eax, DWORD PTR _priv$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _priv$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	push	edx
	mov	eax, DWORD PTR _globals$[ebp]
	add	eax, 412				; 0000019cH
	push	eax
	call	_psh_blues_set_zones
	add	esp, 28					; 0000001cH
; Line 712
	mov	ecx, 1
	mov	WORD PTR _max_height$1[ebp], cx
; Line 717
	movzx	edx, WORD PTR _max_height$1[ebp]
	push	edx
	mov	eax, DWORD PTR _priv$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _priv$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	call	_psh_calc_max_height
	add	esp, 12					; 0000000cH
	mov	WORD PTR _max_height$1[ebp], ax
; Line 720
	movzx	eax, WORD PTR _max_height$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _priv$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _priv$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	push	eax
	call	_psh_calc_max_height
	add	esp, 12					; 0000000cH
	mov	WORD PTR _max_height$1[ebp], ax
; Line 723
	movzx	ecx, WORD PTR _max_height$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _priv$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	eax, DWORD PTR _priv$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	push	ecx
	call	_psh_calc_max_height
	add	esp, 12					; 0000000cH
	mov	WORD PTR _max_height$1[ebp], ax
; Line 726
	movzx	edx, WORD PTR _max_height$1[ebp]
	push	edx
	mov	eax, DWORD PTR _priv$[ebp]
	add	eax, 88					; 00000058H
	push	eax
	mov	ecx, DWORD PTR _priv$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	push	edx
	call	_psh_calc_max_height
	add	esp, 12					; 0000000cH
	mov	WORD PTR _max_height$1[ebp], ax
; Line 729
	movsx	eax, WORD PTR _max_height$1[ebp]
	push	eax
	push	1000					; 000003e8H
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _max_scale$2[ebp], eax
; Line 732
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	cmp	edx, DWORD PTR _max_scale$2[ebp]
	jge	SHORT $LN10@psh_global
	mov	eax, DWORD PTR _priv$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR tv214[ebp], ecx
	jmp	SHORT $LN11@psh_global
$LN10@psh_global:
	mov	edx, DWORD PTR _max_scale$2[ebp]
	mov	DWORD PTR tv214[ebp], edx
$LN11@psh_global:
	mov	eax, DWORD PTR _globals$[ebp]
	mov	ecx, DWORD PTR tv214[ebp]
	mov	DWORD PTR [eax+2476], ecx
; Line 735
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR _priv$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR [edx+2480], ecx
; Line 736
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR _priv$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR [edx+2488], ecx
; Line 738
	mov	edx, 204				; 000000ccH
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [ecx+eax+200], 0
; Line 739
	mov	edx, 204				; 000000ccH
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [ecx+eax+204], 0
; Line 740
	mov	edx, 204				; 000000ccH
	shl	edx, 0
	mov	eax, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [eax+edx+200], 0
; Line 741
	mov	ecx, 204				; 000000ccH
	shl	ecx, 0
	mov	edx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [edx+ecx+204], 0
$LN7@psh_global:
; Line 748
	mov	eax, DWORD PTR _aglobals$[ebp]
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 749
	mov	eax, DWORD PTR _error$[ebp]
; Line 750
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@psh_global
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@psh_global:
	DD	1
	DD	$LN13@psh_global
$LN13@psh_global:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN12@psh_global
$LN12@psh_global:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_psh_globals_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -4						; size = 4
_globals$ = 8						; size = 4
_psh_globals_destroy PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshglob.c
; Line 620
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 621
	cmp	DWORD PTR _globals$[ebp], 0
	je	SHORT $LN5@psh_global
; Line 626
	mov	eax, DWORD PTR _globals$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$1[ebp], ecx
; Line 627
	mov	edx, 204				; 000000ccH
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [ecx+eax+4], 0
; Line 628
	mov	edx, 204				; 000000ccH
	shl	edx, 0
	mov	eax, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [eax+edx+4], 0
; Line 630
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [ecx+412], 0
; Line 631
	mov	edx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [edx+928], 0
; Line 632
	mov	eax, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [eax+1444], 0
; Line 633
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [ecx+1960], 0
$LN3@psh_global:
; Line 635
	mov	edx, DWORD PTR _globals$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _globals$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@psh_global
$LN5@psh_global:
; Line 641
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_globals_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cur_height$1 = -8					; size = 2
_count$ = -4						; size = 4
_num$ = 8						; size = 4
_values$ = 12						; size = 4
_cur_max$ = 16						; size = 2
_psh_calc_max_height PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshglob.c
; Line 530
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 534
	mov	DWORD PTR _count$[ebp], 0
	jmp	SHORT $LN4@psh_calc_m
$LN3@psh_calc_m:
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 2
	mov	DWORD PTR _count$[ebp], eax
$LN4@psh_calc_m:
	mov	ecx, DWORD PTR _count$[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN2@psh_calc_m
; Line 536
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _values$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+2]
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _values$[ebp]
	movsx	edx, WORD PTR [eax+edx*2]
	sub	ecx, edx
	mov	WORD PTR _cur_height$1[ebp], cx
; Line 539
	movsx	eax, WORD PTR _cur_height$1[ebp]
	movsx	ecx, WORD PTR _cur_max$[ebp]
	cmp	eax, ecx
	jle	SHORT $LN1@psh_calc_m
; Line 540
	mov	dx, WORD PTR _cur_height$1[ebp]
	mov	WORD PTR _cur_max$[ebp], dx
$LN1@psh_calc_m:
; Line 541
	jmp	SHORT $LN3@psh_calc_m
$LN2@psh_calc_m:
; Line 543
	mov	ax, WORD PTR _cur_max$[ebp]
; Line 544
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_calc_max_height ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv161 = -60						; size = 4
tv87 = -56						; size = 4
tv76 = -50						; size = 1
tv70 = -49						; size = 1
_Delta$1 = -48						; size = 4
_family$2 = -44						; size = 4
_normal$3 = -40						; size = 4
_count2$4 = -36						; size = 4
_count1$5 = -32						; size = 4
_zone2$6 = -28						; size = 4
_zone1$7 = -24						; size = 4
_zone$8 = -20						; size = 4
_threshold$9 = -16					; size = 4
_table$ = -12						; size = 4
_num$ = -8						; size = 4
_count$ = -4						; size = 4
_blues$ = 8						; size = 4
_scale$ = 12						; size = 4
_delta$ = 16						; size = 4
_psh_blues_scale_zones PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshglob.c
; Line 369
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 372
	mov	DWORD PTR _table$[ebp], 0
; Line 405
	cmp	DWORD PTR _scale$[ebp], 34359738	; 020c49baH
	jl	SHORT $LN31@psh_blues_
; Line 406
	mov	eax, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [eax+2064]
	shl	eax, 3
	cdq
	mov	ecx, 125				; 0000007dH
	idiv	ecx
	cmp	DWORD PTR _scale$[ebp], eax
	jge	SHORT $LN34@psh_blues_
	mov	BYTE PTR tv70[ebp], 1
	jmp	SHORT $LN35@psh_blues_
$LN34@psh_blues_:
	mov	BYTE PTR tv70[ebp], 0
$LN35@psh_blues_:
	mov	edx, DWORD PTR _blues$[ebp]
	mov	al, BYTE PTR tv70[ebp]
	mov	BYTE PTR [edx+2080], al
; Line 407
	jmp	SHORT $LN30@psh_blues_
$LN31@psh_blues_:
; Line 408
	imul	ecx, DWORD PTR _scale$[ebp], 125
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx+2064]
	shl	eax, 3
	cmp	ecx, eax
	jge	SHORT $LN36@psh_blues_
	mov	BYTE PTR tv76[ebp], 1
	jmp	SHORT $LN37@psh_blues_
$LN36@psh_blues_:
	mov	BYTE PTR tv76[ebp], 0
$LN37@psh_blues_:
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	dl, BYTE PTR tv76[ebp]
	mov	BYTE PTR [ecx+2080], dl
$LN30@psh_blues_:
; Line 420
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [eax+2068]
	mov	DWORD PTR _threshold$9[ebp], ecx
$LN29@psh_blues_:
; Line 423
	cmp	DWORD PTR _threshold$9[ebp], 0
	jle	SHORT $LN28@psh_blues_
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _threshold$9[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN28@psh_blues_
; Line 424
	mov	ecx, DWORD PTR _threshold$9[ebp]
	sub	ecx, 1
	mov	DWORD PTR _threshold$9[ebp], ecx
	jmp	SHORT $LN29@psh_blues_
$LN28@psh_blues_:
; Line 426
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR _threshold$9[ebp]
	mov	DWORD PTR [edx+2072], eax
; Line 429
	mov	DWORD PTR _num$[ebp], 0
	jmp	SHORT $LN27@psh_blues_
$LN26@psh_blues_:
	mov	ecx, DWORD PTR _num$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num$[ebp], ecx
$LN27@psh_blues_:
	cmp	DWORD PTR _num$[ebp], 4
	jae	$LN25@psh_blues_
; Line 434
	mov	edx, DWORD PTR _num$[ebp]
	mov	DWORD PTR tv87[ebp], edx
	cmp	DWORD PTR tv87[ebp], 0
	je	SHORT $LN22@psh_blues_
	cmp	DWORD PTR tv87[ebp], 1
	je	SHORT $LN21@psh_blues_
	cmp	DWORD PTR tv87[ebp], 2
	je	SHORT $LN20@psh_blues_
	jmp	SHORT $LN19@psh_blues_
$LN22@psh_blues_:
; Line 437
	mov	eax, DWORD PTR _blues$[ebp]
	mov	DWORD PTR _table$[ebp], eax
; Line 438
	jmp	SHORT $LN23@psh_blues_
$LN21@psh_blues_:
; Line 440
	mov	ecx, DWORD PTR _blues$[ebp]
	add	ecx, 516				; 00000204H
	mov	DWORD PTR _table$[ebp], ecx
; Line 441
	jmp	SHORT $LN23@psh_blues_
$LN20@psh_blues_:
; Line 443
	mov	edx, DWORD PTR _blues$[ebp]
	add	edx, 1032				; 00000408H
	mov	DWORD PTR _table$[ebp], edx
; Line 444
	jmp	SHORT $LN23@psh_blues_
$LN19@psh_blues_:
; Line 446
	mov	eax, DWORD PTR _blues$[ebp]
	add	eax, 1548				; 0000060cH
	mov	DWORD PTR _table$[ebp], eax
$LN23@psh_blues_:
; Line 450
	mov	ecx, DWORD PTR _table$[ebp]
	add	ecx, 4
	mov	DWORD PTR _zone$8[ebp], ecx
; Line 451
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _count$[ebp], eax
; Line 452
	jmp	SHORT $LN18@psh_blues_
$LN17@psh_blues_:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _zone$8[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _zone$8[ebp], edx
$LN18@psh_blues_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN16@psh_blues_
; Line 454
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zone$8[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _zone$8[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 455
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _zone$8[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _zone$8[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 456
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zone$8[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _zone$8[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 457
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _zone$8[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _zone$8[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 460
	mov	eax, DWORD PTR _zone$8[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _zone$8[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 468
	jmp	$LN17@psh_blues_
$LN16@psh_blues_:
; Line 469
	jmp	$LN26@psh_blues_
$LN25@psh_blues_:
; Line 473
	mov	DWORD PTR _num$[ebp], 0
	jmp	SHORT $LN15@psh_blues_
$LN14@psh_blues_:
	mov	eax, DWORD PTR _num$[ebp]
	add	eax, 1
	mov	DWORD PTR _num$[ebp], eax
$LN15@psh_blues_:
	cmp	DWORD PTR _num$[ebp], 2
	jae	$LN32@psh_blues_
; Line 480
	mov	ecx, DWORD PTR _num$[ebp]
	mov	DWORD PTR tv161[ebp], ecx
	cmp	DWORD PTR tv161[ebp], 0
	je	SHORT $LN10@psh_blues_
	jmp	SHORT $LN9@psh_blues_
$LN10@psh_blues_:
; Line 483
	mov	edx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR _normal$3[ebp], edx
; Line 484
	mov	eax, DWORD PTR _blues$[ebp]
	add	eax, 1032				; 00000408H
	mov	DWORD PTR _family$2[ebp], eax
; Line 485
	jmp	SHORT $LN11@psh_blues_
$LN9@psh_blues_:
; Line 488
	mov	ecx, DWORD PTR _blues$[ebp]
	add	ecx, 516				; 00000204H
	mov	DWORD PTR _normal$3[ebp], ecx
; Line 489
	mov	edx, DWORD PTR _blues$[ebp]
	add	edx, 1548				; 0000060cH
	mov	DWORD PTR _family$2[ebp], edx
$LN11@psh_blues_:
; Line 492
	mov	eax, DWORD PTR _normal$3[ebp]
	add	eax, 4
	mov	DWORD PTR _zone1$7[ebp], eax
; Line 493
	mov	ecx, DWORD PTR _normal$3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _count1$5[ebp], edx
; Line 495
	jmp	SHORT $LN8@psh_blues_
$LN7@psh_blues_:
	mov	eax, DWORD PTR _count1$5[ebp]
	sub	eax, 1
	mov	DWORD PTR _count1$5[ebp], eax
	mov	ecx, DWORD PTR _zone1$7[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _zone1$7[ebp], ecx
$LN8@psh_blues_:
	cmp	DWORD PTR _count1$5[ebp], 0
	jbe	$LN6@psh_blues_
; Line 499
	mov	edx, DWORD PTR _family$2[ebp]
	add	edx, 4
	mov	DWORD PTR _zone2$6[ebp], edx
; Line 500
	mov	eax, DWORD PTR _family$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count2$4[ebp], ecx
; Line 502
	jmp	SHORT $LN5@psh_blues_
$LN4@psh_blues_:
	mov	edx, DWORD PTR _count2$4[ebp]
	sub	edx, 1
	mov	DWORD PTR _count2$4[ebp], edx
	mov	eax, DWORD PTR _zone2$6[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _zone2$6[ebp], eax
$LN5@psh_blues_:
	cmp	DWORD PTR _count2$4[ebp], 0
	jbe	SHORT $LN3@psh_blues_
; Line 507
	mov	ecx, DWORD PTR _zone1$7[ebp]
	mov	edx, DWORD PTR _zone2$6[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR _Delta$1[ebp], eax
; Line 508
	jns	SHORT $LN2@psh_blues_
; Line 509
	mov	ecx, DWORD PTR _Delta$1[ebp]
	neg	ecx
	mov	DWORD PTR _Delta$1[ebp], ecx
$LN2@psh_blues_:
; Line 511
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _Delta$1[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN1@psh_blues_
; Line 513
	mov	ecx, DWORD PTR _zone1$7[ebp]
	mov	edx, DWORD PTR _zone2$6[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
; Line 514
	mov	ecx, DWORD PTR _zone1$7[ebp]
	mov	edx, DWORD PTR _zone2$6[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
; Line 515
	mov	ecx, DWORD PTR _zone1$7[ebp]
	mov	edx, DWORD PTR _zone2$6[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
; Line 516
	mov	ecx, DWORD PTR _zone1$7[ebp]
	mov	edx, DWORD PTR _zone2$6[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
; Line 517
	jmp	SHORT $LN3@psh_blues_
$LN1@psh_blues_:
; Line 519
	jmp	SHORT $LN4@psh_blues_
$LN3@psh_blues_:
; Line 520
	jmp	$LN7@psh_blues_
$LN6@psh_blues_:
; Line 521
	jmp	$LN14@psh_blues_
$LN32@psh_blues_:
; Line 522
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_blues_scale_zones ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv185 = -56						; size = 4
_zone$1 = -52						; size = 4
_delta$2 = -48						; size = 4
_bot$3 = -44						; size = 4
_top$4 = -40						; size = 4
_dim$5 = -36						; size = 4
_delta$6 = -32						; size = 4
_zone$7 = -28						; size = 4
_delta$8 = -24						; size = 4
_zone$9 = -20						; size = 4
_count_bot$ = -16					; size = 4
_count_top$ = -12					; size = 4
_bot_table$ = -8					; size = 4
_top_table$ = -4					; size = 4
_target$ = 8						; size = 4
_count$ = 12						; size = 4
_blues$ = 16						; size = 4
_count_others$ = 20					; size = 4
_other_blues$ = 24					; size = 4
_fuzz$ = 28						; size = 4
_family$ = 32						; size = 4
_psh_blues_set_zones PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshglob.c
; Line 241
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 246
	cmp	DWORD PTR _family$[ebp], 0
	je	SHORT $LN23@psh_blues_
; Line 248
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1032				; 00000408H
	mov	DWORD PTR _top_table$[ebp], eax
; Line 249
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1548				; 0000060cH
	mov	DWORD PTR _bot_table$[ebp], ecx
; Line 251
	jmp	SHORT $LN22@psh_blues_
$LN23@psh_blues_:
; Line 253
	mov	edx, DWORD PTR _target$[ebp]
	mov	DWORD PTR _top_table$[ebp], edx
; Line 254
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 516				; 00000204H
	mov	DWORD PTR _bot_table$[ebp], eax
$LN22@psh_blues_:
; Line 259
	mov	ecx, DWORD PTR _top_table$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 260
	mov	edx, DWORD PTR _bot_table$[ebp]
	mov	DWORD PTR [edx], 0
; Line 264
	mov	eax, DWORD PTR _bot_table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _top_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blues$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	call	_psh_blues_set_zones_0
	add	esp, 24					; 00000018H
; Line 266
	mov	edx, DWORD PTR _bot_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _top_table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _other_blues$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count_others$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_psh_blues_set_zones_0
	add	esp, 24					; 00000018H
; Line 268
	mov	ecx, DWORD PTR _top_table$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _count_top$[ebp], edx
; Line 269
	mov	eax, DWORD PTR _bot_table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count_bot$[ebp], ecx
; Line 272
	cmp	DWORD PTR _count_top$[ebp], 0
	jle	$LN21@psh_blues_
; Line 274
	mov	edx, DWORD PTR _top_table$[ebp]
	add	edx, 4
	mov	DWORD PTR _zone$9[ebp], edx
; Line 277
	mov	eax, DWORD PTR _count_top$[ebp]
	mov	DWORD PTR _count$[ebp], eax
	jmp	SHORT $LN20@psh_blues_
$LN19@psh_blues_:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _zone$9[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _zone$9[ebp], edx
$LN20@psh_blues_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN21@psh_blues_
; Line 282
	cmp	DWORD PTR _count$[ebp], 1
	jbe	SHORT $LN17@psh_blues_
; Line 284
	mov	eax, 32					; 00000020H
	shl	eax, 0
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _zone$9[ebp]
	mov	esi, DWORD PTR _zone$9[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [esi+edx]
	mov	DWORD PTR _delta$8[ebp], eax
; Line 285
	mov	ecx, DWORD PTR _zone$9[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _delta$8[ebp]
	jle	SHORT $LN17@psh_blues_
; Line 286
	mov	eax, DWORD PTR _zone$9[ebp]
	mov	ecx, DWORD PTR _delta$8[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN17@psh_blues_:
; Line 289
	mov	edx, DWORD PTR _zone$9[ebp]
	mov	eax, DWORD PTR _zone$9[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+12], ecx
; Line 290
	mov	edx, DWORD PTR _zone$9[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _zone$9[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _zone$9[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 291
	jmp	SHORT $LN19@psh_blues_
$LN21@psh_blues_:
; Line 295
	cmp	DWORD PTR _count_bot$[ebp], 0
	jle	$LN15@psh_blues_
; Line 297
	mov	eax, DWORD PTR _bot_table$[ebp]
	add	eax, 4
	mov	DWORD PTR _zone$7[ebp], eax
; Line 300
	mov	ecx, DWORD PTR _count_bot$[ebp]
	mov	DWORD PTR _count$[ebp], ecx
	jmp	SHORT $LN14@psh_blues_
$LN13@psh_blues_:
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
	mov	eax, DWORD PTR _zone$7[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _zone$7[ebp], eax
$LN14@psh_blues_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN15@psh_blues_
; Line 305
	cmp	DWORD PTR _count$[ebp], 1
	jbe	SHORT $LN11@psh_blues_
; Line 307
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	mov	eax, 32					; 00000020H
	shl	eax, 0
	mov	ecx, DWORD PTR _zone$7[ebp]
	mov	esi, DWORD PTR _zone$7[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	sub	edx, DWORD PTR [esi+eax]
	mov	DWORD PTR _delta$6[ebp], edx
; Line 308
	mov	eax, DWORD PTR _zone$7[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _delta$6[ebp]
	jge	SHORT $LN11@psh_blues_
; Line 309
	mov	edx, DWORD PTR _zone$7[ebp]
	mov	eax, DWORD PTR _delta$6[ebp]
	mov	DWORD PTR [edx+4], eax
$LN11@psh_blues_:
; Line 312
	mov	ecx, DWORD PTR _zone$7[ebp]
	mov	edx, DWORD PTR _zone$7[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+8], eax
; Line 313
	mov	ecx, DWORD PTR _zone$7[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _zone$7[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _zone$7[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 314
	jmp	SHORT $LN13@psh_blues_
$LN15@psh_blues_:
; Line 323
	mov	edx, DWORD PTR _top_table$[ebp]
	add	edx, 4
	mov	DWORD PTR _zone$1[ebp], edx
; Line 324
	mov	eax, DWORD PTR _count_top$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 326
	mov	DWORD PTR _dim$5[ebp], 1
	jmp	SHORT $LN9@psh_blues_
$LN8@psh_blues_:
	mov	ecx, DWORD PTR _dim$5[ebp]
	sub	ecx, 1
	mov	DWORD PTR _dim$5[ebp], ecx
$LN9@psh_blues_:
	cmp	DWORD PTR _dim$5[ebp], 0
	jl	$LN24@psh_blues_
; Line 328
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN6@psh_blues_
; Line 331
	mov	edx, DWORD PTR _zone$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _fuzz$[ebp]
	mov	ecx, DWORD PTR _zone$1[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 335
	mov	edx, DWORD PTR _zone$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _top$4[ebp], eax
; Line 337
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	jmp	SHORT $LN5@psh_blues_
$LN4@psh_blues_:
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
$LN5@psh_blues_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN3@psh_blues_
; Line 339
	mov	eax, 32					; 00000020H
	shl	eax, 0
	mov	ecx, DWORD PTR _zone$1[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	mov	DWORD PTR _bot$3[ebp], edx
; Line 340
	mov	eax, DWORD PTR _bot$3[ebp]
	sub	eax, DWORD PTR _top$4[ebp]
	mov	DWORD PTR _delta$2[ebp], eax
; Line 342
	mov	ecx, DWORD PTR _fuzz$[ebp]
	shl	ecx, 1
	cmp	DWORD PTR _delta$2[ebp], ecx
	jge	SHORT $LN2@psh_blues_
; Line 343
	mov	eax, DWORD PTR _delta$2[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _top$4[ebp]
	add	edx, eax
	mov	DWORD PTR tv185[ebp], edx
	mov	eax, 32					; 00000020H
	shl	eax, 0
	mov	ecx, DWORD PTR _zone$1[ebp]
	mov	edx, DWORD PTR tv185[ebp]
	mov	DWORD PTR [ecx+eax+12], edx
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _zone$1[ebp]
	mov	eax, DWORD PTR tv185[ebp]
	mov	DWORD PTR [edx+ecx+8], eax
; Line 344
	jmp	SHORT $LN1@psh_blues_
$LN2@psh_blues_:
; Line 346
	mov	ecx, DWORD PTR _top$4[ebp]
	add	ecx, DWORD PTR _fuzz$[ebp]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 0
	mov	edx, DWORD PTR _zone$1[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
; Line 347
	mov	eax, DWORD PTR _bot$3[ebp]
	sub	eax, DWORD PTR _fuzz$[ebp]
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	mov	edx, DWORD PTR _zone$1[ebp]
	mov	DWORD PTR [edx+ecx+12], eax
$LN1@psh_blues_:
; Line 350
	mov	eax, DWORD PTR _zone$1[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _zone$1[ebp], eax
; Line 351
	mov	ecx, DWORD PTR _zone$1[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _top$4[ebp], edx
; Line 352
	jmp	$LN4@psh_blues_
$LN3@psh_blues_:
; Line 355
	mov	eax, DWORD PTR _top$4[ebp]
	add	eax, DWORD PTR _fuzz$[ebp]
	mov	ecx, DWORD PTR _zone$1[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN6@psh_blues_:
; Line 357
	mov	edx, DWORD PTR _bot_table$[ebp]
	add	edx, 4
	mov	DWORD PTR _zone$1[ebp], edx
; Line 358
	mov	eax, DWORD PTR _count_bot$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 359
	jmp	$LN8@psh_blues_
$LN24@psh_blues_:
; Line 361
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_blues_set_zones ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_delta0$1 = -40						; size = 4
_top$2 = -33						; size = 1
_zone$3 = -32						; size = 4
_zones$4 = -28						; size = 4
_count$5 = -24						; size = 4
_delta$6 = -20						; size = 4
_reference$7 = -16					; size = 4
_first$ = -9						; size = 1
_count_bot$ = -8					; size = 4
_count_top$ = -4					; size = 4
_target$ = 8						; size = 4
_is_others$ = 12					; size = 1
_read_count$ = 16					; size = 4
_read$ = 20						; size = 4
_top_table$ = 24					; size = 4
_bot_table$ = 28					; size = 4
_psh_blues_set_zones_0 PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshglob.c
; Line 145
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 146
	mov	eax, DWORD PTR _top_table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count_top$[ebp], ecx
; Line 147
	mov	edx, DWORD PTR _bot_table$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _count_bot$[ebp], eax
; Line 148
	mov	BYTE PTR _first$[ebp], 1
; Line 150
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR _target$[ebp], ecx
; Line 153
	jmp	SHORT $LN20@psh_blues_
$LN19@psh_blues_:
	mov	edx, DWORD PTR _read_count$[ebp]
	sub	edx, 2
	mov	DWORD PTR _read_count$[ebp], edx
$LN20@psh_blues_:
	cmp	DWORD PTR _read_count$[ebp], 1
	jbe	$LN18@psh_blues_
; Line 162
	mov	BYTE PTR _top$2[ebp], 0
; Line 163
	movzx	eax, BYTE PTR _first$[ebp]
	test	eax, eax
	jne	SHORT $LN16@psh_blues_
	movzx	ecx, BYTE PTR _is_others$[ebp]
	test	ecx, ecx
	je	SHORT $LN17@psh_blues_
$LN16@psh_blues_:
; Line 165
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _read$[ebp]
	movsx	ecx, WORD PTR [eax+edx]
	mov	DWORD PTR _reference$7[ebp], ecx
; Line 166
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _read$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	sub	edx, DWORD PTR _reference$7[ebp]
	mov	DWORD PTR _delta$6[ebp], edx
; Line 168
	mov	eax, DWORD PTR _bot_table$[ebp]
	add	eax, 4
	mov	DWORD PTR _zones$4[ebp], eax
; Line 169
	mov	ecx, DWORD PTR _count_bot$[ebp]
	mov	DWORD PTR _count$5[ebp], ecx
; Line 170
	mov	BYTE PTR _first$[ebp], 0
; Line 172
	jmp	SHORT $LN15@psh_blues_
$LN17@psh_blues_:
; Line 174
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _read$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _reference$7[ebp], edx
; Line 175
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _read$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	sub	edx, DWORD PTR _reference$7[ebp]
	mov	DWORD PTR _delta$6[ebp], edx
; Line 177
	mov	eax, DWORD PTR _top_table$[ebp]
	add	eax, 4
	mov	DWORD PTR _zones$4[ebp], eax
; Line 178
	mov	ecx, DWORD PTR _count_top$[ebp]
	mov	DWORD PTR _count$5[ebp], ecx
; Line 179
	mov	BYTE PTR _top$2[ebp], 1
$LN15@psh_blues_:
; Line 183
	mov	edx, DWORD PTR _zones$4[ebp]
	mov	DWORD PTR _zone$3[ebp], edx
; Line 184
	jmp	SHORT $LN14@psh_blues_
$LN13@psh_blues_:
	mov	eax, DWORD PTR _count$5[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$5[ebp], eax
	mov	ecx, DWORD PTR _zone$3[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _zone$3[ebp], ecx
$LN14@psh_blues_:
	cmp	DWORD PTR _count$5[ebp], 0
	jbe	SHORT $LN12@psh_blues_
; Line 186
	mov	edx, DWORD PTR _zone$3[ebp]
	mov	eax, DWORD PTR _reference$7[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN11@psh_blues_
; Line 187
	jmp	SHORT $LN12@psh_blues_
$LN11@psh_blues_:
; Line 189
	mov	ecx, DWORD PTR _zone$3[ebp]
	mov	edx, DWORD PTR _reference$7[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN10@psh_blues_
; Line 191
	mov	eax, DWORD PTR _zone$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _delta0$1[ebp], ecx
; Line 196
	cmp	DWORD PTR _delta$6[ebp], 0
	jge	SHORT $LN9@psh_blues_
; Line 198
	mov	edx, DWORD PTR _delta$6[ebp]
	cmp	edx, DWORD PTR _delta0$1[ebp]
	jge	SHORT $LN8@psh_blues_
; Line 199
	mov	eax, DWORD PTR _zone$3[ebp]
	mov	ecx, DWORD PTR _delta$6[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN8@psh_blues_:
; Line 201
	jmp	SHORT $LN7@psh_blues_
$LN9@psh_blues_:
; Line 203
	mov	edx, DWORD PTR _delta$6[ebp]
	cmp	edx, DWORD PTR _delta0$1[ebp]
	jle	SHORT $LN7@psh_blues_
; Line 204
	mov	eax, DWORD PTR _zone$3[ebp]
	mov	ecx, DWORD PTR _delta$6[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN7@psh_blues_:
; Line 206
	jmp	SHORT $Skip$23
$LN10@psh_blues_:
; Line 208
	jmp	SHORT $LN13@psh_blues_
$LN12@psh_blues_:
; Line 210
	jmp	SHORT $LN5@psh_blues_
$LN4@psh_blues_:
	mov	edx, DWORD PTR _count$5[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$5[ebp], edx
$LN5@psh_blues_:
	cmp	DWORD PTR _count$5[ebp], 0
	jbe	SHORT $LN3@psh_blues_
; Line 211
	mov	esi, DWORD PTR _count$5[ebp]
	sub	esi, 1
	shl	esi, 5
	add	esi, DWORD PTR _zone$3[ebp]
	mov	edi, DWORD PTR _count$5[ebp]
	shl	edi, 5
	add	edi, DWORD PTR _zone$3[ebp]
	mov	ecx, 8
	rep movsd
	jmp	SHORT $LN4@psh_blues_
$LN3@psh_blues_:
; Line 213
	mov	eax, DWORD PTR _zone$3[ebp]
	mov	ecx, DWORD PTR _reference$7[ebp]
	mov	DWORD PTR [eax], ecx
; Line 214
	mov	edx, DWORD PTR _zone$3[ebp]
	mov	eax, DWORD PTR _delta$6[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 216
	movzx	ecx, BYTE PTR _top$2[ebp]
	test	ecx, ecx
	je	SHORT $LN2@psh_blues_
; Line 217
	mov	edx, DWORD PTR _count_top$[ebp]
	add	edx, 1
	mov	DWORD PTR _count_top$[ebp], edx
; Line 218
	jmp	SHORT $Skip$23
$LN2@psh_blues_:
; Line 219
	mov	eax, DWORD PTR _count_bot$[ebp]
	add	eax, 1
	mov	DWORD PTR _count_bot$[ebp], eax
$Skip$23:
; Line 222
	mov	ecx, DWORD PTR _read$[ebp]
	add	ecx, 4
	mov	DWORD PTR _read$[ebp], ecx
; Line 223
	jmp	$LN19@psh_blues_
$LN18@psh_blues_:
; Line 225
	mov	edx, DWORD PTR _top_table$[ebp]
	mov	eax, DWORD PTR _count_top$[ebp]
	mov	DWORD PTR [edx], eax
; Line 226
	mov	ecx, DWORD PTR _bot_table$[ebp]
	mov	edx, DWORD PTR _count_bot$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 227
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_blues_set_zones_0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dist$1 = -32						; size = 4
_w$2 = -28						; size = 4
_scale$ = -24						; size = 4
_stand$ = -20						; size = 4
_width$ = -16						; size = 4
_count$ = -12						; size = 4
_stdw$ = -8						; size = 4
_dim$ = -4						; size = 4
_globals$ = 8						; size = 4
_direction$ = 12					; size = 4
_psh_globals_scale_widths PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshglob.c
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 44
	imul	eax, DWORD PTR _direction$[ebp], 204
	mov	ecx, DWORD PTR _globals$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _dim$[ebp], edx
; Line 45
	mov	eax, DWORD PTR _dim$[ebp]
	mov	DWORD PTR _stdw$[ebp], eax
; Line 46
	mov	ecx, DWORD PTR _stdw$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _count$[ebp], edx
; Line 47
	mov	eax, DWORD PTR _stdw$[ebp]
	add	eax, 4
	mov	DWORD PTR _width$[ebp], eax
; Line 48
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _stand$[ebp], ecx
; Line 49
	mov	edx, DWORD PTR _dim$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR _scale$[ebp], eax
; Line 52
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN7@psh_global
; Line 54
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 55
	mov	edx, DWORD PTR _width$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 57
	mov	edx, DWORD PTR _width$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _width$[ebp], edx
; Line 58
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 60
	jmp	SHORT $LN5@psh_global
$LN4@psh_global:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _width$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _width$[ebp], edx
$LN5@psh_global:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN7@psh_global
; Line 65
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _w$2[ebp], eax
; Line 66
	mov	eax, DWORD PTR _stand$[ebp]
	mov	ecx, DWORD PTR _w$2[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dist$1[ebp], ecx
; Line 68
	jns	SHORT $LN2@psh_global
; Line 69
	mov	edx, DWORD PTR _dist$1[ebp]
	neg	edx
	mov	DWORD PTR _dist$1[ebp], edx
$LN2@psh_global:
; Line 71
	cmp	DWORD PTR _dist$1[ebp], 128		; 00000080H
	jge	SHORT $LN1@psh_global
; Line 72
	mov	eax, DWORD PTR _stand$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _w$2[ebp], ecx
$LN1@psh_global:
; Line 74
	mov	edx, DWORD PTR _width$[ebp]
	mov	eax, DWORD PTR _w$2[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 75
	mov	ecx, DWORD PTR _w$2[ebp]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 76
	jmp	SHORT $LN4@psh_global
$LN7@psh_global:
; Line 78
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_globals_scale_widths ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_total$ = -152						; size = 4
_n$ = -148						; size = 4
_y$ = -144						; size = 4
_stems$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_hints$ = 8						; size = 4
_dimension$ = 12					; size = 4
_count$ = 16						; size = 4
_coords$ = 20						; size = 4
_t2_hints_stems PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 1178
	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	edi
	lea	edi, DWORD PTR [ebp-152]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1180
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _total$[ebp], eax
; Line 1183
	mov	DWORD PTR _y$[ebp], 0
$LN9@t2_hints_s:
; Line 1184
	cmp	DWORD PTR _total$[ebp], 0
	jle	$LN10@t2_hints_s
; Line 1187
	mov	ecx, DWORD PTR _total$[ebp]
	mov	DWORD PTR _count$[ebp], ecx
; Line 1188
	cmp	DWORD PTR _count$[ebp], 16		; 00000010H
	jle	SHORT $LN7@t2_hints_s
; Line 1189
	mov	DWORD PTR _count$[ebp], 16		; 00000010H
$LN7@t2_hints_s:
; Line 1192
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@t2_hints_s
$LN5@t2_hints_s:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN6@t2_hints_s:
	mov	eax, DWORD PTR _count$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _n$[ebp], eax
	jge	SHORT $LN4@t2_hints_s
; Line 1194
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _coords$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _y$[ebp], eax
; Line 1195
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _stems$[ebp+edx*4], eax
; Line 1196
	jmp	SHORT $LN5@t2_hints_s
$LN4@t2_hints_s:
; Line 1199
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN3@t2_hints_s
$LN2@t2_hints_s:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 2
	mov	DWORD PTR _n$[ebp], eax
$LN3@t2_hints_s:
	mov	ecx, DWORD PTR _count$[ebp]
	shl	ecx, 1
	cmp	DWORD PTR _n$[ebp], ecx
	jge	SHORT $LN1@t2_hints_s
; Line 1200
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _stems$[ebp+edx*4+4]
	sub	ecx, DWORD PTR _stems$[ebp+eax*4]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _stems$[ebp+edx*4+4], ecx
	jmp	SHORT $LN2@t2_hints_s
$LN1@t2_hints_s:
; Line 1203
	lea	eax, DWORD PTR _stems$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dimension$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_ps_hints_stem
	add	esp, 16					; 00000010H
; Line 1205
	mov	ecx, DWORD PTR _total$[ebp]
	sub	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _total$[ebp], ecx
; Line 1206
	jmp	$LN9@t2_hints_s
$LN10@t2_hints_s:
; Line 1207
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@t2_hints_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 152				; 00000098H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@t2_hints_s:
	DD	1
	DD	$LN13@t2_hints_s
$LN13@t2_hints_s:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN12@t2_hints_s
$LN12@t2_hints_s:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_t2_hints_stems ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hints$ = 8						; size = 4
_t2_hints_open PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 1168
	push	ebp
	mov	ebp, esp
; Line 1169
	push	2
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_ps_hints_open
	add	esp, 8
; Line 1170
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t2_hints_open ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stems$ = -12						; size = 8
_hints$ = 8						; size = 4
_dimension$ = 12					; size = 4
_coords$ = 16						; size = 4
_t1_hints_stem PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 1133
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1137
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _coords$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _stems$[ebp+edx], eax
; Line 1138
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _coords$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _stems$[ebp+ecx], eax
; Line 1140
	lea	edx, DWORD PTR _stems$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _dimension$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_ps_hints_stem
	add	esp, 16					; 00000010H
; Line 1141
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@t1_hints_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@t1_hints_s:
	DD	1
	DD	$LN4@t1_hints_s
$LN4@t1_hints_s:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@t1_hints_s
$LN3@t1_hints_s:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_t1_hints_stem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hints$ = 8						; size = 4
_t1_hints_open PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 1125
	push	ebp
	mov	ebp, esp
; Line 1126
	push	1
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_ps_hints_open
	add	esp, 8
; Line 1127
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t1_hints_open ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dim$1 = -12						; size = 4
_memory$2 = -8						; size = 4
_error$ = -4						; size = 4
_hints$ = 8						; size = 4
_end_point$ = 12					; size = 4
_ps_hints_close PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 1089
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1093
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _error$[ebp], ecx
; Line 1094
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@ps_hints_c
; Line 1096
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$2[ebp], eax
; Line 1097
	mov	ecx, DWORD PTR _hints$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _dim$1[ebp], ecx
; Line 1100
	mov	edx, DWORD PTR _memory$2[ebp]
	push	edx
	mov	eax, DWORD PTR _end_point$[ebp]
	push	eax
	mov	ecx, 36					; 00000024H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _dim$1[ebp]
	push	edx
	call	_ps_dimension_end
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1101
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@ps_hints_c
; Line 1103
	mov	eax, DWORD PTR _memory$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _end_point$[ebp]
	push	ecx
	mov	edx, 36					; 00000024H
	shl	edx, 0
	add	edx, DWORD PTR _dim$1[ebp]
	push	edx
	call	_ps_dimension_end
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$LN2@ps_hints_c:
; Line 1111
	mov	eax, DWORD PTR _error$[ebp]
; Line 1112
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_hints_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_count2$1 = -20						; size = 4
_count1$2 = -16						; size = 4
_memory$3 = -12						; size = 4
_dim$4 = -8						; size = 4
_error$ = -4						; size = 4
_hints$ = 8						; size = 4
_bit_count$ = 12					; size = 4
_bytes$ = 16						; size = 4
_ps_hints_t2counter PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 1044
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1048
	mov	eax, DWORD PTR _hints$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN8@ps_hints_t
; Line 1050
	mov	ecx, DWORD PTR _hints$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _dim$4[ebp], ecx
; Line 1051
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$3[ebp], eax
; Line 1052
	mov	ecx, 36					; 00000024H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _dim$4[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _count1$2[ebp], ecx
; Line 1053
	mov	edx, 36					; 00000024H
	shl	edx, 0
	mov	eax, DWORD PTR _dim$4[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _count2$1[ebp], ecx
; Line 1057
	mov	edx, DWORD PTR _count1$2[ebp]
	add	edx, DWORD PTR _count2$1[ebp]
	cmp	DWORD PTR _bit_count$[ebp], edx
	je	SHORT $LN7@ps_hints_t
$LN6@ps_hints_t:
; Line 1061
	mov	eax, 4
	imul	ecx, eax, 43
	cmp	DWORD PTR _ft_trace_levels[ecx], 0
	jl	SHORT $LN5@ps_hints_t
	mov	edx, DWORD PTR _count1$2[ebp]
	add	edx, DWORD PTR _count2$1[ebp]
	push	edx
	mov	eax, DWORD PTR _bit_count$[ebp]
	push	eax
	push	OFFSET $SG8244
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN5@ps_hints_t:
	xor	ecx, ecx
	jne	SHORT $LN6@ps_hints_t
; Line 1064
	jmp	SHORT $LN9@ps_hints_t
$LN7@ps_hints_t:
; Line 1069
	mov	edx, DWORD PTR _memory$3[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _count1$2[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, 36					; 00000024H
	imul	eax, edx, 0
	add	eax, DWORD PTR _dim$4[ebp]
	push	eax
	call	_ps_dimension_set_mask_bits
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 1070
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ps_hints_t
; Line 1071
	jmp	SHORT $Fail$11
$LN2@ps_hints_t:
; Line 1074
	mov	ecx, DWORD PTR _memory$3[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _count2$1[ebp]
	push	edx
	mov	eax, DWORD PTR _count1$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, 36					; 00000024H
	shl	edx, 0
	add	edx, DWORD PTR _dim$4[ebp]
	push	edx
	call	_ps_dimension_set_mask_bits
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 1075
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@ps_hints_t
; Line 1076
	jmp	SHORT $Fail$11
$LN8@ps_hints_t:
; Line 1078
	jmp	SHORT $LN9@ps_hints_t
$Fail$11:
; Line 1081
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN9@ps_hints_t:
; Line 1082
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_hints_t2counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_count2$1 = -20						; size = 4
_count1$2 = -16						; size = 4
_memory$3 = -12						; size = 4
_dim$4 = -8						; size = 4
_error$ = -4						; size = 4
_hints$ = 8						; size = 4
_end_point$ = 12					; size = 4
_bit_count$ = 16					; size = 4
_bytes$ = 20						; size = 4
_ps_hints_t2mask PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 999
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1003
	mov	eax, DWORD PTR _hints$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN8@ps_hints_t
; Line 1005
	mov	ecx, DWORD PTR _hints$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _dim$4[ebp], ecx
; Line 1006
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$3[ebp], eax
; Line 1007
	mov	ecx, 36					; 00000024H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _dim$4[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _count1$2[ebp], ecx
; Line 1008
	mov	edx, 36					; 00000024H
	shl	edx, 0
	mov	eax, DWORD PTR _dim$4[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _count2$1[ebp], ecx
; Line 1012
	mov	edx, DWORD PTR _count1$2[ebp]
	add	edx, DWORD PTR _count2$1[ebp]
	cmp	DWORD PTR _bit_count$[ebp], edx
	je	SHORT $LN7@ps_hints_t
$LN6@ps_hints_t:
; Line 1016
	mov	eax, 4
	imul	ecx, eax, 43
	cmp	DWORD PTR _ft_trace_levels[ecx], 0
	jl	SHORT $LN5@ps_hints_t
	mov	edx, DWORD PTR _count1$2[ebp]
	add	edx, DWORD PTR _count2$1[ebp]
	push	edx
	mov	eax, DWORD PTR _bit_count$[ebp]
	push	eax
	push	OFFSET $SG8221
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN5@ps_hints_t:
	xor	ecx, ecx
	jne	SHORT $LN6@ps_hints_t
; Line 1019
	jmp	SHORT $LN9@ps_hints_t
$LN7@ps_hints_t:
; Line 1024
	mov	edx, DWORD PTR _memory$3[ebp]
	push	edx
	mov	eax, DWORD PTR _end_point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count1$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _count2$1[ebp]
	push	edx
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, 36					; 00000024H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _dim$4[ebp]
	push	edx
	call	_ps_dimension_set_mask_bits
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 1025
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ps_hints_t
; Line 1026
	jmp	SHORT $Fail$11
$LN2@ps_hints_t:
; Line 1029
	mov	eax, DWORD PTR _memory$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _end_point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count2$1[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, 36					; 00000024H
	shl	ecx, 0
	add	ecx, DWORD PTR _dim$4[ebp]
	push	ecx
	call	_ps_dimension_set_mask_bits
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 1030
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@ps_hints_t
; Line 1031
	jmp	SHORT $Fail$11
$LN8@ps_hints_t:
; Line 1033
	jmp	SHORT $LN9@ps_hints_t
$Fail$11:
; Line 1036
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN9@ps_hints_t:
; Line 1037
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_hints_t2mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -8						; size = 4
_error$ = -4						; size = 4
_hints$ = 8						; size = 4
_end_point$ = 12					; size = 4
_ps_hints_t1reset PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 958
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 959
	mov	DWORD PTR _error$[ebp], 0
; Line 962
	mov	eax, DWORD PTR _hints$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN5@ps_hints_t
; Line 964
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$1[ebp], edx
; Line 967
	mov	eax, DWORD PTR _hints$[ebp]
	cmp	DWORD PTR [eax+12], 1
	jne	SHORT $LN4@ps_hints_t
; Line 970
	mov	ecx, DWORD PTR _memory$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _end_point$[ebp]
	push	edx
	mov	eax, 36					; 00000024H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _hints$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	push	eax
	call	_ps_dimension_reset_mask
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 971
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@ps_hints_t
; Line 972
	jmp	SHORT $Fail$8
$LN3@ps_hints_t:
; Line 975
	mov	ecx, DWORD PTR _memory$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _end_point$[ebp]
	push	edx
	mov	eax, 36					; 00000024H
	shl	eax, 0
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	push	edx
	call	_ps_dimension_reset_mask
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 976
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ps_hints_t
; Line 977
	jmp	SHORT $Fail$8
$LN2@ps_hints_t:
; Line 979
	jmp	SHORT $LN5@ps_hints_t
$LN4@ps_hints_t:
; Line 982
	push	OFFSET $SG8199
	push	982					; 000003d6H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 983
	jmp	SHORT $Fail$8
$LN5@ps_hints_t:
; Line 986
	jmp	SHORT $LN6@ps_hints_t
$Fail$8:
; Line 989
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN6@ps_hints_t:
; Line 990
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_hints_t1reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -44						; size = 4
_idx$1 = -36						; size = 12
_count$2 = -20						; size = 4
_memory$3 = -16						; size = 4
_dim$4 = -12						; size = 4
_error$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hints$ = 8						; size = 4
_dimension$ = 12					; size = 4
_stems$ = 16						; size = 4
_ps_hints_t1stem3 PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 896
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 897
	mov	DWORD PTR _error$[ebp], 0
; Line 900
	mov	eax, DWORD PTR _hints$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN14@ps_hints_t
; Line 903
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$3[ebp], edx
; Line 909
	cmp	DWORD PTR _dimension$[ebp], 0
	jl	SHORT $LN11@ps_hints_t
	cmp	DWORD PTR _dimension$[ebp], 1
	jle	SHORT $LN13@ps_hints_t
$LN11@ps_hints_t:
; Line 912
	mov	eax, 4
	imul	ecx, eax, 43
	cmp	DWORD PTR _ft_trace_levels[ecx], 0
	jl	SHORT $LN10@ps_hints_t
	mov	edx, DWORD PTR _dimension$[ebp]
	push	edx
	push	OFFSET $SG8171
	call	_FT_Message
	add	esp, 8
$LN10@ps_hints_t:
	xor	eax, eax
	jne	SHORT $LN11@ps_hints_t
; Line 913
	cmp	DWORD PTR _dimension$[ebp], 0
	je	SHORT $LN17@ps_hints_t
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN18@ps_hints_t
$LN17@ps_hints_t:
	mov	DWORD PTR tv76[ebp], 0
$LN18@ps_hints_t:
	mov	ecx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _dimension$[ebp], ecx
$LN13@ps_hints_t:
; Line 916
	imul	edx, DWORD PTR _dimension$[ebp], 36
	mov	eax, DWORD PTR _hints$[ebp]
	lea	ecx, DWORD PTR [eax+edx+16]
	mov	DWORD PTR _dim$4[ebp], ecx
; Line 919
	mov	edx, DWORD PTR _hints$[ebp]
	cmp	DWORD PTR [edx+12], 1
	jne	$LN7@ps_hints_t
; Line 922
	mov	DWORD PTR _count$2[ebp], 0
	jmp	SHORT $LN6@ps_hints_t
$LN5@ps_hints_t:
	mov	eax, DWORD PTR _count$2[ebp]
	add	eax, 1
	mov	DWORD PTR _count$2[ebp], eax
	mov	ecx, DWORD PTR _stems$[ebp]
	add	ecx, 8
	mov	DWORD PTR _stems$[ebp], ecx
$LN6@ps_hints_t:
	cmp	DWORD PTR _count$2[ebp], 3
	jge	SHORT $LN4@ps_hints_t
; Line 927
	mov	edx, DWORD PTR _count$2[ebp]
	lea	eax, DWORD PTR _idx$1[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _memory$3[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _stems$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	push	eax
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _stems$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _dim$4[ebp]
	push	eax
	call	_ps_dimension_add_t1stem
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 928
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@ps_hints_t
; Line 929
	jmp	SHORT $Fail$22
$LN3@ps_hints_t:
; Line 930
	jmp	SHORT $LN5@ps_hints_t
$LN4@ps_hints_t:
; Line 934
	mov	ecx, DWORD PTR _memory$3[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _idx$1[ebp+edx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _idx$1[ebp+ecx]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _idx$1[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _dim$4[ebp]
	push	eax
	call	_ps_dimension_add_counter
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 935
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ps_hints_t
; Line 936
	jmp	SHORT $Fail$22
$LN2@ps_hints_t:
; Line 938
	jmp	SHORT $LN14@ps_hints_t
$LN7@ps_hints_t:
; Line 940
	push	OFFSET $SG8182
	call	_FT_Message
	add	esp, 4
; Line 941
	push	OFFSET $SG8183
	push	941					; 000003adH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 942
	jmp	SHORT $Fail$22
$LN14@ps_hints_t:
; Line 946
	jmp	SHORT $LN15@ps_hints_t
$Fail$22:
; Line 949
	push	OFFSET $SG8184
	call	_FT_Message
	add	esp, 4
; Line 950
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN15@ps_hints_t:
; Line 951
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@ps_hints_t
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@ps_hints_t:
	DD	1
	DD	$LN20@ps_hints_t
$LN20@ps_hints_t:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN19@ps_hints_t
$LN19@ps_hints_t:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
_ps_hints_t1stem3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -20						; size = 4
tv75 = -16						; size = 4
_memory$1 = -12						; size = 4
_error$2 = -8						; size = 4
_dim$3 = -4						; size = 4
_hints$ = 8						; size = 4
_dimension$ = 12					; size = 4
_count$ = 16						; size = 4
_stems$ = 20						; size = 4
_ps_hints_stem PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 841
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 842
	mov	eax, DWORD PTR _hints$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN20@ps_hints_s
; Line 845
	cmp	DWORD PTR _dimension$[ebp], 0
	jl	SHORT $LN16@ps_hints_s
	cmp	DWORD PTR _dimension$[ebp], 1
	jle	SHORT $LN18@ps_hints_s
$LN16@ps_hints_s:
; Line 848
	mov	ecx, 4
	imul	edx, ecx, 43
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN15@ps_hints_s
	mov	eax, DWORD PTR _dimension$[ebp]
	push	eax
	push	OFFSET $SG8128
	call	_FT_Message
	add	esp, 8
$LN15@ps_hints_s:
	xor	ecx, ecx
	jne	SHORT $LN16@ps_hints_s
; Line 849
	cmp	DWORD PTR _dimension$[ebp], 0
	je	SHORT $LN22@ps_hints_s
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN23@ps_hints_s
$LN22@ps_hints_s:
	mov	DWORD PTR tv75[ebp], 0
$LN23@ps_hints_s:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _dimension$[ebp], edx
$LN18@ps_hints_s:
; Line 853
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv77[ebp], ecx
	cmp	DWORD PTR tv77[ebp], 0
	jle	$LN4@ps_hints_s
	cmp	DWORD PTR tv77[ebp], 2
	jle	SHORT $LN10@ps_hints_s
	jmp	$LN4@ps_hints_s
$LN10@ps_hints_s:
; Line 858
	imul	edx, DWORD PTR _dimension$[ebp], 36
	mov	eax, DWORD PTR _hints$[ebp]
	lea	ecx, DWORD PTR [eax+edx+16]
	mov	DWORD PTR _dim$3[ebp], ecx
; Line 861
	jmp	SHORT $LN9@ps_hints_s
$LN8@ps_hints_s:
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
	mov	eax, DWORD PTR _stems$[ebp]
	add	eax, 8
	mov	DWORD PTR _stems$[ebp], eax
$LN9@ps_hints_s:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN7@ps_hints_s
; Line 864
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$1[ebp], edx
; Line 869
	push	0
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _stems$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _stems$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _dim$3[ebp]
	push	edx
	call	_ps_dimension_add_t1stem
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$2[ebp], eax
; Line 870
	cmp	DWORD PTR _error$2[ebp], 0
	je	SHORT $LN6@ps_hints_s
; Line 873
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _stems$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _stems$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	push	OFFSET $SG8144
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 875
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR _error$2[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 876
	jmp	SHORT $LN20@ps_hints_s
$LN6@ps_hints_s:
; Line 878
	jmp	$LN8@ps_hints_s
$LN7@ps_hints_s:
; Line 879
	jmp	SHORT $LN20@ps_hints_s
$LN4@ps_hints_s:
; Line 884
	mov	eax, 4
	imul	ecx, eax, 43
	cmp	DWORD PTR _ft_trace_levels[ecx], 0
	jl	SHORT $LN3@ps_hints_s
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG8150
	call	_FT_Message
	add	esp, 8
$LN3@ps_hints_s:
	xor	ecx, ecx
	jne	SHORT $LN4@ps_hints_s
$LN20@ps_hints_s:
; Line 888
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_hints_stem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_hints$ = 8						; size = 4
_hint_type$ = 12					; size = 4
_ps_hints_open PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 813
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 814
	mov	eax, DWORD PTR _hint_type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	jle	SHORT $LN5@ps_hints_o
	cmp	DWORD PTR tv64[ebp], 2
	jle	SHORT $LN6@ps_hints_o
	jmp	SHORT $LN5@ps_hints_o
$LN6@ps_hints_o:
; Line 818
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 819
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _hint_type$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 821
	mov	ecx, 36					; 00000024H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _hints$[ebp]
	lea	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	call	_ps_dimension_init
	add	esp, 4
; Line 822
	mov	edx, 36					; 00000024H
	shl	edx, 0
	mov	eax, DWORD PTR _hints$[ebp]
	lea	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	call	_ps_dimension_init
	add	esp, 4
; Line 823
	jmp	SHORT $LN9@ps_hints_o
$LN5@ps_hints_o:
; Line 826
	push	OFFSET $SG8105
	push	826					; 0000033aH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	edx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 827
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR _hint_type$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN4@ps_hints_o:
; Line 829
	mov	edx, 4
	imul	eax, edx, 43
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN3@ps_hints_o
	push	OFFSET $SG8110
	call	_FT_Message
	add	esp, 4
$LN3@ps_hints_o:
	xor	ecx, ecx
	jne	SHORT $LN4@ps_hints_o
$LN9@ps_hints_o:
; Line 832
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_hints_open ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dim$ = 8						; size = 4
_end_point$ = 12					; size = 4
_memory$ = 16						; size = 4
_ps_dimension_end PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 767
	push	ebp
	mov	ebp, esp
; Line 769
	mov	eax, DWORD PTR _end_point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	call	_ps_dimension_end_mask
	add	esp, 8
; Line 772
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _dim$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_ps_mask_table_merge_all
	add	esp, 8
; Line 773
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ps_dimension_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_counter$ = -16						; size = 4
_count$ = -8						; size = 4
_error$ = -4						; size = 4
_dim$ = 8						; size = 4
_hint1$ = 12						; size = 4
_hint2$ = 16						; size = 4
_hint3$ = 20						; size = 4
_memory$ = 24						; size = 4
_ps_dimension_add_counter PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 720
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 721
	mov	DWORD PTR _error$[ebp], 0
; Line 722
	mov	eax, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _count$[ebp], ecx
; Line 723
	mov	edx, DWORD PTR _dim$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _counter$[ebp], eax
; Line 728
	jmp	SHORT $LN10@ps_dimensi
$LN9@ps_dimensi:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _counter$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _counter$[ebp], edx
$LN10@ps_dimensi:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN8@ps_dimensi
; Line 732
	mov	eax, DWORD PTR _hint1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _counter$[ebp]
	push	ecx
	call	_ps_mask_test_bit
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@ps_dimensi
	mov	edx, DWORD PTR _hint2$[ebp]
	push	edx
	mov	eax, DWORD PTR _counter$[ebp]
	push	eax
	call	_ps_mask_test_bit
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@ps_dimensi
	mov	ecx, DWORD PTR _hint3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _counter$[ebp]
	push	edx
	call	_ps_mask_test_bit
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@ps_dimensi
$LN6@ps_dimensi:
; Line 733
	jmp	SHORT $LN8@ps_dimensi
$LN7@ps_dimensi:
; Line 734
	jmp	SHORT $LN9@ps_dimensi
$LN8@ps_dimensi:
; Line 737
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN5@ps_dimensi
; Line 739
	lea	eax, DWORD PTR _counter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dim$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	_ps_mask_table_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 740
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@ps_dimensi
; Line 741
	jmp	SHORT $Exit$16
$LN5@ps_dimensi:
; Line 745
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hint1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _counter$[ebp]
	push	edx
	call	_ps_mask_set_bit
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 746
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@ps_dimensi
; Line 747
	jmp	SHORT $Exit$16
$LN3@ps_dimensi:
; Line 749
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hint2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _counter$[ebp]
	push	edx
	call	_ps_mask_set_bit
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 750
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ps_dimensi
; Line 751
	jmp	SHORT $Exit$16
$LN2@ps_dimensi:
; Line 753
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hint3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _counter$[ebp]
	push	edx
	call	_ps_mask_set_bit
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$Exit$16:
; Line 758
	mov	eax, DWORD PTR _error$[ebp]
; Line 759
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@ps_dimensi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@ps_dimensi:
	DD	1
	DD	$LN14@ps_dimensi
$LN14@ps_dimensi:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN13@ps_dimensi
$LN13@ps_dimensi:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_ps_dimension_add_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hint$1 = -36						; size = 4
_max$2 = -28						; size = 4
_idx$3 = -24						; size = 4
_mask$4 = -16						; size = 4
_flags$ = -8						; size = 4
_error$ = -4						; size = 4
_dim$ = 8						; size = 4
_pos$ = 12						; size = 4
_len$ = 16						; size = 4
_memory$ = 20						; size = 4
_aindex$ = 24						; size = 4
_ps_dimension_add_t1stem PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 649
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 650
	mov	DWORD PTR _error$[ebp], 0
; Line 651
	mov	DWORD PTR _flags$[ebp], 0
; Line 655
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN12@ps_dimensi
; Line 657
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 1
	mov	DWORD PTR _flags$[ebp], eax
; Line 658
	cmp	DWORD PTR _len$[ebp], -21		; ffffffebH
	jne	SHORT $LN11@ps_dimensi
; Line 660
	mov	ecx, DWORD PTR _flags$[ebp]
	or	ecx, 2
	mov	DWORD PTR _flags$[ebp], ecx
; Line 661
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _pos$[ebp], edx
$LN11@ps_dimensi:
; Line 663
	mov	DWORD PTR _len$[ebp], 0
$LN12@ps_dimensi:
; Line 666
	cmp	DWORD PTR _aindex$[ebp], 0
	je	SHORT $LN10@ps_dimensi
; Line 667
	mov	eax, DWORD PTR _aindex$[ebp]
	mov	DWORD PTR [eax], -1
$LN10@ps_dimensi:
; Line 673
	mov	ecx, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _max$2[ebp], edx
; Line 674
	mov	eax, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _hint$1[ebp], ecx
; Line 677
	mov	DWORD PTR _idx$3[ebp], 0
	jmp	SHORT $LN9@ps_dimensi
$LN8@ps_dimensi:
	mov	edx, DWORD PTR _idx$3[ebp]
	add	edx, 1
	mov	DWORD PTR _idx$3[ebp], edx
	mov	eax, DWORD PTR _hint$1[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _hint$1[ebp], eax
$LN9@ps_dimensi:
	mov	ecx, DWORD PTR _idx$3[ebp]
	cmp	ecx, DWORD PTR _max$2[ebp]
	jae	SHORT $LN7@ps_dimensi
; Line 679
	mov	edx, DWORD PTR _hint$1[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _pos$[ebp]
	jne	SHORT $LN6@ps_dimensi
	mov	ecx, DWORD PTR _hint$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _len$[ebp]
	jne	SHORT $LN6@ps_dimensi
; Line 680
	jmp	SHORT $LN7@ps_dimensi
$LN6@ps_dimensi:
; Line 681
	jmp	SHORT $LN8@ps_dimensi
$LN7@ps_dimensi:
; Line 684
	mov	eax, DWORD PTR _idx$3[ebp]
	cmp	eax, DWORD PTR _max$2[ebp]
	jb	SHORT $LN5@ps_dimensi
; Line 686
	lea	ecx, DWORD PTR _hint$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _dim$[ebp]
	push	eax
	call	_ps_hint_table_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 687
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@ps_dimensi
; Line 688
	jmp	SHORT $Exit$19
$LN4@ps_dimensi:
; Line 690
	mov	ecx, DWORD PTR _hint$1[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 691
	mov	eax, DWORD PTR _hint$1[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 692
	mov	edx, DWORD PTR _hint$1[ebp]
	mov	eax, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN5@ps_dimensi:
; Line 696
	lea	ecx, DWORD PTR _mask$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _dim$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_ps_mask_table_last
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 697
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@ps_dimensi
; Line 698
	jmp	SHORT $Exit$19
$LN3@ps_dimensi:
; Line 700
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _idx$3[ebp]
	push	edx
	mov	eax, DWORD PTR _mask$4[ebp]
	push	eax
	call	_ps_mask_set_bit
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 701
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ps_dimensi
; Line 702
	jmp	SHORT $Exit$19
$LN2@ps_dimensi:
; Line 704
	cmp	DWORD PTR _aindex$[ebp], 0
	je	SHORT $Exit$19
; Line 705
	mov	ecx, DWORD PTR _aindex$[ebp]
	mov	edx, DWORD PTR _idx$3[ebp]
	mov	DWORD PTR [ecx], edx
$Exit$19:
; Line 709
	mov	eax, DWORD PTR _error$[ebp]
; Line 710
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@ps_dimensi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@ps_dimensi:
	DD	2
	DD	$LN17@ps_dimensi
$LN17@ps_dimensi:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN15@ps_dimensi
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN16@ps_dimensi
$LN16@ps_dimensi:
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN15@ps_dimensi:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
_ps_dimension_add_t1stem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_dim$ = 8						; size = 4
_source$ = 12						; size = 4
_source_pos$ = 16					; size = 4
_source_bits$ = 20					; size = 4
_end_point$ = 24					; size = 4
_memory$ = 28						; size = 4
_ps_dimension_set_mask_bits PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 624
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 629
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end_point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	call	_ps_dimension_reset_mask
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 630
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ps_dimensi
; Line 631
	jmp	SHORT $Exit$4
$LN1@ps_dimensi:
; Line 635
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source_bits$[ebp]
	push	ecx
	mov	edx, DWORD PTR _source_pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dim$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_ps_mask_table_set_bits
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
$Exit$4:
; Line 638
	mov	eax, DWORD PTR _error$[ebp]
; Line 639
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_dimension_set_mask_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mask$ = -8						; size = 4
_dim$ = 8						; size = 4
_end_point$ = 12					; size = 4
_memory$ = 16						; size = 4
_ps_dimension_reset_mask PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 604
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 609
	mov	eax, DWORD PTR _end_point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	call	_ps_dimension_end_mask
	add	esp, 8
; Line 612
	lea	edx, DWORD PTR _mask$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dim$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_ps_mask_table_alloc
	add	esp, 12					; 0000000cH
; Line 613
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ps_dimensi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@ps_dimensi:
	DD	1
	DD	$LN4@ps_dimensi
$LN4@ps_dimensi:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@ps_dimensi
$LN3@ps_dimensi:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
_ps_dimension_reset_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mask$1 = -8						; size = 4
_count$ = -4						; size = 4
_dim$ = 8						; size = 4
_end_point$ = 12					; size = 4
_ps_dimension_end_mask PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 584
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 585
	mov	eax, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _count$[ebp], ecx
; Line 588
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN2@ps_dimensi
; Line 590
	mov	edx, DWORD PTR _count$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	lea	edx, DWORD PTR [ecx+edx-16]
	mov	DWORD PTR _mask$1[ebp], edx
; Line 593
	mov	eax, DWORD PTR _mask$1[ebp]
	mov	ecx, DWORD PTR _end_point$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN2@ps_dimensi:
; Line 595
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_dimension_end_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dimension$ = 8						; size = 4
_ps_dimension_init PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 548
	push	ebp
	mov	ebp, esp
; Line 549
	mov	eax, DWORD PTR _dimension$[ebp]
	mov	DWORD PTR [eax], 0
; Line 550
	mov	ecx, DWORD PTR _dimension$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 551
	mov	edx, DWORD PTR _dimension$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 552
	pop	ebp
	ret	0
_ps_dimension_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dimension$ = 8						; size = 4
_memory$ = 12						; size = 4
_ps_dimension_done PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 538
	push	ebp
	mov	ebp, esp
; Line 539
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dimension$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_ps_mask_table_done
	add	esp, 8
; Line 540
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _dimension$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_ps_mask_table_done
	add	esp, 8
; Line 541
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dimension$[ebp]
	push	edx
	call	_ps_hint_table_done
	add	esp, 8
; Line 542
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ps_dimension_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -12						; size = 4
_index2$ = -8						; size = 4
_index1$ = -4						; size = 4
_table$ = 8						; size = 4
_memory$ = 12						; size = 4
_ps_mask_table_merge_all PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 500
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 502
	mov	DWORD PTR _error$[ebp], 0
; Line 505
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR _index1$[ebp], ecx
	jmp	SHORT $LN8@ps_mask_ta
$LN7@ps_mask_ta:
	mov	edx, DWORD PTR _index1$[ebp]
	sub	edx, 1
	mov	DWORD PTR _index1$[ebp], edx
$LN8@ps_mask_ta:
	cmp	DWORD PTR _index1$[ebp], 0
	jle	SHORT $Exit$11
; Line 507
	mov	eax, DWORD PTR _index1$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index2$[ebp], eax
	jmp	SHORT $LN5@ps_mask_ta
$LN4@ps_mask_ta:
	mov	ecx, DWORD PTR _index2$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _index2$[ebp], ecx
$LN5@ps_mask_ta:
	cmp	DWORD PTR _index2$[ebp], 0
	jl	SHORT $LN3@ps_mask_ta
; Line 509
	mov	edx, DWORD PTR _index2$[ebp]
	push	edx
	mov	eax, DWORD PTR _index1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_ps_mask_table_test_intersect
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@ps_mask_ta
; Line 511
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _index1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_ps_mask_table_merge
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 512
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ps_mask_ta
; Line 513
	jmp	SHORT $Exit$11
$LN1@ps_mask_ta:
; Line 515
	jmp	SHORT $LN3@ps_mask_ta
$LN2@ps_mask_ta:
; Line 517
	jmp	SHORT $LN4@ps_mask_ta
$LN3@ps_mask_ta:
; Line 518
	jmp	SHORT $LN7@ps_mask_ta
$Exit$11:
; Line 521
	mov	eax, DWORD PTR _error$[ebp]
; Line 522
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_mask_table_merge_all ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dummy$1 = -60						; size = 16
_write$2 = -40						; size = 4
_read$3 = -36						; size = 4
_pos$4 = -32						; size = 4
_delta$5 = -28						; size = 4
_count2$6 = -24						; size = 4
_count1$7 = -20						; size = 4
_mask2$8 = -16						; size = 4
_mask1$9 = -12						; size = 4
_error$ = -8						; size = 4
_temp$ = -4						; size = 4
_table$ = 8						; size = 4
_index1$ = 12						; size = 4
_index2$ = 16						; size = 4
_memory$ = 20						; size = 4
_ps_mask_table_merge PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 410
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _error$[ebp], 0
; Line 416
	mov	eax, DWORD PTR _index1$[ebp]
	cmp	eax, DWORD PTR _index2$[ebp]
	jle	SHORT $LN17@ps_mask_ta
; Line 418
	mov	ecx, DWORD PTR _index1$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx
; Line 419
	mov	edx, DWORD PTR _index2$[ebp]
	mov	DWORD PTR _index1$[ebp], edx
; Line 420
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _index2$[ebp], eax
$LN17@ps_mask_ta:
; Line 423
	mov	ecx, DWORD PTR _index1$[ebp]
	cmp	ecx, DWORD PTR _index2$[ebp]
	jge	$LN4@ps_mask_ta
	cmp	DWORD PTR _index1$[ebp], 0
	jl	$LN4@ps_mask_ta
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	$LN4@ps_mask_ta
; Line 427
	mov	ecx, DWORD PTR _index1$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _table$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _mask1$9[ebp], ecx
; Line 428
	mov	eax, DWORD PTR _index2$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _mask2$8[ebp], eax
; Line 429
	mov	edx, DWORD PTR _mask1$9[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _count1$7[ebp], eax
; Line 430
	mov	ecx, DWORD PTR _mask2$8[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _count2$6[ebp], edx
; Line 434
	cmp	DWORD PTR _count2$6[ebp], 0
	jbe	$LN15@ps_mask_ta
; Line 443
	mov	eax, DWORD PTR _count2$6[ebp]
	cmp	eax, DWORD PTR _count1$7[ebp]
	jbe	SHORT $LN14@ps_mask_ta
; Line 445
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count2$6[ebp]
	push	edx
	mov	eax, DWORD PTR _mask1$9[ebp]
	push	eax
	call	_ps_mask_ensure
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 446
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@ps_mask_ta
; Line 447
	jmp	$Exit$23
$LN13@ps_mask_ta:
; Line 449
	mov	ecx, DWORD PTR _count1$7[ebp]
	mov	DWORD PTR _pos$4[ebp], ecx
	jmp	SHORT $LN12@ps_mask_ta
$LN11@ps_mask_ta:
	mov	edx, DWORD PTR _pos$4[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$4[ebp], edx
$LN12@ps_mask_ta:
	mov	eax, DWORD PTR _pos$4[ebp]
	cmp	eax, DWORD PTR _count2$6[ebp]
	jae	SHORT $LN14@ps_mask_ta
; Line 450
	mov	ecx, DWORD PTR _pos$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _mask1$9[ebp]
	push	edx
	call	_ps_mask_clear_bit
	add	esp, 8
	jmp	SHORT $LN11@ps_mask_ta
$LN14@ps_mask_ta:
; Line 454
	mov	eax, DWORD PTR _mask2$8[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _read$3[ebp], ecx
; Line 455
	mov	edx, DWORD PTR _mask1$9[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _write$2[ebp], eax
; Line 456
	mov	ecx, DWORD PTR _count2$6[ebp]
	add	ecx, 7
	shr	ecx, 3
	mov	DWORD PTR _pos$4[ebp], ecx
; Line 458
	jmp	SHORT $LN9@ps_mask_ta
$LN8@ps_mask_ta:
	mov	edx, DWORD PTR _pos$4[ebp]
	sub	edx, 1
	mov	DWORD PTR _pos$4[ebp], edx
$LN9@ps_mask_ta:
	cmp	DWORD PTR _pos$4[ebp], 0
	jbe	SHORT $LN15@ps_mask_ta
; Line 460
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _write$2[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _read$3[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _write$2[ebp]
	mov	BYTE PTR [ecx+edx], al
; Line 461
	mov	edx, DWORD PTR _write$2[ebp]
	add	edx, 1
	mov	DWORD PTR _write$2[ebp], edx
; Line 462
	mov	eax, DWORD PTR _read$3[ebp]
	add	eax, 1
	mov	DWORD PTR _read$3[ebp], eax
; Line 463
	jmp	SHORT $LN8@ps_mask_ta
$LN15@ps_mask_ta:
; Line 468
	mov	ecx, DWORD PTR _mask2$8[ebp]
	mov	DWORD PTR [ecx], 0
; Line 469
	mov	edx, DWORD PTR _mask2$8[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 471
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	sub	ecx, DWORD PTR _index2$[ebp]
	mov	DWORD PTR _delta$5[ebp], ecx
; Line 472
	cmp	DWORD PTR _delta$5[ebp], 0
	jle	SHORT $LN6@ps_mask_ta
; Line 475
	mov	edx, DWORD PTR _mask2$8[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _dummy$1[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _dummy$1[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _dummy$1[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _dummy$1[ebp+12], ecx
; Line 478
	mov	edx, DWORD PTR _delta$5[ebp]
	shl	edx, 4
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _mask2$8[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _mask2$8[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 480
	mov	edx, DWORD PTR _delta$5[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _mask2$8[ebp]
	mov	eax, DWORD PTR _dummy$1[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _dummy$1[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _dummy$1[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _dummy$1[ebp+12]
	mov	DWORD PTR [edx+12], ecx
$LN6@ps_mask_ta:
; Line 483
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 485
	jmp	SHORT $Exit$23
$LN4@ps_mask_ta:
; Line 487
	mov	edx, 4
	imul	eax, edx, 43
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN3@ps_mask_ta
	mov	ecx, DWORD PTR _index2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index1$[ebp]
	push	edx
	push	OFFSET $SG7954
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN3@ps_mask_ta:
	xor	eax, eax
	jne	SHORT $LN4@ps_mask_ta
$Exit$23:
; Line 490
	mov	eax, DWORD PTR _error$[ebp]
; Line 491
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@ps_mask_ta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@ps_mask_ta:
	DD	1
	DD	$LN21@ps_mask_ta
$LN21@ps_mask_ta:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN20@ps_mask_ta
$LN20@ps_mask_ta:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
_ps_mask_table_merge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -32						; size = 4
_count$ = -28						; size = 4
_count2$ = -24						; size = 4
_count1$ = -20						; size = 4
_p2$ = -16						; size = 4
_p1$ = -12						; size = 4
_mask2$ = -8						; size = 4
_mask1$ = -4						; size = 4
_table$ = 8						; size = 4
_index1$ = 12						; size = 4
_index2$ = 16						; size = 4
_ps_mask_table_test_intersect PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 377
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 378
	mov	eax, DWORD PTR _index1$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _table$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _mask1$[ebp], eax
; Line 379
	mov	edx, DWORD PTR _index2$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _table$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _mask2$[ebp], edx
; Line 380
	mov	ecx, DWORD PTR _mask1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _p1$[ebp], edx
; Line 381
	mov	eax, DWORD PTR _mask2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _p2$[ebp], ecx
; Line 382
	mov	edx, DWORD PTR _mask1$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _count1$[ebp], eax
; Line 383
	mov	ecx, DWORD PTR _mask2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _count2$[ebp], edx
; Line 387
	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	jae	SHORT $LN8@ps_mask_ta
	mov	ecx, DWORD PTR _count1$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN9@ps_mask_ta
$LN8@ps_mask_ta:
	mov	edx, DWORD PTR _count2$[ebp]
	mov	DWORD PTR tv75[ebp], edx
$LN9@ps_mask_ta:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 388
	jmp	SHORT $LN5@ps_mask_ta
$LN4@ps_mask_ta:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 8
	mov	DWORD PTR _count$[ebp], ecx
$LN5@ps_mask_ta:
	cmp	DWORD PTR _count$[ebp], 8
	jb	SHORT $LN3@ps_mask_ta
; Line 390
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p1$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _p2$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	and	edx, ecx
	je	SHORT $LN2@ps_mask_ta
; Line 391
	mov	eax, 1
	jmp	SHORT $LN6@ps_mask_ta
$LN2@ps_mask_ta:
; Line 393
	mov	edx, DWORD PTR _p1$[ebp]
	add	edx, 1
	mov	DWORD PTR _p1$[ebp], edx
; Line 394
	mov	eax, DWORD PTR _p2$[ebp]
	add	eax, 1
	mov	DWORD PTR _p2$[ebp], eax
; Line 395
	jmp	SHORT $LN4@ps_mask_ta
$LN3@ps_mask_ta:
; Line 397
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN1@ps_mask_ta
; Line 398
	xor	eax, eax
	jmp	SHORT $LN6@ps_mask_ta
$LN1@ps_mask_ta:
; Line 400
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p1$[ebp]
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p2$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	and	eax, edx
	mov	edx, 255				; 000000ffH
	mov	ecx, DWORD PTR _count$[ebp]
	sar	edx, cl
	not	edx
	and	eax, edx
$LN6@ps_mask_ta:
; Line 401
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_mask_table_test_intersect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$1 = -36						; size = 4
_wmask$2 = -32						; size = 4
_write$3 = -28						; size = 4
_rmask$4 = -24						; size = 4
_read$5 = -20						; size = 4
_mask$ = -12						; size = 4
_error$ = -4						; size = 4
_table$ = 8						; size = 4
_source$ = 12						; size = 4
_bit_pos$ = 16						; size = 4
_bit_count$ = 20					; size = 4
_memory$ = 24						; size = 4
_ps_mask_table_set_bits PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 318
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 323
	lea	eax, DWORD PTR _mask$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_ps_mask_table_last
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 324
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@ps_mask_ta
; Line 325
	jmp	$Exit$14
$LN8@ps_mask_ta:
; Line 327
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bit_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mask$[ebp]
	push	edx
	call	_ps_mask_ensure
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 328
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@ps_mask_ta
; Line 329
	jmp	$Exit$14
$LN7@ps_mask_ta:
; Line 331
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR _bit_count$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 335
	mov	edx, DWORD PTR _bit_pos$[ebp]
	shr	edx, 3
	add	edx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _read$5[ebp], edx
; Line 336
	mov	ecx, DWORD PTR _bit_pos$[ebp]
	and	ecx, 7
	mov	eax, 128				; 00000080H
	sar	eax, cl
	mov	DWORD PTR _rmask$4[ebp], eax
; Line 337
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _write$3[ebp], edx
; Line 338
	mov	DWORD PTR _wmask$2[ebp], 128		; 00000080H
; Line 342
	jmp	SHORT $LN6@ps_mask_ta
$LN5@ps_mask_ta:
	mov	eax, DWORD PTR _bit_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _bit_count$[ebp], eax
$LN6@ps_mask_ta:
	cmp	DWORD PTR _bit_count$[ebp], 0
	jbe	$Exit$14
; Line 344
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _write$3[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _wmask$2[ebp]
	not	edx
	and	ecx, edx
	mov	DWORD PTR _val$1[ebp], ecx
; Line 346
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _read$5[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	and	eax, DWORD PTR _rmask$4[ebp]
	je	SHORT $LN3@ps_mask_ta
; Line 347
	mov	ecx, DWORD PTR _val$1[ebp]
	or	ecx, DWORD PTR _wmask$2[ebp]
	mov	DWORD PTR _val$1[ebp], ecx
$LN3@ps_mask_ta:
; Line 349
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _write$3[ebp]
	mov	dl, BYTE PTR _val$1[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 351
	mov	eax, DWORD PTR _rmask$4[ebp]
	sar	eax, 1
	mov	DWORD PTR _rmask$4[ebp], eax
; Line 352
	jne	SHORT $LN2@ps_mask_ta
; Line 354
	mov	ecx, DWORD PTR _read$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _read$5[ebp], ecx
; Line 355
	mov	DWORD PTR _rmask$4[ebp], 128		; 00000080H
$LN2@ps_mask_ta:
; Line 358
	mov	edx, DWORD PTR _wmask$2[ebp]
	sar	edx, 1
	mov	DWORD PTR _wmask$2[ebp], edx
; Line 359
	jne	SHORT $LN1@ps_mask_ta
; Line 361
	mov	eax, DWORD PTR _write$3[ebp]
	add	eax, 1
	mov	DWORD PTR _write$3[ebp], eax
; Line 362
	mov	DWORD PTR _wmask$2[ebp], 128		; 00000080H
$LN1@ps_mask_ta:
; Line 364
	jmp	$LN5@ps_mask_ta
$Exit$14:
; Line 368
	mov	eax, DWORD PTR _error$[ebp]
; Line 369
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@ps_mask_ta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@ps_mask_ta:
	DD	1
	DD	$LN12@ps_mask_ta
$LN12@ps_mask_ta:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN11@ps_mask_ta
$LN11@ps_mask_ta:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
_ps_mask_table_set_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mask$ = -16						; size = 4
_count$ = -8						; size = 4
_error$ = -4						; size = 4
_table$ = 8						; size = 4
_memory$ = 12						; size = 4
_amask$ = 16						; size = 4
_ps_mask_table_last PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 289
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 290
	mov	DWORD PTR _error$[ebp], 0
; Line 295
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
; Line 296
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN3@ps_mask_ta
; Line 298
	lea	edx, DWORD PTR _mask$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_ps_mask_table_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 299
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ps_mask_ta
; Line 300
	jmp	SHORT $Exit$9
$LN2@ps_mask_ta:
; Line 302
	jmp	SHORT $Exit$9
$LN3@ps_mask_ta:
; Line 303
	mov	edx, DWORD PTR _count$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+edx-16]
	mov	DWORD PTR _mask$[ebp], edx
$Exit$9:
; Line 306
	mov	eax, DWORD PTR _amask$[ebp]
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 307
	mov	eax, DWORD PTR _error$[ebp]
; Line 308
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@ps_mask_ta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@ps_mask_ta:
	DD	1
	DD	$LN7@ps_mask_ta
$LN7@ps_mask_ta:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN6@ps_mask_ta
$LN6@ps_mask_ta:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
_ps_mask_table_last ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mask$ = -12						; size = 4
_error$ = -8						; size = 4
_count$ = -4						; size = 4
_table$ = 8						; size = 4
_memory$ = 12						; size = 4
_amask$ = 16						; size = 4
_ps_mask_table_alloc PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 257
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 259
	mov	DWORD PTR _error$[ebp], 0
; Line 260
	mov	DWORD PTR _mask$[ebp], 0
; Line 263
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
; Line 264
	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx
; Line 266
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN2@ps_mask_ta
; Line 268
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_ps_mask_table_ensure
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 269
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ps_mask_ta
; Line 270
	jmp	SHORT $Exit$5
$LN2@ps_mask_ta:
; Line 273
	mov	edx, DWORD PTR _count$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+edx-16]
	mov	DWORD PTR _mask$[ebp], edx
; Line 274
	mov	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [eax], 0
; Line 275
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 276
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR [edx], eax
$Exit$5:
; Line 279
	mov	ecx, DWORD PTR _amask$[ebp]
	mov	edx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 280
	mov	eax, DWORD PTR _error$[ebp]
; Line 281
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_mask_table_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -16						; size = 4
_new_max$ = -8						; size = 4
_old_max$ = -4						; size = 4
_table$ = 8						; size = 4
_count$ = 12						; size = 4
_memory$ = 16						; size = 4
_ps_mask_table_ensure PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 236
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 237
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _old_max$[ebp], ecx
; Line 238
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _new_max$[ebp], edx
; Line 239
	mov	DWORD PTR _error$[ebp], 0
; Line 242
	mov	eax, DWORD PTR _new_max$[ebp]
	cmp	eax, DWORD PTR _old_max$[ebp]
	jbe	SHORT $LN2@ps_mask_ta
; Line 244
	mov	ecx, DWORD PTR _new_max$[ebp]
	add	ecx, 7
	and	ecx, -8					; fffffff8H
	mov	DWORD PTR _new_max$[ebp], ecx
; Line 245
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _new_max$[ebp]
	push	edx
	mov	eax, DWORD PTR _old_max$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@ps_mask_ta
; Line 246
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _new_max$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@ps_mask_ta:
; Line 248
	mov	eax, DWORD PTR _error$[ebp]
; Line 249
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ps_mask_ta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@ps_mask_ta:
	DD	1
	DD	$LN6@ps_mask_ta
$LN6@ps_mask_ta:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN5@ps_mask_ta
$LN5@ps_mask_ta:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ps_mask_table_ensure ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mask$ = -8						; size = 4
_count$ = -4						; size = 4
_table$ = 8						; size = 4
_memory$ = 12						; size = 4
_ps_mask_table_done PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 217
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 218
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _count$[ebp], ecx
; Line 219
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _mask$[ebp], eax
; Line 222
	jmp	SHORT $LN6@ps_mask_ta
$LN5@ps_mask_ta:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _mask$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _mask$[ebp], edx
$LN6@ps_mask_ta:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@ps_mask_ta
; Line 223
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mask$[ebp]
	push	ecx
	call	_ps_mask_done
	add	esp, 8
	jmp	SHORT $LN5@ps_mask_ta
$LN3@ps_mask_ta:
; Line 225
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+8], 0
	xor	eax, eax
	jne	SHORT $LN3@ps_mask_ta
; Line 226
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 227
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 228
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_mask_table_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -8						; size = 4
_error$ = -4						; size = 4
_mask$ = 8						; size = 4
_idx$ = 12						; size = 4
_memory$ = 16						; size = 4
_ps_mask_set_bit PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 189
	mov	DWORD PTR _error$[ebp], 0
; Line 193
	cmp	DWORD PTR _idx$[ebp], 0
	jge	SHORT $LN3@ps_mask_se
; Line 194
	jmp	SHORT $Exit$6
$LN3@ps_mask_se:
; Line 196
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN2@ps_mask_se
; Line 198
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _mask$[ebp]
	push	ecx
	call	_ps_mask_ensure
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 199
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ps_mask_se
; Line 200
	jmp	SHORT $Exit$6
$LN1@ps_mask_se:
; Line 202
	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [eax], edx
$LN2@ps_mask_se:
; Line 205
	mov	ecx, DWORD PTR _idx$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR _mask$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _p$[ebp], ecx
; Line 206
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _idx$[ebp]
	and	ecx, 7
	mov	edx, 128				; 00000080H
	sar	edx, cl
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+edx], al
$Exit$6:
; Line 209
	mov	eax, DWORD PTR _error$[ebp]
; Line 210
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_mask_set_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_mask$ = 8						; size = 4
_idx$ = 12						; size = 4
_ps_mask_clear_bit PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 171
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 175
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN1@ps_mask_cl
; Line 176
	jmp	SHORT $LN2@ps_mask_cl
$LN1@ps_mask_cl:
; Line 178
	mov	edx, DWORD PTR _idx$[ebp]
	sar	edx, 3
	mov	eax, DWORD PTR _mask$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _p$[ebp], edx
; Line 179
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR _idx$[ebp]
	and	ecx, 7
	mov	eax, 128				; 00000080H
	sar	eax, cl
	not	eax
	and	edx, eax
	mov	ecx, 1
	imul	eax, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN2@ps_mask_cl:
; Line 180
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_mask_clear_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mask$ = 8						; size = 4
_idx$ = 12						; size = 4
_ps_mask_test_bit PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 159
	push	ebp
	mov	ebp, esp
; Line 160
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN1@ps_mask_te
; Line 161
	xor	eax, eax
	jmp	SHORT $LN2@ps_mask_te
$LN1@ps_mask_te:
; Line 163
	mov	edx, DWORD PTR _idx$[ebp]
	sar	edx, 3
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _idx$[ebp]
	and	ecx, 7
	mov	edx, 128				; 00000080H
	sar	edx, cl
	and	eax, edx
$LN2@ps_mask_te:
; Line 164
	pop	ebp
	ret	0
_ps_mask_test_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -16						; size = 4
_new_max$ = -8						; size = 4
_old_max$ = -4						; size = 4
_mask$ = 8						; size = 4
_count$ = 12						; size = 4
_memory$ = 16						; size = 4
_ps_mask_ensure PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 140
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 7
	shr	ecx, 3
	mov	DWORD PTR _old_max$[ebp], ecx
; Line 141
	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 7
	shr	edx, 3
	mov	DWORD PTR _new_max$[ebp], edx
; Line 142
	mov	DWORD PTR _error$[ebp], 0
; Line 145
	mov	eax, DWORD PTR _new_max$[ebp]
	cmp	eax, DWORD PTR _old_max$[ebp]
	jbe	SHORT $LN2@ps_mask_en
; Line 147
	mov	ecx, DWORD PTR _new_max$[ebp]
	add	ecx, 7
	and	ecx, -8					; fffffff8H
	mov	DWORD PTR _new_max$[ebp], ecx
; Line 148
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _new_max$[ebp]
	push	edx
	mov	eax, DWORD PTR _old_max$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@ps_mask_en
; Line 149
	mov	eax, DWORD PTR _new_max$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN2@ps_mask_en:
; Line 151
	mov	eax, DWORD PTR _error$[ebp]
; Line 152
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ps_mask_en
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@ps_mask_en:
	DD	1
	DD	$LN6@ps_mask_en
$LN6@ps_mask_en:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN5@ps_mask_en
$LN5@ps_mask_en:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ps_mask_ensure ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mask$ = 8						; size = 4
_memory$ = 12						; size = 4
_ps_mask_done PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 126
	push	ebp
	mov	ebp, esp
$LN3@ps_mask_do:
; Line 127
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [eax+8], 0
	xor	ecx, ecx
	jne	SHORT $LN3@ps_mask_do
; Line 128
	mov	edx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [edx], 0
; Line 129
	mov	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 130
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 131
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ps_mask_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hint$ = -12						; size = 4
_count$ = -8						; size = 4
_error$ = -4						; size = 4
_table$ = 8						; size = 4
_memory$ = 12						; size = 4
_ahint$ = 16						; size = 4
_ps_hint_table_alloc PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 85
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 86
	mov	DWORD PTR _error$[ebp], 0
; Line 88
	mov	DWORD PTR _hint$[ebp], 0
; Line 91
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
; Line 92
	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx
; Line 94
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN2@ps_hint_ta
; Line 96
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_ps_hint_table_ensure
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 97
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ps_hint_ta
; Line 98
	jmp	SHORT $Exit$5
$LN2@ps_hint_ta:
; Line 101
	imul	edx, DWORD PTR _count$[ebp], 12
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+edx-12]
	mov	DWORD PTR _hint$[ebp], edx
; Line 102
	mov	eax, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [eax], 0
; Line 103
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 104
	mov	edx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 106
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax], ecx
$Exit$5:
; Line 109
	mov	edx, DWORD PTR _ahint$[ebp]
	mov	eax, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx], eax
; Line 110
	mov	eax, DWORD PTR _error$[ebp]
; Line 111
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_hint_table_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -16						; size = 4
_new_max$ = -8						; size = 4
_old_max$ = -4						; size = 4
_table$ = 8						; size = 4
_count$ = 12						; size = 4
_memory$ = 16						; size = 4
_ps_hint_table_ensure PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 65
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _old_max$[ebp], ecx
; Line 66
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _new_max$[ebp], edx
; Line 67
	mov	DWORD PTR _error$[ebp], 0
; Line 70
	mov	eax, DWORD PTR _new_max$[ebp]
	cmp	eax, DWORD PTR _old_max$[ebp]
	jbe	SHORT $LN2@ps_hint_ta
; Line 73
	mov	ecx, DWORD PTR _new_max$[ebp]
	add	ecx, 7
	and	ecx, -8					; fffffff8H
	mov	DWORD PTR _new_max$[ebp], ecx
; Line 74
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _new_max$[ebp]
	push	edx
	mov	eax, DWORD PTR _old_max$[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@ps_hint_ta
; Line 75
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _new_max$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@ps_hint_ta:
; Line 77
	mov	eax, DWORD PTR _error$[ebp]
; Line 78
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ps_hint_ta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@ps_hint_ta:
	DD	1
	DD	$LN6@ps_hint_ta
$LN6@ps_hint_ta:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN5@ps_hint_ta
$LN5@ps_hint_ta:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ps_hint_table_ensure ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_table$ = 8						; size = 4
_memory$ = 12						; size = 4
_ps_hint_table_done PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 52
	push	ebp
	mov	ebp, esp
$LN3@ps_hint_ta:
; Line 53
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+8], 0
	xor	ecx, ecx
	jne	SHORT $LN3@ps_hint_ta
; Line 54
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx], 0
; Line 55
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 56
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ps_hint_table_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv151 = -188						; size = 1
tv148 = -187						; size = 1
tv144 = -186						; size = 1
_rescale$1 = -185					; size = 1
_fitted$2 = -184					; size = 4
_scaled$3 = -180					; size = 4
_old_y_scale$4 = -176					; size = 4
_old_x_scale$5 = -172					; size = 4
_y_scale$6 = -168					; size = 4
_x_scale$7 = -164					; size = 4
_dim_y$8 = -160						; size = 4
_dim_x$9 = -156						; size = 4
_dimension$ = -152					; size = 4
_error$ = -148						; size = 4
_glyph$ = -144						; size = 4
_glyphrec$ = -136					; size = 128
__$ArrayPad$ = -4					; size = 4
_ps_hints$ = 8						; size = 4
_outline$ = 12						; size = 4
_globals$ = 16						; size = 4
_hint_mode$ = 20					; size = 4
_ps_hints_apply PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshalgo.c
; Line 2181
	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	edi
	lea	edi, DWORD PTR [ebp-188]
	mov	ecx, 47					; 0000002fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2183
	lea	eax, DWORD PTR _glyphrec$[ebp]
	mov	DWORD PTR _glyph$[ebp], eax
; Line 2192
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	test	edx, edx
	je	SHORT $LN9@ps_hints_a
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN10@ps_hints_a
$LN9@ps_hints_a:
; Line 2193
	xor	eax, eax
	jmp	$LN11@ps_hints_a
$LN10@ps_hints_a:
; Line 2212
	mov	edx, DWORD PTR _globals$[ebp]
	push	edx
	mov	eax, DWORD PTR _ps_hints$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outline$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	push	edx
	call	_psh_glyph_init
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2213
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@ps_hints_a
; Line 2214
	jmp	$Exit$22
$LN8@ps_hints_a:
; Line 2220
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, 204				; 000000ccH
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _dim_x$9[ebp], ecx
; Line 2221
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, 204				; 000000ccH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR _dim_y$8[ebp], edx
; Line 2223
	mov	eax, DWORD PTR _dim_x$9[ebp]
	mov	ecx, DWORD PTR [eax+196]
	mov	DWORD PTR _x_scale$7[ebp], ecx
; Line 2224
	mov	edx, DWORD PTR _dim_y$8[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR _y_scale$6[ebp], eax
; Line 2226
	mov	ecx, DWORD PTR _x_scale$7[ebp]
	mov	DWORD PTR _old_x_scale$5[ebp], ecx
; Line 2227
	mov	edx, DWORD PTR _y_scale$6[ebp]
	mov	DWORD PTR _old_y_scale$4[ebp], edx
; Line 2232
	mov	BYTE PTR _rescale$1[ebp], 0
; Line 2235
	mov	eax, DWORD PTR _y_scale$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	edx, DWORD PTR [ecx+416]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _scaled$3[ebp], eax
; Line 2236
	mov	eax, DWORD PTR _scaled$3[ebp]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _fitted$2[ebp], eax
; Line 2238
	je	$LN7@ps_hints_a
	mov	ecx, DWORD PTR _scaled$3[ebp]
	cmp	ecx, DWORD PTR _fitted$2[ebp]
	je	SHORT $LN7@ps_hints_a
; Line 2240
	mov	BYTE PTR _rescale$1[ebp], 1
; Line 2242
	mov	edx, DWORD PTR _scaled$3[ebp]
	push	edx
	mov	eax, DWORD PTR _fitted$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_scale$6[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _y_scale$6[ebp], eax
; Line 2244
	mov	edx, DWORD PTR _fitted$2[ebp]
	cmp	edx, DWORD PTR _scaled$3[ebp]
	jge	SHORT $LN6@ps_hints_a
; Line 2245
	mov	eax, DWORD PTR _x_scale$7[ebp]
	cdq
	mov	ecx, 50					; 00000032H
	idiv	ecx
	mov	edx, DWORD PTR _x_scale$7[ebp]
	sub	edx, eax
	mov	DWORD PTR _x_scale$7[ebp], edx
$LN6@ps_hints_a:
; Line 2247
	push	0
	push	0
	mov	eax, DWORD PTR _y_scale$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_scale$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_psh_globals_set_scale
	add	esp, 20					; 00000014H
$LN7@ps_hints_a:
; Line 2250
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	BYTE PTR [ecx+120], 1
; Line 2251
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	BYTE PTR [edx+121], 1
; Line 2254
	cmp	DWORD PTR _hint_mode$[ebp], 2
	je	SHORT $LN13@ps_hints_a
	cmp	DWORD PTR _hint_mode$[ebp], 3
	je	SHORT $LN13@ps_hints_a
	mov	BYTE PTR tv144[ebp], 0
	jmp	SHORT $LN14@ps_hints_a
$LN13@ps_hints_a:
	mov	BYTE PTR tv144[ebp], 1
$LN14@ps_hints_a:
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	cl, BYTE PTR tv144[ebp]
	mov	BYTE PTR [eax+122], cl
; Line 2257
	cmp	DWORD PTR _hint_mode$[ebp], 2
	je	SHORT $LN15@ps_hints_a
	cmp	DWORD PTR _hint_mode$[ebp], 4
	je	SHORT $LN15@ps_hints_a
	mov	BYTE PTR tv148[ebp], 0
	jmp	SHORT $LN16@ps_hints_a
$LN15@ps_hints_a:
	mov	BYTE PTR tv148[ebp], 1
$LN16@ps_hints_a:
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	al, BYTE PTR tv148[ebp]
	mov	BYTE PTR [edx+123], al
; Line 2259
	cmp	DWORD PTR _hint_mode$[ebp], 1
	je	SHORT $LN17@ps_hints_a
	mov	BYTE PTR tv151[ebp], 1
	jmp	SHORT $LN18@ps_hints_a
$LN17@ps_hints_a:
	mov	BYTE PTR tv151[ebp], 0
$LN18@ps_hints_a:
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	dl, BYTE PTR tv151[ebp]
	mov	BYTE PTR [ecx+124], dl
; Line 2261
	mov	DWORD PTR _dimension$[ebp], 0
	jmp	SHORT $LN5@ps_hints_a
$LN4@ps_hints_a:
	mov	eax, DWORD PTR _dimension$[ebp]
	add	eax, 1
	mov	DWORD PTR _dimension$[ebp], eax
$LN5@ps_hints_a:
	cmp	DWORD PTR _dimension$[ebp], 2
	jge	$Exit$22
; Line 2264
	mov	ecx, DWORD PTR _dimension$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	push	edx
	call	_psh_glyph_load_points
	add	esp, 8
; Line 2267
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	call	_psh_glyph_compute_extrema
	add	esp, 4
; Line 2273
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dimension$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	imul	edx, DWORD PTR _dimension$[ebp], 40
	mov	eax, DWORD PTR _glyph$[ebp]
	lea	ecx, DWORD PTR [eax+edx+28]
	push	ecx
	call	_psh_hint_table_align_hints
	add	esp, 16					; 00000010H
; Line 2276
	mov	edx, DWORD PTR _dimension$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	call	_psh_glyph_find_strong_points
	add	esp, 8
; Line 2277
	cmp	DWORD PTR _dimension$[ebp], 1
	jne	SHORT $LN2@ps_hints_a
; Line 2278
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _globals$[ebp]
	add	edx, 412				; 0000019cH
	push	edx
	call	_psh_glyph_find_blue_points
	add	esp, 8
$LN2@ps_hints_a:
; Line 2279
	mov	eax, DWORD PTR _dimension$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_psh_glyph_interpolate_strong_points
	add	esp, 8
; Line 2280
	mov	edx, DWORD PTR _dimension$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	call	_psh_glyph_interpolate_normal_points
	add	esp, 8
; Line 2281
	mov	ecx, DWORD PTR _dimension$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	push	edx
	call	_psh_glyph_interpolate_other_points
	add	esp, 8
; Line 2284
	mov	eax, DWORD PTR _dimension$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_psh_glyph_save_points
	add	esp, 8
; Line 2286
	movzx	edx, BYTE PTR _rescale$1[ebp]
	test	edx, edx
	je	SHORT $LN1@ps_hints_a
; Line 2288
	push	0
	push	0
	mov	eax, DWORD PTR _old_y_scale$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_x_scale$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_psh_globals_set_scale
	add	esp, 20					; 00000014H
$LN1@ps_hints_a:
; Line 2289
	jmp	$LN4@ps_hints_a
$Exit$22:
; Line 2295
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_psh_glyph_done
	add	esp, 4
; Line 2298
	mov	eax, DWORD PTR _error$[ebp]
$LN11@ps_hints_a:
; Line 2299
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@ps_hints_a
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 188				; 000000bcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@ps_hints_a:
	DD	1
	DD	$LN20@ps_hints_a
$LN20@ps_hints_a:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN19@ps_hints_a
$LN19@ps_hints_a:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
_ps_hints_apply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_funcs$ = 8						; size = 4
_t2_hints_funcs_init PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 1212
	push	ebp
	mov	ebp, esp
; Line 1213
	push	28					; 0000001cH
	push	0
	mov	eax, DWORD PTR _funcs$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1215
	mov	ecx, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET _t2_hints_open
; Line 1216
	mov	edx, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [edx+8], OFFSET _ps_hints_close
; Line 1217
	mov	eax, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _t2_hints_stems
; Line 1218
	mov	ecx, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET _ps_hints_t2mask
; Line 1219
	mov	edx, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [edx+20], OFFSET _ps_hints_t2counter
; Line 1220
	mov	eax, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _ps_hints_apply
; Line 1221
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t2_hints_funcs_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_funcs$ = 8						; size = 4
_t1_hints_funcs_init PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 1146
	push	ebp
	mov	ebp, esp
; Line 1147
	push	28					; 0000001cH
	push	0
	mov	eax, DWORD PTR _funcs$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1149
	mov	ecx, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET _t1_hints_open
; Line 1150
	mov	edx, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [edx+8], OFFSET _ps_hints_close
; Line 1151
	mov	eax, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _t1_hints_stem
; Line 1152
	mov	ecx, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET _ps_hints_t1stem3
; Line 1153
	mov	edx, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [edx+20], OFFSET _ps_hints_t1reset
; Line 1154
	mov	eax, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _ps_hints_apply
; Line 1155
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t1_hints_funcs_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_hints$ = 8						; size = 4
_ps_hints_done PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 788
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 789
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 792
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, 36					; 00000024H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _hints$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	push	eax
	call	_ps_dimension_done
	add	esp, 8
; Line 793
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, 36					; 00000024H
	shl	edx, 0
	mov	eax, DWORD PTR _hints$[ebp]
	lea	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	call	_ps_dimension_done
	add	esp, 8
; Line 795
	mov	edx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 796
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [eax], 0
; Line 797
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_hints_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hints$ = 8						; size = 4
_memory$ = 12						; size = 4
_ps_hints_init PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshrec.c
; Line 803
	push	ebp
	mov	ebp, esp
; Line 804
	push	88					; 00000058H
	push	0
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 805
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 806
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ps_hints_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_no_shoots$ = -20					; size = 4
_zone$ = -16						; size = 4
_delta$ = -12						; size = 4
_count$ = -8						; size = 4
_table$ = -4						; size = 4
_blues$ = 8						; size = 4
_stem_top$ = 12						; size = 4
_stem_bot$ = 16						; size = 4
_alignment$ = 20					; size = 4
_psh_blues_snap_stem PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshglob.c
; Line 552
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 560
	mov	eax, DWORD PTR _alignment$[ebp]
	mov	DWORD PTR [eax], 0
; Line 562
	mov	ecx, DWORD PTR _blues$[ebp]
	movzx	edx, BYTE PTR [ecx+2080]
	mov	DWORD PTR _no_shoots$[ebp], edx
; Line 565
	mov	eax, DWORD PTR _blues$[ebp]
	mov	DWORD PTR _table$[ebp], eax
; Line 566
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _count$[ebp], edx
; Line 567
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 4
	mov	DWORD PTR _zone$[ebp], eax
; Line 569
	jmp	SHORT $LN14@psh_blues_
$LN13@psh_blues_:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _zone$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _zone$[ebp], edx
$LN14@psh_blues_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN12@psh_blues_
; Line 571
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR _stem_top$[ebp]
	sub	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _delta$[ebp], ecx
; Line 572
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx+2076]
	neg	eax
	cmp	DWORD PTR _delta$[ebp], eax
	jge	SHORT $LN11@psh_blues_
; Line 573
	jmp	SHORT $LN12@psh_blues_
$LN11@psh_blues_:
; Line 575
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _blues$[ebp]
	add	edx, DWORD PTR [eax+2076]
	cmp	DWORD PTR _stem_top$[ebp], edx
	jg	SHORT $LN10@psh_blues_
; Line 577
	cmp	DWORD PTR _no_shoots$[ebp], 0
	jne	SHORT $LN8@psh_blues_
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR _delta$[ebp]
	cmp	edx, DWORD PTR [ecx+2072]
	jg	SHORT $LN9@psh_blues_
$LN8@psh_blues_:
; Line 579
	mov	eax, DWORD PTR _alignment$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1
	mov	edx, DWORD PTR _alignment$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 580
	mov	eax, DWORD PTR _alignment$[ebp]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+4], edx
$LN9@psh_blues_:
; Line 582
	jmp	SHORT $LN12@psh_blues_
$LN10@psh_blues_:
; Line 584
	jmp	SHORT $LN13@psh_blues_
$LN12@psh_blues_:
; Line 587
	mov	eax, DWORD PTR _blues$[ebp]
	add	eax, 516				; 00000204H
	mov	DWORD PTR _table$[ebp], eax
; Line 588
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _count$[ebp], edx
; Line 589
	mov	eax, DWORD PTR _count$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _table$[ebp]
	lea	edx, DWORD PTR [ecx+eax-28]
	mov	DWORD PTR _zone$[ebp], edx
; Line 591
	jmp	SHORT $LN7@psh_blues_
$LN6@psh_blues_:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _zone$[ebp]
	sub	ecx, 32					; 00000020H
	mov	DWORD PTR _zone$[ebp], ecx
$LN7@psh_blues_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN15@psh_blues_
; Line 593
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR _stem_bot$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
; Line 594
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [ecx+2076]
	neg	edx
	cmp	DWORD PTR _delta$[ebp], edx
	jge	SHORT $LN4@psh_blues_
; Line 595
	jmp	SHORT $LN15@psh_blues_
$LN4@psh_blues_:
; Line 597
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+2076]
	cmp	DWORD PTR _stem_bot$[ebp], edx
	jl	SHORT $LN3@psh_blues_
; Line 599
	cmp	DWORD PTR _no_shoots$[ebp], 0
	jne	SHORT $LN1@psh_blues_
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR _delta$[ebp]
	cmp	ecx, DWORD PTR [eax+2072]
	jge	SHORT $LN2@psh_blues_
$LN1@psh_blues_:
; Line 601
	mov	edx, DWORD PTR _alignment$[ebp]
	mov	eax, DWORD PTR [edx]
	or	eax, 2
	mov	ecx, DWORD PTR _alignment$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 602
	mov	edx, DWORD PTR _alignment$[ebp]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+8], ecx
$LN2@psh_blues_:
; Line 604
	jmp	SHORT $LN15@psh_blues_
$LN3@psh_blues_:
; Line 606
	jmp	SHORT $LN6@psh_blues_
$LN15@psh_blues_:
; Line 607
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_blues_snap_stem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dim$ = -4						; size = 4
_globals$ = 8						; size = 4
_x_scale$ = 12						; size = 4
_y_scale$ = 16						; size = 4
_x_delta$ = 20						; size = 4
_y_delta$ = 24						; size = 4
_psh_globals_set_scale PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshglob.c
; Line 759
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 763
	mov	eax, 204				; 000000ccH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _globals$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _dim$[ebp], eax
; Line 765
	mov	ecx, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR _x_scale$[ebp]
	cmp	edx, DWORD PTR [ecx+196]
	jne	SHORT $LN3@psh_global
	mov	eax, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR _x_delta$[ebp]
	cmp	ecx, DWORD PTR [eax+200]
	je	SHORT $LN4@psh_global
$LN3@psh_global:
; Line 767
	mov	edx, DWORD PTR _dim$[ebp]
	mov	eax, DWORD PTR _x_scale$[ebp]
	mov	DWORD PTR [edx+196], eax
; Line 768
	mov	ecx, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR _x_delta$[ebp]
	mov	DWORD PTR [ecx+200], edx
; Line 770
	push	0
	mov	eax, DWORD PTR _globals$[ebp]
	push	eax
	call	_psh_globals_scale_widths
	add	esp, 8
$LN4@psh_global:
; Line 773
	mov	ecx, 204				; 000000ccH
	shl	ecx, 0
	mov	edx, DWORD PTR _globals$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _dim$[ebp], eax
; Line 775
	mov	ecx, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR _y_scale$[ebp]
	cmp	edx, DWORD PTR [ecx+196]
	jne	SHORT $LN1@psh_global
	mov	eax, DWORD PTR _dim$[ebp]
	mov	ecx, DWORD PTR _y_delta$[ebp]
	cmp	ecx, DWORD PTR [eax+200]
	je	SHORT $LN5@psh_global
$LN1@psh_global:
; Line 777
	mov	edx, DWORD PTR _dim$[ebp]
	mov	eax, DWORD PTR _y_scale$[ebp]
	mov	DWORD PTR [edx+196], eax
; Line 778
	mov	ecx, DWORD PTR _dim$[ebp]
	mov	edx, DWORD PTR _y_delta$[ebp]
	mov	DWORD PTR [ecx+200], edx
; Line 780
	push	1
	mov	eax, DWORD PTR _globals$[ebp]
	push	eax
	call	_psh_globals_scale_widths
	add	esp, 8
; Line 781
	mov	ecx, DWORD PTR _y_delta$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _globals$[ebp]
	add	eax, 412				; 0000019cH
	push	eax
	call	_psh_blues_scale_zones
	add	esp, 12					; 0000000cH
$LN5@psh_global:
; Line 783
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_psh_globals_set_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_funcs$ = 8						; size = 4
_psh_globals_funcs_init PROC
; File d:\mozilla\modules\freetype2\src\pshinter\pshglob.c
; Line 788
	push	ebp
	mov	ebp, esp
; Line 789
	mov	eax, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [eax], OFFSET _psh_globals_new
; Line 790
	mov	ecx, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET _psh_globals_set_scale
; Line 791
	mov	edx, DWORD PTR _funcs$[ebp]
	mov	DWORD PTR [edx+8], OFFSET _psh_globals_destroy
; Line 792
	pop	ebp
	ret	0
_psh_globals_funcs_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_MulFix_i386 PROC
; File d:\mozilla\modules\freetype2\include\internal\ftcalc.h
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 159
	mov	eax, DWORD PTR _a$[ebp]
; Line 160
	mov	edx, DWORD PTR _b$[ebp]
; Line 161
	imul	edx
; Line 162
	mov	ecx, edx
; Line 163
	sar	ecx, 31					; 0000001fH
; Line 164
	add	ecx, 32768				; 00008000H
; Line 165
	add	eax, ecx
; Line 166
	adc	edx, 0
; Line 167
	shr	eax, 16					; 00000010H
; Line 168
	shl	edx, 16					; 00000010H
; Line 169
	add	eax, edx
; Line 170
	mov	DWORD PTR _result$[ebp], eax
; Line 172
	mov	eax, DWORD PTR _result$[ebp]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_MulFix_i386 ENDP
_TEXT	ENDS
END
