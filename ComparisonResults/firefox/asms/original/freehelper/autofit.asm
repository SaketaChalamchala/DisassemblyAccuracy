; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\autofit\autofit.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_af_autofitter_interface
PUBLIC	_autofit_module_class
PUBLIC	_af_writing_system_classes
PUBLIC	_af_cyrl_script_class
PUBLIC	_af_deva_script_class
PUBLIC	_af_grek_script_class
PUBLIC	_af_hebr_script_class
PUBLIC	_af_latn_script_class
PUBLIC	_af_none_script_class
PUBLIC	_af_telu_script_class
PUBLIC	_af_beng_script_class
PUBLIC	_af_gujr_script_class
PUBLIC	_af_guru_script_class
PUBLIC	_af_knda_script_class
PUBLIC	_af_limb_script_class
PUBLIC	_af_mlym_script_class
PUBLIC	_af_orya_script_class
PUBLIC	_af_sinh_script_class
PUBLIC	_af_sund_script_class
PUBLIC	_af_sylo_script_class
PUBLIC	_af_taml_script_class
PUBLIC	_af_tibt_script_class
PUBLIC	_af_hani_script_class
PUBLIC	_af_script_classes
PUBLIC	_af_cyrl_c2cp_style_class
PUBLIC	_af_cyrl_c2sc_style_class
PUBLIC	_af_cyrl_ordn_style_class
PUBLIC	_af_cyrl_pcap_style_class
PUBLIC	_af_cyrl_sinf_style_class
PUBLIC	_af_cyrl_smcp_style_class
PUBLIC	_af_cyrl_subs_style_class
PUBLIC	_af_cyrl_sups_style_class
PUBLIC	_af_cyrl_titl_style_class
PUBLIC	_af_cyrl_dflt_style_class
PUBLIC	_af_grek_c2cp_style_class
PUBLIC	_af_grek_c2sc_style_class
PUBLIC	_af_grek_ordn_style_class
PUBLIC	_af_grek_pcap_style_class
PUBLIC	_af_grek_sinf_style_class
PUBLIC	_af_grek_smcp_style_class
PUBLIC	_af_grek_subs_style_class
PUBLIC	_af_grek_sups_style_class
PUBLIC	_af_grek_titl_style_class
PUBLIC	_af_grek_dflt_style_class
PUBLIC	_af_hebr_dflt_style_class
PUBLIC	_af_latn_c2cp_style_class
PUBLIC	_af_latn_c2sc_style_class
PUBLIC	_af_latn_ordn_style_class
PUBLIC	_af_latn_pcap_style_class
PUBLIC	_af_latn_sinf_style_class
PUBLIC	_af_latn_smcp_style_class
PUBLIC	_af_latn_subs_style_class
PUBLIC	_af_latn_sups_style_class
PUBLIC	_af_latn_titl_style_class
PUBLIC	_af_latn_dflt_style_class
PUBLIC	_af_deva_dflt_style_class
PUBLIC	_af_none_dflt_style_class
PUBLIC	_af_telu_dflt_style_class
PUBLIC	_af_beng_dflt_style_class
PUBLIC	_af_gujr_dflt_style_class
PUBLIC	_af_guru_dflt_style_class
PUBLIC	_af_knda_dflt_style_class
PUBLIC	_af_limb_dflt_style_class
PUBLIC	_af_mlym_dflt_style_class
PUBLIC	_af_orya_dflt_style_class
PUBLIC	_af_sinh_dflt_style_class
PUBLIC	_af_sund_dflt_style_class
PUBLIC	_af_sylo_dflt_style_class
PUBLIC	_af_taml_dflt_style_class
PUBLIC	_af_tibt_dflt_style_class
PUBLIC	_af_hani_dflt_style_class
PUBLIC	_af_style_classes
PUBLIC	_af_style_names
PUBLIC	_af_cyrl_uniranges
PUBLIC	_af_deva_uniranges
PUBLIC	_af_grek_uniranges
PUBLIC	_af_hebr_uniranges
PUBLIC	_af_latn_uniranges
PUBLIC	_af_none_uniranges
PUBLIC	_af_telu_uniranges
PUBLIC	_af_beng_uniranges
PUBLIC	_af_gujr_uniranges
PUBLIC	_af_guru_uniranges
PUBLIC	_af_knda_uniranges
PUBLIC	_af_limb_uniranges
PUBLIC	_af_mlym_uniranges
PUBLIC	_af_orya_uniranges
PUBLIC	_af_sinh_uniranges
PUBLIC	_af_sund_uniranges
PUBLIC	_af_sylo_uniranges
PUBLIC	_af_taml_uniranges
PUBLIC	_af_tibt_uniranges
PUBLIC	_af_hani_uniranges
PUBLIC	_af_dummy_writing_system_class
PUBLIC	_af_latin_writing_system_class
PUBLIC	_af_cjk_writing_system_class
PUBLIC	_af_indic_writing_system_class
PUBLIC	_af_blue_strings
PUBLIC	_af_blue_stringsets
_BSS	SEGMENT
$SG9501	DB	01H DUP (?)
$SG9503	DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_af_service_properties DD FLAT:_af_property_set
	DD	FLAT:_af_property_get
_af_services DD	FLAT:$SG11527
	DD	FLAT:_af_service_properties
	DD	00H
	DD	00H
_af_autofitter_interface DD 00H
	DD	00H
	DD	00H
	DD	FLAT:_af_autofitter_load_glyph
_autofit_module_class DD 04H
	DD	0c8H
	DD	FLAT:$SG11568
	DD	010000H
	DD	020000H
	DD	FLAT:_af_autofitter_interface
	DD	FLAT:_af_autofitter_init
	DD	FLAT:_af_autofitter_done
	DD	FLAT:_af_get_interface
_af_writing_system_classes DD FLAT:_af_dummy_writing_system_class
	DD	FLAT:_af_latin_writing_system_class
	DD	FLAT:_af_cjk_writing_system_class
	DD	FLAT:_af_indic_writing_system_class
	DD	00H
_af_cyrl_script_class DD 00H
	DD	FLAT:_af_cyrl_uniranges
	DD	043eH
	DD	041eH
	DD	00H
_af_deva_script_class DD 01H
	DD	FLAT:_af_deva_uniranges
	DD	0920H
	DD	0935H
	DD	091fH
_af_grek_script_class DD 02H
	DD	FLAT:_af_grek_uniranges
	DD	03bfH
	DD	039fH
	DD	00H
_af_hebr_script_class DD 03H
	DD	FLAT:_af_hebr_uniranges
	DD	05ddH
	DD	00H
	DD	00H
_af_latn_script_class DD 04H
	DD	FLAT:_af_latn_uniranges
	DD	06fH
	DD	04fH
	DD	030H
_af_none_script_class DD 05H
	DD	FLAT:_af_none_uniranges
	DD	00H
	DD	00H
	DD	00H
_af_telu_script_class DD 06H
	DD	FLAT:_af_telu_uniranges
	DD	0c66H
	DD	0c67H
	DD	00H
_af_beng_script_class DD 07H
	DD	FLAT:_af_beng_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_gujr_script_class DD 08H
	DD	FLAT:_af_gujr_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_guru_script_class DD 09H
	DD	FLAT:_af_guru_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_knda_script_class DD 0aH
	DD	FLAT:_af_knda_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_limb_script_class DD 0bH
	DD	FLAT:_af_limb_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_mlym_script_class DD 0cH
	DD	FLAT:_af_mlym_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_orya_script_class DD 0dH
	DD	FLAT:_af_orya_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_sinh_script_class DD 0eH
	DD	FLAT:_af_sinh_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_sund_script_class DD 0fH
	DD	FLAT:_af_sund_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_sylo_script_class DD 010H
	DD	FLAT:_af_sylo_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_taml_script_class DD 011H
	DD	FLAT:_af_taml_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_tibt_script_class DD 012H
	DD	FLAT:_af_tibt_uniranges
	DD	06fH
	DD	00H
	DD	00H
_af_hani_script_class DD 013H
	DD	FLAT:_af_hani_uniranges
	DD	07530H
	DD	056d7H
	DD	00H
_af_script_classes DD FLAT:_af_cyrl_script_class
	DD	FLAT:_af_deva_script_class
	DD	FLAT:_af_grek_script_class
	DD	FLAT:_af_hebr_script_class
	DD	FLAT:_af_latn_script_class
	DD	FLAT:_af_none_script_class
	DD	FLAT:_af_telu_script_class
	DD	FLAT:_af_beng_script_class
	DD	FLAT:_af_gujr_script_class
	DD	FLAT:_af_guru_script_class
	DD	FLAT:_af_knda_script_class
	DD	FLAT:_af_limb_script_class
	DD	FLAT:_af_mlym_script_class
	DD	FLAT:_af_orya_script_class
	DD	FLAT:_af_sinh_script_class
	DD	FLAT:_af_sund_script_class
	DD	FLAT:_af_sylo_script_class
	DD	FLAT:_af_taml_script_class
	DD	FLAT:_af_tibt_script_class
	DD	FLAT:_af_hani_script_class
	DD	00H
_af_cyrl_c2cp_style_class DD 00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
_af_cyrl_c2sc_style_class DD 01H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
_af_cyrl_ordn_style_class DD 02H
	DD	01H
	DD	00H
	DD	00H
	DD	02H
_af_cyrl_pcap_style_class DD 03H
	DD	01H
	DD	00H
	DD	00H
	DD	03H
_af_cyrl_sinf_style_class DD 04H
	DD	01H
	DD	00H
	DD	00H
	DD	05H
_af_cyrl_smcp_style_class DD 05H
	DD	01H
	DD	00H
	DD	00H
	DD	06H
_af_cyrl_subs_style_class DD 06H
	DD	01H
	DD	00H
	DD	00H
	DD	07H
_af_cyrl_sups_style_class DD 07H
	DD	01H
	DD	00H
	DD	00H
	DD	08H
_af_cyrl_titl_style_class DD 08H
	DD	01H
	DD	00H
	DD	00H
	DD	09H
_af_cyrl_dflt_style_class DD 09H
	DD	01H
	DD	00H
	DD	00H
	DD	0aH
_af_grek_c2cp_style_class DD 0aH
	DD	01H
	DD	02H
	DD	0cH
	DD	00H
_af_grek_c2sc_style_class DD 0bH
	DD	01H
	DD	02H
	DD	0cH
	DD	01H
_af_grek_ordn_style_class DD 0cH
	DD	01H
	DD	02H
	DD	0cH
	DD	02H
_af_grek_pcap_style_class DD 0dH
	DD	01H
	DD	02H
	DD	0cH
	DD	03H
_af_grek_sinf_style_class DD 0eH
	DD	01H
	DD	02H
	DD	0cH
	DD	05H
_af_grek_smcp_style_class DD 0fH
	DD	01H
	DD	02H
	DD	0cH
	DD	06H
_af_grek_subs_style_class DD 010H
	DD	01H
	DD	02H
	DD	0cH
	DD	07H
_af_grek_sups_style_class DD 011H
	DD	01H
	DD	02H
	DD	0cH
	DD	08H
_af_grek_titl_style_class DD 012H
	DD	01H
	DD	02H
	DD	0cH
	DD	09H
_af_grek_dflt_style_class DD 013H
	DD	01H
	DD	02H
	DD	0cH
	DD	0aH
_af_hebr_dflt_style_class DD 014H
	DD	01H
	DD	03H
	DD	013H
	DD	0aH
_af_latn_c2cp_style_class DD 015H
	DD	01H
	DD	04H
	DD	017H
	DD	00H
_af_latn_c2sc_style_class DD 016H
	DD	01H
	DD	04H
	DD	017H
	DD	01H
_af_latn_ordn_style_class DD 017H
	DD	01H
	DD	04H
	DD	017H
	DD	02H
_af_latn_pcap_style_class DD 018H
	DD	01H
	DD	04H
	DD	017H
	DD	03H
_af_latn_sinf_style_class DD 019H
	DD	01H
	DD	04H
	DD	017H
	DD	05H
_af_latn_smcp_style_class DD 01aH
	DD	01H
	DD	04H
	DD	017H
	DD	06H
_af_latn_subs_style_class DD 01bH
	DD	01H
	DD	04H
	DD	017H
	DD	07H
_af_latn_sups_style_class DD 01cH
	DD	01H
	DD	04H
	DD	017H
	DD	08H
_af_latn_titl_style_class DD 01dH
	DD	01H
	DD	04H
	DD	017H
	DD	09H
_af_latn_dflt_style_class DD 01eH
	DD	01H
	DD	04H
	DD	017H
	DD	0aH
_af_deva_dflt_style_class DD 01fH
	DD	01H
	DD	01H
	DD	06H
	DD	0aH
_af_none_dflt_style_class DD 020H
	DD	00H
	DD	05H
	DD	00H
	DD	0aH
_af_telu_dflt_style_class DD 021H
	DD	01H
	DD	06H
	DD	01eH
	DD	0aH
_af_beng_dflt_style_class DD 022H
	DD	03H
	DD	07H
	DD	00H
	DD	0aH
_af_gujr_dflt_style_class DD 023H
	DD	03H
	DD	08H
	DD	00H
	DD	0aH
_af_guru_dflt_style_class DD 024H
	DD	03H
	DD	09H
	DD	00H
	DD	0aH
_af_knda_dflt_style_class DD 025H
	DD	03H
	DD	0aH
	DD	00H
	DD	0aH
_af_limb_dflt_style_class DD 026H
	DD	03H
	DD	0bH
	DD	00H
	DD	0aH
_af_mlym_dflt_style_class DD 027H
	DD	03H
	DD	0cH
	DD	00H
	DD	0aH
_af_orya_dflt_style_class DD 028H
	DD	03H
	DD	0dH
	DD	00H
	DD	0aH
_af_sinh_dflt_style_class DD 029H
	DD	03H
	DD	0eH
	DD	00H
	DD	0aH
_af_sund_dflt_style_class DD 02aH
	DD	03H
	DD	0fH
	DD	00H
	DD	0aH
_af_sylo_dflt_style_class DD 02bH
	DD	03H
	DD	010H
	DD	00H
	DD	0aH
_af_taml_dflt_style_class DD 02cH
	DD	03H
	DD	011H
	DD	00H
	DD	0aH
_af_tibt_dflt_style_class DD 02dH
	DD	03H
	DD	012H
	DD	00H
	DD	0aH
_af_hani_dflt_style_class DD 02eH
	DD	02H
	DD	013H
	DD	021H
	DD	0aH
_af_style_classes DD FLAT:_af_cyrl_c2cp_style_class
	DD	FLAT:_af_cyrl_c2sc_style_class
	DD	FLAT:_af_cyrl_ordn_style_class
	DD	FLAT:_af_cyrl_pcap_style_class
	DD	FLAT:_af_cyrl_sinf_style_class
	DD	FLAT:_af_cyrl_smcp_style_class
	DD	FLAT:_af_cyrl_subs_style_class
	DD	FLAT:_af_cyrl_sups_style_class
	DD	FLAT:_af_cyrl_titl_style_class
	DD	FLAT:_af_cyrl_dflt_style_class
	DD	FLAT:_af_grek_c2cp_style_class
	DD	FLAT:_af_grek_c2sc_style_class
	DD	FLAT:_af_grek_ordn_style_class
	DD	FLAT:_af_grek_pcap_style_class
	DD	FLAT:_af_grek_sinf_style_class
	DD	FLAT:_af_grek_smcp_style_class
	DD	FLAT:_af_grek_subs_style_class
	DD	FLAT:_af_grek_sups_style_class
	DD	FLAT:_af_grek_titl_style_class
	DD	FLAT:_af_grek_dflt_style_class
	DD	FLAT:_af_hebr_dflt_style_class
	DD	FLAT:_af_latn_c2cp_style_class
	DD	FLAT:_af_latn_c2sc_style_class
	DD	FLAT:_af_latn_ordn_style_class
	DD	FLAT:_af_latn_pcap_style_class
	DD	FLAT:_af_latn_sinf_style_class
	DD	FLAT:_af_latn_smcp_style_class
	DD	FLAT:_af_latn_subs_style_class
	DD	FLAT:_af_latn_sups_style_class
	DD	FLAT:_af_latn_titl_style_class
	DD	FLAT:_af_latn_dflt_style_class
	DD	FLAT:_af_deva_dflt_style_class
	DD	FLAT:_af_none_dflt_style_class
	DD	FLAT:_af_telu_dflt_style_class
	DD	FLAT:_af_beng_dflt_style_class
	DD	FLAT:_af_gujr_dflt_style_class
	DD	FLAT:_af_guru_dflt_style_class
	DD	FLAT:_af_knda_dflt_style_class
	DD	FLAT:_af_limb_dflt_style_class
	DD	FLAT:_af_mlym_dflt_style_class
	DD	FLAT:_af_orya_dflt_style_class
	DD	FLAT:_af_sinh_dflt_style_class
	DD	FLAT:_af_sund_dflt_style_class
	DD	FLAT:_af_sylo_dflt_style_class
	DD	FLAT:_af_taml_dflt_style_class
	DD	FLAT:_af_tibt_dflt_style_class
	DD	FLAT:_af_hani_dflt_style_class
	DD	00H
_af_cyrl_uniranges DD 0400H
	DD	04ffH
	DD	0500H
	DD	052fH
	DD	02de0H
	DD	02dffH
	DD	0a640H
	DD	0a69fH
	DD	00H
	DD	00H
_af_deva_uniranges DD 0900H
	DD	093bH
	DD	093dH
	DD	0950H
	DD	0953H
	DD	0963H
	DD	0966H
	DD	097fH
	DD	020b9H
	DD	020b9H
	DD	00H
	DD	00H
_af_grek_uniranges DD 0370H
	DD	03ffH
	DD	01f00H
	DD	01fffH
	DD	00H
	DD	00H
_af_hebr_uniranges DD 0590H
	DD	05ffH
	DD	0fb1dH
	DD	0fb4fH
	DD	00H
	DD	00H
_af_latn_uniranges DD 020H
	DD	07fH
	DD	0a0H
	DD	0ffH
	DD	0100H
	DD	017fH
	DD	0180H
	DD	024fH
	DD	0250H
	DD	02afH
	DD	02b0H
	DD	02ffH
	DD	0300H
	DD	036fH
	DD	01d00H
	DD	01d7fH
	DD	01d80H
	DD	01dbfH
	DD	01dc0H
	DD	01dffH
	DD	01e00H
	DD	01effH
	DD	02000H
	DD	0206fH
	DD	02070H
	DD	0209fH
	DD	020a0H
	DD	020b8H
	DD	020baH
	DD	020cfH
	DD	02150H
	DD	0218fH
	DD	02460H
	DD	024ffH
	DD	02c60H
	DD	02c7fH
	DD	02e00H
	DD	02e7fH
	DD	0a720H
	DD	0a7ffH
	DD	0fb00H
	DD	0fb06H
	DD	01d400H
	DD	01d7ffH
	DD	01f100H
	DD	01f1ffH
	DD	00H
	DD	00H
_af_none_uniranges DD 00H
	DD	00H
_af_telu_uniranges DD 0c00H
	DD	0c7fH
	DD	00H
	DD	00H
_af_beng_uniranges DD 0980H
	DD	09ffH
	DD	00H
	DD	00H
_af_gujr_uniranges DD 0a80H
	DD	0affH
	DD	00H
	DD	00H
_af_guru_uniranges DD 0a00H
	DD	0a7fH
	DD	00H
	DD	00H
_af_knda_uniranges DD 0c80H
	DD	0cffH
	DD	00H
	DD	00H
_af_limb_uniranges DD 01900H
	DD	0194fH
	DD	00H
	DD	00H
_af_mlym_uniranges DD 0d00H
	DD	0d7fH
	DD	00H
	DD	00H
_af_orya_uniranges DD 0b00H
	DD	0b7fH
	DD	00H
	DD	00H
_af_sinh_uniranges DD 0d80H
	DD	0dffH
	DD	00H
	DD	00H
_af_sund_uniranges DD 01b80H
	DD	01bbfH
	DD	00H
	DD	00H
_af_sylo_uniranges DD 0a800H
	DD	0a82fH
	DD	00H
	DD	00H
_af_taml_uniranges DD 0b80H
	DD	0bffH
	DD	00H
	DD	00H
_af_tibt_uniranges DD 0f00H
	DD	0fffH
	DD	00H
	DD	00H
_af_hani_uniranges DD 01100H
	DD	011ffH
	DD	02e80H
	DD	02effH
	DD	02f00H
	DD	02fdfH
	DD	02ff0H
	DD	02fffH
	DD	03000H
	DD	0303fH
	DD	03040H
	DD	0309fH
	DD	030a0H
	DD	030ffH
	DD	03100H
	DD	0312fH
	DD	03130H
	DD	0318fH
	DD	03190H
	DD	0319fH
	DD	031a0H
	DD	031bfH
	DD	031c0H
	DD	031efH
	DD	031f0H
	DD	031ffH
	DD	03200H
	DD	032ffH
	DD	03300H
	DD	033ffH
	DD	03400H
	DD	04dbfH
	DD	04dc0H
	DD	04dffH
	DD	04e00H
	DD	09fffH
	DD	0a960H
	DD	0a97fH
	DD	0ac00H
	DD	0d7afH
	DD	0d7b0H
	DD	0d7ffH
	DD	0f900H
	DD	0faffH
	DD	0fe10H
	DD	0fe1fH
	DD	0fe30H
	DD	0fe4fH
	DD	0ff00H
	DD	0ffefH
	DD	01b000H
	DD	01b0ffH
	DD	01d300H
	DD	01d35fH
	DD	01f200H
	DD	01f2ffH
	DD	020000H
	DD	02a6dfH
	DD	02a700H
	DD	02b73fH
	DD	02b740H
	DD	02b81fH
	DD	02f800H
	DD	02fa1fH
	DD	00H
	DD	00H
_af_dummy_writing_system_class DD 00H
	DD	028H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_af_dummy_hints_init
	DD	FLAT:_af_dummy_hints_apply
_af_latin_writing_system_class DD 01H
	DD	0a0cH
	DD	FLAT:_af_latin_metrics_init
	DD	FLAT:_af_latin_metrics_scale
	DD	00H
	DD	FLAT:_af_latin_hints_init
	DD	FLAT:_af_latin_hints_apply
_af_cjk_writing_system_class DD 02H
	DD	0a0cH
	DD	FLAT:_af_cjk_metrics_init
	DD	FLAT:_af_cjk_metrics_scale
	DD	00H
	DD	FLAT:_af_cjk_hints_init
	DD	FLAT:_af_cjk_hints_apply
_af_indic_writing_system_class DD 03H
	DD	0a0cH
	DD	FLAT:_af_indic_metrics_init
	DD	FLAT:_af_indic_metrics_scale
	DD	00H
	DD	FLAT:_af_indic_hints_init
	DD	FLAT:_af_indic_hints_apply
_af_blue_strings DB 0d0H
	DB	091H
	DB	0d0H
	DB	092H
	DB	0d0H
	DB	095H
	DB	0d0H
	DB	09fH
	DB	0d0H
	DB	097H
	DB	0d0H
	DB	09eH
	DB	0d0H
	DB	0a1H
	DB	0d0H
	DB	0adH
	DB	00H
	DB	0d0H
	DB	091H
	DB	0d0H
	DB	092H
	DB	0d0H
	DB	095H
	DB	0d0H
	DB	0a8H
	DB	0d0H
	DB	097H
	DB	0d0H
	DB	09eH
	DB	0d0H
	DB	0a1H
	DB	0d0H
	DB	0adH
	DB	00H
	DB	0d1H
	DB	085H
	DB	0d0H
	DB	0bfH
	DB	0d0H
	DB	0bdH
	DB	0d1H
	DB	088H
	DB	0d0H
	DB	0b5H
	DB	0d0H
	DB	0b7H
	DB	0d0H
	DB	0beH
	DB	0d1H
	DB	081H
	DB	00H
	DB	0d1H
	DB	080H
	DB	0d1H
	DB	083H
	DB	0d1H
	DB	084H
	DB	00H
	DB	0e0H
	DB	0a4H
	DB	095H
	DB	0e0H
	DB	0a4H
	DB	0aeH
	DB	0e0H
	DB	0a4H
	DB	085H
	DB	0e0H
	DB	0a4H
	DB	086H
	DB	0e0H
	DB	0a4H
	DB	0a5H
	DB	0e0H
	DB	0a4H
	DB	0a7H
	DB	0e0H
	DB	0a4H
	DB	0adH
	DB	0e0H
	DB	0a4H
	DB	0b6H
	DB	00H
	DB	0e0H
	DB	0a4H
	DB	088H
	DB	0e0H
	DB	0a4H
	DB	090H
	DB	0e0H
	DB	0a4H
	DB	093H
	DB	0e0H
	DB	0a4H
	DB	094H
	DB	0e0H
	DB	0a4H
	DB	0bfH
	DB	0e0H
	DB	0a5H
	DB	080H
	DB	0e0H
	DB	0a5H
	DB	08bH
	DB	0e0H
	DB	0a5H
	DB	08cH
	DB	00H
	DB	0e0H
	DB	0a4H
	DB	095H
	DB	0e0H
	DB	0a4H
	DB	0aeH
	DB	0e0H
	DB	0a4H
	DB	085H
	DB	0e0H
	DB	0a4H
	DB	086H
	DB	0e0H
	DB	0a4H
	DB	0a5H
	DB	0e0H
	DB	0a4H
	DB	0a7H
	DB	0e0H
	DB	0a4H
	DB	0adH
	DB	0e0H
	DB	0a4H
	DB	0b6H
	DB	00H
	DB	0e0H
	DB	0a5H
	DB	081H
	DB	0e0H
	DB	0a5H
	DB	083H
	DB	00H
	DB	0ceH
	DB	093H
	DB	0ceH
	DB	092H
	DB	0ceH
	DB	095H
	DB	0ceH
	DB	096H
	DB	0ceH
	DB	098H
	DB	0ceH
	DB	09fH
	DB	0ceH
	DB	0a9H
	DB	00H
	DB	0ceH
	DB	092H
	DB	0ceH
	DB	094H
	DB	0ceH
	DB	096H
	DB	0ceH
	DB	09eH
	DB	0ceH
	DB	098H
	DB	0ceH
	DB	09fH
	DB	00H
	DB	0ceH
	DB	0b2H
	DB	0ceH
	DB	0b8H
	DB	0ceH
	DB	0b4H
	DB	0ceH
	DB	0b6H
	DB	0ceH
	DB	0bbH
	DB	0ceH
	DB	0beH
	DB	00H
	DB	0ceH
	DB	0b1H
	DB	0ceH
	DB	0b5H
	DB	0ceH
	DB	0b9H
	DB	0ceH
	DB	0bfH
	DB	0cfH
	DB	080H
	DB	0cfH
	DB	083H
	DB	0cfH
	DB	084H
	DB	0cfH
	DB	089H
	DB	00H
	DB	0ceH
	DB	0b2H
	DB	0ceH
	DB	0b3H
	DB	0ceH
	DB	0b7H
	DB	0ceH
	DB	0bcH
	DB	0cfH
	DB	081H
	DB	0cfH
	DB	086H
	DB	0cfH
	DB	087H
	DB	0cfH
	DB	088H
	DB	00H
	DB	0d7H
	DB	091H
	DB	0d7H
	DB	093H
	DB	0d7H
	DB	094H
	DB	0d7H
	DB	097H
	DB	0d7H
	DB	09aH
	DB	0d7H
	DB	09bH
	DB	0d7H
	DB	09dH
	DB	0d7H
	DB	0a1H
	DB	00H
	DB	0d7H
	DB	091H
	DB	0d7H
	DB	098H
	DB	0d7H
	DB	09bH
	DB	0d7H
	DB	09dH
	DB	0d7H
	DB	0a1H
	DB	0d7H
	DB	0a6H
	DB	00H
	DB	0d7H
	DB	0a7H
	DB	0d7H
	DB	09aH
	DB	0d7H
	DB	09fH
	DB	0d7H
	DB	0a3H
	DB	0d7H
	DB	0a5H
	DB	00H
	DB	054H
	DB	048H
	DB	045H
	DB	05aH
	DB	04fH
	DB	043H
	DB	051H
	DB	053H
	DB	00H
	DB	048H
	DB	045H
	DB	05aH
	DB	04cH
	DB	04fH
	DB	043H
	DB	055H
	DB	053H
	DB	00H
	DB	066H
	DB	069H
	DB	06aH
	DB	06bH
	DB	064H
	DB	062H
	DB	068H
	DB	00H
	DB	078H
	DB	07aH
	DB	072H
	DB	06fH
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	DB	070H
	DB	071H
	DB	067H
	DB	06aH
	DB	079H
	DB	00H
	DB	0e0H
	DB	0b0H
	DB	087H
	DB	0e0H
	DB	0b0H
	DB	08cH
	DB	0e0H
	DB	0b0H
	DB	099H
	DB	0e0H
	DB	0b0H
	DB	09eH
	DB	0e0H
	DB	0b0H
	DB	0a3H
	DB	0e0H
	DB	0b0H
	DB	0b1H
	DB	0e0H
	DB	0b1H
	DB	0afH
	DB	00H
	DB	0e0H
	DB	0b0H
	DB	085H
	DB	0e0H
	DB	0b0H
	DB	095H
	DB	0e0H
	DB	0b0H
	DB	09aH
	DB	0e0H
	DB	0b0H
	DB	0b0H
	DB	0e0H
	DB	0b0H
	DB	0bdH
	DB	0e0H
	DB	0b1H
	DB	0a8H
	DB	0e0H
	DB	0b1H
	DB	0acH
	DB	00H
	DB	0e4H
	DB	0bbH
	DB	096H
	DB	0e4H
	DB	0bbH
	DB	0acH
	DB	0e4H
	DB	0bdH
	DB	0a0H
	DB	0e4H
	DB	0beH
	DB	086H
	DB	0e5H
	DB	080H
	DB	091H
	DB	0e5H
	DB	088H
	DB	0b0H
	DB	0e5H
	DB	092H
	DB	08cH
	DB	0e5H
	DB	09cH
	DB	0b0H
	DB	0e5H
	DB	0afH
	DB	0b9H
	DB	0e5H
	DB	0b0H
	DB	08dH
	DB	0e5H
	DB	0b0H
	DB	0b1H
	DB	0e5H
	DB	0b8H
	DB	0adH
	DB	0e6H
	DB	088H
	DB	091H
	DB	0e6H
	DB	097H
	DB	0b6H
	DB	0e6H
	DB	099H
	DB	082H
	DB	0e6H
	DB	09cH
	DB	083H
	DB	0e6H
	DB	09dH
	DB	0a5H
	DB	0e7H
	DB	082H
	DB	0baH
	DB	0e8H
	DB	083H
	DB	0bdH
	DB	0e8H
	DB	088H
	DB	0b0H
	DB	0e8H
	DB	0aaH
	DB	0aaH
	DB	0e8H
	DB	0afH
	DB	0b4H
	DB	0e8H
	DB	0bfH
	DB	099H
	DB	0e9H
	DB	080H
	DB	099H
	DB	0e9H
	DB	0bdH
	DB	08aH
	DB	07cH
	DB	0e5H
	DB	086H
	DB	09bH
	DB	0e5H
	DB	090H
	DB	08cH
	DB	0e5H
	DB	0b7H
	DB	0b2H
	DB	0e6H
	DB	084H
	DB	0bfH
	DB	0e6H
	DB	097H
	DB	0a2H
	DB	0e6H
	DB	098H
	DB	09fH
	DB	0e6H
	DB	098H
	DB	0afH
	DB	0e6H
	DB	099H
	DB	0afH
	DB	0e6H
	DB	0b0H
	DB	091H
	DB	0e7H
	DB	085H
	DB	0a7H
	DB	0e7H
	DB	08eH
	DB	0b0H
	DB	0e7H
	DB	08fH
	DB	0beH
	DB	0e7H
	DB	090H
	DB	086H
	DB	0e7H
	DB	094H
	DB	0a8H
	DB	0e7H
	DB	0bdH
	DB	0aeH
	DB	0e8H
	DB	0a6H
	DB	081H
	DB	0e8H
	DB	0bbH
	DB	08dH
	DB	0e9H
	DB	082H
	DB	0a3H
	DB	0e9H
	DB	085H
	DB	08dH
	DB	0e9H
	DB	087H
	DB	08cH
	DB	0e9H
	DB	096H
	DB	08bH
	DB	0e9H
	DB	09bH
	DB	0b7H
	DB	0e9H
	DB	09cH
	DB	0b2H
	DB	0e9H
	DB	09dH
	DB	0a2H
	DB	0e9H
	DB	0a1H
	DB	0beH
	DB	00H
	DB	0e4H
	DB	0b8H
	DB	0aaH
	DB	0e4H
	DB	0b8H
	DB	0baH
	DB	0e4H
	DB	0baH
	DB	0baH
	DB	0e4H
	DB	0bbH
	DB	096H
	DB	0e4H
	DB	0bbH
	DB	0a5H
	DB	0e4H
	DB	0bbH
	DB	0acH
	DB	0e4H
	DB	0bdH
	DB	0a0H
	DB	0e4H
	DB	0beH
	DB	086H
	DB	0e5H
	DB	080H
	DB	08bH
	DB	0e5H
	DB	080H
	DB	091H
	DB	0e5H
	DB	088H
	DB	0b0H
	DB	0e5H
	DB	092H
	DB	08cH
	DB	0e5H
	DB	0a4H
	DB	0a7H
	DB	0e5H
	DB	0afH
	DB	0b9H
	DB	0e5H
	DB	0b0H
	DB	08dH
	DB	0e5H
	DB	0b0H
	DB	0b1H
	DB	0e6H
	DB	088H
	DB	091H
	DB	0e6H
	DB	097H
	DB	0b6H
	DB	0e6H
	DB	099H
	DB	082H
	DB	0e6H
	DB	09cH
	DB	089H
	DB	0e6H
	DB	09dH
	DB	0a5H
	DB	0e7H
	DB	082H
	DB	0baH
	DB	0e8H
	DB	0a6H
	DB	081H
	DB	0e8H
	DB	0aaH
	DB	0aaH
	DB	0e8H
	DB	0afH
	DB	0b4H
	DB	07cH
	DB	0e4H
	DB	0b8H
	DB	0bbH
	DB	0e4H
	DB	0baH
	DB	09bH
	DB	0e5H
	DB	09bH
	DB	0a0H
	DB	0e5H
	DB	0aeH
	DB	083H
	DB	0e6H
	DB	083H
	DB	0b3H
	DB	0e6H
	DB	084H
	DB	08fH
	DB	0e7H
	DB	090H
	DB	086H
	DB	0e7H
	DB	094H
	DB	09fH
	DB	0e7H
	DB	095H
	DB	0b6H
	DB	0e7H
	DB	09cH
	DB	08bH
	DB	0e7H
	DB	09dH
	DB	080H
	DB	0e7H
	DB	0bdH
	DB	0aeH
	DB	0e8H
	DB	080H
	DB	085H
	DB	0e8H
	DB	087H
	DB	0aaH
	DB	0e8H
	DB	091H
	DB	097H
	DB	0e8H
	DB	0a3H
	DB	0a1H
	DB	0e8H
	DB	0bfH
	DB	087H
	DB	0e8H
	DB	0bfH
	DB	098H
	DB	0e8H
	DB	0bfH
	DB	09bH
	DB	0e9H
	DB	080H
	DB	0b2H
	DB	0e9H
	DB	081H
	DB	08eH
	DB	0e9H
	DB	081H
	DB	093H
	DB	0e9H
	DB	082H
	DB	084H
	DB	0e9H
	DB	087H
	DB	08cH
	DB	0e9H
	DB	09dH
	DB	0a2H
	DB	00H
	ORG $+4
_af_blue_stringsets DD 00H
	DW	01H
	ORG $+2
	DD	011H
	DW	00H
	ORG $+2
	DD	022H
	DW	05H
	ORG $+2
	DD	022H
	DW	00H
	ORG $+2
	DD	033H
	DW	00H
	ORG $+2
	DD	0284H
	DW	00H
	ORG $+2
	DD	053H
	DW	01H
	ORG $+2
	DD	06cH
	DW	01H
	ORG $+2
	DD	03aH
	DW	07H
	ORG $+2
	DD	03aH
	DW	00H
	ORG $+2
	DD	085H
	DW	00H
	ORG $+2
	DD	0284H
	DW	00H
	ORG $+2
	DD	08cH
	DW	01H
	ORG $+2
	DD	09bH
	DW	00H
	ORG $+2
	DD	0a8H
	DW	01H
	ORG $+2
	DD	0b5H
	DW	05H
	ORG $+2
	DD	0b5H
	DW	00H
	ORG $+2
	DD	0c6H
	DW	00H
	ORG $+2
	DD	0284H
	DW	00H
	ORG $+2
	DD	0d7H
	DW	09H
	ORG $+2
	DD	0e8H
	DW	00H
	ORG $+2
	DD	0f5H
	DW	00H
	ORG $+2
	DD	0284H
	DW	00H
	ORG $+2
	DD	0100H
	DW	01H
	ORG $+2
	DD	0109H
	DW	00H
	ORG $+2
	DD	0112H
	DW	01H
	ORG $+2
	DD	011aH
	DW	05H
	ORG $+2
	DD	011aH
	DW	00H
	ORG $+2
	DD	0122H
	DW	00H
	ORG $+2
	DD	0284H
	DW	00H
	ORG $+2
	DD	0128H
	DW	01H
	ORG $+2
	DD	013eH
	DW	00H
	ORG $+2
	DD	0284H
	DW	00H
	ORG $+2
	DD	0154H
	DW	01H
	ORG $+2
	DD	01ecH
	DW	00H
	ORG $+2
	DD	0284H
	DW	00H
	ORG $+2
CONST	ENDS
_DATA	SEGMENT
$SG9217	DB	'  U+%04lX contains no outlines', 0aH, 00H
$SG8203	DB	'd:\mozilla\modules\freetype2\src\autofit\afglobal.c', 00H
$SG10269 DB	'horizontal', 00H
	ORG $+1
$SG10270 DB	'vertical', 00H
	ORG $+3
$SG10271 DB	'%s widths:', 0aH, 00H
$SG10276 DB	'  %d (standard)', 00H
$SG10284 DB	' %d', 00H
$SG10289 DB	0aH, 00H
	ORG $+2
$SG10294 DB	0aH, 00H
	ORG $+2
$SG11328 DB	'd:\mozilla\modules\freetype2\src\autofit\afloader.c', 00H
$SG11337 DB	'd:\mozilla\modules\freetype2\src\autofit\afloader.c', 00H
$SG10317 DB	'cjk blue zones computation', 0aH, '====================='
	DB	'=====', 0aH, 0aH, 00H
$SG10331 DB	'bottom', 00H
	ORG $+1
$SG10332 DB	'bottom', 00H
	ORG $+1
$SG10333 DB	'bottom', 00H
	ORG $+1
$SG10334 DB	'top', 00H
$SG10335 DB	'top', 00H
$SG10336 DB	'top', 00H
$SG10337 DB	'left', 00H
	ORG $+3
$SG10338 DB	'left', 00H
	ORG $+3
$SG10339 DB	'left', 00H
	ORG $+3
$SG10340 DB	'right', 00H
	ORG $+2
$SG10341 DB	'right', 00H
	ORG $+2
$SG10342 DB	'right', 00H
	ORG $+2
$SG9319	DB	'  U+%04lX: best_y = %5ld', 00H
	ORG $+3
$SG11370 DB	'd:\mozilla\modules\freetype2\src\autofit\afloader.c', 00H
$SG10347 DB	'blue zone %d (%s):', 0aH, 00H
$SG8301	DB	'd:\mozilla\modules\freetype2\src\autofit\afhints.c', 00H
	ORG $+1
$SG10352 DB	'  [overshoot values]', 0aH, 00H
	ORG $+2
$SG9329	DB	' (round, skipped)', 0aH, 00H
	ORG $+1
$SG9334	DB	'round', 00H
	ORG $+2
$SG9335	DB	'flat', 00H
	ORG $+3
$SG9336	DB	' (%s)', 0aH, 00H
	ORG $+1
$SG9344	DB	'  empty', 0aH, 00H
	ORG $+3
$SG10377 DB	'  [reference values]', 0aH, 00H
	ORG $+2
$SG8329	DB	'd:\mozilla\modules\freetype2\src\autofit\afhints.c', 00H
	ORG $+1
$SG10383 DB	'  U+%04lX unavailable', 0aH, 00H
	ORG $+1
$SG9359	DB	'  [overshoot smaller than reference, taking mean value]', 0aH
	DB	00H
	ORG $+3
$SG10390 DB	'  U+%04lX contains no outlines', 0aH, 00H
$SG9367	DB	'    -> reference = %ld', 0aH, '       overshoot = %ld', 0aH
	DB	00H
	ORG $+1
$SG9372	DB	0aH, 00H
	ORG $+2
$SG11424 DB	'd:\mozilla\modules\freetype2\src\autofit\afmodule.c', 00H
$SG11443 DB	'fallback-script', 00H
$SG10429 DB	'  U+%04lX: best_pos = %5ld', 0aH, 00H
$SG11458 DB	'af_property_set: Invalid value %d for property `%s''', 0aH
	DB	00H
	ORG $+3
$SG11459 DB	'd:\mozilla\modules\freetype2\src\autofit\afmodule.c', 00H
$SG10437 DB	'  empty', 0aH, 00H
	ORG $+3
$SG11462 DB	'default-script', 00H
	ORG $+1
$SG11467 DB	'increase-x-height', 00H
	ORG $+2
$SG11476 DB	'af_property_set: missing property `%s''', 0aH, 00H
$SG10452 DB	'  [reference smaller than overshoot, taking mean value]', 0aH
	DB	00H
	ORG $+3
$SG11477 DB	'd:\mozilla\modules\freetype2\src\autofit\afmodule.c', 00H
$SG10458 DB	'    -> reference = %ld', 0aH, '       overshoot = %ld', 0aH
	DB	00H
	ORG $+1
$SG9437	DB	'af_latin_metrics_scale_dim: x height alignment (style `%'
	DB	's''):', 0aH, '                            vertical scaling ch'
	DB	'anged from %.4f to %.4f (by %d%%)', 0aH, 0aH, 00H
$SG10463 DB	0aH, 00H
	ORG $+2
$SG11492 DB	'glyph-to-script-map', 00H
$SG9444	DB	'horizontal', 00H
	ORG $+1
$SG9445	DB	'vertical', 00H
	ORG $+3
$SG9446	DB	'%s widths (style `%s'')', 0aH, 00H
$SG11499 DB	'fallback-script', 00H
$SG11505 DB	'default-script', 00H
	ORG $+1
$SG9457	DB	'  %d scaled to %.2f', 0aH, 00H
	ORG $+3
$SG11510 DB	'increase-x-height', 00H
	ORG $+2
$SG9462	DB	0aH, 00H
	ORG $+2
$SG11519 DB	'af_property_get: missing property `%s''', 0aH, 00H
$SG9471	DB	'`%s'' style is extra light (at current resolution)', 0aH
	DB	0aH, 00H
$SG11520 DB	'd:\mozilla\modules\freetype2\src\autofit\afmodule.c', 00H
$SG9477	DB	'blue zones (style `%s'')', 0aH, 00H
	ORG $+3
$SG11527 DB	'properties', 00H
	ORG $+1
$SG9502	DB	' (inactive)', 00H
$SG10527 DB	'delta: %d', 00H
	ORG $+2
$SG9504	DB	' (inactive)', 00H
$SG11568 DB	'autofitter', 00H
	ORG $+1
$SG9505	DB	'  reference %d: %d scaled to %.2f%s', 0aH, '  overshoot '
	DB	'%d: %d scaled to %.2f%s', 0aH, 00H
	ORG $+3
$SG10534 DB	'/%d', 0aH, 00H
	ORG $+3
$SG8724	DB	'd:\mozilla\modules\freetype2\src\autofit\afhints.c', 00H
	ORG $+1
$SG10540 DB	'>> active cjk blue zone %c%d[%ld/%ld]:', 0aH, '     ref:'
	DB	'   cur=%.2f fit=%.2f', 0aH, '     shoot: cur=%.2f fit=%.2f', 0aH
	DB	00H
$SG9955	DB	'horizontal', 00H
	ORG $+1
_af_style_names DD FLAT:$SG7989
	DD	FLAT:$SG7990
	DD	FLAT:$SG7991
	DD	FLAT:$SG7992
	DD	FLAT:$SG7993
	DD	FLAT:$SG7994
	DD	FLAT:$SG7995
	DD	FLAT:$SG7996
	DD	FLAT:$SG7997
	DD	FLAT:$SG7998
	DD	FLAT:$SG7999
	DD	FLAT:$SG8000
	DD	FLAT:$SG8001
	DD	FLAT:$SG8002
	DD	FLAT:$SG8003
	DD	FLAT:$SG8004
	DD	FLAT:$SG8005
	DD	FLAT:$SG8006
	DD	FLAT:$SG8007
	DD	FLAT:$SG8008
	DD	FLAT:$SG8009
	DD	FLAT:$SG8010
	DD	FLAT:$SG8011
	DD	FLAT:$SG8012
	DD	FLAT:$SG8013
	DD	FLAT:$SG8014
	DD	FLAT:$SG8015
	DD	FLAT:$SG8016
	DD	FLAT:$SG8017
	DD	FLAT:$SG8018
	DD	FLAT:$SG8019
	DD	FLAT:$SG8020
	DD	FLAT:$SG8021
	DD	FLAT:$SG8022
	DD	FLAT:$SG8023
	DD	FLAT:$SG8024
	DD	FLAT:$SG8025
	DD	FLAT:$SG8026
	DD	FLAT:$SG8027
	DD	FLAT:$SG8028
	DD	FLAT:$SG8029
	DD	FLAT:$SG8030
	DD	FLAT:$SG8031
	DD	FLAT:$SG8032
	DD	FLAT:$SG8033
	DD	FLAT:$SG8034
	DD	FLAT:$SG8035
$SG8725	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9956	DB	'vertical', 00H
	ORG $+3
$SG10896 DB	'  CJKLINK: edge %d @%d (opos=%.2f) linked to %.2f, dist '
	DB	'was %.2f, now %.2f', 0aH, 00H
$SG9957	DB	'latin %s edge hinting (style `%s'')', 0aH, 00H
$SG9927	DB	'  LINK: edge %d (opos=%.2f) linked to %.2f, dist was %.2'
	DB	'f, now %.2f', 0aH, 00H
	ORG $+3
$SG10983 DB	'horizontal', 00H
	ORG $+1
$SG10984 DB	'vertical', 00H
	ORG $+3
$SG10985 DB	'cjk %s edge hinting (style `%s'')', 0aH, 00H
	ORG $+2
$SG11003 DB	'  CJKBLUE: edge %d @%d (opos=%.2f) snapped to %.2f, was '
	DB	'%.2f', 0aH, 00H
	ORG $+2
$SG9992	DB	'  BLUE: edge %d (opos=%.2f) snapped to %.2f, was %.2f', 0aH
	DB	00H
	ORG $+1
$SG10006 DB	'  ASSERTION FAILED for edge %d', 0aH, 00H
$SG7989	DB	'cyrl_c2cp', 00H
	ORG $+2
$SG9986	DB	'  BLUE_ANCHOR: edge %d (opos=%.2f) snapped to %.2f, was '
	DB	'%.2f (anchor=edge %d)', 0aH, 00H
	ORG $+1
$SG11019 DB	'ASSERTION FAILED for edge %d', 0aH, 00H
	ORG $+2
$SG10030 DB	'  ANCHOR: edge %d (opos=%.2f) and %d (opos=%.2f) snapped'
	DB	' to %.2f and %.2f', 0aH, 00H
	ORG $+1
$SG7990	DB	'cyrl_c2sc', 00H
	ORG $+2
$SG9006	DB	0aH, 'latin standard widths computation (style `%s'')', 0aH
	DB	'=====================================================', 0aH, 0aH
	DB	00H
$SG7991	DB	'cyrl_ordn', 00H
	ORG $+2
$SG7992	DB	'cyrl_pcap', 00H
	ORG $+2
$SG7993	DB	'cyrl_sinf', 00H
	ORG $+2
$SG7994	DB	'cyrl_smcp', 00H
	ORG $+2
$SG7995	DB	'cyrl_subs', 00H
	ORG $+2
$SG7996	DB	'cyrl_sups', 00H
	ORG $+2
$SG7997	DB	'cyrl_titl', 00H
	ORG $+2
$SG7998	DB	'cyrl_dflt', 00H
	ORG $+2
$SG10047 DB	'  ADJUST: edge %d (pos=%.2f) moved to %.2f', 0aH, 00H
$SG7999	DB	'grek_c2cp', 00H
	ORG $+2
$SG8000	DB	'grek_c2sc', 00H
	ORG $+2
$SG11073 DB	'  (none)', 0aH, 00H
	ORG $+2
$SG8001	DB	'grek_ordn', 00H
	ORG $+2
$SG8002	DB	'grek_pcap', 00H
	ORG $+2
$SG8003	DB	'grek_sinf', 00H
	ORG $+2
$SG9028	DB	'standard character: U+%04lX (glyph index %d)', 0aH, 00H
	ORG $+2
$SG8004	DB	'grek_smcp', 00H
	ORG $+2
$SG8005	DB	'grek_subs', 00H
	ORG $+2
$SG11078 DB	0aH, 00H
	ORG $+2
$SG8006	DB	'grek_sups', 00H
	ORG $+2
$SG8007	DB	'grek_titl', 00H
	ORG $+2
$SG8008	DB	'grek_dflt', 00H
	ORG $+2
$SG8009	DB	'hebr_dflt', 00H
	ORG $+2
$SG8010	DB	'latn_c2cp', 00H
	ORG $+2
$SG8011	DB	'latn_c2sc', 00H
	ORG $+2
$SG8012	DB	'latn_ordn', 00H
	ORG $+2
$SG8013	DB	'latn_pcap', 00H
	ORG $+2
$SG10062 DB	'  STEM: edge %d (opos=%.2f) linked to %d (opos=%.2f) sna'
	DB	'pped to %.2f and %.2f', 0aH, 00H
	ORG $+1
$SG8014	DB	'latn_sinf', 00H
	ORG $+2
$SG8015	DB	'latn_smcp', 00H
	ORG $+2
$SG8016	DB	'latn_subs', 00H
	ORG $+2
$SG8017	DB	'latn_sups', 00H
	ORG $+2
$SG8018	DB	'latn_titl', 00H
	ORG $+2
$SG8019	DB	'latn_dflt', 00H
	ORG $+2
$SG8020	DB	'deva_dflt', 00H
	ORG $+2
$SG8021	DB	'none_dflt', 00H
	ORG $+2
$SG8022	DB	'telu_dflt', 00H
	ORG $+2
$SG8023	DB	'beng_dflt', 00H
	ORG $+2
$SG10072 DB	'  STEM: edge %d (opos=%.2f) linked to %d (opos=%.2f) sna'
	DB	'pped to %.2f and %.2f', 0aH, 00H
	ORG $+1
$SG8024	DB	'gujr_dflt', 00H
	ORG $+2
$SG8025	DB	'guru_dflt', 00H
	ORG $+2
$SG8026	DB	'knda_dflt', 00H
	ORG $+2
$SG8027	DB	'limb_dflt', 00H
	ORG $+2
$SG8028	DB	'mlym_dflt', 00H
	ORG $+2
$SG8029	DB	'orya_dflt', 00H
	ORG $+2
$SG10078 DB	'  BOUND: edge %d (pos=%.2f) moved to %.2f', 0aH, 00H
	ORG $+1
$SG8030	DB	'sinh_dflt', 00H
	ORG $+2
$SG8031	DB	'sund_dflt', 00H
	ORG $+2
$SG8032	DB	'sylo_dflt', 00H
	ORG $+2
$SG8033	DB	'taml_dflt', 00H
	ORG $+2
$SG8034	DB	'tibt_dflt', 00H
	ORG $+2
$SG8035	DB	'hani_dflt', 00H
	ORG $+2
$SG9065	DB	'horizontal', 00H
	ORG $+1
$SG9066	DB	'vertical', 00H
	ORG $+3
$SG9067	DB	'%s widths:', 0aH, 00H
$SG9072	DB	'  %d (standard)', 00H
$SG9080	DB	' %d', 00H
$SG9085	DB	0aH, 00H
	ORG $+2
$SG10109 DB	'  SERIF: edge %d (opos=%.2f) serif to %d (opos=%.2f) ali'
	DB	'gned to %.2f', 0aH, 00H
	ORG $+2
$SG9090	DB	0aH, 00H
	ORG $+2
$SG10116 DB	'  SERIF_ANCHOR: edge %d (opos=%.2f) snapped to %.2f', 0aH
	DB	00H
	ORG $+3
$SG9112	DB	'latin blue zones computation', 0aH, '==================='
	DB	'=========', 0aH, 0aH, 00H
$SG10135 DB	'  SERIF_LINK1: edge %d (opos=%.2f) snapped to %.2f from '
	DB	'%d (opos=%.2f)', 0aH, 00H
$SG10141 DB	'  SERIF_LINK2: edge %d (opos=%.2f) snapped to %.2f', 0aH
	DB	00H
$SG8098	DB	0aH, 'style coverage', 0aH, '==============', 0aH, 0aH, 00H
	ORG $+3
$SG10147 DB	'  BOUND: edge %d (pos=%.2f) moved to %.2f', 0aH, 00H
	ORG $+1
$SG9124	DB	'blue zone %d', 00H
	ORG $+3
$SG10153 DB	'  BOUND: edge %d (pos=%.2f) moved to %.2f', 0aH, 00H
	ORG $+1
$SG9130	DB	' (', 00H
	ORG $+1
$SG8109	DB	'%s:', 0aH, 00H
	ORG $+3
$SG10159 DB	'  (none)', 0aH, 00H
	ORG $+2
$SG9136	DB	'top', 00H
$SG10164 DB	0aH, 00H
	ORG $+2
$SG9143	DB	', ', 00H
	ORG $+1
$SG8119	DB	' ', 00H
	ORG $+2
$SG9148	DB	'neutral', 00H
$SG8124	DB	' %d', 00H
$SG8130	DB	0aH, 00H
	ORG $+2
$SG9155	DB	', ', 00H
	ORG $+1
$SG11207 DB	'd:\mozilla\modules\freetype2\src\autofit\hbshim.c', 00H
	ORG $+2
$SG9160	DB	'small top', 00H
	ORG $+2
$SG8136	DB	'  (none)', 0aH, 00H
	ORG $+2
$SG8142	DB	0aH, 00H
	ORG $+2
$SG9167	DB	', ', 00H
	ORG $+1
$SG9172	DB	'long', 00H
	ORG $+3
$SG9177	DB	')', 00H
	ORG $+2
$SG9182	DB	':', 0aH, 00H
	ORG $+1
$SG10210 DB	0aH, 'cjk standard widths computation (style `%s'')', 0aH
	DB	'===================================================', 0aH, 0aH
	DB	00H
$SG10232 DB	'standard character: U+%04lX (glyph index %d)', 0aH, 00H
	ORG $+2
$SG9210	DB	'  U+%04lX unavailable', 0aH, 00H
_DATA	ENDS
PUBLIC	_af_get_coverage
PUBLIC	_af_get_char_index
PUBLIC	__real@4050000000000000
PUBLIC	__real@40f0000000000000
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_FT_Load_Glyph:PROC
EXTRN	_FT_Select_Charmap:PROC
EXTRN	_FT_Set_Charmap:PROC
EXTRN	_FT_Get_Char_Index:PROC
EXTRN	_FT_Get_Next_Char:PROC
EXTRN	_FT_MulDiv:PROC
EXTRN	_FT_DivFix:PROC
EXTRN	_FT_Vector_Transform:PROC
EXTRN	_FT_Matrix_Invert:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_FT_GlyphLoader_New:PROC
EXTRN	_FT_GlyphLoader_Done:PROC
EXTRN	_FT_GlyphLoader_Rewind:PROC
EXTRN	_FT_GlyphLoader_CheckPoints:PROC
EXTRN	_FT_GlyphLoader_CheckSubGlyphs:PROC
EXTRN	_FT_GlyphLoader_Add:PROC
EXTRN	_FT_GlyphLoader_CopyPoints:PROC
EXTRN	_ft_service_list_lookup:PROC
EXTRN	_FT_Outline_Get_CBox:PROC
EXTRN	_FT_Outline_Translate:PROC
EXTRN	_FT_Outline_Transform:PROC
EXTRN	_FT_Outline_Get_Orientation:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Panic:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_ft_corner_is_flat:PROC
EXTRN	_FT_Get_Advance:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@40f0000000000000
CONST	SEGMENT
__real@40f0000000000000 DQ 040f0000000000000r	; 65536
CONST	ENDS
;	COMDAT __real@4050000000000000
CONST	SEGMENT
__real@4050000000000000 DQ 04050000000000000r	; 64
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_slot$ = 12						; size = 4
_size$ = 16						; size = 4
_glyph_index$ = 20					; size = 4
_load_flags$ = 24					; size = 4
_af_autofitter_load_glyph PROC
; File d:\mozilla\modules\freetype2\src\autofit\afmodule.c
; Line 276
	push	ebp
	mov	ebp, esp
; Line 277
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 280
	mov	ecx, DWORD PTR _load_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _module$[ebp]
	push	edx
	call	_af_loader_load_glyph
	add	esp, 16					; 00000010H
; Line 281
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_af_autofitter_load_glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = -4						; size = 4
_ft_module$ = 8						; size = 4
_af_autofitter_done PROC
; File d:\mozilla\modules\freetype2\src\autofit\afmodule.c
; Line 262
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 263
	mov	eax, DWORD PTR _ft_module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 266
	mov	ecx, DWORD PTR _module$[ebp]
	push	ecx
	call	_af_loader_done
	add	esp, 4
; Line 267
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_autofitter_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = -4						; size = 4
_ft_module$ = 8						; size = 4
_af_autofitter_init PROC
; File d:\mozilla\modules\freetype2\src\autofit\afmodule.c
; Line 249
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 250
	mov	eax, DWORD PTR _ft_module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 253
	mov	ecx, DWORD PTR _module$[ebp]
	mov	DWORD PTR [ecx+12], 46			; 0000002eH
; Line 254
	mov	edx, DWORD PTR _module$[ebp]
	mov	DWORD PTR [edx+16], 4
; Line 256
	mov	eax, DWORD PTR _module$[ebp]
	push	eax
	call	_af_loader_init
	add	esp, 4
; Line 257
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_autofitter_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_module_interface$ = 12					; size = 4
_af_get_interface PROC
; File d:\mozilla\modules\freetype2\src\autofit\afmodule.c
; Line 228
	push	ebp
	mov	ebp, esp
; Line 240
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 243
	mov	ecx, DWORD PTR _module_interface$[ebp]
	push	ecx
	push	OFFSET _af_services
	call	_ft_service_list_lookup
	add	esp, 8
; Line 244
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_af_get_interface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_globals$1 = -56					; size = 4
_prop$2 = -48						; size = 4
_val$3 = -44						; size = 4
_style_class$4 = -40					; size = 4
_val$5 = -36						; size = 4
_globals$6 = -28					; size = 4
_prop$7 = -20						; size = 4
_default_script$ = -16					; size = 4
_fallback_style$ = -12					; size = 4
_module$ = -8						; size = 4
_error$ = -4						; size = 4
_ft_module$ = 8						; size = 4
_property_name$ = 12					; size = 4
_value$ = 16						; size = 4
_af_property_get PROC
; File d:\mozilla\modules\freetype2\src\autofit\afmodule.c
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 156
	mov	DWORD PTR _error$[ebp], 0
; Line 157
	mov	eax, DWORD PTR _ft_module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 158
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _fallback_style$[ebp], edx
; Line 159
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _default_script$[ebp], ecx
; Line 162
	push	OFFSET $SG11492
	mov	edx, DWORD PTR _property_name$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@af_propert
; Line 164
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _prop$7[ebp], eax
; Line 168
	mov	ecx, DWORD PTR _module$[ebp]
	push	ecx
	lea	edx, DWORD PTR _globals$6[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$7[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_af_property_get_face_globals
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 169
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN12@af_propert
; Line 170
	mov	edx, DWORD PTR _prop$7[ebp]
	mov	eax, DWORD PTR _globals$6[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+4], ecx
$LN12@af_propert:
; Line 172
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN14@af_propert
	jmp	$LN4@af_propert
$LN13@af_propert:
; Line 174
	push	OFFSET $SG11499
	mov	edx, DWORD PTR _property_name$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@af_propert
; Line 176
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _val$5[ebp], eax
; Line 178
	mov	ecx, DWORD PTR _fallback_style$[ebp]
	mov	edx, DWORD PTR _af_style_classes[ecx*4]
	mov	DWORD PTR _style_class$4[ebp], edx
; Line 181
	mov	eax, DWORD PTR _val$5[ebp]
	mov	ecx, DWORD PTR _style_class$4[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
; Line 183
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN14@af_propert
	jmp	SHORT $LN4@af_propert
$LN10@af_propert:
; Line 185
	push	OFFSET $SG11505
	mov	eax, DWORD PTR _property_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@af_propert
; Line 187
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _val$3[ebp], ecx
; Line 190
	mov	edx, DWORD PTR _val$3[ebp]
	mov	eax, DWORD PTR _default_script$[ebp]
	mov	DWORD PTR [edx], eax
; Line 192
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN14@af_propert
	jmp	SHORT $LN4@af_propert
$LN8@af_propert:
; Line 194
	push	OFFSET $SG11510
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@af_propert
; Line 196
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _prop$2[ebp], edx
; Line 200
	mov	eax, DWORD PTR _module$[ebp]
	push	eax
	lea	ecx, DWORD PTR _globals$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$2[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_af_property_get_face_globals
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 201
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@af_propert
; Line 202
	mov	ecx, DWORD PTR _prop$2[ebp]
	mov	edx, DWORD PTR _globals$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+4], eax
$LN5@af_propert:
; Line 204
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN14@af_propert
$LN4@af_propert:
; Line 209
	mov	ecx, 4
	imul	edx, ecx, 87
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN3@af_propert
	mov	eax, DWORD PTR _property_name$[ebp]
	push	eax
	push	OFFSET $SG11519
	call	_FT_Message
	add	esp, 8
$LN3@af_propert:
	xor	ecx, ecx
	jne	SHORT $LN4@af_propert
; Line 210
	push	OFFSET $SG11520
	push	210					; 000000d2H
	push	12					; 0000000cH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 12					; 0000000cH
$LN14@af_propert:
; Line 211
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@af_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@af_propert:
	DD	2
	DD	$LN18@af_propert
$LN18@af_propert:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN16@af_propert
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN17@af_propert
$LN17@af_propert:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
$LN16@af_propert:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
_af_property_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_globals$1 = -36					; size = 4
_prop$2 = -28						; size = 4
_default_script$3 = -24					; size = 4
_style_class$4 = -20					; size = 4
_ss$5 = -16						; size = 4
_fallback_script$6 = -12				; size = 4
_module$ = -8						; size = 4
_error$ = -4						; size = 4
_ft_module$ = 8						; size = 4
_property_name$ = 12					; size = 4
_value$ = 16						; size = 4
_af_property_set PROC
; File d:\mozilla\modules\freetype2\src\autofit\afmodule.c
; Line 86
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 87
	mov	DWORD PTR _error$[ebp], 0
; Line 88
	mov	eax, DWORD PTR _ft_module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 91
	push	OFFSET $SG11443
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN19@af_propert
; Line 93
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _fallback_script$6[ebp], edx
; Line 101
	mov	DWORD PTR _ss$5[ebp], 0
	jmp	SHORT $LN18@af_propert
$LN17@af_propert:
	mov	eax, DWORD PTR _ss$5[ebp]
	add	eax, 1
	mov	DWORD PTR _ss$5[ebp], eax
$LN18@af_propert:
	mov	ecx, DWORD PTR _ss$5[ebp]
	cmp	DWORD PTR _af_style_classes[ecx*4], 0
	je	SHORT $LN16@af_propert
; Line 103
	mov	edx, DWORD PTR _ss$5[ebp]
	mov	eax, DWORD PTR _af_style_classes[edx*4]
	mov	DWORD PTR _style_class$4[ebp], eax
; Line 107
	mov	ecx, DWORD PTR _style_class$4[ebp]
	mov	edx, DWORD PTR _fallback_script$6[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN15@af_propert
	mov	ecx, DWORD PTR _style_class$4[ebp]
	cmp	DWORD PTR [ecx+16], 10			; 0000000aH
	jne	SHORT $LN15@af_propert
; Line 109
	mov	edx, DWORD PTR _module$[ebp]
	mov	eax, DWORD PTR _ss$5[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 110
	jmp	SHORT $LN16@af_propert
$LN15@af_propert:
; Line 112
	jmp	SHORT $LN17@af_propert
$LN16@af_propert:
; Line 114
	mov	ecx, DWORD PTR _ss$5[ebp]
	cmp	DWORD PTR _af_style_classes[ecx*4], 0
	jne	SHORT $LN14@af_propert
$LN13@af_propert:
; Line 117
	mov	edx, 4
	imul	eax, edx, 87
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN12@af_propert
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fallback_script$6[ebp]
	push	edx
	push	OFFSET $SG11458
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN12@af_propert:
	xor	eax, eax
	jne	SHORT $LN13@af_propert
; Line 118
	push	OFFSET $SG11459
	push	118					; 00000076H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN20@af_propert
$LN14@af_propert:
; Line 121
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN20@af_propert
	jmp	SHORT $LN4@af_propert
$LN19@af_propert:
; Line 123
	push	OFFSET $SG11462
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@af_propert
; Line 125
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _default_script$3[ebp], edx
; Line 128
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR _default_script$3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
; Line 130
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN20@af_propert
	jmp	SHORT $LN4@af_propert
$LN8@af_propert:
; Line 132
	push	OFFSET $SG11467
	mov	eax, DWORD PTR _property_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@af_propert
; Line 134
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _prop$2[ebp], ecx
; Line 138
	mov	edx, DWORD PTR _module$[ebp]
	push	edx
	lea	eax, DWORD PTR _globals$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _prop$2[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_af_property_get_face_globals
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 139
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@af_propert
; Line 140
	mov	eax, DWORD PTR _globals$1[ebp]
	mov	ecx, DWORD PTR _prop$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx
$LN5@af_propert:
; Line 142
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN20@af_propert
$LN4@af_propert:
; Line 146
	mov	eax, 4
	imul	ecx, eax, 87
	cmp	DWORD PTR _ft_trace_levels[ecx], 0
	jl	SHORT $LN3@af_propert
	mov	edx, DWORD PTR _property_name$[ebp]
	push	edx
	push	OFFSET $SG11476
	call	_FT_Message
	add	esp, 8
$LN3@af_propert:
	xor	eax, eax
	jne	SHORT $LN4@af_propert
; Line 147
	push	OFFSET $SG11477
	push	147					; 00000093H
	push	12					; 0000000cH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 12					; 0000000cH
$LN20@af_propert:
; Line 148
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@af_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN24@af_propert:
	DD	1
	DD	$LN23@af_propert
$LN23@af_propert:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN22@af_propert
$LN22@af_propert:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
_af_property_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_globals$ = -12						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_aglobals$ = 12						; size = 4
_module$ = 16						; size = 4
_af_property_get_face_globals PROC
; File d:\mozilla\modules\freetype2\src\autofit\afmodule.c
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 53
	mov	DWORD PTR _error$[ebp], 0
; Line 57
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN4@af_propert
; Line 58
	push	OFFSET $SG11424
	push	58					; 0000003aH
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	SHORT $LN5@af_propert
$LN4@af_propert:
; Line 60
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR _globals$[ebp], ecx
; Line 61
	cmp	DWORD PTR _globals$[ebp], 0
	jne	SHORT $LN3@af_propert
; Line 65
	mov	edx, DWORD PTR _module$[ebp]
	push	edx
	lea	eax, DWORD PTR _globals$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_af_face_globals_new
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 66
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@af_propert
; Line 69
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [edx+116], eax
; Line 71
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+120], OFFSET _af_face_globals_free
$LN3@af_propert:
; Line 75
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@af_propert
; Line 76
	mov	edx, DWORD PTR _aglobals$[ebp]
	mov	eax, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@af_propert:
; Line 78
	mov	eax, DWORD PTR _error$[ebp]
$LN5@af_propert:
; Line 79
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@af_propert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@af_propert:
	DD	1
	DD	$LN8@af_propert
$LN8@af_propert:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@af_propert
$LN7@af_propert:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
_af_property_get_face_globals ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv175 = -288						; size = 4
tv128 = -284						; size = 4
_vvector$1 = -276					; size = 8
_bbox$2 = -260						; size = 16
_dummy$3 = -236						; size = 20
_p2$4 = -212						; size = 4
_p1$5 = -208						; size = 4
_l$6 = -204						; size = 4
_k$7 = -200						; size = 4
_limit$8 = -196						; size = 4
_cur$9 = -192						; size = 4
_num_base_points$10 = -188				; size = 4
_num_new_points$11 = -184				; size = 4
_num_points$12 = -180					; size = 4
_y$13 = -176						; size = 4
_x$14 = -172						; size = 4
_pp2$15 = -164						; size = 8
_pp1$16 = -148						; size = 8
_subglyph$17 = -136					; size = 4
_start_point$18 = -132					; size = 4
_num_base_subgs$19 = -128				; size = 4
_num_subglyphs$20 = -124				; size = 4
_nn$21 = -120						; size = 4
_pp2x$22 = -116						; size = 4
_pp1x$23 = -112						; size = 4
_pp2x$24 = -108						; size = 4
_pp1x$25 = -104						; size = 4
_edge2$26 = -100					; size = 4
_edge1$27 = -96						; size = 4
_axis$28 = -92						; size = 4
_pp2x_uh$29 = -88					; size = 4
_pp1x_uh$30 = -84					; size = 4
_new_lsb$31 = -80					; size = 4
_old_lsb$32 = -76					; size = 4
_old_rsb$33 = -72					; size = 4
_writing_system_class$34 = -68				; size = 4
_style_class$35 = -64					; size = 4
_inverse$36 = -56					; size = 16
_flags$ = -36						; size = 4
_internal$ = -32					; size = 4
_slot$ = -28						; size = 4
_hints$ = -24						; size = 4
_metrics$ = -20						; size = 4
_gloader$ = -16						; size = 4
_face$ = -12						; size = 4
_error$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_loader$ = 8						; size = 4
_scaler$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_depth$ = 24						; size = 4
_af_loader_load_g PROC
; File d:\mozilla\modules\freetype2\src\autofit\afloader.c
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 110
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 111
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _gloader$[ebp], eax
; Line 112
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR _metrics$[ebp], edx
; Line 113
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _hints$[ebp], eax
; Line 114
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _slot$[ebp], edx
; Line 115
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR _internal$[ebp], ecx
; Line 119
	mov	edx, DWORD PTR _load_flags$[ebp]
	or	edx, 8192				; 00002000H
	mov	DWORD PTR _flags$[ebp], edx
; Line 120
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Load_Glyph
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 121
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN42@af_loader_
; Line 122
	jmp	$Exit$57
$LN42@af_loader_:
; Line 124
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _internal$[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax+136], dl
; Line 125
	mov	eax, DWORD PTR _loader$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	test	ecx, ecx
	je	$LN41@af_loader_
; Line 130
	mov	edx, DWORD PTR _internal$[ebp]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 131
	mov	eax, DWORD PTR _internal$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+156], ecx
	mov	DWORD PTR [eax+160], edx
; Line 133
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _inverse$36[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _inverse$36[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _inverse$36[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _inverse$36[ebp+12], eax
; Line 134
	lea	ecx, DWORD PTR _inverse$36[ebp]
	push	ecx
	call	_FT_Matrix_Invert
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN41@af_loader_
; Line 135
	lea	edx, DWORD PTR _inverse$36[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 156				; 0000009cH
	push	eax
	call	_FT_Vector_Transform
	add	esp, 8
$LN41@af_loader_:
; Line 138
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR tv128[ebp], edx
	cmp	DWORD PTR tv128[ebp], 1668246896	; 636f6d70H
	je	$LN24@af_loader_
	cmp	DWORD PTR tv128[ebp], 1869968492	; 6f75746cH
	je	SHORT $LN37@af_loader_
	jmp	$LN9@af_loader_
$LN37@af_loader_:
; Line 142
	mov	eax, DWORD PTR _loader$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	test	ecx, ecx
	je	SHORT $LN36@af_loader_
; Line 145
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+160]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
$LN36@af_loader_:
; Line 151
	mov	ecx, DWORD PTR _slot$[ebp]
	movsx	edx, WORD PTR [ecx+110]
	add	edx, 4
	je	SHORT $LN45@af_loader_
	mov	eax, DWORD PTR _gloader$[ebp]
	movsx	ecx, WORD PTR [eax+22]
	mov	edx, DWORD PTR _gloader$[ebp]
	movsx	eax, WORD PTR [edx+58]
	add	ecx, eax
	mov	edx, DWORD PTR _slot$[ebp]
	movsx	eax, WORD PTR [edx+110]
	lea	ecx, DWORD PTR [ecx+eax+4]
	mov	edx, DWORD PTR _gloader$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	ja	SHORT $LN47@af_loader_
$LN45@af_loader_:
	mov	eax, DWORD PTR _slot$[ebp]
	movsx	ecx, WORD PTR [eax+108]
	test	ecx, ecx
	je	SHORT $LN46@af_loader_
	mov	edx, DWORD PTR _gloader$[ebp]
	movsx	eax, WORD PTR [edx+20]
	mov	ecx, DWORD PTR _gloader$[ebp]
	movsx	edx, WORD PTR [ecx+56]
	add	eax, edx
	mov	ecx, DWORD PTR _slot$[ebp]
	movsx	edx, WORD PTR [ecx+108]
	add	eax, edx
	mov	ecx, DWORD PTR _gloader$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	ja	SHORT $LN47@af_loader_
$LN46@af_loader_:
	mov	DWORD PTR tv175[ebp], 0
	jmp	SHORT $LN48@af_loader_
$LN47@af_loader_:
	mov	edx, DWORD PTR _slot$[ebp]
	movsx	eax, WORD PTR [edx+108]
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	movsx	edx, WORD PTR [ecx+110]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _gloader$[ebp]
	push	eax
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv175[ebp], eax
$LN48@af_loader_:
	mov	ecx, DWORD PTR tv175[ebp]
	mov	DWORD PTR _error$[ebp], ecx
; Line 152
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN35@af_loader_
; Line 153
	jmp	$Exit$57
$LN35@af_loader_:
; Line 157
	mov	edx, DWORD PTR _slot$[ebp]
	movsx	eax, WORD PTR [edx+110]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	push	edx
	mov	eax, DWORD PTR _gloader$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 161
	mov	edx, DWORD PTR _slot$[ebp]
	movsx	eax, WORD PTR [edx+108]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	push	edx
	mov	eax, DWORD PTR _gloader$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 165
	mov	edx, DWORD PTR _slot$[ebp]
	movsx	eax, WORD PTR [edx+110]
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	mov	eax, DWORD PTR _gloader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 167
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR _slot$[ebp]
	mov	cx, WORD PTR [eax+110]
	mov	WORD PTR [edx+58], cx
; Line 168
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR _slot$[ebp]
	mov	cx, WORD PTR [eax+108]
	mov	WORD PTR [edx+56], cx
; Line 172
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+164], ecx
; Line 173
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+168], ecx
; Line 175
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _hints$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+172], eax
; Line 176
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+176], edx
; Line 179
	mov	eax, DWORD PTR _slot$[ebp]
	movsx	ecx, WORD PTR [eax+110]
	test	ecx, ecx
	jne	SHORT $LN34@af_loader_
; Line 180
	jmp	$Hint_Metrics$58
$LN34@af_loader_:
; Line 188
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _style_class$35[ebp], eax
; Line 190
	mov	ecx, DWORD PTR _style_class$35[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _af_writing_system_classes[edx*4]
	mov	DWORD PTR _writing_system_class$34[ebp], eax
; Line 193
	mov	ecx, DWORD PTR _writing_system_class$34[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN33@af_loader_
; Line 196
	mov	esi, esp
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	mov	eax, DWORD PTR _gloader$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	mov	edx, DWORD PTR _writing_system_class$34[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN33@af_loader_:
; Line 201
	mov	ecx, DWORD PTR _scaler$[ebp]
	cmp	DWORD PTR [ecx+20], 1
	je	$LN32@af_loader_
; Line 205
	mov	edx, 28					; 0000001cH
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$28[ebp], edx
; Line 206
	mov	eax, DWORD PTR _axis$28[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _edge1$27[ebp], ecx
; Line 208
	mov	edx, DWORD PTR _axis$28[ebp]
	imul	eax, DWORD PTR [edx+12], 48
	mov	ecx, DWORD PTR _edge1$27[ebp]
	lea	edx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _edge2$26[ebp], edx
; Line 211
	mov	eax, DWORD PTR _axis$28[ebp]
	cmp	DWORD PTR [eax+12], 1
	jle	$LN31@af_loader_
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	and	edx, 4
	jne	$LN31@af_loader_
; Line 213
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _edge2$26[ebp]
	mov	edx, DWORD PTR [eax+172]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _old_rsb$33[ebp], edx
; Line 214
	mov	eax, DWORD PTR _edge1$27[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _old_lsb$32[ebp], ecx
; Line 215
	mov	edx, DWORD PTR _edge1$27[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _new_lsb$31[ebp], eax
; Line 220
	mov	ecx, DWORD PTR _new_lsb$31[ebp]
	sub	ecx, DWORD PTR _old_lsb$32[ebp]
	mov	DWORD PTR _pp1x_uh$30[ebp], ecx
; Line 221
	mov	edx, DWORD PTR _edge2$26[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _old_rsb$33[ebp]
	mov	DWORD PTR _pp2x_uh$29[ebp], eax
; Line 226
	cmp	DWORD PTR _old_lsb$32[ebp], 24		; 00000018H
	jge	SHORT $LN30@af_loader_
; Line 227
	mov	ecx, DWORD PTR _pp1x_uh$30[ebp]
	sub	ecx, 8
	mov	DWORD PTR _pp1x_uh$30[ebp], ecx
$LN30@af_loader_:
; Line 229
	cmp	DWORD PTR _old_rsb$33[ebp], 24		; 00000018H
	jge	SHORT $LN29@af_loader_
; Line 230
	mov	edx, DWORD PTR _pp2x_uh$29[ebp]
	add	edx, 8
	mov	DWORD PTR _pp2x_uh$29[ebp], edx
$LN29@af_loader_:
; Line 232
	mov	eax, DWORD PTR _pp1x_uh$30[ebp]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+164], eax
; Line 233
	mov	edx, DWORD PTR _pp2x_uh$29[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+172], edx
; Line 235
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	cmp	edx, DWORD PTR _new_lsb$31[ebp]
	jl	SHORT $LN28@af_loader_
	cmp	DWORD PTR _old_lsb$32[ebp], 0
	jle	SHORT $LN28@af_loader_
; Line 236
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	sub	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+164], ecx
$LN28@af_loader_:
; Line 238
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _edge2$26[ebp]
	mov	edx, DWORD PTR [eax+172]
	cmp	edx, DWORD PTR [ecx+8]
	jg	SHORT $LN27@af_loader_
	cmp	DWORD PTR _old_rsb$33[ebp], 0
	jle	SHORT $LN27@af_loader_
; Line 239
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	add	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+172], ecx
$LN27@af_loader_:
; Line 241
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	sub	ecx, DWORD PTR _pp1x_uh$30[ebp]
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+144], ecx
; Line 242
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	sub	ecx, DWORD PTR _pp2x_uh$29[ebp]
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+148], ecx
; Line 244
	jmp	SHORT $LN26@af_loader_
$LN31@af_loader_:
; Line 246
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	DWORD PTR _pp1x$25[ebp], ecx
; Line 247
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	DWORD PTR _pp2x$24[ebp], eax
; Line 250
	mov	ecx, DWORD PTR _pp1x$25[ebp]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+164], ecx
; Line 251
	mov	eax, DWORD PTR _pp2x$24[ebp]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+172], eax
; Line 253
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+164]
	sub	eax, DWORD PTR _pp1x$25[ebp]
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+144], eax
; Line 254
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+172]
	sub	eax, DWORD PTR _pp2x$24[ebp]
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+148], eax
$LN26@af_loader_:
; Line 257
	jmp	SHORT $LN25@af_loader_
$LN32@af_loader_:
; Line 259
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	DWORD PTR _pp1x$23[ebp], eax
; Line 260
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	DWORD PTR _pp2x$22[ebp], edx
; Line 263
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	edx, DWORD PTR _pp1x$23[ebp]
	lea	eax, DWORD PTR [edx+ecx+32]
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+164], eax
; Line 264
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _pp2x$22[ebp]
	lea	edx, DWORD PTR [ecx+eax+32]
	and	edx, -64				; ffffffc0H
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+172], edx
; Line 266
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	sub	edx, DWORD PTR _pp1x$23[ebp]
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+144], edx
; Line 267
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	sub	edx, DWORD PTR _pp2x$22[ebp]
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+148], edx
$LN25@af_loader_:
; Line 271
	mov	ecx, DWORD PTR _gloader$[ebp]
	push	ecx
	call	_FT_GlyphLoader_Add
	add	esp, 4
; Line 272
	jmp	$Hint_Metrics$58
$LN24@af_loader_:
; Line 276
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR _num_subglyphs$20[ebp], eax
; Line 281
	mov	ecx, DWORD PTR _gloader$[ebp]
	movsx	edx, WORD PTR [ecx+22]
	mov	DWORD PTR _start_point$18[ebp], edx
; Line 284
	mov	eax, DWORD PTR _num_subglyphs$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _gloader$[ebp]
	push	ecx
	call	_FT_GlyphLoader_CheckSubGlyphs
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 285
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN23@af_loader_
; Line 286
	jmp	$Exit$57
$LN23@af_loader_:
; Line 290
	mov	edx, DWORD PTR _num_subglyphs$20[ebp]
	shl	edx, 5
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 292
	mov	ecx, DWORD PTR _gloader$[ebp]
	mov	edx, DWORD PTR _num_subglyphs$20[ebp]
	mov	DWORD PTR [ecx+84], edx
; Line 293
	mov	eax, DWORD PTR _gloader$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _num_base_subgs$19[ebp], ecx
; Line 296
	mov	DWORD PTR _nn$21[ebp], 0
	jmp	SHORT $LN22@af_loader_
$LN21@af_loader_:
	mov	edx, DWORD PTR _nn$21[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$21[ebp], edx
$LN22@af_loader_:
	mov	eax, DWORD PTR _nn$21[ebp]
	cmp	eax, DWORD PTR _num_subglyphs$20[ebp]
	jae	$LN20@af_loader_
; Line 306
	mov	ecx, DWORD PTR _num_base_subgs$19[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+52]
	add	eax, ecx
	mov	ecx, DWORD PTR _nn$21[ebp]
	shl	ecx, 5
	add	eax, ecx
	mov	DWORD PTR _subglyph$17[ebp], eax
; Line 308
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR [edx+168]
	mov	DWORD PTR _pp1$16[ebp], eax
	mov	DWORD PTR _pp1$16[ebp+4], ecx
; Line 309
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	ecx, DWORD PTR [edx+176]
	mov	DWORD PTR _pp2$15[ebp], eax
	mov	DWORD PTR _pp2$15[ebp+4], ecx
; Line 311
	mov	edx, DWORD PTR _gloader$[ebp]
	movsx	eax, WORD PTR [edx+22]
	mov	DWORD PTR _num_base_points$10[ebp], eax
; Line 314
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _load_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _subglyph$17[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _scaler$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_af_loader_load_g
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 315
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@af_loader_
; Line 316
	jmp	$Exit$57
$LN19@af_loader_:
; Line 319
	mov	ecx, DWORD PTR _num_base_subgs$19[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+52]
	add	eax, ecx
	mov	ecx, DWORD PTR _nn$21[ebp]
	shl	ecx, 5
	add	eax, ecx
	mov	DWORD PTR _subglyph$17[ebp], eax
; Line 321
	mov	edx, DWORD PTR _subglyph$17[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 512				; 00000200H
	jne	SHORT $LN18@af_loader_
; Line 323
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _pp1$16[ebp]
	mov	DWORD PTR [ecx+164], edx
	mov	eax, DWORD PTR _pp1$16[ebp+4]
	mov	DWORD PTR [ecx+168], eax
; Line 324
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _pp2$15[ebp]
	mov	DWORD PTR [ecx+172], edx
	mov	eax, DWORD PTR _pp2$15[ebp+4]
	mov	DWORD PTR [ecx+176], eax
$LN18@af_loader_:
; Line 327
	mov	ecx, DWORD PTR _gloader$[ebp]
	movsx	edx, WORD PTR [ecx+22]
	mov	DWORD PTR _num_points$12[ebp], edx
; Line 328
	mov	eax, DWORD PTR _num_points$12[ebp]
	sub	eax, DWORD PTR _num_base_points$10[ebp]
	mov	DWORD PTR _num_new_points$11[ebp], eax
; Line 334
	mov	ecx, DWORD PTR _subglyph$17[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 200				; 000000c8H
	je	SHORT $LN17@af_loader_
; Line 337
	mov	eax, DWORD PTR _gloader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _num_base_points$10[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _cur$9[ebp], eax
; Line 338
	mov	ecx, DWORD PTR _num_new_points$11[ebp]
	mov	edx, DWORD PTR _cur$9[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _limit$8[ebp], eax
; Line 341
	jmp	SHORT $LN16@af_loader_
$LN15@af_loader_:
	mov	ecx, DWORD PTR _cur$9[ebp]
	add	ecx, 8
	mov	DWORD PTR _cur$9[ebp], ecx
$LN16@af_loader_:
	mov	edx, DWORD PTR _cur$9[ebp]
	cmp	edx, DWORD PTR _limit$8[ebp]
	jae	SHORT $LN17@af_loader_
; Line 342
	mov	eax, DWORD PTR _subglyph$17[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _cur$9[ebp]
	push	ecx
	call	_FT_Vector_Transform
	add	esp, 8
	jmp	SHORT $LN15@af_loader_
$LN17@af_loader_:
; Line 347
	mov	edx, DWORD PTR _subglyph$17[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 2
	jne	$LN13@af_loader_
; Line 349
	mov	ecx, DWORD PTR _subglyph$17[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _k$7[ebp], edx
; Line 350
	mov	eax, DWORD PTR _subglyph$17[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _l$6[ebp], ecx
; Line 356
	mov	edx, DWORD PTR _start_point$18[ebp]
	add	edx, DWORD PTR _k$7[ebp]
	cmp	edx, DWORD PTR _num_base_points$10[ebp]
	jae	SHORT $LN11@af_loader_
	mov	eax, DWORD PTR _l$6[ebp]
	cmp	eax, DWORD PTR _num_new_points$11[ebp]
	jb	SHORT $LN12@af_loader_
$LN11@af_loader_:
; Line 358
	push	OFFSET $SG11328
	push	358					; 00000166H
	push	21					; 00000015H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 21					; 00000015H
	mov	DWORD PTR _error$[ebp], eax
; Line 359
	jmp	$Exit$57
$LN12@af_loader_:
; Line 362
	mov	ecx, DWORD PTR _l$6[ebp]
	add	ecx, DWORD PTR _num_base_points$10[ebp]
	mov	DWORD PTR _l$6[ebp], ecx
; Line 366
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _start_point$18[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _k$7[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _p1$5[ebp], ecx
; Line 367
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _start_point$18[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _l$6[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _p2$4[ebp], ecx
; Line 369
	mov	edx, DWORD PTR _p1$5[ebp]
	mov	eax, DWORD PTR _p2$4[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$14[ebp], ecx
; Line 370
	mov	edx, DWORD PTR _p1$5[ebp]
	mov	eax, DWORD PTR _p2$4[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _y$13[ebp], ecx
; Line 372
	jmp	SHORT $LN10@af_loader_
$LN13@af_loader_:
; Line 374
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _subglyph$17[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _hints$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _x$14[ebp], eax
; Line 375
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _subglyph$17[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _hints$[ebp]
	add	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _y$13[ebp], eax
; Line 377
	mov	edx, DWORD PTR _x$14[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _x$14[ebp], edx
; Line 378
	mov	eax, DWORD PTR _y$13[ebp]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _y$13[ebp], eax
$LN10@af_loader_:
; Line 382
	mov	ecx, DWORD PTR _gloader$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _dummy$3[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _dummy$3[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _dummy$3[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _dummy$3[ebp+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR _dummy$3[ebp+16], ecx
; Line 385
	mov	edx, DWORD PTR _num_base_points$10[ebp]
	mov	eax, DWORD PTR _dummy$3[ebp+4]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _dummy$3[ebp+4], ecx
; Line 386
	mov	dx, WORD PTR _num_new_points$11[ebp]
	mov	WORD PTR _dummy$3[ebp+2], dx
; Line 388
	mov	eax, DWORD PTR _y$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$14[ebp]
	push	ecx
	lea	edx, DWORD PTR _dummy$3[ebp]
	push	edx
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
; Line 390
	jmp	$LN21@af_loader_
$LN20@af_loader_:
; Line 392
	jmp	SHORT $Hint_Metrics$58
$LN9@af_loader_:
; Line 396
	push	OFFSET $SG11337
	push	396					; 0000018cH
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	mov	DWORD PTR _error$[ebp], eax
$Hint_Metrics$58:
; Line 400
	cmp	DWORD PTR _depth$[ebp], 0
	jne	$Exit$57
; Line 406
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [eax+44]
	sub	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _vvector$1[ebp], edx
; Line 407
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [eax+48]
	sub	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _vvector$1[ebp+4], edx
; Line 408
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vvector$1[ebp]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _vvector$1[ebp], eax
; Line 409
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _vvector$1[ebp+4]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _vvector$1[ebp+4], eax
; Line 412
	mov	eax, DWORD PTR _loader$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	test	ecx, ecx
	je	SHORT $LN7@af_loader_
; Line 414
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 140				; 0000008cH
	push	edx
	mov	eax, DWORD PTR _gloader$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	_FT_Outline_Transform
	add	esp, 8
; Line 415
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 140				; 0000008cH
	push	ecx
	lea	edx, DWORD PTR _vvector$1[ebp]
	push	edx
	call	_FT_Vector_Transform
	add	esp, 8
$LN7@af_loader_:
; Line 420
	mov	eax, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [eax+164], 0
	je	SHORT $LN6@af_loader_
; Line 421
	push	0
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	neg	edx
	push	edx
	mov	eax, DWORD PTR _gloader$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
$LN6@af_loader_:
; Line 423
	lea	ecx, DWORD PTR _bbox$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _gloader$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	_FT_Outline_Get_CBox
	add	esp, 8
; Line 425
	mov	eax, DWORD PTR _bbox$2[ebp]
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _bbox$2[ebp], eax
; Line 426
	mov	ecx, DWORD PTR _bbox$2[ebp+4]
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _bbox$2[ebp+4], ecx
; Line 427
	mov	edx, DWORD PTR _bbox$2[ebp+8]
	add	edx, 63					; 0000003fH
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _bbox$2[ebp+8], edx
; Line 428
	mov	eax, DWORD PTR _bbox$2[ebp+12]
	add	eax, 63					; 0000003fH
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _bbox$2[ebp+12], eax
; Line 430
	mov	ecx, DWORD PTR _bbox$2[ebp+8]
	sub	ecx, DWORD PTR _bbox$2[ebp]
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 431
	mov	eax, DWORD PTR _bbox$2[ebp+12]
	sub	eax, DWORD PTR _bbox$2[ebp+4]
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 432
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR _bbox$2[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 433
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR _bbox$2[ebp+12]
	mov	DWORD PTR [ecx+36], edx
; Line 435
	mov	eax, DWORD PTR _bbox$2[ebp]
	add	eax, DWORD PTR _vvector$1[ebp]
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 436
	mov	edx, DWORD PTR _bbox$2[ebp+12]
	add	edx, DWORD PTR _vvector$1[ebp+4]
	and	edx, -64				; ffffffc0H
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+48], edx
; Line 451
	mov	ecx, DWORD PTR _scaler$[ebp]
	cmp	DWORD PTR [ecx+20], 1
	je	SHORT $LN5@af_loader_
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 4
	jne	SHORT $LN4@af_loader_
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_af_face_globals_is_digit
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@af_loader_
	mov	eax, DWORD PTR _metrics$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	je	SHORT $LN5@af_loader_
$LN4@af_loader_:
; Line 454
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 458
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+144], 0
; Line 459
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+148], 0
; Line 461
	jmp	SHORT $LN3@af_loader_
$LN5@af_loader_:
; Line 464
	mov	ecx, DWORD PTR _slot$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN3@af_loader_
; Line 465
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [edx+172]
	sub	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+40], ecx
$LN3@af_loader_:
; Line 470
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 472
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+40]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 473
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+52]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 476
	mov	edx, DWORD PTR _internal$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_GlyphLoader_Rewind
	add	esp, 4
; Line 477
	mov	ecx, DWORD PTR _gloader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _internal$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_GlyphLoader_CopyPoints
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 478
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@af_loader_
; Line 479
	jmp	SHORT $Exit$57
$LN1@af_loader_:
; Line 482
	mov	ecx, DWORD PTR _internal$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _slot$[ebp]
	mov	cx, WORD PTR [edx+20]
	mov	WORD PTR [eax+108], cx
; Line 483
	mov	edx, DWORD PTR _internal$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	dx, WORD PTR [eax+22]
	mov	WORD PTR [ecx+110], dx
; Line 484
	mov	eax, DWORD PTR _internal$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+112], eax
; Line 485
	mov	ecx, DWORD PTR _internal$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+116], ecx
; Line 486
	mov	edx, DWORD PTR _internal$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR [ecx+120], edx
; Line 488
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+72], 1869968492		; 6f75746cH
$Exit$57:
; Line 492
	mov	eax, DWORD PTR _error$[ebp]
; Line 493
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN56@af_loader_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN56@af_loader_:
	DD	6
	DD	$LN55@af_loader_
$LN55@af_loader_:
	DD	-56					; ffffffc8H
	DD	16					; 00000010H
	DD	$LN49@af_loader_
	DD	-148					; ffffff6cH
	DD	8
	DD	$LN50@af_loader_
	DD	-164					; ffffff5cH
	DD	8
	DD	$LN51@af_loader_
	DD	-236					; ffffff14H
	DD	20					; 00000014H
	DD	$LN52@af_loader_
	DD	-260					; fffffefcH
	DD	16					; 00000010H
	DD	$LN53@af_loader_
	DD	-276					; fffffeecH
	DD	8
	DD	$LN54@af_loader_
$LN54@af_loader_:
	DB	118					; 00000076H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN53@af_loader_:
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
$LN52@af_loader_:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN51@af_loader_:
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	50					; 00000032H
	DB	0
$LN50@af_loader_:
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	49					; 00000031H
	DB	0
$LN49@af_loader_:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
_af_loader_load_g ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hints$ = 8						; size = 4
_outline$ = 12						; size = 4
_metrics$ = 16						; size = 4
_af_indic_hints_apply PROC
; File d:\mozilla\modules\freetype2\src\autofit\afindic.c
; Line 85
	push	ebp
	mov	ebp, esp
; Line 87
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outline$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_cjk_hints_apply
	add	esp, 12					; 0000000cH
; Line 88
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_af_indic_hints_apply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hints$ = 8						; size = 4
_metrics$ = 12						; size = 4
_af_indic_hints_init PROC
; File d:\mozilla\modules\freetype2\src\autofit\afindic.c
; Line 75
	push	ebp
	mov	ebp, esp
; Line 77
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_cjk_hints_init
	add	esp, 8
; Line 78
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_af_indic_hints_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_metrics$ = 8						; size = 4
_scaler$ = 12						; size = 4
_af_indic_metrics_scale PROC
; File d:\mozilla\modules\freetype2\src\autofit\afindic.c
; Line 66
	push	ebp
	mov	ebp, esp
; Line 68
	mov	eax, DWORD PTR _scaler$[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	call	_af_cjk_metrics_scale
	add	esp, 8
; Line 69
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_af_indic_metrics_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_oldmap$ = -4						; size = 4
_metrics$ = 8						; size = 4
_face$ = 12						; size = 4
_af_indic_metrics_init PROC
; File d:\mozilla\modules\freetype2\src\autofit\afindic.c
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 40
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _oldmap$[ebp], ecx
; Line 43
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+68]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 45
	push	1970170211				; 756e6963H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Select_Charmap
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@af_indic_m
; Line 46
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 47
	jmp	SHORT $LN1@af_indic_m
$LN2@af_indic_m:
; Line 49
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	call	_af_cjk_metrics_init_widths
	add	esp, 8
; Line 54
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	call	_af_cjk_metrics_check_digits
	add	esp, 8
$LN1@af_indic_m:
; Line 57
	mov	edx, DWORD PTR _oldmap$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_FT_Set_Charmap
	add	esp, 8
; Line 59
	xor	eax, eax
; Line 60
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_indic_metrics_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -37						; size = 1
_point$1 = -36						; size = 4
_delta$2 = -32						; size = 4
_point$3 = -28						; size = 4
_seg$4 = -24						; size = 4
_snapping$ = -17					; size = 1
_edge$ = -16						; size = 4
_edge_limit$ = -12					; size = 4
_edges$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_cjk_align_edge_points PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 2089
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2090
	imul	eax, DWORD PTR _dim$[ebp], 28
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 2091
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _edges$[ebp], ecx
; Line 2092
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx+12], 48
	add	eax, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge_limit$[ebp], eax
; Line 2100
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN24@af_cjk_ali
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	and	edx, 1
	jne	SHORT $LN26@af_cjk_ali
$LN24@af_cjk_ali:
	cmp	DWORD PTR _dim$[ebp], 1
	jne	SHORT $LN25@af_cjk_ali
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	and	ecx, 2
	jne	SHORT $LN26@af_cjk_ali
$LN25@af_cjk_ali:
	mov	BYTE PTR tv79[ebp], 0
	jmp	SHORT $LN27@af_cjk_ali
$LN26@af_cjk_ali:
	mov	BYTE PTR tv79[ebp], 1
$LN27@af_cjk_ali:
	mov	dl, BYTE PTR tv79[ebp]
	mov	BYTE PTR _snapping$[ebp], dl
; Line 2102
	mov	eax, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge$[ebp], eax
	jmp	SHORT $LN21@af_cjk_ali
$LN20@af_cjk_ali:
	mov	ecx, DWORD PTR _edge$[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _edge$[ebp], ecx
$LN21@af_cjk_ali:
	mov	edx, DWORD PTR _edge$[ebp]
	cmp	edx, DWORD PTR _edge_limit$[ebp]
	jae	$LN22@af_cjk_ali
; Line 2106
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _seg$4[ebp], ecx
; Line 2109
	movzx	edx, BYTE PTR _snapping$[ebp]
	test	edx, edx
	je	SHORT $LN18@af_cjk_ali
$LN17@af_cjk_ali:
; Line 2113
	mov	eax, DWORD PTR _seg$4[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _point$3[ebp], ecx
$LN14@af_cjk_ali:
; Line 2118
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN12@af_cjk_ali
; Line 2120
	mov	edx, DWORD PTR _point$3[ebp]
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+16], ecx
; Line 2121
	mov	edx, DWORD PTR _point$3[ebp]
	movzx	eax, WORD PTR [edx]
	or	eax, 4
	mov	ecx, DWORD PTR _point$3[ebp]
	mov	WORD PTR [ecx], ax
; Line 2123
	jmp	SHORT $LN11@af_cjk_ali
$LN12@af_cjk_ali:
; Line 2125
	mov	edx, DWORD PTR _point$3[ebp]
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+20], ecx
; Line 2126
	mov	edx, DWORD PTR _point$3[ebp]
	movzx	eax, WORD PTR [edx]
	or	eax, 8
	mov	ecx, DWORD PTR _point$3[ebp]
	mov	WORD PTR [ecx], ax
$LN11@af_cjk_ali:
; Line 2129
	mov	edx, DWORD PTR _seg$4[ebp]
	mov	eax, DWORD PTR _point$3[ebp]
	cmp	eax, DWORD PTR [edx+44]
	jne	SHORT $LN10@af_cjk_ali
; Line 2130
	jmp	SHORT $LN13@af_cjk_ali
$LN10@af_cjk_ali:
; Line 2132
	mov	ecx, DWORD PTR _point$3[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _point$3[ebp], edx
; Line 2133
	jmp	SHORT $LN14@af_cjk_ali
$LN13@af_cjk_ali:
; Line 2135
	mov	eax, DWORD PTR _seg$4[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _seg$4[ebp], ecx
; Line 2137
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR _seg$4[ebp]
	cmp	eax, DWORD PTR [edx+40]
	jne	SHORT $LN17@af_cjk_ali
; Line 2139
	jmp	$LN9@af_cjk_ali
$LN18@af_cjk_ali:
; Line 2141
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _delta$2[ebp], eax
$LN8@af_cjk_ali:
; Line 2146
	mov	ecx, DWORD PTR _seg$4[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _point$1[ebp], edx
$LN5@af_cjk_ali:
; Line 2151
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN3@af_cjk_ali
; Line 2153
	mov	eax, DWORD PTR _point$1[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _delta$2[ebp]
	mov	edx, DWORD PTR _point$1[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 2154
	mov	eax, DWORD PTR _point$1[ebp]
	movzx	ecx, WORD PTR [eax]
	or	ecx, 4
	mov	edx, DWORD PTR _point$1[ebp]
	mov	WORD PTR [edx], cx
; Line 2156
	jmp	SHORT $LN2@af_cjk_ali
$LN3@af_cjk_ali:
; Line 2158
	mov	eax, DWORD PTR _point$1[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _delta$2[ebp]
	mov	edx, DWORD PTR _point$1[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 2159
	mov	eax, DWORD PTR _point$1[ebp]
	movzx	ecx, WORD PTR [eax]
	or	ecx, 8
	mov	edx, DWORD PTR _point$1[ebp]
	mov	WORD PTR [edx], cx
$LN2@af_cjk_ali:
; Line 2162
	mov	eax, DWORD PTR _seg$4[ebp]
	mov	ecx, DWORD PTR _point$1[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jne	SHORT $LN1@af_cjk_ali
; Line 2163
	jmp	SHORT $LN4@af_cjk_ali
$LN1@af_cjk_ali:
; Line 2165
	mov	edx, DWORD PTR _point$1[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _point$1[ebp], eax
; Line 2166
	jmp	SHORT $LN5@af_cjk_ali
$LN4@af_cjk_ali:
; Line 2168
	mov	ecx, DWORD PTR _seg$4[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _seg$4[ebp], edx
; Line 2170
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR _seg$4[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jne	SHORT $LN8@af_cjk_ali
$LN9@af_cjk_ali:
; Line 2172
	jmp	$LN20@af_cjk_ali
$LN22@af_cjk_ali:
; Line 2173
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_align_edge_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv81 = -96						; size = 4
_after$1 = -92						; size = 4
_before$2 = -88						; size = 4
_span$3 = -84						; size = 4
_dist2$4 = -80						; size = 4
_dist1$5 = -76						; size = 4
_edge3$6 = -72						; size = 4
_edge2$7 = -68						; size = 4
_edge1$8 = -64						; size = 4
_edge2$9 = -60						; size = 4
_edge2$10 = -56						; size = 4
_edge1$11 = -52						; size = 4
_blue$12 = -48						; size = 4
_num_actions$ = -44					; size = 4
_last_stem_pos$ = -40					; size = 4
_has_last_stem$ = -33					; size = 1
_skipped$ = -32						; size = 4
_delta$ = -28						; size = 4
_anchor$ = -24						; size = 4
_edge$ = -20						; size = 4
_n_edges$ = -16						; size = 4
_edge_limit$ = -12					; size = 4
_edges$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_cjk_hint_edges PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 1710
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1711
	imul	eax, DWORD PTR _dim$[ebp], 28
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 1712
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _edges$[ebp], ecx
; Line 1713
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx+12], 48
	add	eax, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge_limit$[ebp], eax
; Line 1716
	mov	DWORD PTR _anchor$[ebp], 0
; Line 1717
	mov	DWORD PTR _delta$[ebp], 0
; Line 1718
	mov	DWORD PTR _skipped$[ebp], 0
; Line 1719
	mov	BYTE PTR _has_last_stem$[ebp], 0
; Line 1720
	mov	DWORD PTR _last_stem_pos$[ebp], 0
; Line 1723
	mov	DWORD PTR _num_actions$[ebp], 0
$LN77@af_cjk_hin:
; Line 1729
	mov	ecx, 4
	imul	edx, ecx, 89
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN74@af_cjk_hin
	cmp	DWORD PTR _dim$[ebp], 1
	jne	SHORT $LN80@af_cjk_hin
	mov	DWORD PTR tv81[ebp], OFFSET $SG10983
	jmp	SHORT $LN81@af_cjk_hin
$LN80@af_cjk_hin:
	mov	DWORD PTR tv81[ebp], OFFSET $SG10984
$LN81@af_cjk_hin:
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _af_style_names[eax*4]
	push	ecx
	mov	edx, DWORD PTR tv81[ebp]
	push	edx
	push	OFFSET $SG10985
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN74@af_cjk_hin:
	xor	eax, eax
	jne	SHORT $LN77@af_cjk_hin
; Line 1733
	mov	ecx, 1
	test	ecx, ecx
	je	$LN70@af_cjk_hin
; Line 1735
	mov	edx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge$[ebp], edx
	jmp	SHORT $LN72@af_cjk_hin
$LN71@af_cjk_hin:
	mov	eax, DWORD PTR _edge$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _edge$[ebp], eax
$LN72@af_cjk_hin:
	mov	ecx, DWORD PTR _edge$[ebp]
	cmp	ecx, DWORD PTR _edge_limit$[ebp]
	jae	$LN70@af_cjk_hin
; Line 1741
	mov	edx, DWORD PTR _edge$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	and	eax, 4
	je	SHORT $LN69@af_cjk_hin
; Line 1742
	jmp	SHORT $LN71@af_cjk_hin
$LN69@af_cjk_hin:
; Line 1744
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _blue$12[ebp], edx
; Line 1745
	mov	DWORD PTR _edge1$11[ebp], 0
; Line 1746
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _edge2$10[ebp], ecx
; Line 1748
	cmp	DWORD PTR _blue$12[ebp], 0
	je	SHORT $LN68@af_cjk_hin
; Line 1750
	mov	edx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _edge1$11[ebp], edx
	jmp	SHORT $LN66@af_cjk_hin
$LN68@af_cjk_hin:
; Line 1752
	cmp	DWORD PTR _edge2$10[ebp], 0
	je	SHORT $LN66@af_cjk_hin
	mov	eax, DWORD PTR _edge2$10[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN66@af_cjk_hin
; Line 1754
	mov	ecx, DWORD PTR _edge2$10[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _blue$12[ebp], edx
; Line 1755
	mov	eax, DWORD PTR _edge2$10[ebp]
	mov	DWORD PTR _edge1$11[ebp], eax
; Line 1756
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _edge2$10[ebp], ecx
$LN66@af_cjk_hin:
; Line 1759
	cmp	DWORD PTR _edge1$11[ebp], 0
	jne	SHORT $LN65@af_cjk_hin
; Line 1760
	jmp	SHORT $LN71@af_cjk_hin
$LN65@af_cjk_hin:
; Line 1766
	mov	edx, 4
	imul	eax, edx, 89
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN61@af_cjk_hin
	mov	ecx, DWORD PTR _edge1$11[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _blue$12[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge1$11[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge1$11[ebp]
	movsx	edx, WORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _edge1$11[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG11003
	call	_FT_Message
	add	esp, 36					; 00000024H
$LN61@af_cjk_hin:
	xor	edx, edx
	jne	SHORT $LN65@af_cjk_hin
; Line 1768
	mov	eax, DWORD PTR _num_actions$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_actions$[ebp], eax
; Line 1771
	mov	ecx, DWORD PTR _edge1$11[ebp]
	mov	edx, DWORD PTR _blue$12[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
; Line 1772
	mov	ecx, DWORD PTR _edge1$11[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge1$11[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 1774
	cmp	DWORD PTR _edge2$10[ebp], 0
	je	SHORT $LN60@af_cjk_hin
	mov	ecx, DWORD PTR _edge2$10[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN60@af_cjk_hin
; Line 1776
	mov	edx, DWORD PTR _edge2$10[ebp]
	push	edx
	mov	eax, DWORD PTR _edge1$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_cjk_align_linked_edge
	add	esp, 16					; 00000010H
; Line 1777
	mov	eax, DWORD PTR _edge2$10[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	or	ecx, 4
	mov	edx, DWORD PTR _edge2$10[ebp]
	mov	BYTE PTR [edx+12], cl
; Line 1780
	mov	eax, DWORD PTR _num_actions$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_actions$[ebp], eax
$LN60@af_cjk_hin:
; Line 1784
	cmp	DWORD PTR _anchor$[ebp], 0
	jne	SHORT $LN59@af_cjk_hin
; Line 1785
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _anchor$[ebp], ecx
$LN59@af_cjk_hin:
; Line 1786
	jmp	$LN71@af_cjk_hin
$LN70@af_cjk_hin:
; Line 1790
	mov	edx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge$[ebp], edx
	jmp	SHORT $LN58@af_cjk_hin
$LN57@af_cjk_hin:
	mov	eax, DWORD PTR _edge$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _edge$[ebp], eax
$LN58@af_cjk_hin:
	mov	ecx, DWORD PTR _edge$[ebp]
	cmp	ecx, DWORD PTR _edge_limit$[ebp]
	jae	$LN56@af_cjk_hin
; Line 1795
	mov	edx, DWORD PTR _edge$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	and	eax, 4
	je	SHORT $LN55@af_cjk_hin
; Line 1796
	jmp	SHORT $LN57@af_cjk_hin
$LN55@af_cjk_hin:
; Line 1799
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _edge2$9[ebp], edx
; Line 1800
	cmp	DWORD PTR _edge2$9[ebp], 0
	jne	SHORT $LN54@af_cjk_hin
; Line 1802
	mov	eax, DWORD PTR _skipped$[ebp]
	add	eax, 1
	mov	DWORD PTR _skipped$[ebp], eax
; Line 1803
	jmp	SHORT $LN57@af_cjk_hin
$LN54@af_cjk_hin:
; Line 1816
	movzx	ecx, BYTE PTR _has_last_stem$[ebp]
	test	ecx, ecx
	je	SHORT $LN53@af_cjk_hin
	mov	edx, DWORD PTR _last_stem_pos$[ebp]
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR _edge$[ebp]
	cmp	DWORD PTR [eax+8], edx
	jl	SHORT $LN52@af_cjk_hin
	mov	ecx, DWORD PTR _last_stem_pos$[ebp]
	add	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _edge2$9[ebp]
	cmp	DWORD PTR [edx+8], ecx
	jge	SHORT $LN53@af_cjk_hin
$LN52@af_cjk_hin:
; Line 1818
	mov	eax, DWORD PTR _skipped$[ebp]
	add	eax, 1
	mov	DWORD PTR _skipped$[ebp], eax
; Line 1819
	jmp	SHORT $LN57@af_cjk_hin
$LN53@af_cjk_hin:
; Line 1825
	mov	ecx, DWORD PTR _edge2$9[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN51@af_cjk_hin
$LN50@af_cjk_hin:
; Line 1827
	mov	edx, 4
	imul	eax, edx, 89
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN47@af_cjk_hin
	mov	eax, DWORD PTR _edge2$9[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG11019
	call	_FT_Message
	add	esp, 8
$LN47@af_cjk_hin:
	xor	edx, edx
	jne	SHORT $LN50@af_cjk_hin
; Line 1829
	mov	eax, DWORD PTR _edge$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge2$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_cjk_align_linked_edge
	add	esp, 16					; 00000010H
; Line 1830
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge$[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 1833
	mov	ecx, DWORD PTR _num_actions$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_actions$[ebp], ecx
; Line 1836
	jmp	$LN57@af_cjk_hin
$LN51@af_cjk_hin:
; Line 1839
	mov	edx, DWORD PTR _edge2$9[ebp]
	cmp	edx, DWORD PTR _edge$[ebp]
	jae	SHORT $LN46@af_cjk_hin
; Line 1841
	mov	eax, DWORD PTR _edge$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge2$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_cjk_align_linked_edge
	add	esp, 16					; 00000010H
; Line 1842
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge$[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 1845
	mov	ecx, DWORD PTR _num_actions$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_actions$[ebp], ecx
; Line 1852
	mov	BYTE PTR _has_last_stem$[ebp], 1
; Line 1853
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _last_stem_pos$[ebp], eax
; Line 1854
	jmp	$LN57@af_cjk_hin
$LN46@af_cjk_hin:
; Line 1857
	cmp	DWORD PTR _dim$[ebp], 1
	je	SHORT $LN45@af_cjk_hin
	cmp	DWORD PTR _anchor$[ebp], 0
	jne	SHORT $LN45@af_cjk_hin
; Line 1931
	push	0
	push	0
	mov	ecx, DWORD PTR _edge2$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _edge$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_hint_normal_stem
	add	esp, 20					; 00000014H
	mov	DWORD PTR _delta$[ebp], eax
; Line 1933
	jmp	SHORT $LN44@af_cjk_hin
$LN45@af_cjk_hin:
; Line 1934
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _delta$[ebp]
	push	edx
	mov	eax, DWORD PTR _edge2$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_hint_normal_stem
	add	esp, 20					; 00000014H
$LN44@af_cjk_hin:
; Line 1943
	mov	eax, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _anchor$[ebp], eax
; Line 1944
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge$[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 1945
	mov	ecx, DWORD PTR _edge2$9[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge2$9[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 1946
	mov	BYTE PTR _has_last_stem$[ebp], 1
; Line 1947
	mov	ecx, DWORD PTR _edge2$9[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _last_stem_pos$[ebp], edx
; Line 1948
	jmp	$LN57@af_cjk_hin
$LN56@af_cjk_hin:
; Line 1965
	mov	eax, DWORD PTR _edge_limit$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	mov	DWORD PTR _n_edges$[ebp], eax
; Line 1966
	cmp	DWORD PTR _dim$[ebp], 0
	jne	$LN35@af_cjk_hin
	cmp	DWORD PTR _n_edges$[ebp], 6
	je	SHORT $LN42@af_cjk_hin
	cmp	DWORD PTR _n_edges$[ebp], 12		; 0000000cH
	jne	$LN35@af_cjk_hin
$LN42@af_cjk_hin:
; Line 1972
	cmp	DWORD PTR _n_edges$[ebp], 6
	jne	SHORT $LN41@af_cjk_hin
; Line 1974
	mov	edx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge1$8[ebp], edx
; Line 1975
	mov	eax, DWORD PTR _edges$[ebp]
	add	eax, 96					; 00000060H
	mov	DWORD PTR _edge2$7[ebp], eax
; Line 1976
	mov	ecx, DWORD PTR _edges$[ebp]
	add	ecx, 192				; 000000c0H
	mov	DWORD PTR _edge3$6[ebp], ecx
; Line 1978
	jmp	SHORT $LN40@af_cjk_hin
$LN41@af_cjk_hin:
; Line 1980
	mov	edx, DWORD PTR _edges$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _edge1$8[ebp], edx
; Line 1981
	mov	eax, DWORD PTR _edges$[ebp]
	add	eax, 240				; 000000f0H
	mov	DWORD PTR _edge2$7[ebp], eax
; Line 1982
	mov	ecx, DWORD PTR _edges$[ebp]
	add	ecx, 432				; 000001b0H
	mov	DWORD PTR _edge3$6[ebp], ecx
$LN40@af_cjk_hin:
; Line 1985
	mov	edx, DWORD PTR _edge2$7[ebp]
	mov	eax, DWORD PTR _edge1$8[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dist1$5[ebp], ecx
; Line 1986
	mov	edx, DWORD PTR _edge3$6[ebp]
	mov	eax, DWORD PTR _edge2$7[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dist2$4[ebp], ecx
; Line 1988
	mov	edx, DWORD PTR _dist1$5[ebp]
	sub	edx, DWORD PTR _dist2$4[ebp]
	mov	DWORD PTR _span$3[ebp], edx
; Line 1989
	jns	SHORT $LN39@af_cjk_hin
; Line 1990
	mov	eax, DWORD PTR _span$3[ebp]
	neg	eax
	mov	DWORD PTR _span$3[ebp], eax
$LN39@af_cjk_hin:
; Line 1994
	mov	ecx, DWORD PTR _edge1$8[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _edge1$8[ebp]
	cmp	DWORD PTR [edx+24], ecx
	jne	$LN35@af_cjk_hin
	mov	eax, DWORD PTR _edge2$7[ebp]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _edge2$7[ebp]
	cmp	DWORD PTR [ecx+24], eax
	jne	$LN35@af_cjk_hin
	mov	edx, DWORD PTR _edge3$6[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _edge3$6[ebp]
	cmp	DWORD PTR [eax+24], edx
	jne	$LN35@af_cjk_hin
	cmp	DWORD PTR _span$3[ebp], 8
	jge	$LN35@af_cjk_hin
; Line 1996
	mov	ecx, DWORD PTR _edge2$7[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	eax, DWORD PTR _edge1$8[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _edge3$6[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, edx
	mov	DWORD PTR _delta$[ebp], eax
; Line 1997
	mov	ecx, DWORD PTR _edge3$6[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _edge3$6[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 1998
	mov	ecx, DWORD PTR _edge3$6[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN37@af_cjk_hin
; Line 1999
	mov	edx, DWORD PTR _edge3$6[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _edge3$6[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+8], ecx
$LN37@af_cjk_hin:
; Line 2002
	cmp	DWORD PTR _n_edges$[ebp], 12		; 0000000cH
	jne	SHORT $LN36@af_cjk_hin
; Line 2004
	mov	ecx, DWORD PTR _edges$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	sub	edx, DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _edges$[ebp]
	mov	DWORD PTR [eax+392], edx
; Line 2005
	mov	ecx, DWORD PTR _edges$[ebp]
	mov	edx, DWORD PTR [ecx+536]
	sub	edx, DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _edges$[ebp]
	mov	DWORD PTR [eax+536], edx
$LN36@af_cjk_hin:
; Line 2008
	mov	ecx, DWORD PTR _edge3$6[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge3$6[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 2009
	mov	ecx, DWORD PTR _edge3$6[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN35@af_cjk_hin
; Line 2010
	mov	edx, DWORD PTR _edge3$6[ebp]
	mov	eax, DWORD PTR [edx+24]
	movzx	ecx, BYTE PTR [eax+12]
	or	ecx, 4
	mov	edx, DWORD PTR _edge3$6[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	BYTE PTR [eax+12], cl
$LN35@af_cjk_hin:
; Line 2014
	cmp	DWORD PTR _skipped$[ebp], 0
	jne	SHORT $LN34@af_cjk_hin
; Line 2015
	jmp	$Exit$82
$LN34@af_cjk_hin:
; Line 2021
	mov	ecx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge$[ebp], ecx
	jmp	SHORT $LN33@af_cjk_hin
$LN32@af_cjk_hin:
	mov	edx, DWORD PTR _edge$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _edge$[ebp], edx
$LN33@af_cjk_hin:
	mov	eax, DWORD PTR _edge$[ebp]
	cmp	eax, DWORD PTR _edge_limit$[ebp]
	jae	SHORT $LN31@af_cjk_hin
; Line 2023
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	and	edx, 4
	je	SHORT $LN30@af_cjk_hin
; Line 2024
	jmp	SHORT $LN32@af_cjk_hin
$LN30@af_cjk_hin:
; Line 2026
	mov	eax, DWORD PTR _edge$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN29@af_cjk_hin
; Line 2028
	mov	ecx, DWORD PTR _edge$[ebp]
	push	ecx
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_cjk_align_serif_edge
	add	esp, 12					; 0000000cH
; Line 2029
	mov	edx, DWORD PTR _edge$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	or	eax, 4
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	BYTE PTR [ecx+12], al
; Line 2030
	mov	edx, DWORD PTR _skipped$[ebp]
	sub	edx, 1
	mov	DWORD PTR _skipped$[ebp], edx
$LN29@af_cjk_hin:
; Line 2032
	jmp	SHORT $LN32@af_cjk_hin
$LN31@af_cjk_hin:
; Line 2034
	cmp	DWORD PTR _skipped$[ebp], 0
	jne	SHORT $LN28@af_cjk_hin
; Line 2035
	jmp	$Exit$82
$LN28@af_cjk_hin:
; Line 2037
	mov	eax, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge$[ebp], eax
	jmp	SHORT $LN27@af_cjk_hin
$LN26@af_cjk_hin:
	mov	ecx, DWORD PTR _edge$[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _edge$[ebp], ecx
$LN27@af_cjk_hin:
	mov	edx, DWORD PTR _edge$[ebp]
	cmp	edx, DWORD PTR _edge_limit$[ebp]
	jae	$Exit$82
; Line 2042
	mov	eax, DWORD PTR _edge$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	and	ecx, 4
	je	SHORT $LN24@af_cjk_hin
; Line 2043
	jmp	SHORT $LN26@af_cjk_hin
$LN24@af_cjk_hin:
; Line 2045
	mov	edx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _after$1[ebp], edx
	mov	eax, DWORD PTR _after$1[ebp]
	mov	DWORD PTR _before$2[ebp], eax
$LN23@af_cjk_hin:
; Line 2047
	mov	ecx, DWORD PTR _before$2[ebp]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR _before$2[ebp], ecx
	mov	edx, DWORD PTR _before$2[ebp]
	cmp	edx, DWORD PTR _edges$[ebp]
	jb	SHORT $LN22@af_cjk_hin
; Line 2048
	mov	eax, DWORD PTR _before$2[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	and	ecx, 4
	je	SHORT $LN21@af_cjk_hin
; Line 2049
	jmp	SHORT $LN22@af_cjk_hin
$LN21@af_cjk_hin:
; Line 2051
	jmp	SHORT $LN23@af_cjk_hin
$LN22@af_cjk_hin:
	mov	edx, DWORD PTR _after$1[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _after$1[ebp], edx
	mov	eax, DWORD PTR _after$1[ebp]
	cmp	eax, DWORD PTR _edge_limit$[ebp]
	jae	SHORT $LN19@af_cjk_hin
; Line 2052
	mov	ecx, DWORD PTR _after$1[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	and	edx, 4
	je	SHORT $LN18@af_cjk_hin
; Line 2053
	jmp	SHORT $LN19@af_cjk_hin
$LN18@af_cjk_hin:
; Line 2055
	jmp	SHORT $LN22@af_cjk_hin
$LN19@af_cjk_hin:
	mov	eax, DWORD PTR _before$2[ebp]
	cmp	eax, DWORD PTR _edges$[ebp]
	jae	SHORT $LN16@af_cjk_hin
	mov	ecx, DWORD PTR _after$1[ebp]
	cmp	ecx, DWORD PTR _edge_limit$[ebp]
	jae	$LN10@af_cjk_hin
$LN16@af_cjk_hin:
; Line 2057
	mov	edx, DWORD PTR _before$2[ebp]
	cmp	edx, DWORD PTR _edges$[ebp]
	jae	SHORT $LN15@af_cjk_hin
; Line 2058
	mov	eax, DWORD PTR _edge$[ebp]
	push	eax
	mov	ecx, DWORD PTR _after$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_cjk_align_serif_edge
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN10@af_cjk_hin
$LN15@af_cjk_hin:
; Line 2059
	mov	eax, DWORD PTR _after$1[ebp]
	cmp	eax, DWORD PTR _edge_limit$[ebp]
	jb	SHORT $LN13@af_cjk_hin
; Line 2060
	mov	ecx, DWORD PTR _edge$[ebp]
	push	ecx
	mov	edx, DWORD PTR _before$2[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_cjk_align_serif_edge
	add	esp, 12					; 0000000cH
; Line 2061
	jmp	SHORT $LN10@af_cjk_hin
$LN13@af_cjk_hin:
; Line 2063
	mov	ecx, DWORD PTR _after$1[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _before$2[ebp]
	movsx	ecx, WORD PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN11@af_cjk_hin
; Line 2064
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR _before$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
; Line 2065
	jmp	SHORT $LN10@af_cjk_hin
$LN11@af_cjk_hin:
; Line 2069
	mov	edx, DWORD PTR _after$1[ebp]
	movsx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _before$2[ebp]
	movsx	edx, WORD PTR [ecx]
	sub	eax, edx
	push	eax
	mov	eax, DWORD PTR _after$1[ebp]
	mov	ecx, DWORD PTR _before$2[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _edge$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _before$2[ebp]
	movsx	eax, WORD PTR [edx]
	sub	ecx, eax
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _before$2[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN10@af_cjk_hin:
; Line 2072
	jmp	$LN26@af_cjk_hin
$Exit$82:
; Line 2077
	cmp	DWORD PTR _num_actions$[ebp], 0
	jne	SHORT $LN6@af_cjk_hin
$LN8@af_cjk_hin:
; Line 2078
	mov	eax, 4
	imul	ecx, eax, 89
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN5@af_cjk_hin
	push	OFFSET $SG11073
	call	_FT_Message
	add	esp, 4
$LN5@af_cjk_hin:
	xor	edx, edx
	jne	SHORT $LN8@af_cjk_hin
$LN6@af_cjk_hin:
; Line 2079
	mov	eax, 4
	imul	ecx, eax, 89
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN1@af_cjk_hin
	push	OFFSET $SG11078
	call	_FT_Message
	add	esp, 4
$LN1@af_cjk_hin:
	xor	edx, edx
	jne	SHORT $LN6@af_cjk_hin
; Line 2083
	pop	edi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_hint_edges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv165 = -56						; size = 4
tv162 = -52						; size = 4
_threshold$ = -48					; size = 4
_offset$ = -44						; size = 4
_delta$ = -40						; size = 4
_u_off2$ = -36						; size = 4
_d_off2$ = -32						; size = 4
_u_off1$ = -28						; size = 4
_d_off1$ = -24						; size = 4
_cur_pos2$ = -20					; size = 4
_cur_pos1$ = -16					; size = 4
_org_center$ = -12					; size = 4
_cur_len$ = -8						; size = 4
_org_len$ = -4						; size = 4
_hints$ = 8						; size = 4
_edge$ = 12						; size = 4
_edge2$ = 16						; size = 4
_anchor$ = 20						; size = 4
_dim$ = 24						; size = 4
_af_hint_normal_stem PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 1585
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1590
	mov	DWORD PTR _threshold$[ebp], 64		; 00000040H
; Line 1593
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	and	ecx, 4
	jne	SHORT $LN30@af_hint_no
; Line 1596
	mov	edx, DWORD PTR _edge$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	and	eax, 1
	je	SHORT $LN29@af_hint_no
	mov	ecx, DWORD PTR _edge2$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	and	edx, 1
	je	SHORT $LN29@af_hint_no
; Line 1598
	cmp	DWORD PTR _dim$[ebp], 1
	jne	SHORT $LN28@af_hint_no
; Line 1599
	mov	DWORD PTR _threshold$[ebp], 55		; 00000037H
; Line 1600
	jmp	SHORT $LN27@af_hint_no
$LN28@af_hint_no:
; Line 1601
	mov	DWORD PTR _threshold$[ebp], 49		; 00000031H
$LN27@af_hint_no:
; Line 1603
	jmp	SHORT $LN30@af_hint_no
$LN29@af_hint_no:
; Line 1605
	cmp	DWORD PTR _dim$[ebp], 1
	jne	SHORT $LN25@af_hint_no
; Line 1606
	mov	DWORD PTR _threshold$[ebp], 61		; 0000003dH
; Line 1607
	jmp	SHORT $LN30@af_hint_no
$LN25@af_hint_no:
; Line 1608
	mov	DWORD PTR _threshold$[ebp], 59		; 0000003bH
$LN30@af_hint_no:
; Line 1612
	mov	eax, DWORD PTR _edge2$[ebp]
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _org_len$[ebp], edx
; Line 1615
	mov	eax, DWORD PTR _edge2$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _edge$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _org_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_cjk_compute_stem_width
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cur_len$[ebp], eax
; Line 1617
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _edge2$[ebp]
	add	eax, DWORD PTR [edx+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _anchor$[ebp]
	mov	DWORD PTR _org_center$[ebp], eax
; Line 1618
	mov	eax, DWORD PTR _cur_len$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _org_center$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _cur_pos1$[ebp], ecx
; Line 1619
	mov	edx, DWORD PTR _cur_pos1$[ebp]
	add	edx, DWORD PTR _cur_len$[ebp]
	mov	DWORD PTR _cur_pos2$[ebp], edx
; Line 1620
	mov	eax, DWORD PTR _cur_pos1$[ebp]
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _cur_pos1$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _d_off1$[ebp], ecx
; Line 1621
	mov	edx, DWORD PTR _cur_pos2$[ebp]
	and	edx, -64				; ffffffc0H
	mov	eax, DWORD PTR _cur_pos2$[ebp]
	sub	eax, edx
	mov	DWORD PTR _d_off2$[ebp], eax
; Line 1622
	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR _d_off1$[ebp]
	mov	DWORD PTR _u_off1$[ebp], ecx
; Line 1623
	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR _d_off2$[ebp]
	mov	DWORD PTR _u_off2$[ebp], edx
; Line 1624
	mov	DWORD PTR _delta$[ebp], 0
; Line 1627
	cmp	DWORD PTR _d_off1$[ebp], 0
	je	SHORT $LN22@af_hint_no
	cmp	DWORD PTR _d_off2$[ebp], 0
	jne	SHORT $LN23@af_hint_no
$LN22@af_hint_no:
; Line 1628
	jmp	$Exit$37
$LN23@af_hint_no:
; Line 1630
	mov	eax, DWORD PTR _cur_len$[ebp]
	cmp	eax, DWORD PTR _threshold$[ebp]
	jg	SHORT $LN21@af_hint_no
; Line 1632
	mov	ecx, DWORD PTR _d_off2$[ebp]
	cmp	ecx, DWORD PTR _cur_len$[ebp]
	jge	SHORT $LN20@af_hint_no
; Line 1634
	mov	edx, DWORD PTR _u_off1$[ebp]
	cmp	edx, DWORD PTR _d_off2$[ebp]
	jg	SHORT $LN19@af_hint_no
; Line 1635
	mov	eax, DWORD PTR _u_off1$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
; Line 1636
	jmp	SHORT $LN20@af_hint_no
$LN19@af_hint_no:
; Line 1637
	mov	ecx, DWORD PTR _d_off2$[ebp]
	neg	ecx
	mov	DWORD PTR _delta$[ebp], ecx
$LN20@af_hint_no:
; Line 1640
	jmp	$Exit$37
$LN21@af_hint_no:
; Line 1643
	cmp	DWORD PTR _threshold$[ebp], 64		; 00000040H
	jge	SHORT $LN17@af_hint_no
; Line 1646
	mov	edx, DWORD PTR _d_off1$[ebp]
	cmp	edx, DWORD PTR _threshold$[ebp]
	jge	SHORT $LN15@af_hint_no
	mov	eax, DWORD PTR _u_off1$[ebp]
	cmp	eax, DWORD PTR _threshold$[ebp]
	jge	SHORT $LN15@af_hint_no
	mov	ecx, DWORD PTR _d_off2$[ebp]
	cmp	ecx, DWORD PTR _threshold$[ebp]
	jge	SHORT $LN15@af_hint_no
	mov	edx, DWORD PTR _u_off2$[ebp]
	cmp	edx, DWORD PTR _threshold$[ebp]
	jl	SHORT $LN17@af_hint_no
$LN15@af_hint_no:
; Line 1647
	jmp	$Exit$37
$LN17@af_hint_no:
; Line 1650
	mov	eax, DWORD PTR _cur_len$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _offset$[ebp], eax
; Line 1652
	cmp	DWORD PTR _offset$[ebp], 32		; 00000020H
	jge	SHORT $LN14@af_hint_no
; Line 1654
	mov	ecx, DWORD PTR _u_off1$[ebp]
	cmp	ecx, DWORD PTR _offset$[ebp]
	jle	SHORT $LN12@af_hint_no
	mov	edx, DWORD PTR _d_off2$[ebp]
	cmp	edx, DWORD PTR _offset$[ebp]
	jg	SHORT $LN13@af_hint_no
$LN12@af_hint_no:
; Line 1655
	jmp	$Exit$37
$LN13@af_hint_no:
; Line 1657
	jmp	SHORT $LN11@af_hint_no
$LN14@af_hint_no:
; Line 1658
	mov	eax, 64					; 00000040H
	sub	eax, DWORD PTR _threshold$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
$LN11@af_hint_no:
; Line 1660
	mov	ecx, DWORD PTR _threshold$[ebp]
	sub	ecx, DWORD PTR _u_off1$[ebp]
	mov	DWORD PTR _d_off1$[ebp], ecx
; Line 1661
	mov	edx, DWORD PTR _u_off1$[ebp]
	sub	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _u_off1$[ebp], edx
; Line 1662
	mov	eax, DWORD PTR _threshold$[ebp]
	sub	eax, DWORD PTR _d_off2$[ebp]
	mov	DWORD PTR _u_off2$[ebp], eax
; Line 1663
	mov	ecx, DWORD PTR _d_off2$[ebp]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _d_off2$[ebp], ecx
; Line 1665
	mov	edx, DWORD PTR _d_off1$[ebp]
	cmp	edx, DWORD PTR _u_off1$[ebp]
	jg	SHORT $LN10@af_hint_no
; Line 1666
	mov	eax, DWORD PTR _d_off1$[ebp]
	neg	eax
	mov	DWORD PTR _u_off1$[ebp], eax
$LN10@af_hint_no:
; Line 1668
	mov	ecx, DWORD PTR _d_off2$[ebp]
	cmp	ecx, DWORD PTR _u_off2$[ebp]
	jg	SHORT $LN9@af_hint_no
; Line 1669
	mov	edx, DWORD PTR _d_off2$[ebp]
	neg	edx
	mov	DWORD PTR _u_off2$[ebp], edx
$LN9@af_hint_no:
; Line 1671
	cmp	DWORD PTR _u_off1$[ebp], 0
	jge	SHORT $LN33@af_hint_no
	mov	eax, DWORD PTR _u_off1$[ebp]
	neg	eax
	mov	DWORD PTR tv162[ebp], eax
	jmp	SHORT $LN34@af_hint_no
$LN33@af_hint_no:
	mov	ecx, DWORD PTR _u_off1$[ebp]
	mov	DWORD PTR tv162[ebp], ecx
$LN34@af_hint_no:
	cmp	DWORD PTR _u_off2$[ebp], 0
	jge	SHORT $LN35@af_hint_no
	mov	edx, DWORD PTR _u_off2$[ebp]
	neg	edx
	mov	DWORD PTR tv165[ebp], edx
	jmp	SHORT $LN36@af_hint_no
$LN35@af_hint_no:
	mov	eax, DWORD PTR _u_off2$[ebp]
	mov	DWORD PTR tv165[ebp], eax
$LN36@af_hint_no:
	mov	ecx, DWORD PTR tv162[ebp]
	cmp	ecx, DWORD PTR tv165[ebp]
	jg	SHORT $LN8@af_hint_no
; Line 1672
	mov	edx, DWORD PTR _u_off1$[ebp]
	mov	DWORD PTR _delta$[ebp], edx
; Line 1673
	jmp	SHORT $Exit$37
$LN8@af_hint_no:
; Line 1674
	mov	eax, DWORD PTR _u_off2$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
$Exit$37:
; Line 1679
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	and	edx, 4
	jne	SHORT $LN6@af_hint_no
; Line 1681
	cmp	DWORD PTR _delta$[ebp], 14		; 0000000eH
	jle	SHORT $LN5@af_hint_no
; Line 1682
	mov	DWORD PTR _delta$[ebp], 14		; 0000000eH
	jmp	SHORT $LN6@af_hint_no
$LN5@af_hint_no:
; Line 1683
	cmp	DWORD PTR _delta$[ebp], -14		; fffffff2H
	jge	SHORT $LN6@af_hint_no
; Line 1684
	mov	DWORD PTR _delta$[ebp], -14		; fffffff2H
$LN6@af_hint_no:
; Line 1688
	mov	eax, DWORD PTR _cur_pos1$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _cur_pos1$[ebp], eax
; Line 1690
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR _edge2$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $LN2@af_hint_no
; Line 1692
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR _cur_pos1$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 1693
	mov	eax, DWORD PTR _cur_pos1$[ebp]
	add	eax, DWORD PTR _cur_len$[ebp]
	mov	ecx, DWORD PTR _edge2$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1695
	jmp	SHORT $LN1@af_hint_no
$LN2@af_hint_no:
; Line 1697
	mov	edx, DWORD PTR _cur_pos1$[ebp]
	add	edx, DWORD PTR _cur_len$[ebp]
	mov	eax, DWORD PTR _edge$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 1698
	mov	ecx, DWORD PTR _edge2$[ebp]
	mov	edx, DWORD PTR _cur_pos1$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN1@af_hint_no:
; Line 1701
	mov	eax, DWORD PTR _delta$[ebp]
; Line 1702
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_hint_normal_stem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hints$ = 8						; size = 4
_base$ = 12						; size = 4
_serif$ = 16						; size = 4
_af_cjk_align_serif_edge PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 1556
	push	ebp
	mov	ebp, esp
; Line 1557
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR _hints$[ebp], eax
; Line 1559
	mov	ecx, DWORD PTR _serif$[ebp]
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _base$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _serif$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 1560
	pop	ebp
	ret	0
_af_cjk_align_serif_edge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fitted_width$ = -8					; size = 4
_dist$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_base_edge$ = 16					; size = 4
_stem_edge$ = 20					; size = 4
_af_cjk_align_linked_edge PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 1530
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1531
	mov	eax, DWORD PTR _stem_edge$[ebp]
	mov	ecx, DWORD PTR _base_edge$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _dist$[ebp], edx
; Line 1536
	mov	eax, DWORD PTR _stem_edge$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _base_edge$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _dist$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_cjk_compute_stem_width
	add	esp, 20					; 00000014H
	mov	DWORD PTR _fitted_width$[ebp], eax
; Line 1539
	mov	ecx, DWORD PTR _base_edge$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _fitted_width$[ebp]
	mov	eax, DWORD PTR _stem_edge$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN4@af_cjk_ali:
; Line 1545
	mov	ecx, 4
	imul	edx, ecx, 89
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	$LN1@af_cjk_ali
	cvtsi2sd xmm0, DWORD PTR _fitted_width$[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _dist$[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _stem_edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _stem_edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _stem_edge$[ebp]
	movsx	eax, WORD PTR [edx]
	push	eax
	imul	ecx, DWORD PTR _dim$[ebp], 28
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _stem_edge$[ebp]
	sub	eax, DWORD PTR [edx+ecx+64]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10896
	call	_FT_Message
	add	esp, 44					; 0000002cH
$LN1@af_cjk_ali:
	xor	edx, edx
	jne	$LN4@af_cjk_ali
; Line 1546
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_align_linked_edge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv136 = -32						; size = 4
tv69 = -25						; size = 1
_delta$1 = -24						; size = 4
_vertical$ = -17					; size = 1
_sign$ = -16						; size = 4
_dist$ = -12						; size = 4
_axis$ = -8						; size = 4
_metrics$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_width$ = 16						; size = 4
_base_flags$ = 20					; size = 4
_stem_flags$ = 24					; size = 4
_af_cjk_compute_stem_width PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 1410
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1411
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _metrics$[ebp], ecx
; Line 1412
	imul	edx, DWORD PTR _dim$[ebp], 1264
	mov	eax, DWORD PTR _metrics$[ebp]
	lea	ecx, DWORD PTR [eax+edx+44]
	mov	DWORD PTR _axis$[ebp], ecx
; Line 1413
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _dist$[ebp], edx
; Line 1414
	mov	DWORD PTR _sign$[ebp], 0
; Line 1415
	cmp	DWORD PTR _dim$[ebp], 1
	jne	SHORT $LN36@af_cjk_com
	mov	BYTE PTR tv69[ebp], 1
	jmp	SHORT $LN37@af_cjk_com
$LN36@af_cjk_com:
	mov	BYTE PTR tv69[ebp], 0
$LN37@af_cjk_com:
	mov	al, BYTE PTR tv69[ebp]
	mov	BYTE PTR _vertical$[ebp], al
; Line 1417
	mov	ecx, DWORD PTR _base_flags$[ebp]
	mov	DWORD PTR _base_flags$[ebp], ecx
; Line 1418
	mov	edx, DWORD PTR _stem_flags$[ebp]
	mov	DWORD PTR _stem_flags$[ebp], edx
; Line 1421
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	and	ecx, 4
	jne	SHORT $LN33@af_cjk_com
; Line 1422
	mov	eax, DWORD PTR _width$[ebp]
	jmp	$LN34@af_cjk_com
$LN33@af_cjk_com:
; Line 1424
	cmp	DWORD PTR _dist$[ebp], 0
	jge	SHORT $LN32@af_cjk_com
; Line 1426
	mov	edx, DWORD PTR _width$[ebp]
	neg	edx
	mov	DWORD PTR _dist$[ebp], edx
; Line 1427
	mov	DWORD PTR _sign$[ebp], 1
$LN32@af_cjk_com:
; Line 1431
	movzx	eax, BYTE PTR _vertical$[ebp]
	test	eax, eax
	je	SHORT $LN29@af_cjk_com
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	and	edx, 2
	je	SHORT $LN30@af_cjk_com
$LN29@af_cjk_com:
	movzx	eax, BYTE PTR _vertical$[ebp]
	test	eax, eax
	jne	$LN31@af_cjk_com
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	and	edx, 1
	jne	$LN31@af_cjk_com
$LN30@af_cjk_com:
; Line 1435
	mov	eax, DWORD PTR _axis$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jbe	SHORT $LN28@af_cjk_com
; Line 1437
	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR _dist$[ebp]
	sub	ecx, DWORD PTR [eax+edx+16]
	jns	SHORT $LN38@af_cjk_com
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR _dist$[ebp]
	sub	edx, DWORD PTR [ecx+eax+16]
	neg	edx
	mov	DWORD PTR tv136[ebp], edx
	jmp	SHORT $LN39@af_cjk_com
$LN38@af_cjk_com:
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR _dist$[ebp]
	sub	eax, DWORD PTR [edx+ecx+16]
	mov	DWORD PTR tv136[ebp], eax
$LN39@af_cjk_com:
	cmp	DWORD PTR tv136[ebp], 40		; 00000028H
	jge	SHORT $LN28@af_cjk_com
; Line 1439
	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+edx+16]
	mov	DWORD PTR _dist$[ebp], ecx
; Line 1440
	cmp	DWORD PTR _dist$[ebp], 48		; 00000030H
	jge	SHORT $LN26@af_cjk_com
; Line 1441
	mov	DWORD PTR _dist$[ebp], 48		; 00000030H
$LN26@af_cjk_com:
; Line 1443
	jmp	$Done_Width$40
$LN28@af_cjk_com:
; Line 1447
	cmp	DWORD PTR _dist$[ebp], 54		; 00000036H
	jge	SHORT $LN25@af_cjk_com
; Line 1448
	mov	eax, 54					; 00000036H
	sub	eax, DWORD PTR _dist$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _dist$[ebp]
	mov	DWORD PTR _dist$[ebp], eax
	jmp	SHORT $LN24@af_cjk_com
$LN25@af_cjk_com:
; Line 1449
	cmp	DWORD PTR _dist$[ebp], 192		; 000000c0H
	jge	SHORT $LN24@af_cjk_com
; Line 1454
	mov	edx, DWORD PTR _dist$[ebp]
	and	edx, 63					; 0000003fH
	mov	DWORD PTR _delta$1[ebp], edx
; Line 1455
	mov	eax, DWORD PTR _dist$[ebp]
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _dist$[ebp], eax
; Line 1457
	cmp	DWORD PTR _delta$1[ebp], 10		; 0000000aH
	jge	SHORT $LN22@af_cjk_com
; Line 1458
	mov	ecx, DWORD PTR _dist$[ebp]
	add	ecx, DWORD PTR _delta$1[ebp]
	mov	DWORD PTR _dist$[ebp], ecx
	jmp	SHORT $LN24@af_cjk_com
$LN22@af_cjk_com:
; Line 1459
	cmp	DWORD PTR _delta$1[ebp], 22		; 00000016H
	jge	SHORT $LN20@af_cjk_com
; Line 1460
	mov	edx, DWORD PTR _dist$[ebp]
	add	edx, 10					; 0000000aH
	mov	DWORD PTR _dist$[ebp], edx
	jmp	SHORT $LN24@af_cjk_com
$LN20@af_cjk_com:
; Line 1461
	cmp	DWORD PTR _delta$1[ebp], 42		; 0000002aH
	jge	SHORT $LN18@af_cjk_com
; Line 1462
	mov	eax, DWORD PTR _dist$[ebp]
	add	eax, DWORD PTR _delta$1[ebp]
	mov	DWORD PTR _dist$[ebp], eax
	jmp	SHORT $LN24@af_cjk_com
$LN18@af_cjk_com:
; Line 1463
	cmp	DWORD PTR _delta$1[ebp], 54		; 00000036H
	jge	SHORT $LN16@af_cjk_com
; Line 1464
	mov	ecx, DWORD PTR _dist$[ebp]
	add	ecx, 54					; 00000036H
	mov	DWORD PTR _dist$[ebp], ecx
; Line 1465
	jmp	SHORT $LN24@af_cjk_com
$LN16@af_cjk_com:
; Line 1466
	mov	edx, DWORD PTR _dist$[ebp]
	add	edx, DWORD PTR _delta$1[ebp]
	mov	DWORD PTR _dist$[ebp], edx
$LN24@af_cjk_com:
; Line 1469
	jmp	$Done_Width$40
$LN31@af_cjk_com:
; Line 1473
	mov	eax, DWORD PTR _dist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _axis$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_af_cjk_snap_width
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dist$[ebp], eax
; Line 1475
	movzx	ecx, BYTE PTR _vertical$[ebp]
	test	ecx, ecx
	je	SHORT $LN13@af_cjk_com
; Line 1480
	cmp	DWORD PTR _dist$[ebp], 64		; 00000040H
	jl	SHORT $LN12@af_cjk_com
; Line 1481
	mov	edx, DWORD PTR _dist$[ebp]
	add	edx, 16					; 00000010H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _dist$[ebp], edx
; Line 1482
	jmp	SHORT $LN11@af_cjk_com
$LN12@af_cjk_com:
; Line 1483
	mov	DWORD PTR _dist$[ebp], 64		; 00000040H
$LN11@af_cjk_com:
; Line 1485
	jmp	SHORT $Done_Width$40
$LN13@af_cjk_com:
; Line 1487
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	and	ecx, 8
	je	SHORT $LN9@af_cjk_com
; Line 1492
	cmp	DWORD PTR _dist$[ebp], 64		; 00000040H
	jge	SHORT $LN8@af_cjk_com
; Line 1493
	mov	DWORD PTR _dist$[ebp], 64		; 00000040H
; Line 1494
	jmp	SHORT $LN7@af_cjk_com
$LN8@af_cjk_com:
; Line 1495
	mov	edx, DWORD PTR _dist$[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _dist$[ebp], edx
$LN7@af_cjk_com:
; Line 1497
	jmp	SHORT $Done_Width$40
$LN9@af_cjk_com:
; Line 1503
	cmp	DWORD PTR _dist$[ebp], 48		; 00000030H
	jge	SHORT $LN5@af_cjk_com
; Line 1504
	mov	eax, DWORD PTR _dist$[ebp]
	add	eax, 64					; 00000040H
	sar	eax, 1
	mov	DWORD PTR _dist$[ebp], eax
	jmp	SHORT $Done_Width$40
$LN5@af_cjk_com:
; Line 1506
	cmp	DWORD PTR _dist$[ebp], 128		; 00000080H
	jge	SHORT $LN3@af_cjk_com
; Line 1507
	mov	ecx, DWORD PTR _dist$[ebp]
	add	ecx, 22					; 00000016H
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _dist$[ebp], ecx
; Line 1508
	jmp	SHORT $Done_Width$40
$LN3@af_cjk_com:
; Line 1510
	mov	edx, DWORD PTR _dist$[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _dist$[ebp], edx
$Done_Width$40:
; Line 1516
	cmp	DWORD PTR _sign$[ebp], 0
	je	SHORT $LN1@af_cjk_com
; Line 1517
	mov	eax, DWORD PTR _dist$[ebp]
	neg	eax
	mov	DWORD PTR _dist$[ebp], eax
$LN1@af_cjk_com:
; Line 1519
	mov	eax, DWORD PTR _dist$[ebp]
$LN34@af_cjk_com:
; Line 1520
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_compute_stem_width ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dist$1 = -24						; size = 4
_w$2 = -20						; size = 4
_scaled$ = -16						; size = 4
_reference$ = -12					; size = 4
_best$ = -8						; size = 4
_n$ = -4						; size = 4
_widths$ = 8						; size = 4
_count$ = 12						; size = 4
_width$ = 16						; size = 4
_af_cjk_snap_width PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 1359
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1361
	mov	DWORD PTR _best$[ebp], 98		; 00000062H
; Line 1362
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR _reference$[ebp], eax
; Line 1366
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN9@af_cjk_sna
$LN8@af_cjk_sna:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN9@af_cjk_sna:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jge	SHORT $LN7@af_cjk_sna
; Line 1372
	imul	eax, DWORD PTR _n$[ebp], 12
	mov	ecx, DWORD PTR _widths$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _w$2[ebp], edx
; Line 1373
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, DWORD PTR _w$2[ebp]
	mov	DWORD PTR _dist$1[ebp], eax
; Line 1374
	jns	SHORT $LN6@af_cjk_sna
; Line 1375
	mov	ecx, DWORD PTR _dist$1[ebp]
	neg	ecx
	mov	DWORD PTR _dist$1[ebp], ecx
$LN6@af_cjk_sna:
; Line 1376
	mov	edx, DWORD PTR _dist$1[ebp]
	cmp	edx, DWORD PTR _best$[ebp]
	jge	SHORT $LN5@af_cjk_sna
; Line 1378
	mov	eax, DWORD PTR _dist$1[ebp]
	mov	DWORD PTR _best$[ebp], eax
; Line 1379
	mov	ecx, DWORD PTR _w$2[ebp]
	mov	DWORD PTR _reference$[ebp], ecx
$LN5@af_cjk_sna:
; Line 1381
	jmp	SHORT $LN8@af_cjk_sna
$LN7@af_cjk_sna:
; Line 1383
	mov	edx, DWORD PTR _reference$[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _scaled$[ebp], edx
; Line 1385
	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _reference$[ebp]
	jl	SHORT $LN4@af_cjk_sna
; Line 1387
	mov	ecx, DWORD PTR _scaled$[ebp]
	add	ecx, 48					; 00000030H
	cmp	DWORD PTR _width$[ebp], ecx
	jge	SHORT $LN3@af_cjk_sna
; Line 1388
	mov	edx, DWORD PTR _reference$[ebp]
	mov	DWORD PTR _width$[ebp], edx
$LN3@af_cjk_sna:
; Line 1390
	jmp	SHORT $LN2@af_cjk_sna
$LN4@af_cjk_sna:
; Line 1392
	mov	eax, DWORD PTR _scaled$[ebp]
	sub	eax, 48					; 00000030H
	cmp	DWORD PTR _width$[ebp], eax
	jle	SHORT $LN2@af_cjk_sna
; Line 1393
	mov	ecx, DWORD PTR _reference$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
$LN2@af_cjk_sna:
; Line 1396
	mov	eax, DWORD PTR _width$[ebp]
; Line 1397
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_snap_width ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv166 = -64						; size = 4
tv151 = -60						; size = 4
tv132 = -54						; size = 1
tv95 = -53						; size = 1
_compare$1 = -52					; size = 4
_dist$2 = -48						; size = 4
_is_major_dir$3 = -42					; size = 1
_is_top_right_blue$4 = -41				; size = 1
_blue$5 = -40						; size = 4
_best_dist$6 = -36					; size = 4
_best_blue$7 = -32					; size = 4
_bb$8 = -28						; size = 4
_best_dist0$ = -24					; size = 4
_scale$ = -20						; size = 4
_cjk$ = -16						; size = 4
_edge_limit$ = -12					; size = 4
_edge$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_metrics$ = 12						; size = 4
_dim$ = 16						; size = 4
_af_cjk_hints_compute_blue_edges PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 1197
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1198
	imul	eax, DWORD PTR _dim$[ebp], 28
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 1199
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _edge$[ebp], ecx
; Line 1200
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx+12], 48
	add	eax, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _edge_limit$[ebp], eax
; Line 1201
	imul	ecx, DWORD PTR _dim$[ebp], 1264
	mov	edx, DWORD PTR _metrics$[ebp]
	lea	eax, DWORD PTR [edx+ecx+44]
	mov	DWORD PTR _cjk$[ebp], eax
; Line 1202
	mov	ecx, DWORD PTR _cjk$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _scale$[ebp], edx
; Line 1207
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	xor	edx, edx
	mov	ecx, 40					; 00000028H
	div	ecx
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _best_dist0$[ebp], eax
; Line 1209
	cmp	DWORD PTR _best_dist0$[ebp], 32		; 00000020H
	jle	SHORT $LN14@af_cjk_hin
; Line 1210
	mov	DWORD PTR _best_dist0$[ebp], 32		; 00000020H
$LN14@af_cjk_hin:
; Line 1219
	jmp	SHORT $LN13@af_cjk_hin
$LN12@af_cjk_hin:
	mov	edx, DWORD PTR _edge$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _edge$[ebp], edx
$LN13@af_cjk_hin:
	mov	eax, DWORD PTR _edge$[ebp]
	cmp	eax, DWORD PTR _edge_limit$[ebp]
	jae	$LN15@af_cjk_hin
; Line 1222
	mov	DWORD PTR _best_blue$7[ebp], 0
; Line 1223
	mov	ecx, DWORD PTR _best_dist0$[ebp]
	mov	DWORD PTR _best_dist$6[ebp], ecx
; Line 1226
	mov	DWORD PTR _bb$8[ebp], 0
	jmp	SHORT $LN10@af_cjk_hin
$LN9@af_cjk_hin:
	mov	edx, DWORD PTR _bb$8[ebp]
	add	edx, 1
	mov	DWORD PTR _bb$8[ebp], edx
$LN10@af_cjk_hin:
	mov	eax, DWORD PTR _cjk$[ebp]
	mov	ecx, DWORD PTR _bb$8[ebp]
	cmp	ecx, DWORD PTR [eax+216]
	jae	$LN8@af_cjk_hin
; Line 1228
	imul	edx, DWORD PTR _bb$8[ebp], 28
	mov	eax, DWORD PTR _cjk$[ebp]
	lea	ecx, DWORD PTR [eax+edx+220]
	mov	DWORD PTR _blue$5[ebp], ecx
; Line 1233
	mov	edx, DWORD PTR _blue$5[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, 1
	jne	SHORT $LN7@af_cjk_hin
; Line 1234
	jmp	SHORT $LN9@af_cjk_hin
$LN7@af_cjk_hin:
; Line 1241
	mov	ecx, DWORD PTR _blue$5[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, 2
	je	SHORT $LN17@af_cjk_hin
	mov	BYTE PTR tv95[ebp], 1
	jmp	SHORT $LN18@af_cjk_hin
$LN17@af_cjk_hin:
	mov	BYTE PTR tv95[ebp], 0
$LN18@af_cjk_hin:
	mov	al, BYTE PTR tv95[ebp]
	mov	BYTE PTR _is_top_right_blue$4[ebp], al
; Line 1243
	mov	ecx, DWORD PTR _edge$[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	mov	eax, DWORD PTR _axis$[ebp]
	cmp	edx, DWORD PTR [eax+24]
	jne	SHORT $LN19@af_cjk_hin
	mov	BYTE PTR tv132[ebp], 1
	jmp	SHORT $LN20@af_cjk_hin
$LN19@af_cjk_hin:
	mov	BYTE PTR tv132[ebp], 0
$LN20@af_cjk_hin:
	mov	cl, BYTE PTR tv132[ebp]
	mov	BYTE PTR _is_major_dir$3[ebp], cl
; Line 1248
	movzx	edx, BYTE PTR _is_top_right_blue$4[ebp]
	movzx	eax, BYTE PTR _is_major_dir$3[ebp]
	xor	edx, eax
	je	$LN6@af_cjk_hin
; Line 1256
	mov	ecx, DWORD PTR _edge$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _blue$5[ebp]
	sub	edx, DWORD PTR [eax]
	jns	SHORT $LN21@af_cjk_hin
	mov	ecx, DWORD PTR _edge$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _blue$5[ebp]
	sub	edx, DWORD PTR [eax]
	neg	edx
	mov	DWORD PTR tv151[ebp], edx
	jmp	SHORT $LN22@af_cjk_hin
$LN21@af_cjk_hin:
	mov	ecx, DWORD PTR _edge$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _blue$5[ebp]
	sub	edx, DWORD PTR [eax]
	mov	DWORD PTR tv151[ebp], edx
$LN22@af_cjk_hin:
	mov	ecx, DWORD PTR _edge$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _blue$5[ebp]
	sub	edx, DWORD PTR [eax+12]
	jns	SHORT $LN23@af_cjk_hin
	mov	ecx, DWORD PTR _edge$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _blue$5[ebp]
	sub	edx, DWORD PTR [eax+12]
	neg	edx
	mov	DWORD PTR tv166[ebp], edx
	jmp	SHORT $LN24@af_cjk_hin
$LN23@af_cjk_hin:
	mov	ecx, DWORD PTR _edge$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _blue$5[ebp]
	sub	edx, DWORD PTR [eax+12]
	mov	DWORD PTR tv166[ebp], edx
$LN24@af_cjk_hin:
	mov	ecx, DWORD PTR tv151[ebp]
	cmp	ecx, DWORD PTR tv166[ebp]
	jle	SHORT $LN5@af_cjk_hin
; Line 1257
	mov	edx, DWORD PTR _blue$5[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _compare$1[ebp], edx
; Line 1258
	jmp	SHORT $LN4@af_cjk_hin
$LN5@af_cjk_hin:
; Line 1259
	mov	eax, DWORD PTR _blue$5[ebp]
	mov	DWORD PTR _compare$1[ebp], eax
$LN4@af_cjk_hin:
; Line 1261
	mov	ecx, DWORD PTR _edge$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _compare$1[ebp]
	sub	edx, DWORD PTR [eax]
	mov	DWORD PTR _dist$2[ebp], edx
; Line 1262
	jns	SHORT $LN3@af_cjk_hin
; Line 1263
	mov	ecx, DWORD PTR _dist$2[ebp]
	neg	ecx
	mov	DWORD PTR _dist$2[ebp], ecx
$LN3@af_cjk_hin:
; Line 1265
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _dist$2[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _dist$2[ebp], eax
; Line 1266
	mov	ecx, DWORD PTR _dist$2[ebp]
	cmp	ecx, DWORD PTR _best_dist$6[ebp]
	jge	SHORT $LN6@af_cjk_hin
; Line 1268
	mov	edx, DWORD PTR _dist$2[ebp]
	mov	DWORD PTR _best_dist$6[ebp], edx
; Line 1269
	mov	eax, DWORD PTR _compare$1[ebp]
	mov	DWORD PTR _best_blue$7[ebp], eax
$LN6@af_cjk_hin:
; Line 1272
	jmp	$LN9@af_cjk_hin
$LN8@af_cjk_hin:
; Line 1274
	cmp	DWORD PTR _best_blue$7[ebp], 0
	je	SHORT $LN1@af_cjk_hin
; Line 1275
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR _best_blue$7[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN1@af_cjk_hin:
; Line 1276
	jmp	$LN12@af_cjk_hin
$LN15@af_cjk_hin:
; Line 1277
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_hints_compute_blue_edges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_cjk_hints_detect_features PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 1176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1180
	mov	eax, DWORD PTR _dim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_cjk_hints_compute_segments
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1181
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@af_cjk_hin
; Line 1183
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_cjk_hints_link_segments
	add	esp, 8
; Line 1185
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_cjk_hints_compute_edges
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN1@af_cjk_hin:
; Line 1187
	mov	eax, DWORD PTR _error$[ebp]
; Line 1188
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_hints_detect_features ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv265 = -140						; size = 4
tv231 = -133						; size = 1
tv164 = -132						; size = 4
tv80 = -128						; size = 4
_seg_delta$1 = -124					; size = 4
_edge_delta$2 = -120					; size = 4
_seg2$3 = -116						; size = 4
_edge2$4 = -112						; size = 4
_is_serif$5 = -105					; size = 1
_is_straight$6 = -104					; size = 4
_is_round$7 = -100					; size = 4
_edge$8 = -96						; size = 4
_edge_limit$9 = -92					; size = 4
_edges$10 = -88						; size = 4
_edge$11 = -80						; size = 4
_link1$12 = -72						; size = 4
_dist2$13 = -68						; size = 4
_seg1$14 = -64						; size = 4
_link$15 = -60						; size = 4
_dist$16 = -56						; size = 4
_edge$17 = -52						; size = 4
_ee$18 = -48						; size = 4
_best$19 = -44						; size = 4
_found$20 = -40						; size = 4
_edge_distance_threshold$ = -36				; size = 4
_scale$ = -32						; size = 4
_seg$ = -28						; size = 4
_segment_limit$ = -24					; size = 4
_segments$ = -20					; size = 4
_laxis$ = -16						; size = 4
_memory$ = -12						; size = 4
_error$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_cjk_hints_compute_edges PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 910
	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	edi
	lea	edi, DWORD PTR [ebp-140]
	mov	ecx, 35					; 00000023H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 911
	imul	eax, DWORD PTR _dim$[ebp], 28
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 912
	mov	DWORD PTR _error$[ebp], 0
; Line 913
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 914
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+108]
	imul	ecx, DWORD PTR _dim$[ebp], 1264
	lea	edx, DWORD PTR [eax+ecx+44]
	mov	DWORD PTR _laxis$[ebp], edx
; Line 916
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _segments$[ebp], ecx
; Line 917
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx], 48
	add	eax, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _segment_limit$[ebp], eax
; Line 924
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 927
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN50@af_cjk_hin
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN51@af_cjk_hin
$LN50@af_cjk_hin:
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv80[ebp], edx
$LN51@af_cjk_hin:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR _scale$[ebp], eax
; Line 946
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _laxis$[ebp]
	mov	eax, DWORD PTR [edx+204]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _edge_distance_threshold$[ebp], eax
; Line 947
	cmp	DWORD PTR _edge_distance_threshold$[ebp], 16 ; 00000010H
	jle	SHORT $LN47@af_cjk_hin
; Line 948
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	push	16					; 00000010H
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _edge_distance_threshold$[ebp], eax
; Line 949
	jmp	SHORT $LN46@af_cjk_hin
$LN47@af_cjk_hin:
; Line 950
	mov	edx, DWORD PTR _laxis$[ebp]
	mov	eax, DWORD PTR [edx+204]
	mov	DWORD PTR _edge_distance_threshold$[ebp], eax
$LN46@af_cjk_hin:
; Line 952
	mov	ecx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg$[ebp], ecx
	jmp	SHORT $LN45@af_cjk_hin
$LN44@af_cjk_hin:
	mov	edx, DWORD PTR _seg$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _seg$[ebp], edx
$LN45@af_cjk_hin:
	mov	eax, DWORD PTR _seg$[ebp]
	cmp	eax, DWORD PTR _segment_limit$[ebp]
	jae	$LN43@af_cjk_hin
; Line 954
	mov	DWORD PTR _found$20[ebp], 0
; Line 955
	mov	DWORD PTR _best$19[ebp], 65535		; 0000ffffH
; Line 960
	mov	DWORD PTR _ee$18[ebp], 0
	jmp	SHORT $LN42@af_cjk_hin
$LN41@af_cjk_hin:
	mov	ecx, DWORD PTR _ee$18[ebp]
	add	ecx, 1
	mov	DWORD PTR _ee$18[ebp], ecx
$LN42@af_cjk_hin:
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR _ee$18[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jge	$LN40@af_cjk_hin
; Line 962
	imul	ecx, DWORD PTR _ee$18[ebp], 48
	mov	edx, DWORD PTR _axis$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _edge$17[ebp], ecx
; Line 966
	mov	eax, DWORD PTR _edge$17[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	mov	edx, DWORD PTR _seg$[ebp]
	movsx	eax, BYTE PTR [edx+1]
	cmp	ecx, eax
	je	SHORT $LN39@af_cjk_hin
; Line 967
	jmp	SHORT $LN41@af_cjk_hin
$LN39@af_cjk_hin:
; Line 969
	mov	ecx, DWORD PTR _seg$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _edge$17[ebp]
	movsx	ecx, WORD PTR [eax]
	sub	edx, ecx
	mov	DWORD PTR _dist$16[ebp], edx
; Line 970
	jns	SHORT $LN38@af_cjk_hin
; Line 971
	mov	edx, DWORD PTR _dist$16[ebp]
	neg	edx
	mov	DWORD PTR _dist$16[ebp], edx
$LN38@af_cjk_hin:
; Line 973
	mov	eax, DWORD PTR _dist$16[ebp]
	cmp	eax, DWORD PTR _edge_distance_threshold$[ebp]
	jge	$LN37@af_cjk_hin
	mov	ecx, DWORD PTR _dist$16[ebp]
	cmp	ecx, DWORD PTR _best$19[ebp]
	jge	$LN37@af_cjk_hin
; Line 975
	mov	edx, DWORD PTR _seg$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _link$15[ebp], eax
; Line 980
	cmp	DWORD PTR _link$15[ebp], 0
	je	$LN36@af_cjk_hin
; Line 982
	mov	ecx, DWORD PTR _edge$17[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _seg1$14[ebp], edx
; Line 983
	mov	DWORD PTR _dist2$13[ebp], 0
$LN35@af_cjk_hin:
; Line 988
	mov	eax, DWORD PTR _seg1$14[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _link1$12[ebp], ecx
; Line 991
	cmp	DWORD PTR _link1$12[ebp], 0
	je	SHORT $LN34@af_cjk_hin
; Line 993
	mov	edx, DWORD PTR _link$15[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _link1$12[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jle	SHORT $LN52@af_cjk_hin
	mov	eax, DWORD PTR _link$15[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _link1$12[ebp]
	movsx	eax, WORD PTR [edx+2]
	sub	ecx, eax
	mov	DWORD PTR tv164[ebp], ecx
	jmp	SHORT $LN53@af_cjk_hin
$LN52@af_cjk_hin:
	mov	ecx, DWORD PTR _link1$12[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _link$15[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	edx, ecx
	mov	DWORD PTR tv164[ebp], edx
$LN53@af_cjk_hin:
	mov	edx, DWORD PTR tv164[ebp]
	mov	DWORD PTR _dist2$13[ebp], edx
; Line 994
	mov	eax, DWORD PTR _dist2$13[ebp]
	cmp	eax, DWORD PTR _edge_distance_threshold$[ebp]
	jl	SHORT $LN34@af_cjk_hin
; Line 995
	jmp	SHORT $LN33@af_cjk_hin
$LN34@af_cjk_hin:
; Line 998
	mov	ecx, DWORD PTR _seg1$14[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _seg1$14[ebp], edx
	mov	eax, DWORD PTR _edge$17[ebp]
	mov	ecx, DWORD PTR _seg1$14[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jne	SHORT $LN35@af_cjk_hin
$LN33@af_cjk_hin:
; Line 1000
	mov	edx, DWORD PTR _dist2$13[ebp]
	cmp	edx, DWORD PTR _edge_distance_threshold$[ebp]
	jl	SHORT $LN36@af_cjk_hin
; Line 1001
	jmp	$LN41@af_cjk_hin
$LN36@af_cjk_hin:
; Line 1004
	mov	eax, DWORD PTR _dist$16[ebp]
	mov	DWORD PTR _best$19[ebp], eax
; Line 1005
	mov	ecx, DWORD PTR _edge$17[ebp]
	mov	DWORD PTR _found$20[ebp], ecx
$LN37@af_cjk_hin:
; Line 1007
	jmp	$LN41@af_cjk_hin
$LN40@af_cjk_hin:
; Line 1009
	cmp	DWORD PTR _found$20[ebp], 0
	jne	$LN29@af_cjk_hin
; Line 1018
	lea	edx, DWORD PTR _edge$11[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seg$[ebp]
	movsx	edx, BYTE PTR [ecx+1]
	push	edx
	mov	eax, DWORD PTR _seg$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _axis$[ebp]
	push	edx
	call	_af_axis_hints_new_edge
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 1019
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@af_cjk_hin
; Line 1020
	jmp	$Exit$61
$LN28@af_cjk_hin:
; Line 1023
	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _edge$11[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1025
	mov	ecx, DWORD PTR _edge$11[ebp]
	mov	edx, DWORD PTR _seg$[ebp]
	mov	DWORD PTR [ecx+40], edx
; Line 1026
	mov	eax, DWORD PTR _edge$11[ebp]
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 1027
	mov	edx, DWORD PTR _edge$11[ebp]
	mov	eax, DWORD PTR _seg$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR [edx+13], cl
; Line 1028
	mov	edx, DWORD PTR _edge$11[ebp]
	mov	eax, DWORD PTR _seg$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR [edx], cx
; Line 1029
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _seg$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _edge$11[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1030
	mov	eax, DWORD PTR _edge$11[ebp]
	mov	ecx, DWORD PTR _edge$11[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 1031
	mov	eax, DWORD PTR _seg$[ebp]
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 1033
	jmp	SHORT $LN27@af_cjk_hin
$LN29@af_cjk_hin:
; Line 1037
	mov	edx, DWORD PTR _seg$[ebp]
	mov	eax, DWORD PTR _found$20[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+16], ecx
; Line 1038
	mov	edx, DWORD PTR _found$20[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 1039
	mov	edx, DWORD PTR _found$20[ebp]
	mov	eax, DWORD PTR _seg$[ebp]
	mov	DWORD PTR [edx+44], eax
$LN27@af_cjk_hin:
; Line 1041
	jmp	$LN44@af_cjk_hin
$LN43@af_cjk_hin:
; Line 1064
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _edges$10[ebp], edx
; Line 1065
	mov	eax, DWORD PTR _axis$[ebp]
	imul	ecx, DWORD PTR [eax+12], 48
	add	ecx, DWORD PTR _edges$10[ebp]
	mov	DWORD PTR _edge_limit$9[ebp], ecx
; Line 1069
	mov	edx, DWORD PTR _edges$10[ebp]
	mov	DWORD PTR _edge$8[ebp], edx
	jmp	SHORT $LN26@af_cjk_hin
$LN25@af_cjk_hin:
	mov	eax, DWORD PTR _edge$8[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _edge$8[ebp], eax
$LN26@af_cjk_hin:
	mov	ecx, DWORD PTR _edge$8[ebp]
	cmp	ecx, DWORD PTR _edge_limit$9[ebp]
	jae	SHORT $LN24@af_cjk_hin
; Line 1071
	mov	edx, DWORD PTR _edge$8[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _seg$[ebp], eax
; Line 1072
	cmp	DWORD PTR _seg$[ebp], 0
	je	SHORT $LN23@af_cjk_hin
$LN22@af_cjk_hin:
; Line 1075
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	edx, DWORD PTR _edge$8[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 1076
	mov	eax, DWORD PTR _seg$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _seg$[ebp], ecx
; Line 1078
	mov	edx, DWORD PTR _edge$8[ebp]
	mov	eax, DWORD PTR _seg$[ebp]
	cmp	eax, DWORD PTR [edx+40]
	jne	SHORT $LN22@af_cjk_hin
$LN23@af_cjk_hin:
; Line 1079
	jmp	SHORT $LN25@af_cjk_hin
$LN24@af_cjk_hin:
; Line 1082
	mov	ecx, DWORD PTR _edges$10[ebp]
	mov	DWORD PTR _edge$8[ebp], ecx
	jmp	SHORT $LN19@af_cjk_hin
$LN18@af_cjk_hin:
	mov	edx, DWORD PTR _edge$8[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _edge$8[ebp], edx
$LN19@af_cjk_hin:
	mov	eax, DWORD PTR _edge$8[ebp]
	cmp	eax, DWORD PTR _edge_limit$9[ebp]
	jae	$Exit$61
; Line 1084
	mov	DWORD PTR _is_round$7[ebp], 0
; Line 1085
	mov	DWORD PTR _is_straight$6[ebp], 0
; Line 1088
	mov	ecx, DWORD PTR _edge$8[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _seg$[ebp], edx
$LN16@af_cjk_hin:
; Line 1096
	mov	eax, DWORD PTR _seg$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 1
	je	SHORT $LN13@af_cjk_hin
; Line 1097
	mov	edx, DWORD PTR _is_round$7[ebp]
	add	edx, 1
	mov	DWORD PTR _is_round$7[ebp], edx
; Line 1098
	jmp	SHORT $LN12@af_cjk_hin
$LN13@af_cjk_hin:
; Line 1099
	mov	eax, DWORD PTR _is_straight$6[ebp]
	add	eax, 1
	mov	DWORD PTR _is_straight$6[ebp], eax
$LN12@af_cjk_hin:
; Line 1103
	mov	ecx, DWORD PTR _seg$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN54@af_cjk_hin
	mov	edx, DWORD PTR _seg$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _edge$8[ebp]
	je	SHORT $LN54@af_cjk_hin
	mov	BYTE PTR tv231[ebp], 1
	jmp	SHORT $LN55@af_cjk_hin
$LN54@af_cjk_hin:
	mov	BYTE PTR tv231[ebp], 0
$LN55@af_cjk_hin:
	mov	dl, BYTE PTR tv231[ebp]
	mov	BYTE PTR _is_serif$5[ebp], dl
; Line 1105
	mov	eax, DWORD PTR _seg$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN10@af_cjk_hin
	movzx	ecx, BYTE PTR _is_serif$5[ebp]
	test	ecx, ecx
	je	$LN11@af_cjk_hin
$LN10@af_cjk_hin:
; Line 1111
	mov	edx, DWORD PTR _edge$8[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _edge2$4[ebp], eax
; Line 1112
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _seg2$3[ebp], edx
; Line 1114
	movzx	eax, BYTE PTR _is_serif$5[ebp]
	test	eax, eax
	je	SHORT $LN9@af_cjk_hin
; Line 1116
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _seg2$3[ebp], edx
; Line 1117
	mov	eax, DWORD PTR _edge$8[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _edge2$4[ebp], ecx
$LN9@af_cjk_hin:
; Line 1120
	cmp	DWORD PTR _edge2$4[ebp], 0
	je	SHORT $LN8@af_cjk_hin
; Line 1126
	mov	edx, DWORD PTR _edge$8[ebp]
	movsx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _edge2$4[ebp]
	movsx	edx, WORD PTR [ecx]
	sub	eax, edx
	mov	DWORD PTR _edge_delta$2[ebp], eax
; Line 1127
	jns	SHORT $LN7@af_cjk_hin
; Line 1128
	mov	eax, DWORD PTR _edge_delta$2[ebp]
	neg	eax
	mov	DWORD PTR _edge_delta$2[ebp], eax
$LN7@af_cjk_hin:
; Line 1130
	mov	ecx, DWORD PTR _seg$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _seg2$3[ebp]
	movsx	ecx, WORD PTR [eax+2]
	cmp	edx, ecx
	jle	SHORT $LN56@af_cjk_hin
	mov	edx, DWORD PTR _seg$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _seg2$3[ebp]
	movsx	edx, WORD PTR [ecx+2]
	sub	eax, edx
	mov	DWORD PTR tv265[ebp], eax
	jmp	SHORT $LN57@af_cjk_hin
$LN56@af_cjk_hin:
	mov	eax, DWORD PTR _seg2$3[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _seg$[ebp]
	movsx	eax, WORD PTR [edx+2]
	sub	ecx, eax
	mov	DWORD PTR tv265[ebp], ecx
$LN57@af_cjk_hin:
	mov	ecx, DWORD PTR tv265[ebp]
	mov	DWORD PTR _seg_delta$1[ebp], ecx
; Line 1132
	mov	edx, DWORD PTR _seg_delta$1[ebp]
	cmp	edx, DWORD PTR _edge_delta$2[ebp]
	jge	SHORT $LN6@af_cjk_hin
; Line 1133
	mov	eax, DWORD PTR _seg2$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _edge2$4[ebp], ecx
$LN6@af_cjk_hin:
; Line 1135
	jmp	SHORT $LN5@af_cjk_hin
$LN8@af_cjk_hin:
; Line 1136
	mov	edx, DWORD PTR _seg2$3[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _edge2$4[ebp], eax
$LN5@af_cjk_hin:
; Line 1138
	movzx	ecx, BYTE PTR _is_serif$5[ebp]
	test	ecx, ecx
	je	SHORT $LN4@af_cjk_hin
; Line 1140
	mov	edx, DWORD PTR _edge$8[ebp]
	mov	eax, DWORD PTR _edge2$4[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 1141
	mov	ecx, DWORD PTR _edge2$4[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 2
	mov	eax, DWORD PTR _edge2$4[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 1143
	jmp	SHORT $LN11@af_cjk_hin
$LN4@af_cjk_hin:
; Line 1144
	mov	ecx, DWORD PTR _edge$8[ebp]
	mov	edx, DWORD PTR _edge2$4[ebp]
	mov	DWORD PTR [ecx+24], edx
$LN11@af_cjk_hin:
; Line 1147
	mov	eax, DWORD PTR _seg$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _seg$[ebp], ecx
; Line 1149
	mov	edx, DWORD PTR _edge$8[ebp]
	mov	eax, DWORD PTR _seg$[ebp]
	cmp	eax, DWORD PTR [edx+40]
	jne	$LN16@af_cjk_hin
; Line 1152
	mov	ecx, DWORD PTR _edge$8[ebp]
	mov	BYTE PTR [ecx+12], 0
; Line 1154
	cmp	DWORD PTR _is_round$7[ebp], 0
	jle	SHORT $LN2@af_cjk_hin
	mov	edx, DWORD PTR _is_round$7[ebp]
	cmp	edx, DWORD PTR _is_straight$6[ebp]
	jl	SHORT $LN2@af_cjk_hin
; Line 1155
	mov	eax, DWORD PTR _edge$8[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	or	ecx, 1
	mov	edx, DWORD PTR _edge$8[ebp]
	mov	BYTE PTR [edx+12], cl
$LN2@af_cjk_hin:
; Line 1161
	mov	eax, DWORD PTR _edge$8[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@af_cjk_hin
	mov	ecx, DWORD PTR _edge$8[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN1@af_cjk_hin
; Line 1162
	mov	edx, DWORD PTR _edge$8[ebp]
	mov	DWORD PTR [edx+28], 0
$LN1@af_cjk_hin:
; Line 1163
	jmp	$LN18@af_cjk_hin
$Exit$61:
; Line 1167
	mov	eax, DWORD PTR _error$[ebp]
; Line 1168
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN60@af_cjk_hin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 140				; 0000008cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN60@af_cjk_hin:
	DD	1
	DD	$LN59@af_cjk_hin
$LN59@af_cjk_hin:
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN58@af_cjk_hin
$LN58@af_cjk_hin:
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
_af_cjk_hints_compute_edges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -68						; size = 4
_link$1 = -64						; size = 4
_seg$2 = -60						; size = 4
_link2$3 = -56						; size = 4
_link1$4 = -52						; size = 4
_len$5 = -48						; size = 4
_max$6 = -44						; size = 4
_min$7 = -40						; size = 4
_dist$8 = -36						; size = 4
_dist_threshold$ = -32					; size = 4
_len_threshold$ = -28					; size = 4
_seg2$ = -24						; size = 4
_seg1$ = -20						; size = 4
_major_dir$ = -16					; size = 4
_segment_limit$ = -12					; size = 4
_segments$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_cjk_hints_link_segments PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 749
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 750
	imul	eax, DWORD PTR _dim$[ebp], 28
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 751
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _segments$[ebp], ecx
; Line 752
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx], 48
	add	eax, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _segment_limit$[ebp], eax
; Line 753
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _major_dir$[ebp], edx
; Line 759
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR [ecx+40]
	shl	eax, 3
	cdq
	and	edx, 2047				; 000007ffH
	add	eax, edx
	sar	eax, 11					; 0000000bH
	mov	DWORD PTR _len_threshold$[ebp], eax
; Line 762
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN51@af_cjk_hin
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN52@af_cjk_hin
$LN51@af_cjk_hin:
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv79[ebp], edx
$LN52@af_cjk_hin:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _dist_threshold$[ebp], eax
; Line 763
	mov	ecx, DWORD PTR _dist_threshold$[ebp]
	push	ecx
	push	192					; 000000c0H
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _dist_threshold$[ebp], eax
; Line 766
	mov	edx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg1$[ebp], edx
	jmp	SHORT $LN48@af_cjk_hin
$LN47@af_cjk_hin:
	mov	eax, DWORD PTR _seg1$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _seg1$[ebp], eax
$LN48@af_cjk_hin:
	mov	ecx, DWORD PTR _seg1$[ebp]
	cmp	ecx, DWORD PTR _segment_limit$[ebp]
	jae	$LN46@af_cjk_hin
; Line 768
	mov	edx, DWORD PTR _seg1$[ebp]
	movsx	eax, BYTE PTR [edx+1]
	cmp	eax, DWORD PTR _major_dir$[ebp]
	je	SHORT $LN45@af_cjk_hin
; Line 769
	jmp	SHORT $LN47@af_cjk_hin
$LN45@af_cjk_hin:
; Line 771
	mov	ecx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg2$[ebp], ecx
	jmp	SHORT $LN44@af_cjk_hin
$LN43@af_cjk_hin:
	mov	edx, DWORD PTR _seg2$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _seg2$[ebp], edx
$LN44@af_cjk_hin:
	mov	eax, DWORD PTR _seg2$[ebp]
	cmp	eax, DWORD PTR _segment_limit$[ebp]
	jae	$LN42@af_cjk_hin
; Line 772
	mov	ecx, DWORD PTR _seg2$[ebp]
	cmp	ecx, DWORD PTR _seg1$[ebp]
	je	$LN41@af_cjk_hin
	mov	edx, DWORD PTR _seg1$[ebp]
	movsx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _seg2$[ebp]
	movsx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	jne	$LN41@af_cjk_hin
; Line 774
	mov	eax, DWORD PTR _seg2$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _seg1$[ebp]
	movsx	eax, WORD PTR [edx+2]
	sub	ecx, eax
	mov	DWORD PTR _dist$8[ebp], ecx
; Line 777
	jns	SHORT $LN40@af_cjk_hin
; Line 778
	jmp	SHORT $LN43@af_cjk_hin
$LN40@af_cjk_hin:
; Line 781
	mov	ecx, DWORD PTR _seg1$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	mov	DWORD PTR _min$7[ebp], edx
; Line 782
	mov	eax, DWORD PTR _seg1$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _max$6[ebp], ecx
; Line 786
	mov	edx, DWORD PTR _seg2$[ebp]
	movsx	eax, WORD PTR [edx+4]
	cmp	DWORD PTR _min$7[ebp], eax
	jge	SHORT $LN39@af_cjk_hin
; Line 787
	mov	ecx, DWORD PTR _seg2$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	mov	DWORD PTR _min$7[ebp], edx
$LN39@af_cjk_hin:
; Line 789
	mov	eax, DWORD PTR _seg2$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _max$6[ebp], ecx
	jle	SHORT $LN38@af_cjk_hin
; Line 790
	mov	edx, DWORD PTR _seg2$[ebp]
	movsx	eax, WORD PTR [edx+6]
	mov	DWORD PTR _max$6[ebp], eax
$LN38@af_cjk_hin:
; Line 792
	mov	ecx, DWORD PTR _max$6[ebp]
	sub	ecx, DWORD PTR _min$7[ebp]
	mov	DWORD PTR _len$5[ebp], ecx
; Line 793
	mov	edx, DWORD PTR _len$5[ebp]
	cmp	edx, DWORD PTR _len_threshold$[ebp]
	jl	$LN41@af_cjk_hin
; Line 796
	mov	eax, DWORD PTR _dist$8[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _seg1$[ebp]
	imul	edx, DWORD PTR [ecx+32], 9
	cmp	eax, edx
	jge	SHORT $LN36@af_cjk_hin
	mov	eax, DWORD PTR _dist$8[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _seg1$[ebp]
	imul	edx, DWORD PTR [ecx+32], 7
	cmp	eax, edx
	jl	SHORT $LN35@af_cjk_hin
	mov	eax, DWORD PTR _seg1$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	ecx, DWORD PTR _len$5[ebp]
	jge	SHORT $LN36@af_cjk_hin
$LN35@af_cjk_hin:
; Line 798
	mov	edx, DWORD PTR _seg1$[ebp]
	mov	eax, DWORD PTR _dist$8[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 799
	mov	ecx, DWORD PTR _seg1$[ebp]
	mov	edx, DWORD PTR _len$5[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 800
	mov	eax, DWORD PTR _seg1$[ebp]
	mov	ecx, DWORD PTR _seg2$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN36@af_cjk_hin:
; Line 804
	mov	edx, DWORD PTR _dist$8[ebp]
	shl	edx, 3
	mov	eax, DWORD PTR _seg2$[ebp]
	imul	ecx, DWORD PTR [eax+32], 9
	cmp	edx, ecx
	jge	SHORT $LN41@af_cjk_hin
	mov	edx, DWORD PTR _dist$8[ebp]
	shl	edx, 3
	mov	eax, DWORD PTR _seg2$[ebp]
	imul	ecx, DWORD PTR [eax+32], 7
	cmp	edx, ecx
	jl	SHORT $LN33@af_cjk_hin
	mov	edx, DWORD PTR _seg2$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	eax, DWORD PTR _len$5[ebp]
	jge	SHORT $LN41@af_cjk_hin
$LN33@af_cjk_hin:
; Line 806
	mov	ecx, DWORD PTR _seg2$[ebp]
	mov	edx, DWORD PTR _dist$8[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 807
	mov	eax, DWORD PTR _seg2$[ebp]
	mov	ecx, DWORD PTR _len$5[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 808
	mov	edx, DWORD PTR _seg2$[ebp]
	mov	eax, DWORD PTR _seg1$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN41@af_cjk_hin:
; Line 813
	jmp	$LN43@af_cjk_hin
$LN42@af_cjk_hin:
	jmp	$LN47@af_cjk_hin
$LN46@af_cjk_hin:
; Line 828
	mov	ecx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg1$[ebp], ecx
	jmp	SHORT $LN32@af_cjk_hin
$LN31@af_cjk_hin:
	mov	edx, DWORD PTR _seg1$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _seg1$[ebp], edx
$LN32@af_cjk_hin:
	mov	eax, DWORD PTR _seg1$[ebp]
	cmp	eax, DWORD PTR _segment_limit$[ebp]
	jae	$LN30@af_cjk_hin
; Line 830
	mov	ecx, DWORD PTR _seg1$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _link1$4[ebp], edx
; Line 831
	cmp	DWORD PTR _link1$4[ebp], 0
	je	SHORT $LN28@af_cjk_hin
	mov	eax, DWORD PTR _link1$4[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _seg1$[ebp]
	jne	SHORT $LN28@af_cjk_hin
	mov	edx, DWORD PTR _link1$4[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _seg1$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jg	SHORT $LN29@af_cjk_hin
$LN28@af_cjk_hin:
; Line 832
	jmp	SHORT $LN31@af_cjk_hin
$LN29@af_cjk_hin:
; Line 834
	mov	eax, DWORD PTR _seg1$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, DWORD PTR _dist_threshold$[ebp]
	jl	SHORT $LN27@af_cjk_hin
; Line 835
	jmp	SHORT $LN31@af_cjk_hin
$LN27@af_cjk_hin:
; Line 837
	mov	edx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg2$[ebp], edx
	jmp	SHORT $LN26@af_cjk_hin
$LN25@af_cjk_hin:
	mov	eax, DWORD PTR _seg2$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _seg2$[ebp], eax
$LN26@af_cjk_hin:
	mov	ecx, DWORD PTR _seg2$[ebp]
	cmp	ecx, DWORD PTR _segment_limit$[ebp]
	jae	$LN24@af_cjk_hin
; Line 839
	mov	edx, DWORD PTR _seg2$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _seg1$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jg	SHORT $LN22@af_cjk_hin
	mov	eax, DWORD PTR _seg1$[ebp]
	cmp	eax, DWORD PTR _seg2$[ebp]
	jne	SHORT $LN23@af_cjk_hin
$LN22@af_cjk_hin:
; Line 840
	jmp	SHORT $LN25@af_cjk_hin
$LN23@af_cjk_hin:
; Line 842
	mov	ecx, DWORD PTR _seg2$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _link2$3[ebp], edx
; Line 843
	cmp	DWORD PTR _link2$3[ebp], 0
	je	SHORT $LN20@af_cjk_hin
	mov	eax, DWORD PTR _link2$3[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _seg2$[ebp]
	jne	SHORT $LN20@af_cjk_hin
	mov	edx, DWORD PTR _link2$3[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _link1$4[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jge	SHORT $LN21@af_cjk_hin
$LN20@af_cjk_hin:
; Line 844
	jmp	SHORT $LN25@af_cjk_hin
$LN21@af_cjk_hin:
; Line 846
	mov	eax, DWORD PTR _seg1$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _seg2$[ebp]
	movsx	eax, WORD PTR [edx+2]
	cmp	ecx, eax
	jne	SHORT $LN19@af_cjk_hin
	mov	ecx, DWORD PTR _link1$4[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _link2$3[ebp]
	movsx	ecx, WORD PTR [eax+2]
	cmp	edx, ecx
	jne	SHORT $LN19@af_cjk_hin
; Line 847
	jmp	$LN25@af_cjk_hin
$LN19@af_cjk_hin:
; Line 849
	mov	edx, DWORD PTR _seg2$[ebp]
	mov	eax, DWORD PTR _seg1$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+32]
	jle	SHORT $LN17@af_cjk_hin
	mov	edx, DWORD PTR _seg1$[ebp]
	mov	eax, DWORD PTR [edx+32]
	shl	eax, 2
	mov	ecx, DWORD PTR _seg2$[ebp]
	cmp	eax, DWORD PTR [ecx+32]
	jg	SHORT $LN18@af_cjk_hin
$LN17@af_cjk_hin:
; Line 850
	jmp	$LN25@af_cjk_hin
$LN18@af_cjk_hin:
; Line 854
	mov	edx, DWORD PTR _seg2$[ebp]
	imul	eax, DWORD PTR [edx+36], 3
	mov	ecx, DWORD PTR _seg1$[ebp]
	cmp	DWORD PTR [ecx+36], eax
	jl	SHORT $LN16@af_cjk_hin
; Line 859
	mov	edx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg$2[ebp], edx
	jmp	SHORT $LN15@af_cjk_hin
$LN14@af_cjk_hin:
	mov	eax, DWORD PTR _seg$2[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _seg$2[ebp], eax
$LN15@af_cjk_hin:
	mov	ecx, DWORD PTR _seg$2[ebp]
	cmp	ecx, DWORD PTR _segment_limit$[ebp]
	jae	SHORT $LN13@af_cjk_hin
; Line 861
	mov	edx, DWORD PTR _seg$2[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _link$1[ebp], eax
; Line 864
	mov	ecx, DWORD PTR _link$1[ebp]
	cmp	ecx, DWORD PTR _seg2$[ebp]
	jne	SHORT $LN12@af_cjk_hin
; Line 866
	mov	edx, DWORD PTR _seg$2[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 867
	mov	eax, DWORD PTR _seg$2[ebp]
	mov	ecx, DWORD PTR _link1$4[ebp]
	mov	DWORD PTR [eax+24], ecx
	jmp	SHORT $LN11@af_cjk_hin
$LN12@af_cjk_hin:
; Line 869
	mov	edx, DWORD PTR _link$1[ebp]
	cmp	edx, DWORD PTR _link2$3[ebp]
	jne	SHORT $LN11@af_cjk_hin
; Line 871
	mov	eax, DWORD PTR _seg$2[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 872
	mov	ecx, DWORD PTR _seg$2[ebp]
	mov	edx, DWORD PTR _seg1$[ebp]
	mov	DWORD PTR [ecx+24], edx
$LN11@af_cjk_hin:
; Line 874
	jmp	SHORT $LN14@af_cjk_hin
$LN13@af_cjk_hin:
; Line 876
	jmp	SHORT $LN9@af_cjk_hin
$LN16@af_cjk_hin:
; Line 878
	mov	eax, DWORD PTR _link1$4[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _seg1$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 880
	jmp	SHORT $LN24@af_cjk_hin
$LN9@af_cjk_hin:
; Line 882
	jmp	$LN25@af_cjk_hin
$LN24@af_cjk_hin:
; Line 883
	jmp	$LN31@af_cjk_hin
$LN30@af_cjk_hin:
; Line 886
	mov	edx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg1$[ebp], edx
	jmp	SHORT $LN8@af_cjk_hin
$LN7@af_cjk_hin:
	mov	eax, DWORD PTR _seg1$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _seg1$[ebp], eax
$LN8@af_cjk_hin:
	mov	ecx, DWORD PTR _seg1$[ebp]
	cmp	ecx, DWORD PTR _segment_limit$[ebp]
	jae	SHORT $LN49@af_cjk_hin
; Line 888
	mov	edx, DWORD PTR _seg1$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _seg2$[ebp], eax
; Line 890
	cmp	DWORD PTR _seg2$[ebp], 0
	je	SHORT $LN5@af_cjk_hin
; Line 892
	mov	ecx, DWORD PTR _seg2$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	eax, DWORD PTR _seg2$[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 893
	mov	ecx, DWORD PTR _seg2$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _seg1$[ebp]
	je	SHORT $LN5@af_cjk_hin
; Line 895
	mov	eax, DWORD PTR _seg1$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 897
	mov	ecx, DWORD PTR _seg2$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	cmp	edx, DWORD PTR _dist_threshold$[ebp]
	jl	SHORT $LN2@af_cjk_hin
	mov	eax, DWORD PTR _seg2$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 2
	mov	edx, DWORD PTR _seg1$[ebp]
	cmp	DWORD PTR [edx+32], ecx
	jge	SHORT $LN3@af_cjk_hin
$LN2@af_cjk_hin:
; Line 898
	mov	eax, DWORD PTR _seg1$[ebp]
	mov	ecx, DWORD PTR _seg2$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+24], edx
; Line 899
	jmp	SHORT $LN5@af_cjk_hin
$LN3@af_cjk_hin:
; Line 900
	mov	eax, DWORD PTR _seg2$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, 1
	mov	edx, DWORD PTR _seg2$[ebp]
	mov	DWORD PTR [edx+28], ecx
$LN5@af_cjk_hin:
; Line 903
	jmp	SHORT $LN7@af_cjk_hin
$LN49@af_cjk_hin:
; Line 904
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_hints_link_segments ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_f1$1 = -36						; size = 4
_f0$2 = -32						; size = 4
_last$3 = -28						; size = 4
_pt$4 = -24						; size = 4
_seg$ = -20						; size = 4
_error$ = -16						; size = 4
_segment_limit$ = -12					; size = 4
_segments$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_cjk_hints_compute_segments PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 706
	imul	eax, DWORD PTR _dim$[ebp], 28
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 707
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _segments$[ebp], ecx
; Line 708
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx], 48
	add	eax, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _segment_limit$[ebp], eax
; Line 713
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_latin_hints_compute_segments
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 714
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@af_cjk_hin
; Line 715
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN10@af_cjk_hin
$LN9@af_cjk_hin:
; Line 719
	mov	eax, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg$[ebp], eax
	jmp	SHORT $LN8@af_cjk_hin
$LN7@af_cjk_hin:
	mov	ecx, DWORD PTR _seg$[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _seg$[ebp], ecx
$LN8@af_cjk_hin:
	mov	edx, DWORD PTR _seg$[ebp]
	cmp	edx, DWORD PTR _segment_limit$[ebp]
	jae	SHORT $LN6@af_cjk_hin
; Line 721
	mov	eax, DWORD PTR _seg$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pt$4[ebp], ecx
; Line 722
	mov	edx, DWORD PTR _seg$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _last$3[ebp], eax
; Line 723
	mov	ecx, DWORD PTR _pt$4[ebp]
	movzx	edx, WORD PTR [ecx]
	and	edx, 3
	mov	DWORD PTR _f0$2[ebp], edx
; Line 727
	mov	eax, DWORD PTR _seg$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _seg$[ebp]
	mov	BYTE PTR [edx], cl
; Line 729
	jmp	SHORT $LN5@af_cjk_hin
$LN4@af_cjk_hin:
	mov	eax, DWORD PTR _f1$1[ebp]
	mov	DWORD PTR _f0$2[ebp], eax
$LN5@af_cjk_hin:
	mov	ecx, DWORD PTR _pt$4[ebp]
	cmp	ecx, DWORD PTR _last$3[ebp]
	je	SHORT $LN3@af_cjk_hin
; Line 731
	mov	edx, DWORD PTR _pt$4[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _pt$4[ebp], eax
; Line 732
	mov	ecx, DWORD PTR _pt$4[ebp]
	movzx	edx, WORD PTR [ecx]
	and	edx, 3
	mov	DWORD PTR _f1$1[ebp], edx
; Line 734
	cmp	DWORD PTR _f0$2[ebp], 0
	jne	SHORT $LN2@af_cjk_hin
	cmp	DWORD PTR _f1$1[ebp], 0
	jne	SHORT $LN2@af_cjk_hin
; Line 735
	jmp	SHORT $LN3@af_cjk_hin
$LN2@af_cjk_hin:
; Line 737
	mov	eax, DWORD PTR _pt$4[ebp]
	cmp	eax, DWORD PTR _last$3[ebp]
	jne	SHORT $LN1@af_cjk_hin
; Line 738
	mov	ecx, DWORD PTR _seg$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, 1
	mov	eax, DWORD PTR _seg$[ebp]
	mov	BYTE PTR [eax], dl
$LN1@af_cjk_hin:
; Line 739
	jmp	SHORT $LN4@af_cjk_hin
$LN3@af_cjk_hin:
; Line 740
	jmp	$LN7@af_cjk_hin
$LN6@af_cjk_hin:
; Line 742
	xor	eax, eax
$LN10@af_cjk_hin:
; Line 743
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_hints_compute_segments ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv205 = -36						; size = 4
_delta2$1 = -32						; size = 4
_delta1$2 = -28						; size = 4
_dist$3 = -24						; size = 4
_blue$4 = -20						; size = 4
_nn$ = -16						; size = 4
_axis$ = -12						; size = 4
_delta$ = -8						; size = 4
_scale$ = -4						; size = 4
_metrics$ = 8						; size = 4
_scaler$ = 12						; size = 4
_dim$ = 16						; size = 4
_af_cjk_metrics_scale_dim PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 587
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 594
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN23@af_cjk_met
; Line 596
	mov	eax, DWORD PTR _scaler$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _scale$[ebp], ecx
; Line 597
	mov	edx, DWORD PTR _scaler$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _delta$[ebp], eax
; Line 599
	jmp	SHORT $LN22@af_cjk_met
$LN23@af_cjk_met:
; Line 601
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _scale$[ebp], edx
; Line 602
	mov	eax, DWORD PTR _scaler$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _delta$[ebp], ecx
$LN22@af_cjk_met:
; Line 605
	imul	edx, DWORD PTR _dim$[ebp], 1264
	mov	eax, DWORD PTR _metrics$[ebp]
	lea	ecx, DWORD PTR [eax+edx+44]
	mov	DWORD PTR _axis$[ebp], ecx
; Line 607
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR [edx+1256]
	cmp	eax, DWORD PTR _scale$[ebp]
	jne	SHORT $LN21@af_cjk_met
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+1260]
	cmp	edx, DWORD PTR _delta$[ebp]
	jne	SHORT $LN21@af_cjk_met
; Line 608
	jmp	$LN18@af_cjk_met
$LN21@af_cjk_met:
; Line 610
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [eax+1256], ecx
; Line 611
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR [edx+1260], eax
; Line 613
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 614
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 617
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN20@af_cjk_met
$LN19@af_cjk_met:
	mov	edx, DWORD PTR _nn$[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$[ebp], edx
$LN20@af_cjk_met:
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR _nn$[ebp]
	cmp	ecx, DWORD PTR [eax+216]
	jae	$LN18@af_cjk_met
; Line 619
	imul	edx, DWORD PTR _nn$[ebp], 28
	mov	eax, DWORD PTR _axis$[ebp]
	lea	ecx, DWORD PTR [eax+edx+220]
	mov	DWORD PTR _blue$4[ebp], ecx
; Line 623
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _blue$4[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _blue$4[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 624
	mov	eax, DWORD PTR _blue$4[ebp]
	mov	ecx, DWORD PTR _blue$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 625
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blue$4[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _blue$4[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 626
	mov	edx, DWORD PTR _blue$4[ebp]
	mov	eax, DWORD PTR _blue$4[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+20], ecx
; Line 627
	mov	edx, DWORD PTR _blue$4[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _blue$4[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 630
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _blue$4[ebp]
	mov	ecx, DWORD PTR _blue$4[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _dist$3[ebp], eax
; Line 631
	cmp	DWORD PTR _dist$3[ebp], 48		; 00000030H
	jg	$LN17@af_cjk_met
	cmp	DWORD PTR _dist$3[ebp], -48		; ffffffd0H
	jl	$LN17@af_cjk_met
; Line 636
	mov	eax, DWORD PTR _blue$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _blue$4[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 639
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blue$4[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _blue$4[ebp]
	sub	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _delta1$2[ebp], eax
; Line 640
	mov	edx, DWORD PTR _delta1$2[ebp]
	mov	DWORD PTR _delta2$1[ebp], edx
; Line 641
	cmp	DWORD PTR _delta1$2[ebp], 0
	jge	SHORT $LN16@af_cjk_met
; Line 642
	mov	eax, DWORD PTR _delta2$1[ebp]
	neg	eax
	mov	DWORD PTR _delta2$1[ebp], eax
$LN16@af_cjk_met:
; Line 644
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _delta2$1[ebp]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _delta2$1[ebp], eax
$LN15@af_cjk_met:
; Line 646
	mov	eax, 4
	imul	ecx, eax, 89
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN12@af_cjk_met
	mov	edx, DWORD PTR _delta1$2[ebp]
	push	edx
	push	OFFSET $SG10527
	call	_FT_Message
	add	esp, 8
$LN12@af_cjk_met:
	xor	eax, eax
	jne	SHORT $LN15@af_cjk_met
; Line 647
	cmp	DWORD PTR _delta2$1[ebp], 32		; 00000020H
	jge	SHORT $LN11@af_cjk_met
; Line 648
	mov	DWORD PTR _delta2$1[ebp], 0
; Line 653
	jmp	SHORT $LN10@af_cjk_met
$LN11@af_cjk_met:
; Line 654
	mov	ecx, DWORD PTR _delta2$1[ebp]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _delta2$1[ebp], ecx
$LN10@af_cjk_met:
; Line 655
	mov	edx, 4
	imul	eax, edx, 89
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN6@af_cjk_met
	mov	ecx, DWORD PTR _delta2$1[ebp]
	push	ecx
	push	OFFSET $SG10534
	call	_FT_Message
	add	esp, 8
$LN6@af_cjk_met:
	xor	edx, edx
	jne	SHORT $LN10@af_cjk_met
; Line 657
	cmp	DWORD PTR _delta1$2[ebp], 0
	jge	SHORT $LN5@af_cjk_met
; Line 658
	mov	eax, DWORD PTR _delta2$1[ebp]
	neg	eax
	mov	DWORD PTR _delta2$1[ebp], eax
$LN5@af_cjk_met:
; Line 660
	mov	ecx, DWORD PTR _blue$4[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _delta2$1[ebp]
	mov	eax, DWORD PTR _blue$4[ebp]
	mov	DWORD PTR [eax+20], edx
$LN4@af_cjk_met:
; Line 668
	mov	ecx, 4
	imul	edx, ecx, 89
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	$LN1@af_cjk_met
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN26@af_cjk_met
	mov	DWORD PTR tv205[ebp], 72		; 00000048H
	jmp	SHORT $LN27@af_cjk_met
$LN26@af_cjk_met:
	mov	DWORD PTR tv205[ebp], 86		; 00000056H
$LN27@af_cjk_met:
	mov	eax, DWORD PTR _blue$4[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+20]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _blue$4[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+16]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _blue$4[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _blue$4[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _blue$4[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _blue$4[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _nn$[ebp]
	push	edx
	mov	eax, DWORD PTR tv205[ebp]
	push	eax
	push	OFFSET $SG10540
	call	_FT_Message
	add	esp, 52					; 00000034H
$LN1@af_cjk_met:
	xor	ecx, ecx
	jne	$LN4@af_cjk_met
; Line 670
	mov	edx, DWORD PTR _blue$4[ebp]
	mov	eax, DWORD PTR [edx+24]
	or	eax, 1
	mov	ecx, DWORD PTR _blue$4[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN17@af_cjk_met:
; Line 672
	jmp	$LN19@af_cjk_met
$LN18@af_cjk_met:
; Line 673
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_metrics_scale_dim ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv338 = -598						; size = 1
_under_ref$1 = -597					; size = 1
_shoot$2 = -596						; size = 4
_ref$3 = -592						; size = 4
_pp$4 = -588						; size = 4
_last$5 = -584						; size = 4
_first$6 = -580						; size = 4
_nn$7 = -576						; size = 4
_len$8 = -572						; size = 4
_points$9 = -568					; size = 4
_best_point$10 = -564					; size = 4
_best_pos$11 = -560					; size = 4
_y_offset$12 = -552					; size = 4
_glyph_index$13 = -540					; size = 4
_ch$14 = -532						; size = 4
_cjk_blue_name$15 = -524				; size = 16
_blue_shoot$16 = -504					; size = 4
_blue_ref$17 = -500					; size = 4
_p$18 = -496						; size = 4
_bs$ = -492						; size = 4
_bss$ = -488						; size = 4
_sc$ = -484						; size = 4
_outline$ = -476					; size = 20
_axis$ = -452						; size = 4
_error$ = -448						; size = 4
_blue$ = -444						; size = 4
_fill$ = -437						; size = 1
_num_flats$ = -436					; size = 4
_num_fills$ = -432					; size = 4
_flats$ = -424						; size = 204
_fills$ = -212						; size = 204
__$ArrayPad$ = -4					; size = 4
_metrics$ = 8						; size = 4
_face$ = 12						; size = 4
_af_cjk_metrics_init_blues PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 259
	push	ebp
	mov	ebp, esp
	sub	esp, 600				; 00000258H
	push	edi
	lea	edi, DWORD PTR [ebp-600]
	mov	ecx, 150				; 00000096H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 273
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sc$[ebp], ecx
; Line 275
	mov	edx, DWORD PTR _sc$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _bss$[ebp], eax
; Line 276
	mov	ecx, DWORD PTR _bss$[ebp]
	lea	edx, DWORD PTR _af_blue_stringsets[ecx*8]
	mov	DWORD PTR _bs$[ebp], edx
$LN103@af_cjk_met:
; Line 285
	mov	eax, 4
	imul	ecx, eax, 89
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN102@af_cjk_met
	push	OFFSET $SG10317
	call	_FT_Message
	add	esp, 4
$LN102@af_cjk_met:
	xor	edx, edx
	jne	SHORT $LN103@af_cjk_met
; Line 287
	jmp	SHORT $LN99@af_cjk_met
$LN98@af_cjk_met:
	mov	eax, DWORD PTR _bs$[ebp]
	add	eax, 8
	mov	DWORD PTR _bs$[ebp], eax
$LN99@af_cjk_met:
	mov	ecx, DWORD PTR _bs$[ebp]
	cmp	DWORD PTR [ecx], 644			; 00000284H
	je	$LN4@af_cjk_met
; Line 289
	mov	edx, DWORD PTR _bs$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, OFFSET _af_blue_strings
	mov	DWORD PTR _p$18[ebp], eax
; Line 294
	mov	ecx, DWORD PTR _bs$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 2
	je	SHORT $LN96@af_cjk_met
; Line 295
	mov	eax, 1264				; 000004f0H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _metrics$[ebp]
	lea	eax, DWORD PTR [edx+ecx+44]
	mov	DWORD PTR _axis$[ebp], eax
; Line 296
	jmp	SHORT $LN95@af_cjk_met
$LN96@af_cjk_met:
; Line 297
	mov	ecx, 1264				; 000004f0H
	shl	ecx, 0
	mov	edx, DWORD PTR _metrics$[ebp]
	lea	eax, DWORD PTR [edx+ecx+44]
	mov	DWORD PTR _axis$[ebp], eax
$LN95@af_cjk_met:
; Line 307
	mov	DWORD PTR _cjk_blue_name$15[ebp], OFFSET $SG10333
	mov	DWORD PTR _cjk_blue_name$15[ebp+4], OFFSET $SG10336
	mov	DWORD PTR _cjk_blue_name$15[ebp+8], OFFSET $SG10339
	mov	DWORD PTR _cjk_blue_name$15[ebp+12], OFFSET $SG10342
$LN94@af_cjk_met:
; Line 313
	mov	ecx, 4
	imul	edx, ecx, 89
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN93@af_cjk_met
	mov	eax, DWORD PTR _bs$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	and	ecx, 2
	mov	edx, DWORD PTR _bs$[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 1
	or	ecx, eax
	mov	ecx, DWORD PTR _cjk_blue_name$15[ebp+ecx*4]
	push	ecx
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR [edx+216]
	push	eax
	push	OFFSET $SG10347
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN93@af_cjk_met:
	xor	ecx, ecx
	jne	SHORT $LN94@af_cjk_met
; Line 317
	mov	DWORD PTR _num_fills$[ebp], 0
; Line 318
	mov	DWORD PTR _num_flats$[ebp], 0
; Line 320
	mov	BYTE PTR _fill$[ebp], 1
$LN90@af_cjk_met:
; Line 321
	mov	edx, 4
	imul	eax, edx, 89
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN89@af_cjk_met
	push	OFFSET $SG10352
	call	_FT_Message
	add	esp, 4
$LN89@af_cjk_met:
	xor	ecx, ecx
	jne	SHORT $LN90@af_cjk_met
$LN86@af_cjk_met:
; Line 323
	mov	edx, DWORD PTR _p$18[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN85@af_cjk_met
; Line 333
	mov	ecx, DWORD PTR _p$18[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _ch$14[ebp], edx
	mov	eax, DWORD PTR _p$18[ebp]
	add	eax, 1
	mov	DWORD PTR _p$18[ebp], eax
	cmp	DWORD PTR _ch$14[ebp], 128		; 00000080H
	jb	$LN84@af_cjk_met
	cmp	DWORD PTR _ch$14[ebp], 224		; 000000e0H
	jae	SHORT $LN83@af_cjk_met
	mov	DWORD PTR _len$8[ebp], 1
	mov	ecx, DWORD PTR _ch$14[ebp]
	and	ecx, 31					; 0000001fH
	mov	DWORD PTR _ch$14[ebp], ecx
	jmp	SHORT $LN82@af_cjk_met
$LN83@af_cjk_met:
	cmp	DWORD PTR _ch$14[ebp], 240		; 000000f0H
	jae	SHORT $LN81@af_cjk_met
	mov	DWORD PTR _len$8[ebp], 2
	mov	edx, DWORD PTR _ch$14[ebp]
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _ch$14[ebp], edx
	jmp	SHORT $LN82@af_cjk_met
$LN81@af_cjk_met:
	mov	DWORD PTR _len$8[ebp], 3
	mov	eax, DWORD PTR _ch$14[ebp]
	and	eax, 7
	mov	DWORD PTR _ch$14[ebp], eax
$LN82@af_cjk_met:
	jmp	SHORT $LN79@af_cjk_met
$LN78@af_cjk_met:
	mov	ecx, DWORD PTR _len$8[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$8[ebp], ecx
$LN79@af_cjk_met:
	cmp	DWORD PTR _len$8[ebp], 0
	jbe	SHORT $LN84@af_cjk_met
	mov	edx, DWORD PTR _ch$14[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR _p$18[ebp]
	movsx	ecx, BYTE PTR [eax]
	and	ecx, 63					; 0000003fH
	or	edx, ecx
	mov	DWORD PTR _ch$14[ebp], edx
	mov	edx, DWORD PTR _p$18[ebp]
	add	edx, 1
	mov	DWORD PTR _p$18[ebp], edx
	jmp	SHORT $LN78@af_cjk_met
$LN84@af_cjk_met:
; Line 336
	cmp	DWORD PTR _ch$14[ebp], 124		; 0000007cH
	jne	SHORT $LN76@af_cjk_met
; Line 338
	mov	BYTE PTR _fill$[ebp], 0
$LN75@af_cjk_met:
; Line 339
	mov	eax, 4
	imul	ecx, eax, 89
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN74@af_cjk_met
	push	OFFSET $SG10377
	call	_FT_Message
	add	esp, 4
$LN74@af_cjk_met:
	xor	edx, edx
	jne	SHORT $LN75@af_cjk_met
; Line 340
	jmp	$LN86@af_cjk_met
$LN76@af_cjk_met:
; Line 344
	lea	eax, DWORD PTR _y_offset$12[ebp]
	push	eax
	lea	ecx, DWORD PTR _glyph_index$13[ebp]
	push	ecx
	mov	edx, DWORD PTR _ch$14[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	call	_af_get_char_index
	add	esp, 16					; 00000010H
; Line 345
	cmp	DWORD PTR _glyph_index$13[ebp], 0
	jne	SHORT $LN71@af_cjk_met
$LN70@af_cjk_met:
; Line 347
	mov	ecx, 4
	imul	edx, ecx, 89
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN69@af_cjk_met
	mov	eax, DWORD PTR _ch$14[ebp]
	push	eax
	push	OFFSET $SG10383
	call	_FT_Message
	add	esp, 8
$LN69@af_cjk_met:
	xor	ecx, ecx
	jne	SHORT $LN70@af_cjk_met
; Line 348
	jmp	$LN86@af_cjk_met
$LN71@af_cjk_met:
; Line 351
	push	1
	mov	edx, DWORD PTR _glyph_index$13[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_FT_Load_Glyph
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 352
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	add	edx, 108				; 0000006cH
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _outline$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _outline$[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _outline$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _outline$[ebp+12], ecx
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR _outline$[ebp+16], edx
; Line 353
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN64@af_cjk_met
	movsx	eax, WORD PTR _outline$[ebp+2]
	test	eax, eax
	jg	SHORT $LN66@af_cjk_met
$LN64@af_cjk_met:
; Line 355
	mov	ecx, 4
	imul	edx, ecx, 89
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN63@af_cjk_met
	mov	eax, DWORD PTR _ch$14[ebp]
	push	eax
	push	OFFSET $SG10390
	call	_FT_Message
	add	esp, 8
$LN63@af_cjk_met:
	xor	ecx, ecx
	jne	SHORT $LN64@af_cjk_met
; Line 356
	jmp	$LN86@af_cjk_met
$LN66@af_cjk_met:
; Line 360
	mov	edx, DWORD PTR _outline$[ebp+4]
	mov	DWORD PTR _points$9[ebp], edx
; Line 361
	mov	DWORD PTR _best_point$10[ebp], -1
; Line 362
	mov	DWORD PTR _best_pos$11[ebp], 0
; Line 366
	mov	DWORD PTR _first$6[ebp], 0
; Line 367
	mov	DWORD PTR _last$5[ebp], -1
; Line 370
	mov	DWORD PTR _nn$7[ebp], 0
	jmp	SHORT $LN60@af_cjk_met
$LN59@af_cjk_met:
	mov	eax, DWORD PTR _last$5[ebp]
	add	eax, 1
	mov	DWORD PTR _first$6[ebp], eax
	mov	ecx, DWORD PTR _nn$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$7[ebp], ecx
$LN60@af_cjk_met:
	movsx	edx, WORD PTR _outline$[ebp]
	cmp	DWORD PTR _nn$7[ebp], edx
	jge	$LN30@af_cjk_met
; Line 375
	mov	eax, DWORD PTR _nn$7[ebp]
	mov	ecx, DWORD PTR _outline$[ebp+12]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _last$5[ebp], edx
; Line 380
	mov	eax, DWORD PTR _last$5[ebp]
	cmp	eax, DWORD PTR _first$6[ebp]
	jg	SHORT $LN57@af_cjk_met
; Line 381
	jmp	SHORT $LN59@af_cjk_met
$LN57@af_cjk_met:
; Line 383
	mov	ecx, DWORD PTR _bs$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 2
	je	$LN56@af_cjk_met
; Line 385
	mov	eax, DWORD PTR _bs$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	and	ecx, 1
	je	SHORT $LN55@af_cjk_met
; Line 387
	mov	edx, DWORD PTR _first$6[ebp]
	mov	DWORD PTR _pp$4[ebp], edx
	jmp	SHORT $LN54@af_cjk_met
$LN53@af_cjk_met:
	mov	eax, DWORD PTR _pp$4[ebp]
	add	eax, 1
	mov	DWORD PTR _pp$4[ebp], eax
$LN54@af_cjk_met:
	mov	ecx, DWORD PTR _pp$4[ebp]
	cmp	ecx, DWORD PTR _last$5[ebp]
	jg	SHORT $LN52@af_cjk_met
; Line 388
	cmp	DWORD PTR _best_point$10[ebp], 0
	jl	SHORT $LN50@af_cjk_met
	mov	edx, DWORD PTR _pp$4[ebp]
	mov	eax, DWORD PTR _points$9[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	cmp	ecx, DWORD PTR _best_pos$11[ebp]
	jle	SHORT $LN51@af_cjk_met
$LN50@af_cjk_met:
; Line 390
	mov	edx, DWORD PTR _pp$4[ebp]
	mov	DWORD PTR _best_point$10[ebp], edx
; Line 391
	mov	eax, DWORD PTR _pp$4[ebp]
	mov	ecx, DWORD PTR _points$9[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _best_pos$11[ebp], edx
$LN51@af_cjk_met:
; Line 393
	jmp	SHORT $LN53@af_cjk_met
$LN52@af_cjk_met:
; Line 394
	jmp	SHORT $LN49@af_cjk_met
$LN55@af_cjk_met:
; Line 396
	mov	eax, DWORD PTR _first$6[ebp]
	mov	DWORD PTR _pp$4[ebp], eax
	jmp	SHORT $LN48@af_cjk_met
$LN47@af_cjk_met:
	mov	ecx, DWORD PTR _pp$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _pp$4[ebp], ecx
$LN48@af_cjk_met:
	mov	edx, DWORD PTR _pp$4[ebp]
	cmp	edx, DWORD PTR _last$5[ebp]
	jg	SHORT $LN49@af_cjk_met
; Line 397
	cmp	DWORD PTR _best_point$10[ebp], 0
	jl	SHORT $LN44@af_cjk_met
	mov	eax, DWORD PTR _pp$4[ebp]
	mov	ecx, DWORD PTR _points$9[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	cmp	edx, DWORD PTR _best_pos$11[ebp]
	jge	SHORT $LN45@af_cjk_met
$LN44@af_cjk_met:
; Line 399
	mov	eax, DWORD PTR _pp$4[ebp]
	mov	DWORD PTR _best_point$10[ebp], eax
; Line 400
	mov	ecx, DWORD PTR _pp$4[ebp]
	mov	edx, DWORD PTR _points$9[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _best_pos$11[ebp], eax
$LN45@af_cjk_met:
; Line 402
	jmp	SHORT $LN47@af_cjk_met
$LN49@af_cjk_met:
; Line 404
	jmp	$LN43@af_cjk_met
$LN56@af_cjk_met:
; Line 406
	mov	ecx, DWORD PTR _bs$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 1
	je	SHORT $LN42@af_cjk_met
; Line 408
	mov	eax, DWORD PTR _first$6[ebp]
	mov	DWORD PTR _pp$4[ebp], eax
	jmp	SHORT $LN41@af_cjk_met
$LN40@af_cjk_met:
	mov	ecx, DWORD PTR _pp$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _pp$4[ebp], ecx
$LN41@af_cjk_met:
	mov	edx, DWORD PTR _pp$4[ebp]
	cmp	edx, DWORD PTR _last$5[ebp]
	jg	SHORT $LN39@af_cjk_met
; Line 409
	cmp	DWORD PTR _best_point$10[ebp], 0
	jl	SHORT $LN37@af_cjk_met
	mov	eax, DWORD PTR _pp$4[ebp]
	mov	ecx, DWORD PTR _points$9[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	cmp	edx, DWORD PTR _best_pos$11[ebp]
	jle	SHORT $LN38@af_cjk_met
$LN37@af_cjk_met:
; Line 411
	mov	eax, DWORD PTR _pp$4[ebp]
	mov	DWORD PTR _best_point$10[ebp], eax
; Line 412
	mov	ecx, DWORD PTR _pp$4[ebp]
	mov	edx, DWORD PTR _points$9[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _best_pos$11[ebp], eax
$LN38@af_cjk_met:
; Line 414
	jmp	SHORT $LN40@af_cjk_met
$LN39@af_cjk_met:
; Line 415
	jmp	SHORT $LN43@af_cjk_met
$LN42@af_cjk_met:
; Line 417
	mov	ecx, DWORD PTR _first$6[ebp]
	mov	DWORD PTR _pp$4[ebp], ecx
	jmp	SHORT $LN35@af_cjk_met
$LN34@af_cjk_met:
	mov	edx, DWORD PTR _pp$4[ebp]
	add	edx, 1
	mov	DWORD PTR _pp$4[ebp], edx
$LN35@af_cjk_met:
	mov	eax, DWORD PTR _pp$4[ebp]
	cmp	eax, DWORD PTR _last$5[ebp]
	jg	SHORT $LN43@af_cjk_met
; Line 418
	cmp	DWORD PTR _best_point$10[ebp], 0
	jl	SHORT $LN31@af_cjk_met
	mov	ecx, DWORD PTR _pp$4[ebp]
	mov	edx, DWORD PTR _points$9[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+4]
	cmp	eax, DWORD PTR _best_pos$11[ebp]
	jge	SHORT $LN32@af_cjk_met
$LN31@af_cjk_met:
; Line 420
	mov	ecx, DWORD PTR _pp$4[ebp]
	mov	DWORD PTR _best_point$10[ebp], ecx
; Line 421
	mov	edx, DWORD PTR _pp$4[ebp]
	mov	eax, DWORD PTR _points$9[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+4]
	mov	DWORD PTR _best_pos$11[ebp], ecx
$LN32@af_cjk_met:
; Line 423
	jmp	SHORT $LN34@af_cjk_met
$LN43@af_cjk_met:
; Line 425
	jmp	$LN59@af_cjk_met
$LN30@af_cjk_met:
; Line 427
	mov	edx, 4
	imul	eax, edx, 89
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN29@af_cjk_met
	mov	ecx, DWORD PTR _best_pos$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _ch$14[ebp]
	push	edx
	push	OFFSET $SG10429
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN29@af_cjk_met:
	xor	eax, eax
	jne	SHORT $LN30@af_cjk_met
; Line 430
	movzx	ecx, BYTE PTR _fill$[ebp]
	test	ecx, ecx
	je	SHORT $LN26@af_cjk_met
; Line 431
	mov	edx, DWORD PTR _num_fills$[ebp]
	mov	eax, DWORD PTR _best_pos$11[ebp]
	mov	DWORD PTR _fills$[ebp+edx*4], eax
	mov	ecx, DWORD PTR _num_fills$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_fills$[ebp], ecx
; Line 432
	jmp	SHORT $LN25@af_cjk_met
$LN26@af_cjk_met:
; Line 433
	mov	edx, DWORD PTR _num_flats$[ebp]
	mov	eax, DWORD PTR _best_pos$11[ebp]
	mov	DWORD PTR _flats$[ebp+edx*4], eax
	mov	ecx, DWORD PTR _num_flats$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_flats$[ebp], ecx
$LN25@af_cjk_met:
; Line 434
	jmp	$LN86@af_cjk_met
$LN85@af_cjk_met:
; Line 436
	cmp	DWORD PTR _num_flats$[ebp], 0
	jne	SHORT $LN24@af_cjk_met
	cmp	DWORD PTR _num_fills$[ebp], 0
	jne	SHORT $LN24@af_cjk_met
$LN23@af_cjk_met:
; Line 442
	mov	edx, 4
	imul	eax, edx, 89
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN22@af_cjk_met
	push	OFFSET $SG10437
	call	_FT_Message
	add	esp, 4
$LN22@af_cjk_met:
	xor	ecx, ecx
	jne	SHORT $LN23@af_cjk_met
; Line 443
	jmp	$LN98@af_cjk_met
$LN24@af_cjk_met:
; Line 449
	lea	edx, DWORD PTR _fills$[ebp]
	push	edx
	mov	eax, DWORD PTR _num_fills$[ebp]
	push	eax
	call	_af_sort_pos
	add	esp, 8
; Line 450
	lea	ecx, DWORD PTR _flats$[ebp]
	push	ecx
	mov	edx, DWORD PTR _num_flats$[ebp]
	push	edx
	call	_af_sort_pos
	add	esp, 8
; Line 452
	mov	eax, DWORD PTR _axis$[ebp]
	imul	ecx, DWORD PTR [eax+216], 28
	mov	edx, DWORD PTR _axis$[ebp]
	lea	eax, DWORD PTR [edx+ecx+220]
	mov	DWORD PTR _blue$[ebp], eax
; Line 453
	mov	ecx, DWORD PTR _blue$[ebp]
	mov	DWORD PTR _blue_ref$17[ebp], ecx
; Line 454
	mov	edx, DWORD PTR _blue$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _blue_shoot$16[ebp], edx
; Line 456
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	add	ecx, 1
	mov	edx, DWORD PTR _axis$[ebp]
	mov	DWORD PTR [edx+216], ecx
; Line 458
	cmp	DWORD PTR _num_flats$[ebp], 0
	jne	SHORT $LN19@af_cjk_met
; Line 461
	mov	eax, DWORD PTR _num_fills$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _blue_shoot$16[ebp]
	mov	edx, DWORD PTR _fills$[ebp+eax*4]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _blue_ref$17[ebp]
	mov	ecx, DWORD PTR _blue_shoot$16[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN18@af_cjk_met
$LN19@af_cjk_met:
; Line 463
	cmp	DWORD PTR _num_fills$[ebp], 0
	jne	SHORT $LN17@af_cjk_met
; Line 466
	mov	eax, DWORD PTR _num_flats$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _blue_shoot$16[ebp]
	mov	edx, DWORD PTR _flats$[ebp+eax*4]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _blue_ref$17[ebp]
	mov	ecx, DWORD PTR _blue_shoot$16[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 468
	jmp	SHORT $LN18@af_cjk_met
$LN17@af_cjk_met:
; Line 470
	mov	eax, DWORD PTR _num_fills$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _blue_ref$17[ebp]
	mov	edx, DWORD PTR _fills$[ebp+eax*4]
	mov	DWORD PTR [ecx], edx
; Line 471
	mov	eax, DWORD PTR _num_flats$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _blue_shoot$16[ebp]
	mov	edx, DWORD PTR _flats$[ebp+eax*4]
	mov	DWORD PTR [ecx], edx
$LN18@af_cjk_met:
; Line 476
	mov	eax, DWORD PTR _blue_shoot$16[ebp]
	mov	ecx, DWORD PTR _blue_ref$17[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	$LN15@af_cjk_met
; Line 478
	mov	eax, DWORD PTR _blue_ref$17[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ref$3[ebp], ecx
; Line 479
	mov	edx, DWORD PTR _blue_shoot$16[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _shoot$2[ebp], eax
; Line 480
	mov	ecx, DWORD PTR _shoot$2[ebp]
	cmp	ecx, DWORD PTR _ref$3[ebp]
	jge	SHORT $LN106@af_cjk_met
	mov	BYTE PTR tv338[ebp], 1
	jmp	SHORT $LN107@af_cjk_met
$LN106@af_cjk_met:
	mov	BYTE PTR tv338[ebp], 0
$LN107@af_cjk_met:
	mov	dl, BYTE PTR tv338[ebp]
	mov	BYTE PTR _under_ref$1[ebp], dl
; Line 484
	mov	eax, DWORD PTR _bs$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	and	ecx, 1
	movzx	edx, BYTE PTR _under_ref$1[ebp]
	xor	ecx, edx
	je	SHORT $LN15@af_cjk_met
; Line 487
	mov	eax, DWORD PTR _shoot$2[ebp]
	add	eax, DWORD PTR _ref$3[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _blue_shoot$16[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _blue_ref$17[ebp]
	mov	eax, DWORD PTR _blue_shoot$16[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
$LN13@af_cjk_met:
; Line 490
	mov	edx, 4
	imul	eax, edx, 89
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN12@af_cjk_met
	push	OFFSET $SG10452
	call	_FT_Message
	add	esp, 4
$LN12@af_cjk_met:
	xor	ecx, ecx
	jne	SHORT $LN13@af_cjk_met
$LN15@af_cjk_met:
; Line 494
	mov	edx, DWORD PTR _blue$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 495
	mov	eax, DWORD PTR _bs$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	and	ecx, 1
	je	SHORT $LN8@af_cjk_met
; Line 496
	mov	edx, DWORD PTR _blue$[ebp]
	mov	eax, DWORD PTR [edx+24]
	or	eax, 2
	mov	ecx, DWORD PTR _blue$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN8@af_cjk_met:
; Line 500
	mov	edx, 4
	imul	eax, edx, 89
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN7@af_cjk_met
	mov	ecx, DWORD PTR _blue_shoot$16[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _blue_ref$17[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG10458
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN7@af_cjk_met:
	xor	edx, edx
	jne	SHORT $LN8@af_cjk_met
; Line 501
	jmp	$LN98@af_cjk_met
$LN4@af_cjk_met:
; Line 503
	mov	eax, 4
	imul	ecx, eax, 89
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN3@af_cjk_met
	push	OFFSET $SG10463
	call	_FT_Message
	add	esp, 4
$LN3@af_cjk_met:
	xor	edx, edx
	jne	SHORT $LN4@af_cjk_met
; Line 506
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN118@af_cjk_met
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 600				; 00000258H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN118@af_cjk_met:
	DD	6
	DD	$LN117@af_cjk_met
$LN117@af_cjk_met:
	DD	-212					; ffffff2cH
	DD	204					; 000000ccH
	DD	$LN111@af_cjk_met
	DD	-424					; fffffe58H
	DD	204					; 000000ccH
	DD	$LN112@af_cjk_met
	DD	-476					; fffffe24H
	DD	20					; 00000014H
	DD	$LN113@af_cjk_met
	DD	-524					; fffffdf4H
	DD	16					; 00000010H
	DD	$LN114@af_cjk_met
	DD	-540					; fffffde4H
	DD	4
	DD	$LN115@af_cjk_met
	DD	-552					; fffffdd8H
	DD	4
	DD	$LN116@af_cjk_met
$LN116@af_cjk_met:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN115@af_cjk_met:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN114@af_cjk_met:
	DB	99					; 00000063H
	DB	106					; 0000006aH
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN113@af_cjk_met:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN112@af_cjk_met:
	DB	102					; 00000066H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN111@af_cjk_met:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
_af_cjk_metrics_init_blues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_axis$ = -12						; size = 4
_dim$ = -8						; size = 4
_error$ = -4						; size = 4
_hints$ = 8						; size = 4
_outline$ = 12						; size = 4
_metrics$ = 16						; size = 4
_af_latin_hints_apply PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 2805
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2812
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_glyph_hints_reload
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2813
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@af_latin_h
; Line 2814
	jmp	$Exit$14
$LN11@af_latin_h:
; Line 2821
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+100]
	and	eax, 1
	jne	SHORT $LN10@af_latin_h
; Line 2824
	mov	ecx, 1264				; 000004f0H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _metrics$[ebp]
	lea	ecx, DWORD PTR [eax+edx+44]
	mov	DWORD PTR _axis$[ebp], ecx
; Line 2828
	push	0
	mov	edx, DWORD PTR _axis$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_latin_hints_detect_features
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2829
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@af_latin_h
; Line 2830
	jmp	$Exit$14
$LN10@af_latin_h:
; Line 2833
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	and	ecx, 2
	jne	SHORT $LN8@af_latin_h
; Line 2835
	mov	edx, 1264				; 000004f0H
	shl	edx, 0
	mov	eax, DWORD PTR _metrics$[ebp]
	lea	ecx, DWORD PTR [eax+edx+44]
	mov	DWORD PTR _axis$[ebp], ecx
; Line 2839
	push	1
	mov	edx, DWORD PTR _axis$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_latin_hints_detect_features
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2840
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@af_latin_h
; Line 2841
	jmp	$Exit$14
$LN7@af_latin_h:
; Line 2843
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_latin_hints_compute_blue_edges
	add	esp, 8
$LN8@af_latin_h:
; Line 2847
	mov	DWORD PTR _dim$[ebp], 0
	jmp	SHORT $LN6@af_latin_h
$LN5@af_latin_h:
	mov	edx, DWORD PTR _dim$[ebp]
	add	edx, 1
	mov	DWORD PTR _dim$[ebp], edx
$LN6@af_latin_h:
	cmp	DWORD PTR _dim$[ebp], 2
	jge	SHORT $LN4@af_latin_h
; Line 2867
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN1@af_latin_h
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	and	ecx, 1
	je	SHORT $LN2@af_latin_h
$LN1@af_latin_h:
	cmp	DWORD PTR _dim$[ebp], 1
	jne	SHORT $LN3@af_latin_h
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+100]
	and	eax, 2
	jne	SHORT $LN3@af_latin_h
$LN2@af_latin_h:
; Line 2869
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_latin_hint_edges
	add	esp, 8
; Line 2870
	mov	eax, DWORD PTR _dim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_glyph_hints_align_edge_points
	add	esp, 8
; Line 2871
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_align_strong_points
	add	esp, 8
; Line 2872
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_glyph_hints_align_weak_points
	add	esp, 8
$LN3@af_latin_h:
; Line 2874
	jmp	SHORT $LN5@af_latin_h
$LN4@af_latin_h:
; Line 2876
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_glyph_hints_save
	add	esp, 8
$Exit$14:
; Line 2879
	mov	eax, DWORD PTR _error$[ebp]
; Line 2880
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_latin_hints_apply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv502 = -172						; size = 4
tv81 = -168						; size = 4
_after$1 = -164						; size = 4
_before$2 = -160					; size = 4
_delta$3 = -156						; size = 4
_delta$4 = -152						; size = 4
_span$5 = -148						; size = 4
_dist2$6 = -144						; size = 4
_dist1$7 = -140						; size = 4
_edge3$8 = -136						; size = 4
_edge2$9 = -132						; size = 4
_edge1$10 = -128					; size = 4
_d_off$11 = -124					; size = 4
_u_off$12 = -120					; size = 4
_delta2$13 = -116					; size = 4
_delta1$14 = -112					; size = 4
_cur_pos2$15 = -108					; size = 4
_cur_pos1$16 = -104					; size = 4
_cur_len$17 = -100					; size = 4
_org_center$18 = -96					; size = 4
_org_len$19 = -92					; size = 4
_org_pos$20 = -88					; size = 4
_d_off$21 = -84						; size = 4
_u_off$22 = -80						; size = 4
_error2$23 = -76					; size = 4
_error1$24 = -72					; size = 4
_cur_pos1$25 = -68					; size = 4
_cur_len$26 = -64					; size = 4
_org_center$27 = -60					; size = 4
_org_len$28 = -56					; size = 4
_edge2$29 = -52						; size = 4
_neutral2$30 = -46					; size = 1
_neutral$31 = -45					; size = 1
_edge2$32 = -44						; size = 4
_edge1$33 = -40						; size = 4
_blue$34 = -36						; size = 4
_num_actions$ = -32					; size = 4
_has_serifs$ = -28					; size = 4
_anchor$ = -24						; size = 4
_edge$ = -20						; size = 4
_n_edges$ = -16						; size = 4
_edge_limit$ = -12					; size = 4
_edges$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_latin_hint_edges PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 2287
	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	edi
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 43					; 0000002bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2288
	imul	eax, DWORD PTR _dim$[ebp], 28
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 2289
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _edges$[ebp], ecx
; Line 2290
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx+12], 48
	add	eax, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge_limit$[ebp], eax
; Line 2293
	mov	DWORD PTR _anchor$[ebp], 0
; Line 2294
	mov	DWORD PTR _has_serifs$[ebp], 0
; Line 2297
	mov	DWORD PTR _num_actions$[ebp], 0
$LN152@af_latin_h:
; Line 2303
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN149@af_latin_h
	cmp	DWORD PTR _dim$[ebp], 1
	jne	SHORT $LN155@af_latin_h
	mov	DWORD PTR tv81[ebp], OFFSET $SG9955
	jmp	SHORT $LN156@af_latin_h
$LN155@af_latin_h:
	mov	DWORD PTR tv81[ebp], OFFSET $SG9956
$LN156@af_latin_h:
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _af_style_names[eax*4]
	push	ecx
	mov	edx, DWORD PTR tv81[ebp]
	push	edx
	push	OFFSET $SG9957
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN149@af_latin_h:
	xor	eax, eax
	jne	SHORT $LN152@af_latin_h
; Line 2308
	cmp	DWORD PTR _dim$[ebp], 1
	jne	$LN145@af_latin_h
	mov	ecx, 1
	test	ecx, ecx
	je	$LN145@af_latin_h
; Line 2310
	mov	edx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge$[ebp], edx
	jmp	SHORT $LN147@af_latin_h
$LN146@af_latin_h:
	mov	eax, DWORD PTR _edge$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _edge$[ebp], eax
$LN147@af_latin_h:
	mov	ecx, DWORD PTR _edge$[ebp]
	cmp	ecx, DWORD PTR _edge_limit$[ebp]
	jae	$LN145@af_latin_h
; Line 2316
	mov	edx, DWORD PTR _edge$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	and	eax, 4
	je	SHORT $LN144@af_latin_h
; Line 2317
	jmp	SHORT $LN146@af_latin_h
$LN144@af_latin_h:
; Line 2319
	mov	DWORD PTR _edge1$33[ebp], 0
; Line 2320
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _edge2$32[ebp], edx
; Line 2331
	mov	eax, DWORD PTR _edge$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN138@af_latin_h
	cmp	DWORD PTR _edge2$32[ebp], 0
	je	SHORT $LN138@af_latin_h
	mov	ecx, DWORD PTR _edge2$32[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN138@af_latin_h
; Line 2333
	mov	edx, DWORD PTR _edge$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	and	eax, 8
	mov	BYTE PTR _neutral$31[ebp], al
; Line 2334
	mov	ecx, DWORD PTR _edge2$32[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	and	edx, 8
	mov	BYTE PTR _neutral2$30[ebp], dl
; Line 2337
	movzx	eax, BYTE PTR _neutral$31[ebp]
	test	eax, eax
	je	SHORT $LN140@af_latin_h
	movzx	ecx, BYTE PTR _neutral2$30[ebp]
	test	ecx, ecx
	jne	SHORT $LN141@af_latin_h
$LN140@af_latin_h:
	movzx	edx, BYTE PTR _neutral2$30[ebp]
	test	edx, edx
	je	SHORT $LN142@af_latin_h
$LN141@af_latin_h:
; Line 2339
	mov	eax, DWORD PTR _edge2$32[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 2340
	mov	ecx, DWORD PTR _edge2$32[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	and	edx, -9					; fffffff7H
	mov	eax, DWORD PTR _edge2$32[ebp]
	mov	BYTE PTR [eax+12], dl
	jmp	SHORT $LN138@af_latin_h
$LN142@af_latin_h:
; Line 2342
	movzx	ecx, BYTE PTR _neutral$31[ebp]
	test	ecx, ecx
	je	SHORT $LN138@af_latin_h
; Line 2344
	mov	edx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 2345
	mov	eax, DWORD PTR _edge$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	and	ecx, -9					; fffffff7H
	mov	edx, DWORD PTR _edge$[ebp]
	mov	BYTE PTR [edx+12], cl
$LN138@af_latin_h:
; Line 2349
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _blue$34[ebp], ecx
; Line 2350
	cmp	DWORD PTR _blue$34[ebp], 0
	je	SHORT $LN137@af_latin_h
; Line 2351
	mov	edx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _edge1$33[ebp], edx
	jmp	SHORT $LN135@af_latin_h
$LN137@af_latin_h:
; Line 2354
	cmp	DWORD PTR _edge2$32[ebp], 0
	je	SHORT $LN135@af_latin_h
	mov	eax, DWORD PTR _edge2$32[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN135@af_latin_h
; Line 2356
	mov	ecx, DWORD PTR _edge2$32[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _blue$34[ebp], edx
; Line 2357
	mov	eax, DWORD PTR _edge2$32[ebp]
	mov	DWORD PTR _edge1$33[ebp], eax
; Line 2358
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _edge2$32[ebp], ecx
$LN135@af_latin_h:
; Line 2361
	cmp	DWORD PTR _edge1$33[ebp], 0
	jne	SHORT $LN134@af_latin_h
; Line 2362
	jmp	$LN146@af_latin_h
$LN134@af_latin_h:
; Line 2365
	cmp	DWORD PTR _anchor$[ebp], 0
	jne	$LN133@af_latin_h
$LN132@af_latin_h:
; Line 2369
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN129@af_latin_h
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _edge1$33[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _blue$34[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge1$33[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge1$33[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG9986
	call	_FT_Message
	add	esp, 36					; 00000024H
$LN129@af_latin_h:
	xor	edx, edx
	jne	$LN132@af_latin_h
; Line 2370
	jmp	SHORT $LN125@af_latin_h
$LN133@af_latin_h:
; Line 2374
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN124@af_latin_h
	mov	edx, DWORD PTR _edge1$33[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _blue$34[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge1$33[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge1$33[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG9992
	call	_FT_Message
	add	esp, 32					; 00000020H
$LN124@af_latin_h:
	xor	edx, edx
	jne	SHORT $LN133@af_latin_h
$LN125@af_latin_h:
; Line 2376
	mov	eax, DWORD PTR _num_actions$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_actions$[ebp], eax
; Line 2379
	mov	ecx, DWORD PTR _edge1$33[ebp]
	mov	edx, DWORD PTR _blue$34[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
; Line 2380
	mov	ecx, DWORD PTR _edge1$33[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge1$33[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 2382
	cmp	DWORD PTR _edge2$32[ebp], 0
	je	SHORT $LN123@af_latin_h
	mov	ecx, DWORD PTR _edge2$32[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN123@af_latin_h
; Line 2384
	mov	edx, DWORD PTR _edge2$32[ebp]
	push	edx
	mov	eax, DWORD PTR _edge1$33[ebp]
	push	eax
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_latin_align_linked_edge
	add	esp, 16					; 00000010H
; Line 2385
	mov	eax, DWORD PTR _edge2$32[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	or	ecx, 4
	mov	edx, DWORD PTR _edge2$32[ebp]
	mov	BYTE PTR [edx+12], cl
; Line 2388
	mov	eax, DWORD PTR _num_actions$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_actions$[ebp], eax
$LN123@af_latin_h:
; Line 2392
	cmp	DWORD PTR _anchor$[ebp], 0
	jne	SHORT $LN122@af_latin_h
; Line 2393
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _anchor$[ebp], ecx
$LN122@af_latin_h:
; Line 2394
	jmp	$LN146@af_latin_h
$LN145@af_latin_h:
; Line 2399
	mov	edx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge$[ebp], edx
	jmp	SHORT $LN121@af_latin_h
$LN120@af_latin_h:
	mov	eax, DWORD PTR _edge$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _edge$[ebp], eax
$LN121@af_latin_h:
	mov	ecx, DWORD PTR _edge$[ebp]
	cmp	ecx, DWORD PTR _edge_limit$[ebp]
	jae	$LN119@af_latin_h
; Line 2404
	mov	edx, DWORD PTR _edge$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	and	eax, 4
	je	SHORT $LN118@af_latin_h
; Line 2405
	jmp	SHORT $LN120@af_latin_h
$LN118@af_latin_h:
; Line 2408
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _edge2$29[ebp], edx
; Line 2409
	cmp	DWORD PTR _edge2$29[ebp], 0
	jne	SHORT $LN117@af_latin_h
; Line 2411
	mov	eax, DWORD PTR _has_serifs$[ebp]
	add	eax, 1
	mov	DWORD PTR _has_serifs$[ebp], eax
; Line 2412
	jmp	SHORT $LN120@af_latin_h
$LN117@af_latin_h:
; Line 2418
	mov	ecx, DWORD PTR _edge2$29[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN116@af_latin_h
$LN115@af_latin_h:
; Line 2420
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN112@af_latin_h
	mov	eax, DWORD PTR _edge2$29[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10006
	call	_FT_Message
	add	esp, 8
$LN112@af_latin_h:
	xor	edx, edx
	jne	SHORT $LN115@af_latin_h
; Line 2422
	mov	eax, DWORD PTR _edge$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge2$29[ebp]
	push	ecx
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_latin_align_linked_edge
	add	esp, 16					; 00000010H
; Line 2423
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge$[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 2426
	mov	ecx, DWORD PTR _num_actions$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_actions$[ebp], ecx
; Line 2428
	jmp	$LN120@af_latin_h
$LN116@af_latin_h:
; Line 2431
	cmp	DWORD PTR _anchor$[ebp], 0
	jne	$LN111@af_latin_h
; Line 2439
	mov	edx, DWORD PTR _edge2$29[ebp]
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _org_len$28[ebp], ecx
; Line 2443
	mov	edx, DWORD PTR _edge2$29[ebp]
	movzx	eax, BYTE PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _org_len$28[ebp]
	push	eax
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_latin_compute_stem_width
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cur_len$26[ebp], eax
; Line 2448
	cmp	DWORD PTR _cur_len$26[ebp], 64		; 00000040H
	jg	SHORT $LN110@af_latin_h
; Line 2451
	mov	DWORD PTR _u_off$22[ebp], 32		; 00000020H
; Line 2452
	mov	DWORD PTR _d_off$21[ebp], 32		; 00000020H
; Line 2454
	jmp	SHORT $LN109@af_latin_h
$LN110@af_latin_h:
; Line 2457
	mov	DWORD PTR _u_off$22[ebp], 38		; 00000026H
; Line 2458
	mov	DWORD PTR _d_off$21[ebp], 26		; 0000001aH
$LN109@af_latin_h:
; Line 2461
	cmp	DWORD PTR _cur_len$26[ebp], 96		; 00000060H
	jge	$LN108@af_latin_h
; Line 2463
	mov	eax, DWORD PTR _org_len$28[ebp]
	sar	eax, 1
	mov	ecx, DWORD PTR _edge$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _org_center$27[ebp], eax
; Line 2464
	mov	edx, DWORD PTR _org_center$27[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _cur_pos1$25[ebp], edx
; Line 2466
	mov	eax, DWORD PTR _cur_pos1$25[ebp]
	sub	eax, DWORD PTR _u_off$22[ebp]
	mov	ecx, DWORD PTR _org_center$27[ebp]
	sub	ecx, eax
	mov	DWORD PTR _error1$24[ebp], ecx
; Line 2467
	jns	SHORT $LN107@af_latin_h
; Line 2468
	mov	edx, DWORD PTR _error1$24[ebp]
	neg	edx
	mov	DWORD PTR _error1$24[ebp], edx
$LN107@af_latin_h:
; Line 2470
	mov	eax, DWORD PTR _cur_pos1$25[ebp]
	add	eax, DWORD PTR _d_off$21[ebp]
	mov	ecx, DWORD PTR _org_center$27[ebp]
	sub	ecx, eax
	mov	DWORD PTR _error2$23[ebp], ecx
; Line 2471
	jns	SHORT $LN106@af_latin_h
; Line 2472
	mov	edx, DWORD PTR _error2$23[ebp]
	neg	edx
	mov	DWORD PTR _error2$23[ebp], edx
$LN106@af_latin_h:
; Line 2474
	mov	eax, DWORD PTR _error1$24[ebp]
	cmp	eax, DWORD PTR _error2$23[ebp]
	jge	SHORT $LN105@af_latin_h
; Line 2475
	mov	ecx, DWORD PTR _cur_pos1$25[ebp]
	sub	ecx, DWORD PTR _u_off$22[ebp]
	mov	DWORD PTR _cur_pos1$25[ebp], ecx
; Line 2476
	jmp	SHORT $LN104@af_latin_h
$LN105@af_latin_h:
; Line 2477
	mov	edx, DWORD PTR _cur_pos1$25[ebp]
	add	edx, DWORD PTR _d_off$21[ebp]
	mov	DWORD PTR _cur_pos1$25[ebp], edx
$LN104@af_latin_h:
; Line 2479
	mov	eax, DWORD PTR _cur_len$26[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _cur_pos1$25[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 2480
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _cur_len$26[ebp]
	mov	edx, DWORD PTR _edge2$29[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 2482
	jmp	SHORT $LN103@af_latin_h
$LN108@af_latin_h:
; Line 2483
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN103@af_latin_h:
; Line 2485
	mov	eax, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _anchor$[ebp], eax
; Line 2486
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge$[ebp]
	mov	BYTE PTR [eax+12], dl
$LN102@af_latin_h:
; Line 2492
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	$LN99@af_latin_h
	mov	eax, DWORD PTR _edge2$29[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _edge2$29[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge2$29[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10030
	call	_FT_Message
	add	esp, 44					; 0000002cH
$LN99@af_latin_h:
	xor	edx, edx
	jne	$LN102@af_latin_h
; Line 2494
	mov	eax, DWORD PTR _edge2$29[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_latin_align_linked_edge
	add	esp, 16					; 00000010H
; Line 2497
	mov	ecx, DWORD PTR _num_actions$[ebp]
	add	ecx, 2
	mov	DWORD PTR _num_actions$[ebp], ecx
; Line 2500
	jmp	$LN73@af_latin_h
$LN111@af_latin_h:
; Line 2506
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR _anchor$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _anchor$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _org_pos$20[ebp], ecx
; Line 2507
	mov	eax, DWORD PTR _edge2$29[ebp]
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _org_len$19[ebp], edx
; Line 2508
	mov	eax, DWORD PTR _org_len$19[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _org_pos$20[ebp]
	mov	DWORD PTR _org_center$18[ebp], eax
; Line 2513
	mov	ecx, DWORD PTR _edge2$29[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _edge$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _org_len$19[ebp]
	push	edx
	mov	eax, DWORD PTR _dim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_latin_compute_stem_width
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cur_len$17[ebp], eax
; Line 2515
	mov	edx, DWORD PTR _edge2$29[ebp]
	movzx	eax, BYTE PTR [edx+12]
	and	eax, 4
	je	SHORT $LN97@af_latin_h
$LN96@af_latin_h:
; Line 2519
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN93@af_latin_h
	mov	eax, DWORD PTR _edge2$29[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _cur_len$17[ebp]
	cvtsi2sd xmm0, ecx
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10047
	call	_FT_Message
	add	esp, 24					; 00000018H
$LN93@af_latin_h:
	xor	edx, edx
	jne	SHORT $LN96@af_latin_h
; Line 2521
	mov	eax, DWORD PTR _edge2$29[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _cur_len$17[ebp]
	mov	edx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR [edx+8], ecx
	jmp	$LN75@af_latin_h
$LN97@af_latin_h:
; Line 2524
	cmp	DWORD PTR _cur_len$17[ebp], 96		; 00000060H
	jge	$LN91@af_latin_h
; Line 2529
	mov	eax, DWORD PTR _org_center$18[ebp]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _cur_pos1$16[ebp], eax
; Line 2531
	cmp	DWORD PTR _cur_len$17[ebp], 64		; 00000040H
	jg	SHORT $LN90@af_latin_h
; Line 2533
	mov	DWORD PTR _u_off$12[ebp], 32		; 00000020H
; Line 2534
	mov	DWORD PTR _d_off$11[ebp], 32		; 00000020H
; Line 2536
	jmp	SHORT $LN89@af_latin_h
$LN90@af_latin_h:
; Line 2538
	mov	DWORD PTR _u_off$12[ebp], 38		; 00000026H
; Line 2539
	mov	DWORD PTR _d_off$11[ebp], 26		; 0000001aH
$LN89@af_latin_h:
; Line 2542
	mov	ecx, DWORD PTR _cur_pos1$16[ebp]
	sub	ecx, DWORD PTR _u_off$12[ebp]
	mov	edx, DWORD PTR _org_center$18[ebp]
	sub	edx, ecx
	mov	DWORD PTR _delta1$14[ebp], edx
; Line 2543
	jns	SHORT $LN88@af_latin_h
; Line 2544
	mov	eax, DWORD PTR _delta1$14[ebp]
	neg	eax
	mov	DWORD PTR _delta1$14[ebp], eax
$LN88@af_latin_h:
; Line 2546
	mov	ecx, DWORD PTR _cur_pos1$16[ebp]
	add	ecx, DWORD PTR _d_off$11[ebp]
	mov	edx, DWORD PTR _org_center$18[ebp]
	sub	edx, ecx
	mov	DWORD PTR _delta2$13[ebp], edx
; Line 2547
	jns	SHORT $LN87@af_latin_h
; Line 2548
	mov	eax, DWORD PTR _delta2$13[ebp]
	neg	eax
	mov	DWORD PTR _delta2$13[ebp], eax
$LN87@af_latin_h:
; Line 2550
	mov	ecx, DWORD PTR _delta1$14[ebp]
	cmp	ecx, DWORD PTR _delta2$13[ebp]
	jge	SHORT $LN86@af_latin_h
; Line 2551
	mov	edx, DWORD PTR _cur_pos1$16[ebp]
	sub	edx, DWORD PTR _u_off$12[ebp]
	mov	DWORD PTR _cur_pos1$16[ebp], edx
; Line 2552
	jmp	SHORT $LN85@af_latin_h
$LN86@af_latin_h:
; Line 2553
	mov	eax, DWORD PTR _cur_pos1$16[ebp]
	add	eax, DWORD PTR _d_off$11[ebp]
	mov	DWORD PTR _cur_pos1$16[ebp], eax
$LN85@af_latin_h:
; Line 2555
	mov	eax, DWORD PTR _cur_len$17[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _cur_pos1$16[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 2556
	mov	eax, DWORD PTR _cur_len$17[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _cur_pos1$16[ebp]
	mov	ecx, DWORD PTR _edge2$29[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN84@af_latin_h:
; Line 2562
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	$LN81@af_latin_h
	mov	ecx, DWORD PTR _edge2$29[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge2$29[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge2$29[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10062
	call	_FT_Message
	add	esp, 44					; 0000002cH
$LN81@af_latin_h:
	xor	edx, edx
	jne	$LN84@af_latin_h
; Line 2565
	jmp	$LN75@af_latin_h
$LN91@af_latin_h:
; Line 2567
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR _anchor$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _anchor$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _org_pos$20[ebp], edx
; Line 2568
	mov	ecx, DWORD PTR _edge2$29[ebp]
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _org_len$19[ebp], eax
; Line 2569
	mov	ecx, DWORD PTR _org_len$19[ebp]
	sar	ecx, 1
	add	ecx, DWORD PTR _org_pos$20[ebp]
	mov	DWORD PTR _org_center$18[ebp], ecx
; Line 2574
	mov	edx, DWORD PTR _edge2$29[ebp]
	movzx	eax, BYTE PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _org_len$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_latin_compute_stem_width
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cur_len$17[ebp], eax
; Line 2576
	mov	eax, DWORD PTR _org_pos$20[ebp]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _cur_pos1$16[ebp], eax
; Line 2577
	mov	ecx, DWORD PTR _cur_len$17[ebp]
	sar	ecx, 1
	add	ecx, DWORD PTR _cur_pos1$16[ebp]
	sub	ecx, DWORD PTR _org_center$18[ebp]
	mov	DWORD PTR _delta1$14[ebp], ecx
; Line 2578
	jns	SHORT $LN79@af_latin_h
; Line 2579
	mov	edx, DWORD PTR _delta1$14[ebp]
	neg	edx
	mov	DWORD PTR _delta1$14[ebp], edx
$LN79@af_latin_h:
; Line 2581
	mov	eax, DWORD PTR _org_len$19[ebp]
	mov	ecx, DWORD PTR _org_pos$20[ebp]
	lea	edx, DWORD PTR [ecx+eax+32]
	and	edx, -64				; ffffffc0H
	sub	edx, DWORD PTR _cur_len$17[ebp]
	mov	DWORD PTR _cur_pos2$15[ebp], edx
; Line 2582
	mov	eax, DWORD PTR _cur_len$17[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _cur_pos2$15[ebp]
	sub	eax, DWORD PTR _org_center$18[ebp]
	mov	DWORD PTR _delta2$13[ebp], eax
; Line 2583
	jns	SHORT $LN78@af_latin_h
; Line 2584
	mov	ecx, DWORD PTR _delta2$13[ebp]
	neg	ecx
	mov	DWORD PTR _delta2$13[ebp], ecx
$LN78@af_latin_h:
; Line 2586
	mov	edx, DWORD PTR _delta1$14[ebp]
	cmp	edx, DWORD PTR _delta2$13[ebp]
	jge	SHORT $LN157@af_latin_h
	mov	eax, DWORD PTR _cur_pos1$16[ebp]
	mov	DWORD PTR tv502[ebp], eax
	jmp	SHORT $LN158@af_latin_h
$LN157@af_latin_h:
	mov	ecx, DWORD PTR _cur_pos2$15[ebp]
	mov	DWORD PTR tv502[ebp], ecx
$LN158@af_latin_h:
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR tv502[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2587
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _cur_len$17[ebp]
	mov	eax, DWORD PTR _edge2$29[ebp]
	mov	DWORD PTR [eax+8], edx
$LN77@af_latin_h:
; Line 2593
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	$LN74@af_latin_h
	mov	eax, DWORD PTR _edge2$29[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _edge2$29[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge2$29[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10072
	call	_FT_Message
	add	esp, 44					; 0000002cH
$LN74@af_latin_h:
	xor	edx, edx
	jne	$LN77@af_latin_h
$LN75@af_latin_h:
; Line 2597
	mov	eax, DWORD PTR _num_actions$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_actions$[ebp], eax
; Line 2600
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge$[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 2601
	mov	ecx, DWORD PTR _edge2$29[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge2$29[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 2603
	mov	ecx, DWORD PTR _edge$[ebp]
	cmp	ecx, DWORD PTR _edges$[ebp]
	jbe	$LN73@af_latin_h
	mov	edx, 48					; 00000030H
	imul	eax, edx, -1
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	cmp	ecx, DWORD PTR [edx+eax+8]
	jge	$LN73@af_latin_h
$LN72@af_latin_h:
; Line 2607
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN69@af_latin_h
	mov	ecx, 48					; 00000030H
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+edx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10078
	call	_FT_Message
	add	esp, 24					; 00000018H
$LN69@af_latin_h:
	xor	edx, edx
	jne	SHORT $LN72@af_latin_h
; Line 2609
	mov	eax, DWORD PTR _num_actions$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_actions$[ebp], eax
; Line 2612
	mov	ecx, 48					; 00000030H
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [ecx+edx+8]
	mov	DWORD PTR [eax+8], edx
$LN73@af_latin_h:
; Line 2615
	jmp	$LN120@af_latin_h
$LN119@af_latin_h:
; Line 2632
	mov	eax, DWORD PTR _edge_limit$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	mov	DWORD PTR _n_edges$[ebp], eax
; Line 2633
	cmp	DWORD PTR _dim$[ebp], 0
	jne	$LN60@af_latin_h
	cmp	DWORD PTR _n_edges$[ebp], 6
	je	SHORT $LN67@af_latin_h
	cmp	DWORD PTR _n_edges$[ebp], 12		; 0000000cH
	jne	$LN60@af_latin_h
$LN67@af_latin_h:
; Line 2639
	cmp	DWORD PTR _n_edges$[ebp], 6
	jne	SHORT $LN66@af_latin_h
; Line 2641
	mov	edx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge1$10[ebp], edx
; Line 2642
	mov	eax, DWORD PTR _edges$[ebp]
	add	eax, 96					; 00000060H
	mov	DWORD PTR _edge2$9[ebp], eax
; Line 2643
	mov	ecx, DWORD PTR _edges$[ebp]
	add	ecx, 192				; 000000c0H
	mov	DWORD PTR _edge3$8[ebp], ecx
; Line 2645
	jmp	SHORT $LN65@af_latin_h
$LN66@af_latin_h:
; Line 2647
	mov	edx, DWORD PTR _edges$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _edge1$10[ebp], edx
; Line 2648
	mov	eax, DWORD PTR _edges$[ebp]
	add	eax, 240				; 000000f0H
	mov	DWORD PTR _edge2$9[ebp], eax
; Line 2649
	mov	ecx, DWORD PTR _edges$[ebp]
	add	ecx, 432				; 000001b0H
	mov	DWORD PTR _edge3$8[ebp], ecx
$LN65@af_latin_h:
; Line 2652
	mov	edx, DWORD PTR _edge2$9[ebp]
	mov	eax, DWORD PTR _edge1$10[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dist1$7[ebp], ecx
; Line 2653
	mov	edx, DWORD PTR _edge3$8[ebp]
	mov	eax, DWORD PTR _edge2$9[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dist2$6[ebp], ecx
; Line 2655
	mov	edx, DWORD PTR _dist1$7[ebp]
	sub	edx, DWORD PTR _dist2$6[ebp]
	mov	DWORD PTR _span$5[ebp], edx
; Line 2656
	jns	SHORT $LN64@af_latin_h
; Line 2657
	mov	eax, DWORD PTR _span$5[ebp]
	neg	eax
	mov	DWORD PTR _span$5[ebp], eax
$LN64@af_latin_h:
; Line 2659
	cmp	DWORD PTR _span$5[ebp], 8
	jge	$LN60@af_latin_h
; Line 2661
	mov	ecx, DWORD PTR _edge2$9[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	eax, DWORD PTR _edge1$10[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _edge3$8[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, edx
	mov	DWORD PTR _delta$4[ebp], eax
; Line 2662
	mov	ecx, DWORD PTR _edge3$8[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _delta$4[ebp]
	mov	eax, DWORD PTR _edge3$8[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 2663
	mov	ecx, DWORD PTR _edge3$8[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN62@af_latin_h
; Line 2664
	mov	edx, DWORD PTR _edge3$8[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _delta$4[ebp]
	mov	edx, DWORD PTR _edge3$8[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+8], ecx
$LN62@af_latin_h:
; Line 2667
	cmp	DWORD PTR _n_edges$[ebp], 12		; 0000000cH
	jne	SHORT $LN61@af_latin_h
; Line 2669
	mov	ecx, DWORD PTR _edges$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	sub	edx, DWORD PTR _delta$4[ebp]
	mov	eax, DWORD PTR _edges$[ebp]
	mov	DWORD PTR [eax+392], edx
; Line 2670
	mov	ecx, DWORD PTR _edges$[ebp]
	mov	edx, DWORD PTR [ecx+536]
	sub	edx, DWORD PTR _delta$4[ebp]
	mov	eax, DWORD PTR _edges$[ebp]
	mov	DWORD PTR [eax+536], edx
$LN61@af_latin_h:
; Line 2673
	mov	ecx, DWORD PTR _edge3$8[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge3$8[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 2674
	mov	ecx, DWORD PTR _edge3$8[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN60@af_latin_h
; Line 2675
	mov	edx, DWORD PTR _edge3$8[ebp]
	mov	eax, DWORD PTR [edx+24]
	movzx	ecx, BYTE PTR [eax+12]
	or	ecx, 4
	mov	edx, DWORD PTR _edge3$8[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	BYTE PTR [eax+12], cl
$LN60@af_latin_h:
; Line 2679
	cmp	DWORD PTR _has_serifs$[ebp], 0
	jne	SHORT $LN58@af_latin_h
	cmp	DWORD PTR _anchor$[ebp], 0
	jne	$LN55@af_latin_h
$LN58@af_latin_h:
; Line 2685
	mov	ecx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge$[ebp], ecx
	jmp	SHORT $LN57@af_latin_h
$LN56@af_latin_h:
	mov	edx, DWORD PTR _edge$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _edge$[ebp], edx
$LN57@af_latin_h:
	mov	eax, DWORD PTR _edge$[ebp]
	cmp	eax, DWORD PTR _edge_limit$[ebp]
	jae	$LN55@af_latin_h
; Line 2690
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	and	edx, 4
	je	SHORT $LN54@af_latin_h
; Line 2691
	jmp	SHORT $LN56@af_latin_h
$LN54@af_latin_h:
; Line 2693
	mov	DWORD PTR _delta$3[ebp], 1000		; 000003e8H
; Line 2695
	mov	eax, DWORD PTR _edge$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN52@af_latin_h
; Line 2697
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _delta$3[ebp], ecx
; Line 2698
	jns	SHORT $LN52@af_latin_h
; Line 2699
	mov	edx, DWORD PTR _delta$3[ebp]
	neg	edx
	mov	DWORD PTR _delta$3[ebp], edx
$LN52@af_latin_h:
; Line 2702
	cmp	DWORD PTR _delta$3[ebp], 80		; 00000050H
	jge	$LN51@af_latin_h
; Line 2704
	mov	eax, DWORD PTR _edge$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_latin_align_serif_edge
	add	esp, 12					; 0000000cH
$LN50@af_latin_h:
; Line 2709
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN47@af_latin_h
	mov	eax, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR [eax+28]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10109
	call	_FT_Message
	add	esp, 36					; 00000024H
$LN47@af_latin_h:
	xor	edx, edx
	jne	$LN50@af_latin_h
; Line 2711
	jmp	$LN21@af_latin_h
$LN51@af_latin_h:
	cmp	DWORD PTR _anchor$[ebp], 0
	jne	SHORT $LN45@af_latin_h
; Line 2713
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 2714
	mov	eax, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _anchor$[ebp], eax
$LN44@af_latin_h:
; Line 2717
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN41@af_latin_h
	mov	eax, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10116
	call	_FT_Message
	add	esp, 24					; 00000018H
$LN41@af_latin_h:
	xor	edx, edx
	jne	SHORT $LN44@af_latin_h
; Line 2719
	jmp	$LN21@af_latin_h
$LN45@af_latin_h:
; Line 2724
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR _before$2[ebp], eax
	jmp	SHORT $LN39@af_latin_h
$LN38@af_latin_h:
	mov	ecx, DWORD PTR _before$2[ebp]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR _before$2[ebp], ecx
$LN39@af_latin_h:
	mov	edx, DWORD PTR _before$2[ebp]
	cmp	edx, DWORD PTR _edges$[ebp]
	jb	SHORT $LN37@af_latin_h
; Line 2725
	mov	eax, DWORD PTR _before$2[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	and	ecx, 4
	je	SHORT $LN36@af_latin_h
; Line 2726
	jmp	SHORT $LN37@af_latin_h
$LN36@af_latin_h:
; Line 2728
	jmp	SHORT $LN38@af_latin_h
$LN37@af_latin_h:
	mov	edx, DWORD PTR _edge$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _after$1[ebp], edx
	jmp	SHORT $LN35@af_latin_h
$LN34@af_latin_h:
	mov	eax, DWORD PTR _after$1[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _after$1[ebp], eax
$LN35@af_latin_h:
	mov	ecx, DWORD PTR _after$1[ebp]
	cmp	ecx, DWORD PTR _edge_limit$[ebp]
	jae	SHORT $LN33@af_latin_h
; Line 2729
	mov	edx, DWORD PTR _after$1[ebp]
	movzx	eax, BYTE PTR [edx+12]
	and	eax, 4
	je	SHORT $LN32@af_latin_h
; Line 2730
	jmp	SHORT $LN33@af_latin_h
$LN32@af_latin_h:
; Line 2732
	jmp	SHORT $LN34@af_latin_h
$LN33@af_latin_h:
; Line 2733
	mov	ecx, DWORD PTR _before$2[ebp]
	cmp	ecx, DWORD PTR _edges$[ebp]
	jb	$LN31@af_latin_h
	mov	edx, DWORD PTR _before$2[ebp]
	cmp	edx, DWORD PTR _edge$[ebp]
	jae	$LN31@af_latin_h
	mov	eax, DWORD PTR _after$1[ebp]
	cmp	eax, DWORD PTR _edge_limit$[ebp]
	jae	$LN31@af_latin_h
	mov	ecx, DWORD PTR _after$1[ebp]
	cmp	ecx, DWORD PTR _edge$[ebp]
	jbe	$LN31@af_latin_h
; Line 2735
	mov	edx, DWORD PTR _after$1[ebp]
	mov	eax, DWORD PTR _before$2[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN30@af_latin_h
; Line 2736
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR _before$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
; Line 2737
	jmp	SHORT $LN29@af_latin_h
$LN30@af_latin_h:
; Line 2741
	mov	edx, DWORD PTR _after$1[ebp]
	mov	eax, DWORD PTR _before$2[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _after$1[ebp]
	mov	eax, DWORD PTR _before$2[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR _before$2[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _before$2[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN29@af_latin_h:
; Line 2747
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN25@af_latin_h
	mov	ecx, DWORD PTR _before$2[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _before$2[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10135
	call	_FT_Message
	add	esp, 36					; 00000024H
$LN25@af_latin_h:
	xor	edx, edx
	jne	$LN29@af_latin_h
; Line 2749
	jmp	SHORT $LN21@af_latin_h
$LN31@af_latin_h:
; Line 2752
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR _anchor$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	and	edx, -32				; ffffffe0H
	mov	eax, DWORD PTR _anchor$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN23@af_latin_h:
; Line 2755
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN20@af_latin_h
	mov	ecx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10141
	call	_FT_Message
	add	esp, 24					; 00000018H
$LN20@af_latin_h:
	xor	edx, edx
	jne	SHORT $LN23@af_latin_h
$LN21@af_latin_h:
; Line 2760
	mov	eax, DWORD PTR _num_actions$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_actions$[ebp], eax
; Line 2762
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _edge$[ebp]
	mov	BYTE PTR [eax+12], dl
; Line 2764
	mov	ecx, DWORD PTR _edge$[ebp]
	cmp	ecx, DWORD PTR _edges$[ebp]
	jbe	$LN19@af_latin_h
	mov	edx, 48					; 00000030H
	imul	eax, edx, -1
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	cmp	ecx, DWORD PTR [edx+eax+8]
	jge	$LN19@af_latin_h
$LN18@af_latin_h:
; Line 2768
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN15@af_latin_h
	mov	ecx, 48					; 00000030H
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+edx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10147
	call	_FT_Message
	add	esp, 24					; 00000018H
$LN15@af_latin_h:
	xor	edx, edx
	jne	SHORT $LN18@af_latin_h
; Line 2770
	mov	eax, DWORD PTR _num_actions$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_actions$[ebp], eax
; Line 2772
	mov	ecx, 48					; 00000030H
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [ecx+edx+8]
	mov	DWORD PTR [eax+8], edx
$LN19@af_latin_h:
; Line 2777
	mov	eax, DWORD PTR _edge$[ebp]
	add	eax, 48					; 00000030H
	cmp	eax, DWORD PTR _edge_limit$[ebp]
	jae	$LN14@af_latin_h
	mov	ecx, 48					; 00000030H
	shl	ecx, 0
	mov	edx, DWORD PTR _edge$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+12]
	and	eax, 4
	je	$LN14@af_latin_h
	mov	ecx, 48					; 00000030H
	shl	ecx, 0
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR [edx+8]
	cmp	edx, DWORD PTR [eax+ecx+8]
	jle	$LN14@af_latin_h
$LN13@af_latin_h:
; Line 2781
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN10@af_latin_h
	mov	edx, 48					; 00000030H
	shl	edx, 0
	mov	eax, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+edx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG10153
	call	_FT_Message
	add	esp, 24					; 00000018H
$LN10@af_latin_h:
	xor	edx, edx
	jne	SHORT $LN13@af_latin_h
; Line 2783
	mov	eax, DWORD PTR _num_actions$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_actions$[ebp], eax
; Line 2786
	mov	ecx, 48					; 00000030H
	shl	ecx, 0
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR _edge$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR [edx+8], ecx
$LN14@af_latin_h:
; Line 2788
	jmp	$LN56@af_latin_h
$LN55@af_latin_h:
; Line 2792
	cmp	DWORD PTR _num_actions$[ebp], 0
	jne	SHORT $LN6@af_latin_h
$LN8@af_latin_h:
; Line 2793
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN5@af_latin_h
	push	OFFSET $SG10159
	call	_FT_Message
	add	esp, 4
$LN5@af_latin_h:
	xor	ecx, ecx
	jne	SHORT $LN8@af_latin_h
$LN6@af_latin_h:
; Line 2794
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN1@af_latin_h
	push	OFFSET $SG10164
	call	_FT_Message
	add	esp, 4
$LN1@af_latin_h:
	xor	ecx, ecx
	jne	SHORT $LN6@af_latin_h
; Line 2796
	pop	edi
	add	esp, 172				; 000000acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_latin_hint_edges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hints$ = 8						; size = 4
_base$ = 12						; size = 4
_serif$ = 16						; size = 4
_af_latin_align_serif_edge PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 2264
	push	ebp
	mov	ebp, esp
; Line 2265
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR _hints$[ebp], eax
; Line 2267
	mov	ecx, DWORD PTR _serif$[ebp]
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _base$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _serif$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2268
	pop	ebp
	ret	0
_af_latin_align_serif_edge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fitted_width$ = -8					; size = 4
_dist$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_base_edge$ = 16					; size = 4
_stem_edge$ = 20					; size = 4
_af_latin_align_linked_edge PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 2239
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2240
	mov	eax, DWORD PTR _stem_edge$[ebp]
	mov	ecx, DWORD PTR _base_edge$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _dist$[ebp], edx
; Line 2245
	mov	eax, DWORD PTR _stem_edge$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _base_edge$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _dist$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_latin_compute_stem_width
	add	esp, 20					; 00000014H
	mov	DWORD PTR _fitted_width$[ebp], eax
; Line 2248
	mov	ecx, DWORD PTR _base_edge$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _fitted_width$[ebp]
	mov	eax, DWORD PTR _stem_edge$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN4@af_latin_a:
; Line 2253
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	$LN1@af_latin_a
	cvtsi2sd xmm0, DWORD PTR _fitted_width$[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _dist$[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _stem_edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _stem_edge$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	imul	edx, DWORD PTR _dim$[ebp], 28
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR _stem_edge$[ebp]
	sub	ecx, DWORD PTR [eax+edx+64]
	mov	eax, ecx
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	push	eax
	push	OFFSET $SG9927
	call	_FT_Message
	add	esp, 40					; 00000028H
$LN1@af_latin_a:
	xor	edx, edx
	jne	$LN4@af_latin_a
; Line 2254
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_latin_align_linked_edge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -36						; size = 4
_delta$1 = -32						; size = 4
_org_dist$2 = -28					; size = 4
_delta$3 = -24						; size = 4
_vertical$ = -20					; size = 4
_sign$ = -16						; size = 4
_dist$ = -12						; size = 4
_axis$ = -8						; size = 4
_metrics$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_width$ = 16						; size = 4
_base_flags$ = 20					; size = 4
_stem_flags$ = 24					; size = 4
_af_latin_compute_stem_width PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 2076
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2077
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _metrics$[ebp], ecx
; Line 2078
	imul	edx, DWORD PTR _dim$[ebp], 1264
	mov	eax, DWORD PTR _metrics$[ebp]
	lea	ecx, DWORD PTR [eax+edx+44]
	mov	DWORD PTR _axis$[ebp], ecx
; Line 2079
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _dist$[ebp], edx
; Line 2080
	mov	DWORD PTR _sign$[ebp], 0
; Line 2081
	cmp	DWORD PTR _dim$[ebp], 1
	jne	SHORT $LN44@af_latin_c
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN45@af_latin_c
$LN44@af_latin_c:
	mov	DWORD PTR tv69[ebp], 0
$LN45@af_latin_c:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _vertical$[ebp], eax
; Line 2085
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	and	edx, 4
	je	SHORT $LN40@af_latin_c
	mov	eax, DWORD PTR _axis$[ebp]
	movzx	ecx, BYTE PTR [eax+212]
	test	ecx, ecx
	je	SHORT $LN41@af_latin_c
$LN40@af_latin_c:
; Line 2086
	mov	eax, DWORD PTR _width$[ebp]
	jmp	$LN42@af_latin_c
$LN41@af_latin_c:
; Line 2088
	cmp	DWORD PTR _dist$[ebp], 0
	jge	SHORT $LN39@af_latin_c
; Line 2090
	mov	edx, DWORD PTR _width$[ebp]
	neg	edx
	mov	DWORD PTR _dist$[ebp], edx
; Line 2091
	mov	DWORD PTR _sign$[ebp], 1
$LN39@af_latin_c:
; Line 2095
	cmp	DWORD PTR _vertical$[ebp], 0
	je	SHORT $LN36@af_latin_c
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	and	ecx, 2
	je	SHORT $LN37@af_latin_c
$LN36@af_latin_c:
	cmp	DWORD PTR _vertical$[ebp], 0
	jne	$LN38@af_latin_c
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+104]
	and	eax, 1
	jne	$LN38@af_latin_c
$LN37@af_latin_c:
; Line 2102
	mov	ecx, DWORD PTR _stem_flags$[ebp]
	and	ecx, 2
	je	SHORT $LN35@af_latin_c
	cmp	DWORD PTR _vertical$[ebp], 0
	je	SHORT $LN35@af_latin_c
	cmp	DWORD PTR _dist$[ebp], 192		; 000000c0H
	jge	SHORT $LN35@af_latin_c
; Line 2103
	jmp	$Done_Width$46
	jmp	SHORT $LN34@af_latin_c
$LN35@af_latin_c:
; Line 2105
	mov	edx, DWORD PTR _base_flags$[ebp]
	and	edx, 1
	je	SHORT $LN33@af_latin_c
; Line 2107
	cmp	DWORD PTR _dist$[ebp], 80		; 00000050H
	jge	SHORT $LN32@af_latin_c
; Line 2108
	mov	DWORD PTR _dist$[ebp], 64		; 00000040H
$LN32@af_latin_c:
; Line 2110
	jmp	SHORT $LN34@af_latin_c
$LN33@af_latin_c:
	cmp	DWORD PTR _dist$[ebp], 56		; 00000038H
	jge	SHORT $LN34@af_latin_c
; Line 2111
	mov	DWORD PTR _dist$[ebp], 56		; 00000038H
$LN34@af_latin_c:
; Line 2113
	mov	eax, DWORD PTR _axis$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jbe	$LN29@af_latin_c
; Line 2119
	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR _dist$[ebp]
	sub	ecx, DWORD PTR [eax+edx+16]
	mov	DWORD PTR _delta$3[ebp], ecx
; Line 2121
	jns	SHORT $LN28@af_latin_c
; Line 2122
	mov	edx, DWORD PTR _delta$3[ebp]
	neg	edx
	mov	DWORD PTR _delta$3[ebp], edx
$LN28@af_latin_c:
; Line 2124
	cmp	DWORD PTR _delta$3[ebp], 40		; 00000028H
	jge	SHORT $LN27@af_latin_c
; Line 2126
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR [edx+ecx+16]
	mov	DWORD PTR _dist$[ebp], eax
; Line 2127
	cmp	DWORD PTR _dist$[ebp], 48		; 00000030H
	jge	SHORT $LN26@af_latin_c
; Line 2128
	mov	DWORD PTR _dist$[ebp], 48		; 00000030H
$LN26@af_latin_c:
; Line 2130
	jmp	$Done_Width$46
$LN27@af_latin_c:
; Line 2133
	cmp	DWORD PTR _dist$[ebp], 192		; 000000c0H
	jge	SHORT $LN25@af_latin_c
; Line 2135
	mov	ecx, DWORD PTR _dist$[ebp]
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _delta$3[ebp], ecx
; Line 2136
	mov	edx, DWORD PTR _dist$[ebp]
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _dist$[ebp], edx
; Line 2138
	cmp	DWORD PTR _delta$3[ebp], 10		; 0000000aH
	jge	SHORT $LN24@af_latin_c
; Line 2139
	mov	eax, DWORD PTR _dist$[ebp]
	add	eax, DWORD PTR _delta$3[ebp]
	mov	DWORD PTR _dist$[ebp], eax
	jmp	SHORT $LN23@af_latin_c
$LN24@af_latin_c:
; Line 2141
	cmp	DWORD PTR _delta$3[ebp], 32		; 00000020H
	jge	SHORT $LN22@af_latin_c
; Line 2142
	mov	ecx, DWORD PTR _dist$[ebp]
	add	ecx, 10					; 0000000aH
	mov	DWORD PTR _dist$[ebp], ecx
	jmp	SHORT $LN23@af_latin_c
$LN22@af_latin_c:
; Line 2144
	cmp	DWORD PTR _delta$3[ebp], 54		; 00000036H
	jge	SHORT $LN20@af_latin_c
; Line 2145
	mov	edx, DWORD PTR _dist$[ebp]
	add	edx, 54					; 00000036H
	mov	DWORD PTR _dist$[ebp], edx
; Line 2147
	jmp	SHORT $LN23@af_latin_c
$LN20@af_latin_c:
; Line 2148
	mov	eax, DWORD PTR _dist$[ebp]
	add	eax, DWORD PTR _delta$3[ebp]
	mov	DWORD PTR _dist$[ebp], eax
$LN23@af_latin_c:
; Line 2150
	jmp	SHORT $LN29@af_latin_c
$LN25@af_latin_c:
; Line 2151
	mov	ecx, DWORD PTR _dist$[ebp]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _dist$[ebp], ecx
$LN29@af_latin_c:
; Line 2154
	jmp	$Done_Width$46
$LN38@af_latin_c:
; Line 2158
	mov	edx, DWORD PTR _dist$[ebp]
	mov	DWORD PTR _org_dist$2[ebp], edx
; Line 2161
	mov	eax, DWORD PTR _dist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _axis$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_af_latin_snap_width
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dist$[ebp], eax
; Line 2163
	cmp	DWORD PTR _vertical$[ebp], 0
	je	SHORT $LN16@af_latin_c
; Line 2168
	cmp	DWORD PTR _dist$[ebp], 64		; 00000040H
	jl	SHORT $LN15@af_latin_c
; Line 2169
	mov	ecx, DWORD PTR _dist$[ebp]
	add	ecx, 16					; 00000010H
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _dist$[ebp], ecx
; Line 2170
	jmp	SHORT $LN14@af_latin_c
$LN15@af_latin_c:
; Line 2171
	mov	DWORD PTR _dist$[ebp], 64		; 00000040H
$LN14@af_latin_c:
; Line 2173
	jmp	$Done_Width$46
$LN16@af_latin_c:
; Line 2175
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+104]
	and	eax, 8
	je	SHORT $LN12@af_latin_c
; Line 2180
	cmp	DWORD PTR _dist$[ebp], 64		; 00000040H
	jge	SHORT $LN11@af_latin_c
; Line 2181
	mov	DWORD PTR _dist$[ebp], 64		; 00000040H
; Line 2182
	jmp	SHORT $LN10@af_latin_c
$LN11@af_latin_c:
; Line 2183
	mov	ecx, DWORD PTR _dist$[ebp]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _dist$[ebp], ecx
$LN10@af_latin_c:
; Line 2185
	jmp	SHORT $Done_Width$46
$LN12@af_latin_c:
; Line 2191
	cmp	DWORD PTR _dist$[ebp], 48		; 00000030H
	jge	SHORT $LN8@af_latin_c
; Line 2192
	mov	edx, DWORD PTR _dist$[ebp]
	add	edx, 64					; 00000040H
	sar	edx, 1
	mov	DWORD PTR _dist$[ebp], edx
	jmp	SHORT $Done_Width$46
$LN8@af_latin_c:
; Line 2194
	cmp	DWORD PTR _dist$[ebp], 128		; 00000080H
	jge	SHORT $LN6@af_latin_c
; Line 2205
	mov	eax, DWORD PTR _dist$[ebp]
	add	eax, 22					; 00000016H
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _dist$[ebp], eax
; Line 2206
	mov	ecx, DWORD PTR _dist$[ebp]
	sub	ecx, DWORD PTR _org_dist$2[ebp]
	mov	DWORD PTR _delta$1[ebp], ecx
; Line 2207
	jns	SHORT $LN5@af_latin_c
; Line 2208
	mov	edx, DWORD PTR _delta$1[ebp]
	neg	edx
	mov	DWORD PTR _delta$1[ebp], edx
$LN5@af_latin_c:
; Line 2210
	cmp	DWORD PTR _delta$1[ebp], 16		; 00000010H
	jl	SHORT $LN4@af_latin_c
; Line 2212
	mov	eax, DWORD PTR _org_dist$2[ebp]
	mov	DWORD PTR _dist$[ebp], eax
; Line 2213
	cmp	DWORD PTR _dist$[ebp], 48		; 00000030H
	jge	SHORT $LN4@af_latin_c
; Line 2214
	mov	ecx, DWORD PTR _dist$[ebp]
	add	ecx, 64					; 00000040H
	sar	ecx, 1
	mov	DWORD PTR _dist$[ebp], ecx
$LN4@af_latin_c:
; Line 2217
	jmp	SHORT $Done_Width$46
$LN6@af_latin_c:
; Line 2219
	mov	edx, DWORD PTR _dist$[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _dist$[ebp], edx
$Done_Width$46:
; Line 2225
	cmp	DWORD PTR _sign$[ebp], 0
	je	SHORT $LN1@af_latin_c
; Line 2226
	mov	eax, DWORD PTR _dist$[ebp]
	neg	eax
	mov	DWORD PTR _dist$[ebp], eax
$LN1@af_latin_c:
; Line 2228
	mov	eax, DWORD PTR _dist$[ebp]
$LN42@af_latin_c:
; Line 2229
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_latin_compute_stem_width ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dist$1 = -24						; size = 4
_w$2 = -20						; size = 4
_scaled$ = -16						; size = 4
_reference$ = -12					; size = 4
_best$ = -8						; size = 4
_n$ = -4						; size = 4
_widths$ = 8						; size = 4
_count$ = 12						; size = 4
_width$ = 16						; size = 4
_af_latin_snap_width PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 2025
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2027
	mov	DWORD PTR _best$[ebp], 98		; 00000062H
; Line 2028
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR _reference$[ebp], eax
; Line 2032
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN9@af_latin_s
$LN8@af_latin_s:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN9@af_latin_s:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jge	SHORT $LN7@af_latin_s
; Line 2038
	imul	eax, DWORD PTR _n$[ebp], 12
	mov	ecx, DWORD PTR _widths$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _w$2[ebp], edx
; Line 2039
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, DWORD PTR _w$2[ebp]
	mov	DWORD PTR _dist$1[ebp], eax
; Line 2040
	jns	SHORT $LN6@af_latin_s
; Line 2041
	mov	ecx, DWORD PTR _dist$1[ebp]
	neg	ecx
	mov	DWORD PTR _dist$1[ebp], ecx
$LN6@af_latin_s:
; Line 2042
	mov	edx, DWORD PTR _dist$1[ebp]
	cmp	edx, DWORD PTR _best$[ebp]
	jge	SHORT $LN5@af_latin_s
; Line 2044
	mov	eax, DWORD PTR _dist$1[ebp]
	mov	DWORD PTR _best$[ebp], eax
; Line 2045
	mov	ecx, DWORD PTR _w$2[ebp]
	mov	DWORD PTR _reference$[ebp], ecx
$LN5@af_latin_s:
; Line 2047
	jmp	SHORT $LN8@af_latin_s
$LN7@af_latin_s:
; Line 2049
	mov	edx, DWORD PTR _reference$[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _scaled$[ebp], edx
; Line 2051
	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _reference$[ebp]
	jl	SHORT $LN4@af_latin_s
; Line 2053
	mov	ecx, DWORD PTR _scaled$[ebp]
	add	ecx, 48					; 00000030H
	cmp	DWORD PTR _width$[ebp], ecx
	jge	SHORT $LN3@af_latin_s
; Line 2054
	mov	edx, DWORD PTR _reference$[ebp]
	mov	DWORD PTR _width$[ebp], edx
$LN3@af_latin_s:
; Line 2056
	jmp	SHORT $LN2@af_latin_s
$LN4@af_latin_s:
; Line 2058
	mov	eax, DWORD PTR _scaled$[ebp]
	sub	eax, 48					; 00000030H
	cmp	DWORD PTR _width$[ebp], eax
	jle	SHORT $LN2@af_latin_s
; Line 2059
	mov	ecx, DWORD PTR _reference$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
$LN2@af_latin_s:
; Line 2062
	mov	eax, DWORD PTR _width$[ebp]
; Line 2063
	mov	esp, ebp
	pop	ebp
	ret	0
_af_latin_snap_width ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = -16						; size = 4
_other_flags$ = -12					; size = 4
_scaler_flags$ = -8					; size = 4
_mode$ = -4						; size = 4
_hints$ = 8						; size = 4
_metrics$ = 12						; size = 4
_af_latin_hints_init PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 1944
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1947
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$[ebp], ecx
; Line 1950
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_rescale
	add	esp, 8
; Line 1956
	mov	ecx, 1264				; 000004f0H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+edx+44]
	mov	DWORD PTR [eax+4], edx
; Line 1957
	mov	eax, 1264				; 000004f0H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+48]
	mov	DWORD PTR [edx+8], ecx
; Line 1958
	mov	edx, 1264				; 000004f0H
	shl	edx, 0
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+edx+44]
	mov	DWORD PTR [eax+12], edx
; Line 1959
	mov	eax, 1264				; 000004f0H
	shl	eax, 0
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+eax+48]
	mov	DWORD PTR [ecx+16], eax
; Line 1962
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _mode$[ebp], edx
; Line 1969
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _scaler_flags$[ebp], ecx
; Line 1970
	mov	DWORD PTR _other_flags$[ebp], 0
; Line 1976
	cmp	DWORD PTR _mode$[ebp], 2
	je	SHORT $LN7@af_latin_h
	cmp	DWORD PTR _mode$[ebp], 3
	jne	SHORT $LN8@af_latin_h
$LN7@af_latin_h:
; Line 1977
	mov	edx, DWORD PTR _other_flags$[ebp]
	or	edx, 1
	mov	DWORD PTR _other_flags$[ebp], edx
$LN8@af_latin_h:
; Line 1983
	cmp	DWORD PTR _mode$[ebp], 2
	je	SHORT $LN5@af_latin_h
	cmp	DWORD PTR _mode$[ebp], 4
	jne	SHORT $LN6@af_latin_h
$LN5@af_latin_h:
; Line 1984
	mov	eax, DWORD PTR _other_flags$[ebp]
	or	eax, 2
	mov	DWORD PTR _other_flags$[ebp], eax
$LN6@af_latin_h:
; Line 1989
	cmp	DWORD PTR _mode$[ebp], 1
	je	SHORT $LN4@af_latin_h
; Line 1990
	mov	ecx, DWORD PTR _other_flags$[ebp]
	or	ecx, 4
	mov	DWORD PTR _other_flags$[ebp], ecx
$LN4@af_latin_h:
; Line 1992
	cmp	DWORD PTR _mode$[ebp], 2
	jne	SHORT $LN3@af_latin_h
; Line 1993
	mov	edx, DWORD PTR _other_flags$[ebp]
	or	edx, 8
	mov	DWORD PTR _other_flags$[ebp], edx
$LN3@af_latin_h:
; Line 2000
	cmp	DWORD PTR _mode$[ebp], 1
	je	SHORT $LN1@af_latin_h
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1
	je	SHORT $LN2@af_latin_h
$LN1@af_latin_h:
; Line 2001
	mov	edx, DWORD PTR _scaler_flags$[ebp]
	or	edx, 1
	mov	DWORD PTR _scaler_flags$[ebp], edx
$LN2@af_latin_h:
; Line 2003
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR _scaler_flags$[ebp]
	mov	DWORD PTR [eax+100], ecx
; Line 2004
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _other_flags$[ebp]
	mov	DWORD PTR [edx+104], eax
; Line 2006
	xor	eax, eax
; Line 2007
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_latin_hints_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv165 = -53						; size = 1
tv136 = -52						; size = 1
tv131 = -51						; size = 1
tv95 = -50						; size = 1
_is_under_ref$1 = -49					; size = 1
_dist$2 = -48						; size = 4
_is_major_dir$3 = -43					; size = 1
_is_neutral_blue$4 = -42				; size = 1
_is_top_blue$5 = -41					; size = 1
_blue$6 = -40						; size = 4
_best_dist$7 = -36					; size = 4
_best_blue_is_neutral$8 = -29				; size = 1
_best_blue$9 = -28					; size = 4
_bb$10 = -24						; size = 4
_scale$ = -20						; size = 4
_latin$ = -16						; size = 4
_edge_limit$ = -12					; size = 4
_edge$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_metrics$ = 12						; size = 4
_af_latin_hints_compute_blue_edges PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 1831
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1832
	mov	eax, 28					; 0000001cH
	shl	eax, 0
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 1833
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _edge$[ebp], ecx
; Line 1834
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx+12], 48
	add	eax, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _edge_limit$[ebp], eax
; Line 1835
	mov	ecx, 1264				; 000004f0H
	shl	ecx, 0
	mov	edx, DWORD PTR _metrics$[ebp]
	lea	eax, DWORD PTR [edx+ecx+44]
	mov	DWORD PTR _latin$[ebp], eax
; Line 1836
	mov	ecx, DWORD PTR _latin$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _scale$[ebp], edx
; Line 1843
	jmp	SHORT $LN18@af_latin_h
$LN17@af_latin_h:
	mov	eax, DWORD PTR _edge$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _edge$[ebp], eax
$LN18@af_latin_h:
	mov	ecx, DWORD PTR _edge$[ebp]
	cmp	ecx, DWORD PTR _edge_limit$[ebp]
	jae	$LN19@af_latin_h
; Line 1846
	mov	DWORD PTR _best_blue$9[ebp], 0
; Line 1847
	mov	BYTE PTR _best_blue_is_neutral$8[ebp], 0
; Line 1853
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [eax+40]
	xor	edx, edx
	mov	ecx, 40					; 00000028H
	div	ecx
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _best_dist$7[ebp], eax
; Line 1856
	cmp	DWORD PTR _best_dist$7[ebp], 32		; 00000020H
	jle	SHORT $LN15@af_latin_h
; Line 1857
	mov	DWORD PTR _best_dist$7[ebp], 32		; 00000020H
$LN15@af_latin_h:
; Line 1859
	mov	DWORD PTR _bb$10[ebp], 0
	jmp	SHORT $LN14@af_latin_h
$LN13@af_latin_h:
	mov	edx, DWORD PTR _bb$10[ebp]
	add	edx, 1
	mov	DWORD PTR _bb$10[ebp], edx
$LN14@af_latin_h:
	mov	eax, DWORD PTR _latin$[ebp]
	mov	ecx, DWORD PTR _bb$10[ebp]
	cmp	ecx, DWORD PTR [eax+216]
	jae	$LN12@af_latin_h
; Line 1861
	imul	edx, DWORD PTR _bb$10[ebp], 28
	mov	eax, DWORD PTR _latin$[ebp]
	lea	ecx, DWORD PTR [eax+edx+220]
	mov	DWORD PTR _blue$6[ebp], ecx
; Line 1866
	mov	edx, DWORD PTR _blue$6[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, 1
	jne	SHORT $LN11@af_latin_h
; Line 1867
	jmp	SHORT $LN13@af_latin_h
$LN11@af_latin_h:
; Line 1874
	mov	ecx, DWORD PTR _blue$6[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, 2
	je	SHORT $LN21@af_latin_h
	mov	BYTE PTR tv95[ebp], 1
	jmp	SHORT $LN22@af_latin_h
$LN21@af_latin_h:
	mov	BYTE PTR tv95[ebp], 0
$LN22@af_latin_h:
	mov	al, BYTE PTR tv95[ebp]
	mov	BYTE PTR _is_top_blue$5[ebp], al
; Line 1876
	mov	ecx, DWORD PTR _blue$6[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, 4
	je	SHORT $LN23@af_latin_h
	mov	BYTE PTR tv131[ebp], 1
	jmp	SHORT $LN24@af_latin_h
$LN23@af_latin_h:
	mov	BYTE PTR tv131[ebp], 0
$LN24@af_latin_h:
	mov	al, BYTE PTR tv131[ebp]
	mov	BYTE PTR _is_neutral_blue$4[ebp], al
; Line 1878
	mov	ecx, DWORD PTR _edge$[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	mov	eax, DWORD PTR _axis$[ebp]
	cmp	edx, DWORD PTR [eax+24]
	jne	SHORT $LN25@af_latin_h
	mov	BYTE PTR tv136[ebp], 1
	jmp	SHORT $LN26@af_latin_h
$LN25@af_latin_h:
	mov	BYTE PTR tv136[ebp], 0
$LN26@af_latin_h:
	mov	cl, BYTE PTR tv136[ebp]
	mov	BYTE PTR _is_major_dir$3[ebp], cl
; Line 1881
	movzx	edx, BYTE PTR _is_top_blue$5[ebp]
	movzx	eax, BYTE PTR _is_major_dir$3[ebp]
	xor	edx, eax
	jne	SHORT $LN9@af_latin_h
	movzx	ecx, BYTE PTR _is_neutral_blue$4[ebp]
	test	ecx, ecx
	je	$LN10@af_latin_h
$LN9@af_latin_h:
; Line 1887
	mov	edx, DWORD PTR _edge$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _blue$6[ebp]
	sub	eax, DWORD PTR [ecx]
	mov	DWORD PTR _dist$2[ebp], eax
; Line 1888
	jns	SHORT $LN8@af_latin_h
; Line 1889
	mov	edx, DWORD PTR _dist$2[ebp]
	neg	edx
	mov	DWORD PTR _dist$2[ebp], edx
$LN8@af_latin_h:
; Line 1891
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dist$2[ebp]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _dist$2[ebp], eax
; Line 1892
	mov	edx, DWORD PTR _dist$2[ebp]
	cmp	edx, DWORD PTR _best_dist$7[ebp]
	jge	SHORT $LN7@af_latin_h
; Line 1894
	mov	eax, DWORD PTR _dist$2[ebp]
	mov	DWORD PTR _best_dist$7[ebp], eax
; Line 1895
	mov	ecx, DWORD PTR _blue$6[ebp]
	mov	DWORD PTR _best_blue$9[ebp], ecx
; Line 1896
	mov	dl, BYTE PTR _is_neutral_blue$4[ebp]
	mov	BYTE PTR _best_blue_is_neutral$8[ebp], dl
$LN7@af_latin_h:
; Line 1906
	mov	eax, DWORD PTR _edge$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	and	ecx, 1
	je	$LN10@af_latin_h
	cmp	DWORD PTR _dist$2[ebp], 0
	je	SHORT $LN10@af_latin_h
	movzx	edx, BYTE PTR _is_neutral_blue$4[ebp]
	test	edx, edx
	jne	SHORT $LN10@af_latin_h
; Line 1908
	mov	eax, DWORD PTR _edge$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _blue$6[ebp]
	cmp	ecx, DWORD PTR [edx]
	jge	SHORT $LN27@af_latin_h
	mov	BYTE PTR tv165[ebp], 1
	jmp	SHORT $LN28@af_latin_h
$LN27@af_latin_h:
	mov	BYTE PTR tv165[ebp], 0
$LN28@af_latin_h:
	mov	al, BYTE PTR tv165[ebp]
	mov	BYTE PTR _is_under_ref$1[ebp], al
; Line 1911
	movzx	ecx, BYTE PTR _is_top_blue$5[ebp]
	movzx	edx, BYTE PTR _is_under_ref$1[ebp]
	xor	ecx, edx
	je	SHORT $LN10@af_latin_h
; Line 1913
	mov	eax, DWORD PTR _edge$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _blue$6[ebp]
	sub	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _dist$2[ebp], ecx
; Line 1914
	jns	SHORT $LN4@af_latin_h
; Line 1915
	mov	eax, DWORD PTR _dist$2[ebp]
	neg	eax
	mov	DWORD PTR _dist$2[ebp], eax
$LN4@af_latin_h:
; Line 1917
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dist$2[ebp]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _dist$2[ebp], eax
; Line 1918
	mov	eax, DWORD PTR _dist$2[ebp]
	cmp	eax, DWORD PTR _best_dist$7[ebp]
	jge	SHORT $LN10@af_latin_h
; Line 1920
	mov	ecx, DWORD PTR _dist$2[ebp]
	mov	DWORD PTR _best_dist$7[ebp], ecx
; Line 1921
	mov	edx, DWORD PTR _blue$6[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _best_blue$9[ebp], edx
; Line 1922
	mov	al, BYTE PTR _is_neutral_blue$4[ebp]
	mov	BYTE PTR _best_blue_is_neutral$8[ebp], al
$LN10@af_latin_h:
; Line 1927
	jmp	$LN13@af_latin_h
$LN12@af_latin_h:
; Line 1929
	cmp	DWORD PTR _best_blue$9[ebp], 0
	je	SHORT $LN2@af_latin_h
; Line 1931
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR _best_blue$9[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 1932
	movzx	eax, BYTE PTR _best_blue_is_neutral$8[ebp]
	test	eax, eax
	je	SHORT $LN2@af_latin_h
; Line 1933
	mov	ecx, DWORD PTR _edge$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 8
	mov	eax, DWORD PTR _edge$[ebp]
	mov	BYTE PTR [eax+12], dl
$LN2@af_latin_h:
; Line 1935
	jmp	$LN17@af_latin_h
$LN19@af_latin_h:
; Line 1936
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_latin_hints_compute_blue_edges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv316 = -76						; size = 4
tv304 = -72						; size = 4
tv224 = -65						; size = 1
tv185 = -64						; size = 4
_delta2$1 = -60						; size = 4
_dist$2 = -56						; size = 4
_blue$3 = -52						; size = 4
_width$4 = -48						; size = 4
_ppem$5 = -44						; size = 4
_limit$6 = -40						; size = 4
_fitted$7 = -36						; size = 4
_threshold$8 = -32					; size = 4
_scaled$9 = -28						; size = 4
_blue$10 = -24						; size = 4
_Axis$11 = -20						; size = 4
_nn$ = -16						; size = 4
_axis$ = -12						; size = 4
_delta$ = -8						; size = 4
_scale$ = -4						; size = 4
_metrics$ = 8						; size = 4
_scaler$ = 12						; size = 4
_dim$ = 16						; size = 4
_af_latin_metrics_scale_dim PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 890
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 897
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN56@af_latin_m
; Line 899
	mov	eax, DWORD PTR _scaler$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _scale$[ebp], ecx
; Line 900
	mov	edx, DWORD PTR _scaler$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _delta$[ebp], eax
; Line 902
	jmp	SHORT $LN55@af_latin_m
$LN56@af_latin_m:
; Line 904
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _scale$[ebp], edx
; Line 905
	mov	eax, DWORD PTR _scaler$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _delta$[ebp], ecx
$LN55@af_latin_m:
; Line 908
	imul	edx, DWORD PTR _dim$[ebp], 1264
	mov	eax, DWORD PTR _metrics$[ebp]
	lea	ecx, DWORD PTR [eax+edx+44]
	mov	DWORD PTR _axis$[ebp], ecx
; Line 910
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR [edx+1256]
	cmp	eax, DWORD PTR _scale$[ebp]
	jne	SHORT $LN54@af_latin_m
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+1260]
	cmp	edx, DWORD PTR _delta$[ebp]
	jne	SHORT $LN54@af_latin_m
; Line 911
	jmp	$LN12@af_latin_m
$LN54@af_latin_m:
; Line 913
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [eax+1256], ecx
; Line 914
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR [edx+1260], eax
; Line 921
	mov	ecx, 1264				; 000004f0H
	shl	ecx, 0
	mov	edx, DWORD PTR _metrics$[ebp]
	lea	eax, DWORD PTR [edx+ecx+44]
	mov	DWORD PTR _Axis$11[ebp], eax
; Line 922
	mov	DWORD PTR _blue$10[ebp], 0
; Line 925
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN53@af_latin_m
$LN52@af_latin_m:
	mov	ecx, DWORD PTR _nn$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$[ebp], ecx
$LN53@af_latin_m:
	mov	edx, DWORD PTR _Axis$11[ebp]
	mov	eax, DWORD PTR _nn$[ebp]
	cmp	eax, DWORD PTR [edx+216]
	jae	SHORT $LN51@af_latin_m
; Line 927
	imul	ecx, DWORD PTR _nn$[ebp], 28
	mov	edx, DWORD PTR _Axis$11[ebp]
	mov	eax, DWORD PTR [edx+ecx+244]
	and	eax, 8
	je	SHORT $LN50@af_latin_m
; Line 929
	imul	ecx, DWORD PTR _nn$[ebp], 28
	mov	edx, DWORD PTR _Axis$11[ebp]
	lea	eax, DWORD PTR [edx+ecx+220]
	mov	DWORD PTR _blue$10[ebp], eax
; Line 930
	jmp	SHORT $LN51@af_latin_m
$LN50@af_latin_m:
; Line 932
	jmp	SHORT $LN52@af_latin_m
$LN51@af_latin_m:
; Line 934
	cmp	DWORD PTR _blue$10[ebp], 0
	je	$LN43@af_latin_m
; Line 943
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _blue$10[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _scaled$9[ebp], eax
; Line 944
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+88]
	movzx	edx, WORD PTR [ecx+12]
	mov	DWORD PTR _ppem$5[ebp], edx
; Line 945
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _limit$6[ebp], edx
; Line 946
	mov	DWORD PTR _threshold$8[ebp], 40		; 00000028H
; Line 952
	cmp	DWORD PTR _limit$6[ebp], 0
	je	SHORT $LN48@af_latin_m
	mov	eax, DWORD PTR _ppem$5[ebp]
	cmp	eax, DWORD PTR _limit$6[ebp]
	ja	SHORT $LN48@af_latin_m
	cmp	DWORD PTR _ppem$5[ebp], 6
	jb	SHORT $LN48@af_latin_m
; Line 953
	mov	DWORD PTR _threshold$8[ebp], 52		; 00000034H
$LN48@af_latin_m:
; Line 955
	mov	ecx, DWORD PTR _scaled$9[ebp]
	add	ecx, DWORD PTR _threshold$8[ebp]
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _fitted$7[ebp], ecx
; Line 957
	mov	edx, DWORD PTR _scaled$9[ebp]
	cmp	edx, DWORD PTR _fitted$7[ebp]
	je	$LN43@af_latin_m
; Line 967
	cmp	DWORD PTR _dim$[ebp], 1
	jne	$LN43@af_latin_m
; Line 969
	mov	eax, DWORD PTR _scaled$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _fitted$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _scale$[ebp], eax
$LN45@af_latin_m:
; Line 980
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN42@af_latin_m
	mov	edx, DWORD PTR _fitted$7[ebp]
	sub	edx, DWORD PTR _scaled$9[ebp]
	imul	eax, edx, 100
	cdq
	idiv	DWORD PTR _scaled$9[ebp]
	push	eax
	cvtsi2sd xmm0, DWORD PTR _scale$[ebp]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+1256]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _af_style_names[eax*4]
	push	ecx
	push	OFFSET $SG9437
	call	_FT_Message
	add	esp, 28					; 0000001cH
$LN42@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN45@af_latin_m
$LN43@af_latin_m:
; Line 986
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 987
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 989
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN41@af_latin_m
; Line 991
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 992
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 994
	jmp	SHORT $LN40@af_latin_m
$LN41@af_latin_m:
; Line 996
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 997
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN40@af_latin_m:
; Line 1002
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN36@af_latin_m
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN59@af_latin_m
	mov	DWORD PTR tv185[ebp], OFFSET $SG9444
	jmp	SHORT $LN60@af_latin_m
$LN59@af_latin_m:
	mov	DWORD PTR tv185[ebp], OFFSET $SG9445
$LN60@af_latin_m:
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _af_style_names[ecx*4]
	push	edx
	mov	eax, DWORD PTR tv185[ebp]
	push	eax
	push	OFFSET $SG9446
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN36@af_latin_m:
	xor	ecx, ecx
	jne	SHORT $LN40@af_latin_m
; Line 1005
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN35@af_latin_m
$LN34@af_latin_m:
	mov	edx, DWORD PTR _nn$[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$[ebp], edx
$LN35@af_latin_m:
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR _nn$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN33@af_latin_m
; Line 1007
	imul	edx, DWORD PTR _nn$[ebp], 12
	mov	eax, DWORD PTR _axis$[ebp]
	lea	ecx, DWORD PTR [eax+edx+12]
	mov	DWORD PTR _width$4[ebp], ecx
; Line 1010
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$4[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _width$4[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1011
	mov	eax, DWORD PTR _width$4[ebp]
	mov	ecx, DWORD PTR _width$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN32@af_latin_m:
; Line 1015
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN29@af_latin_m
	mov	edx, DWORD PTR _width$4[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _width$4[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG9457
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN29@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN32@af_latin_m
; Line 1016
	jmp	$LN34@af_latin_m
$LN33@af_latin_m:
; Line 1018
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN25@af_latin_m
	push	OFFSET $SG9462
	call	_FT_Message
	add	esp, 4
$LN25@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN33@af_latin_m
; Line 1023
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+208]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	cmp	eax, 40					; 00000028H
	jge	SHORT $LN61@af_latin_m
	mov	BYTE PTR tv224[ebp], 1
	jmp	SHORT $LN62@af_latin_m
$LN61@af_latin_m:
	mov	BYTE PTR tv224[ebp], 0
$LN62@af_latin_m:
	mov	eax, DWORD PTR _axis$[ebp]
	mov	cl, BYTE PTR tv224[ebp]
	mov	BYTE PTR [eax+212], cl
; Line 1026
	mov	edx, DWORD PTR _axis$[ebp]
	movzx	eax, BYTE PTR [edx+212]
	test	eax, eax
	je	SHORT $LN21@af_latin_m
$LN23@af_latin_m:
; Line 1029
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN20@af_latin_m
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _af_style_names[edx*4]
	push	eax
	push	OFFSET $SG9471
	call	_FT_Message
	add	esp, 8
$LN20@af_latin_m:
	xor	ecx, ecx
	jne	SHORT $LN23@af_latin_m
$LN21@af_latin_m:
; Line 1032
	cmp	DWORD PTR _dim$[ebp], 1
	jne	$LN12@af_latin_m
$LN18@af_latin_m:
; Line 1035
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN15@af_latin_m
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _af_style_names[eax*4]
	push	ecx
	push	OFFSET $SG9477
	call	_FT_Message
	add	esp, 8
$LN15@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN18@af_latin_m
; Line 1038
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN14@af_latin_m
$LN13@af_latin_m:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN14@af_latin_m:
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR _nn$[ebp]
	cmp	edx, DWORD PTR [ecx+216]
	jae	$LN12@af_latin_m
; Line 1040
	imul	eax, DWORD PTR _nn$[ebp], 28
	mov	ecx, DWORD PTR _axis$[ebp]
	lea	edx, DWORD PTR [ecx+eax+220]
	mov	DWORD PTR _blue$3[ebp], edx
; Line 1044
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blue$3[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _blue$3[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1045
	mov	edx, DWORD PTR _blue$3[ebp]
	mov	eax, DWORD PTR _blue$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
; Line 1046
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _blue$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _blue$3[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1047
	mov	eax, DWORD PTR _blue$3[ebp]
	mov	ecx, DWORD PTR _blue$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+20], edx
; Line 1048
	mov	eax, DWORD PTR _blue$3[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _blue$3[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 1051
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blue$3[ebp]
	mov	edx, DWORD PTR _blue$3[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx+12]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _dist$2[ebp], eax
; Line 1052
	cmp	DWORD PTR _dist$2[ebp], 48		; 00000030H
	jg	$LN2@af_latin_m
	cmp	DWORD PTR _dist$2[ebp], -48		; ffffffd0H
	jl	$LN2@af_latin_m
; Line 1088
	mov	ecx, DWORD PTR _dist$2[ebp]
	mov	DWORD PTR _delta2$1[ebp], ecx
; Line 1089
	cmp	DWORD PTR _dist$2[ebp], 0
	jge	SHORT $LN10@af_latin_m
; Line 1090
	mov	edx, DWORD PTR _delta2$1[ebp]
	neg	edx
	mov	DWORD PTR _delta2$1[ebp], edx
$LN10@af_latin_m:
; Line 1092
	cmp	DWORD PTR _delta2$1[ebp], 32		; 00000020H
	jge	SHORT $LN9@af_latin_m
; Line 1093
	mov	DWORD PTR _delta2$1[ebp], 0
	jmp	SHORT $LN6@af_latin_m
$LN9@af_latin_m:
; Line 1094
	cmp	DWORD PTR _delta2$1[ebp], 48		; 00000030H
	jge	SHORT $LN7@af_latin_m
; Line 1095
	mov	DWORD PTR _delta2$1[ebp], 32		; 00000020H
; Line 1096
	jmp	SHORT $LN6@af_latin_m
$LN7@af_latin_m:
; Line 1097
	mov	DWORD PTR _delta2$1[ebp], 64		; 00000040H
$LN6@af_latin_m:
; Line 1099
	cmp	DWORD PTR _dist$2[ebp], 0
	jge	SHORT $LN5@af_latin_m
; Line 1100
	mov	eax, DWORD PTR _delta2$1[ebp]
	neg	eax
	mov	DWORD PTR _delta2$1[ebp], eax
$LN5@af_latin_m:
; Line 1102
	mov	ecx, DWORD PTR _blue$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	eax, DWORD PTR _blue$3[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 1103
	mov	ecx, DWORD PTR _blue$3[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _delta2$1[ebp]
	mov	eax, DWORD PTR _blue$3[ebp]
	mov	DWORD PTR [eax+20], edx
; Line 1107
	mov	ecx, DWORD PTR _blue$3[ebp]
	mov	edx, DWORD PTR [ecx+24]
	or	edx, 1
	mov	eax, DWORD PTR _blue$3[ebp]
	mov	DWORD PTR [eax+24], edx
$LN4@af_latin_m:
; Line 1120
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	$LN1@af_latin_m
	mov	eax, DWORD PTR _blue$3[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 1
	je	SHORT $LN63@af_latin_m
	mov	DWORD PTR tv304[ebp], OFFSET $SG9501
	jmp	SHORT $LN64@af_latin_m
$LN63@af_latin_m:
	mov	DWORD PTR tv304[ebp], OFFSET $SG9502
$LN64@af_latin_m:
	mov	edx, DWORD PTR _blue$3[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, 1
	je	SHORT $LN65@af_latin_m
	mov	DWORD PTR tv316[ebp], OFFSET $SG9503
	jmp	SHORT $LN66@af_latin_m
$LN65@af_latin_m:
	mov	DWORD PTR tv316[ebp], OFFSET $SG9504
$LN66@af_latin_m:
	mov	ecx, DWORD PTR tv304[ebp]
	push	ecx
	mov	edx, DWORD PTR _blue$3[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+20]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _blue$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _nn$[ebp]
	push	edx
	mov	eax, DWORD PTR tv316[ebp]
	push	eax
	mov	ecx, DWORD PTR _blue$3[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+8]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _blue$3[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _nn$[ebp]
	push	ecx
	push	OFFSET $SG9505
	call	_FT_Message
	add	esp, 44					; 0000002cH
$LN1@af_latin_m:
	xor	edx, edx
	jne	$LN4@af_latin_m
$LN2@af_latin_m:
; Line 1122
	jmp	$LN13@af_latin_m
$LN12@af_latin_m:
; Line 1124
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_latin_metrics_scale_dim ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv749 = -725						; size = 1
tv700 = -724						; size = 4
tv683 = -717						; size = 1
tv669 = -716						; size = 4
tv620 = -712						; size = 4
tv595 = -708						; size = 4
tv565 = -704						; size = 4
tv541 = -697						; size = 1
tv525 = -696						; size = 4
tv500 = -692						; size = 4
tv475 = -688						; size = 4
tv451 = -681						; size = 1
tv428 = -680						; size = 4
tv389 = -676						; size = 4
tv373 = -672						; size = 4
tv347 = -668						; size = 4
tv331 = -664						; size = 4
_over_ref$1 = -657					; size = 1
_shoot$2 = -656						; size = 4
_ref$3 = -652						; size = 4
_d$4 = -648						; size = 4
_l2r$5 = -642						; size = 1
_left2right$6 = -641					; size = 1
_p_last$7 = -640					; size = 4
_p_first$8 = -636					; size = 4
_hit$9 = -629						; size = 1
_last$10 = -628						; size = 4
_first$11 = -624					; size = 4
_height_threshold$12 = -620				; size = 4
_length_threshold$13 = -616				; size = 4
_dist$14 = -612						; size = 4
_best_on_point_last$15 = -608				; size = 4
_best_on_point_first$16 = -604				; size = 4
_best_segment_last$17 = -600				; size = 4
_best_segment_first$18 = -596				; size = 4
_next$19 = -592						; size = 4
_prev$20 = -588						; size = 4
_best_x$21 = -584					; size = 4
_pp$22 = -580						; size = 4
_old_best_point$23 = -576				; size = 4
_last$24 = -572						; size = 4
_first$25 = -568					; size = 4
_nn$26 = -564						; size = 4
_len$27 = -560						; size = 4
_round$28 = -553					; size = 1
_points$29 = -552					; size = 4
_best_contour_last$30 = -548				; size = 4
_best_contour_first$31 = -544				; size = 4
_best_point$32 = -540					; size = 4
_best_y$33 = -536					; size = 4
_y_offset$34 = -528					; size = 4
_glyph_index$35 = -516					; size = 4
_ch$36 = -508						; size = 4
_have_flag$37 = -501					; size = 1
_blue_shoot$38 = -500					; size = 4
_blue_ref$39 = -496					; size = 4
_p$40 = -492						; size = 4
_bs$ = -488						; size = 4
_bss$ = -484						; size = 4
_sc$ = -480						; size = 4
_outline$ = -472					; size = 20
_axis$ = -448						; size = 4
_error$ = -444						; size = 4
_blue$ = -440						; size = 4
_num_rounds$ = -436					; size = 4
_num_flats$ = -432					; size = 4
_rounds$ = -424						; size = 204
_flats$ = -212						; size = 204
__$ArrayPad$ = -4					; size = 4
_metrics$ = 8						; size = 4
_face$ = 12						; size = 4
_af_latin_metrics_init_blues PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 260
	push	ebp
	mov	ebp, esp
	sub	esp, 728				; 000002d8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-728]
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 269
	mov	eax, 1264				; 000004f0H
	shl	eax, 0
	mov	ecx, DWORD PTR _metrics$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 272
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sc$[ebp], ecx
; Line 274
	mov	edx, DWORD PTR _sc$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _bss$[ebp], eax
; Line 275
	mov	ecx, DWORD PTR _bss$[ebp]
	lea	edx, DWORD PTR _af_blue_stringsets[ecx*8]
	mov	DWORD PTR _bs$[ebp], edx
$LN195@af_latin_m:
; Line 283
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN194@af_latin_m
	push	OFFSET $SG9112
	call	_FT_Message
	add	esp, 4
$LN194@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN195@af_latin_m
; Line 285
	jmp	SHORT $LN191@af_latin_m
$LN190@af_latin_m:
	mov	eax, DWORD PTR _bs$[ebp]
	add	eax, 8
	mov	DWORD PTR _bs$[ebp], eax
$LN191@af_latin_m:
	mov	ecx, DWORD PTR _bs$[ebp]
	cmp	DWORD PTR [ecx], 644			; 00000284H
	je	$LN4@af_latin_m
; Line 287
	mov	edx, DWORD PTR _bs$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, OFFSET _af_blue_strings
	mov	DWORD PTR _p$40[ebp], eax
; Line 294
	mov	BYTE PTR _have_flag$37[ebp], 0
$LN188@af_latin_m:
; Line 297
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN187@af_latin_m
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	push	ecx
	push	OFFSET $SG9124
	call	_FT_Message
	add	esp, 8
$LN187@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN188@af_latin_m
; Line 299
	mov	eax, DWORD PTR _bs$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	test	ecx, ecx
	je	$LN140@af_latin_m
$LN183@af_latin_m:
; Line 301
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN182@af_latin_m
	push	OFFSET $SG9130
	call	_FT_Message
	add	esp, 4
$LN182@af_latin_m:
	xor	ecx, ecx
	jne	SHORT $LN183@af_latin_m
; Line 303
	mov	edx, DWORD PTR _bs$[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 1
	je	SHORT $LN179@af_latin_m
$LN178@af_latin_m:
; Line 305
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN177@af_latin_m
	push	OFFSET $SG9136
	call	_FT_Message
	add	esp, 4
$LN177@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN178@af_latin_m
; Line 306
	mov	BYTE PTR _have_flag$37[ebp], 1
$LN179@af_latin_m:
; Line 309
	mov	ecx, DWORD PTR _bs$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 2
	je	SHORT $LN174@af_latin_m
; Line 311
	movzx	eax, BYTE PTR _have_flag$37[ebp]
	test	eax, eax
	je	SHORT $LN168@af_latin_m
$LN172@af_latin_m:
; Line 312
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN171@af_latin_m
	push	OFFSET $SG9143
	call	_FT_Message
	add	esp, 4
$LN171@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN172@af_latin_m
$LN168@af_latin_m:
; Line 313
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN167@af_latin_m
	push	OFFSET $SG9148
	call	_FT_Message
	add	esp, 4
$LN167@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN168@af_latin_m
; Line 314
	mov	BYTE PTR _have_flag$37[ebp], 1
$LN174@af_latin_m:
; Line 317
	mov	ecx, DWORD PTR _bs$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 4
	je	SHORT $LN164@af_latin_m
; Line 319
	movzx	eax, BYTE PTR _have_flag$37[ebp]
	test	eax, eax
	je	SHORT $LN158@af_latin_m
$LN162@af_latin_m:
; Line 320
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN161@af_latin_m
	push	OFFSET $SG9155
	call	_FT_Message
	add	esp, 4
$LN161@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN162@af_latin_m
$LN158@af_latin_m:
; Line 321
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN157@af_latin_m
	push	OFFSET $SG9160
	call	_FT_Message
	add	esp, 4
$LN157@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN158@af_latin_m
; Line 322
	mov	BYTE PTR _have_flag$37[ebp], 1
$LN164@af_latin_m:
; Line 325
	mov	ecx, DWORD PTR _bs$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 8
	je	SHORT $LN144@af_latin_m
; Line 327
	movzx	eax, BYTE PTR _have_flag$37[ebp]
	test	eax, eax
	je	SHORT $LN148@af_latin_m
$LN152@af_latin_m:
; Line 328
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN151@af_latin_m
	push	OFFSET $SG9167
	call	_FT_Message
	add	esp, 4
$LN151@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN152@af_latin_m
$LN148@af_latin_m:
; Line 329
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN147@af_latin_m
	push	OFFSET $SG9172
	call	_FT_Message
	add	esp, 4
$LN147@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN148@af_latin_m
$LN144@af_latin_m:
; Line 332
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN143@af_latin_m
	push	OFFSET $SG9177
	call	_FT_Message
	add	esp, 4
$LN143@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN144@af_latin_m
$LN140@af_latin_m:
; Line 335
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN139@af_latin_m
	push	OFFSET $SG9182
	call	_FT_Message
	add	esp, 4
$LN139@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN140@af_latin_m
; Line 339
	mov	DWORD PTR _num_flats$[ebp], 0
; Line 340
	mov	DWORD PTR _num_rounds$[ebp], 0
$LN136@af_latin_m:
; Line 342
	mov	ecx, DWORD PTR _p$40[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN135@af_latin_m
; Line 350
	mov	BYTE PTR _round$28[ebp], 0
; Line 353
	mov	eax, DWORD PTR _p$40[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$36[ebp], ecx
	mov	edx, DWORD PTR _p$40[ebp]
	add	edx, 1
	mov	DWORD PTR _p$40[ebp], edx
	cmp	DWORD PTR _ch$36[ebp], 128		; 00000080H
	jb	$LN134@af_latin_m
	cmp	DWORD PTR _ch$36[ebp], 224		; 000000e0H
	jae	SHORT $LN133@af_latin_m
	mov	DWORD PTR _len$27[ebp], 1
	mov	eax, DWORD PTR _ch$36[ebp]
	and	eax, 31					; 0000001fH
	mov	DWORD PTR _ch$36[ebp], eax
	jmp	SHORT $LN132@af_latin_m
$LN133@af_latin_m:
	cmp	DWORD PTR _ch$36[ebp], 240		; 000000f0H
	jae	SHORT $LN131@af_latin_m
	mov	DWORD PTR _len$27[ebp], 2
	mov	ecx, DWORD PTR _ch$36[ebp]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _ch$36[ebp], ecx
	jmp	SHORT $LN132@af_latin_m
$LN131@af_latin_m:
	mov	DWORD PTR _len$27[ebp], 3
	mov	edx, DWORD PTR _ch$36[ebp]
	and	edx, 7
	mov	DWORD PTR _ch$36[ebp], edx
$LN132@af_latin_m:
	jmp	SHORT $LN129@af_latin_m
$LN128@af_latin_m:
	mov	eax, DWORD PTR _len$27[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$27[ebp], eax
$LN129@af_latin_m:
	cmp	DWORD PTR _len$27[ebp], 0
	jbe	SHORT $LN134@af_latin_m
	mov	ecx, DWORD PTR _ch$36[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _p$40[ebp]
	movsx	eax, BYTE PTR [edx]
	and	eax, 63					; 0000003fH
	or	ecx, eax
	mov	DWORD PTR _ch$36[ebp], ecx
	mov	ecx, DWORD PTR _p$40[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$40[ebp], ecx
	jmp	SHORT $LN128@af_latin_m
$LN134@af_latin_m:
; Line 356
	lea	edx, DWORD PTR _y_offset$34[ebp]
	push	edx
	lea	eax, DWORD PTR _glyph_index$35[ebp]
	push	eax
	mov	ecx, DWORD PTR _ch$36[ebp]
	push	ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	call	_af_get_char_index
	add	esp, 16					; 00000010H
; Line 357
	cmp	DWORD PTR _glyph_index$35[ebp], 0
	jne	SHORT $LN126@af_latin_m
$LN125@af_latin_m:
; Line 359
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN124@af_latin_m
	mov	edx, DWORD PTR _ch$36[ebp]
	push	edx
	push	OFFSET $SG9210
	call	_FT_Message
	add	esp, 8
$LN124@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN125@af_latin_m
; Line 360
	jmp	$LN136@af_latin_m
$LN126@af_latin_m:
; Line 363
	push	1
	mov	ecx, DWORD PTR _glyph_index$35[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Load_Glyph
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 364
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 108				; 0000006cH
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _outline$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _outline$[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _outline$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _outline$[ebp+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR _outline$[ebp+16], ecx
; Line 365
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN119@af_latin_m
	movsx	edx, WORD PTR _outline$[ebp+2]
	test	edx, edx
	jg	SHORT $LN121@af_latin_m
$LN119@af_latin_m:
; Line 367
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN118@af_latin_m
	mov	edx, DWORD PTR _ch$36[ebp]
	push	edx
	push	OFFSET $SG9217
	call	_FT_Message
	add	esp, 8
$LN118@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN119@af_latin_m
; Line 368
	jmp	$LN136@af_latin_m
$LN121@af_latin_m:
; Line 372
	mov	ecx, DWORD PTR _outline$[ebp+4]
	mov	DWORD PTR _points$29[ebp], ecx
; Line 373
	mov	DWORD PTR _best_point$32[ebp], -1
; Line 374
	mov	DWORD PTR _best_y$33[ebp], 0
; Line 375
	mov	DWORD PTR _best_contour_first$31[ebp], 0
; Line 376
	mov	DWORD PTR _best_contour_last$30[ebp], 0
; Line 380
	mov	DWORD PTR _first$25[ebp], 0
; Line 381
	mov	DWORD PTR _last$24[ebp], -1
; Line 384
	mov	DWORD PTR _nn$26[ebp], 0
	jmp	SHORT $LN115@af_latin_m
$LN114@af_latin_m:
	mov	edx, DWORD PTR _last$24[ebp]
	add	edx, 1
	mov	DWORD PTR _first$25[ebp], edx
	mov	eax, DWORD PTR _nn$26[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$26[ebp], eax
$LN115@af_latin_m:
	movsx	ecx, WORD PTR _outline$[ebp]
	cmp	DWORD PTR _nn$26[ebp], ecx
	jge	$LN113@af_latin_m
; Line 386
	mov	edx, DWORD PTR _best_point$32[ebp]
	mov	DWORD PTR _old_best_point$23[ebp], edx
; Line 390
	mov	eax, DWORD PTR _nn$26[ebp]
	mov	ecx, DWORD PTR _outline$[ebp+12]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _last$24[ebp], edx
; Line 395
	mov	eax, DWORD PTR _last$24[ebp]
	cmp	eax, DWORD PTR _first$25[ebp]
	jg	SHORT $LN112@af_latin_m
; Line 396
	jmp	SHORT $LN114@af_latin_m
$LN112@af_latin_m:
; Line 398
	mov	ecx, DWORD PTR _bs$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 1
	je	SHORT $LN111@af_latin_m
; Line 400
	mov	eax, DWORD PTR _first$25[ebp]
	mov	DWORD PTR _pp$22[ebp], eax
	jmp	SHORT $LN110@af_latin_m
$LN109@af_latin_m:
	mov	ecx, DWORD PTR _pp$22[ebp]
	add	ecx, 1
	mov	DWORD PTR _pp$22[ebp], ecx
$LN110@af_latin_m:
	mov	edx, DWORD PTR _pp$22[ebp]
	cmp	edx, DWORD PTR _last$24[ebp]
	jg	SHORT $LN108@af_latin_m
; Line 401
	cmp	DWORD PTR _best_point$32[ebp], 0
	jl	SHORT $LN106@af_latin_m
	mov	eax, DWORD PTR _pp$22[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	cmp	edx, DWORD PTR _best_y$33[ebp]
	jle	SHORT $LN107@af_latin_m
$LN106@af_latin_m:
; Line 403
	mov	eax, DWORD PTR _pp$22[ebp]
	mov	DWORD PTR _best_point$32[ebp], eax
; Line 404
	mov	ecx, DWORD PTR _pp$22[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _best_y$33[ebp], eax
$LN107@af_latin_m:
; Line 406
	jmp	SHORT $LN109@af_latin_m
$LN108@af_latin_m:
; Line 407
	jmp	SHORT $LN105@af_latin_m
$LN111@af_latin_m:
; Line 409
	mov	ecx, DWORD PTR _first$25[ebp]
	mov	DWORD PTR _pp$22[ebp], ecx
	jmp	SHORT $LN104@af_latin_m
$LN103@af_latin_m:
	mov	edx, DWORD PTR _pp$22[ebp]
	add	edx, 1
	mov	DWORD PTR _pp$22[ebp], edx
$LN104@af_latin_m:
	mov	eax, DWORD PTR _pp$22[ebp]
	cmp	eax, DWORD PTR _last$24[ebp]
	jg	SHORT $LN105@af_latin_m
; Line 410
	cmp	DWORD PTR _best_point$32[ebp], 0
	jl	SHORT $LN100@af_latin_m
	mov	ecx, DWORD PTR _pp$22[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+4]
	cmp	eax, DWORD PTR _best_y$33[ebp]
	jge	SHORT $LN101@af_latin_m
$LN100@af_latin_m:
; Line 412
	mov	ecx, DWORD PTR _pp$22[ebp]
	mov	DWORD PTR _best_point$32[ebp], ecx
; Line 413
	mov	edx, DWORD PTR _pp$22[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+4]
	mov	DWORD PTR _best_y$33[ebp], ecx
$LN101@af_latin_m:
; Line 415
	jmp	SHORT $LN103@af_latin_m
$LN105@af_latin_m:
; Line 417
	mov	edx, DWORD PTR _best_point$32[ebp]
	cmp	edx, DWORD PTR _old_best_point$23[ebp]
	je	SHORT $LN99@af_latin_m
; Line 419
	mov	eax, DWORD PTR _first$25[ebp]
	mov	DWORD PTR _best_contour_first$31[ebp], eax
; Line 420
	mov	ecx, DWORD PTR _last$24[ebp]
	mov	DWORD PTR _best_contour_last$30[ebp], ecx
$LN99@af_latin_m:
; Line 422
	jmp	$LN114@af_latin_m
$LN113@af_latin_m:
; Line 428
	cmp	DWORD PTR _best_point$32[ebp], 0
	jl	$LN98@af_latin_m
; Line 430
	mov	edx, DWORD PTR _best_point$32[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _best_x$21[ebp], ecx
; Line 437
	mov	edx, DWORD PTR _best_point$32[ebp]
	mov	DWORD PTR _best_segment_first$18[ebp], edx
; Line 438
	mov	eax, DWORD PTR _best_point$32[ebp]
	mov	DWORD PTR _best_segment_last$17[ebp], eax
; Line 440
	mov	ecx, DWORD PTR _outline$[ebp+8]
	add	ecx, DWORD PTR _best_point$32[ebp]
	movsx	edx, BYTE PTR [ecx]
	and	edx, 3
	cmp	edx, 1
	jne	SHORT $LN97@af_latin_m
; Line 442
	mov	eax, DWORD PTR _best_point$32[ebp]
	mov	DWORD PTR _best_on_point_first$16[ebp], eax
; Line 443
	mov	ecx, DWORD PTR _best_point$32[ebp]
	mov	DWORD PTR _best_on_point_last$15[ebp], ecx
; Line 445
	jmp	SHORT $LN96@af_latin_m
$LN97@af_latin_m:
; Line 447
	mov	DWORD PTR _best_on_point_first$16[ebp], -1
; Line 448
	mov	DWORD PTR _best_on_point_last$15[ebp], -1
$LN96@af_latin_m:
; Line 454
	mov	edx, DWORD PTR _best_point$32[ebp]
	mov	DWORD PTR _prev$20[ebp], edx
; Line 455
	mov	eax, DWORD PTR _prev$20[ebp]
	mov	DWORD PTR _next$19[ebp], eax
$LN95@af_latin_m:
; Line 459
	mov	ecx, DWORD PTR _prev$20[ebp]
	cmp	ecx, DWORD PTR _best_contour_first$31[ebp]
	jle	SHORT $LN92@af_latin_m
; Line 460
	mov	edx, DWORD PTR _prev$20[ebp]
	sub	edx, 1
	mov	DWORD PTR _prev$20[ebp], edx
; Line 461
	jmp	SHORT $LN91@af_latin_m
$LN92@af_latin_m:
; Line 462
	mov	eax, DWORD PTR _best_contour_last$30[ebp]
	mov	DWORD PTR _prev$20[ebp], eax
$LN91@af_latin_m:
; Line 464
	mov	ecx, DWORD PTR _prev$20[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+4]
	sub	eax, DWORD PTR _best_y$33[ebp]
	jns	SHORT $LN198@af_latin_m
	mov	ecx, DWORD PTR _prev$20[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+4]
	sub	eax, DWORD PTR _best_y$33[ebp]
	neg	eax
	mov	DWORD PTR tv331[ebp], eax
	jmp	SHORT $LN199@af_latin_m
$LN198@af_latin_m:
	mov	ecx, DWORD PTR _prev$20[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+4]
	sub	eax, DWORD PTR _best_y$33[ebp]
	mov	DWORD PTR tv331[ebp], eax
$LN199@af_latin_m:
	mov	ecx, DWORD PTR tv331[ebp]
	mov	DWORD PTR _dist$14[ebp], ecx
; Line 467
	cmp	DWORD PTR _dist$14[ebp], 5
	jle	SHORT $LN90@af_latin_m
; Line 468
	mov	edx, DWORD PTR _prev$20[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	sub	ecx, DWORD PTR _best_x$21[ebp]
	jns	SHORT $LN200@af_latin_m
	mov	edx, DWORD PTR _prev$20[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	sub	ecx, DWORD PTR _best_x$21[ebp]
	neg	ecx
	mov	DWORD PTR tv347[ebp], ecx
	jmp	SHORT $LN201@af_latin_m
$LN200@af_latin_m:
	mov	edx, DWORD PTR _prev$20[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	sub	ecx, DWORD PTR _best_x$21[ebp]
	mov	DWORD PTR tv347[ebp], ecx
$LN201@af_latin_m:
	imul	edx, DWORD PTR _dist$14[ebp], 20
	cmp	DWORD PTR tv347[ebp], edx
	jg	SHORT $LN90@af_latin_m
; Line 469
	jmp	SHORT $LN86@af_latin_m
$LN90@af_latin_m:
; Line 471
	mov	eax, DWORD PTR _prev$20[ebp]
	mov	DWORD PTR _best_segment_first$18[ebp], eax
; Line 473
	mov	ecx, DWORD PTR _outline$[ebp+8]
	add	ecx, DWORD PTR _prev$20[ebp]
	movsx	edx, BYTE PTR [ecx]
	and	edx, 3
	cmp	edx, 1
	jne	SHORT $LN94@af_latin_m
; Line 475
	mov	eax, DWORD PTR _prev$20[ebp]
	mov	DWORD PTR _best_on_point_first$16[ebp], eax
; Line 476
	cmp	DWORD PTR _best_on_point_last$15[ebp], 0
	jge	SHORT $LN94@af_latin_m
; Line 477
	mov	ecx, DWORD PTR _prev$20[ebp]
	mov	DWORD PTR _best_on_point_last$15[ebp], ecx
$LN94@af_latin_m:
; Line 480
	mov	edx, DWORD PTR _prev$20[ebp]
	cmp	edx, DWORD PTR _best_point$32[ebp]
	jne	$LN95@af_latin_m
$LN86@af_latin_m:
; Line 484
	mov	eax, DWORD PTR _next$19[ebp]
	cmp	eax, DWORD PTR _best_contour_last$30[ebp]
	jge	SHORT $LN83@af_latin_m
; Line 485
	mov	ecx, DWORD PTR _next$19[ebp]
	add	ecx, 1
	mov	DWORD PTR _next$19[ebp], ecx
; Line 486
	jmp	SHORT $LN82@af_latin_m
$LN83@af_latin_m:
; Line 487
	mov	edx, DWORD PTR _best_contour_first$31[ebp]
	mov	DWORD PTR _next$19[ebp], edx
$LN82@af_latin_m:
; Line 489
	mov	eax, DWORD PTR _next$19[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	sub	edx, DWORD PTR _best_y$33[ebp]
	jns	SHORT $LN202@af_latin_m
	mov	eax, DWORD PTR _next$19[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	sub	edx, DWORD PTR _best_y$33[ebp]
	neg	edx
	mov	DWORD PTR tv373[ebp], edx
	jmp	SHORT $LN203@af_latin_m
$LN202@af_latin_m:
	mov	eax, DWORD PTR _next$19[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	sub	edx, DWORD PTR _best_y$33[ebp]
	mov	DWORD PTR tv373[ebp], edx
$LN203@af_latin_m:
	mov	eax, DWORD PTR tv373[ebp]
	mov	DWORD PTR _dist$14[ebp], eax
; Line 490
	cmp	DWORD PTR _dist$14[ebp], 5
	jle	SHORT $LN81@af_latin_m
; Line 491
	mov	ecx, DWORD PTR _next$19[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	sub	eax, DWORD PTR _best_x$21[ebp]
	jns	SHORT $LN204@af_latin_m
	mov	ecx, DWORD PTR _next$19[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	sub	eax, DWORD PTR _best_x$21[ebp]
	neg	eax
	mov	DWORD PTR tv389[ebp], eax
	jmp	SHORT $LN205@af_latin_m
$LN204@af_latin_m:
	mov	ecx, DWORD PTR _next$19[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	sub	eax, DWORD PTR _best_x$21[ebp]
	mov	DWORD PTR tv389[ebp], eax
$LN205@af_latin_m:
	imul	ecx, DWORD PTR _dist$14[ebp], 20
	cmp	DWORD PTR tv389[ebp], ecx
	jg	SHORT $LN81@af_latin_m
; Line 492
	jmp	SHORT $LN84@af_latin_m
$LN81@af_latin_m:
; Line 494
	mov	edx, DWORD PTR _next$19[ebp]
	mov	DWORD PTR _best_segment_last$17[ebp], edx
; Line 496
	mov	eax, DWORD PTR _outline$[ebp+8]
	add	eax, DWORD PTR _next$19[ebp]
	movsx	ecx, BYTE PTR [eax]
	and	ecx, 3
	cmp	ecx, 1
	jne	SHORT $LN85@af_latin_m
; Line 498
	mov	edx, DWORD PTR _next$19[ebp]
	mov	DWORD PTR _best_on_point_last$15[ebp], edx
; Line 499
	cmp	DWORD PTR _best_on_point_first$16[ebp], 0
	jge	SHORT $LN85@af_latin_m
; Line 500
	mov	eax, DWORD PTR _next$19[ebp]
	mov	DWORD PTR _best_on_point_first$16[ebp], eax
$LN85@af_latin_m:
; Line 503
	mov	ecx, DWORD PTR _next$19[ebp]
	cmp	ecx, DWORD PTR _best_point$32[ebp]
	jne	$LN86@af_latin_m
$LN84@af_latin_m:
; Line 505
	mov	edx, DWORD PTR _bs$[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 8
	je	$LN77@af_latin_m
; Line 522
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	xor	edx, edx
	mov	ecx, 25					; 00000019H
	div	ecx
	mov	DWORD PTR _length_threshold$13[ebp], eax
; Line 526
	mov	edx, DWORD PTR _best_segment_last$17[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR _best_segment_first$18[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [eax+edx*8]
	sub	edx, DWORD PTR [esi+ecx*8]
	jns	SHORT $LN206@af_latin_m
	mov	eax, DWORD PTR _best_segment_last$17[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR _best_segment_first$18[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	sub	eax, DWORD PTR [esi+edx*8]
	neg	eax
	mov	DWORD PTR tv428[ebp], eax
	jmp	SHORT $LN207@af_latin_m
$LN206@af_latin_m:
	mov	ecx, DWORD PTR _best_segment_last$17[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR _best_segment_first$18[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8]
	sub	ecx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR tv428[ebp], ecx
$LN207@af_latin_m:
	mov	edx, DWORD PTR tv428[ebp]
	mov	DWORD PTR _dist$14[ebp], edx
; Line 530
	mov	eax, DWORD PTR _dist$14[ebp]
	cmp	eax, DWORD PTR _length_threshold$13[ebp]
	jge	$LN77@af_latin_m
	mov	ecx, DWORD PTR _best_segment_last$17[ebp]
	sub	ecx, DWORD PTR _best_segment_first$18[ebp]
	add	ecx, 2
	mov	edx, DWORD PTR _best_contour_last$30[ebp]
	sub	edx, DWORD PTR _best_contour_first$31[ebp]
	cmp	ecx, edx
	jg	$LN77@af_latin_m
; Line 533
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	shr	ecx, 2
	mov	DWORD PTR _height_threshold$12[ebp], ecx
; Line 543
	mov	DWORD PTR _p_first$8[ebp], 0
; Line 544
	mov	DWORD PTR _p_last$7[ebp], 0
; Line 550
	mov	edx, DWORD PTR _best_point$32[ebp]
	mov	DWORD PTR _prev$20[ebp], edx
$LN75@af_latin_m:
; Line 554
	mov	eax, DWORD PTR _prev$20[ebp]
	cmp	eax, DWORD PTR _best_contour_first$31[ebp]
	jle	SHORT $LN72@af_latin_m
; Line 555
	mov	ecx, DWORD PTR _prev$20[ebp]
	sub	ecx, 1
	mov	DWORD PTR _prev$20[ebp], ecx
; Line 556
	jmp	SHORT $LN71@af_latin_m
$LN72@af_latin_m:
; Line 557
	mov	edx, DWORD PTR _best_contour_last$30[ebp]
	mov	DWORD PTR _prev$20[ebp], edx
$LN71@af_latin_m:
; Line 559
	mov	eax, DWORD PTR _prev$20[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	cmp	edx, DWORD PTR _best_x$21[ebp]
	je	SHORT $LN74@af_latin_m
; Line 560
	jmp	SHORT $LN73@af_latin_m
$LN74@af_latin_m:
; Line 562
	mov	eax, DWORD PTR _prev$20[ebp]
	cmp	eax, DWORD PTR _best_point$32[ebp]
	jne	SHORT $LN75@af_latin_m
$LN73@af_latin_m:
; Line 565
	mov	ecx, DWORD PTR _prev$20[ebp]
	cmp	ecx, DWORD PTR _best_point$32[ebp]
	jne	SHORT $LN69@af_latin_m
; Line 566
	jmp	$LN136@af_latin_m
$LN69@af_latin_m:
; Line 568
	mov	edx, DWORD PTR _prev$20[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR _best_point$32[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [eax+edx*8]
	cmp	edx, DWORD PTR [esi+ecx*8]
	jge	SHORT $LN208@af_latin_m
	mov	BYTE PTR tv451[ebp], 1
	jmp	SHORT $LN209@af_latin_m
$LN208@af_latin_m:
	mov	BYTE PTR tv451[ebp], 0
$LN209@af_latin_m:
	mov	al, BYTE PTR tv451[ebp]
	mov	BYTE PTR _left2right$6[ebp], al
; Line 570
	mov	ecx, DWORD PTR _best_segment_last$17[ebp]
	mov	DWORD PTR _first$11[ebp], ecx
; Line 571
	mov	edx, DWORD PTR _first$11[ebp]
	mov	DWORD PTR _last$10[ebp], edx
; Line 572
	mov	BYTE PTR _hit$9[ebp], 0
$LN68@af_latin_m:
; Line 580
	movzx	eax, BYTE PTR _hit$9[ebp]
	test	eax, eax
	jne	SHORT $LN65@af_latin_m
; Line 583
	mov	ecx, DWORD PTR _last$10[ebp]
	mov	DWORD PTR _first$11[ebp], ecx
; Line 587
	mov	edx, DWORD PTR _outline$[ebp+8]
	add	edx, DWORD PTR _first$11[ebp]
	movsx	eax, BYTE PTR [edx]
	and	eax, 3
	cmp	eax, 1
	jne	SHORT $LN64@af_latin_m
; Line 589
	mov	ecx, DWORD PTR _first$11[ebp]
	mov	DWORD PTR _p_first$8[ebp], ecx
; Line 590
	mov	edx, DWORD PTR _first$11[ebp]
	mov	DWORD PTR _p_last$7[ebp], edx
; Line 592
	jmp	SHORT $LN63@af_latin_m
$LN64@af_latin_m:
; Line 594
	mov	DWORD PTR _p_first$8[ebp], -1
; Line 595
	mov	DWORD PTR _p_last$7[ebp], -1
$LN63@af_latin_m:
; Line 598
	mov	BYTE PTR _hit$9[ebp], 1
$LN65@af_latin_m:
; Line 601
	mov	eax, DWORD PTR _last$10[ebp]
	cmp	eax, DWORD PTR _best_contour_last$30[ebp]
	jge	SHORT $LN62@af_latin_m
; Line 602
	mov	ecx, DWORD PTR _last$10[ebp]
	add	ecx, 1
	mov	DWORD PTR _last$10[ebp], ecx
; Line 603
	jmp	SHORT $LN61@af_latin_m
$LN62@af_latin_m:
; Line 604
	mov	edx, DWORD PTR _best_contour_first$31[ebp]
	mov	DWORD PTR _last$10[ebp], edx
$LN61@af_latin_m:
; Line 606
	mov	eax, DWORD PTR _first$11[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR _best_y$33[ebp]
	sub	edx, DWORD PTR [ecx+eax*8+4]
	jns	SHORT $LN210@af_latin_m
	mov	eax, DWORD PTR _first$11[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR _best_y$33[ebp]
	sub	edx, DWORD PTR [ecx+eax*8+4]
	neg	edx
	mov	DWORD PTR tv475[ebp], edx
	jmp	SHORT $LN211@af_latin_m
$LN210@af_latin_m:
	mov	eax, DWORD PTR _first$11[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR _best_y$33[ebp]
	sub	edx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR tv475[ebp], edx
$LN211@af_latin_m:
	mov	eax, DWORD PTR tv475[ebp]
	cmp	eax, DWORD PTR _height_threshold$12[ebp]
	jle	SHORT $LN60@af_latin_m
; Line 609
	mov	BYTE PTR _hit$9[ebp], 0
; Line 610
	jmp	$LN67@af_latin_m
$LN60@af_latin_m:
; Line 614
	mov	ecx, DWORD PTR _last$10[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	sub	ecx, DWORD PTR [esi+eax*8+4]
	jns	SHORT $LN212@af_latin_m
	mov	edx, DWORD PTR _last$10[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [eax+edx*8+4]
	sub	edx, DWORD PTR [esi+ecx*8+4]
	neg	edx
	mov	DWORD PTR tv500[ebp], edx
	jmp	SHORT $LN213@af_latin_m
$LN212@af_latin_m:
	mov	eax, DWORD PTR _last$10[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	sub	eax, DWORD PTR [esi+edx*8+4]
	mov	DWORD PTR tv500[ebp], eax
$LN213@af_latin_m:
	mov	ecx, DWORD PTR tv500[ebp]
	mov	DWORD PTR _dist$14[ebp], ecx
; Line 615
	cmp	DWORD PTR _dist$14[ebp], 5
	jle	$LN59@af_latin_m
; Line 617
	mov	edx, DWORD PTR _last$10[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [eax+edx*8]
	sub	edx, DWORD PTR [esi+ecx*8]
	jns	SHORT $LN214@af_latin_m
	mov	eax, DWORD PTR _last$10[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	sub	eax, DWORD PTR [esi+edx*8]
	neg	eax
	mov	DWORD PTR tv525[ebp], eax
	jmp	SHORT $LN215@af_latin_m
$LN214@af_latin_m:
	mov	ecx, DWORD PTR _last$10[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8]
	sub	ecx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR tv525[ebp], ecx
$LN215@af_latin_m:
	imul	edx, DWORD PTR _dist$14[ebp], 20
	cmp	DWORD PTR tv525[ebp], edx
	jg	SHORT $LN59@af_latin_m
; Line 619
	mov	BYTE PTR _hit$9[ebp], 0
; Line 620
	jmp	$LN67@af_latin_m
$LN59@af_latin_m:
; Line 623
	mov	eax, DWORD PTR _outline$[ebp+8]
	add	eax, DWORD PTR _last$10[ebp]
	movsx	ecx, BYTE PTR [eax]
	and	ecx, 3
	cmp	ecx, 1
	jne	SHORT $LN57@af_latin_m
; Line 625
	mov	edx, DWORD PTR _last$10[ebp]
	mov	DWORD PTR _p_last$7[ebp], edx
; Line 626
	cmp	DWORD PTR _p_first$8[ebp], 0
	jge	SHORT $LN57@af_latin_m
; Line 627
	mov	eax, DWORD PTR _last$10[ebp]
	mov	DWORD PTR _p_first$8[ebp], eax
$LN57@af_latin_m:
; Line 630
	mov	ecx, DWORD PTR _first$11[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR _last$10[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8]
	cmp	ecx, DWORD PTR [esi+eax*8]
	jge	SHORT $LN216@af_latin_m
	mov	BYTE PTR tv541[ebp], 1
	jmp	SHORT $LN217@af_latin_m
$LN216@af_latin_m:
	mov	BYTE PTR tv541[ebp], 0
$LN217@af_latin_m:
	mov	dl, BYTE PTR tv541[ebp]
	mov	BYTE PTR _l2r$5[ebp], dl
; Line 631
	mov	eax, DWORD PTR _last$10[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	sub	eax, DWORD PTR [esi+edx*8]
	jns	SHORT $LN218@af_latin_m
	mov	ecx, DWORD PTR _last$10[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8]
	sub	ecx, DWORD PTR [esi+eax*8]
	neg	ecx
	mov	DWORD PTR tv565[ebp], ecx
	jmp	SHORT $LN219@af_latin_m
$LN218@af_latin_m:
	mov	edx, DWORD PTR _last$10[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [eax+edx*8]
	sub	edx, DWORD PTR [esi+ecx*8]
	mov	DWORD PTR tv565[ebp], edx
$LN219@af_latin_m:
	mov	eax, DWORD PTR tv565[ebp]
	mov	DWORD PTR _d$4[ebp], eax
; Line 634
	movzx	ecx, BYTE PTR _l2r$5[ebp]
	movzx	edx, BYTE PTR _left2right$6[ebp]
	cmp	ecx, edx
	jne	$LN67@af_latin_m
	mov	eax, DWORD PTR _d$4[ebp]
	cmp	eax, DWORD PTR _length_threshold$13[ebp]
	jl	$LN67@af_latin_m
$LN54@af_latin_m:
; Line 640
	mov	ecx, DWORD PTR _last$10[ebp]
	cmp	ecx, DWORD PTR _best_contour_last$30[ebp]
	jge	SHORT $LN51@af_latin_m
; Line 641
	mov	edx, DWORD PTR _last$10[ebp]
	add	edx, 1
	mov	DWORD PTR _last$10[ebp], edx
; Line 642
	jmp	SHORT $LN50@af_latin_m
$LN51@af_latin_m:
; Line 643
	mov	eax, DWORD PTR _best_contour_first$31[ebp]
	mov	DWORD PTR _last$10[ebp], eax
$LN50@af_latin_m:
; Line 645
	mov	ecx, DWORD PTR _last$10[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	sub	ecx, DWORD PTR [esi+eax*8+4]
	jns	SHORT $LN220@af_latin_m
	mov	edx, DWORD PTR _last$10[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [eax+edx*8+4]
	sub	edx, DWORD PTR [esi+ecx*8+4]
	neg	edx
	mov	DWORD PTR tv595[ebp], edx
	jmp	SHORT $LN221@af_latin_m
$LN220@af_latin_m:
	mov	eax, DWORD PTR _last$10[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	sub	eax, DWORD PTR [esi+edx*8+4]
	mov	DWORD PTR tv595[ebp], eax
$LN221@af_latin_m:
	mov	ecx, DWORD PTR tv595[ebp]
	mov	DWORD PTR _d$4[ebp], ecx
; Line 646
	cmp	DWORD PTR _d$4[ebp], 5
	jle	$LN49@af_latin_m
; Line 648
	mov	edx, DWORD PTR _next$19[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [eax+edx*8]
	sub	edx, DWORD PTR [esi+ecx*8]
	jns	SHORT $LN222@af_latin_m
	mov	eax, DWORD PTR _next$19[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	sub	eax, DWORD PTR [esi+edx*8]
	neg	eax
	mov	DWORD PTR tv620[ebp], eax
	jmp	SHORT $LN223@af_latin_m
$LN222@af_latin_m:
	mov	ecx, DWORD PTR _next$19[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR _first$11[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8]
	sub	ecx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR tv620[ebp], ecx
$LN223@af_latin_m:
	imul	edx, DWORD PTR _dist$14[ebp], 20
	cmp	DWORD PTR tv620[ebp], edx
	jg	SHORT $LN49@af_latin_m
; Line 650
	mov	eax, DWORD PTR _last$10[ebp]
	cmp	eax, DWORD PTR _best_contour_first$31[ebp]
	jle	SHORT $LN47@af_latin_m
; Line 651
	mov	ecx, DWORD PTR _last$10[ebp]
	sub	ecx, 1
	mov	DWORD PTR _last$10[ebp], ecx
; Line 652
	jmp	SHORT $LN46@af_latin_m
$LN47@af_latin_m:
; Line 653
	mov	edx, DWORD PTR _best_contour_last$30[ebp]
	mov	DWORD PTR _last$10[ebp], edx
$LN46@af_latin_m:
; Line 654
	jmp	SHORT $LN52@af_latin_m
$LN49@af_latin_m:
; Line 657
	mov	eax, DWORD PTR _last$10[ebp]
	mov	DWORD PTR _p_last$7[ebp], eax
; Line 660
	mov	ecx, DWORD PTR _outline$[ebp+8]
	add	ecx, DWORD PTR _last$10[ebp]
	movsx	edx, BYTE PTR [ecx]
	and	edx, 3
	cmp	edx, 1
	jne	SHORT $LN53@af_latin_m
; Line 662
	mov	eax, DWORD PTR _last$10[ebp]
	mov	DWORD PTR _p_last$7[ebp], eax
; Line 663
	cmp	DWORD PTR _p_first$8[ebp], 0
	jge	SHORT $LN53@af_latin_m
; Line 664
	mov	ecx, DWORD PTR _last$10[ebp]
	mov	DWORD PTR _p_first$8[ebp], ecx
$LN53@af_latin_m:
; Line 667
	mov	edx, DWORD PTR _last$10[ebp]
	cmp	edx, DWORD PTR _best_segment_first$18[ebp]
	jne	$LN54@af_latin_m
$LN52@af_latin_m:
; Line 669
	mov	eax, DWORD PTR _first$11[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _best_y$33[ebp], edx
; Line 671
	mov	eax, DWORD PTR _first$11[ebp]
	mov	DWORD PTR _best_segment_first$18[ebp], eax
; Line 672
	mov	ecx, DWORD PTR _last$10[ebp]
	mov	DWORD PTR _best_segment_last$17[ebp], ecx
; Line 674
	mov	edx, DWORD PTR _p_first$8[ebp]
	mov	DWORD PTR _best_on_point_first$16[ebp], edx
; Line 675
	mov	eax, DWORD PTR _p_last$7[ebp]
	mov	DWORD PTR _best_on_point_last$15[ebp], eax
; Line 677
	jmp	SHORT $LN77@af_latin_m
$LN67@af_latin_m:
; Line 680
	mov	ecx, DWORD PTR _last$10[ebp]
	cmp	ecx, DWORD PTR _best_segment_first$18[ebp]
	jne	$LN68@af_latin_m
$LN77@af_latin_m:
; Line 688
	mov	edx, DWORD PTR _best_y$33[ebp]
	add	edx, DWORD PTR _y_offset$34[ebp]
	mov	DWORD PTR _best_y$33[ebp], edx
$LN43@af_latin_m:
; Line 690
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN42@af_latin_m
	mov	edx, DWORD PTR _best_y$33[ebp]
	push	edx
	mov	eax, DWORD PTR _ch$36[ebp]
	push	eax
	push	OFFSET $SG9319
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN42@af_latin_m:
	xor	ecx, ecx
	jne	SHORT $LN43@af_latin_m
; Line 704
	cmp	DWORD PTR _best_on_point_first$16[ebp], 0
	jl	$LN39@af_latin_m
	cmp	DWORD PTR _best_on_point_last$15[ebp], 0
	jl	$LN39@af_latin_m
	mov	edx, DWORD PTR _best_on_point_last$15[ebp]
	mov	eax, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR _best_on_point_first$16[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR [eax+edx*8]
	sub	edx, DWORD PTR [esi+ecx*8]
	jns	SHORT $LN224@af_latin_m
	mov	eax, DWORD PTR _best_on_point_last$15[ebp]
	mov	ecx, DWORD PTR _points$29[ebp]
	mov	edx, DWORD PTR _best_on_point_first$16[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	sub	eax, DWORD PTR [esi+edx*8]
	neg	eax
	mov	DWORD PTR tv669[ebp], eax
	jmp	SHORT $LN225@af_latin_m
$LN224@af_latin_m:
	mov	ecx, DWORD PTR _best_on_point_last$15[ebp]
	mov	edx, DWORD PTR _points$29[ebp]
	mov	eax, DWORD PTR _best_on_point_first$16[ebp]
	mov	esi, DWORD PTR _points$29[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8]
	sub	ecx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR tv669[ebp], ecx
$LN225@af_latin_m:
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+40]
	shr	eax, 3
	cmp	DWORD PTR tv669[ebp], eax
	jbe	SHORT $LN39@af_latin_m
; Line 705
	mov	BYTE PTR _round$28[ebp], 0
; Line 706
	jmp	SHORT $LN38@af_latin_m
$LN39@af_latin_m:
; Line 711
	mov	ecx, DWORD PTR _outline$[ebp+8]
	add	ecx, DWORD PTR _best_segment_first$18[ebp]
	movsx	edx, BYTE PTR [ecx]
	and	edx, 3
	cmp	edx, 1
	jne	SHORT $LN226@af_latin_m
	mov	eax, DWORD PTR _outline$[ebp+8]
	add	eax, DWORD PTR _best_segment_last$17[ebp]
	movsx	ecx, BYTE PTR [eax]
	and	ecx, 3
	cmp	ecx, 1
	jne	SHORT $LN226@af_latin_m
	mov	BYTE PTR tv683[ebp], 0
	jmp	SHORT $LN227@af_latin_m
$LN226@af_latin_m:
	mov	BYTE PTR tv683[ebp], 1
$LN227@af_latin_m:
	mov	dl, BYTE PTR tv683[ebp]
	mov	BYTE PTR _round$28[ebp], dl
$LN38@af_latin_m:
; Line 713
	movzx	eax, BYTE PTR _round$28[ebp]
	test	eax, eax
	je	SHORT $LN32@af_latin_m
	mov	ecx, DWORD PTR _bs$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 2
	je	SHORT $LN32@af_latin_m
$LN36@af_latin_m:
; Line 716
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN35@af_latin_m
	push	OFFSET $SG9329
	call	_FT_Message
	add	esp, 4
$LN35@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN36@af_latin_m
; Line 717
	jmp	$LN136@af_latin_m
$LN32@af_latin_m:
; Line 720
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN31@af_latin_m
	movzx	edx, BYTE PTR _round$28[ebp]
	test	edx, edx
	je	SHORT $LN228@af_latin_m
	mov	DWORD PTR tv700[ebp], OFFSET $SG9334
	jmp	SHORT $LN229@af_latin_m
$LN228@af_latin_m:
	mov	DWORD PTR tv700[ebp], OFFSET $SG9335
$LN229@af_latin_m:
	mov	eax, DWORD PTR tv700[ebp]
	push	eax
	push	OFFSET $SG9336
	call	_FT_Message
	add	esp, 8
$LN31@af_latin_m:
	xor	ecx, ecx
	jne	SHORT $LN32@af_latin_m
$LN98@af_latin_m:
; Line 723
	movzx	edx, BYTE PTR _round$28[ebp]
	test	edx, edx
	je	SHORT $LN28@af_latin_m
; Line 724
	mov	eax, DWORD PTR _num_rounds$[ebp]
	mov	ecx, DWORD PTR _best_y$33[ebp]
	mov	DWORD PTR _rounds$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _num_rounds$[ebp]
	add	edx, 1
	mov	DWORD PTR _num_rounds$[ebp], edx
; Line 725
	jmp	SHORT $LN27@af_latin_m
$LN28@af_latin_m:
; Line 726
	mov	eax, DWORD PTR _num_flats$[ebp]
	mov	ecx, DWORD PTR _best_y$33[ebp]
	mov	DWORD PTR _flats$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _num_flats$[ebp]
	add	edx, 1
	mov	DWORD PTR _num_flats$[ebp], edx
$LN27@af_latin_m:
; Line 727
	jmp	$LN136@af_latin_m
$LN135@af_latin_m:
; Line 729
	cmp	DWORD PTR _num_flats$[ebp], 0
	jne	SHORT $LN26@af_latin_m
	cmp	DWORD PTR _num_rounds$[ebp], 0
	jne	SHORT $LN26@af_latin_m
$LN25@af_latin_m:
; Line 735
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN24@af_latin_m
	push	OFFSET $SG9344
	call	_FT_Message
	add	esp, 4
$LN24@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN25@af_latin_m
; Line 736
	jmp	$LN190@af_latin_m
$LN26@af_latin_m:
; Line 742
	lea	eax, DWORD PTR _rounds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_rounds$[ebp]
	push	ecx
	call	_af_sort_pos
	add	esp, 8
; Line 743
	lea	edx, DWORD PTR _flats$[ebp]
	push	edx
	mov	eax, DWORD PTR _num_flats$[ebp]
	push	eax
	call	_af_sort_pos
	add	esp, 8
; Line 745
	mov	ecx, DWORD PTR _axis$[ebp]
	imul	edx, DWORD PTR [ecx+216], 28
	mov	eax, DWORD PTR _axis$[ebp]
	lea	ecx, DWORD PTR [eax+edx+220]
	mov	DWORD PTR _blue$[ebp], ecx
; Line 746
	mov	edx, DWORD PTR _blue$[ebp]
	mov	DWORD PTR _blue_ref$39[ebp], edx
; Line 747
	mov	eax, DWORD PTR _blue$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _blue_shoot$38[ebp], eax
; Line 749
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+216]
	add	edx, 1
	mov	eax, DWORD PTR _axis$[ebp]
	mov	DWORD PTR [eax+216], edx
; Line 751
	cmp	DWORD PTR _num_flats$[ebp], 0
	jne	SHORT $LN21@af_latin_m
; Line 754
	mov	eax, DWORD PTR _num_rounds$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _blue_shoot$38[ebp]
	mov	edx, DWORD PTR _rounds$[ebp+eax*4]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _blue_ref$39[ebp]
	mov	ecx, DWORD PTR _blue_shoot$38[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN20@af_latin_m
$LN21@af_latin_m:
; Line 756
	cmp	DWORD PTR _num_rounds$[ebp], 0
	jne	SHORT $LN19@af_latin_m
; Line 759
	mov	eax, DWORD PTR _num_flats$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _blue_shoot$38[ebp]
	mov	edx, DWORD PTR _flats$[ebp+eax*4]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _blue_ref$39[ebp]
	mov	ecx, DWORD PTR _blue_shoot$38[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 761
	jmp	SHORT $LN20@af_latin_m
$LN19@af_latin_m:
; Line 763
	mov	eax, DWORD PTR _num_flats$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _blue_ref$39[ebp]
	mov	edx, DWORD PTR _flats$[ebp+eax*4]
	mov	DWORD PTR [ecx], edx
; Line 764
	mov	eax, DWORD PTR _num_rounds$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _blue_shoot$38[ebp]
	mov	edx, DWORD PTR _rounds$[ebp+eax*4]
	mov	DWORD PTR [ecx], edx
$LN20@af_latin_m:
; Line 770
	mov	eax, DWORD PTR _blue_shoot$38[ebp]
	mov	ecx, DWORD PTR _blue_ref$39[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	$LN17@af_latin_m
; Line 772
	mov	eax, DWORD PTR _blue_ref$39[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ref$3[ebp], ecx
; Line 773
	mov	edx, DWORD PTR _blue_shoot$38[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _shoot$2[ebp], eax
; Line 774
	mov	ecx, DWORD PTR _shoot$2[ebp]
	cmp	ecx, DWORD PTR _ref$3[ebp]
	jle	SHORT $LN230@af_latin_m
	mov	BYTE PTR tv749[ebp], 1
	jmp	SHORT $LN231@af_latin_m
$LN230@af_latin_m:
	mov	BYTE PTR tv749[ebp], 0
$LN231@af_latin_m:
	mov	dl, BYTE PTR tv749[ebp]
	mov	BYTE PTR _over_ref$1[ebp], dl
; Line 777
	mov	eax, DWORD PTR _bs$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	and	ecx, 1
	movzx	edx, BYTE PTR _over_ref$1[ebp]
	xor	ecx, edx
	je	SHORT $LN17@af_latin_m
; Line 780
	mov	eax, DWORD PTR _shoot$2[ebp]
	add	eax, DWORD PTR _ref$3[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _blue_shoot$38[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _blue_ref$39[ebp]
	mov	eax, DWORD PTR _blue_shoot$38[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
$LN15@af_latin_m:
; Line 783
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN14@af_latin_m
	push	OFFSET $SG9359
	call	_FT_Message
	add	esp, 4
$LN14@af_latin_m:
	xor	ecx, ecx
	jne	SHORT $LN15@af_latin_m
$LN17@af_latin_m:
; Line 787
	mov	edx, DWORD PTR _blue$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 788
	mov	eax, DWORD PTR _bs$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	and	ecx, 1
	je	SHORT $LN11@af_latin_m
; Line 789
	mov	edx, DWORD PTR _blue$[ebp]
	mov	eax, DWORD PTR [edx+24]
	or	eax, 2
	mov	ecx, DWORD PTR _blue$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN11@af_latin_m:
; Line 790
	mov	edx, DWORD PTR _bs$[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 2
	je	SHORT $LN10@af_latin_m
; Line 791
	mov	ecx, DWORD PTR _blue$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	or	edx, 4
	mov	eax, DWORD PTR _blue$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN10@af_latin_m:
; Line 798
	mov	ecx, DWORD PTR _bs$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 4
	je	SHORT $LN8@af_latin_m
; Line 799
	mov	eax, DWORD PTR _blue$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, 8
	mov	edx, DWORD PTR _blue$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN8@af_latin_m:
; Line 803
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN7@af_latin_m
	mov	edx, DWORD PTR _blue_shoot$38[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _blue_ref$39[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG9367
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN7@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN8@af_latin_m
; Line 804
	jmp	$LN190@af_latin_m
$LN4@af_latin_m:
; Line 806
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN3@af_latin_m
	push	OFFSET $SG9372
	call	_FT_Message
	add	esp, 4
$LN3@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN4@af_latin_m
; Line 809
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN242@af_latin_m
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 728				; 000002d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN242@af_latin_m:
	DD	5
	DD	$LN241@af_latin_m
$LN241@af_latin_m:
	DD	-212					; ffffff2cH
	DD	204					; 000000ccH
	DD	$LN236@af_latin_m
	DD	-424					; fffffe58H
	DD	204					; 000000ccH
	DD	$LN237@af_latin_m
	DD	-472					; fffffe28H
	DD	20					; 00000014H
	DD	$LN238@af_latin_m
	DD	-516					; fffffdfcH
	DD	4
	DD	$LN239@af_latin_m
	DD	-528					; fffffdf0H
	DD	4
	DD	$LN240@af_latin_m
$LN240@af_latin_m:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN239@af_latin_m:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN238@af_latin_m:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN237@af_latin_m:
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN236@af_latin_m:
	DB	102					; 00000066H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_af_latin_metrics_init_blues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_hints$ = 8						; size = 4
_outline$ = 12						; size = 4
_af_dummy_hints_apply PROC
; File d:\mozilla\modules\freetype2\src\autofit\afdummy.c
; Line 43
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 47
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_glyph_hints_reload
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 48
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@af_dummy_h
; Line 49
	mov	edx, DWORD PTR _outline$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_save
	add	esp, 8
$LN1@af_dummy_h:
; Line 51
	mov	eax, DWORD PTR _error$[ebp]
; Line 52
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_dummy_hints_apply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hints$ = 8						; size = 4
_metrics$ = 12						; size = 4
_af_dummy_hints_init PROC
; File d:\mozilla\modules\freetype2\src\autofit\afdummy.c
; Line 28
	push	ebp
	mov	ebp, esp
; Line 29
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_glyph_hints_rescale
	add	esp, 8
; Line 31
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+4], ecx
; Line 32
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
; Line 33
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+8], ecx
; Line 34
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+16], ecx
; Line 36
	xor	eax, eax
; Line 37
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_af_dummy_hints_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_d2$ = -24						; size = 4
_d1$ = -20						; size = 4
_v2$ = -16						; size = 4
_v1$ = -12						; size = 4
_u$ = -8						; size = 4
_p$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_ref1$ = 16						; size = 4
_ref2$ = 20						; size = 4
_af_iup_interp PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 1227
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1230
	mov	eax, DWORD PTR _ref1$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _v1$[ebp], ecx
; Line 1231
	mov	edx, DWORD PTR _ref2$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _v2$[ebp], eax
; Line 1232
	mov	ecx, DWORD PTR _ref1$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	sub	edx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR _d1$[ebp], edx
; Line 1233
	mov	eax, DWORD PTR _ref2$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR _d2$[ebp], ecx
; Line 1236
	mov	edx, DWORD PTR _p1$[ebp]
	cmp	edx, DWORD PTR _p2$[ebp]
	jbe	SHORT $LN23@af_iup_int
; Line 1237
	jmp	$LN24@af_iup_int
$LN23@af_iup_int:
; Line 1239
	mov	eax, DWORD PTR _v1$[ebp]
	cmp	eax, DWORD PTR _v2$[ebp]
	jne	SHORT $LN22@af_iup_int
; Line 1241
	mov	ecx, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN21@af_iup_int
$LN20@af_iup_int:
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _p$[ebp], edx
$LN21@af_iup_int:
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _p2$[ebp]
	ja	SHORT $LN19@af_iup_int
; Line 1243
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _u$[ebp], edx
; Line 1245
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _v1$[ebp]
	jg	SHORT $LN18@af_iup_int
; Line 1246
	mov	ecx, DWORD PTR _u$[ebp]
	add	ecx, DWORD PTR _d1$[ebp]
	mov	DWORD PTR _u$[ebp], ecx
; Line 1247
	jmp	SHORT $LN17@af_iup_int
$LN18@af_iup_int:
; Line 1248
	mov	edx, DWORD PTR _u$[ebp]
	add	edx, DWORD PTR _d2$[ebp]
	mov	DWORD PTR _u$[ebp], edx
$LN17@af_iup_int:
; Line 1250
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 1251
	jmp	SHORT $LN20@af_iup_int
$LN19@af_iup_int:
; Line 1252
	jmp	$LN24@af_iup_int
$LN22@af_iup_int:
; Line 1255
	mov	edx, DWORD PTR _v1$[ebp]
	cmp	edx, DWORD PTR _v2$[ebp]
	jge	$LN16@af_iup_int
; Line 1257
	mov	eax, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN15@af_iup_int
$LN14@af_iup_int:
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _p$[ebp], ecx
$LN15@af_iup_int:
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _p2$[ebp]
	ja	SHORT $LN13@af_iup_int
; Line 1259
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _u$[ebp], ecx
; Line 1261
	mov	edx, DWORD PTR _u$[ebp]
	cmp	edx, DWORD PTR _v1$[ebp]
	jg	SHORT $LN12@af_iup_int
; Line 1262
	mov	eax, DWORD PTR _u$[ebp]
	add	eax, DWORD PTR _d1$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	jmp	SHORT $LN11@af_iup_int
$LN12@af_iup_int:
; Line 1263
	mov	ecx, DWORD PTR _u$[ebp]
	cmp	ecx, DWORD PTR _v2$[ebp]
	jl	SHORT $LN10@af_iup_int
; Line 1264
	mov	edx, DWORD PTR _u$[ebp]
	add	edx, DWORD PTR _d2$[ebp]
	mov	DWORD PTR _u$[ebp], edx
; Line 1265
	jmp	SHORT $LN11@af_iup_int
$LN10@af_iup_int:
; Line 1266
	mov	eax, DWORD PTR _v2$[ebp]
	sub	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref2$[ebp]
	mov	edx, DWORD PTR _ref1$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	sub	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	sub	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ref1$[ebp]
	add	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _u$[ebp], eax
$LN11@af_iup_int:
; Line 1268
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 1269
	jmp	SHORT $LN14@af_iup_int
$LN13@af_iup_int:
; Line 1271
	jmp	SHORT $LN24@af_iup_int
$LN16@af_iup_int:
; Line 1273
	mov	edx, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN7@af_iup_int
$LN6@af_iup_int:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _p$[ebp], eax
$LN7@af_iup_int:
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _p2$[ebp]
	ja	SHORT $LN24@af_iup_int
; Line 1275
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _u$[ebp], eax
; Line 1277
	mov	ecx, DWORD PTR _u$[ebp]
	cmp	ecx, DWORD PTR _v2$[ebp]
	jg	SHORT $LN4@af_iup_int
; Line 1278
	mov	edx, DWORD PTR _u$[ebp]
	add	edx, DWORD PTR _d2$[ebp]
	mov	DWORD PTR _u$[ebp], edx
	jmp	SHORT $LN3@af_iup_int
$LN4@af_iup_int:
; Line 1279
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _v1$[ebp]
	jl	SHORT $LN2@af_iup_int
; Line 1280
	mov	ecx, DWORD PTR _u$[ebp]
	add	ecx, DWORD PTR _d1$[ebp]
	mov	DWORD PTR _u$[ebp], ecx
; Line 1281
	jmp	SHORT $LN3@af_iup_int
$LN2@af_iup_int:
; Line 1282
	mov	edx, DWORD PTR _v2$[ebp]
	sub	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _ref2$[ebp]
	mov	ecx, DWORD PTR _ref1$[ebp]
	mov	edx, DWORD PTR [eax+24]
	sub	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _v1$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ref1$[ebp]
	add	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR _u$[ebp], eax
$LN3@af_iup_int:
; Line 1284
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 1285
	jmp	SHORT $LN6@af_iup_int
$LN24@af_iup_int:
; Line 1287
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_iup_interp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_delta$ = -8						; size = 4
_p$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_ref$ = 16						; size = 4
_af_iup_shift PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 1199
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1201
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [eax+24]
	sub	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _delta$[ebp], edx
; Line 1204
	jne	SHORT $LN7@af_iup_shi
; Line 1205
	jmp	SHORT $LN8@af_iup_shi
$LN7@af_iup_shi:
; Line 1207
	mov	eax, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN6@af_iup_shi
$LN5@af_iup_shi:
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _p$[ebp], ecx
$LN6@af_iup_shi:
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _ref$[ebp]
	jae	SHORT $LN4@af_iup_shi
; Line 1208
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+24], ecx
	jmp	SHORT $LN5@af_iup_shi
$LN4@af_iup_shi:
; Line 1210
	mov	eax, DWORD PTR _ref$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN3@af_iup_shi
$LN2@af_iup_shi:
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _p$[ebp], ecx
$LN3@af_iup_shi:
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _p2$[ebp]
	ja	SHORT $LN8@af_iup_shi
; Line 1211
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+24], ecx
	jmp	SHORT $LN2@af_iup_shi
$LN8@af_iup_shi:
; Line 1212
	mov	esp, ebp
	pop	ebp
	ret	0
_af_iup_shift ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_MulFix_i386 PROC
; File d:\mozilla\modules\freetype2\include\internal\ftcalc.h
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 159
	mov	eax, DWORD PTR _a$[ebp]
; Line 160
	mov	edx, DWORD PTR _b$[ebp]
; Line 161
	imul	edx
; Line 162
	mov	ecx, edx
; Line 163
	sar	ecx, 31					; 0000001fH
; Line 164
	add	ecx, 32768				; 00008000H
; Line 165
	add	eax, ecx
; Line 166
	adc	edx, 0
; Line 167
	shr	eax, 16					; 00000010H
; Line 168
	shl	edx, 16					; 00000010H
; Line 169
	add	eax, edx
; Line 170
	mov	DWORD PTR _result$[ebp], eax
; Line 172
	mov	eax, DWORD PTR _result$[ebp]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_MulFix_i386 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$1 = -80						; size = 4
_count$2 = -76						; size = 4
_style_class$3 = -72					; size = 4
_nn$4 = -68						; size = 4
_gindex$5 = -64						; size = 4
_style_class$6 = -60					; size = 4
_gindex$7 = -52						; size = 4
_charcode$8 = -44					; size = 4
_range$9 = -40						; size = 4
_script_class$10 = -36					; size = 4
_style_class$11 = -32					; size = 4
_dflt$ = -28						; size = 4
_i$ = -24						; size = 4
_ss$ = -20						; size = 4
_gstyles$ = -16						; size = 4
_old_charmap$ = -12					; size = 4
_face$ = -8						; size = 4
_error$ = -4						; size = 4
_globals$ = 8						; size = 4
_af_face_globals_compute_style_coverage PROC
; File d:\mozilla\modules\freetype2\src\autofit\afglobal.c
; Line 134
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 136
	mov	eax, DWORD PTR _globals$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 137
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	DWORD PTR _old_charmap$[ebp], eax
; Line 138
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _gstyles$[ebp], edx
; Line 141
	mov	DWORD PTR _dflt$[ebp], -1
; Line 147
	mov	eax, DWORD PTR _globals$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	127					; 0000007fH
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 149
	push	1970170211				; 756e6963H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Select_Charmap
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 150
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN69@af_face_gl
; Line 156
	mov	DWORD PTR _error$[ebp], 0
; Line 157
	jmp	$Exit$75
$LN69@af_face_gl:
; Line 161
	mov	DWORD PTR _ss$[ebp], 0
	jmp	SHORT $LN68@af_face_gl
$LN67@af_face_gl:
	mov	edx, DWORD PTR _ss$[ebp]
	add	edx, 1
	mov	DWORD PTR _ss$[ebp], edx
$LN68@af_face_gl:
	mov	eax, DWORD PTR _ss$[ebp]
	cmp	DWORD PTR _af_style_classes[eax*4], 0
	je	$LN66@af_face_gl
; Line 164
	mov	ecx, DWORD PTR _ss$[ebp]
	mov	edx, DWORD PTR _af_style_classes[ecx*4]
	mov	DWORD PTR _style_class$11[ebp], edx
; Line 166
	mov	eax, DWORD PTR _style_class$11[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _af_script_classes[ecx*4]
	mov	DWORD PTR _script_class$10[ebp], edx
; Line 170
	mov	eax, DWORD PTR _script_class$10[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN65@af_face_gl
; Line 171
	jmp	SHORT $LN67@af_face_gl
$LN65@af_face_gl:
; Line 177
	mov	ecx, DWORD PTR _style_class$11[ebp]
	cmp	DWORD PTR [ecx+16], 10			; 0000000aH
	jne	$LN64@af_face_gl
; Line 180
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR [edx+204]
	mov	ecx, DWORD PTR _style_class$11[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+16]
	jne	SHORT $LN63@af_face_gl
; Line 181
	mov	eax, DWORD PTR _ss$[ebp]
	mov	DWORD PTR _dflt$[ebp], eax
$LN63@af_face_gl:
; Line 185
	mov	ecx, DWORD PTR _script_class$10[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _range$9[ebp], edx
	jmp	SHORT $LN62@af_face_gl
$LN61@af_face_gl:
	mov	eax, DWORD PTR _range$9[ebp]
	add	eax, 8
	mov	DWORD PTR _range$9[ebp], eax
$LN62@af_face_gl:
	mov	ecx, DWORD PTR _range$9[ebp]
	cmp	DWORD PTR [ecx], 0
	je	$LN60@af_face_gl
; Line 187
	mov	edx, DWORD PTR _range$9[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _charcode$8[ebp], eax
; Line 191
	mov	ecx, DWORD PTR _charcode$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Get_Char_Index
	add	esp, 8
	mov	DWORD PTR _gindex$7[ebp], eax
; Line 195
	cmp	DWORD PTR _gindex$7[ebp], 0
	je	SHORT $LN58@af_face_gl
	mov	eax, DWORD PTR _globals$[ebp]
	mov	ecx, DWORD PTR _gindex$7[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN58@af_face_gl
	mov	edx, DWORD PTR _gstyles$[ebp]
	add	edx, DWORD PTR _gindex$7[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 127				; 0000007fH
	jne	SHORT $LN58@af_face_gl
; Line 196
	mov	ecx, DWORD PTR _gstyles$[ebp]
	add	ecx, DWORD PTR _gindex$7[ebp]
	mov	dl, BYTE PTR _ss$[ebp]
	mov	BYTE PTR [ecx], dl
$LN58@af_face_gl:
; Line 200
	lea	eax, DWORD PTR _gindex$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _charcode$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Get_Next_Char
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _charcode$8[ebp], eax
; Line 202
	cmp	DWORD PTR _gindex$7[ebp], 0
	je	SHORT $LN55@af_face_gl
	mov	eax, DWORD PTR _range$9[ebp]
	mov	ecx, DWORD PTR _charcode$8[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN56@af_face_gl
$LN55@af_face_gl:
; Line 203
	jmp	SHORT $LN57@af_face_gl
$LN56@af_face_gl:
; Line 206
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR _gindex$7[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN54@af_face_gl
	mov	ecx, DWORD PTR _gstyles$[ebp]
	add	ecx, DWORD PTR _gindex$7[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 127				; 0000007fH
	jne	SHORT $LN54@af_face_gl
; Line 207
	mov	eax, DWORD PTR _gstyles$[ebp]
	add	eax, DWORD PTR _gindex$7[ebp]
	mov	cl, BYTE PTR _ss$[ebp]
	mov	BYTE PTR [eax], cl
$LN54@af_face_gl:
; Line 208
	jmp	SHORT $LN58@af_face_gl
$LN57@af_face_gl:
; Line 209
	jmp	$LN61@af_face_gl
$LN60@af_face_gl:
; Line 211
	jmp	SHORT $LN53@af_face_gl
$LN64@af_face_gl:
; Line 214
	mov	edx, DWORD PTR _gstyles$[ebp]
	push	edx
	mov	eax, DWORD PTR _style_class$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _globals$[ebp]
	push	ecx
	call	_af_get_coverage
	add	esp, 12					; 0000000cH
$LN53@af_face_gl:
; Line 216
	jmp	$LN67@af_face_gl
$LN66@af_face_gl:
; Line 219
	mov	edx, DWORD PTR _gstyles$[ebp]
	push	edx
	mov	eax, DWORD PTR _dflt$[ebp]
	mov	ecx, DWORD PTR _af_style_classes[eax*4]
	push	ecx
	mov	edx, DWORD PTR _globals$[ebp]
	push	edx
	call	_af_get_coverage
	add	esp, 12					; 0000000cH
; Line 222
	mov	DWORD PTR _ss$[ebp], 0
	jmp	SHORT $LN52@af_face_gl
$LN51@af_face_gl:
	mov	eax, DWORD PTR _ss$[ebp]
	add	eax, 1
	mov	DWORD PTR _ss$[ebp], eax
$LN52@af_face_gl:
	mov	ecx, DWORD PTR _ss$[ebp]
	cmp	DWORD PTR _af_style_classes[ecx*4], 0
	je	SHORT $LN50@af_face_gl
; Line 224
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR _af_style_classes[edx*4]
	mov	DWORD PTR _style_class$6[ebp], eax
; Line 227
	mov	ecx, DWORD PTR _ss$[ebp]
	cmp	ecx, DWORD PTR _dflt$[ebp]
	je	SHORT $LN49@af_face_gl
	mov	edx, DWORD PTR _style_class$6[ebp]
	cmp	DWORD PTR [edx+16], 10			; 0000000aH
	jne	SHORT $LN49@af_face_gl
; Line 228
	mov	eax, DWORD PTR _gstyles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _style_class$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _globals$[ebp]
	push	edx
	call	_af_get_coverage
	add	esp, 12					; 0000000cH
$LN49@af_face_gl:
; Line 229
	jmp	SHORT $LN51@af_face_gl
$LN50@af_face_gl:
; Line 232
	mov	DWORD PTR _i$[ebp], 48			; 00000030H
	jmp	SHORT $LN48@af_face_gl
$LN47@af_face_gl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN48@af_face_gl:
	cmp	DWORD PTR _i$[ebp], 57			; 00000039H
	ja	SHORT $Exit$75
; Line 234
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Get_Char_Index
	add	esp, 8
	mov	DWORD PTR _gindex$5[ebp], eax
; Line 237
	cmp	DWORD PTR _gindex$5[ebp], 0
	je	SHORT $LN45@af_face_gl
	mov	eax, DWORD PTR _globals$[ebp]
	mov	ecx, DWORD PTR _gindex$5[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN45@af_face_gl
; Line 238
	mov	edx, DWORD PTR _gstyles$[ebp]
	add	edx, DWORD PTR _gindex$5[ebp]
	movzx	eax, BYTE PTR [edx]
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _gstyles$[ebp]
	add	ecx, DWORD PTR _gindex$5[ebp]
	mov	BYTE PTR [ecx], al
$LN45@af_face_gl:
; Line 239
	jmp	SHORT $LN47@af_face_gl
$Exit$75:
; Line 246
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR [edx+204]
	cmp	DWORD PTR [eax+12], 127			; 0000007fH
	je	SHORT $LN39@af_face_gl
; Line 251
	mov	DWORD PTR _nn$4[ebp], 0
	jmp	SHORT $LN43@af_face_gl
$LN42@af_face_gl:
	mov	ecx, DWORD PTR _nn$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$4[ebp], ecx
$LN43@af_face_gl:
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR _nn$4[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $LN39@af_face_gl
; Line 253
	mov	ecx, DWORD PTR _gstyles$[ebp]
	add	ecx, DWORD PTR _nn$4[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, -129				; ffffff7fH
	cmp	edx, 127				; 0000007fH
	jne	SHORT $LN40@af_face_gl
; Line 255
	mov	eax, DWORD PTR _gstyles$[ebp]
	add	eax, DWORD PTR _nn$4[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, -128				; ffffff80H
	mov	edx, DWORD PTR _gstyles$[ebp]
	add	edx, DWORD PTR _nn$4[ebp]
	mov	BYTE PTR [edx], cl
; Line 256
	mov	eax, DWORD PTR _globals$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	mov	edx, DWORD PTR _gstyles$[ebp]
	add	edx, DWORD PTR _nn$4[ebp]
	movzx	eax, BYTE PTR [edx]
	or	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _gstyles$[ebp]
	add	ecx, DWORD PTR _nn$4[ebp]
	mov	BYTE PTR [ecx], al
$LN40@af_face_gl:
; Line 258
	jmp	SHORT $LN42@af_face_gl
$LN39@af_face_gl:
; Line 266
	mov	edx, 4
	imul	eax, edx, 94
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN38@af_face_gl
	push	OFFSET $SG8098
	call	_FT_Message
	add	esp, 4
$LN38@af_face_gl:
	xor	ecx, ecx
	jne	SHORT $LN39@af_face_gl
; Line 268
	mov	DWORD PTR _ss$[ebp], 0
	jmp	SHORT $LN35@af_face_gl
$LN34@af_face_gl:
	mov	edx, DWORD PTR _ss$[ebp]
	add	edx, 1
	mov	DWORD PTR _ss$[ebp], edx
$LN35@af_face_gl:
	mov	eax, DWORD PTR _ss$[ebp]
	cmp	DWORD PTR _af_style_classes[eax*4], 0
	je	$LN33@af_face_gl
; Line 270
	mov	ecx, DWORD PTR _ss$[ebp]
	mov	edx, DWORD PTR _af_style_classes[ecx*4]
	mov	DWORD PTR _style_class$3[ebp], edx
; Line 271
	mov	DWORD PTR _count$2[ebp], 0
$LN32@af_face_gl:
; Line 275
	mov	eax, 4
	imul	ecx, eax, 94
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN31@af_face_gl
	mov	edx, DWORD PTR _style_class$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _af_style_names[eax*4]
	push	ecx
	push	OFFSET $SG8109
	call	_FT_Message
	add	esp, 8
$LN31@af_face_gl:
	xor	edx, edx
	jne	SHORT $LN32@af_face_gl
; Line 277
	mov	DWORD PTR _idx$1[ebp], 0
	jmp	SHORT $LN28@af_face_gl
$LN27@af_face_gl:
	mov	eax, DWORD PTR _idx$1[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$1[ebp], eax
$LN28@af_face_gl:
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	edx, DWORD PTR _idx$1[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jge	$LN26@af_face_gl
; Line 279
	mov	eax, DWORD PTR _gstyles$[ebp]
	add	eax, DWORD PTR _idx$1[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _style_class$3[ebp]
	cmp	ecx, DWORD PTR [edx]
	jne	$LN25@af_face_gl
; Line 281
	mov	eax, DWORD PTR _count$2[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	test	edx, edx
	jne	SHORT $LN19@af_face_gl
$LN23@af_face_gl:
; Line 282
	mov	edx, 4
	imul	eax, edx, 94
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN22@af_face_gl
	push	OFFSET $SG8119
	call	_FT_Message
	add	esp, 4
$LN22@af_face_gl:
	xor	ecx, ecx
	jne	SHORT $LN23@af_face_gl
$LN19@af_face_gl:
; Line 284
	mov	edx, 4
	imul	eax, edx, 94
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN18@af_face_gl
	mov	ecx, DWORD PTR _idx$1[ebp]
	push	ecx
	push	OFFSET $SG8124
	call	_FT_Message
	add	esp, 8
$LN18@af_face_gl:
	xor	edx, edx
	jne	SHORT $LN19@af_face_gl
; Line 285
	mov	eax, DWORD PTR _count$2[ebp]
	add	eax, 1
	mov	DWORD PTR _count$2[ebp], eax
; Line 287
	mov	eax, DWORD PTR _count$2[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	test	edx, edx
	jne	SHORT $LN25@af_face_gl
$LN14@af_face_gl:
; Line 288
	mov	edx, 4
	imul	eax, edx, 94
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN13@af_face_gl
	push	OFFSET $SG8130
	call	_FT_Message
	add	esp, 4
$LN13@af_face_gl:
	xor	ecx, ecx
	jne	SHORT $LN14@af_face_gl
$LN25@af_face_gl:
; Line 290
	jmp	$LN27@af_face_gl
$LN26@af_face_gl:
; Line 292
	cmp	DWORD PTR _count$2[ebp], 0
	jne	SHORT $LN10@af_face_gl
$LN9@af_face_gl:
; Line 293
	mov	edx, 4
	imul	eax, edx, 94
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN8@af_face_gl
	push	OFFSET $SG8136
	call	_FT_Message
	add	esp, 4
$LN8@af_face_gl:
	xor	ecx, ecx
	jne	SHORT $LN9@af_face_gl
$LN10@af_face_gl:
; Line 294
	mov	eax, DWORD PTR _count$2[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	test	edx, edx
	je	SHORT $LN5@af_face_gl
$LN4@af_face_gl:
; Line 295
	mov	edx, 4
	imul	eax, edx, 94
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN3@af_face_gl
	push	OFFSET $SG8142
	call	_FT_Message
	add	esp, 4
$LN3@af_face_gl:
	xor	ecx, ecx
	jne	SHORT $LN4@af_face_gl
$LN5@af_face_gl:
; Line 296
	jmp	$LN34@af_face_gl
$LN33@af_face_gl:
; Line 300
	mov	edx, DWORD PTR _old_charmap$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_FT_Set_Charmap
	add	esp, 8
; Line 301
	mov	eax, DWORD PTR _error$[ebp]
; Line 302
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN74@af_face_gl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN74@af_face_gl:
	DD	1
	DD	$LN73@af_face_gl
$LN73@af_face_gl:
	DD	-52					; ffffffccH
	DD	4
	DD	$LN72@af_face_gl
$LN72@af_face_gl:
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_af_face_globals_compute_style_coverage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv249 = -2816						; size = 4
tv240 = -2812						; size = 4
_i$1 = -2808						; size = 4
_stdw$2 = -2804						; size = 4
_axis$3 = -2800						; size = 4
_dist$4 = -2796						; size = 4
_num_widths$5 = -2788					; size = 4
_link$6 = -2780						; size = 4
_limit$7 = -2776					; size = 4
_seg$8 = -2772						; size = 4
_axhints$9 = -2768					; size = 4
_axis$10 = -2764					; size = 4
_standard_char$11 = -2760				; size = 4
_script_class$12 = -2756				; size = 4
_style_class$13 = -2752					; size = 4
_scaler$14 = -2748					; size = 4
_dummy$15 = -2740					; size = 2572
_dim$16 = -164						; size = 4
_y_offset$17 = -156					; size = 4
_glyph_index$18 = -144					; size = 4
_error$19 = -136					; size = 4
_hints$ = -128						; size = 120
__$ArrayPad$ = -4					; size = 4
_metrics$ = 8						; size = 4
_face$ = 12						; size = 4
_af_cjk_metrics_init_widths PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 2816				; 00000b00H
	push	edi
	lea	edi, DWORD PTR [ebp-2816]
	mov	ecx, 704				; 000002c0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
$LN54@af_cjk_met:
; Line 81
	mov	eax, 4
	imul	ecx, eax, 89
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN53@af_cjk_met
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _af_style_names[ecx*4]
	push	edx
	push	OFFSET $SG10210
	call	_FT_Message
	add	esp, 8
$LN53@af_cjk_met:
	xor	eax, eax
	jne	SHORT $LN54@af_cjk_met
; Line 83
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	lea	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_init
	add	esp, 8
; Line 85
	mov	ecx, 1264				; 000004f0H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [eax+edx+52], 0
; Line 86
	mov	ecx, 1264				; 000004f0H
	shl	ecx, 0
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+ecx+52], 0
; Line 94
	lea	eax, DWORD PTR _dummy$15[ebp+4]
	mov	DWORD PTR _scaler$14[ebp], eax
; Line 100
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _style_class$13[ebp], edx
; Line 102
	mov	eax, DWORD PTR _style_class$13[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _af_script_classes[ecx*4]
	mov	DWORD PTR _script_class$12[ebp], edx
; Line 107
	mov	eax, DWORD PTR _script_class$12[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _standard_char$11[ebp], ecx
; Line 111
	lea	edx, DWORD PTR _y_offset$17[ebp]
	push	edx
	lea	eax, DWORD PTR _glyph_index$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _standard_char$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	call	_af_get_char_index
	add	esp, 16					; 00000010H
; Line 112
	cmp	DWORD PTR _glyph_index$18[ebp], 0
	jne	$LN43@af_cjk_met
; Line 114
	mov	eax, DWORD PTR _script_class$12[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN49@af_cjk_met
; Line 116
	mov	ecx, DWORD PTR _script_class$12[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _standard_char$11[ebp], edx
; Line 120
	lea	eax, DWORD PTR _y_offset$17[ebp]
	push	eax
	lea	ecx, DWORD PTR _glyph_index$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _standard_char$11[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	call	_af_get_char_index
	add	esp, 16					; 00000010H
; Line 121
	cmp	DWORD PTR _glyph_index$18[ebp], 0
	jne	SHORT $LN48@af_cjk_met
; Line 123
	mov	ecx, DWORD PTR _script_class$12[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN47@af_cjk_met
; Line 125
	mov	edx, DWORD PTR _script_class$12[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _standard_char$11[ebp], eax
; Line 129
	lea	ecx, DWORD PTR _y_offset$17[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyph_index$18[ebp]
	push	edx
	mov	eax, DWORD PTR _standard_char$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	call	_af_get_char_index
	add	esp, 16					; 00000010H
; Line 130
	cmp	DWORD PTR _glyph_index$18[ebp], 0
	jne	SHORT $LN46@af_cjk_met
; Line 131
	jmp	$Exit$68
$LN46@af_cjk_met:
; Line 133
	jmp	SHORT $LN48@af_cjk_met
$LN47@af_cjk_met:
; Line 134
	jmp	$Exit$68
$LN48@af_cjk_met:
; Line 137
	jmp	SHORT $LN43@af_cjk_met
$LN49@af_cjk_met:
; Line 138
	jmp	$Exit$68
$LN43@af_cjk_met:
; Line 142
	mov	edx, 4
	imul	eax, edx, 89
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN42@af_cjk_met
	mov	ecx, DWORD PTR _glyph_index$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _standard_char$11[ebp]
	push	edx
	push	OFFSET $SG10232
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN42@af_cjk_met:
	xor	eax, eax
	jne	SHORT $LN43@af_cjk_met
; Line 144
	push	1
	mov	ecx, DWORD PTR _glyph_index$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Load_Glyph
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$19[ebp], eax
; Line 145
	cmp	DWORD PTR _error$19[ebp], 0
	jne	SHORT $LN38@af_cjk_met
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	movsx	edx, WORD PTR [ecx+110]
	test	edx, edx
	jg	SHORT $LN39@af_cjk_met
$LN38@af_cjk_met:
; Line 146
	jmp	$Exit$68
$LN39@af_cjk_met:
; Line 148
	push	2572					; 00000a0cH
	push	0
	lea	eax, DWORD PTR _dummy$15[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 150
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _dummy$15[ebp+40], edx
; Line 152
	mov	eax, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [eax+4], 65536		; 00010000H
; Line 153
	mov	ecx, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [ecx+8], 65536		; 00010000H
; Line 154
	mov	edx, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 155
	mov	eax, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 157
	mov	ecx, DWORD PTR _scaler$14[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 158
	mov	eax, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 159
	mov	ecx, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 161
	lea	edx, DWORD PTR _dummy$15[ebp]
	push	edx
	lea	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_rescale
	add	esp, 8
; Line 163
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	add	edx, 108				; 0000006cH
	push	edx
	lea	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_reload
	add	esp, 8
	mov	DWORD PTR _error$19[ebp], eax
; Line 164
	cmp	DWORD PTR _error$19[ebp], 0
	je	SHORT $LN37@af_cjk_met
; Line 165
	jmp	$Exit$68
$LN37@af_cjk_met:
; Line 167
	mov	DWORD PTR _dim$16[ebp], 0
	jmp	SHORT $LN36@af_cjk_met
$LN35@af_cjk_met:
	mov	ecx, DWORD PTR _dim$16[ebp]
	add	ecx, 1
	mov	DWORD PTR _dim$16[ebp], ecx
$LN36@af_cjk_met:
	cmp	DWORD PTR _dim$16[ebp], 2
	jge	$Exit$68
; Line 169
	imul	edx, DWORD PTR _dim$16[ebp], 1264
	mov	eax, DWORD PTR _metrics$[ebp]
	lea	ecx, DWORD PTR [eax+edx+44]
	mov	DWORD PTR _axis$10[ebp], ecx
; Line 170
	imul	edx, DWORD PTR _dim$16[ebp], 28
	lea	eax, DWORD PTR _hints$[ebp+edx+44]
	mov	DWORD PTR _axhints$9[ebp], eax
; Line 172
	mov	DWORD PTR _num_widths$5[ebp], 0
; Line 176
	mov	ecx, DWORD PTR _dim$16[ebp]
	push	ecx
	lea	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_latin_hints_compute_segments
	add	esp, 8
	mov	DWORD PTR _error$19[ebp], eax
; Line 177
	cmp	DWORD PTR _error$19[ebp], 0
	je	SHORT $LN33@af_cjk_met
; Line 178
	jmp	$Exit$68
$LN33@af_cjk_met:
; Line 183
	mov	eax, DWORD PTR _dim$16[ebp]
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_latin_hints_link_segments
	add	esp, 16					; 00000010H
; Line 185
	mov	edx, DWORD PTR _axhints$9[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _seg$8[ebp], eax
; Line 186
	mov	ecx, DWORD PTR _axhints$9[ebp]
	imul	edx, DWORD PTR [ecx], 48
	add	edx, DWORD PTR _seg$8[ebp]
	mov	DWORD PTR _limit$7[ebp], edx
; Line 188
	jmp	SHORT $LN32@af_cjk_met
$LN31@af_cjk_met:
	mov	eax, DWORD PTR _seg$8[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _seg$8[ebp], eax
$LN32@af_cjk_met:
	mov	ecx, DWORD PTR _seg$8[ebp]
	cmp	ecx, DWORD PTR _limit$7[ebp]
	jae	$LN30@af_cjk_met
; Line 190
	mov	edx, DWORD PTR _seg$8[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _link$6[ebp], eax
; Line 193
	cmp	DWORD PTR _link$6[ebp], 0
	je	SHORT $LN29@af_cjk_met
	mov	ecx, DWORD PTR _link$6[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _seg$8[ebp]
	jne	SHORT $LN29@af_cjk_met
	mov	eax, DWORD PTR _link$6[ebp]
	cmp	eax, DWORD PTR _seg$8[ebp]
	jbe	SHORT $LN29@af_cjk_met
; Line 198
	mov	ecx, DWORD PTR _seg$8[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _link$6[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	edx, ecx
	mov	DWORD PTR _dist$4[ebp], edx
; Line 199
	jns	SHORT $LN28@af_cjk_met
; Line 200
	mov	edx, DWORD PTR _dist$4[ebp]
	neg	edx
	mov	DWORD PTR _dist$4[ebp], edx
$LN28@af_cjk_met:
; Line 202
	cmp	DWORD PTR _num_widths$5[ebp], 16	; 00000010H
	jae	SHORT $LN29@af_cjk_met
; Line 203
	imul	eax, DWORD PTR _num_widths$5[ebp], 12
	mov	ecx, DWORD PTR _axis$10[ebp]
	mov	edx, DWORD PTR _dist$4[ebp]
	mov	DWORD PTR [ecx+eax+12], edx
	mov	eax, DWORD PTR _num_widths$5[ebp]
	add	eax, 1
	mov	DWORD PTR _num_widths$5[ebp], eax
$LN29@af_cjk_met:
; Line 205
	jmp	$LN31@af_cjk_met
$LN30@af_cjk_met:
; Line 210
	mov	eax, DWORD PTR _dummy$15[ebp+40]
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	push	eax
	mov	edx, DWORD PTR _axis$10[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	eax, DWORD PTR _num_widths$5[ebp]
	push	eax
	call	_af_sort_and_quantize_widths
	add	esp, 12					; 0000000cH
; Line 211
	mov	ecx, DWORD PTR _axis$10[ebp]
	mov	edx, DWORD PTR _num_widths$5[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 212
	jmp	$LN35@af_cjk_met
$Exit$68:
; Line 215
	mov	DWORD PTR _dim$16[ebp], 0
	jmp	SHORT $LN26@af_cjk_met
$LN25@af_cjk_met:
	mov	eax, DWORD PTR _dim$16[ebp]
	add	eax, 1
	mov	DWORD PTR _dim$16[ebp], eax
$LN26@af_cjk_met:
	cmp	DWORD PTR _dim$16[ebp], 2
	jge	$LN4@af_cjk_met
; Line 217
	imul	ecx, DWORD PTR _dim$16[ebp], 1264
	mov	edx, DWORD PTR _metrics$[ebp]
	lea	eax, DWORD PTR [edx+ecx+44]
	mov	DWORD PTR _axis$3[ebp], eax
; Line 222
	mov	ecx, DWORD PTR _axis$3[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jbe	SHORT $LN57@af_cjk_met
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _axis$3[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	mov	DWORD PTR tv240[ebp], edx
	jmp	SHORT $LN58@af_cjk_met
$LN57@af_cjk_met:
	mov	eax, DWORD PTR _metrics$[ebp]
	imul	eax, DWORD PTR [eax+40], 50
	cdq
	and	edx, 2047				; 000007ffH
	add	eax, edx
	sar	eax, 11					; 0000000bH
	mov	DWORD PTR tv240[ebp], eax
$LN58@af_cjk_met:
	mov	ecx, DWORD PTR tv240[ebp]
	mov	DWORD PTR _stdw$2[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _stdw$2[ebp]
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	edx, DWORD PTR _axis$3[ebp]
	mov	DWORD PTR [edx+204], eax
; Line 226
	mov	eax, DWORD PTR _axis$3[ebp]
	mov	ecx, DWORD PTR _stdw$2[ebp]
	mov	DWORD PTR [eax+208], ecx
; Line 227
	mov	edx, DWORD PTR _axis$3[ebp]
	mov	BYTE PTR [edx+212], 0
$LN23@af_cjk_met:
; Line 236
	mov	eax, 4
	imul	ecx, eax, 89
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN22@af_cjk_met
	cmp	DWORD PTR _dim$16[ebp], 1
	jne	SHORT $LN59@af_cjk_met
	mov	DWORD PTR tv249[ebp], OFFSET $SG10269
	jmp	SHORT $LN60@af_cjk_met
$LN59@af_cjk_met:
	mov	DWORD PTR tv249[ebp], OFFSET $SG10270
$LN60@af_cjk_met:
	mov	edx, DWORD PTR tv249[ebp]
	push	edx
	push	OFFSET $SG10271
	call	_FT_Message
	add	esp, 8
$LN22@af_cjk_met:
	xor	eax, eax
	jne	SHORT $LN23@af_cjk_met
$LN19@af_cjk_met:
; Line 238
	mov	ecx, 4
	imul	edx, ecx, 89
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN18@af_cjk_met
	mov	eax, DWORD PTR _axis$3[ebp]
	mov	ecx, DWORD PTR [eax+208]
	push	ecx
	push	OFFSET $SG10276
	call	_FT_Message
	add	esp, 8
$LN18@af_cjk_met:
	xor	edx, edx
	jne	SHORT $LN19@af_cjk_met
; Line 239
	mov	DWORD PTR _i$1[ebp], 1
	jmp	SHORT $LN15@af_cjk_met
$LN14@af_cjk_met:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN15@af_cjk_met:
	mov	ecx, DWORD PTR _axis$3[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN8@af_cjk_met
$LN12@af_cjk_met:
; Line 240
	mov	eax, 4
	imul	ecx, eax, 89
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN11@af_cjk_met
	imul	edx, DWORD PTR _i$1[ebp], 12
	mov	eax, DWORD PTR _axis$3[ebp]
	mov	ecx, DWORD PTR [eax+edx+12]
	push	ecx
	push	OFFSET $SG10284
	call	_FT_Message
	add	esp, 8
$LN11@af_cjk_met:
	xor	edx, edx
	jne	SHORT $LN12@af_cjk_met
	jmp	SHORT $LN14@af_cjk_met
$LN8@af_cjk_met:
; Line 242
	mov	eax, 4
	imul	ecx, eax, 89
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN7@af_cjk_met
	push	OFFSET $SG10289
	call	_FT_Message
	add	esp, 4
$LN7@af_cjk_met:
	xor	edx, edx
	jne	SHORT $LN8@af_cjk_met
; Line 245
	jmp	$LN25@af_cjk_met
$LN4@af_cjk_met:
; Line 248
	mov	eax, 4
	imul	ecx, eax, 89
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN3@af_cjk_met
	push	OFFSET $SG10294
	call	_FT_Message
	add	esp, 4
$LN3@af_cjk_met:
	xor	edx, edx
	jne	SHORT $LN4@af_cjk_met
; Line 250
	lea	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_done
	add	esp, 4
; Line 251
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN67@af_cjk_met
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2816				; 00000b00H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN67@af_cjk_met:
	DD	5
	DD	$LN66@af_cjk_met
$LN66@af_cjk_met:
	DD	-128					; ffffff80H
	DD	120					; 00000078H
	DD	$LN61@af_cjk_met
	DD	-144					; ffffff70H
	DD	4
	DD	$LN62@af_cjk_met
	DD	-156					; ffffff64H
	DD	4
	DD	$LN63@af_cjk_met
	DD	-2740					; fffff54cH
	DD	2572					; 00000a0cH
	DD	$LN64@af_cjk_met
	DD	-2788					; fffff51cH
	DD	4
	DD	$LN65@af_cjk_met
$LN65@af_cjk_met:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN64@af_cjk_met:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN63@af_cjk_met:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN62@af_cjk_met:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN61@af_cjk_met:
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_af_cjk_metrics_init_widths ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_y_offset$1 = -44					; size = 4
_glyph_index$2 = -32					; size = 4
_old_advance$ = -24					; size = 4
_advance$ = -16						; size = 4
_same_width$ = -6					; size = 1
_started$ = -5						; size = 1
_i$ = -4						; size = 4
_metrics$ = 8						; size = 4
_face$ = 12						; size = 4
_af_cjk_metrics_check_digits PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 514
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 516
	mov	BYTE PTR _started$[ebp], 0
	mov	BYTE PTR _same_width$[ebp], 1
; Line 517
	mov	DWORD PTR _old_advance$[ebp], 0
; Line 521
	mov	DWORD PTR _i$[ebp], 48			; 00000030H
	jmp	SHORT $LN8@af_cjk_met
$LN7@af_cjk_met:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@af_cjk_met:
	cmp	DWORD PTR _i$[ebp], 57			; 00000039H
	ja	SHORT $LN6@af_cjk_met
; Line 527
	lea	ecx, DWORD PTR _y_offset$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyph_index$2[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	call	_af_get_char_index
	add	esp, 16					; 00000010H
; Line 528
	cmp	DWORD PTR _glyph_index$2[ebp], 0
	jne	SHORT $LN5@af_cjk_met
; Line 529
	jmp	SHORT $LN7@af_cjk_met
$LN5@af_cjk_met:
; Line 535
	lea	edx, DWORD PTR _advance$[ebp]
	push	edx
	push	2051					; 00000803H
	mov	eax, DWORD PTR _glyph_index$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Get_Advance
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN4@af_cjk_met
; Line 536
	jmp	SHORT $LN7@af_cjk_met
$LN4@af_cjk_met:
; Line 538
	movzx	edx, BYTE PTR _started$[ebp]
	test	edx, edx
	je	SHORT $LN3@af_cjk_met
; Line 540
	mov	eax, DWORD PTR _advance$[ebp]
	cmp	eax, DWORD PTR _old_advance$[ebp]
	je	SHORT $LN2@af_cjk_met
; Line 542
	mov	BYTE PTR _same_width$[ebp], 0
; Line 543
	jmp	SHORT $LN6@af_cjk_met
$LN2@af_cjk_met:
; Line 546
	jmp	SHORT $LN1@af_cjk_met
$LN3@af_cjk_met:
; Line 548
	mov	ecx, DWORD PTR _advance$[ebp]
	mov	DWORD PTR _old_advance$[ebp], ecx
; Line 549
	mov	BYTE PTR _started$[ebp], 1
$LN1@af_cjk_met:
; Line 551
	jmp	SHORT $LN7@af_cjk_met
$LN6@af_cjk_met:
; Line 553
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	al, BYTE PTR _same_width$[ebp]
	mov	BYTE PTR [edx+32], al
; Line 554
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@af_cjk_met
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@af_cjk_met:
	DD	3
	DD	$LN14@af_cjk_met
$LN14@af_cjk_met:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN11@af_cjk_met
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN12@af_cjk_met
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN13@af_cjk_met
$LN13@af_cjk_met:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN12@af_cjk_met:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN11@af_cjk_met:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
_af_cjk_metrics_check_digits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dim$ = -8						; size = 4
_error$ = -4						; size = 4
_hints$ = 8						; size = 4
_outline$ = 12						; size = 4
_metrics$ = 16						; size = 4
_af_cjk_hints_apply PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 2182
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2186
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR _metrics$[ebp], eax
; Line 2189
	mov	ecx, DWORD PTR _outline$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_glyph_hints_reload
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2190
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@af_cjk_hin
; Line 2191
	jmp	$Exit$14
$LN11@af_cjk_hin:
; Line 2194
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	and	ecx, 1
	jne	SHORT $LN10@af_cjk_hin
; Line 2196
	push	0
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_cjk_hints_detect_features
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2197
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@af_cjk_hin
; Line 2198
	jmp	$Exit$14
$LN9@af_cjk_hin:
; Line 2200
	push	0
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_cjk_hints_compute_blue_edges
	add	esp, 12					; 0000000cH
$LN10@af_cjk_hin:
; Line 2203
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+100]
	and	eax, 2
	jne	SHORT $LN8@af_cjk_hin
; Line 2205
	push	1
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_cjk_hints_detect_features
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2206
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@af_cjk_hin
; Line 2207
	jmp	$Exit$14
$LN7@af_cjk_hin:
; Line 2209
	push	1
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_cjk_hints_compute_blue_edges
	add	esp, 12					; 0000000cH
$LN8@af_cjk_hin:
; Line 2213
	mov	DWORD PTR _dim$[ebp], 0
	jmp	SHORT $LN6@af_cjk_hin
$LN5@af_cjk_hin:
	mov	ecx, DWORD PTR _dim$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dim$[ebp], ecx
$LN6@af_cjk_hin:
	cmp	DWORD PTR _dim$[ebp], 2
	jge	SHORT $LN4@af_cjk_hin
; Line 2216
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN1@af_cjk_hin
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+100]
	and	eax, 1
	je	SHORT $LN2@af_cjk_hin
$LN1@af_cjk_hin:
	cmp	DWORD PTR _dim$[ebp], 1
	jne	SHORT $LN3@af_cjk_hin
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	and	edx, 2
	jne	SHORT $LN3@af_cjk_hin
$LN2@af_cjk_hin:
; Line 2236
	mov	eax, DWORD PTR _dim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_cjk_hint_edges
	add	esp, 8
; Line 2237
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_cjk_align_edge_points
	add	esp, 8
; Line 2238
	mov	ecx, DWORD PTR _dim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_glyph_hints_align_strong_points
	add	esp, 8
; Line 2239
	mov	eax, DWORD PTR _dim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_glyph_hints_align_weak_points
	add	esp, 8
$LN3@af_cjk_hin:
; Line 2241
	jmp	SHORT $LN5@af_cjk_hin
$LN4@af_cjk_hin:
; Line 2249
	mov	edx, DWORD PTR _outline$[ebp]
	push	edx
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_save
	add	esp, 8
$Exit$14:
; Line 2252
	mov	eax, DWORD PTR _error$[ebp]
; Line 2253
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_hints_apply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_other_flags$ = -12					; size = 4
_scaler_flags$ = -8					; size = 4
_mode$ = -4						; size = 4
_hints$ = 8						; size = 4
_metrics$ = 12						; size = 4
_af_cjk_hints_init PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 1285
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1290
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_glyph_hints_rescale
	add	esp, 8
; Line 1296
	mov	edx, 1264				; 000004f0H
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+eax+44]
	mov	DWORD PTR [ecx+4], eax
; Line 1297
	mov	ecx, 1264				; 000004f0H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+edx+48]
	mov	DWORD PTR [eax+8], edx
; Line 1298
	mov	eax, 1264				; 000004f0H
	shl	eax, 0
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+eax+44]
	mov	DWORD PTR [ecx+12], eax
; Line 1299
	mov	ecx, 1264				; 000004f0H
	shl	ecx, 0
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+48]
	mov	DWORD PTR [edx+16], ecx
; Line 1302
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _mode$[ebp], eax
; Line 1309
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _scaler_flags$[ebp], edx
; Line 1310
	mov	DWORD PTR _other_flags$[ebp], 0
; Line 1316
	cmp	DWORD PTR _mode$[ebp], 2
	je	SHORT $LN5@af_cjk_hin
	cmp	DWORD PTR _mode$[ebp], 3
	jne	SHORT $LN6@af_cjk_hin
$LN5@af_cjk_hin:
; Line 1317
	mov	eax, DWORD PTR _other_flags$[ebp]
	or	eax, 1
	mov	DWORD PTR _other_flags$[ebp], eax
$LN6@af_cjk_hin:
; Line 1323
	cmp	DWORD PTR _mode$[ebp], 2
	je	SHORT $LN3@af_cjk_hin
	cmp	DWORD PTR _mode$[ebp], 4
	jne	SHORT $LN4@af_cjk_hin
$LN3@af_cjk_hin:
; Line 1324
	mov	ecx, DWORD PTR _other_flags$[ebp]
	or	ecx, 2
	mov	DWORD PTR _other_flags$[ebp], ecx
$LN4@af_cjk_hin:
; Line 1329
	cmp	DWORD PTR _mode$[ebp], 1
	je	SHORT $LN2@af_cjk_hin
; Line 1330
	mov	edx, DWORD PTR _other_flags$[ebp]
	or	edx, 4
	mov	DWORD PTR _other_flags$[ebp], edx
$LN2@af_cjk_hin:
; Line 1332
	cmp	DWORD PTR _mode$[ebp], 2
	jne	SHORT $LN1@af_cjk_hin
; Line 1333
	mov	eax, DWORD PTR _other_flags$[ebp]
	or	eax, 8
	mov	DWORD PTR _other_flags$[ebp], eax
$LN1@af_cjk_hin:
; Line 1335
	mov	ecx, DWORD PTR _scaler_flags$[ebp]
	or	ecx, 4
	mov	DWORD PTR _scaler_flags$[ebp], ecx
; Line 1337
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _scaler_flags$[ebp]
	mov	DWORD PTR [edx+100], eax
; Line 1338
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR _other_flags$[ebp]
	mov	DWORD PTR [ecx+104], edx
; Line 1340
	xor	eax, eax
; Line 1341
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_hints_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_metrics$ = 8						; size = 4
_scaler$ = 12						; size = 4
_af_cjk_metrics_scale PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 681
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 684
	mov	edi, DWORD PTR _metrics$[ebp]
	add	edi, 4
	mov	ecx, 7
	mov	esi, DWORD PTR _scaler$[ebp]
	rep movsd
; Line 686
	push	0
	mov	eax, DWORD PTR _scaler$[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	call	_af_cjk_metrics_scale_dim
	add	esp, 12					; 0000000cH
; Line 687
	push	1
	mov	edx, DWORD PTR _scaler$[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	call	_af_cjk_metrics_scale_dim
	add	esp, 12					; 0000000cH
; Line 688
	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_af_cjk_metrics_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_oldmap$ = -4						; size = 4
_metrics$ = 8						; size = 4
_face$ = 12						; size = 4
_af_cjk_metrics_init PROC
; File d:\mozilla\modules\freetype2\src\autofit\afcjk.c
; Line 562
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 563
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _oldmap$[ebp], ecx
; Line 566
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+68]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 568
	push	1970170211				; 756e6963H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Select_Charmap
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@af_cjk_met
; Line 570
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	call	_af_cjk_metrics_init_widths
	add	esp, 8
; Line 571
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	call	_af_cjk_metrics_init_blues
	add	esp, 8
; Line 572
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	call	_af_cjk_metrics_check_digits
	add	esp, 8
$LN1@af_cjk_met:
; Line 575
	mov	eax, DWORD PTR _oldmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Set_Charmap
	add	esp, 8
; Line 576
	xor	eax, eax
; Line 577
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_cjk_metrics_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_hints$ = 8						; size = 4
_width_count$ = 12					; size = 4
_widths$ = 16						; size = 4
_dim$ = 20						; size = 4
_af_latin_hints_detect_features PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 1810
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1814
	mov	eax, DWORD PTR _dim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_latin_hints_compute_segments
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1815
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@af_latin_h
; Line 1817
	mov	edx, DWORD PTR _dim$[ebp]
	push	edx
	mov	eax, DWORD PTR _widths$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_latin_hints_link_segments
	add	esp, 16					; 00000010H
; Line 1819
	mov	eax, DWORD PTR _dim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_latin_hints_compute_edges
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN1@af_latin_h:
; Line 1822
	mov	eax, DWORD PTR _error$[ebp]
; Line 1823
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_latin_hints_detect_features ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv221 = -113						; size = 1
tv80 = -112						; size = 4
_seg_delta$1 = -108					; size = 4
_edge_delta$2 = -104					; size = 4
_seg2$3 = -100						; size = 4
_edge2$4 = -96						; size = 4
_is_serif$5 = -89					; size = 1
_is_straight$6 = -88					; size = 4
_is_round$7 = -84					; size = 4
_edge$8 = -80						; size = 4
_edge_limit$9 = -76					; size = 4
_edges$10 = -72						; size = 4
_edge$11 = -64						; size = 4
_dist$12 = -56						; size = 4
_edge$13 = -52						; size = 4
_ee$14 = -48						; size = 4
_found$15 = -44						; size = 4
_segment_length_threshold$ = -40			; size = 4
_edge_distance_threshold$ = -36				; size = 4
_scale$ = -32						; size = 4
_seg$ = -28						; size = 4
_segment_limit$ = -24					; size = 4
_segments$ = -20					; size = 4
_laxis$ = -16						; size = 4
_memory$ = -12						; size = 4
_error$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_latin_hints_compute_edges PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 1514
	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	edi
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 29					; 0000001dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1515
	imul	eax, DWORD PTR _dim$[ebp], 28
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 1516
	mov	DWORD PTR _error$[ebp], 0
; Line 1517
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1518
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+108]
	imul	ecx, DWORD PTR _dim$[ebp], 1264
	lea	edx, DWORD PTR [eax+ecx+44]
	mov	DWORD PTR _laxis$[ebp], edx
; Line 1520
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _segments$[ebp], ecx
; Line 1521
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx], 48
	add	eax, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _segment_limit$[ebp], eax
; Line 1532
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 1535
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN47@af_latin_h
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN48@af_latin_h
$LN47@af_latin_h:
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv80[ebp], edx
$LN48@af_latin_h:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR _scale$[ebp], eax
; Line 1547
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN44@af_latin_h
; Line 1548
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	push	64					; 00000040H
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _segment_length_threshold$[ebp], eax
; Line 1549
	jmp	SHORT $LN43@af_latin_h
$LN44@af_latin_h:
; Line 1550
	mov	DWORD PTR _segment_length_threshold$[ebp], 0
$LN43@af_latin_h:
; Line 1570
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _laxis$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _edge_distance_threshold$[ebp], eax
; Line 1571
	cmp	DWORD PTR _edge_distance_threshold$[ebp], 16 ; 00000010H
	jle	SHORT $LN42@af_latin_h
; Line 1572
	mov	DWORD PTR _edge_distance_threshold$[ebp], 16 ; 00000010H
$LN42@af_latin_h:
; Line 1575
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge_distance_threshold$[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _edge_distance_threshold$[ebp], eax
; Line 1577
	mov	edx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg$[ebp], edx
	jmp	SHORT $LN41@af_latin_h
$LN40@af_latin_h:
	mov	eax, DWORD PTR _seg$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _seg$[ebp], eax
$LN41@af_latin_h:
	mov	ecx, DWORD PTR _seg$[ebp]
	cmp	ecx, DWORD PTR _segment_limit$[ebp]
	jae	$LN39@af_latin_h
; Line 1579
	mov	DWORD PTR _found$15[ebp], 0
; Line 1583
	mov	edx, DWORD PTR _seg$[ebp]
	movsx	eax, WORD PTR [edx+8]
	cmp	eax, DWORD PTR _segment_length_threshold$[ebp]
	jge	SHORT $LN38@af_latin_h
; Line 1584
	jmp	SHORT $LN40@af_latin_h
$LN38@af_latin_h:
; Line 1589
	mov	ecx, DWORD PTR _seg$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN37@af_latin_h
	mov	edx, DWORD PTR _seg$[ebp]
	movsx	eax, WORD PTR [edx+8]
	shl	eax, 1
	imul	ecx, DWORD PTR _segment_length_threshold$[ebp], 3
	cmp	eax, ecx
	jge	SHORT $LN37@af_latin_h
; Line 1590
	jmp	SHORT $LN40@af_latin_h
$LN37@af_latin_h:
; Line 1593
	mov	DWORD PTR _ee$14[ebp], 0
	jmp	SHORT $LN36@af_latin_h
$LN35@af_latin_h:
	mov	edx, DWORD PTR _ee$14[ebp]
	add	edx, 1
	mov	DWORD PTR _ee$14[ebp], edx
$LN36@af_latin_h:
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR _ee$14[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN34@af_latin_h
; Line 1595
	imul	edx, DWORD PTR _ee$14[ebp], 48
	mov	eax, DWORD PTR _axis$[ebp]
	add	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _edge$13[ebp], edx
; Line 1599
	mov	ecx, DWORD PTR _seg$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _edge$13[ebp]
	movsx	ecx, WORD PTR [eax]
	sub	edx, ecx
	mov	DWORD PTR _dist$12[ebp], edx
; Line 1600
	jns	SHORT $LN33@af_latin_h
; Line 1601
	mov	edx, DWORD PTR _dist$12[ebp]
	neg	edx
	mov	DWORD PTR _dist$12[ebp], edx
$LN33@af_latin_h:
; Line 1603
	mov	eax, DWORD PTR _dist$12[ebp]
	cmp	eax, DWORD PTR _edge_distance_threshold$[ebp]
	jge	SHORT $LN32@af_latin_h
	mov	ecx, DWORD PTR _edge$13[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	mov	eax, DWORD PTR _seg$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	edx, ecx
	jne	SHORT $LN32@af_latin_h
; Line 1605
	mov	edx, DWORD PTR _edge$13[ebp]
	mov	DWORD PTR _found$15[ebp], edx
; Line 1606
	jmp	SHORT $LN34@af_latin_h
$LN32@af_latin_h:
; Line 1608
	jmp	SHORT $LN35@af_latin_h
$LN34@af_latin_h:
; Line 1610
	cmp	DWORD PTR _found$15[ebp], 0
	jne	$LN31@af_latin_h
; Line 1619
	lea	eax, DWORD PTR _edge$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seg$[ebp]
	movsx	eax, BYTE PTR [edx+1]
	push	eax
	mov	ecx, DWORD PTR _seg$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	push	edx
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	call	_af_axis_hints_new_edge
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 1620
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN30@af_latin_h
; Line 1621
	jmp	$Exit$54
$LN30@af_latin_h:
; Line 1624
	push	48					; 00000030H
	push	0
	mov	ecx, DWORD PTR _edge$11[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1626
	mov	edx, DWORD PTR _edge$11[ebp]
	mov	eax, DWORD PTR _seg$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 1627
	mov	ecx, DWORD PTR _edge$11[ebp]
	mov	edx, DWORD PTR _seg$[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 1628
	mov	eax, DWORD PTR _edge$11[ebp]
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+13], dl
; Line 1629
	mov	eax, DWORD PTR _edge$11[ebp]
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax], dx
; Line 1630
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seg$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _edge$11[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1631
	mov	edx, DWORD PTR _edge$11[ebp]
	mov	eax, DWORD PTR _edge$11[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
; Line 1632
	mov	edx, DWORD PTR _seg$[ebp]
	mov	eax, DWORD PTR _seg$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1634
	jmp	SHORT $LN29@af_latin_h
$LN31@af_latin_h:
; Line 1638
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	edx, DWORD PTR _found$15[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+16], eax
; Line 1639
	mov	ecx, DWORD PTR _found$15[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _seg$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1640
	mov	ecx, DWORD PTR _found$15[ebp]
	mov	edx, DWORD PTR _seg$[ebp]
	mov	DWORD PTR [ecx+44], edx
$LN29@af_latin_h:
; Line 1642
	jmp	$LN40@af_latin_h
$LN39@af_latin_h:
; Line 1666
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _edges$10[ebp], ecx
; Line 1667
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx+12], 48
	add	eax, DWORD PTR _edges$10[ebp]
	mov	DWORD PTR _edge_limit$9[ebp], eax
; Line 1671
	mov	ecx, DWORD PTR _edges$10[ebp]
	mov	DWORD PTR _edge$8[ebp], ecx
	jmp	SHORT $LN28@af_latin_h
$LN27@af_latin_h:
	mov	edx, DWORD PTR _edge$8[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _edge$8[ebp], edx
$LN28@af_latin_h:
	mov	eax, DWORD PTR _edge$8[ebp]
	cmp	eax, DWORD PTR _edge_limit$9[ebp]
	jae	SHORT $LN26@af_latin_h
; Line 1673
	mov	ecx, DWORD PTR _edge$8[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _seg$[ebp], edx
; Line 1674
	cmp	DWORD PTR _seg$[ebp], 0
	je	SHORT $LN25@af_latin_h
$LN24@af_latin_h:
; Line 1677
	mov	eax, DWORD PTR _seg$[ebp]
	mov	ecx, DWORD PTR _edge$8[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1678
	mov	edx, DWORD PTR _seg$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _seg$[ebp], eax
; Line 1680
	mov	ecx, DWORD PTR _edge$8[ebp]
	mov	edx, DWORD PTR _seg$[ebp]
	cmp	edx, DWORD PTR [ecx+40]
	jne	SHORT $LN24@af_latin_h
$LN25@af_latin_h:
; Line 1681
	jmp	SHORT $LN27@af_latin_h
$LN26@af_latin_h:
; Line 1684
	mov	eax, DWORD PTR _edges$10[ebp]
	mov	DWORD PTR _edge$8[ebp], eax
	jmp	SHORT $LN21@af_latin_h
$LN20@af_latin_h:
	mov	ecx, DWORD PTR _edge$8[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _edge$8[ebp], ecx
$LN21@af_latin_h:
	mov	edx, DWORD PTR _edge$8[ebp]
	cmp	edx, DWORD PTR _edge_limit$9[ebp]
	jae	$Exit$54
; Line 1686
	mov	DWORD PTR _is_round$7[ebp], 0
; Line 1687
	mov	DWORD PTR _is_straight$6[ebp], 0
; Line 1694
	mov	eax, DWORD PTR _edge$8[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _seg$[ebp], ecx
$LN18@af_latin_h:
; Line 1702
	mov	edx, DWORD PTR _seg$[ebp]
	movzx	eax, BYTE PTR [edx]
	and	eax, 1
	je	SHORT $LN15@af_latin_h
; Line 1703
	mov	ecx, DWORD PTR _is_round$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _is_round$7[ebp], ecx
; Line 1704
	jmp	SHORT $LN14@af_latin_h
$LN15@af_latin_h:
; Line 1705
	mov	edx, DWORD PTR _is_straight$6[ebp]
	add	edx, 1
	mov	DWORD PTR _is_straight$6[ebp], edx
$LN14@af_latin_h:
; Line 1719
	mov	eax, DWORD PTR _seg$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN49@af_latin_h
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN49@af_latin_h
	mov	eax, DWORD PTR _seg$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _edge$8[ebp]
	je	SHORT $LN49@af_latin_h
	mov	BYTE PTR tv221[ebp], 1
	jmp	SHORT $LN50@af_latin_h
$LN49@af_latin_h:
	mov	BYTE PTR tv221[ebp], 0
$LN50@af_latin_h:
	mov	al, BYTE PTR tv221[ebp]
	mov	BYTE PTR _is_serif$5[ebp], al
; Line 1721
	mov	ecx, DWORD PTR _seg$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN11@af_latin_h
	mov	edx, DWORD PTR _seg$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN12@af_latin_h
$LN11@af_latin_h:
	movzx	ecx, BYTE PTR _is_serif$5[ebp]
	test	ecx, ecx
	je	$LN13@af_latin_h
$LN12@af_latin_h:
; Line 1727
	mov	edx, DWORD PTR _edge$8[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _edge2$4[ebp], eax
; Line 1728
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _seg2$3[ebp], edx
; Line 1730
	movzx	eax, BYTE PTR _is_serif$5[ebp]
	test	eax, eax
	je	SHORT $LN10@af_latin_h
; Line 1732
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _seg2$3[ebp], edx
; Line 1733
	mov	eax, DWORD PTR _edge$8[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _edge2$4[ebp], ecx
$LN10@af_latin_h:
; Line 1736
	cmp	DWORD PTR _edge2$4[ebp], 0
	je	SHORT $LN9@af_latin_h
; Line 1742
	mov	edx, DWORD PTR _edge$8[ebp]
	movsx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _edge2$4[ebp]
	movsx	edx, WORD PTR [ecx]
	sub	eax, edx
	mov	DWORD PTR _edge_delta$2[ebp], eax
; Line 1743
	jns	SHORT $LN8@af_latin_h
; Line 1744
	mov	eax, DWORD PTR _edge_delta$2[ebp]
	neg	eax
	mov	DWORD PTR _edge_delta$2[ebp], eax
$LN8@af_latin_h:
; Line 1746
	mov	ecx, DWORD PTR _seg$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _seg2$3[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	edx, ecx
	mov	DWORD PTR _seg_delta$1[ebp], edx
; Line 1747
	jns	SHORT $LN7@af_latin_h
; Line 1748
	mov	edx, DWORD PTR _seg_delta$1[ebp]
	neg	edx
	mov	DWORD PTR _seg_delta$1[ebp], edx
$LN7@af_latin_h:
; Line 1750
	mov	eax, DWORD PTR _seg_delta$1[ebp]
	cmp	eax, DWORD PTR _edge_delta$2[ebp]
	jge	SHORT $LN6@af_latin_h
; Line 1751
	mov	ecx, DWORD PTR _seg2$3[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _edge2$4[ebp], edx
$LN6@af_latin_h:
; Line 1753
	jmp	SHORT $LN5@af_latin_h
$LN9@af_latin_h:
; Line 1754
	mov	eax, DWORD PTR _seg2$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _edge2$4[ebp], ecx
$LN5@af_latin_h:
; Line 1756
	movzx	edx, BYTE PTR _is_serif$5[ebp]
	test	edx, edx
	je	SHORT $LN4@af_latin_h
; Line 1758
	mov	eax, DWORD PTR _edge$8[ebp]
	mov	ecx, DWORD PTR _edge2$4[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 1759
	mov	edx, DWORD PTR _edge2$4[ebp]
	movzx	eax, BYTE PTR [edx+12]
	or	eax, 2
	mov	ecx, DWORD PTR _edge2$4[ebp]
	mov	BYTE PTR [ecx+12], al
; Line 1761
	jmp	SHORT $LN13@af_latin_h
$LN4@af_latin_h:
; Line 1762
	mov	edx, DWORD PTR _edge$8[ebp]
	mov	eax, DWORD PTR _edge2$4[ebp]
	mov	DWORD PTR [edx+24], eax
$LN13@af_latin_h:
; Line 1765
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _seg$[ebp], edx
; Line 1767
	mov	eax, DWORD PTR _edge$8[ebp]
	mov	ecx, DWORD PTR _seg$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jne	$LN18@af_latin_h
; Line 1770
	mov	edx, DWORD PTR _edge$8[ebp]
	mov	BYTE PTR [edx+12], 0
; Line 1772
	cmp	DWORD PTR _is_round$7[ebp], 0
	jle	SHORT $LN2@af_latin_h
	mov	eax, DWORD PTR _is_round$7[ebp]
	cmp	eax, DWORD PTR _is_straight$6[ebp]
	jl	SHORT $LN2@af_latin_h
; Line 1773
	mov	ecx, DWORD PTR _edge$8[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	edx, 1
	mov	eax, DWORD PTR _edge$8[ebp]
	mov	BYTE PTR [eax+12], dl
$LN2@af_latin_h:
; Line 1793
	mov	ecx, DWORD PTR _edge$8[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN1@af_latin_h
	mov	edx, DWORD PTR _edge$8[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN1@af_latin_h
; Line 1794
	mov	eax, DWORD PTR _edge$8[ebp]
	mov	DWORD PTR [eax+28], 0
$LN1@af_latin_h:
; Line 1795
	jmp	$LN20@af_latin_h
$Exit$54:
; Line 1799
	mov	eax, DWORD PTR _error$[ebp]
; Line 1800
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN53@af_latin_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN53@af_latin_h:
	DD	1
	DD	$LN52@af_latin_h
$LN52@af_latin_h:
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN51@af_latin_h
$LN51@af_latin_h:
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
_af_latin_hints_compute_edges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_delta$1 = -72						; size = 4
_score$2 = -68						; size = 4
_dist_demerit$3 = -64					; size = 4
_dist$4 = -60						; size = 4
_len$5 = -56						; size = 4
_max$6 = -52						; size = 4
_min$7 = -48						; size = 4
_pos2$8 = -44						; size = 4
_pos1$9 = -40						; size = 4
_seg2$ = -36						; size = 4
_seg1$ = -32						; size = 4
_max_width$ = -28					; size = 4
_dist_score$ = -24					; size = 4
_len_score$ = -20					; size = 4
_len_threshold$ = -16					; size = 4
_segment_limit$ = -12					; size = 4
_segments$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_width_count$ = 12					; size = 4
_widths$ = 16						; size = 4
_dim$ = 20						; size = 4
_af_latin_hints_link_segments PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 1378
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1379
	imul	eax, DWORD PTR _dim$[ebp], 28
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 1380
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _segments$[ebp], ecx
; Line 1381
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx], 48
	add	eax, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _segment_limit$[ebp], eax
; Line 1386
	cmp	DWORD PTR _width_count$[ebp], 0
	je	SHORT $LN27@af_latin_h
; Line 1387
	mov	ecx, DWORD PTR _width_count$[ebp]
	sub	ecx, 1
	imul	edx, ecx, 12
	mov	eax, DWORD PTR _widths$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _max_width$[ebp], ecx
; Line 1388
	jmp	SHORT $LN26@af_latin_h
$LN27@af_latin_h:
; Line 1389
	mov	DWORD PTR _max_width$[ebp], 0
$LN26@af_latin_h:
; Line 1392
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	eax, DWORD PTR [eax+40]
	shl	eax, 3
	cdq
	and	edx, 2047				; 000007ffH
	add	eax, edx
	sar	eax, 11					; 0000000bH
	mov	DWORD PTR _len_threshold$[ebp], eax
; Line 1393
	cmp	DWORD PTR _len_threshold$[ebp], 0
	jne	SHORT $LN25@af_latin_h
; Line 1394
	mov	DWORD PTR _len_threshold$[ebp], 1
$LN25@af_latin_h:
; Line 1397
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	imul	eax, DWORD PTR [edx+40], 6000
	cdq
	and	edx, 2047				; 000007ffH
	add	eax, edx
	sar	eax, 11					; 0000000bH
	mov	DWORD PTR _len_score$[ebp], eax
; Line 1402
	mov	DWORD PTR _dist_score$[ebp], 3000	; 00000bb8H
; Line 1405
	mov	eax, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg1$[ebp], eax
	jmp	SHORT $LN24@af_latin_h
$LN23@af_latin_h:
	mov	ecx, DWORD PTR _seg1$[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _seg1$[ebp], ecx
$LN24@af_latin_h:
	mov	edx, DWORD PTR _seg1$[ebp]
	cmp	edx, DWORD PTR _segment_limit$[ebp]
	jae	$LN22@af_latin_h
; Line 1407
	mov	eax, DWORD PTR _seg1$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _axis$[ebp]
	cmp	ecx, DWORD PTR [edx+24]
	je	SHORT $LN21@af_latin_h
; Line 1408
	jmp	SHORT $LN23@af_latin_h
$LN21@af_latin_h:
; Line 1412
	mov	eax, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg2$[ebp], eax
	jmp	SHORT $LN20@af_latin_h
$LN19@af_latin_h:
	mov	ecx, DWORD PTR _seg2$[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _seg2$[ebp], ecx
$LN20@af_latin_h:
	mov	edx, DWORD PTR _seg2$[ebp]
	cmp	edx, DWORD PTR _segment_limit$[ebp]
	jae	$LN18@af_latin_h
; Line 1414
	mov	eax, DWORD PTR _seg1$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _pos1$9[ebp], ecx
; Line 1415
	mov	edx, DWORD PTR _seg2$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR _pos2$8[ebp], eax
; Line 1418
	mov	ecx, DWORD PTR _seg1$[ebp]
	movsx	edx, BYTE PTR [ecx+1]
	mov	eax, DWORD PTR _seg2$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	add	edx, ecx
	jne	$LN17@af_latin_h
	mov	edx, DWORD PTR _pos2$8[ebp]
	cmp	edx, DWORD PTR _pos1$9[ebp]
	jle	$LN17@af_latin_h
; Line 1421
	mov	eax, DWORD PTR _seg1$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _min$7[ebp], ecx
; Line 1422
	mov	edx, DWORD PTR _seg1$[ebp]
	movsx	eax, WORD PTR [edx+6]
	mov	DWORD PTR _max$6[ebp], eax
; Line 1426
	mov	ecx, DWORD PTR _seg2$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	cmp	DWORD PTR _min$7[ebp], edx
	jge	SHORT $LN16@af_latin_h
; Line 1427
	mov	eax, DWORD PTR _seg2$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _min$7[ebp], ecx
$LN16@af_latin_h:
; Line 1429
	mov	edx, DWORD PTR _seg2$[ebp]
	movsx	eax, WORD PTR [edx+6]
	cmp	DWORD PTR _max$6[ebp], eax
	jle	SHORT $LN15@af_latin_h
; Line 1430
	mov	ecx, DWORD PTR _seg2$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	mov	DWORD PTR _max$6[ebp], edx
$LN15@af_latin_h:
; Line 1434
	mov	eax, DWORD PTR _max$6[ebp]
	sub	eax, DWORD PTR _min$7[ebp]
	mov	DWORD PTR _len$5[ebp], eax
; Line 1435
	mov	ecx, DWORD PTR _len$5[ebp]
	cmp	ecx, DWORD PTR _len_threshold$[ebp]
	jl	$LN17@af_latin_h
; Line 1451
	mov	edx, DWORD PTR _pos2$8[ebp]
	sub	edx, DWORD PTR _pos1$9[ebp]
	mov	DWORD PTR _dist$4[ebp], edx
; Line 1456
	cmp	DWORD PTR _max_width$[ebp], 0
	je	SHORT $LN13@af_latin_h
; Line 1460
	mov	eax, DWORD PTR _dist$4[ebp]
	shl	eax, 10					; 0000000aH
	cdq
	idiv	DWORD PTR _max_width$[ebp]
	sub	eax, 1024				; 00000400H
	mov	DWORD PTR _delta$1[ebp], eax
; Line 1463
	cmp	DWORD PTR _delta$1[ebp], 10000		; 00002710H
	jle	SHORT $LN12@af_latin_h
; Line 1464
	mov	DWORD PTR _dist_demerit$3[ebp], 32000	; 00007d00H
	jmp	SHORT $LN11@af_latin_h
$LN12@af_latin_h:
; Line 1465
	cmp	DWORD PTR _delta$1[ebp], 0
	jle	SHORT $LN10@af_latin_h
; Line 1466
	mov	eax, DWORD PTR _delta$1[ebp]
	imul	eax, DWORD PTR _delta$1[ebp]
	cdq
	idiv	DWORD PTR _dist_score$[ebp]
	mov	DWORD PTR _dist_demerit$3[ebp], eax
; Line 1467
	jmp	SHORT $LN11@af_latin_h
$LN10@af_latin_h:
; Line 1468
	mov	DWORD PTR _dist_demerit$3[ebp], 0
$LN11@af_latin_h:
; Line 1470
	jmp	SHORT $LN8@af_latin_h
$LN13@af_latin_h:
; Line 1471
	mov	eax, DWORD PTR _dist$4[ebp]
	mov	DWORD PTR _dist_demerit$3[ebp], eax
$LN8@af_latin_h:
; Line 1473
	mov	eax, DWORD PTR _len_score$[ebp]
	cdq
	idiv	DWORD PTR _len$5[ebp]
	add	eax, DWORD PTR _dist_demerit$3[ebp]
	mov	DWORD PTR _score$2[ebp], eax
; Line 1476
	mov	ecx, DWORD PTR _seg1$[ebp]
	mov	edx, DWORD PTR _score$2[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jge	SHORT $LN7@af_latin_h
; Line 1478
	mov	eax, DWORD PTR _seg1$[ebp]
	mov	ecx, DWORD PTR _score$2[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 1479
	mov	edx, DWORD PTR _seg1$[ebp]
	mov	eax, DWORD PTR _seg2$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN7@af_latin_h:
; Line 1482
	mov	ecx, DWORD PTR _seg2$[ebp]
	mov	edx, DWORD PTR _score$2[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jge	SHORT $LN17@af_latin_h
; Line 1484
	mov	eax, DWORD PTR _seg2$[ebp]
	mov	ecx, DWORD PTR _score$2[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 1485
	mov	edx, DWORD PTR _seg2$[ebp]
	mov	eax, DWORD PTR _seg1$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN17@af_latin_h:
; Line 1489
	jmp	$LN19@af_latin_h
$LN18@af_latin_h:
; Line 1490
	jmp	$LN23@af_latin_h
$LN22@af_latin_h:
; Line 1493
	mov	ecx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg1$[ebp], ecx
	jmp	SHORT $LN5@af_latin_h
$LN4@af_latin_h:
	mov	edx, DWORD PTR _seg1$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _seg1$[ebp], edx
$LN5@af_latin_h:
	mov	eax, DWORD PTR _seg1$[ebp]
	cmp	eax, DWORD PTR _segment_limit$[ebp]
	jae	SHORT $LN28@af_latin_h
; Line 1495
	mov	ecx, DWORD PTR _seg1$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _seg2$[ebp], edx
; Line 1497
	cmp	DWORD PTR _seg2$[ebp], 0
	je	SHORT $LN2@af_latin_h
; Line 1499
	mov	eax, DWORD PTR _seg2$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _seg1$[ebp]
	je	SHORT $LN2@af_latin_h
; Line 1501
	mov	edx, DWORD PTR _seg1$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 1502
	mov	eax, DWORD PTR _seg1$[ebp]
	mov	ecx, DWORD PTR _seg2$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+24], edx
$LN2@af_latin_h:
; Line 1505
	jmp	SHORT $LN4@af_latin_h
$LN28@af_latin_h:
; Line 1506
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_af_latin_hints_link_segments ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv230 = -196						; size = 4
tv174 = -192						; size = 4
tv163 = -188						; size = 4
tv153 = -184						; size = 4
tv80 = -180						; size = 4
_p$1 = -176						; size = 4
_p$2 = -172						; size = 4
_last_v$3 = -168					; size = 4
_first_v$4 = -164					; size = 4
_last$5 = -160						; size = 4
_first$6 = -156						; size = 4
_segments_end$7 = -152					; size = 4
_segments$8 = -148					; size = 4
_v$9 = -144						; size = 4
_u$10 = -140						; size = 4
_passed$11 = -133					; size = 1
_max_pos$12 = -132					; size = 4
_min_pos$13 = -128					; size = 4
_on_edge$14 = -124					; size = 4
_last$15 = -120						; size = 4
_point$16 = -116					; size = 4
_limit$17 = -112					; size = 4
_point$18 = -108					; size = 4
_limit$19 = -104					; size = 4
_point$20 = -100					; size = 4
_segment_dir$ = -96					; size = 4
_major_dir$ = -92					; size = 4
_contour_limit$ = -88					; size = 4
_contour$ = -84						; size = 4
_seg0$ = -76						; size = 48
_segment$ = -20						; size = 4
_error$ = -12						; size = 4
_memory$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_latin_hints_compute_segments PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 1156
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1157
	imul	eax, DWORD PTR _dim$[ebp], 28
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 1158
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1159
	mov	DWORD PTR _error$[ebp], 0
; Line 1160
	mov	DWORD PTR _segment$[ebp], 0
; Line 1162
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _contour$[ebp], eax
; Line 1163
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _contour$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _contour_limit$[ebp], ecx
; Line 1167
	push	48					; 00000030H
	push	0
	lea	edx, DWORD PTR _seg0$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1168
	mov	DWORD PTR _seg0$[ebp+32], 32000		; 00007d00H
; Line 1169
	mov	BYTE PTR _seg0$[ebp], 0
; Line 1171
	mov	eax, DWORD PTR _axis$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jge	SHORT $LN43@af_latin_h
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	neg	edx
	mov	DWORD PTR tv80[ebp], edx
	jmp	SHORT $LN44@af_latin_h
$LN43@af_latin_h:
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv80[ebp], ecx
$LN44@af_latin_h:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _major_dir$[ebp], edx
; Line 1172
	mov	eax, DWORD PTR _major_dir$[ebp]
	mov	DWORD PTR _segment_dir$[ebp], eax
; Line 1174
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 1177
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN40@af_latin_h
; Line 1179
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _point$20[ebp], eax
; Line 1180
	mov	ecx, DWORD PTR _hints$[ebp]
	imul	edx, DWORD PTR [ecx+24], 40
	add	edx, DWORD PTR _point$20[ebp]
	mov	DWORD PTR _limit$19[ebp], edx
; Line 1183
	jmp	SHORT $LN39@af_latin_h
$LN38@af_latin_h:
	mov	eax, DWORD PTR _point$20[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _point$20[ebp], eax
$LN39@af_latin_h:
	mov	ecx, DWORD PTR _point$20[ebp]
	cmp	ecx, DWORD PTR _limit$19[ebp]
	jae	SHORT $LN37@af_latin_h
; Line 1185
	mov	edx, DWORD PTR _point$20[ebp]
	movsx	eax, WORD PTR [edx+12]
	mov	ecx, DWORD PTR _point$20[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 1186
	mov	edx, DWORD PTR _point$20[ebp]
	movsx	eax, WORD PTR [edx+14]
	mov	ecx, DWORD PTR _point$20[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 1187
	jmp	SHORT $LN38@af_latin_h
$LN37@af_latin_h:
; Line 1189
	jmp	SHORT $LN36@af_latin_h
$LN40@af_latin_h:
; Line 1191
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _point$18[ebp], eax
; Line 1192
	mov	ecx, DWORD PTR _hints$[ebp]
	imul	edx, DWORD PTR [ecx+24], 40
	add	edx, DWORD PTR _point$18[ebp]
	mov	DWORD PTR _limit$17[ebp], edx
; Line 1195
	jmp	SHORT $LN35@af_latin_h
$LN34@af_latin_h:
	mov	eax, DWORD PTR _point$18[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _point$18[ebp], eax
$LN35@af_latin_h:
	mov	ecx, DWORD PTR _point$18[ebp]
	cmp	ecx, DWORD PTR _limit$17[ebp]
	jae	SHORT $LN36@af_latin_h
; Line 1197
	mov	edx, DWORD PTR _point$18[ebp]
	movsx	eax, WORD PTR [edx+14]
	mov	ecx, DWORD PTR _point$18[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 1198
	mov	edx, DWORD PTR _point$18[ebp]
	movsx	eax, WORD PTR [edx+12]
	mov	ecx, DWORD PTR _point$18[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 1199
	jmp	SHORT $LN34@af_latin_h
$LN36@af_latin_h:
; Line 1203
	jmp	SHORT $LN32@af_latin_h
$LN31@af_latin_h:
	mov	edx, DWORD PTR _contour$[ebp]
	add	edx, 4
	mov	DWORD PTR _contour$[ebp], edx
$LN32@af_latin_h:
	mov	eax, DWORD PTR _contour$[ebp]
	cmp	eax, DWORD PTR _contour_limit$[ebp]
	jae	$LN30@af_latin_h
; Line 1205
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _contour$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _point$16[ebp], ecx
; Line 1206
	mov	edx, DWORD PTR _point$16[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _last$15[ebp], eax
; Line 1207
	mov	DWORD PTR _on_edge$14[ebp], 0
; Line 1208
	mov	DWORD PTR _min_pos$13[ebp], 32000	; 00007d00H
; Line 1209
	mov	DWORD PTR _max_pos$12[ebp], -32000	; ffff8300H
; Line 1213
	mov	ecx, DWORD PTR _point$16[ebp]
	cmp	ecx, DWORD PTR _last$15[ebp]
	jne	SHORT $LN29@af_latin_h
; Line 1214
	jmp	SHORT $LN31@af_latin_h
$LN29@af_latin_h:
; Line 1217
	mov	edx, DWORD PTR _last$15[ebp]
	movsx	eax, BYTE PTR [edx+3]
	test	eax, eax
	jge	SHORT $LN45@af_latin_h
	mov	ecx, DWORD PTR _last$15[ebp]
	movsx	edx, BYTE PTR [ecx+3]
	neg	edx
	mov	DWORD PTR tv153[ebp], edx
	jmp	SHORT $LN46@af_latin_h
$LN45@af_latin_h:
	mov	eax, DWORD PTR _last$15[ebp]
	movsx	ecx, BYTE PTR [eax+3]
	mov	DWORD PTR tv153[ebp], ecx
$LN46@af_latin_h:
	mov	edx, DWORD PTR tv153[ebp]
	cmp	edx, DWORD PTR _major_dir$[ebp]
	jne	$LN28@af_latin_h
	mov	eax, DWORD PTR _point$16[ebp]
	movsx	ecx, BYTE PTR [eax+3]
	test	ecx, ecx
	jge	SHORT $LN47@af_latin_h
	mov	edx, DWORD PTR _point$16[ebp]
	movsx	eax, BYTE PTR [edx+3]
	neg	eax
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN48@af_latin_h
$LN47@af_latin_h:
	mov	ecx, DWORD PTR _point$16[ebp]
	movsx	edx, BYTE PTR [ecx+3]
	mov	DWORD PTR tv163[ebp], edx
$LN48@af_latin_h:
	mov	eax, DWORD PTR tv163[ebp]
	cmp	eax, DWORD PTR _major_dir$[ebp]
	jne	SHORT $LN28@af_latin_h
; Line 1220
	mov	ecx, DWORD PTR _point$16[ebp]
	mov	DWORD PTR _last$15[ebp], ecx
$LN27@af_latin_h:
; Line 1224
	mov	edx, DWORD PTR _point$16[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _point$16[ebp], eax
; Line 1225
	mov	ecx, DWORD PTR _point$16[ebp]
	movsx	edx, BYTE PTR [ecx+3]
	test	edx, edx
	jge	SHORT $LN49@af_latin_h
	mov	eax, DWORD PTR _point$16[ebp]
	movsx	ecx, BYTE PTR [eax+3]
	neg	ecx
	mov	DWORD PTR tv174[ebp], ecx
	jmp	SHORT $LN50@af_latin_h
$LN49@af_latin_h:
	mov	edx, DWORD PTR _point$16[ebp]
	movsx	eax, BYTE PTR [edx+3]
	mov	DWORD PTR tv174[ebp], eax
$LN50@af_latin_h:
	mov	ecx, DWORD PTR tv174[ebp]
	cmp	ecx, DWORD PTR _major_dir$[ebp]
	je	SHORT $LN25@af_latin_h
; Line 1227
	mov	edx, DWORD PTR _point$16[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _point$16[ebp], eax
; Line 1228
	jmp	SHORT $LN28@af_latin_h
$LN25@af_latin_h:
; Line 1230
	mov	ecx, DWORD PTR _point$16[ebp]
	cmp	ecx, DWORD PTR _last$15[ebp]
	jne	SHORT $LN24@af_latin_h
; Line 1231
	jmp	SHORT $LN28@af_latin_h
$LN24@af_latin_h:
; Line 1232
	jmp	SHORT $LN27@af_latin_h
$LN28@af_latin_h:
; Line 1235
	mov	edx, DWORD PTR _point$16[ebp]
	mov	DWORD PTR _last$15[ebp], edx
; Line 1236
	mov	BYTE PTR _passed$11[ebp], 0
$LN23@af_latin_h:
; Line 1243
	cmp	DWORD PTR _on_edge$14[ebp], 0
	je	$LN21@af_latin_h
; Line 1245
	mov	eax, DWORD PTR _point$16[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _u$10[ebp], ecx
; Line 1246
	mov	edx, DWORD PTR _u$10[ebp]
	cmp	edx, DWORD PTR _min_pos$13[ebp]
	jge	SHORT $LN20@af_latin_h
; Line 1247
	mov	eax, DWORD PTR _u$10[ebp]
	mov	DWORD PTR _min_pos$13[ebp], eax
$LN20@af_latin_h:
; Line 1248
	mov	ecx, DWORD PTR _u$10[ebp]
	cmp	ecx, DWORD PTR _max_pos$12[ebp]
	jle	SHORT $LN19@af_latin_h
; Line 1249
	mov	edx, DWORD PTR _u$10[ebp]
	mov	DWORD PTR _max_pos$12[ebp], edx
$LN19@af_latin_h:
; Line 1251
	mov	eax, DWORD PTR _point$16[ebp]
	movsx	ecx, BYTE PTR [eax+3]
	cmp	ecx, DWORD PTR _segment_dir$[ebp]
	jne	SHORT $LN17@af_latin_h
	mov	edx, DWORD PTR _point$16[ebp]
	cmp	edx, DWORD PTR _last$15[ebp]
	jne	$LN21@af_latin_h
$LN17@af_latin_h:
; Line 1254
	mov	eax, DWORD PTR _segment$[ebp]
	mov	ecx, DWORD PTR _point$16[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 1255
	mov	edx, DWORD PTR _min_pos$13[ebp]
	add	edx, DWORD PTR _max_pos$12[ebp]
	sar	edx, 1
	mov	eax, DWORD PTR _segment$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 1260
	mov	ecx, DWORD PTR _segment$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _point$16[ebp]
	movzx	edx, WORD PTR [ecx]
	or	eax, edx
	and	eax, 3
	je	SHORT $LN16@af_latin_h
; Line 1261
	mov	eax, DWORD PTR _segment$[ebp]
	movzx	ecx, BYTE PTR [eax]
	or	ecx, 1
	mov	edx, DWORD PTR _segment$[ebp]
	mov	BYTE PTR [edx], cl
$LN16@af_latin_h:
; Line 1264
	mov	eax, DWORD PTR _point$16[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _max_pos$12[ebp], ecx
	mov	edx, DWORD PTR _max_pos$12[ebp]
	mov	DWORD PTR _min_pos$13[ebp], edx
; Line 1266
	mov	eax, DWORD PTR _segment$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _v$9[ebp], edx
; Line 1267
	mov	eax, DWORD PTR _v$9[ebp]
	cmp	eax, DWORD PTR _min_pos$13[ebp]
	jge	SHORT $LN15@af_latin_h
; Line 1268
	mov	ecx, DWORD PTR _v$9[ebp]
	mov	DWORD PTR _min_pos$13[ebp], ecx
$LN15@af_latin_h:
; Line 1269
	mov	edx, DWORD PTR _v$9[ebp]
	cmp	edx, DWORD PTR _max_pos$12[ebp]
	jle	SHORT $LN14@af_latin_h
; Line 1270
	mov	eax, DWORD PTR _v$9[ebp]
	mov	DWORD PTR _max_pos$12[ebp], eax
$LN14@af_latin_h:
; Line 1272
	mov	ecx, DWORD PTR _segment$[ebp]
	mov	dx, WORD PTR _min_pos$13[ebp]
	mov	WORD PTR [ecx+4], dx
; Line 1273
	mov	eax, DWORD PTR _segment$[ebp]
	mov	cx, WORD PTR _max_pos$12[ebp]
	mov	WORD PTR [eax+6], cx
; Line 1275
	mov	edx, DWORD PTR _segment$[ebp]
	movsx	eax, WORD PTR [edx+6]
	mov	ecx, DWORD PTR _segment$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	sub	eax, edx
	mov	ecx, DWORD PTR _segment$[ebp]
	mov	WORD PTR [ecx+8], ax
; Line 1277
	mov	DWORD PTR _on_edge$14[ebp], 0
; Line 1278
	mov	DWORD PTR _segment$[ebp], 0
$LN21@af_latin_h:
; Line 1284
	mov	edx, DWORD PTR _point$16[ebp]
	cmp	edx, DWORD PTR _last$15[ebp]
	jne	SHORT $LN13@af_latin_h
; Line 1286
	movzx	eax, BYTE PTR _passed$11[ebp]
	test	eax, eax
	je	SHORT $LN12@af_latin_h
; Line 1287
	jmp	$LN22@af_latin_h
$LN12@af_latin_h:
; Line 1288
	mov	BYTE PTR _passed$11[ebp], 1
$LN13@af_latin_h:
; Line 1291
	cmp	DWORD PTR _on_edge$14[ebp], 0
	jne	$LN11@af_latin_h
	mov	ecx, DWORD PTR _point$16[ebp]
	movsx	edx, BYTE PTR [ecx+3]
	test	edx, edx
	jge	SHORT $LN51@af_latin_h
	mov	eax, DWORD PTR _point$16[ebp]
	movsx	ecx, BYTE PTR [eax+3]
	neg	ecx
	mov	DWORD PTR tv230[ebp], ecx
	jmp	SHORT $LN52@af_latin_h
$LN51@af_latin_h:
	mov	edx, DWORD PTR _point$16[ebp]
	movsx	eax, BYTE PTR [edx+3]
	mov	DWORD PTR tv230[ebp], eax
$LN52@af_latin_h:
	mov	ecx, DWORD PTR tv230[ebp]
	cmp	ecx, DWORD PTR _major_dir$[ebp]
	jne	SHORT $LN11@af_latin_h
; Line 1294
	mov	edx, DWORD PTR _point$16[ebp]
	movsx	eax, BYTE PTR [edx+3]
	mov	DWORD PTR _segment_dir$[ebp], eax
; Line 1296
	lea	ecx, DWORD PTR _segment$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	call	_af_axis_hints_new_segment
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1297
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@af_latin_h
; Line 1298
	jmp	$Exit$57
$LN10@af_latin_h:
; Line 1301
	mov	ecx, 48					; 00000030H
	imul	edi, ecx, 0
	add	edi, DWORD PTR _segment$[ebp]
	mov	ecx, 12					; 0000000cH
	lea	esi, DWORD PTR _seg0$[ebp]
	rep movsd
; Line 1303
	mov	edx, DWORD PTR _segment$[ebp]
	mov	al, BYTE PTR _segment_dir$[ebp]
	mov	BYTE PTR [edx+1], al
; Line 1304
	mov	ecx, DWORD PTR _point$16[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _max_pos$12[ebp], edx
	mov	eax, DWORD PTR _max_pos$12[ebp]
	mov	DWORD PTR _min_pos$13[ebp], eax
; Line 1305
	mov	ecx, DWORD PTR _segment$[ebp]
	mov	edx, DWORD PTR _point$16[ebp]
	mov	DWORD PTR [ecx+40], edx
; Line 1306
	mov	eax, DWORD PTR _segment$[ebp]
	mov	ecx, DWORD PTR _point$16[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 1308
	mov	DWORD PTR _on_edge$14[ebp], 1
$LN11@af_latin_h:
; Line 1311
	mov	edx, DWORD PTR _point$16[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _point$16[ebp], eax
; Line 1312
	jmp	$LN23@af_latin_h
$LN22@af_latin_h:
; Line 1314
	jmp	$LN31@af_latin_h
$LN30@af_latin_h:
; Line 1320
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _segments$8[ebp], edx
; Line 1321
	mov	eax, DWORD PTR _axis$[ebp]
	imul	ecx, DWORD PTR [eax], 48
	add	ecx, DWORD PTR _segments$8[ebp]
	mov	DWORD PTR _segments_end$7[ebp], ecx
; Line 1324
	mov	edx, DWORD PTR _segments$8[ebp]
	mov	DWORD PTR _segment$[ebp], edx
	jmp	SHORT $LN9@af_latin_h
$LN8@af_latin_h:
	mov	eax, DWORD PTR _segment$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _segment$[ebp], eax
$LN9@af_latin_h:
	mov	ecx, DWORD PTR _segment$[ebp]
	cmp	ecx, DWORD PTR _segments_end$7[ebp]
	jae	$Exit$57
; Line 1326
	mov	edx, DWORD PTR _segment$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _first$6[ebp], eax
; Line 1327
	mov	ecx, DWORD PTR _segment$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _last$5[ebp], edx
; Line 1328
	mov	eax, DWORD PTR _first$6[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _first_v$4[ebp], ecx
; Line 1329
	mov	edx, DWORD PTR _last$5[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _last_v$3[ebp], eax
; Line 1332
	mov	ecx, DWORD PTR _first_v$4[ebp]
	cmp	ecx, DWORD PTR _last_v$3[ebp]
	jge	$LN6@af_latin_h
; Line 1337
	mov	edx, DWORD PTR _first$6[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _p$2[ebp], eax
; Line 1338
	mov	ecx, DWORD PTR _p$2[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR _first_v$4[ebp]
	jge	SHORT $LN5@af_latin_h
; Line 1340
	mov	eax, DWORD PTR _segment$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _p$2[ebp]
	mov	eax, DWORD PTR _first_v$4[ebp]
	sub	eax, DWORD PTR [edx+28]
	sar	eax, 1
	add	ecx, eax
	mov	edx, DWORD PTR _segment$[ebp]
	mov	WORD PTR [edx+8], cx
$LN5@af_latin_h:
; Line 1342
	mov	eax, DWORD PTR _last$5[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _p$2[ebp], ecx
; Line 1343
	mov	edx, DWORD PTR _p$2[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	eax, DWORD PTR _last_v$3[ebp]
	jle	SHORT $LN4@af_latin_h
; Line 1345
	mov	ecx, DWORD PTR _segment$[ebp]
	movsx	edx, WORD PTR [ecx+8]
	mov	eax, DWORD PTR _p$2[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, DWORD PTR _last_v$3[ebp]
	sar	ecx, 1
	add	edx, ecx
	mov	eax, DWORD PTR _segment$[ebp]
	mov	WORD PTR [eax+8], dx
$LN4@af_latin_h:
; Line 1347
	jmp	$LN3@af_latin_h
$LN6@af_latin_h:
; Line 1352
	mov	ecx, DWORD PTR _first$6[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _p$1[ebp], edx
; Line 1353
	mov	eax, DWORD PTR _p$1[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR _first_v$4[ebp]
	jle	SHORT $LN2@af_latin_h
; Line 1355
	mov	edx, DWORD PTR _segment$[ebp]
	movsx	eax, WORD PTR [edx+8]
	mov	ecx, DWORD PTR _p$1[ebp]
	mov	edx, DWORD PTR [ecx+28]
	sub	edx, DWORD PTR _first_v$4[ebp]
	sar	edx, 1
	add	eax, edx
	mov	ecx, DWORD PTR _segment$[ebp]
	mov	WORD PTR [ecx+8], ax
$LN2@af_latin_h:
; Line 1357
	mov	edx, DWORD PTR _last$5[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _p$1[ebp], eax
; Line 1358
	mov	ecx, DWORD PTR _p$1[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR _last_v$3[ebp]
	jge	SHORT $LN3@af_latin_h
; Line 1360
	mov	eax, DWORD PTR _segment$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _p$1[ebp]
	mov	eax, DWORD PTR _last_v$3[ebp]
	sub	eax, DWORD PTR [edx+28]
	sar	eax, 1
	add	ecx, eax
	mov	edx, DWORD PTR _segment$[ebp]
	mov	WORD PTR [edx+8], cx
$LN3@af_latin_h:
; Line 1362
	jmp	$LN8@af_latin_h
$Exit$57:
; Line 1366
	mov	eax, DWORD PTR _error$[ebp]
; Line 1367
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN56@af_latin_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN56@af_latin_h:
	DD	2
	DD	$LN55@af_latin_h
$LN55@af_latin_h:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN53@af_latin_h
	DD	-76					; ffffffb4H
	DD	48					; 00000030H
	DD	$LN54@af_latin_h
$LN54@af_latin_h:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	48					; 00000030H
	DB	0
$LN53@af_latin_h:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_af_latin_hints_compute_segments ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_y_offset$1 = -44					; size = 4
_glyph_index$2 = -32					; size = 4
_old_advance$ = -24					; size = 4
_advance$ = -16						; size = 4
_same_width$ = -6					; size = 1
_started$ = -5						; size = 1
_i$ = -4						; size = 4
_metrics$ = 8						; size = 4
_face$ = 12						; size = 4
_af_latin_metrics_check_digits PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 817
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 819
	mov	BYTE PTR _started$[ebp], 0
	mov	BYTE PTR _same_width$[ebp], 1
; Line 820
	mov	DWORD PTR _old_advance$[ebp], 0
; Line 824
	mov	DWORD PTR _i$[ebp], 48			; 00000030H
	jmp	SHORT $LN8@af_latin_m
$LN7@af_latin_m:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@af_latin_m:
	cmp	DWORD PTR _i$[ebp], 57			; 00000039H
	ja	SHORT $LN6@af_latin_m
; Line 830
	lea	ecx, DWORD PTR _y_offset$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyph_index$2[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	call	_af_get_char_index
	add	esp, 16					; 00000010H
; Line 831
	cmp	DWORD PTR _glyph_index$2[ebp], 0
	jne	SHORT $LN5@af_latin_m
; Line 832
	jmp	SHORT $LN7@af_latin_m
$LN5@af_latin_m:
; Line 838
	lea	edx, DWORD PTR _advance$[ebp]
	push	edx
	push	2051					; 00000803H
	mov	eax, DWORD PTR _glyph_index$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Get_Advance
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN4@af_latin_m
; Line 839
	jmp	SHORT $LN7@af_latin_m
$LN4@af_latin_m:
; Line 841
	movzx	edx, BYTE PTR _started$[ebp]
	test	edx, edx
	je	SHORT $LN3@af_latin_m
; Line 843
	mov	eax, DWORD PTR _advance$[ebp]
	cmp	eax, DWORD PTR _old_advance$[ebp]
	je	SHORT $LN2@af_latin_m
; Line 845
	mov	BYTE PTR _same_width$[ebp], 0
; Line 846
	jmp	SHORT $LN6@af_latin_m
$LN2@af_latin_m:
; Line 849
	jmp	SHORT $LN1@af_latin_m
$LN3@af_latin_m:
; Line 851
	mov	ecx, DWORD PTR _advance$[ebp]
	mov	DWORD PTR _old_advance$[ebp], ecx
; Line 852
	mov	BYTE PTR _started$[ebp], 1
$LN1@af_latin_m:
; Line 854
	jmp	SHORT $LN7@af_latin_m
$LN6@af_latin_m:
; Line 856
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	al, BYTE PTR _same_width$[ebp]
	mov	BYTE PTR [edx+32], al
; Line 857
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@af_latin_m
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@af_latin_m:
	DD	3
	DD	$LN14@af_latin_m
$LN14@af_latin_m:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN11@af_latin_m
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN12@af_latin_m
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN13@af_latin_m
$LN13@af_latin_m:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN12@af_latin_m:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN11@af_latin_m:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
_af_latin_metrics_check_digits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv249 = -2816						; size = 4
tv240 = -2812						; size = 4
_i$1 = -2808						; size = 4
_stdw$2 = -2804						; size = 4
_axis$3 = -2800						; size = 4
_dist$4 = -2796						; size = 4
_num_widths$5 = -2788					; size = 4
_link$6 = -2780						; size = 4
_limit$7 = -2776					; size = 4
_seg$8 = -2772						; size = 4
_axhints$9 = -2768					; size = 4
_axis$10 = -2764					; size = 4
_standard_char$11 = -2760				; size = 4
_script_class$12 = -2756				; size = 4
_style_class$13 = -2752					; size = 4
_scaler$14 = -2748					; size = 4
_dummy$15 = -2740					; size = 2572
_dim$16 = -164						; size = 4
_y_offset$17 = -156					; size = 4
_glyph_index$18 = -144					; size = 4
_error$19 = -136					; size = 4
_hints$ = -128						; size = 120
__$ArrayPad$ = -4					; size = 4
_metrics$ = 8						; size = 4
_face$ = 12						; size = 4
_af_latin_metrics_init_widths PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 59
	push	ebp
	mov	ebp, esp
	sub	esp, 2816				; 00000b00H
	push	edi
	lea	edi, DWORD PTR [ebp-2816]
	mov	ecx, 704				; 000002c0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
$LN54@af_latin_m:
; Line 68
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN53@af_latin_m
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _af_style_names[ecx*4]
	push	edx
	push	OFFSET $SG9006
	call	_FT_Message
	add	esp, 8
$LN53@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN54@af_latin_m
; Line 70
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	lea	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_init
	add	esp, 8
; Line 72
	mov	ecx, 1264				; 000004f0H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [eax+edx+52], 0
; Line 73
	mov	ecx, 1264				; 000004f0H
	shl	ecx, 0
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+ecx+52], 0
; Line 81
	lea	eax, DWORD PTR _dummy$15[ebp+4]
	mov	DWORD PTR _scaler$14[ebp], eax
; Line 87
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _style_class$13[ebp], edx
; Line 89
	mov	eax, DWORD PTR _style_class$13[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _af_script_classes[ecx*4]
	mov	DWORD PTR _script_class$12[ebp], edx
; Line 101
	mov	eax, DWORD PTR _script_class$12[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _standard_char$11[ebp], ecx
; Line 105
	lea	edx, DWORD PTR _y_offset$17[ebp]
	push	edx
	lea	eax, DWORD PTR _glyph_index$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _standard_char$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	call	_af_get_char_index
	add	esp, 16					; 00000010H
; Line 106
	cmp	DWORD PTR _glyph_index$18[ebp], 0
	jne	$LN43@af_latin_m
; Line 108
	mov	eax, DWORD PTR _script_class$12[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN49@af_latin_m
; Line 110
	mov	ecx, DWORD PTR _script_class$12[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _standard_char$11[ebp], edx
; Line 114
	lea	eax, DWORD PTR _y_offset$17[ebp]
	push	eax
	lea	ecx, DWORD PTR _glyph_index$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _standard_char$11[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	call	_af_get_char_index
	add	esp, 16					; 00000010H
; Line 115
	cmp	DWORD PTR _glyph_index$18[ebp], 0
	jne	SHORT $LN48@af_latin_m
; Line 117
	mov	ecx, DWORD PTR _script_class$12[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN47@af_latin_m
; Line 119
	mov	edx, DWORD PTR _script_class$12[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _standard_char$11[ebp], eax
; Line 123
	lea	ecx, DWORD PTR _y_offset$17[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyph_index$18[ebp]
	push	edx
	mov	eax, DWORD PTR _standard_char$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	call	_af_get_char_index
	add	esp, 16					; 00000010H
; Line 124
	cmp	DWORD PTR _glyph_index$18[ebp], 0
	jne	SHORT $LN46@af_latin_m
; Line 125
	jmp	$Exit$68
$LN46@af_latin_m:
; Line 127
	jmp	SHORT $LN48@af_latin_m
$LN47@af_latin_m:
; Line 128
	jmp	$Exit$68
$LN48@af_latin_m:
; Line 131
	jmp	SHORT $LN43@af_latin_m
$LN49@af_latin_m:
; Line 132
	jmp	$Exit$68
$LN43@af_latin_m:
; Line 136
	mov	edx, 4
	imul	eax, edx, 90
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN42@af_latin_m
	mov	ecx, DWORD PTR _glyph_index$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _standard_char$11[ebp]
	push	edx
	push	OFFSET $SG9028
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN42@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN43@af_latin_m
; Line 138
	push	1
	mov	ecx, DWORD PTR _glyph_index$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Load_Glyph
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$19[ebp], eax
; Line 139
	cmp	DWORD PTR _error$19[ebp], 0
	jne	SHORT $LN38@af_latin_m
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	movsx	edx, WORD PTR [ecx+110]
	test	edx, edx
	jg	SHORT $LN39@af_latin_m
$LN38@af_latin_m:
; Line 140
	jmp	$Exit$68
$LN39@af_latin_m:
; Line 142
	push	2572					; 00000a0cH
	push	0
	lea	eax, DWORD PTR _dummy$15[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 144
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _dummy$15[ebp+40], edx
; Line 146
	mov	eax, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [eax+4], 65536		; 00010000H
; Line 147
	mov	ecx, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [ecx+8], 65536		; 00010000H
; Line 148
	mov	edx, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 149
	mov	eax, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 151
	mov	ecx, DWORD PTR _scaler$14[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 152
	mov	eax, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 153
	mov	ecx, DWORD PTR _scaler$14[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 155
	lea	edx, DWORD PTR _dummy$15[ebp]
	push	edx
	lea	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_rescale
	add	esp, 8
; Line 157
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	add	edx, 108				; 0000006cH
	push	edx
	lea	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_reload
	add	esp, 8
	mov	DWORD PTR _error$19[ebp], eax
; Line 158
	cmp	DWORD PTR _error$19[ebp], 0
	je	SHORT $LN37@af_latin_m
; Line 159
	jmp	$Exit$68
$LN37@af_latin_m:
; Line 161
	mov	DWORD PTR _dim$16[ebp], 0
	jmp	SHORT $LN36@af_latin_m
$LN35@af_latin_m:
	mov	ecx, DWORD PTR _dim$16[ebp]
	add	ecx, 1
	mov	DWORD PTR _dim$16[ebp], ecx
$LN36@af_latin_m:
	cmp	DWORD PTR _dim$16[ebp], 2
	jge	$Exit$68
; Line 163
	imul	edx, DWORD PTR _dim$16[ebp], 1264
	mov	eax, DWORD PTR _metrics$[ebp]
	lea	ecx, DWORD PTR [eax+edx+44]
	mov	DWORD PTR _axis$10[ebp], ecx
; Line 164
	imul	edx, DWORD PTR _dim$16[ebp], 28
	lea	eax, DWORD PTR _hints$[ebp+edx+44]
	mov	DWORD PTR _axhints$9[ebp], eax
; Line 166
	mov	DWORD PTR _num_widths$5[ebp], 0
; Line 170
	mov	ecx, DWORD PTR _dim$16[ebp]
	push	ecx
	lea	edx, DWORD PTR _hints$[ebp]
	push	edx
	call	_af_latin_hints_compute_segments
	add	esp, 8
	mov	DWORD PTR _error$19[ebp], eax
; Line 171
	cmp	DWORD PTR _error$19[ebp], 0
	je	SHORT $LN33@af_latin_m
; Line 172
	jmp	$Exit$68
$LN33@af_latin_m:
; Line 183
	mov	eax, DWORD PTR _dim$16[ebp]
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _hints$[ebp]
	push	ecx
	call	_af_latin_hints_link_segments
	add	esp, 16					; 00000010H
; Line 185
	mov	edx, DWORD PTR _axhints$9[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _seg$8[ebp], eax
; Line 186
	mov	ecx, DWORD PTR _axhints$9[ebp]
	imul	edx, DWORD PTR [ecx], 48
	add	edx, DWORD PTR _seg$8[ebp]
	mov	DWORD PTR _limit$7[ebp], edx
; Line 188
	jmp	SHORT $LN32@af_latin_m
$LN31@af_latin_m:
	mov	eax, DWORD PTR _seg$8[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _seg$8[ebp], eax
$LN32@af_latin_m:
	mov	ecx, DWORD PTR _seg$8[ebp]
	cmp	ecx, DWORD PTR _limit$7[ebp]
	jae	$LN30@af_latin_m
; Line 190
	mov	edx, DWORD PTR _seg$8[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _link$6[ebp], eax
; Line 193
	cmp	DWORD PTR _link$6[ebp], 0
	je	SHORT $LN29@af_latin_m
	mov	ecx, DWORD PTR _link$6[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _seg$8[ebp]
	jne	SHORT $LN29@af_latin_m
	mov	eax, DWORD PTR _link$6[ebp]
	cmp	eax, DWORD PTR _seg$8[ebp]
	jbe	SHORT $LN29@af_latin_m
; Line 198
	mov	ecx, DWORD PTR _seg$8[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _link$6[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	edx, ecx
	mov	DWORD PTR _dist$4[ebp], edx
; Line 199
	jns	SHORT $LN28@af_latin_m
; Line 200
	mov	edx, DWORD PTR _dist$4[ebp]
	neg	edx
	mov	DWORD PTR _dist$4[ebp], edx
$LN28@af_latin_m:
; Line 202
	cmp	DWORD PTR _num_widths$5[ebp], 16	; 00000010H
	jae	SHORT $LN29@af_latin_m
; Line 203
	imul	eax, DWORD PTR _num_widths$5[ebp], 12
	mov	ecx, DWORD PTR _axis$10[ebp]
	mov	edx, DWORD PTR _dist$4[ebp]
	mov	DWORD PTR [ecx+eax+12], edx
	mov	eax, DWORD PTR _num_widths$5[ebp]
	add	eax, 1
	mov	DWORD PTR _num_widths$5[ebp], eax
$LN29@af_latin_m:
; Line 205
	jmp	$LN31@af_latin_m
$LN30@af_latin_m:
; Line 210
	mov	eax, DWORD PTR _dummy$15[ebp+40]
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	push	eax
	mov	edx, DWORD PTR _axis$10[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	eax, DWORD PTR _num_widths$5[ebp]
	push	eax
	call	_af_sort_and_quantize_widths
	add	esp, 12					; 0000000cH
; Line 211
	mov	ecx, DWORD PTR _axis$10[ebp]
	mov	edx, DWORD PTR _num_widths$5[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 212
	jmp	$LN35@af_latin_m
$Exit$68:
; Line 215
	mov	DWORD PTR _dim$16[ebp], 0
	jmp	SHORT $LN26@af_latin_m
$LN25@af_latin_m:
	mov	eax, DWORD PTR _dim$16[ebp]
	add	eax, 1
	mov	DWORD PTR _dim$16[ebp], eax
$LN26@af_latin_m:
	cmp	DWORD PTR _dim$16[ebp], 2
	jge	$LN4@af_latin_m
; Line 217
	imul	ecx, DWORD PTR _dim$16[ebp], 1264
	mov	edx, DWORD PTR _metrics$[ebp]
	lea	eax, DWORD PTR [edx+ecx+44]
	mov	DWORD PTR _axis$3[ebp], eax
; Line 222
	mov	ecx, DWORD PTR _axis$3[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jbe	SHORT $LN57@af_latin_m
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _axis$3[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	mov	DWORD PTR tv240[ebp], edx
	jmp	SHORT $LN58@af_latin_m
$LN57@af_latin_m:
	mov	eax, DWORD PTR _metrics$[ebp]
	imul	eax, DWORD PTR [eax+40], 50
	cdq
	and	edx, 2047				; 000007ffH
	add	eax, edx
	sar	eax, 11					; 0000000bH
	mov	DWORD PTR tv240[ebp], eax
$LN58@af_latin_m:
	mov	ecx, DWORD PTR tv240[ebp]
	mov	DWORD PTR _stdw$2[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _stdw$2[ebp]
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	edx, DWORD PTR _axis$3[ebp]
	mov	DWORD PTR [edx+204], eax
; Line 226
	mov	eax, DWORD PTR _axis$3[ebp]
	mov	ecx, DWORD PTR _stdw$2[ebp]
	mov	DWORD PTR [eax+208], ecx
; Line 227
	mov	edx, DWORD PTR _axis$3[ebp]
	mov	BYTE PTR [edx+212], 0
$LN23@af_latin_m:
; Line 236
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN22@af_latin_m
	cmp	DWORD PTR _dim$16[ebp], 1
	jne	SHORT $LN59@af_latin_m
	mov	DWORD PTR tv249[ebp], OFFSET $SG9065
	jmp	SHORT $LN60@af_latin_m
$LN59@af_latin_m:
	mov	DWORD PTR tv249[ebp], OFFSET $SG9066
$LN60@af_latin_m:
	mov	edx, DWORD PTR tv249[ebp]
	push	edx
	push	OFFSET $SG9067
	call	_FT_Message
	add	esp, 8
$LN22@af_latin_m:
	xor	eax, eax
	jne	SHORT $LN23@af_latin_m
$LN19@af_latin_m:
; Line 238
	mov	ecx, 4
	imul	edx, ecx, 90
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN18@af_latin_m
	mov	eax, DWORD PTR _axis$3[ebp]
	mov	ecx, DWORD PTR [eax+208]
	push	ecx
	push	OFFSET $SG9072
	call	_FT_Message
	add	esp, 8
$LN18@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN19@af_latin_m
; Line 239
	mov	DWORD PTR _i$1[ebp], 1
	jmp	SHORT $LN15@af_latin_m
$LN14@af_latin_m:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN15@af_latin_m:
	mov	ecx, DWORD PTR _axis$3[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN8@af_latin_m
$LN12@af_latin_m:
; Line 240
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN11@af_latin_m
	imul	edx, DWORD PTR _i$1[ebp], 12
	mov	eax, DWORD PTR _axis$3[ebp]
	mov	ecx, DWORD PTR [eax+edx+12]
	push	ecx
	push	OFFSET $SG9080
	call	_FT_Message
	add	esp, 8
$LN11@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN12@af_latin_m
	jmp	SHORT $LN14@af_latin_m
$LN8@af_latin_m:
; Line 242
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN7@af_latin_m
	push	OFFSET $SG9085
	call	_FT_Message
	add	esp, 4
$LN7@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN8@af_latin_m
; Line 245
	jmp	$LN25@af_latin_m
$LN4@af_latin_m:
; Line 248
	mov	eax, 4
	imul	ecx, eax, 90
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN3@af_latin_m
	push	OFFSET $SG9090
	call	_FT_Message
	add	esp, 4
$LN3@af_latin_m:
	xor	edx, edx
	jne	SHORT $LN4@af_latin_m
; Line 250
	lea	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_af_glyph_hints_done
	add	esp, 4
; Line 251
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN67@af_latin_m
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2816				; 00000b00H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN67@af_latin_m:
	DD	5
	DD	$LN66@af_latin_m
$LN66@af_latin_m:
	DD	-128					; ffffff80H
	DD	120					; 00000078H
	DD	$LN61@af_latin_m
	DD	-144					; ffffff70H
	DD	4
	DD	$LN62@af_latin_m
	DD	-156					; ffffff64H
	DD	4
	DD	$LN63@af_latin_m
	DD	-2740					; fffff54cH
	DD	2572					; 00000a0cH
	DD	$LN64@af_latin_m
	DD	-2788					; fffff51cH
	DD	4
	DD	$LN65@af_latin_m
$LN65@af_latin_m:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN64@af_latin_m:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN63@af_latin_m:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN62@af_latin_m:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN61@af_latin_m:
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_af_latin_metrics_init_widths ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_metrics$ = 8						; size = 4
_scaler$ = 12						; size = 4
_af_latin_metrics_scale PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 1132
	push	ebp
	mov	ebp, esp
; Line 1133
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+24], edx
; Line 1134
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
; Line 1135
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+28], edx
; Line 1137
	push	0
	mov	eax, DWORD PTR _scaler$[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	call	_af_latin_metrics_scale_dim
	add	esp, 12					; 0000000cH
; Line 1138
	push	1
	mov	edx, DWORD PTR _scaler$[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	call	_af_latin_metrics_scale_dim
	add	esp, 12					; 0000000cH
; Line 1139
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_af_latin_metrics_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_oldmap$ = -4						; size = 4
_metrics$ = 8						; size = 4
_face$ = 12						; size = 4
_af_latin_metrics_init PROC
; File d:\mozilla\modules\freetype2\src\autofit\aflatin.c
; Line 865
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 866
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _oldmap$[ebp], ecx
; Line 869
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+68]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 871
	push	1970170211				; 756e6963H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Select_Charmap
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@af_latin_m
; Line 873
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	call	_af_latin_metrics_init_widths
	add	esp, 8
; Line 874
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	call	_af_latin_metrics_init_blues
	add	esp, 8
; Line 875
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	call	_af_latin_metrics_check_digits
	add	esp, 8
$LN1@af_latin_m:
; Line 878
	mov	eax, DWORD PTR _oldmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Set_Charmap
	add	esp, 8
; Line 879
	xor	eax, eax
; Line 880
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_latin_metrics_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_globals$ = 8						; size = 4
_gindex$ = 12						; size = 4
_af_face_globals_is_digit PROC
; File d:\mozilla\modules\freetype2\src\autofit\afglobal.c
; Line 456
	push	ebp
	mov	ebp, esp
; Line 457
	mov	eax, DWORD PTR _globals$[ebp]
	mov	ecx, DWORD PTR _gindex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN1@af_face_gl
; Line 458
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _gindex$[ebp]
	movzx	eax, BYTE PTR [eax+ecx]
	and	eax, 128				; 00000080H
	jmp	SHORT $LN2@af_face_gl
$LN1@af_face_gl:
; Line 460
	xor	al, al
$LN2@af_face_gl:
; Line 461
	pop	ebp
	ret	0
_af_face_globals_is_digit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_writing_system_class$1 = -16				; size = 4
_style_class$2 = -12					; size = 4
_nn$3 = -8						; size = 4
_memory$4 = -4						; size = 4
_globals$ = 8						; size = 4
_af_face_globals_free PROC
; File d:\mozilla\modules\freetype2\src\autofit\afglobal.c
; Line 347
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 348
	cmp	DWORD PTR _globals$[ebp], 0
	je	$LN13@af_face_gl
; Line 350
	mov	eax, DWORD PTR _globals$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$4[ebp], edx
; Line 354
	mov	DWORD PTR _nn$3[ebp], 0
	jmp	SHORT $LN11@af_face_gl
$LN10@af_face_gl:
	mov	eax, DWORD PTR _nn$3[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$3[ebp], eax
$LN11@af_face_gl:
	cmp	DWORD PTR _nn$3[ebp], 47		; 0000002fH
	jae	$LN9@af_face_gl
; Line 356
	mov	ecx, DWORD PTR _nn$3[ebp]
	mov	edx, DWORD PTR _globals$[ebp]
	cmp	DWORD PTR [edx+ecx*4+16], 0
	je	SHORT $LN8@af_face_gl
; Line 359
	mov	eax, DWORD PTR _nn$3[ebp]
	mov	ecx, DWORD PTR _af_style_classes[eax*4]
	mov	DWORD PTR _style_class$2[ebp], ecx
; Line 361
	mov	edx, DWORD PTR _style_class$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _af_writing_system_classes[eax*4]
	mov	DWORD PTR _writing_system_class$1[ebp], ecx
; Line 364
	mov	edx, DWORD PTR _writing_system_class$1[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN6@af_face_gl
; Line 365
	mov	esi, esp
	mov	eax, DWORD PTR _nn$3[ebp]
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+16]
	push	edx
	mov	eax, DWORD PTR _writing_system_class$1[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@af_face_gl:
; Line 367
	mov	edx, DWORD PTR _nn$3[ebp]
	mov	eax, DWORD PTR _globals$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+16]
	push	ecx
	mov	edx, DWORD PTR _memory$4[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _nn$3[ebp]
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [ecx+eax*4+16], 0
	xor	edx, edx
	jne	SHORT $LN6@af_face_gl
$LN8@af_face_gl:
; Line 369
	jmp	$LN10@af_face_gl
$LN9@af_face_gl:
; Line 376
	mov	eax, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 377
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 378
	mov	edx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [edx], 0
$LN3@af_face_gl:
; Line 380
	mov	eax, DWORD PTR _globals$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$4[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _globals$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@af_face_gl
$LN13@af_face_gl:
; Line 382
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_face_globals_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -32						; size = 4
_error$ = -24						; size = 4
_style_class$ = -16					; size = 4
_writing_system_class$ = -12				; size = 4
_style$ = -8						; size = 4
_metrics$ = -4						; size = 4
_globals$ = 8						; size = 4
_gindex$ = 12						; size = 4
_options$ = 16						; size = 4
_ametrics$ = 20						; size = 4
_af_face_globals_get_metrics PROC
; File d:\mozilla\modules\freetype2\src\autofit\afglobal.c
; Line 390
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 391
	mov	DWORD PTR _metrics$[ebp], 0
; Line 393
	mov	eax, DWORD PTR _options$[ebp]
	mov	DWORD PTR _style$[ebp], eax
; Line 397
	mov	DWORD PTR _error$[ebp], 0
; Line 400
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	edx, DWORD PTR _gindex$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN11@af_face_gl
; Line 402
	push	OFFSET $SG8203
	push	402					; 00000192H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 403
	jmp	$Exit$17
$LN11@af_face_gl:
; Line 408
	cmp	DWORD PTR _style$[ebp], 32		; 00000020H
	je	SHORT $LN9@af_face_gl
	mov	eax, DWORD PTR _style$[ebp]
	add	eax, 1
	cmp	eax, 47					; 0000002fH
	jl	SHORT $LN10@af_face_gl
$LN9@af_face_gl:
; Line 410
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _gindex$[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	and	ecx, 127				; 0000007fH
	mov	DWORD PTR _style$[ebp], ecx
$LN10@af_face_gl:
; Line 412
	mov	edx, DWORD PTR _style$[ebp]
	mov	eax, DWORD PTR _af_style_classes[edx*4]
	mov	DWORD PTR _style_class$[ebp], eax
; Line 414
	mov	ecx, DWORD PTR _style_class$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _af_writing_system_classes[edx*4]
	mov	DWORD PTR _writing_system_class$[ebp], eax
; Line 416
	mov	ecx, DWORD PTR _style$[ebp]
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+16]
	mov	DWORD PTR _metrics$[ebp], eax
; Line 417
	cmp	DWORD PTR _metrics$[ebp], 0
	jne	$Exit$17
; Line 420
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$1[ebp], eax
; Line 423
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _writing_system_class$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _memory$1[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _metrics$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@af_face_gl
; Line 424
	jmp	$Exit$17
$LN7@af_face_gl:
; Line 426
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR _style_class$[ebp]
	mov	DWORD PTR [edx], eax
; Line 427
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 429
	mov	eax, DWORD PTR _writing_system_class$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN6@af_face_gl
; Line 432
	mov	esi, esp
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writing_system_class$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 433
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@af_face_gl
; Line 435
	mov	eax, DWORD PTR _writing_system_class$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@af_face_gl
; Line 436
	mov	esi, esp
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	mov	edx, DWORD PTR _writing_system_class$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@af_face_gl:
; Line 438
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$1[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _metrics$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@af_face_gl
; Line 439
	jmp	SHORT $Exit$17
$LN6@af_face_gl:
; Line 443
	mov	ecx, DWORD PTR _style$[ebp]
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+ecx*4+16], eax
$Exit$17:
; Line 447
	mov	ecx, DWORD PTR _ametrics$[ebp]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 449
	mov	eax, DWORD PTR _error$[ebp]
; Line 450
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@af_face_gl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@af_face_gl:
	DD	1
	DD	$LN15@af_face_gl
$LN15@af_face_gl:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@af_face_gl
$LN14@af_face_gl:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_af_face_globals_get_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_globals$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_aglobals$ = 12						; size = 4
_module$ = 16						; size = 4
_af_face_globals_new PROC
; File d:\mozilla\modules\freetype2\src\autofit\afglobal.c
; Line 309
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 312
	mov	DWORD PTR _globals$[ebp], 0
; Line 315
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 318
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 208				; 000000d0H
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _globals$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@af_face_gl
; Line 319
	jmp	SHORT $Exit$9
$LN3@af_face_gl:
; Line 321
	mov	eax, DWORD PTR _globals$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 322
	mov	edx, DWORD PTR _globals$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+4], ecx
; Line 323
	mov	edx, DWORD PTR _globals$[ebp]
	add	edx, 208				; 000000d0H
	mov	eax, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 324
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	edx, DWORD PTR _module$[ebp]
	mov	DWORD PTR [ecx+204], edx
; Line 330
	mov	eax, DWORD PTR _globals$[ebp]
	push	eax
	call	_af_face_globals_compute_style_coverage
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 331
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@af_face_gl
; Line 333
	mov	ecx, DWORD PTR _globals$[ebp]
	push	ecx
	call	_af_face_globals_free
	add	esp, 4
; Line 334
	mov	DWORD PTR _globals$[ebp], 0
; Line 336
	jmp	SHORT $Exit$9
$LN2@af_face_gl:
; Line 337
	mov	edx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [edx+12], 0
$Exit$9:
; Line 340
	mov	eax, DWORD PTR _aglobals$[ebp]
	mov	ecx, DWORD PTR _globals$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 341
	mov	eax, DWORD PTR _error$[ebp]
; Line 342
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@af_face_gl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@af_face_gl:
	DD	1
	DD	$LN7@af_face_gl
$LN7@af_face_gl:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@af_face_gl
$LN6@af_face_gl:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_af_face_globals_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = -4						; size = 4
_metrics$ = 8						; size = 4
_charcode$ = 12						; size = 4
_codepoint$ = 16					; size = 4
_y_offset$ = 20						; size = 4
_af_get_char_index PROC
; File d:\mozilla\modules\freetype2\src\autofit\hbshim.c
; Line 526
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 530
	cmp	DWORD PTR _metrics$[ebp], 0
	jne	SHORT $LN1@af_get_cha
; Line 531
	push	OFFSET $SG11207
	push	531					; 00000213H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN2@af_get_cha
$LN1@af_get_cha:
; Line 533
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 535
	mov	eax, DWORD PTR _charcode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Get_Char_Index
	add	esp, 8
	mov	edx, DWORD PTR _codepoint$[ebp]
	mov	DWORD PTR [edx], eax
; Line 536
	mov	eax, DWORD PTR _y_offset$[ebp]
	mov	DWORD PTR [eax], 0
; Line 538
	xor	eax, eax
$LN2@af_get_cha:
; Line 539
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_get_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_globals$ = 8						; size = 4
_style_class$ = 12					; size = 4
_gstyles$ = 16						; size = 4
_af_get_coverage PROC
; File d:\mozilla\modules\freetype2\src\autofit\hbshim.c
; Line 512
	push	ebp
	mov	ebp, esp
; Line 513
	mov	eax, DWORD PTR _globals$[ebp]
	mov	DWORD PTR _globals$[ebp], eax
; Line 514
	mov	ecx, DWORD PTR _style_class$[ebp]
	mov	DWORD PTR _style_class$[ebp], ecx
; Line 515
	mov	edx, DWORD PTR _gstyles$[ebp]
	mov	DWORD PTR _gstyles$[ebp], edx
; Line 517
	xor	eax, eax
; Line 518
	pop	ebp
	ret	0
_af_get_coverage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_writing_system_class$1 = -72				; size = 4
_style_class$2 = -68					; size = 4
_options$3 = -64					; size = 4
_metrics$4 = -56					; size = 4
_scaler$ = -44						; size = 28
_loader$ = -12						; size = 4
_size$ = -8						; size = 4
_error$ = -4						; size = 4
_module$ = 8						; size = 4
_face$ = 12						; size = 4
_gindex$ = 16						; size = 4
_load_flags$ = 20					; size = 4
_af_loader_load_glyph PROC
; File d:\mozilla\modules\freetype2\src\autofit\afloader.c
; Line 503
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 505
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _size$[ebp], ecx
; Line 506
	mov	edx, DWORD PTR _module$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _loader$[ebp], edx
; Line 510
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN7@af_loader_
; Line 511
	push	OFFSET $SG11370
	push	511					; 000001ffH
	push	36					; 00000024H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 36					; 00000024H
	jmp	$LN8@af_loader_
$LN7@af_loader_:
; Line 513
	push	28					; 0000001cH
	push	0
	lea	eax, DWORD PTR _scaler$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 515
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR _scaler$[ebp], ecx
; Line 516
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _scaler$[ebp+4], eax
; Line 517
	mov	DWORD PTR _scaler$[ebp+12], 0
; Line 518
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _scaler$[ebp+8], edx
; Line 519
	mov	DWORD PTR _scaler$[ebp+16], 0
; Line 521
	mov	eax, DWORD PTR _load_flags$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _scaler$[ebp+20], eax
; Line 522
	mov	DWORD PTR _scaler$[ebp+24], 0
; Line 524
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _module$[ebp]
	push	edx
	call	_af_loader_reset
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 525
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$14
; Line 528
	mov	DWORD PTR _options$3[ebp], 32		; 00000020H
; Line 538
	lea	eax, DWORD PTR _metrics$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _gindex$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_af_face_globals_get_metrics
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 539
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$14
; Line 544
	mov	edx, DWORD PTR _metrics$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _style_class$2[ebp], eax
; Line 546
	mov	ecx, DWORD PTR _style_class$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _af_writing_system_classes[edx*4]
	mov	DWORD PTR _writing_system_class$1[ebp], eax
; Line 549
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _metrics$4[ebp]
	mov	DWORD PTR [ecx+132], edx
; Line 551
	mov	eax, DWORD PTR _writing_system_class$1[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN4@af_loader_
; Line 552
	mov	esi, esp
	lea	ecx, DWORD PTR _scaler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _metrics$4[ebp]
	push	edx
	mov	eax, DWORD PTR _writing_system_class$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 553
	jmp	SHORT $LN3@af_loader_
$LN4@af_loader_:
; Line 554
	mov	edi, DWORD PTR _metrics$4[ebp]
	add	edi, 4
	mov	ecx, 7
	lea	esi, DWORD PTR _scaler$[ebp]
	rep movsd
$LN3@af_loader_:
; Line 556
	mov	edx, DWORD PTR _load_flags$[ebp]
	or	edx, 2049				; 00000801H
	mov	DWORD PTR _load_flags$[ebp], edx
; Line 557
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, -5					; fffffffbH
	mov	DWORD PTR _load_flags$[ebp], eax
; Line 559
	mov	ecx, DWORD PTR _writing_system_class$1[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN2@af_loader_
; Line 562
	mov	esi, esp
	mov	edx, DWORD PTR _metrics$4[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _writing_system_class$1[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 563
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@af_loader_
; Line 564
	jmp	SHORT $Exit$14
$LN2@af_loader_:
; Line 567
	push	0
	mov	eax, DWORD PTR _load_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _gindex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _scaler$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_af_loader_load_g
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
$Exit$14:
; Line 571
	mov	eax, DWORD PTR _error$[ebp]
$LN8@af_loader_:
; Line 572
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@af_loader_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@af_loader_:
	DD	2
	DD	$LN12@af_loader_
$LN12@af_loader_:
	DD	-44					; ffffffd4H
	DD	28					; 0000001cH
	DD	$LN10@af_loader_
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN11@af_loader_
$LN11@af_loader_:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
$LN10@af_loader_:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_af_loader_load_glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_loader$ = -4						; size = 4
_module$ = 8						; size = 4
_af_loader_done PROC
; File d:\mozilla\modules\freetype2\src\autofit\afloader.c
; Line 81
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 82
	mov	eax, DWORD PTR _module$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _loader$[ebp], eax
; Line 85
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_af_glyph_hints_done
	add	esp, 4
; Line 87
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx], 0
; Line 88
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 93
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_GlyphLoader_Done
	add	esp, 4
; Line 94
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 95
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_loader_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_loader$ = -8						; size = 4
_error$ = -4						; size = 4
_module$ = 8						; size = 4
_face$ = 12						; size = 4
_af_loader_reset PROC
; File d:\mozilla\modules\freetype2\src\autofit\afloader.c
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 52
	mov	DWORD PTR _error$[ebp], 0
; Line 53
	mov	eax, DWORD PTR _module$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _loader$[ebp], eax
; Line 56
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 57
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR [eax+4], edx
; Line 59
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_FT_GlyphLoader_Rewind
	add	esp, 4
; Line 61
	mov	edx, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN2@af_loader_
; Line 63
	mov	eax, DWORD PTR _module$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_af_face_globals_new
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 64
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@af_loader_
; Line 67
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+116], edx
; Line 69
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+120], OFFSET _af_face_globals_free
$LN2@af_loader_:
; Line 73
	mov	eax, DWORD PTR _error$[ebp]
; Line 74
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_loader_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_loader$ = -4						; size = 4
_module$ = 8						; size = 4
_af_loader_init PROC
; File d:\mozilla\modules\freetype2\src\autofit\afloader.c
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 32
	mov	eax, DWORD PTR _module$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _loader$[ebp], eax
; Line 33
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$[ebp], eax
; Line 36
	push	180					; 000000b4H
	push	0
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 38
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_af_glyph_hints_init
	add	esp, 8
; Line 42
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_FT_GlyphLoader_New
	add	esp, 8
; Line 43
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_loader_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_axis$1 = -12						; size = 4
_dim$ = -8						; size = 4
_memory$ = -4						; size = 4
_hints$ = 8						; size = 4
_af_glyph_hints_done PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 498
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 499
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 503
	cmp	DWORD PTR _hints$[ebp], 0
	je	SHORT $LN16@af_glyph_h
	mov	edx, DWORD PTR _hints$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN17@af_glyph_h
$LN16@af_glyph_h:
; Line 504
	jmp	$LN18@af_glyph_h
$LN17@af_glyph_h:
; Line 510
	mov	DWORD PTR _dim$[ebp], 0
	jmp	SHORT $LN15@af_glyph_h
$LN14@af_glyph_h:
	mov	eax, DWORD PTR _dim$[ebp]
	add	eax, 1
	mov	DWORD PTR _dim$[ebp], eax
$LN15@af_glyph_h:
	cmp	DWORD PTR _dim$[ebp], 2
	jge	SHORT $LN6@af_glyph_h
; Line 512
	imul	ecx, DWORD PTR _dim$[ebp], 28
	mov	edx, DWORD PTR _hints$[ebp]
	lea	eax, DWORD PTR [edx+ecx+44]
	mov	DWORD PTR _axis$1[ebp], eax
; Line 515
	mov	ecx, DWORD PTR _axis$1[ebp]
	mov	DWORD PTR [ecx], 0
; Line 516
	mov	edx, DWORD PTR _axis$1[ebp]
	mov	DWORD PTR [edx+4], 0
$LN12@af_glyph_h:
; Line 517
	mov	eax, DWORD PTR _axis$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _axis$1[ebp]
	mov	DWORD PTR [eax+8], 0
	xor	ecx, ecx
	jne	SHORT $LN12@af_glyph_h
; Line 519
	mov	edx, DWORD PTR _axis$1[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 520
	mov	eax, DWORD PTR _axis$1[ebp]
	mov	DWORD PTR [eax+16], 0
$LN9@af_glyph_h:
; Line 521
	mov	ecx, DWORD PTR _axis$1[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _axis$1[ebp]
	mov	DWORD PTR [ecx+20], 0
	xor	edx, edx
	jne	SHORT $LN9@af_glyph_h
; Line 522
	jmp	$LN14@af_glyph_h
$LN6@af_glyph_h:
; Line 524
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [eax+40], 0
	xor	ecx, ecx
	jne	SHORT $LN6@af_glyph_h
; Line 525
	mov	edx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 526
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN3@af_glyph_h:
; Line 528
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [ecx+28], 0
	xor	edx, edx
	jne	SHORT $LN3@af_glyph_h
; Line 529
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 530
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 532
	mov	edx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [edx], 0
$LN18@af_glyph_h:
; Line 533
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_glyph_hints_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_last_touched$1 = -40					; size = 4
_first_touched$2 = -36					; size = 4
_first_point$ = -32					; size = 4
_end_point$ = -28					; size = 4
_point$ = -24						; size = 4
_touch_flag$ = -20					; size = 4
_contour_limit$ = -16					; size = 4
_contour$ = -12						; size = 4
_point_limit$ = -8					; size = 4
_points$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_glyph_hints_align_weak_points PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 1296
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1297
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _points$[ebp], ecx
; Line 1298
	mov	edx, DWORD PTR _hints$[ebp]
	imul	eax, DWORD PTR [edx+24], 40
	add	eax, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point_limit$[ebp], eax
; Line 1299
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _contour$[ebp], edx
; Line 1300
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _contour$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _contour_limit$[ebp], eax
; Line 1309
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN40@af_glyph_h
; Line 1311
	mov	DWORD PTR _touch_flag$[ebp], 4
; Line 1313
	mov	ecx, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point$[ebp], ecx
	jmp	SHORT $LN39@af_glyph_h
$LN38@af_glyph_h:
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
$LN39@af_glyph_h:
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _point_limit$[ebp]
	jae	SHORT $LN37@af_glyph_h
; Line 1315
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+24], eax
; Line 1316
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+28], eax
; Line 1317
	jmp	SHORT $LN38@af_glyph_h
$LN37@af_glyph_h:
; Line 1319
	jmp	SHORT $LN36@af_glyph_h
$LN40@af_glyph_h:
; Line 1321
	mov	DWORD PTR _touch_flag$[ebp], 8
; Line 1323
	mov	ecx, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point$[ebp], ecx
	jmp	SHORT $LN35@af_glyph_h
$LN34@af_glyph_h:
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
$LN35@af_glyph_h:
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _point_limit$[ebp]
	jae	SHORT $LN36@af_glyph_h
; Line 1325
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+24], eax
; Line 1326
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+28], eax
; Line 1327
	jmp	SHORT $LN34@af_glyph_h
$LN36@af_glyph_h:
; Line 1330
	jmp	SHORT $LN32@af_glyph_h
$LN31@af_glyph_h:
	mov	ecx, DWORD PTR _contour$[ebp]
	add	ecx, 4
	mov	DWORD PTR _contour$[ebp], ecx
$LN32@af_glyph_h:
	mov	edx, DWORD PTR _contour$[ebp]
	cmp	edx, DWORD PTR _contour_limit$[ebp]
	jae	$LN30@af_glyph_h
; Line 1335
	mov	eax, DWORD PTR _contour$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _point$[ebp], ecx
; Line 1336
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _end_point$[ebp], eax
; Line 1337
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR _first_point$[ebp], ecx
$LN29@af_glyph_h:
; Line 1342
	mov	edx, DWORD PTR _point$[ebp]
	cmp	edx, DWORD PTR _end_point$[ebp]
	jbe	SHORT $LN27@af_glyph_h
; Line 1343
	jmp	$NextContour$43
$LN27@af_glyph_h:
; Line 1345
	mov	eax, DWORD PTR _point$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, DWORD PTR _touch_flag$[ebp]
	je	SHORT $LN26@af_glyph_h
; Line 1346
	jmp	SHORT $LN28@af_glyph_h
$LN26@af_glyph_h:
; Line 1348
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
; Line 1349
	jmp	SHORT $LN29@af_glyph_h
$LN28@af_glyph_h:
; Line 1351
	mov	eax, DWORD PTR _point$[ebp]
	mov	DWORD PTR _first_touched$2[ebp], eax
$LN23@af_glyph_h:
; Line 1356
	mov	ecx, DWORD PTR _point$[ebp]
	cmp	ecx, DWORD PTR _end_point$[ebp]
	ja	SHORT $LN19@af_glyph_h
	mov	edx, DWORD PTR _point$[ebp]
	movzx	eax, WORD PTR [edx]
	and	eax, DWORD PTR _touch_flag$[ebp]
	jne	SHORT $LN22@af_glyph_h
$LN19@af_glyph_h:
	push	OFFSET $SG8724
	push	1356					; 0000054cH
	push	OFFSET $SG8725
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN22@af_glyph_h:
	xor	ecx, ecx
	jne	SHORT $LN23@af_glyph_h
$LN18@af_glyph_h:
; Line 1360
	mov	edx, DWORD PTR _point$[ebp]
	cmp	edx, DWORD PTR _end_point$[ebp]
	jae	SHORT $LN17@af_glyph_h
	mov	eax, 40					; 00000028H
	shl	eax, 0
	mov	ecx, DWORD PTR _point$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	and	edx, DWORD PTR _touch_flag$[ebp]
	je	SHORT $LN17@af_glyph_h
; Line 1361
	mov	eax, DWORD PTR _point$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], eax
	jmp	SHORT $LN18@af_glyph_h
$LN17@af_glyph_h:
; Line 1363
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR _last_touched$1[ebp], ecx
; Line 1366
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
$LN16@af_glyph_h:
; Line 1369
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _end_point$[ebp]
	jbe	SHORT $LN14@af_glyph_h
; Line 1370
	jmp	SHORT $EndContour$44
$LN14@af_glyph_h:
; Line 1372
	mov	ecx, DWORD PTR _point$[ebp]
	movzx	edx, WORD PTR [ecx]
	and	edx, DWORD PTR _touch_flag$[ebp]
	je	SHORT $LN13@af_glyph_h
; Line 1373
	jmp	SHORT $LN15@af_glyph_h
$LN13@af_glyph_h:
; Line 1375
	mov	eax, DWORD PTR _point$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], eax
; Line 1376
	jmp	SHORT $LN16@af_glyph_h
$LN15@af_glyph_h:
; Line 1380
	mov	ecx, DWORD PTR _point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _last_touched$1[ebp]
	push	edx
	mov	eax, DWORD PTR _point$[ebp]
	sub	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _last_touched$1[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	call	_af_iup_interp
	add	esp, 16					; 00000010H
; Line 1381
	jmp	$LN23@af_glyph_h
$EndContour$44:
; Line 1385
	mov	edx, DWORD PTR _last_touched$1[ebp]
	cmp	edx, DWORD PTR _first_touched$2[ebp]
	jne	SHORT $LN12@af_glyph_h
; Line 1386
	mov	eax, DWORD PTR _first_touched$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _end_point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _first_point$[ebp]
	push	edx
	call	_af_iup_shift
	add	esp, 12					; 0000000cH
; Line 1388
	jmp	SHORT $NextContour$43
$LN12@af_glyph_h:
; Line 1390
	mov	eax, DWORD PTR _last_touched$1[ebp]
	cmp	eax, DWORD PTR _end_point$[ebp]
	jae	SHORT $LN10@af_glyph_h
; Line 1392
	mov	ecx, DWORD PTR _first_touched$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _last_touched$1[ebp]
	push	edx
	mov	eax, DWORD PTR _end_point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _last_touched$1[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	call	_af_iup_interp
	add	esp, 16					; 00000010H
$LN10@af_glyph_h:
; Line 1394
	mov	edx, DWORD PTR _first_touched$2[ebp]
	cmp	edx, DWORD PTR _points$[ebp]
	jbe	SHORT $NextContour$43
; Line 1396
	mov	eax, DWORD PTR _first_touched$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _last_touched$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _first_touched$2[ebp]
	sub	edx, 40					; 00000028H
	push	edx
	mov	eax, DWORD PTR _first_point$[ebp]
	push	eax
	call	_af_iup_interp
	add	esp, 16					; 00000010H
$NextContour$43:
; Line 1401
	jmp	$LN31@af_glyph_h
$LN30@af_glyph_h:
; Line 1404
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN8@af_glyph_h
; Line 1406
	mov	ecx, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point$[ebp], ecx
	jmp	SHORT $LN7@af_glyph_h
$LN6@af_glyph_h:
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
$LN7@af_glyph_h:
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _point_limit$[ebp]
	jae	SHORT $LN5@af_glyph_h
; Line 1407
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN6@af_glyph_h
$LN5@af_glyph_h:
; Line 1409
	jmp	SHORT $LN41@af_glyph_h
$LN8@af_glyph_h:
; Line 1411
	mov	ecx, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point$[ebp], ecx
	jmp	SHORT $LN3@af_glyph_h
$LN2@af_glyph_h:
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
$LN3@af_glyph_h:
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _point_limit$[ebp]
	jae	SHORT $LN41@af_glyph_h
; Line 1412
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+20], eax
	jmp	SHORT $LN2@af_glyph_h
$LN41@af_glyph_h:
; Line 1414
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_glyph_hints_align_weak_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_after$1 = -76						; size = 4
_before$2 = -72						; size = 4
_nn$3 = -68						; size = 4
_fpos$4 = -64						; size = 4
_mid$5 = -60						; size = 4
_max$6 = -56						; size = 4
_min$7 = -52						; size = 4
_delta$8 = -48						; size = 4
_fu$9 = -44						; size = 4
_ou$10 = -40						; size = 4
_u$11 = -36						; size = 4
_edge$12 = -32						; size = 4
_point$13 = -28						; size = 4
_touch_flag$ = -24					; size = 4
_edge_limit$ = -20					; size = 4
_edges$ = -16						; size = 4
_axis$ = -12						; size = 4
_point_limit$ = -8					; size = 4
_points$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_glyph_hints_align_strong_points PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 1042
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1043
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _points$[ebp], ecx
; Line 1044
	mov	edx, DWORD PTR _hints$[ebp]
	imul	eax, DWORD PTR [edx+24], 40
	add	eax, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point_limit$[ebp], eax
; Line 1045
	imul	ecx, DWORD PTR _dim$[ebp], 28
	mov	edx, DWORD PTR _hints$[ebp]
	lea	eax, DWORD PTR [edx+ecx+44]
	mov	DWORD PTR _axis$[ebp], eax
; Line 1046
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _edges$[ebp], edx
; Line 1047
	mov	eax, DWORD PTR _axis$[ebp]
	imul	ecx, DWORD PTR [eax+12], 48
	add	ecx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge_limit$[ebp], ecx
; Line 1051
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN28@af_glyph_h
; Line 1052
	mov	DWORD PTR _touch_flag$[ebp], 4
; Line 1053
	jmp	SHORT $LN27@af_glyph_h
$LN28@af_glyph_h:
; Line 1054
	mov	DWORD PTR _touch_flag$[ebp], 8
$LN27@af_glyph_h:
; Line 1056
	mov	edx, DWORD PTR _edges$[ebp]
	cmp	edx, DWORD PTR _edge_limit$[ebp]
	jae	$LN29@af_glyph_h
; Line 1062
	mov	eax, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point$13[ebp], eax
	jmp	SHORT $LN25@af_glyph_h
$LN24@af_glyph_h:
	mov	ecx, DWORD PTR _point$13[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _point$13[ebp], ecx
$LN25@af_glyph_h:
	mov	edx, DWORD PTR _point$13[ebp]
	cmp	edx, DWORD PTR _point_limit$[ebp]
	jae	$LN29@af_glyph_h
; Line 1068
	mov	eax, DWORD PTR _point$13[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, DWORD PTR _touch_flag$[ebp]
	je	SHORT $LN22@af_glyph_h
; Line 1069
	jmp	SHORT $LN24@af_glyph_h
$LN22@af_glyph_h:
; Line 1074
	mov	edx, DWORD PTR _point$13[ebp]
	movzx	eax, WORD PTR [edx]
	and	eax, 16					; 00000010H
	je	SHORT $LN21@af_glyph_h
; Line 1075
	jmp	SHORT $LN24@af_glyph_h
$LN21@af_glyph_h:
; Line 1077
	cmp	DWORD PTR _dim$[ebp], 1
	jne	SHORT $LN20@af_glyph_h
; Line 1079
	mov	ecx, DWORD PTR _point$13[ebp]
	movsx	edx, WORD PTR [ecx+14]
	mov	DWORD PTR _u$11[ebp], edx
; Line 1080
	mov	eax, DWORD PTR _point$13[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ou$10[ebp], ecx
; Line 1082
	jmp	SHORT $LN19@af_glyph_h
$LN20@af_glyph_h:
; Line 1084
	mov	edx, DWORD PTR _point$13[ebp]
	movsx	eax, WORD PTR [edx+12]
	mov	DWORD PTR _u$11[ebp], eax
; Line 1085
	mov	ecx, DWORD PTR _point$13[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ou$10[ebp], edx
$LN19@af_glyph_h:
; Line 1088
	mov	eax, DWORD PTR _u$11[ebp]
	mov	DWORD PTR _fu$9[ebp], eax
; Line 1091
	mov	ecx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge$12[ebp], ecx
; Line 1092
	mov	edx, DWORD PTR _edge$12[ebp]
	movsx	eax, WORD PTR [edx]
	sub	eax, DWORD PTR _u$11[ebp]
	mov	DWORD PTR _delta$8[ebp], eax
; Line 1093
	js	SHORT $LN18@af_glyph_h
; Line 1095
	mov	ecx, DWORD PTR _edge$12[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _ou$10[ebp]
	mov	eax, DWORD PTR _edge$12[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR _u$11[ebp], ecx
; Line 1096
	jmp	$Store_Point$31
$LN18@af_glyph_h:
; Line 1100
	mov	edx, DWORD PTR _edge_limit$[ebp]
	sub	edx, 48					; 00000030H
	mov	DWORD PTR _edge$12[ebp], edx
; Line 1101
	mov	eax, DWORD PTR _edge$12[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _u$11[ebp]
	sub	edx, ecx
	mov	DWORD PTR _delta$8[ebp], edx
; Line 1102
	js	SHORT $LN17@af_glyph_h
; Line 1104
	mov	eax, DWORD PTR _edge$12[ebp]
	mov	ecx, DWORD PTR _ou$10[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _edge$12[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _u$11[ebp], ecx
; Line 1105
	jmp	$Store_Point$31
$LN17@af_glyph_h:
; Line 1114
	mov	DWORD PTR _min$7[ebp], 0
; Line 1115
	mov	eax, DWORD PTR _edge_limit$[ebp]
	sub	eax, DWORD PTR _edges$[ebp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	mov	DWORD PTR _max$6[ebp], eax
; Line 1119
	cmp	DWORD PTR _max$6[ebp], 8
	jg	SHORT $LN9@af_glyph_h
; Line 1124
	mov	DWORD PTR _nn$3[ebp], 0
	jmp	SHORT $LN15@af_glyph_h
$LN14@af_glyph_h:
	mov	edx, DWORD PTR _nn$3[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$3[ebp], edx
$LN15@af_glyph_h:
	mov	eax, DWORD PTR _nn$3[ebp]
	cmp	eax, DWORD PTR _max$6[ebp]
	jge	SHORT $LN13@af_glyph_h
; Line 1125
	imul	ecx, DWORD PTR _nn$3[ebp], 48
	mov	edx, DWORD PTR _edges$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	cmp	eax, DWORD PTR _u$11[ebp]
	jl	SHORT $LN12@af_glyph_h
; Line 1126
	jmp	SHORT $LN13@af_glyph_h
$LN12@af_glyph_h:
; Line 1128
	jmp	SHORT $LN14@af_glyph_h
$LN13@af_glyph_h:
	imul	ecx, DWORD PTR _nn$3[ebp], 48
	mov	edx, DWORD PTR _edges$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	cmp	eax, DWORD PTR _u$11[ebp]
	jne	SHORT $LN11@af_glyph_h
; Line 1130
	imul	ecx, DWORD PTR _nn$3[ebp], 48
	mov	edx, DWORD PTR _edges$[ebp]
	mov	eax, DWORD PTR [edx+ecx+8]
	mov	DWORD PTR _u$11[ebp], eax
; Line 1131
	jmp	$Store_Point$31
$LN11@af_glyph_h:
; Line 1133
	mov	ecx, DWORD PTR _nn$3[ebp]
	mov	DWORD PTR _min$7[ebp], ecx
; Line 1135
	jmp	SHORT $LN10@af_glyph_h
$LN9@af_glyph_h:
; Line 1137
	mov	edx, DWORD PTR _min$7[ebp]
	cmp	edx, DWORD PTR _max$6[ebp]
	jge	SHORT $LN10@af_glyph_h
; Line 1139
	mov	eax, DWORD PTR _max$6[ebp]
	add	eax, DWORD PTR _min$7[ebp]
	sar	eax, 1
	mov	DWORD PTR _mid$5[ebp], eax
; Line 1140
	imul	ecx, DWORD PTR _mid$5[ebp], 48
	add	ecx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge$12[ebp], ecx
; Line 1141
	mov	edx, DWORD PTR _edge$12[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR _fpos$4[ebp], eax
; Line 1143
	mov	ecx, DWORD PTR _u$11[ebp]
	cmp	ecx, DWORD PTR _fpos$4[ebp]
	jge	SHORT $LN7@af_glyph_h
; Line 1144
	mov	edx, DWORD PTR _mid$5[ebp]
	mov	DWORD PTR _max$6[ebp], edx
	jmp	SHORT $LN6@af_glyph_h
$LN7@af_glyph_h:
; Line 1145
	mov	eax, DWORD PTR _u$11[ebp]
	cmp	eax, DWORD PTR _fpos$4[ebp]
	jle	SHORT $LN5@af_glyph_h
; Line 1146
	mov	ecx, DWORD PTR _mid$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _min$7[ebp], ecx
; Line 1147
	jmp	SHORT $LN6@af_glyph_h
$LN5@af_glyph_h:
; Line 1150
	mov	edx, DWORD PTR _edge$12[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _u$11[ebp], eax
; Line 1151
	jmp	SHORT $Store_Point$31
$LN6@af_glyph_h:
; Line 1153
	jmp	SHORT $LN9@af_glyph_h
$LN10@af_glyph_h:
; Line 1157
	imul	ecx, DWORD PTR _min$7[ebp], 48
	mov	edx, DWORD PTR _edges$[ebp]
	lea	eax, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _before$2[ebp], eax
; Line 1158
	imul	ecx, DWORD PTR _min$7[ebp], 48
	add	ecx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _after$1[ebp], ecx
; Line 1162
	mov	edx, DWORD PTR _before$2[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN3@af_glyph_h
; Line 1164
	mov	eax, DWORD PTR _after$1[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _before$2[ebp]
	movsx	eax, WORD PTR [edx]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _after$1[ebp]
	mov	edx, DWORD PTR _before$2[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+8]
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _before$2[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN3@af_glyph_h:
; Line 1167
	mov	edx, DWORD PTR _before$2[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _before$2[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _fu$9[ebp]
	sub	eax, edx
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _before$2[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _u$11[ebp], eax
$Store_Point$31:
; Line 1173
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN2@af_glyph_h
; Line 1174
	mov	edx, DWORD PTR _point$13[ebp]
	mov	eax, DWORD PTR _u$11[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1175
	jmp	SHORT $LN1@af_glyph_h
$LN2@af_glyph_h:
; Line 1176
	mov	ecx, DWORD PTR _point$13[ebp]
	mov	edx, DWORD PTR _u$11[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN1@af_glyph_h:
; Line 1178
	mov	eax, DWORD PTR _point$13[ebp]
	movzx	ecx, WORD PTR [eax]
	or	ecx, DWORD PTR _touch_flag$[ebp]
	mov	edx, DWORD PTR _point$13[ebp]
	mov	WORD PTR [edx], cx
; Line 1179
	jmp	$LN24@af_glyph_h
$LN29@af_glyph_h:
; Line 1181
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_af_glyph_hints_align_strong_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_last$1 = -48						; size = 4
_first$2 = -44						; size = 4
_point$3 = -40						; size = 4
_edge$4 = -36						; size = 4
_last$5 = -32						; size = 4
_first$6 = -28						; size = 4
_point$7 = -24						; size = 4
_edge$8 = -20						; size = 4
_seg$ = -16						; size = 4
_segment_limit$ = -12					; size = 4
_segments$ = -8						; size = 4
_axis$ = -4						; size = 4
_hints$ = 8						; size = 4
_dim$ = 12						; size = 4
_af_glyph_hints_align_edge_points PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 967
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 968
	imul	eax, DWORD PTR _dim$[ebp], 28
	mov	ecx, DWORD PTR _hints$[ebp]
	lea	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _axis$[ebp], edx
; Line 969
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _segments$[ebp], ecx
; Line 970
	mov	edx, DWORD PTR _axis$[ebp]
	imul	eax, DWORD PTR [edx], 48
	add	eax, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _segment_limit$[ebp], eax
; Line 974
	cmp	DWORD PTR _dim$[ebp], 0
	jne	SHORT $LN16@af_glyph_h
; Line 976
	mov	ecx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg$[ebp], ecx
	jmp	SHORT $LN15@af_glyph_h
$LN14@af_glyph_h:
	mov	edx, DWORD PTR _seg$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _seg$[ebp], edx
$LN15@af_glyph_h:
	mov	eax, DWORD PTR _seg$[ebp]
	cmp	eax, DWORD PTR _segment_limit$[ebp]
	jae	SHORT $LN13@af_glyph_h
; Line 978
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _edge$8[ebp], edx
; Line 982
	cmp	DWORD PTR _edge$8[ebp], 0
	jne	SHORT $LN12@af_glyph_h
; Line 983
	jmp	SHORT $LN14@af_glyph_h
$LN12@af_glyph_h:
; Line 985
	mov	eax, DWORD PTR _seg$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _first$6[ebp], ecx
; Line 986
	mov	edx, DWORD PTR _seg$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _last$5[ebp], eax
; Line 987
	mov	ecx, DWORD PTR _first$6[ebp]
	mov	DWORD PTR _point$7[ebp], ecx
$LN11@af_glyph_h:
; Line 990
	mov	edx, DWORD PTR _point$7[ebp]
	mov	eax, DWORD PTR _edge$8[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+16], ecx
; Line 991
	mov	edx, DWORD PTR _point$7[ebp]
	movzx	eax, WORD PTR [edx]
	or	eax, 4
	mov	ecx, DWORD PTR _point$7[ebp]
	mov	WORD PTR [ecx], ax
; Line 993
	mov	edx, DWORD PTR _point$7[ebp]
	cmp	edx, DWORD PTR _last$5[ebp]
	jne	SHORT $LN9@af_glyph_h
; Line 994
	jmp	SHORT $LN10@af_glyph_h
$LN9@af_glyph_h:
; Line 996
	mov	eax, DWORD PTR _point$7[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _point$7[ebp], ecx
; Line 997
	jmp	SHORT $LN11@af_glyph_h
$LN10@af_glyph_h:
; Line 998
	jmp	SHORT $LN14@af_glyph_h
$LN13@af_glyph_h:
; Line 1000
	jmp	SHORT $LN17@af_glyph_h
$LN16@af_glyph_h:
; Line 1002
	mov	edx, DWORD PTR _segments$[ebp]
	mov	DWORD PTR _seg$[ebp], edx
	jmp	SHORT $LN7@af_glyph_h
$LN6@af_glyph_h:
	mov	eax, DWORD PTR _seg$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _seg$[ebp], eax
$LN7@af_glyph_h:
	mov	ecx, DWORD PTR _seg$[ebp]
	cmp	ecx, DWORD PTR _segment_limit$[ebp]
	jae	SHORT $LN17@af_glyph_h
; Line 1004
	mov	edx, DWORD PTR _seg$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _edge$4[ebp], eax
; Line 1008
	cmp	DWORD PTR _edge$4[ebp], 0
	jne	SHORT $LN4@af_glyph_h
; Line 1009
	jmp	SHORT $LN6@af_glyph_h
$LN4@af_glyph_h:
; Line 1011
	mov	ecx, DWORD PTR _seg$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _first$2[ebp], edx
; Line 1012
	mov	eax, DWORD PTR _seg$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _last$1[ebp], ecx
; Line 1013
	mov	edx, DWORD PTR _first$2[ebp]
	mov	DWORD PTR _point$3[ebp], edx
$LN3@af_glyph_h:
; Line 1016
	mov	eax, DWORD PTR _point$3[ebp]
	mov	ecx, DWORD PTR _edge$4[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx
; Line 1017
	mov	eax, DWORD PTR _point$3[ebp]
	movzx	ecx, WORD PTR [eax]
	or	ecx, 8
	mov	edx, DWORD PTR _point$3[ebp]
	mov	WORD PTR [edx], cx
; Line 1019
	mov	eax, DWORD PTR _point$3[ebp]
	cmp	eax, DWORD PTR _last$1[ebp]
	jne	SHORT $LN1@af_glyph_h
; Line 1020
	jmp	SHORT $LN2@af_glyph_h
$LN1@af_glyph_h:
; Line 1022
	mov	ecx, DWORD PTR _point$3[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _point$3[ebp], edx
; Line 1023
	jmp	SHORT $LN3@af_glyph_h
$LN2@af_glyph_h:
; Line 1024
	jmp	SHORT $LN6@af_glyph_h
$LN17@af_glyph_h:
; Line 1026
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_af_glyph_hints_align_edge_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tag$ = -16						; size = 4
_vec$ = -12						; size = 4
_limit$ = -8						; size = 4
_point$ = -4						; size = 4
_hints$ = 8						; size = 4
_outline$ = 12						; size = 4
_af_glyph_hints_save PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 932
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 933
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _point$[ebp], ecx
; Line 934
	mov	edx, DWORD PTR _hints$[ebp]
	imul	eax, DWORD PTR [edx+24], 40
	add	eax, DWORD PTR _point$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 935
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _vec$[ebp], edx
; Line 936
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tag$[ebp], ecx
; Line 939
	jmp	SHORT $LN7@af_glyph_h
$LN6@af_glyph_h:
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _point$[ebp], edx
	mov	eax, DWORD PTR _vec$[ebp]
	add	eax, 8
	mov	DWORD PTR _vec$[ebp], eax
	mov	ecx, DWORD PTR _tag$[ebp]
	add	ecx, 1
	mov	DWORD PTR _tag$[ebp], ecx
$LN7@af_glyph_h:
	mov	edx, DWORD PTR _point$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN8@af_glyph_h
; Line 941
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx
; Line 942
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+4], edx
; Line 944
	mov	eax, DWORD PTR _point$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN4@af_glyph_h
; Line 945
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _tag$[ebp]
	mov	BYTE PTR [ecx+eax], 0
	jmp	SHORT $LN3@af_glyph_h
$LN4@af_glyph_h:
; Line 946
	mov	edx, DWORD PTR _point$[ebp]
	movzx	eax, WORD PTR [edx]
	and	eax, 2
	je	SHORT $LN2@af_glyph_h
; Line 947
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _tag$[ebp]
	mov	BYTE PTR [eax+edx], 2
; Line 948
	jmp	SHORT $LN3@af_glyph_h
$LN2@af_glyph_h:
; Line 949
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _tag$[ebp]
	mov	BYTE PTR [eax+edx], 1
$LN3@af_glyph_h:
; Line 950
	jmp	$LN6@af_glyph_h
$LN8@af_glyph_h:
; Line 951
	mov	esp, ebp
	pop	ebp
	ret	0
_af_glyph_hints_save ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv359 = -200						; size = 4
tv356 = -196						; size = 4
tv295 = -192						; size = 4
tv292 = -188						; size = 4
tv226 = -184						; size = 4
tv223 = -180						; size = 4
tv216 = -176						; size = 4
_prev_v$1 = -172					; size = 4
_next_u$2 = -168					; size = 4
_prev_v$3 = -164					; size = 4
_next_u$4 = -160					; size = 4
_out_y$5 = -156						; size = 4
_out_x$6 = -152						; size = 4
_in_y$7 = -148						; size = 4
_in_x$8 = -144						; size = 4
_out_dir$9 = -140					; size = 4
_is_first$10 = -133					; size = 1
_out_y$11 = -132					; size = 4
_out_x$12 = -128					; size = 4
_curr$13 = -124						; size = 4
_prev$14 = -120						; size = 4
_next$15 = -116						; size = 4
_first$16 = -112					; size = 4
_contour_limit$17 = -108				; size = 4
_contour$18 = -104					; size = 4
_near_limit2$19 = -100					; size = 4
_near_limit$20 = -96					; size = 4
_units_per_em$21 = -92					; size = 4
_idx$22 = -88						; size = 2
_end$23 = -84						; size = 4
_contour_limit$24 = -80					; size = 4
_contour$25 = -76					; size = 4
_contour_index$26 = -72					; size = 4
_prev$27 = -68						; size = 4
_end$28 = -64						; size = 4
_tag$29 = -60						; size = 4
_vec$30 = -56						; size = 4
_point_limit$31 = -52					; size = 4
_point$32 = -48						; size = 4
_memory$ = -44						; size = 4
_y_delta$ = -40						; size = 4
_x_delta$ = -36						; size = 4
_y_scale$ = -32						; size = 4
_x_scale$ = -28						; size = 4
_new_max$ = -24						; size = 4
_old_max$ = -20						; size = 4
_points$ = -16						; size = 4
_error$ = -8						; size = 4
_hints$ = 8						; size = 4
_outline$ = 12						; size = 4
_af_glyph_hints_reload PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 553
	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 554
	mov	DWORD PTR _error$[ebp], 0
; Line 557
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _x_scale$[ebp], ecx
; Line 558
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _y_scale$[ebp], eax
; Line 559
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _x_delta$[ebp], edx
; Line 560
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _y_delta$[ebp], ecx
; Line 561
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$[ebp], eax
; Line 564
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 565
	mov	edx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 567
	mov	eax, 28					; 0000001cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [edx+ecx+44], 0
; Line 568
	mov	eax, 28					; 0000001cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [edx+ecx+56], 0
; Line 569
	mov	eax, 28					; 0000001cH
	shl	eax, 0
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [ecx+eax+44], 0
; Line 570
	mov	edx, 28					; 0000001cH
	shl	edx, 0
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [eax+edx+56], 0
; Line 573
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR _new_max$[ebp], edx
; Line 574
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _old_max$[ebp], ecx
; Line 575
	mov	edx, DWORD PTR _new_max$[ebp]
	cmp	edx, DWORD PTR _old_max$[ebp]
	jbe	SHORT $LN50@af_glyph_h
; Line 577
	mov	eax, DWORD PTR _new_max$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _new_max$[ebp], eax
; Line 579
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _new_max$[ebp]
	push	ecx
	mov	edx, DWORD PTR _old_max$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [ecx+40], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN49@af_glyph_h
; Line 580
	jmp	$Exit$64
$LN49@af_glyph_h:
; Line 582
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _new_max$[ebp]
	mov	DWORD PTR [edx+32], eax
$LN50@af_glyph_h:
; Line 590
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	add	edx, 2
	mov	DWORD PTR _new_max$[ebp], edx
; Line 591
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _old_max$[ebp], ecx
; Line 592
	mov	edx, DWORD PTR _new_max$[ebp]
	cmp	edx, DWORD PTR _old_max$[ebp]
	jbe	SHORT $LN48@af_glyph_h
; Line 594
	mov	eax, DWORD PTR _new_max$[ebp]
	add	eax, 9
	and	eax, -8					; fffffff8H
	mov	DWORD PTR _new_max$[ebp], eax
; Line 596
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _new_max$[ebp]
	push	ecx
	mov	edx, DWORD PTR _old_max$[ebp]
	push	edx
	push	40					; 00000028H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [ecx+28], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN47@af_glyph_h
; Line 597
	jmp	$Exit$64
$LN47@af_glyph_h:
; Line 599
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _new_max$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN48@af_glyph_h:
; Line 602
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [eax+24], edx
; Line 603
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [eax+36], edx
; Line 609
	mov	ecx, 28					; 0000001cH
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [eax+edx+68], 2
; Line 610
	mov	ecx, 28					; 0000001cH
	shl	ecx, 0
	mov	edx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [edx+ecx+68], -1
; Line 612
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	call	_FT_Outline_Get_Orientation
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN46@af_glyph_h
; Line 614
	mov	ecx, 28					; 0000001cH
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [eax+edx+68], -2		; fffffffeH
; Line 615
	mov	ecx, 28					; 0000001cH
	shl	ecx, 0
	mov	edx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [edx+ecx+68], 1
$LN46@af_glyph_h:
; Line 618
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR _x_scale$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 619
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _y_scale$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 620
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR _x_delta$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 621
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR _y_delta$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 623
	mov	edx, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [edx+112], 0
; Line 624
	mov	eax, DWORD PTR _hints$[ebp]
	mov	DWORD PTR [eax+116], 0
; Line 626
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _points$[ebp], edx
; Line 627
	mov	eax, DWORD PTR _hints$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN45@af_glyph_h
; Line 628
	jmp	$Exit$64
$LN45@af_glyph_h:
; Line 632
	mov	ecx, DWORD PTR _hints$[ebp]
	imul	edx, DWORD PTR [ecx+24], 40
	add	edx, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point_limit$31[ebp], edx
; Line 637
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vec$30[ebp], ecx
; Line 638
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _tag$29[ebp], eax
; Line 639
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	edx, WORD PTR [ecx+edx]
	imul	eax, edx, 40
	add	eax, DWORD PTR _points$[ebp]
	mov	DWORD PTR _end$28[ebp], eax
; Line 640
	mov	ecx, DWORD PTR _end$28[ebp]
	mov	DWORD PTR _prev$27[ebp], ecx
; Line 641
	mov	DWORD PTR _contour_index$26[ebp], 0
; Line 644
	mov	edx, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point$32[ebp], edx
	jmp	SHORT $LN44@af_glyph_h
$LN43@af_glyph_h:
	mov	eax, DWORD PTR _point$32[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _point$32[ebp], eax
	mov	ecx, DWORD PTR _vec$30[ebp]
	add	ecx, 8
	mov	DWORD PTR _vec$30[ebp], ecx
	mov	edx, DWORD PTR _tag$29[ebp]
	add	edx, 1
	mov	DWORD PTR _tag$29[ebp], edx
$LN44@af_glyph_h:
	mov	eax, DWORD PTR _point$32[ebp]
	cmp	eax, DWORD PTR _point_limit$31[ebp]
	jae	$LN42@af_glyph_h
; Line 646
	mov	ecx, DWORD PTR _point$32[ebp]
	mov	BYTE PTR [ecx+2], 4
; Line 647
	mov	edx, DWORD PTR _point$32[ebp]
	mov	BYTE PTR [edx+3], 4
; Line 649
	mov	eax, DWORD PTR _point$32[ebp]
	mov	ecx, DWORD PTR _vec$30[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax+12], dx
; Line 650
	mov	eax, DWORD PTR _point$32[ebp]
	mov	ecx, DWORD PTR _vec$30[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+14], dx
; Line 651
	mov	eax, DWORD PTR _x_scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vec$30[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _x_delta$[ebp]
	mov	DWORD PTR tv216[ebp], eax
	mov	eax, DWORD PTR _point$32[ebp]
	mov	ecx, DWORD PTR tv216[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _point$32[ebp]
	mov	eax, DWORD PTR tv216[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 652
	mov	ecx, DWORD PTR _y_scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vec$30[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _y_delta$[ebp]
	mov	DWORD PTR tv223[ebp], eax
	mov	ecx, DWORD PTR _point$32[ebp]
	mov	edx, DWORD PTR tv223[ebp]
	mov	DWORD PTR [ecx+20], edx
	mov	eax, DWORD PTR _point$32[ebp]
	mov	ecx, DWORD PTR tv223[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 654
	mov	edx, DWORD PTR _tag$29[ebp]
	movsx	eax, BYTE PTR [edx]
	and	eax, 3
	mov	DWORD PTR tv226[ebp], eax
	je	SHORT $LN39@af_glyph_h
	cmp	DWORD PTR tv226[ebp], 2
	je	SHORT $LN38@af_glyph_h
	jmp	SHORT $LN37@af_glyph_h
$LN39@af_glyph_h:
; Line 657
	mov	ecx, 1
	mov	edx, DWORD PTR _point$32[ebp]
	mov	WORD PTR [edx], cx
; Line 658
	jmp	SHORT $LN40@af_glyph_h
$LN38@af_glyph_h:
; Line 660
	mov	eax, 2
	mov	ecx, DWORD PTR _point$32[ebp]
	mov	WORD PTR [ecx], ax
; Line 661
	jmp	SHORT $LN40@af_glyph_h
$LN37@af_glyph_h:
; Line 663
	xor	edx, edx
	mov	eax, DWORD PTR _point$32[ebp]
	mov	WORD PTR [eax], dx
$LN40@af_glyph_h:
; Line 666
	mov	ecx, DWORD PTR _point$32[ebp]
	mov	edx, DWORD PTR _prev$27[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 667
	mov	eax, DWORD PTR _prev$27[ebp]
	mov	ecx, DWORD PTR _point$32[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 668
	mov	edx, DWORD PTR _point$32[ebp]
	mov	DWORD PTR _prev$27[ebp], edx
; Line 670
	mov	eax, DWORD PTR _point$32[ebp]
	cmp	eax, DWORD PTR _end$28[ebp]
	jne	SHORT $LN36@af_glyph_h
; Line 672
	mov	ecx, DWORD PTR _contour_index$26[ebp]
	add	ecx, 1
	mov	DWORD PTR _contour_index$26[ebp], ecx
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	cmp	DWORD PTR _contour_index$26[ebp], eax
	jge	SHORT $LN36@af_glyph_h
; Line 674
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _contour_index$26[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	imul	edx, ecx, 40
	add	edx, DWORD PTR _points$[ebp]
	mov	DWORD PTR _end$28[ebp], edx
; Line 675
	mov	eax, DWORD PTR _end$28[ebp]
	mov	DWORD PTR _prev$27[ebp], eax
$LN36@af_glyph_h:
; Line 678
	jmp	$LN43@af_glyph_h
$LN42@af_glyph_h:
; Line 683
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _contour$25[ebp], edx
; Line 684
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _contour$25[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _contour_limit$24[ebp], eax
; Line 685
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _end$23[ebp], edx
; Line 686
	xor	eax, eax
	mov	WORD PTR _idx$22[ebp], ax
; Line 689
	jmp	SHORT $LN34@af_glyph_h
$LN33@af_glyph_h:
	mov	ecx, DWORD PTR _contour$25[ebp]
	add	ecx, 4
	mov	DWORD PTR _contour$25[ebp], ecx
	mov	edx, DWORD PTR _end$23[ebp]
	add	edx, 2
	mov	DWORD PTR _end$23[ebp], edx
$LN34@af_glyph_h:
	mov	eax, DWORD PTR _contour$25[ebp]
	cmp	eax, DWORD PTR _contour_limit$24[ebp]
	jae	SHORT $LN32@af_glyph_h
; Line 691
	movsx	ecx, WORD PTR _idx$22[ebp]
	imul	edx, ecx, 40
	add	edx, DWORD PTR _points$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _contour$25[ebp]
	mov	DWORD PTR [eax+ecx], edx
; Line 692
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _end$23[ebp]
	movsx	ecx, WORD PTR [eax+edx]
	add	ecx, 1
	mov	WORD PTR _idx$22[ebp], cx
; Line 693
	jmp	SHORT $LN33@af_glyph_h
$LN32@af_glyph_h:
; Line 709
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, WORD PTR [ecx+68]
	mov	DWORD PTR _units_per_em$21[ebp], edx
; Line 710
	imul	eax, DWORD PTR _units_per_em$21[ebp], 20
	shr	eax, 11					; 0000000bH
	mov	DWORD PTR _near_limit$20[ebp], eax
; Line 711
	mov	ecx, DWORD PTR _near_limit$20[ebp]
	lea	edx, DWORD PTR [ecx+ecx-1]
	mov	DWORD PTR _near_limit2$19[ebp], edx
; Line 714
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+40]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _contour_limit$17[ebp], ecx
; Line 717
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _contour$18[ebp], eax
	jmp	SHORT $LN31@af_glyph_h
$LN30@af_glyph_h:
	mov	ecx, DWORD PTR _contour$18[ebp]
	add	ecx, 4
	mov	DWORD PTR _contour$18[ebp], ecx
$LN31@af_glyph_h:
	mov	edx, DWORD PTR _contour$18[ebp]
	cmp	edx, DWORD PTR _contour_limit$17[ebp]
	jae	$LN29@af_glyph_h
; Line 719
	mov	eax, DWORD PTR _contour$18[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _first$16[ebp], ecx
; Line 731
	mov	edx, DWORD PTR _first$16[ebp]
	mov	DWORD PTR _point$32[ebp], edx
; Line 732
	mov	eax, DWORD PTR _first$16[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _prev$14[ebp], ecx
$LN28@af_glyph_h:
; Line 734
	mov	edx, DWORD PTR _prev$14[ebp]
	cmp	edx, DWORD PTR _first$16[ebp]
	je	$LN27@af_glyph_h
; Line 736
	mov	eax, DWORD PTR _point$32[ebp]
	movsx	ecx, WORD PTR [eax+12]
	mov	edx, DWORD PTR _prev$14[ebp]
	movsx	eax, WORD PTR [edx+12]
	sub	ecx, eax
	mov	DWORD PTR _out_x$12[ebp], ecx
; Line 737
	mov	ecx, DWORD PTR _point$32[ebp]
	movsx	edx, WORD PTR [ecx+14]
	mov	eax, DWORD PTR _prev$14[ebp]
	movsx	ecx, WORD PTR [eax+14]
	sub	edx, ecx
	mov	DWORD PTR _out_y$11[ebp], edx
; Line 747
	cmp	DWORD PTR _out_x$12[ebp], 0
	jge	SHORT $LN53@af_glyph_h
	mov	edx, DWORD PTR _out_x$12[ebp]
	neg	edx
	mov	DWORD PTR tv292[ebp], edx
	jmp	SHORT $LN54@af_glyph_h
$LN53@af_glyph_h:
	mov	eax, DWORD PTR _out_x$12[ebp]
	mov	DWORD PTR tv292[ebp], eax
$LN54@af_glyph_h:
	cmp	DWORD PTR _out_y$11[ebp], 0
	jge	SHORT $LN55@af_glyph_h
	mov	ecx, DWORD PTR _out_y$11[ebp]
	neg	ecx
	mov	DWORD PTR tv295[ebp], ecx
	jmp	SHORT $LN56@af_glyph_h
$LN55@af_glyph_h:
	mov	edx, DWORD PTR _out_y$11[ebp]
	mov	DWORD PTR tv295[ebp], edx
$LN56@af_glyph_h:
	mov	eax, DWORD PTR tv292[ebp]
	add	eax, DWORD PTR tv295[ebp]
	cmp	eax, DWORD PTR _near_limit2$19[ebp]
	jl	SHORT $LN26@af_glyph_h
; Line 748
	jmp	SHORT $LN27@af_glyph_h
$LN26@af_glyph_h:
; Line 750
	mov	ecx, DWORD PTR _prev$14[ebp]
	mov	DWORD PTR _point$32[ebp], ecx
; Line 751
	mov	edx, DWORD PTR _prev$14[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _prev$14[ebp], eax
; Line 752
	jmp	$LN28@af_glyph_h
$LN27@af_glyph_h:
; Line 755
	mov	ecx, DWORD PTR _point$32[ebp]
	mov	DWORD PTR _first$16[ebp], ecx
; Line 760
	mov	edx, DWORD PTR _first$16[ebp]
	mov	DWORD PTR _curr$13[ebp], edx
; Line 770
	mov	eax, DWORD PTR _first$16[ebp]
	sub	eax, DWORD PTR _curr$13[ebp]
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx
	mov	edx, DWORD PTR _curr$13[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 771
	mov	eax, DWORD PTR _curr$13[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _first$16[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 773
	mov	DWORD PTR _out_x$12[ebp], 0
; Line 774
	mov	DWORD PTR _out_y$11[ebp], 0
; Line 776
	mov	BYTE PTR _is_first$10[ebp], 1
; Line 780
	mov	eax, DWORD PTR _first$16[ebp]
	mov	DWORD PTR _point$32[ebp], eax
	jmp	SHORT $LN25@af_glyph_h
$LN24@af_glyph_h:
	mov	ecx, DWORD PTR _point$32[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _point$32[ebp], edx
$LN25@af_glyph_h:
	mov	eax, DWORD PTR _point$32[ebp]
	cmp	eax, DWORD PTR _first$16[ebp]
	jne	SHORT $LN22@af_glyph_h
	movzx	ecx, BYTE PTR _is_first$10[ebp]
	test	ecx, ecx
	je	$LN23@af_glyph_h
$LN22@af_glyph_h:
; Line 785
	mov	BYTE PTR _is_first$10[ebp], 0
; Line 787
	mov	edx, DWORD PTR _point$32[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _next$15[ebp], eax
; Line 789
	mov	ecx, DWORD PTR _next$15[ebp]
	movsx	edx, WORD PTR [ecx+12]
	mov	eax, DWORD PTR _point$32[ebp]
	movsx	ecx, WORD PTR [eax+12]
	sub	edx, ecx
	add	edx, DWORD PTR _out_x$12[ebp]
	mov	DWORD PTR _out_x$12[ebp], edx
; Line 790
	mov	edx, DWORD PTR _next$15[ebp]
	movsx	eax, WORD PTR [edx+14]
	mov	ecx, DWORD PTR _point$32[ebp]
	movsx	edx, WORD PTR [ecx+14]
	sub	eax, edx
	add	eax, DWORD PTR _out_y$11[ebp]
	mov	DWORD PTR _out_y$11[ebp], eax
; Line 792
	cmp	DWORD PTR _out_x$12[ebp], 0
	jge	SHORT $LN57@af_glyph_h
	mov	eax, DWORD PTR _out_x$12[ebp]
	neg	eax
	mov	DWORD PTR tv356[ebp], eax
	jmp	SHORT $LN58@af_glyph_h
$LN57@af_glyph_h:
	mov	ecx, DWORD PTR _out_x$12[ebp]
	mov	DWORD PTR tv356[ebp], ecx
$LN58@af_glyph_h:
	cmp	DWORD PTR _out_y$11[ebp], 0
	jge	SHORT $LN59@af_glyph_h
	mov	edx, DWORD PTR _out_y$11[ebp]
	neg	edx
	mov	DWORD PTR tv359[ebp], edx
	jmp	SHORT $LN60@af_glyph_h
$LN59@af_glyph_h:
	mov	eax, DWORD PTR _out_y$11[ebp]
	mov	DWORD PTR tv359[ebp], eax
$LN60@af_glyph_h:
	mov	ecx, DWORD PTR tv356[ebp]
	add	ecx, DWORD PTR tv359[ebp]
	cmp	ecx, DWORD PTR _near_limit$20[ebp]
	jge	SHORT $LN21@af_glyph_h
; Line 794
	mov	edx, DWORD PTR _next$15[ebp]
	movzx	eax, WORD PTR [edx]
	or	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _next$15[ebp]
	mov	WORD PTR [ecx], ax
; Line 795
	jmp	$LN24@af_glyph_h
$LN21@af_glyph_h:
; Line 798
	mov	eax, DWORD PTR _next$15[ebp]
	sub	eax, DWORD PTR _curr$13[ebp]
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx
	mov	edx, DWORD PTR _curr$13[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 799
	mov	eax, DWORD PTR _curr$13[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _next$15[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 801
	mov	eax, DWORD PTR _out_y$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _out_x$12[ebp]
	push	ecx
	call	_af_direction_compute
	add	esp, 8
	mov	DWORD PTR _out_dir$9[ebp], eax
; Line 805
	mov	edx, DWORD PTR _curr$13[ebp]
	mov	al, BYTE PTR _out_dir$9[ebp]
	mov	BYTE PTR [edx+3], al
; Line 806
	mov	ecx, DWORD PTR _curr$13[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _curr$13[ebp], edx
	jmp	SHORT $LN20@af_glyph_h
$LN19@af_glyph_h:
	mov	eax, DWORD PTR _curr$13[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _curr$13[ebp], ecx
$LN20@af_glyph_h:
	mov	edx, DWORD PTR _curr$13[ebp]
	cmp	edx, DWORD PTR _next$15[ebp]
	je	SHORT $LN18@af_glyph_h
; Line 808
	mov	eax, DWORD PTR _curr$13[ebp]
	mov	cl, BYTE PTR _out_dir$9[ebp]
	mov	BYTE PTR [eax+2], cl
; Line 809
	mov	edx, DWORD PTR _curr$13[ebp]
	mov	al, BYTE PTR _out_dir$9[ebp]
	mov	BYTE PTR [edx+3], al
; Line 810
	jmp	SHORT $LN19@af_glyph_h
$LN18@af_glyph_h:
; Line 811
	mov	ecx, DWORD PTR _next$15[ebp]
	mov	dl, BYTE PTR _out_dir$9[ebp]
	mov	BYTE PTR [ecx+2], dl
; Line 813
	mov	eax, DWORD PTR _first$16[ebp]
	sub	eax, DWORD PTR _curr$13[ebp]
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx
	mov	edx, DWORD PTR _curr$13[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 814
	mov	eax, DWORD PTR _curr$13[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _first$16[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 816
	mov	DWORD PTR _out_x$12[ebp], 0
; Line 817
	mov	DWORD PTR _out_y$11[ebp], 0
; Line 818
	jmp	$LN24@af_glyph_h
$LN23@af_glyph_h:
; Line 819
	jmp	$LN30@af_glyph_h
$LN29@af_glyph_h:
; Line 830
	mov	eax, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point$32[ebp], eax
	jmp	SHORT $LN17@af_glyph_h
$LN16@af_glyph_h:
	mov	ecx, DWORD PTR _point$32[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _point$32[ebp], ecx
$LN17@af_glyph_h:
	mov	edx, DWORD PTR _point$32[ebp]
	cmp	edx, DWORD PTR _point_limit$31[ebp]
	jae	$LN15@af_glyph_h
; Line 832
	mov	eax, DWORD PTR _point$32[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN14@af_glyph_h
; Line 833
	jmp	SHORT $LN16@af_glyph_h
$LN14@af_glyph_h:
; Line 836
	mov	edx, DWORD PTR _point$32[ebp]
	movsx	eax, BYTE PTR [edx+2]
	cmp	eax, 4
	jne	$LN13@af_glyph_h
	mov	ecx, DWORD PTR _point$32[ebp]
	movsx	edx, BYTE PTR [ecx+3]
	cmp	edx, 4
	jne	$LN13@af_glyph_h
; Line 843
	mov	eax, DWORD PTR _point$32[ebp]
	imul	ecx, DWORD PTR [eax+24], 40
	add	ecx, DWORD PTR _point$32[ebp]
	mov	DWORD PTR _next_u$4[ebp], ecx
; Line 844
	mov	edx, DWORD PTR _point$32[ebp]
	imul	eax, DWORD PTR [edx+28], 40
	add	eax, DWORD PTR _point$32[ebp]
	mov	DWORD PTR _prev_v$3[ebp], eax
; Line 847
	mov	ecx, DWORD PTR _point$32[ebp]
	movsx	edx, WORD PTR [ecx+12]
	mov	eax, DWORD PTR _prev_v$3[ebp]
	movsx	ecx, WORD PTR [eax+12]
	sub	edx, ecx
	mov	DWORD PTR _in_x$8[ebp], edx
; Line 848
	mov	edx, DWORD PTR _point$32[ebp]
	movsx	eax, WORD PTR [edx+14]
	mov	ecx, DWORD PTR _prev_v$3[ebp]
	movsx	edx, WORD PTR [ecx+14]
	sub	eax, edx
	mov	DWORD PTR _in_y$7[ebp], eax
; Line 850
	mov	eax, DWORD PTR _next_u$4[ebp]
	movsx	ecx, WORD PTR [eax+12]
	mov	edx, DWORD PTR _point$32[ebp]
	movsx	eax, WORD PTR [edx+12]
	sub	ecx, eax
	mov	DWORD PTR _out_x$6[ebp], ecx
; Line 851
	mov	ecx, DWORD PTR _next_u$4[ebp]
	movsx	edx, WORD PTR [ecx+14]
	mov	eax, DWORD PTR _point$32[ebp]
	movsx	ecx, WORD PTR [eax+14]
	sub	edx, ecx
	mov	DWORD PTR _out_y$5[ebp], edx
; Line 853
	mov	edx, DWORD PTR _in_x$8[ebp]
	xor	edx, DWORD PTR _out_x$6[ebp]
	jl	SHORT $LN13@af_glyph_h
	mov	eax, DWORD PTR _in_y$7[ebp]
	xor	eax, DWORD PTR _out_y$5[ebp]
	jl	SHORT $LN13@af_glyph_h
; Line 858
	mov	ecx, DWORD PTR _point$32[ebp]
	movzx	edx, WORD PTR [ecx]
	or	edx, 16					; 00000010H
	mov	eax, DWORD PTR _point$32[ebp]
	mov	WORD PTR [eax], dx
; Line 860
	mov	eax, DWORD PTR _next_u$4[ebp]
	sub	eax, DWORD PTR _prev_v$3[ebp]
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx
	mov	edx, DWORD PTR _prev_v$3[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 861
	mov	eax, DWORD PTR _prev_v$3[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _next_u$4[ebp]
	mov	DWORD PTR [edx+28], ecx
$LN13@af_glyph_h:
; Line 864
	jmp	$LN16@af_glyph_h
$LN15@af_glyph_h:
; Line 872
	mov	eax, DWORD PTR _points$[ebp]
	mov	DWORD PTR _point$32[ebp], eax
	jmp	SHORT $LN11@af_glyph_h
$LN10@af_glyph_h:
	mov	ecx, DWORD PTR _point$32[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _point$32[ebp], ecx
$LN11@af_glyph_h:
	mov	edx, DWORD PTR _point$32[ebp]
	cmp	edx, DWORD PTR _point_limit$31[ebp]
	jae	$Exit$64
; Line 874
	mov	eax, DWORD PTR _point$32[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN8@af_glyph_h
; Line 875
	jmp	SHORT $LN10@af_glyph_h
$LN8@af_glyph_h:
; Line 877
	mov	edx, DWORD PTR _point$32[ebp]
	movzx	eax, WORD PTR [edx]
	and	eax, 3
	je	SHORT $LN7@af_glyph_h
$Is_Weak_Point$65:
; Line 881
	mov	ecx, DWORD PTR _point$32[ebp]
	movzx	edx, WORD PTR [ecx]
	or	edx, 16					; 00000010H
	mov	eax, DWORD PTR _point$32[ebp]
	mov	WORD PTR [eax], dx
	jmp	$LN6@af_glyph_h
$LN7@af_glyph_h:
; Line 883
	mov	ecx, DWORD PTR _point$32[ebp]
	movsx	edx, BYTE PTR [ecx+3]
	mov	eax, DWORD PTR _point$32[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	cmp	edx, ecx
	jne	$LN5@af_glyph_h
; Line 885
	mov	edx, DWORD PTR _point$32[ebp]
	movsx	eax, BYTE PTR [edx+3]
	cmp	eax, 4
	je	SHORT $LN4@af_glyph_h
; Line 889
	jmp	SHORT $Is_Weak_Point$65
$LN4@af_glyph_h:
; Line 893
	mov	ecx, DWORD PTR _point$32[ebp]
	imul	edx, DWORD PTR [ecx+24], 40
	add	edx, DWORD PTR _point$32[ebp]
	mov	DWORD PTR _next_u$2[ebp], edx
; Line 894
	mov	eax, DWORD PTR _point$32[ebp]
	imul	ecx, DWORD PTR [eax+28], 40
	add	ecx, DWORD PTR _point$32[ebp]
	mov	DWORD PTR _prev_v$1[ebp], ecx
; Line 900
	mov	edx, DWORD PTR _next_u$2[ebp]
	movsx	eax, WORD PTR [edx+14]
	mov	ecx, DWORD PTR _point$32[ebp]
	movsx	edx, WORD PTR [ecx+14]
	sub	eax, edx
	push	eax
	mov	eax, DWORD PTR _next_u$2[ebp]
	movsx	ecx, WORD PTR [eax+12]
	mov	edx, DWORD PTR _point$32[ebp]
	movsx	eax, WORD PTR [edx+12]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _point$32[ebp]
	movsx	edx, WORD PTR [ecx+14]
	mov	eax, DWORD PTR _prev_v$1[ebp]
	movsx	ecx, WORD PTR [eax+14]
	sub	edx, ecx
	push	edx
	mov	edx, DWORD PTR _point$32[ebp]
	movsx	eax, WORD PTR [edx+12]
	mov	ecx, DWORD PTR _prev_v$1[ebp]
	movsx	edx, WORD PTR [ecx+12]
	sub	eax, edx
	push	eax
	call	_ft_corner_is_flat
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN3@af_glyph_h
; Line 906
	mov	eax, DWORD PTR _next_u$2[ebp]
	sub	eax, DWORD PTR _prev_v$1[ebp]
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx
	mov	edx, DWORD PTR _prev_v$1[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 907
	mov	eax, DWORD PTR _prev_v$1[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _next_u$2[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 909
	jmp	$Is_Weak_Point$65
$LN3@af_glyph_h:
; Line 910
	jmp	SHORT $LN6@af_glyph_h
$LN5@af_glyph_h:
; Line 913
	mov	eax, DWORD PTR _point$32[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	mov	edx, DWORD PTR _point$32[ebp]
	movsx	eax, BYTE PTR [edx+3]
	neg	eax
	cmp	ecx, eax
	jne	SHORT $LN6@af_glyph_h
; Line 916
	jmp	$Is_Weak_Point$65
$LN6@af_glyph_h:
; Line 918
	jmp	$LN10@af_glyph_h
$Exit$64:
; Line 923
	mov	eax, DWORD PTR _error$[ebp]
; Line 924
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN63@af_glyph_h
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN63@af_glyph_h:
	DD	1
	DD	$LN62@af_glyph_h
$LN62@af_glyph_h:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN61@af_glyph_h
$LN61@af_glyph_h:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_af_glyph_hints_reload ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hints$ = 8						; size = 4
_metrics$ = 12						; size = 4
_af_glyph_hints_rescale PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 541
	push	ebp
	mov	ebp, esp
; Line 542
	mov	eax, DWORD PTR _hints$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [eax+108], ecx
; Line 543
	mov	edx, DWORD PTR _hints$[ebp]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+100], ecx
; Line 544
	pop	ebp
	ret	0
_af_glyph_hints_rescale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hints$ = 8						; size = 4
_memory$ = 12						; size = 4
_af_glyph_hints_init PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 490
	push	ebp
	mov	ebp, esp
; Line 491
	push	120					; 00000078H
	push	0
	mov	eax, DWORD PTR _hints$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 492
	mov	ecx, DWORD PTR _hints$[ebp]
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 493
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_af_glyph_hints_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_big_max$1 = -32					; size = 4
_new_max$2 = -28					; size = 4
_old_max$3 = -24					; size = 4
_edges$ = -20						; size = 4
_edge$ = -16						; size = 4
_error$ = -8						; size = 4
_axis$ = 8						; size = 4
_fpos$ = 12						; size = 4
_dir$ = 16						; size = 4
_memory$ = 20						; size = 4
_anedge$ = 24						; size = 4
_af_axis_hints_new_edge PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 86
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 87
	mov	DWORD PTR _error$[ebp], 0
; Line 88
	mov	DWORD PTR _edge$[ebp], 0
; Line 92
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+16]
	jl	$LN9@af_axis_hi
; Line 94
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _old_max$3[ebp], ecx
; Line 95
	mov	edx, DWORD PTR _old_max$3[ebp]
	mov	DWORD PTR _new_max$2[ebp], edx
; Line 96
	mov	DWORD PTR _big_max$1[ebp], 44739242	; 02aaaaaaH
; Line 99
	mov	eax, DWORD PTR _old_max$3[ebp]
	cmp	eax, DWORD PTR _big_max$1[ebp]
	jl	SHORT $LN8@af_axis_hi
; Line 101
	push	OFFSET $SG8329
	push	101					; 00000065H
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	mov	DWORD PTR _error$[ebp], eax
; Line 102
	jmp	$Exit$15
$LN8@af_axis_hi:
; Line 105
	mov	ecx, DWORD PTR _new_max$2[ebp]
	sar	ecx, 2
	mov	edx, DWORD PTR _new_max$2[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _new_max$2[ebp], eax
; Line 106
	mov	ecx, DWORD PTR _new_max$2[ebp]
	cmp	ecx, DWORD PTR _old_max$3[ebp]
	jl	SHORT $LN6@af_axis_hi
	mov	edx, DWORD PTR _new_max$2[ebp]
	cmp	edx, DWORD PTR _big_max$1[ebp]
	jle	SHORT $LN7@af_axis_hi
$LN6@af_axis_hi:
; Line 107
	mov	eax, DWORD PTR _big_max$1[ebp]
	mov	DWORD PTR _new_max$2[ebp], eax
$LN7@af_axis_hi:
; Line 109
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _new_max$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _old_max$3[ebp]
	push	edx
	push	48					; 00000030H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	DWORD PTR [ecx+20], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@af_axis_hi
; Line 110
	jmp	$Exit$15
$LN5@af_axis_hi:
; Line 112
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR _new_max$2[ebp]
	mov	DWORD PTR [edx+16], eax
$LN9@af_axis_hi:
; Line 115
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _edges$[ebp], edx
; Line 116
	mov	eax, DWORD PTR _axis$[ebp]
	imul	ecx, DWORD PTR [eax+12], 48
	add	ecx, DWORD PTR _edges$[ebp]
	mov	DWORD PTR _edge$[ebp], ecx
$LN4@af_axis_hi:
; Line 118
	mov	edx, DWORD PTR _edge$[ebp]
	cmp	edx, DWORD PTR _edges$[ebp]
	jbe	SHORT $LN3@af_axis_hi
; Line 120
	mov	eax, 48					; 00000030H
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _edge$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	cmp	eax, DWORD PTR _fpos$[ebp]
	jge	SHORT $LN2@af_axis_hi
; Line 121
	jmp	SHORT $LN3@af_axis_hi
$LN2@af_axis_hi:
; Line 125
	mov	ecx, 48					; 00000030H
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _edge$[ebp]
	movsx	ecx, WORD PTR [eax+edx]
	cmp	ecx, DWORD PTR _fpos$[ebp]
	jne	SHORT $LN1@af_axis_hi
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR _dir$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jne	SHORT $LN1@af_axis_hi
; Line 126
	jmp	SHORT $LN3@af_axis_hi
$LN1@af_axis_hi:
; Line 128
	mov	ecx, 48					; 00000030H
	imul	esi, ecx, -1
	add	esi, DWORD PTR _edge$[ebp]
	mov	edx, 48					; 00000030H
	imul	edi, edx, 0
	add	edi, DWORD PTR _edge$[ebp]
	mov	ecx, 12					; 0000000cH
	rep movsd
; Line 129
	mov	eax, DWORD PTR _edge$[ebp]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR _edge$[ebp], eax
; Line 130
	jmp	SHORT $LN4@af_axis_hi
$LN3@af_axis_hi:
; Line 132
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _axis$[ebp]
	mov	DWORD PTR [eax+12], edx
$Exit$15:
; Line 135
	mov	ecx, DWORD PTR _anedge$[ebp]
	mov	edx, DWORD PTR _edge$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 136
	mov	eax, DWORD PTR _error$[ebp]
; Line 137
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@af_axis_hi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@af_axis_hi:
	DD	1
	DD	$LN13@af_axis_hi
$LN13@af_axis_hi:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN12@af_axis_hi
$LN12@af_axis_hi:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_af_axis_hints_new_edge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_big_max$1 = -28					; size = 4
_new_max$2 = -24					; size = 4
_old_max$3 = -20					; size = 4
_segment$ = -16						; size = 4
_error$ = -8						; size = 4
_axis$ = 8						; size = 4
_memory$ = 12						; size = 4
_asegment$ = 16						; size = 4
_af_axis_hints_new_segment PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 42
	mov	DWORD PTR _error$[ebp], 0
; Line 43
	mov	DWORD PTR _segment$[ebp], 0
; Line 46
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	jl	$LN5@af_axis_hi
; Line 48
	mov	eax, DWORD PTR _axis$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _old_max$3[ebp], ecx
; Line 49
	mov	edx, DWORD PTR _old_max$3[ebp]
	mov	DWORD PTR _new_max$2[ebp], edx
; Line 50
	mov	DWORD PTR _big_max$1[ebp], 44739242	; 02aaaaaaH
; Line 53
	mov	eax, DWORD PTR _old_max$3[ebp]
	cmp	eax, DWORD PTR _big_max$1[ebp]
	jl	SHORT $LN4@af_axis_hi
; Line 55
	push	OFFSET $SG8301
	push	55					; 00000037H
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	mov	DWORD PTR _error$[ebp], eax
; Line 56
	jmp	SHORT $Exit$11
$LN4@af_axis_hi:
; Line 59
	mov	ecx, DWORD PTR _new_max$2[ebp]
	sar	ecx, 2
	mov	edx, DWORD PTR _new_max$2[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _new_max$2[ebp], eax
; Line 60
	mov	ecx, DWORD PTR _new_max$2[ebp]
	cmp	ecx, DWORD PTR _old_max$3[ebp]
	jl	SHORT $LN2@af_axis_hi
	mov	edx, DWORD PTR _new_max$2[ebp]
	cmp	edx, DWORD PTR _big_max$1[ebp]
	jle	SHORT $LN3@af_axis_hi
$LN2@af_axis_hi:
; Line 61
	mov	eax, DWORD PTR _big_max$1[ebp]
	mov	DWORD PTR _new_max$2[ebp], eax
$LN3@af_axis_hi:
; Line 63
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _new_max$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _old_max$3[ebp]
	push	edx
	push	48					; 00000030H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	DWORD PTR [ecx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@af_axis_hi
; Line 64
	jmp	SHORT $Exit$11
$LN1@af_axis_hi:
; Line 66
	mov	edx, DWORD PTR _axis$[ebp]
	mov	eax, DWORD PTR _new_max$2[ebp]
	mov	DWORD PTR [edx+4], eax
$LN5@af_axis_hi:
; Line 69
	mov	ecx, DWORD PTR _axis$[ebp]
	imul	edx, DWORD PTR [ecx], 48
	mov	eax, DWORD PTR _axis$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _segment$[ebp], edx
	mov	ecx, DWORD PTR _axis$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _axis$[ebp]
	mov	DWORD PTR [eax], edx
$Exit$11:
; Line 72
	mov	ecx, DWORD PTR _asegment$[ebp]
	mov	edx, DWORD PTR _segment$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 73
	mov	eax, DWORD PTR _error$[ebp]
; Line 74
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@af_axis_hi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@af_axis_hi:
	DD	1
	DD	$LN9@af_axis_hi
$LN9@af_axis_hi:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@af_axis_hi
$LN8@af_axis_hi:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_af_axis_hints_new_segment ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -20						; size = 4
tv73 = -16						; size = 4
_dir$ = -12						; size = 4
_ss$ = -8						; size = 4
_ll$ = -4						; size = 4
_dx$ = 8						; size = 4
_dy$ = 12						; size = 4
_af_direction_compute PROC
; File d:\mozilla\modules\freetype2\src\autofit\afhints.c
; Line 441
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 446
	mov	eax, DWORD PTR _dy$[ebp]
	cmp	eax, DWORD PTR _dx$[ebp]
	jl	SHORT $LN7@af_directi
; Line 448
	mov	ecx, DWORD PTR _dx$[ebp]
	neg	ecx
	cmp	DWORD PTR _dy$[ebp], ecx
	jl	SHORT $LN6@af_directi
; Line 450
	mov	DWORD PTR _dir$[ebp], 2
; Line 451
	mov	edx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _ll$[ebp], edx
; Line 452
	mov	eax, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _ss$[ebp], eax
; Line 454
	jmp	SHORT $LN5@af_directi
$LN6@af_directi:
; Line 456
	mov	DWORD PTR _dir$[ebp], -1
; Line 457
	mov	ecx, DWORD PTR _dx$[ebp]
	neg	ecx
	mov	DWORD PTR _ll$[ebp], ecx
; Line 458
	mov	edx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _ss$[ebp], edx
$LN5@af_directi:
; Line 461
	jmp	SHORT $LN4@af_directi
$LN7@af_directi:
; Line 463
	mov	eax, DWORD PTR _dx$[ebp]
	neg	eax
	cmp	DWORD PTR _dy$[ebp], eax
	jl	SHORT $LN3@af_directi
; Line 465
	mov	DWORD PTR _dir$[ebp], 1
; Line 466
	mov	ecx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _ll$[ebp], ecx
; Line 467
	mov	edx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _ss$[ebp], edx
; Line 469
	jmp	SHORT $LN4@af_directi
$LN3@af_directi:
; Line 471
	mov	DWORD PTR _dir$[ebp], -2		; fffffffeH
; Line 472
	mov	eax, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _ll$[ebp], eax
; Line 473
	mov	ecx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _ss$[ebp], ecx
$LN4@af_directi:
; Line 479
	imul	edx, DWORD PTR _ss$[ebp], 14
	mov	DWORD PTR _ss$[ebp], edx
; Line 480
	cmp	DWORD PTR _ll$[ebp], 0
	jge	SHORT $LN10@af_directi
	mov	eax, DWORD PTR _ll$[ebp]
	neg	eax
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN11@af_directi
$LN10@af_directi:
	mov	ecx, DWORD PTR _ll$[ebp]
	mov	DWORD PTR tv73[ebp], ecx
$LN11@af_directi:
	cmp	DWORD PTR _ss$[ebp], 0
	jge	SHORT $LN12@af_directi
	mov	edx, DWORD PTR _ss$[ebp]
	neg	edx
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN13@af_directi
$LN12@af_directi:
	mov	eax, DWORD PTR _ss$[ebp]
	mov	DWORD PTR tv76[ebp], eax
$LN13@af_directi:
	mov	ecx, DWORD PTR tv73[ebp]
	cmp	ecx, DWORD PTR tv76[ebp]
	jg	SHORT $LN1@af_directi
; Line 481
	mov	DWORD PTR _dir$[ebp], 4
$LN1@af_directi:
; Line 483
	mov	eax, DWORD PTR _dir$[ebp]
; Line 484
	mov	esp, ebp
	pop	ebp
	ret	0
_af_direction_compute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_swap$ = -40						; size = 12
_sum$ = -24						; size = 4
_cur_val$ = -20						; size = 4
_cur_idx$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_count$ = 8						; size = 4
_table$ = 12						; size = 4
_threshold$ = 16					; size = 4
_af_sort_and_quantize_widths PROC
; File d:\mozilla\modules\freetype2\src\autofit\afangles.c
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 221
	mov	eax, DWORD PTR _count$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN22@af_sort_an
; Line 222
	jmp	$LN23@af_sort_an
$LN22@af_sort_an:
; Line 225
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN21@af_sort_an
$LN20@af_sort_an:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN21@af_sort_an:
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	$LN19@af_sort_an
; Line 227
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $LN18@af_sort_an
$LN17@af_sort_an:
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN18@af_sort_an:
	cmp	DWORD PTR _j$[ebp], 0
	jbe	SHORT $LN16@af_sort_an
; Line 229
	imul	eax, DWORD PTR _j$[ebp], 12
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _table$[ebp]
	mov	esi, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	cmp	eax, DWORD PTR [esi+edx]
	jl	SHORT $LN15@af_sort_an
; Line 230
	jmp	SHORT $LN16@af_sort_an
$LN15@af_sort_an:
; Line 232
	imul	ecx, DWORD PTR _j$[ebp], 12
	add	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _swap$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _swap$[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _swap$[ebp+8], ecx
; Line 233
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	imul	eax, edx, 12
	add	eax, DWORD PTR _table$[ebp]
	imul	ecx, DWORD PTR _j$[ebp], 12
	add	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
; Line 234
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	imul	edx, ecx, 12
	add	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _swap$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _swap$[ebp+8]
	mov	DWORD PTR [edx+8], eax
; Line 235
	jmp	$LN17@af_sort_an
$LN16@af_sort_an:
; Line 236
	jmp	$LN20@af_sort_an
$LN19@af_sort_an:
; Line 238
	mov	DWORD PTR _cur_idx$[ebp], 0
; Line 239
	imul	ecx, DWORD PTR _cur_idx$[ebp], 12
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _cur_val$[ebp], eax
; Line 245
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN14@af_sort_an
$LN13@af_sort_an:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN14@af_sort_an:
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	$LN12@af_sort_an
; Line 248
	imul	ecx, DWORD PTR _i$[ebp], 12
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	sub	eax, DWORD PTR _cur_val$[ebp]
	cmp	eax, DWORD PTR _threshold$[ebp]
	jg	SHORT $LN10@af_sort_an
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	cmp	DWORD PTR _i$[ebp], edx
	jne	$LN11@af_sort_an
$LN10@af_sort_an:
; Line 250
	mov	DWORD PTR _sum$[ebp], 0
; Line 254
	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	sub	edx, DWORD PTR _cur_val$[ebp]
	cmp	edx, DWORD PTR _threshold$[ebp]
	jg	SHORT $LN9@af_sort_an
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	cmp	DWORD PTR _i$[ebp], ecx
	jne	SHORT $LN9@af_sort_an
; Line 255
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@af_sort_an:
; Line 257
	mov	eax, DWORD PTR _cur_idx$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN8@af_sort_an
$LN7@af_sort_an:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN8@af_sort_an:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _i$[ebp]
	jae	SHORT $LN6@af_sort_an
; Line 259
	imul	eax, DWORD PTR _j$[ebp], 12
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _sum$[ebp], edx
; Line 260
	imul	eax, DWORD PTR _j$[ebp], 12
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+eax], 0
; Line 261
	jmp	SHORT $LN7@af_sort_an
$LN6@af_sort_an:
; Line 262
	mov	eax, DWORD PTR _sum$[ebp]
	xor	edx, edx
	div	DWORD PTR _j$[ebp]
	imul	edx, DWORD PTR _cur_idx$[ebp], 12
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 264
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN11@af_sort_an
; Line 266
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur_idx$[ebp], ecx
; Line 267
	imul	edx, DWORD PTR _cur_idx$[ebp], 12
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _cur_val$[ebp], ecx
$LN11@af_sort_an:
; Line 270
	jmp	$LN13@af_sort_an
$LN12@af_sort_an:
; Line 272
	mov	DWORD PTR _cur_idx$[ebp], 1
; Line 275
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@af_sort_an
$LN3@af_sort_an:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@af_sort_an:
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN2@af_sort_an
; Line 277
	imul	edx, DWORD PTR _i$[ebp], 12
	mov	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [eax+edx], 0
	je	SHORT $LN1@af_sort_an
; Line 278
	imul	ecx, DWORD PTR _i$[ebp], 12
	add	ecx, DWORD PTR _table$[ebp]
	imul	edx, DWORD PTR _cur_idx$[ebp], 12
	add	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR _cur_idx$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur_idx$[ebp], edx
$LN1@af_sort_an:
; Line 279
	jmp	SHORT $LN3@af_sort_an
$LN2@af_sort_an:
; Line 281
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _cur_idx$[ebp]
	mov	DWORD PTR [eax], ecx
$LN23@af_sort_an:
; Line 282
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@af_sort_an
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN27@af_sort_an:
	DD	1
	DD	$LN26@af_sort_an
$LN26@af_sort_an:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN25@af_sort_an
$LN25@af_sort_an:
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
_af_sort_and_quantize_widths ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_swap$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_count$ = 8						; size = 4
_table$ = 12						; size = 4
_af_sort_pos PROC
; File d:\mozilla\modules\freetype2\src\autofit\afangles.c
; Line 189
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 194
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@af_sort_po
$LN6@af_sort_po:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@af_sort_po:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	SHORT $LN8@af_sort_po
; Line 196
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _j$[ebp], edx
	jmp	SHORT $LN4@af_sort_po
$LN3@af_sort_po:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@af_sort_po:
	cmp	DWORD PTR _j$[ebp], 0
	jbe	SHORT $LN2@af_sort_po
; Line 198
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	cmp	ecx, DWORD PTR [esi+eax*4-4]
	jl	SHORT $LN1@af_sort_po
; Line 199
	jmp	SHORT $LN2@af_sort_po
$LN1@af_sort_po:
; Line 201
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _swap$[ebp], ecx
; Line 202
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4-4]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 203
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _swap$[ebp]
	mov	DWORD PTR [eax+edx*4-4], ecx
; Line 204
	jmp	SHORT $LN3@af_sort_po
$LN2@af_sort_po:
; Line 205
	jmp	SHORT $LN6@af_sort_po
$LN8@af_sort_po:
; Line 206
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_af_sort_pos ENDP
_TEXT	ENDS
END
