; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\truetype\truetype.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_tt_driver_class
PUBLIC	_tt_default_graphics_state
CONST	SEGMENT
_tt_driver_class DD 0501H
	DD	048H
	DD	FLAT:$SG8932
	DD	010000H
	DD	020000H
	DD	00H
	DD	FLAT:_tt_driver_init
	DD	FLAT:_tt_driver_done
	DD	FLAT:_tt_get_interface
	DD	0318H
	DD	0134H
	DD	0a0H
	DD	FLAT:_tt_face_init
	DD	FLAT:_tt_face_done
	DD	FLAT:_tt_size_init
	DD	FLAT:_tt_size_done
	DD	FLAT:_tt_slot_init
	DD	00H
	DD	FLAT:_tt_glyph_load
	DD	FLAT:_tt_get_kerning
	DD	00H
	DD	FLAT:_tt_get_advances
	DD	FLAT:_tt_size_request
	DD	FLAT:_tt_size_select
_opcode_length DB 01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	0ffH
	DB	0feH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	03H
	DB	05H
	DB	07H
	DB	09H
	DB	0bH
	DB	0dH
	DB	0fH
	DB	011H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?trick_names@?1??tt_check_trickyness_family@@9@9 DB 'DFKaiSho-SB', 00H ; `tt_check_trickyness_family'::`2'::trick_names
	ORG $+8
	DB	'DFKaiShu', 00H
	ORG $+11
	DB	'DFKai-SB', 00H
	ORG $+11
	DB	'HuaTianKaiTi?', 00H
	ORG $+6
	DB	'HuaTianSongTi?', 00H
	ORG $+5
	DB	'Ming(for ISO10646)', 00H
	ORG $+1
	DB	'MingLiU', 00H
	ORG $+12
	DB	'PMingLiU', 00H
	ORG $+11
	DB	'MingLi43', 00H
	ORG $+11
?gvar_fields@?1??ft_var_load_gvar@@9@9 DB 04H		; `ft_var_load_gvar'::`2'::gvar_fields
	DB	00H
	DW	014H
	DB	011H
	DB	04H
	DW	00H
	DB	0cH
	DB	02H
	DW	04H
	DB	0cH
	DB	02H
	DW	06H
	DB	010H
	DB	04H
	DW	08H
	DB	0cH
	DB	02H
	DW	0cH
	DB	0cH
	DB	02H
	DW	0eH
	DB	010H
	DB	04H
	DW	010H
	DB	00H
	DB	00H
	DW	00H
?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9 DD 05bcf058H ; `tt_check_trickyness_sfnt_ids'::`2'::sfnt_id
	DD	02e4H
	DD	028233bf1H
	DD	087c4H
	DD	0a344a1eaH
	DD	01e1H
	DD	05bcf058H
	DD	02e4H
	DD	028233bf1H
	DD	087c4H
	DD	0a344a1ebH
	DD	01e1H
	DD	011e5ead4H
	DD	0350H
	DD	05a30ca3bH
	DD	09063H
	DD	013a42602H
	DD	07eH
	DD	0fffbfffcH
	DD	08H
	DD	09c9e48b8H
	DD	0bea2H
	DD	070020112H
	DD	08H
	DD	0fffbfffcH
	DD	08H
	DD	0a5a0483H
	DD	017c39H
	DD	070020112H
	DD	08H
	DD	00H
	DD	00H
	DD	040c92555H
	DD	0e5H
	DD	0a39b58e3H
	DD	0117cH
	DD	00H
	DD	00H
	DD	033c41652H
	DD	0e5H
	DD	026d6c52aH
	DD	0f6aH
	DD	00H
	DD	00H
	DD	06db1651dH
	DD	019dH
	DD	06c6e4b03H
	DD	02492H
	DD	00H
	DD	00H
	DD	040c92555H
	DD	0e5H
	DD	0de51fad0H
	DD	0117cH
	DD	00H
	DD	00H
	DD	085e47664H
	DD	0e5H
	DD	0a6c62831H
	DD	01caaH
	DD	00H
	DD	00H
	DD	02d891cfdH
	DD	019dH
	DD	0a0604633H
	DD	01de8H
	DD	00H
	DD	00H
	DD	040aa774cH
	DD	01cbH
	DD	09b5caa96H
	DD	01f9aH
	DD	00H
	DD	00H
	DD	0d3de9cbH
	DD	0141H
	DD	0d4127766H
	DD	02280H
	DD	00H
	DD	00H
	DD	04a692698H
	DD	01f0H
	DD	0340d4346H
	DD	01fcaH
	DD	00H
	DD	00H
	DD	0cd34c604H
	DD	0166H
	DD	06cf31046H
	DD	022b0H
	DD	00H
	DD	00H
	DD	05da75315H
	DD	019dH
	DD	040745a5fH
	DD	022e0H
	DD	00H
	DD	00H
	DD	0f055fc48H
	DD	01c2H
	DD	03900ded3H
	DD	01e18H
_tt_default_graphics_state DW 00H
	DW	00H
	DW	00H
	DW	04000H
	DW	00H
	DW	04000H
	DW	00H
	DW	04000H
	DW	00H
	ORG $+2
	DD	01H
	DD	040H
	DD	01H
	DB	01H
	ORG $+3
	DD	044H
	DD	00H
	DD	00H
	DW	09H
	DW	03H
	DB	00H
	DB	00H
	ORG $+2
	DD	00H
	DW	01H
	DW	01H
	DW	01H
	ORG $+2
?fvar_fields@?1??TT_Get_MM_Var@@9@9 DB 04H		; `TT_Get_MM_Var'::`2'::fvar_fields
	DB	00H
	DW	010H
	DB	011H
	DB	04H
	DW	00H
	DB	0cH
	DB	02H
	DW	04H
	DB	0cH
	DB	02H
	DW	06H
	DB	0cH
	DB	02H
	DW	08H
	DB	0cH
	DB	02H
	DW	0aH
	DB	0cH
	DB	02H
	DW	0cH
	DB	0cH
	DB	02H
	DW	0eH
	DB	00H
	DB	00H
	DW	00H
?fvaraxis_fields@?1??TT_Get_MM_Var@@9@9 DB 04H		; `TT_Get_MM_Var'::`2'::fvaraxis_fields
	DB	00H
	DW	014H
	DB	010H
	DB	04H
	DW	00H
	DB	010H
	DB	04H
	DW	04H
	DB	010H
	DB	04H
	DW	08H
	DB	010H
	DB	04H
	DW	0cH
	DB	0cH
	DB	02H
	DW	010H
	DB	0cH
	DB	02H
	DW	012H
	DB	00H
	DB	00H
	DW	00H
_tt_service_properties DD FLAT:_tt_property_set
	DD	FLAT:_tt_property_get
_tt_service_gx_multi_masters DD 00H
	DD	00H
	DD	FLAT:_TT_Set_MM_Blend
	DD	FLAT:_TT_Get_MM_Var
	DD	FLAT:_TT_Set_Var_Design
_tt_service_truetype_engine DD 02H
_tt_service_truetype_glyf DD FLAT:_tt_face_get_location
_tt_services DD	FLAT:$SG8901
	DD	FLAT:$SG8902
	DD	FLAT:$SG8903
	DD	FLAT:_tt_service_gx_multi_masters
	DD	FLAT:$SG8904
	DD	FLAT:_tt_service_truetype_engine
	DD	FLAT:$SG8905
	DD	FLAT:_tt_service_truetype_glyf
	DD	FLAT:$SG8906
	DD	FLAT:_tt_service_properties
	DD	00H
	DD	00H
	ORG $+4
_Pop_Push_Count DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	02H
	DB	02H
	DB	00H
	DB	050H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	00H
	DB	00H
	DB	010H
	DB	00H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	012H
	DB	010H
	DB	00H
	DB	022H
	DB	01H
	DB	011H
	DB	010H
	DB	020H
	DB	00H
	DB	010H
	DB	020H
	DB	010H
	DB	010H
	DB	00H
	DB	010H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	00H
	DB	020H
	DB	020H
	DB	00H
	DB	00H
	DB	020H
	DB	020H
	DB	00H
	DB	00H
	DB	020H
	DB	011H
	DB	020H
	DB	011H
	DB	011H
	DB	011H
	DB	020H
	DB	021H
	DB	021H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	010H
	DB	021H
	DB	021H
	DB	021H
	DB	021H
	DB	021H
	DB	021H
	DB	011H
	DB	011H
	DB	010H
	DB	00H
	DB	021H
	DB	021H
	DB	011H
	DB	010H
	DB	010H
	DB	010H
	DB	021H
	DB	021H
	DB	021H
	DB	021H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	020H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	020H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	010H
	DB	00H
	DB	020H
	DB	020H
	DB	00H
	DB	00H
	DB	010H
	DB	020H
	DB	020H
	DB	011H
	DB	010H
	DB	033H
	DB	021H
	DB	021H
	DB	010H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
_opcode_name DD	FLAT:$SG11083
	DD	FLAT:$SG11084
	DD	FLAT:$SG11085
	DD	FLAT:$SG11086
	DD	FLAT:$SG11087
	DD	FLAT:$SG11088
	DD	FLAT:$SG11089
	DD	FLAT:$SG11090
	DD	FLAT:$SG11091
	DD	FLAT:$SG11092
	DD	FLAT:$SG11093
	DD	FLAT:$SG11094
	DD	FLAT:$SG11095
	DD	FLAT:$SG11096
	DD	FLAT:$SG11097
	DD	FLAT:$SG11098
	DD	FLAT:$SG11099
	DD	FLAT:$SG11100
	DD	FLAT:$SG11101
	DD	FLAT:$SG11102
	DD	FLAT:$SG11103
	DD	FLAT:$SG11104
	DD	FLAT:$SG11105
	DD	FLAT:$SG11106
	DD	FLAT:$SG11107
	DD	FLAT:$SG11108
	DD	FLAT:$SG11109
	DD	FLAT:$SG11110
	DD	FLAT:$SG11111
	DD	FLAT:$SG11112
	DD	FLAT:$SG11113
	DD	FLAT:$SG11114
	DD	FLAT:$SG11115
	DD	FLAT:$SG11116
	DD	FLAT:$SG11117
	DD	FLAT:$SG11118
	DD	FLAT:$SG11119
	DD	FLAT:$SG11120
	DD	FLAT:$SG11121
	DD	FLAT:$SG11122
	DD	FLAT:$SG11123
	DD	FLAT:$SG11124
	DD	FLAT:$SG11125
	DD	FLAT:$SG11126
	DD	FLAT:$SG11127
	DD	FLAT:$SG11128
	DD	FLAT:$SG11129
	DD	FLAT:$SG11130
	DD	FLAT:$SG11131
	DD	FLAT:$SG11132
	DD	FLAT:$SG11133
	DD	FLAT:$SG11134
	DD	FLAT:$SG11135
	DD	FLAT:$SG11136
	DD	FLAT:$SG11137
	DD	FLAT:$SG11138
	DD	FLAT:$SG11139
	DD	FLAT:$SG11140
	DD	FLAT:$SG11141
	DD	FLAT:$SG11142
	DD	FLAT:$SG11143
	DD	FLAT:$SG11144
	DD	FLAT:$SG11145
	DD	FLAT:$SG11146
	DD	FLAT:$SG11147
	DD	FLAT:$SG11148
	DD	FLAT:$SG11149
	DD	FLAT:$SG11150
	DD	FLAT:$SG11151
	DD	FLAT:$SG11152
	DD	FLAT:$SG11153
	DD	FLAT:$SG11154
	DD	FLAT:$SG11155
	DD	FLAT:$SG11156
	DD	FLAT:$SG11157
	DD	FLAT:$SG11158
	DD	FLAT:$SG11159
	DD	FLAT:$SG11160
	DD	FLAT:$SG11161
	DD	FLAT:$SG11162
	DD	FLAT:$SG11163
	DD	FLAT:$SG11164
	DD	FLAT:$SG11165
	DD	FLAT:$SG11166
	DD	FLAT:$SG11167
	DD	FLAT:$SG11168
	DD	FLAT:$SG11169
	DD	FLAT:$SG11170
	DD	FLAT:$SG11171
	DD	FLAT:$SG11172
	DD	FLAT:$SG11173
	DD	FLAT:$SG11174
	DD	FLAT:$SG11175
	DD	FLAT:$SG11176
	DD	FLAT:$SG11177
	DD	FLAT:$SG11178
	DD	FLAT:$SG11179
	DD	FLAT:$SG11180
	DD	FLAT:$SG11181
	DD	FLAT:$SG11182
	DD	FLAT:$SG11183
	DD	FLAT:$SG11184
	DD	FLAT:$SG11185
	DD	FLAT:$SG11186
	DD	FLAT:$SG11187
	DD	FLAT:$SG11188
	DD	FLAT:$SG11189
	DD	FLAT:$SG11190
	DD	FLAT:$SG11191
	DD	FLAT:$SG11192
	DD	FLAT:$SG11193
	DD	FLAT:$SG11194
	DD	FLAT:$SG11195
	DD	FLAT:$SG11196
	DD	FLAT:$SG11197
	DD	FLAT:$SG11198
	DD	FLAT:$SG11199
	DD	FLAT:$SG11200
	DD	FLAT:$SG11201
	DD	FLAT:$SG11202
	DD	FLAT:$SG11203
	DD	FLAT:$SG11204
	DD	FLAT:$SG11205
	DD	FLAT:$SG11206
	DD	FLAT:$SG11207
	DD	FLAT:$SG11208
	DD	FLAT:$SG11209
	DD	FLAT:$SG11210
	DD	FLAT:$SG11211
	DD	FLAT:$SG11212
	DD	FLAT:$SG11213
	DD	FLAT:$SG11214
	DD	FLAT:$SG11215
	DD	FLAT:$SG11216
	DD	FLAT:$SG11217
	DD	FLAT:$SG11218
	DD	FLAT:$SG11219
	DD	FLAT:$SG11220
	DD	FLAT:$SG11221
	DD	FLAT:$SG11222
	DD	FLAT:$SG11223
	DD	FLAT:$SG11224
	DD	FLAT:$SG11225
	DD	FLAT:$SG11226
	DD	FLAT:$SG11227
	DD	FLAT:$SG11228
	DD	FLAT:$SG11229
	DD	FLAT:$SG11230
	DD	FLAT:$SG11231
	DD	FLAT:$SG11232
	DD	FLAT:$SG11233
	DD	FLAT:$SG11234
	DD	FLAT:$SG11235
	DD	FLAT:$SG11236
	DD	FLAT:$SG11237
	DD	FLAT:$SG11238
	DD	FLAT:$SG11239
	DD	FLAT:$SG11240
	DD	FLAT:$SG11241
	DD	FLAT:$SG11242
	DD	FLAT:$SG11243
	DD	FLAT:$SG11244
	DD	FLAT:$SG11245
	DD	FLAT:$SG11246
	DD	FLAT:$SG11247
	DD	FLAT:$SG11248
	DD	FLAT:$SG11249
	DD	FLAT:$SG11250
	DD	FLAT:$SG11251
	DD	FLAT:$SG11252
	DD	FLAT:$SG11253
	DD	FLAT:$SG11254
	DD	FLAT:$SG11255
	DD	FLAT:$SG11256
	DD	FLAT:$SG11257
	DD	FLAT:$SG11258
	DD	FLAT:$SG11259
	DD	FLAT:$SG11260
	DD	FLAT:$SG11261
	DD	FLAT:$SG11262
	DD	FLAT:$SG11263
	DD	FLAT:$SG11264
	DD	FLAT:$SG11265
	DD	FLAT:$SG11266
	DD	FLAT:$SG11267
	DD	FLAT:$SG11268
	DD	FLAT:$SG11269
	DD	FLAT:$SG11270
	DD	FLAT:$SG11271
	DD	FLAT:$SG11272
	DD	FLAT:$SG11273
	DD	FLAT:$SG11274
	DD	FLAT:$SG11275
	DD	FLAT:$SG11276
	DD	FLAT:$SG11277
	DD	FLAT:$SG11278
	DD	FLAT:$SG11279
	DD	FLAT:$SG11280
	DD	FLAT:$SG11281
	DD	FLAT:$SG11282
	DD	FLAT:$SG11283
	DD	FLAT:$SG11284
	DD	FLAT:$SG11285
	DD	FLAT:$SG11286
	DD	FLAT:$SG11287
	DD	FLAT:$SG11288
	DD	FLAT:$SG11289
	DD	FLAT:$SG11290
	DD	FLAT:$SG11291
	DD	FLAT:$SG11292
	DD	FLAT:$SG11293
	DD	FLAT:$SG11294
	DD	FLAT:$SG11295
	DD	FLAT:$SG11296
	DD	FLAT:$SG11297
	DD	FLAT:$SG11298
	DD	FLAT:$SG11299
	DD	FLAT:$SG11300
	DD	FLAT:$SG11301
	DD	FLAT:$SG11302
	DD	FLAT:$SG11303
	DD	FLAT:$SG11304
	DD	FLAT:$SG11305
	DD	FLAT:$SG11306
	DD	FLAT:$SG11307
	DD	FLAT:$SG11308
	DD	FLAT:$SG11309
	DD	FLAT:$SG11310
	DD	FLAT:$SG11311
	DD	FLAT:$SG11312
	DD	FLAT:$SG11313
	DD	FLAT:$SG11314
	DD	FLAT:$SG11315
	DD	FLAT:$SG11316
	DD	FLAT:$SG11317
	DD	FLAT:$SG11318
	DD	FLAT:$SG11319
	DD	FLAT:$SG11320
	DD	FLAT:$SG11321
	DD	FLAT:$SG11322
	DD	FLAT:$SG11323
	DD	FLAT:$SG11324
	DD	FLAT:$SG11325
	DD	FLAT:$SG11326
	DD	FLAT:$SG11327
	DD	FLAT:$SG11328
	DD	FLAT:$SG11329
	DD	FLAT:$SG11330
	DD	FLAT:$SG11331
	DD	FLAT:$SG11332
	DD	FLAT:$SG11333
	DD	FLAT:$SG11334
	DD	FLAT:$SG11335
	DD	FLAT:$SG11336
	DD	FLAT:$SG11337
	DD	FLAT:$SG11338
CONST	ENDS
_DATA	SEGMENT
$SG11264 DB	'PushB[5]', 00H
	ORG $+3
$SG11265 DB	'PushB[6]', 00H
	ORG $+3
$SG11266 DB	'PushB[7]', 00H
	ORG $+3
$SG11267 DB	'PushW[0]', 00H
	ORG $+3
$SG11268 DB	'PushW[1]', 00H
	ORG $+3
$SG11269 DB	'PushW[2]', 00H
	ORG $+3
$SG11270 DB	'PushW[3]', 00H
	ORG $+3
$SG12295 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11271 DB	'PushW[4]', 00H
	ORG $+3
$SG11272 DB	'PushW[5]', 00H
	ORG $+3
$SG11273 DB	'PushW[6]', 00H
	ORG $+3
$SG11274 DB	'PushW[7]', 00H
	ORG $+3
$SG11275 DB	'MDRP[00]', 00H
	ORG $+3
$SG11276 DB	'MDRP[01]', 00H
	ORG $+3
$SG11277 DB	'MDRP[02]', 00H
	ORG $+3
$SG11278 DB	'MDRP[03]', 00H
	ORG $+3
$SG11279 DB	'MDRP[04]', 00H
	ORG $+3
$SG11280 DB	'MDRP[05]', 00H
	ORG $+3
$SG12305 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11281 DB	'MDRP[06]', 00H
	ORG $+3
$SG11282 DB	'MDRP[07]', 00H
	ORG $+3
$SG11283 DB	'MDRP[08]', 00H
	ORG $+3
$SG11284 DB	'MDRP[09]', 00H
	ORG $+3
$SG11285 DB	'MDRP[10]', 00H
	ORG $+3
$SG11286 DB	'MDRP[11]', 00H
	ORG $+3
$SG11287 DB	'MDRP[12]', 00H
	ORG $+3
$SG11288 DB	'MDRP[13]', 00H
	ORG $+3
$SG11289 DB	'MDRP[14]', 00H
	ORG $+3
$SG11290 DB	'MDRP[15]', 00H
	ORG $+3
$SG11291 DB	'MDRP[16]', 00H
	ORG $+3
$SG11292 DB	'MDRP[17]', 00H
	ORG $+3
$SG11293 DB	'MDRP[18]', 00H
	ORG $+3
$SG9245	DB	'd:\mozilla\modules\freetype2\src\truetype\ttpload.c', 00H
$SG11294 DB	'MDRP[19]', 00H
	ORG $+3
$SG11295 DB	'MDRP[20]', 00H
	ORG $+3
$SG11296 DB	'MDRP[21]', 00H
	ORG $+3
$SG11297 DB	'MDRP[22]', 00H
	ORG $+3
$SG11298 DB	'MDRP[23]', 00H
	ORG $+3
$SG11299 DB	'MDRP[24]', 00H
	ORG $+3
$SG11300 DB	'MDRP[25]', 00H
	ORG $+3
$SG12325 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11301 DB	'MDRP[26]', 00H
	ORG $+3
$SG11302 DB	'MDRP[27]', 00H
	ORG $+3
$SG11303 DB	'MDRP[28]', 00H
	ORG $+3
$SG11304 DB	'MDRP[29]', 00H
	ORG $+3
$SG11305 DB	'MDRP[30]', 00H
	ORG $+3
$SG11306 DB	'MDRP[31]', 00H
	ORG $+3
$SG11307 DB	'MIRP[00]', 00H
	ORG $+3
$SG11308 DB	'MIRP[01]', 00H
	ORG $+3
$SG13357 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11309 DB	'MIRP[02]', 00H
	ORG $+3
$SG11310 DB	'MIRP[03]', 00H
	ORG $+3
$SG11311 DB	'MIRP[04]', 00H
	ORG $+3
$SG13360 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11312 DB	'MIRP[05]', 00H
	ORG $+3
$SG11313 DB	'MIRP[06]', 00H
	ORG $+3
$SG11314 DB	'MIRP[07]', 00H
	ORG $+3
$SG11315 DB	'MIRP[08]', 00H
	ORG $+3
$SG13364 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11316 DB	'MIRP[09]', 00H
	ORG $+3
$SG11317 DB	'MIRP[10]', 00H
	ORG $+3
$SG11318 DB	'MIRP[11]', 00H
	ORG $+3
$SG13367 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11319 DB	'MIRP[12]', 00H
	ORG $+3
$SG11320 DB	'MIRP[13]', 00H
	ORG $+3
$SG11321 DB	'MIRP[14]', 00H
	ORG $+3
$SG13370 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11322 DB	'MIRP[15]', 00H
	ORG $+3
$SG12347 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11323 DB	'MIRP[16]', 00H
	ORG $+3
$SG11324 DB	'MIRP[17]', 00H
	ORG $+3
$SG11325 DB	'MIRP[18]', 00H
	ORG $+3
$SG11326 DB	'MIRP[19]', 00H
	ORG $+3
$SG11327 DB	'MIRP[20]', 00H
	ORG $+3
$SG13376 DB	'  The interpreter returned error 0x%x', 0aH, 00H
	ORG $+1
$SG11328 DB	'MIRP[21]', 00H
	ORG $+3
$SG11329 DB	'MIRP[22]', 00H
	ORG $+3
$SG11330 DB	'MIRP[23]', 00H
	ORG $+3
$SG11331 DB	'MIRP[24]', 00H
	ORG $+3
$SG11332 DB	'MIRP[25]', 00H
	ORG $+3
$SG11333 DB	'MIRP[26]', 00H
	ORG $+3
$SG11334 DB	'MIRP[27]', 00H
	ORG $+3
$SG11335 DB	'MIRP[28]', 00H
	ORG $+3
$SG11336 DB	'MIRP[29]', 00H
	ORG $+3
$SG11337 DB	'MIRP[30]', 00H
	ORG $+3
$SG11338 DB	'MIRP[31]', 00H
	ORG $+3
$SG12372 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10324 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG10333 DB	'tt_loader_init: grayscale change, re-executing `prep'' t'
	DB	'able', 0aH, 00H
	ORG $+3
$SG10355 DB	'tt_loader_init: could not access glyph table', 0aH, 00H
	ORG $+2
$SG12404 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG12415 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10377 DB	'TT_Load_Glyph: glyph index %d', 0aH, 00H
	ORG $+1
$SG12437 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10390 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG10392 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG12466 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG12490 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11470 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11473 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11475 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG12502 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG12520 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG9453	DB	'  advance width (font units): %d', 0aH, 00H
	ORG $+2
$SG9458	DB	'  left side bearing (font units): %d', 0aH, 00H
	ORG $+2
$SG12537 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG9481	DB	'  advance height (font units): %d', 0aH, 00H
	ORG $+1
$SG9486	DB	'  top side bearing (font units): %d', 0aH, 00H
	ORG $+3
$SG12560 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG13603 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgxvar.c', 00H
$SG12585 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG9560	DB	'Glyph %ld', 0aH, 00H
	ORG $+1
$SG12639 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10592 DB	'.notdef', 00H
$SG9577	DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG10613 DB	'TTF driver', 0aH, 00H
$SG10615 DB	'sfnt', 00H
	ORG $+3
$SG10617 DB	'tt_face_init: cannot access `sfnt'' module', 0aH, 00H
	ORG $+1
$SG10618 DB	'd:\mozilla\modules\freetype2\src\truetype\ttobjs.c', 00H
	ORG $+1
$SG12674 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10633 DB	'  not a TTF font', 0aH, 00H
	ORG $+2
$SG12684 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG9612	DB	'  # of contours: %d', 0aH, 00H
	ORG $+3
$SG9617	DB	'  xMin: %4d  xMax: %4d', 0aH, 00H
$SG9622	DB	'  yMin: %4d  yMax: %4d', 0aH, 00H
$SG10649 DB	'tt_face_init: Only the `.notdef'' glyph has an outline.', 0aH
	DB	'              Resetting scalable flag to FALSE.', 0aH, 00H
$SG10650 DB	'd:\mozilla\modules\freetype2\src\truetype\ttobjs.c', 00H
	ORG $+1
$SG12725 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10684 DB	'd:\mozilla\modules\freetype2\src\truetype\ttobjs.c', 00H
	ORG $+1
$SG10693 DB	'Executing `fpgm'' table.', 0aH, 00H
	ORG $+3
$SG12746 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10710 DB	'd:\mozilla\modules\freetype2\src\truetype\ttobjs.c', 00H
	ORG $+1
$SG12760 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG9688	DB	'  Instructions size: %u', 0aH, 00H
	ORG $+3
$SG12766 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10718 DB	'Executing `prep'' table.', 0aH, 00H
	ORG $+3
$SG9694	DB	'TT_Load_Simple_Glyph: instruction count mismatch', 0aH, 00H
	ORG $+2
$SG9695	DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG13793 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgxvar.c', 00H
$SG9708	DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG9709	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12797 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG12825 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG13857 DB	'Weight', 00H
	ORG $+1
$SG11811 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG8744	DB	'interpreter-version', 00H
$SG13866 DB	'Width', 00H
	ORG $+2
$SG9770	DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG11825 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG8753	DB	'tt_property_set: missing property `%s''', 0aH, 00H
$SG8754	DB	'd:\mozilla\modules\freetype2\src\truetype\ttdriver.c', 00H
	ORG $+3
$SG13875 DB	'OpticalSize', 00H
$SG13884 DB	'Slant', 00H
	ORG $+2
$SG8768	DB	'interpreter-version', 00H
$SG11845 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG8775	DB	'tt_property_get: missing property `%s''', 0aH, 00H
$SG8776	DB	'd:\mozilla\modules\freetype2\src\truetype\ttdriver.c', 00H
	ORG $+3
$SG10827 DB	'd:\mozilla\modules\freetype2\src\truetype\ttobjs.c', 00H
	ORG $+1
$SG13908 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgxvar.c', 00H
$SG13914 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgxvar.c', 00H
$SG10846 DB	'd:\mozilla\modules\freetype2\src\truetype\ttobjs.c', 00H
	ORG $+1
$SG11900 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11902 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11914 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG13966 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgxvar.c', 00H
$SG11924 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG13975 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgxvar.c', 00H
$SG9884	DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG12964 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG8874	DB	'd:\mozilla\modules\freetype2\src\truetype\ttdriver.c', 00H
	ORG $+3
$SG10924 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG8876	DB	'd:\mozilla\modules\freetype2\src\truetype\ttdriver.c', 00H
	ORG $+3
$SG11949 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10925 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11950 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG8878	DB	'd:\mozilla\modules\freetype2\src\truetype\ttdriver.c', 00H
	ORG $+3
$SG8881	DB	'd:\mozilla\modules\freetype2\src\truetype\ttdriver.c', 00H
	ORG $+3
$SG10931 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10932 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12983 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10938 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10939 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9916	DB	'TT_Hint_Glyph: too long instructions', 00H
	ORG $+3
$SG9921	DB	' (0x%lx byte) is truncated', 0aH, 00H
$SG11973 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG8901	DB	'xf86-driver-name', 00H
	ORG $+3
$SG8902	DB	'TrueType', 00H
	ORG $+3
$SG14023 DB	'CVAR ', 00H
	ORG $+2
$SG8903	DB	'multi-masters', 00H
	ORG $+2
$SG11976 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG8904	DB	'truetype-engine', 00H
$SG8905	DB	'tt-glyf', 00H
$SG10954 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG8906	DB	'properties', 00H
	ORG $+1
$SG13003 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10955 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14030 DB	'tt_face_vary_cvt: no blend specified', 0aH, 00H
	ORG $+2
$SG13010 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG14038 DB	'tt_face_vary_cvt: no `cvt '' table', 0aH, 00H
	ORG $+1
$SG10967 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11992 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10968 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11995 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG8923	DB	'sfnt', 00H
	ORG $+3
$SG14049 DB	'is missing', 0aH, 00H
$SG8932	DB	'truetype', 00H
	ORG $+3
$SG12008 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG14059 DB	'bad table version', 0aH, 00H
	ORG $+1
$SG12022 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG13049 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG13050 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11003 DB	'Init_Context: new object at 0x%08p', 0aH, 00H
$SG8956	DB	'Locations ', 00H
	ORG $+1
$SG8963	DB	'd:\mozilla\modules\freetype2\src\truetype\ttpload.c', 00H
$SG11012 DB	'Init_Context: not enough memory for %p', 0aH, 00H
$SG12038 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG13066 DB	'  ', 00H
	ORG $+1
$SG8970	DB	'table too large', 0aH, 00H
	ORG $+3
$SG8971	DB	'd:\mozilla\modules\freetype2\src\truetype\ttpload.c', 00H
$SG8978	DB	'table too large', 0aH, 00H
	ORG $+3
$SG13075 DB	0aH, 00H
	ORG $+2
$SG8979	DB	'd:\mozilla\modules\freetype2\src\truetype\ttpload.c', 00H
$SG12054 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10006 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG13082 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG8986	DB	'glyph count mismatch!  loca: %d, maxp: %d', 0aH, 00H
	ORG $+1
$SG13088 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG12070 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG9006	DB	'adjusting num_locations to %d', 0aH, 00H
	ORG $+1
$SG9014	DB	'loaded', 0aH, 00H
$SG12087 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG10054 DB	'  Instructions size = %d', 0aH, 00H
	ORG $+2
$SG12104 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11083 DB	'SVTCA y', 00H
$SG11084 DB	'SVTCA x', 00H
$SG11085 DB	'SPvTCA y', 00H
	ORG $+3
$SG11086 DB	'SPvTCA x', 00H
	ORG $+3
$SG11087 DB	'SFvTCA y', 00H
	ORG $+3
$SG10063 DB	'TT_Process_Composite_Glyph: too many instructions (%d) f'
	DB	'or glyph with length %d', 0aH, 00H
	ORG $+3
$SG11088 DB	'SFvTCA x', 00H
	ORG $+3
$SG10064 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG11089 DB	'SPvTL ||', 00H
	ORG $+3
$SG11090 DB	'SPvTL +', 00H
$SG11091 DB	'SFvTL ||', 00H
	ORG $+3
$SG11092 DB	'SFvTL +', 00H
$SG11093 DB	'SPvFS', 00H
	ORG $+2
$SG11094 DB	'SFvFS', 00H
	ORG $+2
$SG13143 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11095 DB	'GPV', 00H
$SG11096 DB	'GFV', 00H
$SG11097 DB	'SFvTPv', 00H
	ORG $+1
$SG11098 DB	'ISECT', 00H
	ORG $+2
$SG11099 DB	'SRP0', 00H
	ORG $+3
$SG12124 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11100 DB	'SRP1', 00H
	ORG $+3
$SG11101 DB	'SRP2', 00H
	ORG $+3
$SG11102 DB	'SZP0', 00H
	ORG $+3
$SG11103 DB	'SZP1', 00H
	ORG $+3
$SG11104 DB	'SZP2', 00H
	ORG $+3
$SG13153 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11105 DB	'SZPS', 00H
	ORG $+3
$SG11106 DB	'SLOOP', 00H
	ORG $+2
$SG11107 DB	'RTG', 00H
$SG13156 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11108 DB	'RTHG', 00H
	ORG $+3
$SG11109 DB	'SMD', 00H
$SG11110 DB	'ELSE', 00H
	ORG $+3
$SG11111 DB	'JMPR', 00H
	ORG $+3
$SG11112 DB	'SCvTCi', 00H
	ORG $+1
$SG11113 DB	'SSwCi', 00H
	ORG $+2
$SG11114 DB	'SSW', 00H
$SG11115 DB	'DUP', 00H
$SG14188 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgxvar.c', 00H
$SG11116 DB	'POP', 00H
$SG11122 DB	'AlignPTS', 00H
	ORG $+3
$SG9068	DB	'tt_face_get_location: too large offset=0x%08lx found for'
	DB	' gid=0x%04lx, exceeding the end of glyf table (0x%08lx)', 0aH
	DB	00H
	ORG $+3
$SG11117 DB	'CLEAR', 00H
	ORG $+2
$SG11118 DB	'SWAP', 00H
	ORG $+3
$SG11119 DB	'DEPTH', 00H
	ORG $+2
$SG11120 DB	'CINDEX', 00H
	ORG $+1
$SG11121 DB	'MINDEX', 00H
	ORG $+1
$SG11123 DB	'INS_$28', 00H
$SG11124 DB	'UTP', 00H
$SG9074	DB	'tt_face_get_location: too large offset=0x%08lx found for'
	DB	' gid=0x%04lx, truncate at the end of glyf table (0x%08lx)', 0aH
	DB	00H
	ORG $+1
$SG11125 DB	'LOOPCALL', 00H
	ORG $+3
$SG10101 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG11126 DB	'CALL', 00H
	ORG $+3
$SG13175 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11127 DB	'FDEF', 00H
	ORG $+3
$SG11128 DB	'ENDF', 00H
	ORG $+3
$SG11129 DB	'MDAP[0]', 00H
$SG10105 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG11130 DB	'MDAP[1]', 00H
$SG11131 DB	'IUP[0]', 00H
	ORG $+1
$SG11132 DB	'IUP[1]', 00H
	ORG $+1
$SG11133 DB	'SHP[0]', 00H
	ORG $+1
$SG11134 DB	'SHP[1]', 00H
	ORG $+1
$SG11135 DB	'SHC[0]', 00H
	ORG $+1
$SG11136 DB	'SHC[1]', 00H
	ORG $+1
$SG11137 DB	'SHZ[0]', 00H
	ORG $+1
$SG11138 DB	'SHZ[1]', 00H
	ORG $+1
$SG11139 DB	'SHPIX', 00H
	ORG $+2
$SG11140 DB	'IP', 00H
	ORG $+1
$SG12165 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11141 DB	'MSIRP[0]', 00H
	ORG $+3
$SG11142 DB	'MSIRP[1]', 00H
	ORG $+3
$SG11143 DB	'AlignRP', 00H
$SG11144 DB	'RTDG', 00H
	ORG $+3
$SG10120 DB	'no `glyf'' table but non-zero `loca'' entry', 0aH, 00H
	ORG $+1
$SG9096	DB	'CVT ', 00H
	ORG $+3
$SG11145 DB	'MIAP[0]', 00H
$SG10121 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG11146 DB	'MIAP[1]', 00H
$SG11147 DB	'NPushB', 00H
	ORG $+1
$SG11148 DB	'NPushW', 00H
	ORG $+1
$SG11149 DB	'WS', 00H
	ORG $+1
$SG11150 DB	'RS', 00H
	ORG $+1
$SG11151 DB	'WCvtP', 00H
	ORG $+2
$SG11152 DB	'RCvt', 00H
	ORG $+3
$SG11153 DB	'GC[0]', 00H
	ORG $+2
$SG11154 DB	'GC[1]', 00H
	ORG $+2
$SG11155 DB	'SCFS', 00H
	ORG $+3
$SG9107	DB	'is missing', 0aH, 00H
$SG11156 DB	'MD[0]', 00H
	ORG $+2
$SG11157 DB	'MD[1]', 00H
	ORG $+2
$SG14230 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgxvar.c', 00H
$SG11158 DB	'MPPEM', 00H
	ORG $+2
$SG11159 DB	'MPS', 00H
$SG13208 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11160 DB	'FlipON', 00H
	ORG $+1
$SG11161 DB	'FlipOFF', 00H
$SG11162 DB	'DEBUG', 00H
	ORG $+2
$SG11163 DB	'LT', 00H
	ORG $+1
$SG11164 DB	'LTEQ', 00H
	ORG $+3
$SG12189 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11165 DB	'GT', 00H
	ORG $+1
$SG11166 DB	'GTEQ', 00H
	ORG $+3
$SG11167 DB	'EQ', 00H
	ORG $+1
$SG11168 DB	'NEQ', 00H
$SG11169 DB	'ODD', 00H
$SG11170 DB	'EVEN', 00H
	ORG $+3
$SG11171 DB	'IF', 00H
	ORG $+1
$SG11172 DB	'EIF', 00H
$SG11173 DB	'AND', 00H
$SG9125	DB	'loaded', 0aH, 00H
$SG11174 DB	'OR', 00H
	ORG $+1
$SG11175 DB	'NOT', 00H
$SG11176 DB	'DeltaP1', 00H
$SG11177 DB	'SDB', 00H
$SG11178 DB	'SDS', 00H
$SG11179 DB	'ADD', 00H
$SG11180 DB	'SUB', 00H
$SG11181 DB	'DIV', 00H
$SG12206 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11182 DB	'MUL', 00H
$SG11183 DB	'ABS', 00H
$SG11184 DB	'NEG', 00H
$SG11185 DB	'FLOOR', 00H
	ORG $+2
$SG11186 DB	'CEILING', 00H
$SG9138	DB	'Font program ', 00H
	ORG $+2
$SG11187 DB	'ROUND[0]', 00H
	ORG $+3
$SG11188 DB	'ROUND[1]', 00H
	ORG $+3
$SG11189 DB	'ROUND[2]', 00H
	ORG $+3
$SG11190 DB	'ROUND[3]', 00H
	ORG $+3
$SG11191 DB	'NROUND[0]', 00H
	ORG $+2
$SG11192 DB	'NROUND[1]', 00H
	ORG $+2
$SG11193 DB	'NROUND[2]', 00H
	ORG $+2
$SG11194 DB	'NROUND[3]', 00H
	ORG $+2
$SG13243 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11195 DB	'WCvtF', 00H
	ORG $+2
$SG11196 DB	'DeltaP2', 00H
$SG11197 DB	'DeltaP3', 00H
$SG11198 DB	'DeltaCn[0]', 00H
	ORG $+1
$SG9150	DB	'is missing', 0aH, 00H
$SG12223 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11199 DB	'DeltaCn[1]', 00H
	ORG $+1
$SG11200 DB	'DeltaCn[2]', 00H
	ORG $+1
$SG11201 DB	'SROUND', 00H
	ORG $+1
$SG11202 DB	'S45Round', 00H
	ORG $+3
$SG11203 DB	'JROT', 00H
	ORG $+3
$SG11204 DB	'JROF', 00H
	ORG $+3
$SG11205 DB	'ROFF', 00H
	ORG $+3
$SG11206 DB	'INS_$7B', 00H
$SG11207 DB	'RUTG', 00H
	ORG $+3
$SG11208 DB	'RDTG', 00H
	ORG $+3
$SG9160	DB	'loaded, %12d bytes', 0aH, 00H
$SG11209 DB	'SANGW', 00H
	ORG $+2
$SG11210 DB	'AA', 00H
	ORG $+1
$SG11211 DB	'FlipPT', 00H
	ORG $+1
$SG11212 DB	'FlipRgON', 00H
	ORG $+3
$SG11213 DB	'FlipRgOFF', 00H
	ORG $+2
$SG11214 DB	'INS_$83', 00H
$SG13263 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11215 DB	'INS_$84', 00H
$SG12240 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11216 DB	'ScanCTRL', 00H
	ORG $+3
$SG11217 DB	'SDVPTL[0]', 00H
	ORG $+2
$SG11218 DB	'SDVPTL[1]', 00H
	ORG $+2
$SG11219 DB	'GetINFO', 00H
$SG11220 DB	'IDEF', 00H
	ORG $+3
$SG9172	DB	'Prep program ', 00H
	ORG $+2
$SG11221 DB	'ROLL', 00H
	ORG $+3
$SG13270 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11222 DB	'MAX', 00H
$SG11223 DB	'MIN', 00H
$SG11224 DB	'ScanTYPE', 00H
	ORG $+3
$SG11225 DB	'InstCTRL', 00H
	ORG $+3
$SG11226 DB	'INS_$8F', 00H
$SG11227 DB	'INS_$90', 00H
$SG11228 DB	'INS_$91', 00H
$SG11229 DB	'INS_$92', 00H
$SG11230 DB	'INS_$93', 00H
$SG12255 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11231 DB	'INS_$94', 00H
$SG11232 DB	'INS_$95', 00H
$SG9184	DB	'is missing', 0aH, 00H
$SG11233 DB	'INS_$96', 00H
$SG11234 DB	'INS_$97', 00H
$SG11235 DB	'INS_$98', 00H
$SG11236 DB	'INS_$99', 00H
$SG11237 DB	'INS_$9A', 00H
$SG11238 DB	'INS_$9B', 00H
$SG11239 DB	'INS_$9C', 00H
$SG11240 DB	'INS_$9D', 00H
$SG10216 DB	'd:\mozilla\modules\freetype2\src\truetype\ttgload.c', 00H
$SG11241 DB	'INS_$9E', 00H
$SG11242 DB	'INS_$9F', 00H
$SG9194	DB	'loaded, %12d bytes', 0aH, 00H
$SG11243 DB	'INS_$A0', 00H
$SG11244 DB	'INS_$A1', 00H
$SG11245 DB	'INS_$A2', 00H
$SG11246 DB	'INS_$A3', 00H
$SG11247 DB	'INS_$A4', 00H
$SG11248 DB	'INS_$A5', 00H
$SG11249 DB	'INS_$A6', 00H
$SG13298 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11250 DB	'INS_$A7', 00H
$SG11251 DB	'INS_$A8', 00H
$SG11252 DB	'INS_$A9', 00H
$SG13301 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11253 DB	'INS_$AA', 00H
$SG11254 DB	'INS_$AB', 00H
$SG11255 DB	'INS_$AC', 00H
$SG11256 DB	'INS_$AD', 00H
$SG13305 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11257 DB	'INS_$AE', 00H
$SG11258 DB	'INS_$AF', 00H
$SG11259 DB	'PushB[0]', 00H
	ORG $+3
$SG13308 DB	'd:\mozilla\modules\freetype2\src\truetype\ttinterp.c', 00H
	ORG $+3
$SG11260 DB	'PushB[1]', 00H
	ORG $+3
$SG11261 DB	'PushB[2]', 00H
	ORG $+3
$SG11262 DB	'PushB[3]', 00H
	ORG $+3
$SG11263 DB	'PushB[4]', 00H
_DATA	ENDS
PUBLIC	_TT_New_Context
PUBLIC	_TT_RunIns
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	__imp__memmove:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp__strstr:PROC
EXTRN	_FT_Get_Glyph_Name:PROC
EXTRN	_FT_MulDiv:PROC
EXTRN	_FT_DivFix:PROC
EXTRN	_FT_Vector_Transform:PROC
EXTRN	_FT_Get_Module:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_FT_GlyphLoader_CreateExtra:PROC
EXTRN	_FT_GlyphLoader_Rewind:PROC
EXTRN	_FT_GlyphLoader_CheckPoints:PROC
EXTRN	_FT_GlyphLoader_CheckSubGlyphs:PROC
EXTRN	_FT_GlyphLoader_Add:PROC
EXTRN	_ft_service_list_lookup:PROC
EXTRN	_FT_Get_Module_Interface:PROC
EXTRN	_FT_Select_Metrics:PROC
EXTRN	_FT_Request_Metrics:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Panic:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_FT_Stream_OpenMemory:PROC
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Pos:PROC
EXTRN	_FT_Stream_Read:PROC
EXTRN	_FT_Stream_EnterFrame:PROC
EXTRN	_FT_Stream_ExitFrame:PROC
EXTRN	_FT_Stream_ExtractFrame:PROC
EXTRN	_FT_Stream_ReleaseFrame:PROC
EXTRN	_FT_Stream_GetChar:PROC
EXTRN	_FT_Stream_GetUShort:PROC
EXTRN	_FT_Stream_GetULong:PROC
EXTRN	_FT_Stream_ReadUShort:PROC
EXTRN	_FT_Stream_ReadFields:PROC
EXTRN	_FT_MulDiv_No_Round:PROC
EXTRN	_FT_Hypot:PROC
EXTRN	_FT_Outline_Get_CBox:PROC
EXTRN	_FT_Outline_Translate:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv135 = -12						; size = 4
_apply$ = -8						; size = 4
_i$ = -4						; size = 4
_blend$ = 8						; size = 4
_tupleIndex$ = 12					; size = 2
_tuple_coords$ = 16					; size = 4
_im_start_coords$ = 20					; size = 4
_im_end_coords$ = 24					; size = 4
_ft_var_apply_tuple PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgxvar.c
; Line 504
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 506
	mov	DWORD PTR _apply$[ebp], 65536		; 00010000H
; Line 509
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@ft_var_app
$LN15@ft_var_app:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@ft_var_app:
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	$LN14@ft_var_app
; Line 511
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tuple_coords$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN13@ft_var_app
; Line 516
	jmp	SHORT $LN15@ft_var_app
; Line 518
	jmp	$LN12@ft_var_app
$LN13@ft_var_app:
; Line 520
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN10@ft_var_app
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	jge	SHORT $LN9@ft_var_app
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tuple_coords$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	jg	SHORT $LN10@ft_var_app
$LN9@ft_var_app:
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jle	SHORT $LN11@ft_var_app
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _tuple_coords$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jge	SHORT $LN11@ft_var_app
$LN10@ft_var_app:
; Line 522
	mov	DWORD PTR _apply$[ebp], 0
; Line 523
	jmp	$LN14@ft_var_app
	jmp	$LN12@ft_var_app
$LN11@ft_var_app:
; Line 526
	movzx	eax, WORD PTR _tupleIndex$[ebp]
	and	eax, 16384				; 00004000H
	jne	SHORT $LN7@ft_var_app
; Line 531
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jle	SHORT $LN19@ft_var_app
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv135[ebp], ecx
	jmp	SHORT $LN20@ft_var_app
$LN19@ft_var_app:
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	neg	edx
	mov	DWORD PTR tv135[ebp], edx
$LN20@ft_var_app:
	mov	eax, DWORD PTR tv135[ebp]
	push	eax
	mov	ecx, DWORD PTR _apply$[ebp]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _apply$[ebp], eax
; Line 533
	jmp	$LN12@ft_var_app
$LN7@ft_var_app:
; Line 534
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _im_start_coords$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	jle	SHORT $LN4@ft_var_app
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _im_end_coords$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	cmp	edx, DWORD PTR [esi+ecx*4]
	jl	SHORT $LN5@ft_var_app
$LN4@ft_var_app:
; Line 536
	mov	DWORD PTR _apply$[ebp], 0
; Line 537
	jmp	$LN14@ft_var_app
	jmp	$LN12@ft_var_app
$LN5@ft_var_app:
; Line 540
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _tuple_coords$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	cmp	ecx, DWORD PTR [esi+eax*4]
	jge	SHORT $LN2@ft_var_app
; Line 543
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tuple_coords$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _im_start_coords$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	sub	edx, DWORD PTR [esi+ecx*4]
	push	edx
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _im_start_coords$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	sub	ecx, DWORD PTR [esi+eax*4]
	push	ecx
	mov	edx, DWORD PTR _apply$[ebp]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _apply$[ebp], eax
; Line 545
	jmp	SHORT $LN12@ft_var_app
$LN2@ft_var_app:
; Line 548
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _im_end_coords$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _tuple_coords$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	sub	eax, DWORD PTR [esi+edx*4]
	push	eax
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _im_end_coords$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	sub	eax, DWORD PTR [edx+esi*4]
	push	eax
	mov	ecx, DWORD PTR _apply$[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _apply$[ebp], eax
$LN12@ft_var_app:
; Line 549
	jmp	$LN15@ft_var_app
$LN14@ft_var_app:
; Line 551
	mov	eax, DWORD PTR _apply$[ebp]
; Line 552
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_var_apply_tuple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gvar_head$ = -80					; size = 20
_offsetToData$ = -56					; size = 4
_gvar_start$ = -52					; size = 4
_table_len$ = -44					; size = 4
_j$ = -36						; size = 4
_i$ = -32						; size = 4
_error$ = -24						; size = 4
_blend$ = -16						; size = 4
_memory$ = -12						; size = 4
_stream$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_ft_var_load_gvar PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgxvar.c
; Line 375
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 376
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 377
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _memory$[ebp], eax
; Line 378
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+676]
	mov	DWORD PTR _blend$[ebp], edx
; Line 403
	mov	esi, esp
	lea	eax, DWORD PTR _table_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1735811442				; 67766172H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN25@ft_var_loa
; Line 404
	jmp	$Exit$33
$LN25@ft_var_loa:
; Line 406
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _gvar_start$[ebp], eax
; Line 407
	lea	eax, DWORD PTR _gvar_head$[ebp]
	push	eax
	push	OFFSET ?gvar_fields@?1??ft_var_load_gvar@@9@9
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN24@ft_var_loa
; Line 408
	jmp	$Exit$33
$LN24@ft_var_loa:
; Line 410
	movzx	edx, WORD PTR _gvar_head$[ebp+6]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+24], edx
; Line 411
	movzx	ecx, WORD PTR _gvar_head$[ebp+12]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+32], ecx
; Line 412
	mov	eax, DWORD PTR _gvar_start$[ebp]
	add	eax, DWORD PTR _gvar_head$[ebp+16]
	mov	DWORD PTR _offsetToData$[ebp], eax
; Line 415
	cmp	DWORD PTR _gvar_head$[ebp], 65536	; 00010000H
	jne	SHORT $LN22@ft_var_loa
	movzx	ecx, WORD PTR _gvar_head$[ebp+4]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	edx, WORD PTR [eax]
	cmp	ecx, edx
	je	SHORT $LN23@ft_var_loa
$LN22@ft_var_loa:
; Line 417
	push	OFFSET $SG13603
	push	417					; 000001a1H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 418
	jmp	$Exit$33
$LN23@ft_var_loa:
; Line 421
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 1
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+36], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@ft_var_loa
; Line 422
	jmp	$Exit$33
$LN21@ft_var_loa:
; Line 424
	movzx	edx, WORD PTR _gvar_head$[ebp+14]
	and	edx, 1
	je	SHORT $LN20@ft_var_loa
; Line 427
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	lea	edx, DWORD PTR [ecx*4+4]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@ft_var_loa
; Line 428
	jmp	$Exit$33
$LN19@ft_var_loa:
; Line 430
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@ft_var_loa
$LN17@ft_var_loa:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN18@ft_var_loa:
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+32]
	ja	SHORT $LN16@ft_var_loa
; Line 431
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetULong
	add	esp, 4
	add	eax, DWORD PTR _offsetToData$[ebp]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN17@ft_var_loa
$LN16@ft_var_loa:
; Line 433
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 435
	jmp	SHORT $LN15@ft_var_loa
$LN20@ft_var_loa:
; Line 438
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	lea	eax, DWORD PTR [edx+edx+2]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@ft_var_loa
; Line 439
	jmp	$Exit$33
$LN14@ft_var_loa:
; Line 441
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@ft_var_loa
$LN12@ft_var_loa:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@ft_var_loa:
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	ja	SHORT $LN11@ft_var_loa
; Line 442
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	eax, ax
	mov	ecx, DWORD PTR _offsetToData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN12@ft_var_loa
$LN11@ft_var_loa:
; Line 445
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExitFrame
	add	esp, 4
$LN15@ft_var_loa:
; Line 448
	mov	edx, DWORD PTR _blend$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	$Exit$33
; Line 451
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	movzx	ecx, WORD PTR _gvar_head$[ebp+4]
	mov	edx, DWORD PTR _blend$[ebp]
	imul	ecx, DWORD PTR [edx+24]
	push	ecx
	push	0
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+28], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@ft_var_loa
; Line 452
	jmp	$Exit$33
$LN9@ft_var_loa:
; Line 455
	mov	edx, DWORD PTR _gvar_start$[ebp]
	add	edx, DWORD PTR _gvar_head$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN7@ft_var_loa
	movzx	ecx, WORD PTR _gvar_head$[ebp+4]
	mov	edx, DWORD PTR _blend$[ebp]
	imul	ecx, DWORD PTR [edx+24]
	shl	ecx, 1
	push	ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@ft_var_loa
$LN7@ft_var_loa:
; Line 456
	jmp	SHORT $Exit$33
$LN8@ft_var_loa:
; Line 458
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@ft_var_loa
$LN5@ft_var_loa:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@ft_var_loa:
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jae	SHORT $LN4@ft_var_loa
; Line 459
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@ft_var_loa
$LN2@ft_var_loa:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN3@ft_var_loa:
	movzx	edx, WORD PTR _gvar_head$[ebp+4]
	cmp	DWORD PTR _j$[ebp], edx
	jae	SHORT $LN1@ft_var_loa
; Line 461
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	ecx, ax
	shl	ecx, 2
	movzx	edx, WORD PTR _gvar_head$[ebp+4]
	imul	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN2@ft_var_loa
$LN1@ft_var_loa:
	jmp	SHORT $LN5@ft_var_loa
$LN4@ft_var_loa:
; Line 463
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExitFrame
	add	esp, 4
$Exit$33:
; Line 467
	mov	eax, DWORD PTR _error$[ebp]
; Line 468
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@ft_var_loa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN32@ft_var_loa:
	DD	3
	DD	$LN31@ft_var_loa
$LN31@ft_var_loa:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN28@ft_var_loa
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN29@ft_var_loa
	DD	-80					; ffffffb0H
	DD	20					; 00000014H
	DD	$LN30@ft_var_loa
$LN30@ft_var_loa:
	DB	103					; 00000067H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN29@ft_var_loa:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN28@ft_var_loa:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_var_load_gvar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_table_len$ = -52					; size = 4
_j$ = -44						; size = 4
_i$ = -40						; size = 4
_axisCount$ = -36					; size = 4
_version$ = -32						; size = 4
_error$ = -24						; size = 4
_segment$ = -16						; size = 4
_blend$ = -12						; size = 4
_memory$ = -8						; size = 4
_stream$ = -4						; size = 4
_face$ = 8						; size = 4
_ft_var_load_avar PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgxvar.c
; Line 283
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 284
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 285
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _memory$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+676]
	mov	DWORD PTR _blend$[ebp], edx
; Line 288
	mov	DWORD PTR _error$[ebp], 0
; Line 294
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR _error$[ebp], eax
; Line 297
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	BYTE PTR [ecx+16], 1
; Line 298
	mov	esi, esp
	lea	edx, DWORD PTR _table_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	1635148146				; 61766172H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@ft_var_loa
; Line 299
	jmp	$LN22@ft_var_loa
$LN21@ft_var_loa:
; Line 301
	mov	ecx, DWORD PTR _table_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@ft_var_loa
; Line 302
	jmp	$LN22@ft_var_loa
$LN20@ft_var_loa:
; Line 304
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	DWORD PTR _version$[ebp], eax
; Line 305
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	DWORD PTR _axisCount$[ebp], eax
; Line 308
	cmp	DWORD PTR _version$[ebp], 65536		; 00010000H
	jne	SHORT $LN18@ft_var_loa
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _axisCount$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN19@ft_var_loa
$LN18@ft_var_loa:
; Line 309
	jmp	$Exit$28
$LN19@ft_var_loa:
; Line 311
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _axisCount$[ebp]
	push	eax
	push	0
	push	8
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+20], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@ft_var_loa
; Line 312
	jmp	$Exit$28
$LN17@ft_var_loa:
; Line 314
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _blend$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _segment$[ebp], ecx
; Line 315
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@ft_var_loa
$LN15@ft_var_loa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _segment$[ebp]
	add	ecx, 8
	mov	DWORD PTR _segment$[ebp], ecx
$LN16@ft_var_loa:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _axisCount$[ebp]
	jge	$Exit$28
; Line 317
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	ecx, DWORD PTR _segment$[ebp]
	mov	WORD PTR [ecx], ax
; Line 318
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _segment$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	push	0
	push	8
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _segment$[ebp]
	mov	DWORD PTR [ecx+4], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@ft_var_loa
; Line 323
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	jmp	SHORT $LN12@ft_var_loa
$LN11@ft_var_loa:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@ft_var_loa:
	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $LN6@ft_var_loa
$LN9@ft_var_loa:
; Line 324
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8+4]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+edx*8+4], 0
	xor	eax, eax
	jne	SHORT $LN9@ft_var_loa
	jmp	SHORT $LN11@ft_var_loa
$LN6@ft_var_loa:
; Line 326
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+20], 0
	xor	edx, edx
	jne	SHORT $LN6@ft_var_loa
; Line 327
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 328
	jmp	SHORT $Exit$28
$LN13@ft_var_loa:
; Line 331
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@ft_var_loa
$LN2@ft_var_loa:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN3@ft_var_loa:
	mov	edx, DWORD PTR _segment$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN1@ft_var_loa
; Line 334
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	edx, ax
	shl	edx, 2
	mov	eax, DWORD PTR _segment$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+eax*8], edx
; Line 336
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	edx, ax
	shl	edx, 2
	mov	eax, DWORD PTR _segment$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 337
	jmp	SHORT $LN2@ft_var_loa
$LN1@ft_var_loa:
; Line 338
	jmp	$LN15@ft_var_loa
$Exit$28:
; Line 341
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExitFrame
	add	esp, 4
$LN22@ft_var_loa:
; Line 342
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@ft_var_loa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN27@ft_var_loa:
	DD	2
	DD	$LN26@ft_var_loa
$LN26@ft_var_loa:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN24@ft_var_loa
	DD	-52					; ffffffccH
	DD	4
	DD	$LN25@ft_var_loa
$LN25@ft_var_loa:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN24@ft_var_loa:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_var_load_avar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -28						; size = 4
_memory$ = -20						; size = 4
_j$ = -16						; size = 4
_i$ = -12						; size = 4
_runcnt$ = -8						; size = 4
_deltas$ = -4						; size = 4
_stream$ = 8						; size = 4
_delta_cnt$ = 12					; size = 4
_ft_var_readpackeddeltas PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgxvar.c
; Line 214
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 215
	mov	DWORD PTR _deltas$[ebp], 0
; Line 219
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 220
	mov	DWORD PTR _error$[ebp], 0
; Line 222
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR _error$[ebp], edx
; Line 225
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _delta_cnt$[ebp]
	push	ecx
	push	0
	push	2
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _deltas$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@ft_var_rea
; Line 226
	xor	eax, eax
	jmp	$LN21@ft_var_rea
$LN20@ft_var_rea:
; Line 228
	mov	DWORD PTR _i$[ebp], 0
$LN19@ft_var_rea:
; Line 229
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _delta_cnt$[ebp]
	jae	$LN18@ft_var_rea
; Line 231
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetChar
	add	esp, 4
	movzx	edx, al
	mov	DWORD PTR _runcnt$[ebp], edx
; Line 232
	mov	eax, DWORD PTR _runcnt$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN17@ft_var_rea
; Line 237
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN16@ft_var_rea
$LN15@ft_var_rea:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN16@ft_var_rea:
	mov	edx, DWORD PTR _runcnt$[ebp]
	and	edx, 63					; 0000003fH
	cmp	DWORD PTR _j$[ebp], edx
	ja	SHORT $LN14@ft_var_rea
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _delta_cnt$[ebp]
	jae	SHORT $LN14@ft_var_rea
; Line 238
	xor	ecx, ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _deltas$[ebp]
	mov	WORD PTR [eax+edx*2], cx
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN15@ft_var_rea
$LN14@ft_var_rea:
; Line 240
	jmp	$LN13@ft_var_rea
$LN17@ft_var_rea:
	mov	edx, DWORD PTR _runcnt$[ebp]
	and	edx, 64					; 00000040H
	je	SHORT $LN12@ft_var_rea
; Line 245
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN11@ft_var_rea
$LN10@ft_var_rea:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN11@ft_var_rea:
	mov	ecx, DWORD PTR _runcnt$[ebp]
	and	ecx, 63					; 0000003fH
	cmp	DWORD PTR _j$[ebp], ecx
	ja	SHORT $LN9@ft_var_rea
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _delta_cnt$[ebp]
	jae	SHORT $LN9@ft_var_rea
; Line 246
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _deltas$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN10@ft_var_rea
$LN9@ft_var_rea:
; Line 248
	jmp	SHORT $LN13@ft_var_rea
$LN12@ft_var_rea:
; Line 253
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@ft_var_rea
$LN6@ft_var_rea:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN7@ft_var_rea:
	mov	edx, DWORD PTR _runcnt$[ebp]
	and	edx, 63					; 0000003fH
	cmp	DWORD PTR _j$[ebp], edx
	ja	SHORT $LN13@ft_var_rea
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _delta_cnt$[ebp]
	jae	SHORT $LN13@ft_var_rea
; Line 254
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetChar
	add	esp, 4
	movsx	dx, al
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _deltas$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN6@ft_var_rea
$LN13@ft_var_rea:
; Line 257
	mov	eax, DWORD PTR _runcnt$[ebp]
	and	eax, 63					; 0000003fH
	cmp	DWORD PTR _j$[ebp], eax
	ja	SHORT $LN4@ft_var_rea
$LN3@ft_var_rea:
; Line 260
	mov	ecx, DWORD PTR _deltas$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _deltas$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@ft_var_rea
; Line 261
	xor	eax, eax
	jmp	SHORT $LN21@ft_var_rea
$LN4@ft_var_rea:
; Line 263
	jmp	$LN19@ft_var_rea
$LN18@ft_var_rea:
; Line 265
	mov	eax, DWORD PTR _deltas$[ebp]
$LN21@ft_var_rea:
; Line 266
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@ft_var_rea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN25@ft_var_rea:
	DD	1
	DD	$LN24@ft_var_rea
$LN24@ft_var_rea:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN23@ft_var_rea
$LN23@ft_var_rea:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_var_readpackeddeltas ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv147 = -44						; size = 2
tv95 = -42						; size = 2
_error$ = -36						; size = 4
_memory$ = -28						; size = 4
_first$ = -24						; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_runcnt$ = -12						; size = 4
_n$ = -8						; size = 4
_points$ = -4						; size = 4
_stream$ = 8						; size = 4
_point_cnt$ = 12					; size = 4
_ft_var_readpackedpoints PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgxvar.c
; Line 127
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 128
	mov	DWORD PTR _points$[ebp], 0
; Line 134
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 135
	mov	DWORD PTR _error$[ebp], 0
; Line 137
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR _error$[ebp], edx
; Line 140
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetChar
	add	esp, 4
	movzx	ecx, al
	mov	DWORD PTR _n$[ebp], ecx
	mov	edx, DWORD PTR _point_cnt$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx], eax
; Line 141
	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN17@ft_var_rea
; Line 142
	or	eax, -1
	jmp	$LN18@ft_var_rea
$LN17@ft_var_rea:
; Line 144
	mov	ecx, DWORD PTR _n$[ebp]
	and	ecx, 128				; 00000080H
	je	SHORT $LN16@ft_var_rea
; Line 145
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetChar
	add	esp, 4
	movzx	eax, al
	mov	ecx, DWORD PTR _n$[ebp]
	and	ecx, 127				; 0000007fH
	shl	ecx, 8
	or	eax, ecx
	mov	DWORD PTR _n$[ebp], eax
$LN16@ft_var_rea:
; Line 147
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	0
	push	2
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _points$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@ft_var_rea
; Line 148
	xor	eax, eax
	jmp	$LN18@ft_var_rea
$LN15@ft_var_rea:
; Line 150
	mov	DWORD PTR _i$[ebp], 0
$LN14@ft_var_rea:
; Line 151
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _n$[ebp]
	jge	$Exit$23
; Line 153
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetChar
	add	esp, 4
	movzx	ecx, al
	mov	DWORD PTR _runcnt$[ebp], ecx
; Line 154
	mov	edx, DWORD PTR _runcnt$[ebp]
	and	edx, 128				; 00000080H
	je	$LN12@ft_var_rea
; Line 156
	mov	eax, DWORD PTR _runcnt$[ebp]
	and	eax, 127				; 0000007fH
	mov	DWORD PTR _runcnt$[ebp], eax
; Line 157
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	WORD PTR tv95[ebp], ax
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	mov	cx, WORD PTR tv95[ebp]
	mov	WORD PTR [eax+edx*2], cx
	movzx	edx, WORD PTR tv95[ebp]
	mov	DWORD PTR _first$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 159
	cmp	DWORD PTR _runcnt$[ebp], 1
	jl	SHORT $LN10@ft_var_rea
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _runcnt$[ebp]
	cmp	ecx, DWORD PTR _n$[ebp]
	jl	SHORT $LN11@ft_var_rea
$LN10@ft_var_rea:
; Line 160
	jmp	$Exit$23
$LN11@ft_var_rea:
; Line 163
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN9@ft_var_rea
$LN8@ft_var_rea:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN9@ft_var_rea:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _runcnt$[ebp]
	jge	SHORT $LN7@ft_var_rea
; Line 164
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	edx, ax
	add	edx, DWORD PTR _first$[ebp]
	mov	DWORD PTR _first$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	mov	dx, WORD PTR _first$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN8@ft_var_rea
$LN7@ft_var_rea:
; Line 166
	jmp	$LN6@ft_var_rea
$LN12@ft_var_rea:
; Line 168
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetChar
	add	esp, 4
	movzx	dx, al
	mov	WORD PTR tv147[ebp], dx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	mov	dx, WORD PTR tv147[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	movzx	eax, WORD PTR tv147[ebp]
	mov	DWORD PTR _first$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 170
	cmp	DWORD PTR _runcnt$[ebp], 1
	jl	SHORT $LN4@ft_var_rea
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _runcnt$[ebp]
	cmp	edx, DWORD PTR _n$[ebp]
	jl	SHORT $LN5@ft_var_rea
$LN4@ft_var_rea:
; Line 171
	jmp	SHORT $Exit$23
$LN5@ft_var_rea:
; Line 173
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@ft_var_rea
$LN2@ft_var_rea:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@ft_var_rea:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _runcnt$[ebp]
	jge	SHORT $LN6@ft_var_rea
; Line 174
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetChar
	add	esp, 4
	movzx	eax, al
	add	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _first$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _points$[ebp]
	mov	ax, WORD PTR _first$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN2@ft_var_rea
$LN6@ft_var_rea:
; Line 176
	jmp	$LN14@ft_var_rea
$Exit$23:
; Line 179
	mov	eax, DWORD PTR _points$[ebp]
$LN18@ft_var_rea:
; Line 180
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@ft_var_rea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@ft_var_rea:
	DD	1
	DD	$LN21@ft_var_rea
$LN21@ft_var_rea:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN20@ft_var_rea
$LN20@ft_var_rea:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_var_readpackedpoints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_call$1 = -12						; size = 4
_limit$ = -8						; size = 4
_def$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_UNKNOWN PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 7850
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 7851
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	mov	DWORD PTR _def$[ebp], ecx
; Line 7852
	mov	edx, DWORD PTR _exc$[ebp]
	imul	eax, DWORD PTR [edx+408], 24
	add	eax, DWORD PTR _def$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 7854
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR _args$[ebp], edx
; Line 7857
	jmp	SHORT $LN5@Ins_UNKNOW
$LN4@Ins_UNKNOW:
	mov	eax, DWORD PTR _def$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _def$[ebp], eax
$LN5@Ins_UNKNOW:
	mov	ecx, DWORD PTR _def$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN3@Ins_UNKNOW
; Line 7859
	mov	edx, DWORD PTR _def$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+368]
	cmp	eax, edx
	jne	$LN2@Ins_UNKNOW
	mov	eax, DWORD PTR _def$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	$LN2@Ins_UNKNOW
; Line 7864
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [edx+428]
	cmp	ecx, DWORD PTR [eax+432]
	jl	SHORT $LN1@Ins_UNKNOW
; Line 7866
	push	OFFSET $SG13049
	push	7866					; 00001ebaH
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 7867
	jmp	$LN6@Ins_UNKNOW
$LN1@Ins_UNKNOW:
; Line 7870
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	shl	ecx, 4
	mov	edx, DWORD PTR _exc$[ebp]
	add	ecx, DWORD PTR [edx+436]
	mov	DWORD PTR _call$1[ebp], ecx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	add	ecx, 1
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+428], ecx
; Line 7872
	mov	eax, DWORD PTR _call$1[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+352]
	mov	DWORD PTR [eax], edx
; Line 7873
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	add	ecx, 1
	mov	edx, DWORD PTR _call$1[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 7874
	mov	eax, DWORD PTR _call$1[ebp]
	mov	DWORD PTR [eax+8], 1
; Line 7875
	mov	ecx, DWORD PTR _call$1[ebp]
	mov	edx, DWORD PTR _def$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 7877
	mov	eax, DWORD PTR _def$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _def$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_Goto_CodeRange
	add	esp, 12					; 0000000cH
; Line 7879
	mov	edx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [edx+376], 0
; Line 7880
	jmp	SHORT $LN6@Ins_UNKNOW
$LN2@Ins_UNKNOW:
; Line 7882
	jmp	$LN4@Ins_UNKNOW
$LN3@Ins_UNKNOW:
; Line 7884
	push	OFFSET $SG13050
	push	7884					; 00001eccH
	push	128					; 00000080H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN6@Ins_UNKNOW:
; Line 7885
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_UNKNOWN ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_K$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_GETINFO PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 7735
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 7739
	mov	DWORD PTR _K$[ebp], 0
; Line 7757
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 1
	je	SHORT $LN4@Ins_GETINF
; Line 7758
	mov	DWORD PTR _K$[ebp], 35			; 00000023H
$LN4@Ins_GETINF:
; Line 7765
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	and	ecx, 2
	je	SHORT $LN3@Ins_GETINF
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+281]
	test	eax, eax
	je	SHORT $LN3@Ins_GETINF
; Line 7766
	mov	ecx, DWORD PTR _K$[ebp]
	or	ecx, 128				; 00000080H
	mov	DWORD PTR _K$[ebp], ecx
$LN3@Ins_GETINF:
; Line 7773
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 4
	je	SHORT $LN2@Ins_GETINF
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+282]
	test	ecx, ecx
	je	SHORT $LN2@Ins_GETINF
; Line 7774
	mov	edx, DWORD PTR _K$[ebp]
	or	edx, 256				; 00000100H
	mov	DWORD PTR _K$[ebp], edx
$LN2@Ins_GETINF:
; Line 7781
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 32					; 00000020H
	je	SHORT $LN1@Ins_GETINF
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+608]
	test	edx, edx
	je	SHORT $LN1@Ins_GETINF
; Line 7782
	mov	eax, DWORD PTR _K$[ebp]
	or	eax, 4096				; 00001000H
	mov	DWORD PTR _K$[ebp], eax
$LN1@Ins_GETINF:
; Line 7844
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 7845
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_GETINFO ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv142 = -28						; size = 4
_B$ = -24						; size = 4
_P$ = -20						; size = 4
_C$ = -16						; size = 4
_A$ = -12						; size = 4
_k$ = -8						; size = 4
_nump$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_DELTAC PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 7631
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 7657
	mov	esi, esp
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+592]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _P$[ebp], eax
; Line 7658
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _nump$[ebp], eax
; Line 7660
	mov	DWORD PTR _k$[ebp], 1
	jmp	SHORT $LN15@Ins_DELTAC
$LN14@Ins_DELTAC:
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx
$LN15@Ins_DELTAC:
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR _nump$[ebp]
	ja	$Fail$18
; Line 7662
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+28], 2
	jge	SHORT $LN12@Ins_DELTAC
; Line 7664
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN11@Ins_DELTAC
; Line 7665
	push	OFFSET $SG13003
	push	7665					; 00001df1H
	push	129					; 00000081H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 129				; 00000081H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN11@Ins_DELTAC:
; Line 7666
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 7667
	jmp	$Fail$18
$LN12@Ins_DELTAC:
; Line 7670
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, 2
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 7672
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx*4+4]
	mov	DWORD PTR _A$[ebp], ecx
; Line 7673
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _B$[ebp], eax
; Line 7675
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _A$[ebp]
	cmp	edx, DWORD PTR [ecx+380]
	jb	SHORT $LN10@Ins_DELTAC
; Line 7677
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN9@Ins_DELTAC
; Line 7679
	push	OFFSET $SG13010
	push	7679					; 00001dffH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 7680
	jmp	$LN16@Ins_DELTAC
$LN9@Ins_DELTAC:
; Line 7683
	jmp	$LN8@Ins_DELTAC
$LN10@Ins_DELTAC:
; Line 7685
	mov	eax, DWORD PTR _B$[ebp]
	and	eax, 240				; 000000f0H
	shr	eax, 4
	mov	DWORD PTR _C$[ebp], eax
; Line 7687
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	dl, BYTE PTR [ecx+368]
	mov	BYTE PTR tv142[ebp], dl
	cmp	BYTE PTR tv142[ebp], 116		; 00000074H
	je	SHORT $LN4@Ins_DELTAC
	cmp	BYTE PTR tv142[ebp], 117		; 00000075H
	je	SHORT $LN3@Ins_DELTAC
	jmp	SHORT $LN6@Ins_DELTAC
; Line 7690
	jmp	SHORT $LN6@Ins_DELTAC
$LN4@Ins_DELTAC:
; Line 7693
	mov	eax, DWORD PTR _C$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _C$[ebp], eax
; Line 7694
	jmp	SHORT $LN6@Ins_DELTAC
$LN3@Ins_DELTAC:
; Line 7697
	mov	ecx, DWORD PTR _C$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _C$[ebp], ecx
$LN6@Ins_DELTAC:
; Line 7701
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+332]
	add	eax, DWORD PTR _C$[ebp]
	mov	DWORD PTR _C$[ebp], eax
; Line 7703
	mov	ecx, DWORD PTR _P$[ebp]
	cmp	ecx, DWORD PTR _C$[ebp]
	jne	SHORT $LN8@Ins_DELTAC
; Line 7705
	mov	edx, DWORD PTR _B$[ebp]
	and	edx, 15					; 0000000fH
	sub	edx, 8
	mov	DWORD PTR _B$[ebp], edx
; Line 7706
	js	SHORT $LN1@Ins_DELTAC
; Line 7707
	mov	eax, DWORD PTR _B$[ebp]
	add	eax, 1
	mov	DWORD PTR _B$[ebp], eax
$LN1@Ins_DELTAC:
; Line 7708
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+334]
	mov	ecx, 6
	sub	ecx, edx
	mov	eax, 1
	shl	eax, cl
	imul	eax, DWORD PTR _B$[ebp]
	mov	DWORD PTR _B$[ebp], eax
; Line 7710
	mov	esi, esp
	mov	ecx, DWORD PTR _B$[ebp]
	push	ecx
	mov	edx, DWORD PTR _A$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+604]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@Ins_DELTAC:
; Line 7713
	jmp	$LN14@Ins_DELTAC
$Fail$18:
; Line 7716
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+32], edx
$LN16@Ins_DELTAC:
; Line 7717
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_DELTAC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv135 = -28						; size = 4
_B$ = -24						; size = 4
_P$ = -20						; size = 4
_C$ = -16						; size = 4
_A$ = -12						; size = 2
_k$ = -8						; size = 4
_nump$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_DELTAP PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 7460
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 7497
	mov	esi, esp
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+592]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _P$[ebp], eax
; Line 7498
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _nump$[ebp], eax
; Line 7501
	mov	DWORD PTR _k$[ebp], 1
	jmp	SHORT $LN15@Ins_DELTAP
$LN14@Ins_DELTAP:
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx
$LN15@Ins_DELTAP:
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR _nump$[ebp]
	ja	$Fail$18
; Line 7503
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+28], 2
	jge	SHORT $LN12@Ins_DELTAP
; Line 7505
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN11@Ins_DELTAP
; Line 7506
	push	OFFSET $SG12964
	push	7506					; 00001d52H
	push	129					; 00000081H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 129				; 00000081H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN11@Ins_DELTAP:
; Line 7507
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 7508
	jmp	$Fail$18
$LN12@Ins_DELTAP:
; Line 7511
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, 2
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 7513
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	cx, WORD PTR [eax+ecx*4+4]
	mov	WORD PTR _A$[ebp], cx
; Line 7514
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _B$[ebp], eax
; Line 7522
	movzx	ecx, WORD PTR _A$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+44]
	cmp	ecx, eax
	jae	$LN10@Ins_DELTAP
; Line 7524
	mov	ecx, DWORD PTR _B$[ebp]
	and	ecx, 240				; 000000f0H
	shr	ecx, 4
	mov	DWORD PTR _C$[ebp], ecx
; Line 7526
	mov	edx, DWORD PTR _exc$[ebp]
	mov	al, BYTE PTR [edx+368]
	mov	BYTE PTR tv135[ebp], al
	cmp	BYTE PTR tv135[ebp], 113		; 00000071H
	je	SHORT $LN6@Ins_DELTAP
	cmp	BYTE PTR tv135[ebp], 114		; 00000072H
	je	SHORT $LN5@Ins_DELTAP
	jmp	SHORT $LN8@Ins_DELTAP
; Line 7529
	jmp	SHORT $LN8@Ins_DELTAP
$LN6@Ins_DELTAP:
; Line 7532
	mov	ecx, DWORD PTR _C$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _C$[ebp], ecx
; Line 7533
	jmp	SHORT $LN8@Ins_DELTAP
$LN5@Ins_DELTAP:
; Line 7536
	mov	edx, DWORD PTR _C$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _C$[ebp], edx
$LN8@Ins_DELTAP:
; Line 7540
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+332]
	add	ecx, DWORD PTR _C$[ebp]
	mov	DWORD PTR _C$[ebp], ecx
; Line 7542
	mov	edx, DWORD PTR _P$[ebp]
	cmp	edx, DWORD PTR _C$[ebp]
	jne	SHORT $LN4@Ins_DELTAP
; Line 7544
	mov	eax, DWORD PTR _B$[ebp]
	and	eax, 15					; 0000000fH
	sub	eax, 8
	mov	DWORD PTR _B$[ebp], eax
; Line 7545
	js	SHORT $LN3@Ins_DELTAP
; Line 7546
	mov	ecx, DWORD PTR _B$[ebp]
	add	ecx, 1
	mov	DWORD PTR _B$[ebp], ecx
$LN3@Ins_DELTAP:
; Line 7547
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+334]
	mov	ecx, 6
	sub	ecx, eax
	mov	edx, 1
	shl	edx, cl
	imul	edx, DWORD PTR _B$[ebp]
	mov	DWORD PTR _B$[ebp], edx
; Line 7610
	mov	esi, esp
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	movzx	ecx, WORD PTR _A$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+584]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@Ins_DELTAP:
; Line 7613
	jmp	SHORT $LN2@Ins_DELTAP
$LN10@Ins_DELTAP:
; Line 7614
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN2@Ins_DELTAP
; Line 7615
	push	OFFSET $SG12983
	push	7615					; 00001dbfH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN2@Ins_DELTAP:
; Line 7616
	jmp	$LN14@Ins_DELTAP
$Fail$18:
; Line 7619
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+32], edx
; Line 7620
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_DELTAP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_contour$ = -52						; size = 2
_point$ = -48						; size = 4
_cur_touched$ = -44					; size = 4
_first_touched$ = -40					; size = 4
_end_point$ = -36					; size = 4
_first_point$ = -32					; size = 4
_mask$ = -25						; size = 1
_V$ = -20						; size = 16
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_IUP PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 7347
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7360
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR _args$[ebp], ecx
; Line 7364
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+154]
	test	eax, eax
	jne	SHORT $LN16@Ins_IUP
; Line 7365
	jmp	$LN17@Ins_IUP
$LN16@Ins_IUP:
; Line 7367
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+368]
	and	edx, 1
	je	SHORT $LN15@Ins_IUP
; Line 7369
	mov	BYTE PTR _mask$[ebp], 8
; Line 7370
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR _V$[ebp], ecx
; Line 7371
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	DWORD PTR _V$[ebp+4], eax
; Line 7372
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	DWORD PTR _V$[ebp+8], edx
; Line 7374
	jmp	SHORT $LN14@Ins_IUP
$LN15@Ins_IUP:
; Line 7376
	mov	BYTE PTR _mask$[ebp], 16		; 00000010H
; Line 7377
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	add	ecx, 4
	mov	DWORD PTR _V$[ebp], ecx
; Line 7378
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+160]
	add	eax, 4
	mov	DWORD PTR _V$[ebp+4], eax
; Line 7379
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	add	edx, 4
	mov	DWORD PTR _V$[ebp+8], edx
$LN14@Ins_IUP:
; Line 7381
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+152]
	mov	DWORD PTR _V$[ebp+12], ecx
; Line 7383
	xor	edx, edx
	mov	WORD PTR _contour$[ebp], dx
; Line 7384
	mov	DWORD PTR _point$[ebp], 0
$LN13@Ins_IUP:
; Line 7398
	movsx	eax, WORD PTR _contour$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+176]
	sub	eax, edx
	mov	DWORD PTR _end_point$[ebp], eax
; Line 7399
	mov	eax, DWORD PTR _point$[ebp]
	mov	DWORD PTR _first_point$[ebp], eax
; Line 7401
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+152]
	cmp	DWORD PTR _end_point$[ebp], edx
	jb	SHORT $LN9@Ins_IUP
; Line 7402
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+152]
	sub	ecx, 1
	mov	DWORD PTR _end_point$[ebp], ecx
$LN9@Ins_IUP:
; Line 7404
	mov	edx, DWORD PTR _point$[ebp]
	cmp	edx, DWORD PTR _end_point$[ebp]
	ja	SHORT $LN8@Ins_IUP
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	edx, DWORD PTR _point$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	movzx	ecx, BYTE PTR _mask$[ebp]
	and	eax, ecx
	jne	SHORT $LN8@Ins_IUP
; Line 7405
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 1
	mov	DWORD PTR _point$[ebp], edx
	jmp	SHORT $LN9@Ins_IUP
$LN8@Ins_IUP:
; Line 7407
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _end_point$[ebp]
	ja	$LN7@Ins_IUP
; Line 7409
	mov	ecx, DWORD PTR _point$[ebp]
	mov	DWORD PTR _first_touched$[ebp], ecx
; Line 7410
	mov	edx, DWORD PTR _point$[ebp]
	mov	DWORD PTR _cur_touched$[ebp], edx
; Line 7412
	mov	eax, DWORD PTR _point$[ebp]
	add	eax, 1
	mov	DWORD PTR _point$[ebp], eax
$LN6@Ins_IUP:
; Line 7414
	mov	ecx, DWORD PTR _point$[ebp]
	cmp	ecx, DWORD PTR _end_point$[ebp]
	ja	SHORT $LN5@Ins_IUP
; Line 7416
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+168]
	mov	ecx, DWORD PTR _point$[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	movzx	eax, BYTE PTR _mask$[ebp]
	and	edx, eax
	je	SHORT $LN4@Ins_IUP
; Line 7422
	mov	ecx, DWORD PTR _point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_touched$[ebp]
	push	edx
	mov	eax, DWORD PTR _point$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _cur_touched$[ebp]
	add	ecx, 1
	push	ecx
	lea	edx, DWORD PTR _V$[ebp]
	push	edx
	call	__iup_worker_interpolate
	add	esp, 20					; 00000014H
; Line 7423
	mov	eax, DWORD PTR _point$[ebp]
	mov	DWORD PTR _cur_touched$[ebp], eax
$LN4@Ins_IUP:
; Line 7426
	mov	ecx, DWORD PTR _point$[ebp]
	add	ecx, 1
	mov	DWORD PTR _point$[ebp], ecx
; Line 7427
	jmp	SHORT $LN6@Ins_IUP
$LN5@Ins_IUP:
; Line 7429
	mov	edx, DWORD PTR _cur_touched$[ebp]
	cmp	edx, DWORD PTR _first_touched$[ebp]
	jne	SHORT $LN3@Ins_IUP
; Line 7430
	mov	eax, DWORD PTR _cur_touched$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end_point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _first_point$[ebp]
	push	edx
	lea	eax, DWORD PTR _V$[ebp]
	push	eax
	call	__iup_worker_shift
	add	esp, 16					; 00000010H
; Line 7431
	jmp	SHORT $LN7@Ins_IUP
$LN3@Ins_IUP:
; Line 7437
	mov	ecx, DWORD PTR _first_touched$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_touched$[ebp]
	push	edx
	mov	eax, DWORD PTR _end_point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_touched$[ebp]
	add	ecx, 1
	movzx	edx, cx
	push	edx
	lea	eax, DWORD PTR _V$[ebp]
	push	eax
	call	__iup_worker_interpolate
	add	esp, 20					; 00000014H
; Line 7439
	cmp	DWORD PTR _first_touched$[ebp], 0
	jbe	SHORT $LN7@Ins_IUP
; Line 7444
	mov	ecx, DWORD PTR _first_touched$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_touched$[ebp]
	push	edx
	mov	eax, DWORD PTR _first_touched$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _first_point$[ebp]
	push	ecx
	lea	edx, DWORD PTR _V$[ebp]
	push	edx
	call	__iup_worker_interpolate
	add	esp, 20					; 00000014H
$LN7@Ins_IUP:
; Line 7447
	mov	ax, WORD PTR _contour$[ebp]
	add	ax, 1
	mov	WORD PTR _contour$[ebp], ax
; Line 7448
	movsx	ecx, WORD PTR _contour$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+154]
	cmp	ecx, eax
	jl	$LN13@Ins_IUP
$LN17@Ins_IUP:
; Line 7449
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Ins_IUP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@Ins_IUP:
	DD	1
	DD	$LN20@Ins_IUP
$LN20@Ins_IUP:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN19@Ins_IUP
$LN19@Ins_IUP:
	DB	86					; 00000056H
	DB	0
_Ins_IUP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_x$1 = -52						; size = 4
_scale_valid$2 = -45					; size = 1
_scale$3 = -44						; size = 4
_x$4 = -40						; size = 4
_tmp_r$5 = -36						; size = 4
_tmp_o$6 = -32						; size = 4
_delta2$ = -28						; size = 4
_delta1$ = -24						; size = 4
_org2$ = -20						; size = 4
_org1$ = -16						; size = 4
_orus2$ = -12						; size = 4
_orus1$ = -8						; size = 4
_i$ = -4						; size = 4
_worker$ = 8						; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
_ref1$ = 20						; size = 4
_ref2$ = 24						; size = 4
__iup_worker_interpolate PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 7252
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7257
	mov	eax, DWORD PTR _p1$[ebp]
	cmp	eax, DWORD PTR _p2$[ebp]
	jbe	SHORT $LN19@iup_worker
; Line 7258
	jmp	$LN20@iup_worker
$LN19@iup_worker:
; Line 7261
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _ref1$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jae	SHORT $LN17@iup_worker
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _ref2$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN18@iup_worker
$LN17@iup_worker:
; Line 7262
	jmp	$LN20@iup_worker
$LN18@iup_worker:
; Line 7264
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _ref1$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _orus1$[ebp], edx
; Line 7265
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _ref2$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _orus2$[ebp], eax
; Line 7267
	mov	ecx, DWORD PTR _orus1$[ebp]
	cmp	ecx, DWORD PTR _orus2$[ebp]
	jle	SHORT $LN16@iup_worker
; Line 7273
	mov	edx, DWORD PTR _orus1$[ebp]
	mov	DWORD PTR _tmp_o$6[ebp], edx
; Line 7274
	mov	eax, DWORD PTR _orus2$[ebp]
	mov	DWORD PTR _orus1$[ebp], eax
; Line 7275
	mov	ecx, DWORD PTR _tmp_o$6[ebp]
	mov	DWORD PTR _orus2$[ebp], ecx
; Line 7277
	mov	edx, DWORD PTR _ref1$[ebp]
	mov	DWORD PTR _tmp_r$5[ebp], edx
; Line 7278
	mov	eax, DWORD PTR _ref2$[ebp]
	mov	DWORD PTR _ref1$[ebp], eax
; Line 7279
	mov	ecx, DWORD PTR _tmp_r$5[ebp]
	mov	DWORD PTR _ref2$[ebp], ecx
$LN16@iup_worker:
; Line 7282
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ref1$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _org1$[ebp], edx
; Line 7283
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ref2$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _org2$[ebp], eax
; Line 7284
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _ref1$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	sub	ecx, DWORD PTR _org1$[ebp]
	mov	DWORD PTR _delta1$[ebp], ecx
; Line 7285
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _ref2$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	sub	edx, DWORD PTR _org2$[ebp]
	mov	DWORD PTR _delta2$[ebp], edx
; Line 7287
	mov	eax, DWORD PTR _orus1$[ebp]
	cmp	eax, DWORD PTR _orus2$[ebp]
	jne	SHORT $LN15@iup_worker
; Line 7290
	mov	ecx, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN14@iup_worker
$LN13@iup_worker:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN14@iup_worker:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _p2$[ebp]
	ja	SHORT $LN12@iup_worker
; Line 7292
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _x$4[ebp], ecx
; Line 7295
	mov	edx, DWORD PTR _x$4[ebp]
	cmp	edx, DWORD PTR _org1$[ebp]
	jg	SHORT $LN11@iup_worker
; Line 7296
	mov	eax, DWORD PTR _x$4[ebp]
	add	eax, DWORD PTR _delta1$[ebp]
	mov	DWORD PTR _x$4[ebp], eax
; Line 7297
	jmp	SHORT $LN10@iup_worker
$LN11@iup_worker:
; Line 7298
	mov	ecx, DWORD PTR _x$4[ebp]
	add	ecx, DWORD PTR _delta2$[ebp]
	mov	DWORD PTR _x$4[ebp], ecx
$LN10@iup_worker:
; Line 7300
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _x$4[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
; Line 7301
	jmp	SHORT $LN13@iup_worker
$LN12@iup_worker:
; Line 7303
	jmp	$LN20@iup_worker
$LN15@iup_worker:
; Line 7305
	mov	DWORD PTR _scale$3[ebp], 0
; Line 7306
	mov	BYTE PTR _scale_valid$2[ebp], 0
; Line 7310
	mov	eax, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN8@iup_worker
$LN7@iup_worker:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@iup_worker:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _p2$[ebp]
	ja	$LN20@iup_worker
; Line 7312
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _x$1[ebp], eax
; Line 7315
	mov	ecx, DWORD PTR _x$1[ebp]
	cmp	ecx, DWORD PTR _org1$[ebp]
	jg	SHORT $LN5@iup_worker
; Line 7316
	mov	edx, DWORD PTR _x$1[ebp]
	add	edx, DWORD PTR _delta1$[ebp]
	mov	DWORD PTR _x$1[ebp], edx
	jmp	SHORT $LN4@iup_worker
$LN5@iup_worker:
; Line 7318
	mov	eax, DWORD PTR _x$1[ebp]
	cmp	eax, DWORD PTR _org2$[ebp]
	jl	SHORT $LN3@iup_worker
; Line 7319
	mov	ecx, DWORD PTR _x$1[ebp]
	add	ecx, DWORD PTR _delta2$[ebp]
	mov	DWORD PTR _x$1[ebp], ecx
; Line 7321
	jmp	SHORT $LN4@iup_worker
$LN3@iup_worker:
; Line 7323
	movzx	edx, BYTE PTR _scale_valid$2[ebp]
	test	edx, edx
	jne	SHORT $LN1@iup_worker
; Line 7325
	mov	BYTE PTR _scale_valid$2[ebp], 1
; Line 7327
	mov	eax, DWORD PTR _orus2$[ebp]
	sub	eax, DWORD PTR _orus1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _org2$[ebp]
	add	ecx, DWORD PTR _delta2$[ebp]
	mov	edx, DWORD PTR _org1$[ebp]
	add	edx, DWORD PTR _delta1$[ebp]
	sub	ecx, edx
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _scale$3[ebp], eax
$LN1@iup_worker:
; Line 7331
	mov	esi, DWORD PTR _org1$[ebp]
	add	esi, DWORD PTR _delta1$[ebp]
	mov	eax, DWORD PTR _scale$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	sub	ecx, DWORD PTR _orus1$[ebp]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	add	esi, eax
	mov	DWORD PTR _x$1[ebp], esi
$LN4@iup_worker:
; Line 7333
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _x$1[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
; Line 7334
	jmp	$LN7@iup_worker
$LN20@iup_worker:
; Line 7336
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__iup_worker_interpolate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dx$ = -8						; size = 4
_i$ = -4						; size = 4
_worker$ = 8						; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
_p$ = 20						; size = 4
__iup_worker_shift PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 7229
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 7234
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8]
	sub	ecx, DWORD PTR [eax+esi*8]
	mov	DWORD PTR _dx$[ebp], ecx
; Line 7235
	je	SHORT $LN8@iup_worker
; Line 7237
	mov	edx, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN6@iup_worker
$LN5@iup_worker:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@iup_worker:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _p$[ebp]
	jae	SHORT $LN4@iup_worker
; Line 7238
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	add	edx, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*8], edx
	jmp	SHORT $LN5@iup_worker
$LN4@iup_worker:
; Line 7240
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN3@iup_worker
$LN2@iup_worker:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@iup_worker:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _p2$[ebp]
	ja	SHORT $LN8@iup_worker
; Line 7241
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	add	ecx, DWORD PTR _dx$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	jmp	SHORT $LN2@iup_worker
$LN8@iup_worker:
; Line 7243
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
__iup_worker_shift ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mask$ = -5						; size = 1
_point$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_UTP PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 7187
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 7192
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _point$[ebp], ax
; Line 7194
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+44]
	cmp	ecx, eax
	jb	SHORT $LN4@Ins_UTP
; Line 7196
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN3@Ins_UTP
; Line 7197
	push	OFFSET $SG12825
	push	7197					; 00001c1dH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN3@Ins_UTP:
; Line 7198
	jmp	SHORT $LN5@Ins_UTP
$LN4@Ins_UTP:
; Line 7201
	mov	BYTE PTR _mask$[ebp], 255		; 000000ffH
; Line 7203
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+298]
	test	eax, eax
	je	SHORT $LN2@Ins_UTP
; Line 7204
	movzx	ecx, BYTE PTR _mask$[ebp]
	and	ecx, -9					; fffffff7H
	mov	BYTE PTR _mask$[ebp], cl
$LN2@Ins_UTP:
; Line 7206
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+300]
	test	eax, eax
	je	SHORT $LN1@Ins_UTP
; Line 7207
	movzx	ecx, BYTE PTR _mask$[ebp]
	and	ecx, -17				; ffffffefH
	mov	BYTE PTR _mask$[ebp], cl
$LN1@Ins_UTP:
; Line 7209
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movzx	eax, BYTE PTR _mask$[ebp]
	movzx	ecx, BYTE PTR [ecx+edx]
	and	ecx, eax
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [eax+60]
	mov	BYTE PTR [eax+edx], cl
$LN5@Ins_UTP:
; Line 7210
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_UTP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv262 = -76						; size = 4
tv85 = -72						; size = 4
_vec$1 = -64						; size = 8
_new_dist$2 = -52					; size = 4
_cur_dist$3 = -48					; size = 4
_org_dist$4 = -44					; size = 4
_point$5 = -40						; size = 4
_vec$6 = -32						; size = 8
_twilight$ = -20					; size = 4
_cur_base$ = -16					; size = 4
_orus_base$ = -12					; size = 4
_cur_range$ = -8					; size = 4
_old_range$ = -4					; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_IP	PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 7035
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7041
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR _args$[ebp], ecx
; Line 7044
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+304]
	jge	SHORT $LN26@Ins_IP
; Line 7046
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN25@Ins_IP
; Line 7047
	push	OFFSET $SG12760
	push	7047					; 00001b87H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN25@Ins_IP:
; Line 7048
	jmp	$Fail$35
$LN26@Ins_IP:
; Line 7056
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+344]
	test	eax, eax
	je	SHORT $LN29@Ins_IP
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+346]
	test	edx, edx
	je	SHORT $LN29@Ins_IP
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+348]
	test	ecx, ecx
	je	SHORT $LN29@Ins_IP
	mov	DWORD PTR tv85[ebp], 0
	jmp	SHORT $LN30@Ins_IP
$LN29@Ins_IP:
	mov	DWORD PTR tv85[ebp], 1
$LN30@Ins_IP:
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _twilight$[ebp], edx
; Line 7058
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+286]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+44]
	cmp	ecx, eax
	jb	SHORT $LN24@Ins_IP
; Line 7060
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN23@Ins_IP
; Line 7061
	push	OFFSET $SG12766
	push	7061					; 00001b95H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN23@Ins_IP:
; Line 7062
	jmp	$Fail$35
$LN24@Ins_IP:
; Line 7065
	cmp	DWORD PTR _twilight$[ebp], 0
	je	SHORT $LN22@Ins_IP
; Line 7066
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+286]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _orus_base$[ebp], eax
; Line 7067
	jmp	SHORT $LN21@Ins_IP
$LN22@Ins_IP:
; Line 7068
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+286]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _orus_base$[ebp], edx
$LN21@Ins_IP:
; Line 7070
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+286]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+52]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _cur_base$[ebp], ecx
; Line 7077
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+286]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+44]
	cmp	eax, edx
	jae	SHORT $LN19@Ins_IP
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+288]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+80]
	cmp	ecx, eax
	jb	SHORT $LN20@Ins_IP
$LN19@Ins_IP:
; Line 7079
	mov	DWORD PTR _old_range$[ebp], 0
; Line 7080
	mov	DWORD PTR _cur_range$[ebp], 0
; Line 7082
	jmp	$LN18@Ins_IP
$LN20@Ins_IP:
; Line 7084
	cmp	DWORD PTR _twilight$[ebp], 0
	je	SHORT $LN17@Ins_IP
; Line 7086
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+288]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	eax, DWORD PTR _orus_base$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+288]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	ecx, DWORD PTR _orus_base$[ebp]
	mov	edx, DWORD PTR [edx+eax*8]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+576]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _old_range$[ebp], eax
	jmp	$LN16@Ins_IP
$LN17@Ins_IP:
; Line 7087
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [eax+220]
	cmp	edx, DWORD PTR [ecx+224]
	jne	SHORT $LN15@Ins_IP
; Line 7089
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+288]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	edx, DWORD PTR _orus_base$[ebp]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	sub	eax, DWORD PTR [edx+4]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+288]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	eax, DWORD PTR _orus_base$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8]
	sub	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+576]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _old_range$[ebp], eax
; Line 7090
	jmp	$LN16@Ins_IP
$LN15@Ins_IP:
; Line 7096
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+220]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+288]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	eax, DWORD PTR _orus_base$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8]
	sub	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _vec$6[ebp], eax
; Line 7098
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+224]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+288]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	eax, DWORD PTR _orus_base$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	sub	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _vec$6[ebp+4], eax
; Line 7100
	mov	esi, esp
	mov	edx, DWORD PTR _vec$6[ebp+4]
	push	edx
	mov	eax, DWORD PTR _vec$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+576]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _old_range$[ebp], eax
$LN16@Ins_IP:
; Line 7103
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+288]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	eax, DWORD PTR _cur_base$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+288]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	ecx, DWORD PTR _cur_base$[ebp]
	mov	edx, DWORD PTR [edx+eax*8]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+572]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cur_range$[ebp], eax
$LN18@Ins_IP:
; Line 7106
	jmp	SHORT $LN13@Ins_IP
$LN12@Ins_IP:
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	sub	ecx, 1
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+304], ecx
$LN13@Ins_IP:
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+304], 0
	jle	$Fail$35
; Line 7108
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	sub	edx, 1
	mov	DWORD PTR tv262[ebp], edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR tv262[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR tv262[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _point$5[ebp], edx
; Line 7113
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+116]
	cmp	DWORD PTR _point$5[ebp], ecx
	jb	SHORT $LN10@Ins_IP
; Line 7115
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN9@Ins_IP
; Line 7117
	push	OFFSET $SG12797
	push	7117					; 00001bcdH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 7118
	jmp	$LN27@Ins_IP
$LN9@Ins_IP:
; Line 7120
	jmp	$LN12@Ins_IP
$LN10@Ins_IP:
; Line 7123
	cmp	DWORD PTR _twilight$[ebp], 0
	je	SHORT $LN8@Ins_IP
; Line 7124
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	ecx, DWORD PTR _point$5[ebp]
	mov	edx, DWORD PTR _orus_base$[ebp]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	sub	eax, DWORD PTR [edx+4]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	eax, DWORD PTR _point$5[ebp]
	mov	ecx, DWORD PTR _orus_base$[ebp]
	mov	edx, DWORD PTR [edx+eax*8]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+576]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _org_dist$4[ebp], eax
	jmp	$LN7@Ins_IP
$LN8@Ins_IP:
; Line 7125
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [eax+220]
	cmp	edx, DWORD PTR [ecx+224]
	jne	SHORT $LN6@Ins_IP
; Line 7126
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR _point$5[ebp]
	mov	eax, DWORD PTR _orus_base$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR _point$5[ebp]
	mov	edx, DWORD PTR _orus_base$[ebp]
	mov	eax, DWORD PTR [eax+ecx*8]
	sub	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+576]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _org_dist$4[ebp], eax
; Line 7127
	jmp	SHORT $LN7@Ins_IP
$LN6@Ins_IP:
; Line 7133
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+220]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR _point$5[ebp]
	mov	eax, DWORD PTR _orus_base$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8]
	sub	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _vec$1[ebp], eax
; Line 7135
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+224]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR _point$5[ebp]
	mov	ecx, DWORD PTR _orus_base$[ebp]
	mov	edx, DWORD PTR [edx+eax*8+4]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _vec$1[ebp+4], eax
; Line 7137
	mov	esi, esp
	mov	eax, DWORD PTR _vec$1[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _vec$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+576]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _org_dist$4[ebp], eax
$LN7@Ins_IP:
; Line 7140
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	ecx, DWORD PTR _point$5[ebp]
	mov	edx, DWORD PTR _cur_base$[ebp]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	sub	eax, DWORD PTR [edx+4]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	eax, DWORD PTR _point$5[ebp]
	mov	ecx, DWORD PTR _cur_base$[ebp]
	mov	edx, DWORD PTR [edx+eax*8]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+572]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cur_dist$3[ebp], eax
; Line 7142
	cmp	DWORD PTR _org_dist$4[ebp], 0
	je	SHORT $LN4@Ins_IP
; Line 7144
	cmp	DWORD PTR _old_range$[ebp], 0
	je	SHORT $LN3@Ins_IP
; Line 7145
	mov	eax, DWORD PTR _old_range$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_range$[ebp]
	push	ecx
	mov	edx, DWORD PTR _org_dist$4[ebp]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _new_dist$2[ebp], eax
; Line 7146
	jmp	SHORT $LN2@Ins_IP
$LN3@Ins_IP:
; Line 7164
	mov	eax, DWORD PTR _org_dist$4[ebp]
	mov	DWORD PTR _new_dist$2[ebp], eax
$LN2@Ins_IP:
; Line 7167
	jmp	SHORT $LN1@Ins_IP
$LN4@Ins_IP:
; Line 7168
	mov	DWORD PTR _new_dist$2[ebp], 0
$LN1@Ins_IP:
; Line 7170
	mov	ecx, DWORD PTR _new_dist$2[ebp]
	sub	ecx, DWORD PTR _cur_dist$3[ebp]
	mov	esi, esp
	push	ecx
	movzx	edx, WORD PTR _point$5[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+584]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 7171
	jmp	$LN12@Ins_IP
$Fail$35:
; Line 7174
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+304], 1
; Line 7175
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+32], ecx
$LN27@Ins_IP:
; Line 7176
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@Ins_IP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN34@Ins_IP:
	DD	2
	DD	$LN33@Ins_IP
$LN33@Ins_IP:
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN31@Ins_IP
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN32@Ins_IP
$LN32@Ins_IP:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN31@Ins_IP:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
_Ins_IP	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_distance$ = -12					; size = 4
_p2$ = -8						; size = 2
_p1$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_ALIGNPTS PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 7000
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 7005
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _p1$[ebp], ax
; Line 7006
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _p2$[ebp], ax
; Line 7009
	movzx	ecx, WORD PTR _p1$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+80]
	cmp	ecx, eax
	jae	SHORT $LN2@Ins_ALIGNP
	movzx	ecx, WORD PTR _p2$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+44]
	cmp	ecx, eax
	jb	SHORT $LN3@Ins_ALIGNP
$LN2@Ins_ALIGNP:
; Line 7011
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN1@Ins_ALIGNP
; Line 7012
	push	OFFSET $SG12746
	push	7012					; 00001b64H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@Ins_ALIGNP:
; Line 7013
	jmp	$LN4@Ins_ALIGNP
$LN3@Ins_ALIGNP:
; Line 7017
	movzx	edx, WORD PTR _p2$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	movzx	eax, WORD PTR _p1$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+88]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	sub	ecx, DWORD PTR [esi+eax*8+4]
	mov	esi, esp
	push	ecx
	movzx	edx, WORD PTR _p2$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	movzx	eax, WORD PTR _p1$[ebp]
	mov	edi, DWORD PTR _exc$[ebp]
	mov	edi, DWORD PTR [edi+88]
	mov	ecx, DWORD PTR [ecx+edx*8]
	sub	ecx, DWORD PTR [edi+eax*8]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+572]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _distance$[ebp], eax
; Line 7019
	mov	esi, esp
	mov	edx, DWORD PTR _distance$[ebp]
	push	edx
	movzx	eax, WORD PTR _p1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 7020
	mov	edx, DWORD PTR _distance$[ebp]
	neg	edx
	mov	esi, esp
	push	edx
	movzx	eax, WORD PTR _p2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@Ins_ALIGNP:
; Line 7021
	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_ALIGNPTS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv237 = -80						; size = 4
tv233 = -76						; size = 4
_R$ = -68						; size = 8
_val$ = -56						; size = 4
_dby$ = -52						; size = 4
_dbx$ = -48						; size = 4
_day$ = -44						; size = 4
_dax$ = -40						; size = 4
_dy$ = -36						; size = 4
_dx$ = -32						; size = 4
_dotproduct$ = -28					; size = 4
_discriminant$ = -24					; size = 4
_b1$ = -20						; size = 2
_b0$ = -16						; size = 2
_a1$ = -12						; size = 2
_a0$ = -8						; size = 2
_point$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_ISECT PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 6906
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6922
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _point$[ebp], ax
; Line 6924
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _a0$[ebp], ax
; Line 6925
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _a1$[ebp], ax
; Line 6926
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _args$[ebp]
	mov	cx, WORD PTR [eax+edx]
	mov	WORD PTR _b0$[ebp], cx
; Line 6927
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _args$[ebp]
	mov	cx, WORD PTR [eax+edx]
	mov	WORD PTR _b1$[ebp], cx
; Line 6933
	movzx	edx, WORD PTR _b0$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+44]
	cmp	edx, ecx
	jae	SHORT $LN4@Ins_ISECT
	movzx	edx, WORD PTR _b1$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+44]
	cmp	edx, ecx
	jae	SHORT $LN4@Ins_ISECT
	movzx	edx, WORD PTR _a0$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+80]
	cmp	edx, ecx
	jae	SHORT $LN4@Ins_ISECT
	movzx	edx, WORD PTR _a1$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+80]
	cmp	edx, ecx
	jae	SHORT $LN4@Ins_ISECT
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+116]
	cmp	edx, ecx
	jb	SHORT $LN5@Ins_ISECT
$LN4@Ins_ISECT:
; Line 6935
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN3@Ins_ISECT
; Line 6936
	push	OFFSET $SG12725
	push	6936					; 00001b18H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN3@Ins_ISECT:
; Line 6937
	jmp	$LN6@Ins_ISECT
$LN5@Ins_ISECT:
; Line 6942
	movzx	edx, WORD PTR _b1$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	movzx	eax, WORD PTR _b0$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+52]
	mov	ecx, DWORD PTR [ecx+edx*8]
	sub	ecx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR _dbx$[ebp], ecx
; Line 6943
	movzx	edx, WORD PTR _b1$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	movzx	eax, WORD PTR _b0$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+52]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	sub	ecx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR _dby$[ebp], ecx
; Line 6945
	movzx	edx, WORD PTR _a1$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	movzx	eax, WORD PTR _a0$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+88]
	mov	ecx, DWORD PTR [ecx+edx*8]
	sub	ecx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR _dax$[ebp], ecx
; Line 6946
	movzx	edx, WORD PTR _a1$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	movzx	eax, WORD PTR _a0$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+88]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	sub	ecx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR _day$[ebp], ecx
; Line 6948
	movzx	edx, WORD PTR _b0$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	movzx	eax, WORD PTR _a0$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+88]
	mov	ecx, DWORD PTR [ecx+edx*8]
	sub	ecx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR _dx$[ebp], ecx
; Line 6949
	movzx	edx, WORD PTR _b0$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	movzx	eax, WORD PTR _a0$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+88]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	sub	ecx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR _dy$[ebp], ecx
; Line 6951
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	movzx	edx, BYTE PTR [ecx+edx]
	or	edx, 24					; 00000018H
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+132]
	mov	BYTE PTR [ecx+eax], dl
; Line 6954
	push	64					; 00000040H
	mov	edx, DWORD PTR _dby$[ebp]
	neg	edx
	push	edx
	mov	eax, DWORD PTR _dax$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _dbx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _day$[ebp]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	esi, eax
	mov	DWORD PTR _discriminant$[ebp], esi
; Line 6956
	push	64					; 00000040H
	mov	eax, DWORD PTR _dbx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dax$[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	64					; 00000040H
	mov	edx, DWORD PTR _dby$[ebp]
	push	edx
	mov	eax, DWORD PTR _day$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	esi, eax
	mov	DWORD PTR _dotproduct$[ebp], esi
; Line 6966
	cmp	DWORD PTR _discriminant$[ebp], 0
	jge	SHORT $LN8@Ins_ISECT
	mov	ecx, DWORD PTR _discriminant$[ebp]
	neg	ecx
	mov	DWORD PTR tv233[ebp], ecx
	jmp	SHORT $LN9@Ins_ISECT
$LN8@Ins_ISECT:
	mov	edx, DWORD PTR _discriminant$[ebp]
	mov	DWORD PTR tv233[ebp], edx
$LN9@Ins_ISECT:
	cmp	DWORD PTR _dotproduct$[ebp], 0
	jge	SHORT $LN10@Ins_ISECT
	mov	eax, DWORD PTR _dotproduct$[ebp]
	neg	eax
	mov	DWORD PTR tv237[ebp], eax
	jmp	SHORT $LN11@Ins_ISECT
$LN10@Ins_ISECT:
	mov	ecx, DWORD PTR _dotproduct$[ebp]
	mov	DWORD PTR tv237[ebp], ecx
$LN11@Ins_ISECT:
	imul	edx, DWORD PTR tv233[ebp], 19
	cmp	edx, DWORD PTR tv237[ebp]
	jle	$LN2@Ins_ISECT
; Line 6968
	push	64					; 00000040H
	mov	eax, DWORD PTR _dby$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	push	64					; 00000040H
	mov	edx, DWORD PTR _dbx$[ebp]
	push	edx
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	esi, eax
	mov	DWORD PTR _val$[ebp], esi
; Line 6970
	mov	ecx, DWORD PTR _discriminant$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dax$[ebp]
	push	edx
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _R$[ebp], eax
; Line 6971
	mov	ecx, DWORD PTR _discriminant$[ebp]
	push	ecx
	mov	edx, DWORD PTR _day$[ebp]
	push	edx
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _R$[ebp+4], eax
; Line 6973
	movzx	ecx, WORD PTR _a0$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR [eax+ecx*8]
	add	ecx, DWORD PTR _R$[ebp]
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [eax+124]
	mov	DWORD PTR [eax+edx*8], ecx
; Line 6974
	movzx	ecx, WORD PTR _a0$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR [eax+ecx*8+4]
	add	ecx, DWORD PTR _R$[ebp+4]
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [eax+124]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 6976
	jmp	$LN6@Ins_ISECT
$LN2@Ins_ISECT:
; Line 6983
	movzx	ecx, WORD PTR _a0$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+88]
	movzx	edx, WORD PTR _a1$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [eax+ecx*8]
	add	eax, DWORD PTR [esi+edx*8]
	movzx	ecx, WORD PTR _b0$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [edx+52]
	add	eax, DWORD PTR [edx+ecx*8]
	movzx	ecx, WORD PTR _b1$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [edx+52]
	add	eax, DWORD PTR [edx+ecx*8]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [edx+124]
	mov	DWORD PTR [edx+ecx*8], eax
; Line 6987
	movzx	eax, WORD PTR _a0$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	movzx	ecx, WORD PTR _a1$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [edx+eax*8+4]
	add	eax, DWORD PTR [esi+ecx*8+4]
	movzx	edx, WORD PTR _b0$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	add	eax, DWORD PTR [ecx+edx*8+4]
	movzx	edx, WORD PTR _b1$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	add	eax, DWORD PTR [ecx+edx*8+4]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movzx	edx, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	mov	DWORD PTR [ecx+edx*8+4], eax
$LN6@Ins_ISECT:
; Line 6989
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Ins_ISECT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@Ins_ISECT:
	DD	1
	DD	$LN13@Ins_ISECT
$LN13@Ins_ISECT:
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN12@Ins_ISECT
$LN12@Ins_ISECT:
	DB	82					; 00000052H
	DB	0
_Ins_ISECT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_distance$ = -8						; size = 4
_point$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_ALIGNRP PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 6841
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 6845
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR _args$[ebp], ecx
; Line 6860
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+304]
	jl	SHORT $LN7@Ins_ALIGNR
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+284]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+44]
	cmp	eax, edx
	jb	SHORT $LN5@Ins_ALIGNR
$LN7@Ins_ALIGNR:
; Line 6862
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN6@Ins_ALIGNR
; Line 6863
	push	OFFSET $SG12674
	push	6863					; 00001acfH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN6@Ins_ALIGNR:
; Line 6864
	jmp	$Fail$11
$LN5@Ins_ALIGNR:
; Line 6867
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+304], 0
	jle	$Fail$11
; Line 6869
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	sub	edx, 1
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 6871
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	dx, WORD PTR [ecx+edx*4]
	mov	WORD PTR _point$[ebp], dx
; Line 6873
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+80]
	cmp	eax, edx
	jb	SHORT $LN3@Ins_ALIGNR
; Line 6875
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN2@Ins_ALIGNR
; Line 6877
	push	OFFSET $SG12684
	push	6877					; 00001addH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 6878
	jmp	$LN9@Ins_ALIGNR
$LN2@Ins_ALIGNR:
; Line 6881
	jmp	$LN1@Ins_ALIGNR
$LN3@Ins_ALIGNR:
; Line 6884
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [ecx+284]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+52]
	mov	edx, DWORD PTR [edx+eax*8+4]
	sub	edx, DWORD PTR [esi+ecx*8+4]
	mov	esi, esp
	push	edx
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [ecx+284]
	mov	edi, DWORD PTR _exc$[ebp]
	mov	edi, DWORD PTR [edi+52]
	mov	edx, DWORD PTR [edx+eax*8]
	sub	edx, DWORD PTR [edi+ecx*8]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+572]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _distance$[ebp], eax
; Line 6886
	mov	eax, DWORD PTR _distance$[ebp]
	neg	eax
	mov	esi, esp
	push	eax
	movzx	ecx, WORD PTR _point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	add	edx, 72					; 00000048H
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+584]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Ins_ALIGNR:
; Line 6889
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	sub	ecx, 1
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+304], ecx
; Line 6890
	jmp	$LN5@Ins_ALIGNR
$Fail$11:
; Line 6893
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+304], 1
; Line 6894
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+32], eax
$LN9@Ins_ALIGNR:
; Line 6895
	pop	edi
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_ALIGNRP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv269 = -40						; size = 4
tv138 = -36						; size = 4
_minimum_distance$ = -32				; size = 4
_control_value_cutin$ = -28				; size = 4
_org_dist$ = -24					; size = 4
_cur_dist$ = -20					; size = 4
_distance$ = -16					; size = 4
_cvt_dist$ = -12					; size = 4
_cvtEntry$ = -8						; size = 4
_point$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_MIRP PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 6614
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6631
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	mov	DWORD PTR _minimum_distance$[ebp], ecx
; Line 6632
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+320]
	mov	DWORD PTR _control_value_cutin$[ebp], eax
; Line 6633
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$[ebp]
	mov	cx, WORD PTR [eax+edx]
	mov	WORD PTR _point$[ebp], cx
; Line 6634
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	add	ecx, 1
	mov	DWORD PTR _cvtEntry$[ebp], ecx
; Line 6648
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+80]
	cmp	edx, ecx
	jae	SHORT $LN20@Ins_MIRP
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+380]
	add	eax, 1
	cmp	DWORD PTR _cvtEntry$[ebp], eax
	jae	SHORT $LN20@Ins_MIRP
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+284]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+44]
	cmp	edx, ecx
	jb	SHORT $LN21@Ins_MIRP
$LN20@Ins_MIRP:
; Line 6650
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN19@Ins_MIRP
; Line 6651
	push	OFFSET $SG12639
	push	6651					; 000019fbH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN19@Ins_MIRP:
; Line 6652
	jmp	$Fail$28
$LN21@Ins_MIRP:
; Line 6655
	cmp	DWORD PTR _cvtEntry$[ebp], 0
	jne	SHORT $LN18@Ins_MIRP
; Line 6656
	mov	DWORD PTR _cvt_dist$[ebp], 0
; Line 6657
	jmp	SHORT $LN17@Ins_MIRP
$LN18@Ins_MIRP:
; Line 6658
	mov	edx, DWORD PTR _cvtEntry$[ebp]
	sub	edx, 1
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+596]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cvt_dist$[ebp], eax
$LN17@Ins_MIRP:
; Line 6663
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _cvt_dist$[ebp]
	sub	ecx, DWORD PTR [eax+328]
	jns	SHORT $LN24@Ins_MIRP
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _cvt_dist$[ebp]
	sub	eax, DWORD PTR [edx+328]
	neg	eax
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN25@Ins_MIRP
$LN24@Ins_MIRP:
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _cvt_dist$[ebp]
	sub	edx, DWORD PTR [ecx+328]
	mov	DWORD PTR tv138[ebp], edx
$LN25@Ins_MIRP:
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR tv138[ebp]
	cmp	ecx, DWORD PTR [eax+324]
	jge	SHORT $LN16@Ins_MIRP
; Line 6665
	cmp	DWORD PTR _cvt_dist$[ebp], 0
	jl	SHORT $LN15@Ins_MIRP
; Line 6666
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+328]
	mov	DWORD PTR _cvt_dist$[ebp], eax
; Line 6667
	jmp	SHORT $LN16@Ins_MIRP
$LN15@Ins_MIRP:
; Line 6668
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+328]
	neg	edx
	mov	DWORD PTR _cvt_dist$[ebp], edx
$LN16@Ins_MIRP:
; Line 6673
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+346]
	test	ecx, ecx
	jne	$LN13@Ins_MIRP
; Line 6677
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	esi, WORD PTR [edx+284]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	edi, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _exc$[ebp]
	movsx	edx, WORD PTR [ecx+298]
	push	edx
	mov	eax, DWORD PTR _cvt_dist$[ebp]
	push	eax
	call	_TT_MulFix14
	add	esp, 8
	add	eax, DWORD PTR [edi+esi*8]
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [edx+84]
	mov	DWORD PTR [edx+ecx*8], eax
; Line 6680
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	esi, WORD PTR [eax+284]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edi, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+300]
	push	eax
	mov	ecx, DWORD PTR _cvt_dist$[ebp]
	push	ecx
	call	_TT_MulFix14
	add	esp, 8
	add	eax, DWORD PTR [edi+esi*8+4]
	movzx	edx, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+84]
	mov	DWORD PTR [ecx+edx*8+4], eax
; Line 6681
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	movzx	edx, WORD PTR _point$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+88]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
$LN13@Ins_MIRP:
; Line 6685
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [ecx+284]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+48]
	mov	edx, DWORD PTR [edx+eax*8+4]
	sub	edx, DWORD PTR [esi+ecx*8+4]
	mov	esi, esp
	push	edx
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [ecx+284]
	mov	edi, DWORD PTR _exc$[ebp]
	mov	edi, DWORD PTR [edi+48]
	mov	edx, DWORD PTR [edx+eax*8]
	sub	edx, DWORD PTR [edi+ecx*8]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+576]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _org_dist$[ebp], eax
; Line 6687
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [ecx+284]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+52]
	mov	edx, DWORD PTR [edx+eax*8+4]
	sub	edx, DWORD PTR [esi+ecx*8+4]
	mov	esi, esp
	push	edx
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [ecx+284]
	mov	edi, DWORD PTR _exc$[ebp]
	mov	edi, DWORD PTR [edi+52]
	mov	edx, DWORD PTR [edx+eax*8]
	sub	edx, DWORD PTR [edi+ecx*8]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+572]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cur_dist$[ebp], eax
; Line 6691
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+316]
	test	ecx, ecx
	je	SHORT $LN12@Ins_MIRP
; Line 6693
	mov	edx, DWORD PTR _org_dist$[ebp]
	xor	edx, DWORD PTR _cvt_dist$[ebp]
	jge	SHORT $LN12@Ins_MIRP
; Line 6694
	mov	eax, DWORD PTR _cvt_dist$[ebp]
	neg	eax
	mov	DWORD PTR _cvt_dist$[ebp], eax
$LN12@Ins_MIRP:
; Line 6712
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+368]
	and	edx, 4
	je	$LN10@Ins_MIRP
; Line 6717
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+344]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+346]
	cmp	ecx, eax
	jne	SHORT $LN9@Ins_MIRP
; Line 6731
	mov	ecx, DWORD PTR _cvt_dist$[ebp]
	sub	ecx, DWORD PTR _org_dist$[ebp]
	jns	SHORT $LN26@Ins_MIRP
	mov	edx, DWORD PTR _cvt_dist$[ebp]
	sub	edx, DWORD PTR _org_dist$[ebp]
	neg	edx
	mov	DWORD PTR tv269[ebp], edx
	jmp	SHORT $LN27@Ins_MIRP
$LN26@Ins_MIRP:
	mov	eax, DWORD PTR _cvt_dist$[ebp]
	sub	eax, DWORD PTR _org_dist$[ebp]
	mov	DWORD PTR tv269[ebp], eax
$LN27@Ins_MIRP:
	mov	ecx, DWORD PTR tv269[ebp]
	cmp	ecx, DWORD PTR _control_value_cutin$[ebp]
	jle	SHORT $LN9@Ins_MIRP
; Line 6732
	mov	edx, DWORD PTR _org_dist$[ebp]
	mov	DWORD PTR _cvt_dist$[ebp], edx
$LN9@Ins_MIRP:
; Line 6737
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+368]
	and	ecx, 3
	mov	esi, esp
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+264]
	push	eax
	mov	ecx, DWORD PTR _cvt_dist$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+568]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _distance$[ebp], eax
; Line 6739
	jmp	SHORT $LN7@Ins_MIRP
$LN10@Ins_MIRP:
; Line 6755
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	and	eax, 3
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+264]
	push	edx
	mov	eax, DWORD PTR _cvt_dist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Round_None
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _distance$[ebp], eax
$LN7@Ins_MIRP:
; Line 6760
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	and	eax, 8
	je	SHORT $LN6@Ins_MIRP
; Line 6762
	cmp	DWORD PTR _org_dist$[ebp], 0
	jl	SHORT $LN5@Ins_MIRP
; Line 6764
	mov	ecx, DWORD PTR _distance$[ebp]
	cmp	ecx, DWORD PTR _minimum_distance$[ebp]
	jge	SHORT $LN4@Ins_MIRP
; Line 6765
	mov	edx, DWORD PTR _minimum_distance$[ebp]
	mov	DWORD PTR _distance$[ebp], edx
$LN4@Ins_MIRP:
; Line 6767
	jmp	SHORT $LN6@Ins_MIRP
$LN5@Ins_MIRP:
; Line 6769
	mov	eax, DWORD PTR _minimum_distance$[ebp]
	neg	eax
	cmp	DWORD PTR _distance$[ebp], eax
	jle	SHORT $LN6@Ins_MIRP
; Line 6770
	mov	ecx, DWORD PTR _minimum_distance$[ebp]
	neg	ecx
	mov	DWORD PTR _distance$[ebp], ecx
$LN6@Ins_MIRP:
; Line 6794
	mov	edx, DWORD PTR _distance$[ebp]
	sub	edx, DWORD PTR _cur_dist$[ebp]
	mov	esi, esp
	push	edx
	movzx	eax, WORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$Fail$28:
; Line 6824
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	cx, WORD PTR [eax+284]
	mov	WORD PTR [edx+286], cx
; Line 6826
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	and	eax, 16					; 00000010H
	je	SHORT $LN1@Ins_MIRP
; Line 6827
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	dx, WORD PTR _point$[ebp]
	mov	WORD PTR [ecx+284], dx
$LN1@Ins_MIRP:
; Line 6829
	mov	eax, DWORD PTR _exc$[ebp]
	mov	cx, WORD PTR _point$[ebp]
	mov	WORD PTR [eax+288], cx
; Line 6830
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_MIRP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv197 = -52						; size = 4
_vec$1 = -44						; size = 8
_vec2$2 = -32						; size = 4
_vec1$3 = -28						; size = 4
_vec2$4 = -24						; size = 4
_vec1$5 = -20						; size = 4
_minimum_distance$ = -16				; size = 4
_distance$ = -12					; size = 4
_org_dist$ = -8						; size = 4
_point$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_MDRP PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 6479
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6484
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	mov	DWORD PTR _minimum_distance$[ebp], ecx
; Line 6494
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _point$[ebp], dx
; Line 6497
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+80]
	cmp	eax, edx
	jae	SHORT $LN18@Ins_MDRP
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+284]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+44]
	cmp	ecx, eax
	jb	SHORT $LN19@Ins_MDRP
$LN18@Ins_MDRP:
; Line 6499
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN17@Ins_MDRP
; Line 6500
	push	OFFSET $SG12585
	push	6500					; 00001964H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN17@Ins_MDRP:
; Line 6501
	jmp	$Fail$27
$LN19@Ins_MDRP:
; Line 6509
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+344]
	test	eax, eax
	je	SHORT $LN15@Ins_MDRP
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+346]
	test	edx, edx
	jne	SHORT $LN16@Ins_MDRP
$LN15@Ins_MDRP:
; Line 6511
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _vec1$5[ebp], eax
; Line 6512
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+284]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _vec2$4[ebp], edx
; Line 6515
	mov	eax, DWORD PTR _vec1$5[ebp]
	mov	ecx, DWORD PTR _vec2$4[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _vec1$5[ebp]
	mov	ecx, DWORD PTR _vec2$4[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+576]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _org_dist$[ebp], eax
; Line 6517
	jmp	$LN14@Ins_MDRP
$LN16@Ins_MDRP:
; Line 6519
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _vec1$3[ebp], eax
; Line 6520
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+284]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _vec2$2[ebp], edx
; Line 6523
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [eax+220]
	cmp	edx, DWORD PTR [ecx+224]
	jne	SHORT $LN13@Ins_MDRP
; Line 6526
	mov	eax, DWORD PTR _vec1$3[ebp]
	mov	ecx, DWORD PTR _vec2$2[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _vec1$3[ebp]
	mov	ecx, DWORD PTR _vec2$2[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+576]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _org_dist$[ebp], eax
; Line 6527
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	edx, DWORD PTR _org_dist$[ebp]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _org_dist$[ebp], eax
; Line 6529
	jmp	SHORT $LN14@Ins_MDRP
$LN13@Ins_MDRP:
; Line 6534
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	edx, DWORD PTR _vec1$3[ebp]
	mov	eax, DWORD PTR _vec2$2[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _vec$1[ebp], eax
; Line 6535
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+224]
	push	eax
	mov	ecx, DWORD PTR _vec1$3[ebp]
	mov	edx, DWORD PTR _vec2$2[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _vec$1[ebp+4], eax
; Line 6537
	mov	esi, esp
	mov	ecx, DWORD PTR _vec$1[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _vec$1[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+576]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _org_dist$[ebp], eax
$LN14@Ins_MDRP:
; Line 6544
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _org_dist$[ebp]
	sub	ecx, DWORD PTR [eax+328]
	jns	SHORT $LN22@Ins_MDRP
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _org_dist$[ebp]
	sub	eax, DWORD PTR [edx+328]
	neg	eax
	mov	DWORD PTR tv197[ebp], eax
	jmp	SHORT $LN23@Ins_MDRP
$LN22@Ins_MDRP:
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _org_dist$[ebp]
	sub	edx, DWORD PTR [ecx+328]
	mov	DWORD PTR tv197[ebp], edx
$LN23@Ins_MDRP:
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR tv197[ebp]
	cmp	ecx, DWORD PTR [eax+324]
	jge	SHORT $LN11@Ins_MDRP
; Line 6546
	cmp	DWORD PTR _org_dist$[ebp], 0
	jl	SHORT $LN10@Ins_MDRP
; Line 6547
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+328]
	mov	DWORD PTR _org_dist$[ebp], eax
; Line 6548
	jmp	SHORT $LN11@Ins_MDRP
$LN10@Ins_MDRP:
; Line 6549
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+328]
	neg	edx
	mov	DWORD PTR _org_dist$[ebp], edx
$LN11@Ins_MDRP:
; Line 6554
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+368]
	and	ecx, 4
	je	SHORT $LN8@Ins_MDRP
; Line 6567
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	and	eax, 3
	mov	esi, esp
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+264]
	push	edx
	mov	eax, DWORD PTR _org_dist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+568]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _distance$[ebp], eax
; Line 6569
	jmp	SHORT $LN7@Ins_MDRP
$LN8@Ins_MDRP:
; Line 6572
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+368]
	and	edx, 3
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+264]
	push	ecx
	mov	edx, DWORD PTR _org_dist$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Round_None
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _distance$[ebp], eax
$LN7@Ins_MDRP:
; Line 6576
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+368]
	and	edx, 8
	je	SHORT $LN6@Ins_MDRP
; Line 6578
	cmp	DWORD PTR _org_dist$[ebp], 0
	jl	SHORT $LN5@Ins_MDRP
; Line 6580
	mov	eax, DWORD PTR _distance$[ebp]
	cmp	eax, DWORD PTR _minimum_distance$[ebp]
	jge	SHORT $LN4@Ins_MDRP
; Line 6581
	mov	ecx, DWORD PTR _minimum_distance$[ebp]
	mov	DWORD PTR _distance$[ebp], ecx
$LN4@Ins_MDRP:
; Line 6583
	jmp	SHORT $LN6@Ins_MDRP
$LN5@Ins_MDRP:
; Line 6585
	mov	edx, DWORD PTR _minimum_distance$[ebp]
	neg	edx
	cmp	DWORD PTR _distance$[ebp], edx
	jle	SHORT $LN6@Ins_MDRP
; Line 6586
	mov	eax, DWORD PTR _minimum_distance$[ebp]
	neg	eax
	mov	DWORD PTR _distance$[ebp], eax
$LN6@Ins_MDRP:
; Line 6593
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [edx+284]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+52]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	sub	eax, DWORD PTR [esi+edx*8+4]
	mov	esi, esp
	push	eax
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [edx+284]
	mov	edi, DWORD PTR _exc$[ebp]
	mov	edi, DWORD PTR [edi+52]
	mov	eax, DWORD PTR [eax+ecx*8]
	sub	eax, DWORD PTR [edi+edx*8]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+572]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _org_dist$[ebp], eax
; Line 6595
	mov	ecx, DWORD PTR _distance$[ebp]
	sub	ecx, DWORD PTR _org_dist$[ebp]
	mov	esi, esp
	push	ecx
	movzx	edx, WORD PTR _point$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+584]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$Fail$27:
; Line 6598
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	ax, WORD PTR [edx+284]
	mov	WORD PTR [ecx+286], ax
; Line 6599
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	dx, WORD PTR _point$[ebp]
	mov	WORD PTR [ecx+288], dx
; Line 6601
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+368]
	and	ecx, 16					; 00000010H
	je	SHORT $LN20@Ins_MDRP
; Line 6602
	mov	edx, DWORD PTR _exc$[ebp]
	mov	ax, WORD PTR _point$[ebp]
	mov	WORD PTR [edx+284], ax
$LN20@Ins_MDRP:
; Line 6603
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@Ins_MDRP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@Ins_MDRP:
	DD	1
	DD	$LN25@Ins_MDRP
$LN25@Ins_MDRP:
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN24@Ins_MDRP
$LN24@Ins_MDRP:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
_Ins_MDRP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv176 = -24						; size = 4
_control_value_cutin$ = -20				; size = 4
_org_dist$ = -16					; size = 4
_distance$ = -12					; size = 4
_point$ = -8						; size = 2
_cvtEntry$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_MIAP PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 6369
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 6377
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+320]
	mov	DWORD PTR _control_value_cutin$[ebp], ecx
; Line 6378
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _cvtEntry$[ebp], ecx
; Line 6379
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _point$[ebp], dx
; Line 6391
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+44]
	cmp	eax, edx
	jae	SHORT $LN5@Ins_MIAP
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _cvtEntry$[ebp]
	cmp	ecx, DWORD PTR [eax+380]
	jb	SHORT $LN6@Ins_MIAP
$LN5@Ins_MIAP:
; Line 6393
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN4@Ins_MIAP
; Line 6394
	push	OFFSET $SG12560
	push	6394					; 000018faH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN4@Ins_MIAP:
; Line 6395
	jmp	$Fail$11
$LN6@Ins_MIAP:
; Line 6418
	mov	esi, esp
	mov	edx, DWORD PTR _cvtEntry$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+596]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _distance$[ebp], eax
; Line 6420
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+344]
	test	ecx, ecx
	jne	SHORT $LN3@Ins_MIAP
; Line 6430
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+298]
	push	eax
	mov	ecx, DWORD PTR _distance$[ebp]
	push	ecx
	call	_TT_MulFix14
	add	esp, 8
	movzx	edx, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	mov	DWORD PTR [ecx+edx*8], eax
; Line 6433
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+300]
	push	eax
	mov	ecx, DWORD PTR _distance$[ebp]
	push	ecx
	call	_TT_MulFix14
	add	esp, 8
	movzx	edx, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	mov	DWORD PTR [ecx+edx*8+4], eax
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	movzx	edx, WORD PTR _point$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+52]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
$LN3@Ins_MIAP:
; Line 6444
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+eax*8+4]
	push	eax
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+ecx*8]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+572]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _org_dist$[ebp], eax
; Line 6446
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	and	eax, 1
	je	SHORT $LN2@Ins_MIAP
; Line 6448
	mov	ecx, DWORD PTR _distance$[ebp]
	sub	ecx, DWORD PTR _org_dist$[ebp]
	jns	SHORT $LN9@Ins_MIAP
	mov	edx, DWORD PTR _distance$[ebp]
	sub	edx, DWORD PTR _org_dist$[ebp]
	neg	edx
	mov	DWORD PTR tv176[ebp], edx
	jmp	SHORT $LN10@Ins_MIAP
$LN9@Ins_MIAP:
	mov	eax, DWORD PTR _distance$[ebp]
	sub	eax, DWORD PTR _org_dist$[ebp]
	mov	DWORD PTR tv176[ebp], eax
$LN10@Ins_MIAP:
	mov	ecx, DWORD PTR tv176[ebp]
	cmp	ecx, DWORD PTR _control_value_cutin$[ebp]
	jle	SHORT $LN1@Ins_MIAP
; Line 6449
	mov	edx, DWORD PTR _org_dist$[ebp]
	mov	DWORD PTR _distance$[ebp], edx
$LN1@Ins_MIAP:
; Line 6460
	mov	eax, 4
	imul	ecx, eax, 0
	mov	esi, esp
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+ecx+264]
	push	eax
	mov	ecx, DWORD PTR _distance$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+568]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _distance$[ebp], eax
$LN2@Ins_MIAP:
; Line 6463
	mov	edx, DWORD PTR _distance$[ebp]
	sub	edx, DWORD PTR _org_dist$[ebp]
	mov	esi, esp
	push	edx
	movzx	eax, WORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$Fail$11:
; Line 6466
	mov	edx, DWORD PTR _exc$[ebp]
	mov	ax, WORD PTR _point$[ebp]
	mov	WORD PTR [edx+284], ax
; Line 6467
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	dx, WORD PTR _point$[ebp]
	mov	WORD PTR [ecx+286], dx
; Line 6468
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_MIAP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_distance$ = -12					; size = 4
_cur_dist$ = -8						; size = 4
_point$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_MDAP PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 6320
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 6326
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _point$[ebp], ax
; Line 6328
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+44]
	cmp	ecx, eax
	jb	SHORT $LN4@Ins_MDAP
; Line 6330
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN3@Ins_MDAP
; Line 6331
	push	OFFSET $SG12537
	push	6331					; 000018bbH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN3@Ins_MDAP:
; Line 6332
	jmp	$LN5@Ins_MDAP
$LN4@Ins_MDAP:
; Line 6335
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	and	eax, 1
	je	SHORT $LN2@Ins_MDAP
; Line 6337
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+ecx*8+4]
	push	ecx
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+edx*8]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+572]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cur_dist$[ebp], eax
; Line 6349
	mov	eax, 4
	imul	ecx, eax, 0
	mov	esi, esp
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+ecx+264]
	push	eax
	mov	ecx, DWORD PTR _cur_dist$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+568]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _cur_dist$[ebp]
	mov	DWORD PTR _distance$[ebp], eax
; Line 6351
	jmp	SHORT $LN1@Ins_MDAP
$LN2@Ins_MDAP:
; Line 6352
	mov	DWORD PTR _distance$[ebp], 0
$LN1@Ins_MDAP:
; Line 6354
	mov	esi, esp
	mov	edx, DWORD PTR _distance$[ebp]
	push	edx
	movzx	eax, WORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 6356
	mov	edx, DWORD PTR _exc$[ebp]
	mov	ax, WORD PTR _point$[ebp]
	mov	WORD PTR [edx+284], ax
; Line 6357
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	dx, WORD PTR _point$[ebp]
	mov	WORD PTR [ecx+286], dx
$LN5@Ins_MDAP:
; Line 6358
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_MDAP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_distance$ = -8						; size = 4
_point$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_MSIRP PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 6251
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 6271
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _point$[ebp], ax
; Line 6274
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+80]
	cmp	ecx, eax
	jae	SHORT $LN4@Ins_MSIRP
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+284]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+44]
	cmp	edx, ecx
	jb	SHORT $LN5@Ins_MSIRP
$LN4@Ins_MSIRP:
; Line 6276
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN3@Ins_MSIRP
; Line 6277
	push	OFFSET $SG12520
	push	6277					; 00001885H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN3@Ins_MSIRP:
; Line 6278
	jmp	$LN6@Ins_MSIRP
$LN5@Ins_MSIRP:
; Line 6283
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+346]
	test	eax, eax
	jne	$LN2@Ins_MSIRP
; Line 6285
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+284]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	movzx	edx, WORD PTR _point$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+84]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
; Line 6286
	mov	eax, 4
	shl	eax, 0
	mov	esi, esp
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, WORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 6287
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	movzx	edx, WORD PTR _point$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+88]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
$LN2@Ins_MSIRP:
; Line 6291
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [ecx+284]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+52]
	mov	edx, DWORD PTR [edx+eax*8+4]
	sub	edx, DWORD PTR [esi+ecx*8+4]
	mov	esi, esp
	push	edx
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [ecx+284]
	mov	edi, DWORD PTR _exc$[ebp]
	mov	edi, DWORD PTR [edi+52]
	mov	edx, DWORD PTR [edx+eax*8]
	sub	edx, DWORD PTR [edi+ecx*8]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+572]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _distance$[ebp], eax
; Line 6302
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	sub	edx, DWORD PTR _distance$[ebp]
	mov	esi, esp
	push	edx
	movzx	eax, WORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 6304
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	cx, WORD PTR [eax+284]
	mov	WORD PTR [edx+286], cx
; Line 6305
	mov	edx, DWORD PTR _exc$[ebp]
	mov	ax, WORD PTR _point$[ebp]
	mov	WORD PTR [edx+288], ax
; Line 6307
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+368]
	and	edx, 1
	je	SHORT $LN6@Ins_MSIRP
; Line 6308
	mov	eax, DWORD PTR _exc$[ebp]
	mov	cx, WORD PTR _point$[ebp]
	mov	WORD PTR [eax+284], cx
$LN6@Ins_MSIRP:
; Line 6309
	pop	edi
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_MSIRP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_point$ = -12						; size = 2
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SHPIX PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 6099
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 6107
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	add	ecx, 1
	mov	edx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [edx+16], ecx
	jge	SHORT $LN7@Ins_SHPIX
; Line 6109
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN6@Ins_SHPIX
; Line 6110
	push	OFFSET $SG12490
	push	6110					; 000017deH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN6@Ins_SHPIX:
; Line 6111
	jmp	$Fail$10
$LN7@Ins_SHPIX:
; Line 6131
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+298]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_TT_MulFix14
	add	esp, 8
	mov	DWORD PTR _dx$[ebp], eax
; Line 6132
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+300]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_TT_MulFix14
	add	esp, 8
	mov	DWORD PTR _dy$[ebp], eax
$LN5@Ins_SHPIX:
; Line 6135
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+304], 0
	jle	$Fail$10
; Line 6137
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	sub	edx, 1
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 6139
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	dx, WORD PTR [ecx+edx*4]
	mov	WORD PTR _point$[ebp], dx
; Line 6141
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+116]
	cmp	eax, edx
	jb	SHORT $LN3@Ins_SHPIX
; Line 6143
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN2@Ins_SHPIX
; Line 6145
	push	OFFSET $SG12502
	push	6145					; 00001801H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 6146
	jmp	SHORT $LN8@Ins_SHPIX
$LN2@Ins_SHPIX:
; Line 6149
	jmp	SHORT $LN1@Ins_SHPIX
$LN3@Ins_SHPIX:
; Line 6230
	push	1
	mov	eax, DWORD PTR _dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dx$[ebp]
	push	ecx
	movzx	edx, WORD PTR _point$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Move_Zp2_Point
	add	esp, 20					; 00000014H
$LN1@Ins_SHPIX:
; Line 6234
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+304]
	sub	edx, 1
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+304], edx
; Line 6235
	jmp	$LN5@Ins_SHPIX
$Fail$10:
; Line 6238
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+304], 1
; Line 6239
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+32], ecx
$LN8@Ins_SHPIX:
; Line 6240
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_SHPIX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -88						; size = 2
_limit$ = -84						; size = 2
_dy$ = -76						; size = 4
_dx$ = -64						; size = 4
_refp$ = -52						; size = 2
_zp$ = -40						; size = 36
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SHZ PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 6052
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6061
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [edx+ecx], 2
	jb	SHORT $LN12@Ins_SHZ
; Line 6063
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN11@Ins_SHZ
; Line 6064
	push	OFFSET $SG12466
	push	6064					; 000017b0H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN11@Ins_SHZ:
; Line 6065
	jmp	$LN13@Ins_SHZ
$LN12@Ins_SHZ:
; Line 6068
	lea	eax, DWORD PTR _refp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dy$[ebp]
	push	edx
	lea	eax, DWORD PTR _dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Compute_Point_Displacement
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN10@Ins_SHZ
; Line 6069
	jmp	$LN13@Ins_SHZ
$LN10@Ins_SHZ:
; Line 6075
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+348]
	test	ecx, ecx
	jne	SHORT $LN9@Ins_SHZ
; Line 6076
	mov	edx, DWORD PTR _exc$[ebp]
	mov	ax, WORD PTR [edx+116]
	mov	WORD PTR _limit$[ebp], ax
	jmp	SHORT $LN8@Ins_SHZ
$LN9@Ins_SHZ:
; Line 6077
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+348]
	cmp	edx, 1
	jne	SHORT $LN7@Ins_SHZ
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+118]
	test	ecx, ecx
	jle	SHORT $LN7@Ins_SHZ
; Line 6078
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+118]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	movzx	eax, WORD PTR [edx+eax*2-2]
	add	eax, 1
	mov	WORD PTR _limit$[ebp], ax
; Line 6079
	jmp	SHORT $LN8@Ins_SHZ
$LN7@Ins_SHZ:
; Line 6080
	xor	ecx, ecx
	mov	WORD PTR _limit$[ebp], cx
$LN8@Ins_SHZ:
; Line 6083
	xor	edx, edx
	mov	WORD PTR _i$[ebp], dx
	jmp	SHORT $LN5@Ins_SHZ
$LN4@Ins_SHZ:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN5@Ins_SHZ:
	movzx	ecx, WORD PTR _i$[ebp]
	movzx	edx, WORD PTR _limit$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN13@Ins_SHZ
; Line 6085
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _zp$[ebp+16]
	cmp	ecx, DWORD PTR [eax+124]
	jne	SHORT $LN1@Ins_SHZ
	movzx	edx, WORD PTR _refp$[ebp]
	movzx	eax, WORD PTR _i$[ebp]
	cmp	edx, eax
	je	SHORT $LN2@Ins_SHZ
$LN1@Ins_SHZ:
; Line 6086
	push	0
	mov	ecx, DWORD PTR _dy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dx$[ebp]
	push	edx
	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Move_Zp2_Point
	add	esp, 20					; 00000014H
$LN2@Ins_SHZ:
; Line 6087
	jmp	SHORT $LN4@Ins_SHZ
$LN13@Ins_SHZ:
; Line 6088
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@Ins_SHZ
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@Ins_SHZ:
	DD	4
	DD	$LN19@Ins_SHZ
$LN19@Ins_SHZ:
	DD	-40					; ffffffd8H
	DD	36					; 00000024H
	DD	$LN15@Ins_SHZ
	DD	-52					; ffffffccH
	DD	2
	DD	$LN16@Ins_SHZ
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN17@Ins_SHZ
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN18@Ins_SHZ
$LN18@Ins_SHZ:
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
$LN17@Ins_SHZ:
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN16@Ins_SHZ:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	112					; 00000070H
	DB	0
$LN15@Ins_SHZ:
	DB	122					; 0000007aH
	DB	112					; 00000070H
	DB	0
_Ins_SHZ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -104						; size = 4
_i$ = -100						; size = 2
_limit$ = -96						; size = 2
_start$ = -92						; size = 2
_bounds$ = -88						; size = 2
_contour$ = -84						; size = 2
_dy$ = -76						; size = 4
_dx$ = -64						; size = 4
_refp$ = -52						; size = 2
_zp$ = -40						; size = 36
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SHC PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 6001
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	edi
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6010
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _contour$[ebp], ax
; Line 6011
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+348]
	test	edx, edx
	jne	SHORT $LN15@Ins_SHC
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN16@Ins_SHC
$LN15@Ins_SHC:
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+118]
	mov	DWORD PTR tv71[ebp], ecx
$LN16@Ins_SHC:
	mov	dx, WORD PTR tv71[ebp]
	mov	WORD PTR _bounds$[ebp], dx
; Line 6013
	movsx	eax, WORD PTR _contour$[ebp]
	movsx	ecx, WORD PTR _bounds$[ebp]
	cmp	eax, ecx
	jb	SHORT $LN12@Ins_SHC
; Line 6015
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN11@Ins_SHC
; Line 6016
	push	OFFSET $SG12437
	push	6016					; 00001780H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN11@Ins_SHC:
; Line 6017
	jmp	$LN13@Ins_SHC
$LN12@Ins_SHC:
; Line 6020
	lea	edx, DWORD PTR _refp$[ebp]
	push	edx
	lea	eax, DWORD PTR _zp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dx$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Compute_Point_Displacement
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@Ins_SHC
; Line 6021
	jmp	$LN13@Ins_SHC
$LN10@Ins_SHC:
; Line 6023
	movsx	edx, WORD PTR _contour$[ebp]
	test	edx, edx
	jne	SHORT $LN9@Ins_SHC
; Line 6024
	xor	eax, eax
	mov	WORD PTR _start$[ebp], ax
; Line 6025
	jmp	SHORT $LN8@Ins_SHC
$LN9@Ins_SHC:
; Line 6027
	movsx	ecx, WORD PTR _contour$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+136]
	movzx	ecx, WORD PTR [eax+ecx*2-2]
	add	ecx, 1
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+140]
	sub	ecx, eax
	mov	WORD PTR _start$[ebp], cx
$LN8@Ins_SHC:
; Line 6030
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+348]
	test	edx, edx
	jne	SHORT $LN7@Ins_SHC
; Line 6031
	mov	eax, DWORD PTR _exc$[ebp]
	mov	cx, WORD PTR [eax+116]
	mov	WORD PTR _limit$[ebp], cx
; Line 6032
	jmp	SHORT $LN6@Ins_SHC
$LN7@Ins_SHC:
; Line 6034
	movsx	edx, WORD PTR _contour$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+140]
	sub	edx, ecx
	add	edx, 1
	mov	WORD PTR _limit$[ebp], dx
$LN6@Ins_SHC:
; Line 6036
	mov	dx, WORD PTR _start$[ebp]
	mov	WORD PTR _i$[ebp], dx
	jmp	SHORT $LN5@Ins_SHC
$LN4@Ins_SHC:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN5@Ins_SHC:
	movzx	ecx, WORD PTR _i$[ebp]
	movzx	edx, WORD PTR _limit$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN13@Ins_SHC
; Line 6038
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _zp$[ebp+16]
	cmp	ecx, DWORD PTR [eax+124]
	jne	SHORT $LN1@Ins_SHC
	movzx	edx, WORD PTR _refp$[ebp]
	movzx	eax, WORD PTR _i$[ebp]
	cmp	edx, eax
	je	SHORT $LN2@Ins_SHC
$LN1@Ins_SHC:
; Line 6039
	push	1
	mov	ecx, DWORD PTR _dy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dx$[ebp]
	push	edx
	movzx	eax, WORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Move_Zp2_Point
	add	esp, 20					; 00000014H
$LN2@Ins_SHC:
; Line 6040
	jmp	SHORT $LN4@Ins_SHC
$LN13@Ins_SHC:
; Line 6041
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@Ins_SHC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@Ins_SHC:
	DD	4
	DD	$LN21@Ins_SHC
$LN21@Ins_SHC:
	DD	-40					; ffffffd8H
	DD	36					; 00000024H
	DD	$LN17@Ins_SHC
	DD	-52					; ffffffccH
	DD	2
	DD	$LN18@Ins_SHC
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN19@Ins_SHC
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN20@Ins_SHC
$LN20@Ins_SHC:
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
$LN19@Ins_SHC:
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN18@Ins_SHC:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	112					; 00000070H
	DB	0
$LN17@Ins_SHC:
	DB	122					; 0000007aH
	DB	112					; 00000070H
	DB	0
_Ins_SHC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_point$ = -84						; size = 2
_dy$ = -76						; size = 4
_dx$ = -64						; size = 4
_refp$ = -52						; size = 2
_zp$ = -40						; size = 36
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SHP PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5936
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 5944
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR _args$[ebp], ecx
; Line 5947
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+304]
	jge	SHORT $LN8@Ins_SHP
; Line 5949
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN7@Ins_SHP
; Line 5950
	push	OFFSET $SG12404
	push	5950					; 0000173eH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN7@Ins_SHP:
; Line 5951
	jmp	$Fail$17
$LN8@Ins_SHP:
; Line 5954
	lea	edx, DWORD PTR _refp$[ebp]
	push	edx
	lea	eax, DWORD PTR _zp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dx$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Compute_Point_Displacement
	add	esp, 20					; 00000014H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@Ins_SHP
; Line 5955
	jmp	$LN9@Ins_SHP
$LN5@Ins_SHP:
; Line 5957
	mov	edx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [edx+304], 0
	jle	$Fail$17
; Line 5959
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, 1
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 5960
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	cx, WORD PTR [eax+ecx*4]
	mov	WORD PTR _point$[ebp], cx
; Line 5962
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+116]
	cmp	edx, ecx
	jb	SHORT $LN3@Ins_SHP
; Line 5964
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN2@Ins_SHP
; Line 5966
	push	OFFSET $SG12415
	push	5966					; 0000174eH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 5967
	jmp	SHORT $LN9@Ins_SHP
$LN2@Ins_SHP:
; Line 5970
	jmp	SHORT $LN1@Ins_SHP
$LN3@Ins_SHP:
; Line 5978
	push	1
	mov	edx, DWORD PTR _dy$[ebp]
	push	edx
	mov	eax, DWORD PTR _dx$[ebp]
	push	eax
	movzx	ecx, WORD PTR _point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Move_Zp2_Point
	add	esp, 20					; 00000014H
$LN1@Ins_SHP:
; Line 5980
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	sub	ecx, 1
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+304], ecx
; Line 5981
	jmp	$LN5@Ins_SHP
$Fail$17:
; Line 5984
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+304], 1
; Line 5985
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+32], eax
$LN9@Ins_SHP:
; Line 5986
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Ins_SHP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@Ins_SHP:
	DD	4
	DD	$LN15@Ins_SHP
$LN15@Ins_SHP:
	DD	-40					; ffffffd8H
	DD	36					; 00000024H
	DD	$LN11@Ins_SHP
	DD	-52					; ffffffccH
	DD	2
	DD	$LN12@Ins_SHP
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN13@Ins_SHP
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN14@Ins_SHP
$LN14@Ins_SHP:
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
$LN13@Ins_SHP:
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN12@Ins_SHP:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	112					; 00000070H
	DB	0
$LN11@Ins_SHP:
	DB	122					; 0000007aH
	DB	112					; 00000070H
	DB	0
_Ins_SHP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_point$ = 12						; size = 2
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_touch$ = 24						; size = 1
_Move_Zp2_Point PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5892
	push	ebp
	mov	ebp, esp
; Line 5912
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+298]
	test	ecx, ecx
	je	SHORT $LN4@Move_Zp2_P
; Line 5914
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	edx, DWORD PTR [ecx+edx*8]
	add	edx, DWORD PTR _dx$[ebp]
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	mov	DWORD PTR [ecx+eax*8], edx
; Line 5915
	movzx	edx, BYTE PTR _touch$[ebp]
	test	edx, edx
	je	SHORT $LN4@Move_Zp2_P
; Line 5916
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	movzx	eax, BYTE PTR [edx+eax]
	or	eax, 8
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [edx+132]
	mov	BYTE PTR [edx+ecx], al
$LN4@Move_Zp2_P:
; Line 5919
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+300]
	test	ecx, ecx
	je	SHORT $LN5@Move_Zp2_P
; Line 5921
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	edx, DWORD PTR [ecx+edx*8+4]
	add	edx, DWORD PTR _dy$[ebp]
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 5922
	movzx	edx, BYTE PTR _touch$[ebp]
	test	edx, edx
	je	SHORT $LN5@Move_Zp2_P
; Line 5923
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	movzx	eax, BYTE PTR [edx+eax]
	or	eax, 16					; 00000010H
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [edx+132]
	mov	BYTE PTR [edx+ecx], al
$LN5@Move_Zp2_P:
; Line 5925
	pop	ebp
	ret	0
_Move_Zp2_Point ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_d$ = -52						; size = 4
_p$ = -48						; size = 2
_zp$ = -40						; size = 36
_exc$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_zone$ = 20						; size = 4
_refp$ = 24						; size = 4
_Compute_Point_Displacement PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5832
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 5838
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+368]
	and	ecx, 1
	je	SHORT $LN4@Compute_Po
; Line 5840
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 36					; 00000024H
	mov	ecx, 9
	lea	edi, DWORD PTR _zp$[ebp]
	rep movsd
; Line 5841
	mov	edx, DWORD PTR _exc$[ebp]
	mov	ax, WORD PTR [edx+286]
	mov	WORD PTR _p$[ebp], ax
; Line 5843
	jmp	SHORT $LN3@Compute_Po
$LN4@Compute_Po:
; Line 5845
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 72					; 00000048H
	mov	ecx, 9
	lea	edi, DWORD PTR _zp$[ebp]
	rep movsd
; Line 5846
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	dx, WORD PTR [ecx+288]
	mov	WORD PTR _p$[ebp], dx
$LN3@Compute_Po:
; Line 5849
	movzx	eax, WORD PTR _p$[ebp]
	movzx	ecx, WORD PTR _zp$[ebp+8]
	cmp	eax, ecx
	jb	SHORT $LN2@Compute_Po
; Line 5851
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN1@Compute_Po
; Line 5852
	push	OFFSET $SG12372
	push	5852					; 000016dcH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@Compute_Po:
; Line 5853
	xor	edx, edx
	mov	eax, DWORD PTR _refp$[ebp]
	mov	WORD PTR [eax], dx
; Line 5854
	mov	al, 1
	jmp	$LN5@Compute_Po
$LN2@Compute_Po:
; Line 5857
	mov	ecx, 9
	lea	esi, DWORD PTR _zp$[ebp]
	mov	edi, DWORD PTR _zone$[ebp]
	rep movsd
; Line 5858
	mov	ecx, DWORD PTR _refp$[ebp]
	mov	dx, WORD PTR _p$[ebp]
	mov	WORD PTR [ecx], dx
; Line 5860
	movzx	eax, WORD PTR _p$[ebp]
	movzx	ecx, WORD PTR _p$[ebp]
	mov	edx, DWORD PTR _zp$[ebp+16]
	mov	esi, DWORD PTR _zp$[ebp+12]
	mov	eax, DWORD PTR [edx+eax*8+4]
	sub	eax, DWORD PTR [esi+ecx*8+4]
	mov	esi, esp
	push	eax
	movzx	ecx, WORD PTR _p$[ebp]
	movzx	edx, WORD PTR _p$[ebp]
	mov	eax, DWORD PTR _zp$[ebp+16]
	mov	edi, DWORD PTR _zp$[ebp+12]
	mov	ecx, DWORD PTR [eax+ecx*8]
	sub	ecx, DWORD PTR [edi+edx*8]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+572]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _d$[ebp], eax
; Line 5879
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+564]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	movsx	edx, WORD PTR [ecx+298]
	push	edx
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 5880
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+564]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	movsx	edx, WORD PTR [ecx+300]
	push	edx
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 5883
	xor	al, al
$LN5@Compute_Po:
; Line 5884
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Compute_Po
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@Compute_Po:
	DD	1
	DD	$LN8@Compute_Po
$LN8@Compute_Po:
	DD	-40					; ffffffd8H
	DD	36					; 00000024H
	DD	$LN7@Compute_Po
$LN7@Compute_Po:
	DB	122					; 0000007aH
	DB	112					; 00000070H
	DB	0
_Compute_Point_Displacement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_L$ = -12						; size = 2
_K$ = -8						; size = 2
_I$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_FLIPRGOFF PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5807
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5811
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _K$[ebp], dx
; Line 5812
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _L$[ebp], ax
; Line 5815
	movzx	ecx, WORD PTR _K$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+152]
	cmp	ecx, eax
	jae	SHORT $LN5@Ins_FLIPRG
	movzx	ecx, WORD PTR _L$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+152]
	cmp	ecx, eax
	jb	SHORT $LN6@Ins_FLIPRG
$LN5@Ins_FLIPRG:
; Line 5817
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN4@Ins_FLIPRG
; Line 5818
	push	OFFSET $SG12347
	push	5818					; 000016baH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN4@Ins_FLIPRG:
; Line 5819
	jmp	SHORT $LN7@Ins_FLIPRG
$LN6@Ins_FLIPRG:
; Line 5822
	mov	dx, WORD PTR _L$[ebp]
	mov	WORD PTR _I$[ebp], dx
	jmp	SHORT $LN3@Ins_FLIPRG
$LN2@Ins_FLIPRG:
	mov	ax, WORD PTR _I$[ebp]
	add	ax, 1
	mov	WORD PTR _I$[ebp], ax
$LN3@Ins_FLIPRG:
	movzx	ecx, WORD PTR _I$[ebp]
	movzx	edx, WORD PTR _K$[ebp]
	cmp	ecx, edx
	jg	SHORT $LN7@Ins_FLIPRG
; Line 5823
	movzx	eax, WORD PTR _I$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	movzx	eax, BYTE PTR [edx+eax]
	and	eax, -2					; fffffffeH
	movzx	ecx, WORD PTR _I$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [edx+168]
	mov	BYTE PTR [edx+ecx], al
	jmp	SHORT $LN2@Ins_FLIPRG
$LN7@Ins_FLIPRG:
; Line 5824
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_FLIPRGOFF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_L$ = -12						; size = 2
_K$ = -8						; size = 2
_I$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_FLIPRGON PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5779
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5783
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _K$[ebp], dx
; Line 5784
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _L$[ebp], ax
; Line 5787
	movzx	ecx, WORD PTR _K$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+152]
	cmp	ecx, eax
	jae	SHORT $LN5@Ins_FLIPRG
	movzx	ecx, WORD PTR _L$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+152]
	cmp	ecx, eax
	jb	SHORT $LN6@Ins_FLIPRG
$LN5@Ins_FLIPRG:
; Line 5789
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN4@Ins_FLIPRG
; Line 5790
	push	OFFSET $SG12325
	push	5790					; 0000169eH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN4@Ins_FLIPRG:
; Line 5791
	jmp	SHORT $LN7@Ins_FLIPRG
$LN6@Ins_FLIPRG:
; Line 5794
	mov	dx, WORD PTR _L$[ebp]
	mov	WORD PTR _I$[ebp], dx
	jmp	SHORT $LN3@Ins_FLIPRG
$LN2@Ins_FLIPRG:
	mov	ax, WORD PTR _I$[ebp]
	add	ax, 1
	mov	WORD PTR _I$[ebp], ax
$LN3@Ins_FLIPRG:
	movzx	ecx, WORD PTR _I$[ebp]
	movzx	edx, WORD PTR _K$[ebp]
	cmp	ecx, edx
	jg	SHORT $LN7@Ins_FLIPRG
; Line 5795
	movzx	eax, WORD PTR _I$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	movzx	eax, BYTE PTR [edx+eax]
	or	eax, 1
	movzx	ecx, WORD PTR _I$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [edx+168]
	mov	BYTE PTR [edx+ecx], al
	jmp	SHORT $LN2@Ins_FLIPRG
$LN7@Ins_FLIPRG:
; Line 5796
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_FLIPRGON ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_point$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_FLIPPT PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5732
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5735
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR _args$[ebp], ecx
; Line 5738
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+304]
	jge	SHORT $LN5@Ins_FLIPPT
; Line 5740
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN6@Ins_FLIPPT
; Line 5741
	push	OFFSET $SG12295
	push	5741					; 0000166dH
	push	129					; 00000081H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 129				; 00000081H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN6@Ins_FLIPPT:
; Line 5742
	jmp	$Fail$10
$LN5@Ins_FLIPPT:
; Line 5745
	mov	edx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [edx+304], 0
	jle	$Fail$10
; Line 5747
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, 1
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 5749
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	cx, WORD PTR [eax+ecx*4]
	mov	WORD PTR _point$[ebp], cx
; Line 5751
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+152]
	cmp	edx, ecx
	jb	SHORT $LN3@Ins_FLIPPT
; Line 5753
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN2@Ins_FLIPPT
; Line 5755
	push	OFFSET $SG12305
	push	5755					; 0000167bH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 5756
	jmp	SHORT $LN8@Ins_FLIPPT
$LN2@Ins_FLIPPT:
; Line 5759
	jmp	SHORT $LN1@Ins_FLIPPT
$LN3@Ins_FLIPPT:
; Line 5760
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	movzx	edx, BYTE PTR [ecx+edx]
	xor	edx, 1
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+168]
	mov	BYTE PTR [ecx+eax], dl
$LN1@Ins_FLIPPT:
; Line 5762
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+304]
	sub	eax, 1
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+304], eax
; Line 5763
	jmp	$LN5@Ins_FLIPPT
$Fail$10:
; Line 5766
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+304], 1
; Line 5767
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+32], edx
$LN8@Ins_FLIPPT:
; Line 5768
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_FLIPPT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SCANTYPE PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5709
	push	ebp
	mov	ebp, esp
; Line 5710
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	jl	SHORT $LN2@Ins_SCANTY
; Line 5711
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+340], ecx
$LN2@Ins_SCANTY:
; Line 5712
	pop	ebp
	ret	0
_Ins_SCANTYPE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_A$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SCANCTRL PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5663
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5668
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _A$[ebp], eax
; Line 5670
	cmp	DWORD PTR _A$[ebp], 255			; 000000ffH
	jne	SHORT $LN9@Ins_SCANCT
; Line 5672
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [ecx+337], 1
; Line 5673
	jmp	$LN10@Ins_SCANCT
	jmp	SHORT $LN8@Ins_SCANCT
$LN9@Ins_SCANCT:
; Line 5675
	cmp	DWORD PTR _A$[ebp], 0
	jne	SHORT $LN8@Ins_SCANCT
; Line 5677
	mov	edx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [edx+337], 0
; Line 5678
	jmp	$LN10@Ins_SCANCT
$LN8@Ins_SCANCT:
; Line 5681
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 256				; 00000100H
	je	SHORT $LN6@Ins_SCANCT
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+252]
	cmp	edx, DWORD PTR _A$[ebp]
	jg	SHORT $LN6@Ins_SCANCT
; Line 5682
	mov	eax, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [eax+337], 1
$LN6@Ins_SCANCT:
; Line 5684
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	and	ecx, 512				; 00000200H
	je	SHORT $LN5@Ins_SCANCT
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+281]
	test	eax, eax
	je	SHORT $LN5@Ins_SCANCT
; Line 5685
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [ecx+337], 1
$LN5@Ins_SCANCT:
; Line 5687
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 1024				; 00000400H
	je	SHORT $LN4@Ins_SCANCT
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+282]
	test	ecx, ecx
	je	SHORT $LN4@Ins_SCANCT
; Line 5688
	mov	edx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [edx+337], 1
$LN4@Ins_SCANCT:
; Line 5690
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	and	eax, 2048				; 00000800H
	je	SHORT $LN3@Ins_SCANCT
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+252]
	cmp	edx, DWORD PTR _A$[ebp]
	jle	SHORT $LN3@Ins_SCANCT
; Line 5691
	mov	eax, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [eax+337], 0
$LN3@Ins_SCANCT:
; Line 5693
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	and	ecx, 4096				; 00001000H
	je	SHORT $LN2@Ins_SCANCT
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+281]
	test	eax, eax
	je	SHORT $LN2@Ins_SCANCT
; Line 5694
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [ecx+337], 0
$LN2@Ins_SCANCT:
; Line 5696
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 8192				; 00002000H
	je	SHORT $LN10@Ins_SCANCT
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+282]
	test	ecx, ecx
	je	SHORT $LN10@Ins_SCANCT
; Line 5697
	mov	edx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [edx+337], 0
$LN10@Ins_SCANCT:
; Line 5698
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_SCANCTRL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_L$ = -8						; size = 4
_K$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_INSTCTRL PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5633
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5637
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _K$[ebp], edx
; Line 5638
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _L$[ebp], eax
; Line 5640
	cmp	DWORD PTR _K$[ebp], 1
	jl	SHORT $LN3@Ins_INSTCT
	cmp	DWORD PTR _K$[ebp], 2
	jle	SHORT $LN4@Ins_INSTCT
$LN3@Ins_INSTCT:
; Line 5642
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN2@Ins_INSTCT
; Line 5643
	push	OFFSET $SG12255
	push	5643					; 0000160bH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN2@Ins_INSTCT:
; Line 5644
	jmp	SHORT $LN5@Ins_INSTCT
$LN4@Ins_INSTCT:
; Line 5647
	cmp	DWORD PTR _L$[ebp], 0
	je	SHORT $LN1@Ins_INSTCT
; Line 5648
	mov	edx, DWORD PTR _K$[ebp]
	mov	DWORD PTR _L$[ebp], edx
$LN1@Ins_INSTCT:
; Line 5651
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+336]
	movzx	edx, BYTE PTR _K$[ebp]
	not	edx
	and	ecx, edx
	movzx	eax, BYTE PTR _L$[ebp]
	or	ecx, eax
	mov	edx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [edx+336], cl
$LN5@Ins_INSTCT:
; Line 5652
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_INSTCTRL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SZPS PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5599
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5600
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 0
	je	SHORT $LN4@Ins_SZPS
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN3@Ins_SZPS
	jmp	SHORT $LN2@Ins_SZPS
$LN4@Ins_SZPS:
; Line 5603
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 180				; 000000b4H
	mov	edi, DWORD PTR _exc$[ebp]
	add	edi, 36					; 00000024H
	mov	ecx, 9
	rep movsd
; Line 5604
	jmp	SHORT $LN5@Ins_SZPS
$LN3@Ins_SZPS:
; Line 5607
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 144				; 00000090H
	mov	edi, DWORD PTR _exc$[ebp]
	add	edi, 36					; 00000024H
	mov	ecx, 9
	rep movsd
; Line 5608
	jmp	SHORT $LN5@Ins_SZPS
$LN2@Ins_SZPS:
; Line 5611
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN1@Ins_SZPS
; Line 5612
	push	OFFSET $SG12240
	push	5612					; 000015ecH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@Ins_SZPS:
; Line 5613
	jmp	SHORT $LN7@Ins_SZPS
$LN5@Ins_SZPS:
; Line 5616
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _exc$[ebp]
	add	edi, 72					; 00000048H
	mov	ecx, 9
	rep movsd
; Line 5617
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _exc$[ebp]
	add	edi, 108				; 0000006cH
	mov	ecx, 9
	rep movsd
; Line 5619
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+eax]
	mov	WORD PTR [ecx+344], ax
; Line 5620
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	dx, WORD PTR [ecx+edx]
	mov	WORD PTR [eax+346], dx
; Line 5621
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _args$[ebp]
	mov	cx, WORD PTR [eax+ecx]
	mov	WORD PTR [edx+348], cx
$LN7@Ins_SZPS:
; Line 5622
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_SZPS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SZP2 PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5570
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5571
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 0
	je	SHORT $LN4@Ins_SZP2
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN3@Ins_SZP2
	jmp	SHORT $LN2@Ins_SZP2
$LN4@Ins_SZP2:
; Line 5574
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 180				; 000000b4H
	mov	edi, DWORD PTR _exc$[ebp]
	add	edi, 108				; 0000006cH
	mov	ecx, 9
	rep movsd
; Line 5575
	jmp	SHORT $LN5@Ins_SZP2
$LN3@Ins_SZP2:
; Line 5578
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 144				; 00000090H
	mov	edi, DWORD PTR _exc$[ebp]
	add	edi, 108				; 0000006cH
	mov	ecx, 9
	rep movsd
; Line 5579
	jmp	SHORT $LN5@Ins_SZP2
$LN2@Ins_SZP2:
; Line 5582
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN1@Ins_SZP2
; Line 5583
	push	OFFSET $SG12223
	push	5583					; 000015cfH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@Ins_SZP2:
; Line 5584
	jmp	SHORT $LN7@Ins_SZP2
$LN5@Ins_SZP2:
; Line 5587
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+eax]
	mov	WORD PTR [ecx+348], ax
$LN7@Ins_SZP2:
; Line 5588
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_SZP2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SZP1 PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5541
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5542
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 0
	je	SHORT $LN4@Ins_SZP1
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN3@Ins_SZP1
	jmp	SHORT $LN2@Ins_SZP1
$LN4@Ins_SZP1:
; Line 5545
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 180				; 000000b4H
	mov	edi, DWORD PTR _exc$[ebp]
	add	edi, 72					; 00000048H
	mov	ecx, 9
	rep movsd
; Line 5546
	jmp	SHORT $LN5@Ins_SZP1
$LN3@Ins_SZP1:
; Line 5549
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 144				; 00000090H
	mov	edi, DWORD PTR _exc$[ebp]
	add	edi, 72					; 00000048H
	mov	ecx, 9
	rep movsd
; Line 5550
	jmp	SHORT $LN5@Ins_SZP1
$LN2@Ins_SZP1:
; Line 5553
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN1@Ins_SZP1
; Line 5554
	push	OFFSET $SG12206
	push	5554					; 000015b2H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@Ins_SZP1:
; Line 5555
	jmp	SHORT $LN7@Ins_SZP1
$LN5@Ins_SZP1:
; Line 5558
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+eax]
	mov	WORD PTR [ecx+346], ax
$LN7@Ins_SZP1:
; Line 5559
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_SZP1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SZP0 PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5512
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5513
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 0
	je	SHORT $LN4@Ins_SZP0
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN3@Ins_SZP0
	jmp	SHORT $LN2@Ins_SZP0
$LN4@Ins_SZP0:
; Line 5516
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 180				; 000000b4H
	mov	edi, DWORD PTR _exc$[ebp]
	add	edi, 36					; 00000024H
	mov	ecx, 9
	rep movsd
; Line 5517
	jmp	SHORT $LN5@Ins_SZP0
$LN3@Ins_SZP0:
; Line 5520
	mov	esi, DWORD PTR _exc$[ebp]
	add	esi, 144				; 00000090H
	mov	edi, DWORD PTR _exc$[ebp]
	add	edi, 36					; 00000024H
	mov	ecx, 9
	rep movsd
; Line 5521
	jmp	SHORT $LN5@Ins_SZP0
$LN2@Ins_SZP0:
; Line 5524
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN1@Ins_SZP0
; Line 5525
	push	OFFSET $SG12189
	push	5525					; 00001595H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@Ins_SZP0:
; Line 5526
	jmp	SHORT $LN7@Ins_SZP0
$LN5@Ins_SZP0:
; Line 5529
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+eax]
	mov	WORD PTR [ecx+344], ax
$LN7@Ins_SZP0:
; Line 5530
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_SZP0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v2$1 = -40						; size = 4
_v1$2 = -36						; size = 4
_v2$3 = -32						; size = 4
_v1$4 = -28						; size = 4
_aOpc$ = -24						; size = 4
_p2$ = -20						; size = 2
_p1$ = -16						; size = 2
_C$ = -12						; size = 4
_B$ = -8						; size = 4
_A$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SDPVTL PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5428
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 5431
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+368]
	mov	DWORD PTR _aOpc$[ebp], ecx
; Line 5434
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _args$[ebp]
	mov	cx, WORD PTR [eax+edx]
	mov	WORD PTR _p1$[ebp], cx
; Line 5435
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _p2$[ebp], dx
; Line 5438
	movzx	eax, WORD PTR _p2$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+80]
	cmp	eax, edx
	jae	SHORT $LN6@Ins_SDPVTL
	movzx	eax, WORD PTR _p1$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+116]
	cmp	eax, edx
	jb	SHORT $LN7@Ins_SDPVTL
$LN6@Ins_SDPVTL:
; Line 5440
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN5@Ins_SDPVTL
; Line 5441
	push	OFFSET $SG12165
	push	5441					; 00001541H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN5@Ins_SDPVTL:
; Line 5442
	jmp	$LN8@Ins_SDPVTL
$LN7@Ins_SDPVTL:
; Line 5446
	movzx	eax, WORD PTR _p2$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _v1$4[ebp], eax
; Line 5447
	movzx	ecx, WORD PTR _p1$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+120]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _v2$3[ebp], ecx
; Line 5450
	mov	edx, DWORD PTR _v1$4[ebp]
	mov	eax, DWORD PTR _v2$3[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _A$[ebp], ecx
; Line 5451
	mov	edx, DWORD PTR _v1$4[ebp]
	mov	eax, DWORD PTR _v2$3[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _B$[ebp], ecx
; Line 5458
	cmp	DWORD PTR _A$[ebp], 0
	jne	SHORT $LN4@Ins_SDPVTL
	cmp	DWORD PTR _B$[ebp], 0
	jne	SHORT $LN4@Ins_SDPVTL
; Line 5460
	mov	DWORD PTR _A$[ebp], 16384		; 00004000H
; Line 5461
	mov	DWORD PTR _aOpc$[ebp], 0
$LN4@Ins_SDPVTL:
; Line 5465
	mov	edx, DWORD PTR _aOpc$[ebp]
	and	edx, 1
	je	SHORT $LN3@Ins_SDPVTL
; Line 5467
	mov	eax, DWORD PTR _B$[ebp]
	mov	DWORD PTR _C$[ebp], eax
; Line 5468
	mov	ecx, DWORD PTR _A$[ebp]
	mov	DWORD PTR _B$[ebp], ecx
; Line 5469
	mov	edx, DWORD PTR _C$[ebp]
	neg	edx
	mov	DWORD PTR _A$[ebp], edx
$LN3@Ins_SDPVTL:
; Line 5472
	mov	eax, DWORD PTR _exc$[ebp]
	add	eax, 290				; 00000122H
	push	eax
	mov	ecx, DWORD PTR _B$[ebp]
	push	ecx
	mov	edx, DWORD PTR _A$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Normalize
	add	esp, 16					; 00000010H
; Line 5475
	movzx	ecx, WORD PTR _p2$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+88]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _v1$2[ebp], ecx
; Line 5476
	movzx	edx, WORD PTR _p1$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _v2$1[ebp], edx
; Line 5479
	mov	eax, DWORD PTR _v1$2[ebp]
	mov	ecx, DWORD PTR _v2$1[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _A$[ebp], edx
; Line 5480
	mov	eax, DWORD PTR _v1$2[ebp]
	mov	ecx, DWORD PTR _v2$1[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _B$[ebp], edx
; Line 5482
	cmp	DWORD PTR _A$[ebp], 0
	jne	SHORT $LN2@Ins_SDPVTL
	cmp	DWORD PTR _B$[ebp], 0
	jne	SHORT $LN2@Ins_SDPVTL
; Line 5484
	mov	DWORD PTR _A$[ebp], 16384		; 00004000H
; Line 5485
	mov	DWORD PTR _aOpc$[ebp], 0
$LN2@Ins_SDPVTL:
; Line 5489
	mov	eax, DWORD PTR _aOpc$[ebp]
	and	eax, 1
	je	SHORT $LN1@Ins_SDPVTL
; Line 5491
	mov	ecx, DWORD PTR _B$[ebp]
	mov	DWORD PTR _C$[ebp], ecx
; Line 5492
	mov	edx, DWORD PTR _A$[ebp]
	mov	DWORD PTR _B$[ebp], edx
; Line 5493
	mov	eax, DWORD PTR _C$[ebp]
	neg	eax
	mov	DWORD PTR _A$[ebp], eax
$LN1@Ins_SDPVTL:
; Line 5496
	mov	ecx, DWORD PTR _exc$[ebp]
	add	ecx, 294				; 00000126H
	push	ecx
	mov	edx, DWORD PTR _B$[ebp]
	push	edx
	mov	eax, DWORD PTR _A$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Normalize
	add	esp, 16					; 00000010H
; Line 5500
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Compute_Funcs
	add	esp, 4
$LN8@Ins_SDPVTL:
; Line 5501
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_SDPVTL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vec$1 = -40						; size = 8
_vec2$2 = -28						; size = 4
_vec1$3 = -24						; size = 4
_vec2$4 = -20						; size = 4
_vec1$5 = -16						; size = 4
_D$ = -12						; size = 4
_L$ = -8						; size = 2
_K$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_MD	PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5352
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 5357
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _K$[ebp], dx
; Line 5358
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _L$[ebp], ax
; Line 5361
	movzx	ecx, WORD PTR _L$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+44]
	cmp	ecx, eax
	jae	SHORT $LN10@Ins_MD
	movzx	ecx, WORD PTR _K$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+80]
	cmp	ecx, eax
	jb	SHORT $LN11@Ins_MD
$LN10@Ins_MD:
; Line 5363
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN9@Ins_MD
; Line 5364
	push	OFFSET $SG12124
	push	5364					; 000014f4H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN9@Ins_MD:
; Line 5365
	mov	DWORD PTR _D$[ebp], 0
; Line 5367
	jmp	$LN8@Ins_MD
$LN11@Ins_MD:
; Line 5369
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	and	eax, 1
	je	SHORT $LN7@Ins_MD
; Line 5370
	movzx	ecx, WORD PTR _L$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+52]
	movzx	edx, WORD PTR _K$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	sub	eax, DWORD PTR [esi+edx*8+4]
	mov	esi, esp
	push	eax
	movzx	ecx, WORD PTR _L$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+52]
	movzx	edx, WORD PTR _K$[ebp]
	mov	edi, DWORD PTR _exc$[ebp]
	mov	edi, DWORD PTR [edi+88]
	mov	eax, DWORD PTR [eax+ecx*8]
	sub	eax, DWORD PTR [edi+edx*8]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+572]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _D$[ebp], eax
; Line 5371
	jmp	$LN8@Ins_MD
$LN7@Ins_MD:
; Line 5375
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+344]
	test	edx, edx
	je	SHORT $LN4@Ins_MD
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+346]
	test	ecx, ecx
	jne	SHORT $LN5@Ins_MD
$LN4@Ins_MD:
; Line 5377
	movzx	edx, WORD PTR _L$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _vec1$5[ebp], edx
; Line 5378
	movzx	eax, WORD PTR _K$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _vec2$4[ebp], eax
; Line 5381
	mov	ecx, DWORD PTR _vec1$5[ebp]
	mov	edx, DWORD PTR _vec2$4[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _vec1$5[ebp]
	mov	edx, DWORD PTR _vec2$4[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+576]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _D$[ebp], eax
; Line 5383
	jmp	$LN8@Ins_MD
$LN5@Ins_MD:
; Line 5385
	movzx	ecx, WORD PTR _L$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+56]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _vec1$3[ebp], ecx
; Line 5386
	movzx	edx, WORD PTR _K$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _vec2$2[ebp], edx
; Line 5389
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [eax+220]
	cmp	edx, DWORD PTR [ecx+224]
	jne	SHORT $LN2@Ins_MD
; Line 5392
	mov	eax, DWORD PTR _vec1$3[ebp]
	mov	ecx, DWORD PTR _vec2$2[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _vec1$3[ebp]
	mov	ecx, DWORD PTR _vec2$2[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+576]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _D$[ebp], eax
; Line 5393
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	edx, DWORD PTR _D$[ebp]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _D$[ebp], eax
; Line 5395
	jmp	SHORT $LN8@Ins_MD
$LN2@Ins_MD:
; Line 5400
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	edx, DWORD PTR _vec1$3[ebp]
	mov	eax, DWORD PTR _vec2$2[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _vec$1[ebp], eax
; Line 5401
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+224]
	push	eax
	mov	ecx, DWORD PTR _vec1$3[ebp]
	mov	edx, DWORD PTR _vec2$2[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _vec$1[ebp+4], eax
; Line 5403
	mov	esi, esp
	mov	ecx, DWORD PTR _vec$1[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _vec$1[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+576]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _D$[ebp], eax
$LN8@Ins_MD:
; Line 5416
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _D$[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 5417
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Ins_MD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@Ins_MD:
	DD	1
	DD	$LN15@Ins_MD
$LN15@Ins_MD:
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN14@Ins_MD
$LN14@Ins_MD:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
_Ins_MD	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_L$ = -8						; size = 2
_K$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_SCFS PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5310
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5315
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _L$[ebp], ax
; Line 5317
	movzx	ecx, WORD PTR _L$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [edx+116]
	cmp	ecx, eax
	jb	SHORT $LN3@Ins_SCFS
; Line 5319
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN2@Ins_SCFS
; Line 5320
	push	OFFSET $SG12104
	push	5320					; 000014c8H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN2@Ins_SCFS:
; Line 5321
	jmp	$LN4@Ins_SCFS
$LN3@Ins_SCFS:
; Line 5324
	movzx	edx, WORD PTR _L$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+edx*8+4]
	push	edx
	movzx	eax, WORD PTR _L$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	eax, DWORD PTR [edx+eax*8]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+572]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _K$[ebp], eax
; Line 5326
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	sub	eax, DWORD PTR _K$[ebp]
	mov	esi, esp
	push	eax
	movzx	ecx, WORD PTR _L$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+584]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5330
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+348]
	test	ecx, ecx
	jne	SHORT $LN4@Ins_SCFS
; Line 5331
	movzx	edx, WORD PTR _L$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	movzx	edx, WORD PTR _L$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [esi+120]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
$LN4@Ins_SCFS:
; Line 5332
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_SCFS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_R$ = -8						; size = 4
_L$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_GC	PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5273
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5278
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _L$[ebp], eax
; Line 5280
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+116]
	cmp	DWORD PTR _L$[ebp], edx
	jb	SHORT $LN5@Ins_GC
; Line 5282
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN4@Ins_GC
; Line 5283
	push	OFFSET $SG12087
	push	5283					; 000014a3H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN4@Ins_GC:
; Line 5284
	mov	DWORD PTR _R$[ebp], 0
; Line 5286
	jmp	$LN3@Ins_GC
$LN5@Ins_GC:
; Line 5288
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+368]
	and	ecx, 1
	je	SHORT $LN2@Ins_GC
; Line 5289
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	esi, esp
	mov	ecx, DWORD PTR _L$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8+4]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	edx, DWORD PTR _L$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+576]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _R$[ebp], eax
; Line 5290
	jmp	SHORT $LN3@Ins_GC
$LN2@Ins_GC:
; Line 5291
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	esi, esp
	mov	eax, DWORD PTR _L$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8+4]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	ecx, DWORD PTR _L$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+572]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _R$[ebp], eax
$LN3@Ins_GC:
; Line 5294
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 5295
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_GC	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_K$ = -8						; size = 2
_L$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_PUSHW PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5236
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+368]
	sub	ecx, 183				; 000000b7H
	mov	WORD PTR _L$[ebp], cx
; Line 5238
	movzx	edx, WORD PTR _L$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	eax, DWORD PTR _exc$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	cmp	edx, ecx
	jb	SHORT $LN4@Ins_PUSHW
; Line 5240
	push	OFFSET $SG12070
	push	5240					; 00001478H
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 5241
	jmp	SHORT $LN5@Ins_PUSHW
$LN4@Ins_PUSHW:
; Line 5244
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+360]
	add	eax, 1
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+360], eax
; Line 5246
	xor	edx, edx
	mov	WORD PTR _K$[ebp], dx
	jmp	SHORT $LN3@Ins_PUSHW
$LN2@Ins_PUSHW:
	mov	ax, WORD PTR _K$[ebp]
	add	ax, 1
	mov	WORD PTR _K$[ebp], ax
$LN3@Ins_PUSHW:
	movzx	ecx, WORD PTR _K$[ebp]
	movzx	edx, WORD PTR _L$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN1@Ins_PUSHW
; Line 5247
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_GetShortIns
	add	esp, 4
	movzx	ecx, WORD PTR _K$[ebp]
	movsx	edx, ax
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN2@Ins_PUSHW
$LN1@Ins_PUSHW:
; Line 5249
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [ecx+376], 0
$LN5@Ins_PUSHW:
; Line 5250
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_PUSHW ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_K$ = -8						; size = 2
_L$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_PUSHB PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5207
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5211
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+368]
	sub	ecx, 175				; 000000afH
	mov	WORD PTR _L$[ebp], cx
; Line 5213
	movzx	edx, WORD PTR _L$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	eax, DWORD PTR _exc$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	cmp	edx, ecx
	jb	SHORT $LN4@Ins_PUSHB
; Line 5215
	push	OFFSET $SG12054
	push	5215					; 0000145fH
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 5216
	jmp	SHORT $LN5@Ins_PUSHB
$LN4@Ins_PUSHB:
; Line 5219
	mov	edx, 1
	mov	WORD PTR _K$[ebp], dx
	jmp	SHORT $LN3@Ins_PUSHB
$LN2@Ins_PUSHB:
	mov	ax, WORD PTR _K$[ebp]
	add	ax, 1
	mov	WORD PTR _K$[ebp], ax
$LN3@Ins_PUSHB:
	movzx	ecx, WORD PTR _K$[ebp]
	movzx	edx, WORD PTR _L$[ebp]
	cmp	ecx, edx
	jg	SHORT $LN5@Ins_PUSHB
; Line 5220
	movzx	eax, WORD PTR _K$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	add	edx, eax
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	movzx	eax, WORD PTR _K$[ebp]
	movzx	ecx, BYTE PTR [ecx+edx]
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+eax*4-4], ecx
	jmp	SHORT $LN2@Ins_PUSHB
$LN5@Ins_PUSHB:
; Line 5221
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_PUSHB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_K$ = -8						; size = 2
_L$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_NPUSHW PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5177
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5181
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+356]
	movzx	cx, BYTE PTR [eax+ecx+1]
	mov	WORD PTR _L$[ebp], cx
; Line 5183
	movzx	edx, WORD PTR _L$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	eax, DWORD PTR _exc$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	cmp	edx, ecx
	jb	SHORT $LN4@Ins_NPUSHW
; Line 5185
	push	OFFSET $SG12038
	push	5185					; 00001441H
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 5186
	jmp	SHORT $LN5@Ins_NPUSHW
$LN4@Ins_NPUSHW:
; Line 5189
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+360]
	add	eax, 2
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+360], eax
; Line 5191
	xor	edx, edx
	mov	WORD PTR _K$[ebp], dx
	jmp	SHORT $LN3@Ins_NPUSHW
$LN2@Ins_NPUSHW:
	mov	ax, WORD PTR _K$[ebp]
	add	ax, 1
	mov	WORD PTR _K$[ebp], ax
$LN3@Ins_NPUSHW:
	movzx	ecx, WORD PTR _K$[ebp]
	movzx	edx, WORD PTR _L$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN1@Ins_NPUSHW
; Line 5192
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_GetShortIns
	add	esp, 4
	movzx	ecx, WORD PTR _K$[ebp]
	movsx	edx, ax
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN2@Ins_NPUSHW
$LN1@Ins_NPUSHW:
; Line 5194
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [ecx+376], 0
; Line 5195
	movzx	edx, WORD PTR _L$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	add	edx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+32], edx
$LN5@Ins_NPUSHW:
; Line 5196
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_NPUSHW ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_K$ = -8						; size = 2
_L$ = -4						; size = 2
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_NPUSHB PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5150
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5154
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+356]
	movzx	cx, BYTE PTR [eax+ecx+1]
	mov	WORD PTR _L$[ebp], cx
; Line 5156
	movzx	edx, WORD PTR _L$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	eax, DWORD PTR _exc$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	cmp	edx, ecx
	jb	SHORT $LN4@Ins_NPUSHB
; Line 5158
	push	OFFSET $SG12022
	push	5158					; 00001426H
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 5159
	jmp	SHORT $LN5@Ins_NPUSHB
$LN4@Ins_NPUSHB:
; Line 5162
	mov	edx, 1
	mov	WORD PTR _K$[ebp], dx
	jmp	SHORT $LN3@Ins_NPUSHB
$LN2@Ins_NPUSHB:
	mov	ax, WORD PTR _K$[ebp]
	add	ax, 1
	mov	WORD PTR _K$[ebp], ax
$LN3@Ins_NPUSHB:
	movzx	ecx, WORD PTR _K$[ebp]
	movzx	edx, WORD PTR _L$[ebp]
	cmp	ecx, edx
	jg	SHORT $LN1@Ins_NPUSHB
; Line 5163
	movzx	eax, WORD PTR _K$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	add	edx, eax
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	movzx	eax, WORD PTR _K$[ebp]
	movzx	ecx, BYTE PTR [ecx+edx+1]
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+eax*4-4], ecx
	jmp	SHORT $LN2@Ins_NPUSHB
$LN1@Ins_NPUSHB:
; Line 5165
	movzx	eax, WORD PTR _L$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	add	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+32], eax
$LN5@Ins_NPUSHB:
; Line 5166
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_NPUSHB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv156 = -12						; size = 4
_limit$ = -8						; size = 4
_def$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_IDEF PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 5075
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5082
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	mov	DWORD PTR _def$[ebp], ecx
; Line 5083
	mov	edx, DWORD PTR _exc$[ebp]
	imul	eax, DWORD PTR [edx+408], 24
	add	eax, DWORD PTR _def$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 5085
	jmp	SHORT $LN15@Ins_IDEF
$LN14@Ins_IDEF:
	mov	ecx, DWORD PTR _def$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _def$[ebp], ecx
$LN15@Ins_IDEF:
	mov	edx, DWORD PTR _def$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN13@Ins_IDEF
; Line 5086
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _def$[ebp]
	mov	eax, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+12]
	cmp	edx, DWORD PTR [eax+ecx]
	jne	SHORT $LN12@Ins_IDEF
; Line 5087
	jmp	SHORT $LN13@Ins_IDEF
$LN12@Ins_IDEF:
; Line 5089
	jmp	SHORT $LN14@Ins_IDEF
$LN13@Ins_IDEF:
	mov	eax, DWORD PTR _def$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jne	SHORT $LN11@Ins_IDEF
; Line 5092
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [ecx+408]
	cmp	eax, DWORD PTR [edx+412]
	jb	SHORT $LN10@Ins_IDEF
; Line 5094
	push	OFFSET $SG11992
	push	5094					; 000013e6H
	push	141					; 0000008dH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 141				; 0000008dH
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 5095
	jmp	$LN16@Ins_IDEF
$LN10@Ins_IDEF:
; Line 5097
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+408]
	add	eax, 1
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+408], eax
$LN11@Ins_IDEF:
; Line 5101
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [ecx+eax], 0
	jl	SHORT $LN8@Ins_IDEF
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [ecx+eax], 255		; 000000ffH
	jle	SHORT $LN9@Ins_IDEF
$LN8@Ins_IDEF:
; Line 5103
	push	OFFSET $SG11995
	push	5103					; 000013efH
	push	141					; 0000008dH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 141				; 0000008dH
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 5104
	jmp	$LN16@Ins_IDEF
$LN9@Ins_IDEF:
; Line 5107
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _def$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 5108
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+360]
	add	eax, 1
	mov	ecx, DWORD PTR _def$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 5109
	mov	edx, DWORD PTR _def$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+352]
	mov	DWORD PTR [edx], ecx
; Line 5110
	mov	edx, DWORD PTR _def$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 5112
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	cmp	ecx, DWORD PTR [eax+424]
	jbe	SHORT $LN6@Ins_IDEF
; Line 5113
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+424], edx
$LN6@Ins_IDEF:
; Line 5118
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_SkipCode
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN16@Ins_IDEF
; Line 5120
	mov	eax, DWORD PTR _exc$[ebp]
	mov	cl, BYTE PTR [eax+368]
	mov	BYTE PTR tv156[ebp], cl
	cmp	BYTE PTR tv156[ebp], 44			; 0000002cH
	je	SHORT $LN2@Ins_IDEF
	cmp	BYTE PTR tv156[ebp], 45			; 0000002dH
	je	SHORT $LN1@Ins_IDEF
	cmp	BYTE PTR tv156[ebp], 137		; 00000089H
	je	SHORT $LN2@Ins_IDEF
	jmp	SHORT $LN3@Ins_IDEF
$LN2@Ins_IDEF:
; Line 5124
	push	OFFSET $SG12008
	push	5124					; 00001404H
	push	137					; 00000089H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 137				; 00000089H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 5125
	jmp	SHORT $LN16@Ins_IDEF
$LN1@Ins_IDEF:
; Line 5127
	jmp	SHORT $LN16@Ins_IDEF
$LN3@Ins_IDEF:
; Line 5129
	jmp	SHORT $LN6@Ins_IDEF
$LN16@Ins_IDEF:
; Line 5130
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_IDEF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$1 = -16						; size = 4
_def$ = -12						; size = 4
_pCrec$ = -8						; size = 4
_F$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_LOOPCALL PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 4987
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 4994
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _F$[ebp], edx
; Line 4995
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	add	ecx, 1
	cmp	DWORD PTR _F$[ebp], ecx
	jb	SHORT $LN9@Ins_LOOPCA
; Line 4996
	jmp	$Fail$12
$LN9@Ins_LOOPCA:
; Line 5007
	imul	edx, DWORD PTR _F$[ebp], 24
	mov	eax, DWORD PTR _exc$[ebp]
	add	edx, DWORD PTR [eax+404]
	mov	DWORD PTR _def$[ebp], edx
; Line 5008
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+420]
	add	edx, 1
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	edx, DWORD PTR [eax+396]
	jne	SHORT $LN7@Ins_LOOPCA
	mov	ecx, DWORD PTR _def$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _F$[ebp]
	je	SHORT $LN8@Ins_LOOPCA
$LN7@Ins_LOOPCA:
; Line 5014
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	mov	DWORD PTR _def$[ebp], ecx
; Line 5015
	mov	edx, DWORD PTR _exc$[ebp]
	imul	eax, DWORD PTR [edx+396], 24
	add	eax, DWORD PTR _def$[ebp]
	mov	DWORD PTR _limit$1[ebp], eax
$LN6@Ins_LOOPCA:
; Line 5017
	mov	ecx, DWORD PTR _def$[ebp]
	cmp	ecx, DWORD PTR _limit$1[ebp]
	jae	SHORT $LN5@Ins_LOOPCA
	mov	edx, DWORD PTR _def$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR _F$[ebp]
	je	SHORT $LN5@Ins_LOOPCA
; Line 5018
	mov	ecx, DWORD PTR _def$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _def$[ebp], ecx
	jmp	SHORT $LN6@Ins_LOOPCA
$LN5@Ins_LOOPCA:
; Line 5020
	mov	edx, DWORD PTR _def$[ebp]
	cmp	edx, DWORD PTR _limit$1[ebp]
	jne	SHORT $LN8@Ins_LOOPCA
; Line 5021
	jmp	$Fail$12
$LN8@Ins_LOOPCA:
; Line 5025
	mov	eax, DWORD PTR _def$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN3@Ins_LOOPCA
; Line 5026
	jmp	$Fail$12
$LN3@Ins_LOOPCA:
; Line 5038
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [edx+428]
	cmp	ecx, DWORD PTR [eax+432]
	jl	SHORT $LN2@Ins_LOOPCA
; Line 5040
	push	OFFSET $SG11973
	push	5040					; 000013b0H
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 5041
	jmp	$LN10@Ins_LOOPCA
$LN2@Ins_LOOPCA:
; Line 5044
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	jle	$LN1@Ins_LOOPCA
; Line 5046
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	shl	ecx, 4
	mov	edx, DWORD PTR _exc$[ebp]
	add	ecx, DWORD PTR [edx+436]
	mov	DWORD PTR _pCrec$[ebp], ecx
; Line 5048
	mov	eax, DWORD PTR _pCrec$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+352]
	mov	DWORD PTR [eax], edx
; Line 5049
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	add	ecx, 1
	mov	edx, DWORD PTR _pCrec$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 5050
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pCrec$[ebp]
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+8], ecx
; Line 5051
	mov	edx, DWORD PTR _pCrec$[ebp]
	mov	eax, DWORD PTR _def$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 5053
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+428]
	add	edx, 1
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+428], edx
; Line 5055
	mov	ecx, DWORD PTR _def$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _def$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_Goto_CodeRange
	add	esp, 12					; 0000000cH
; Line 5057
	mov	eax, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [eax+376], 0
$LN1@Ins_LOOPCA:
; Line 5060
	jmp	SHORT $LN10@Ins_LOOPCA
$Fail$12:
; Line 5063
	push	OFFSET $SG11976
	push	5063					; 000013c7H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN10@Ins_LOOPCA:
; Line 5064
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_LOOPCALL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$1 = -16						; size = 4
_def$ = -12						; size = 4
_pCrec$ = -8						; size = 4
_F$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_CALL PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 4898
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 4906
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _F$[ebp], eax
; Line 4907
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+420]
	add	edx, 1
	cmp	DWORD PTR _F$[ebp], edx
	jb	SHORT $LN8@Ins_CALL
; Line 4908
	jmp	$Fail$11
$LN8@Ins_CALL:
; Line 4919
	imul	eax, DWORD PTR _F$[ebp], 24
	mov	ecx, DWORD PTR _exc$[ebp]
	add	eax, DWORD PTR [ecx+404]
	mov	DWORD PTR _def$[ebp], eax
; Line 4920
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+420]
	add	eax, 1
	mov	ecx, DWORD PTR _exc$[ebp]
	cmp	eax, DWORD PTR [ecx+396]
	jne	SHORT $LN6@Ins_CALL
	mov	edx, DWORD PTR _def$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR _F$[ebp]
	je	SHORT $LN7@Ins_CALL
$LN6@Ins_CALL:
; Line 4926
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	mov	DWORD PTR _def$[ebp], edx
; Line 4927
	mov	eax, DWORD PTR _exc$[ebp]
	imul	ecx, DWORD PTR [eax+396], 24
	add	ecx, DWORD PTR _def$[ebp]
	mov	DWORD PTR _limit$1[ebp], ecx
$LN5@Ins_CALL:
; Line 4929
	mov	edx, DWORD PTR _def$[ebp]
	cmp	edx, DWORD PTR _limit$1[ebp]
	jae	SHORT $LN4@Ins_CALL
	mov	eax, DWORD PTR _def$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _F$[ebp]
	je	SHORT $LN4@Ins_CALL
; Line 4930
	mov	edx, DWORD PTR _def$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _def$[ebp], edx
	jmp	SHORT $LN5@Ins_CALL
$LN4@Ins_CALL:
; Line 4932
	mov	eax, DWORD PTR _def$[ebp]
	cmp	eax, DWORD PTR _limit$1[ebp]
	jne	SHORT $LN7@Ins_CALL
; Line 4933
	jmp	$Fail$11
$LN7@Ins_CALL:
; Line 4937
	mov	ecx, DWORD PTR _def$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	jne	SHORT $LN2@Ins_CALL
; Line 4938
	jmp	$Fail$11
$LN2@Ins_CALL:
; Line 4952
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [eax+428]
	cmp	edx, DWORD PTR [ecx+432]
	jl	SHORT $LN1@Ins_CALL
; Line 4954
	push	OFFSET $SG11949
	push	4954					; 0000135aH
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 4955
	jmp	$LN9@Ins_CALL
$LN1@Ins_CALL:
; Line 4958
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+428]
	shl	eax, 4
	mov	ecx, DWORD PTR _exc$[ebp]
	add	eax, DWORD PTR [ecx+436]
	mov	DWORD PTR _pCrec$[ebp], eax
; Line 4960
	mov	edx, DWORD PTR _pCrec$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+352]
	mov	DWORD PTR [edx], ecx
; Line 4961
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+360]
	add	eax, 1
	mov	ecx, DWORD PTR _pCrec$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 4962
	mov	edx, DWORD PTR _pCrec$[ebp]
	mov	DWORD PTR [edx+8], 1
; Line 4963
	mov	eax, DWORD PTR _pCrec$[ebp]
	mov	ecx, DWORD PTR _def$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 4965
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+428]
	add	eax, 1
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+428], eax
; Line 4968
	mov	edx, DWORD PTR _def$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _def$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_Goto_CodeRange
	add	esp, 12					; 0000000cH
; Line 4970
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [ecx+376], 0
; Line 4972
	jmp	SHORT $LN9@Ins_CALL
$Fail$11:
; Line 4975
	push	OFFSET $SG11950
	push	4975					; 0000136fH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN9@Ins_CALL:
; Line 4976
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_CALL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pRec$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_ENDF PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 4846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4849
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR _args$[ebp], ecx
; Line 4856
	mov	edx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [edx+428], 0
	jg	SHORT $LN3@Ins_ENDF
; Line 4858
	push	OFFSET $SG11924
	push	4858					; 000012faH
	push	136					; 00000088H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 136				; 00000088H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 4859
	jmp	$LN4@Ins_ENDF
$LN3@Ins_ENDF:
; Line 4862
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+428]
	sub	eax, 1
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+428], eax
; Line 4864
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+428]
	shl	eax, 4
	mov	ecx, DWORD PTR _exc$[ebp]
	add	eax, DWORD PTR [ecx+436]
	mov	DWORD PTR _pRec$[ebp], eax
; Line 4866
	mov	edx, DWORD PTR _pRec$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	mov	ecx, DWORD PTR _pRec$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 4868
	mov	edx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [edx+376], 0
; Line 4870
	mov	eax, DWORD PTR _pRec$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	SHORT $LN2@Ins_ENDF
; Line 4872
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+428]
	add	edx, 1
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+428], edx
; Line 4873
	mov	ecx, DWORD PTR _pRec$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+360], ecx
; Line 4875
	jmp	SHORT $LN4@Ins_ENDF
$LN2@Ins_ENDF:
; Line 4878
	mov	edx, DWORD PTR _pRec$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pRec$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_Goto_CodeRange
	add	esp, 12					; 0000000cH
$LN4@Ins_ENDF:
; Line 4887
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_ENDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv147 = -16						; size = 4
_limit$ = -12						; size = 4
_rec$ = -8						; size = 4
_n$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_FDEF PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 4551
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 4660
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	mov	DWORD PTR _rec$[ebp], ecx
; Line 4661
	mov	edx, DWORD PTR _exc$[ebp]
	imul	eax, DWORD PTR [edx+396], 24
	add	eax, DWORD PTR _rec$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 4662
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _n$[ebp], ecx
; Line 4664
	jmp	SHORT $LN14@Ins_FDEF
$LN13@Ins_FDEF:
	mov	edx, DWORD PTR _rec$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _rec$[ebp], edx
$LN14@Ins_FDEF:
	mov	eax, DWORD PTR _rec$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN12@Ins_FDEF
; Line 4666
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _n$[ebp]
	jne	SHORT $LN11@Ins_FDEF
; Line 4667
	jmp	SHORT $LN12@Ins_FDEF
$LN11@Ins_FDEF:
; Line 4668
	jmp	SHORT $LN13@Ins_FDEF
$LN12@Ins_FDEF:
; Line 4670
	mov	eax, DWORD PTR _rec$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jne	SHORT $LN10@Ins_FDEF
; Line 4673
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [ecx+396]
	cmp	eax, DWORD PTR [edx+400]
	jb	SHORT $LN9@Ins_FDEF
; Line 4675
	push	OFFSET $SG11900
	push	4675					; 00001243H
	push	140					; 0000008cH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 4676
	jmp	$LN15@Ins_FDEF
$LN9@Ins_FDEF:
; Line 4678
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+396]
	add	eax, 1
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+396], eax
$LN10@Ins_FDEF:
; Line 4683
	cmp	DWORD PTR _n$[ebp], 65535		; 0000ffffH
	jbe	SHORT $LN8@Ins_FDEF
; Line 4685
	push	OFFSET $SG11902
	push	4685					; 0000124dH
	push	140					; 0000008cH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 140				; 0000008cH
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 4686
	jmp	$LN15@Ins_FDEF
$LN8@Ins_FDEF:
; Line 4689
	mov	eax, DWORD PTR _rec$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+352]
	mov	DWORD PTR [eax], edx
; Line 4690
	movzx	eax, WORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 4691
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+360]
	add	eax, 1
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 4692
	mov	edx, DWORD PTR _rec$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 4693
	mov	eax, DWORD PTR _rec$[ebp]
	mov	BYTE PTR [eax+17], 0
; Line 4694
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 4696
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx+420]
	jbe	SHORT $LN6@Ins_FDEF
; Line 4697
	movzx	ecx, WORD PTR _n$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+420], ecx
$LN6@Ins_FDEF:
; Line 4709
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_SkipCode
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN15@Ins_FDEF
; Line 4823
	mov	edx, DWORD PTR _exc$[ebp]
	mov	al, BYTE PTR [edx+368]
	mov	BYTE PTR tv147[ebp], al
	cmp	BYTE PTR tv147[ebp], 44			; 0000002cH
	je	SHORT $LN2@Ins_FDEF
	cmp	BYTE PTR tv147[ebp], 45			; 0000002dH
	je	SHORT $LN1@Ins_FDEF
	cmp	BYTE PTR tv147[ebp], 137		; 00000089H
	je	SHORT $LN2@Ins_FDEF
	jmp	SHORT $LN3@Ins_FDEF
$LN2@Ins_FDEF:
; Line 4827
	push	OFFSET $SG11914
	push	4827					; 000012dbH
	push	137					; 00000089H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 137				; 00000089H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 4828
	jmp	SHORT $LN15@Ins_FDEF
$LN1@Ins_FDEF:
; Line 4831
	mov	edx, DWORD PTR _rec$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	DWORD PTR [edx+8], ecx
; Line 4832
	jmp	SHORT $LN15@Ins_FDEF
$LN3@Ins_FDEF:
; Line 4834
	jmp	SHORT $LN6@Ins_FDEF
$LN15@Ins_FDEF:
; Line 4835
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_FDEF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -8						; size = 4
_nIfs$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_ELSE PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 4507
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4510
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR _args$[ebp], ecx
; Line 4513
	mov	DWORD PTR _nIfs$[ebp], 1
$LN8@Ins_ELSE:
; Line 4517
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_SkipCode
	add	esp, 4
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN5@Ins_ELSE
; Line 4518
	jmp	SHORT $LN9@Ins_ELSE
$LN5@Ins_ELSE:
; Line 4520
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	dl, BYTE PTR [ecx+368]
	mov	BYTE PTR tv70[ebp], dl
	cmp	BYTE PTR tv70[ebp], 88			; 00000058H
	je	SHORT $LN2@Ins_ELSE
	cmp	BYTE PTR tv70[ebp], 89			; 00000059H
	je	SHORT $LN1@Ins_ELSE
	jmp	SHORT $LN7@Ins_ELSE
$LN2@Ins_ELSE:
; Line 4523
	mov	eax, DWORD PTR _nIfs$[ebp]
	add	eax, 1
	mov	DWORD PTR _nIfs$[ebp], eax
; Line 4524
	jmp	SHORT $LN7@Ins_ELSE
$LN1@Ins_ELSE:
; Line 4527
	mov	ecx, DWORD PTR _nIfs$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _nIfs$[ebp], ecx
$LN7@Ins_ELSE:
; Line 4530
	cmp	DWORD PTR _nIfs$[ebp], 0
	jne	SHORT $LN8@Ins_ELSE
$LN9@Ins_ELSE:
; Line 4531
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_ELSE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -14						; size = 1
tv76 = -13						; size = 1
tv73 = -12						; size = 4
_Out$ = -5						; size = 1
_nIfs$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_IF	PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 4464
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 4469
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	je	SHORT $LN10@Ins_IF
; Line 4470
	jmp	$LN11@Ins_IF
$LN10@Ins_IF:
; Line 4472
	mov	DWORD PTR _nIfs$[ebp], 1
; Line 4473
	mov	BYTE PTR _Out$[ebp], 0
$LN9@Ins_IF:
; Line 4477
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_SkipCode
	add	esp, 4
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN6@Ins_IF
; Line 4478
	jmp	SHORT $LN11@Ins_IF
$LN6@Ins_IF:
; Line 4480
	mov	edx, DWORD PTR _exc$[ebp]
	mov	al, BYTE PTR [edx+368]
	mov	BYTE PTR tv73[ebp], al
	cmp	BYTE PTR tv73[ebp], 27			; 0000001bH
	je	SHORT $LN2@Ins_IF
	cmp	BYTE PTR tv73[ebp], 88			; 00000058H
	je	SHORT $LN3@Ins_IF
	cmp	BYTE PTR tv73[ebp], 89			; 00000059H
	je	SHORT $LN1@Ins_IF
	jmp	SHORT $LN8@Ins_IF
$LN3@Ins_IF:
; Line 4483
	mov	ecx, DWORD PTR _nIfs$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nIfs$[ebp], ecx
; Line 4484
	jmp	SHORT $LN8@Ins_IF
$LN2@Ins_IF:
; Line 4487
	cmp	DWORD PTR _nIfs$[ebp], 1
	jne	SHORT $LN13@Ins_IF
	mov	BYTE PTR tv76[ebp], 1
	jmp	SHORT $LN14@Ins_IF
$LN13@Ins_IF:
	mov	BYTE PTR tv76[ebp], 0
$LN14@Ins_IF:
	mov	dl, BYTE PTR tv76[ebp]
	mov	BYTE PTR _Out$[ebp], dl
; Line 4488
	jmp	SHORT $LN8@Ins_IF
$LN1@Ins_IF:
; Line 4491
	mov	eax, DWORD PTR _nIfs$[ebp]
	sub	eax, 1
	mov	DWORD PTR _nIfs$[ebp], eax
; Line 4492
	jne	SHORT $LN15@Ins_IF
	mov	BYTE PTR tv79[ebp], 1
	jmp	SHORT $LN16@Ins_IF
$LN15@Ins_IF:
	mov	BYTE PTR tv79[ebp], 0
$LN16@Ins_IF:
	mov	cl, BYTE PTR tv79[ebp]
	mov	BYTE PTR _Out$[ebp], cl
$LN8@Ins_IF:
; Line 4495
	movzx	edx, BYTE PTR _Out$[ebp]
	test	edx, edx
	je	SHORT $LN9@Ins_IF
$LN11@Ins_IF:
; Line 4496
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_IF	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_SkipCode PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 4431
	push	ebp
	mov	ebp, esp
; Line 4432
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	edx, DWORD PTR _exc$[ebp]
	add	ecx, DWORD PTR [edx+372]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+360], ecx
; Line 4434
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [ecx+360]
	cmp	eax, DWORD PTR [edx+364]
	jge	$Fail_Overflow$7
; Line 4436
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	cl, BYTE PTR [ecx+edx]
	mov	BYTE PTR [eax+368], cl
; Line 4438
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	movsx	ecx, BYTE PTR _opcode_length[eax]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+372], ecx
; Line 4439
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+372], 0
	jge	SHORT $LN3@SkipCode
; Line 4441
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	add	edx, 1
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	edx, DWORD PTR [eax+364]
	jl	SHORT $LN2@SkipCode
; Line 4442
	jmp	SHORT $Fail_Overflow$7
$LN2@SkipCode:
; Line 4443
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	movzx	edx, BYTE PTR [ecx+edx+1]
	mov	eax, DWORD PTR _exc$[ebp]
	imul	edx, DWORD PTR [eax+372]
	mov	ecx, 2
	sub	ecx, edx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+372], ecx
$LN3@SkipCode:
; Line 4446
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	edx, DWORD PTR _exc$[ebp]
	add	ecx, DWORD PTR [edx+372]
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	ecx, DWORD PTR [eax+364]
	jg	SHORT $Fail_Overflow$7
; Line 4447
	xor	al, al
	jmp	SHORT $LN5@SkipCode
$Fail_Overflow$7:
; Line 4451
	push	OFFSET $SG11845
	push	4451					; 00001163H
	push	131					; 00000083H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 131				; 00000083H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 4452
	mov	al, 1
$LN5@SkipCode:
; Line 4453
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_SkipCode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_C$ = -12						; size = 4
_B$ = -8						; size = 4
_A$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_ROLL PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 4404
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4407
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 4410
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _A$[ebp], eax
; Line 4411
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _B$[ebp], eax
; Line 4412
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _C$[ebp], ecx
; Line 4414
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _C$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 4415
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _A$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 4416
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR _B$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 4417
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_ROLL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_K$ = -8						; size = 4
_L$ = -4						; size = 4
_exc$ = 8						; size = 4
_args$ = 12						; size = 4
_Ins_MINDEX PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 4372
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4376
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _L$[ebp], eax
; Line 4378
	cmp	DWORD PTR _L$[ebp], 0
	jle	SHORT $LN3@Ins_MINDEX
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	jle	SHORT $LN4@Ins_MINDEX
$LN3@Ins_MINDEX:
; Line 4380
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN2@Ins_MINDEX
; Line 4381
	push	OFFSET $SG11825
	push	4381					; 0000111dH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN2@Ins_MINDEX:
; Line 4383
	jmp	SHORT $LN5@Ins_MINDEX
$LN4@Ins_MINDEX:
; Line 4385
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, DWORD PTR _L$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _K$[ebp], ecx
; Line 4389
	mov	edx, DWORD PTR _L$[ebp]
	lea	eax, DWORD PTR [edx*4-4]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	sub	edx, DWORD PTR _L$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	lea	edx, DWORD PTR [ecx+edx*4+4]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, DWORD PTR _L$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+24]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4391
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR _K$[ebp]
	mov	DWORD PTR [edx+eax*4-4], ecx
$LN5@Ins_MINDEX:
; Line 4393
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_MINDEX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p2$ = -20						; size = 4
_p1$ = -16						; size = 4
_C$ = -12						; size = 4
_B$ = -8						; size = 4
_A$ = -4						; size = 4
_exc$ = 8						; size = 4
_aIdx1$ = 12						; size = 2
_aIdx2$ = 16						; size = 2
_aOpc$ = 20						; size = 4
_Vec$ = 24						; size = 4
_Ins_SxVTL PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2750
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2757
	movzx	eax, WORD PTR _aIdx1$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+116]
	cmp	eax, edx
	jae	SHORT $LN4@Ins_SxVTL
	movzx	eax, WORD PTR _aIdx2$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+80]
	cmp	eax, edx
	jb	SHORT $LN5@Ins_SxVTL
$LN4@Ins_SxVTL:
; Line 2759
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN3@Ins_SxVTL
; Line 2760
	push	OFFSET $SG11811
	push	2760					; 00000ac8H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN3@Ins_SxVTL:
; Line 2761
	mov	al, 1
	jmp	$LN6@Ins_SxVTL
$LN5@Ins_SxVTL:
; Line 2764
	movzx	eax, WORD PTR _aIdx2$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _p1$[ebp], eax
; Line 2765
	movzx	ecx, WORD PTR _aIdx1$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+124]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _p2$[ebp], ecx
; Line 2767
	mov	edx, DWORD PTR _p1$[ebp]
	mov	eax, DWORD PTR _p2$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _A$[ebp], ecx
; Line 2768
	mov	edx, DWORD PTR _p1$[ebp]
	mov	eax, DWORD PTR _p2$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _B$[ebp], ecx
; Line 2775
	cmp	DWORD PTR _A$[ebp], 0
	jne	SHORT $LN2@Ins_SxVTL
	cmp	DWORD PTR _B$[ebp], 0
	jne	SHORT $LN2@Ins_SxVTL
; Line 2777
	mov	DWORD PTR _A$[ebp], 16384		; 00004000H
; Line 2778
	mov	DWORD PTR _aOpc$[ebp], 0
$LN2@Ins_SxVTL:
; Line 2781
	mov	edx, DWORD PTR _aOpc$[ebp]
	and	edx, 1
	je	SHORT $LN1@Ins_SxVTL
; Line 2783
	mov	eax, DWORD PTR _B$[ebp]
	mov	DWORD PTR _C$[ebp], eax
; Line 2784
	mov	ecx, DWORD PTR _A$[ebp]
	mov	DWORD PTR _B$[ebp], ecx
; Line 2785
	mov	edx, DWORD PTR _C$[ebp]
	neg	edx
	mov	DWORD PTR _A$[ebp], edx
$LN1@Ins_SxVTL:
; Line 2788
	mov	eax, DWORD PTR _Vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _B$[ebp]
	push	ecx
	mov	edx, DWORD PTR _A$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Normalize
	add	esp, 16					; 00000010H
; Line 2790
	xor	al, al
$LN6@Ins_SxVTL:
; Line 2791
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_SxVTL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -12						; size = 4
tv66 = -8						; size = 4
_W$ = -4						; size = 4
_exc$ = 8						; size = 4
_Vx$ = 12						; size = 4
_Vy$ = 16						; size = 4
_R$ = 20						; size = 4
_Normalize PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2710
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2713
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 2716
	cmp	DWORD PTR _Vx$[ebp], 0
	jge	SHORT $LN5@Normalize
	mov	ecx, DWORD PTR _Vx$[ebp]
	neg	ecx
	mov	DWORD PTR tv66[ebp], ecx
	jmp	SHORT $LN6@Normalize
$LN5@Normalize:
	mov	edx, DWORD PTR _Vx$[ebp]
	mov	DWORD PTR tv66[ebp], edx
$LN6@Normalize:
	cmp	DWORD PTR tv66[ebp], 16384		; 00004000H
	jge	SHORT $LN2@Normalize
	cmp	DWORD PTR _Vy$[ebp], 0
	jge	SHORT $LN7@Normalize
	mov	eax, DWORD PTR _Vy$[ebp]
	neg	eax
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN8@Normalize
$LN7@Normalize:
	mov	ecx, DWORD PTR _Vy$[ebp]
	mov	DWORD PTR tv70[ebp], ecx
$LN8@Normalize:
	cmp	DWORD PTR tv70[ebp], 16384		; 00004000H
	jge	SHORT $LN2@Normalize
; Line 2718
	cmp	DWORD PTR _Vx$[ebp], 0
	jne	SHORT $LN1@Normalize
	cmp	DWORD PTR _Vy$[ebp], 0
	jne	SHORT $LN1@Normalize
; Line 2722
	xor	al, al
	jmp	SHORT $LN3@Normalize
$LN1@Normalize:
; Line 2725
	mov	edx, DWORD PTR _Vx$[ebp]
	shl	edx, 14					; 0000000eH
	mov	DWORD PTR _Vx$[ebp], edx
; Line 2726
	mov	eax, DWORD PTR _Vy$[ebp]
	shl	eax, 14					; 0000000eH
	mov	DWORD PTR _Vy$[ebp], eax
$LN2@Normalize:
; Line 2729
	mov	ecx, DWORD PTR _Vy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Vx$[ebp]
	push	edx
	call	_FT_Hypot
	add	esp, 8
	mov	DWORD PTR _W$[ebp], eax
; Line 2731
	mov	eax, DWORD PTR _W$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _Vx$[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _R$[ebp]
	mov	WORD PTR [edx], ax
; Line 2732
	mov	eax, DWORD PTR _W$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _Vy$[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _R$[ebp]
	mov	WORD PTR [edx+2], ax
; Line 2734
	xor	al, al
$LN3@Normalize:
; Line 2735
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Normalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv158 = -4						; size = 4
_exc$ = 8						; size = 4
_Compute_Funcs PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2587
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2633
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+298]
	cmp	ecx, 16384				; 00004000H
	jne	SHORT $LN17@Compute_Fu
; Line 2634
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+294]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+564], eax
	jmp	SHORT $LN16@Compute_Fu
$LN17@Compute_Fu:
; Line 2635
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+300]
	cmp	eax, 16384				; 00004000H
	jne	SHORT $LN15@Compute_Fu
; Line 2636
	mov	ecx, DWORD PTR _exc$[ebp]
	movsx	edx, WORD PTR [ecx+296]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+564], edx
; Line 2637
	jmp	SHORT $LN16@Compute_Fu
$LN15@Compute_Fu:
; Line 2640
	mov	ecx, DWORD PTR _exc$[ebp]
	movsx	edx, WORD PTR [ecx+294]
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+298]
	imul	edx, ecx
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+296]
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [eax+300]
	imul	ecx, eax
	add	edx, ecx
	sar	edx, 14					; 0000000eH
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+564], edx
$LN16@Compute_Fu:
; Line 2642
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+294]
	cmp	eax, 16384				; 00004000H
	jne	SHORT $LN13@Compute_Fu
; Line 2643
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+572], OFFSET _Project_x
	jmp	SHORT $LN12@Compute_Fu
$LN13@Compute_Fu:
; Line 2644
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+296]
	cmp	eax, 16384				; 00004000H
	jne	SHORT $LN11@Compute_Fu
; Line 2645
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+572], OFFSET _Project_y
; Line 2646
	jmp	SHORT $LN12@Compute_Fu
$LN11@Compute_Fu:
; Line 2647
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+572], OFFSET _Project
$LN12@Compute_Fu:
; Line 2649
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+290]
	cmp	ecx, 16384				; 00004000H
	jne	SHORT $LN9@Compute_Fu
; Line 2650
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+576], OFFSET _Project_x
	jmp	SHORT $LN8@Compute_Fu
$LN9@Compute_Fu:
; Line 2651
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+292]
	cmp	ecx, 16384				; 00004000H
	jne	SHORT $LN7@Compute_Fu
; Line 2652
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+576], OFFSET _Project_y
; Line 2653
	jmp	SHORT $LN8@Compute_Fu
$LN7@Compute_Fu:
; Line 2654
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+576], OFFSET _Dual_Project
$LN8@Compute_Fu:
; Line 2656
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+584], OFFSET _Direct_Move
; Line 2657
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+588], OFFSET _Direct_Move_Orig
; Line 2659
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+564], 16384		; 00004000H
	jne	SHORT $LN5@Compute_Fu
; Line 2661
	mov	ecx, DWORD PTR _exc$[ebp]
	movsx	edx, WORD PTR [ecx+298]
	cmp	edx, 16384				; 00004000H
	jne	SHORT $LN4@Compute_Fu
; Line 2663
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+584], OFFSET _Direct_Move_X
; Line 2664
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+588], OFFSET _Direct_Move_Orig_X
	jmp	SHORT $LN5@Compute_Fu
$LN4@Compute_Fu:
; Line 2666
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+300]
	cmp	eax, 16384				; 00004000H
	jne	SHORT $LN5@Compute_Fu
; Line 2668
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+584], OFFSET _Direct_Move_Y
; Line 2669
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+588], OFFSET _Direct_Move_Orig_Y
$LN5@Compute_Fu:
; Line 2676
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+564], 0
	jge	SHORT $LN20@Compute_Fu
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+564]
	neg	edx
	mov	DWORD PTR tv158[ebp], edx
	jmp	SHORT $LN21@Compute_Fu
$LN20@Compute_Fu:
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+564]
	mov	DWORD PTR tv158[ebp], ecx
$LN21@Compute_Fu:
	cmp	DWORD PTR tv158[ebp], 1024		; 00000400H
	jge	SHORT $LN1@Compute_Fu
; Line 2677
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+564], 16384		; 00004000H
$LN1@Compute_Fu:
; Line 2680
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+256], 0
; Line 2681
	mov	esp, ebp
	pop	ebp
	ret	0
_Compute_Funcs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
_Project_y PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2568
	push	ebp
	mov	ebp, esp
; Line 2569
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 2570
	mov	ecx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _dx$[ebp], ecx
; Line 2572
	mov	eax, DWORD PTR _dy$[ebp]
; Line 2573
	pop	ebp
	ret	0
_Project_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
_Project_x PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2541
	push	ebp
	mov	ebp, esp
; Line 2542
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 2543
	mov	ecx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _dy$[ebp], ecx
; Line 2545
	mov	eax, DWORD PTR _dx$[ebp]
; Line 2546
	pop	ebp
	ret	0
_Project_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
_Dual_Project PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2515
	push	ebp
	mov	ebp, esp
; Line 2518
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+292]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+290]
	push	eax
	mov	ecx, DWORD PTR _dy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dx$[ebp]
	push	edx
	call	_TT_DotFix14
	add	esp, 16					; 00000010H
; Line 2519
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Dual_Project ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
_Project PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2485
	push	ebp
	mov	ebp, esp
; Line 2492
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+296]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+294]
	push	eax
	mov	ecx, DWORD PTR _dy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dx$[ebp]
	push	edx
	call	_TT_DotFix14
	add	esp, 16					; 00000010H
; Line 2493
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Project ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -8						; size = 4
tv65 = -4						; size = 4
_exc$ = 8						; size = 4
_GridPeriod$ = 12					; size = 4
_selector$ = 16						; size = 4
_SetSuperRound PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2414
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2415
	mov	eax, DWORD PTR _selector$[ebp]
	and	eax, 192				; 000000c0H
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 192		; 000000c0H
	ja	SHORT $LN13@SetSuperRo
	mov	ecx, DWORD PTR tv65[ebp]
	movzx	edx, BYTE PTR $LN17@SetSuperRo[ecx]
	jmp	DWORD PTR $LN19@SetSuperRo[edx*4]
$LN12@SetSuperRo:
; Line 2418
	mov	eax, DWORD PTR _GridPeriod$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+476], eax
; Line 2419
	jmp	SHORT $LN13@SetSuperRo
$LN11@SetSuperRo:
; Line 2422
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _GridPeriod$[ebp]
	mov	DWORD PTR [edx+476], eax
; Line 2423
	jmp	SHORT $LN13@SetSuperRo
$LN10@SetSuperRo:
; Line 2426
	mov	ecx, DWORD PTR _GridPeriod$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+476], ecx
; Line 2427
	jmp	SHORT $LN13@SetSuperRo
$LN9@SetSuperRo:
; Line 2432
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _GridPeriod$[ebp]
	mov	DWORD PTR [eax+476], ecx
$LN13@SetSuperRo:
; Line 2436
	mov	edx, DWORD PTR _selector$[ebp]
	and	edx, 48					; 00000030H
	mov	DWORD PTR tv74[ebp], edx
	cmp	DWORD PTR tv74[ebp], 48			; 00000030H
	ja	SHORT $LN7@SetSuperRo
	mov	eax, DWORD PTR tv74[ebp]
	movzx	ecx, BYTE PTR $LN18@SetSuperRo[eax]
	jmp	DWORD PTR $LN20@SetSuperRo[ecx*4]
$LN6@SetSuperRo:
; Line 2439
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+480], 0
; Line 2440
	jmp	SHORT $LN7@SetSuperRo
$LN5@SetSuperRo:
; Line 2443
	mov	eax, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [eax+476]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+480], eax
; Line 2444
	jmp	SHORT $LN7@SetSuperRo
$LN4@SetSuperRo:
; Line 2447
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+476]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+480], eax
; Line 2448
	jmp	SHORT $LN7@SetSuperRo
$LN3@SetSuperRo:
; Line 2451
	mov	edx, DWORD PTR _exc$[ebp]
	imul	eax, DWORD PTR [edx+476], 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+480], eax
$LN7@SetSuperRo:
; Line 2455
	mov	edx, DWORD PTR _selector$[ebp]
	and	edx, 15					; 0000000fH
	jne	SHORT $LN2@SetSuperRo
; Line 2456
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+476]
	sub	ecx, 1
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+484], ecx
; Line 2457
	jmp	SHORT $LN1@SetSuperRo
$LN2@SetSuperRo:
; Line 2458
	mov	eax, DWORD PTR _selector$[ebp]
	and	eax, 15					; 0000000fH
	sub	eax, 4
	mov	ecx, DWORD PTR _exc$[ebp]
	imul	eax, DWORD PTR [ecx+476]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+484], eax
$LN1@SetSuperRo:
; Line 2460
	mov	eax, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [eax+476]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	sar	eax, 8
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+476], eax
; Line 2461
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+480]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	sar	eax, 8
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+480], eax
; Line 2462
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+484]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	sar	eax, 8
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+484], eax
; Line 2463
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN19@SetSuperRo:
	DD	$LN12@SetSuperRo
	DD	$LN11@SetSuperRo
	DD	$LN10@SetSuperRo
	DD	$LN9@SetSuperRo
	DD	$LN13@SetSuperRo
$LN17@SetSuperRo:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	3
$LN20@SetSuperRo:
	DD	$LN6@SetSuperRo
	DD	$LN5@SetSuperRo
	DD	$LN4@SetSuperRo
	DD	$LN3@SetSuperRo
	DD	$LN7@SetSuperRo
$LN18@SetSuperRo:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_SetSuperRound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv65 = -4						; size = 4
_exc$ = 8						; size = 4
_round_mode$ = 12					; size = 1
_Compute_Round PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2360
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2361
	movzx	eax, BYTE PTR _round_mode$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 7
	ja	$LN11@Compute_Ro
	mov	ecx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN13@Compute_Ro[ecx*4]
$LN8@Compute_Ro:
; Line 2364
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+568], OFFSET _Round_None
; Line 2365
	jmp	SHORT $LN11@Compute_Ro
$LN7@Compute_Ro:
; Line 2368
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+568], OFFSET _Round_To_Grid
; Line 2369
	jmp	SHORT $LN11@Compute_Ro
$LN6@Compute_Ro:
; Line 2372
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+568], OFFSET _Round_Up_To_Grid
; Line 2373
	jmp	SHORT $LN11@Compute_Ro
$LN5@Compute_Ro:
; Line 2376
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+568], OFFSET _Round_Down_To_Grid
; Line 2377
	jmp	SHORT $LN11@Compute_Ro
$LN4@Compute_Ro:
; Line 2380
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+568], OFFSET _Round_To_Half_Grid
; Line 2381
	jmp	SHORT $LN11@Compute_Ro
$LN3@Compute_Ro:
; Line 2384
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+568], OFFSET _Round_To_Double_Grid
; Line 2385
	jmp	SHORT $LN11@Compute_Ro
$LN2@Compute_Ro:
; Line 2388
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+568], OFFSET _Round_Super
; Line 2389
	jmp	SHORT $LN11@Compute_Ro
$LN1@Compute_Ro:
; Line 2392
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+568], OFFSET _Round_Super_45
$LN11@Compute_Ro:
; Line 2395
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@Compute_Ro:
	DD	$LN4@Compute_Ro
	DD	$LN7@Compute_Ro
	DD	$LN3@Compute_Ro
	DD	$LN5@Compute_Ro
	DD	$LN6@Compute_Ro
	DD	$LN8@Compute_Ro
	DD	$LN2@Compute_Ro
	DD	$LN1@Compute_Ro
_Compute_Round ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -4						; size = 4
_exc$ = 8						; size = 4
_distance$ = 12						; size = 4
_compensation$ = 16					; size = 4
_Round_Super_45 PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2322
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2326
	cmp	DWORD PTR _distance$[ebp], 0
	jl	SHORT $LN4@Round_Supe
; Line 2329
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _distance$[ebp]
	sub	ecx, DWORD PTR [eax+480]
	mov	edx, DWORD PTR _exc$[ebp]
	add	ecx, DWORD PTR [edx+484]
	add	ecx, DWORD PTR _compensation$[ebp]
	mov	esi, DWORD PTR _exc$[ebp]
	mov	eax, ecx
	cdq
	idiv	DWORD PTR [esi+476]
	mov	ecx, DWORD PTR _exc$[ebp]
	imul	eax, DWORD PTR [ecx+476]
	mov	DWORD PTR _val$[ebp], eax
; Line 2330
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _val$[ebp]
	add	eax, DWORD PTR [edx+480]
	mov	DWORD PTR _val$[ebp], eax
; Line 2331
	jns	SHORT $LN3@Round_Supe
; Line 2332
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+480]
	mov	DWORD PTR _val$[ebp], edx
$LN3@Round_Supe:
; Line 2334
	jmp	SHORT $LN2@Round_Supe
$LN4@Round_Supe:
; Line 2337
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [eax+484]
	sub	eax, DWORD PTR [ecx+480]
	sub	eax, DWORD PTR _distance$[ebp]
	add	eax, DWORD PTR _compensation$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	cdq
	idiv	DWORD PTR [ecx+476]
	mov	edx, DWORD PTR _exc$[ebp]
	imul	eax, DWORD PTR [edx+476]
	neg	eax
	mov	DWORD PTR _val$[ebp], eax
; Line 2338
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _val$[ebp]
	sub	ecx, DWORD PTR [eax+480]
	mov	DWORD PTR _val$[ebp], ecx
; Line 2339
	cmp	DWORD PTR _val$[ebp], 0
	jle	SHORT $LN2@Round_Supe
; Line 2340
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+480]
	neg	eax
	mov	DWORD PTR _val$[ebp], eax
$LN2@Round_Supe:
; Line 2343
	mov	eax, DWORD PTR _val$[ebp]
; Line 2344
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_Round_Super_45 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -4						; size = 4
_exc$ = 8						; size = 4
_distance$ = 12						; size = 4
_compensation$ = 16					; size = 4
_Round_Super PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2274
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2278
	cmp	DWORD PTR _distance$[ebp], 0
	jl	SHORT $LN4@Round_Supe
; Line 2281
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _distance$[ebp]
	sub	ecx, DWORD PTR [eax+480]
	mov	edx, DWORD PTR _exc$[ebp]
	add	ecx, DWORD PTR [edx+484]
	add	ecx, DWORD PTR _compensation$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [eax+476]
	neg	edx
	and	ecx, edx
	mov	DWORD PTR _val$[ebp], ecx
; Line 2282
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _val$[ebp]
	add	ecx, DWORD PTR [eax+480]
	mov	DWORD PTR _val$[ebp], ecx
; Line 2283
	jns	SHORT $LN3@Round_Supe
; Line 2284
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+480]
	mov	DWORD PTR _val$[ebp], eax
$LN3@Round_Supe:
; Line 2286
	jmp	SHORT $LN2@Round_Supe
$LN4@Round_Supe:
; Line 2289
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [ecx+484]
	sub	eax, DWORD PTR [edx+480]
	sub	eax, DWORD PTR _distance$[ebp]
	add	eax, DWORD PTR _compensation$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+476]
	neg	edx
	and	eax, edx
	neg	eax
	mov	DWORD PTR _val$[ebp], eax
; Line 2290
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _val$[ebp]
	sub	ecx, DWORD PTR [eax+480]
	mov	DWORD PTR _val$[ebp], ecx
; Line 2291
	cmp	DWORD PTR _val$[ebp], 0
	jle	SHORT $LN2@Round_Supe
; Line 2292
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+480]
	neg	eax
	mov	DWORD PTR _val$[ebp], eax
$LN2@Round_Supe:
; Line 2295
	mov	eax, DWORD PTR _val$[ebp]
; Line 2296
	mov	esp, ebp
	pop	ebp
	ret	0
_Round_Super ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -4						; size = 4
_exc$ = 8						; size = 4
_distance$ = 12						; size = 4
_compensation$ = 16					; size = 4
_Round_To_Double_Grid PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2226
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2229
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 2232
	cmp	DWORD PTR _distance$[ebp], 0
	jl	SHORT $LN4@Round_To_D
; Line 2234
	mov	ecx, DWORD PTR _compensation$[ebp]
	mov	edx, DWORD PTR _distance$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR _val$[ebp], eax
; Line 2235
	jge	SHORT $LN3@Round_To_D
; Line 2236
	mov	DWORD PTR _val$[ebp], 0
$LN3@Round_To_D:
; Line 2238
	jmp	SHORT $LN2@Round_To_D
$LN4@Round_To_D:
; Line 2240
	mov	ecx, DWORD PTR _compensation$[ebp]
	sub	ecx, DWORD PTR _distance$[ebp]
	add	ecx, 16					; 00000010H
	and	ecx, -32				; ffffffe0H
	neg	ecx
	mov	DWORD PTR _val$[ebp], ecx
; Line 2241
	cmp	DWORD PTR _val$[ebp], 0
	jle	SHORT $LN2@Round_To_D
; Line 2242
	mov	DWORD PTR _val$[ebp], 0
$LN2@Round_To_D:
; Line 2245
	mov	eax, DWORD PTR _val$[ebp]
; Line 2246
	mov	esp, ebp
	pop	ebp
	ret	0
_Round_To_Double_Grid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -4						; size = 4
_exc$ = 8						; size = 4
_distance$ = 12						; size = 4
_compensation$ = 16					; size = 4
_Round_Up_To_Grid PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2184
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2187
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 2190
	cmp	DWORD PTR _distance$[ebp], 0
	jl	SHORT $LN4@Round_Up_T
; Line 2192
	mov	ecx, DWORD PTR _compensation$[ebp]
	mov	edx, DWORD PTR _distance$[ebp]
	lea	eax, DWORD PTR [edx+ecx+63]
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _val$[ebp], eax
; Line 2193
	jge	SHORT $LN3@Round_Up_T
; Line 2194
	mov	DWORD PTR _val$[ebp], 0
$LN3@Round_Up_T:
; Line 2196
	jmp	SHORT $LN2@Round_Up_T
$LN4@Round_Up_T:
; Line 2198
	mov	ecx, DWORD PTR _compensation$[ebp]
	sub	ecx, DWORD PTR _distance$[ebp]
	add	ecx, 63					; 0000003fH
	and	ecx, -64				; ffffffc0H
	neg	ecx
	mov	DWORD PTR _val$[ebp], ecx
; Line 2199
	cmp	DWORD PTR _val$[ebp], 0
	jle	SHORT $LN2@Round_Up_T
; Line 2200
	mov	DWORD PTR _val$[ebp], 0
$LN2@Round_Up_T:
; Line 2203
	mov	eax, DWORD PTR _val$[ebp]
; Line 2204
	mov	esp, ebp
	pop	ebp
	ret	0
_Round_Up_To_Grid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -4						; size = 4
_exc$ = 8						; size = 4
_distance$ = 12						; size = 4
_compensation$ = 16					; size = 4
_Round_Down_To_Grid PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2142
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2145
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 2148
	cmp	DWORD PTR _distance$[ebp], 0
	jl	SHORT $LN4@Round_Down
; Line 2150
	mov	ecx, DWORD PTR _distance$[ebp]
	add	ecx, DWORD PTR _compensation$[ebp]
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _val$[ebp], ecx
; Line 2151
	jge	SHORT $LN3@Round_Down
; Line 2152
	mov	DWORD PTR _val$[ebp], 0
$LN3@Round_Down:
; Line 2154
	jmp	SHORT $LN2@Round_Down
$LN4@Round_Down:
; Line 2156
	mov	edx, DWORD PTR _compensation$[ebp]
	sub	edx, DWORD PTR _distance$[ebp]
	and	edx, -64				; ffffffc0H
	neg	edx
	mov	DWORD PTR _val$[ebp], edx
; Line 2157
	cmp	DWORD PTR _val$[ebp], 0
	jle	SHORT $LN2@Round_Down
; Line 2158
	mov	DWORD PTR _val$[ebp], 0
$LN2@Round_Down:
; Line 2161
	mov	eax, DWORD PTR _val$[ebp]
; Line 2162
	mov	esp, ebp
	pop	ebp
	ret	0
_Round_Down_To_Grid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -4						; size = 4
_exc$ = 8						; size = 4
_distance$ = 12						; size = 4
_compensation$ = 16					; size = 4
_Round_To_Half_Grid PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2103
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 2106
	cmp	DWORD PTR _distance$[ebp], 0
	jl	SHORT $LN4@Round_To_H
; Line 2108
	mov	ecx, DWORD PTR _distance$[ebp]
	add	ecx, DWORD PTR _compensation$[ebp]
	and	ecx, -64				; ffffffc0H
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _val$[ebp], ecx
; Line 2109
	jns	SHORT $LN3@Round_To_H
; Line 2110
	mov	DWORD PTR _val$[ebp], 32		; 00000020H
$LN3@Round_To_H:
; Line 2112
	jmp	SHORT $LN2@Round_To_H
$LN4@Round_To_H:
; Line 2114
	mov	edx, DWORD PTR _compensation$[ebp]
	sub	edx, DWORD PTR _distance$[ebp]
	and	edx, -64				; ffffffc0H
	add	edx, 32					; 00000020H
	neg	edx
	mov	DWORD PTR _val$[ebp], edx
; Line 2115
	cmp	DWORD PTR _val$[ebp], 0
	jle	SHORT $LN2@Round_To_H
; Line 2116
	mov	DWORD PTR _val$[ebp], -32		; ffffffe0H
$LN2@Round_To_H:
; Line 2119
	mov	eax, DWORD PTR _val$[ebp]
; Line 2120
	mov	esp, ebp
	pop	ebp
	ret	0
_Round_To_Half_Grid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -4						; size = 4
_exc$ = 8						; size = 4
_distance$ = 12						; size = 4
_compensation$ = 16					; size = 4
_Round_To_Grid PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2058
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2061
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 2064
	cmp	DWORD PTR _distance$[ebp], 0
	jl	SHORT $LN4@Round_To_G
; Line 2066
	mov	ecx, DWORD PTR _compensation$[ebp]
	mov	edx, DWORD PTR _distance$[ebp]
	lea	eax, DWORD PTR [edx+ecx+32]
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _val$[ebp], eax
; Line 2067
	jge	SHORT $LN3@Round_To_G
; Line 2068
	mov	DWORD PTR _val$[ebp], 0
$LN3@Round_To_G:
; Line 2070
	jmp	SHORT $LN2@Round_To_G
$LN4@Round_To_G:
; Line 2072
	mov	ecx, DWORD PTR _compensation$[ebp]
	sub	ecx, DWORD PTR _distance$[ebp]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	neg	ecx
	mov	DWORD PTR _val$[ebp], ecx
; Line 2073
	cmp	DWORD PTR _val$[ebp], 0
	jle	SHORT $LN2@Round_To_G
; Line 2074
	mov	DWORD PTR _val$[ebp], 0
$LN2@Round_To_G:
; Line 2077
	mov	eax, DWORD PTR _val$[ebp]
; Line 2078
	mov	esp, ebp
	pop	ebp
	ret	0
_Round_To_Grid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -4						; size = 4
_exc$ = 8						; size = 4
_distance$ = 12						; size = 4
_compensation$ = 16					; size = 4
_Round_None PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 2017
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2020
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 2023
	cmp	DWORD PTR _distance$[ebp], 0
	jl	SHORT $LN4@Round_None
; Line 2025
	mov	ecx, DWORD PTR _distance$[ebp]
	add	ecx, DWORD PTR _compensation$[ebp]
	mov	DWORD PTR _val$[ebp], ecx
; Line 2026
	jns	SHORT $LN3@Round_None
; Line 2027
	mov	DWORD PTR _val$[ebp], 0
$LN3@Round_None:
; Line 2029
	jmp	SHORT $LN2@Round_None
$LN4@Round_None:
; Line 2031
	mov	edx, DWORD PTR _distance$[ebp]
	sub	edx, DWORD PTR _compensation$[ebp]
	mov	DWORD PTR _val$[ebp], edx
; Line 2032
	cmp	DWORD PTR _val$[ebp], 0
	jle	SHORT $LN2@Round_None
; Line 2033
	mov	DWORD PTR _val$[ebp], 0
$LN2@Round_None:
; Line 2035
	mov	eax, DWORD PTR _val$[ebp]
; Line 2036
	mov	esp, ebp
	pop	ebp
	ret	0
_Round_None ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_zone$ = 12						; size = 4
_point$ = 16						; size = 2
_distance$ = 20						; size = 4
_Direct_Move_Orig_Y PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1985
	push	ebp
	mov	ebp, esp
; Line 1986
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 1988
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+ecx*8+4]
	add	ecx, DWORD PTR _distance$[ebp]
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 1989
	pop	ebp
	ret	0
_Direct_Move_Orig_Y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_zone$ = 12						; size = 4
_point$ = 16						; size = 2
_distance$ = 20						; size = 4
_Direct_Move_Orig_X PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1974
	push	ebp
	mov	ebp, esp
; Line 1975
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 1977
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+ecx*8]
	add	ecx, DWORD PTR _distance$[ebp]
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+edx*8], ecx
; Line 1978
	pop	ebp
	ret	0
_Direct_Move_Orig_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_zone$ = 12						; size = 4
_point$ = 16						; size = 2
_distance$ = 20						; size = 4
_Direct_Move_Y PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1952
	push	ebp
	mov	ebp, esp
; Line 1953
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 1955
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx*8+4]
	add	ecx, DWORD PTR _distance$[ebp]
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 1956
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+24]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	ecx, 16					; 00000010H
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	BYTE PTR [eax+edx], cl
; Line 1957
	pop	ebp
	ret	0
_Direct_Move_Y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_zone$ = 12						; size = 4
_point$ = 16						; size = 2
_distance$ = 20						; size = 4
_Direct_Move_X PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1935
	push	ebp
	mov	ebp, esp
; Line 1936
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR _exc$[ebp], eax
; Line 1942
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx*8]
	add	ecx, DWORD PTR _distance$[ebp]
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [eax+edx*8], ecx
; Line 1944
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+24]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	ecx, 8
	movzx	edx, WORD PTR _point$[ebp]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	BYTE PTR [eax+edx], cl
; Line 1945
	pop	ebp
	ret	0
_Direct_Move_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$ = -4						; size = 4
_exc$ = 8						; size = 4
_zone$ = 12						; size = 4
_point$ = 16						; size = 2
_distance$ = 20						; size = 4
_Direct_Move_Orig PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1901
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1909
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+298]
	mov	DWORD PTR _v$[ebp], ecx
; Line 1911
	cmp	DWORD PTR _v$[ebp], 0
	je	SHORT $LN2@Direct_Mov
; Line 1912
	movzx	esi, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	edi, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+564]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _distance$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR [edi+esi*8]
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [edx+ecx*8], eax
$LN2@Direct_Mov:
; Line 1914
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+300]
	mov	DWORD PTR _v$[ebp], ecx
; Line 1916
	cmp	DWORD PTR _v$[ebp], 0
	je	SHORT $LN3@Direct_Mov
; Line 1917
	movzx	esi, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	edi, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+564]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _distance$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR [edi+esi*8+4]
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [edx+ecx*8+4], eax
$LN3@Direct_Mov:
; Line 1918
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Direct_Move_Orig ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$ = -4						; size = 4
_exc$ = 8						; size = 4
_zone$ = 12						; size = 4
_point$ = 16						; size = 2
_distance$ = 20						; size = 4
_Direct_Move PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1847
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1855
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+298]
	mov	DWORD PTR _v$[ebp], ecx
; Line 1857
	cmp	DWORD PTR _v$[ebp], 0
	je	SHORT $LN2@Direct_Mov
; Line 1864
	movzx	esi, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	edi, DWORD PTR [edx+16]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+564]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _distance$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR [edi+esi*8]
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [edx+ecx*8], eax
; Line 1866
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	movzx	eax, BYTE PTR [edx+eax]
	or	eax, 8
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	BYTE PTR [edx+ecx], al
$LN2@Direct_Mov:
; Line 1869
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+300]
	mov	DWORD PTR _v$[ebp], ecx
; Line 1871
	cmp	DWORD PTR _v$[ebp], 0
	je	SHORT $LN3@Direct_Mov
; Line 1873
	movzx	esi, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	edi, DWORD PTR [edx+16]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+564]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _distance$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR [edi+esi*8+4]
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [edx+ecx*8+4], eax
; Line 1875
	movzx	eax, WORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	movzx	eax, BYTE PTR [edx+eax]
	or	eax, 16					; 00000010H
	movzx	ecx, WORD PTR _point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	BYTE PTR [edx+ecx], al
$LN3@Direct_Mov:
; Line 1877
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Direct_Move ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_range$ = -4						; size = 4
_exc$ = 8						; size = 4
_aRange$ = 12						; size = 4
_aIP$ = 16						; size = 4
_Ins_Goto_CodeRange PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1789
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1793
	cmp	DWORD PTR _aRange$[ebp], 1
	jl	SHORT $LN3@Ins_Goto_C
	cmp	DWORD PTR _aRange$[ebp], 3
	jle	SHORT $LN4@Ins_Goto_C
$LN3@Ins_Goto_C:
; Line 1795
	push	OFFSET $SG11470
	push	1795					; 00000703H
	push	132					; 00000084H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 132				; 00000084H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1796
	mov	al, 1
	jmp	$LN5@Ins_Goto_C
$LN4@Ins_Goto_C:
; Line 1799
	mov	edx, DWORD PTR _aRange$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+436]
	mov	DWORD PTR _range$[ebp], ecx
; Line 1801
	mov	edx, DWORD PTR _range$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN2@Ins_Goto_C
; Line 1803
	push	OFFSET $SG11473
	push	1803					; 0000070bH
	push	138					; 0000008aH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 138				; 0000008aH
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1804
	mov	al, 1
	jmp	SHORT $LN5@Ins_Goto_C
$LN2@Ins_Goto_C:
; Line 1811
	mov	edx, DWORD PTR _range$[ebp]
	mov	eax, DWORD PTR _aIP$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jbe	SHORT $LN1@Ins_Goto_C
; Line 1813
	push	OFFSET $SG11475
	push	1813					; 00000715H
	push	131					; 00000083H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 131				; 00000083H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1814
	mov	al, 1
	jmp	SHORT $LN5@Ins_Goto_C
$LN1@Ins_Goto_C:
; Line 1817
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+356], ecx
; Line 1818
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+364], ecx
; Line 1819
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _aIP$[ebp]
	mov	DWORD PTR [edx+360], eax
; Line 1820
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _aRange$[ebp]
	mov	DWORD PTR [ecx+352], edx
; Line 1822
	xor	al, al
$LN5@Ins_Goto_C:
; Line 1823
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Ins_Goto_CodeRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_GetShortIns PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1762
	push	ebp
	mov	ebp, esp
; Line 1764
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	add	ecx, 2
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+360], ecx
; Line 1766
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+356]
	movzx	eax, BYTE PTR [eax+ecx-2]
	shl	eax, 8
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+356]
	movzx	edx, BYTE PTR [ecx+edx-1]
	add	eax, edx
; Line 1767
	pop	ebp
	ret	0
_GetShortIns ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_idx$ = 12						; size = 4
_value$ = 16						; size = 4
_Move_CVT_Stretched PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1740
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1741
	mov	eax, DWORD PTR _exc$[ebp]
	mov	esi, DWORD PTR [eax+384]
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Current_Ratio
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _idx$[ebp]
	add	eax, DWORD PTR [esi+ecx*4]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [edx+384]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 1742
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Move_CVT_Stretched ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_idx$ = 12						; size = 4
_value$ = 16						; size = 4
_Move_CVT PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1732
	push	ebp
	mov	ebp, esp
; Line 1733
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+384]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	add	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+384]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 1734
	pop	ebp
	ret	0
_Move_CVT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_idx$ = 12						; size = 4
_value$ = 16						; size = 4
_Write_CVT_Stretched PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1724
	push	ebp
	mov	ebp, esp
; Line 1725
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Current_Ratio
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [edx+384]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 1726
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Write_CVT_Stretched ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_idx$ = 12						; size = 4
_value$ = 16						; size = 4
_Write_CVT PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1716
	push	ebp
	mov	ebp, esp
; Line 1717
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+384]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 1718
	pop	ebp
	ret	0
_Write_CVT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_idx$ = 12						; size = 4
_Read_CVT_Stretched PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1708
	push	ebp
	mov	ebp, esp
; Line 1709
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Current_Ratio
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+384]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
; Line 1710
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Read_CVT_Stretched ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_idx$ = 12						; size = 4
_Read_CVT PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1701
	push	ebp
	mov	ebp, esp
; Line 1702
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+384]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
; Line 1703
	pop	ebp
	ret	0
_Read_CVT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_Current_Ppem_Stretched PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1687
	push	ebp
	mov	ebp, esp
; Line 1688
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Current_Ratio
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+252]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
; Line 1689
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Current_Ppem_Stretched ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exc$ = 8						; size = 4
_Current_Ppem PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1680
	push	ebp
	mov	ebp, esp
; Line 1681
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	eax, WORD PTR [eax+252]
; Line 1682
	pop	ebp
	ret	0
_Current_Ppem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_y$1 = -8						; size = 4
_x$2 = -4						; size = 4
_exc$ = 8						; size = 4
_Current_Ratio PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1641
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1642
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+256], 0
	jne	$LN5@Current_Ra
; Line 1655
	mov	ecx, DWORD PTR _exc$[ebp]
	movsx	edx, WORD PTR [ecx+296]
	test	edx, edx
	jne	SHORT $LN4@Current_Ra
; Line 1656
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+244]
	mov	DWORD PTR [eax+256], edx
	jmp	SHORT $LN5@Current_Ra
$LN4@Current_Ra:
; Line 1658
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+294]
	test	ecx, ecx
	jne	SHORT $LN2@Current_Ra
; Line 1659
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+248]
	mov	DWORD PTR [edx+256], ecx
; Line 1661
	jmp	SHORT $LN5@Current_Ra
$LN2@Current_Ra:
; Line 1667
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+294]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+244]
	push	edx
	call	_TT_MulFix14
	add	esp, 8
	mov	DWORD PTR _x$2[ebp], eax
; Line 1669
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+296]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+248]
	push	eax
	call	_TT_MulFix14
	add	esp, 8
	mov	DWORD PTR _y$1[ebp], eax
; Line 1670
	mov	ecx, DWORD PTR _y$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$2[ebp]
	push	edx
	call	_FT_Hypot
	add	esp, 8
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+256], eax
$LN5@Current_Ra:
; Line 1674
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+256]
; Line 1675
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Current_Ratio ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv133 = -56						; size = 4
tv128 = -52						; size = 4
tv91 = -48						; size = 4
tv86 = -44						; size = 4
tv74 = -40						; size = 4
_lo$ = -36						; size = 4
_lo2$ = -32						; size = 4
_lo1$ = -28						; size = 4
_l$ = -24						; size = 4
_hi$ = -20						; size = 4
_hi2$ = -16						; size = 4
_hi1$ = -12						; size = 4
_s$ = -8						; size = 4
_m$ = -4						; size = 4
_ax$ = 8						; size = 4
_ay$ = 12						; size = 4
_bx$ = 16						; size = 4
_by$ = 20						; size = 4
_TT_DotFix14 PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1589
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1595
	mov	eax, DWORD PTR _ax$[ebp]
	and	eax, 65535				; 0000ffffH
	imul	eax, DWORD PTR _bx$[ebp]
	mov	DWORD PTR _l$[ebp], eax
; Line 1596
	mov	ecx, DWORD PTR _ax$[ebp]
	sar	ecx, 16					; 00000010H
	imul	ecx, DWORD PTR _bx$[ebp]
	mov	DWORD PTR _m$[ebp], ecx
; Line 1598
	mov	edx, DWORD PTR _m$[ebp]
	shl	edx, 16					; 00000010H
	add	edx, DWORD PTR _l$[ebp]
	mov	DWORD PTR _lo1$[ebp], edx
; Line 1599
	mov	eax, DWORD PTR _lo1$[ebp]
	cmp	eax, DWORD PTR _l$[ebp]
	jae	SHORT $LN3@TT_DotFix1
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@TT_DotFix1
$LN3@TT_DotFix1:
	mov	DWORD PTR tv74[ebp], 0
$LN4@TT_DotFix1:
	mov	ecx, DWORD PTR _m$[ebp]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _l$[ebp]
	sar	edx, 31					; 0000001fH
	add	ecx, DWORD PTR tv74[ebp]
	add	edx, ecx
	mov	DWORD PTR _hi1$[ebp], edx
; Line 1602
	mov	eax, DWORD PTR _ay$[ebp]
	and	eax, 65535				; 0000ffffH
	imul	eax, DWORD PTR _by$[ebp]
	mov	DWORD PTR _l$[ebp], eax
; Line 1603
	mov	ecx, DWORD PTR _ay$[ebp]
	sar	ecx, 16					; 00000010H
	imul	ecx, DWORD PTR _by$[ebp]
	mov	DWORD PTR _m$[ebp], ecx
; Line 1605
	mov	edx, DWORD PTR _m$[ebp]
	shl	edx, 16					; 00000010H
	add	edx, DWORD PTR _l$[ebp]
	mov	DWORD PTR _lo2$[ebp], edx
; Line 1606
	mov	eax, DWORD PTR _lo2$[ebp]
	cmp	eax, DWORD PTR _l$[ebp]
	jae	SHORT $LN5@TT_DotFix1
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN6@TT_DotFix1
$LN5@TT_DotFix1:
	mov	DWORD PTR tv86[ebp], 0
$LN6@TT_DotFix1:
	mov	ecx, DWORD PTR _m$[ebp]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _l$[ebp]
	sar	edx, 31					; 0000001fH
	add	ecx, DWORD PTR tv86[ebp]
	add	edx, ecx
	mov	DWORD PTR _hi2$[ebp], edx
; Line 1609
	mov	eax, DWORD PTR _lo1$[ebp]
	add	eax, DWORD PTR _lo2$[ebp]
	mov	DWORD PTR _lo$[ebp], eax
; Line 1610
	mov	ecx, DWORD PTR _lo$[ebp]
	cmp	ecx, DWORD PTR _lo1$[ebp]
	jae	SHORT $LN7@TT_DotFix1
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN8@TT_DotFix1
$LN7@TT_DotFix1:
	mov	DWORD PTR tv91[ebp], 0
$LN8@TT_DotFix1:
	mov	edx, DWORD PTR _hi1$[ebp]
	add	edx, DWORD PTR _hi2$[ebp]
	add	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _hi$[ebp], edx
; Line 1613
	mov	eax, DWORD PTR _hi$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _s$[ebp], eax
; Line 1614
	mov	ecx, DWORD PTR _lo$[ebp]
	add	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR _l$[ebp], ecx
; Line 1615
	mov	edx, DWORD PTR _l$[ebp]
	cmp	edx, DWORD PTR _lo$[ebp]
	jae	SHORT $LN9@TT_DotFix1
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN10@TT_DotFix1
$LN9@TT_DotFix1:
	mov	DWORD PTR tv128[ebp], 0
$LN10@TT_DotFix1:
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR tv128[ebp]
	add	eax, DWORD PTR _hi$[ebp]
	mov	DWORD PTR _hi$[ebp], eax
; Line 1616
	mov	ecx, DWORD PTR _l$[ebp]
	mov	DWORD PTR _lo$[ebp], ecx
; Line 1618
	mov	edx, DWORD PTR _lo$[ebp]
	add	edx, 8192				; 00002000H
	mov	DWORD PTR _l$[ebp], edx
; Line 1619
	mov	eax, DWORD PTR _l$[ebp]
	cmp	eax, DWORD PTR _lo$[ebp]
	jae	SHORT $LN11@TT_DotFix1
	mov	DWORD PTR tv133[ebp], 1
	jmp	SHORT $LN12@TT_DotFix1
$LN11@TT_DotFix1:
	mov	DWORD PTR tv133[ebp], 0
$LN12@TT_DotFix1:
	mov	ecx, DWORD PTR _hi$[ebp]
	add	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _hi$[ebp], ecx
; Line 1621
	mov	eax, DWORD PTR _hi$[ebp]
	shl	eax, 18					; 00000012H
	mov	edx, DWORD PTR _l$[ebp]
	shr	edx, 14					; 0000000eH
	or	eax, edx
; Line 1622
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_TT_DotFix14 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv85 = -28						; size = 4
_hi$ = -24						; size = 4
_lo$ = -20						; size = 4
_mid$ = -16						; size = 4
_al$ = -12						; size = 4
_ah$ = -8						; size = 4
_sign$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_TT_MulFix14 PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 1510
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1515
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _sign$[ebp], eax
; Line 1517
	cmp	DWORD PTR _a$[ebp], 0
	jge	SHORT $LN3@TT_MulFix1
; Line 1518
	mov	ecx, DWORD PTR _a$[ebp]
	neg	ecx
	mov	DWORD PTR _a$[ebp], ecx
$LN3@TT_MulFix1:
; Line 1519
	cmp	DWORD PTR _b$[ebp], 0
	jge	SHORT $LN2@TT_MulFix1
; Line 1520
	mov	edx, DWORD PTR _b$[ebp]
	neg	edx
	mov	DWORD PTR _b$[ebp], edx
$LN2@TT_MulFix1:
; Line 1522
	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _ah$[ebp], eax
; Line 1523
	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _al$[ebp], ecx
; Line 1525
	mov	edx, DWORD PTR _al$[ebp]
	imul	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _lo$[ebp], edx
; Line 1526
	mov	eax, DWORD PTR _ah$[ebp]
	imul	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _mid$[ebp], eax
; Line 1527
	mov	ecx, DWORD PTR _mid$[ebp]
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR _hi$[ebp], ecx
; Line 1528
	mov	edx, DWORD PTR _mid$[ebp]
	shl	edx, 16					; 00000010H
	add	edx, 8192				; 00002000H
	mov	DWORD PTR _mid$[ebp], edx
; Line 1529
	mov	eax, DWORD PTR _lo$[ebp]
	add	eax, DWORD PTR _mid$[ebp]
	mov	DWORD PTR _lo$[ebp], eax
; Line 1530
	mov	ecx, DWORD PTR _lo$[ebp]
	cmp	ecx, DWORD PTR _mid$[ebp]
	jae	SHORT $LN1@TT_MulFix1
; Line 1531
	mov	edx, DWORD PTR _hi$[ebp]
	add	edx, 1
	mov	DWORD PTR _hi$[ebp], edx
$LN1@TT_MulFix1:
; Line 1533
	mov	eax, DWORD PTR _lo$[ebp]
	shr	eax, 14					; 0000000eH
	mov	ecx, DWORD PTR _hi$[ebp]
	shl	ecx, 18					; 00000012H
	or	eax, ecx
	mov	DWORD PTR _mid$[ebp], eax
; Line 1535
	cmp	DWORD PTR _sign$[ebp], 0
	jl	SHORT $LN6@TT_MulFix1
	mov	edx, DWORD PTR _mid$[ebp]
	mov	DWORD PTR tv85[ebp], edx
	jmp	SHORT $LN7@TT_MulFix1
$LN6@TT_MulFix1:
	mov	eax, DWORD PTR _mid$[ebp]
	neg	eax
	mov	DWORD PTR tv85[ebp], eax
$LN7@TT_MulFix1:
	mov	eax, DWORD PTR tv85[ebp]
; Line 1536
	mov	esp, ebp
	pop	ebp
	ret	0
_TT_MulFix14 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -8						; size = 4
_exec$ = 8						; size = 4
_memory$ = 12						; size = 4
_Init_Context PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 438
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN5@Init_Conte:
; Line 442
	mov	eax, 4
	imul	ecx, eax, 29
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN4@Init_Conte
	mov	edx, DWORD PTR _exec$[ebp]
	push	edx
	push	OFFSET $SG11003
	call	_FT_Message
	add	esp, 8
$LN4@Init_Conte:
	xor	eax, eax
	jne	SHORT $LN5@Init_Conte
; Line 444
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 445
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+432], 32			; 00000020H
; Line 447
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR [edx+432]
	push	eax
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [edx+436], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@Init_Conte
; Line 448
	jmp	SHORT $Fail_Memory$11
$LN1@Init_Conte:
; Line 452
	xor	eax, eax
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [ecx+440], ax
; Line 453
	xor	edx, edx
	mov	eax, DWORD PTR _exec$[ebp]
	mov	WORD PTR [eax+442], dx
; Line 455
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 456
	mov	edx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [edx+388], 0
; Line 458
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 459
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+392], 0
; Line 461
	mov	edx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [edx], 0
; Line 462
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 464
	xor	eax, eax
	jmp	SHORT $LN6@Init_Conte
$Fail_Memory$11:
; Line 467
	mov	ecx, DWORD PTR _exec$[ebp]
	push	ecx
	push	OFFSET $SG11012
	call	_FT_Message
	add	esp, 8
; Line 468
	mov	edx, DWORD PTR _exec$[ebp]
	push	edx
	call	_TT_Done_Context
	add	esp, 4
; Line 470
	mov	eax, DWORD PTR _error$[ebp]
$LN6@Init_Conte:
; Line 471
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Init_Conte
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@Init_Conte:
	DD	1
	DD	$LN9@Init_Conte
$LN9@Init_Conte:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@Init_Conte
$LN8@Init_Conte:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_Init_Context ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$1 = -40					; size = 4
_metrics$2 = -36					; size = 4
_maxp$ = -32						; size = 4
_n_twilight$ = -28					; size = 2
_memory$ = -24						; size = 4
_face$ = -20						; size = 4
_size$ = -16						; size = 4
_error$ = -8						; size = 4
_ftsize$ = 8						; size = 4
_pedantic$ = 12						; size = 1
_tt_size_init_bytecode PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 966
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 968
	mov	eax, DWORD PTR _ftsize$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 969
	mov	ecx, DWORD PTR _ftsize$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 970
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 973
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 260				; 00000104H
	mov	DWORD PTR _maxp$[ebp], edx
; Line 976
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+300], -1
; Line 977
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+304], -1
; Line 979
	mov	edx, DWORD PTR _maxp$[ebp]
	movzx	eax, WORD PTR [edx+20]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+120], eax
; Line 980
	mov	edx, DWORD PTR _maxp$[ebp]
	movzx	eax, WORD PTR [edx+22]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+132], eax
; Line 982
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+116], 0
; Line 983
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+128], 0
; Line 985
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+140], 0
; Line 986
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+144], 0
; Line 988
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+644]
	mov	DWORD PTR [eax+240], edx
; Line 989
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _maxp$[ebp]
	mov	dx, WORD PTR [ecx+18]
	mov	WORD PTR [eax+248], dx
; Line 993
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 72					; 00000048H
	mov	DWORD PTR _metrics$2[ebp], eax
; Line 996
	mov	ecx, DWORD PTR _metrics$2[ebp]
	mov	BYTE PTR [ecx+37], 0
; Line 997
	mov	edx, DWORD PTR _metrics$2[ebp]
	mov	BYTE PTR [edx+38], 0
; Line 1000
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _metrics$2[ebp]
	mov	DWORD PTR [edx+ecx+20], 0
; Line 1001
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _metrics$2[ebp]
	mov	DWORD PTR [ecx+eax+20], 0
; Line 1002
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _metrics$2[ebp]
	mov	DWORD PTR [eax+edx+20], 0
; Line 1003
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _metrics$2[ebp]
	mov	DWORD PTR [eax+edx+20], 0
; Line 1010
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	push	0
	push	24					; 00000018H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+124], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN4@tt_size_in
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	push	edx
	push	0
	push	24					; 00000018H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+136], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN4@tt_size_in
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+244], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN4@tt_size_in
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	movzx	ecx, WORD PTR [eax+248]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+252], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@tt_size_in
$LN4@tt_size_in:
; Line 1011
	jmp	$Exit$11
$LN5@tt_size_in:
; Line 1014
	mov	edx, DWORD PTR _maxp$[ebp]
	mov	ax, WORD PTR [edx+16]
	mov	WORD PTR _n_twilight$[ebp], ax
; Line 1017
	movzx	ecx, WORD PTR _n_twilight$[ebp]
	add	ecx, 4
	mov	WORD PTR _n_twilight$[ebp], cx
; Line 1019
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 256				; 00000100H
	push	edx
	push	0
	movzx	eax, WORD PTR _n_twilight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_tt_glyphzone_new
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1020
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@tt_size_in
; Line 1021
	jmp	SHORT $Exit$11
$LN3@tt_size_in:
; Line 1023
	mov	edx, DWORD PTR _size$[ebp]
	mov	ax, WORD PTR _n_twilight$[ebp]
	mov	WORD PTR [edx+264], ax
; Line 1025
	mov	edi, DWORD PTR _size$[ebp]
	add	edi, 172				; 000000acH
	mov	ecx, 17					; 00000011H
	mov	esi, OFFSET _tt_default_graphics_state
	rep movsd
; Line 1029
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _library$1[ebp], eax
; Line 1033
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _library$1[ebp]
	mov	edx, DWORD PTR [ecx+edx+172]
	mov	DWORD PTR [eax+652], edx
; Line 1034
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+652], 0
	jne	SHORT $LN2@tt_size_in
; Line 1035
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+652], OFFSET _TT_RunIns
$LN2@tt_size_in:
; Line 1039
	movzx	edx, BYTE PTR _pedantic$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_tt_size_run_fpgm
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$Exit$11:
; Line 1042
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@tt_size_in
; Line 1043
	mov	ecx, DWORD PTR _ftsize$[ebp]
	push	ecx
	call	_tt_size_done_bytecode
	add	esp, 4
$LN1@tt_size_in:
; Line 1045
	mov	eax, DWORD PTR _error$[ebp]
; Line 1046
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@tt_size_in
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@tt_size_in:
	DD	1
	DD	$LN9@tt_size_in
$LN9@tt_size_in:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@tt_size_in
$LN8@tt_size_in:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_tt_size_init_bytecode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -12						; size = 4
_face$ = -8						; size = 4
_size$ = -4						; size = 4
_ftsize$ = 8						; size = 4
_tt_size_done_bytecode PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 922
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 923
	mov	eax, DWORD PTR _ftsize$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 924
	mov	ecx, DWORD PTR _ftsize$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 925
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 928
	mov	edx, DWORD PTR _size$[ebp]
	movzx	eax, BYTE PTR [edx+292]
	test	eax, eax
	je	SHORT $LN12@tt_size_do
; Line 931
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+296], 0
; Line 932
	mov	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [edx+292], 0
$LN12@tt_size_do:
; Line 935
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+244], 0
	xor	ecx, ecx
	jne	SHORT $LN12@tt_size_do
; Line 936
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+240], 0
$LN9@tt_size_do:
; Line 939
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+252], 0
	xor	ecx, ecx
	jne	SHORT $LN9@tt_size_do
; Line 940
	xor	edx, edx
	mov	eax, DWORD PTR _size$[ebp]
	mov	WORD PTR [eax+248], dx
; Line 943
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 256				; 00000100H
	push	ecx
	call	_tt_glyphzone_done
	add	esp, 4
$LN6@tt_size_do:
; Line 945
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+124]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+124], 0
	xor	eax, eax
	jne	SHORT $LN6@tt_size_do
$LN3@tt_size_do:
; Line 946
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+136], 0
	xor	edx, edx
	jne	SHORT $LN3@tt_size_do
; Line 948
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+116], 0
; Line 949
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+120], 0
; Line 950
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+128], 0
; Line 951
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+132], 0
; Line 953
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+140], 0
; Line 954
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+144], 0
; Line 956
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+300], -1
; Line 957
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+304], -1
; Line 958
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_size_done_bytecode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_buf$1 = -52						; size = 8
_error$2 = -40						; size = 4
_count$ = -36						; size = 4
_glyph_index$ = -32					; size = 4
_i$ = -28						; size = 4
_asize$ = -20						; size = 4
_face$ = -12						; size = 4
_result$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
_ttface$ = 8						; size = 4
_tt_check_single_notdef PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 437
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 438
	mov	BYTE PTR _result$[ebp], 0
; Line 440
	mov	eax, DWORD PTR _ttface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 443
	mov	DWORD PTR _glyph_index$[ebp], 0
; Line 444
	mov	DWORD PTR _count$[ebp], 0
; Line 447
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@tt_check_s
$LN8@tt_check_s:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@tt_check_s:
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+696]
	jae	SHORT $LN7@tt_check_s
; Line 449
	lea	ecx, DWORD PTR _asize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_get_location
	add	esp, 12					; 0000000cH
; Line 450
	cmp	DWORD PTR _asize$[ebp], 0
	jbe	SHORT $LN6@tt_check_s
; Line 452
	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
; Line 453
	cmp	DWORD PTR _count$[ebp], 1
	jbe	SHORT $LN5@tt_check_s
; Line 454
	jmp	SHORT $LN7@tt_check_s
$LN5@tt_check_s:
; Line 455
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _glyph_index$[ebp], edx
$LN6@tt_check_s:
; Line 457
	jmp	SHORT $LN8@tt_check_s
$LN7@tt_check_s:
; Line 460
	cmp	DWORD PTR _count$[ebp], 1
	jne	SHORT $LN4@tt_check_s
; Line 462
	cmp	DWORD PTR _glyph_index$[ebp], 0
	jne	SHORT $LN3@tt_check_s
; Line 463
	mov	BYTE PTR _result$[ebp], 1
; Line 464
	jmp	SHORT $LN4@tt_check_s
$LN3@tt_check_s:
; Line 471
	push	8
	lea	eax, DWORD PTR _buf$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ttface$[ebp]
	push	edx
	call	_FT_Get_Glyph_Name
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$2[ebp], eax
; Line 473
	cmp	DWORD PTR _error$2[ebp], 0
	jne	SHORT $LN4@tt_check_s
	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _buf$1[ebp+ecx]
	cmp	edx, 46					; 0000002eH
	jne	SHORT $LN4@tt_check_s
	mov	esi, esp
	push	8
	push	OFFSET $SG10592
	lea	eax, DWORD PTR _buf$1[ebp]
	push	eax
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@tt_check_s
; Line 474
	mov	BYTE PTR _result$[ebp], 1
$LN4@tt_check_s:
; Line 478
	mov	al, BYTE PTR _result$[ebp]
; Line 479
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@tt_check_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@tt_check_s:
	DD	2
	DD	$LN14@tt_check_s
$LN14@tt_check_s:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN12@tt_check_s
	DD	-52					; ffffffccH
	DD	8
	DD	$LN13@tt_check_s
$LN13@tt_check_s:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN12@tt_check_s:
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_tt_check_single_notdef ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_tt_check_trickyness PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 415
	push	ebp
	mov	ebp, esp
; Line 416
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN3@tt_check_t
; Line 417
	xor	al, al
	jmp	SHORT $LN4@tt_check_t
$LN3@tt_check_t:
; Line 421
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN2@tt_check_t
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_tt_check_trickyness_family
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@tt_check_t
; Line 422
	mov	al, 1
	jmp	SHORT $LN4@tt_check_t
$LN2@tt_check_t:
; Line 427
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_check_trickyness_sfnt_ids
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@tt_check_t
; Line 428
	mov	al, 1
	jmp	SHORT $LN4@tt_check_t
$LN1@tt_check_t:
; Line 430
	xor	al, al
$LN4@tt_check_t:
; Line 431
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_tt_check_trickyness ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -104						; size = 4
_k$ = -100						; size = 4
_j$ = -96						; size = 4
_i$ = -92						; size = 2
_has_prep$ = -87					; size = 1
_has_fpgm$ = -86					; size = 1
_has_cvt$ = -85						; size = 1
_num_matched_ids$ = -80					; size = 68
_checksum$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_tt_check_trickyness_sfnt_ids PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 247
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 353
	push	68					; 00000044H
	push	0
	lea	eax, DWORD PTR _num_matched_ids$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 354
	mov	BYTE PTR _has_cvt$[ebp], 0
; Line 355
	mov	BYTE PTR _has_fpgm$[ebp], 0
; Line 356
	mov	BYTE PTR _has_prep$[ebp], 0
; Line 358
	xor	ecx, ecx
	mov	WORD PTR _i$[ebp], cx
	jmp	SHORT $LN23@tt_check_t
$LN22@tt_check_t:
	mov	dx, WORD PTR _i$[ebp]
	add	dx, 1
	mov	WORD PTR _i$[ebp], dx
$LN23@tt_check_t:
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+152]
	cmp	eax, edx
	jge	$LN21@tt_check_t
; Line 360
	mov	DWORD PTR _checksum$[ebp], 0
; Line 362
	movzx	eax, WORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR tv77[ebp], eax
	cmp	DWORD PTR tv77[ebp], 1668707360		; 63767420H
	je	SHORT $LN18@tt_check_t
	cmp	DWORD PTR tv77[ebp], 1718642541		; 6670676dH
	je	SHORT $LN17@tt_check_t
	cmp	DWORD PTR tv77[ebp], 1886545264		; 70726570H
	je	SHORT $LN16@tt_check_t
	jmp	SHORT $LN15@tt_check_t
$LN18@tt_check_t:
; Line 365
	mov	DWORD PTR _k$[ebp], 0
; Line 366
	mov	BYTE PTR _has_cvt$[ebp], 1
; Line 367
	jmp	SHORT $LN19@tt_check_t
$LN17@tt_check_t:
; Line 370
	mov	DWORD PTR _k$[ebp], 1
; Line 371
	mov	BYTE PTR _has_fpgm$[ebp], 1
; Line 372
	jmp	SHORT $LN19@tt_check_t
$LN16@tt_check_t:
; Line 375
	mov	DWORD PTR _k$[ebp], 2
; Line 376
	mov	BYTE PTR _has_prep$[ebp], 1
; Line 377
	jmp	SHORT $LN19@tt_check_t
$LN15@tt_check_t:
; Line 380
	jmp	$LN22@tt_check_t
$LN19@tt_check_t:
; Line 383
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN14@tt_check_t
$LN13@tt_check_t:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN14@tt_check_t:
	cmp	DWORD PTR _j$[ebp], 17			; 00000011H
	jge	SHORT $LN12@tt_check_t
; Line 384
	movzx	edx, WORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	imul	eax, DWORD PTR _j$[ebp], 24
	mov	esi, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+12]
	cmp	ecx, DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[eax+esi*8+4]
	jne	SHORT $LN11@tt_check_t
; Line 386
	cmp	DWORD PTR _checksum$[ebp], 0
	jne	SHORT $LN10@tt_check_t
; Line 387
	movzx	edx, WORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_get_sfnt_checksum
	add	esp, 8
	mov	DWORD PTR _checksum$[ebp], eax
$LN10@tt_check_t:
; Line 389
	imul	ecx, DWORD PTR _j$[ebp], 24
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[ecx+edx*8]
	cmp	eax, DWORD PTR _checksum$[ebp]
	jne	SHORT $LN9@tt_check_t
; Line 390
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
	add	edx, 1
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
$LN9@tt_check_t:
; Line 392
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _num_matched_ids$[ebp+ecx*4], 3
	jne	SHORT $LN11@tt_check_t
; Line 393
	mov	al, 1
	jmp	$LN24@tt_check_t
$LN11@tt_check_t:
; Line 395
	jmp	$LN13@tt_check_t
$LN12@tt_check_t:
	jmp	$LN22@tt_check_t
$LN21@tt_check_t:
; Line 397
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@tt_check_t
$LN6@tt_check_t:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN7@tt_check_t:
	cmp	DWORD PTR _j$[ebp], 17			; 00000011H
	jge	$LN5@tt_check_t
; Line 399
	movzx	eax, BYTE PTR _has_cvt$[ebp]
	test	eax, eax
	jne	SHORT $LN4@tt_check_t
	imul	ecx, DWORD PTR _j$[ebp], 24
	mov	edx, 8
	imul	eax, edx, 0
	cmp	DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[ecx+eax+4], 0
	jne	SHORT $LN4@tt_check_t
; Line 400
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
	add	edx, 1
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
$LN4@tt_check_t:
; Line 401
	movzx	ecx, BYTE PTR _has_fpgm$[ebp]
	test	ecx, ecx
	jne	SHORT $LN3@tt_check_t
	imul	edx, DWORD PTR _j$[ebp], 24
	mov	eax, 8
	shl	eax, 0
	cmp	DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[edx+eax+4], 0
	jne	SHORT $LN3@tt_check_t
; Line 402
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
	add	edx, 1
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
$LN3@tt_check_t:
; Line 403
	movzx	ecx, BYTE PTR _has_prep$[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@tt_check_t
	imul	edx, DWORD PTR _j$[ebp], 24
	mov	eax, 8
	shl	eax, 1
	cmp	DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[edx+eax+4], 0
	jne	SHORT $LN2@tt_check_t
; Line 404
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
	add	edx, 1
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
$LN2@tt_check_t:
; Line 405
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _num_matched_ids$[ebp+ecx*4], 3
	jne	SHORT $LN1@tt_check_t
; Line 406
	mov	al, 1
	jmp	SHORT $LN24@tt_check_t
$LN1@tt_check_t:
; Line 407
	jmp	$LN6@tt_check_t
$LN5@tt_check_t:
; Line 409
	xor	al, al
$LN24@tt_check_t:
; Line 410
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@tt_check_t
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@tt_check_t:
	DD	1
	DD	$LN27@tt_check_t
$LN27@tt_check_t:
	DD	-80					; ffffffb0H
	DD	68					; 00000044H
	DD	$LN26@tt_check_t
$LN26@tt_check_t:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_tt_check_trickyness_sfnt_ids ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_i$ = 12						; size = 2
_tt_get_sfnt_checksum PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 217
	push	ebp
	mov	ebp, esp
	push	esi
; Line 223
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+508], 0
	jne	SHORT $LN2@tt_get_sfn
; Line 224
	xor	eax, eax
	jmp	SHORT $LN3@tt_get_sfn
$LN2@tt_get_sfn:
; Line 229
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	movzx	eax, WORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@tt_get_sfn
; Line 230
	xor	eax, eax
	jmp	SHORT $LN3@tt_get_sfn
$LN1@tt_get_sfn:
; Line 233
	movzx	ecx, WORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR [eax+ecx+12]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+104]
	push	eax
	call	_tt_synth_sfnt_checksum
	add	esp, 8
$LN3@tt_get_sfn:
; Line 234
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_tt_get_sfnt_checksum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_checksum$ = -8						; size = 4
_error$ = -4						; size = 4
_stream$ = 8						; size = 4
_length$ = 12						; size = 4
_tt_synth_sfnt_checksum PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 191
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 193
	mov	DWORD PTR _checksum$[ebp], 0
; Line 197
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@tt_synth_s
; Line 198
	xor	eax, eax
	jmp	SHORT $LN8@tt_synth_s
$LN7@tt_synth_s:
; Line 200
	jmp	SHORT $LN6@tt_synth_s
$LN5@tt_synth_s:
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, 4
	mov	DWORD PTR _length$[ebp], edx
$LN6@tt_synth_s:
	cmp	DWORD PTR _length$[ebp], 3
	jbe	SHORT $LN4@tt_synth_s
; Line 201
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetULong
	add	esp, 4
	add	eax, DWORD PTR _checksum$[ebp]
	mov	DWORD PTR _checksum$[ebp], eax
	jmp	SHORT $LN5@tt_synth_s
$LN4@tt_synth_s:
; Line 203
	mov	DWORD PTR _i$[ebp], 3
	jmp	SHORT $LN3@tt_synth_s
$LN2@tt_synth_s:
	mov	ecx, DWORD PTR _length$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@tt_synth_s:
	cmp	DWORD PTR _length$[ebp], 0
	jbe	SHORT $LN1@tt_synth_s
; Line 204
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetChar
	add	esp, 4
	movzx	edx, al
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 3
	shl	edx, cl
	add	edx, DWORD PTR _checksum$[ebp]
	mov	DWORD PTR _checksum$[ebp], edx
	jmp	SHORT $LN2@tt_synth_s
$LN1@tt_synth_s:
; Line 206
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 208
	mov	eax, DWORD PTR _checksum$[ebp]
$LN8@tt_synth_s:
; Line 209
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_synth_sfnt_checksum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nn$ = -4						; size = 4
_name$ = 8						; size = 4
_tt_check_trickyness_family PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 173
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN4@tt_check_t
$LN3@tt_check_t:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN4@tt_check_t:
	cmp	DWORD PTR _nn$[ebp], 9
	jge	SHORT $LN2@tt_check_t
; Line 174
	imul	ecx, DWORD PTR _nn$[ebp], 20
	add	ecx, OFFSET ?trick_names@?1??tt_check_trickyness_family@@9@9
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	DWORD PTR __imp__strstr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@tt_check_t
; Line 175
	mov	al, 1
	jmp	SHORT $LN5@tt_check_t
$LN1@tt_check_t:
; Line 177
	jmp	SHORT $LN3@tt_check_t
$LN2@tt_check_t:
	xor	al, al
$LN5@tt_check_t:
; Line 178
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_check_trickyness_family ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv137 = -37						; size = 1
tv95 = -36						; size = 4
_gloader$1 = -32					; size = 4
_i$2 = -28						; size = 4
_reexecute$3 = -22					; size = 1
_grayscale$4 = -21					; size = 1
_exec$5 = -20						; size = 4
_pedantic$ = -13					; size = 1
_stream$ = -12						; size = 4
_face$ = -8						; size = 4
_error$ = -4						; size = 4
_loader$ = 8						; size = 4
_size$ = 12						; size = 4
_glyph$ = 16						; size = 4
_load_flags$ = 20					; size = 4
_glyf_table_only$ = 24					; size = 1
_tt_loader_init PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 2088
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2094
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 128				; 00000080H
	mov	BYTE PTR _pedantic$[ebp], al
; Line 2098
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _face$[ebp], edx
; Line 2099
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 2101
	push	208					; 000000d0H
	push	0
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2106
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 2
	jne	$LN29@tt_loader_
	movzx	ecx, BYTE PTR _glyf_table_only$[ebp]
	test	ecx, ecx
	jne	$LN29@tt_loader_
; Line 2125
	mov	BYTE PTR _reexecute$3[ebp], 0
; Line 2128
	mov	edx, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [edx+300], 0
	jl	SHORT $LN27@tt_loader_
	mov	eax, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [eax+304], 0
	jge	SHORT $LN28@tt_loader_
$LN27@tt_loader_:
; Line 2130
	movzx	ecx, BYTE PTR _pedantic$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	_tt_size_ready_bytecode
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2131
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN26@tt_loader_
; Line 2132
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN30@tt_loader_
$LN26@tt_loader_:
; Line 2134
	jmp	SHORT $LN25@tt_loader_
$LN28@tt_loader_:
	mov	eax, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [eax+300], 0
	je	SHORT $LN24@tt_loader_
; Line 2135
	mov	ecx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [ecx+300]
	jmp	$LN30@tt_loader_
	jmp	SHORT $LN25@tt_loader_
$LN24@tt_loader_:
; Line 2136
	mov	edx, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [edx+304], 0
	je	SHORT $LN25@tt_loader_
; Line 2137
	mov	eax, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [eax+304]
	jmp	$LN30@tt_loader_
$LN25@tt_loader_:
; Line 2141
	mov	ecx, DWORD PTR _size$[ebp]
	movzx	edx, BYTE PTR [ecx+292]
	test	edx, edx
	je	SHORT $LN32@tt_loader_
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR tv95[ebp], ecx
	jmp	SHORT $LN33@tt_loader_
$LN32@tt_loader_:
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR tv95[ebp], ecx
$LN33@tt_loader_:
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR _exec$5[ebp], edx
; Line 2142
	cmp	DWORD PTR _exec$5[ebp], 0
	jne	SHORT $LN21@tt_loader_
; Line 2143
	push	OFFSET $SG10324
	push	2143					; 0000085fH
	push	153					; 00000099H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 153				; 00000099H
	jmp	$LN30@tt_loader_
$LN21@tt_loader_:
; Line 2198
	mov	eax, DWORD PTR _load_flags$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 15					; 0000000fH
	cmp	eax, 2
	je	SHORT $LN34@tt_loader_
	mov	BYTE PTR tv137[ebp], 1
	jmp	SHORT $LN35@tt_loader_
$LN34@tt_loader_:
	mov	BYTE PTR tv137[ebp], 0
$LN35@tt_loader_:
	mov	cl, BYTE PTR tv137[ebp]
	mov	BYTE PTR _grayscale$4[ebp], cl
; Line 2201
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exec$5[ebp]
	push	ecx
	call	_TT_Load_Context
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2202
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@tt_loader_
; Line 2203
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN30@tt_loader_
$LN20@tt_loader_:
; Line 2238
	movzx	edx, BYTE PTR _grayscale$4[ebp]
	mov	eax, DWORD PTR _exec$5[ebp]
	movzx	ecx, BYTE PTR [eax+608]
	cmp	edx, ecx
	je	SHORT $LN19@tt_loader_
$LN18@tt_loader_:
; Line 2241
	mov	edx, 4
	imul	eax, edx, 28
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN17@tt_loader_
	push	OFFSET $SG10333
	call	_FT_Message
	add	esp, 4
$LN17@tt_loader_:
	xor	ecx, ecx
	jne	SHORT $LN18@tt_loader_
; Line 2243
	mov	edx, DWORD PTR _exec$5[ebp]
	mov	al, BYTE PTR _grayscale$4[ebp]
	mov	BYTE PTR [edx+608], al
; Line 2244
	mov	BYTE PTR _reexecute$3[ebp], 1
$LN19@tt_loader_:
; Line 2248
	movzx	ecx, BYTE PTR _reexecute$3[ebp]
	test	ecx, ecx
	je	SHORT $LN14@tt_loader_
; Line 2253
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN13@tt_loader_
$LN12@tt_loader_:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN13@tt_loader_:
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR [eax+240]
	jae	SHORT $LN11@tt_loader_
; Line 2254
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	mov	eax, DWORD PTR _i$2[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [edx+244]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN12@tt_loader_
$LN11@tt_loader_:
; Line 2255
	movzx	eax, BYTE PTR _pedantic$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_tt_size_run_prep
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2256
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@tt_loader_
; Line 2257
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN30@tt_loader_
$LN14@tt_loader_:
; Line 2261
	mov	edx, DWORD PTR _exec$5[ebp]
	movzx	eax, BYTE PTR [edx+336]
	and	eax, 1
	je	SHORT $LN9@tt_loader_
; Line 2262
	mov	ecx, DWORD PTR _load_flags$[ebp]
	or	ecx, 2
	mov	DWORD PTR _load_flags$[ebp], ecx
$LN9@tt_loader_:
; Line 2265
	mov	edx, DWORD PTR _exec$5[ebp]
	movzx	eax, BYTE PTR [edx+336]
	and	eax, 2
	je	SHORT $LN8@tt_loader_
; Line 2266
	mov	edi, DWORD PTR _exec$5[ebp]
	add	edi, 284				; 0000011cH
	mov	ecx, 17					; 00000011H
	mov	esi, OFFSET _tt_default_graphics_state
	rep movsd
$LN8@tt_loader_:
; Line 2268
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _exec$5[ebp]
	mov	BYTE PTR [edx+561], cl
; Line 2269
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _exec$5[ebp]
	mov	DWORD PTR [eax+160], ecx
; Line 2270
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _exec$5[ebp]
	mov	ecx, DWORD PTR [eax+392]
	mov	DWORD PTR [edx+164], ecx
$LN29@tt_loader_:
; Line 2281
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN7@tt_loader_
; Line 2282
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+84], 0
; Line 2283
	jmp	SHORT $LN6@tt_loader_
$LN7@tt_loader_:
; Line 2288
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	1735162214				; 676c7966H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 2290
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN5@tt_loader_
; Line 2291
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+84], 0
	jmp	SHORT $LN6@tt_loader_
$LN5@tt_loader_:
; Line 2292
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@tt_loader_
; Line 2294
	push	OFFSET $SG10355
	call	_FT_Message
	add	esp, 4
; Line 2295
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN30@tt_loader_
; Line 2297
	jmp	SHORT $LN6@tt_loader_
$LN3@tt_loader_:
; Line 2298
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+84], eax
$LN6@tt_loader_:
; Line 2302
	movzx	edx, BYTE PTR _glyf_table_only$[ebp]
	test	edx, edx
	jne	SHORT $LN1@tt_loader_
; Line 2304
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _gloader$1[ebp], edx
; Line 2307
	mov	eax, DWORD PTR _gloader$1[ebp]
	push	eax
	call	_FT_GlyphLoader_Rewind
	add	esp, 4
; Line 2308
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _gloader$1[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN1@tt_loader_:
; Line 2311
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _load_flags$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2313
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx], eax
; Line 2314
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 2315
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 2316
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 2318
	xor	eax, eax
$LN30@tt_loader_:
; Line 2319
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_loader_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_metrics$ = -40						; size = 16
_error$ = -20						; size = 4
_stream$ = -16						; size = 4
_sfnt$ = -12						; size = 4
_face$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_size$ = 8						; size = 4
_glyph$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_load_sbit_image PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 2027
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2035
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$[ebp], ecx
; Line 2036
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+532]
	mov	DWORD PTR _sfnt$[ebp], eax
; Line 2037
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR _stream$[ebp], edx
; Line 2045
	mov	esi, esp
	lea	eax, DWORD PTR _metrics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _load_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+112]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 2046
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN3@load_sbit_
; Line 2048
	xor	ecx, ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	WORD PTR [edx+110], cx
; Line 2049
	xor	eax, eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	WORD PTR [ecx+108], ax
; Line 2051
	movzx	edx, WORD PTR _metrics$[ebp+2]
	shl	edx, 6
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+24], edx
; Line 2052
	movzx	ecx, WORD PTR _metrics$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 2054
	movsx	eax, WORD PTR _metrics$[ebp+4]
	shl	eax, 6
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 2055
	movsx	edx, WORD PTR _metrics$[ebp+6]
	shl	edx, 6
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+36], edx
; Line 2056
	movzx	ecx, WORD PTR _metrics$[ebp+8]
	shl	ecx, 6
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 2058
	movsx	eax, WORD PTR _metrics$[ebp+10]
	shl	eax, 6
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 2059
	movsx	edx, WORD PTR _metrics$[ebp+12]
	shl	edx, 6
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+48], edx
; Line 2060
	movzx	ecx, WORD PTR _metrics$[ebp+14]
	shl	ecx, 6
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+52], ecx
; Line 2062
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+72], 1651078259		; 62697473H
; Line 2064
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN2@load_sbit_
; Line 2066
	movsx	edx, WORD PTR _metrics$[ebp+10]
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+100], edx
; Line 2067
	movsx	ecx, WORD PTR _metrics$[ebp+12]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+104], ecx
; Line 2069
	jmp	SHORT $LN3@load_sbit_
$LN2@load_sbit_:
; Line 2071
	movsx	eax, WORD PTR _metrics$[ebp+4]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+100], eax
; Line 2072
	movsx	edx, WORD PTR _metrics$[ebp+6]
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+104], edx
$LN3@load_sbit_:
; Line 2076
	mov	eax, DWORD PTR _error$[ebp]
; Line 2077
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@load_sbit_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@load_sbit_:
	DD	1
	DD	$LN7@load_sbit_
$LN7@load_sbit_:
	DD	-40					; ffffffd8H
	DD	16					; 00000010H
	DD	$LN6@load_sbit_
$LN6@load_sbit_:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
_load_sbit_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$1 = -92						; size = 4
_metrics$2 = -84					; size = 16
_incr$3 = -64						; size = 4
_height$4 = -60						; size = 4
_advance$5 = -56					; size = 4
_top$6 = -52						; size = 4
_widthp$7 = -48						; size = 4
_size$ = -44						; size = 4
_glyph$ = -40						; size = 4
_y_scale$ = -36						; size = 4
_bbox$ = -28						; size = 16
_face$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_loader$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_compute_glyph_metrics PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 1849
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1850
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 1857
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _glyph$[ebp], eax
; Line 1858
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _size$[ebp], edx
; Line 1861
	mov	DWORD PTR _y_scale$[ebp], 65536		; 00010000H
; Line 1862
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	jne	SHORT $LN14@compute_gl
; Line 1863
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _y_scale$[ebp], eax
$LN14@compute_gl:
; Line 1865
	mov	ecx, DWORD PTR _glyph$[ebp]
	cmp	DWORD PTR [ecx+72], 1668246896		; 636f6d70H
	je	SHORT $LN13@compute_gl
; Line 1866
	lea	edx, DWORD PTR _bbox$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_Outline_Get_CBox
	add	esp, 8
; Line 1867
	jmp	SHORT $LN12@compute_gl
$LN13@compute_gl:
; Line 1868
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _bbox$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _bbox$[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _bbox$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _bbox$[ebp+12], eax
$LN12@compute_gl:
; Line 1872
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR [ecx+56], eax
; Line 1874
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _bbox$[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 1875
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR _bbox$[ebp+12]
	mov	DWORD PTR [eax+36], ecx
; Line 1876
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	sub	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 1880
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+480], 0
	jne	SHORT $LN11@compute_gl
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 2
	jne	SHORT $LN11@compute_gl
; Line 1887
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	movzx	edx, WORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_get_device_metrics
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _widthp$7[ebp], eax
; Line 1910
	cmp	DWORD PTR _widthp$7[ebp], 0
	je	SHORT $LN11@compute_gl
; Line 1911
	mov	ecx, DWORD PTR _widthp$7[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 6
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+40], edx
$LN11@compute_gl:
; Line 1916
	mov	ecx, DWORD PTR _bbox$[ebp+8]
	sub	ecx, DWORD PTR _bbox$[ebp]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 1917
	mov	eax, DWORD PTR _bbox$[ebp+12]
	sub	eax, DWORD PTR _bbox$[ebp+4]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 1929
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, BYTE PTR [edx+292]
	test	eax, eax
	je	SHORT $LN9@compute_gl
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+330]
	test	edx, edx
	jle	SHORT $LN9@compute_gl
; Line 1932
	mov	eax, DWORD PTR _y_scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	sub	edx, DWORD PTR _bbox$[ebp+12]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	cwde
	mov	DWORD PTR _top$6[ebp], eax
; Line 1934
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [ecx+188]
	cmp	eax, DWORD PTR [edx+196]
	jg	SHORT $LN8@compute_gl
; Line 1935
	mov	DWORD PTR _advance$5[ebp], 0
; Line 1936
	jmp	SHORT $LN7@compute_gl
$LN8@compute_gl:
; Line 1938
	mov	ecx, DWORD PTR _y_scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [edx+188]
	sub	ecx, DWORD PTR [eax+196]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	movzx	edx, ax
	mov	DWORD PTR _advance$5[ebp], edx
$LN7@compute_gl:
; Line 1940
	jmp	SHORT $LN6@compute_gl
$LN9@compute_gl:
; Line 1954
	mov	eax, DWORD PTR _y_scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bbox$[ebp+12]
	sub	ecx, DWORD PTR _bbox$[ebp+4]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	movsx	edx, ax
	mov	DWORD PTR _height$4[ebp], edx
; Line 1955
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+364]
	cmp	ecx, 65535				; 0000ffffH
	je	SHORT $LN5@compute_gl
; Line 1957
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+434]
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+436]
	sub	eax, edx
	mov	DWORD PTR _advance$5[ebp], eax
; Line 1958
	jmp	SHORT $LN4@compute_gl
$LN5@compute_gl:
; Line 1960
	mov	eax, DWORD PTR _face$[ebp]
	movsx	ecx, WORD PTR [eax+220]
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+222]
	sub	ecx, eax
	mov	DWORD PTR _advance$5[ebp], ecx
$LN4@compute_gl:
; Line 1962
	mov	eax, DWORD PTR _advance$5[ebp]
	sub	eax, DWORD PTR _height$4[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _top$6[ebp], eax
$LN6@compute_gl:
; Line 1972
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _incr$3[ebp], eax
; Line 1976
	cmp	DWORD PTR _incr$3[ebp], 0
	je	SHORT $LN3@compute_gl
	mov	ecx, DWORD PTR _incr$3[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN3@compute_gl
; Line 1978
	mov	DWORD PTR _metrics$2[ebp], 0
; Line 1979
	mov	eax, DWORD PTR _top$6[ebp]
	mov	DWORD PTR _metrics$2[ebp+4], eax
; Line 1980
	mov	ecx, DWORD PTR _advance$5[ebp]
	mov	DWORD PTR _metrics$2[ebp+8], ecx
; Line 1985
	mov	esi, esp
	lea	edx, DWORD PTR _metrics$2[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _incr$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _incr$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$1[ebp], eax
; Line 1986
	cmp	DWORD PTR _error$1[ebp], 0
	je	SHORT $LN2@compute_gl
; Line 1987
	mov	eax, DWORD PTR _error$1[ebp]
	jmp	SHORT $LN15@compute_gl
$LN2@compute_gl:
; Line 1989
	mov	eax, DWORD PTR _metrics$2[ebp+4]
	mov	DWORD PTR _top$6[ebp], eax
; Line 1990
	mov	ecx, DWORD PTR _metrics$2[ebp+8]
	mov	DWORD PTR _advance$5[ebp], ecx
$LN3@compute_gl:
; Line 1998
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR _advance$5[ebp]
	mov	DWORD PTR [edx+60], eax
; Line 2001
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1
	jne	SHORT $LN1@compute_gl
; Line 2003
	mov	eax, DWORD PTR _y_scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _top$6[ebp]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _top$6[ebp], eax
; Line 2004
	mov	edx, DWORD PTR _y_scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _advance$5[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _advance$5[ebp], eax
$LN1@compute_gl:
; Line 2011
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	sub	ecx, eax
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 2012
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR _top$6[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 2013
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR _advance$5[ebp]
	mov	DWORD PTR [edx+52], eax
; Line 2016
	xor	eax, eax
$LN15@compute_gl:
; Line 2017
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@compute_gl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@compute_gl:
	DD	2
	DD	$LN19@compute_gl
$LN19@compute_gl:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN17@compute_gl
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN18@compute_gl
$LN18@compute_gl:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
$LN17@compute_gl:
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
_compute_glyph_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pp$1 = -212						; size = 32
_old_byte_len$2 = -176					; size = 4
_old_stream$3 = -172					; size = 4
_num_base_subgs$4 = -168				; size = 4
_num_subglyphs$5 = -164					; size = 4
_num_points$6 = -160					; size = 4
_subglyph$7 = -156					; size = 4
_num_base_points$8 = -152				; size = 4
_n$9 = -148						; size = 4
_memory$10 = -144					; size = 4
_subglyph$11 = -140					; size = 4
_limit$12 = -136					; size = 4
_i$13 = -132						; size = 4
_ins_pos$14 = -128					; size = 4
_start_contour$15 = -124				; size = 4
_start_point$16 = -120					; size = 4
_memory$17 = -116					; size = 4
_glyph_data_loaded$ = -109				; size = 1
_glyph_data$ = -104					; size = 8
_inc_stream$ = -88					; size = 40
_deltas$ = -40						; size = 4
_opened_frame$ = -29					; size = 1
_gloader$ = -28						; size = 4
_face$ = -24						; size = 4
_offset$ = -20						; size = 4
_y_scale$ = -16						; size = 4
_x_scale$ = -12						; size = 4
_error$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_loader$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_recurse_count$ = 16					; size = 4
_header_only$ = 20					; size = 1
_load_truetype_glyph PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 1404
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1405
	mov	DWORD PTR _error$[ebp], 0
; Line 1408
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 1409
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _gloader$[ebp], eax
; Line 1410
	mov	BYTE PTR _opened_frame$[ebp], 0
; Line 1413
	mov	DWORD PTR _deltas$[ebp], 0
; Line 1419
	mov	BYTE PTR _glyph_data_loaded$[ebp], 0
; Line 1426
	cmp	DWORD PTR _recurse_count$[ebp], 1
	jbe	SHORT $LN62@load_truet
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+290]
	cmp	DWORD PTR _recurse_count$[ebp], edx
	jbe	SHORT $LN62@load_truet
; Line 1428
	push	OFFSET $SG10101
	push	1428					; 00000594H
	push	21					; 00000015H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 21					; 00000015H
	mov	DWORD PTR _error$[ebp], eax
; Line 1429
	jmp	$Exit$71
$LN62@load_truet:
; Line 1433
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN61@load_truet
; Line 1435
	push	OFFSET $SG10105
	push	1435					; 0000059bH
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1436
	jmp	$Exit$71
$LN61@load_truet:
; Line 1439
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 1441
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1
	jne	SHORT $LN60@load_truet
; Line 1443
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _x_scale$[ebp], edx
; Line 1444
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _y_scale$[ebp], edx
; Line 1446
	jmp	SHORT $LN59@load_truet
$LN60@load_truet:
; Line 1448
	mov	DWORD PTR _x_scale$[ebp], 65536		; 00010000H
; Line 1449
	mov	DWORD PTR _y_scale$[ebp], 65536		; 00010000H
$LN59@load_truet:
; Line 1461
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN58@load_truet
; Line 1465
	mov	esi, esp
	lea	edx, DWORD PTR _glyph_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1466
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN57@load_truet
; Line 1467
	jmp	$Exit$71
$LN57@load_truet:
; Line 1469
	mov	BYTE PTR _glyph_data_loaded$[ebp], 1
; Line 1470
	mov	DWORD PTR _offset$[ebp], 0
; Line 1471
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _glyph_data$[ebp+4]
	mov	DWORD PTR [ecx+28], edx
; Line 1473
	push	40					; 00000028H
	push	0
	lea	eax, DWORD PTR _inc_stream$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1475
	mov	ecx, DWORD PTR _glyph_data$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _glyph_data$[ebp]
	push	edx
	lea	eax, DWORD PTR _inc_stream$[ebp]
	push	eax
	call	_FT_Stream_OpenMemory
	add	esp, 12					; 0000000cH
; Line 1477
	mov	ecx, DWORD PTR _loader$[ebp]
	lea	edx, DWORD PTR _inc_stream$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 1479
	jmp	SHORT $LN56@load_truet
$LN58@load_truet:
; Line 1484
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_get_location
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _offset$[ebp], eax
$LN56@load_truet:
; Line 1486
	mov	eax, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jle	$LN55@load_truet
; Line 1491
	mov	ecx, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [ecx+84], 0
	jne	SHORT $LN54@load_truet
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN54@load_truet
$LN53@load_truet:
; Line 1496
	mov	ecx, 4
	imul	edx, ecx, 28
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN52@load_truet
	push	OFFSET $SG10120
	call	_FT_Message
	add	esp, 4
$LN52@load_truet:
	xor	eax, eax
	jne	SHORT $LN53@load_truet
; Line 1497
	push	OFFSET $SG10121
	push	1497					; 000005d9H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1498
	jmp	$Exit$71
$LN54@load_truet:
; Line 1503
	mov	esi, esp
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+512]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1504
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN49@load_truet
; Line 1505
	jmp	$Exit$71
$LN49@load_truet:
; Line 1507
	mov	BYTE PTR _opened_frame$[ebp], 1
; Line 1510
	mov	esi, esp
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+520]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1511
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN48@load_truet
; Line 1512
	jmp	$Exit$71
$LN48@load_truet:
; Line 1517
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_tt_get_metrics
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1518
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN47@load_truet
; Line 1519
	jmp	$Exit$71
$LN47@load_truet:
; Line 1521
	movzx	edx, BYTE PTR _header_only$[ebp]
	test	edx, edx
	je	SHORT $LN55@load_truet
; Line 1522
	jmp	$Exit$71
$LN55@load_truet:
; Line 1525
	mov	eax, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN44@load_truet
	mov	ecx, DWORD PTR _loader$[ebp]
	movsx	edx, WORD PTR [ecx+32]
	test	edx, edx
	jne	$LN32@load_truet
$LN44@load_truet:
; Line 1527
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 1528
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+44], 0
; Line 1529
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 1530
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 1532
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_tt_get_metrics
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1533
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN43@load_truet
; Line 1534
	jmp	$Exit$71
$LN43@load_truet:
; Line 1536
	movzx	eax, BYTE PTR _header_only$[ebp]
	test	eax, eax
	je	SHORT $LN41@load_truet
; Line 1537
	jmp	$Exit$71
$LN41@load_truet:
; Line 1541
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	sub	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+68], eax
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+72], 0
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _loader$[ebp]
	add	ecx, DWORD PTR [edx+56]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+76], ecx
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+80], 0
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+184], 0
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _loader$[ebp]
	add	ecx, DWORD PTR [edx+176]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+188], ecx
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+192], 0
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [edx+188]
	sub	ecx, DWORD PTR [eax+180]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+196], ecx
	xor	eax, eax
	jne	$LN41@load_truet
; Line 1544
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_tt_get_metrics_incr_overrides
	add	esp, 8
; Line 1549
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+672]
	test	edx, edx
	je	$LN38@load_truet
; Line 1552
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$17[ebp], edx
; Line 1556
	push	4
	lea	eax, DWORD PTR _deltas$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_TT_Vary_Get_Glyph_Deltas
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1557
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN37@load_truet
; Line 1558
	jmp	$Exit$71
$LN37@load_truet:
; Line 1560
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	eax, DWORD PTR _deltas$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+68], ecx
; Line 1561
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	edx, DWORD PTR _deltas$[ebp]
	add	eax, DWORD PTR [edx+ecx+4]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+72], eax
; Line 1562
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	eax, DWORD PTR _deltas$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+76], ecx
; Line 1563
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	ecx, DWORD PTR _deltas$[ebp]
	add	edx, DWORD PTR [ecx+eax+4]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+80], edx
; Line 1565
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+184]
	mov	edx, DWORD PTR _deltas$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+184], eax
; Line 1566
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	eax, DWORD PTR _deltas$[ebp]
	add	ecx, DWORD PTR [eax+edx+4]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+188], ecx
; Line 1567
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	edx, DWORD PTR _deltas$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+192], eax
; Line 1568
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	mov	ecx, DWORD PTR _deltas$[ebp]
	add	edx, DWORD PTR [ecx+eax+4]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+196], edx
$LN36@load_truet:
; Line 1570
	mov	ecx, DWORD PTR _deltas$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$17[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _deltas$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN36@load_truet
$LN38@load_truet:
; Line 1577
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1
	jne	$LN33@load_truet
; Line 1579
	mov	eax, DWORD PTR _x_scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+68], eax
; Line 1580
	mov	edx, DWORD PTR _x_scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+76], eax
; Line 1583
	mov	eax, DWORD PTR _x_scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+184], eax
; Line 1584
	mov	edx, DWORD PTR _y_scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+188], eax
; Line 1585
	mov	eax, DWORD PTR _x_scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+192], eax
; Line 1586
	mov	edx, DWORD PTR _y_scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+196], eax
$LN33@load_truet:
; Line 1589
	mov	DWORD PTR _error$[ebp], 0
; Line 1590
	jmp	$Exit$71
$LN32@load_truet:
; Line 1595
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [eax+36]
	sub	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+68], edx
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+72], 0
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _loader$[ebp]
	add	eax, DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+76], eax
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+80], 0
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+184], 0
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _loader$[ebp]
	add	eax, DWORD PTR [ecx+176]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+188], eax
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+192], 0
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [ecx+188]
	sub	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+196], eax
	xor	edx, edx
	jne	$LN32@load_truet
; Line 1598
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_tt_get_metrics_incr_overrides
	add	esp, 8
; Line 1607
	mov	edx, DWORD PTR _loader$[ebp]
	movsx	eax, WORD PTR [edx+32]
	test	eax, eax
	jle	SHORT $LN29@load_truet
; Line 1609
	mov	esi, esp
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+524]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1610
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@load_truet
; Line 1611
	jmp	$Exit$71
$LN28@load_truet:
; Line 1614
	mov	esi, esp
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+516]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1615
	mov	BYTE PTR _opened_frame$[ebp], 0
; Line 1617
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_TT_Process_Simple_Glyph
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 1618
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN27@load_truet
; Line 1619
	jmp	$Exit$71
$LN27@load_truet:
; Line 1621
	mov	edx, DWORD PTR _gloader$[ebp]
	push	edx
	call	_FT_GlyphLoader_Add
	add	esp, 4
	jmp	$Exit$71
$LN29@load_truet:
; Line 1629
	mov	eax, DWORD PTR _loader$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	cmp	ecx, -1
	jne	$LN25@load_truet
; Line 1636
	mov	edx, DWORD PTR _gloader$[ebp]
	movsx	eax, WORD PTR [edx+22]
	mov	DWORD PTR _start_point$16[ebp], eax
; Line 1637
	mov	ecx, DWORD PTR _gloader$[ebp]
	movsx	edx, WORD PTR [ecx+20]
	mov	DWORD PTR _start_contour$15[ebp], edx
; Line 1640
	mov	esi, esp
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1641
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN24@load_truet
; Line 1642
	jmp	$Exit$71
$LN24@load_truet:
; Line 1645
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR _ins_pos$14[ebp], ecx
; Line 1648
	mov	esi, esp
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1649
	mov	BYTE PTR _opened_frame$[ebp], 0
; Line 1653
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, BYTE PTR [edx+672]
	test	eax, eax
	je	$LN23@load_truet
; Line 1657
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$10[ebp], edx
; Line 1667
	mov	eax, DWORD PTR _gloader$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR _deltas$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_TT_Vary_Get_Glyph_Deltas
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN22@load_truet
; Line 1668
	jmp	$Exit$71
$LN22@load_truet:
; Line 1670
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shl	eax, 5
	mov	ecx, DWORD PTR _gloader$[ebp]
	add	eax, DWORD PTR [ecx+88]
	mov	DWORD PTR _subglyph$11[ebp], eax
; Line 1671
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR _limit$12[ebp], eax
; Line 1673
	mov	DWORD PTR _i$13[ebp], 0
	jmp	SHORT $LN21@load_truet
$LN20@load_truet:
	mov	ecx, DWORD PTR _i$13[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$13[ebp], ecx
	mov	edx, DWORD PTR _subglyph$11[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _subglyph$11[ebp], edx
$LN21@load_truet:
	mov	eax, DWORD PTR _i$13[ebp]
	cmp	eax, DWORD PTR _limit$12[ebp]
	jge	SHORT $LN19@load_truet
; Line 1675
	mov	ecx, DWORD PTR _subglyph$11[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 2
	je	SHORT $LN18@load_truet
; Line 1680
	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _deltas$[ebp]
	movsx	edx, WORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _subglyph$11[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _subglyph$11[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 1681
	mov	edx, DWORD PTR _i$13[ebp]
	mov	eax, DWORD PTR _deltas$[ebp]
	movsx	ecx, WORD PTR [eax+edx*8+4]
	mov	edx, DWORD PTR _subglyph$11[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _subglyph$11[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN18@load_truet:
; Line 1683
	jmp	SHORT $LN20@load_truet
$LN19@load_truet:
; Line 1685
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _deltas$[ebp]
	add	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+68], edx
; Line 1686
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _deltas$[ebp]
	add	edx, DWORD PTR [ecx+eax*8+4]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+72], edx
; Line 1687
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _deltas$[ebp]
	add	edx, DWORD PTR [ecx+eax*8+8]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+76], edx
; Line 1688
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _deltas$[ebp]
	add	edx, DWORD PTR [ecx+eax*8+12]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+80], edx
; Line 1690
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _deltas$[ebp]
	add	edx, DWORD PTR [ecx+eax*8+16]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+184], edx
; Line 1691
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _deltas$[ebp]
	add	edx, DWORD PTR [ecx+eax*8+20]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+188], edx
; Line 1692
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _deltas$[ebp]
	add	edx, DWORD PTR [ecx+eax*8+24]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+192], edx
; Line 1693
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _deltas$[ebp]
	add	edx, DWORD PTR [ecx+eax*8+28]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+196], edx
$LN17@load_truet:
; Line 1695
	mov	ecx, DWORD PTR _deltas$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$10[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _deltas$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN17@load_truet
$LN23@load_truet:
; Line 1702
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1
	jne	$LN14@load_truet
; Line 1704
	mov	eax, DWORD PTR _x_scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+68], eax
; Line 1705
	mov	edx, DWORD PTR _x_scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+76], eax
; Line 1708
	mov	eax, DWORD PTR _x_scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+184], eax
; Line 1709
	mov	edx, DWORD PTR _y_scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+188], eax
; Line 1710
	mov	eax, DWORD PTR _x_scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+192], eax
; Line 1711
	mov	edx, DWORD PTR _y_scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+196], eax
$LN14@load_truet:
; Line 1717
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN13@load_truet
; Line 1719
	mov	edx, DWORD PTR _gloader$[ebp]
	push	edx
	call	_FT_GlyphLoader_Add
	add	esp, 4
; Line 1720
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+72], 1668246896		; 636f6d70H
; Line 1722
	jmp	$Exit$71
$LN13@load_truet:
; Line 1731
	mov	DWORD PTR _subglyph$7[ebp], 0
; Line 1733
	mov	edx, DWORD PTR _start_point$16[ebp]
	mov	DWORD PTR _num_points$6[ebp], edx
; Line 1734
	mov	eax, DWORD PTR _gloader$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _num_subglyphs$5[ebp], ecx
; Line 1735
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _num_base_subgs$4[ebp], eax
; Line 1737
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _old_stream$3[ebp], edx
; Line 1738
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _old_byte_len$2[ebp], ecx
; Line 1741
	mov	edx, DWORD PTR _gloader$[ebp]
	push	edx
	call	_FT_GlyphLoader_Add
	add	esp, 4
; Line 1744
	mov	DWORD PTR _n$9[ebp], 0
	jmp	SHORT $LN12@load_truet
$LN11@load_truet:
	mov	eax, DWORD PTR _n$9[ebp]
	add	eax, 1
	mov	DWORD PTR _n$9[ebp], eax
$LN12@load_truet:
	mov	ecx, DWORD PTR _n$9[ebp]
	cmp	ecx, DWORD PTR _num_subglyphs$5[ebp]
	jae	$LN10@load_truet
; Line 1753
	mov	edx, DWORD PTR _num_base_subgs$4[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _gloader$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	add	ecx, edx
	mov	edx, DWORD PTR _n$9[ebp]
	shl	edx, 5
	add	ecx, edx
	mov	DWORD PTR _subglyph$7[ebp], ecx
; Line 1755
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [eax+72]
	mov	eax, 8
	imul	eax, eax, 0
	mov	DWORD PTR _pp$1[ebp+eax], ecx
	mov	DWORD PTR _pp$1[ebp+eax+4], edx
; Line 1756
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR [ecx+80]
	mov	ecx, 8
	shl	ecx, 0
	mov	DWORD PTR _pp$1[ebp+ecx], edx
	mov	DWORD PTR _pp$1[ebp+ecx+4], eax
; Line 1757
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+184]
	mov	ecx, DWORD PTR [edx+188]
	mov	edx, 8
	shl	edx, 1
	mov	DWORD PTR _pp$1[ebp+edx], eax
	mov	DWORD PTR _pp$1[ebp+edx+4], ecx
; Line 1758
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	mov	edx, DWORD PTR [eax+196]
	mov	eax, 8
	imul	eax, eax, 3
	mov	DWORD PTR _pp$1[ebp+eax], ecx
	mov	DWORD PTR _pp$1[ebp+eax+4], edx
; Line 1760
	mov	ecx, DWORD PTR _gloader$[ebp]
	movsx	edx, WORD PTR [ecx+22]
	mov	DWORD PTR _num_base_points$8[ebp], edx
; Line 1763
	push	0
	mov	eax, DWORD PTR _recurse_count$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _subglyph$7[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_load_truetype_glyph
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1764
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@load_truet
; Line 1765
	jmp	$Exit$71
$LN9@load_truet:
; Line 1768
	mov	ecx, DWORD PTR _num_base_subgs$4[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+52]
	add	eax, ecx
	mov	ecx, DWORD PTR _n$9[ebp]
	shl	ecx, 5
	add	eax, ecx
	mov	DWORD PTR _subglyph$7[ebp], eax
; Line 1771
	mov	edx, DWORD PTR _subglyph$7[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 512				; 00000200H
	jne	$LN8@load_truet
; Line 1773
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pp$1[ebp+edx]
	mov	ecx, DWORD PTR _pp$1[ebp+edx+4]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+68], eax
	mov	DWORD PTR [edx+72], ecx
; Line 1774
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _pp$1[ebp+eax]
	mov	edx, DWORD PTR _pp$1[ebp+eax+4]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+76], ecx
	mov	DWORD PTR [eax+80], edx
; Line 1775
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _pp$1[ebp+ecx]
	mov	eax, DWORD PTR _pp$1[ebp+ecx+4]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+184], edx
	mov	DWORD PTR [ecx+188], eax
; Line 1776
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _pp$1[ebp+eax]
	mov	edx, DWORD PTR _pp$1[ebp+eax+4]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+192], ecx
	mov	DWORD PTR [eax+196], edx
$LN8@load_truet:
; Line 1779
	mov	ecx, DWORD PTR _gloader$[ebp]
	movsx	edx, WORD PTR [ecx+22]
	mov	DWORD PTR _num_points$6[ebp], edx
; Line 1781
	mov	eax, DWORD PTR _num_points$6[ebp]
	cmp	eax, DWORD PTR _num_base_points$8[ebp]
	jne	SHORT $LN7@load_truet
; Line 1782
	jmp	$LN11@load_truet
$LN7@load_truet:
; Line 1793
	mov	ecx, DWORD PTR _num_base_points$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _start_point$16[ebp]
	push	edx
	mov	eax, DWORD PTR _subglyph$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_TT_Process_Composite_Component
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1794
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@load_truet
; Line 1795
	jmp	$Exit$71
$LN6@load_truet:
; Line 1796
	jmp	$LN11@load_truet
$LN10@load_truet:
; Line 1798
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _old_stream$3[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 1799
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _old_byte_len$2[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 1802
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _ins_pos$14[ebp]
	mov	DWORD PTR [eax+168], ecx
; Line 1807
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 2
	jne	SHORT $LN5@load_truet
	mov	ecx, DWORD PTR _subglyph$7[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 256				; 00000100H
	je	SHORT $LN5@load_truet
	mov	eax, DWORD PTR _num_points$6[ebp]
	cmp	eax, DWORD PTR _start_point$16[ebp]
	jbe	SHORT $LN5@load_truet
; Line 1811
	mov	ecx, DWORD PTR _start_contour$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _start_point$16[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_TT_Process_Composite_Glyph
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1812
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@load_truet
; Line 1813
	jmp	SHORT $Exit$71
$LN5@load_truet:
; Line 1817
	jmp	SHORT $Exit$71
$LN25@load_truet:
; Line 1820
	push	OFFSET $SG10216
	push	1820					; 0000071cH
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
$Exit$71:
; Line 1830
	movzx	ecx, BYTE PTR _opened_frame$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@load_truet
; Line 1831
	mov	esi, esp
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@load_truet:
; Line 1835
	movzx	edx, BYTE PTR _glyph_data_loaded$[ebp]
	test	edx, edx
	je	SHORT $LN1@load_truet
; Line 1838
	mov	esi, esp
	lea	eax, DWORD PTR _glyph_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@load_truet:
; Line 1842
	mov	eax, DWORD PTR _error$[ebp]
; Line 1843
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN70@load_truet
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN70@load_truet:
	DD	4
	DD	$LN69@load_truet
$LN69@load_truet:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN65@load_truet
	DD	-88					; ffffffa8H
	DD	40					; 00000028H
	DD	$LN66@load_truet
	DD	-104					; ffffff98H
	DD	8
	DD	$LN67@load_truet
	DD	-212					; ffffff2cH
	DD	32					; 00000020H
	DD	$LN68@load_truet
$LN68@load_truet:
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	0
$LN67@load_truet:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN66@load_truet:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN65@load_truet:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	0
_load_truetype_glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv93 = -48						; size = 4
_tmp$1 = -40						; size = 4
_max_ins$2 = -32					; size = 2
_n_ins$3 = -28						; size = 2
_stream$4 = -24						; size = 4
_i$ = -20						; size = 4
_outline$ = -16						; size = 4
_error$ = -8						; size = 4
_loader$ = 8						; size = 4
_start_point$ = 12					; size = 4
_start_contour$ = 16					; size = 4
_TT_Process_Composite_Glyph PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 1172
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1178
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _outline$[ebp], ecx
; Line 1183
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx+2]
	add	eax, 4
	je	SHORT $LN23@TT_Process
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movsx	eax, WORD PTR [edx+22]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movsx	ecx, WORD PTR [edx+58]
	add	eax, ecx
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [edx+2]
	lea	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+4]
	ja	SHORT $LN24@TT_Process
$LN23@TT_Process:
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN24@TT_Process
	mov	DWORD PTR tv93[ebp], 0
	jmp	SHORT $LN25@TT_Process
$LN24@TT_Process:
	push	0
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv93[ebp], eax
$LN25@TT_Process:
	mov	ecx, DWORD PTR tv93[ebp]
	mov	DWORD PTR _error$[ebp], ecx
; Line 1184
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@TT_Process
; Line 1185
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN21@TT_Process
$LN20@TT_Process:
; Line 1187
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [edx+72]
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [edx+2]
	mov	esi, DWORD PTR _outline$[ebp]
	mov	esi, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
; Line 1188
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [eax+80]
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [eax+2]
	mov	esi, DWORD PTR _outline$[ebp]
	mov	esi, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+eax*8+8], ecx
	mov	DWORD PTR [esi+eax*8+12], edx
; Line 1189
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	mov	eax, DWORD PTR [ecx+188]
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [ecx+2]
	mov	esi, DWORD PTR _outline$[ebp]
	mov	esi, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+ecx*8+16], edx
	mov	DWORD PTR [esi+ecx*8+20], eax
; Line 1190
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	ecx, DWORD PTR [edx+196]
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [edx+2]
	mov	esi, DWORD PTR _outline$[ebp]
	mov	esi, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+edx*8+24], eax
	mov	DWORD PTR [esi+edx*8+28], ecx
; Line 1192
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 0
; Line 1193
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx+1], 0
; Line 1194
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+eax+2], 0
; Line 1195
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx+3], 0
; Line 1200
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _stream$4[ebp], edx
; Line 1208
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	mov	edx, DWORD PTR _stream$4[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN18@TT_Process
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$4[ebp]
	push	ecx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	WORD PTR _n_ins$3[ebp], ax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@TT_Process
$LN18@TT_Process:
; Line 1209
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN21@TT_Process
$LN17@TT_Process:
; Line 1211
	mov	edx, 4
	imul	eax, edx, 28
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN16@TT_Process
	movzx	ecx, WORD PTR _n_ins$3[ebp]
	push	ecx
	push	OFFSET $SG10054
	call	_FT_Message
	add	esp, 8
$LN16@TT_Process:
	xor	edx, edx
	jne	SHORT $LN17@TT_Process
; Line 1214
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dx, WORD PTR [ecx+286]
	mov	WORD PTR _max_ins$2[ebp], dx
; Line 1215
	movzx	eax, WORD PTR _n_ins$3[ebp]
	movzx	ecx, WORD PTR _max_ins$2[ebp]
	cmp	eax, ecx
	jle	$LN13@TT_Process
; Line 1219
	movzx	edx, WORD PTR _n_ins$3[ebp]
	mov	eax, DWORD PTR _loader$[ebp]
	cmp	edx, DWORD PTR [eax+28]
	jle	SHORT $LN12@TT_Process
$LN11@TT_Process:
; Line 1223
	mov	ecx, 4
	imul	edx, ecx, 28
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN10@TT_Process
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	movzx	edx, WORD PTR _n_ins$3[ebp]
	push	edx
	push	OFFSET $SG10063
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN10@TT_Process:
	xor	eax, eax
	jne	SHORT $LN11@TT_Process
; Line 1224
	push	OFFSET $SG10064
	push	1224					; 000004c8H
	push	22					; 00000016H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 22					; 00000016H
	jmp	$LN21@TT_Process
$LN12@TT_Process:
; Line 1227
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR [edx+388]
	mov	DWORD PTR _tmp$1[ebp], eax
; Line 1232
	movzx	ecx, WORD PTR _n_ins$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+160]
	add	eax, 392				; 00000188H
	push	eax
	push	1
	lea	ecx, DWORD PTR _tmp$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_Update_Max
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 1234
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+160]
	movzx	ecx, WORD PTR _tmp$1[ebp]
	mov	DWORD PTR [eax+388], ecx
; Line 1235
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@TT_Process
; Line 1236
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN21@TT_Process
$LN7@TT_Process:
; Line 1238
	jmp	SHORT $LN6@TT_Process
$LN13@TT_Process:
	movzx	edx, WORD PTR _n_ins$3[ebp]
	test	edx, edx
	jne	SHORT $LN6@TT_Process
; Line 1239
	xor	eax, eax
	jmp	$LN21@TT_Process
$LN6@TT_Process:
; Line 1241
	movzx	eax, WORD PTR _n_ins$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR [edx+392]
	push	eax
	mov	ecx, DWORD PTR _stream$4[ebp]
	push	ecx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@TT_Process
; Line 1242
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN21@TT_Process
$LN4@TT_Process:
; Line 1244
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+392]
	mov	DWORD PTR [edx+136], eax
; Line 1245
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	eax, WORD PTR _n_ins$3[ebp]
	mov	DWORD PTR [edx+140], eax
; Line 1251
	mov	ecx, DWORD PTR _start_contour$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start_point$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 124				; 0000007cH
	push	edx
	call	_tt_prepare_zone
	add	esp, 16					; 00000010H
; Line 1255
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@TT_Process
$LN2@TT_Process:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@TT_Process:
	mov	ecx, DWORD PTR _loader$[ebp]
	movzx	edx, WORD PTR [ecx+132]
	cmp	DWORD PTR _i$[ebp], edx
	jae	SHORT $LN1@TT_Process
; Line 1256
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	and	eax, -25				; ffffffe7H
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+ecx], al
	jmp	SHORT $LN2@TT_Process
$LN1@TT_Process:
; Line 1258
	mov	edx, DWORD PTR _loader$[ebp]
	movzx	eax, WORD PTR [edx+132]
	add	eax, 4
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	WORD PTR [ecx+132], ax
; Line 1260
	push	1
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_TT_Hint_Glyph
	add	esp, 8
$LN21@TT_Process:
; Line 1261
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@TT_Process
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@TT_Process:
	DD	2
	DD	$LN28@TT_Process
$LN28@TT_Process:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN26@TT_Process
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN27@TT_Process
$LN27@TT_Process:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN26@TT_Process:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_TT_Process_Composite_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_y_scale$1 = -60					; size = 4
_x_scale$2 = -56					; size = 4
_mac_yscale$3 = -52					; size = 4
_mac_xscale$4 = -48					; size = 4
_p2$5 = -44						; size = 4
_p1$6 = -40						; size = 4
_l$7 = -36						; size = 4
_k$8 = -32						; size = 4
_i$9 = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_have_scale$ = -13					; size = 1
_num_points$ = -12					; size = 4
_base_vec$ = -8						; size = 4
_gloader$ = -4						; size = 4
_loader$ = 8						; size = 4
_subglyph$ = 12						; size = 4
_start_point$ = 16					; size = 4
_num_base_points$ = 20					; size = 4
_TT_Process_Composite_Component PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 1021
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1022
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _gloader$[ebp], ecx
; Line 1023
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _base_vec$[ebp], eax
; Line 1024
	mov	ecx, DWORD PTR _gloader$[ebp]
	movsx	edx, WORD PTR [ecx+22]
	mov	DWORD PTR _num_points$[ebp], edx
; Line 1031
	mov	eax, DWORD PTR _subglyph$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	and	ecx, 200				; 000000c8H
	mov	BYTE PTR _have_scale$[ebp], cl
; Line 1034
	movzx	edx, BYTE PTR _have_scale$[ebp]
	test	edx, edx
	je	SHORT $LN14@TT_Process
; Line 1039
	mov	eax, DWORD PTR _num_base_points$[ebp]
	mov	DWORD PTR _i$9[ebp], eax
	jmp	SHORT $LN13@TT_Process
$LN12@TT_Process:
	mov	ecx, DWORD PTR _i$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$9[ebp], ecx
$LN13@TT_Process:
	mov	edx, DWORD PTR _i$9[ebp]
	cmp	edx, DWORD PTR _num_points$[ebp]
	jae	SHORT $LN14@TT_Process
; Line 1040
	mov	eax, DWORD PTR _subglyph$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR _base_vec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	call	_FT_Vector_Transform
	add	esp, 8
	jmp	SHORT $LN12@TT_Process
$LN14@TT_Process:
; Line 1044
	mov	ecx, DWORD PTR _subglyph$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 2
	jne	$LN10@TT_Process
; Line 1046
	mov	eax, DWORD PTR _subglyph$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _k$8[ebp], ecx
; Line 1047
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _l$7[ebp], eax
; Line 1056
	mov	ecx, DWORD PTR _k$8[ebp]
	add	ecx, DWORD PTR _start_point$[ebp]
	mov	DWORD PTR _k$8[ebp], ecx
; Line 1057
	mov	edx, DWORD PTR _l$7[ebp]
	add	edx, DWORD PTR _num_base_points$[ebp]
	mov	DWORD PTR _l$7[ebp], edx
; Line 1059
	mov	eax, DWORD PTR _k$8[ebp]
	cmp	eax, DWORD PTR _num_base_points$[ebp]
	jae	SHORT $LN8@TT_Process
	mov	ecx, DWORD PTR _l$7[ebp]
	cmp	ecx, DWORD PTR _num_points$[ebp]
	jb	SHORT $LN9@TT_Process
$LN8@TT_Process:
; Line 1060
	push	OFFSET $SG10006
	push	1060					; 00000424H
	push	21					; 00000015H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 21					; 00000015H
	jmp	$LN15@TT_Process
$LN9@TT_Process:
; Line 1062
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _k$8[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _p1$6[ebp], edx
; Line 1063
	mov	eax, DWORD PTR _gloader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _l$7[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _p2$5[ebp], eax
; Line 1065
	mov	ecx, DWORD PTR _p1$6[ebp]
	mov	edx, DWORD PTR _p2$5[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR _x$[ebp], eax
; Line 1066
	mov	ecx, DWORD PTR _p1$6[ebp]
	mov	edx, DWORD PTR _p2$5[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _y$[ebp], eax
; Line 1068
	jmp	$LN7@TT_Process
$LN10@TT_Process:
; Line 1070
	mov	ecx, DWORD PTR _subglyph$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _x$[ebp], edx
; Line 1071
	mov	eax, DWORD PTR _subglyph$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _y$[ebp], ecx
; Line 1073
	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN6@TT_Process
	cmp	DWORD PTR _y$[ebp], 0
	jne	SHORT $LN6@TT_Process
; Line 1074
	xor	eax, eax
	jmp	$LN15@TT_Process
$LN6@TT_Process:
; Line 1084
	movzx	edx, BYTE PTR _have_scale$[ebp]
	test	edx, edx
	je	SHORT $LN5@TT_Process
	mov	eax, DWORD PTR _subglyph$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	and	ecx, 2048				; 00000800H
	je	SHORT $LN5@TT_Process
; Line 1120
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _subglyph$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_FT_Hypot
	add	esp, 8
	mov	DWORD PTR _mac_xscale$4[ebp], eax
; Line 1122
	mov	eax, DWORD PTR _subglyph$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_FT_Hypot
	add	esp, 8
	mov	DWORD PTR _mac_yscale$3[ebp], eax
; Line 1125
	mov	ecx, DWORD PTR _mac_xscale$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
; Line 1126
	mov	eax, DWORD PTR _mac_yscale$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _y$[ebp], eax
$LN5@TT_Process:
; Line 1132
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 1
	jne	SHORT $LN7@TT_Process
; Line 1134
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _x_scale$2[ebp], eax
; Line 1135
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _y_scale$1[ebp], eax
; Line 1138
	mov	ecx, DWORD PTR _x_scale$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
; Line 1139
	mov	eax, DWORD PTR _y_scale$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _y$[ebp], eax
; Line 1141
	mov	edx, DWORD PTR _subglyph$[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 4
	je	SHORT $LN7@TT_Process
; Line 1143
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _x$[ebp], ecx
; Line 1144
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _y$[ebp], edx
$LN7@TT_Process:
; Line 1149
	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN1@TT_Process
	cmp	DWORD PTR _y$[ebp], 0
	je	SHORT $LN2@TT_Process
$LN1@TT_Process:
; Line 1152
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _num_base_points$[ebp]
	mov	eax, DWORD PTR _base_vec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR _num_points$[ebp]
	sub	edx, DWORD PTR _num_base_points$[ebp]
	push	edx
	call	_translate_array
	add	esp, 16					; 00000010H
$LN2@TT_Process:
; Line 1154
	xor	eax, eax
$LN15@TT_Process:
; Line 1155
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TT_Process_Composite_Component ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_do_scale$1 = -53					; size = 1
_y_scale$2 = -52					; size = 4
_x_scale$3 = -48					; size = 4
_limit$4 = -44						; size = 4
_vec$5 = -40						; size = 4
_i$6 = -36						; size = 4
_memory$7 = -32						; size = 4
_deltas$8 = -24						; size = 4
_n_points$ = -16					; size = 4
_outline$ = -12						; size = 4
_error$ = -8						; size = 4
_gloader$ = -4						; size = 4
_loader$ = 8						; size = 4
_TT_Process_Simple_Glyph PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 857
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 858
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _gloader$[ebp], ecx
; Line 859
	mov	DWORD PTR _error$[ebp], 0
; Line 864
	mov	edx, DWORD PTR _gloader$[ebp]
	add	edx, 56					; 00000038H
	mov	DWORD PTR _outline$[ebp], edx
; Line 865
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _n_points$[ebp], ecx
; Line 869
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [edx+72]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	esi, DWORD PTR _n_points$[ebp]
	mov	DWORD PTR [edx+esi*8], eax
	mov	DWORD PTR [edx+esi*8+4], ecx
; Line 870
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [eax+80]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esi, DWORD PTR _n_points$[ebp]
	mov	DWORD PTR [eax+esi*8+8], ecx
	mov	DWORD PTR [eax+esi*8+12], edx
; Line 871
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	mov	eax, DWORD PTR [ecx+188]
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	esi, DWORD PTR _n_points$[ebp]
	mov	DWORD PTR [ecx+esi*8+16], edx
	mov	DWORD PTR [ecx+esi*8+20], eax
; Line 872
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	ecx, DWORD PTR [edx+196]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	esi, DWORD PTR _n_points$[ebp]
	mov	DWORD PTR [edx+esi*8+24], eax
	mov	DWORD PTR [edx+esi*8+28], ecx
; Line 874
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _n_points$[ebp]
	mov	BYTE PTR [ecx+edx], 0
; Line 875
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _n_points$[ebp]
	mov	BYTE PTR [ecx+edx+1], 0
; Line 876
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _n_points$[ebp]
	mov	BYTE PTR [ecx+edx+2], 0
; Line 877
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _n_points$[ebp]
	mov	BYTE PTR [ecx+edx+3], 0
; Line 879
	mov	eax, DWORD PTR _n_points$[ebp]
	add	eax, 4
	mov	DWORD PTR _n_points$[ebp], eax
; Line 883
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+672]
	test	eax, eax
	je	$LN15@TT_Process
; Line 887
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$7[ebp], eax
; Line 894
	mov	ecx, DWORD PTR _n_points$[ebp]
	push	ecx
	lea	edx, DWORD PTR _deltas$8[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_TT_Vary_Get_Glyph_Deltas
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 895
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@TT_Process
; Line 896
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@TT_Process
$LN14@TT_Process:
; Line 898
	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN13@TT_Process
$LN12@TT_Process:
	mov	ecx, DWORD PTR _i$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$6[ebp], ecx
$LN13@TT_Process:
	mov	edx, DWORD PTR _i$6[ebp]
	cmp	edx, DWORD PTR _n_points$[ebp]
	jge	SHORT $LN10@TT_Process
; Line 900
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$6[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR _i$6[ebp]
	mov	edx, DWORD PTR _deltas$8[ebp]
	add	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _i$6[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
; Line 901
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$6[ebp]
	mov	edx, DWORD PTR [eax+ecx*8+4]
	mov	eax, DWORD PTR _i$6[ebp]
	mov	ecx, DWORD PTR _deltas$8[ebp]
	add	edx, DWORD PTR [ecx+eax*8+4]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$6[ebp]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 902
	jmp	SHORT $LN12@TT_Process
$LN10@TT_Process:
; Line 904
	mov	ecx, DWORD PTR _deltas$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$7[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _deltas$8[ebp], 0
	xor	eax, eax
	jne	SHORT $LN10@TT_Process
$LN15@TT_Process:
; Line 909
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 2
	jne	SHORT $LN7@TT_Process
; Line 911
	push	0
	push	0
	mov	eax, DWORD PTR _gloader$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 124				; 0000007cH
	push	ecx
	call	_tt_prepare_zone
	add	esp, 16					; 00000010H
; Line 914
	mov	edx, DWORD PTR _loader$[ebp]
	movzx	eax, WORD PTR [edx+132]
	lea	ecx, DWORD PTR [eax*8+32]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+140]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN7@TT_Process:
; Line 928
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vec$5[ebp], ecx
; Line 929
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _n_points$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _limit$4[ebp], edx
; Line 931
	mov	DWORD PTR _x_scale$3[ebp], 0
; Line 932
	mov	DWORD PTR _y_scale$2[ebp], 0
; Line 934
	mov	BYTE PTR _do_scale$1[ebp], 0
; Line 972
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	jne	SHORT $LN6@TT_Process
; Line 974
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _x_scale$3[ebp], ecx
; Line 975
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _y_scale$2[ebp], ecx
; Line 977
	mov	BYTE PTR _do_scale$1[ebp], 1
$LN6@TT_Process:
; Line 981
	movzx	edx, BYTE PTR _do_scale$1[ebp]
	test	edx, edx
	je	$LN5@TT_Process
; Line 983
	jmp	SHORT $LN4@TT_Process
$LN3@TT_Process:
	mov	eax, DWORD PTR _vec$5[ebp]
	add	eax, 8
	mov	DWORD PTR _vec$5[ebp], eax
$LN4@TT_Process:
	mov	ecx, DWORD PTR _vec$5[ebp]
	cmp	ecx, DWORD PTR _limit$4[ebp]
	jae	SHORT $LN2@TT_Process
; Line 985
	mov	edx, DWORD PTR _x_scale$3[ebp]
	push	edx
	mov	eax, DWORD PTR _vec$5[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _vec$5[ebp]
	mov	DWORD PTR [edx], eax
; Line 986
	mov	eax, DWORD PTR _y_scale$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _vec$5[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _vec$5[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 987
	jmp	SHORT $LN3@TT_Process
$LN2@TT_Process:
; Line 989
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _n_points$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8-32]
	mov	eax, DWORD PTR [eax+ecx*8-28]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+68], edx
	mov	DWORD PTR [ecx+72], eax
; Line 990
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _n_points$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8-24]
	mov	eax, DWORD PTR [eax+ecx*8-20]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+76], edx
	mov	DWORD PTR [ecx+80], eax
; Line 991
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _n_points$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8-16]
	mov	eax, DWORD PTR [eax+ecx*8-12]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+184], edx
	mov	DWORD PTR [ecx+188], eax
; Line 992
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _n_points$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8-8]
	mov	eax, DWORD PTR [eax+ecx*8-4]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+192], edx
	mov	DWORD PTR [ecx+196], eax
$LN5@TT_Process:
; Line 996
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 2
	jne	SHORT $LN1@TT_Process
; Line 998
	mov	ecx, DWORD PTR _loader$[ebp]
	movzx	edx, WORD PTR [ecx+132]
	add	edx, 4
	mov	eax, DWORD PTR _loader$[ebp]
	mov	WORD PTR [eax+132], dx
; Line 1000
	push	0
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_TT_Hint_Glyph
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN1@TT_Process:
; Line 1003
	mov	eax, DWORD PTR _error$[ebp]
$LN16@TT_Process:
; Line 1004
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@TT_Process
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@TT_Process:
	DD	1
	DD	$LN19@TT_Process
$LN19@TT_Process:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN18@TT_Process
$LN18@TT_Process:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	0
_TT_Process_Simple_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv238 = -49						; size = 1
_current_outline$1 = -44				; size = 20
_gloader$2 = -20					; size = 4
_error$3 = -16						; size = 4
_debug$4 = -9						; size = 1
_n_ins$ = -8						; size = 4
_zone$ = -4						; size = 4
_loader$ = 8						; size = 4
_is_composite$ = 12					; size = 1
_TT_Hint_Glyph PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 734
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 740
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 124				; 0000007cH
	mov	DWORD PTR _zone$[ebp], eax
; Line 750
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+140], 65535		; 0000ffffH
	jle	SHORT $LN14@TT_Hint_Gl
$LN13@TT_Hint_Gl:
; Line 752
	mov	eax, 4
	imul	ecx, eax, 28
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN12@TT_Hint_Gl
	push	OFFSET $SG9916
	call	_FT_Message
	add	esp, 4
$LN12@TT_Hint_Gl:
	xor	edx, edx
	jne	SHORT $LN13@TT_Hint_Gl
$LN9@TT_Hint_Gl:
; Line 754
	mov	eax, 4
	imul	ecx, eax, 28
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN8@TT_Hint_Gl
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	push	OFFSET $SG9921
	call	_FT_Message
	add	esp, 8
$LN8@TT_Hint_Gl:
	xor	edx, edx
	jne	SHORT $LN9@TT_Hint_Gl
$LN14@TT_Hint_Gl:
; Line 756
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR _n_ins$[ebp], edx
; Line 759
	cmp	DWORD PTR _n_ins$[ebp], 0
	jbe	SHORT $LN5@TT_Hint_Gl
; Line 760
	mov	eax, DWORD PTR _zone$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN5@TT_Hint_Gl:
; Line 763
	mov	eax, DWORD PTR _loader$[ebp]
	mov	esi, DWORD PTR [eax+4]
	add	esi, 172				; 000000acH
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edi, DWORD PTR [ecx+160]
	add	edi, 284				; 0000011cH
	mov	ecx, 17					; 00000011H
	rep movsd
; Line 767
	movzx	edx, BYTE PTR _is_composite$[ebp]
	test	edx, edx
	je	SHORT $LN4@TT_Hint_Gl
; Line 769
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	DWORD PTR [ecx+220], 65536		; 00010000H
; Line 770
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	DWORD PTR [eax+224], 65536		; 00010000H
; Line 772
	mov	ecx, DWORD PTR _zone$[ebp]
	movzx	edx, WORD PTR [ecx+8]
	shl	edx, 3
	push	edx
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 774
	jmp	SHORT $LN3@TT_Hint_Gl
$LN4@TT_Hint_Gl:
; Line 777
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+220], edx
; Line 779
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+224], ecx
$LN3@TT_Hint_Gl:
; Line 785
	mov	edx, DWORD PTR _zone$[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+eax*8-32]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _zone$[ebp]
	movzx	edx, WORD PTR [ecx+8]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [ecx+edx*8-32], eax
; Line 787
	mov	edx, DWORD PTR _zone$[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+eax*8-24]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _zone$[ebp]
	movzx	edx, WORD PTR [ecx+8]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [ecx+edx*8-24], eax
; Line 789
	mov	edx, DWORD PTR _zone$[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+eax*8-12]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _zone$[ebp]
	movzx	edx, WORD PTR [ecx+8]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [ecx+edx*8-12], eax
; Line 791
	mov	edx, DWORD PTR _zone$[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+eax*8-4]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _zone$[ebp]
	movzx	edx, WORD PTR [ecx+8]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [ecx+edx*8-4], eax
; Line 795
	cmp	DWORD PTR _n_ins$[ebp], 0
	jbe	$LN2@TT_Hint_Gl
; Line 800
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _gloader$2[ebp], eax
; Line 801
	mov	ecx, DWORD PTR _gloader$2[ebp]
	add	ecx, 56					; 00000038H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _current_outline$1[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _current_outline$1[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _current_outline$1[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _current_outline$1[ebp+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR _current_outline$1[ebp+16], ecx
; Line 805
	mov	edx, DWORD PTR _n_ins$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR [ecx+392]
	push	edx
	push	3
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call	_TT_Set_CodeRange
	add	esp, 16					; 00000010H
; Line 807
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	cl, BYTE PTR _is_composite$[ebp]
	mov	BYTE PTR [eax+560], cl
; Line 808
	mov	edx, DWORD PTR _loader$[ebp]
	mov	edi, DWORD PTR [edx+160]
	add	edi, 144				; 00000090H
	mov	ecx, 9
	mov	esi, DWORD PTR _zone$[ebp]
	rep movsd
; Line 811
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	jne	SHORT $LN17@TT_Hint_Gl
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movzx	ecx, BYTE PTR [eax+292]
	test	ecx, ecx
	je	SHORT $LN17@TT_Hint_Gl
	mov	BYTE PTR tv238[ebp], 1
	jmp	SHORT $LN18@TT_Hint_Gl
$LN17@TT_Hint_Gl:
	mov	BYTE PTR tv238[ebp], 0
$LN18@TT_Hint_Gl:
	mov	dl, BYTE PTR tv238[ebp]
	mov	BYTE PTR _debug$4[ebp], dl
; Line 813
	movzx	eax, BYTE PTR _debug$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	push	edx
	call	_TT_Run_Context
	add	esp, 8
	mov	DWORD PTR _error$3[ebp], eax
; Line 814
	cmp	DWORD PTR _error$3[ebp], 0
	je	SHORT $LN1@TT_Hint_Gl
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	movzx	edx, BYTE PTR [ecx+561]
	test	edx, edx
	je	SHORT $LN1@TT_Hint_Gl
; Line 815
	mov	eax, DWORD PTR _error$3[ebp]
	jmp	$LN15@TT_Hint_Gl
$LN1@TT_Hint_Gl:
; Line 819
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	edx, DWORD PTR [eax+340]
	shl	edx, 5
	or	edx, 4
	mov	eax, DWORD PTR _current_outline$1[ebp+8]
	movsx	ecx, BYTE PTR [eax+ecx]
	or	ecx, edx
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _current_outline$1[ebp+8]
	mov	BYTE PTR [edx+eax], cl
$LN2@TT_Hint_Gl:
; Line 825
	mov	eax, DWORD PTR _zone$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+ecx*8-32]
	mov	eax, DWORD PTR [eax+ecx*8-28]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+68], edx
	mov	DWORD PTR [ecx+72], eax
; Line 826
	mov	edx, DWORD PTR _zone$[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+eax*8-24]
	mov	edx, DWORD PTR [edx+eax*8-20]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+76], ecx
	mov	DWORD PTR [eax+80], edx
; Line 827
	mov	ecx, DWORD PTR _zone$[ebp]
	movzx	edx, WORD PTR [ecx+8]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+edx*8-16]
	mov	ecx, DWORD PTR [ecx+edx*8-12]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+184], eax
	mov	DWORD PTR [edx+188], ecx
; Line 828
	mov	eax, DWORD PTR _zone$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+ecx*8-8]
	mov	eax, DWORD PTR [eax+ecx*8-4]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+192], edx
	mov	DWORD PTR [ecx+196], eax
; Line 841
	xor	eax, eax
$LN15@TT_Hint_Gl:
; Line 842
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@TT_Hint_Gl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@TT_Hint_Gl:
	DD	1
	DD	$LN20@TT_Hint_Gl
$LN20@TT_Hint_Gl:
	DD	-44					; ffffffd4H
	DD	20					; 00000014H
	DD	$LN19@TT_Hint_Gl
$LN19@TT_Hint_Gl:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
_TT_Hint_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_zone$ = 8						; size = 4
_load$ = 12						; size = 4
_start_point$ = 16					; size = 4
_start_contour$ = 20					; size = 4
_tt_prepare_zone PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 709
	push	ebp
	mov	ebp, esp
; Line 710
	mov	eax, DWORD PTR _load$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	ecx, DWORD PTR _start_point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	WORD PTR [edx+8], cx
; Line 712
	mov	eax, DWORD PTR _load$[ebp]
	movsx	ecx, WORD PTR [eax]
	sub	ecx, DWORD PTR _start_contour$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	WORD PTR [edx+10], cx
; Line 713
	mov	eax, DWORD PTR _load$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _start_point$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 714
	mov	edx, DWORD PTR _load$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _start_point$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 715
	mov	ecx, DWORD PTR _load$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _start_point$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 716
	mov	eax, DWORD PTR _load$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _start_point$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 717
	mov	eax, DWORD PTR _load$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _start_contour$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 718
	mov	edx, DWORD PTR _zone$[ebp]
	mov	ax, WORD PTR _start_point$[ebp]
	mov	WORD PTR [edx+32], ax
; Line 719
	pop	ebp
	ret	0
_tt_prepare_zone ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$1 = -48						; size = 4
_count$2 = -44						; size = 4
_yx$3 = -40						; size = 4
_yy$4 = -36						; size = 4
_xy$5 = -32						; size = 4
_xx$6 = -28						; size = 4
_num_subglyphs$ = -24					; size = 4
_subglyph$ = -20					; size = 4
_gloader$ = -16						; size = 4
_limit$ = -12						; size = 4
_p$ = -8						; size = 4
_error$ = -4						; size = 4
_loader$ = 8						; size = 4
_TT_Load_Composite_Glyph PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 574
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 576
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	DWORD PTR _p$[ebp], ecx
; Line 577
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+204]
	mov	DWORD PTR _limit$[ebp], eax
; Line 578
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _gloader$[ebp], edx
; Line 583
	mov	DWORD PTR _num_subglyphs$[ebp], 0
$LN19@TT_Load_Co:
; Line 592
	mov	eax, DWORD PTR _num_subglyphs$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _gloader$[ebp]
	push	ecx
	call	_FT_GlyphLoader_CheckSubGlyphs
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 593
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@TT_Load_Co
; Line 594
	jmp	$Fail$22
$LN16@TT_Load_Co:
; Line 597
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN15@TT_Load_Co
; Line 598
	jmp	$Invalid_Composite$23
$LN15@TT_Load_Co:
; Line 600
	mov	eax, DWORD PTR _num_subglyphs$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _gloader$[ebp]
	add	eax, DWORD PTR [ecx+88]
	mov	DWORD PTR _subglyph$[ebp], eax
; Line 602
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 604
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	mov	ecx, DWORD PTR _subglyph$[ebp]
	mov	WORD PTR [ecx+4], dx
; Line 605
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	eax, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [eax], edx
; Line 608
	mov	DWORD PTR _count$2[ebp], 2
; Line 609
	mov	ecx, DWORD PTR _subglyph$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 1
	je	SHORT $LN14@TT_Load_Co
; Line 610
	mov	eax, DWORD PTR _count$2[ebp]
	add	eax, 2
	mov	DWORD PTR _count$2[ebp], eax
$LN14@TT_Load_Co:
; Line 611
	mov	ecx, DWORD PTR _subglyph$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 8
	je	SHORT $LN13@TT_Load_Co
; Line 612
	mov	eax, DWORD PTR _count$2[ebp]
	add	eax, 2
	mov	DWORD PTR _count$2[ebp], eax
	jmp	SHORT $LN12@TT_Load_Co
$LN13@TT_Load_Co:
; Line 613
	mov	ecx, DWORD PTR _subglyph$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 64					; 00000040H
	je	SHORT $LN11@TT_Load_Co
; Line 614
	mov	eax, DWORD PTR _count$2[ebp]
	add	eax, 4
	mov	DWORD PTR _count$2[ebp], eax
	jmp	SHORT $LN12@TT_Load_Co
$LN11@TT_Load_Co:
; Line 615
	mov	ecx, DWORD PTR _subglyph$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 128				; 00000080H
	je	SHORT $LN12@TT_Load_Co
; Line 616
	mov	eax, DWORD PTR _count$2[ebp]
	add	eax, 8
	mov	DWORD PTR _count$2[ebp], eax
$LN12@TT_Load_Co:
; Line 618
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _count$2[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN8@TT_Load_Co
; Line 619
	jmp	$Invalid_Composite$23
$LN8@TT_Load_Co:
; Line 622
	mov	edx, DWORD PTR _subglyph$[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 1
	je	SHORT $LN7@TT_Load_Co
; Line 624
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 625
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	ecx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 627
	jmp	SHORT $LN6@TT_Load_Co
$LN7@TT_Load_Co:
; Line 629
	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 630
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN6@TT_Load_Co:
; Line 634
	mov	DWORD PTR _yy$4[ebp], 65536		; 00010000H
	mov	ecx, DWORD PTR _yy$4[ebp]
	mov	DWORD PTR _xx$6[ebp], ecx
; Line 635
	mov	DWORD PTR _yx$3[ebp], 0
	mov	edx, DWORD PTR _yx$3[ebp]
	mov	DWORD PTR _xy$5[ebp], edx
; Line 637
	mov	eax, DWORD PTR _subglyph$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	and	ecx, 8
	je	SHORT $LN5@TT_Load_Co
; Line 639
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	shl	edx, 2
	mov	DWORD PTR _xx$6[ebp], edx
; Line 640
	mov	eax, DWORD PTR _xx$6[ebp]
	mov	DWORD PTR _yy$4[ebp], eax
	jmp	$LN4@TT_Load_Co
$LN5@TT_Load_Co:
; Line 642
	mov	ecx, DWORD PTR _subglyph$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	and	edx, 64					; 00000040H
	je	SHORT $LN3@TT_Load_Co
; Line 644
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	shl	eax, 2
	mov	DWORD PTR _xx$6[ebp], eax
; Line 645
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	shl	ecx, 2
	mov	DWORD PTR _yy$4[ebp], ecx
	jmp	$LN4@TT_Load_Co
$LN3@TT_Load_Co:
; Line 647
	mov	edx, DWORD PTR _subglyph$[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 128				; 00000080H
	je	$LN4@TT_Load_Co
; Line 649
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	shl	ecx, 2
	mov	DWORD PTR _xx$6[ebp], ecx
; Line 650
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	shl	edx, 2
	mov	DWORD PTR _yx$3[ebp], edx
; Line 651
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	shl	eax, 2
	mov	DWORD PTR _xy$5[ebp], eax
; Line 652
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	shl	ecx, 2
	mov	DWORD PTR _yy$4[ebp], ecx
$LN4@TT_Load_Co:
; Line 655
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	eax, DWORD PTR _xx$6[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 656
	mov	ecx, DWORD PTR _subglyph$[ebp]
	mov	edx, DWORD PTR _xy$5[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 657
	mov	eax, DWORD PTR _subglyph$[ebp]
	mov	ecx, DWORD PTR _yx$3[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 658
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	eax, DWORD PTR _yy$4[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 660
	mov	ecx, DWORD PTR _num_subglyphs$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_subglyphs$[ebp], ecx
; Line 662
	mov	edx, DWORD PTR _subglyph$[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 32					; 00000020H
	jne	$LN19@TT_Load_Co
; Line 664
	mov	ecx, DWORD PTR _gloader$[ebp]
	mov	edx, DWORD PTR _num_subglyphs$[ebp]
	mov	DWORD PTR [ecx+84], edx
; Line 669
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _stream$1[ebp], ecx
; Line 677
	mov	edx, DWORD PTR _stream$1[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	add	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _limit$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+168], eax
; Line 682
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+200], eax
$Fail$22:
; Line 685
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN20@TT_Load_Co
$Invalid_Composite$23:
; Line 688
	push	OFFSET $SG9884
	push	688					; 000002b0H
	push	21					; 00000015H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 21					; 00000015H
	mov	DWORD PTR _error$[ebp], eax
; Line 689
	jmp	SHORT $Fail$22
$LN20@TT_Load_Co:
; Line 690
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TT_Load_Composite_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv189 = -108						; size = 4
tv83 = -104						; size = 4
_f$1 = -97						; size = 1
_y$2 = -96						; size = 4
_f$3 = -89						; size = 1
_y$4 = -88						; size = 4
_xy_size$ = -84						; size = 4
_prev_cont$ = -80					; size = 2
_cont_limit$ = -76					; size = 4
_cont$ = -72						; size = 4
_x$ = -68						; size = 4
_vec_limit$ = -64					; size = 4
_vec$ = -60						; size = 4
_count$ = -54						; size = 1
_c$ = -53						; size = 1
_flag_limit$ = -52					; size = 4
_flag$ = -48						; size = 4
_tmp$ = -40						; size = 4
_n_points$ = -32					; size = 4
_n_ins$ = -28						; size = 2
_outline$ = -24						; size = 4
_n_contours$ = -20					; size = 4
_gloader$ = -16						; size = 4
_limit$ = -12						; size = 4
_p$ = -8						; size = 4
_error$ = -4						; size = 4
_load$ = 8						; size = 4
_TT_Load_Simple_Glyph PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 344
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 346
	mov	eax, DWORD PTR _load$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	DWORD PTR _p$[ebp], ecx
; Line 347
	mov	edx, DWORD PTR _load$[ebp]
	mov	eax, DWORD PTR [edx+204]
	mov	DWORD PTR _limit$[ebp], eax
; Line 348
	mov	ecx, DWORD PTR _load$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _gloader$[ebp], edx
; Line 349
	mov	eax, DWORD PTR _load$[ebp]
	movsx	ecx, WORD PTR [eax+32]
	mov	DWORD PTR _n_contours$[ebp], ecx
; Line 360
	mov	DWORD PTR _xy_size$[ebp], 0
; Line 364
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN60@TT_Load_Si
	cmp	DWORD PTR _n_contours$[ebp], 0
	je	SHORT $LN59@TT_Load_Si
	mov	eax, DWORD PTR _gloader$[ebp]
	movsx	ecx, WORD PTR [eax+20]
	mov	edx, DWORD PTR _gloader$[ebp]
	movsx	eax, WORD PTR [edx+56]
	add	ecx, DWORD PTR _n_contours$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _gloader$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	ja	SHORT $LN60@TT_Load_Si
$LN59@TT_Load_Si:
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN61@TT_Load_Si
$LN60@TT_Load_Si:
	mov	edx, DWORD PTR _n_contours$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _gloader$[ebp]
	push	eax
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv83[ebp], eax
$LN61@TT_Load_Si:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _error$[ebp], ecx
; Line 365
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN56@TT_Load_Si
; Line 366
	jmp	$Fail$68
$LN56@TT_Load_Si:
; Line 369
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _cont$[ebp], eax
; Line 370
	mov	ecx, DWORD PTR _n_contours$[ebp]
	mov	edx, DWORD PTR _cont$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _cont_limit$[ebp], eax
; Line 373
	cmp	DWORD PTR _n_contours$[ebp], 4095	; 00000fffH
	jge	SHORT $LN54@TT_Load_Si
	mov	ecx, DWORD PTR _n_contours$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+2]
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN55@TT_Load_Si
$LN54@TT_Load_Si:
; Line 374
	jmp	$Invalid_Outline$69
$LN55@TT_Load_Si:
; Line 376
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	mov	WORD PTR _prev_cont$[ebp], dx
; Line 378
	cmp	DWORD PTR _n_contours$[ebp], 0
	jle	SHORT $LN53@TT_Load_Si
; Line 379
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cont$[ebp]
	mov	cx, WORD PTR _prev_cont$[ebp]
	mov	WORD PTR [eax+edx], cx
$LN53@TT_Load_Si:
; Line 381
	movsx	edx, WORD PTR _prev_cont$[ebp]
	test	edx, edx
	jge	SHORT $LN52@TT_Load_Si
; Line 382
	jmp	$Invalid_Outline$69
$LN52@TT_Load_Si:
; Line 384
	mov	eax, DWORD PTR _cont$[ebp]
	add	eax, 2
	mov	DWORD PTR _cont$[ebp], eax
	jmp	SHORT $LN51@TT_Load_Si
$LN50@TT_Load_Si:
	mov	ecx, DWORD PTR _cont$[ebp]
	add	ecx, 2
	mov	DWORD PTR _cont$[ebp], ecx
$LN51@TT_Load_Si:
	mov	edx, DWORD PTR _cont$[ebp]
	cmp	edx, DWORD PTR _cont_limit$[ebp]
	jae	SHORT $LN49@TT_Load_Si
; Line 386
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	mov	eax, 2
	imul	edx, eax, 0
	mov	eax, DWORD PTR _cont$[ebp]
	mov	WORD PTR [eax+edx], cx
; Line 387
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cont$[ebp]
	movsx	ecx, WORD PTR [eax+edx]
	movsx	edx, WORD PTR _prev_cont$[ebp]
	cmp	ecx, edx
	jg	SHORT $LN48@TT_Load_Si
; Line 390
	jmp	$Invalid_Outline$69
$LN48@TT_Load_Si:
; Line 392
	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cont$[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _prev_cont$[ebp], ax
; Line 393
	jmp	SHORT $LN50@TT_Load_Si
$LN49@TT_Load_Si:
; Line 395
	mov	DWORD PTR _n_points$[ebp], 0
; Line 396
	cmp	DWORD PTR _n_contours$[ebp], 0
	jle	SHORT $LN47@TT_Load_Si
; Line 398
	mov	ecx, 2
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _cont$[ebp]
	movsx	ecx, WORD PTR [eax+edx]
	add	ecx, 1
	mov	DWORD PTR _n_points$[ebp], ecx
; Line 399
	jns	SHORT $LN47@TT_Load_Si
; Line 400
	jmp	$Invalid_Outline$69
$LN47@TT_Load_Si:
; Line 404
	mov	edx, DWORD PTR _n_points$[ebp]
	add	edx, 4
	je	SHORT $LN62@TT_Load_Si
	mov	eax, DWORD PTR _gloader$[ebp]
	movsx	ecx, WORD PTR [eax+22]
	mov	edx, DWORD PTR _gloader$[ebp]
	movsx	eax, WORD PTR [edx+58]
	add	ecx, eax
	mov	edx, DWORD PTR _n_points$[ebp]
	lea	eax, DWORD PTR [ecx+edx+4]
	mov	ecx, DWORD PTR _gloader$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	ja	SHORT $LN63@TT_Load_Si
$LN62@TT_Load_Si:
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN63@TT_Load_Si
	mov	DWORD PTR tv189[ebp], 0
	jmp	SHORT $LN64@TT_Load_Si
$LN63@TT_Load_Si:
	push	0
	mov	eax, DWORD PTR _n_points$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _gloader$[ebp]
	push	ecx
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv189[ebp], eax
$LN64@TT_Load_Si:
	mov	edx, DWORD PTR tv189[ebp]
	mov	DWORD PTR _error$[ebp], edx
; Line 405
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN45@TT_Load_Si
; Line 406
	jmp	$Fail$68
$LN45@TT_Load_Si:
; Line 409
	mov	eax, DWORD PTR _load$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+140], 0
; Line 410
	mov	edx, DWORD PTR _load$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+136], 0
; Line 412
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN44@TT_Load_Si
; Line 413
	jmp	$Invalid_Outline$69
$LN44@TT_Load_Si:
; Line 415
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	mov	WORD PTR _n_ins$[ebp], ax
$LN43@TT_Load_Si:
; Line 417
	mov	edx, 4
	imul	eax, edx, 28
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN42@TT_Load_Si
	movzx	ecx, WORD PTR _n_ins$[ebp]
	push	ecx
	push	OFFSET $SG9688
	call	_FT_Message
	add	esp, 8
$LN42@TT_Load_Si:
	xor	edx, edx
	jne	SHORT $LN43@TT_Load_Si
; Line 420
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR _n_ins$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN39@TT_Load_Si
$LN38@TT_Load_Si:
; Line 422
	mov	edx, 4
	imul	eax, edx, 28
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN37@TT_Load_Si
	push	OFFSET $SG9694
	call	_FT_Message
	add	esp, 4
$LN37@TT_Load_Si:
	xor	ecx, ecx
	jne	SHORT $LN38@TT_Load_Si
; Line 423
	push	OFFSET $SG9695
	push	423					; 000001a7H
	push	22					; 00000016H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 22					; 00000016H
	mov	DWORD PTR _error$[ebp], eax
; Line 424
	jmp	$Fail$68
$LN39@TT_Load_Si:
; Line 429
	mov	edx, DWORD PTR _load$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 2
	jne	$LN34@TT_Load_Si
; Line 434
	mov	ecx, DWORD PTR _load$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR [edx+388]
	mov	DWORD PTR _tmp$[ebp], eax
; Line 439
	movzx	ecx, WORD PTR _n_ins$[ebp]
	push	ecx
	mov	edx, DWORD PTR _load$[ebp]
	mov	eax, DWORD PTR [edx+160]
	add	eax, 392				; 00000188H
	push	eax
	push	1
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _load$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_Update_Max
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 441
	mov	edx, DWORD PTR _load$[ebp]
	mov	eax, DWORD PTR [edx+160]
	movzx	ecx, WORD PTR _tmp$[ebp]
	mov	DWORD PTR [eax+388], ecx
; Line 442
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN33@TT_Load_Si
; Line 443
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN57@TT_Load_Si
$LN33@TT_Load_Si:
; Line 445
	mov	edx, DWORD PTR _load$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, WORD PTR _n_ins$[ebp]
	mov	DWORD PTR [eax+140], ecx
; Line 446
	mov	edx, DWORD PTR _load$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR _load$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+392]
	mov	DWORD PTR [edx+136], eax
; Line 448
	movzx	ecx, WORD PTR _n_ins$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _load$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR [ecx+392]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN34@TT_Load_Si:
; Line 453
	movzx	eax, WORD PTR _n_ins$[ebp]
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 455
	mov	ecx, DWORD PTR _gloader$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _outline$[ebp], ecx
; Line 458
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _flag$[ebp], eax
; Line 459
	mov	ecx, DWORD PTR _flag$[ebp]
	add	ecx, DWORD PTR _n_points$[ebp]
	mov	DWORD PTR _flag_limit$[ebp], ecx
$LN32@TT_Load_Si:
; Line 461
	cmp	DWORD PTR _flag$[ebp], 0
	jne	SHORT $LN31@TT_Load_Si
	push	OFFSET $SG9708
	push	461					; 000001cdH
	push	OFFSET $SG9709
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN31@TT_Load_Si:
	xor	edx, edx
	jne	SHORT $LN32@TT_Load_Si
$LN28@TT_Load_Si:
; Line 463
	mov	eax, DWORD PTR _flag$[ebp]
	cmp	eax, DWORD PTR _flag_limit$[ebp]
	jae	$LN27@TT_Load_Si
; Line 465
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN26@TT_Load_Si
; Line 466
	jmp	$Invalid_Outline$69
$LN26@TT_Load_Si:
; Line 468
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$[ebp], al
	mov	ecx, DWORD PTR _flag$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _flag$[ebp]
	add	eax, 1
	mov	DWORD PTR _flag$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 469
	movzx	edx, BYTE PTR _c$[ebp]
	and	edx, 8
	je	SHORT $LN25@TT_Load_Si
; Line 471
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN24@TT_Load_Si
; Line 472
	jmp	$Invalid_Outline$69
$LN24@TT_Load_Si:
; Line 474
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _count$[ebp], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 475
	movzx	ecx, BYTE PTR _count$[ebp]
	add	ecx, DWORD PTR _flag$[ebp]
	cmp	ecx, DWORD PTR _flag_limit$[ebp]
	jbe	SHORT $LN23@TT_Load_Si
; Line 476
	jmp	$Invalid_Outline$69
$LN23@TT_Load_Si:
; Line 478
	jmp	SHORT $LN22@TT_Load_Si
$LN21@TT_Load_Si:
	mov	dl, BYTE PTR _count$[ebp]
	sub	dl, 1
	mov	BYTE PTR _count$[ebp], dl
$LN22@TT_Load_Si:
	movzx	eax, BYTE PTR _count$[ebp]
	test	eax, eax
	jle	SHORT $LN25@TT_Load_Si
; Line 479
	mov	ecx, DWORD PTR _flag$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _flag$[ebp]
	add	eax, 1
	mov	DWORD PTR _flag$[ebp], eax
	jmp	SHORT $LN21@TT_Load_Si
$LN25@TT_Load_Si:
; Line 481
	jmp	$LN28@TT_Load_Si
$LN27@TT_Load_Si:
; Line 485
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _vec$[ebp], edx
; Line 486
	mov	eax, DWORD PTR _n_points$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _vec_limit$[ebp], edx
; Line 487
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _flag$[ebp], ecx
; Line 488
	mov	DWORD PTR _x$[ebp], 0
; Line 490
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _xy_size$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN19@TT_Load_Si
; Line 491
	jmp	$Invalid_Outline$69
$LN19@TT_Load_Si:
; Line 493
	jmp	SHORT $LN18@TT_Load_Si
$LN17@TT_Load_Si:
	mov	eax, DWORD PTR _vec$[ebp]
	add	eax, 8
	mov	DWORD PTR _vec$[ebp], eax
	mov	ecx, DWORD PTR _flag$[ebp]
	add	ecx, 1
	mov	DWORD PTR _flag$[ebp], ecx
$LN18@TT_Load_Si:
	mov	edx, DWORD PTR _vec$[ebp]
	cmp	edx, DWORD PTR _vec_limit$[ebp]
	jae	$LN16@TT_Load_Si
; Line 495
	mov	DWORD PTR _y$4[ebp], 0
; Line 496
	mov	eax, DWORD PTR _flag$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _f$3[ebp], cl
; Line 499
	movzx	edx, BYTE PTR _f$3[ebp]
	and	edx, 2
	je	SHORT $LN15@TT_Load_Si
; Line 501
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN14@TT_Load_Si
; Line 502
	jmp	$Invalid_Outline$69
$LN14@TT_Load_Si:
; Line 504
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _y$4[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 505
	movzx	ecx, BYTE PTR _f$3[ebp]
	and	ecx, 16					; 00000010H
	jne	SHORT $LN13@TT_Load_Si
; Line 506
	mov	edx, DWORD PTR _y$4[ebp]
	neg	edx
	mov	DWORD PTR _y$4[ebp], edx
$LN13@TT_Load_Si:
; Line 508
	jmp	SHORT $LN12@TT_Load_Si
$LN15@TT_Load_Si:
	movzx	eax, BYTE PTR _f$3[ebp]
	and	eax, 16					; 00000010H
	jne	SHORT $LN12@TT_Load_Si
; Line 510
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN10@TT_Load_Si
; Line 511
	jmp	$Invalid_Outline$69
$LN10@TT_Load_Si:
; Line 513
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	mov	DWORD PTR _y$4[ebp], edx
$LN12@TT_Load_Si:
; Line 516
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _y$4[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 517
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 519
	movzx	eax, BYTE PTR _f$3[ebp]
	and	eax, -19				; ffffffedH
	mov	ecx, DWORD PTR _flag$[ebp]
	mov	BYTE PTR [ecx], al
; Line 520
	jmp	$LN17@TT_Load_Si
$LN16@TT_Load_Si:
; Line 524
	mov	edx, DWORD PTR _gloader$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _vec$[ebp], eax
; Line 525
	mov	ecx, DWORD PTR _n_points$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _vec_limit$[ebp], eax
; Line 526
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _flag$[ebp], edx
; Line 527
	mov	DWORD PTR _x$[ebp], 0
; Line 529
	jmp	SHORT $LN9@TT_Load_Si
$LN8@TT_Load_Si:
	mov	eax, DWORD PTR _vec$[ebp]
	add	eax, 8
	mov	DWORD PTR _vec$[ebp], eax
	mov	ecx, DWORD PTR _flag$[ebp]
	add	ecx, 1
	mov	DWORD PTR _flag$[ebp], ecx
$LN9@TT_Load_Si:
	mov	edx, DWORD PTR _vec$[ebp]
	cmp	edx, DWORD PTR _vec_limit$[ebp]
	jae	$LN7@TT_Load_Si
; Line 531
	mov	DWORD PTR _y$2[ebp], 0
; Line 532
	mov	eax, DWORD PTR _flag$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _f$1[ebp], cl
; Line 535
	movzx	edx, BYTE PTR _f$1[ebp]
	and	edx, 4
	je	SHORT $LN6@TT_Load_Si
; Line 537
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN5@TT_Load_Si
; Line 538
	jmp	$Invalid_Outline$69
$LN5@TT_Load_Si:
; Line 540
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _y$2[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 541
	movzx	ecx, BYTE PTR _f$1[ebp]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN4@TT_Load_Si
; Line 542
	mov	edx, DWORD PTR _y$2[ebp]
	neg	edx
	mov	DWORD PTR _y$2[ebp], edx
$LN4@TT_Load_Si:
; Line 544
	jmp	SHORT $LN3@TT_Load_Si
$LN6@TT_Load_Si:
	movzx	eax, BYTE PTR _f$1[ebp]
	and	eax, 32					; 00000020H
	jne	SHORT $LN3@TT_Load_Si
; Line 546
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN1@TT_Load_Si
; Line 547
	jmp	SHORT $Invalid_Outline$69
$LN1@TT_Load_Si:
; Line 549
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	mov	DWORD PTR _y$2[ebp], edx
$LN3@TT_Load_Si:
; Line 552
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _y$2[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 553
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 555
	movzx	eax, BYTE PTR _f$1[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _flag$[ebp]
	mov	BYTE PTR [ecx], al
; Line 556
	jmp	$LN8@TT_Load_Si
$LN7@TT_Load_Si:
; Line 558
	mov	edx, DWORD PTR _outline$[ebp]
	mov	ax, WORD PTR _n_points$[ebp]
	mov	WORD PTR [edx+2], ax
; Line 559
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	dx, WORD PTR _n_contours$[ebp]
	mov	WORD PTR [ecx], dx
; Line 561
	mov	eax, DWORD PTR _load$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+200], ecx
$Fail$68:
; Line 564
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN57@TT_Load_Si
$Invalid_Outline$69:
; Line 567
	push	OFFSET $SG9770
	push	567					; 00000237H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 568
	jmp	SHORT $Fail$68
$LN57@TT_Load_Si:
; Line 569
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN67@TT_Load_Si
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN67@TT_Load_Si:
	DD	1
	DD	$LN66@TT_Load_Si
$LN66@TT_Load_Si:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN65@TT_Load_Si
$LN65@TT_Load_Si:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TT_Load_Simple_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$ = -8						; size = 4
_p$ = -4						; size = 4
_loader$ = 8						; size = 4
_TT_Load_Glyph_Header PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 316
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 317
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	DWORD PTR _p$[ebp], ecx
; Line 318
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+204]
	mov	DWORD PTR _limit$[ebp], eax
; Line 321
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 10					; 0000000aH
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN13@TT_Load_Gl
; Line 322
	push	OFFSET $SG9577
	push	322					; 00000142H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN14@TT_Load_Gl
$LN13@TT_Load_Gl:
; Line 324
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	WORD PTR [edx+32], ax
; Line 326
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 327
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 328
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 329
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN12@TT_Load_Gl:
; Line 331
	mov	edx, 4
	imul	eax, edx, 28
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN11@TT_Load_Gl
	mov	ecx, DWORD PTR _loader$[ebp]
	movsx	edx, WORD PTR [ecx+32]
	push	edx
	push	OFFSET $SG9612
	call	_FT_Message
	add	esp, 8
$LN11@TT_Load_Gl:
	xor	eax, eax
	jne	SHORT $LN12@TT_Load_Gl
$LN8@TT_Load_Gl:
; Line 333
	mov	ecx, 4
	imul	edx, ecx, 28
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN7@TT_Load_Gl
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	push	OFFSET $SG9617
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN7@TT_Load_Gl:
	xor	ecx, ecx
	jne	SHORT $LN8@TT_Load_Gl
$LN4@TT_Load_Gl:
; Line 335
	mov	edx, 4
	imul	eax, edx, 28
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN3@TT_Load_Gl
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	push	OFFSET $SG9622
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN3@TT_Load_Gl:
	xor	edx, edx
	jne	SHORT $LN4@TT_Load_Gl
; Line 336
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+200], ecx
; Line 338
	xor	eax, eax
$LN14@TT_Load_Gl:
; Line 339
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TT_Load_Glyph_Header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = -4						; size = 4
_loader$ = 8						; size = 4
_TT_Forget_Glyph_Frame PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 306
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 307
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 310
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 311
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TT_Forget_Glyph_Frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_error$ = -4						; size = 4
_loader$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_offset$ = 16						; size = 4
_byte_count$ = 20					; size = 4
_TT_Access_Glyph_Frame PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 283
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 285
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 288
	mov	edx, DWORD PTR _glyph_index$[ebp]
	mov	DWORD PTR _glyph_index$[ebp], edx
$LN6@TT_Access_:
; Line 291
	mov	eax, 4
	imul	ecx, eax, 28
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN5@TT_Access_
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	push	OFFSET $SG9560
	call	_FT_Message
	add	esp, 8
$LN5@TT_Access_:
	xor	eax, eax
	jne	SHORT $LN6@TT_Access_
; Line 294
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@TT_Access_
	mov	eax, DWORD PTR _byte_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@TT_Access_
$LN1@TT_Access_:
; Line 295
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN7@TT_Access_
$LN2@TT_Access_:
; Line 297
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+200], ecx
; Line 298
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+204], ecx
; Line 300
	xor	eax, eax
$LN7@TT_Access_:
; Line 301
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TT_Access_Glyph_Frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_k$ = -4						; size = 4
_n$ = 8							; size = 4
_coords$ = 12						; size = 4
_delta_x$ = 16						; size = 4
_delta_y$ = 20						; size = 4
_translate_array PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 256
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 260
	cmp	DWORD PTR _delta_x$[ebp], 0
	je	SHORT $LN8@translate_
; Line 261
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN7@translate_
$LN6@translate_:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN7@translate_:
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR _n$[ebp]
	jae	SHORT $LN8@translate_
; Line 262
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _coords$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	add	ecx, DWORD PTR _delta_x$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _coords$[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	jmp	SHORT $LN6@translate_
$LN8@translate_:
; Line 264
	cmp	DWORD PTR _delta_y$[ebp], 0
	je	SHORT $LN9@translate_
; Line 265
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN3@translate_
$LN2@translate_:
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx
$LN3@translate_:
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR _n$[ebp]
	jae	SHORT $LN9@translate_
; Line 266
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _coords$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	add	edx, DWORD PTR _delta_y$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _coords$[ebp]
	mov	DWORD PTR [ecx+eax*8+4], edx
	jmp	SHORT $LN2@translate_
$LN9@translate_:
; Line 267
	mov	esp, ebp
	pop	ebp
	ret	0
_translate_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$1 = -52						; size = 4
_metrics$2 = -44					; size = 16
_advance_height$ = -24					; size = 2
_advance_width$ = -20					; size = 2
_top_bearing$ = -16					; size = 2
_left_bearing$ = -12					; size = 2
_face$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_loader$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_tt_get_metrics_incr_overrides PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 180
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 181
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 183
	xor	edx, edx
	mov	WORD PTR _left_bearing$[ebp], dx
	xor	eax, eax
	mov	WORD PTR _top_bearing$[ebp], ax
; Line 184
	xor	ecx, ecx
	mov	WORD PTR _advance_width$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _advance_height$[ebp], dx
; Line 190
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+48], 0
	je	$Exit$9
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+8], 0
	je	$Exit$9
; Line 196
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _metrics$2[ebp], ecx
; Line 197
	mov	DWORD PTR _metrics$2[ebp+4], 0
; Line 198
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _metrics$2[ebp+8], eax
; Line 199
	mov	DWORD PTR _metrics$2[ebp+12], 0
; Line 203
	mov	esi, esp
	lea	ecx, DWORD PTR _metrics$2[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$1[ebp], eax
; Line 204
	cmp	DWORD PTR _error$1[ebp], 0
	je	SHORT $LN2@tt_get_met
; Line 205
	jmp	SHORT $Exit$9
$LN2@tt_get_met:
; Line 207
	mov	ax, WORD PTR _metrics$2[ebp]
	mov	WORD PTR _left_bearing$[ebp], ax
; Line 208
	mov	cx, WORD PTR _metrics$2[ebp+8]
	mov	WORD PTR _advance_width$[ebp], cx
; Line 228
	movsx	edx, WORD PTR _left_bearing$[ebp]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+52], edx
; Line 229
	movzx	ecx, WORD PTR _advance_width$[ebp]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+56], ecx
; Line 230
	movsx	eax, WORD PTR _top_bearing$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+176], eax
; Line 231
	movzx	edx, WORD PTR _advance_height$[ebp]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+180], edx
; Line 233
	mov	ecx, DWORD PTR _loader$[ebp]
	movzx	edx, BYTE PTR [ecx+64]
	test	edx, edx
	jne	SHORT $Exit$9
; Line 235
	mov	eax, DWORD PTR _loader$[ebp]
	mov	BYTE PTR [eax+64], 1
; Line 236
	movzx	ecx, WORD PTR _advance_width$[ebp]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+60], ecx
$Exit$9:
; Line 242
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@tt_get_met
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@tt_get_met:
	DD	1
	DD	$LN7@tt_get_met
$LN7@tt_get_met:
	DD	-44					; ffffffd4H
	DD	16					; 00000010H
	DD	$LN6@tt_get_met
$LN6@tt_get_met:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
_tt_get_metrics_incr_overrides ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pos$ = -64						; size = 4
_advance_height$ = -56					; size = 2
_advance_width$ = -44					; size = 2
_top_bearing$ = -32					; size = 2
_left_bearing$ = -20					; size = 2
_stream$ = -12						; size = 4
_error$ = -8						; size = 4
_face$ = -4						; size = 4
_loader$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_tt_get_metrics PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 120
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 121
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 127
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _stream$[ebp], eax
; Line 129
	xor	ecx, ecx
	mov	WORD PTR _left_bearing$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _top_bearing$[ebp], dx
; Line 130
	xor	eax, eax
	mov	WORD PTR _advance_width$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _advance_height$[ebp], cx
; Line 134
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _pos$[ebp], eax
; Line 139
	lea	eax, DWORD PTR _advance_width$[ebp]
	push	eax
	lea	ecx, DWORD PTR _left_bearing$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_TT_Get_HMetrics
	add	esp, 16					; 00000010H
; Line 143
	lea	ecx, DWORD PTR _advance_height$[ebp]
	push	ecx
	lea	edx, DWORD PTR _top_bearing$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_TT_Get_VMetrics
	add	esp, 20					; 00000014H
; Line 145
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@tt_get_met
; Line 146
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN3@tt_get_met
$LN2@tt_get_met:
; Line 148
	movsx	eax, WORD PTR _left_bearing$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 149
	movzx	edx, WORD PTR _advance_width$[ebp]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+56], edx
; Line 150
	movsx	ecx, WORD PTR _top_bearing$[ebp]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+176], ecx
; Line 151
	movzx	eax, WORD PTR _advance_height$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+180], eax
; Line 165
	mov	edx, DWORD PTR _loader$[ebp]
	movzx	eax, BYTE PTR [edx+64]
	test	eax, eax
	jne	SHORT $LN1@tt_get_met
; Line 167
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	BYTE PTR [ecx+64], 1
; Line 168
	movzx	edx, WORD PTR _advance_width$[ebp]
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+60], edx
$LN1@tt_get_met:
; Line 171
	xor	eax, eax
$LN3@tt_get_met:
; Line 172
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@tt_get_met
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@tt_get_met:
	DD	4
	DD	$LN9@tt_get_met
$LN9@tt_get_met:
	DD	-20					; ffffffecH
	DD	2
	DD	$LN5@tt_get_met
	DD	-32					; ffffffe0H
	DD	2
	DD	$LN6@tt_get_met
	DD	-44					; ffffffd4H
	DD	2
	DD	$LN7@tt_get_met
	DD	-56					; ffffffc8H
	DD	2
	DD	$LN8@tt_get_met
$LN8@tt_get_met:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN7@tt_get_met:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN6@tt_get_met:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN5@tt_get_met:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_tt_get_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_MulFix_i386 PROC
; File d:\mozilla\modules\freetype2\include\internal\ftcalc.h
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 159
	mov	eax, DWORD PTR _a$[ebp]
; Line 160
	mov	edx, DWORD PTR _b$[ebp]
; Line 161
	imul	edx
; Line 162
	mov	ecx, edx
; Line 163
	sar	ecx, 31					; 0000001fH
; Line 164
	add	ecx, 32768				; 00008000H
; Line 165
	add	eax, ecx
; Line 166
	adc	edx, 0
; Line 167
	shr	eax, 16					; 00000010H
; Line 168
	shl	edx, 16					; 00000010H
; Line 169
	add	eax, edx
; Line 170
	mov	DWORD PTR _result$[ebp], eax
; Line 172
	mov	eax, DWORD PTR _result$[ebp]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_MulFix_i386 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sfnt$ = -16						; size = 4
_sfntd$ = -12						; size = 4
_result$ = -8						; size = 4
_library$ = -4						; size = 4
_driver$ = 8						; size = 4
_tt_interface$ = 12					; size = 4
_tt_get_interface PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttdriver.c
; Line 477
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 493
	mov	eax, DWORD PTR _tt_interface$[ebp]
	push	eax
	push	OFFSET _tt_services
	call	_ft_service_list_lookup
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
; Line 494
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@tt_get_int
; Line 495
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN6@tt_get_int
$LN5@tt_get_int:
; Line 498
	cmp	DWORD PTR _driver$[ebp], 0
	jne	SHORT $LN4@tt_get_int
; Line 499
	xor	eax, eax
	jmp	SHORT $LN6@tt_get_int
$LN4@tt_get_int:
; Line 500
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _library$[ebp], edx
; Line 501
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN3@tt_get_int
; Line 502
	xor	eax, eax
	jmp	SHORT $LN6@tt_get_int
$LN3@tt_get_int:
; Line 506
	push	OFFSET $SG8923
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _sfntd$[ebp], eax
; Line 507
	cmp	DWORD PTR _sfntd$[ebp], 0
	je	SHORT $LN2@tt_get_int
; Line 509
	mov	ecx, DWORD PTR _sfntd$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _sfnt$[ebp], eax
; Line 510
	cmp	DWORD PTR _sfnt$[ebp], 0
	je	SHORT $LN2@tt_get_int
; Line 511
	mov	esi, esp
	mov	ecx, DWORD PTR _tt_interface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _driver$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@tt_get_int
$LN2@tt_get_int:
; Line 514
	xor	eax, eax
$LN6@tt_get_int:
; Line 515
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_get_interface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -16						; size = 4
_face$ = -12						; size = 4
_size$ = -8						; size = 4
_slot$ = -4						; size = 4
_ttslot$ = 8						; size = 4
_ttsize$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_tt_glyph_load PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttdriver.c
; Line 359
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 360
	mov	eax, DWORD PTR _ttslot$[ebp]
	mov	DWORD PTR _slot$[ebp], eax
; Line 361
	mov	ecx, DWORD PTR _ttsize$[ebp]
	mov	DWORD PTR _size$[ebp], ecx
; Line 362
	mov	edx, DWORD PTR _ttslot$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _face$[ebp], eax
; Line 366
	cmp	DWORD PTR _slot$[ebp], 0
	jne	SHORT $LN9@tt_glyph_l
; Line 367
	push	OFFSET $SG8874
	push	367					; 0000016fH
	push	37					; 00000025H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 37					; 00000025H
	jmp	$LN10@tt_glyph_l
$LN9@tt_glyph_l:
; Line 369
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN8@tt_glyph_l
; Line 370
	push	OFFSET $SG8876
	push	370					; 00000172H
	push	36					; 00000024H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 36					; 00000024H
	jmp	$LN10@tt_glyph_l
$LN8@tt_glyph_l:
; Line 372
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN7@tt_glyph_l
; Line 373
	push	OFFSET $SG8878
	push	373					; 00000175H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN10@tt_glyph_l
$LN7@tt_glyph_l:
; Line 377
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jb	SHORT $LN6@tt_glyph_l
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN6@tt_glyph_l
; Line 381
	push	OFFSET $SG8881
	push	381					; 0000017dH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN10@tt_glyph_l
$LN6@tt_glyph_l:
; Line 383
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 2
	je	SHORT $LN5@tt_glyph_l
; Line 388
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8192				; 00002000H
	je	SHORT $LN4@tt_glyph_l
; Line 389
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, -3					; fffffffdH
	mov	DWORD PTR _load_flags$[ebp], edx
$LN4@tt_glyph_l:
; Line 391
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 32768				; 00008000H
	je	SHORT $LN5@tt_glyph_l
; Line 392
	mov	ecx, DWORD PTR _load_flags$[ebp]
	or	ecx, 2
	mov	DWORD PTR _load_flags$[ebp], ecx
$LN5@tt_glyph_l:
; Line 395
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 1025				; 00000401H
	je	SHORT $LN2@tt_glyph_l
; Line 397
	mov	eax, DWORD PTR _load_flags$[ebp]
	or	eax, 9
	mov	DWORD PTR _load_flags$[ebp], eax
; Line 399
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 8192				; 00002000H
	jne	SHORT $LN2@tt_glyph_l
; Line 400
	mov	eax, DWORD PTR _load_flags$[ebp]
	or	eax, 2
	mov	DWORD PTR _load_flags$[ebp], eax
$LN2@tt_glyph_l:
; Line 404
	mov	ecx, DWORD PTR _load_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_TT_Load_Glyph
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 409
	mov	eax, DWORD PTR _error$[ebp]
$LN10@tt_glyph_l:
; Line 410
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_glyph_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_strike_index$1 = -24					; size = 4
_sfnt$2 = -16						; size = 4
_ttface$3 = -12						; size = 4
_error$ = -8						; size = 4
_ttsize$ = -4						; size = 4
_size$ = 8						; size = 4
_req$ = 12						; size = 4
_tt_size_request PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttdriver.c
; Line 292
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 293
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _ttsize$[ebp], eax
; Line 294
	mov	DWORD PTR _error$[ebp], 0
; Line 299
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 2
	je	SHORT $LN4@tt_size_re
; Line 301
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ttface$3[ebp], edx
; Line 302
	mov	eax, DWORD PTR _ttface$3[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	DWORD PTR _sfnt$2[ebp], ecx
; Line 306
	mov	esi, esp
	lea	edx, DWORD PTR _strike_index$1[ebp]
	push	edx
	mov	eax, DWORD PTR _req$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ttface$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$2[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 308
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@tt_size_re
; Line 309
	mov	ecx, DWORD PTR _ttsize$[ebp]
	mov	DWORD PTR [ecx+112], -1
; Line 310
	jmp	SHORT $LN4@tt_size_re
$LN3@tt_size_re:
; Line 311
	mov	edx, DWORD PTR _strike_index$1[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_tt_size_select
	add	esp, 8
	jmp	SHORT $LN5@tt_size_re
$LN4@tt_size_re:
; Line 316
	mov	ecx, DWORD PTR _req$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_Request_Metrics
	add	esp, 8
; Line 318
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	je	SHORT $LN1@tt_size_re
; Line 320
	mov	ecx, DWORD PTR _ttsize$[ebp]
	push	ecx
	call	_tt_size_reset
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 321
	mov	esi, DWORD PTR _ttsize$[ebp]
	add	esi, 44					; 0000002cH
	mov	edi, DWORD PTR _ttsize$[ebp]
	add	edi, 12					; 0000000cH
	mov	ecx, 7
	rep movsd
$LN1@tt_size_re:
; Line 324
	mov	eax, DWORD PTR _error$[ebp]
$LN5@tt_size_re:
; Line 325
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@tt_size_re
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@tt_size_re:
	DD	1
	DD	$LN8@tt_size_re
$LN8@tt_size_re:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@tt_size_re
$LN7@tt_size_re:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_tt_size_request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_metrics$1 = -20					; size = 4
_sfnt$2 = -16						; size = 4
_error$ = -12						; size = 4
_ttsize$ = -8						; size = 4
_ttface$ = -4						; size = 4
_size$ = 8						; size = 4
_strike_index$ = 12					; size = 4
_tt_size_select PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttdriver.c
; Line 257
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 258
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ttface$[ebp], ecx
; Line 259
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _ttsize$[ebp], edx
; Line 260
	mov	DWORD PTR _error$[ebp], 0
; Line 263
	mov	eax, DWORD PTR _ttsize$[ebp]
	mov	ecx, DWORD PTR _strike_index$[ebp]
	mov	DWORD PTR [eax+112], ecx
; Line 265
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	SHORT $LN3@tt_size_se
; Line 268
	mov	edx, DWORD PTR _strike_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_Select_Metrics
	add	esp, 8
; Line 270
	mov	edx, DWORD PTR _ttsize$[ebp]
	push	edx
	call	_tt_size_reset
	add	esp, 4
; Line 272
	jmp	SHORT $LN2@tt_size_se
$LN3@tt_size_se:
; Line 274
	mov	eax, DWORD PTR _ttface$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	DWORD PTR _sfnt$2[ebp], ecx
; Line 275
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _metrics$1[ebp], edx
; Line 278
	mov	esi, esp
	mov	eax, DWORD PTR _metrics$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _strike_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ttface$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$2[ebp]
	mov	ecx, DWORD PTR [eax+108]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 279
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@tt_size_se
; Line 280
	mov	edx, DWORD PTR _ttsize$[ebp]
	mov	DWORD PTR [edx+112], -1
$LN2@tt_size_se:
; Line 283
	mov	eax, DWORD PTR _error$[ebp]
; Line 284
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_size_select ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_aw$1 = -52						; size = 2
_lsb$2 = -40						; size = 2
_ah$3 = -28						; size = 2
_tsb$4 = -16						; size = 2
_face$ = -8						; size = 4
_nn$ = -4						; size = 4
_ttface$ = 8						; size = 4
_start$ = 12						; size = 4
_count$ = 16						; size = 4
_flags$ = 20						; size = 4
_advances$ = 24						; size = 4
_tt_get_advances PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttdriver.c
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 205
	mov	eax, DWORD PTR _ttface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 210
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN8@tt_get_adv
; Line 212
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN7@tt_get_adv
$LN6@tt_get_adv:
	mov	edx, DWORD PTR _nn$[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$[ebp], edx
$LN7@tt_get_adv:
	mov	eax, DWORD PTR _nn$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN5@tt_get_adv
; Line 219
	lea	ecx, DWORD PTR _ah$3[ebp]
	push	ecx
	lea	edx, DWORD PTR _tsb$4[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _nn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_TT_Get_VMetrics
	add	esp, 20					; 00000014H
; Line 220
	movzx	edx, WORD PTR _ah$3[ebp]
	mov	eax, DWORD PTR _nn$[ebp]
	mov	ecx, DWORD PTR _advances$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 221
	jmp	SHORT $LN6@tt_get_adv
$LN5@tt_get_adv:
; Line 223
	jmp	SHORT $LN4@tt_get_adv
$LN8@tt_get_adv:
; Line 225
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN3@tt_get_adv
$LN2@tt_get_adv:
	mov	edx, DWORD PTR _nn$[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$[ebp], edx
$LN3@tt_get_adv:
	mov	eax, DWORD PTR _nn$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN4@tt_get_adv
; Line 231
	lea	ecx, DWORD PTR _aw$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _lsb$2[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _nn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_TT_Get_HMetrics
	add	esp, 16					; 00000010H
; Line 232
	movzx	edx, WORD PTR _aw$1[ebp]
	mov	eax, DWORD PTR _nn$[ebp]
	mov	ecx, DWORD PTR _advances$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 233
	jmp	SHORT $LN2@tt_get_adv
$LN4@tt_get_adv:
; Line 236
	xor	eax, eax
; Line 237
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@tt_get_adv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@tt_get_adv:
	DD	4
	DD	$LN15@tt_get_adv
$LN15@tt_get_adv:
	DD	-16					; fffffff0H
	DD	2
	DD	$LN11@tt_get_adv
	DD	-28					; ffffffe4H
	DD	2
	DD	$LN12@tt_get_adv
	DD	-40					; ffffffd8H
	DD	2
	DD	$LN13@tt_get_adv
	DD	-52					; ffffffccH
	DD	2
	DD	$LN14@tt_get_adv
$LN14@tt_get_adv:
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	0
$LN13@tt_get_adv:
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	0
$LN12@tt_get_adv:
	DB	97					; 00000061H
	DB	104					; 00000068H
	DB	0
$LN11@tt_get_adv:
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	0
_tt_get_advances ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sfnt$ = -8						; size = 4
_face$ = -4						; size = 4
_ttface$ = 8						; size = 4
_left_glyph$ = 12					; size = 4
_right_glyph$ = 16					; size = 4
_kerning$ = 20						; size = 4
_tt_get_kerning PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttdriver.c
; Line 179
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 180
	mov	eax, DWORD PTR _ttface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 181
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+532]
	mov	DWORD PTR _sfnt$[ebp], edx
; Line 184
	mov	eax, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [eax], 0
; Line 185
	mov	ecx, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 187
	cmp	DWORD PTR _sfnt$[ebp], 0
	je	SHORT $LN1@tt_get_ker
; Line 188
	mov	esi, esp
	mov	edx, DWORD PTR _right_glyph$[ebp]
	push	edx
	mov	eax, DWORD PTR _left_glyph$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@tt_get_ker:
; Line 190
	xor	eax, eax
; Line 191
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_get_kerning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$1 = -16						; size = 4
_interpreter_version$ = -12				; size = 4
_driver$ = -8						; size = 4
_error$ = -4						; size = 4
_module$ = 8						; size = 4
_property_name$ = 12					; size = 4
_value$ = 16						; size = 4
_tt_property_get PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttdriver.c
; Line 95
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 96
	mov	DWORD PTR _error$[ebp], 0
; Line 97
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 99
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _interpreter_version$[ebp], edx
; Line 102
	push	OFFSET $SG8768
	mov	eax, DWORD PTR _property_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@tt_propert
; Line 104
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _val$1[ebp], ecx
; Line 107
	mov	edx, DWORD PTR _val$1[ebp]
	mov	eax, DWORD PTR _interpreter_version$[ebp]
	mov	DWORD PTR [edx], eax
; Line 109
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN6@tt_propert
$LN4@tt_propert:
; Line 113
	mov	ecx, 4
	imul	edx, ecx, 27
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN3@tt_propert
	mov	eax, DWORD PTR _property_name$[ebp]
	push	eax
	push	OFFSET $SG8775
	call	_FT_Message
	add	esp, 8
$LN3@tt_propert:
	xor	ecx, ecx
	jne	SHORT $LN4@tt_propert
; Line 114
	push	OFFSET $SG8776
	push	114					; 00000072H
	push	12					; 0000000cH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 12					; 0000000cH
$LN6@tt_propert:
; Line 115
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_property_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_interpreter_version$1 = -12				; size = 4
_driver$ = -8						; size = 4
_error$ = -4						; size = 4
_module$ = 8						; size = 4
_property_name$ = 12					; size = 4
_value$ = 16						; size = 4
_tt_property_set PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttdriver.c
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 66
	mov	DWORD PTR _error$[ebp], 0
; Line 67
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 70
	push	OFFSET $SG8744
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@tt_propert
; Line 72
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _interpreter_version$1[ebp], edx
; Line 76
	mov	eax, DWORD PTR _interpreter_version$1[ebp]
	cmp	DWORD PTR [eax], 35			; 00000023H
	je	SHORT $LN6@tt_propert
; Line 77
	mov	DWORD PTR _error$[ebp], 7
; Line 78
	jmp	SHORT $LN5@tt_propert
$LN6@tt_propert:
; Line 80
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR _interpreter_version$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+68], eax
$LN5@tt_propert:
; Line 82
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN8@tt_propert
$LN4@tt_propert:
; Line 86
	mov	ecx, 4
	imul	edx, ecx, 27
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN3@tt_propert
	mov	eax, DWORD PTR _property_name$[ebp]
	push	eax
	push	OFFSET $SG8753
	call	_FT_Message
	add	esp, 8
$LN3@tt_propert:
	xor	ecx, ecx
	jne	SHORT $LN4@tt_propert
; Line 87
	push	OFFSET $SG8754
	push	87					; 00000057H
	push	12					; 0000000cH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 12					; 0000000cH
$LN8@tt_propert:
; Line 88
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_property_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_memory$ = 8						; size = 4
_blend$ = 12						; size = 4
_tt_done_blend PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgxvar.c
; Line 1507
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1508
	cmp	DWORD PTR _blend$[ebp], 0
	je	$LN27@tt_done_bl
$LN25@tt_done_bl:
; Line 1513
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+4], 0
	xor	ecx, ecx
	jne	SHORT $LN25@tt_done_bl
$LN22@tt_done_bl:
; Line 1514
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+8], 0
	xor	eax, eax
	jne	SHORT $LN22@tt_done_bl
; Line 1516
	mov	ecx, DWORD PTR _blend$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN9@tt_done_bl
; Line 1518
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN18@tt_done_bl
$LN17@tt_done_bl:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN18@tt_done_bl:
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN12@tt_done_bl
$LN15@tt_done_bl:
; Line 1519
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR [eax+ecx*8+4]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [edx+eax*8+4], 0
	xor	ecx, ecx
	jne	SHORT $LN15@tt_done_bl
	jmp	SHORT $LN17@tt_done_bl
$LN12@tt_done_bl:
; Line 1520
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+20], 0
	xor	eax, eax
	jne	SHORT $LN12@tt_done_bl
$LN9@tt_done_bl:
; Line 1523
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+28], 0
	xor	edx, edx
	jne	SHORT $LN9@tt_done_bl
$LN6@tt_done_bl:
; Line 1524
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+36], 0
	xor	ecx, ecx
	jne	SHORT $LN6@tt_done_bl
$LN3@tt_done_bl:
; Line 1525
	mov	edx, DWORD PTR _blend$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _blend$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@tt_done_bl
$LN27@tt_done_bl:
; Line 1527
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_done_blend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv284 = -128						; size = 4
tv279 = -124						; size = 4
_apply$1 = -120						; size = 4
_tupleIndex$2 = -116					; size = 4
_tupleDataSize$3 = -112					; size = 4
_deltas_y$ = -108					; size = 4
_deltas_x$ = -104					; size = 4
_points$ = -100						; size = 4
_localpoints$ = -96					; size = 4
_sharedpoints$ = -92					; size = 4
_spoint_count$ = -84					; size = 4
_point_count$ = -72					; size = 4
_im_end_coords$ = -64					; size = 4
_im_start_coords$ = -60					; size = 4
_tuple_coords$ = -56					; size = 4
_j$ = -52						; size = 4
_i$ = -48						; size = 4
_here$ = -44						; size = 4
_offsetToData$ = -40					; size = 4
_tupleCount$ = -36					; size = 4
_glyph_start$ = -32					; size = 4
_error$ = -24						; size = 4
_delta_xy$ = -16					; size = 4
_blend$ = -12						; size = 4
_memory$ = -8						; size = 4
_stream$ = -4						; size = 4
_face$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_deltas$ = 16						; size = 4
_n_points$ = 20						; size = 4
_TT_Vary_Get_Glyph_Deltas PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgxvar.c
; Line 1305
	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1306
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 1307
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _memory$[ebp], eax
; Line 1308
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+676]
	mov	DWORD PTR _blend$[ebp], edx
; Line 1309
	mov	DWORD PTR _delta_xy$[ebp], 0
; Line 1317
	mov	DWORD PTR _tuple_coords$[ebp], 0
; Line 1318
	mov	DWORD PTR _im_start_coords$[ebp], 0
; Line 1319
	mov	DWORD PTR _im_end_coords$[ebp], 0
; Line 1320
	mov	DWORD PTR _spoint_count$[ebp], 0
; Line 1321
	mov	DWORD PTR _sharedpoints$[ebp], 0
; Line 1322
	mov	DWORD PTR _localpoints$[ebp], 0
; Line 1327
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, BYTE PTR [eax+672]
	test	ecx, ecx
	je	SHORT $LN64@TT_Vary_Ge
	cmp	DWORD PTR _blend$[ebp], 0
	jne	SHORT $LN65@TT_Vary_Ge
$LN64@TT_Vary_Ge:
; Line 1328
	push	OFFSET $SG14188
	push	1328					; 00000530H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN66@TT_Vary_Ge
$LN65@TT_Vary_Ge:
; Line 1331
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _n_points$[ebp]
	push	eax
	push	0
	push	8
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _delta_xy$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN63@TT_Vary_Ge
; Line 1332
	jmp	$Exit$77
$LN63@TT_Vary_Ge:
; Line 1333
	mov	edx, DWORD PTR _deltas$[ebp]
	mov	eax, DWORD PTR _delta_xy$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1337
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jae	SHORT $LN61@TT_Vary_Ge
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	mov	esi, DWORD PTR _glyph_index$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	cmp	ecx, DWORD PTR [eax+esi*4+4]
	jne	SHORT $LN62@TT_Vary_Ge
$LN61@TT_Vary_Ge:
; Line 1338
	xor	eax, eax
	jmp	$LN66@TT_Vary_Ge
$LN62@TT_Vary_Ge:
; Line 1342
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN59@TT_Vary_Ge
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	mov	esi, DWORD PTR _glyph_index$[ebp]
	mov	edx, DWORD PTR [edx+eax*4+4]
	sub	edx, DWORD PTR [ecx+esi*4]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN60@TT_Vary_Ge
$LN59@TT_Vary_Ge:
; Line 1343
	jmp	$Fail1$78
$LN60@TT_Vary_Ge:
; Line 1345
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR _glyph_start$[ebp], eax
; Line 1352
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _tuple_coords$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN57@TT_Vary_Ge
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _im_start_coords$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN57@TT_Vary_Ge
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _im_end_coords$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN58@TT_Vary_Ge
$LN57@TT_Vary_Ge:
; Line 1353
	jmp	$Fail2$79
$LN58@TT_Vary_Ge:
; Line 1355
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	edx, ax
	mov	DWORD PTR _tupleCount$[ebp], edx
; Line 1356
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	ecx, ax
	add	ecx, DWORD PTR _glyph_start$[ebp]
	mov	DWORD PTR _offsetToData$[ebp], ecx
; Line 1358
	mov	edx, DWORD PTR _tupleCount$[ebp]
	and	edx, 32768				; 00008000H
	je	SHORT $LN56@TT_Vary_Ge
; Line 1360
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [eax+32]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _here$[ebp], edx
; Line 1362
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offsetToData$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+32], ecx
; Line 1364
	lea	eax, DWORD PTR _spoint_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_ft_var_readpackedpoints
	add	esp, 8
	mov	DWORD PTR _sharedpoints$[ebp], eax
; Line 1365
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _offsetToData$[ebp], ecx
; Line 1367
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _here$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+32], eax
$LN56@TT_Vary_Ge:
; Line 1370
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN55@TT_Vary_Ge
$LN54@TT_Vary_Ge:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN55@TT_Vary_Ge:
	mov	eax, DWORD PTR _tupleCount$[ebp]
	and	eax, 4095				; 00000fffH
	cmp	DWORD PTR _i$[ebp], eax
	jae	$Fail3$80
; Line 1377
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	edx, ax
	mov	DWORD PTR _tupleDataSize$3[ebp], edx
; Line 1378
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	ecx, ax
	mov	DWORD PTR _tupleIndex$2[ebp], ecx
; Line 1380
	mov	edx, DWORD PTR _tupleIndex$2[ebp]
	and	edx, 32768				; 00008000H
	je	SHORT $LN52@TT_Vary_Ge
; Line 1382
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN51@TT_Vary_Ge
$LN50@TT_Vary_Ge:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN51@TT_Vary_Ge:
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN49@TT_Vary_Ge
; Line 1383
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	ecx, ax
	shl	ecx, 2
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _tuple_coords$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN50@TT_Vary_Ge
$LN49@TT_Vary_Ge:
; Line 1386
	jmp	SHORT $LN48@TT_Vary_Ge
$LN52@TT_Vary_Ge:
	mov	ecx, DWORD PTR _tupleIndex$2[ebp]
	and	ecx, 4095				; 00000fffH
	mov	edx, DWORD PTR _blend$[ebp]
	cmp	ecx, DWORD PTR [edx+24]
	jb	SHORT $LN47@TT_Vary_Ge
; Line 1388
	push	OFFSET $SG14230
	push	1388					; 0000056cH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1389
	jmp	$Fail3$80
; Line 1391
	jmp	SHORT $LN48@TT_Vary_Ge
$LN47@TT_Vary_Ge:
; Line 1396
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _tupleIndex$2[ebp]
	and	edx, 4095				; 00000fffH
	mov	eax, DWORD PTR _blend$[ebp]
	imul	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _tuple_coords$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN48@TT_Vary_Ge:
; Line 1399
	mov	eax, DWORD PTR _tupleIndex$2[ebp]
	and	eax, 16384				; 00004000H
	je	SHORT $LN45@TT_Vary_Ge
; Line 1401
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN44@TT_Vary_Ge
$LN43@TT_Vary_Ge:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN44@TT_Vary_Ge:
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN42@TT_Vary_Ge
; Line 1402
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	edx, ax
	shl	edx, 2
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _im_start_coords$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN43@TT_Vary_Ge
$LN42@TT_Vary_Ge:
; Line 1403
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN41@TT_Vary_Ge
$LN40@TT_Vary_Ge:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN41@TT_Vary_Ge:
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN45@TT_Vary_Ge
; Line 1404
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	cwde
	shl	eax, 2
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _im_end_coords$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN40@TT_Vary_Ge
$LN45@TT_Vary_Ge:
; Line 1411
	mov	eax, DWORD PTR _im_end_coords$[ebp]
	push	eax
	mov	ecx, DWORD PTR _im_start_coords$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tuple_coords$[ebp]
	push	edx
	movzx	eax, WORD PTR _tupleIndex$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _blend$[ebp]
	push	ecx
	call	_ft_var_apply_tuple
	add	esp, 20					; 00000014H
	mov	DWORD PTR _apply$1[ebp], eax
; Line 1413
	cmp	DWORD PTR _apply$1[ebp], 0
	jne	SHORT $LN38@TT_Vary_Ge
; Line 1415
	mov	edx, DWORD PTR _offsetToData$[ebp]
	add	edx, DWORD PTR _tupleDataSize$3[ebp]
	mov	DWORD PTR _offsetToData$[ebp], edx
; Line 1416
	jmp	$LN54@TT_Vary_Ge
$LN38@TT_Vary_Ge:
; Line 1419
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [eax+32]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _here$[ebp], edx
; Line 1421
	mov	eax, DWORD PTR _tupleIndex$2[ebp]
	and	eax, 8192				; 00002000H
	je	SHORT $LN37@TT_Vary_Ge
; Line 1423
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _offsetToData$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 1425
	lea	ecx, DWORD PTR _point_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_ft_var_readpackedpoints
	add	esp, 8
	mov	DWORD PTR _localpoints$[ebp], eax
; Line 1426
	mov	eax, DWORD PTR _localpoints$[ebp]
	mov	DWORD PTR _points$[ebp], eax
; Line 1428
	jmp	SHORT $LN36@TT_Vary_Ge
$LN37@TT_Vary_Ge:
; Line 1430
	mov	ecx, DWORD PTR _sharedpoints$[ebp]
	mov	DWORD PTR _points$[ebp], ecx
; Line 1431
	mov	edx, DWORD PTR _spoint_count$[ebp]
	mov	DWORD PTR _point_count$[ebp], edx
$LN36@TT_Vary_Ge:
; Line 1436
	cmp	DWORD PTR _point_count$[ebp], 0
	jne	SHORT $LN68@TT_Vary_Ge
	mov	eax, DWORD PTR _n_points$[ebp]
	mov	DWORD PTR tv279[ebp], eax
	jmp	SHORT $LN69@TT_Vary_Ge
$LN68@TT_Vary_Ge:
	mov	ecx, DWORD PTR _point_count$[ebp]
	mov	DWORD PTR tv279[ebp], ecx
$LN69@TT_Vary_Ge:
	mov	edx, DWORD PTR tv279[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_ft_var_readpackeddeltas
	add	esp, 8
	mov	DWORD PTR _deltas_x$[ebp], eax
; Line 1439
	cmp	DWORD PTR _point_count$[ebp], 0
	jne	SHORT $LN70@TT_Vary_Ge
	mov	ecx, DWORD PTR _n_points$[ebp]
	mov	DWORD PTR tv284[ebp], ecx
	jmp	SHORT $LN71@TT_Vary_Ge
$LN70@TT_Vary_Ge:
	mov	edx, DWORD PTR _point_count$[ebp]
	mov	DWORD PTR tv284[ebp], edx
$LN71@TT_Vary_Ge:
	mov	eax, DWORD PTR tv284[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_ft_var_readpackeddeltas
	add	esp, 8
	mov	DWORD PTR _deltas_y$[ebp], eax
; Line 1441
	cmp	DWORD PTR _points$[ebp], 0
	je	SHORT $LN34@TT_Vary_Ge
	cmp	DWORD PTR _deltas_y$[ebp], 0
	je	SHORT $LN34@TT_Vary_Ge
	cmp	DWORD PTR _deltas_x$[ebp], 0
	jne	SHORT $LN35@TT_Vary_Ge
$LN34@TT_Vary_Ge:
; Line 1444
	jmp	$LN33@TT_Vary_Ge
$LN35@TT_Vary_Ge:
	cmp	DWORD PTR _points$[ebp], -1
	jne	SHORT $LN32@TT_Vary_Ge
; Line 1447
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN31@TT_Vary_Ge
$LN30@TT_Vary_Ge:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN31@TT_Vary_Ge:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _n_points$[ebp]
	jae	SHORT $LN29@TT_Vary_Ge
; Line 1449
	mov	ecx, DWORD PTR _apply$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _deltas_x$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _delta_xy$[ebp]
	add	eax, DWORD PTR [ecx+edx*8]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _delta_xy$[ebp]
	mov	DWORD PTR [ecx+edx*8], eax
; Line 1450
	mov	edx, DWORD PTR _apply$1[ebp]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _deltas_y$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _delta_xy$[ebp]
	add	eax, DWORD PTR [edx+ecx*8+4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _delta_xy$[ebp]
	mov	DWORD PTR [edx+ecx*8+4], eax
; Line 1451
	jmp	SHORT $LN30@TT_Vary_Ge
$LN29@TT_Vary_Ge:
; Line 1454
	jmp	$LN33@TT_Vary_Ge
$LN32@TT_Vary_Ge:
; Line 1456
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN27@TT_Vary_Ge
$LN26@TT_Vary_Ge:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN27@TT_Vary_Ge:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _point_count$[ebp]
	jae	$LN33@TT_Vary_Ge
; Line 1458
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _localpoints$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	cmp	ecx, DWORD PTR _n_points$[ebp]
	jb	SHORT $LN24@TT_Vary_Ge
; Line 1459
	jmp	SHORT $LN26@TT_Vary_Ge
$LN24@TT_Vary_Ge:
; Line 1461
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _localpoints$[ebp]
	movzx	esi, WORD PTR [eax+edx*2]
	mov	ecx, DWORD PTR _apply$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _deltas_x$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _delta_xy$[ebp]
	add	eax, DWORD PTR [edx+esi*8]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _localpoints$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2]
	mov	edx, DWORD PTR _delta_xy$[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
; Line 1462
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _localpoints$[ebp]
	movzx	esi, WORD PTR [ecx+eax*2]
	mov	edx, DWORD PTR _apply$1[ebp]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _deltas_y$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _delta_xy$[ebp]
	add	eax, DWORD PTR [ecx+esi*8+4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _localpoints$[ebp]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _delta_xy$[ebp]
	mov	DWORD PTR [ecx+edx*8+4], eax
; Line 1463
	jmp	$LN26@TT_Vary_Ge
$LN33@TT_Vary_Ge:
; Line 1466
	cmp	DWORD PTR _localpoints$[ebp], -1
	je	SHORT $LN19@TT_Vary_Ge
$LN22@TT_Vary_Ge:
; Line 1467
	mov	edx, DWORD PTR _localpoints$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _localpoints$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN22@TT_Vary_Ge
$LN19@TT_Vary_Ge:
; Line 1468
	mov	edx, DWORD PTR _deltas_x$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _deltas_x$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN19@TT_Vary_Ge
$LN16@TT_Vary_Ge:
; Line 1469
	mov	edx, DWORD PTR _deltas_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _deltas_y$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN16@TT_Vary_Ge
; Line 1471
	mov	edx, DWORD PTR _offsetToData$[ebp]
	add	edx, DWORD PTR _tupleDataSize$3[ebp]
	mov	DWORD PTR _offsetToData$[ebp], edx
; Line 1473
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _here$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+32], ecx
; Line 1474
	jmp	$LN54@TT_Vary_Ge
$Fail3$80:
; Line 1477
	mov	eax, DWORD PTR _tuple_coords$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _tuple_coords$[ebp], 0
	xor	edx, edx
	jne	SHORT $Fail3$80
$LN10@TT_Vary_Ge:
; Line 1478
	mov	eax, DWORD PTR _im_start_coords$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _im_start_coords$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN10@TT_Vary_Ge
$LN7@TT_Vary_Ge:
; Line 1479
	mov	eax, DWORD PTR _im_end_coords$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _im_end_coords$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN7@TT_Vary_Ge
$Fail2$79:
; Line 1482
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
$Fail1$78:
; Line 1485
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $Exit$77
$LN3@TT_Vary_Ge:
; Line 1487
	mov	ecx, DWORD PTR _delta_xy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _delta_xy$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@TT_Vary_Ge
; Line 1488
	mov	ecx, DWORD PTR _deltas$[ebp]
	mov	DWORD PTR [ecx], 0
$Exit$77:
; Line 1492
	mov	eax, DWORD PTR _error$[ebp]
$LN66@TT_Vary_Ge:
; Line 1493
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN76@TT_Vary_Ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 128				; 00000080H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN76@TT_Vary_Ge:
	DD	3
	DD	$LN75@TT_Vary_Ge
$LN75@TT_Vary_Ge:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN72@TT_Vary_Ge
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN73@TT_Vary_Ge
	DD	-84					; ffffffacH
	DD	4
	DD	$LN74@TT_Vary_Ge
$LN74@TT_Vary_Ge:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN73@TT_Vary_Ge:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN72@TT_Vary_Ge:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_TT_Vary_Get_Glyph_Deltas ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv247 = -108						; size = 4
_pindex$1 = -104					; size = 4
_apply$2 = -100						; size = 4
_tupleIndex$3 = -96					; size = 4
_tupleDataSize$4 = -92					; size = 4
_deltas$ = -88						; size = 4
_localpoints$ = -84					; size = 4
_point_count$ = -76					; size = 4
_blend$ = -68						; size = 4
_im_end_coords$ = -64					; size = 4
_im_start_coords$ = -60					; size = 4
_tuple_coords$ = -56					; size = 4
_j$ = -52						; size = 4
_i$ = -48						; size = 4
_here$ = -44						; size = 4
_offsetToData$ = -40					; size = 4
_tupleCount$ = -36					; size = 4
_table_len$ = -28					; size = 4
_table_start$ = -20					; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_vary_cvt PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgxvar.c
; Line 1101
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1103
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1110
	mov	DWORD PTR _tuple_coords$[ebp], 0
; Line 1111
	mov	DWORD PTR _im_start_coords$[ebp], 0
; Line 1112
	mov	DWORD PTR _im_end_coords$[ebp], 0
; Line 1113
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+676]
	mov	DWORD PTR _blend$[ebp], eax
$LN75@tt_face_va:
; Line 1119
	mov	ecx, 4
	shl	ecx, 5
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN74@tt_face_va
	push	OFFSET $SG14023
	call	_FT_Message
	add	esp, 4
$LN74@tt_face_va:
	xor	edx, edx
	jne	SHORT $LN75@tt_face_va
; Line 1121
	cmp	DWORD PTR _blend$[ebp], 0
	jne	SHORT $LN71@tt_face_va
$LN70@tt_face_va:
; Line 1123
	mov	eax, 4
	shl	eax, 5
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN69@tt_face_va
	push	OFFSET $SG14030
	call	_FT_Message
	add	esp, 4
$LN69@tt_face_va:
	xor	ecx, ecx
	jne	SHORT $LN70@tt_face_va
; Line 1125
	mov	DWORD PTR _error$[ebp], 0
; Line 1126
	jmp	$Exit$85
$LN71@tt_face_va:
; Line 1129
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+648], 0
	jne	SHORT $LN66@tt_face_va
$LN65@tt_face_va:
; Line 1131
	mov	eax, 4
	shl	eax, 5
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN64@tt_face_va
	push	OFFSET $SG14038
	call	_FT_Message
	add	esp, 4
$LN64@tt_face_va:
	xor	ecx, ecx
	jne	SHORT $LN65@tt_face_va
; Line 1133
	mov	DWORD PTR _error$[ebp], 0
; Line 1134
	jmp	$Exit$85
$LN66@tt_face_va:
; Line 1137
	mov	esi, esp
	lea	edx, DWORD PTR _table_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	1668702578				; 63766172H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1138
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN61@tt_face_va
$LN60@tt_face_va:
; Line 1140
	mov	ecx, 4
	shl	ecx, 5
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN59@tt_face_va
	push	OFFSET $SG14049
	call	_FT_Message
	add	esp, 4
$LN59@tt_face_va:
	xor	edx, edx
	jne	SHORT $LN60@tt_face_va
; Line 1142
	mov	DWORD PTR _error$[ebp], 0
; Line 1143
	jmp	$Exit$85
$LN61@tt_face_va:
; Line 1146
	mov	eax, DWORD PTR _table_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN56@tt_face_va
; Line 1148
	mov	DWORD PTR _error$[ebp], 0
; Line 1149
	jmp	$Exit$85
$LN56@tt_face_va:
; Line 1152
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _table_start$[ebp], ecx
; Line 1153
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetULong
	add	esp, 4
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN55@tt_face_va
$LN54@tt_face_va:
; Line 1155
	mov	eax, 4
	shl	eax, 5
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN53@tt_face_va
	push	OFFSET $SG14059
	call	_FT_Message
	add	esp, 4
$LN53@tt_face_va:
	xor	ecx, ecx
	jne	SHORT $LN54@tt_face_va
; Line 1157
	mov	DWORD PTR _error$[ebp], 0
; Line 1158
	jmp	$FExit$86
$LN55@tt_face_va:
; Line 1163
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _tuple_coords$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN49@tt_face_va
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _im_start_coords$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN49@tt_face_va
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _im_end_coords$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN50@tt_face_va
$LN49@tt_face_va:
; Line 1164
	jmp	$FExit$86
$LN50@tt_face_va:
; Line 1166
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR _tupleCount$[ebp], eax
; Line 1167
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	edx, ax
	add	edx, DWORD PTR _table_start$[ebp]
	mov	DWORD PTR _offsetToData$[ebp], edx
; Line 1173
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN48@tt_face_va
$LN47@tt_face_va:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN48@tt_face_va:
	mov	ecx, DWORD PTR _tupleCount$[ebp]
	and	ecx, 4095				; 00000fffH
	cmp	DWORD PTR _i$[ebp], ecx
	jae	$FExit$86
; Line 1180
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR _tupleDataSize$4[ebp], eax
; Line 1181
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	edx, ax
	mov	DWORD PTR _tupleIndex$3[ebp], edx
; Line 1186
	mov	eax, DWORD PTR _tupleIndex$3[ebp]
	and	eax, 32768				; 00008000H
	je	SHORT $LN45@tt_face_va
; Line 1188
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN44@tt_face_va
$LN43@tt_face_va:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN44@tt_face_va:
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN42@tt_face_va
; Line 1189
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	edx, ax
	shl	edx, 2
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _tuple_coords$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN43@tt_face_va
$LN42@tt_face_va:
; Line 1192
	jmp	SHORT $LN41@tt_face_va
$LN45@tt_face_va:
; Line 1196
	mov	edx, DWORD PTR _tupleIndex$3[ebp]
	and	edx, 16384				; 00004000H
	je	SHORT $LN40@tt_face_va
; Line 1197
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN39@tt_face_va
$LN38@tt_face_va:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN39@tt_face_va:
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 1
	cmp	DWORD PTR _j$[ebp], edx
	jae	SHORT $LN40@tt_face_va
; Line 1198
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	jmp	SHORT $LN38@tt_face_va
$LN40@tt_face_va:
; Line 1200
	mov	ecx, DWORD PTR _offsetToData$[ebp]
	add	ecx, DWORD PTR _tupleDataSize$4[ebp]
	mov	DWORD PTR _offsetToData$[ebp], ecx
; Line 1201
	jmp	$LN47@tt_face_va
$LN41@tt_face_va:
; Line 1204
	mov	edx, DWORD PTR _tupleIndex$3[ebp]
	and	edx, 16384				; 00004000H
	je	SHORT $LN36@tt_face_va
; Line 1206
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN35@tt_face_va
$LN34@tt_face_va:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN35@tt_face_va:
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN33@tt_face_va
; Line 1207
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	ecx, ax
	shl	ecx, 2
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _im_start_coords$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN34@tt_face_va
$LN33@tt_face_va:
; Line 1208
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN32@tt_face_va
$LN31@tt_face_va:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN32@tt_face_va:
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN36@tt_face_va
; Line 1209
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	edx, ax
	shl	edx, 2
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _im_end_coords$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN31@tt_face_va
$LN36@tt_face_va:
; Line 1216
	mov	edx, DWORD PTR _im_end_coords$[ebp]
	push	edx
	mov	eax, DWORD PTR _im_start_coords$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tuple_coords$[ebp]
	push	ecx
	movzx	edx, WORD PTR _tupleIndex$3[ebp]
	push	edx
	mov	eax, DWORD PTR _blend$[ebp]
	push	eax
	call	_ft_var_apply_tuple
	add	esp, 20					; 00000014H
	mov	DWORD PTR _apply$2[ebp], eax
; Line 1221
	cmp	DWORD PTR _apply$2[ebp], 0
	je	SHORT $LN28@tt_face_va
	mov	ecx, DWORD PTR _tupleIndex$3[ebp]
	and	ecx, 8192				; 00002000H
	jne	SHORT $LN29@tt_face_va
$LN28@tt_face_va:
; Line 1223
	mov	edx, DWORD PTR _offsetToData$[ebp]
	add	edx, DWORD PTR _tupleDataSize$4[ebp]
	mov	DWORD PTR _offsetToData$[ebp], edx
; Line 1224
	jmp	$LN47@tt_face_va
$LN29@tt_face_va:
; Line 1227
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [eax+32]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _here$[ebp], edx
; Line 1229
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offsetToData$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+32], ecx
; Line 1231
	lea	eax, DWORD PTR _point_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_ft_var_readpackedpoints
	add	esp, 8
	mov	DWORD PTR _localpoints$[ebp], eax
; Line 1234
	cmp	DWORD PTR _point_count$[ebp], 0
	jne	SHORT $LN78@tt_face_va
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+644]
	mov	DWORD PTR tv247[ebp], eax
	jmp	SHORT $LN79@tt_face_va
$LN78@tt_face_va:
	mov	ecx, DWORD PTR _point_count$[ebp]
	mov	DWORD PTR tv247[ebp], ecx
$LN79@tt_face_va:
	mov	edx, DWORD PTR tv247[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_ft_var_readpackeddeltas
	add	esp, 8
	mov	DWORD PTR _deltas$[ebp], eax
; Line 1235
	cmp	DWORD PTR _localpoints$[ebp], 0
	je	SHORT $LN26@tt_face_va
	cmp	DWORD PTR _deltas$[ebp], 0
	jne	SHORT $LN27@tt_face_va
$LN26@tt_face_va:
; Line 1238
	jmp	$LN25@tt_face_va
$LN27@tt_face_va:
	cmp	DWORD PTR _localpoints$[ebp], -1
	jne	SHORT $LN24@tt_face_va
; Line 1241
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN23@tt_face_va
$LN22@tt_face_va:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN23@tt_face_va:
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx+644]
	jae	SHORT $LN21@tt_face_va
; Line 1243
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	mov	eax, DWORD PTR _j$[ebp]
	movsx	esi, WORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _apply$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _deltas$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	add	esi, eax
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+648]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	WORD PTR [eax+ecx*2], si
	jmp	SHORT $LN22@tt_face_va
$LN21@tt_face_va:
; Line 1246
	jmp	SHORT $LN25@tt_face_va
$LN24@tt_face_va:
; Line 1248
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN19@tt_face_va
$LN18@tt_face_va:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN19@tt_face_va:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _point_count$[ebp]
	jae	SHORT $LN25@tt_face_va
; Line 1250
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _localpoints$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	DWORD PTR _pindex$1[ebp], eax
; Line 1253
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	mov	eax, DWORD PTR _pindex$1[ebp]
	movsx	esi, WORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _apply$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _deltas$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	add	esi, eax
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+648]
	mov	ecx, DWORD PTR _pindex$1[ebp]
	mov	WORD PTR [eax+ecx*2], si
; Line 1254
	jmp	SHORT $LN18@tt_face_va
$LN25@tt_face_va:
; Line 1257
	cmp	DWORD PTR _localpoints$[ebp], -1
	je	SHORT $LN12@tt_face_va
$LN15@tt_face_va:
; Line 1258
	mov	edx, DWORD PTR _localpoints$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _localpoints$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN15@tt_face_va
$LN12@tt_face_va:
; Line 1259
	mov	edx, DWORD PTR _deltas$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _deltas$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN12@tt_face_va
; Line 1261
	mov	edx, DWORD PTR _offsetToData$[ebp]
	add	edx, DWORD PTR _tupleDataSize$4[ebp]
	mov	DWORD PTR _offsetToData$[ebp], edx
; Line 1263
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _here$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+32], ecx
; Line 1264
	jmp	$LN47@tt_face_va
$FExit$86:
; Line 1267
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
$Exit$85:
; Line 1270
	mov	ecx, DWORD PTR _tuple_coords$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _tuple_coords$[ebp], 0
	xor	eax, eax
	jne	SHORT $Exit$85
$LN6@tt_face_va:
; Line 1271
	mov	ecx, DWORD PTR _im_start_coords$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _im_start_coords$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN6@tt_face_va
$LN3@tt_face_va:
; Line 1272
	mov	ecx, DWORD PTR _im_end_coords$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _im_end_coords$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@tt_face_va
; Line 1274
	mov	eax, DWORD PTR _error$[ebp]
; Line 1275
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN84@tt_face_va
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN84@tt_face_va:
	DD	3
	DD	$LN83@tt_face_va
$LN83@tt_face_va:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN80@tt_face_va
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN81@tt_face_va
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN82@tt_face_va
$LN82@tt_face_va:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN81@tt_face_va:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN80@tt_face_va:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_tt_face_vary_cvt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$1 = -124						; size = 4
_axis_rec$2 = -116					; size = 20
_fvar_head$ = -88					; size = 16
_ns$ = -68						; size = 4
_a$ = -64						; size = 4
_next_name$ = -60					; size = 4
_next_coords$ = -56					; size = 4
_mmvar$ = -52						; size = 4
_j$ = -48						; size = 4
_i$ = -44						; size = 4
_fvar_start$ = -40					; size = 4
_error$ = -32						; size = 4
_table_len$ = -20					; size = 4
_memory$ = -12						; size = 4
_stream$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_master$ = 12						; size = 4
_TT_Get_MM_Var PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgxvar.c
; Line 611
	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 31					; 0000001fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 612
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 613
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$[ebp], eax
; Line 615
	mov	DWORD PTR _error$[ebp], 0
; Line 618
	mov	DWORD PTR _mmvar$[ebp], 0
; Line 659
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+676], 0
	jne	$LN41@TT_Get_MM_
; Line 663
	mov	esi, esp
	lea	edx, DWORD PTR _table_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	1735811442				; 67766172H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN40@TT_Get_MM_
; Line 664
	jmp	$Exit$50
$LN40@TT_Get_MM_:
; Line 667
	mov	esi, esp
	lea	ecx, DWORD PTR _table_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	1719034226				; 66766172H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN39@TT_Get_MM_
; Line 668
	jmp	$Exit$50
$LN39@TT_Get_MM_:
; Line 670
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _fvar_start$[ebp], eax
; Line 672
	lea	ecx, DWORD PTR _fvar_head$[ebp]
	push	ecx
	push	OFFSET ?fvar_fields@?1??TT_Get_MM_Var@@9@9
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN38@TT_Get_MM_
; Line 673
	jmp	$Exit$50
$LN38@TT_Get_MM_:
; Line 684
	cmp	DWORD PTR _fvar_head$[ebp], 65536	; 00010000H
	jne	SHORT $LN36@TT_Get_MM_
	movzx	eax, WORD PTR _fvar_head$[ebp+6]
	cmp	eax, 2
	jne	SHORT $LN36@TT_Get_MM_
	movzx	ecx, WORD PTR _fvar_head$[ebp+10]
	cmp	ecx, 20					; 00000014H
	jne	SHORT $LN36@TT_Get_MM_
	movzx	edx, WORD PTR _fvar_head$[ebp+8]
	cmp	edx, 16382				; 00003ffeH
	jg	SHORT $LN36@TT_Get_MM_
	movzx	eax, WORD PTR _fvar_head$[ebp+14]
	movzx	ecx, WORD PTR _fvar_head$[ebp+8]
	lea	edx, DWORD PTR [ecx*4+4]
	cmp	eax, edx
	jne	SHORT $LN36@TT_Get_MM_
	movzx	eax, WORD PTR _fvar_head$[ebp+12]
	cmp	eax, 32511				; 00007effH
	jg	SHORT $LN36@TT_Get_MM_
	movzx	ecx, WORD PTR _fvar_head$[ebp+4]
	movzx	edx, WORD PTR _fvar_head$[ebp+8]
	imul	eax, edx, 20
	add	ecx, eax
	movzx	edx, WORD PTR _fvar_head$[ebp+12]
	movzx	eax, WORD PTR _fvar_head$[ebp+14]
	imul	edx, eax
	add	ecx, edx
	cmp	ecx, DWORD PTR _table_len$[ebp]
	jbe	SHORT $LN37@TT_Get_MM_
$LN36@TT_Get_MM_:
; Line 686
	push	OFFSET $SG13793
	push	686					; 000002aeH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 687
	jmp	$Exit$50
$LN37@TT_Get_MM_:
; Line 690
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	40					; 00000028H
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+676], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN35@TT_Get_MM_
; Line 691
	jmp	$Exit$50
$LN35@TT_Get_MM_:
; Line 699
	movzx	edx, WORD PTR _fvar_head$[ebp+8]
	imul	eax, edx, 24
	movzx	ecx, WORD PTR _fvar_head$[ebp+12]
	lea	edx, DWORD PTR [eax+ecx*8+20]
	movzx	eax, WORD PTR _fvar_head$[ebp+12]
	movzx	ecx, WORD PTR _fvar_head$[ebp+8]
	imul	eax, ecx
	lea	edx, DWORD PTR [edx+eax*4]
	movzx	eax, WORD PTR _fvar_head$[ebp+8]
	imul	ecx, eax, 5
	add	edx, ecx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+676]
	mov	DWORD PTR [ecx+12], edx
; Line 701
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+676]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _mmvar$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN34@TT_Get_MM_
; Line 702
	jmp	$Exit$50
$LN34@TT_Get_MM_:
; Line 703
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+676]
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 706
	movzx	ecx, WORD PTR _fvar_head$[ebp+8]
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 708
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [eax+4], -1
; Line 712
	movzx	ecx, WORD PTR _fvar_head$[ebp+12]
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 714
	mov	eax, 20					; 00000014H
	shl	eax, 0
	add	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 716
	movzx	edx, WORD PTR _fvar_head$[ebp+8]
	imul	eax, edx, 24
	mov	ecx, DWORD PTR _mmvar$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 719
	movzx	eax, WORD PTR _fvar_head$[ebp+12]
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _next_coords$[ebp], eax
; Line 720
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN33@TT_Get_MM_
$LN32@TT_Get_MM_:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN33@TT_Get_MM_:
	movzx	edx, WORD PTR _fvar_head$[ebp+12]
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN31@TT_Get_MM_
; Line 722
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _next_coords$[ebp]
	mov	DWORD PTR [ecx+edx*8], eax
; Line 723
	movzx	ecx, WORD PTR _fvar_head$[ebp+8]
	mov	edx, DWORD PTR _next_coords$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _next_coords$[ebp], eax
; Line 724
	jmp	SHORT $LN32@TT_Get_MM_
$LN31@TT_Get_MM_:
; Line 726
	mov	ecx, DWORD PTR _next_coords$[ebp]
	mov	DWORD PTR _next_name$[ebp], ecx
; Line 727
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN30@TT_Get_MM_
$LN29@TT_Get_MM_:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN30@TT_Get_MM_:
	movzx	eax, WORD PTR _fvar_head$[ebp+8]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN28@TT_Get_MM_
; Line 729
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _next_name$[ebp]
	mov	DWORD PTR [eax+ecx], edx
; Line 730
	mov	eax, DWORD PTR _next_name$[ebp]
	add	eax, 5
	mov	DWORD PTR _next_name$[ebp], eax
; Line 731
	jmp	SHORT $LN29@TT_Get_MM_
$LN28@TT_Get_MM_:
; Line 733
	movzx	ecx, WORD PTR _fvar_head$[ebp+4]
	add	ecx, DWORD PTR _fvar_start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN27@TT_Get_MM_
; Line 734
	jmp	$Exit$50
$LN27@TT_Get_MM_:
; Line 736
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _a$[ebp], ecx
; Line 737
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN26@TT_Get_MM_
$LN25@TT_Get_MM_:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN26@TT_Get_MM_:
	movzx	eax, WORD PTR _fvar_head$[ebp+8]
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN24@TT_Get_MM_
; Line 742
	lea	ecx, DWORD PTR _axis_rec$2[ebp]
	push	ecx
	push	OFFSET ?fvaraxis_fields@?1??TT_Get_MM_Var@@9@9
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN23@TT_Get_MM_
; Line 743
	jmp	$Exit$50
$LN23@TT_Get_MM_:
; Line 744
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _axis_rec$2[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 745
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _axis_rec$2[ebp+4]
	mov	DWORD PTR [edx+4], eax
; Line 746
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _axis_rec$2[ebp+8]
	mov	DWORD PTR [ecx+8], edx
; Line 747
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _axis_rec$2[ebp+12]
	mov	DWORD PTR [eax+12], ecx
; Line 748
	movzx	edx, WORD PTR _axis_rec$2[ebp+18]
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+20], edx
; Line 750
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 24					; 00000018H
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	BYTE PTR [ecx+eax], dl
; Line 751
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	BYTE PTR [eax+ecx], dl
; Line 752
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+16]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	BYTE PTR [ecx+edx], al
; Line 753
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 255				; 000000ffH
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	BYTE PTR [eax+edx], cl
; Line 754
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [eax+edx], 0
; Line 756
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _a$[ebp], eax
; Line 757
	jmp	$LN25@TT_Get_MM_
$LN24@TT_Get_MM_:
; Line 759
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _ns$[ebp], edx
; Line 760
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN22@TT_Get_MM_
$LN21@TT_Get_MM_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _ns$[ebp]
	add	ecx, 8
	mov	DWORD PTR _ns$[ebp], ecx
$LN22@TT_Get_MM_:
	movzx	edx, WORD PTR _fvar_head$[ebp+12]
	cmp	DWORD PTR _i$[ebp], edx
	jge	$LN41@TT_Get_MM_
; Line 762
	movzx	eax, WORD PTR _fvar_head$[ebp+8]
	lea	ecx, DWORD PTR [eax*4+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@TT_Get_MM_
; Line 763
	jmp	$Exit$50
$LN19@TT_Get_MM_:
; Line 765
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	ecx, ax
	mov	edx, DWORD PTR _ns$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 766
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
; Line 768
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN18@TT_Get_MM_
$LN17@TT_Get_MM_:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN18@TT_Get_MM_:
	movzx	edx, WORD PTR _fvar_head$[ebp+8]
	cmp	DWORD PTR _j$[ebp], edx
	jge	SHORT $LN16@TT_Get_MM_
; Line 769
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN17@TT_Get_MM_
$LN16@TT_Get_MM_:
; Line 771
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 772
	jmp	$LN21@TT_Get_MM_
$LN41@TT_Get_MM_:
; Line 775
	cmp	DWORD PTR _master$[ebp], 0
	je	$Exit$50
; Line 780
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+676]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _mmvar$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@TT_Get_MM_
; Line 781
	jmp	$Exit$50
$LN14@TT_Get_MM_:
; Line 782
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+676]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+676]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _mmvar$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 785
	mov	eax, 20					; 00000014H
	shl	eax, 0
	add	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 787
	mov	edx, DWORD PTR _mmvar$[ebp]
	imul	eax, DWORD PTR [edx], 24
	mov	ecx, DWORD PTR _mmvar$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 789
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR [edx+16]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _next_coords$[ebp], ecx
; Line 791
	mov	DWORD PTR _n$1[ebp], 0
	jmp	SHORT $LN13@TT_Get_MM_
$LN12@TT_Get_MM_:
	mov	edx, DWORD PTR _n$1[ebp]
	add	edx, 1
	mov	DWORD PTR _n$1[ebp], edx
$LN13@TT_Get_MM_:
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR _n$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN11@TT_Get_MM_
; Line 793
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _n$1[ebp]
	mov	edx, DWORD PTR _next_coords$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
; Line 794
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _next_coords$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _next_coords$[ebp], eax
; Line 795
	jmp	SHORT $LN12@TT_Get_MM_
$LN11@TT_Get_MM_:
; Line 797
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _a$[ebp], edx
; Line 798
	mov	eax, DWORD PTR _next_coords$[ebp]
	mov	DWORD PTR _next_name$[ebp], eax
; Line 799
	mov	DWORD PTR _n$1[ebp], 0
	jmp	SHORT $LN10@TT_Get_MM_
$LN9@TT_Get_MM_:
	mov	ecx, DWORD PTR _n$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$1[ebp], ecx
$LN10@TT_Get_MM_:
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR _n$1[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN8@TT_Get_MM_
; Line 801
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _next_name$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 804
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax+16], 2003265652		; 77676874H
	jne	SHORT $LN7@TT_Get_MM_
; Line 805
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], OFFSET $SG13857
	jmp	SHORT $LN6@TT_Get_MM_
$LN7@TT_Get_MM_:
; Line 806
	mov	edx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [edx+16], 2003072104		; 77647468H
	jne	SHORT $LN5@TT_Get_MM_
; Line 807
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], OFFSET $SG13866
	jmp	SHORT $LN6@TT_Get_MM_
$LN5@TT_Get_MM_:
; Line 808
	mov	ecx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [ecx+16], 1869640570		; 6f70737aH
	jne	SHORT $LN3@TT_Get_MM_
; Line 809
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx], OFFSET $SG13875
	jmp	SHORT $LN6@TT_Get_MM_
$LN3@TT_Get_MM_:
; Line 810
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax+16], 1936486004		; 736c6e74H
	jne	SHORT $LN6@TT_Get_MM_
; Line 811
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], OFFSET $SG13884
$LN6@TT_Get_MM_:
; Line 813
	mov	edx, DWORD PTR _next_name$[ebp]
	add	edx, 5
	mov	DWORD PTR _next_name$[ebp], edx
; Line 814
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _a$[ebp], eax
; Line 815
	jmp	$LN9@TT_Get_MM_
$LN8@TT_Get_MM_:
; Line 817
	mov	ecx, DWORD PTR _master$[ebp]
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [ecx], edx
$Exit$50:
; Line 821
	mov	eax, DWORD PTR _error$[ebp]
; Line 822
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN49@TT_Get_MM_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN49@TT_Get_MM_:
	DD	4
	DD	$LN48@TT_Get_MM_
$LN48@TT_Get_MM_:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN44@TT_Get_MM_
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN45@TT_Get_MM_
	DD	-88					; ffffffa8H
	DD	16					; 00000010H
	DD	$LN46@TT_Get_MM_
	DD	-116					; ffffff8cH
	DD	20					; 00000014H
	DD	$LN47@TT_Get_MM_
$LN47@TT_Get_MM_:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN46@TT_Get_MM_:
	DB	102					; 00000066H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN45@TT_Get_MM_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN44@TT_Get_MM_:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_TT_Get_MM_Var ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -44						; size = 4
_av$ = -40						; size = 4
_a$ = -36						; size = 4
_j$ = -32						; size = 4
_i$ = -28						; size = 4
_mmvar$ = -24						; size = 4
_blend$ = -20						; size = 4
_normalized$ = -16					; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_num_coords$ = 12					; size = 4
_coords$ = 16						; size = 4
_TT_Set_Var_Design PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgxvar.c
; Line 987
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 988
	mov	DWORD PTR _error$[ebp], 0
; Line 989
	mov	DWORD PTR _normalized$[ebp], 0
; Line 995
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 998
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+676], 0
	jne	SHORT $LN25@TT_Set_Var
; Line 1000
	push	0
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_TT_Get_MM_Var
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN25@TT_Set_Var
; Line 1001
	jmp	$Exit$31
$LN25@TT_Set_Var:
; Line 1004
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+676]
	mov	DWORD PTR _blend$[ebp], edx
; Line 1005
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mmvar$[ebp], ecx
; Line 1007
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR _num_coords$[ebp]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN23@TT_Set_Var
; Line 1009
	push	OFFSET $SG13966
	push	1009					; 000003f1H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 1010
	jmp	$Exit$31
$LN23@TT_Set_Var:
; Line 1017
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _normalized$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN22@TT_Set_Var
; Line 1018
	jmp	$Exit$31
$LN22@TT_Set_Var:
; Line 1020
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _a$[ebp], eax
; Line 1021
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@TT_Set_Var
$LN20@TT_Set_Var:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _a$[ebp], edx
$LN21@TT_Set_Var:
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	$LN19@TT_Set_Var
; Line 1023
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _coords$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	cmp	edx, DWORD PTR [ecx+12]
	jg	SHORT $LN17@TT_Set_Var
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _coords$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $LN18@TT_Set_Var
$LN17@TT_Set_Var:
; Line 1025
	push	OFFSET $SG13975
	push	1025					; 00000401H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 1026
	jmp	$Exit$31
$LN18@TT_Set_Var:
; Line 1029
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _coords$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN16@TT_Set_Var
; Line 1030
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _coords$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	sub	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	neg	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _normalized$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN15@TT_Set_Var
$LN16@TT_Set_Var:
; Line 1031
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN14@TT_Set_Var
; Line 1032
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _normalized$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
; Line 1033
	jmp	SHORT $LN15@TT_Set_Var
$LN14@TT_Set_Var:
; Line 1034
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _coords$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	sub	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _normalized$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN15@TT_Set_Var:
; Line 1035
	jmp	$LN20@TT_Set_Var
$LN19@TT_Set_Var:
; Line 1037
	mov	eax, DWORD PTR _blend$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN12@TT_Set_Var
; Line 1038
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_ft_var_load_avar
	add	esp, 4
$LN12@TT_Set_Var:
; Line 1040
	mov	eax, DWORD PTR _blend$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN11@TT_Set_Var
; Line 1042
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _av$[ebp], edx
; Line 1043
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@TT_Set_Var
$LN9@TT_Set_Var:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _av$[ebp]
	add	ecx, 8
	mov	DWORD PTR _av$[ebp], ecx
$LN10@TT_Set_Var:
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	$LN11@TT_Set_Var
; Line 1045
	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN7@TT_Set_Var
$LN6@TT_Set_Var:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN7@TT_Set_Var:
	mov	edx, DWORD PTR _av$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	DWORD PTR _j$[ebp], eax
	jae	$LN5@TT_Set_Var
; Line 1046
	mov	ecx, DWORD PTR _av$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _normalized$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [edx+esi*8]
	jge	SHORT $LN4@TT_Set_Var
; Line 1054
	mov	ecx, DWORD PTR _av$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _av$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [edx+eax*8]
	sub	edx, DWORD PTR [ecx+esi*8-8]
	push	edx
	mov	eax, DWORD PTR _av$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _av$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	sub	ecx, DWORD PTR [eax+esi*8-4]
	push	ecx
	mov	edx, DWORD PTR _av$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _normalized$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	sub	ecx, DWORD PTR [eax+esi*8-8]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _av$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR [ecx+edx*8-4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _normalized$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 1055
	jmp	SHORT $LN5@TT_Set_Var
$LN4@TT_Set_Var:
; Line 1057
	jmp	$LN6@TT_Set_Var
$LN5@TT_Set_Var:
	jmp	$LN9@TT_Set_Var
$LN11@TT_Set_Var:
; Line 1060
	mov	eax, DWORD PTR _normalized$[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_coords$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_TT_Set_MM_Blend
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$Exit$31:
; Line 1063
	mov	eax, DWORD PTR _normalized$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _normalized$[ebp], 0
	xor	edx, edx
	jne	SHORT $Exit$31
; Line 1064
	mov	eax, DWORD PTR _error$[ebp]
; Line 1065
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@TT_Set_Var
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN30@TT_Set_Var:
	DD	1
	DD	$LN29@TT_Set_Var
$LN29@TT_Set_Var:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN28@TT_Set_Var
$LN28@TT_Set_Var:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_TT_Set_Var_Design ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv159 = -36						; size = 4
_manageCvt$ = -32					; size = 4
_memory$ = -28						; size = 4
_i$ = -24						; size = 4
_mmvar$ = -20						; size = 4
_blend$ = -16						; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_num_coords$ = 12					; size = 4
_coords$ = 16						; size = 4
_TT_Set_MM_Blend PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgxvar.c
; Line 851
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 852
	mov	DWORD PTR _error$[ebp], 0
; Line 856
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 867
	mov	edx, DWORD PTR _face$[ebp]
	mov	BYTE PTR [edx+672], 0
; Line 869
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+676], 0
	jne	SHORT $LN26@TT_Set_MM_
; Line 871
	push	0
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_TT_Get_MM_Var
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN26@TT_Set_MM_
; Line 872
	jmp	$Exit$32
$LN26@TT_Set_MM_:
; Line 875
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+676]
	mov	DWORD PTR _blend$[ebp], eax
; Line 876
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _mmvar$[ebp], edx
; Line 878
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR _num_coords$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN24@TT_Set_MM_
; Line 880
	push	OFFSET $SG13908
	push	880					; 00000370H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 881
	jmp	$Exit$32
$LN24@TT_Set_MM_:
; Line 884
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@TT_Set_MM_
$LN22@TT_Set_MM_:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN23@TT_Set_MM_:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_coords$[ebp]
	jae	SHORT $LN21@TT_Set_MM_
; Line 885
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _coords$[ebp]
	cmp	DWORD PTR [edx+ecx*4], -65536		; ffff0000H
	jl	SHORT $LN19@TT_Set_MM_
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _coords$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 65536		; 00010000H
	jle	SHORT $LN20@TT_Set_MM_
$LN19@TT_Set_MM_:
; Line 887
	push	OFFSET $SG13914
	push	887					; 00000377H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 888
	jmp	$Exit$32
$LN20@TT_Set_MM_:
; Line 889
	jmp	SHORT $LN22@TT_Set_MM_
$LN21@TT_Set_MM_:
; Line 891
	mov	edx, DWORD PTR _blend$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN18@TT_Set_MM_
; Line 892
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_ft_var_load_gvar
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@TT_Set_MM_
; Line 893
	jmp	$Exit$32
$LN18@TT_Set_MM_:
; Line 895
	mov	ecx, DWORD PTR _blend$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN16@TT_Set_MM_
; Line 897
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _num_coords$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@TT_Set_MM_
; Line 898
	jmp	$Exit$32
$LN15@TT_Set_MM_:
; Line 900
	mov	DWORD PTR _manageCvt$[ebp], 1
; Line 906
	jmp	SHORT $LN14@TT_Set_MM_
$LN16@TT_Set_MM_:
; Line 908
	mov	DWORD PTR _manageCvt$[ebp], 0
; Line 909
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@TT_Set_MM_
$LN12@TT_Set_MM_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@TT_Set_MM_:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _num_coords$[ebp]
	jae	SHORT $LN14@TT_Set_MM_
; Line 911
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _coords$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	je	SHORT $LN10@TT_Set_MM_
; Line 913
	mov	DWORD PTR _manageCvt$[ebp], 2
; Line 914
	jmp	SHORT $LN14@TT_Set_MM_
$LN10@TT_Set_MM_:
; Line 916
	jmp	SHORT $LN12@TT_Set_MM_
$LN14@TT_Set_MM_:
; Line 924
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR _num_coords$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 927
	mov	eax, DWORD PTR _num_coords$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _coords$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 929
	mov	ecx, DWORD PTR _face$[ebp]
	mov	BYTE PTR [ecx+672], 1
; Line 931
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+648], 0
	je	SHORT $Exit$32
; Line 933
	mov	eax, DWORD PTR _manageCvt$[ebp]
	mov	DWORD PTR tv159[ebp], eax
	cmp	DWORD PTR tv159[ebp], 1
	je	SHORT $LN2@TT_Set_MM_
	cmp	DWORD PTR tv159[ebp], 2
	je	SHORT $LN5@TT_Set_MM_
	jmp	SHORT $Exit$32
$LN5@TT_Set_MM_:
; Line 938
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+648], 0
	xor	edx, edx
	jne	SHORT $LN5@TT_Set_MM_
; Line 939
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+648], 0
; Line 941
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_load_cvt
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 942
	jmp	SHORT $Exit$32
$LN2@TT_Set_MM_:
; Line 947
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_vary_cvt
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$Exit$32:
; Line 957
	mov	eax, DWORD PTR _error$[ebp]
; Line 958
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@TT_Set_MM_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN31@TT_Set_MM_:
	DD	1
	DD	$LN30@TT_Set_MM_
$LN30@TT_Set_MM_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN29@TT_Set_MM_
$LN29@TT_Set_MM_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_TT_Set_MM_Blend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_record$ = -16						; size = 4
_record_size$ = -12					; size = 4
_result$ = -8						; size = 4
_nn$ = -4						; size = 4
_face$ = 8						; size = 4
_ppem$ = 12						; size = 4
_gindex$ = 16						; size = 4
_tt_face_get_device_metrics PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttpload.c
; Line 581
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 583
	mov	DWORD PTR _result$[ebp], 0
; Line 584
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+716]
	mov	DWORD PTR _record_size$[ebp], ecx
; Line 585
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+704]
	add	eax, 8
	mov	DWORD PTR _record$[ebp], eax
; Line 588
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN5@tt_face_ge
$LN4@tt_face_ge:
	mov	ecx, DWORD PTR _nn$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$[ebp], ecx
$LN5@tt_face_ge:
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _nn$[ebp]
	cmp	eax, DWORD PTR [edx+712]
	jae	SHORT $LN3@tt_face_ge
; Line 589
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+720]
	mov	eax, DWORD PTR _nn$[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	cmp	ecx, DWORD PTR _ppem$[ebp]
	jne	SHORT $LN2@tt_face_ge
; Line 591
	mov	edx, DWORD PTR _gindex$[ebp]
	add	edx, 2
	mov	DWORD PTR _gindex$[ebp], edx
; Line 592
	mov	eax, DWORD PTR _gindex$[ebp]
	cmp	eax, DWORD PTR _record_size$[ebp]
	jae	SHORT $LN1@tt_face_ge
; Line 593
	mov	ecx, DWORD PTR _nn$[ebp]
	imul	ecx, DWORD PTR _record_size$[ebp]
	add	ecx, DWORD PTR _record$[ebp]
	add	ecx, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR _result$[ebp], ecx
$LN1@tt_face_ge:
; Line 594
	jmp	SHORT $LN3@tt_face_ge
$LN2@tt_face_ge:
; Line 595
	jmp	SHORT $LN4@tt_face_ge
$LN3@tt_face_ge:
; Line 597
	mov	eax, DWORD PTR _result$[ebp]
; Line 598
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_get_device_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_stream$ = -4						; size = 4
_face$ = 8						; size = 4
_tt_face_free_hdmx PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttpload.c
; Line 562
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 563
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 564
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _memory$[ebp], eax
$LN3@tt_face_fr:
; Line 567
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+720]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+720], 0
	xor	edx, edx
	jne	SHORT $LN3@tt_face_fr
; Line 568
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 704				; 000002c0H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 569
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_free_hdmx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$ = -52						; size = 4
_p$ = -48						; size = 4
_record_size$ = -44					; size = 4
_table_size$ = -36					; size = 4
_num_records$ = -28					; size = 4
_nn$ = -24						; size = 4
_version$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_hdmx PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttpload.c
; Line 486
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 488
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 496
	mov	esi, esp
	lea	edx, DWORD PTR _table_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	1751412088				; 68646d78H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 497
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN10@tt_face_lo
	cmp	DWORD PTR _table_size$[ebp], 8
	jae	SHORT $LN11@tt_face_lo
$LN10@tt_face_lo:
; Line 498
	xor	eax, eax
	jmp	$LN12@tt_face_lo
$LN11@tt_face_lo:
; Line 500
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 704				; 000002c0H
	push	ecx
	mov	edx, DWORD PTR _table_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@tt_face_lo
; Line 501
	jmp	$Exit$18
$LN9@tt_face_lo:
; Line 503
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+704]
	mov	DWORD PTR _p$[ebp], edx
; Line 504
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _table_size$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 506
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _version$[ebp], ecx
; Line 507
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _num_records$[ebp], edx
; Line 508
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _record_size$[ebp], ecx
; Line 521
	cmp	DWORD PTR _record_size$[ebp], -65536	; ffff0000H
	jb	SHORT $LN8@tt_face_lo
; Line 522
	mov	ecx, DWORD PTR _record_size$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _record_size$[ebp], ecx
$LN8@tt_face_lo:
; Line 528
	cmp	DWORD PTR _version$[ebp], 0
	jne	SHORT $LN6@tt_face_lo
	cmp	DWORD PTR _num_records$[ebp], 255	; 000000ffH
	ja	SHORT $LN6@tt_face_lo
	cmp	DWORD PTR _record_size$[ebp], 65537	; 00010001H
	ja	SHORT $LN6@tt_face_lo
	cmp	DWORD PTR _record_size$[ebp], 4
	jae	SHORT $LN7@tt_face_lo
$LN6@tt_face_lo:
; Line 530
	push	OFFSET $SG9245
	push	530					; 00000212H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 531
	jmp	$Fail$19
$LN7@tt_face_lo:
; Line 534
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _num_records$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+720], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@tt_face_lo
; Line 535
	jmp	SHORT $Fail$19
$LN5@tt_face_lo:
; Line 537
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN4@tt_face_lo
$LN3@tt_face_lo:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN4@tt_face_lo:
	mov	ecx, DWORD PTR _nn$[ebp]
	cmp	ecx, DWORD PTR _num_records$[ebp]
	jae	SHORT $LN2@tt_face_lo
; Line 539
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _record_size$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN1@tt_face_lo
; Line 540
	jmp	SHORT $LN2@tt_face_lo
$LN1@tt_face_lo:
; Line 542
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+720]
	mov	edx, DWORD PTR _nn$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [eax+edx], cl
; Line 543
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _record_size$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 544
	jmp	SHORT $LN3@tt_face_lo
$LN2@tt_face_lo:
; Line 546
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _nn$[ebp]
	mov	DWORD PTR [eax+712], ecx
; Line 547
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _table_size$[ebp]
	mov	DWORD PTR [edx+708], eax
; Line 548
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _record_size$[ebp]
	mov	DWORD PTR [ecx+716], edx
$Exit$18:
; Line 551
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN12@tt_face_lo
$Fail$19:
; Line 554
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 704				; 000002c0H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 555
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+708], 0
; Line 556
	jmp	SHORT $Exit$18
$LN12@tt_face_lo:
; Line 557
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@tt_face_lo:
	DD	2
	DD	$LN16@tt_face_lo
$LN16@tt_face_lo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN14@tt_face_lo
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN15@tt_face_lo
$LN15@tt_face_lo:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN14@tt_face_lo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_tt_face_load_hdmx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_table_len$ = -12					; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_prep PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttpload.c
; Line 425
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN15@tt_face_lo:
; Line 432
	mov	eax, 4
	imul	ecx, eax, 31
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN14@tt_face_lo
	push	OFFSET $SG9172
	call	_FT_Message
	add	esp, 4
$LN14@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN15@tt_face_lo
; Line 434
	mov	esi, esp
	lea	eax, DWORD PTR _table_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1886545264				; 70726570H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 435
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@tt_face_lo
; Line 437
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+640], 0
; Line 438
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+636], 0
; Line 439
	mov	DWORD PTR _error$[ebp], 0
$LN10@tt_face_lo:
; Line 441
	mov	ecx, 4
	imul	edx, ecx, 31
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN9@tt_face_lo
	push	OFFSET $SG9184
	call	_FT_Message
	add	esp, 4
$LN9@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN10@tt_face_lo
; Line 443
	jmp	SHORT $Exit$21
$LN11@tt_face_lo:
; Line 445
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _table_len$[ebp]
	mov	DWORD PTR [ecx+636], edx
; Line 446
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 640				; 00000280H
	push	eax
	mov	ecx, DWORD PTR _table_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@tt_face_lo
; Line 447
	jmp	SHORT $Exit$21
$LN4@tt_face_lo:
; Line 449
	mov	eax, 4
	imul	ecx, eax, 31
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN3@tt_face_lo
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+636]
	push	eax
	push	OFFSET $SG9194
	call	_FT_Message
	add	esp, 8
$LN3@tt_face_lo:
	xor	ecx, ecx
	jne	SHORT $LN4@tt_face_lo
$Exit$21:
; Line 453
	mov	eax, DWORD PTR _error$[ebp]
; Line 463
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@tt_face_lo:
	DD	1
	DD	$LN19@tt_face_lo
$LN19@tt_face_lo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN18@tt_face_lo
$LN18@tt_face_lo:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_tt_face_load_prep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_table_len$ = -12					; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_fpgm PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttpload.c
; Line 363
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN15@tt_face_lo:
; Line 370
	mov	eax, 4
	imul	ecx, eax, 31
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN14@tt_face_lo
	push	OFFSET $SG9138
	call	_FT_Message
	add	esp, 4
$LN14@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN15@tt_face_lo
; Line 373
	mov	esi, esp
	lea	eax, DWORD PTR _table_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1718642541				; 6670676dH
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 374
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@tt_face_lo
; Line 376
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+632], 0
; Line 377
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+628], 0
; Line 378
	mov	DWORD PTR _error$[ebp], 0
$LN10@tt_face_lo:
; Line 380
	mov	ecx, 4
	imul	edx, ecx, 31
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN9@tt_face_lo
	push	OFFSET $SG9150
	call	_FT_Message
	add	esp, 4
$LN9@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN10@tt_face_lo
; Line 382
	jmp	SHORT $Exit$21
$LN11@tt_face_lo:
; Line 384
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _table_len$[ebp]
	mov	DWORD PTR [ecx+628], edx
; Line 385
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 632				; 00000278H
	push	eax
	mov	ecx, DWORD PTR _table_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@tt_face_lo
; Line 386
	jmp	SHORT $Exit$21
$LN4@tt_face_lo:
; Line 388
	mov	eax, 4
	imul	ecx, eax, 31
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN3@tt_face_lo
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+628]
	push	eax
	push	OFFSET $SG9160
	call	_FT_Message
	add	esp, 8
$LN3@tt_face_lo:
	xor	ecx, ecx
	jne	SHORT $LN4@tt_face_lo
$Exit$21:
; Line 392
	mov	eax, DWORD PTR _error$[ebp]
; Line 402
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@tt_face_lo:
	DD	1
	DD	$LN19@tt_face_lo
$LN19@tt_face_lo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN18@tt_face_lo
$LN18@tt_face_lo:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_tt_face_load_fpgm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$1 = -36						; size = 4
_cur$2 = -32						; size = 4
_table_len$ = -24					; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_cvt PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttpload.c
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 286
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
$LN19@tt_face_lo:
; Line 290
	mov	edx, 4
	imul	eax, edx, 31
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN18@tt_face_lo
	push	OFFSET $SG9096
	call	_FT_Message
	add	esp, 4
$LN18@tt_face_lo:
	xor	ecx, ecx
	jne	SHORT $LN19@tt_face_lo
; Line 292
	mov	esi, esp
	lea	edx, DWORD PTR _table_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	1668707360				; 63767420H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 293
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@tt_face_lo
$LN14@tt_face_lo:
; Line 295
	mov	ecx, 4
	imul	edx, ecx, 31
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN13@tt_face_lo
	push	OFFSET $SG9107
	call	_FT_Message
	add	esp, 4
$LN13@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN14@tt_face_lo
; Line 297
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+644], 0
; Line 298
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+648], 0
; Line 299
	mov	DWORD PTR _error$[ebp], 0
; Line 301
	jmp	$Exit$26
$LN15@tt_face_lo:
; Line 304
	mov	eax, DWORD PTR _table_len$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+644], eax
; Line 306
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+644]
	push	ecx
	push	0
	push	2
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+648], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@tt_face_lo
; Line 307
	jmp	$Exit$26
$LN10@tt_face_lo:
; Line 309
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+644]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@tt_face_lo
; Line 310
	jmp	$Exit$26
$LN9@tt_face_lo:
; Line 313
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+648]
	mov	DWORD PTR _cur$2[ebp], eax
; Line 314
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+644]
	mov	eax, DWORD PTR _cur$2[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _limit$1[ebp], ecx
; Line 317
	jmp	SHORT $LN8@tt_face_lo
$LN7@tt_face_lo:
	mov	edx, DWORD PTR _cur$2[ebp]
	add	edx, 2
	mov	DWORD PTR _cur$2[ebp], edx
$LN8@tt_face_lo:
	mov	eax, DWORD PTR _cur$2[ebp]
	cmp	eax, DWORD PTR _limit$1[ebp]
	jae	SHORT $LN6@tt_face_lo
; Line 318
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	edx, DWORD PTR _cur$2[ebp]
	mov	WORD PTR [edx], ax
	jmp	SHORT $LN7@tt_face_lo
$LN6@tt_face_lo:
; Line 321
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
$LN5@tt_face_lo:
; Line 322
	mov	ecx, 4
	imul	edx, ecx, 31
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN4@tt_face_lo
	push	OFFSET $SG9125
	call	_FT_Message
	add	esp, 4
$LN4@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN5@tt_face_lo
; Line 325
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, BYTE PTR [ecx+672]
	test	edx, edx
	je	SHORT $Exit$26
; Line 326
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_vary_cvt
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$Exit$26:
; Line 330
	mov	eax, DWORD PTR _error$[ebp]
; Line 340
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@tt_face_lo:
	DD	2
	DD	$LN24@tt_face_lo
$LN24@tt_face_lo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN22@tt_face_lo
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN23@tt_face_lo
$LN23@tt_face_lo:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN22@tt_face_lo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_tt_face_load_cvt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = -4						; size = 4
_face$ = 8						; size = 4
_tt_face_done_loca PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttpload.c
; Line 252
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 253
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 256
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 700				; 000002bcH
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 257
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+696], 0
; Line 258
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_done_loca ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p_limit$ = -16						; size = 4
_p$ = -12						; size = 4
_pos2$ = -8						; size = 4
_pos1$ = -4						; size = 4
_face$ = 8						; size = 4
_gindex$ = 12						; size = 4
_asize$ = 16						; size = 4
_tt_face_get_location PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttpload.c
; Line 176
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 182
	mov	DWORD PTR _pos2$[ebp], 0
	mov	eax, DWORD PTR _pos2$[ebp]
	mov	DWORD PTR _pos1$[ebp], eax
; Line 184
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _gindex$[ebp]
	cmp	edx, DWORD PTR [ecx+696]
	jae	$LN17@tt_face_ge
; Line 186
	mov	eax, DWORD PTR _face$[ebp]
	movsx	ecx, WORD PTR [eax+210]
	test	ecx, ecx
	je	$LN16@tt_face_ge
; Line 188
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+700]
	mov	ecx, DWORD PTR _gindex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _p$[ebp], edx
; Line 189
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+696]
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+700]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _p_limit$[ebp], ecx
; Line 191
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _pos1$[ebp], eax
; Line 192
	mov	eax, DWORD PTR _pos1$[ebp]
	mov	DWORD PTR _pos2$[ebp], eax
; Line 194
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	cmp	ecx, DWORD PTR _p_limit$[ebp]
	ja	SHORT $LN15@tt_face_ge
; Line 195
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _pos2$[ebp], eax
$LN15@tt_face_ge:
; Line 197
	jmp	$LN17@tt_face_ge
$LN16@tt_face_ge:
; Line 199
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+700]
	mov	edx, DWORD PTR _gindex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$[ebp], eax
; Line 200
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+696]
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+700]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p_limit$[ebp], edx
; Line 202
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _pos1$[ebp], eax
; Line 203
	mov	ecx, DWORD PTR _pos1$[ebp]
	mov	DWORD PTR _pos2$[ebp], ecx
; Line 205
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _p_limit$[ebp]
	ja	SHORT $LN13@tt_face_ge
; Line 206
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _pos2$[ebp], eax
$LN13@tt_face_ge:
; Line 208
	mov	ecx, DWORD PTR _pos1$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _pos1$[ebp], ecx
; Line 209
	mov	edx, DWORD PTR _pos2$[ebp]
	shl	edx, 1
	mov	DWORD PTR _pos2$[ebp], edx
$LN17@tt_face_ge:
; Line 214
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	cmp	ecx, DWORD PTR [eax+668]
	jbe	SHORT $LN12@tt_face_ge
$LN11@tt_face_ge:
; Line 219
	mov	edx, 4
	imul	eax, edx, 31
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN10@tt_face_ge
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+668]
	push	edx
	mov	eax, DWORD PTR _gindex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos1$[ebp]
	push	ecx
	push	OFFSET $SG9068
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN10@tt_face_ge:
	xor	edx, edx
	jne	SHORT $LN11@tt_face_ge
; Line 220
	mov	eax, DWORD PTR _asize$[ebp]
	mov	DWORD PTR [eax], 0
; Line 221
	xor	eax, eax
	jmp	SHORT $LN18@tt_face_ge
$LN12@tt_face_ge:
; Line 224
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _pos2$[ebp]
	cmp	edx, DWORD PTR [ecx+668]
	jbe	SHORT $LN7@tt_face_ge
$LN6@tt_face_ge:
; Line 229
	mov	eax, 4
	imul	ecx, eax, 31
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN5@tt_face_ge
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+668]
	push	eax
	mov	ecx, DWORD PTR _gindex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pos2$[ebp]
	push	edx
	push	OFFSET $SG9074
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN5@tt_face_ge:
	xor	eax, eax
	jne	SHORT $LN6@tt_face_ge
; Line 230
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+668]
	mov	DWORD PTR _pos2$[ebp], edx
$LN7@tt_face_ge:
; Line 241
	mov	eax, DWORD PTR _pos2$[ebp]
	cmp	eax, DWORD PTR _pos1$[ebp]
	jb	SHORT $LN2@tt_face_ge
; Line 242
	mov	ecx, DWORD PTR _pos2$[ebp]
	sub	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR _asize$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 243
	jmp	SHORT $LN1@tt_face_ge
$LN2@tt_face_ge:
; Line 244
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+668]
	sub	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR _asize$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@tt_face_ge:
; Line 246
	mov	eax, DWORD PTR _pos1$[ebp]
$LN18@tt_face_ge:
; Line 247
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_get_location ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_diff$1 = -44						; size = 4
_dist$2 = -40						; size = 4
_pos$3 = -36						; size = 4
_limit$4 = -32						; size = 4
_entry$5 = -28						; size = 4
_new_loca_len$6 = -24					; size = 4
_shift$ = -20						; size = 4
_table_len$ = -12					; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_loca PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttpload.c
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 71
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 668				; 0000029cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1735162214				; 676c7966H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 75
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 142				; 0000008eH
	jne	SHORT $LN41@tt_face_lo
; Line 76
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+668], 0
	jmp	SHORT $LN38@tt_face_lo
$LN41@tt_face_lo:
; Line 77
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN38@tt_face_lo
; Line 78
	jmp	$Exit$47
$LN38@tt_face_lo:
; Line 80
	mov	ecx, 4
	imul	edx, ecx, 31
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN37@tt_face_lo
	push	OFFSET $SG8956
	call	_FT_Message
	add	esp, 4
$LN37@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN38@tt_face_lo
; Line 81
	mov	esi, esp
	lea	ecx, DWORD PTR _table_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	1819239265				; 6c6f6361H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 82
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN34@tt_face_lo
; Line 84
	push	OFFSET $SG8963
	push	84					; 00000054H
	push	144					; 00000090H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 144				; 00000090H
	mov	DWORD PTR _error$[ebp], eax
; Line 85
	jmp	$Exit$47
$LN34@tt_face_lo:
; Line 88
	mov	eax, DWORD PTR _face$[ebp]
	movsx	ecx, WORD PTR [eax+210]
	test	ecx, ecx
	je	SHORT $LN33@tt_face_lo
; Line 90
	mov	DWORD PTR _shift$[ebp], 2
; Line 92
	cmp	DWORD PTR _table_len$[ebp], 262144	; 00040000H
	jb	SHORT $LN32@tt_face_lo
$LN31@tt_face_lo:
; Line 94
	mov	edx, 4
	imul	eax, edx, 31
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN30@tt_face_lo
	push	OFFSET $SG8970
	call	_FT_Message
	add	esp, 4
$LN30@tt_face_lo:
	xor	ecx, ecx
	jne	SHORT $LN31@tt_face_lo
; Line 95
	push	OFFSET $SG8971
	push	95					; 0000005fH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 96
	jmp	$Exit$47
$LN32@tt_face_lo:
; Line 98
	mov	edx, DWORD PTR _table_len$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+696], edx
; Line 100
	jmp	SHORT $LN27@tt_face_lo
$LN33@tt_face_lo:
; Line 102
	mov	DWORD PTR _shift$[ebp], 1
; Line 104
	cmp	DWORD PTR _table_len$[ebp], 131072	; 00020000H
	jb	SHORT $LN26@tt_face_lo
$LN25@tt_face_lo:
; Line 106
	mov	ecx, 4
	imul	edx, ecx, 31
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN24@tt_face_lo
	push	OFFSET $SG8978
	call	_FT_Message
	add	esp, 4
$LN24@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN25@tt_face_lo
; Line 107
	push	OFFSET $SG8979
	push	107					; 0000006bH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 108
	jmp	$Exit$47
$LN26@tt_face_lo:
; Line 110
	mov	edx, DWORD PTR _table_len$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+696], edx
$LN27@tt_face_lo:
; Line 113
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+696], edx
	je	$LN21@tt_face_lo
$LN20@tt_face_lo:
; Line 116
	mov	ecx, 4
	imul	edx, ecx, 31
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN19@tt_face_lo
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+696]
	sub	eax, 1
	push	eax
	push	OFFSET $SG8986
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN19@tt_face_lo:
	xor	ecx, ecx
	jne	SHORT $LN20@tt_face_lo
; Line 119
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [edx+696]
	cmp	ecx, DWORD PTR [eax+16]
	ja	$LN21@tt_face_lo
; Line 122
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	eax, cl
	mov	DWORD PTR _new_loca_len$6[ebp], eax
; Line 124
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR _entry$5[ebp], edx
; Line 125
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+152]
	shl	ecx, 4
	add	ecx, DWORD PTR _entry$5[ebp]
	mov	DWORD PTR _limit$4[ebp], ecx
; Line 127
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _pos$3[ebp], eax
; Line 128
	mov	DWORD PTR _dist$2[ebp], 2147483647	; 7fffffffH
; Line 132
	jmp	SHORT $LN15@tt_face_lo
$LN14@tt_face_lo:
	mov	eax, DWORD PTR _entry$5[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _entry$5[ebp], eax
$LN15@tt_face_lo:
	mov	ecx, DWORD PTR _entry$5[ebp]
	cmp	ecx, DWORD PTR _limit$4[ebp]
	jae	SHORT $LN13@tt_face_lo
; Line 134
	mov	edx, DWORD PTR _entry$5[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR _pos$3[ebp]
	mov	DWORD PTR _diff$1[ebp], eax
; Line 137
	cmp	DWORD PTR _diff$1[ebp], 0
	jle	SHORT $LN12@tt_face_lo
	mov	ecx, DWORD PTR _diff$1[ebp]
	cmp	ecx, DWORD PTR _dist$2[ebp]
	jge	SHORT $LN12@tt_face_lo
; Line 138
	mov	edx, DWORD PTR _diff$1[ebp]
	mov	DWORD PTR _dist$2[ebp], edx
$LN12@tt_face_lo:
; Line 139
	jmp	SHORT $LN14@tt_face_lo
$LN13@tt_face_lo:
; Line 141
	mov	eax, DWORD PTR _entry$5[ebp]
	cmp	eax, DWORD PTR _limit$4[ebp]
	jne	SHORT $LN11@tt_face_lo
; Line 144
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _pos$3[ebp]
	mov	DWORD PTR _dist$2[ebp], edx
$LN11@tt_face_lo:
; Line 147
	mov	eax, DWORD PTR _new_loca_len$6[ebp]
	cmp	eax, DWORD PTR _dist$2[ebp]
	jg	SHORT $LN21@tt_face_lo
; Line 149
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+696], edx
; Line 150
	mov	ecx, DWORD PTR _new_loca_len$6[ebp]
	mov	DWORD PTR _table_len$[ebp], ecx
$LN9@tt_face_lo:
; Line 153
	mov	edx, 4
	imul	eax, edx, 31
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN8@tt_face_lo
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+696]
	push	edx
	push	OFFSET $SG9006
	call	_FT_Message
	add	esp, 8
$LN8@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN9@tt_face_lo
$LN21@tt_face_lo:
; Line 162
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 700				; 000002bcH
	push	ecx
	mov	edx, DWORD PTR _table_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@tt_face_lo
; Line 163
	jmp	SHORT $Exit$47
$LN4@tt_face_lo:
; Line 165
	mov	ecx, 4
	imul	edx, ecx, 31
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN3@tt_face_lo
	push	OFFSET $SG9014
	call	_FT_Message
	add	esp, 4
$LN3@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN4@tt_face_lo
$Exit$47:
; Line 168
	mov	eax, DWORD PTR _error$[ebp]
; Line 169
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN46@tt_face_lo:
	DD	1
	DD	$LN45@tt_face_lo
$LN45@tt_face_lo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN44@tt_face_lo
$LN44@tt_face_lo:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_tt_face_load_loca ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv204 = -228						; size = 4
_loader$ = -220						; size = 208
_error$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_size$ = 8						; size = 4
_glyph$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_TT_Load_Glyph PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 2354
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
$LN27@TT_Load_Gl:
; Line 2359
	mov	eax, 4
	imul	ecx, eax, 28
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN26@TT_Load_Gl
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	push	OFFSET $SG10377
	call	_FT_Message
	add	esp, 8
$LN26@TT_Load_Gl:
	xor	eax, eax
	jne	SHORT $LN27@TT_Load_Gl
; Line 2368
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [ecx+112], -1
	je	$LN23@TT_Load_Gl
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 8
	jne	$LN23@TT_Load_Gl
; Line 2370
	mov	eax, DWORD PTR _load_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_load_sbit_image
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2371
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN23@TT_Load_Gl
; Line 2373
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	je	$LN21@TT_Load_Gl
; Line 2376
	push	1
	mov	ecx, DWORD PTR _load_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_tt_loader_init
	add	esp, 20					; 00000014H
; Line 2377
	push	1
	push	0
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	lea	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_load_truetype_glyph
	add	esp, 16					; 00000010H
; Line 2378
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _loader$[ebp+60]
	mov	DWORD PTR [ecx+56], edx
; Line 2379
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp+180]
	mov	DWORD PTR [eax+60], ecx
; Line 2383
	mov	edx, DWORD PTR _glyph$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN20@TT_Load_Gl
	mov	eax, DWORD PTR _glyph$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN20@TT_Load_Gl
; Line 2386
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+40], eax
$LN20@TT_Load_Gl:
; Line 2387
	mov	eax, DWORD PTR _glyph$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN21@TT_Load_Gl
	mov	ecx, DWORD PTR _glyph$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	je	SHORT $LN21@TT_Load_Gl
; Line 2390
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+52], eax
$LN21@TT_Load_Gl:
; Line 2393
	xor	eax, eax
	jmp	$LN28@TT_Load_Gl
$LN23@TT_Load_Gl:
; Line 2400
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 1
	jne	SHORT $LN18@TT_Load_Gl
	mov	eax, DWORD PTR _size$[ebp]
	movzx	ecx, BYTE PTR [eax+108]
	test	ecx, ecx
	jne	SHORT $LN18@TT_Load_Gl
; Line 2401
	push	OFFSET $SG10390
	push	2401					; 00000961H
	push	36					; 00000024H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 36					; 00000024H
	jmp	$LN28@TT_Load_Gl
$LN18@TT_Load_Gl:
; Line 2403
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 16384				; 00004000H
	je	SHORT $LN17@TT_Load_Gl
; Line 2404
	push	OFFSET $SG10392
	push	2404					; 00000964H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN28@TT_Load_Gl
$LN17@TT_Load_Gl:
; Line 2406
	push	0
	mov	eax, DWORD PTR _load_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	lea	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_tt_loader_init
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 2407
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@TT_Load_Gl
; Line 2408
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN28@TT_Load_Gl
$LN16@TT_Load_Gl:
; Line 2410
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+72], 1869968492		; 6f75746cH
; Line 2411
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+128], 0
; Line 2412
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+124], 0
; Line 2415
	push	0
	push	0
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	lea	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_load_truetype_glyph
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2416
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN15@TT_Load_Gl
; Line 2418
	mov	eax, DWORD PTR _glyph$[ebp]
	cmp	DWORD PTR [eax+72], 1668246896		; 636f6d70H
	jne	SHORT $LN14@TT_Load_Gl
; Line 2420
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _loader$[ebp+12]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+128], eax
; Line 2421
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _loader$[ebp+12]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+132], eax
; Line 2423
	jmp	SHORT $LN13@TT_Load_Gl
$LN14@TT_Load_Gl:
; Line 2425
	mov	ecx, DWORD PTR _loader$[ebp+12]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _glyph$[ebp]
	add	edx, 108				; 0000006cH
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], ecx
; Line 2426
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+124]
	and	eax, -513				; fffffdffH
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+124], eax
; Line 2432
	cmp	DWORD PTR _loader$[ebp+68], 0
	je	SHORT $LN13@TT_Load_Gl
; Line 2433
	push	0
	mov	edx, DWORD PTR _loader$[ebp+68]
	neg	edx
	push	edx
	mov	eax, DWORD PTR _glyph$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
$LN13@TT_Load_Gl:
; Line 2438
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 2
	jne	$LN11@TT_Load_Gl
; Line 2440
	mov	edx, DWORD PTR _loader$[ebp+160]
	movzx	eax, BYTE PTR [edx+337]
	test	eax, eax
	je	SHORT $LN10@TT_Load_Gl
; Line 2443
	mov	ecx, DWORD PTR _loader$[ebp+160]
	mov	edx, DWORD PTR [ecx+340]
	mov	DWORD PTR tv204[ebp], edx
	cmp	DWORD PTR tv204[ebp], 5
	ja	SHORT $LN3@TT_Load_Gl
	mov	eax, DWORD PTR tv204[ebp]
	jmp	DWORD PTR $LN33@TT_Load_Gl[eax*4]
$LN7@TT_Load_Gl:
; Line 2446
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	or	edx, 32					; 00000020H
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+124], edx
; Line 2447
	jmp	SHORT $LN8@TT_Load_Gl
$LN6@TT_Load_Gl:
; Line 2450
	jmp	SHORT $LN8@TT_Load_Gl
$LN5@TT_Load_Gl:
; Line 2453
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	or	edx, 48					; 00000030H
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+124], edx
; Line 2454
	jmp	SHORT $LN8@TT_Load_Gl
$LN4@TT_Load_Gl:
; Line 2456
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	or	edx, 16					; 00000010H
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+124], edx
; Line 2457
	jmp	SHORT $LN8@TT_Load_Gl
$LN3@TT_Load_Gl:
; Line 2460
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	or	edx, 8
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+124], edx
$LN8@TT_Load_Gl:
; Line 2464
	jmp	SHORT $LN11@TT_Load_Gl
$LN10@TT_Load_Gl:
; Line 2465
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	or	edx, 8
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+124], edx
$LN11@TT_Load_Gl:
; Line 2470
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	lea	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_compute_glyph_metrics
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN15@TT_Load_Gl:
; Line 2478
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 1
	jne	SHORT $LN1@TT_Load_Gl
	mov	ecx, DWORD PTR _size$[ebp]
	movzx	edx, WORD PTR [ecx+14]
	cmp	edx, 24					; 00000018H
	jge	SHORT $LN1@TT_Load_Gl
; Line 2479
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+124], ecx
$LN1@TT_Load_Gl:
; Line 2481
	mov	eax, DWORD PTR _error$[ebp]
$LN28@TT_Load_Gl:
; Line 2482
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@TT_Load_Gl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN32@TT_Load_Gl:
	DD	1
	DD	$LN31@TT_Load_Gl
$LN31@TT_Load_Gl:
	DD	-220					; ffffff24H
	DD	208					; 000000d0H
	DD	$LN30@TT_Load_Gl
$LN30@TT_Load_Gl:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
	npad	1
$LN33@TT_Load_Gl:
	DD	$LN7@TT_Load_Gl
	DD	$LN6@TT_Load_Gl
	DD	$LN3@TT_Load_Gl
	DD	$LN3@TT_Load_Gl
	DD	$LN5@TT_Load_Gl
	DD	$LN4@TT_Load_Gl
_TT_Load_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_idx$ = 12						; size = 4
_yMax$ = 16						; size = 4
_tsb$ = 20						; size = 4
_ah$ = 24						; size = 4
_TT_Get_VMetrics PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 96
	push	ebp
	mov	ebp, esp
	push	esi
; Line 97
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, BYTE PTR [eax+292]
	test	ecx, ecx
	je	SHORT $LN12@TT_Get_VMe
; Line 98
	mov	esi, esp
	mov	edx, DWORD PTR _ah$[ebp]
	push	edx
	mov	eax, DWORD PTR _tsb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	edx, DWORD PTR [ecx+112]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN8@TT_Get_VMe
$LN12@TT_Get_VMe:
; Line 100
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+364]
	cmp	ecx, 65535				; 0000ffffH
	je	SHORT $LN10@TT_Get_VMe
; Line 102
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+434]
	sub	eax, DWORD PTR _yMax$[ebp]
	mov	ecx, DWORD PTR _tsb$[ebp]
	mov	WORD PTR [ecx], ax
; Line 103
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+434]
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+436]
	sub	eax, edx
	mov	ecx, DWORD PTR _ah$[ebp]
	mov	WORD PTR [ecx], ax
; Line 106
	jmp	SHORT $LN8@TT_Get_VMe
$LN10@TT_Get_VMe:
; Line 108
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+220]
	sub	eax, DWORD PTR _yMax$[ebp]
	mov	ecx, DWORD PTR _tsb$[ebp]
	mov	WORD PTR [ecx], ax
; Line 109
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+220]
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+222]
	sub	eax, edx
	mov	ecx, DWORD PTR _ah$[ebp]
	mov	WORD PTR [ecx], ax
$LN8@TT_Get_VMe:
; Line 112
	mov	edx, 4
	imul	eax, edx, 28
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN7@TT_Get_VMe
	mov	ecx, DWORD PTR _ah$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	push	OFFSET $SG9481
	call	_FT_Message
	add	esp, 8
$LN7@TT_Get_VMe:
	xor	eax, eax
	jne	SHORT $LN8@TT_Get_VMe
$LN4@TT_Get_VMe:
; Line 113
	mov	ecx, 4
	imul	edx, ecx, 28
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN3@TT_Get_VMe
	mov	eax, DWORD PTR _tsb$[ebp]
	movsx	ecx, WORD PTR [eax]
	push	ecx
	push	OFFSET $SG9486
	call	_FT_Message
	add	esp, 8
$LN3@TT_Get_VMe:
	xor	edx, edx
	jne	SHORT $LN4@TT_Get_VMe
; Line 114
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_TT_Get_VMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_idx$ = 12						; size = 4
_lsb$ = 16						; size = 4
_aw$ = 20						; size = 4
_TT_Get_HMetrics PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 77
	push	ebp
	mov	ebp, esp
	push	esi
; Line 78
	mov	esi, esp
	mov	eax, DWORD PTR _aw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lsb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+532]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@TT_Get_HMe:
; Line 80
	mov	ecx, 4
	imul	edx, ecx, 28
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN7@TT_Get_HMe
	mov	eax, DWORD PTR _aw$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	push	OFFSET $SG9453
	call	_FT_Message
	add	esp, 8
$LN7@TT_Get_HMe:
	xor	edx, edx
	jne	SHORT $LN8@TT_Get_HMe
$LN4@TT_Get_HMe:
; Line 81
	mov	eax, 4
	imul	ecx, eax, 28
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN3@TT_Get_HMe
	mov	edx, DWORD PTR _lsb$[ebp]
	movsx	eax, WORD PTR [edx]
	push	eax
	push	OFFSET $SG9458
	call	_FT_Message
	add	esp, 8
$LN3@TT_Get_HMe:
	xor	ecx, ecx
	jne	SHORT $LN4@TT_Get_HMe
; Line 82
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_TT_Get_HMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_TT_Init_Glyph_Loading PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttgload.c
; Line 695
	push	ebp
	mov	ebp, esp
; Line 696
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+512], OFFSET _TT_Access_Glyph_Frame
; Line 697
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+520], OFFSET _TT_Load_Glyph_Header
; Line 698
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+524], OFFSET _TT_Load_Simple_Glyph
; Line 699
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+528], OFFSET _TT_Load_Composite_Glyph
; Line 700
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+516], OFFSET _TT_Forget_Glyph_Frame
; Line 701
	pop	ebp
	ret	0
_TT_Init_Glyph_Loading ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv980 = -148						; size = 4
tv750 = -144						; size = 4
tv679 = -140						; size = 4
tv673 = -136						; size = 4
tv664 = -132						; size = 4
tv653 = -128						; size = 4
tv641 = -124						; size = 4
tv629 = -120						; size = 4
tv621 = -116						; size = 4
tv613 = -112						; size = 4
tv605 = -108						; size = 4
tv597 = -104						; size = 4
tv589 = -100						; size = 4
tv224 = -96						; size = 4
tv143 = -92						; size = 4
_callrec$1 = -88					; size = 4
_limit$2 = -84						; size = 4
_def$3 = -80						; size = 4
_I$4 = -76						; size = 4
_I$5 = -72						; size = 4
_I$6 = -68						; size = 4
_I$7 = -64						; size = 4
_I$8 = -60						; size = 4
_L$9 = -56						; size = 4
_L$10 = -52						; size = 4
_Y$11 = -48						; size = 4
_X$12 = -44						; size = 4
_S$13 = -40						; size = 2
_Y$14 = -36						; size = 4
_X$15 = -32						; size = 4
_S$16 = -28						; size = 2
_BB$17 = -24						; size = 2
_AA$18 = -20						; size = 2
_opcode$19 = -13					; size = 1
_args$20 = -12						; size = 4
_i$ = -8						; size = 2
_ins_counter$ = -4					; size = 4
_exc$ = 8						; size = 4
_TT_RunIns PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 8210
	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-148]
	mov	ecx, 37					; 00000025H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 8211
	mov	DWORD PTR _ins_counter$[ebp], 0
; Line 8240
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+256], 0
; Line 8241
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+216]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+218]
	cmp	edx, ecx
	je	SHORT $LN220@TT_RunIns
; Line 8244
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+592], OFFSET _Current_Ppem_Stretched
; Line 8245
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+596], OFFSET _Read_CVT_Stretched
; Line 8246
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+600], OFFSET _Write_CVT_Stretched
; Line 8247
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+604], OFFSET _Move_CVT_Stretched
; Line 8249
	jmp	SHORT $LN219@TT_RunIns
$LN220@TT_RunIns:
; Line 8252
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+592], OFFSET _Current_Ppem
; Line 8253
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+596], OFFSET _Read_CVT
; Line 8254
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+600], OFFSET _Write_CVT
; Line 8255
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+604], OFFSET _Move_CVT
$LN219@TT_RunIns:
; Line 8258
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Compute_Funcs
	add	esp, 4
; Line 8259
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+312]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Compute_Round
	add	esp, 8
$LN218@TT_RunIns:
; Line 8263
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+360]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+356]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	dl, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx+368], dl
$LN215@TT_RunIns:
; Line 8265
	mov	eax, 4
	imul	ecx, eax, 29
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN214@TT_RunIns
	push	OFFSET $SG13066
	call	_FT_Message
	add	esp, 4
$LN214@TT_RunIns:
	xor	edx, edx
	jne	SHORT $LN215@TT_RunIns
$LN211@TT_RunIns:
; Line 8266
	mov	eax, 4
	imul	ecx, eax, 29
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN210@TT_RunIns
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	mov	ecx, DWORD PTR _opcode_name[eax*4]
	push	ecx
	call	_FT_Message
	add	esp, 4
$LN210@TT_RunIns:
	xor	edx, edx
	jne	SHORT $LN211@TT_RunIns
$LN207@TT_RunIns:
; Line 8267
	mov	eax, 4
	imul	ecx, eax, 29
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN206@TT_RunIns
	push	OFFSET $SG13075
	call	_FT_Message
	add	esp, 4
$LN206@TT_RunIns:
	xor	edx, edx
	jne	SHORT $LN207@TT_RunIns
; Line 8269
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+368]
	movsx	edx, BYTE PTR _opcode_length[ecx]
	mov	DWORD PTR tv143[ebp], edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR [eax+372], ecx
	cmp	DWORD PTR tv143[ebp], 0
	jge	SHORT $LN203@TT_RunIns
; Line 8271
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+360]
	add	eax, 1
	mov	ecx, DWORD PTR _exc$[ebp]
	cmp	eax, DWORD PTR [ecx+364]
	jl	SHORT $LN202@TT_RunIns
; Line 8272
	jmp	$LErrorCodeOverflow_$248
$LN202@TT_RunIns:
; Line 8274
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+360]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+356]
	movzx	eax, BYTE PTR [edx+eax+1]
	mov	ecx, DWORD PTR _exc$[ebp]
	imul	eax, DWORD PTR [ecx+372]
	mov	edx, 2
	sub	edx, eax
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+372], edx
$LN203@TT_RunIns:
; Line 8277
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	eax, DWORD PTR _exc$[ebp]
	add	edx, DWORD PTR [eax+372]
	mov	ecx, DWORD PTR _exc$[ebp]
	cmp	edx, DWORD PTR [ecx+364]
	jle	SHORT $LN201@TT_RunIns
; Line 8278
	jmp	$LErrorCodeOverflow_$248
$LN201@TT_RunIns:
; Line 8281
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	movzx	ecx, BYTE PTR _Pop_Push_Count[eax]
	sar	ecx, 4
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, ecx
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 8285
	mov	edx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jge	$LN200@TT_RunIns
; Line 8287
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN199@TT_RunIns
; Line 8289
	push	OFFSET $SG13082
	push	8289					; 00002061H
	push	129					; 00000081H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 129				; 00000081H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 8290
	jmp	$LErrorLabel_$249
$LN199@TT_RunIns:
; Line 8294
	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN198@TT_RunIns
$LN197@TT_RunIns:
	mov	cx, WORD PTR _i$[ebp]
	add	cx, 1
	mov	WORD PTR _i$[ebp], cx
$LN198@TT_RunIns:
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+368]
	movzx	eax, BYTE PTR _Pop_Push_Count[ecx]
	sar	eax, 4
	cmp	edx, eax
	jge	SHORT $LN196@TT_RunIns
; Line 8295
	movzx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+ecx*4], 0
	jmp	SHORT $LN197@TT_RunIns
$LN196@TT_RunIns:
; Line 8296
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+28], 0
$LN200@TT_RunIns:
; Line 8299
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	movzx	ecx, BYTE PTR _Pop_Push_Count[eax]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _exc$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 8304
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cmp	eax, DWORD PTR [edx+20]
	jbe	SHORT $LN195@TT_RunIns
; Line 8306
	push	OFFSET $SG13088
	push	8306					; 00002072H
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 8307
	jmp	$LErrorLabel_$249
$LN195@TT_RunIns:
; Line 8310
	mov	edx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [edx+376], 1
; Line 8311
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 8349
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _args$20[ebp], edx
; Line 8350
	mov	eax, DWORD PTR _exc$[ebp]
	mov	cl, BYTE PTR [eax+368]
	mov	BYTE PTR _opcode$19[ebp], cl
; Line 8357
	movzx	edx, BYTE PTR _opcode$19[ebp]
	mov	DWORD PTR tv224[ebp], edx
	cmp	DWORD PTR tv224[ebp], 143		; 0000008fH
	ja	$LN30@TT_RunIns
	mov	eax, DWORD PTR tv224[ebp]
	jmp	DWORD PTR $LN247@TT_RunIns[eax*4]
$LN192@TT_RunIns:
; Line 8369
	movzx	ecx, BYTE PTR _opcode$19[ebp]
	and	ecx, 1
	shl	ecx, 14					; 0000000eH
	mov	WORD PTR _AA$18[ebp], cx
; Line 8370
	movsx	edx, WORD PTR _AA$18[ebp]
	xor	edx, 16384				; 00004000H
	mov	WORD PTR _BB$17[ebp], dx
; Line 8372
	movzx	eax, BYTE PTR _opcode$19[ebp]
	cmp	eax, 4
	jge	SHORT $LN190@TT_RunIns
; Line 8374
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	dx, WORD PTR _AA$18[ebp]
	mov	WORD PTR [ecx+294], dx
; Line 8375
	mov	eax, DWORD PTR _exc$[ebp]
	mov	cx, WORD PTR _BB$17[ebp]
	mov	WORD PTR [eax+296], cx
; Line 8377
	mov	edx, DWORD PTR _exc$[ebp]
	mov	ax, WORD PTR _AA$18[ebp]
	mov	WORD PTR [edx+290], ax
; Line 8378
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	dx, WORD PTR _BB$17[ebp]
	mov	WORD PTR [ecx+292], dx
$LN190@TT_RunIns:
; Line 8385
	movzx	eax, BYTE PTR _opcode$19[ebp]
	and	eax, 2
	jne	SHORT $LN188@TT_RunIns
; Line 8387
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	dx, WORD PTR _AA$18[ebp]
	mov	WORD PTR [ecx+298], dx
; Line 8388
	mov	eax, DWORD PTR _exc$[ebp]
	mov	cx, WORD PTR _BB$17[ebp]
	mov	WORD PTR [eax+300], cx
$LN188@TT_RunIns:
; Line 8395
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Compute_Funcs
	add	esp, 4
; Line 8397
	jmp	$LN193@TT_RunIns
$LN187@TT_RunIns:
; Line 8401
	mov	eax, DWORD PTR _exc$[ebp]
	add	eax, 294				; 00000126H
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+368]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_SxVTL
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN186@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+294]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+290], ecx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Compute_Funcs
	add	esp, 4
$LN186@TT_RunIns:
; Line 8402
	jmp	$LN193@TT_RunIns
$LN185@TT_RunIns:
; Line 8406
	mov	ecx, DWORD PTR _exc$[ebp]
	add	ecx, 298				; 0000012aH
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_SxVTL
	add	esp, 20					; 00000014H
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN184@TT_RunIns
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Compute_Funcs
	add	esp, 4
$LN184@TT_RunIns:
; Line 8407
	jmp	$LN193@TT_RunIns
$LN183@TT_RunIns:
; Line 8410
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	cx, WORD PTR [eax+edx]
	mov	WORD PTR _S$16[ebp], cx
	movsx	edx, WORD PTR _S$16[ebp]
	mov	DWORD PTR _Y$14[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _S$16[ebp], ax
	movsx	ecx, WORD PTR _S$16[ebp]
	mov	DWORD PTR _X$15[ebp], ecx
	mov	edx, DWORD PTR _exc$[ebp]
	add	edx, 294				; 00000126H
	push	edx
	mov	eax, DWORD PTR _Y$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _X$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Normalize
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+294]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+290], ecx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Compute_Funcs
	add	esp, 4
; Line 8411
	jmp	$LN193@TT_RunIns
$LN182@TT_RunIns:
; Line 8414
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	ax, WORD PTR [edx+ecx]
	mov	WORD PTR _S$13[ebp], ax
	movsx	ecx, WORD PTR _S$13[ebp]
	mov	DWORD PTR _Y$11[ebp], ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _S$13[ebp], dx
	movsx	eax, WORD PTR _S$13[ebp]
	mov	DWORD PTR _X$12[ebp], eax
	mov	ecx, DWORD PTR _exc$[ebp]
	add	ecx, 298				; 0000012aH
	push	ecx
	mov	edx, DWORD PTR _Y$11[ebp]
	push	edx
	mov	eax, DWORD PTR _X$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Normalize
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Compute_Funcs
	add	esp, 4
; Line 8415
	jmp	$LN193@TT_RunIns
$LN181@TT_RunIns:
; Line 8418
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _exc$[ebp]
	movsx	eax, WORD PTR [edx+294]
	mov	edx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	movsx	edx, WORD PTR [ecx+296]
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 8419
	jmp	$LN193@TT_RunIns
$LN180@TT_RunIns:
; Line 8422
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	movsx	edx, WORD PTR [ecx+298]
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _exc$[ebp]
	movsx	ecx, WORD PTR [eax+300]
	mov	eax, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 8423
	jmp	$LN193@TT_RunIns
$LN179@TT_RunIns:
; Line 8426
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+294]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+298], edx
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Compute_Funcs
	add	esp, 4
; Line 8427
	jmp	$LN193@TT_RunIns
$LN178@TT_RunIns:
; Line 8430
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_ISECT
	add	esp, 8
; Line 8431
	jmp	$LN193@TT_RunIns
$LN177@TT_RunIns:
; Line 8434
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	dx, WORD PTR [ecx+edx]
	mov	WORD PTR [eax+284], dx
; Line 8435
	jmp	$LN193@TT_RunIns
$LN176@TT_RunIns:
; Line 8438
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _args$20[ebp]
	mov	cx, WORD PTR [eax+ecx]
	mov	WORD PTR [edx+286], cx
; Line 8439
	jmp	$LN193@TT_RunIns
$LN175@TT_RunIns:
; Line 8442
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _args$20[ebp]
	mov	ax, WORD PTR [edx+eax]
	mov	WORD PTR [ecx+288], ax
; Line 8443
	jmp	$LN193@TT_RunIns
$LN174@TT_RunIns:
; Line 8446
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_SZP0
	add	esp, 8
; Line 8447
	jmp	$LN193@TT_RunIns
$LN173@TT_RunIns:
; Line 8450
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_SZP1
	add	esp, 8
; Line 8451
	jmp	$LN193@TT_RunIns
$LN172@TT_RunIns:
; Line 8454
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_SZP2
	add	esp, 8
; Line 8455
	jmp	$LN193@TT_RunIns
$LN171@TT_RunIns:
; Line 8458
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_SZPS
	add	esp, 8
; Line 8459
	jmp	$LN193@TT_RunIns
$LN170@TT_RunIns:
; Line 8462
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	jge	SHORT $LN169@TT_RunIns
	push	OFFSET $SG13143
	push	8462					; 0000210eH
	push	132					; 00000084H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 132				; 00000084H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN168@TT_RunIns
$LN169@TT_RunIns:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+304], eax
$LN168@TT_RunIns:
; Line 8463
	jmp	$LN193@TT_RunIns
$LN167@TT_RunIns:
; Line 8466
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+312], 1
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+568], OFFSET _Round_To_Grid
; Line 8467
	jmp	$LN193@TT_RunIns
$LN166@TT_RunIns:
; Line 8470
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+312], 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+568], OFFSET _Round_To_Half_Grid
; Line 8471
	jmp	$LN193@TT_RunIns
$LN165@TT_RunIns:
; Line 8474
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+308], eax
; Line 8475
	jmp	$LN193@TT_RunIns
$LN164@TT_RunIns:
; Line 8478
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_ELSE
	add	esp, 8
; Line 8479
	jmp	$LN193@TT_RunIns
$LN163@TT_RunIns:
; Line 8482
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	jne	SHORT $LN162@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN162@TT_RunIns
	push	OFFSET $SG13153
	push	8482					; 00002122H
	push	132					; 00000084H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 132				; 00000084H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN162@TT_RunIns:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	ecx, DWORD PTR _args$20[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+360], edx
	mov	ecx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [ecx+360], 0
	jl	SHORT $LN160@TT_RunIns
	mov	edx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [edx+428], 0
	jle	SHORT $LN161@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	sub	ecx, 1
	shl	ecx, 4
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+436]
	mov	ecx, DWORD PTR [eax+ecx+12]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+360]
	cmp	eax, DWORD PTR [ecx+8]
	jle	SHORT $LN161@TT_RunIns
$LN160@TT_RunIns:
	push	OFFSET $SG13156
	push	8482					; 00002122H
	push	132					; 00000084H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 132				; 00000084H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN161@TT_RunIns:
	mov	edx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [edx+376], 0
; Line 8483
	jmp	$LN193@TT_RunIns
$LN159@TT_RunIns:
; Line 8486
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+320], ecx
; Line 8487
	jmp	$LN193@TT_RunIns
$LN158@TT_RunIns:
; Line 8490
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+324], eax
; Line 8491
	jmp	$LN193@TT_RunIns
$LN157@TT_RunIns:
; Line 8494
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+328], eax
; Line 8495
	jmp	$LN193@TT_RunIns
$LN156@TT_RunIns:
; Line 8498
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax
; Line 8499
	jmp	$LN193@TT_RunIns
$LN155@TT_RunIns:
; Line 8503
	jmp	$LN193@TT_RunIns
$LN154@TT_RunIns:
; Line 8506
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 8507
	jmp	$LN193@TT_RunIns
$LN153@TT_RunIns:
; Line 8510
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _L$10[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR _L$10[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 8511
	jmp	$LN193@TT_RunIns
$LN152@TT_RunIns:
; Line 8514
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+edx], ecx
; Line 8515
	jmp	$LN193@TT_RunIns
$LN151@TT_RunIns:
; Line 8518
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _L$9[ebp], edx
	cmp	DWORD PTR _L$9[ebp], 0
	jle	SHORT $LN149@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _L$9[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jle	SHORT $LN150@TT_RunIns
$LN149@TT_RunIns:
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN148@TT_RunIns
	push	OFFSET $SG13175
	push	8518					; 00002146H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN148@TT_RunIns:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [ecx+eax], 0
	jmp	SHORT $LN147@TT_RunIns
$LN150@TT_RunIns:
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+28]
	sub	eax, DWORD PTR _L$9[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [esi+ecx], edx
$LN147@TT_RunIns:
; Line 8519
	jmp	$LN193@TT_RunIns
$LN146@TT_RunIns:
; Line 8522
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_MINDEX
	add	esp, 8
; Line 8523
	jmp	$LN193@TT_RunIns
$LN145@TT_RunIns:
; Line 8526
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_ALIGNPTS
	add	esp, 8
; Line 8527
	jmp	$LN193@TT_RunIns
$LN144@TT_RunIns:
; Line 8530
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_UNKNOWN
	add	esp, 8
; Line 8531
	jmp	$LN193@TT_RunIns
$LN143@TT_RunIns:
; Line 8534
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_UTP
	add	esp, 8
; Line 8535
	jmp	$LN193@TT_RunIns
$LN142@TT_RunIns:
; Line 8538
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_LOOPCALL
	add	esp, 8
; Line 8539
	jmp	$LN193@TT_RunIns
$LN141@TT_RunIns:
; Line 8542
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_CALL
	add	esp, 8
; Line 8543
	jmp	$LN193@TT_RunIns
$LN140@TT_RunIns:
; Line 8546
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_FDEF
	add	esp, 8
; Line 8547
	jmp	$LN193@TT_RunIns
$LN139@TT_RunIns:
; Line 8550
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_ENDF
	add	esp, 8
; Line 8551
	jmp	$LN193@TT_RunIns
$LN138@TT_RunIns:
; Line 8555
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_MDAP
	add	esp, 8
; Line 8556
	jmp	$LN193@TT_RunIns
$LN137@TT_RunIns:
; Line 8560
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_IUP
	add	esp, 8
; Line 8561
	jmp	$LN193@TT_RunIns
$LN136@TT_RunIns:
; Line 8565
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_SHP
	add	esp, 8
; Line 8566
	jmp	$LN193@TT_RunIns
$LN135@TT_RunIns:
; Line 8570
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_SHC
	add	esp, 8
; Line 8571
	jmp	$LN193@TT_RunIns
$LN134@TT_RunIns:
; Line 8575
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_SHZ
	add	esp, 8
; Line 8576
	jmp	$LN193@TT_RunIns
$LN133@TT_RunIns:
; Line 8579
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_SHPIX
	add	esp, 8
; Line 8580
	jmp	$LN193@TT_RunIns
$LN132@TT_RunIns:
; Line 8583
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_IP
	add	esp, 8
; Line 8584
	jmp	$LN193@TT_RunIns
$LN131@TT_RunIns:
; Line 8588
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_MSIRP
	add	esp, 8
; Line 8589
	jmp	$LN193@TT_RunIns
$LN130@TT_RunIns:
; Line 8592
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_ALIGNRP
	add	esp, 8
; Line 8593
	jmp	$LN193@TT_RunIns
$LN129@TT_RunIns:
; Line 8596
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+312], 2
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+568], OFFSET _Round_To_Double_Grid
; Line 8597
	jmp	$LN193@TT_RunIns
$LN128@TT_RunIns:
; Line 8601
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_MIAP
	add	esp, 8
; Line 8602
	jmp	$LN193@TT_RunIns
$LN127@TT_RunIns:
; Line 8605
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_NPUSHB
	add	esp, 8
; Line 8606
	jmp	$LN193@TT_RunIns
$LN126@TT_RunIns:
; Line 8609
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_NPUSHW
	add	esp, 8
; Line 8610
	jmp	$LN193@TT_RunIns
$LN125@TT_RunIns:
; Line 8613
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _I$8[ebp], eax
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, WORD PTR [ecx+468]
	cmp	DWORD PTR _I$8[ebp], edx
	jb	SHORT $LN124@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN123@TT_RunIns
	jmp	SHORT $Set_Invalid_Ref$250
$LN123@TT_RunIns:
	jmp	SHORT $LN122@TT_RunIns
$LN124@TT_RunIns:
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+472]
	mov	eax, DWORD PTR _I$8[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax*4], edx
$LN122@TT_RunIns:
; Line 8614
	jmp	$LN193@TT_RunIns
$Set_Invalid_Ref$250:
; Line 8617
	push	OFFSET $SG13208
	push	8617					; 000021a9H
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 8618
	jmp	$LN193@TT_RunIns
$LN121@TT_RunIns:
; Line 8621
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _I$7[ebp], edx
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, WORD PTR [eax+468]
	cmp	DWORD PTR _I$7[ebp], ecx
	jb	SHORT $LN120@TT_RunIns
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+561]
	test	eax, eax
	je	SHORT $LN119@TT_RunIns
	jmp	SHORT $Set_Invalid_Ref$250
	jmp	SHORT $LN118@TT_RunIns
$LN119@TT_RunIns:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [eax+edx], 0
$LN118@TT_RunIns:
	jmp	SHORT $LN117@TT_RunIns
$LN120@TT_RunIns:
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+472]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _I$7[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [eax+ecx], edx
$LN117@TT_RunIns:
; Line 8622
	jmp	$LN193@TT_RunIns
$LN116@TT_RunIns:
; Line 8625
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _I$6[ebp], eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _I$6[ebp]
	cmp	edx, DWORD PTR [ecx+380]
	jb	SHORT $LN115@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN114@TT_RunIns
	jmp	$Set_Invalid_Ref$250
$LN114@TT_RunIns:
	jmp	SHORT $LN113@TT_RunIns
$LN115@TT_RunIns:
	mov	edx, 4
	shl	edx, 0
	mov	esi, esp
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _I$6[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+600]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN113@TT_RunIns:
; Line 8626
	jmp	$LN193@TT_RunIns
$LN112@TT_RunIns:
; Line 8629
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _I$5[ebp], eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _I$5[ebp]
	cmp	edx, DWORD PTR [ecx+380]
	jb	SHORT $LN111@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN110@TT_RunIns
	jmp	$Set_Invalid_Ref$250
	jmp	SHORT $LN109@TT_RunIns
$LN110@TT_RunIns:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [ecx+eax], 0
$LN109@TT_RunIns:
	jmp	SHORT $LN108@TT_RunIns
$LN111@TT_RunIns:
	mov	esi, esp
	mov	edx, DWORD PTR _I$5[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+596]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [ecx+edx], eax
$LN108@TT_RunIns:
; Line 8630
	jmp	$LN193@TT_RunIns
$LN107@TT_RunIns:
; Line 8634
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_GC
	add	esp, 8
; Line 8635
	jmp	$LN193@TT_RunIns
$LN106@TT_RunIns:
; Line 8638
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_SCFS
	add	esp, 8
; Line 8639
	jmp	$LN193@TT_RunIns
$LN105@TT_RunIns:
; Line 8643
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_MD
	add	esp, 8
; Line 8644
	jmp	$LN193@TT_RunIns
$LN104@TT_RunIns:
; Line 8647
	mov	esi, esp
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+592]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 8648
	jmp	$LN193@TT_RunIns
$LN103@TT_RunIns:
; Line 8651
	mov	esi, esp
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+592]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 8652
	jmp	$LN193@TT_RunIns
$LN102@TT_RunIns:
; Line 8655
	mov	edx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [edx+316], 1
; Line 8656
	jmp	$LN193@TT_RunIns
$LN101@TT_RunIns:
; Line 8659
	mov	eax, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [eax+316], 0
; Line 8660
	jmp	$LN193@TT_RunIns
$LN100@TT_RunIns:
; Line 8663
	push	OFFSET $SG13243
	push	8663					; 000021d7H
	push	135					; 00000087H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 135				; 00000087H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 8664
	jmp	$LN193@TT_RunIns
$LN99@TT_RunIns:
; Line 8667
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+eax]
	cmp	eax, DWORD PTR [esi+ecx]
	jge	SHORT $LN223@TT_RunIns
	mov	DWORD PTR tv589[ebp], 1
	jmp	SHORT $LN224@TT_RunIns
$LN223@TT_RunIns:
	mov	DWORD PTR tv589[ebp], 0
$LN224@TT_RunIns:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR tv589[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 8668
	jmp	$LN193@TT_RunIns
$LN98@TT_RunIns:
; Line 8671
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+eax]
	cmp	eax, DWORD PTR [esi+ecx]
	jg	SHORT $LN225@TT_RunIns
	mov	DWORD PTR tv597[ebp], 1
	jmp	SHORT $LN226@TT_RunIns
$LN225@TT_RunIns:
	mov	DWORD PTR tv597[ebp], 0
$LN226@TT_RunIns:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR tv597[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 8672
	jmp	$LN193@TT_RunIns
$LN97@TT_RunIns:
; Line 8675
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+eax]
	cmp	eax, DWORD PTR [esi+ecx]
	jle	SHORT $LN227@TT_RunIns
	mov	DWORD PTR tv605[ebp], 1
	jmp	SHORT $LN228@TT_RunIns
$LN227@TT_RunIns:
	mov	DWORD PTR tv605[ebp], 0
$LN228@TT_RunIns:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR tv605[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 8676
	jmp	$LN193@TT_RunIns
$LN96@TT_RunIns:
; Line 8679
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+eax]
	cmp	eax, DWORD PTR [esi+ecx]
	jl	SHORT $LN229@TT_RunIns
	mov	DWORD PTR tv613[ebp], 1
	jmp	SHORT $LN230@TT_RunIns
$LN229@TT_RunIns:
	mov	DWORD PTR tv613[ebp], 0
$LN230@TT_RunIns:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR tv613[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 8680
	jmp	$LN193@TT_RunIns
$LN95@TT_RunIns:
; Line 8683
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+eax]
	cmp	eax, DWORD PTR [esi+ecx]
	jne	SHORT $LN231@TT_RunIns
	mov	DWORD PTR tv621[ebp], 1
	jmp	SHORT $LN232@TT_RunIns
$LN231@TT_RunIns:
	mov	DWORD PTR tv621[ebp], 0
$LN232@TT_RunIns:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR tv621[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 8684
	jmp	$LN193@TT_RunIns
$LN94@TT_RunIns:
; Line 8687
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+eax]
	cmp	eax, DWORD PTR [esi+ecx]
	je	SHORT $LN233@TT_RunIns
	mov	DWORD PTR tv629[ebp], 1
	jmp	SHORT $LN234@TT_RunIns
$LN233@TT_RunIns:
	mov	DWORD PTR tv629[ebp], 0
$LN234@TT_RunIns:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR tv629[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 8688
	jmp	$LN193@TT_RunIns
$LN93@TT_RunIns:
; Line 8691
	mov	esi, esp
	push	0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+568]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, 127				; 0000007fH
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN235@TT_RunIns
	mov	DWORD PTR tv641[ebp], 1
	jmp	SHORT $LN236@TT_RunIns
$LN235@TT_RunIns:
	mov	DWORD PTR tv641[ebp], 0
$LN236@TT_RunIns:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR tv641[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 8692
	jmp	$LN193@TT_RunIns
$LN92@TT_RunIns:
; Line 8695
	mov	esi, esp
	push	0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+568]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, 127				; 0000007fH
	jne	SHORT $LN237@TT_RunIns
	mov	DWORD PTR tv653[ebp], 1
	jmp	SHORT $LN238@TT_RunIns
$LN237@TT_RunIns:
	mov	DWORD PTR tv653[ebp], 0
$LN238@TT_RunIns:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR tv653[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 8696
	jmp	$LN193@TT_RunIns
$LN91@TT_RunIns:
; Line 8699
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_IF
	add	esp, 8
; Line 8700
	jmp	$LN193@TT_RunIns
$LN90@TT_RunIns:
; Line 8704
	jmp	$LN193@TT_RunIns
$LN89@TT_RunIns:
; Line 8707
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [ecx+eax], 0
	je	SHORT $LN239@TT_RunIns
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [eax+edx], 0
	je	SHORT $LN239@TT_RunIns
	mov	DWORD PTR tv664[ebp], 1
	jmp	SHORT $LN240@TT_RunIns
$LN239@TT_RunIns:
	mov	DWORD PTR tv664[ebp], 0
$LN240@TT_RunIns:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR tv664[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 8708
	jmp	$LN193@TT_RunIns
$LN88@TT_RunIns:
; Line 8711
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [ecx+eax], 0
	jne	SHORT $LN241@TT_RunIns
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [eax+edx], 0
	jne	SHORT $LN241@TT_RunIns
	mov	DWORD PTR tv673[ebp], 0
	jmp	SHORT $LN242@TT_RunIns
$LN241@TT_RunIns:
	mov	DWORD PTR tv673[ebp], 1
$LN242@TT_RunIns:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR tv673[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 8712
	jmp	$LN193@TT_RunIns
$LN87@TT_RunIns:
; Line 8715
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [ecx+eax], 0
	jne	SHORT $LN243@TT_RunIns
	mov	DWORD PTR tv679[ebp], 1
	jmp	SHORT $LN244@TT_RunIns
$LN243@TT_RunIns:
	mov	DWORD PTR tv679[ebp], 0
$LN244@TT_RunIns:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR tv679[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 8716
	jmp	$LN193@TT_RunIns
$LN86@TT_RunIns:
; Line 8719
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_DELTAP
	add	esp, 8
; Line 8720
	jmp	$LN193@TT_RunIns
$LN85@TT_RunIns:
; Line 8723
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _args$20[ebp]
	mov	ax, WORD PTR [edx+eax]
	mov	WORD PTR [ecx+332], ax
; Line 8724
	jmp	$LN193@TT_RunIns
$LN84@TT_RunIns:
; Line 8727
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [eax+edx], 6
	jbe	SHORT $LN83@TT_RunIns
	push	OFFSET $SG13263
	push	8727					; 00002217H
	push	132					; 00000084H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 132				; 00000084H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN82@TT_RunIns
$LN83@TT_RunIns:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _args$20[ebp]
	mov	ax, WORD PTR [edx+eax]
	mov	WORD PTR [ecx+334], ax
$LN82@TT_RunIns:
; Line 8728
	jmp	$LN193@TT_RunIns
$LN81@TT_RunIns:
; Line 8731
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _args$20[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [eax+ecx], edx
; Line 8732
	jmp	$LN193@TT_RunIns
$LN80@TT_RunIns:
; Line 8735
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	sub	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [eax+ecx], edx
; Line 8736
	jmp	$LN193@TT_RunIns
$LN79@TT_RunIns:
; Line 8739
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	jne	SHORT $LN78@TT_RunIns
	push	OFFSET $SG13270
	push	8739					; 00002223H
	push	133					; 00000085H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 133				; 00000085H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN77@TT_RunIns
$LN78@TT_RunIns:
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	push	64					; 00000040H
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_FT_MulDiv_No_Round
	add	esp, 12					; 0000000cH
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [ecx+edx], eax
$LN77@TT_RunIns:
; Line 8740
	jmp	$LN193@TT_RunIns
$LN76@TT_RunIns:
; Line 8743
	push	64					; 00000040H
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 8744
	jmp	$LN193@TT_RunIns
$LN75@TT_RunIns:
; Line 8747
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [ecx+eax], 0
	jge	SHORT $LN245@TT_RunIns
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	neg	edx
	mov	DWORD PTR tv750[ebp], edx
	jmp	SHORT $LN246@TT_RunIns
$LN245@TT_RunIns:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR tv750[ebp], eax
$LN246@TT_RunIns:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR tv750[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 8748
	jmp	$LN193@TT_RunIns
$LN74@TT_RunIns:
; Line 8751
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	neg	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [eax+ecx], edx
; Line 8752
	jmp	$LN193@TT_RunIns
$LN73@TT_RunIns:
; Line 8755
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	and	ecx, -64				; ffffffc0H
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [edx+eax], ecx
; Line 8756
	jmp	$LN193@TT_RunIns
$LN72@TT_RunIns:
; Line 8759
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	add	eax, 63					; 0000003fH
	and	eax, -64				; ffffffc0H
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 8760
	jmp	$LN193@TT_RunIns
$LN71@TT_RunIns:
; Line 8766
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	mov	esi, esp
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-152]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+568]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 8767
	jmp	$LN193@TT_RunIns
$LN70@TT_RunIns:
; Line 8773
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+368]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-168]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Round_None
	add	esp, 12					; 0000000cH
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 8774
	jmp	$LN193@TT_RunIns
$LN69@TT_RunIns:
; Line 8777
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _I$4[ebp], eax
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR _I$4[ebp]
	cmp	edx, DWORD PTR [ecx+380]
	jb	SHORT $LN68@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+561]
	test	ecx, ecx
	je	SHORT $LN67@TT_RunIns
	jmp	$Set_Invalid_Ref$250
$LN67@TT_RunIns:
	jmp	SHORT $LN66@TT_RunIns
$LN68@TT_RunIns:
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+260]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+384]
	mov	ecx, DWORD PTR _I$4[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN66@TT_RunIns:
; Line 8778
	jmp	$LN193@TT_RunIns
$LN65@TT_RunIns:
; Line 8782
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_DELTAP
	add	esp, 8
; Line 8783
	jmp	$LN193@TT_RunIns
$LN64@TT_RunIns:
; Line 8788
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_DELTAC
	add	esp, 8
; Line 8789
	jmp	$LN193@TT_RunIns
$LN63@TT_RunIns:
; Line 8792
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	push	16384					; 00004000H
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_SetSuperRound
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+312], 6
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+568], OFFSET _Round_Super
; Line 8793
	jmp	$LN193@TT_RunIns
$LN62@TT_RunIns:
; Line 8796
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	push	11585					; 00002d41H
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_SetSuperRound
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+312], 7
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+568], OFFSET _Round_Super_45
; Line 8797
	jmp	$LN193@TT_RunIns
$LN61@TT_RunIns:
; Line 8800
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [eax+edx], 0
	je	$LN60@TT_RunIns
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [eax+edx], 0
	jne	SHORT $LN59@TT_RunIns
	mov	ecx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	jne	SHORT $LN59@TT_RunIns
	push	OFFSET $SG13298
	push	8800					; 00002260H
	push	132					; 00000084H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 132				; 00000084H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN59@TT_RunIns:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+360]
	mov	edx, DWORD PTR _args$20[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+360], eax
	mov	edx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [edx+360], 0
	jl	SHORT $LN57@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+428], 0
	jle	SHORT $LN58@TT_RunIns
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+428]
	sub	edx, 1
	shl	edx, 4
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+436]
	mov	edx, DWORD PTR [ecx+edx+12]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	cmp	ecx, DWORD PTR [edx+8]
	jle	SHORT $LN58@TT_RunIns
$LN57@TT_RunIns:
	push	OFFSET $SG13301
	push	8800					; 00002260H
	push	132					; 00000084H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 132				; 00000084H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN58@TT_RunIns:
	mov	eax, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [eax+376], 0
$LN60@TT_RunIns:
; Line 8801
	jmp	$LN193@TT_RunIns
$LN56@TT_RunIns:
; Line 8804
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	jne	$LN55@TT_RunIns
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _args$20[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	jne	SHORT $LN54@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN54@TT_RunIns
	push	OFFSET $SG13305
	push	8804					; 00002264H
	push	132					; 00000084H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 132				; 00000084H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN54@TT_RunIns:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	ecx, DWORD PTR _args$20[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+360], edx
	mov	ecx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [ecx+360], 0
	jl	SHORT $LN52@TT_RunIns
	mov	edx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [edx+428], 0
	jle	SHORT $LN53@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	sub	ecx, 1
	shl	ecx, 4
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+436]
	mov	ecx, DWORD PTR [eax+ecx+12]
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+360]
	cmp	eax, DWORD PTR [ecx+8]
	jle	SHORT $LN53@TT_RunIns
$LN52@TT_RunIns:
	push	OFFSET $SG13308
	push	8804					; 00002264H
	push	132					; 00000084H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 132				; 00000084H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN53@TT_RunIns:
	mov	edx, DWORD PTR _exc$[ebp]
	mov	BYTE PTR [edx+376], 0
$LN55@TT_RunIns:
; Line 8805
	jmp	$LN193@TT_RunIns
$LN51@TT_RunIns:
; Line 8808
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+312], 5
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+568], OFFSET _Round_None
; Line 8809
	jmp	$LN193@TT_RunIns
$LN50@TT_RunIns:
; Line 8812
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_UNKNOWN
	add	esp, 8
; Line 8813
	jmp	$LN193@TT_RunIns
$LN49@TT_RunIns:
; Line 8816
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+312], 4
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+568], OFFSET _Round_Up_To_Grid
; Line 8817
	jmp	$LN193@TT_RunIns
$LN48@TT_RunIns:
; Line 8820
	mov	eax, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [eax+312], 3
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+568], OFFSET _Round_Down_To_Grid
; Line 8821
	jmp	$LN193@TT_RunIns
$LN47@TT_RunIns:
; Line 8826
	jmp	$LN193@TT_RunIns
$LN46@TT_RunIns:
; Line 8829
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_FLIPPT
	add	esp, 8
; Line 8830
	jmp	$LN193@TT_RunIns
$LN45@TT_RunIns:
; Line 8833
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_FLIPRGON
	add	esp, 8
; Line 8834
	jmp	$LN193@TT_RunIns
$LN44@TT_RunIns:
; Line 8837
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_FLIPRGOFF
	add	esp, 8
; Line 8838
	jmp	$LN193@TT_RunIns
$LN43@TT_RunIns:
; Line 8842
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_UNKNOWN
	add	esp, 8
; Line 8843
	jmp	$LN193@TT_RunIns
$LN42@TT_RunIns:
; Line 8846
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_SCANCTRL
	add	esp, 8
; Line 8847
	jmp	$LN193@TT_RunIns
$LN41@TT_RunIns:
; Line 8851
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_SDPVTL
	add	esp, 8
; Line 8852
	jmp	$LN193@TT_RunIns
$LN40@TT_RunIns:
; Line 8855
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_GETINFO
	add	esp, 8
; Line 8856
	jmp	$LN193@TT_RunIns
$LN39@TT_RunIns:
; Line 8859
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_IDEF
	add	esp, 8
; Line 8860
	jmp	$LN193@TT_RunIns
$LN38@TT_RunIns:
; Line 8863
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_ROLL
	add	esp, 8
; Line 8864
	jmp	$LN193@TT_RunIns
$LN37@TT_RunIns:
; Line 8867
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [eax+edx]
	cmp	edx, DWORD PTR [esi+ecx]
	jle	SHORT $LN36@TT_RunIns
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax
$LN36@TT_RunIns:
; Line 8868
	jmp	$LN193@TT_RunIns
$LN35@TT_RunIns:
; Line 8871
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	cmp	ecx, DWORD PTR [esi+eax]
	jge	SHORT $LN34@TT_RunIns
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _args$20[ebp]
	mov	esi, DWORD PTR _args$20[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [eax+ecx], edx
$LN34@TT_RunIns:
; Line 8872
	jmp	$LN193@TT_RunIns
$LN33@TT_RunIns:
; Line 8875
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_SCANTYPE
	add	esp, 8
; Line 8876
	jmp	$LN193@TT_RunIns
$LN32@TT_RunIns:
; Line 8879
	mov	edx, DWORD PTR _args$20[ebp]
	push	edx
	mov	eax, DWORD PTR _exc$[ebp]
	push	eax
	call	_Ins_INSTCTRL
	add	esp, 8
; Line 8880
	jmp	$LN193@TT_RunIns
$LN31@TT_RunIns:
; Line 8883
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_UNKNOWN
	add	esp, 8
; Line 8884
	jmp	$LN193@TT_RunIns
$LN30@TT_RunIns:
; Line 8887
	movzx	eax, BYTE PTR _opcode$19[ebp]
	cmp	eax, 224				; 000000e0H
	jl	SHORT $LN29@TT_RunIns
; Line 8888
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_MIRP
	add	esp, 8
	jmp	SHORT $LN193@TT_RunIns
$LN29@TT_RunIns:
; Line 8889
	movzx	eax, BYTE PTR _opcode$19[ebp]
	cmp	eax, 192				; 000000c0H
	jl	SHORT $LN27@TT_RunIns
; Line 8890
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_MDRP
	add	esp, 8
	jmp	SHORT $LN193@TT_RunIns
$LN27@TT_RunIns:
; Line 8891
	movzx	eax, BYTE PTR _opcode$19[ebp]
	cmp	eax, 184				; 000000b8H
	jl	SHORT $LN25@TT_RunIns
; Line 8892
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_PUSHW
	add	esp, 8
	jmp	SHORT $LN193@TT_RunIns
$LN25@TT_RunIns:
; Line 8893
	movzx	eax, BYTE PTR _opcode$19[ebp]
	cmp	eax, 176				; 000000b0H
	jl	SHORT $LN23@TT_RunIns
; Line 8894
	mov	ecx, DWORD PTR _args$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _exc$[ebp]
	push	edx
	call	_Ins_PUSHB
	add	esp, 8
; Line 8895
	jmp	SHORT $LN193@TT_RunIns
$LN23@TT_RunIns:
; Line 8896
	mov	eax, DWORD PTR _args$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_UNKNOWN
	add	esp, 8
$LN193@TT_RunIns:
; Line 8907
	mov	edx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	$LN21@TT_RunIns
; Line 8909
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv980[ebp], ecx
	cmp	DWORD PTR tv980[ebp], 128		; 00000080H
	je	SHORT $LN18@TT_RunIns
	jmp	$LN11@TT_RunIns
$LN18@TT_RunIns:
; Line 8914
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+416]
	mov	DWORD PTR _def$3[ebp], eax
; Line 8915
	mov	ecx, DWORD PTR _exc$[ebp]
	imul	edx, DWORD PTR [ecx+408], 24
	add	edx, DWORD PTR _def$3[ebp]
	mov	DWORD PTR _limit$2[ebp], edx
; Line 8918
	jmp	SHORT $LN17@TT_RunIns
$LN16@TT_RunIns:
	mov	eax, DWORD PTR _def$3[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _def$3[ebp], eax
$LN17@TT_RunIns:
	mov	ecx, DWORD PTR _def$3[ebp]
	cmp	ecx, DWORD PTR _limit$2[ebp]
	jae	$LN15@TT_RunIns
; Line 8920
	mov	edx, DWORD PTR _def$3[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	$LN14@TT_RunIns
	mov	ecx, DWORD PTR _exc$[ebp]
	movzx	edx, BYTE PTR [ecx+368]
	mov	eax, DWORD PTR _def$3[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	edx, ecx
	jne	$LN14@TT_RunIns
; Line 8925
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [edx+428]
	cmp	ecx, DWORD PTR [eax+432]
	jl	SHORT $LN13@TT_RunIns
; Line 8927
	push	OFFSET $SG13357
	push	8927					; 000022dfH
	push	134					; 00000086H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 134				; 00000086H
	mov	edx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 8928
	jmp	$LErrorLabel_$249
$LN13@TT_RunIns:
; Line 8931
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	shl	ecx, 4
	mov	edx, DWORD PTR _exc$[ebp]
	add	ecx, DWORD PTR [edx+436]
	mov	DWORD PTR _callrec$1[ebp], ecx
; Line 8933
	mov	eax, DWORD PTR _callrec$1[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+352]
	mov	DWORD PTR [eax], edx
; Line 8934
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	add	ecx, 1
	mov	edx, DWORD PTR _callrec$1[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 8935
	mov	eax, DWORD PTR _callrec$1[ebp]
	mov	DWORD PTR [eax+8], 1
; Line 8936
	mov	ecx, DWORD PTR _callrec$1[ebp]
	mov	edx, DWORD PTR _def$3[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 8938
	mov	eax, DWORD PTR _def$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _def$3[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _exc$[ebp]
	push	ecx
	call	_Ins_Goto_CodeRange
	add	esp, 12					; 0000000cH
	movzx	edx, al
	cmp	edx, 1
	jne	SHORT $LN12@TT_RunIns
; Line 8939
	jmp	$LErrorLabel_$249
$LN12@TT_RunIns:
; Line 8941
	jmp	$LSuiteLabel_$251
$LN14@TT_RunIns:
; Line 8943
	jmp	$LN16@TT_RunIns
$LN15@TT_RunIns:
; Line 8946
	push	OFFSET $SG13360
	push	8946					; 000022f2H
	push	128					; 00000080H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 8947
	jmp	$LErrorLabel_$249
$LN11@TT_RunIns:
; Line 8956
	jmp	$LErrorLabel_$249
$LN21@TT_RunIns:
; Line 8964
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+16], ecx
; Line 8966
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+376]
	test	eax, eax
	je	SHORT $LN10@TT_RunIns
; Line 8967
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	eax, DWORD PTR _exc$[ebp]
	add	edx, DWORD PTR [eax+372]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+360], edx
$LN10@TT_RunIns:
; Line 8971
	mov	edx, DWORD PTR _ins_counter$[ebp]
	add	edx, 1
	mov	DWORD PTR _ins_counter$[ebp], edx
	cmp	DWORD PTR _ins_counter$[ebp], 1000000	; 000f4240H
	jle	SHORT $LSuiteLabel_$251
; Line 8972
	push	OFFSET $SG13364
	push	8972					; 0000230cH
	push	139					; 0000008bH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 139				; 0000008bH
	jmp	$LN221@TT_RunIns
$LSuiteLabel_$251:
; Line 8975
	mov	eax, DWORD PTR _exc$[ebp]
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [eax+360]
	cmp	edx, DWORD PTR [ecx+364]
	jl	SHORT $LN217@TT_RunIns
; Line 8977
	mov	eax, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [eax+428], 0
	jle	SHORT $LN7@TT_RunIns
; Line 8979
	push	OFFSET $SG13367
	push	8979					; 00002313H
	push	131					; 00000083H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 131				; 00000083H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 8980
	jmp	SHORT $LErrorLabel_$249
; Line 8982
	jmp	SHORT $LN217@TT_RunIns
$LN7@TT_RunIns:
; Line 8983
	jmp	SHORT $LNo_Error_$252
$LN217@TT_RunIns:
; Line 8985
	mov	edx, DWORD PTR _exc$[ebp]
	movzx	eax, BYTE PTR [edx+488]
	test	eax, eax
	je	$LN218@TT_RunIns
$LNo_Error_$252:
; Line 8993
	xor	eax, eax
	jmp	$LN221@TT_RunIns
$LErrorCodeOverflow_$248:
; Line 8996
	push	OFFSET $SG13370
	push	8996					; 00002324H
	push	131					; 00000083H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 131				; 00000083H
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LErrorLabel_$249:
; Line 9009
	mov	edx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@TT_RunIns
	mov	eax, DWORD PTR _exc$[ebp]
	movzx	ecx, BYTE PTR [eax+488]
	test	ecx, ecx
	jne	SHORT $LN5@TT_RunIns
	mov	edx, DWORD PTR _exc$[ebp]
	cmp	DWORD PTR [edx+352], 3
	jne	SHORT $LN5@TT_RunIns
$LN4@TT_RunIns:
; Line 9011
	mov	eax, 4
	imul	ecx, eax, 29
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN3@TT_RunIns
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG13376
	call	_FT_Message
	add	esp, 8
$LN3@TT_RunIns:
	xor	ecx, ecx
	jne	SHORT $LN4@TT_RunIns
; Line 9012
	mov	edx, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+300], -1
; Line 9013
	mov	ecx, DWORD PTR _exc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+304], -1
$LN5@TT_RunIns:
; Line 9016
	mov	eax, DWORD PTR _exc$[ebp]
	mov	eax, DWORD PTR [eax+12]
$LN221@TT_RunIns:
; Line 9017
	pop	edi
	pop	esi
	add	esp, 148				; 00000094H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN247@TT_RunIns:
	DD	$LN192@TT_RunIns
	DD	$LN192@TT_RunIns
	DD	$LN192@TT_RunIns
	DD	$LN192@TT_RunIns
	DD	$LN192@TT_RunIns
	DD	$LN192@TT_RunIns
	DD	$LN187@TT_RunIns
	DD	$LN187@TT_RunIns
	DD	$LN185@TT_RunIns
	DD	$LN185@TT_RunIns
	DD	$LN183@TT_RunIns
	DD	$LN182@TT_RunIns
	DD	$LN181@TT_RunIns
	DD	$LN180@TT_RunIns
	DD	$LN179@TT_RunIns
	DD	$LN178@TT_RunIns
	DD	$LN177@TT_RunIns
	DD	$LN176@TT_RunIns
	DD	$LN175@TT_RunIns
	DD	$LN174@TT_RunIns
	DD	$LN173@TT_RunIns
	DD	$LN172@TT_RunIns
	DD	$LN171@TT_RunIns
	DD	$LN170@TT_RunIns
	DD	$LN167@TT_RunIns
	DD	$LN166@TT_RunIns
	DD	$LN165@TT_RunIns
	DD	$LN164@TT_RunIns
	DD	$LN163@TT_RunIns
	DD	$LN159@TT_RunIns
	DD	$LN158@TT_RunIns
	DD	$LN157@TT_RunIns
	DD	$LN156@TT_RunIns
	DD	$LN155@TT_RunIns
	DD	$LN154@TT_RunIns
	DD	$LN153@TT_RunIns
	DD	$LN152@TT_RunIns
	DD	$LN151@TT_RunIns
	DD	$LN146@TT_RunIns
	DD	$LN145@TT_RunIns
	DD	$LN144@TT_RunIns
	DD	$LN143@TT_RunIns
	DD	$LN142@TT_RunIns
	DD	$LN141@TT_RunIns
	DD	$LN140@TT_RunIns
	DD	$LN139@TT_RunIns
	DD	$LN138@TT_RunIns
	DD	$LN138@TT_RunIns
	DD	$LN137@TT_RunIns
	DD	$LN137@TT_RunIns
	DD	$LN136@TT_RunIns
	DD	$LN136@TT_RunIns
	DD	$LN135@TT_RunIns
	DD	$LN135@TT_RunIns
	DD	$LN134@TT_RunIns
	DD	$LN134@TT_RunIns
	DD	$LN133@TT_RunIns
	DD	$LN132@TT_RunIns
	DD	$LN131@TT_RunIns
	DD	$LN131@TT_RunIns
	DD	$LN130@TT_RunIns
	DD	$LN129@TT_RunIns
	DD	$LN128@TT_RunIns
	DD	$LN128@TT_RunIns
	DD	$LN127@TT_RunIns
	DD	$LN126@TT_RunIns
	DD	$LN125@TT_RunIns
	DD	$LN121@TT_RunIns
	DD	$LN116@TT_RunIns
	DD	$LN112@TT_RunIns
	DD	$LN107@TT_RunIns
	DD	$LN107@TT_RunIns
	DD	$LN106@TT_RunIns
	DD	$LN105@TT_RunIns
	DD	$LN105@TT_RunIns
	DD	$LN104@TT_RunIns
	DD	$LN103@TT_RunIns
	DD	$LN102@TT_RunIns
	DD	$LN101@TT_RunIns
	DD	$LN100@TT_RunIns
	DD	$LN99@TT_RunIns
	DD	$LN98@TT_RunIns
	DD	$LN97@TT_RunIns
	DD	$LN96@TT_RunIns
	DD	$LN95@TT_RunIns
	DD	$LN94@TT_RunIns
	DD	$LN93@TT_RunIns
	DD	$LN92@TT_RunIns
	DD	$LN91@TT_RunIns
	DD	$LN90@TT_RunIns
	DD	$LN89@TT_RunIns
	DD	$LN88@TT_RunIns
	DD	$LN87@TT_RunIns
	DD	$LN86@TT_RunIns
	DD	$LN85@TT_RunIns
	DD	$LN84@TT_RunIns
	DD	$LN81@TT_RunIns
	DD	$LN80@TT_RunIns
	DD	$LN79@TT_RunIns
	DD	$LN76@TT_RunIns
	DD	$LN75@TT_RunIns
	DD	$LN74@TT_RunIns
	DD	$LN73@TT_RunIns
	DD	$LN72@TT_RunIns
	DD	$LN71@TT_RunIns
	DD	$LN71@TT_RunIns
	DD	$LN71@TT_RunIns
	DD	$LN71@TT_RunIns
	DD	$LN70@TT_RunIns
	DD	$LN70@TT_RunIns
	DD	$LN70@TT_RunIns
	DD	$LN70@TT_RunIns
	DD	$LN69@TT_RunIns
	DD	$LN65@TT_RunIns
	DD	$LN65@TT_RunIns
	DD	$LN64@TT_RunIns
	DD	$LN64@TT_RunIns
	DD	$LN64@TT_RunIns
	DD	$LN63@TT_RunIns
	DD	$LN62@TT_RunIns
	DD	$LN61@TT_RunIns
	DD	$LN56@TT_RunIns
	DD	$LN51@TT_RunIns
	DD	$LN50@TT_RunIns
	DD	$LN49@TT_RunIns
	DD	$LN48@TT_RunIns
	DD	$LN47@TT_RunIns
	DD	$LN47@TT_RunIns
	DD	$LN46@TT_RunIns
	DD	$LN45@TT_RunIns
	DD	$LN44@TT_RunIns
	DD	$LN43@TT_RunIns
	DD	$LN43@TT_RunIns
	DD	$LN42@TT_RunIns
	DD	$LN41@TT_RunIns
	DD	$LN41@TT_RunIns
	DD	$LN40@TT_RunIns
	DD	$LN39@TT_RunIns
	DD	$LN38@TT_RunIns
	DD	$LN37@TT_RunIns
	DD	$LN35@TT_RunIns
	DD	$LN33@TT_RunIns
	DD	$LN32@TT_RunIns
	DD	$LN31@TT_RunIns
_TT_RunIns ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exec$ = 8						; size = 4
_debug$ = 12						; size = 1
_TT_Run_Context PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 692
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 693
	push	0
	push	3
	mov	eax, DWORD PTR _exec$[ebp]
	push	eax
	call	_TT_Goto_CodeRange
	add	esp, 12					; 0000000cH
; Line 695
	mov	esi, DWORD PTR _exec$[ebp]
	add	esi, 144				; 00000090H
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 36					; 00000024H
	mov	ecx, 9
	rep movsd
; Line 696
	mov	esi, DWORD PTR _exec$[ebp]
	add	esi, 144				; 00000090H
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 72					; 00000048H
	mov	ecx, 9
	rep movsd
; Line 697
	mov	esi, DWORD PTR _exec$[ebp]
	add	esi, 144				; 00000090H
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 108				; 0000006cH
	mov	ecx, 9
	rep movsd
; Line 699
	mov	ecx, 1
	mov	edx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [edx+344], cx
; Line 700
	mov	eax, 1
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [ecx+346], ax
; Line 701
	mov	edx, 1
	mov	eax, DWORD PTR _exec$[ebp]
	mov	WORD PTR [eax+348], dx
; Line 703
	mov	ecx, 16384				; 00004000H
	mov	edx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [edx+294], cx
; Line 704
	xor	eax, eax
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [ecx+296], ax
; Line 706
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR [edx+294]
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+298], eax
; Line 707
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR [edx+294]
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+290], eax
; Line 713
	mov	edx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [edx+312], 1
; Line 714
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+304], 1
; Line 718
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 719
	mov	edx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [edx+428], 0
; Line 722
	mov	al, BYTE PTR _debug$[ebp]
	mov	BYTE PTR _debug$[ebp], al
; Line 724
	mov	esi, esp
	mov	ecx, DWORD PTR _exec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+652]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 731
	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_TT_Run_Context ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_exec$ = 8						; size = 4
_size$ = 12						; size = 4
_TT_Save_Context PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 647
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 654
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	edx, DWORD PTR [ecx+396]
	mov	DWORD PTR [eax+116], edx
; Line 655
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	mov	DWORD PTR [eax+128], edx
; Line 657
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	edx, DWORD PTR [ecx+420]
	mov	DWORD PTR [eax+140], edx
; Line 658
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	edx, DWORD PTR [ecx+424]
	mov	DWORD PTR [eax+144], edx
; Line 660
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@TT_Save_Co
$LN2@TT_Save_Co:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@TT_Save_Co:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN4@TT_Save_Co
; Line 661
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+444]
	mov	ecx, DWORD PTR [edx+ecx*8+448]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _size$[ebp]
	mov	DWORD PTR [esi+edx*8+148], eax
	mov	DWORD PTR [esi+edx*8+152], ecx
	jmp	SHORT $LN2@TT_Save_Co
$LN4@TT_Save_Co:
; Line 662
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TT_Save_Context ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -24						; size = 4
_maxp$ = -20						; size = 4
_tmp$ = -12						; size = 4
_i$ = -4						; size = 4
_exec$ = 8						; size = 4
_face$ = 12						; size = 4
_size$ = 16						; size = 4
_TT_Load_Context PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 546
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 553
	mov	eax, DWORD PTR _exec$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 554
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 260				; 00000104H
	mov	DWORD PTR _maxp$[ebp], edx
; Line 555
	mov	eax, DWORD PTR _exec$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 557
	cmp	DWORD PTR _size$[ebp], 0
	je	$LN6@TT_Load_Co
; Line 559
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR [edx+396], ecx
; Line 560
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR [edx+400], ecx
; Line 561
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR [edx+408], ecx
; Line 562
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR [edx+412], ecx
; Line 563
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR [edx+404], ecx
; Line 564
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR [edx+416], ecx
; Line 565
	mov	esi, DWORD PTR _size$[ebp]
	add	esi, 72					; 00000048H
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 244				; 000000f4H
	mov	ecx, 10					; 0000000aH
	rep movsd
; Line 566
	mov	esi, DWORD PTR _size$[ebp]
	add	esi, 44					; 0000002cH
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 216				; 000000d8H
	mov	ecx, 7
	rep movsd
; Line 568
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR [edx+420], ecx
; Line 569
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	DWORD PTR [edx+424], ecx
; Line 571
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@TT_Load_Co
$LN4@TT_Load_Co:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@TT_Load_Co:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN3@TT_Load_Co
; Line 572
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+148]
	mov	eax, DWORD PTR [ecx+eax*8+152]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [esi+ecx*8+444], edx
	mov	DWORD PTR [esi+ecx*8+448], eax
	jmp	SHORT $LN4@TT_Load_Co
$LN3@TT_Load_Co:
; Line 575
	mov	esi, DWORD PTR _size$[ebp]
	add	esi, 172				; 000000acH
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 284				; 0000011cH
	mov	ecx, 17					; 00000011H
	rep movsd
; Line 577
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	mov	DWORD PTR [edx+380], ecx
; Line 578
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	mov	DWORD PTR [edx+384], ecx
; Line 580
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	cx, WORD PTR [eax+248]
	mov	WORD PTR [edx+468], cx
; Line 581
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	DWORD PTR [edx+472], ecx
; Line 583
	mov	esi, DWORD PTR _size$[ebp]
	add	esi, 256				; 00000100H
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 180				; 000000b4H
	mov	ecx, 9
	rep movsd
; Line 587
	push	36					; 00000024H
	push	0
	mov	edx, DWORD PTR _exec$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 588
	mov	esi, DWORD PTR _exec$[ebp]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 72					; 00000048H
	mov	ecx, 9
	rep movsd
; Line 589
	mov	esi, DWORD PTR _exec$[ebp]
	add	esi, 36					; 00000024H
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 108				; 0000006cH
	mov	ecx, 9
	rep movsd
$LN6@TT_Load_Co:
; Line 594
	mov	eax, DWORD PTR _exec$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _tmp$[ebp], ecx
; Line 599
	mov	edx, DWORD PTR _maxp$[ebp]
	movzx	eax, WORD PTR [edx+24]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _exec$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	4
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _exec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_Update_Max
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 600
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 601
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@TT_Load_Co
; Line 602
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN7@TT_Load_Co
$LN2@TT_Load_Co:
; Line 604
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	edx, DWORD PTR [ecx+388]
	mov	DWORD PTR _tmp$[ebp], edx
; Line 609
	mov	eax, DWORD PTR _maxp$[ebp]
	movzx	ecx, WORD PTR [eax+26]
	push	ecx
	mov	edx, DWORD PTR _exec$[ebp]
	add	edx, 392				; 00000188H
	push	edx
	push	1
	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_Update_Max
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 610
	movzx	eax, WORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+388], eax
; Line 611
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@TT_Load_Co
; Line 612
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN7@TT_Load_Co
$LN1@TT_Load_Co:
; Line 614
	xor	edx, edx
	mov	eax, DWORD PTR _exec$[ebp]
	mov	WORD PTR [eax+152], dx
; Line 615
	xor	ecx, ecx
	mov	edx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [edx+154], cx
; Line 617
	mov	esi, DWORD PTR _exec$[ebp]
	add	esi, 144				; 00000090H
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 72					; 00000048H
	mov	ecx, 9
	rep movsd
; Line 618
	mov	esi, DWORD PTR _exec$[ebp]
	add	esi, 144				; 00000090H
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 108				; 0000006cH
	mov	ecx, 9
	rep movsd
; Line 619
	mov	esi, DWORD PTR _exec$[ebp]
	add	esi, 144				; 00000090H
	mov	edi, DWORD PTR _exec$[ebp]
	add	edi, 36					; 00000024H
	mov	ecx, 9
	rep movsd
; Line 621
	mov	eax, DWORD PTR _exec$[ebp]
	mov	BYTE PTR [eax+488], 0
; Line 623
	xor	eax, eax
$LN7@TT_Load_Co:
; Line 624
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@TT_Load_Co
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@TT_Load_Co:
	DD	1
	DD	$LN10@TT_Load_Co
$LN10@TT_Load_Co:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN9@TT_Load_Co
$LN9@TT_Load_Co:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TT_Load_Context ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_exec$ = 8						; size = 4
_TT_Done_Context PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 390
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 391
	mov	eax, DWORD PTR _exec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 395
	xor	edx, edx
	mov	eax, DWORD PTR _exec$[ebp]
	mov	WORD PTR [eax+440], dx
; Line 396
	xor	ecx, ecx
	mov	edx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [edx+442], cx
$LN12@TT_Done_Co:
; Line 399
	mov	eax, DWORD PTR _exec$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+24], 0
	xor	ecx, ecx
	jne	SHORT $LN12@TT_Done_Co
; Line 400
	mov	edx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [edx+20], 0
$LN9@TT_Done_Co:
; Line 403
	mov	eax, DWORD PTR _exec$[ebp]
	mov	ecx, DWORD PTR [eax+436]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+436], 0
	xor	ecx, ecx
	jne	SHORT $LN9@TT_Done_Co
; Line 404
	mov	edx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [edx+432], 0
; Line 405
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+428], 0
$LN6@TT_Done_Co:
; Line 408
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+392], 0
	xor	edx, edx
	jne	SHORT $LN6@TT_Done_Co
; Line 409
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+388], 0
; Line 411
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 412
	mov	edx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [edx], 0
$LN3@TT_Done_Co:
; Line 414
	mov	eax, DWORD PTR _exec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _exec$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@TT_Done_Co
; Line 415
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TT_Done_Context ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exec$1 = -20						; size = 4
_error$2 = -12						; size = 4
_memory$ = -4						; size = 4
_driver$ = 8						; size = 4
_TT_New_Context PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 762
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 766
	cmp	DWORD PTR _driver$[ebp], 0
	jne	SHORT $LN4@TT_New_Con
; Line 767
	jmp	SHORT $Fail$10
$LN4@TT_New_Con:
; Line 769
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 771
	mov	edx, DWORD PTR _driver$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	SHORT $LN3@TT_New_Con
; Line 778
	lea	eax, DWORD PTR _error$2[ebp]
	push	eax
	push	612					; 00000264H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _exec$1[ebp], eax
	cmp	DWORD PTR _error$2[ebp], 0
	je	SHORT $LN2@TT_New_Con
; Line 779
	jmp	SHORT $Fail$10
$LN2@TT_New_Con:
; Line 782
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _exec$1[ebp]
	push	eax
	call	_Init_Context
	add	esp, 8
	mov	DWORD PTR _error$2[ebp], eax
; Line 783
	cmp	DWORD PTR _error$2[ebp], 0
	je	SHORT $LN1@TT_New_Con
; Line 784
	jmp	SHORT $Fail$10
$LN1@TT_New_Con:
; Line 787
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR _exec$1[ebp]
	mov	DWORD PTR [ecx+28], edx
$LN3@TT_New_Con:
; Line 790
	mov	eax, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR [eax+28]
	jmp	SHORT $LN5@TT_New_Con
$Fail$10:
; Line 793
	xor	eax, eax
$LN5@TT_New_Con:
; Line 794
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@TT_New_Con
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@TT_New_Con:
	DD	1
	DD	$LN8@TT_New_Con
$LN8@TT_New_Con:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@TT_New_Con
$LN7@TT_New_Con:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_TT_New_Context ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pbuff$ = -16						; size = 4
_error$ = -8						; size = 4
_memory$ = 8						; size = 4
_size$ = 12						; size = 4
_multiplier$ = 16					; size = 4
__pbuff$ = 20						; size = 4
_new_max$ = 24						; size = 4
_Update_Max PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 504
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 506
	mov	eax, DWORD PTR __pbuff$[ebp]
	mov	DWORD PTR _pbuff$[ebp], eax
; Line 509
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _new_max$[ebp]
	jae	SHORT $LN2@Update_Max
; Line 511
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbuff$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _new_max$[ebp]
	imul	eax, DWORD PTR _multiplier$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, DWORD PTR _multiplier$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _pbuff$[ebp]
	mov	DWORD PTR [ecx], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@Update_Max
; Line 512
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN3@Update_Max
$LN1@Update_Max:
; Line 513
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _new_max$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@Update_Max:
; Line 516
	xor	eax, eax
$LN3@Update_Max:
; Line 517
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Update_Max
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Update_Max:
	DD	1
	DD	$LN6@Update_Max
$LN6@Update_Max:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@Update_Max
$LN5@Update_Max:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_Update_Max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exec$ = 8						; size = 4
_range$ = 12						; size = 4
_TT_Clear_CodeRange PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 357
	push	ebp
	mov	ebp, esp
$LN5@TT_Clear_C:
; Line 358
	cmp	DWORD PTR _range$[ebp], 1
	jl	SHORT $LN1@TT_Clear_C
	cmp	DWORD PTR _range$[ebp], 3
	jle	SHORT $LN4@TT_Clear_C
$LN1@TT_Clear_C:
	push	OFFSET $SG10967
	push	358					; 00000166H
	push	OFFSET $SG10968
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@TT_Clear_C:
	xor	eax, eax
	jne	SHORT $LN5@TT_Clear_C
; Line 360
	mov	ecx, DWORD PTR _range$[ebp]
	mov	edx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [edx+ecx*8+436], 0
; Line 361
	mov	eax, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+eax*8+440], 0
; Line 362
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_TT_Clear_CodeRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exec$ = 8						; size = 4
_range$ = 12						; size = 4
_base$ = 16						; size = 4
_length$ = 20						; size = 4
_TT_Set_CodeRange PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 332
	push	ebp
	mov	ebp, esp
$LN5@TT_Set_Cod:
; Line 333
	cmp	DWORD PTR _range$[ebp], 1
	jl	SHORT $LN1@TT_Set_Cod
	cmp	DWORD PTR _range$[ebp], 3
	jle	SHORT $LN4@TT_Set_Cod
$LN1@TT_Set_Cod:
	push	OFFSET $SG10954
	push	333					; 0000014dH
	push	OFFSET $SG10955
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@TT_Set_Cod:
	xor	eax, eax
	jne	SHORT $LN5@TT_Set_Cod
; Line 335
	mov	ecx, DWORD PTR _range$[ebp]
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+ecx*8+436], eax
; Line 336
	mov	ecx, DWORD PTR _range$[ebp]
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [edx+ecx*8+440], eax
; Line 337
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_TT_Set_CodeRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_coderange$ = -4					; size = 4
_exec$ = 8						; size = 4
_range$ = 12						; size = 4
_IP$ = 16						; size = 4
_TT_Goto_CodeRange PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttinterp.c
; Line 286
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN13@TT_Goto_Co:
; Line 290
	cmp	DWORD PTR _range$[ebp], 1
	jl	SHORT $LN9@TT_Goto_Co
	cmp	DWORD PTR _range$[ebp], 3
	jle	SHORT $LN12@TT_Goto_Co
$LN9@TT_Goto_Co:
	push	OFFSET $SG10924
	push	290					; 00000122H
	push	OFFSET $SG10925
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN12@TT_Goto_Co:
	xor	eax, eax
	jne	SHORT $LN13@TT_Goto_Co
; Line 292
	mov	ecx, DWORD PTR _range$[ebp]
	mov	edx, DWORD PTR _exec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+436]
	mov	DWORD PTR _coderange$[ebp], eax
$LN8@TT_Goto_Co:
; Line 294
	mov	ecx, DWORD PTR _coderange$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN7@TT_Goto_Co
	push	OFFSET $SG10931
	push	294					; 00000126H
	push	OFFSET $SG10932
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN7@TT_Goto_Co:
	xor	edx, edx
	jne	SHORT $LN8@TT_Goto_Co
$LN4@TT_Goto_Co:
; Line 300
	mov	eax, DWORD PTR _coderange$[ebp]
	mov	ecx, DWORD PTR _IP$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN3@TT_Goto_Co
	push	OFFSET $SG10938
	push	300					; 0000012cH
	push	OFFSET $SG10939
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@TT_Goto_Co:
	xor	edx, edx
	jne	SHORT $LN4@TT_Goto_Co
; Line 302
	mov	eax, DWORD PTR _exec$[ebp]
	mov	ecx, DWORD PTR _coderange$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+356], edx
; Line 303
	mov	eax, DWORD PTR _exec$[ebp]
	mov	ecx, DWORD PTR _coderange$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+364], edx
; Line 304
	mov	eax, DWORD PTR _exec$[ebp]
	mov	ecx, DWORD PTR _IP$[ebp]
	mov	DWORD PTR [eax+360], ecx
; Line 305
	mov	edx, DWORD PTR _exec$[ebp]
	mov	eax, DWORD PTR _range$[ebp]
	mov	DWORD PTR [edx+352], eax
; Line 306
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TT_Goto_CodeRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_slot$ = 8						; size = 4
_tt_slot_init PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 1329
	push	ebp
	mov	ebp, esp
; Line 1330
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_GlyphLoader_CreateExtra
	add	esp, 4
; Line 1331
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_tt_slot_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_driver$ = -4						; size = 4
_ttdriver$ = 8						; size = 4
_tt_driver_done PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 1295
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1297
	mov	eax, DWORD PTR _ttdriver$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 1301
	mov	ecx, DWORD PTR _driver$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN2@tt_driver_
; Line 1303
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_TT_Done_Context
	add	esp, 4
; Line 1304
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [ecx+28], 0
$LN2@tt_driver_:
; Line 1310
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_driver_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_driver$ = -4						; size = 4
_ttdriver$ = 8						; size = 4
_tt_driver_init PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 1256
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1260
	mov	eax, DWORD PTR _ttdriver$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 1263
	mov	ecx, DWORD PTR _driver$[ebp]
	push	ecx
	call	_TT_New_Context
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@tt_driver_
; Line 1264
	push	OFFSET $SG10846
	push	1264					; 000004f0H
	push	153					; 00000099H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 153				; 00000099H
	jmp	SHORT $LN2@tt_driver_
$LN1@tt_driver_:
; Line 1269
	mov	edx, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [edx+68], 35			; 00000023H
; Line 1278
	xor	eax, eax
$LN2@tt_driver_:
; Line 1279
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_driver_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_metrics$ = -12						; size = 4
_error$ = -8						; size = 4
_face$ = -4						; size = 4
_size$ = 8						; size = 4
_tt_size_reset PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 1171
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1173
	mov	DWORD PTR _error$[ebp], 0
; Line 1177
	mov	eax, DWORD PTR _size$[ebp]
	mov	BYTE PTR [eax+108], 0
; Line 1179
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 1181
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR _metrics$[ebp], eax
; Line 1184
	mov	esi, DWORD PTR _size$[ebp]
	add	esi, 12					; 0000000cH
	mov	ecx, 7
	mov	edi, DWORD PTR _metrics$[ebp]
	rep movsd
; Line 1186
	mov	ecx, DWORD PTR _metrics$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 1
	jl	SHORT $LN5@tt_size_re
	mov	eax, DWORD PTR _metrics$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	ecx, 1
	jge	SHORT $LN6@tt_size_re
$LN5@tt_size_re:
; Line 1187
	push	OFFSET $SG10827
	push	1187					; 000004a3H
	push	151					; 00000097H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 151				; 00000097H
	jmp	$LN7@tt_size_re
$LN6@tt_size_re:
; Line 1193
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+176]
	and	eax, 8
	je	$LN4@tt_size_re
; Line 1196
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	movzx	ecx, WORD PTR [eax]
	shl	ecx, 6
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1198
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	movzx	eax, WORD PTR [edx+2]
	shl	eax, 6
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1201
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+70]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1203
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+72]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1205
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+74]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 1208
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+76]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN4@tt_size_re:
; Line 1212
	mov	edx, DWORD PTR _metrics$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _metrics$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jl	SHORT $LN3@tt_size_re
; Line 1214
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+88], edx
; Line 1215
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax+80], dx
; Line 1216
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+72], 65536		; 00010000H
; Line 1218
	mov	ecx, DWORD PTR _metrics$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+76], eax
; Line 1220
	jmp	SHORT $LN2@tt_size_re
$LN3@tt_size_re:
; Line 1222
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+88], edx
; Line 1223
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+80], dx
; Line 1225
	mov	eax, DWORD PTR _metrics$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+72], eax
; Line 1226
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+76], 65536		; 00010000H
$LN2@tt_size_re:
; Line 1230
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+304], -1
; Line 1233
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@tt_size_re
; Line 1234
	mov	ecx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [ecx+108], 1
$LN1@tt_size_re:
; Line 1236
	mov	eax, DWORD PTR _error$[ebp]
$LN7@tt_size_re:
; Line 1237
	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_size_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$1 = -12						; size = 4
_i$2 = -8						; size = 4
_error$ = -4						; size = 4
_size$ = 8						; size = 4
_pedantic$ = 12						; size = 1
_tt_size_ready_bytecode PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 1052
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1053
	mov	DWORD PTR _error$[ebp], 0
; Line 1056
	mov	eax, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [eax+300], 0
	jge	SHORT $LN13@tt_size_re
; Line 1057
	movzx	ecx, BYTE PTR _pedantic$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	_tt_size_init_bytecode
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN13@tt_size_re:
; Line 1059
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN11@tt_size_re
	mov	eax, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [eax+300], 0
	je	SHORT $LN12@tt_size_re
$LN11@tt_size_re:
; Line 1060
	jmp	$Exit$16
$LN12@tt_size_re:
; Line 1063
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [ecx+304], 0
	jge	$Exit$16
; Line 1066
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _face$1[ebp], eax
; Line 1071
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN9@tt_size_re
$LN8@tt_size_re:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN9@tt_size_re:
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR [edx+240]
	jae	SHORT $LN7@tt_size_re
; Line 1072
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _face$1[ebp]
	mov	ecx, DWORD PTR [eax+648]
	mov	edx, DWORD PTR _i$2[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+244]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN8@tt_size_re
$LN7@tt_size_re:
; Line 1075
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@tt_size_re
$LN5@tt_size_re:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN6@tt_size_re:
	mov	eax, DWORD PTR _size$[ebp]
	movzx	ecx, WORD PTR [eax+264]
	cmp	DWORD PTR _i$2[ebp], ecx
	jae	SHORT $LN4@tt_size_re
; Line 1077
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+268]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR [eax+ecx*8], 0
; Line 1078
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+268]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR [eax+ecx*8+4], 0
; Line 1079
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+272]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR [eax+ecx*8], 0
; Line 1080
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+272]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR [eax+ecx*8+4], 0
; Line 1081
	jmp	SHORT $LN5@tt_size_re
$LN4@tt_size_re:
; Line 1084
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN3@tt_size_re
$LN2@tt_size_re:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN3@tt_size_re:
	mov	eax, DWORD PTR _size$[ebp]
	movzx	ecx, WORD PTR [eax+248]
	cmp	DWORD PTR _i$2[ebp], ecx
	jae	SHORT $LN1@tt_size_re
; Line 1085
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+252]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR [eax+ecx*4], 0
	jmp	SHORT $LN2@tt_size_re
$LN1@tt_size_re:
; Line 1087
	mov	edi, DWORD PTR _size$[ebp]
	add	edi, 172				; 000000acH
	mov	ecx, 17					; 00000011H
	mov	esi, OFFSET _tt_default_graphics_state
	rep movsd
; Line 1089
	movzx	edx, BYTE PTR _pedantic$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_tt_size_run_prep
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$Exit$16:
; Line 1093
	mov	eax, DWORD PTR _error$[ebp]
; Line 1094
	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_size_ready_bytecode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -12						; size = 4
_exec$ = -8						; size = 4
_face$ = -4						; size = 4
_size$ = 8						; size = 4
_pedantic$ = 12						; size = 1
_tt_size_run_prep PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 842
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 843
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 849
	mov	edx, DWORD PTR _size$[ebp]
	movzx	eax, BYTE PTR [edx+292]
	test	eax, eax
	je	SHORT $LN11@tt_size_ru
; Line 850
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	mov	DWORD PTR _exec$[ebp], edx
; Line 851
	jmp	SHORT $LN10@tt_size_ru
$LN11@tt_size_ru:
; Line 852
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _exec$[ebp], edx
$LN10@tt_size_ru:
; Line 854
	cmp	DWORD PTR _exec$[ebp], 0
	jne	SHORT $LN9@tt_size_ru
; Line 855
	push	OFFSET $SG10710
	push	855					; 00000357H
	push	153					; 00000099H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 153				; 00000099H
	jmp	$LN12@tt_size_ru
$LN9@tt_size_ru:
; Line 857
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exec$[ebp]
	push	edx
	call	_TT_Load_Context
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 858
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@tt_size_ru
; Line 859
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN12@tt_size_ru
$LN8@tt_size_ru:
; Line 861
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+428], 0
; Line 862
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 864
	mov	edx, DWORD PTR _exec$[ebp]
	mov	BYTE PTR [edx+488], 0
; Line 866
	mov	eax, DWORD PTR _exec$[ebp]
	mov	cl, BYTE PTR _pedantic$[ebp]
	mov	BYTE PTR [eax+561], cl
; Line 871
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+636]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+640]
	push	edx
	push	2
	mov	eax, DWORD PTR _exec$[ebp]
	push	eax
	call	_TT_Set_CodeRange
	add	esp, 16					; 00000010H
; Line 873
	push	3
	mov	ecx, DWORD PTR _exec$[ebp]
	push	ecx
	call	_TT_Clear_CodeRange
	add	esp, 8
; Line 875
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+636], 0
	jbe	SHORT $LN7@tt_size_ru
; Line 877
	push	0
	push	2
	mov	eax, DWORD PTR _exec$[ebp]
	push	eax
	call	_TT_Goto_CodeRange
	add	esp, 12					; 0000000cH
; Line 879
	mov	ecx, DWORD PTR _size$[ebp]
	movzx	edx, BYTE PTR [ecx+292]
	test	edx, edx
	jne	SHORT $LN6@tt_size_ru
$LN5@tt_size_ru:
; Line 881
	mov	eax, 4
	imul	ecx, eax, 30
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN4@tt_size_ru
	push	OFFSET $SG10718
	call	_FT_Message
	add	esp, 4
$LN4@tt_size_ru:
	xor	edx, edx
	jne	SHORT $LN5@tt_size_ru
; Line 883
	mov	esi, esp
	mov	eax, DWORD PTR _exec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+652]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN6@tt_size_ru:
; Line 886
	jmp	SHORT $LN1@tt_size_ru
$LN7@tt_size_ru:
; Line 887
	mov	DWORD PTR _error$[ebp], 0
$LN1@tt_size_ru:
; Line 889
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+304], ecx
; Line 894
	mov	edx, 16384				; 00004000H
	mov	eax, DWORD PTR _exec$[ebp]
	mov	WORD PTR [eax+290], dx
; Line 895
	xor	ecx, ecx
	mov	edx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [edx+292], cx
; Line 896
	mov	eax, 16384				; 00004000H
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [ecx+294], ax
; Line 897
	xor	edx, edx
	mov	eax, DWORD PTR _exec$[ebp]
	mov	WORD PTR [eax+296], dx
; Line 898
	mov	ecx, 16384				; 00004000H
	mov	edx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [edx+298], cx
; Line 899
	xor	eax, eax
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [ecx+300], ax
; Line 901
	xor	edx, edx
	mov	eax, DWORD PTR _exec$[ebp]
	mov	WORD PTR [eax+284], dx
; Line 902
	xor	ecx, ecx
	mov	edx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [edx+286], cx
; Line 903
	xor	eax, eax
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [ecx+288], ax
; Line 905
	mov	edx, 1
	mov	eax, DWORD PTR _exec$[ebp]
	mov	WORD PTR [eax+344], dx
; Line 906
	mov	ecx, 1
	mov	edx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [edx+346], cx
; Line 907
	mov	eax, 1
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	WORD PTR [ecx+348], ax
; Line 909
	mov	edx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [edx+304], 1
; Line 912
	mov	esi, DWORD PTR _exec$[ebp]
	add	esi, 284				; 0000011cH
	mov	edi, DWORD PTR _size$[ebp]
	add	edi, 172				; 000000acH
	mov	ecx, 17					; 00000011H
	rep movsd
; Line 914
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exec$[ebp]
	push	ecx
	call	_TT_Save_Context
	add	esp, 8
; Line 916
	mov	eax, DWORD PTR _error$[ebp]
$LN12@tt_size_ru:
; Line 917
	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_size_run_prep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tt_metrics$1 = -20					; size = 4
_metrics$2 = -16					; size = 4
_error$ = -12						; size = 4
_exec$ = -8						; size = 4
_face$ = -4						; size = 4
_size$ = 8						; size = 4
_pedantic$ = 12						; size = 1
_tt_size_run_fpgm PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 748
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 749
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 755
	mov	edx, DWORD PTR _size$[ebp]
	movzx	eax, BYTE PTR [edx+292]
	test	eax, eax
	je	SHORT $LN11@tt_size_ru
; Line 756
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	mov	DWORD PTR _exec$[ebp], edx
; Line 757
	jmp	SHORT $LN10@tt_size_ru
$LN11@tt_size_ru:
; Line 758
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _exec$[ebp], edx
$LN10@tt_size_ru:
; Line 760
	cmp	DWORD PTR _exec$[ebp], 0
	jne	SHORT $LN9@tt_size_ru
; Line 761
	push	OFFSET $SG10684
	push	761					; 000002f9H
	push	153					; 00000099H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 153				; 00000099H
	jmp	$LN12@tt_size_ru
$LN9@tt_size_ru:
; Line 763
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exec$[ebp]
	push	edx
	call	_TT_Load_Context
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 764
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@tt_size_ru
; Line 765
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN12@tt_size_ru
$LN8@tt_size_ru:
; Line 767
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+428], 0
; Line 768
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 770
	mov	edx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [edx+476], 64			; 00000040H
; Line 771
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+480], 0
; Line 772
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [ecx+484], 0
; Line 774
	mov	edx, DWORD PTR _exec$[ebp]
	mov	BYTE PTR [edx+488], 0
; Line 775
	mov	eax, DWORD PTR _exec$[ebp]
	mov	DWORD PTR [eax+564], 16384		; 00004000H
; Line 777
	mov	ecx, DWORD PTR _exec$[ebp]
	mov	dl, BYTE PTR _pedantic$[ebp]
	mov	BYTE PTR [ecx+561], dl
; Line 780
	mov	eax, DWORD PTR _exec$[ebp]
	add	eax, 216				; 000000d8H
	mov	DWORD PTR _metrics$2[ebp], eax
; Line 781
	mov	ecx, DWORD PTR _exec$[ebp]
	add	ecx, 244				; 000000f4H
	mov	DWORD PTR _tt_metrics$1[ebp], ecx
; Line 784
	xor	edx, edx
	mov	eax, DWORD PTR _metrics$2[ebp]
	mov	WORD PTR [eax], dx
; Line 785
	xor	ecx, ecx
	mov	edx, DWORD PTR _metrics$2[ebp]
	mov	WORD PTR [edx+2], cx
; Line 786
	mov	eax, DWORD PTR _metrics$2[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 787
	mov	ecx, DWORD PTR _metrics$2[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 789
	xor	edx, edx
	mov	eax, DWORD PTR _tt_metrics$1[ebp]
	mov	WORD PTR [eax+8], dx
; Line 790
	mov	ecx, DWORD PTR _tt_metrics$1[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 791
	mov	edx, DWORD PTR _tt_metrics$1[ebp]
	mov	DWORD PTR [edx+12], 65536		; 00010000H
; Line 798
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+628]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+632]
	push	eax
	push	1
	mov	ecx, DWORD PTR _exec$[ebp]
	push	ecx
	call	_TT_Set_CodeRange
	add	esp, 16					; 00000010H
; Line 801
	push	2
	mov	edx, DWORD PTR _exec$[ebp]
	push	edx
	call	_TT_Clear_CodeRange
	add	esp, 8
; Line 802
	push	3
	mov	eax, DWORD PTR _exec$[ebp]
	push	eax
	call	_TT_Clear_CodeRange
	add	esp, 8
; Line 804
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+628], 0
	jbe	SHORT $LN7@tt_size_ru
; Line 806
	push	0
	push	1
	mov	edx, DWORD PTR _exec$[ebp]
	push	edx
	call	_TT_Goto_CodeRange
	add	esp, 12					; 0000000cH
$LN6@tt_size_ru:
; Line 808
	mov	eax, 4
	imul	ecx, eax, 30
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN5@tt_size_ru
	push	OFFSET $SG10693
	call	_FT_Message
	add	esp, 4
$LN5@tt_size_ru:
	xor	edx, edx
	jne	SHORT $LN6@tt_size_ru
; Line 809
	mov	esi, esp
	mov	eax, DWORD PTR _exec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+652]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 811
	jmp	SHORT $LN2@tt_size_ru
$LN7@tt_size_ru:
; Line 812
	mov	DWORD PTR _error$[ebp], 0
$LN2@tt_size_ru:
; Line 814
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+300], ecx
; Line 816
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@tt_size_ru
; Line 817
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _exec$[ebp]
	push	eax
	call	_TT_Save_Context
	add	esp, 8
$LN1@tt_size_ru:
; Line 819
	mov	eax, DWORD PTR _error$[ebp]
$LN12@tt_size_ru:
; Line 820
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_size_run_fpgm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -4						; size = 4
_ttsize$ = 8						; size = 4
_tt_size_done PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 1145
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1146
	mov	eax, DWORD PTR _ttsize$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 1150
	mov	ecx, DWORD PTR _ttsize$[ebp]
	push	ecx
	call	_tt_size_done_bytecode
	add	esp, 4
; Line 1153
	mov	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [edx+108], 0
; Line 1154
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_size_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -8						; size = 4
_size$ = -4						; size = 4
_ttsize$ = 8						; size = 4
_tt_size_init PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 1115
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1116
	mov	eax, DWORD PTR _ttsize$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 1117
	mov	DWORD PTR _error$[ebp], 0
; Line 1121
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+300], -1
; Line 1122
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+304], -1
; Line 1125
	mov	eax, DWORD PTR _size$[ebp]
	mov	BYTE PTR [eax+108], 0
; Line 1126
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+112], -1
; Line 1128
	mov	eax, DWORD PTR _error$[ebp]
; Line 1129
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_size_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sfnt$ = -16						; size = 4
_stream$ = -12						; size = 4
_memory$ = -8						; size = 4
_face$ = -4						; size = 4
_ttface$ = 8						; size = 4
_tt_face_done PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 678
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 679
	mov	eax, DWORD PTR _ttface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 685
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN6@tt_face_do
; Line 686
	jmp	$LN7@tt_face_do
$LN6@tt_face_do:
; Line 688
	mov	ecx, DWORD PTR _ttface$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 689
	mov	eax, DWORD PTR _ttface$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 690
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+532]
	mov	DWORD PTR _sfnt$[ebp], eax
; Line 693
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+660], 0
	je	SHORT $LN5@tt_face_do
; Line 694
	mov	esi, esp
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+656]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+660]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@tt_face_do:
; Line 696
	cmp	DWORD PTR _sfnt$[ebp], 0
	je	SHORT $LN4@tt_face_do
; Line 697
	mov	esi, esp
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@tt_face_do:
; Line 700
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_done_loca
	add	esp, 4
; Line 702
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_free_hdmx
	add	esp, 4
$LN3@tt_face_do:
; Line 705
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+648]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+648], 0
	xor	eax, eax
	jne	SHORT $LN3@tt_face_do
; Line 706
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+644], 0
; Line 709
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 632				; 00000278H
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 710
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 640				; 00000280H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 711
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+628], 0
; Line 712
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+636], 0
; Line 715
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+676]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_tt_done_blend
	add	esp, 8
; Line 716
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+676], 0
$LN7@tt_face_do:
; Line 718
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = -16						; size = 4
_sfnt$ = -12						; size = 4
_library$ = -8						; size = 4
_error$ = -4						; size = 4
_stream$ = 8						; size = 4
_ttface$ = 12						; size = 4
_face_index$ = 16					; size = 4
_num_params$ = 20					; size = 4
_params$ = 24						; size = 4
_tt_face_init PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 511
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 515
	mov	eax, DWORD PTR _ttface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
$LN26@tt_face_in:
; Line 518
	mov	ecx, 4
	imul	edx, ecx, 30
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN25@tt_face_in
	push	OFFSET $SG10613
	call	_FT_Message
	add	esp, 4
$LN25@tt_face_in:
	xor	eax, eax
	jne	SHORT $LN26@tt_face_in
; Line 520
	mov	ecx, DWORD PTR _ttface$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _library$[ebp], eax
; Line 522
	push	OFFSET $SG10615
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Get_Module_Interface
	add	esp, 8
	mov	DWORD PTR _sfnt$[ebp], eax
; Line 523
	cmp	DWORD PTR _sfnt$[ebp], 0
	jne	SHORT $LN22@tt_face_in
; Line 525
	push	OFFSET $SG10617
	call	_FT_Message
	add	esp, 4
; Line 526
	push	OFFSET $SG10618
	push	526					; 0000020eH
	push	11					; 0000000bH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 11					; 0000000bH
	mov	DWORD PTR _error$[ebp], eax
; Line 527
	jmp	$Exit$29
$LN22@tt_face_in:
; Line 531
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@tt_face_in
; Line 532
	jmp	$Exit$29
$LN21@tt_face_in:
; Line 535
	mov	esi, esp
	mov	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_params$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 538
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR _stream$[ebp], edx
; Line 540
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@tt_face_in
; Line 541
	jmp	$Exit$29
$LN20@tt_face_in:
; Line 548
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+148], 65536		; 00010000H
	je	SHORT $LN19@tt_face_in
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+148], 131072		; 00020000H
	je	SHORT $LN19@tt_face_in
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+148], 1953658213		; 74727565H
	je	SHORT $LN19@tt_face_in
$LN18@tt_face_in:
; Line 550
	mov	eax, 4
	imul	ecx, eax, 30
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN17@tt_face_in
	push	OFFSET $SG10633
	call	_FT_Message
	add	esp, 4
$LN17@tt_face_in:
	xor	edx, edx
	jne	SHORT $LN18@tt_face_in
; Line 551
	jmp	$Bad_Format$30
$LN19@tt_face_in:
; Line 555
	mov	eax, DWORD PTR _ttface$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _ttface$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 559
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN14@tt_face_in
; Line 560
	xor	eax, eax
	jmp	$LN27@tt_face_in
$LN14@tt_face_in:
; Line 563
	mov	esi, esp
	mov	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_params$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 564
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@tt_face_in
; Line 565
	jmp	$Exit$29
$LN13@tt_face_in:
; Line 567
	mov	ecx, DWORD PTR _ttface$[ebp]
	push	ecx
	call	_tt_check_trickyness
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN12@tt_face_in
; Line 568
	mov	eax, DWORD PTR _ttface$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _ttface$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN12@tt_face_in:
; Line 570
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_load_hdmx
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 571
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@tt_face_in
; Line 572
	jmp	$Exit$29
$LN11@tt_face_in:
; Line 574
	mov	edx, DWORD PTR _ttface$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	je	$LN10@tt_face_in
; Line 579
	mov	ecx, DWORD PTR _ttface$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN9@tt_face_in
; Line 580
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_load_loca
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN9@tt_face_in:
; Line 581
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN8@tt_face_in
; Line 582
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_load_cvt
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN8@tt_face_in:
; Line 583
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN7@tt_face_in
; Line 584
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_load_fpgm
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN7@tt_face_in:
; Line 585
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN6@tt_face_in
; Line 586
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_load_prep
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN6@tt_face_in:
; Line 592
	mov	edx, DWORD PTR _ttface$[ebp]
	mov	eax, DWORD PTR [edx+128]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN10@tt_face_in
	mov	ecx, DWORD PTR _ttface$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN10@tt_face_in
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+700], 0
	je	SHORT $LN10@tt_face_in
	mov	eax, DWORD PTR _ttface$[ebp]
	push	eax
	call	_tt_check_single_notdef
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@tt_face_in
$LN4@tt_face_in:
; Line 597
	mov	edx, 4
	imul	eax, edx, 30
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN3@tt_face_in
	push	OFFSET $SG10649
	call	_FT_Message
	add	esp, 4
$LN3@tt_face_in:
	xor	ecx, ecx
	jne	SHORT $LN4@tt_face_in
; Line 599
	mov	edx, DWORD PTR _ttface$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _ttface$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN10@tt_face_in:
; Line 654
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_TT_Init_Glyph_Loading
	add	esp, 4
$Exit$29:
; Line 657
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN27@tt_face_in
$Bad_Format$30:
; Line 660
	push	OFFSET $SG10650
	push	660					; 00000294H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 661
	jmp	SHORT $Exit$29
$LN27@tt_face_in:
; Line 662
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -8						; size = 4
_memory$ = 8						; size = 4
_maxPoints$ = 12					; size = 2
_maxContours$ = 16					; size = 2
_zone$ = 20						; size = 4
_tt_glyphzone_new PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 120
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 124
	push	36					; 00000024H
	push	0
	mov	eax, DWORD PTR _zone$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 125
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 131
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	movzx	ecx, WORD PTR _maxPoints$[ebp]
	push	ecx
	push	0
	push	8
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN2@tt_glyphzo
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	movzx	eax, WORD PTR _maxPoints$[ebp]
	push	eax
	push	0
	push	8
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@tt_glyphzo
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	movzx	ecx, WORD PTR _maxPoints$[ebp]
	push	ecx
	push	0
	push	8
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [ecx+20], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@tt_glyphzo
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	movzx	eax, WORD PTR _maxPoints$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [edx+24], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@tt_glyphzo
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	movsx	ecx, WORD PTR _maxContours$[ebp]
	push	ecx
	push	0
	push	2
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [ecx+28], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@tt_glyphzo
$LN2@tt_glyphzo:
; Line 133
	mov	edx, DWORD PTR _zone$[ebp]
	push	edx
	call	_tt_glyphzone_done
	add	esp, 4
; Line 135
	jmp	SHORT $LN1@tt_glyphzo
$LN3@tt_glyphzo:
; Line 137
	mov	eax, DWORD PTR _zone$[ebp]
	mov	cx, WORD PTR _maxPoints$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 138
	mov	edx, DWORD PTR _zone$[ebp]
	mov	ax, WORD PTR _maxContours$[ebp]
	mov	WORD PTR [edx+6], ax
$LN1@tt_glyphzo:
; Line 141
	mov	eax, DWORD PTR _error$[ebp]
; Line 142
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@tt_glyphzo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@tt_glyphzo:
	DD	1
	DD	$LN7@tt_glyphzo
$LN7@tt_glyphzo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@tt_glyphzo
$LN6@tt_glyphzo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_tt_glyphzone_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_zone$ = 8						; size = 4
_tt_glyphzone_done PROC
; File d:\mozilla\modules\freetype2\src\truetype\ttobjs.c
; Line 75
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 76
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 79
	cmp	DWORD PTR _memory$[ebp], 0
	je	$LN17@tt_glyphzo
$LN15@tt_glyphzo:
; Line 81
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [edx+28], 0
	xor	eax, eax
	jne	SHORT $LN15@tt_glyphzo
$LN12@tt_glyphzo:
; Line 82
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [ecx+24], 0
	xor	edx, edx
	jne	SHORT $LN12@tt_glyphzo
$LN9@tt_glyphzo:
; Line 83
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [eax+16], 0
	xor	ecx, ecx
	jne	SHORT $LN9@tt_glyphzo
$LN6@tt_glyphzo:
; Line 84
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [edx+12], 0
	xor	eax, eax
	jne	SHORT $LN6@tt_glyphzo
$LN3@tt_glyphzo:
; Line 85
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [ecx+20], 0
	xor	edx, edx
	jne	SHORT $LN3@tt_glyphzo
; Line 87
	xor	eax, eax
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	WORD PTR [ecx+8], ax
	xor	edx, edx
	mov	eax, DWORD PTR _zone$[ebp]
	mov	WORD PTR [eax+4], dx
; Line 88
	xor	ecx, ecx
	mov	edx, DWORD PTR _zone$[ebp]
	mov	WORD PTR [edx+10], cx
	xor	eax, eax
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	WORD PTR [ecx+6], ax
; Line 89
	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [edx], 0
$LN17@tt_glyphzo:
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_glyphzone_done ENDP
_TEXT	ENDS
END
