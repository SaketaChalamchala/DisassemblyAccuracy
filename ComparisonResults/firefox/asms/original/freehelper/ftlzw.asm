; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\lzw\ftlzw.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

_DATA	SEGMENT
$SG7304	DB	'..\..\..\src\lzw\ftlzw.c', 00H
	ORG $+3
$SG7340	DB	'..\..\..\src\lzw\ftlzw.c', 00H
	ORG $+3
$SG7359	DB	'..\..\..\src\lzw\ftlzw.c', 00H
	ORG $+3
$SG7426	DB	'..\..\..\src\lzw\ftlzw.c', 00H
	ORG $+3
$SG7594	DB	'd:\mozilla\modules\freetype2\src\lzw\ftzopen.c', 00H
	ORG $+1
$SG7595	DB	'assertion failed on line %d of file %s', 0aH, 00H
_DATA	ENDS
PUBLIC	_FT_Stream_OpenLZW
PUBLIC	_ft_lzwstate_init
PUBLIC	_ft_lzwstate_done
PUBLIC	_ft_lzwstate_reset
PUBLIC	_ft_lzwstate_io
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__memmove:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Read:PROC
EXTRN	_FT_Stream_TryRead:PROC
EXTRN	_FT_Panic:PROC
EXTRN	_FT_Throw:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -20						; size = 4
_memory$ = -12						; size = 4
_new_size$ = -8						; size = 4
_old_size$ = -4						; size = 4
_state$ = 8						; size = 4
_ft_lzwstate_prefix_grow PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftzopen.c
; Line 148
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 149
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _old_size$[ebp], ecx
; Line 150
	mov	edx, DWORD PTR _old_size$[ebp]
	mov	DWORD PTR _new_size$[ebp], edx
; Line 151
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 155
	cmp	DWORD PTR _new_size$[ebp], 0
	jne	SHORT $LN3@ft_lzwstat
; Line 156
	mov	DWORD PTR _new_size$[ebp], 512		; 00000200H
; Line 157
	jmp	SHORT $LN2@ft_lzwstat
$LN3@ft_lzwstat:
; Line 158
	mov	edx, DWORD PTR _new_size$[ebp]
	shr	edx, 2
	add	edx, DWORD PTR _new_size$[ebp]
	mov	DWORD PTR _new_size$[ebp], edx
$LN2@ft_lzwstat:
; Line 169
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _new_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_size$[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+76], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ft_lzwstat
; Line 170
	or	eax, -1
	jmp	SHORT $LN4@ft_lzwstat
$LN1@ft_lzwstat:
; Line 173
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR _new_size$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+80], edx
; Line 177
	mov	esi, esp
	mov	ecx, DWORD PTR _old_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR _old_size$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 179
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _new_size$[ebp]
	mov	DWORD PTR [edx+84], eax
; Line 180
	xor	eax, eax
$LN4@ft_lzwstat:
; Line 181
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@ft_lzwstat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@ft_lzwstat:
	DD	1
	DD	$LN7@ft_lzwstat
$LN7@ft_lzwstat:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@ft_lzwstat
$LN6@ft_lzwstat:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_lzwstate_prefix_grow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_new_size$1 = -24					; size = 4
_old_size$2 = -20					; size = 4
_error$3 = -12						; size = 4
_memory$4 = -4						; size = 4
_state$ = 8						; size = 4
_ft_lzwstate_stack_grow PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftzopen.c
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 112
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+92]
	cmp	edx, DWORD PTR [ecx+96]
	jb	$LN5@ft_lzwstat
; Line 114
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR _memory$4[ebp], ecx
; Line 116
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _old_size$2[ebp], eax
; Line 117
	mov	ecx, DWORD PTR _old_size$2[ebp]
	mov	DWORD PTR _new_size$1[ebp], ecx
; Line 119
	mov	edx, DWORD PTR _new_size$1[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR _new_size$1[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _new_size$1[ebp], ecx
; Line 121
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 100				; 00000064H
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+88], edx
	jne	SHORT $LN4@ft_lzwstat
; Line 123
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], 0
; Line 124
	mov	DWORD PTR _old_size$2[ebp], 0
$LN4@ft_lzwstat:
; Line 129
	cmp	DWORD PTR _new_size$1[ebp], 65536	; 00010000H
	jbe	SHORT $LN3@ft_lzwstat
; Line 131
	mov	DWORD PTR _new_size$1[ebp], 65536	; 00010000H
; Line 132
	mov	edx, DWORD PTR _new_size$1[ebp]
	cmp	edx, DWORD PTR _old_size$2[ebp]
	jne	SHORT $LN3@ft_lzwstat
; Line 133
	or	eax, -1
	jmp	SHORT $LN6@ft_lzwstat
$LN3@ft_lzwstat:
; Line 136
	lea	eax, DWORD PTR _error$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _new_size$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_size$2[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _memory$4[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], eax
	cmp	DWORD PTR _error$3[ebp], 0
	je	SHORT $LN1@ft_lzwstat
; Line 137
	or	eax, -1
	jmp	SHORT $LN6@ft_lzwstat
$LN1@ft_lzwstat:
; Line 139
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _new_size$1[ebp]
	mov	DWORD PTR [edx+96], eax
$LN5@ft_lzwstat:
; Line 141
	xor	eax, eax
$LN6@ft_lzwstat:
; Line 142
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ft_lzwstat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@ft_lzwstat:
	DD	1
	DD	$LN9@ft_lzwstat
$LN9@ft_lzwstat:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@ft_lzwstat
$LN8@ft_lzwstat:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_lzwstate_stack_grow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv87 = -20						; size = 4
_result$ = -16						; size = 4
_p$ = -12						; size = 4
_offset$ = -8						; size = 4
_num_bits$ = -4						; size = 4
_state$ = 8						; size = 4
_ft_lzwstate_get_code PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftzopen.c
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 56
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _num_bits$[ebp], ecx
; Line 57
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _offset$[ebp], eax
; Line 64
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	test	edx, edx
	jne	SHORT $LN6@ft_lzwstat
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jge	SHORT $LN6@ft_lzwstat
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	cmp	ecx, DWORD PTR [eax+60]
	jb	$LN7@ft_lzwstat
$LN6@ft_lzwstat:
; Line 66
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	cmp	ecx, DWORD PTR [eax+60]
	jb	SHORT $LN5@ft_lzwstat
; Line 68
	mov	edx, DWORD PTR _num_bits$[ebp]
	add	edx, 1
	mov	DWORD PTR _num_bits$[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _num_bits$[ebp]
	mov	DWORD PTR [eax+52], ecx
; Line 71
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	cmp	ecx, DWORD PTR [eax+40]
	jae	SHORT $LN10@ft_lzwstat
	mov	edx, 1
	mov	ecx, DWORD PTR _num_bits$[ebp]
	shl	edx, cl
	sub	edx, 256				; 00000100H
	mov	DWORD PTR tv87[ebp], edx
	jmp	SHORT $LN11@ft_lzwstat
$LN10@ft_lzwstat:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	DWORD PTR tv87[ebp], ecx
$LN11@ft_lzwstat:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR [edx+60], eax
$LN5@ft_lzwstat:
; Line 74
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	test	edx, edx
	je	SHORT $LN4@ft_lzwstat
; Line 76
	mov	DWORD PTR _num_bits$[ebp], 9
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _num_bits$[ebp]
	mov	DWORD PTR [eax+52], ecx
; Line 77
	mov	edx, 1
	mov	ecx, DWORD PTR _num_bits$[ebp]
	shl	edx, cl
	sub	edx, 256				; 00000100H
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+60], edx
; Line 78
	mov	ecx, DWORD PTR _state$[ebp]
	mov	BYTE PTR [ecx+32], 0
$LN4@ft_lzwstat:
; Line 81
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ft_lzwstate_refill
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN3@ft_lzwstat
; Line 82
	or	eax, -1
	jmp	$LN8@ft_lzwstat
$LN3@ft_lzwstat:
; Line 84
	mov	DWORD PTR _offset$[ebp], 0
$LN7@ft_lzwstat:
; Line 87
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _num_bits$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 89
	mov	edx, DWORD PTR _offset$[ebp]
	sar	edx, 3
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx+8]
	mov	DWORD PTR _p$[ebp], ecx
; Line 90
	mov	edx, DWORD PTR _offset$[ebp]
	and	edx, 7
	mov	DWORD PTR _offset$[ebp], edx
; Line 91
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _offset$[ebp]
	sar	edx, cl
	mov	DWORD PTR _result$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 92
	mov	ecx, 8
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 93
	mov	edx, DWORD PTR _num_bits$[ebp]
	sub	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _num_bits$[ebp], edx
; Line 95
	cmp	DWORD PTR _num_bits$[ebp], 8
	jb	SHORT $LN2@ft_lzwstat
; Line 97
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _offset$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 98
	mov	ecx, DWORD PTR _offset$[ebp]
	add	ecx, 8
	mov	DWORD PTR _offset$[ebp], ecx
; Line 99
	mov	edx, DWORD PTR _num_bits$[ebp]
	sub	edx, 8
	mov	DWORD PTR _num_bits$[ebp], edx
$LN2@ft_lzwstat:
; Line 101
	cmp	DWORD PTR _num_bits$[ebp], 0
	jbe	SHORT $LN1@ft_lzwstat
; Line 102
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, 1
	mov	ecx, DWORD PTR _num_bits$[ebp]
	shl	eax, cl
	sub	eax, 1
	and	edx, eax
	mov	ecx, DWORD PTR _offset$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], edx
$LN1@ft_lzwstat:
; Line 104
	mov	eax, DWORD PTR _result$[ebp]
$LN8@ft_lzwstat:
; Line 105
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_lzwstate_get_code ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -5						; size = 1
_count$ = -4						; size = 4
_state$ = 8						; size = 4
_ft_lzwstate_refill PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftzopen.c
; Line 29
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 33
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@ft_lzwstat
; Line 34
	or	eax, -1
	jmp	$LN3@ft_lzwstat
$LN2@ft_lzwstat:
; Line 38
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	call	_FT_Stream_TryRead
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _count$[ebp], eax
; Line 40
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 41
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+36]
	add	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 42
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR [edx+52]
	jae	SHORT $LN5@ft_lzwstat
	mov	BYTE PTR tv80[ebp], 1
	jmp	SHORT $LN6@ft_lzwstat
$LN5@ft_lzwstat:
	mov	BYTE PTR tv80[ebp], 0
$LN6@ft_lzwstat:
	movzx	ecx, BYTE PTR tv80[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 43
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 44
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	shl	edx, 3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	sub	ecx, 1
	sub	edx, ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 46
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN1@ft_lzwstat
; Line 47
	or	eax, -1
	jmp	SHORT $LN3@ft_lzwstat
$LN1@ft_lzwstat:
; Line 49
	xor	eax, eax
$LN3@ft_lzwstat:
; Line 50
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_lzwstate_refill ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_zip$ = -4						; size = 4
_stream$ = 8						; size = 4
_pos$ = 12						; size = 4
_buffer$ = 16						; size = 4
_count$ = 20						; size = 4
_ft_lzw_stream_io PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftlzw.c
; Line 339
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 340
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _zip$[ebp], ecx
; Line 343
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _zip$[ebp]
	push	edx
	call	_ft_lzw_file_io
	add	esp, 16					; 00000010H
; Line 344
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_lzw_stream_io ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_zip$ = -4						; size = 4
_stream$ = 8						; size = 4
_ft_lzw_stream_close PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftlzw.c
; Line 317
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 318
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _zip$[ebp], ecx
; Line 319
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _memory$[ebp], eax
; Line 322
	cmp	DWORD PTR _zip$[ebp], 0
	je	SHORT $LN5@ft_lzw_str
; Line 325
	mov	ecx, DWORD PTR _zip$[ebp]
	push	ecx
	call	_ft_lzw_file_done
	add	esp, 4
$LN3@ft_lzw_str:
; Line 327
	mov	edx, DWORD PTR _zip$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _zip$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@ft_lzw_str
; Line 329
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN5@ft_lzw_str:
; Line 331
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_lzw_stream_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_delta$1 = -12						; size = 4
_error$ = -8						; size = 4
_result$ = -4						; size = 4
_zip$ = 8						; size = 4
_pos$ = 12						; size = 4
_buffer$ = 16						; size = 4
_count$ = 20						; size = 4
_ft_lzw_file_io PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftlzw.c
; Line 244
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 245
	mov	DWORD PTR _result$[ebp], 0
; Line 250
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax+4280]
	jae	SHORT $LN12@ft_lzw_fil
; Line 254
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+4280]
	sub	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	add	ecx, 184				; 000000b8H
	mov	edx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR [edx+4284]
	sub	edx, ecx
	cmp	eax, edx
	ja	SHORT $LN11@ft_lzw_fil
; Line 256
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR [eax+4280]
	sub	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+4284]
	sub	eax, ecx
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+4284], eax
; Line 257
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [edx+4280], eax
; Line 259
	jmp	SHORT $LN12@ft_lzw_fil
$LN11@ft_lzw_fil:
; Line 261
	mov	ecx, DWORD PTR _zip$[ebp]
	push	ecx
	call	_ft_lzw_file_reset
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 262
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@ft_lzw_fil
; Line 263
	jmp	$Exit$15
$LN12@ft_lzw_fil:
; Line 268
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR [edx+4280]
	jbe	SHORT $LN8@ft_lzw_fil
; Line 270
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	sub	edx, DWORD PTR [ecx+4280]
	push	edx
	mov	eax, DWORD PTR _zip$[ebp]
	push	eax
	call	_ft_lzw_file_skip_output
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 271
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@ft_lzw_fil
; Line 272
	jmp	$Exit$15
$LN8@ft_lzw_fil:
; Line 275
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN5@ft_lzw_fil
; Line 276
	jmp	$Exit$15
$LN5@ft_lzw_fil:
; Line 284
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [ecx+4288]
	sub	eax, DWORD PTR [edx+4284]
	mov	DWORD PTR _delta$1[ebp], eax
; Line 285
	mov	ecx, DWORD PTR _delta$1[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jb	SHORT $LN3@ft_lzw_fil
; Line 286
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _delta$1[ebp], edx
$LN3@ft_lzw_fil:
; Line 288
	mov	eax, DWORD PTR _delta$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR [ecx+4284]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _result$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 289
	mov	ecx, DWORD PTR _result$[ebp]
	add	ecx, DWORD PTR _delta$1[ebp]
	mov	DWORD PTR _result$[ebp], ecx
; Line 290
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+4284]
	add	eax, DWORD PTR _delta$1[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+4284], eax
; Line 291
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+4280]
	add	eax, DWORD PTR _delta$1[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+4280], eax
; Line 293
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, DWORD PTR _delta$1[ebp]
	mov	DWORD PTR _count$[ebp], edx
; Line 294
	jne	SHORT $LN2@ft_lzw_fil
; Line 295
	jmp	SHORT $Exit$15
$LN2@ft_lzw_fil:
; Line 297
	mov	eax, DWORD PTR _zip$[ebp]
	push	eax
	call	_ft_lzw_file_fill_output
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 298
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ft_lzw_fil
; Line 299
	jmp	SHORT $Exit$15
$LN1@ft_lzw_fil:
; Line 300
	jmp	$LN5@ft_lzw_fil
$Exit$15:
; Line 303
	mov	eax, DWORD PTR _result$[ebp]
; Line 304
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_lzw_file_io ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numread$1 = -16					; size = 4
_delta$2 = -12						; size = 4
_delta$3 = -8						; size = 4
_error$ = -4						; size = 4
_zip$ = 8						; size = 4
_count$ = 12						; size = 4
_ft_lzw_file_skip_output PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftlzw.c
; Line 195
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 196
	mov	DWORD PTR _error$[ebp], 0
; Line 201
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR [eax+4288]
	sub	edx, DWORD PTR [ecx+4284]
	mov	DWORD PTR _delta$3[ebp], edx
; Line 204
	mov	eax, DWORD PTR _delta$3[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jb	SHORT $LN5@ft_lzw_fil
; Line 205
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _delta$3[ebp], ecx
$LN5@ft_lzw_fil:
; Line 207
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+4284]
	add	eax, DWORD PTR _delta$3[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+4284], eax
; Line 208
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+4280]
	add	eax, DWORD PTR _delta$3[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+4280], eax
; Line 210
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, DWORD PTR _delta$3[ebp]
	mov	DWORD PTR _count$[ebp], edx
$LN4@ft_lzw_fil:
; Line 214
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@ft_lzw_fil
; Line 216
	mov	DWORD PTR _delta$2[ebp], 4096		; 00001000H
; Line 220
	mov	eax, DWORD PTR _delta$2[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jbe	SHORT $LN2@ft_lzw_fil
; Line 221
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _delta$2[ebp], ecx
$LN2@ft_lzw_fil:
; Line 223
	mov	edx, DWORD PTR _delta$2[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_ft_lzwstate_io
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _numread$1[ebp], eax
; Line 224
	mov	ecx, DWORD PTR _numread$1[ebp]
	cmp	ecx, DWORD PTR _delta$2[ebp]
	jae	SHORT $LN1@ft_lzw_fil
; Line 227
	push	OFFSET $SG7359
	push	227					; 000000e3H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	DWORD PTR _error$[ebp], eax
; Line 228
	jmp	SHORT $LN3@ft_lzw_fil
$LN1@ft_lzw_fil:
; Line 231
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+4280]
	add	eax, DWORD PTR _delta$2[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+4280], eax
; Line 232
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, DWORD PTR _delta$2[ebp]
	mov	DWORD PTR _count$[ebp], edx
; Line 233
	jmp	SHORT $LN4@ft_lzw_fil
$LN3@ft_lzw_fil:
; Line 235
	mov	eax, DWORD PTR _error$[ebp]
; Line 236
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_lzw_file_skip_output ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -12						; size = 4
_count$ = -8						; size = 4
_lzw$ = -4						; size = 4
_zip$ = 8						; size = 4
_ft_lzw_file_fill_output PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftlzw.c
; Line 172
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 173
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _lzw$[ebp], eax
; Line 175
	mov	DWORD PTR _error$[ebp], 0
; Line 178
	mov	ecx, DWORD PTR _zip$[ebp]
	add	ecx, 184				; 000000b8H
	mov	edx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [edx+4284], ecx
; Line 180
	push	4096					; 00001000H
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	mov	ecx, DWORD PTR _lzw$[ebp]
	push	ecx
	call	_ft_lzwstate_io
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _count$[ebp], eax
; Line 182
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+4284]
	add	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+4288], eax
; Line 184
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN1@ft_lzw_fil
; Line 185
	push	OFFSET $SG7340
	push	185					; 000000b9H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	DWORD PTR _error$[ebp], eax
$LN1@ft_lzw_fil:
; Line 187
	mov	eax, DWORD PTR _error$[ebp]
; Line 188
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_lzw_file_fill_output ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -8						; size = 4
_stream$ = -4						; size = 4
_zip$ = 8						; size = 4
_ft_lzw_file_reset PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftlzw.c
; Line 152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 153
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 157
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ft_lzw_fil
; Line 159
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_ft_lzwstate_reset
	add	esp, 4
; Line 161
	mov	ecx, DWORD PTR _zip$[ebp]
	add	ecx, 4280				; 000010b8H
	mov	edx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [edx+4288], ecx
; Line 162
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR [ecx+4288]
	mov	DWORD PTR [eax+4284], edx
; Line 163
	mov	eax, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [eax+4280], 0
$LN1@ft_lzw_fil:
; Line 166
	mov	eax, DWORD PTR _error$[ebp]
; Line 167
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_lzw_file_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_zip$ = 8						; size = 4
_ft_lzw_file_done PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftlzw.c
; Line 140
	push	ebp
	mov	ebp, esp
; Line 142
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_ft_lzwstate_done
	add	esp, 4
; Line 144
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 145
	mov	edx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [edx], 0
; Line 146
	mov	eax, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 147
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_lzw_file_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -8						; size = 4
_lzw$ = -4						; size = 4
_zip$ = 8						; size = 4
_stream$ = 12						; size = 4
_source$ = 16						; size = 4
_ft_lzw_file_init PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftlzw.c
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 113
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _lzw$[ebp], eax
; Line 117
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 118
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 119
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+8], ecx
; Line 121
	mov	edx, DWORD PTR _zip$[ebp]
	add	edx, 4280				; 000010b8H
	mov	eax, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [eax+4288], edx
; Line 122
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+4288]
	mov	DWORD PTR [ecx+4284], eax
; Line 123
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+4280], 0
; Line 126
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	_ft_lzw_check_header
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 127
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ft_lzw_fil
; Line 128
	jmp	SHORT $Exit$4
$LN1@ft_lzw_fil:
; Line 131
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lzw$[ebp]
	push	ecx
	call	_ft_lzwstate_init
	add	esp, 8
$Exit$4:
; Line 134
	mov	eax, DWORD PTR _error$[ebp]
; Line 135
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_lzw_file_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_head$ = -12						; size = 2
_error$ = -4						; size = 4
_stream$ = 8						; size = 4
_ft_lzw_check_header PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftlzw.c
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 95
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@ft_lzw_che
	push	2
	lea	ecx, DWORD PTR _head$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@ft_lzw_che
$LN3@ft_lzw_che:
; Line 96
	jmp	SHORT $Exit$10
$LN4@ft_lzw_che:
; Line 100
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR _head$[ebp+ecx]
	cmp	edx, 31					; 0000001fH
	jne	SHORT $LN1@ft_lzw_che
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR _head$[ebp+eax]
	cmp	ecx, 157				; 0000009dH
	je	SHORT $Exit$10
$LN1@ft_lzw_che:
; Line 101
	push	OFFSET $SG7304
	push	101					; 00000065H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$Exit$10:
; Line 104
	mov	eax, DWORD PTR _error$[ebp]
; Line 105
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ft_lzw_che
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@ft_lzw_che:
	DD	1
	DD	$LN8@ft_lzw_che
$LN8@ft_lzw_che:
	DD	-12					; fffffff4H
	DD	2
	DD	$LN7@ft_lzw_che
$LN7@ft_lzw_che:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
_ft_lzw_check_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv140 = -52						; size = 4
tv129 = -48						; size = 4
tv69 = -44						; size = 4
_code$1 = -40						; size = 4
_c$2 = -36						; size = 4
_c$3 = -32						; size = 4
_max_bits$4 = -21					; size = 1
_in_code$ = -16						; size = 4
_old_code$ = -12					; size = 4
_old_char$ = -8						; size = 4
_result$ = -4						; size = 4
_state$ = 8						; size = 4
_buffer$ = 12						; size = 4
_out_size$ = 16						; size = 4
_ft_lzwstate_io PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftzopen.c
; Line 250
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 251
	mov	DWORD PTR _result$[ebp], 0
; Line 253
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _old_char$[ebp], ecx
; Line 254
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _old_code$[ebp], eax
; Line 255
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR _in_code$[ebp], edx
; Line 258
	cmp	DWORD PTR _out_size$[ebp], 0
	jne	SHORT $LN44@ft_lzwstat
; Line 259
	jmp	$Exit$54
$LN44@ft_lzwstat:
; Line 261
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 0
	je	SHORT $LN41@ft_lzwstat
	cmp	DWORD PTR tv69[ebp], 1
	je	$NextCode$55
	cmp	DWORD PTR tv69[ebp], 2
	je	$LN11@ft_lzwstat
	jmp	$Exit$54
$LN41@ft_lzwstat:
; Line 271
	push	2
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN39@ft_lzwstat
	push	1
	lea	ecx, DWORD PTR _max_bits$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	call	_FT_Stream_TryRead
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	je	SHORT $LN40@ft_lzwstat
$LN39@ft_lzwstat:
; Line 272
	jmp	$Eof$56
$LN40@ft_lzwstat:
; Line 274
	movzx	ecx, BYTE PTR _max_bits$4[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 275
	movzx	eax, BYTE PTR _max_bits$4[ebp]
	and	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 276
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+40]
	shl	eax, cl
	sub	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 278
	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+40], 16			; 00000010H
	jbe	SHORT $LN38@ft_lzwstat
; Line 279
	jmp	$Eof$56
$LN38@ft_lzwstat:
; Line 281
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+52], 9
; Line 283
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN47@ft_lzwstat
	mov	DWORD PTR tv129[ebp], 257		; 00000101H
	jmp	SHORT $LN48@ft_lzwstat
$LN47@ft_lzwstat:
	mov	DWORD PTR tv129[ebp], 256		; 00000100H
$LN48@ft_lzwstat:
	mov	edx, DWORD PTR tv129[ebp]
	sub	edx, 256				; 00000100H
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+56], edx
; Line 284
	mov	DWORD PTR _in_code$[ebp], 0
; Line 288
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+52]
	cmp	eax, DWORD PTR [edx+40]
	jae	SHORT $LN49@ft_lzwstat
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+52]
	shl	edx, cl
	sub	edx, 256				; 00000100H
	mov	DWORD PTR tv140[ebp], edx
	jmp	SHORT $LN50@ft_lzwstat
$LN49@ft_lzwstat:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	DWORD PTR tv140[ebp], ecx
$LN50@ft_lzwstat:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR tv140[ebp]
	mov	DWORD PTR [edx+60], eax
; Line 290
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ft_lzwstate_get_code
	add	esp, 4
	mov	DWORD PTR _c$3[ebp], eax
; Line 291
	cmp	DWORD PTR _c$3[ebp], 0
	jl	SHORT $LN36@ft_lzwstat
	cmp	DWORD PTR _c$3[ebp], 255		; 000000ffH
	jle	SHORT $LN37@ft_lzwstat
$LN36@ft_lzwstat:
; Line 292
	jmp	$Eof$56
$LN37@ft_lzwstat:
; Line 294
	mov	edx, DWORD PTR _c$3[ebp]
	mov	DWORD PTR _old_char$[ebp], edx
	mov	eax, DWORD PTR _old_char$[ebp]
	mov	DWORD PTR _old_code$[ebp], eax
; Line 296
	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN35@ft_lzwstat
; Line 297
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, DWORD PTR _result$[ebp]
	mov	dl, BYTE PTR _old_char$[ebp]
	mov	BYTE PTR [ecx], dl
$LN35@ft_lzwstat:
; Line 299
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 1
	mov	DWORD PTR _result$[ebp], eax
	mov	ecx, DWORD PTR _result$[ebp]
	cmp	ecx, DWORD PTR _out_size$[ebp]
	jb	SHORT $LN34@ft_lzwstat
; Line 300
	jmp	$Exit$54
$LN34@ft_lzwstat:
; Line 302
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], 1
$NextCode$55:
; Line 313
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ft_lzwstate_get_code
	add	esp, 4
	mov	DWORD PTR _c$2[ebp], eax
; Line 314
	cmp	DWORD PTR _c$2[ebp], 0
	jge	SHORT $LN32@ft_lzwstat
; Line 315
	jmp	$Eof$56
$LN32@ft_lzwstat:
; Line 317
	mov	ecx, DWORD PTR _c$2[ebp]
	mov	DWORD PTR _code$1[ebp], ecx
; Line 319
	cmp	DWORD PTR _code$1[ebp], 256		; 00000100H
	jne	SHORT $LN31@ft_lzwstat
	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN31@ft_lzwstat
; Line 322
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 323
	mov	ecx, DWORD PTR _state$[ebp]
	mov	BYTE PTR [ecx+32], 1
; Line 326
	mov	DWORD PTR _old_code$[ebp], 0
; Line 327
	mov	DWORD PTR _old_char$[ebp], 0
; Line 329
	jmp	SHORT $NextCode$55
$LN31@ft_lzwstat:
; Line 332
	mov	edx, DWORD PTR _code$1[ebp]
	mov	DWORD PTR _in_code$[ebp], edx
; Line 334
	cmp	DWORD PTR _code$1[ebp], 256		; 00000100H
	jb	$LN30@ft_lzwstat
; Line 337
	mov	eax, DWORD PTR _code$1[ebp]
	sub	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	eax, DWORD PTR [ecx+56]
	jb	SHORT $LN23@ft_lzwstat
; Line 340
	mov	edx, DWORD PTR _code$1[ebp]
	sub	edx, 256				; 00000100H
	mov	eax, DWORD PTR _state$[ebp]
	cmp	edx, DWORD PTR [eax+56]
	jbe	SHORT $LN27@ft_lzwstat
; Line 341
	jmp	$Eof$56
$LN27@ft_lzwstat:
; Line 343
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+92]
	cmp	eax, DWORD PTR [edx+96]
	jb	SHORT $LN24@ft_lzwstat
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ft_lzwstate_stack_grow
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN24@ft_lzwstat
	jmp	$Eof$56
$LN24@ft_lzwstat:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	cl, BYTE PTR _old_char$[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+92]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+92], eax
	xor	edx, edx
	jne	SHORT $LN27@ft_lzwstat
; Line 344
	mov	eax, DWORD PTR _old_code$[ebp]
	mov	DWORD PTR _code$1[ebp], eax
$LN23@ft_lzwstat:
; Line 347
	cmp	DWORD PTR _code$1[ebp], 256		; 00000100H
	jb	SHORT $LN30@ft_lzwstat
; Line 349
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	jne	SHORT $LN20@ft_lzwstat
; Line 350
	jmp	$Eof$56
$LN20@ft_lzwstat:
; Line 352
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN17@ft_lzwstat
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ft_lzwstate_stack_grow
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN17@ft_lzwstat
	jmp	$Eof$56
$LN17@ft_lzwstat:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	edx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [edx+88]
	mov	esi, DWORD PTR _code$1[ebp]
	mov	cl, BYTE PTR [ecx+esi-256]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+92]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+92], eax
	xor	edx, edx
	jne	SHORT $LN20@ft_lzwstat
; Line 353
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _code$1[ebp]
	movzx	eax, WORD PTR [ecx+edx*2-512]
	mov	DWORD PTR _code$1[ebp], eax
; Line 354
	jmp	$LN23@ft_lzwstat
$LN30@ft_lzwstat:
; Line 357
	mov	ecx, DWORD PTR _code$1[ebp]
	mov	DWORD PTR _old_char$[ebp], ecx
$LN16@ft_lzwstat:
; Line 358
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN13@ft_lzwstat
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ft_lzwstate_stack_grow
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN13@ft_lzwstat
	jmp	$Eof$56
$LN13@ft_lzwstat:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	dl, BYTE PTR _old_char$[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+92], ecx
	xor	eax, eax
	jne	SHORT $LN16@ft_lzwstat
; Line 360
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx], 2
$LN11@ft_lzwstat:
; Line 366
	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jbe	SHORT $LN10@ft_lzwstat
; Line 368
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	sub	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+92], ecx
; Line 370
	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN9@ft_lzwstat
; Line 371
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, DWORD PTR _result$[ebp]
	mov	al, BYTE PTR [eax+ecx]
	mov	BYTE PTR [edx], al
$LN9@ft_lzwstat:
; Line 373
	mov	ecx, DWORD PTR _result$[ebp]
	add	ecx, 1
	mov	DWORD PTR _result$[ebp], ecx
	mov	edx, DWORD PTR _result$[ebp]
	cmp	edx, DWORD PTR _out_size$[ebp]
	jne	SHORT $LN8@ft_lzwstat
; Line 374
	jmp	$Exit$54
$LN8@ft_lzwstat:
; Line 375
	jmp	SHORT $LN11@ft_lzwstat
$LN10@ft_lzwstat:
; Line 378
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+56]
	cmp	edx, DWORD PTR [ecx+48]
	jae	$LN7@ft_lzwstat
; Line 381
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+56]
	cmp	edx, DWORD PTR [ecx+84]
	jb	SHORT $LN5@ft_lzwstat
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ft_lzwstate_prefix_grow
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN5@ft_lzwstat
; Line 382
	jmp	$Eof$56
$LN5@ft_lzwstat:
; Line 384
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	cmp	eax, DWORD PTR [edx+84]
	jb	SHORT $LN4@ft_lzwstat
	push	OFFSET $SG7594
	push	384					; 00000180H
	push	OFFSET $SG7595
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@ft_lzwstat:
	xor	ecx, ecx
	jne	SHORT $LN5@ft_lzwstat
; Line 386
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	cx, WORD PTR _old_code$[ebp]
	mov	WORD PTR [edx+eax*2], cx
; Line 387
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	cl, BYTE PTR _old_char$[ebp]
	mov	BYTE PTR [edx+eax], cl
; Line 389
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN7@ft_lzwstat:
; Line 392
	mov	edx, DWORD PTR _in_code$[ebp]
	mov	DWORD PTR _old_code$[ebp], edx
; Line 394
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 1
; Line 395
	jmp	$NextCode$55
$Exit$54:
; Line 403
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _old_code$[ebp]
	mov	DWORD PTR [ecx+64], edx
; Line 404
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _old_char$[ebp]
	mov	DWORD PTR [eax+68], ecx
; Line 405
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _in_code$[ebp]
	mov	DWORD PTR [edx+72], eax
; Line 407
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN45@ft_lzwstat
$Eof$56:
; Line 410
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx], 3
; Line 411
	jmp	SHORT $Exit$54
$LN45@ft_lzwstat:
; Line 412
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN53@ft_lzwstat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN53@ft_lzwstat:
	DD	1
	DD	$LN52@ft_lzwstat
$LN52@ft_lzwstat:
	DD	-21					; ffffffebH
	DD	1
	DD	$LN51@ft_lzwstat
$LN51@ft_lzwstat:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_ft_lzwstate_io ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_state$ = 8						; size = 4
_ft_lzwstate_reset PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftzopen.c
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 188
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 189
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 190
	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+32], 0
; Line 191
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+36], 0
; Line 192
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+92], 0
; Line 193
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+52], 9
; Line 194
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 195
	pop	ebp
	ret	0
_ft_lzwstate_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_state$ = 8						; size = 4
_ft_lzwstate_done PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftzopen.c
; Line 220
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 221
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 224
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ft_lzwstate_reset
	add	esp, 4
; Line 226
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+88], eax
	je	SHORT $LN3@ft_lzwstat
$LN6@ft_lzwstat:
; Line 227
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], 0
	xor	eax, eax
	jne	SHORT $LN6@ft_lzwstat
$LN3@ft_lzwstat:
; Line 229
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+76], 0
	xor	edx, edx
	jne	SHORT $LN3@ft_lzwstat
; Line 230
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 232
	push	172					; 000000acH
	push	0
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 233
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_lzwstate_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_state$ = 8						; size = 4
_source$ = 12						; size = 4
_ft_lzwstate_init PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftzopen.c
; Line 201
	push	ebp
	mov	ebp, esp
; Line 202
	push	172					; 000000acH
	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 204
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [ecx+164], edx
; Line 205
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+168], edx
; Line 207
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+76], 0
; Line 208
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+80], 0
; Line 209
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+84], 0
; Line 211
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], eax
; Line 212
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+96], 64			; 00000040H
; Line 214
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ft_lzwstate_reset
	add	esp, 4
; Line 215
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_lzwstate_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_zip$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_stream$ = 8						; size = 4
_source$ = 12						; size = 4
_FT_Stream_OpenLZW PROC
; File d:\mozilla\modules\freetype2\src\lzw\ftlzw.c
; Line 350
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 353
	mov	DWORD PTR _zip$[ebp], 0
; Line 356
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN7@FT_Stream_
	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN8@FT_Stream_
$LN7@FT_Stream_:
; Line 358
	push	OFFSET $SG7426
	push	358					; 00000166H
	push	40					; 00000028H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 40					; 00000028H
	mov	DWORD PTR _error$[ebp], eax
; Line 359
	jmp	$Exit$14
$LN8@FT_Stream_:
; Line 362
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 371
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	_ft_lzw_check_header
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 372
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@FT_Stream_
; Line 373
	jmp	$Exit$14
$LN6@FT_Stream_:
; Line 375
	push	40					; 00000028H
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 376
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 378
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	4292					; 000010c4H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _zip$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@FT_Stream_
; Line 380
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zip$[ebp]
	push	ecx
	call	_ft_lzw_file_init
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 381
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FT_Stream_
$LN3@FT_Stream_:
; Line 383
	mov	edx, DWORD PTR _zip$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _zip$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@FT_Stream_
; Line 384
	jmp	SHORT $Exit$14
$LN4@FT_Stream_:
; Line 387
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN5@FT_Stream_:
; Line 390
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], 2147483647		; 7fffffffH
; Line 391
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 392
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 393
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+20], OFFSET _ft_lzw_stream_io
; Line 394
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+24], OFFSET _ft_lzw_stream_close
$Exit$14:
; Line 397
	mov	eax, DWORD PTR _error$[ebp]
; Line 398
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FT_Stream_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@FT_Stream_:
	DD	1
	DD	$LN12@FT_Stream_
$LN12@FT_Stream_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN11@FT_Stream_
$LN11@FT_Stream_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_Stream_OpenLZW ENDP
_TEXT	ENDS
END
