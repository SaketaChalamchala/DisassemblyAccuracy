; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\base\ftstroke.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

_DATA	SEGMENT
$SG7376	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7377	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG7406	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7407	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG7427	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7428	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG7447	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7448	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG7573	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7574	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG7603	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7605	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7781	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7807	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7869	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7929	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7945	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG7946	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG7969	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG8000	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG8019	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG8061	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG8063	DB	'..\..\..\src\base\ftstroke.c', 00H
	ORG $+3
$SG8107	DB	'..\..\..\src\base\ftstroke.c', 00H
_DATA	ENDS
PUBLIC	_FT_Outline_GetInsideBorder
PUBLIC	_FT_Outline_GetOutsideBorder
PUBLIC	_FT_Stroker_New
PUBLIC	_FT_Stroker_Set
PUBLIC	_FT_Stroker_Rewind
PUBLIC	_FT_Stroker_ParseOutline
PUBLIC	_FT_Stroker_BeginSubPath
PUBLIC	_FT_Stroker_EndSubPath
PUBLIC	_FT_Stroker_LineTo
PUBLIC	_FT_Stroker_ConicTo
PUBLIC	_FT_Stroker_CubicTo
PUBLIC	_FT_Stroker_GetBorderCounts
PUBLIC	_FT_Stroker_ExportBorder
PUBLIC	_FT_Stroker_GetCounts
PUBLIC	_FT_Stroker_Export
PUBLIC	_FT_Stroker_Done
PUBLIC	_FT_Glyph_Stroke
PUBLIC	_FT_Glyph_StrokeBorder
EXTRN	_memcpy:PROC
EXTRN	_FT_MulDiv:PROC
EXTRN	_FT_MulFix:PROC
EXTRN	_FT_DivFix:PROC
EXTRN	_FT_Outline_New:PROC
EXTRN	_FT_Outline_Done:PROC
EXTRN	_FT_Outline_Check:PROC
EXTRN	_FT_Outline_Get_Orientation:PROC
EXTRN	_FT_Glyph_Copy:PROC
EXTRN	_FT_Done_Glyph:PROC
EXTRN	_FT_Sin:PROC
EXTRN	_FT_Cos:PROC
EXTRN	_FT_Tan:PROC
EXTRN	_FT_Atan2:PROC
EXTRN	_FT_Angle_Diff:PROC
EXTRN	_FT_Vector_Length:PROC
EXTRN	_FT_Vector_From_Polar:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_FT_Panic:PROC
EXTRN	_FT_Throw:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_outline_glyph_class:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ttag$1 = -33						; size = 1
_src_tag$2 = -32					; size = 4
_src_point$3 = -28					; size = 4
_dst_tag$4 = -24					; size = 4
_dst_point$5 = -20					; size = 4
_error$ = -16						; size = 4
_new_points$ = -12					; size = 4
_left$ = -8						; size = 4
_right$ = -4						; size = 4
_stroker$ = 8						; size = 4
_open$ = 12						; size = 1
_ft_stroker_add_reverse_left PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 1816
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1817
	mov	eax, DWORD PTR _stroker$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _right$[ebp], eax
; Line 1818
	mov	ecx, DWORD PTR _stroker$[ebp]
	add	ecx, 96					; 00000060H
	mov	DWORD PTR _left$[ebp], ecx
; Line 1820
	mov	DWORD PTR _error$[ebp], 0
$LN12@ft_stroker:
; Line 1823
	mov	edx, DWORD PTR _left$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jge	SHORT $LN11@ft_stroker
	push	OFFSET $SG7945
	push	1823					; 0000071fH
	push	OFFSET $SG7946
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN11@ft_stroker:
	xor	eax, eax
	jne	SHORT $LN12@ft_stroker
; Line 1825
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _new_points$[ebp], eax
; Line 1826
	cmp	DWORD PTR _new_points$[ebp], 0
	jle	$Exit$15
; Line 1828
	mov	ecx, DWORD PTR _new_points$[ebp]
	push	ecx
	mov	edx, DWORD PTR _right$[ebp]
	push	edx
	call	_ft_stroke_border_grow
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1829
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@ft_stroker
; Line 1830
	jmp	$Exit$15
$LN7@ft_stroker:
; Line 1833
	mov	eax, DWORD PTR _right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _right$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _dst_point$5[ebp], ecx
; Line 1834
	mov	edx, DWORD PTR _right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _right$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _dst_tag$4[ebp], eax
; Line 1835
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax*8-8]
	mov	DWORD PTR _src_point$3[ebp], eax
; Line 1836
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _src_tag$2[ebp], edx
$LN6@ft_stroker:
; Line 1839
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*8]
	cmp	DWORD PTR _src_point$3[ebp], ecx
	jb	$LN5@ft_stroker
; Line 1841
	mov	edx, DWORD PTR _src_point$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _dst_point$5[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
; Line 1842
	mov	eax, DWORD PTR _dst_tag$4[ebp]
	mov	ecx, DWORD PTR _src_tag$2[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 1844
	movzx	eax, BYTE PTR _open$[ebp]
	test	eax, eax
	je	SHORT $LN4@ft_stroker
; Line 1845
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _dst_tag$4[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	and	ecx, -13				; fffffff3H
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _dst_tag$4[ebp]
	mov	BYTE PTR [edx+eax], cl
; Line 1846
	jmp	SHORT $LN3@ft_stroker
$LN4@ft_stroker:
; Line 1849
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _dst_tag$4[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	and	eax, 12					; 0000000cH
	mov	BYTE PTR _ttag$1[ebp], al
; Line 1854
	movzx	ecx, BYTE PTR _ttag$1[ebp]
	cmp	ecx, 4
	je	SHORT $LN1@ft_stroker
	movzx	edx, BYTE PTR _ttag$1[ebp]
	cmp	edx, 8
	jne	SHORT $LN3@ft_stroker
$LN1@ft_stroker:
; Line 1855
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _dst_tag$4[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	xor	eax, 12					; 0000000cH
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _dst_tag$4[ebp]
	mov	BYTE PTR [ecx+edx], al
$LN3@ft_stroker:
; Line 1858
	mov	edx, DWORD PTR _src_point$3[ebp]
	sub	edx, 8
	mov	DWORD PTR _src_point$3[ebp], edx
; Line 1859
	mov	eax, DWORD PTR _src_tag$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _src_tag$2[ebp], eax
; Line 1860
	mov	ecx, DWORD PTR _dst_point$5[ebp]
	add	ecx, 8
	mov	DWORD PTR _dst_point$5[ebp], ecx
; Line 1861
	mov	edx, DWORD PTR _dst_tag$4[ebp]
	add	edx, 1
	mov	DWORD PTR _dst_tag$4[ebp], edx
; Line 1862
	jmp	$LN6@ft_stroker
$LN5@ft_stroker:
; Line 1865
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax], edx
; Line 1866
	mov	eax, DWORD PTR _right$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _new_points$[ebp]
	mov	edx, DWORD PTR _right$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1868
	mov	eax, DWORD PTR _right$[ebp]
	mov	BYTE PTR [eax+16], 0
; Line 1869
	mov	ecx, DWORD PTR _left$[ebp]
	mov	BYTE PTR [ecx+16], 0
$Exit$15:
; Line 1873
	mov	eax, DWORD PTR _error$[ebp]
; Line 1874
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_stroker_add_reverse_left ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_border$ = -40						; size = 4
_error$ = -36						; size = 4
_point$ = -28						; size = 8
_delta$ = -12						; size = 8
_stroker$ = 8						; size = 4
_start_angle$ = 12					; size = 4
_line_length$ = 16					; size = 4
_ft_stroker_subpath_start PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 1248
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1256
	mov	eax, DWORD PTR _start_angle$[ebp]
	add	eax, 5898240				; 005a0000H
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	lea	eax, DWORD PTR _delta$[ebp]
	push	eax
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1258
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _point$[ebp], edx
; Line 1259
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _delta$[ebp+4]
	mov	DWORD PTR _point$[ebp+4], ecx
; Line 1261
	mov	edx, DWORD PTR _stroker$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _border$[ebp], edx
; Line 1262
	lea	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _border$[ebp]
	push	ecx
	call	_ft_stroke_border_moveto
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1263
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ft_stroker
; Line 1264
	jmp	SHORT $Exit$8
$LN1@ft_stroker:
; Line 1266
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _point$[ebp], eax
; Line 1267
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _delta$[ebp+4]
	mov	DWORD PTR _point$[ebp+4], edx
; Line 1269
	mov	eax, DWORD PTR _border$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _border$[ebp], eax
; Line 1270
	lea	ecx, DWORD PTR _point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$[ebp]
	push	edx
	call	_ft_stroke_border_moveto
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1274
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _start_angle$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 1275
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	BYTE PTR [edx+20], 0
; Line 1276
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _line_length$[ebp]
	mov	DWORD PTR [eax+36], ecx
$Exit$8:
; Line 1279
	mov	eax, DWORD PTR _error$[ebp]
; Line 1280
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ft_stroker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@ft_stroker:
	DD	2
	DD	$LN6@ft_stroker
$LN6@ft_stroker:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN4@ft_stroker
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN5@ft_stroker
$LN5@ft_stroker:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN4@ft_stroker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_ft_stroker_subpath_start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_inside_side$ = -12					; size = 4
_turn$ = -8						; size = 4
_error$ = -4						; size = 4
_stroker$ = 8						; size = 4
_line_length$ = 12					; size = 4
_ft_stroker_process_corner PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 1210
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1211
	mov	DWORD PTR _error$[ebp], 0
; Line 1216
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_Angle_Diff
	add	esp, 8
	mov	DWORD PTR _turn$[ebp], eax
; Line 1219
	cmp	DWORD PTR _turn$[ebp], 0
	jne	SHORT $LN3@ft_stroker
; Line 1220
	jmp	SHORT $Exit$6
$LN3@ft_stroker:
; Line 1223
	mov	DWORD PTR _inside_side$[ebp], 0
; Line 1226
	cmp	DWORD PTR _turn$[ebp], 0
	jge	SHORT $LN2@ft_stroker
; Line 1227
	mov	DWORD PTR _inside_side$[ebp], 1
$LN2@ft_stroker:
; Line 1230
	mov	ecx, DWORD PTR _line_length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inside_side$[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_ft_stroker_inside
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1231
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ft_stroker
; Line 1232
	jmp	SHORT $Exit$6
$LN1@ft_stroker:
; Line 1235
	mov	ecx, DWORD PTR _line_length$[ebp]
	push	ecx
	mov	edx, 1
	sub	edx, DWORD PTR _inside_side$[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_ft_stroker_outside
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$Exit$6:
; Line 1238
	mov	eax, DWORD PTR _error$[ebp]
; Line 1239
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_stroker_process_corner ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -110						; size = 1
tv77 = -109						; size = 1
_delta$1 = -104						; size = 8
_length$2 = -92						; size = 4
_length$3 = -88						; size = 4
_delta$4 = -80						; size = 8
_middle$5 = -64						; size = 8
_delta$6 = -48						; size = 8
_fixed_bevel$7 = -34					; size = 1
_bevel$8 = -33						; size = 1
_thcos$9 = -32						; size = 4
_phi$10 = -28						; size = 4
_theta$11 = -24						; size = 4
_radius$12 = -20					; size = 4
_sigma$13 = -16						; size = 4
_rotate$ = -12						; size = 4
_error$ = -8						; size = 4
_border$ = -4						; size = 4
_stroker$ = 8						; size = 4
_side$ = 12						; size = 4
_line_length$ = 16					; size = 4
_ft_stroker_outside PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 1050
	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1051
	mov	eax, DWORD PTR _side$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _stroker$[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	mov	DWORD PTR _border$[ebp], edx
; Line 1056
	mov	eax, DWORD PTR _stroker$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN17@ft_stroker
; Line 1057
	mov	ecx, DWORD PTR _side$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	push	edx
	call	_ft_stroker_arcto
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1058
	jmp	$Exit$30
$LN17@ft_stroker:
; Line 1061
	mov	DWORD PTR _sigma$13[ebp], 0
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _radius$12[ebp], ecx
; Line 1062
	mov	DWORD PTR _theta$11[ebp], 0
	mov	DWORD PTR _phi$10[ebp], 0
; Line 1063
	mov	DWORD PTR _thcos$9[ebp], 0
; Line 1067
	imul	edx, DWORD PTR _side$[ebp], 11796480
	mov	eax, 5898240				; 005a0000H
	sub	eax, edx
	mov	DWORD PTR _rotate$[ebp], eax
; Line 1070
	mov	ecx, DWORD PTR _stroker$[ebp]
	cmp	DWORD PTR [ecx+48], 1
	jne	SHORT $LN20@ft_stroker
	mov	BYTE PTR tv77[ebp], 1
	jmp	SHORT $LN21@ft_stroker
$LN20@ft_stroker:
	mov	BYTE PTR tv77[ebp], 0
$LN21@ft_stroker:
	mov	dl, BYTE PTR tv77[ebp]
	mov	BYTE PTR _bevel$8[ebp], dl
; Line 1073
	mov	eax, DWORD PTR _stroker$[ebp]
	cmp	DWORD PTR [eax+48], 2
	je	SHORT $LN22@ft_stroker
	mov	BYTE PTR tv80[ebp], 1
	jmp	SHORT $LN23@ft_stroker
$LN22@ft_stroker:
	mov	BYTE PTR tv80[ebp], 0
$LN23@ft_stroker:
	mov	cl, BYTE PTR tv80[ebp]
	mov	BYTE PTR _fixed_bevel$7[ebp], cl
; Line 1075
	movzx	edx, BYTE PTR _bevel$8[ebp]
	test	edx, edx
	jne	$LN15@ft_stroker
; Line 1077
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_Angle_Diff
	add	esp, 8
	mov	DWORD PTR _theta$11[ebp], eax
; Line 1079
	cmp	DWORD PTR _theta$11[ebp], 11796480	; 00b40000H
	jne	SHORT $LN14@ft_stroker
; Line 1081
	mov	ecx, DWORD PTR _rotate$[ebp]
	mov	DWORD PTR _theta$11[ebp], ecx
; Line 1082
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _phi$10[ebp], eax
; Line 1084
	jmp	SHORT $LN13@ft_stroker
$LN14@ft_stroker:
; Line 1086
	mov	eax, DWORD PTR _theta$11[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _theta$11[ebp], eax
; Line 1087
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _theta$11[ebp]
	add	edx, DWORD PTR _rotate$[ebp]
	mov	DWORD PTR _phi$10[ebp], edx
$LN13@ft_stroker:
; Line 1090
	mov	eax, DWORD PTR _theta$11[ebp]
	push	eax
	call	_FT_Cos
	add	esp, 4
	mov	DWORD PTR _thcos$9[ebp], eax
; Line 1091
	mov	ecx, DWORD PTR _thcos$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_FT_MulFix
	add	esp, 8
	mov	DWORD PTR _sigma$13[ebp], eax
; Line 1094
	cmp	DWORD PTR _sigma$13[ebp], 65536		; 00010000H
	jge	SHORT $LN15@ft_stroker
; Line 1098
	movzx	ecx, BYTE PTR _fixed_bevel$7[ebp]
	test	ecx, ecx
	jne	SHORT $LN10@ft_stroker
	mov	edx, DWORD PTR _theta$11[ebp]
	push	edx
	call	_ft_pos_abs
	add	esp, 4
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN15@ft_stroker
$LN10@ft_stroker:
; Line 1099
	mov	BYTE PTR _bevel$8[ebp], 1
$LN15@ft_stroker:
; Line 1103
	movzx	eax, BYTE PTR _bevel$8[ebp]
	test	eax, eax
	je	$LN9@ft_stroker
; Line 1105
	movzx	ecx, BYTE PTR _fixed_bevel$7[ebp]
	test	ecx, ecx
	je	SHORT $LN8@ft_stroker
; Line 1114
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _rotate$[ebp]
	push	eax
	mov	ecx, DWORD PTR _radius$12[ebp]
	push	ecx
	lea	edx, DWORD PTR _delta$6[ebp]
	push	edx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1115
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _delta$6[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _delta$6[ebp], ecx
; Line 1116
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _delta$6[ebp+4]
	add	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _delta$6[ebp+4], eax
; Line 1118
	mov	ecx, DWORD PTR _border$[ebp]
	mov	BYTE PTR [ecx+16], 0
; Line 1119
	push	0
	lea	edx, DWORD PTR _delta$6[ebp]
	push	edx
	mov	eax, DWORD PTR _border$[ebp]
	push	eax
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1121
	jmp	$LN7@ft_stroker
$LN8@ft_stroker:
; Line 1131
	mov	ecx, DWORD PTR _phi$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _radius$12[ebp]
	push	ecx
	call	_FT_MulFix
	add	esp, 8
	push	eax
	lea	edx, DWORD PTR _middle$5[ebp]
	push	edx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1132
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _middle$5[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _middle$5[ebp], ecx
; Line 1133
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _middle$5[ebp+4]
	add	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _middle$5[ebp+4], eax
; Line 1137
	mov	ecx, DWORD PTR _theta$11[ebp]
	push	ecx
	call	_FT_Sin
	add	esp, 4
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	push	eax
	mov	edx, 65536				; 00010000H
	sub	edx, DWORD PTR _sigma$13[ebp]
	push	edx
	mov	eax, DWORD PTR _radius$12[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _length$3[ebp], eax
; Line 1139
	mov	ecx, DWORD PTR _phi$10[ebp]
	add	ecx, DWORD PTR _rotate$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$3[ebp]
	push	edx
	lea	eax, DWORD PTR _delta$4[ebp]
	push	eax
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1140
	mov	ecx, DWORD PTR _delta$4[ebp]
	add	ecx, DWORD PTR _middle$5[ebp]
	mov	DWORD PTR _delta$4[ebp], ecx
; Line 1141
	mov	edx, DWORD PTR _delta$4[ebp+4]
	add	edx, DWORD PTR _middle$5[ebp+4]
	mov	DWORD PTR _delta$4[ebp+4], edx
; Line 1143
	push	0
	lea	eax, DWORD PTR _delta$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _border$[ebp]
	push	ecx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1144
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@ft_stroker
; Line 1145
	jmp	$Exit$30
$LN6@ft_stroker:
; Line 1148
	mov	edx, DWORD PTR _phi$10[ebp]
	sub	edx, DWORD PTR _rotate$[ebp]
	push	edx
	mov	eax, DWORD PTR _length$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _delta$4[ebp]
	push	ecx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1149
	mov	edx, DWORD PTR _delta$4[ebp]
	add	edx, DWORD PTR _middle$5[ebp]
	mov	DWORD PTR _delta$4[ebp], edx
; Line 1150
	mov	eax, DWORD PTR _delta$4[ebp+4]
	add	eax, DWORD PTR _middle$5[ebp+4]
	mov	DWORD PTR _delta$4[ebp+4], eax
; Line 1152
	push	0
	lea	ecx, DWORD PTR _delta$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$[ebp]
	push	edx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1153
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@ft_stroker
; Line 1154
	jmp	$Exit$30
$LN5@ft_stroker:
; Line 1158
	cmp	DWORD PTR _line_length$[ebp], 0
	jne	SHORT $LN7@ft_stroker
; Line 1162
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _rotate$[ebp]
	push	ecx
	mov	edx, DWORD PTR _radius$12[ebp]
	push	edx
	lea	eax, DWORD PTR _delta$4[ebp]
	push	eax
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1164
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _delta$4[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _delta$4[ebp], edx
; Line 1165
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _delta$4[ebp+4]
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _delta$4[ebp+4], ecx
; Line 1167
	push	0
	lea	edx, DWORD PTR _delta$4[ebp]
	push	edx
	mov	eax, DWORD PTR _border$[ebp]
	push	eax
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$LN7@ft_stroker:
; Line 1171
	jmp	$Exit$30
$LN9@ft_stroker:
; Line 1177
	mov	ecx, DWORD PTR _thcos$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _length$2[ebp], eax
; Line 1179
	mov	ecx, DWORD PTR _phi$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$2[ebp]
	push	edx
	lea	eax, DWORD PTR _delta$1[ebp]
	push	eax
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1180
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _delta$1[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _delta$1[ebp], edx
; Line 1181
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _delta$1[ebp+4]
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _delta$1[ebp+4], ecx
; Line 1183
	push	0
	lea	edx, DWORD PTR _delta$1[ebp]
	push	edx
	mov	eax, DWORD PTR _border$[ebp]
	push	eax
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1184
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ft_stroker
; Line 1185
	jmp	SHORT $Exit$30
$LN2@ft_stroker:
; Line 1189
	cmp	DWORD PTR _line_length$[ebp], 0
	jne	SHORT $Exit$30
; Line 1193
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _rotate$[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	lea	edx, DWORD PTR _delta$1[ebp]
	push	edx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1194
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _delta$1[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _delta$1[ebp], ecx
; Line 1195
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _delta$1[ebp+4]
	add	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _delta$1[ebp+4], eax
; Line 1197
	push	0
	lea	ecx, DWORD PTR _delta$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$[ebp]
	push	edx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$Exit$30:
; Line 1203
	mov	eax, DWORD PTR _error$[ebp]
; Line 1204
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@ft_stroker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN29@ft_stroker:
	DD	4
	DD	$LN28@ft_stroker
$LN28@ft_stroker:
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN24@ft_stroker
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN25@ft_stroker
	DD	-80					; ffffffb0H
	DD	8
	DD	$LN26@ft_stroker
	DD	-104					; ffffff98H
	DD	8
	DD	$LN27@ft_stroker
$LN27@ft_stroker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN26@ft_stroker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN25@ft_stroker:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN24@ft_stroker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_ft_stroker_outside ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv91 = -53						; size = 1
_min_length$1 = -52					; size = 4
_intersect$ = -45					; size = 1
_error$ = -44						; size = 4
_delta$ = -36						; size = 8
_thcos$ = -24						; size = 4
_length$ = -20						; size = 4
_rotate$ = -16						; size = 4
_theta$ = -12						; size = 4
_phi$ = -8						; size = 4
_border$ = -4						; size = 4
_stroker$ = 8						; size = 4
_side$ = 12						; size = 4
_line_length$ = 16					; size = 4
_ft_stroker_inside PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 987
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 988
	mov	eax, DWORD PTR _side$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _stroker$[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	mov	DWORD PTR _border$[ebp], edx
; Line 992
	mov	DWORD PTR _error$[ebp], 0
; Line 996
	imul	eax, DWORD PTR _side$[ebp], 11796480
	mov	ecx, 5898240				; 005a0000H
	sub	ecx, eax
	mov	DWORD PTR _rotate$[ebp], ecx
; Line 998
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_Angle_Diff
	add	esp, 8
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _theta$[ebp], eax
; Line 1002
	mov	eax, DWORD PTR _border$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN4@ft_stroker
	cmp	DWORD PTR _line_length$[ebp], 0
	jne	SHORT $LN5@ft_stroker
$LN4@ft_stroker:
; Line 1003
	mov	BYTE PTR _intersect$[ebp], 0
; Line 1004
	jmp	SHORT $LN3@ft_stroker
$LN5@ft_stroker:
; Line 1008
	mov	edx, DWORD PTR _theta$[ebp]
	push	edx
	call	_FT_Tan
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	_FT_MulFix
	add	esp, 8
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	mov	DWORD PTR _min_length$1[ebp], eax
; Line 1013
	cmp	DWORD PTR _min_length$1[ebp], 0
	je	SHORT $LN8@ft_stroker
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	eax, DWORD PTR _min_length$1[ebp]
	jl	SHORT $LN8@ft_stroker
	mov	ecx, DWORD PTR _line_length$[ebp]
	cmp	ecx, DWORD PTR _min_length$1[ebp]
	jl	SHORT $LN8@ft_stroker
	mov	BYTE PTR tv91[ebp], 1
	jmp	SHORT $LN9@ft_stroker
$LN8@ft_stroker:
	mov	BYTE PTR tv91[ebp], 0
$LN9@ft_stroker:
	mov	dl, BYTE PTR tv91[ebp]
	mov	BYTE PTR _intersect$[ebp], dl
$LN3@ft_stroker:
; Line 1016
	movzx	eax, BYTE PTR _intersect$[ebp]
	test	eax, eax
	jne	SHORT $LN2@ft_stroker
; Line 1019
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _rotate$[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	lea	edx, DWORD PTR _delta$[ebp]
	push	edx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1020
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _delta$[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _delta$[ebp], ecx
; Line 1021
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _delta$[ebp+4]
	add	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _delta$[ebp+4], eax
; Line 1023
	mov	ecx, DWORD PTR _border$[ebp]
	mov	BYTE PTR [ecx+16], 0
; Line 1025
	jmp	SHORT $LN1@ft_stroker
$LN2@ft_stroker:
; Line 1028
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _theta$[ebp]
	mov	DWORD PTR _phi$[ebp], eax
; Line 1030
	mov	ecx, DWORD PTR _theta$[ebp]
	push	ecx
	call	_FT_Cos
	add	esp, 4
	mov	DWORD PTR _thcos$[ebp], eax
; Line 1032
	mov	edx, DWORD PTR _thcos$[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _length$[ebp], eax
; Line 1034
	mov	edx, DWORD PTR _phi$[ebp]
	add	edx, DWORD PTR _rotate$[ebp]
	push	edx
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _delta$[ebp]
	push	ecx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1035
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _delta$[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _delta$[ebp], eax
; Line 1036
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _delta$[ebp+4]
	add	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _delta$[ebp+4], edx
$LN1@ft_stroker:
; Line 1039
	push	0
	lea	eax, DWORD PTR _delta$[ebp]
	push	eax
	mov	ecx, DWORD PTR _border$[ebp]
	push	ecx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1041
	mov	eax, DWORD PTR _error$[ebp]
; Line 1042
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ft_stroker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@ft_stroker:
	DD	1
	DD	$LN11@ft_stroker
$LN11@ft_stroker:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN10@ft_stroker
$LN10@ft_stroker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_ft_stroker_inside ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_border$1 = -76						; size = 4
_radius$2 = -72						; size = 4
_rotate$3 = -68						; size = 4
_delta$4 = -60						; size = 8
_border$5 = -48						; size = 4
_radius$6 = -44						; size = 4
_rotate$7 = -40						; size = 4
_delta2$8 = -32						; size = 8
_delta$9 = -16						; size = 8
_error$ = -4						; size = 4
_stroker$ = 8						; size = 4
_angle$ = 12						; size = 4
_side$ = 16						; size = 4
_ft_stroker_cap PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 912
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 913
	mov	DWORD PTR _error$[ebp], 0
; Line 916
	mov	eax, DWORD PTR _stroker$[ebp]
	cmp	DWORD PTR [eax+44], 1
	jne	SHORT $LN7@ft_stroker
; Line 919
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _angle$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 920
	mov	eax, DWORD PTR _angle$[ebp]
	add	eax, 11796480				; 00b40000H
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 922
	mov	edx, DWORD PTR _side$[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_ft_stroker_arcto
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	jmp	$Exit$15
$LN7@ft_stroker:
; Line 924
	mov	ecx, DWORD PTR _stroker$[ebp]
	cmp	DWORD PTR [ecx+44], 2
	jne	$LN5@ft_stroker
; Line 928
	imul	edx, DWORD PTR _side$[ebp], 11796480
	mov	eax, 5898240				; 005a0000H
	sub	eax, edx
	mov	DWORD PTR _rotate$7[ebp], eax
; Line 929
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _radius$6[ebp], edx
; Line 930
	mov	eax, DWORD PTR _side$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _stroker$[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	mov	DWORD PTR _border$5[ebp], edx
; Line 933
	mov	eax, DWORD PTR _angle$[ebp]
	add	eax, DWORD PTR _rotate$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _radius$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _delta2$8[ebp]
	push	edx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 934
	mov	eax, DWORD PTR _angle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _radius$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _delta$9[ebp]
	push	edx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 936
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _delta2$8[ebp]
	add	ecx, DWORD PTR _delta$9[ebp]
	mov	DWORD PTR _delta$9[ebp], ecx
; Line 937
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _delta2$8[ebp+4]
	add	eax, DWORD PTR _delta$9[ebp+4]
	mov	DWORD PTR _delta$9[ebp+4], eax
; Line 939
	push	0
	lea	ecx, DWORD PTR _delta$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$5[ebp]
	push	edx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 940
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@ft_stroker
; Line 941
	jmp	$Exit$15
$LN4@ft_stroker:
; Line 943
	mov	eax, DWORD PTR _angle$[ebp]
	sub	eax, DWORD PTR _rotate$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _radius$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _delta2$8[ebp]
	push	edx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 944
	mov	eax, DWORD PTR _angle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _radius$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _delta$9[ebp]
	push	edx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 946
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _delta2$8[ebp]
	add	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _delta$9[ebp]
	mov	DWORD PTR _delta$9[ebp], ecx
; Line 947
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _delta2$8[ebp+4]
	add	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _delta$9[ebp+4]
	mov	DWORD PTR _delta$9[ebp+4], eax
; Line 949
	push	0
	lea	ecx, DWORD PTR _delta$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$5[ebp]
	push	edx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	jmp	$Exit$15
$LN5@ft_stroker:
; Line 951
	mov	eax, DWORD PTR _stroker$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	$Exit$15
; Line 955
	imul	ecx, DWORD PTR _side$[ebp], 11796480
	mov	edx, 5898240				; 005a0000H
	sub	edx, ecx
	mov	DWORD PTR _rotate$3[ebp], edx
; Line 956
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _radius$2[ebp], ecx
; Line 957
	mov	edx, DWORD PTR _side$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _stroker$[ebp]
	lea	ecx, DWORD PTR [eax+edx+64]
	mov	DWORD PTR _border$1[ebp], ecx
; Line 960
	mov	edx, DWORD PTR _angle$[ebp]
	add	edx, DWORD PTR _rotate$3[ebp]
	push	edx
	mov	eax, DWORD PTR _radius$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _delta$4[ebp]
	push	ecx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 962
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _delta$4[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _delta$4[ebp], eax
; Line 963
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _delta$4[ebp+4]
	add	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _delta$4[ebp+4], edx
; Line 965
	push	0
	lea	eax, DWORD PTR _delta$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _border$1[ebp]
	push	ecx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 966
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ft_stroker
; Line 967
	jmp	SHORT $Exit$15
$LN1@ft_stroker:
; Line 969
	mov	edx, DWORD PTR _angle$[ebp]
	sub	edx, DWORD PTR _rotate$3[ebp]
	push	edx
	mov	eax, DWORD PTR _radius$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _delta$4[ebp]
	push	ecx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 971
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _delta$4[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _delta$4[ebp], eax
; Line 972
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _delta$4[ebp+4]
	add	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _delta$4[ebp+4], edx
; Line 974
	push	0
	lea	eax, DWORD PTR _delta$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _border$1[ebp]
	push	ecx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$Exit$15:
; Line 978
	mov	eax, DWORD PTR _error$[ebp]
; Line 979
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ft_stroker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@ft_stroker:
	DD	3
	DD	$LN13@ft_stroker
$LN13@ft_stroker:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN10@ft_stroker
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN11@ft_stroker
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN12@ft_stroker
$LN12@ft_stroker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN11@ft_stroker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	50					; 00000032H
	DB	0
$LN10@ft_stroker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_ft_stroker_cap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_border$ = -20						; size = 4
_error$ = -16						; size = 4
_radius$ = -12						; size = 4
_rotate$ = -8						; size = 4
_total$ = -4						; size = 4
_stroker$ = 8						; size = 4
_side$ = 12						; size = 4
_ft_stroker_arcto PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 884
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 886
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _radius$[ebp], ecx
; Line 887
	mov	DWORD PTR _error$[ebp], 0
; Line 888
	mov	edx, DWORD PTR _side$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _stroker$[ebp]
	lea	ecx, DWORD PTR [eax+edx+64]
	mov	DWORD PTR _border$[ebp], ecx
; Line 891
	imul	edx, DWORD PTR _side$[ebp], 11796480
	mov	eax, 5898240				; 005a0000H
	sub	eax, edx
	mov	DWORD PTR _rotate$[ebp], eax
; Line 893
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_Angle_Diff
	add	esp, 8
	mov	DWORD PTR _total$[ebp], eax
; Line 894
	cmp	DWORD PTR _total$[ebp], 11796480	; 00b40000H
	jne	SHORT $LN1@ft_stroker
; Line 895
	mov	edx, DWORD PTR _rotate$[ebp]
	neg	edx
	shl	edx, 1
	mov	DWORD PTR _total$[ebp], edx
$LN1@ft_stroker:
; Line 901
	mov	eax, DWORD PTR _total$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _rotate$[ebp]
	push	edx
	mov	eax, DWORD PTR _radius$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _border$[ebp]
	push	edx
	call	_ft_stroke_border_arcto
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 902
	mov	eax, DWORD PTR _border$[ebp]
	mov	BYTE PTR [eax+16], 0
; Line 903
	mov	eax, DWORD PTR _error$[ebp]
; Line 904
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_stroker_arcto ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$1 = -28						; size = 2
_write$2 = -24						; size = 4
_tags$3 = -20						; size = 4
_count$4 = -16						; size = 4
_write$5 = -12						; size = 4
_read$6 = -8						; size = 4
_count$7 = -4						; size = 4
_border$ = 8						; size = 4
_outline$ = 12						; size = 4
_ft_stroke_border_export PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 703
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 707
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 711
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$7[ebp], ecx
; Line 712
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _read$6[ebp], eax
; Line 713
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _outline$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _write$5[ebp], edx
; Line 716
	jmp	SHORT $LN15@ft_stroke_
$LN14@ft_stroke_:
	mov	ecx, DWORD PTR _count$7[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$7[ebp], ecx
	mov	edx, DWORD PTR _read$6[ebp]
	add	edx, 1
	mov	DWORD PTR _read$6[ebp], edx
	mov	eax, DWORD PTR _write$5[ebp]
	add	eax, 1
	mov	DWORD PTR _write$5[ebp], eax
$LN15@ft_stroke_:
	cmp	DWORD PTR _count$7[ebp], 0
	jbe	SHORT $LN13@ft_stroke_
; Line 718
	mov	ecx, DWORD PTR _read$6[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 1
	je	SHORT $LN12@ft_stroke_
; Line 719
	mov	eax, DWORD PTR _write$5[ebp]
	mov	BYTE PTR [eax], 1
	jmp	SHORT $LN11@ft_stroke_
$LN12@ft_stroke_:
; Line 720
	mov	ecx, DWORD PTR _read$6[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 2
	je	SHORT $LN10@ft_stroke_
; Line 721
	mov	eax, DWORD PTR _write$5[ebp]
	mov	BYTE PTR [eax], 2
; Line 722
	jmp	SHORT $LN11@ft_stroke_
$LN10@ft_stroke_:
; Line 723
	mov	ecx, DWORD PTR _write$5[ebp]
	mov	BYTE PTR [ecx], 0
$LN11@ft_stroke_:
; Line 724
	jmp	SHORT $LN14@ft_stroke_
$LN13@ft_stroke_:
; Line 729
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _count$4[ebp], eax
; Line 730
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _tags$3[ebp], edx
; Line 731
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _write$2[ebp], ecx
; Line 732
	mov	edx, DWORD PTR _outline$[ebp]
	mov	ax, WORD PTR [edx+2]
	mov	WORD PTR _idx$1[ebp], ax
; Line 735
	jmp	SHORT $LN8@ft_stroke_
$LN7@ft_stroke_:
	mov	ecx, DWORD PTR _count$4[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$4[ebp], ecx
	mov	edx, DWORD PTR _tags$3[ebp]
	add	edx, 1
	mov	DWORD PTR _tags$3[ebp], edx
	mov	ax, WORD PTR _idx$1[ebp]
	add	ax, 1
	mov	WORD PTR _idx$1[ebp], ax
$LN8@ft_stroke_:
	cmp	DWORD PTR _count$4[ebp], 0
	jbe	SHORT $LN6@ft_stroke_
; Line 737
	mov	ecx, DWORD PTR _tags$3[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 8
	je	SHORT $LN5@ft_stroke_
; Line 739
	mov	eax, DWORD PTR _write$2[ebp]
	mov	cx, WORD PTR _idx$1[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _write$2[ebp]
	add	edx, 2
	mov	DWORD PTR _write$2[ebp], edx
; Line 740
	mov	eax, DWORD PTR _outline$[ebp]
	mov	cx, WORD PTR [eax]
	add	cx, 1
	mov	edx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [edx], cx
$LN5@ft_stroke_:
; Line 742
	jmp	SHORT $LN7@ft_stroke_
$LN6@ft_stroke_:
; Line 745
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _border$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	WORD PTR [eax+2], cx
$LN4@ft_stroke_:
; Line 747
	mov	ecx, DWORD PTR _outline$[ebp]
	push	ecx
	call	_FT_Outline_Check
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@ft_stroke_
	push	OFFSET $SG7573
	push	747					; 000002ebH
	push	OFFSET $SG7574
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@ft_stroke_:
	xor	edx, edx
	jne	SHORT $LN4@ft_stroke_
; Line 748
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_stroke_border_export ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_in_contour$ = -28					; size = 4
_tags$ = -24						; size = 4
_point$ = -20						; size = 4
_count$ = -16						; size = 4
_num_contours$ = -12					; size = 4
_num_points$ = -8					; size = 4
_error$ = -4						; size = 4
_border$ = 8						; size = 4
_anum_points$ = 12					; size = 4
_anum_contours$ = 16					; size = 4
_ft_stroke_border_get_counts PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 653
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 654
	mov	DWORD PTR _error$[ebp], 0
; Line 655
	mov	DWORD PTR _num_points$[ebp], 0
; Line 656
	mov	DWORD PTR _num_contours$[ebp], 0
; Line 658
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
; Line 659
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _point$[ebp], eax
; Line 660
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _tags$[ebp], edx
; Line 661
	mov	DWORD PTR _in_contour$[ebp], 0
; Line 664
	jmp	SHORT $LN9@ft_stroke_
$LN8@ft_stroke_:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _num_points$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num_points$[ebp], ecx
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 8
	mov	DWORD PTR _point$[ebp], edx
	mov	eax, DWORD PTR _tags$[ebp]
	add	eax, 1
	mov	DWORD PTR _tags$[ebp], eax
$LN9@ft_stroke_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN7@ft_stroke_
; Line 666
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _tags$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	and	ecx, 4
	je	SHORT $LN6@ft_stroke_
; Line 668
	cmp	DWORD PTR _in_contour$[ebp], 0
	je	SHORT $LN5@ft_stroke_
; Line 669
	jmp	SHORT $Fail$12
$LN5@ft_stroke_:
; Line 671
	mov	DWORD PTR _in_contour$[ebp], 1
	jmp	SHORT $LN4@ft_stroke_
$LN6@ft_stroke_:
; Line 673
	cmp	DWORD PTR _in_contour$[ebp], 0
	jne	SHORT $LN4@ft_stroke_
; Line 674
	jmp	SHORT $Fail$12
$LN4@ft_stroke_:
; Line 676
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _tags$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	and	edx, 8
	je	SHORT $LN2@ft_stroke_
; Line 678
	mov	DWORD PTR _in_contour$[ebp], 0
; Line 679
	mov	eax, DWORD PTR _num_contours$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_contours$[ebp], eax
$LN2@ft_stroke_:
; Line 681
	jmp	SHORT $LN8@ft_stroke_
$LN7@ft_stroke_:
; Line 683
	cmp	DWORD PTR _in_contour$[ebp], 0
	je	SHORT $LN1@ft_stroke_
; Line 684
	jmp	SHORT $Fail$12
$LN1@ft_stroke_:
; Line 686
	mov	ecx, DWORD PTR _border$[ebp]
	mov	BYTE PTR [ecx+28], 1
$Exit$13:
; Line 689
	mov	edx, DWORD PTR _anum_points$[ebp]
	mov	eax, DWORD PTR _num_points$[ebp]
	mov	DWORD PTR [edx], eax
; Line 690
	mov	ecx, DWORD PTR _anum_contours$[ebp]
	mov	edx, DWORD PTR _num_contours$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 691
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN10@ft_stroke_
$Fail$12:
; Line 694
	mov	DWORD PTR _num_points$[ebp], 0
; Line 695
	mov	DWORD PTR _num_contours$[ebp], 0
; Line 696
	jmp	SHORT $Exit$13
$LN10@ft_stroke_:
; Line 697
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_stroke_border_get_counts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_border$ = 8						; size = 4
_ft_stroke_border_done PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 635
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 636
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _memory$[ebp], ecx
$LN6@ft_stroke_:
; Line 639
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [edx+8], 0
	xor	eax, eax
	jne	SHORT $LN6@ft_stroke_
$LN3@ft_stroke_:
; Line 640
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [ecx+12], 0
	xor	edx, edx
	jne	SHORT $LN3@ft_stroke_
; Line 642
	mov	eax, DWORD PTR _border$[ebp]
	mov	DWORD PTR [eax], 0
; Line 643
	mov	ecx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 644
	mov	edx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [edx+20], -1
; Line 645
	mov	eax, DWORD PTR _border$[ebp]
	mov	BYTE PTR [eax+28], 0
; Line 646
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_stroke_border_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_border$ = 8						; size = 4
_ft_stroke_border_reset PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 626
	push	ebp
	mov	ebp, esp
; Line 627
	mov	eax, DWORD PTR _border$[ebp]
	mov	DWORD PTR [eax], 0
; Line 628
	mov	ecx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [ecx+20], -1
; Line 629
	mov	edx, DWORD PTR _border$[ebp]
	mov	BYTE PTR [edx+28], 0
; Line 630
	pop	ebp
	ret	0
_ft_stroke_border_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_border$ = 8						; size = 4
_memory$ = 12						; size = 4
_ft_stroke_border_init PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 612
	push	ebp
	mov	ebp, esp
; Line 613
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 614
	mov	edx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 615
	mov	eax, DWORD PTR _border$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 617
	mov	ecx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 618
	mov	edx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 619
	mov	eax, DWORD PTR _border$[ebp]
	mov	DWORD PTR [eax+20], -1
; Line 620
	mov	ecx, DWORD PTR _border$[ebp]
	mov	BYTE PTR [ecx+28], 0
; Line 621
	pop	ebp
	ret	0
_ft_stroke_border_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_border$ = 8						; size = 4
_to$ = 12						; size = 4
_ft_stroke_border_moveto PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 597
	push	ebp
	mov	ebp, esp
; Line 599
	mov	eax, DWORD PTR _border$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jl	SHORT $LN1@ft_stroke_
; Line 600
	push	0
	mov	ecx, DWORD PTR _border$[ebp]
	push	ecx
	call	_ft_stroke_border_close
	add	esp, 8
$LN1@ft_stroke_:
; Line 602
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+20], ecx
; Line 603
	mov	edx, DWORD PTR _border$[ebp]
	mov	BYTE PTR [edx+16], 0
; Line 605
	push	0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _border$[ebp]
	push	ecx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
; Line 606
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_stroke_border_moveto ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -100						; size = 4
_error$ = -96						; size = 4
_length$ = -92						; size = 4
_b2$ = -84						; size = 8
_a2$ = -68						; size = 8
_b$ = -52						; size = 8
_a$ = -36						; size = 8
_theta$ = -24						; size = 4
_next$ = -20						; size = 4
_rotate$ = -16						; size = 4
_step$ = -12						; size = 4
_angle$ = -8						; size = 4
_total$ = -4						; size = 4
_border$ = 8						; size = 4
_center$ = 12						; size = 4
_radius$ = 16						; size = 4
_angle_start$ = 20					; size = 4
_angle_diff$ = 24					; size = 4
_ft_stroke_border_arcto PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 530
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 534
	mov	DWORD PTR _error$[ebp], 0
; Line 538
	mov	eax, DWORD PTR _angle_start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _radius$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 539
	mov	eax, DWORD PTR _center$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx
; Line 540
	mov	edx, DWORD PTR _center$[ebp]
	mov	eax, DWORD PTR _a$[ebp+4]
	add	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _a$[ebp+4], eax
; Line 542
	mov	ecx, DWORD PTR _angle_diff$[ebp]
	mov	DWORD PTR _total$[ebp], ecx
; Line 543
	mov	edx, DWORD PTR _angle_start$[ebp]
	mov	DWORD PTR _angle$[ebp], edx
; Line 544
	cmp	DWORD PTR _angle_diff$[ebp], 0
	jl	SHORT $LN10@ft_stroke_
	mov	DWORD PTR tv72[ebp], 5898240		; 005a0000H
	jmp	SHORT $LN11@ft_stroke_
$LN10@ft_stroke_:
	mov	DWORD PTR tv72[ebp], -5898240		; ffa60000H
$LN11@ft_stroke_:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _rotate$[ebp], eax
$LN7@ft_stroke_:
; Line 546
	cmp	DWORD PTR _total$[ebp], 0
	je	$LN6@ft_stroke_
; Line 548
	mov	ecx, DWORD PTR _total$[ebp]
	mov	DWORD PTR _step$[ebp], ecx
; Line 549
	cmp	DWORD PTR _step$[ebp], 5898240		; 005a0000H
	jle	SHORT $LN5@ft_stroke_
; Line 550
	mov	DWORD PTR _step$[ebp], 5898240		; 005a0000H
	jmp	SHORT $LN4@ft_stroke_
$LN5@ft_stroke_:
; Line 552
	cmp	DWORD PTR _step$[ebp], -5898240		; ffa60000H
	jge	SHORT $LN4@ft_stroke_
; Line 553
	mov	DWORD PTR _step$[ebp], -5898240		; ffa60000H
$LN4@ft_stroke_:
; Line 555
	mov	edx, DWORD PTR _angle$[ebp]
	add	edx, DWORD PTR _step$[ebp]
	mov	DWORD PTR _next$[ebp], edx
; Line 556
	mov	eax, DWORD PTR _step$[ebp]
	mov	DWORD PTR _theta$[ebp], eax
; Line 557
	cmp	DWORD PTR _theta$[ebp], 0
	jge	SHORT $LN2@ft_stroke_
; Line 558
	mov	ecx, DWORD PTR _theta$[ebp]
	neg	ecx
	mov	DWORD PTR _theta$[ebp], ecx
$LN2@ft_stroke_:
; Line 560
	mov	edx, DWORD PTR _theta$[ebp]
	sar	edx, 1
	mov	DWORD PTR _theta$[ebp], edx
; Line 563
	mov	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _radius$[ebp]
	push	ecx
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 564
	mov	eax, DWORD PTR _center$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _b$[ebp], ecx
; Line 565
	mov	edx, DWORD PTR _center$[ebp]
	mov	eax, DWORD PTR _b$[ebp+4]
	add	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _b$[ebp+4], eax
; Line 569
	mov	ecx, DWORD PTR _theta$[ebp]
	push	ecx
	call	_FT_Cos
	add	esp, 4
	add	eax, 65536				; 00010000H
	imul	edx, eax, 3
	push	edx
	mov	eax, DWORD PTR _theta$[ebp]
	push	eax
	call	_FT_Sin
	add	esp, 4
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _radius$[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _length$[ebp], eax
; Line 571
	mov	edx, DWORD PTR _angle$[ebp]
	add	edx, DWORD PTR _rotate$[ebp]
	push	edx
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a2$[ebp]
	push	ecx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 572
	mov	edx, DWORD PTR _a2$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a2$[ebp], edx
; Line 573
	mov	eax, DWORD PTR _a2$[ebp+4]
	add	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR _a2$[ebp+4], eax
; Line 575
	mov	ecx, DWORD PTR _next$[ebp]
	sub	ecx, DWORD PTR _rotate$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	lea	eax, DWORD PTR _b2$[ebp]
	push	eax
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 576
	mov	ecx, DWORD PTR _b2$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b2$[ebp], ecx
; Line 577
	mov	edx, DWORD PTR _b2$[ebp+4]
	add	edx, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR _b2$[ebp+4], edx
; Line 580
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _b2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a2$[ebp]
	push	edx
	mov	eax, DWORD PTR _border$[ebp]
	push	eax
	call	_ft_stroke_border_cubicto
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 581
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ft_stroke_
; Line 582
	jmp	SHORT $LN6@ft_stroke_
$LN1@ft_stroke_:
; Line 585
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR _a$[ebp+4], edx
; Line 586
	mov	eax, DWORD PTR _total$[ebp]
	sub	eax, DWORD PTR _step$[ebp]
	mov	DWORD PTR _total$[ebp], eax
; Line 587
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _angle$[ebp], ecx
; Line 588
	jmp	$LN7@ft_stroke_
$LN6@ft_stroke_:
; Line 590
	mov	eax, DWORD PTR _error$[ebp]
; Line 591
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ft_stroke_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@ft_stroke_:
	DD	4
	DD	$LN16@ft_stroke_
$LN16@ft_stroke_:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN12@ft_stroke_
	DD	-52					; ffffffccH
	DD	8
	DD	$LN13@ft_stroke_
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN14@ft_stroke_
	DD	-84					; ffffffacH
	DD	8
	DD	$LN15@ft_stroke_
$LN15@ft_stroke_:
	DB	98					; 00000062H
	DB	50					; 00000032H
	DB	0
$LN14@ft_stroke_:
	DB	97					; 00000061H
	DB	50					; 00000032H
	DB	0
$LN13@ft_stroke_:
	DB	98					; 00000062H
	DB	0
$LN12@ft_stroke_:
	DB	97					; 00000061H
	DB	0
_ft_stroke_border_arcto ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tag$1 = -12						; size = 4
_vec$2 = -8						; size = 4
_error$ = -4						; size = 4
_border$ = 8						; size = 4
_control1$ = 12						; size = 4
_control2$ = 16						; size = 4
_to$ = 20						; size = 4
_ft_stroke_border_cubicto PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 491
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN5@ft_stroke_:
; Line 495
	mov	eax, DWORD PTR _border$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jge	SHORT $LN4@ft_stroke_
	push	OFFSET $SG7447
	push	495					; 000001efH
	push	OFFSET $SG7448
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@ft_stroke_:
	xor	ecx, ecx
	jne	SHORT $LN5@ft_stroke_
; Line 497
	push	3
	mov	edx, DWORD PTR _border$[ebp]
	push	edx
	call	_ft_stroke_border_grow
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 498
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN1@ft_stroke_
; Line 500
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _vec$2[ebp], ecx
; Line 501
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _border$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _tag$1[ebp], eax
; Line 504
	mov	edx, DWORD PTR _control1$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, 8
	imul	edx, edx, 0
	mov	esi, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [esi+edx], eax
	mov	DWORD PTR [esi+edx+4], ecx
; Line 505
	mov	eax, DWORD PTR _control2$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, 8
	shl	eax, 0
	mov	esi, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [esi+eax], ecx
	mov	DWORD PTR [esi+eax+4], edx
; Line 506
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, 8
	shl	ecx, 1
	mov	esi, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [esi+ecx], edx
	mov	DWORD PTR [esi+ecx+4], eax
; Line 508
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _tag$1[ebp]
	mov	BYTE PTR [ecx+eax], 2
; Line 509
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _tag$1[ebp]
	mov	BYTE PTR [eax+edx], 2
; Line 510
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _tag$1[ebp]
	mov	BYTE PTR [edx+ecx], 1
; Line 512
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 3
	mov	edx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@ft_stroke_:
; Line 515
	mov	eax, DWORD PTR _border$[ebp]
	mov	BYTE PTR [eax+16], 0
; Line 517
	mov	eax, DWORD PTR _error$[ebp]
; Line 518
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_stroke_border_cubicto ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tag$1 = -12						; size = 4
_vec$2 = -8						; size = 4
_error$ = -4						; size = 4
_border$ = 8						; size = 4
_control$ = 12						; size = 4
_to$ = 16						; size = 4
_ft_stroke_border_conicto PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 458
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN5@ft_stroke_:
; Line 462
	mov	eax, DWORD PTR _border$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jge	SHORT $LN4@ft_stroke_
	push	OFFSET $SG7427
	push	462					; 000001ceH
	push	OFFSET $SG7428
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@ft_stroke_:
	xor	ecx, ecx
	jne	SHORT $LN5@ft_stroke_
; Line 464
	push	2
	mov	edx, DWORD PTR _border$[ebp]
	push	edx
	call	_ft_stroke_border_grow
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 465
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ft_stroke_
; Line 467
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _vec$2[ebp], ecx
; Line 468
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _border$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _tag$1[ebp], eax
; Line 471
	mov	edx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, 8
	imul	edx, edx, 0
	mov	esi, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [esi+edx], eax
	mov	DWORD PTR [esi+edx+4], ecx
; Line 472
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, 8
	shl	eax, 0
	mov	esi, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [esi+eax], ecx
	mov	DWORD PTR [esi+eax+4], edx
; Line 474
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _tag$1[ebp]
	mov	BYTE PTR [eax+edx], 0
; Line 475
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _tag$1[ebp]
	mov	BYTE PTR [edx+ecx], 1
; Line 477
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@ft_stroke_:
; Line 480
	mov	eax, DWORD PTR _border$[ebp]
	mov	BYTE PTR [eax+16], 0
; Line 482
	mov	eax, DWORD PTR _error$[ebp]
; Line 483
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_stroke_border_conicto ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tag$1 = -12						; size = 4
_vec$2 = -8						; size = 4
_error$ = -4						; size = 4
_border$ = 8						; size = 4
_to$ = 12						; size = 4
_movable$ = 16						; size = 1
_ft_stroke_border_lineto PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 416
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 417
	mov	DWORD PTR _error$[ebp], 0
$LN8@ft_stroke_:
; Line 420
	mov	eax, DWORD PTR _border$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jge	SHORT $LN7@ft_stroke_
	push	OFFSET $SG7406
	push	420					; 000001a4H
	push	OFFSET $SG7407
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN7@ft_stroke_:
	xor	ecx, ecx
	jne	SHORT $LN8@ft_stroke_
; Line 422
	mov	edx, DWORD PTR _border$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN4@ft_stroke_
; Line 425
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, DWORD PTR _border$[ebp]
	mov	esi, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+ecx*8-8], edx
	mov	DWORD PTR [esi+ecx*8-4], eax
; Line 427
	jmp	$LN3@ft_stroke_
$LN4@ft_stroke_:
; Line 432
	mov	edx, DWORD PTR _border$[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT $LN2@ft_stroke_
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [eax+ecx*8-8]
	sub	eax, DWORD PTR [edx]
	cmp	eax, -2					; fffffffeH
	jle	SHORT $LN2@ft_stroke_
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8-8]
	sub	ecx, DWORD PTR [eax]
	cmp	ecx, 2
	jge	SHORT $LN2@ft_stroke_
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [edx+eax*8-4]
	sub	edx, DWORD PTR [ecx+4]
	cmp	edx, -2					; fffffffeH
	jle	SHORT $LN2@ft_stroke_
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [eax+ecx*8-4]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, 2
	jge	SHORT $LN2@ft_stroke_
; Line 433
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN9@ft_stroke_
$LN2@ft_stroke_:
; Line 436
	push	1
	mov	ecx, DWORD PTR _border$[ebp]
	push	ecx
	call	_ft_stroke_border_grow
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 437
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@ft_stroke_
; Line 439
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _vec$2[ebp], eax
; Line 440
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _border$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR _tag$1[ebp], edx
; Line 443
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, 8
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [esi+ecx], edx
	mov	DWORD PTR [esi+ecx+4], eax
; Line 444
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _tag$1[ebp]
	mov	BYTE PTR [ecx+eax], 1
; Line 446
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [ecx], eax
$LN3@ft_stroke_:
; Line 449
	mov	edx, DWORD PTR _border$[ebp]
	mov	al, BYTE PTR _movable$[ebp]
	mov	BYTE PTR [edx+16], al
; Line 450
	mov	eax, DWORD PTR _error$[ebp]
$LN9@ft_stroke_:
; Line 451
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_stroke_border_lineto ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tmp$1 = -41						; size = 1
_tag2$2 = -40						; size = 4
_tag1$3 = -36						; size = 4
_tmp$4 = -28						; size = 8
_vec2$5 = -16						; size = 4
_vec1$6 = -12						; size = 4
_count$ = -8						; size = 4
_start$ = -4						; size = 4
_border$ = 8						; size = 4
_reverse$ = 12						; size = 1
_ft_stroke_border_close PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 349
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 350
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _start$[ebp], ecx
; Line 351
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _count$[ebp], eax
$LN13@ft_stroke_:
; Line 354
	mov	ecx, DWORD PTR _border$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jge	SHORT $LN12@ft_stroke_
	push	OFFSET $SG7376
	push	354					; 00000162H
	push	OFFSET $SG7377
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN12@ft_stroke_:
	xor	edx, edx
	jne	SHORT $LN13@ft_stroke_
; Line 357
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	cmp	DWORD PTR _count$[ebp], eax
	ja	SHORT $LN9@ft_stroke_
; Line 358
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 359
	jmp	$LN8@ft_stroke_
$LN9@ft_stroke_:
; Line 363
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 364
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	esi, DWORD PTR _start$[ebp]
	mov	DWORD PTR [edx+esi*8], eax
	mov	DWORD PTR [edx+esi*8+4], ecx
; Line 366
	movzx	eax, BYTE PTR _reverse$[ebp]
	test	eax, eax
	je	$LN7@ft_stroke_
; Line 370
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _start$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8+8]
	mov	DWORD PTR _vec1$6[ebp], ecx
; Line 371
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8-8]
	mov	DWORD PTR _vec2$5[ebp], edx
; Line 374
	jmp	SHORT $LN6@ft_stroke_
$LN5@ft_stroke_:
	mov	eax, DWORD PTR _vec1$6[ebp]
	add	eax, 8
	mov	DWORD PTR _vec1$6[ebp], eax
	mov	ecx, DWORD PTR _vec2$5[ebp]
	sub	ecx, 8
	mov	DWORD PTR _vec2$5[ebp], ecx
$LN6@ft_stroke_:
	mov	edx, DWORD PTR _vec1$6[ebp]
	cmp	edx, DWORD PTR _vec2$5[ebp]
	jae	SHORT $LN4@ft_stroke_
; Line 379
	mov	eax, DWORD PTR _vec1$6[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tmp$4[ebp], ecx
	mov	DWORD PTR _tmp$4[ebp+4], edx
; Line 380
	mov	eax, DWORD PTR _vec2$5[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _vec1$6[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 381
	mov	ecx, DWORD PTR _vec2$5[ebp]
	mov	edx, DWORD PTR _tmp$4[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _tmp$4[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 382
	jmp	SHORT $LN5@ft_stroke_
$LN4@ft_stroke_:
; Line 387
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _start$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	mov	DWORD PTR _tag1$3[ebp], ecx
; Line 388
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _count$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	DWORD PTR _tag2$2[ebp], edx
; Line 391
	jmp	SHORT $LN3@ft_stroke_
$LN2@ft_stroke_:
	mov	eax, DWORD PTR _tag1$3[ebp]
	add	eax, 1
	mov	DWORD PTR _tag1$3[ebp], eax
	mov	ecx, DWORD PTR _tag2$2[ebp]
	sub	ecx, 1
	mov	DWORD PTR _tag2$2[ebp], ecx
$LN3@ft_stroke_:
	mov	edx, DWORD PTR _tag1$3[ebp]
	cmp	edx, DWORD PTR _tag2$2[ebp]
	jae	SHORT $LN7@ft_stroke_
; Line 396
	mov	eax, DWORD PTR _tag1$3[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _tmp$1[ebp], cl
; Line 397
	mov	edx, DWORD PTR _tag1$3[ebp]
	mov	eax, DWORD PTR _tag2$2[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
; Line 398
	mov	edx, DWORD PTR _tag2$2[ebp]
	mov	al, BYTE PTR _tmp$1[ebp]
	mov	BYTE PTR [edx], al
; Line 399
	jmp	SHORT $LN2@ft_stroke_
$LN7@ft_stroke_:
; Line 403
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _start$[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	or	ecx, 4
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _start$[ebp]
	mov	BYTE PTR [eax+edx], cl
; Line 404
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _count$[ebp]
	movzx	eax, BYTE PTR [ecx+edx-1]
	or	eax, 8
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	BYTE PTR [edx+ecx-1], al
$LN8@ft_stroke_:
; Line 407
	mov	edx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [edx+20], -1
; Line 408
	mov	eax, DWORD PTR _border$[ebp]
	mov	BYTE PTR [eax+16], 0
; Line 409
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@ft_stroke_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@ft_stroke_:
	DD	1
	DD	$LN17@ft_stroke_
$LN17@ft_stroke_:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN16@ft_stroke_
$LN16@ft_stroke_:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_ft_stroke_border_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -28						; size = 4
_cur_max$2 = -24					; size = 4
_error$ = -16						; size = 4
_new_max$ = -8						; size = 4
_old_max$ = -4						; size = 4
_border$ = 8						; size = 4
_new_points$ = 12					; size = 4
_ft_stroke_border_grow PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 319
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 320
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _old_max$[ebp], ecx
; Line 321
	mov	edx, DWORD PTR _border$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _new_points$[ebp]
	mov	DWORD PTR _new_max$[ebp], eax
; Line 322
	mov	DWORD PTR _error$[ebp], 0
; Line 325
	mov	ecx, DWORD PTR _new_max$[ebp]
	cmp	ecx, DWORD PTR _old_max$[ebp]
	jbe	$Exit$11
; Line 327
	mov	edx, DWORD PTR _old_max$[ebp]
	mov	DWORD PTR _cur_max$2[ebp], edx
; Line 328
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _memory$1[ebp], ecx
$LN4@ft_stroke_:
; Line 331
	mov	edx, DWORD PTR _cur_max$2[ebp]
	cmp	edx, DWORD PTR _new_max$[ebp]
	jae	SHORT $LN3@ft_stroke_
; Line 332
	mov	eax, DWORD PTR _cur_max$2[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR _cur_max$2[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	mov	DWORD PTR _cur_max$2[ebp], edx
	jmp	SHORT $LN4@ft_stroke_
$LN3@ft_stroke_:
; Line 335
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _border$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _cur_max$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_max$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _memory$1[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [ecx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ft_stroke_
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _cur_max$2[ebp]
	push	edx
	mov	eax, DWORD PTR _old_max$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _memory$1[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _border$[ebp]
	mov	DWORD PTR [edx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ft_stroke_
$LN1@ft_stroke_:
; Line 336
	jmp	SHORT $Exit$11
$LN2@ft_stroke_:
; Line 338
	mov	eax, DWORD PTR _border$[ebp]
	mov	ecx, DWORD PTR _cur_max$2[ebp]
	mov	DWORD PTR [eax+4], ecx
$Exit$11:
; Line 342
	mov	eax, DWORD PTR _error$[ebp]
; Line 343
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ft_stroke_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@ft_stroke_:
	DD	1
	DD	$LN9@ft_stroke_
$LN9@ft_stroke_:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN8@ft_stroke_
$LN8@ft_stroke_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_stroke_border_grow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv211 = -81						; size = 1
tv152 = -80						; size = 4
tv147 = -76						; size = 4
tv142 = -72						; size = 4
_close3$ = -68						; size = 4
_close2$ = -64						; size = 4
_close1$ = -60						; size = 4
_theta2$ = -56						; size = 4
_theta1$ = -52						; size = 4
_d3$ = -44						; size = 8
_d2$ = -28						; size = 8
_d1$ = -12						; size = 8
_base$ = 8						; size = 4
_angle_in$ = 12						; size = 4
_angle_mid$ = 16					; size = 4
_angle_out$ = 20					; size = 4
_ft_cubic_is_small_enough PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 192
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 198
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [esi+edx]
	mov	DWORD PTR _d1$[ebp], eax
; Line 199
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 8
	imul	eax, edx, 3
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+4]
	sub	ecx, DWORD PTR [esi+eax+4]
	mov	DWORD PTR _d1$[ebp+4], ecx
; Line 200
	mov	edx, 8
	shl	edx, 0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	sub	edx, DWORD PTR [esi+eax]
	mov	DWORD PTR _d2$[ebp], edx
; Line 201
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+eax+4]
	sub	eax, DWORD PTR [esi+ecx+4]
	mov	DWORD PTR _d2$[ebp+4], eax
; Line 202
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	sub	edx, DWORD PTR [esi+eax]
	mov	DWORD PTR _d3$[ebp], edx
; Line 203
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+4]
	sub	ecx, DWORD PTR [esi+edx+4]
	mov	DWORD PTR _d3$[ebp+4], ecx
; Line 205
	cmp	DWORD PTR _d1$[ebp], -2			; fffffffeH
	jle	SHORT $LN18@ft_cubic_i
	cmp	DWORD PTR _d1$[ebp], 2
	jge	SHORT $LN18@ft_cubic_i
	cmp	DWORD PTR _d1$[ebp+4], -2		; fffffffeH
	jle	SHORT $LN18@ft_cubic_i
	cmp	DWORD PTR _d1$[ebp+4], 2
	jge	SHORT $LN18@ft_cubic_i
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN19@ft_cubic_i
$LN18@ft_cubic_i:
	mov	DWORD PTR tv142[ebp], 0
$LN19@ft_cubic_i:
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _close1$[ebp], edx
; Line 206
	cmp	DWORD PTR _d2$[ebp], -2			; fffffffeH
	jle	SHORT $LN21@ft_cubic_i
	cmp	DWORD PTR _d2$[ebp], 2
	jge	SHORT $LN21@ft_cubic_i
	cmp	DWORD PTR _d2$[ebp+4], -2		; fffffffeH
	jle	SHORT $LN21@ft_cubic_i
	cmp	DWORD PTR _d2$[ebp+4], 2
	jge	SHORT $LN21@ft_cubic_i
	mov	DWORD PTR tv147[ebp], 1
	jmp	SHORT $LN22@ft_cubic_i
$LN21@ft_cubic_i:
	mov	DWORD PTR tv147[ebp], 0
$LN22@ft_cubic_i:
	mov	eax, DWORD PTR tv147[ebp]
	mov	DWORD PTR _close2$[ebp], eax
; Line 207
	cmp	DWORD PTR _d3$[ebp], -2			; fffffffeH
	jle	SHORT $LN24@ft_cubic_i
	cmp	DWORD PTR _d3$[ebp], 2
	jge	SHORT $LN24@ft_cubic_i
	cmp	DWORD PTR _d3$[ebp+4], -2		; fffffffeH
	jle	SHORT $LN24@ft_cubic_i
	cmp	DWORD PTR _d3$[ebp+4], 2
	jge	SHORT $LN24@ft_cubic_i
	mov	DWORD PTR tv152[ebp], 1
	jmp	SHORT $LN25@ft_cubic_i
$LN24@ft_cubic_i:
	mov	DWORD PTR tv152[ebp], 0
$LN25@ft_cubic_i:
	mov	ecx, DWORD PTR tv152[ebp]
	mov	DWORD PTR _close3$[ebp], ecx
; Line 209
	cmp	DWORD PTR _close1$[ebp], 0
	je	$LN14@ft_cubic_i
; Line 211
	cmp	DWORD PTR _close2$[ebp], 0
	je	SHORT $LN13@ft_cubic_i
; Line 213
	cmp	DWORD PTR _close3$[ebp], 0
	je	SHORT $LN12@ft_cubic_i
; Line 218
	jmp	SHORT $LN11@ft_cubic_i
$LN12@ft_cubic_i:
; Line 222
	mov	edx, DWORD PTR _d3$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d3$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_out$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _angle_mid$[ebp]
	mov	eax, DWORD PTR _angle_out$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR _angle_in$[ebp]
	mov	eax, DWORD PTR _angle_mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
$LN11@ft_cubic_i:
; Line 225
	jmp	SHORT $LN10@ft_cubic_i
$LN13@ft_cubic_i:
; Line 227
	cmp	DWORD PTR _close3$[ebp], 0
	je	SHORT $LN9@ft_cubic_i
; Line 231
	mov	edx, DWORD PTR _d2$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d2$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_out$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _angle_mid$[ebp]
	mov	eax, DWORD PTR _angle_out$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR _angle_in$[ebp]
	mov	eax, DWORD PTR _angle_mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 233
	jmp	SHORT $LN10@ft_cubic_i
$LN9@ft_cubic_i:
; Line 236
	mov	edx, DWORD PTR _d2$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d2$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_mid$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _angle_in$[ebp]
	mov	eax, DWORD PTR _angle_mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 237
	mov	edx, DWORD PTR _d3$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d3$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN10@ft_cubic_i:
; Line 241
	jmp	$LN7@ft_cubic_i
$LN14@ft_cubic_i:
; Line 243
	cmp	DWORD PTR _close2$[ebp], 0
	je	SHORT $LN6@ft_cubic_i
; Line 245
	cmp	DWORD PTR _close3$[ebp], 0
	je	SHORT $LN5@ft_cubic_i
; Line 249
	mov	edx, DWORD PTR _d1$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d1$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_out$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _angle_mid$[ebp]
	mov	eax, DWORD PTR _angle_out$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR _angle_in$[ebp]
	mov	eax, DWORD PTR _angle_mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 251
	jmp	SHORT $LN4@ft_cubic_i
$LN5@ft_cubic_i:
; Line 253
	mov	edx, DWORD PTR _d1$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d1$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_in$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 254
	mov	edx, DWORD PTR _d3$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d3$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_out$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 255
	mov	edx, DWORD PTR _angle_out$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _angle_in$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_ft_angle_mean
	add	esp, 8
	mov	ecx, DWORD PTR _angle_mid$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@ft_cubic_i:
; Line 258
	jmp	SHORT $LN7@ft_cubic_i
$LN6@ft_cubic_i:
; Line 260
	cmp	DWORD PTR _close3$[ebp], 0
	je	SHORT $LN2@ft_cubic_i
; Line 262
	mov	edx, DWORD PTR _d1$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d1$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_in$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 264
	mov	edx, DWORD PTR _d2$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d2$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_out$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _angle_mid$[ebp]
	mov	eax, DWORD PTR _angle_out$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 266
	jmp	SHORT $LN7@ft_cubic_i
$LN2@ft_cubic_i:
; Line 268
	mov	edx, DWORD PTR _d1$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d1$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_in$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 269
	mov	edx, DWORD PTR _d2$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d2$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_mid$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 270
	mov	edx, DWORD PTR _d3$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d3$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@ft_cubic_i:
; Line 275
	mov	edx, DWORD PTR _angle_mid$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _angle_in$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_Angle_Diff
	add	esp, 8
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	mov	DWORD PTR _theta1$[ebp], eax
; Line 276
	mov	eax, DWORD PTR _angle_out$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _angle_mid$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_Angle_Diff
	add	esp, 8
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	mov	DWORD PTR _theta2$[ebp], eax
; Line 279
	cmp	DWORD PTR _theta1$[ebp], 1474560	; 00168000H
	jge	SHORT $LN26@ft_cubic_i
	cmp	DWORD PTR _theta2$[ebp], 1474560	; 00168000H
	jge	SHORT $LN26@ft_cubic_i
	mov	BYTE PTR tv211[ebp], 1
	jmp	SHORT $LN27@ft_cubic_i
$LN26@ft_cubic_i:
	mov	BYTE PTR tv211[ebp], 0
$LN27@ft_cubic_i:
	mov	al, BYTE PTR tv211[ebp]
; Line 280
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@ft_cubic_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN32@ft_cubic_i:
	DD	3
	DD	$LN31@ft_cubic_i
$LN31@ft_cubic_i:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN28@ft_cubic_i
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN29@ft_cubic_i
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN30@ft_cubic_i
$LN30@ft_cubic_i:
	DB	100					; 00000064H
	DB	51					; 00000033H
	DB	0
$LN29@ft_cubic_i:
	DB	100					; 00000064H
	DB	50					; 00000032H
	DB	0
$LN28@ft_cubic_i:
	DB	100					; 00000064H
	DB	49					; 00000031H
	DB	0
_ft_cubic_is_small_enough ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_angle1$ = 8						; size = 4
_angle2$ = 12						; size = 4
_ft_angle_mean PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 182
	push	ebp
	mov	ebp, esp
; Line 183
	mov	eax, DWORD PTR _angle2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _angle1$[ebp]
	push	ecx
	call	_FT_Angle_Diff
	add	esp, 8
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _angle1$[ebp]
; Line 184
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_angle_mean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_d$ = -16						; size = 4
_c$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_base$ = 8						; size = 4
_ft_cubic_split PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 150
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 154
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, 8
	imul	eax, edx, 6
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
; Line 155
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _c$[ebp], ecx
; Line 156
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _d$[ebp], ecx
; Line 157
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 158
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR _d$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, 8
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 159
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 160
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 161
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, 8
	shl	eax, 2
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 162
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 164
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, 8
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [esi+eax+4]
	mov	DWORD PTR [ecx+edx+4], eax
; Line 165
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _c$[ebp], eax
; Line 166
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _d$[ebp], eax
; Line 167
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [eax+edx+4]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 168
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [eax+edx+4]
	add	eax, DWORD PTR _d$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, 8
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+edx+4], ecx
; Line 169
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 170
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+edx+4], ecx
; Line 171
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, 8
	shl	edx, 2
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+edx+4], ecx
; Line 172
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 8
	imul	ecx, edx, 3
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 173
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_cubic_split ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv155 = -53						; size = 1
tv133 = -52						; size = 4
tv128 = -48						; size = 4
_close2$ = -44						; size = 4
_close1$ = -40						; size = 4
_theta$ = -36						; size = 4
_d2$ = -28						; size = 8
_d1$ = -12						; size = 8
_base$ = 8						; size = 4
_angle_in$ = 12						; size = 4
_angle_out$ = 16					; size = 4
_ft_conic_is_small_enough PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 107
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	sub	eax, DWORD PTR [esi+ecx]
	mov	DWORD PTR _d1$[ebp], eax
; Line 108
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+4]
	sub	ecx, DWORD PTR [esi+edx+4]
	mov	DWORD PTR _d1$[ebp+4], ecx
; Line 109
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	sub	eax, DWORD PTR [esi+ecx]
	mov	DWORD PTR _d2$[ebp], eax
; Line 110
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+edx+4]
	sub	edx, DWORD PTR [esi+eax+4]
	mov	DWORD PTR _d2$[ebp+4], edx
; Line 112
	cmp	DWORD PTR _d1$[ebp], -2			; fffffffeH
	jle	SHORT $LN10@ft_conic_i
	cmp	DWORD PTR _d1$[ebp], 2
	jge	SHORT $LN10@ft_conic_i
	cmp	DWORD PTR _d1$[ebp+4], -2		; fffffffeH
	jle	SHORT $LN10@ft_conic_i
	cmp	DWORD PTR _d1$[ebp+4], 2
	jge	SHORT $LN10@ft_conic_i
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN11@ft_conic_i
$LN10@ft_conic_i:
	mov	DWORD PTR tv128[ebp], 0
$LN11@ft_conic_i:
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR _close1$[ebp], eax
; Line 113
	cmp	DWORD PTR _d2$[ebp], -2			; fffffffeH
	jle	SHORT $LN13@ft_conic_i
	cmp	DWORD PTR _d2$[ebp], 2
	jge	SHORT $LN13@ft_conic_i
	cmp	DWORD PTR _d2$[ebp+4], -2		; fffffffeH
	jle	SHORT $LN13@ft_conic_i
	cmp	DWORD PTR _d2$[ebp+4], 2
	jge	SHORT $LN13@ft_conic_i
	mov	DWORD PTR tv133[ebp], 1
	jmp	SHORT $LN14@ft_conic_i
$LN13@ft_conic_i:
	mov	DWORD PTR tv133[ebp], 0
$LN14@ft_conic_i:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _close2$[ebp], ecx
; Line 115
	cmp	DWORD PTR _close1$[ebp], 0
	je	SHORT $LN6@ft_conic_i
; Line 117
	cmp	DWORD PTR _close2$[ebp], 0
	je	SHORT $LN5@ft_conic_i
; Line 122
	jmp	SHORT $LN4@ft_conic_i
$LN5@ft_conic_i:
; Line 125
	mov	edx, DWORD PTR _d2$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d2$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_out$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _angle_in$[ebp]
	mov	eax, DWORD PTR _angle_out$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
$LN4@ft_conic_i:
; Line 128
	jmp	SHORT $LN3@ft_conic_i
$LN6@ft_conic_i:
; Line 130
	cmp	DWORD PTR _close2$[ebp], 0
	je	SHORT $LN2@ft_conic_i
; Line 133
	mov	edx, DWORD PTR _d1$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d1$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_out$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _angle_in$[ebp]
	mov	eax, DWORD PTR _angle_out$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 135
	jmp	SHORT $LN3@ft_conic_i
$LN2@ft_conic_i:
; Line 137
	mov	edx, DWORD PTR _d1$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d1$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_in$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 138
	mov	edx, DWORD PTR _d2$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _d2$[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	ecx, DWORD PTR _angle_out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN3@ft_conic_i:
; Line 142
	mov	edx, DWORD PTR _angle_out$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _angle_in$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_Angle_Diff
	add	esp, 8
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	mov	DWORD PTR _theta$[ebp], eax
; Line 144
	cmp	DWORD PTR _theta$[ebp], 1966080		; 001e0000H
	jge	SHORT $LN15@ft_conic_i
	mov	BYTE PTR tv155[ebp], 1
	jmp	SHORT $LN16@ft_conic_i
$LN15@ft_conic_i:
	mov	BYTE PTR tv155[ebp], 0
$LN16@ft_conic_i:
	mov	al, BYTE PTR tv155[ebp]
; Line 145
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@ft_conic_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@ft_conic_i:
	DD	2
	DD	$LN19@ft_conic_i
$LN19@ft_conic_i:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN17@ft_conic_i
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN18@ft_conic_i
$LN18@ft_conic_i:
	DB	100					; 00000064H
	DB	50					; 00000032H
	DB	0
$LN17@ft_conic_i:
	DB	100					; 00000064H
	DB	49					; 00000031H
	DB	0
_ft_conic_is_small_enough ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv150 = -24						; size = 4
tv142 = -20						; size = 4
tv88 = -16						; size = 4
tv80 = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_base$ = 8						; size = 4
_ft_conic_split PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 79
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 83
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	shl	ecx, 2
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax
; Line 84
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _b$[ebp], eax
; Line 85
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv80[ebp], eax
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 86
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv88[ebp], eax
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 87
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 89
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	shl	ecx, 2
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [esi+eax+4]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 90
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _b$[ebp], eax
; Line 91
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 92
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+eax+4]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv150[ebp], eax
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	mov	DWORD PTR [eax+edx+4], ecx
	mov	edx, DWORD PTR tv150[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 93
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 94
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_conic_split ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -4						; size = 4
_x$ = 8							; size = 4
_ft_pos_abs PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 72
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 73
	cmp	DWORD PTR _x$[ebp], 0
	jl	SHORT $LN3@ft_pos_abs
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@ft_pos_abs
$LN3@ft_pos_abs:
	mov	ecx, DWORD PTR _x$[ebp]
	neg	ecx
	mov	DWORD PTR tv66[ebp], ecx
$LN4@ft_pos_abs:
	mov	eax, DWORD PTR tv66[ebp]
; Line 74
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_pos_abs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num_contours$1 = -56					; size = 4
_num_points$2 = -44					; size = 4
_outline$3 = -36					; size = 4
_border$4 = -32						; size = 4
_oglyph$5 = -28						; size = 4
_copy$6 = -20						; size = 4
_library$ = -12						; size = 4
_glyph$ = -8						; size = 4
_error$ = -4						; size = 4
_pglyph$ = 8						; size = 4
_stroker$ = 12						; size = 4
_inside$ = 16						; size = 1
_destroy$ = 20						; size = 1
_FT_Glyph_StrokeBorder PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 2385
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2386
	mov	DWORD PTR _error$[ebp], 6
; Line 2387
	mov	DWORD PTR _glyph$[ebp], 0
; Line 2390
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _library$[ebp], ecx
; Line 2392
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR _library$[ebp], edx
; Line 2395
	cmp	DWORD PTR _pglyph$[ebp], 0
	jne	SHORT $LN11@FT_Glyph_S
; Line 2396
	jmp	$Exit$19
$LN11@FT_Glyph_S:
; Line 2398
	mov	eax, DWORD PTR _pglyph$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _glyph$[ebp], ecx
; Line 2399
	cmp	DWORD PTR _glyph$[ebp], 0
	je	SHORT $LN9@FT_Glyph_S
	mov	edx, DWORD PTR _glyph$[ebp]
	cmp	DWORD PTR [edx+4], OFFSET _ft_outline_glyph_class
	je	SHORT $LN10@FT_Glyph_S
$LN9@FT_Glyph_S:
; Line 2400
	jmp	$Exit$19
$LN10@FT_Glyph_S:
; Line 2406
	lea	eax, DWORD PTR _copy$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_FT_Glyph_Copy
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2407
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@FT_Glyph_S
; Line 2408
	jmp	$Exit$19
$LN8@FT_Glyph_S:
; Line 2410
	mov	edx, DWORD PTR _copy$6[ebp]
	mov	DWORD PTR _glyph$[ebp], edx
; Line 2414
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR _oglyph$5[ebp], eax
; Line 2416
	mov	ecx, DWORD PTR _oglyph$5[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _outline$3[ebp], ecx
; Line 2420
	mov	edx, DWORD PTR _outline$3[ebp]
	push	edx
	call	_FT_Outline_GetOutsideBorder
	add	esp, 4
	mov	DWORD PTR _border$4[ebp], eax
; Line 2421
	movzx	eax, BYTE PTR _inside$[ebp]
	test	eax, eax
	je	SHORT $LN7@FT_Glyph_S
; Line 2423
	cmp	DWORD PTR _border$4[ebp], 0
	jne	SHORT $LN6@FT_Glyph_S
; Line 2424
	mov	DWORD PTR _border$4[ebp], 1
; Line 2425
	jmp	SHORT $LN7@FT_Glyph_S
$LN6@FT_Glyph_S:
; Line 2426
	mov	DWORD PTR _border$4[ebp], 0
$LN7@FT_Glyph_S:
; Line 2429
	push	0
	mov	ecx, DWORD PTR _outline$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	push	edx
	call	_FT_Stroker_ParseOutline
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2430
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FT_Glyph_S
; Line 2431
	jmp	$Fail$20
$LN4@FT_Glyph_S:
; Line 2434
	lea	eax, DWORD PTR _num_contours$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _num_points$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$4[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_FT_Stroker_GetBorderCounts
	add	esp, 16					; 00000010H
; Line 2436
	mov	ecx, DWORD PTR _outline$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_Outline_Done
	add	esp, 8
; Line 2441
	mov	ecx, DWORD PTR _outline$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _num_contours$1[ebp]
	push	edx
	mov	eax, DWORD PTR _num_points$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_Outline_New
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2442
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@FT_Glyph_S
; Line 2443
	jmp	SHORT $Fail$20
$LN3@FT_Glyph_S:
; Line 2445
	xor	eax, eax
	mov	ecx, DWORD PTR _outline$3[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 2446
	xor	edx, edx
	mov	eax, DWORD PTR _outline$3[ebp]
	mov	WORD PTR [eax], dx
; Line 2448
	mov	ecx, DWORD PTR _outline$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$4[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_FT_Stroker_ExportBorder
	add	esp, 12					; 0000000cH
; Line 2451
	movzx	ecx, BYTE PTR _destroy$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@FT_Glyph_S
; Line 2452
	mov	edx, DWORD PTR _pglyph$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_Done_Glyph
	add	esp, 4
$LN2@FT_Glyph_S:
; Line 2454
	mov	ecx, DWORD PTR _pglyph$[ebp]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 2455
	jmp	SHORT $Exit$19
$Fail$20:
; Line 2458
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	call	_FT_Done_Glyph
	add	esp, 4
; Line 2459
	mov	DWORD PTR _glyph$[ebp], 0
; Line 2461
	movzx	ecx, BYTE PTR _destroy$[ebp]
	test	ecx, ecx
	jne	SHORT $Exit$19
; Line 2462
	mov	edx, DWORD PTR _pglyph$[ebp]
	mov	DWORD PTR [edx], 0
$Exit$19:
; Line 2465
	mov	eax, DWORD PTR _error$[ebp]
; Line 2466
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@FT_Glyph_S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@FT_Glyph_S:
	DD	3
	DD	$LN17@FT_Glyph_S
$LN17@FT_Glyph_S:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@FT_Glyph_S
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN15@FT_Glyph_S
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN16@FT_Glyph_S
$LN16@FT_Glyph_S:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN15@FT_Glyph_S:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN14@FT_Glyph_S:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	0
_FT_Glyph_StrokeBorder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num_contours$1 = -52					; size = 4
_num_points$2 = -40					; size = 4
_outline$3 = -32					; size = 4
_oglyph$4 = -28						; size = 4
_copy$5 = -20						; size = 4
_library$ = -12						; size = 4
_glyph$ = -8						; size = 4
_error$ = -4						; size = 4
_pglyph$ = 8						; size = 4
_stroker$ = 12						; size = 4
_destroy$ = 16						; size = 1
_FT_Glyph_Stroke PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 2307
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2308
	mov	DWORD PTR _error$[ebp], 6
; Line 2309
	mov	DWORD PTR _glyph$[ebp], 0
; Line 2312
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _library$[ebp], ecx
; Line 2314
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR _library$[ebp], edx
; Line 2317
	cmp	DWORD PTR _pglyph$[ebp], 0
	jne	SHORT $LN8@FT_Glyph_S
; Line 2318
	jmp	$Exit$16
$LN8@FT_Glyph_S:
; Line 2320
	mov	eax, DWORD PTR _pglyph$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _glyph$[ebp], ecx
; Line 2321
	cmp	DWORD PTR _glyph$[ebp], 0
	je	SHORT $LN6@FT_Glyph_S
	mov	edx, DWORD PTR _glyph$[ebp]
	cmp	DWORD PTR [edx+4], OFFSET _ft_outline_glyph_class
	je	SHORT $LN7@FT_Glyph_S
$LN6@FT_Glyph_S:
; Line 2322
	jmp	$Exit$16
$LN7@FT_Glyph_S:
; Line 2328
	lea	eax, DWORD PTR _copy$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_FT_Glyph_Copy
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2329
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@FT_Glyph_S
; Line 2330
	jmp	$Exit$16
$LN5@FT_Glyph_S:
; Line 2332
	mov	edx, DWORD PTR _copy$5[ebp]
	mov	DWORD PTR _glyph$[ebp], edx
; Line 2336
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR _oglyph$4[ebp], eax
; Line 2337
	mov	ecx, DWORD PTR _oglyph$4[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _outline$3[ebp], ecx
; Line 2341
	push	0
	mov	edx, DWORD PTR _outline$3[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_FT_Stroker_ParseOutline
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2342
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FT_Glyph_S
; Line 2343
	jmp	$Fail$17
$LN4@FT_Glyph_S:
; Line 2345
	lea	ecx, DWORD PTR _num_contours$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _num_points$2[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_FT_Stroker_GetCounts
	add	esp, 12					; 0000000cH
; Line 2347
	mov	ecx, DWORD PTR _outline$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_Outline_Done
	add	esp, 8
; Line 2350
	mov	ecx, DWORD PTR _outline$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _num_contours$1[ebp]
	push	edx
	mov	eax, DWORD PTR _num_points$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_Outline_New
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2351
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@FT_Glyph_S
; Line 2352
	jmp	SHORT $Fail$17
$LN3@FT_Glyph_S:
; Line 2354
	xor	eax, eax
	mov	ecx, DWORD PTR _outline$3[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 2355
	xor	edx, edx
	mov	eax, DWORD PTR _outline$3[ebp]
	mov	WORD PTR [eax], dx
; Line 2357
	mov	ecx, DWORD PTR _outline$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	push	edx
	call	_FT_Stroker_Export
	add	esp, 8
; Line 2360
	movzx	eax, BYTE PTR _destroy$[ebp]
	test	eax, eax
	je	SHORT $LN2@FT_Glyph_S
; Line 2361
	mov	ecx, DWORD PTR _pglyph$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_Done_Glyph
	add	esp, 4
$LN2@FT_Glyph_S:
; Line 2363
	mov	eax, DWORD PTR _pglyph$[ebp]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 2364
	jmp	SHORT $Exit$16
$Fail$17:
; Line 2367
	mov	edx, DWORD PTR _glyph$[ebp]
	push	edx
	call	_FT_Done_Glyph
	add	esp, 4
; Line 2368
	mov	DWORD PTR _glyph$[ebp], 0
; Line 2370
	movzx	eax, BYTE PTR _destroy$[ebp]
	test	eax, eax
	jne	SHORT $Exit$16
; Line 2371
	mov	ecx, DWORD PTR _pglyph$[ebp]
	mov	DWORD PTR [ecx], 0
$Exit$16:
; Line 2374
	mov	eax, DWORD PTR _error$[ebp]
; Line 2375
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@FT_Glyph_S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@FT_Glyph_S:
	DD	3
	DD	$LN14@FT_Glyph_S
$LN14@FT_Glyph_S:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@FT_Glyph_S
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN12@FT_Glyph_S
	DD	-52					; ffffffccH
	DD	4
	DD	$LN13@FT_Glyph_S
$LN13@FT_Glyph_S:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN12@FT_Glyph_S:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN11@FT_Glyph_S:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	0
_FT_Glyph_Stroke ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -4						; size = 4
_stroker$ = 8						; size = 4
_FT_Stroker_Done PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 865
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 866
	cmp	DWORD PTR _stroker$[ebp], 0
	je	SHORT $LN5@FT_Stroker
; Line 868
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$1[ebp], edx
; Line 871
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _stroker$[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	call	_ft_stroke_border_done
	add	esp, 4
; Line 872
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	mov	edx, DWORD PTR _stroker$[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	call	_ft_stroke_border_done
	add	esp, 4
; Line 874
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [ecx+128], 0
$LN3@FT_Stroker:
; Line 875
	mov	edx, DWORD PTR _stroker$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _stroker$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@FT_Stroker
$LN5@FT_Stroker:
; Line 877
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stroker_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stroker$ = 8						; size = 4
_outline$ = 12						; size = 4
_FT_Stroker_Export PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 2074
	push	ebp
	mov	ebp, esp
; Line 2075
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_FT_Stroker_ExportBorder
	add	esp, 12					; 0000000cH
; Line 2076
	mov	edx, DWORD PTR _outline$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_FT_Stroker_ExportBorder
	add	esp, 12					; 0000000cH
; Line 2077
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Stroker_Export ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -60						; size = 4
_num_contours$ = -56					; size = 4
_count4$ = -48						; size = 4
_count3$ = -36						; size = 4
_num_points$ = -28					; size = 4
_count2$ = -20						; size = 4
_count1$ = -8						; size = 4
_stroker$ = 8						; size = 4
_anum_points$ = 12					; size = 4
_anum_contours$ = 16					; size = 4
_FT_Stroker_GetCounts PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 2011
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2012
	mov	DWORD PTR _num_points$[ebp], 0
; Line 2013
	mov	DWORD PTR _num_contours$[ebp], 0
; Line 2017
	cmp	DWORD PTR _stroker$[ebp], 0
	jne	SHORT $LN5@FT_Stroker
; Line 2019
	push	OFFSET $SG8019
	push	2019					; 000007e3H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 2020
	jmp	SHORT $Exit$14
$LN5@FT_Stroker:
; Line 2024
	lea	eax, DWORD PTR _count2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _count1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_ft_stroke_border_get_counts
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2025
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FT_Stroker
; Line 2026
	jmp	SHORT $Exit$14
$LN4@FT_Stroker:
; Line 2029
	lea	eax, DWORD PTR _count4$[ebp]
	push	eax
	lea	ecx, DWORD PTR _count3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	call	_ft_stroke_border_get_counts
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2030
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@FT_Stroker
; Line 2031
	jmp	SHORT $Exit$14
$LN3@FT_Stroker:
; Line 2033
	mov	eax, DWORD PTR _count1$[ebp]
	add	eax, DWORD PTR _count3$[ebp]
	mov	DWORD PTR _num_points$[ebp], eax
; Line 2034
	mov	ecx, DWORD PTR _count2$[ebp]
	add	ecx, DWORD PTR _count4$[ebp]
	mov	DWORD PTR _num_contours$[ebp], ecx
$Exit$14:
; Line 2037
	cmp	DWORD PTR _anum_points$[ebp], 0
	je	SHORT $LN2@FT_Stroker
; Line 2038
	mov	edx, DWORD PTR _anum_points$[ebp]
	mov	eax, DWORD PTR _num_points$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@FT_Stroker:
; Line 2040
	cmp	DWORD PTR _anum_contours$[ebp], 0
	je	SHORT $LN1@FT_Stroker
; Line 2041
	mov	ecx, DWORD PTR _anum_contours$[ebp]
	mov	edx, DWORD PTR _num_contours$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@FT_Stroker:
; Line 2043
	mov	eax, DWORD PTR _error$[ebp]
; Line 2044
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FT_Stroker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@FT_Stroker:
	DD	4
	DD	$LN12@FT_Stroker
$LN12@FT_Stroker:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@FT_Stroker
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@FT_Stroker
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN10@FT_Stroker
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN11@FT_Stroker
$LN11@FT_Stroker:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	52					; 00000034H
	DB	0
$LN10@FT_Stroker:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	51					; 00000033H
	DB	0
$LN9@FT_Stroker:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	50					; 00000032H
	DB	0
$LN8@FT_Stroker:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	49					; 00000031H
	DB	0
_FT_Stroker_GetCounts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sborder$1 = -4						; size = 4
_stroker$ = 8						; size = 4
_border$ = 12						; size = 4
_outline$ = 16						; size = 4
_FT_Stroker_ExportBorder PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 2053
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2054
	cmp	DWORD PTR _stroker$[ebp], 0
	je	SHORT $LN4@FT_Stroker
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN5@FT_Stroker
$LN4@FT_Stroker:
; Line 2055
	jmp	SHORT $LN6@FT_Stroker
$LN5@FT_Stroker:
; Line 2058
	cmp	DWORD PTR _border$[ebp], 0
	je	SHORT $LN2@FT_Stroker
	cmp	DWORD PTR _border$[ebp], 1
	jne	SHORT $LN6@FT_Stroker
$LN2@FT_Stroker:
; Line 2060
	mov	eax, DWORD PTR _border$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _stroker$[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	mov	DWORD PTR _sborder$1[ebp], edx
; Line 2063
	mov	eax, DWORD PTR _sborder$1[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	je	SHORT $LN6@FT_Stroker
; Line 2064
	mov	edx, DWORD PTR _outline$[ebp]
	push	edx
	mov	eax, DWORD PTR _sborder$1[ebp]
	push	eax
	call	_ft_stroke_border_export
	add	esp, 8
$LN6@FT_Stroker:
; Line 2066
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stroker_ExportBorder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -28						; size = 4
_num_contours$ = -20					; size = 4
_num_points$ = -8					; size = 4
_stroker$ = 8						; size = 4
_border$ = 12						; size = 4
_anum_points$ = 16					; size = 4
_anum_contours$ = 20					; size = 4
_FT_Stroker_GetBorderCounts PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 1981
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1982
	mov	DWORD PTR _num_points$[ebp], 0
	mov	DWORD PTR _num_contours$[ebp], 0
; Line 1986
	cmp	DWORD PTR _stroker$[ebp], 0
	je	SHORT $LN3@FT_Stroker
	cmp	DWORD PTR _border$[ebp], 1
	jle	SHORT $LN4@FT_Stroker
$LN3@FT_Stroker:
; Line 1988
	push	OFFSET $SG8000
	push	1988					; 000007c4H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 1989
	jmp	SHORT $Exit$11
$LN4@FT_Stroker:
; Line 1993
	lea	eax, DWORD PTR _num_contours$[ebp]
	push	eax
	lea	ecx, DWORD PTR _num_points$[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _stroker$[ebp]
	lea	ecx, DWORD PTR [eax+edx+64]
	push	ecx
	call	_ft_stroke_border_get_counts
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$Exit$11:
; Line 1995
	cmp	DWORD PTR _anum_points$[ebp], 0
	je	SHORT $LN2@FT_Stroker
; Line 1996
	mov	edx, DWORD PTR _anum_points$[ebp]
	mov	eax, DWORD PTR _num_points$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@FT_Stroker:
; Line 1998
	cmp	DWORD PTR _anum_contours$[ebp], 0
	je	SHORT $LN1@FT_Stroker
; Line 1999
	mov	ecx, DWORD PTR _anum_contours$[ebp]
	mov	edx, DWORD PTR _num_contours$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@FT_Stroker:
; Line 2001
	mov	eax, DWORD PTR _error$[ebp]
; Line 2002
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@FT_Stroker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@FT_Stroker:
	DD	2
	DD	$LN9@FT_Stroker
$LN9@FT_Stroker:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@FT_Stroker
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@FT_Stroker
$LN8@FT_Stroker:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN7@FT_Stroker:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_FT_Stroker_GetBorderCounts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_alen$1 = -524						; size = 4
_sinB$2 = -520						; size = 4
_sinA$3 = -516						; size = 4
_blen$4 = -512						; size = 4
_delta$5 = -504						; size = 8
_bvec$6 = -488						; size = 8
_gamma$7 = -476						; size = 4
_beta$8 = -472						; size = 4
_alpha1$9 = -468					; size = 4
_start$10 = -460					; size = 8
_side$11 = -448						; size = 4
_border$12 = -444					; size = 4
_length2$13 = -440					; size = 4
_length1$14 = -436					; size = 4
_alpha0$15 = -432					; size = 4
_rotate$16 = -428					; size = 4
_phi2$17 = -424						; size = 4
_theta2$18 = -420					; size = 4
_phi1$19 = -416						; size = 4
_theta1$20 = -412					; size = 4
_end$21 = -404						; size = 8
_ctrl2$22 = -388					; size = 8
_ctrl1$23 = -372					; size = 8
_angle_out$24 = -356					; size = 4
_angle_mid$25 = -344					; size = 4
_angle_in$26 = -332					; size = 4
_first_arc$ = -321					; size = 1
_limit$ = -320						; size = 4
_arc$ = -316						; size = 4
_bez_stack$ = -308					; size = 296
_error$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_stroker$ = 8						; size = 4
_control1$ = 12						; size = 4
_control2$ = 16						; size = 4
_to$ = 20						; size = 4
_FT_Stroker_CubicTo PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 1567
	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1568
	mov	DWORD PTR _error$[ebp], 0
; Line 1571
	lea	eax, DWORD PTR _bez_stack$[ebp+256]
	mov	DWORD PTR _limit$[ebp], eax
; Line 1572
	mov	BYTE PTR _first_arc$[ebp], 1
; Line 1575
	cmp	DWORD PTR _stroker$[ebp], 0
	je	SHORT $LN23@FT_Stroker
	cmp	DWORD PTR _control1$[ebp], 0
	je	SHORT $LN23@FT_Stroker
	cmp	DWORD PTR _control2$[ebp], 0
	je	SHORT $LN23@FT_Stroker
	cmp	DWORD PTR _to$[ebp], 0
	jne	SHORT $LN24@FT_Stroker
$LN23@FT_Stroker:
; Line 1577
	push	OFFSET $SG7869
	push	1577					; 00000629H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 1578
	jmp	$Exit$40
$LN24@FT_Stroker:
; Line 1588
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _control1$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	cmp	eax, -2					; fffffffeH
	jle	$LN22@FT_Stroker
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _control1$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	cmp	eax, 2
	jge	$LN22@FT_Stroker
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _control1$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, -2					; fffffffeH
	jle	$LN22@FT_Stroker
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _control1$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, 2
	jge	$LN22@FT_Stroker
	mov	ecx, DWORD PTR _control1$[ebp]
	mov	edx, DWORD PTR _control2$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	cmp	eax, -2					; fffffffeH
	jle	$LN22@FT_Stroker
	mov	ecx, DWORD PTR _control1$[ebp]
	mov	edx, DWORD PTR _control2$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	cmp	eax, 2
	jge	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _control1$[ebp]
	mov	edx, DWORD PTR _control2$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, -2					; fffffffeH
	jle	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _control1$[ebp]
	mov	edx, DWORD PTR _control2$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, 2
	jge	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _control2$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	cmp	eax, -2					; fffffffeH
	jle	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _control2$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	cmp	eax, 2
	jge	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _control2$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, -2					; fffffffeH
	jle	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _control2$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, 2
	jge	SHORT $LN22@FT_Stroker
; Line 1590
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 1591
	jmp	$Exit$40
$LN22@FT_Stroker:
; Line 1594
	lea	edx, DWORD PTR _bez_stack$[ebp]
	mov	DWORD PTR _arc$[ebp], edx
; Line 1595
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, 8
	imul	eax, eax, 0
	mov	esi, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [esi+eax], ecx
	mov	DWORD PTR [esi+eax+4], edx
; Line 1596
	mov	ecx, DWORD PTR _control2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, 8
	shl	ecx, 0
	mov	esi, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [esi+ecx], edx
	mov	DWORD PTR [esi+ecx+4], eax
; Line 1597
	mov	edx, DWORD PTR _control1$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, 8
	shl	edx, 1
	mov	esi, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [esi+edx], eax
	mov	DWORD PTR [esi+edx+4], ecx
; Line 1598
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, 8
	imul	eax, eax, 3
	mov	esi, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [esi+eax], ecx
	mov	DWORD PTR [esi+eax+4], edx
$LN21@FT_Stroker:
; Line 1600
	lea	ecx, DWORD PTR _bez_stack$[ebp]
	cmp	DWORD PTR _arc$[ebp], ecx
	jb	$LN20@FT_Stroker
; Line 1606
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _angle_mid$25[ebp], eax
	mov	ecx, DWORD PTR _angle_mid$25[ebp]
	mov	DWORD PTR _angle_out$24[ebp], ecx
	mov	edx, DWORD PTR _angle_out$24[ebp]
	mov	DWORD PTR _angle_in$26[ebp], edx
; Line 1610
	mov	eax, DWORD PTR _arc$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN19@FT_Stroker
	lea	ecx, DWORD PTR _angle_out$24[ebp]
	push	ecx
	lea	edx, DWORD PTR _angle_mid$25[ebp]
	push	edx
	lea	eax, DWORD PTR _angle_in$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _arc$[ebp]
	push	ecx
	call	_ft_cubic_is_small_enough
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN19@FT_Stroker
; Line 1612
	mov	eax, DWORD PTR _stroker$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN18@FT_Stroker
; Line 1613
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _angle_in$26[ebp]
	mov	DWORD PTR [edx], eax
$LN18@FT_Stroker:
; Line 1615
	mov	ecx, DWORD PTR _arc$[ebp]
	push	ecx
	call	_ft_cubic_split
	add	esp, 4
; Line 1616
	mov	edx, DWORD PTR _arc$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _arc$[ebp], edx
; Line 1617
	jmp	$LN21@FT_Stroker
$LN19@FT_Stroker:
; Line 1620
	movzx	eax, BYTE PTR _first_arc$[ebp]
	test	eax, eax
	je	SHORT $LN17@FT_Stroker
; Line 1622
	mov	BYTE PTR _first_arc$[ebp], 0
; Line 1625
	mov	ecx, DWORD PTR _stroker$[ebp]
	movzx	edx, BYTE PTR [ecx+20]
	test	edx, edx
	je	SHORT $LN16@FT_Stroker
; Line 1626
	push	0
	mov	eax, DWORD PTR _angle_in$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_ft_stroker_subpath_start
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1627
	jmp	SHORT $LN15@FT_Stroker
$LN16@FT_Stroker:
; Line 1629
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _angle_in$26[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1630
	push	0
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_ft_stroker_process_corner
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN15@FT_Stroker:
; Line 1633
	jmp	SHORT $LN14@FT_Stroker
$LN17@FT_Stroker:
; Line 1634
	mov	edx, DWORD PTR _angle_in$26[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_Angle_Diff
	add	esp, 8
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	cmp	eax, 368640				; 0005a000H
	jle	SHORT $LN14@FT_Stroker
; Line 1638
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [ecx+eax+4]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 1639
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _angle_in$26[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1640
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [ecx+48], 0
; Line 1642
	push	0
	mov	edx, DWORD PTR _stroker$[ebp]
	push	edx
	call	_ft_stroker_process_corner
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1645
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+48], edx
$LN14@FT_Stroker:
; Line 1648
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@FT_Stroker
; Line 1649
	jmp	$Exit$40
$LN12@FT_Stroker:
; Line 1655
	mov	DWORD PTR _alpha0$15[ebp], 0
; Line 1661
	mov	eax, DWORD PTR _angle_mid$25[ebp]
	push	eax
	mov	ecx, DWORD PTR _angle_in$26[ebp]
	push	ecx
	call	_FT_Angle_Diff
	add	esp, 8
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _theta1$20[ebp], eax
; Line 1662
	mov	edx, DWORD PTR _angle_out$24[ebp]
	push	edx
	mov	eax, DWORD PTR _angle_mid$25[ebp]
	push	eax
	call	_FT_Angle_Diff
	add	esp, 8
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _theta2$18[ebp], eax
; Line 1663
	mov	ecx, DWORD PTR _angle_mid$25[ebp]
	push	ecx
	mov	edx, DWORD PTR _angle_in$26[ebp]
	push	edx
	call	_ft_angle_mean
	add	esp, 8
	mov	DWORD PTR _phi1$19[ebp], eax
; Line 1664
	mov	eax, DWORD PTR _angle_out$24[ebp]
	push	eax
	mov	ecx, DWORD PTR _angle_mid$25[ebp]
	push	ecx
	call	_ft_angle_mean
	add	esp, 8
	mov	DWORD PTR _phi2$17[ebp], eax
; Line 1665
	mov	edx, DWORD PTR _theta1$20[ebp]
	push	edx
	call	_FT_Cos
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _length1$14[ebp], eax
; Line 1666
	mov	edx, DWORD PTR _theta2$18[ebp]
	push	edx
	call	_FT_Cos
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _length2$13[ebp], eax
; Line 1669
	mov	edx, DWORD PTR _stroker$[ebp]
	movzx	eax, BYTE PTR [edx+40]
	test	eax, eax
	je	SHORT $LN11@FT_Stroker
; Line 1670
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, 8
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _arc$[ebp]
	mov	esi, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [eax+edx+4]
	sub	edx, DWORD PTR [esi+ecx+4]
	push	edx
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	imul	eax, edx, 3
	mov	edx, DWORD PTR _arc$[ebp]
	mov	esi, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	sub	ecx, DWORD PTR [esi+eax]
	push	ecx
	call	_FT_Atan2
	add	esp, 8
	mov	DWORD PTR _alpha0$15[ebp], eax
$LN11@FT_Stroker:
; Line 1674
	mov	edx, DWORD PTR _stroker$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _border$12[ebp], edx
	mov	DWORD PTR _side$11[ebp], 0
	jmp	SHORT $LN10@FT_Stroker
$LN9@FT_Stroker:
	mov	eax, DWORD PTR _side$11[ebp]
	add	eax, 1
	mov	DWORD PTR _side$11[ebp], eax
	mov	ecx, DWORD PTR _border$12[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _border$12[ebp], ecx
$LN10@FT_Stroker:
	cmp	DWORD PTR _side$11[ebp], 1
	jg	$LN8@FT_Stroker
; Line 1676
	imul	edx, DWORD PTR _side$11[ebp], 11796480
	mov	eax, 5898240				; 005a0000H
	sub	eax, edx
	mov	DWORD PTR _rotate$16[ebp], eax
; Line 1679
	mov	ecx, DWORD PTR _phi1$19[ebp]
	add	ecx, DWORD PTR _rotate$16[ebp]
	push	ecx
	mov	edx, DWORD PTR _length1$14[ebp]
	push	edx
	lea	eax, DWORD PTR _ctrl1$23[ebp]
	push	eax
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1680
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR _ctrl1$23[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _ctrl1$23[ebp], eax
; Line 1681
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR _ctrl1$23[ebp+4]
	add	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _ctrl1$23[ebp+4], eax
; Line 1683
	mov	ecx, DWORD PTR _phi2$17[ebp]
	add	ecx, DWORD PTR _rotate$16[ebp]
	push	ecx
	mov	edx, DWORD PTR _length2$13[ebp]
	push	edx
	lea	eax, DWORD PTR _ctrl2$22[ebp]
	push	eax
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1684
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR _ctrl2$22[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _ctrl2$22[ebp], eax
; Line 1685
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR _ctrl2$22[ebp+4]
	add	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _ctrl2$22[ebp+4], eax
; Line 1688
	mov	ecx, DWORD PTR _angle_out$24[ebp]
	add	ecx, DWORD PTR _rotate$16[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	lea	ecx, DWORD PTR _end$21[ebp]
	push	ecx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1689
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR _end$21[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _end$21[ebp], edx
; Line 1690
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR _end$21[ebp+4]
	add	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _end$21[ebp+4], eax
; Line 1692
	mov	ecx, DWORD PTR _stroker$[ebp]
	movzx	edx, BYTE PTR [ecx+40]
	test	edx, edx
	je	$LN7@FT_Stroker
; Line 1700
	mov	eax, DWORD PTR _border$12[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _border$12[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+ecx*8-8]
	mov	eax, DWORD PTR [eax+ecx*8-4]
	mov	DWORD PTR _start$10[ebp], edx
	mov	DWORD PTR _start$10[ebp+4], eax
; Line 1702
	mov	ecx, DWORD PTR _end$21[ebp+4]
	sub	ecx, DWORD PTR _start$10[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _end$21[ebp]
	sub	edx, DWORD PTR _start$10[ebp]
	push	edx
	call	_FT_Atan2
	add	esp, 8
	mov	DWORD PTR _alpha1$9[ebp], eax
; Line 1707
	mov	eax, DWORD PTR _alpha1$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _alpha0$15[ebp]
	push	ecx
	call	_FT_Angle_Diff
	add	esp, 8
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	cmp	eax, 5898240				; 005a0000H
	jle	$LN7@FT_Stroker
; Line 1715
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _start$10[ebp+4]
	push	edx
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	sub	eax, DWORD PTR _start$10[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	DWORD PTR _beta$8[ebp], eax
; Line 1716
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+edx+4]
	sub	ecx, DWORD PTR _end$21[ebp+4]
	push	ecx
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	sub	edx, DWORD PTR _end$21[ebp]
	push	edx
	call	_FT_Atan2
	add	esp, 8
	mov	DWORD PTR _gamma$7[ebp], eax
; Line 1718
	mov	eax, DWORD PTR _end$21[ebp]
	sub	eax, DWORD PTR _start$10[ebp]
	mov	DWORD PTR _bvec$6[ebp], eax
; Line 1719
	mov	ecx, DWORD PTR _end$21[ebp+4]
	sub	ecx, DWORD PTR _start$10[ebp+4]
	mov	DWORD PTR _bvec$6[ebp+4], ecx
; Line 1721
	lea	edx, DWORD PTR _bvec$6[ebp]
	push	edx
	call	_FT_Vector_Length
	add	esp, 4
	mov	DWORD PTR _blen$4[ebp], eax
; Line 1723
	mov	eax, DWORD PTR _alpha1$9[ebp]
	sub	eax, DWORD PTR _gamma$7[ebp]
	push	eax
	call	_FT_Sin
	add	esp, 4
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	mov	DWORD PTR _sinA$3[ebp], eax
; Line 1724
	mov	ecx, DWORD PTR _beta$8[ebp]
	sub	ecx, DWORD PTR _gamma$7[ebp]
	push	ecx
	call	_FT_Sin
	add	esp, 4
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	mov	DWORD PTR _sinB$2[ebp], eax
; Line 1726
	mov	edx, DWORD PTR _sinB$2[ebp]
	push	edx
	mov	eax, DWORD PTR _sinA$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _blen$4[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _alen$1[ebp], eax
; Line 1728
	mov	edx, DWORD PTR _beta$8[ebp]
	push	edx
	mov	eax, DWORD PTR _alen$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _delta$5[ebp]
	push	ecx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1729
	mov	edx, DWORD PTR _delta$5[ebp]
	add	edx, DWORD PTR _start$10[ebp]
	mov	DWORD PTR _delta$5[ebp], edx
; Line 1730
	mov	eax, DWORD PTR _delta$5[ebp+4]
	add	eax, DWORD PTR _start$10[ebp+4]
	mov	DWORD PTR _delta$5[ebp+4], eax
; Line 1733
	mov	ecx, DWORD PTR _border$12[ebp]
	mov	BYTE PTR [ecx+16], 0
; Line 1734
	push	0
	lea	edx, DWORD PTR _delta$5[ebp]
	push	edx
	mov	eax, DWORD PTR _border$12[ebp]
	push	eax
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1735
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@FT_Stroker
; Line 1736
	jmp	$Exit$40
$LN5@FT_Stroker:
; Line 1737
	push	0
	lea	ecx, DWORD PTR _end$21[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$12[ebp]
	push	edx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1738
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FT_Stroker
; Line 1739
	jmp	$Exit$40
$LN4@FT_Stroker:
; Line 1743
	lea	eax, DWORD PTR _start$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _ctrl1$23[ebp]
	push	ecx
	lea	edx, DWORD PTR _ctrl2$22[ebp]
	push	edx
	mov	eax, DWORD PTR _border$12[ebp]
	push	eax
	call	_ft_stroke_border_cubicto
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1744
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@FT_Stroker
; Line 1745
	jmp	$Exit$40
$LN3@FT_Stroker:
; Line 1747
	push	0
	lea	ecx, DWORD PTR _end$21[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$12[ebp]
	push	edx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1748
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FT_Stroker
; Line 1749
	jmp	SHORT $Exit$40
$LN2@FT_Stroker:
; Line 1751
	jmp	$LN9@FT_Stroker
$LN7@FT_Stroker:
; Line 1758
	lea	eax, DWORD PTR _end$21[ebp]
	push	eax
	lea	ecx, DWORD PTR _ctrl2$22[ebp]
	push	ecx
	lea	edx, DWORD PTR _ctrl1$23[ebp]
	push	edx
	mov	eax, DWORD PTR _border$12[ebp]
	push	eax
	call	_ft_stroke_border_cubicto
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1759
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@FT_Stroker
; Line 1760
	jmp	SHORT $Exit$40
$LN1@FT_Stroker:
; Line 1761
	jmp	$LN9@FT_Stroker
$LN8@FT_Stroker:
; Line 1764
	mov	ecx, DWORD PTR _arc$[ebp]
	sub	ecx, 24					; 00000018H
	mov	DWORD PTR _arc$[ebp], ecx
; Line 1766
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _angle_out$24[ebp]
	mov	DWORD PTR [edx], eax
; Line 1767
	jmp	$LN21@FT_Stroker
$LN20@FT_Stroker:
; Line 1769
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
$Exit$40:
; Line 1772
	mov	eax, DWORD PTR _error$[ebp]
; Line 1773
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@FT_Stroker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN39@FT_Stroker:
	DD	10					; 0000000aH
	DD	$LN38@FT_Stroker
$LN38@FT_Stroker:
	DD	-308					; fffffeccH
	DD	296					; 00000128H
	DD	$LN28@FT_Stroker
	DD	-332					; fffffeb4H
	DD	4
	DD	$LN29@FT_Stroker
	DD	-344					; fffffea8H
	DD	4
	DD	$LN30@FT_Stroker
	DD	-356					; fffffe9cH
	DD	4
	DD	$LN31@FT_Stroker
	DD	-372					; fffffe8cH
	DD	8
	DD	$LN32@FT_Stroker
	DD	-388					; fffffe7cH
	DD	8
	DD	$LN33@FT_Stroker
	DD	-404					; fffffe6cH
	DD	8
	DD	$LN34@FT_Stroker
	DD	-460					; fffffe34H
	DD	8
	DD	$LN35@FT_Stroker
	DD	-488					; fffffe18H
	DD	8
	DD	$LN36@FT_Stroker
	DD	-504					; fffffe08H
	DD	8
	DD	$LN37@FT_Stroker
$LN37@FT_Stroker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN36@FT_Stroker:
	DB	98					; 00000062H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN35@FT_Stroker:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN34@FT_Stroker:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN33@FT_Stroker:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	50					; 00000032H
	DB	0
$LN32@FT_Stroker:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	49					; 00000031H
	DB	0
$LN31@FT_Stroker:
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN30@FT_Stroker:
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN29@FT_Stroker:
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN28@FT_Stroker:
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_FT_Stroker_CubicTo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_alen$1 = -460						; size = 4
_sinB$2 = -456						; size = 4
_sinA$3 = -452						; size = 4
_blen$4 = -448						; size = 4
_delta$5 = -440						; size = 8
_bvec$6 = -424						; size = 8
_gamma$7 = -412						; size = 4
_beta$8 = -408						; size = 4
_alpha1$9 = -404					; size = 4
_start$10 = -396					; size = 8
_side$11 = -384						; size = 4
_border$12 = -380					; size = 4
_length$13 = -376					; size = 4
_alpha0$14 = -372					; size = 4
_rotate$15 = -368					; size = 4
_phi$16 = -364						; size = 4
_theta$17 = -360					; size = 4
_end$18 = -352						; size = 8
_ctrl$19 = -336						; size = 8
_angle_out$20 = -320					; size = 4
_angle_in$21 = -308					; size = 4
_first_arc$ = -297					; size = 1
_limit$ = -296						; size = 4
_arc$ = -292						; size = 4
_bez_stack$ = -284					; size = 272
_error$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_stroker$ = 8						; size = 4
_control$ = 12						; size = 4
_to$ = 16						; size = 4
_FT_Stroker_ConicTo PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 1365
	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1366
	mov	DWORD PTR _error$[ebp], 0
; Line 1369
	lea	eax, DWORD PTR _bez_stack$[ebp+240]
	mov	DWORD PTR _limit$[ebp], eax
; Line 1370
	mov	BYTE PTR _first_arc$[ebp], 1
; Line 1373
	cmp	DWORD PTR _stroker$[ebp], 0
	je	SHORT $LN23@FT_Stroker
	cmp	DWORD PTR _control$[ebp], 0
	je	SHORT $LN23@FT_Stroker
	cmp	DWORD PTR _to$[ebp], 0
	jne	SHORT $LN24@FT_Stroker
$LN23@FT_Stroker:
; Line 1375
	push	OFFSET $SG7807
	push	1375					; 0000055fH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 1376
	jmp	$Exit$38
$LN24@FT_Stroker:
; Line 1384
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	cmp	eax, -2					; fffffffeH
	jle	$LN22@FT_Stroker
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	cmp	eax, 2
	jge	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, -2					; fffffffeH
	jle	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, 2
	jge	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	cmp	eax, -2					; fffffffeH
	jle	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	cmp	eax, 2
	jge	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, -2					; fffffffeH
	jle	SHORT $LN22@FT_Stroker
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, 2
	jge	SHORT $LN22@FT_Stroker
; Line 1386
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 1387
	jmp	$Exit$38
$LN22@FT_Stroker:
; Line 1390
	lea	edx, DWORD PTR _bez_stack$[ebp]
	mov	DWORD PTR _arc$[ebp], edx
; Line 1391
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, 8
	imul	eax, eax, 0
	mov	esi, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [esi+eax], ecx
	mov	DWORD PTR [esi+eax+4], edx
; Line 1392
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, 8
	shl	ecx, 0
	mov	esi, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [esi+ecx], edx
	mov	DWORD PTR [esi+ecx+4], eax
; Line 1393
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, 8
	shl	edx, 1
	mov	esi, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [esi+edx], eax
	mov	DWORD PTR [esi+edx+4], ecx
$LN21@FT_Stroker:
; Line 1395
	lea	eax, DWORD PTR _bez_stack$[ebp]
	cmp	DWORD PTR _arc$[ebp], eax
	jb	$LN20@FT_Stroker
; Line 1401
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _angle_out$20[ebp], edx
	mov	eax, DWORD PTR _angle_out$20[ebp]
	mov	DWORD PTR _angle_in$21[ebp], eax
; Line 1404
	mov	ecx, DWORD PTR _arc$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN19@FT_Stroker
	lea	edx, DWORD PTR _angle_out$20[ebp]
	push	edx
	lea	eax, DWORD PTR _angle_in$21[ebp]
	push	eax
	mov	ecx, DWORD PTR _arc$[ebp]
	push	ecx
	call	_ft_conic_is_small_enough
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN19@FT_Stroker
; Line 1406
	mov	eax, DWORD PTR _stroker$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN18@FT_Stroker
; Line 1407
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _angle_in$21[ebp]
	mov	DWORD PTR [edx], eax
$LN18@FT_Stroker:
; Line 1409
	mov	ecx, DWORD PTR _arc$[ebp]
	push	ecx
	call	_ft_conic_split
	add	esp, 4
; Line 1410
	mov	edx, DWORD PTR _arc$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _arc$[ebp], edx
; Line 1411
	jmp	$LN21@FT_Stroker
$LN19@FT_Stroker:
; Line 1414
	movzx	eax, BYTE PTR _first_arc$[ebp]
	test	eax, eax
	je	SHORT $LN17@FT_Stroker
; Line 1416
	mov	BYTE PTR _first_arc$[ebp], 0
; Line 1419
	mov	ecx, DWORD PTR _stroker$[ebp]
	movzx	edx, BYTE PTR [ecx+20]
	test	edx, edx
	je	SHORT $LN16@FT_Stroker
; Line 1420
	push	0
	mov	eax, DWORD PTR _angle_in$21[ebp]
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_ft_stroker_subpath_start
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1421
	jmp	SHORT $LN15@FT_Stroker
$LN16@FT_Stroker:
; Line 1423
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _angle_in$21[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1424
	push	0
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_ft_stroker_process_corner
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN15@FT_Stroker:
; Line 1427
	jmp	SHORT $LN14@FT_Stroker
$LN17@FT_Stroker:
; Line 1428
	mov	edx, DWORD PTR _angle_in$21[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_Angle_Diff
	add	esp, 8
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	cmp	eax, 491520				; 00078000H
	jle	SHORT $LN14@FT_Stroker
; Line 1432
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 1433
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _angle_in$21[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1434
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 1436
	push	0
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_ft_stroker_process_corner
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1439
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+48], ecx
$LN14@FT_Stroker:
; Line 1442
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@FT_Stroker
; Line 1443
	jmp	$Exit$38
$LN12@FT_Stroker:
; Line 1449
	mov	DWORD PTR _alpha0$14[ebp], 0
; Line 1455
	mov	edx, DWORD PTR _angle_out$20[ebp]
	push	edx
	mov	eax, DWORD PTR _angle_in$21[ebp]
	push	eax
	call	_FT_Angle_Diff
	add	esp, 8
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _theta$17[ebp], eax
; Line 1456
	mov	ecx, DWORD PTR _angle_in$21[ebp]
	add	ecx, DWORD PTR _theta$17[ebp]
	mov	DWORD PTR _phi$16[ebp], ecx
; Line 1457
	mov	edx, DWORD PTR _theta$17[ebp]
	push	edx
	call	_FT_Cos
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _length$13[ebp], eax
; Line 1460
	mov	edx, DWORD PTR _stroker$[ebp]
	movzx	eax, BYTE PTR [edx+40]
	test	eax, eax
	je	SHORT $LN11@FT_Stroker
; Line 1461
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	esi, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+edx+4]
	sub	edx, DWORD PTR [esi+eax+4]
	push	edx
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _arc$[ebp]
	mov	esi, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	sub	ecx, DWORD PTR [esi+edx]
	push	ecx
	call	_FT_Atan2
	add	esp, 8
	mov	DWORD PTR _alpha0$14[ebp], eax
$LN11@FT_Stroker:
; Line 1465
	mov	edx, DWORD PTR _stroker$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _border$12[ebp], edx
	mov	DWORD PTR _side$11[ebp], 0
	jmp	SHORT $LN10@FT_Stroker
$LN9@FT_Stroker:
	mov	eax, DWORD PTR _side$11[ebp]
	add	eax, 1
	mov	DWORD PTR _side$11[ebp], eax
	mov	ecx, DWORD PTR _border$12[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _border$12[ebp], ecx
$LN10@FT_Stroker:
	cmp	DWORD PTR _side$11[ebp], 1
	jg	$LN8@FT_Stroker
; Line 1467
	imul	edx, DWORD PTR _side$11[ebp], 11796480
	mov	eax, 5898240				; 005a0000H
	sub	eax, edx
	mov	DWORD PTR _rotate$15[ebp], eax
; Line 1470
	mov	ecx, DWORD PTR _phi$16[ebp]
	add	ecx, DWORD PTR _rotate$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$13[ebp]
	push	edx
	lea	eax, DWORD PTR _ctrl$19[ebp]
	push	eax
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1471
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR _ctrl$19[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _ctrl$19[ebp], eax
; Line 1472
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR _ctrl$19[ebp+4]
	add	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _ctrl$19[ebp+4], eax
; Line 1475
	mov	ecx, DWORD PTR _angle_out$20[ebp]
	add	ecx, DWORD PTR _rotate$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	lea	ecx, DWORD PTR _end$18[ebp]
	push	ecx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1476
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR _end$18[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _end$18[ebp], edx
; Line 1477
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR _end$18[ebp+4]
	add	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _end$18[ebp+4], eax
; Line 1479
	mov	ecx, DWORD PTR _stroker$[ebp]
	movzx	edx, BYTE PTR [ecx+40]
	test	edx, edx
	je	$LN7@FT_Stroker
; Line 1487
	mov	eax, DWORD PTR _border$12[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _border$12[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+ecx*8-8]
	mov	eax, DWORD PTR [eax+ecx*8-4]
	mov	DWORD PTR _start$10[ebp], edx
	mov	DWORD PTR _start$10[ebp+4], eax
; Line 1489
	mov	ecx, DWORD PTR _end$18[ebp+4]
	sub	ecx, DWORD PTR _start$10[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _end$18[ebp]
	sub	edx, DWORD PTR _start$10[ebp]
	push	edx
	call	_FT_Atan2
	add	esp, 8
	mov	DWORD PTR _alpha1$9[ebp], eax
; Line 1494
	mov	eax, DWORD PTR _alpha1$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _alpha0$14[ebp]
	push	ecx
	call	_FT_Angle_Diff
	add	esp, 8
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	cmp	eax, 5898240				; 005a0000H
	jle	$LN7@FT_Stroker
; Line 1502
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+edx+4]
	sub	ecx, DWORD PTR _start$10[ebp+4]
	push	ecx
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	sub	ecx, DWORD PTR _start$10[ebp]
	push	ecx
	call	_FT_Atan2
	add	esp, 8
	mov	DWORD PTR _beta$8[ebp], eax
; Line 1503
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _end$18[ebp+4]
	push	edx
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	sub	eax, DWORD PTR _end$18[ebp]
	push	eax
	call	_FT_Atan2
	add	esp, 8
	mov	DWORD PTR _gamma$7[ebp], eax
; Line 1505
	mov	ecx, DWORD PTR _end$18[ebp]
	sub	ecx, DWORD PTR _start$10[ebp]
	mov	DWORD PTR _bvec$6[ebp], ecx
; Line 1506
	mov	edx, DWORD PTR _end$18[ebp+4]
	sub	edx, DWORD PTR _start$10[ebp+4]
	mov	DWORD PTR _bvec$6[ebp+4], edx
; Line 1508
	lea	eax, DWORD PTR _bvec$6[ebp]
	push	eax
	call	_FT_Vector_Length
	add	esp, 4
	mov	DWORD PTR _blen$4[ebp], eax
; Line 1510
	mov	ecx, DWORD PTR _alpha1$9[ebp]
	sub	ecx, DWORD PTR _gamma$7[ebp]
	push	ecx
	call	_FT_Sin
	add	esp, 4
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	mov	DWORD PTR _sinA$3[ebp], eax
; Line 1511
	mov	edx, DWORD PTR _beta$8[ebp]
	sub	edx, DWORD PTR _gamma$7[ebp]
	push	edx
	call	_FT_Sin
	add	esp, 4
	push	eax
	call	_ft_pos_abs
	add	esp, 4
	mov	DWORD PTR _sinB$2[ebp], eax
; Line 1513
	mov	eax, DWORD PTR _sinB$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _sinA$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _blen$4[ebp]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _alen$1[ebp], eax
; Line 1515
	mov	eax, DWORD PTR _beta$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _alen$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _delta$5[ebp]
	push	edx
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1516
	mov	eax, DWORD PTR _delta$5[ebp]
	add	eax, DWORD PTR _start$10[ebp]
	mov	DWORD PTR _delta$5[ebp], eax
; Line 1517
	mov	ecx, DWORD PTR _delta$5[ebp+4]
	add	ecx, DWORD PTR _start$10[ebp+4]
	mov	DWORD PTR _delta$5[ebp+4], ecx
; Line 1520
	mov	edx, DWORD PTR _border$12[ebp]
	mov	BYTE PTR [edx+16], 0
; Line 1521
	push	0
	lea	eax, DWORD PTR _delta$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _border$12[ebp]
	push	ecx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1522
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@FT_Stroker
; Line 1523
	jmp	$Exit$38
$LN5@FT_Stroker:
; Line 1524
	push	0
	lea	edx, DWORD PTR _end$18[ebp]
	push	edx
	mov	eax, DWORD PTR _border$12[ebp]
	push	eax
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1525
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FT_Stroker
; Line 1526
	jmp	$Exit$38
$LN4@FT_Stroker:
; Line 1527
	lea	ecx, DWORD PTR _start$10[ebp]
	push	ecx
	lea	edx, DWORD PTR _ctrl$19[ebp]
	push	edx
	mov	eax, DWORD PTR _border$12[ebp]
	push	eax
	call	_ft_stroke_border_conicto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1528
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@FT_Stroker
; Line 1529
	jmp	$Exit$38
$LN3@FT_Stroker:
; Line 1531
	push	0
	lea	ecx, DWORD PTR _end$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$12[ebp]
	push	edx
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1532
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FT_Stroker
; Line 1533
	jmp	SHORT $Exit$38
$LN2@FT_Stroker:
; Line 1535
	jmp	$LN9@FT_Stroker
$LN7@FT_Stroker:
; Line 1542
	lea	eax, DWORD PTR _end$18[ebp]
	push	eax
	lea	ecx, DWORD PTR _ctrl$19[ebp]
	push	ecx
	mov	edx, DWORD PTR _border$12[ebp]
	push	edx
	call	_ft_stroke_border_conicto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1543
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@FT_Stroker
; Line 1544
	jmp	SHORT $Exit$38
$LN1@FT_Stroker:
; Line 1545
	jmp	$LN9@FT_Stroker
$LN8@FT_Stroker:
; Line 1548
	mov	eax, DWORD PTR _arc$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _arc$[ebp], eax
; Line 1550
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _angle_out$20[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1551
	jmp	$LN21@FT_Stroker
$LN20@FT_Stroker:
; Line 1553
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$Exit$38:
; Line 1556
	mov	eax, DWORD PTR _error$[ebp]
; Line 1557
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@FT_Stroker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN37@FT_Stroker:
	DD	8
	DD	$LN36@FT_Stroker
$LN36@FT_Stroker:
	DD	-284					; fffffee4H
	DD	272					; 00000110H
	DD	$LN28@FT_Stroker
	DD	-308					; fffffeccH
	DD	4
	DD	$LN29@FT_Stroker
	DD	-320					; fffffec0H
	DD	4
	DD	$LN30@FT_Stroker
	DD	-336					; fffffeb0H
	DD	8
	DD	$LN31@FT_Stroker
	DD	-352					; fffffea0H
	DD	8
	DD	$LN32@FT_Stroker
	DD	-396					; fffffe74H
	DD	8
	DD	$LN33@FT_Stroker
	DD	-424					; fffffe58H
	DD	8
	DD	$LN34@FT_Stroker
	DD	-440					; fffffe48H
	DD	8
	DD	$LN35@FT_Stroker
$LN35@FT_Stroker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN34@FT_Stroker:
	DB	98					; 00000062H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN33@FT_Stroker:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN32@FT_Stroker:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN31@FT_Stroker:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	0
$LN30@FT_Stroker:
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN29@FT_Stroker:
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN28@FT_Stroker:
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_FT_Stroker_ConicTo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_point$1 = -48						; size = 8
_line_length$ = -36					; size = 4
_side$ = -32						; size = 4
_angle$ = -28						; size = 4
_delta$ = -20						; size = 8
_border$ = -8						; size = 4
_error$ = -4						; size = 4
_stroker$ = 8						; size = 4
_to$ = 12						; size = 4
_FT_Stroker_LineTo PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 1288
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1289
	mov	DWORD PTR _error$[ebp], 0
; Line 1297
	cmp	DWORD PTR _stroker$[ebp], 0
	je	SHORT $LN10@FT_Stroker
	cmp	DWORD PTR _to$[ebp], 0
	jne	SHORT $LN11@FT_Stroker
$LN10@FT_Stroker:
; Line 1298
	push	OFFSET $SG7781
	push	1298					; 00000512H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN12@FT_Stroker
$LN11@FT_Stroker:
; Line 1300
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _delta$[ebp], edx
; Line 1301
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _delta$[ebp+4], edx
; Line 1304
	cmp	DWORD PTR _delta$[ebp], 0
	jne	SHORT $LN9@FT_Stroker
	cmp	DWORD PTR _delta$[ebp+4], 0
	jne	SHORT $LN9@FT_Stroker
; Line 1305
	jmp	$Exit$18
$LN9@FT_Stroker:
; Line 1308
	lea	eax, DWORD PTR _delta$[ebp]
	push	eax
	call	_FT_Vector_Length
	add	esp, 4
	mov	DWORD PTR _line_length$[ebp], eax
; Line 1310
	mov	ecx, DWORD PTR _delta$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _delta$[ebp]
	push	edx
	call	_FT_Atan2
	add	esp, 8
	mov	DWORD PTR _angle$[ebp], eax
; Line 1311
	mov	eax, DWORD PTR _angle$[ebp]
	add	eax, 5898240				; 005a0000H
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	lea	eax, DWORD PTR _delta$[ebp]
	push	eax
	call	_FT_Vector_From_Polar
	add	esp, 12					; 0000000cH
; Line 1314
	mov	ecx, DWORD PTR _stroker$[ebp]
	movzx	edx, BYTE PTR [ecx+20]
	test	edx, edx
	je	SHORT $LN8@FT_Stroker
; Line 1319
	mov	eax, DWORD PTR _line_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _angle$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	push	edx
	call	_ft_stroker_subpath_start
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1320
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@FT_Stroker
; Line 1321
	jmp	$Exit$18
$LN7@FT_Stroker:
; Line 1323
	jmp	SHORT $LN6@FT_Stroker
$LN8@FT_Stroker:
; Line 1326
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _angle$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1327
	mov	edx, DWORD PTR _line_length$[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_ft_stroker_process_corner
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1328
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@FT_Stroker
; Line 1329
	jmp	$Exit$18
$LN6@FT_Stroker:
; Line 1333
	mov	ecx, DWORD PTR _stroker$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _border$[ebp], ecx
	mov	DWORD PTR _side$[ebp], 1
	jmp	SHORT $LN4@FT_Stroker
$LN3@FT_Stroker:
	mov	edx, DWORD PTR _side$[ebp]
	sub	edx, 1
	mov	DWORD PTR _side$[ebp], edx
	mov	eax, DWORD PTR _border$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _border$[ebp], eax
$LN4@FT_Stroker:
	cmp	DWORD PTR _side$[ebp], 0
	jl	SHORT $LN2@FT_Stroker
; Line 1338
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _point$1[ebp], edx
; Line 1339
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _delta$[ebp+4]
	mov	DWORD PTR _point$1[ebp+4], ecx
; Line 1342
	push	1
	lea	edx, DWORD PTR _point$1[ebp]
	push	edx
	mov	eax, DWORD PTR _border$[ebp]
	push	eax
	call	_ft_stroke_border_lineto
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1343
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@FT_Stroker
; Line 1344
	jmp	SHORT $Exit$18
$LN1@FT_Stroker:
; Line 1346
	mov	ecx, DWORD PTR _delta$[ebp]
	neg	ecx
	mov	DWORD PTR _delta$[ebp], ecx
; Line 1347
	mov	edx, DWORD PTR _delta$[ebp+4]
	neg	edx
	mov	DWORD PTR _delta$[ebp+4], edx
; Line 1348
	jmp	SHORT $LN3@FT_Stroker
$LN2@FT_Stroker:
; Line 1350
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _angle$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1351
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
; Line 1352
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _line_length$[ebp]
	mov	DWORD PTR [eax+16], ecx
$Exit$18:
; Line 1355
	mov	eax, DWORD PTR _error$[ebp]
$LN12@FT_Stroker:
; Line 1356
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@FT_Stroker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@FT_Stroker:
	DD	2
	DD	$LN16@FT_Stroker
$LN16@FT_Stroker:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN14@FT_Stroker
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN15@FT_Stroker
$LN15@FT_Stroker:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN14@FT_Stroker:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_FT_Stroker_LineTo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_inside_side$1 = -16					; size = 4
_turn$2 = -12						; size = 4
_right$3 = -8						; size = 4
_error$ = -4						; size = 4
_stroker$ = 8						; size = 4
_FT_Stroker_EndSubPath PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 1882
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1883
	mov	DWORD PTR _error$[ebp], 0
; Line 1886
	cmp	DWORD PTR _stroker$[ebp], 0
	jne	SHORT $LN13@FT_Stroker
; Line 1888
	push	OFFSET $SG7969
	push	1888					; 00000760H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 1889
	jmp	$Exit$16
$LN13@FT_Stroker:
; Line 1892
	mov	eax, DWORD PTR _stroker$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	je	$LN12@FT_Stroker
; Line 1894
	mov	edx, DWORD PTR _stroker$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _right$3[ebp], edx
; Line 1900
	push	0
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	push	edx
	call	_ft_stroker_cap
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1901
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@FT_Stroker
; Line 1902
	jmp	$Exit$16
$LN11@FT_Stroker:
; Line 1905
	push	1
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_ft_stroker_add_reverse_left
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1906
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@FT_Stroker
; Line 1907
	jmp	$Exit$16
$LN10@FT_Stroker:
; Line 1910
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 1912
	push	0
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 11796480				; 00b40000H
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_ft_stroker_cap
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1913
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@FT_Stroker
; Line 1914
	jmp	$Exit$16
$LN9@FT_Stroker:
; Line 1918
	push	0
	mov	edx, DWORD PTR _right$3[ebp]
	push	edx
	call	_ft_stroke_border_close
	add	esp, 8
; Line 1920
	jmp	$Exit$16
$LN12@FT_Stroker:
; Line 1928
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+28]
	jne	SHORT $LN6@FT_Stroker
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+32]
	je	SHORT $LN7@FT_Stroker
$LN6@FT_Stroker:
; Line 1930
	mov	eax, DWORD PTR _stroker$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_FT_Stroker_LineTo
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1931
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@FT_Stroker
; Line 1932
	jmp	$Exit$16
$LN7@FT_Stroker:
; Line 1936
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+4], ecx
; Line 1938
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_Angle_Diff
	add	esp, 8
	mov	DWORD PTR _turn$2[ebp], eax
; Line 1941
	cmp	DWORD PTR _turn$2[ebp], 0
	je	SHORT $LN4@FT_Stroker
; Line 1944
	mov	DWORD PTR _inside_side$1[ebp], 0
; Line 1947
	cmp	DWORD PTR _turn$2[ebp], 0
	jge	SHORT $LN3@FT_Stroker
; Line 1948
	mov	DWORD PTR _inside_side$1[ebp], 1
$LN3@FT_Stroker:
; Line 1952
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _inside_side$1[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_ft_stroker_inside
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1953
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FT_Stroker
; Line 1954
	jmp	SHORT $Exit$16
$LN2@FT_Stroker:
; Line 1959
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, 1
	sub	eax, DWORD PTR _inside_side$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_ft_stroker_outside
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1960
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FT_Stroker
; Line 1961
	jmp	SHORT $Exit$16
$LN4@FT_Stroker:
; Line 1965
	push	0
	mov	edx, DWORD PTR _stroker$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_ft_stroke_border_close
	add	esp, 8
; Line 1966
	push	1
	mov	eax, DWORD PTR _stroker$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	call	_ft_stroke_border_close
	add	esp, 8
$Exit$16:
; Line 1970
	mov	eax, DWORD PTR _error$[ebp]
; Line 1971
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stroker_EndSubPath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv83 = -1						; size = 1
_stroker$ = 8						; size = 4
_to$ = 12						; size = 4
_open$ = 16						; size = 1
_FT_Stroker_BeginSubPath PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 1782
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1783
	cmp	DWORD PTR _stroker$[ebp], 0
	je	SHORT $LN1@FT_Stroker
	cmp	DWORD PTR _to$[ebp], 0
	jne	SHORT $LN2@FT_Stroker
$LN1@FT_Stroker:
; Line 1784
	push	OFFSET $SG7929
	push	1784					; 000006f8H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN3@FT_Stroker
$LN2@FT_Stroker:
; Line 1790
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	BYTE PTR [eax+20], 1
; Line 1791
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 1792
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	al, BYTE PTR _open$[ebp]
	mov	BYTE PTR [edx+21], al
; Line 1802
	mov	ecx, DWORD PTR _stroker$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN6@FT_Stroker
	mov	edx, DWORD PTR _stroker$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	test	eax, eax
	je	SHORT $LN5@FT_Stroker
	mov	ecx, DWORD PTR _stroker$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN6@FT_Stroker
$LN5@FT_Stroker:
	mov	BYTE PTR tv83[ebp], 0
	jmp	SHORT $LN7@FT_Stroker
$LN6@FT_Stroker:
	mov	BYTE PTR tv83[ebp], 1
$LN7@FT_Stroker:
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	al, BYTE PTR tv83[ebp]
	mov	BYTE PTR [edx+40], al
; Line 1805
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	DWORD PTR [ecx+32], eax
; Line 1807
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [edx], 0
; Line 1809
	xor	eax, eax
$LN3@FT_Stroker:
; Line 1810
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stroker_BeginSubPath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv166 = -180						; size = 4
_vec$1 = -172						; size = 8
_vec2$2 = -156						; size = 8
_vec1$3 = -140						; size = 8
_v_middle$4 = -124					; size = 8
_vec$5 = -108						; size = 8
_vec$6 = -92						; size = 8
_last$7 = -80						; size = 4
_tag$ = -76						; size = 4
_first$ = -72						; size = 4
_n$ = -68						; size = 4
_error$ = -64						; size = 4
_tags$ = -60						; size = 4
_limit$ = -56						; size = 4
_point$ = -52						; size = 4
_v_start$ = -44						; size = 8
_v_control$ = -28					; size = 8
_v_last$ = -12						; size = 8
_stroker$ = 8						; size = 4
_outline$ = 12						; size = 4
_opened$ = 16						; size = 1
_FT_Stroker_ParseOutline PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 2090
	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	push	edi
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2106
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN31@FT_Stroker
; Line 2107
	push	OFFSET $SG8061
	push	2107					; 0000083bH
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN32@FT_Stroker
$LN31@FT_Stroker:
; Line 2109
	cmp	DWORD PTR _stroker$[ebp], 0
	jne	SHORT $LN30@FT_Stroker
; Line 2110
	push	OFFSET $SG8063
	push	2110					; 0000083eH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN32@FT_Stroker
$LN30@FT_Stroker:
; Line 2112
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_FT_Stroker_Rewind
	add	esp, 4
; Line 2114
	mov	DWORD PTR _first$[ebp], 0
; Line 2116
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN29@FT_Stroker
$LN28@FT_Stroker:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN29@FT_Stroker:
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	cmp	DWORD PTR _n$[ebp], eax
	jge	$LN27@FT_Stroker
; Line 2121
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _n$[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	mov	DWORD PTR _last$7[ebp], ecx
; Line 2122
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _last$7[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _limit$[ebp], edx
; Line 2125
	mov	eax, DWORD PTR _last$7[ebp]
	cmp	eax, DWORD PTR _first$[ebp]
	ja	SHORT $LN26@FT_Stroker
; Line 2127
	mov	ecx, DWORD PTR _last$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _first$[ebp], ecx
; Line 2128
	jmp	SHORT $LN28@FT_Stroker
$LN26@FT_Stroker:
; Line 2131
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _first$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _v_start$[ebp], edx
	mov	DWORD PTR _v_start$[ebp+4], eax
; Line 2132
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _last$7[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [edx+eax*8+4]
	mov	DWORD PTR _v_last$[ebp], ecx
	mov	DWORD PTR _v_last$[ebp+4], edx
; Line 2134
	mov	eax, DWORD PTR _v_start$[ebp]
	mov	DWORD PTR _v_control$[ebp], eax
	mov	ecx, DWORD PTR _v_start$[ebp+4]
	mov	DWORD PTR _v_control$[ebp+4], ecx
; Line 2136
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _first$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _point$[ebp], edx
; Line 2137
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _first$[ebp]
	mov	DWORD PTR _tags$[ebp], ecx
; Line 2138
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _tags$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	and	edx, 3
	mov	DWORD PTR _tag$[ebp], edx
; Line 2141
	cmp	DWORD PTR _tag$[ebp], 2
	jne	SHORT $LN25@FT_Stroker
; Line 2142
	jmp	$Invalid_Outline$47
$LN25@FT_Stroker:
; Line 2145
	cmp	DWORD PTR _tag$[ebp], 0
	jne	SHORT $LN24@FT_Stroker
; Line 2148
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _last$7[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	and	eax, 3
	cmp	eax, 1
	jne	SHORT $LN23@FT_Stroker
; Line 2151
	mov	ecx, DWORD PTR _v_last$[ebp]
	mov	DWORD PTR _v_start$[ebp], ecx
	mov	edx, DWORD PTR _v_last$[ebp+4]
	mov	DWORD PTR _v_start$[ebp+4], edx
; Line 2152
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 8
	mov	DWORD PTR _limit$[ebp], eax
; Line 2154
	jmp	SHORT $LN22@FT_Stroker
$LN23@FT_Stroker:
; Line 2158
	mov	eax, DWORD PTR _v_start$[ebp]
	add	eax, DWORD PTR _v_last$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_start$[ebp], eax
; Line 2159
	mov	eax, DWORD PTR _v_start$[ebp+4]
	add	eax, DWORD PTR _v_last$[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_start$[ebp+4], eax
$LN22@FT_Stroker:
; Line 2161
	mov	ecx, DWORD PTR _point$[ebp]
	sub	ecx, 8
	mov	DWORD PTR _point$[ebp], ecx
; Line 2162
	mov	edx, DWORD PTR _tags$[ebp]
	sub	edx, 1
	mov	DWORD PTR _tags$[ebp], edx
$LN24@FT_Stroker:
; Line 2165
	movzx	eax, BYTE PTR _opened$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	push	edx
	call	_FT_Stroker_BeginSubPath
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2166
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@FT_Stroker
; Line 2167
	jmp	$Exit$48
$LN20@FT_Stroker:
; Line 2169
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$Close$49
; Line 2171
	mov	ecx, DWORD PTR _point$[ebp]
	add	ecx, 8
	mov	DWORD PTR _point$[ebp], ecx
; Line 2172
	mov	edx, DWORD PTR _tags$[ebp]
	add	edx, 1
	mov	DWORD PTR _tags$[ebp], edx
; Line 2174
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tags$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	and	eax, 3
	mov	DWORD PTR _tag$[ebp], eax
; Line 2175
	mov	ecx, DWORD PTR _tag$[ebp]
	mov	DWORD PTR tv166[ebp], ecx
	cmp	DWORD PTR tv166[ebp], 0
	je	SHORT $LN14@FT_Stroker
	cmp	DWORD PTR tv166[ebp], 1
	je	SHORT $LN16@FT_Stroker
	jmp	$LN8@FT_Stroker
$LN16@FT_Stroker:
; Line 2182
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _vec$6[ebp], eax
; Line 2183
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _vec$6[ebp+4], edx
; Line 2185
	lea	eax, DWORD PTR _vec$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_FT_Stroker_LineTo
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2186
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@FT_Stroker
; Line 2187
	jmp	$Exit$48
$LN15@FT_Stroker:
; Line 2188
	jmp	$LN20@FT_Stroker
$LN14@FT_Stroker:
; Line 2192
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _v_control$[ebp], eax
; Line 2193
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _v_control$[ebp+4], edx
$Do_Conic$50:
; Line 2196
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN13@FT_Stroker
; Line 2202
	mov	ecx, DWORD PTR _point$[ebp]
	add	ecx, 8
	mov	DWORD PTR _point$[ebp], ecx
; Line 2203
	mov	edx, DWORD PTR _tags$[ebp]
	add	edx, 1
	mov	DWORD PTR _tags$[ebp], edx
; Line 2204
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tags$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	and	eax, 3
	mov	DWORD PTR _tag$[ebp], eax
; Line 2206
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _vec$5[ebp], ecx
	mov	DWORD PTR _vec$5[ebp+4], edx
; Line 2208
	cmp	DWORD PTR _tag$[ebp], 1
	jne	SHORT $LN12@FT_Stroker
; Line 2210
	lea	eax, DWORD PTR _vec$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_control$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	push	edx
	call	_FT_Stroker_ConicTo
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2211
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@FT_Stroker
; Line 2212
	jmp	$Exit$48
$LN11@FT_Stroker:
; Line 2213
	jmp	$LN20@FT_Stroker
$LN12@FT_Stroker:
; Line 2216
	cmp	DWORD PTR _tag$[ebp], 0
	je	SHORT $LN10@FT_Stroker
; Line 2217
	jmp	$Invalid_Outline$47
$LN10@FT_Stroker:
; Line 2219
	mov	eax, DWORD PTR _v_control$[ebp]
	add	eax, DWORD PTR _vec$5[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_middle$4[ebp], eax
; Line 2220
	mov	eax, DWORD PTR _v_control$[ebp+4]
	add	eax, DWORD PTR _vec$5[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_middle$4[ebp+4], eax
; Line 2222
	lea	eax, DWORD PTR _v_middle$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_control$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stroker$[ebp]
	push	edx
	call	_FT_Stroker_ConicTo
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2223
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@FT_Stroker
; Line 2224
	jmp	$Exit$48
$LN9@FT_Stroker:
; Line 2226
	mov	eax, DWORD PTR _vec$5[ebp]
	mov	DWORD PTR _v_control$[ebp], eax
	mov	ecx, DWORD PTR _vec$5[ebp+4]
	mov	DWORD PTR _v_control$[ebp+4], ecx
; Line 2227
	jmp	$Do_Conic$50
$LN13@FT_Stroker:
; Line 2230
	lea	edx, DWORD PTR _v_start$[ebp]
	push	edx
	lea	eax, DWORD PTR _v_control$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_FT_Stroker_ConicTo
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2231
	jmp	$Close$49
$LN8@FT_Stroker:
; Line 2239
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 8
	cmp	edx, DWORD PTR _limit$[ebp]
	ja	SHORT $LN6@FT_Stroker
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _tags$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	and	edx, 3
	cmp	edx, 2
	je	SHORT $LN7@FT_Stroker
$LN6@FT_Stroker:
; Line 2240
	jmp	$Invalid_Outline$47
$LN7@FT_Stroker:
; Line 2242
	mov	eax, DWORD PTR _point$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _point$[ebp], eax
; Line 2243
	mov	ecx, DWORD PTR _tags$[ebp]
	add	ecx, 2
	mov	DWORD PTR _tags$[ebp], ecx
; Line 2245
	mov	edx, 8
	imul	eax, edx, -2
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _vec1$3[ebp], edx
	mov	DWORD PTR _vec1$3[ebp+4], eax
; Line 2246
	mov	ecx, 8
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _vec2$2[ebp], ecx
	mov	DWORD PTR _vec2$2[ebp+4], edx
; Line 2248
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	ja	SHORT $LN5@FT_Stroker
; Line 2253
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _vec$1[ebp], ecx
	mov	DWORD PTR _vec$1[ebp+4], edx
; Line 2255
	lea	eax, DWORD PTR _vec$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec2$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _vec1$3[ebp]
	push	edx
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_FT_Stroker_CubicTo
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2256
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FT_Stroker
; Line 2257
	jmp	SHORT $Exit$48
$LN4@FT_Stroker:
; Line 2258
	jmp	$LN20@FT_Stroker
$LN5@FT_Stroker:
; Line 2261
	lea	ecx, DWORD PTR _v_start$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vec2$2[ebp]
	push	edx
	lea	eax, DWORD PTR _vec1$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_FT_Stroker_CubicTo
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2262
	jmp	SHORT $Close$49
; Line 2265
	jmp	$LN20@FT_Stroker
$Close$49:
; Line 2268
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@FT_Stroker
; Line 2269
	jmp	SHORT $Exit$48
$LN3@FT_Stroker:
; Line 2272
	mov	edx, DWORD PTR _stroker$[ebp]
	movzx	eax, BYTE PTR [edx+20]
	test	eax, eax
	jne	SHORT $LN2@FT_Stroker
; Line 2274
	mov	ecx, DWORD PTR _stroker$[ebp]
	push	ecx
	call	_FT_Stroker_EndSubPath
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 2275
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FT_Stroker
; Line 2276
	jmp	SHORT $Exit$48
$LN2@FT_Stroker:
; Line 2279
	mov	edx, DWORD PTR _last$7[ebp]
	add	edx, 1
	mov	DWORD PTR _first$[ebp], edx
; Line 2280
	jmp	$LN28@FT_Stroker
$LN27@FT_Stroker:
; Line 2282
	xor	eax, eax
	jmp	SHORT $LN32@FT_Stroker
$Exit$48:
; Line 2285
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN32@FT_Stroker
$Invalid_Outline$47:
; Line 2288
	push	OFFSET $SG8107
	push	2288					; 000008f0H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
$LN32@FT_Stroker:
; Line 2289
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@FT_Stroker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 180				; 000000b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN46@FT_Stroker:
	DD	9
	DD	$LN45@FT_Stroker
$LN45@FT_Stroker:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN36@FT_Stroker
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN37@FT_Stroker
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN38@FT_Stroker
	DD	-92					; ffffffa4H
	DD	8
	DD	$LN39@FT_Stroker
	DD	-108					; ffffff94H
	DD	8
	DD	$LN40@FT_Stroker
	DD	-124					; ffffff84H
	DD	8
	DD	$LN41@FT_Stroker
	DD	-140					; ffffff74H
	DD	8
	DD	$LN42@FT_Stroker
	DD	-156					; ffffff64H
	DD	8
	DD	$LN43@FT_Stroker
	DD	-172					; ffffff54H
	DD	8
	DD	$LN44@FT_Stroker
$LN44@FT_Stroker:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN43@FT_Stroker:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	50					; 00000032H
	DB	0
$LN42@FT_Stroker:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	0
$LN41@FT_Stroker:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN40@FT_Stroker:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN39@FT_Stroker:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN38@FT_Stroker:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN37@FT_Stroker:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN36@FT_Stroker:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_FT_Stroker_ParseOutline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stroker$ = 8						; size = 4
_FT_Stroker_Rewind PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 852
	push	ebp
	mov	ebp, esp
; Line 853
	cmp	DWORD PTR _stroker$[ebp], 0
	je	SHORT $LN2@FT_Stroker
; Line 855
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _stroker$[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	call	_ft_stroke_border_reset
	add	esp, 4
; Line 856
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	mov	edx, DWORD PTR _stroker$[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	call	_ft_stroke_border_reset
	add	esp, 4
$LN2@FT_Stroker:
; Line 858
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Stroker_Rewind ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stroker$ = 8						; size = 4
_radius$ = 12						; size = 4
_line_cap$ = 16						; size = 4
_line_join$ = 20					; size = 4
_miter_limit$ = 24					; size = 4
_FT_Stroker_Set PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 827
	push	ebp
	mov	ebp, esp
; Line 828
	cmp	DWORD PTR _stroker$[ebp], 0
	jne	SHORT $LN2@FT_Stroker
; Line 829
	jmp	SHORT $LN3@FT_Stroker
$LN2@FT_Stroker:
; Line 831
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _radius$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 832
	mov	edx, DWORD PTR _stroker$[ebp]
	mov	eax, DWORD PTR _line_cap$[ebp]
	mov	DWORD PTR [edx+44], eax
; Line 833
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _line_join$[ebp]
	mov	DWORD PTR [ecx+48], edx
; Line 834
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	ecx, DWORD PTR _miter_limit$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 837
	mov	edx, DWORD PTR _stroker$[ebp]
	cmp	DWORD PTR [edx+56], 65536		; 00010000H
	jge	SHORT $LN1@FT_Stroker
; Line 838
	mov	eax, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [eax+56], 65536		; 00010000H
$LN1@FT_Stroker:
; Line 842
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _line_join$[ebp]
	mov	DWORD PTR [ecx+52], edx
; Line 844
	mov	eax, DWORD PTR _stroker$[ebp]
	push	eax
	call	_FT_Stroker_Rewind
	add	esp, 4
$LN3@FT_Stroker:
; Line 845
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Stroker_Set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stroker$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_astroker$ = 12						; size = 4
_FT_Stroker_New PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 791
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 794
	mov	DWORD PTR _stroker$[ebp], 0
; Line 797
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN3@FT_Stroker
; Line 798
	push	OFFSET $SG7603
	push	798					; 0000031eH
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	$LN4@FT_Stroker
$LN3@FT_Stroker:
; Line 800
	cmp	DWORD PTR _astroker$[ebp], 0
	jne	SHORT $LN2@FT_Stroker
; Line 801
	push	OFFSET $SG7605
	push	801					; 00000321H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN4@FT_Stroker
$LN2@FT_Stroker:
; Line 803
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 805
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	132					; 00000084H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _stroker$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@FT_Stroker
; Line 807
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [ecx+128], edx
; Line 809
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _stroker$[ebp]
	lea	ecx, DWORD PTR [eax+edx+64]
	push	ecx
	call	_ft_stroke_border_init
	add	esp, 8
; Line 810
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, 32					; 00000020H
	shl	eax, 0
	mov	ecx, DWORD PTR _stroker$[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	push	edx
	call	_ft_stroke_border_init
	add	esp, 8
$LN1@FT_Stroker:
; Line 813
	mov	eax, DWORD PTR _astroker$[ebp]
	mov	ecx, DWORD PTR _stroker$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 815
	mov	eax, DWORD PTR _error$[ebp]
$LN4@FT_Stroker:
; Line 816
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@FT_Stroker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@FT_Stroker:
	DD	1
	DD	$LN7@FT_Stroker
$LN7@FT_Stroker:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@FT_Stroker
$LN6@FT_Stroker:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_Stroker_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -8						; size = 4
_o$ = -4						; size = 4
_outline$ = 8						; size = 4
_FT_Outline_GetOutsideBorder PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 46
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	call	_FT_Outline_Get_Orientation
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
; Line 50
	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN3@FT_Outline
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN4@FT_Outline
$LN3@FT_Outline:
	mov	DWORD PTR tv67[ebp], 1
$LN4@FT_Outline:
	mov	eax, DWORD PTR tv67[ebp]
; Line 51
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Outline_GetOutsideBorder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -8						; size = 4
_o$ = -4						; size = 4
_outline$ = 8						; size = 4
_FT_Outline_GetInsideBorder PROC
; File d:\mozilla\modules\freetype2\src\base\ftstroke.c
; Line 32
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 33
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	call	_FT_Outline_Get_Orientation
	add	esp, 4
	mov	DWORD PTR _o$[ebp], eax
; Line 37
	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN3@FT_Outline
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@FT_Outline
$LN3@FT_Outline:
	mov	DWORD PTR tv67[ebp], 0
$LN4@FT_Outline:
	mov	eax, DWORD PTR tv67[ebp]
; Line 38
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Outline_GetInsideBorder ENDP
_TEXT	ENDS
END
