; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\sfnt\sfnt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_sfnt_module_class
PUBLIC	_tt_cmap12_class_rec
PUBLIC	_tt_cmap14_class_rec
PUBLIC	_tt_cmap4_class_rec
PUBLIC	_tt_cmap13_class_rec
PUBLIC	_tt_cmap6_class_rec
PUBLIC	_tt_cmap0_class_rec
PUBLIC	_tt_cmap8_class_rec
PUBLIC	_tt_cmap2_class_rec
PUBLIC	_tt_cmap10_class_rec
_BSS	SEGMENT
$SG8201	DB	01H DUP (?)
$SG13945 DB	01H DUP (?)
$SG13973 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG8202	DB	's', 00H
	ORG $+6
$SG8203	DB	'check_table_dir: can read only %d table%s in font (inste'
	DB	'ad of %d)', 0aH, 00H
	ORG $+1
$SG15376 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG15378 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG8210	DB	'check_table_dir: table entry %d invalid', 0aH, 00H
	ORG $+3
$SG8230	DB	'check_table_dir: `head'' or `bhed'' table too small', 0aH
	DB	00H
	ORG $+1
$SG8231	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttload.c', 00H
	ORG $+1
$SG13383 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG8263	DB	'check_table_dir: no tables found', 0aH, 00H
	ORG $+2
$SG8241	DB	'check_table_dir: invalid magic number in `head'' or `bhe'
	DB	'd'' table', 0aH, 00H
	ORG $+3
$SG9272	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttload.c', 00H
	ORG $+1
$SG9277	DB	'numRanges: %u', 0aH, 00H
	ORG $+1
$SG13382 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG8264	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttload.c', 00H
	ORG $+1
$SG13388 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG9292	DB	'gaspRange %d: rangeMaxPPEM %5d, rangeGaspBehavior 0x%x', 0aH
	DB	00H
$SG13389 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG8272	DB	'check_table_dir:', 00H
	ORG $+3
$SG8277	DB	' neither `head'', `bhed'', nor `sing'' table found', 0aH
	DB	00H
	ORG $+3
$SG8278	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttload.c', 00H
	ORG $+1
$SG13403 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG13408 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG8315	DB	'tt_face_load_font_dir: %08p', 0aH, 00H
	ORG $+3
$SG8324	DB	'-- Number of tables: %10u', 0aH, 00H
	ORG $+1
$SG8329	DB	'-- Format version:   0x%08lx', 0aH, 00H
	ORG $+2
$SG13458 DB	0aH, '  tag    offset    compLen  origLen  checksum', 0aH
	DB	'  -------------------------------------------', 0aH, 00H
	ORG $+2
$SG12437 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG8341	DB	'tt_face_load_font_dir: invalid table directory for TrueT'
	DB	'ype', 0aH, 00H
	ORG $+3
$SG11414 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG8353	DB	0aH, '  tag    offset    length   checksum', 0aH, '  ----'
	DB	'------------------------------', 0aH, 00H
$SG12450 DB	'tt_face_build_cmaps: unsupported `cmap'' table format = '
	DB	'%d', 0aH, 00H
	ORG $+1
$SG12451 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13478 DB	'  %c%c%c%c  %08lx  %08lx  %08lx  %08lx', 0aH, 00H
$SG13480 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG11438 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13488 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG13492 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG8372	DB	'  %c%c%c%c  %08lx  %08lx  %08lx', 0aH, 00H
	ORG $+3
$SG13496 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG8377	DB	'table directory loaded', 0aH, 0aH, 00H
	ORG $+3
$SG13499 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG8395	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttload.c', 00H
	ORG $+1
$SG11478 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG11480 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG11484 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14561 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfdriver.c', 00H
	ORG $+3
$SG14565 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfdriver.c', 00H
	ORG $+3
$SG13541 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG12519 DB	'tt_face_build_cmaps: broken cmap sub-table ignored', 0aH
	DB	00H
$SG12526 DB	'tt_face_build_cmaps: unsupported cmap sub-table ignored', 0aH
	DB	00H
	ORG $+3
$SG15597 DB	'tt_sbit_decoder_load_image: found sbit (format %d) for g'
	DB	'lyph index %d', 0aH, 00H
	ORG $+1
$SG15598 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG15603 DB	'tt_sbit_decoder_load_image: no sbit found for glyph inde'
	DB	'x %d', 0aH, 00H
	ORG $+2
$SG15604 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG9464	DB	'Ascender:          %5d', 0aH, 00H
$SG9469	DB	'Descender:         %5d', 0aH, 00H
$SG9474	DB	'number_Of_Metrics: %5u', 0aH, 00H
$SG14605 DB	'Ignore glyph names for invalid GID 0x%08x - 0x%08x', 0aH
	DB	00H
$SG13597 DB	'sfnt_open_font: file is a WOFF; synthesizing SFNT', 0aH, 00H
	ORG $+1
$SG12574 DB	'tt_face_load_kern: kerning table is too small - ignored', 0aH
	DB	00H
	ORG $+3
$SG12575 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttkern.c', 00H
	ORG $+1
$SG15649 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG12579 DB	'tt_face_load_kern: could not extract kerning table', 0aH
	DB	00H
$SG15652 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG10536 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG15660 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG15663 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG10551 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13626 DB	'  not a font using the SFNT container format', 0aH, 00H
	ORG $+2
$SG13627 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG15683 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG10565 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG8518	DB	'Units per EM: %4u', 0aH, 00H
	ORG $+1
$SG15690 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG8523	DB	'IndexToLoc:   %4d', 0aH, 00H
	ORG $+1
$SG13644 DB	'sfnt_open_font: file is a collection', 0aH, 00H
	ORG $+2
$SG13647 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG13650 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG15707 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG15709 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG13665 DB	'sfnt_open_font: synthesize TTC', 0aH, 00H
$SG14699 DB	'CHARSET_REGISTRY', 00H
	ORG $+3
$SG14701 DB	'CHARSET_ENCODING', 00H
	ORG $+3
$SG14705 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfdriver.c', 00H
	ORG $+3
$SG13685 DB	'sfnt', 00H
	ORG $+3
$SG13687 DB	'sfnt_init_face: cannot access `sfnt'' module', 0aH, 00H
	ORG $+3
$SG14712 DB	'sfnt-table', 00H
	ORG $+1
$SG13688 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG14713 DB	'postscript-font-name', 00H
	ORG $+3
$SG14714 DB	'glyph-dict', 00H
	ORG $+1
$SG14715 DB	'bdf', 00H
$SG14716 DB	'tt-cmaps', 00H
	ORG $+3
$SG15742 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG13696 DB	'postscript-cmaps', 00H
	ORG $+3
$SG13701 DB	'SFNT driver', 0aH, 00H
	ORG $+3
$SG14729 DB	'sfnt', 00H
	ORG $+3
$SG13707 DB	'sfnt_init_face: %08p, %ld', 0aH, 00H
	ORG $+1
$SG13710 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG9615	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG15767 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttpost.c', 00H
	ORG $+1
$SG9624	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG9633	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG10675 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG15801 DB	'load_format_20: %d byte left in post table', 0aH, 00H
$SG13755 DB	'sfnt_load_face: %08p', 0aH, 0aH, 00H
	ORG $+1
$SG15809 DB	'load_format_20: exceeding string length (%d), truncating'
	DB	' at end of post table (%d byte left)', 0aH, 00H
	ORG $+2
$SG10689 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG8646	DB	'tt_face_load_maxp: too much twilight points in `maxp'' t'
	DB	'able;', 0aH, '                   some glyphs might be rendere'
	DB	'd incorrectly', 0aH, 00H
	ORG $+1
$SG11720 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13781 DB	'`bhed'' ', 00H
$SG14807 DB	'tt_face_load_sbit_strikes: table too short', 0aH, 00H
$SG15817 DB	'load_format_20: all entries in post table are already pa'
	DB	'rsed, using NULL names for gid %d - %d', 0aH, 00H
$SG8652	DB	'tt_face_load_maxp: abnormally large component depth (%d)'
	DB	' set to 100', 0aH, 00H
	ORG $+3
$SG10702 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG8657	DB	'numGlyphs: %u', 0aH, 00H
	ORG $+1
$SG14808 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG13786 DB	'-->', 0aH, 00H
	ORG $+3
$SG13791 DB	'loaded', 00H
	ORG $+1
$SG13792 DB	'missing', 00H
$SG11744 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG9696	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13793 DB	'failed to load', 00H
	ORG $+1
$SG13794 DB	'%s', 0aH, 00H
$SG13799 DB	0aH, 00H
	ORG $+2
$SG9705	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13810 DB	'`head'' ', 00H
$SG15861 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttpost.c', 00H
	ORG $+1
$SG9717	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13815 DB	'-->', 0aH, 00H
	ORG $+3
$SG10745 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14843 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG10747 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG9723	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13820 DB	'loaded', 00H
	ORG $+1
$SG9724	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14845 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG13821 DB	'missing', 00H
$SG13822 DB	'failed to load', 00H
	ORG $+1
$SG9726	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13823 DB	'%s', 0aH, 00H
$SG10754 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13828 DB	0aH, 00H
	ORG $+2
$SG15877 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttpost.c', 00H
	ORG $+1
$SG11783 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13832 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG11785 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG10763 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14860 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG10765 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14864 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG13840 DB	'`maxp'' ', 00H
$SG10768 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13845 DB	'-->', 0aH, 00H
	ORG $+3
$SG14870 DB	'tt_face_load_sbit_strikes: sbix overlay not supported ye'
	DB	't', 0aH, '                           expect bad rendering res'
	DB	'ults', 0aH, 00H
	ORG $+1
$SG10774 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG8729	DB	'tt_face_load_name: invalid `name'' table', 0aH, 00H
	ORG $+3
$SG13850 DB	'loaded', 00H
	ORG $+1
$SG8730	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttload.c', 00H
	ORG $+1
$SG13851 DB	'missing', 00H
$SG11803 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13852 DB	'failed to load', 00H
	ORG $+1
$SG13853 DB	'%s', 0aH, 00H
$SG14880 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG15906 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttpost.c', 00H
	ORG $+1
$SG13858 DB	0aH, 00H
	ORG $+2
$SG9762	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14886 DB	'sbit_num_strikes: %u', 0aH, 00H
	ORG $+2
$SG9767	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13866 DB	'`cmap'' ', 00H
$SG11819 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG11821 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13871 DB	'-->', 0aH, 00H
	ORG $+3
$SG13876 DB	'loaded', 00H
	ORG $+1
$SG13877 DB	'missing', 00H
$SG13878 DB	'failed to load', 00H
	ORG $+1
$SG13879 DB	'%s', 0aH, 00H
$SG9783	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13884 DB	0aH, 00H
	ORG $+2
$SG11839 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14912 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG13892 DB	'`name'' ', 00H
$SG13897 DB	'-->', 0aH, 00H
	ORG $+3
$SG13902 DB	'loaded', 00H
	ORG $+1
$SG15951 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttpost.c', 00H
	ORG $+1
$SG13903 DB	'missing', 00H
$SG13904 DB	'failed to load', 00H
	ORG $+1
$SG13905 DB	'%s', 0aH, 00H
$SG15954 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttpost.c', 00H
	ORG $+1
$SG11860 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG15957 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttpost.c', 00H
	ORG $+1
$SG13910 DB	0aH, 00H
	ORG $+2
$SG11862 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG11865 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG13918 DB	'`post'' ', 00H
$SG13923 DB	'-->', 0aH, 00H
	ORG $+3
$SG13928 DB	'loaded', 00H
	ORG $+1
$SG14953 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG13929 DB	'missing', 00H
$SG13930 DB	'failed to load', 00H
	ORG $+1
$SG13931 DB	'%s', 0aH, 00H
$SG13936 DB	0aH, 00H
	ORG $+2
$SG14961 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG13946 DB	'`%shhea'' ', 00H
	ORG $+2
$SG13951 DB	'-->', 0aH, 00H
	ORG $+3
$SG13956 DB	'loaded', 00H
	ORG $+1
$SG13957 DB	'missing', 00H
$SG13958 DB	'failed to load', 00H
	ORG $+1
$SG13959 DB	'%s', 0aH, 00H
$SG13964 DB	0aH, 00H
	ORG $+2
$SG16014 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttbdf.c', 00H
	ORG $+2
$SG13974 DB	'`%shmtx'' ', 00H
	ORG $+2
$SG13979 DB	'-->', 0aH, 00H
	ORG $+3
$SG13984 DB	'loaded', 00H
	ORG $+1
$SG13985 DB	'missing', 00H
$SG13986 DB	'failed to load', 00H
	ORG $+1
$SG13987 DB	'%s', 0aH, 00H
$SG15012 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG13992 DB	0aH, 00H
	ORG $+2
$SG13994 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG14008 DB	'This is an SFNT Mac font.', 0aH, 00H
	ORG $+1
$SG16058 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttbdf.c', 00H
	ORG $+2
$SG14010 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG10938 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG15035 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG14020 DB	'vertical ', 00H
	ORG $+2
$SG14021 DB	'`%shhea'' ', 00H
	ORG $+2
$SG15050 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG14026 DB	'-->', 0aH, 00H
	ORG $+3
$SG14031 DB	'loaded', 00H
	ORG $+1
$SG14032 DB	'missing', 00H
$SG14033 DB	'failed to load', 00H
	ORG $+1
$SG14034 DB	'%s', 0aH, 00H
$SG10962 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14039 DB	0aH, 00H
	ORG $+2
$SG15064 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG14048 DB	'vertical ', 00H
	ORG $+2
$SG10976 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14049 DB	'`%shmtx'' ', 00H
	ORG $+2
$SG14054 DB	'-->', 0aH, 00H
	ORG $+3
$SG14059 DB	'loaded', 00H
	ORG $+1
$SG14060 DB	'missing', 00H
$SG14061 DB	'failed to load', 00H
	ORG $+1
$SG14062 DB	'%s', 0aH, 00H
$SG14067 DB	0aH, 00H
	ORG $+2
$SG15092 DB	'tt_sbit_decoder_load_metrics: broken table', 0aH, 00H
$SG15093 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG14077 DB	'`os2'' ', 00H
	ORG $+1
$SG14082 DB	'-->', 0aH, 00H
	ORG $+3
$SG14087 DB	'loaded', 00H
	ORG $+1
$SG14088 DB	'missing', 00H
$SG14089 DB	'failed to load', 00H
	ORG $+1
$SG14090 DB	'%s', 0aH, 00H
$SG14095 DB	0aH, 00H
	ORG $+2
$SG14105 DB	'`eblc'' ', 00H
$SG14110 DB	'-->', 0aH, 00H
	ORG $+3
$SG14115 DB	'loaded', 00H
	ORG $+1
$SG14116 DB	'missing', 00H
$SG14117 DB	'failed to load', 00H
	ORG $+1
$SG15142 DB	'tt_sbit_decoder_load_byte_aligned: invalid bitmap dimens'
	DB	'ions', 0aH, 00H
	ORG $+2
$SG14118 DB	'%s', 0aH, 00H
$SG15143 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG14123 DB	0aH, 00H
	ORG $+2
$SG15150 DB	'tt_sbit_decoder_load_byte_aligned: broken bitmap', 0aH, 00H
	ORG $+2
$SG15151 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG14134 DB	'`pclt'' ', 00H
$SG14139 DB	'-->', 0aH, 00H
	ORG $+3
$SG14144 DB	'loaded', 00H
	ORG $+1
$SG14145 DB	'missing', 00H
$SG14146 DB	'failed to load', 00H
	ORG $+1
$SG14147 DB	'%s', 0aH, 00H
$SG14152 DB	0aH, 00H
	ORG $+2
$SG15186 DB	'tt_sbit_decoder_load_byte_aligned: loaded', 0aH, 00H
	ORG $+1
$SG14162 DB	'`gasp'' ', 00H
$SG14167 DB	'-->', 0aH, 00H
	ORG $+3
$SG14172 DB	'loaded', 00H
	ORG $+1
$SG10076 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14173 DB	'missing', 00H
$SG14174 DB	'failed to load', 00H
	ORG $+1
$SG14175 DB	'%s', 0aH, 00H
$SG14180 DB	0aH, 00H
	ORG $+2
$SG10085 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG10088 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14188 DB	'`kern'' ', 00H
$SG9069	DB	'sTypoAscender:  %4d', 0aH, 00H
	ORG $+3
$SG15217 DB	'tt_sbit_decoder_load_bit_aligned: invalid bitmap dimensi'
	DB	'ons', 0aH, 00H
	ORG $+3
$SG14193 DB	'-->', 0aH, 00H
	ORG $+3
$SG10097 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG15218 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG9074	DB	'sTypoDescender: %4d', 0aH, 00H
	ORG $+3
$SG10099 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14198 DB	'loaded', 00H
	ORG $+1
$SG11126 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG14199 DB	'missing', 00H
$SG9079	DB	'usWinAscent:    %4u', 0aH, 00H
	ORG $+3
$SG14200 DB	'failed to load', 00H
	ORG $+1
$SG15225 DB	'tt_sbit_decoder_load_bit_aligned: broken bitmap', 0aH, 00H
	ORG $+3
$SG14201 DB	'%s', 0aH, 00H
$SG15226 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG9084	DB	'usWinDescent:   %4u', 0aH, 00H
	ORG $+3
$SG14206 DB	0aH, 00H
	ORG $+2
$SG13185 DB	'd:\mozilla\modules\freetype2\src\sfnt\sfobjs.c', 00H
	ORG $+1
$SG9089	DB	'fsSelection:    0x%2x', 0aH, 00H
	ORG $+1
$SG13186 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10123 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG11150 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG10126 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG15250 DB	'tt_sbit_decoder_load_bit_aligned: loaded', 0aH, 00H
	ORG $+2
$SG10134 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG8112	DB	'tt_face_lookup_table: %08p, `%c%c%c%c'' -- ', 00H
	ORG $+1
$SG11190 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG11192 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG8122	DB	'found table.', 0aH, 00H
	ORG $+2
$SG15291 DB	'tt_sbit_decoder_load_compound: broken table', 0aH, 00H
	ORG $+3
$SG10174 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG11199 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG15296 DB	'tt_sbit_decoder_load_compound: loading %d components', 0aH
	DB	00H
	ORG $+2
$SG8128	DB	'ignoring empty table', 0aH, 00H
	ORG $+2
$SG10177 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG9155	DB	'FormatType:   0x%x', 0aH, 00H
$SG8134	DB	'could not find table', 0aH, 00H
	ORG $+2
$SG9160	DB	'  yes', 00H
	ORG $+2
$SG9161	DB	'   no', 00H
	ORG $+2
$SG10186 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG9162	DB	'isFixedPitch:   %s', 0aH, 00H
$SG10193 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG15316 DB	'tt_sbit_decoder_load_compound: done', 0aH, 00H
	ORG $+3
$SG15320 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG8153	DB	'd:\mozilla\modules\freetype2\src\sfnt\ttload.c', 00H
	ORG $+1
$SG10210 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG10216 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttcmap.c', 00H
	ORG $+1
$SG15341 DB	'd:\mozilla\modules\freetype2\src\sfnt\ttsbit.c', 00H
	ORG $+1
$SG14334 DB	'sfnt_load_face: done', 0aH, 00H
_DATA	ENDS
CONST	SEGMENT
?woff_header_fields@?1??woff_open_font@@9@9 DB 04H	; `woff_open_font'::`2'::woff_header_fields
	DB	00H
	DW	02cH
	DB	010H
	DB	04H
	DW	00H
	DB	010H
	DB	04H
	DW	04H
	DB	010H
	DB	04H
	DW	08H
	DB	0cH
	DB	02H
	DW	0cH
	DB	0cH
	DB	02H
	DW	0eH
	DB	010H
	DB	04H
	DW	010H
	DB	0cH
	DB	02H
	DW	014H
	DB	0cH
	DB	02H
	DW	016H
	DB	010H
	DB	04H
	DW	018H
	DB	010H
	DB	04H
	DW	01cH
	DB	010H
	DB	04H
	DW	020H
	DB	010H
	DB	04H
	DW	024H
	DB	010H
	DB	04H
	DW	028H
	DB	00H
	DB	00H
	DW	00H
_sfnt_module_class DD 00H
	DD	0cH
	DD	FLAT:$SG14729
	DD	010000H
	DD	020000H
	DD	FLAT:_sfnt_interface
	DD	00H
	DD	00H
	DD	FLAT:_sfnt_get_interface
?offset_table_fields@?1??tt_face_load_font_dir@@9@9 DB 04H ; `tt_face_load_font_dir'::`2'::offset_table_fields
	DB	00H
	DW	08H
	DB	0cH
	DB	02H
	DW	04H
	DB	0cH
	DB	02H
	DW	06H
	DB	0cH
	DB	02H
	DW	08H
	DB	0cH
	DB	02H
	DW	0aH
	DB	00H
	DB	00H
	DW	00H
_tt_cmap12_class_rec DD 02cH
	DD	FLAT:_tt_cmap12_init
	DD	00H
	DD	FLAT:_tt_cmap12_char_index
	DD	FLAT:_tt_cmap12_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0cH
	DD	FLAT:_tt_cmap12_validate
	DD	FLAT:_tt_cmap12_get_info
_tt_cmap14_class_rec DD 028H
	DD	FLAT:_tt_cmap14_init
	DD	FLAT:_tt_cmap14_done
	DD	FLAT:_tt_cmap14_char_index
	DD	FLAT:_tt_cmap14_char_next
	DD	FLAT:_tt_cmap14_char_var_index
	DD	FLAT:_tt_cmap14_char_var_isdefault
	DD	FLAT:_tt_cmap14_variants
	DD	FLAT:_tt_cmap14_char_variants
	DD	FLAT:_tt_cmap14_variant_chars
	DD	0eH
	DD	FLAT:_tt_cmap14_validate
	DD	FLAT:_tt_cmap14_get_info
_tt_cmap_classes DD FLAT:_tt_cmap0_class_rec
	DD	FLAT:_tt_cmap2_class_rec
	DD	FLAT:_tt_cmap4_class_rec
	DD	FLAT:_tt_cmap6_class_rec
	DD	FLAT:_tt_cmap8_class_rec
	DD	FLAT:_tt_cmap10_class_rec
	DD	FLAT:_tt_cmap12_class_rec
	DD	FLAT:_tt_cmap13_class_rec
	DD	FLAT:_tt_cmap14_class_rec
	DD	00H
?metrics_header_fields@?1??tt_face_load_hhea@@9@9 DB 04H ; `tt_face_load_hhea'::`2'::metrics_header_fields
	DB	00H
	DW	024H
	DB	010H
	DB	04H
	DW	00H
	DB	0dH
	DB	02H
	DW	04H
	DB	0dH
	DB	02H
	DW	06H
	DB	0dH
	DB	02H
	DW	08H
	DB	0cH
	DB	02H
	DW	0aH
	DB	0dH
	DB	02H
	DW	0cH
	DB	0dH
	DB	02H
	DW	0eH
	DB	0dH
	DB	02H
	DW	010H
	DB	0dH
	DB	02H
	DW	012H
	DB	0dH
	DB	02H
	DW	014H
	DB	0dH
	DB	02H
	DW	016H
	DB	0dH
	DB	02H
	DW	018H
	DB	0dH
	DB	02H
	DW	01aH
	DB	0dH
	DB	02H
	DW	01cH
	DB	0dH
	DB	02H
	DW	01eH
	DB	0dH
	DB	02H
	DW	020H
	DB	0cH
	DB	02H
	DW	022H
	DB	00H
	DB	00H
	DW	00H
_sfnt_service_sfnt_table DD FLAT:_tt_face_load_any
	DD	FLAT:_get_sfnt_table
	DD	FLAT:_sfnt_table_info
?header_fields@?1??tt_face_load_generic_header@@9@9 DB 04H ; `tt_face_load_generic_header'::`2'::header_fields
	DB	00H
	DW	036H
	DB	010H
	DB	04H
	DW	00H
	DB	010H
	DB	04H
	DW	04H
	DB	011H
	DB	04H
	DW	08H
	DB	011H
	DB	04H
	DW	0cH
	DB	0cH
	DB	02H
	DW	010H
	DB	0cH
	DB	02H
	DW	012H
	DB	011H
	DB	04H
	DW	014H
	DB	011H
	DB	04H
	DW	018H
	DB	011H
	DB	04H
	DW	01cH
	DB	011H
	DB	04H
	DW	020H
	DB	0dH
	DB	02H
	DW	024H
	DB	0dH
	DB	02H
	DW	026H
	DB	0dH
	DB	02H
	DW	028H
	DB	0dH
	DB	02H
	DW	02aH
	DB	0cH
	DB	02H
	DW	02cH
	DB	0cH
	DB	02H
	DW	02eH
	DB	0dH
	DB	02H
	DW	030H
	DB	0dH
	DB	02H
	DW	032H
	DB	0dH
	DB	02H
	DW	034H
	DB	00H
	DB	00H
	DW	00H
?ttc_header_fields@?1??sfnt_open_font@@9@9 DB 04H	; `sfnt_open_font'::`2'::ttc_header_fields
	DB	00H
	DW	08H
	DB	011H
	DB	04H
	DW	04H
	DB	011H
	DB	04H
	DW	08H
	DB	00H
	DB	00H
	DW	00H
_tt_cmap4_class_rec DD 038H
	DD	FLAT:_tt_cmap4_init
	DD	00H
	DD	FLAT:_tt_cmap4_char_index
	DD	FLAT:_tt_cmap4_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	04H
	DD	FLAT:_tt_cmap4_validate
	DD	FLAT:_tt_cmap4_get_info
_sfnt_service_glyph_dict DD FLAT:_sfnt_get_glyph_name
	DD	FLAT:_sfnt_get_name_index
_sfnt_service_ps_name DD FLAT:_sfnt_get_ps_name
_tt_service_get_cmap_info DD FLAT:_tt_get_cmap_info
?maxp_fields@?1??tt_face_load_maxp@@9@9 DB 04H		; `tt_face_load_maxp'::`2'::maxp_fields
	DB	00H
	DW	06H
	DB	011H
	DB	04H
	DW	00H
	DB	0cH
	DB	02H
	DW	04H
	DB	00H
	DB	00H
	DW	00H
_sfnt_service_bdf DD FLAT:_sfnt_get_charset_id
	DD	FLAT:_tt_face_find_bdf_prop
?maxp_fields_extra@?1??tt_face_load_maxp@@9@9 DB 04H	; `tt_face_load_maxp'::`2'::maxp_fields_extra
	DB	00H
	DW	01aH
	DB	0cH
	DB	02H
	DW	06H
	DB	0cH
	DB	02H
	DW	08H
	DB	0cH
	DB	02H
	DW	0aH
	DB	0cH
	DB	02H
	DW	0cH
	DB	0cH
	DB	02H
	DW	0eH
	DB	0cH
	DB	02H
	DW	010H
	DB	0cH
	DB	02H
	DW	012H
	DB	0cH
	DB	02H
	DW	014H
	DB	0cH
	DB	02H
	DW	016H
	DB	0cH
	DB	02H
	DW	018H
	DB	0cH
	DB	02H
	DW	01aH
	DB	0cH
	DB	02H
	DW	01cH
	DB	0cH
	DB	02H
	DW	01eH
	DB	00H
	DB	00H
	DW	00H
_sfnt_services DD FLAT:$SG14712
	DD	FLAT:_sfnt_service_sfnt_table
	DD	FLAT:$SG14713
	DD	FLAT:_sfnt_service_ps_name
	DD	FLAT:$SG14714
	DD	FLAT:_sfnt_service_glyph_dict
	DD	FLAT:$SG14715
	DD	FLAT:_sfnt_service_bdf
	DD	FLAT:$SG14716
	DD	FLAT:_tt_service_get_cmap_info
	DD	00H
	DD	00H
_tt_cmap13_class_rec DD 02cH
	DD	FLAT:_tt_cmap13_init
	DD	00H
	DD	FLAT:_tt_cmap13_char_index
	DD	FLAT:_tt_cmap13_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0dH
	DD	FLAT:_tt_cmap13_validate
	DD	FLAT:_tt_cmap13_get_info
_sfnt_interface DD FLAT:_tt_face_goto_table
	DD	FLAT:_sfnt_init_face
	DD	FLAT:_sfnt_load_face
	DD	FLAT:_sfnt_done_face
	DD	FLAT:_sfnt_get_interface
	DD	FLAT:_tt_face_load_any
	DD	FLAT:_tt_face_load_head
	DD	FLAT:_tt_face_load_hhea
	DD	FLAT:_tt_face_load_cmap
	DD	FLAT:_tt_face_load_maxp
	DD	FLAT:_tt_face_load_os2
	DD	FLAT:_tt_face_load_post
	DD	FLAT:_tt_face_load_name
	DD	FLAT:_tt_face_free_name
	DD	FLAT:_tt_face_load_kern
	DD	FLAT:_tt_face_load_gasp
	DD	FLAT:_tt_face_load_pclt
	DD	FLAT:_tt_face_load_bhed
	DD	FLAT:_tt_face_load_sbit_image
	DD	FLAT:_tt_face_get_ps_name
	DD	FLAT:_tt_face_free_ps_names
	DD	FLAT:_tt_face_get_kerning
	DD	FLAT:_tt_face_load_font_dir
	DD	FLAT:_tt_face_load_hmtx
	DD	FLAT:_tt_face_load_sbit
	DD	FLAT:_tt_face_free_sbit
	DD	FLAT:_tt_face_set_sbit_strike
	DD	FLAT:_tt_face_load_strike_metrics
	DD	FLAT:_tt_face_get_metrics
_tt_cmap6_class_rec DD 018H
	DD	FLAT:_tt_cmap_init
	DD	00H
	DD	FLAT:_tt_cmap6_char_index
	DD	FLAT:_tt_cmap6_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	06H
	DD	FLAT:_tt_cmap6_validate
	DD	FLAT:_tt_cmap6_get_info
_tt_cmap0_class_rec DD 018H
	DD	FLAT:_tt_cmap_init
	DD	00H
	DD	FLAT:_tt_cmap0_char_index
	DD	FLAT:_tt_cmap0_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_tt_cmap0_validate
	DD	FLAT:_tt_cmap0_get_info
?name_table_fields@?1??tt_face_load_name@@9@9 DB 04H	; `tt_face_load_name'::`2'::name_table_fields
	DB	00H
	DW	06H
	DB	0cH
	DB	02H
	DW	00H
	DB	0cH
	DB	04H
	DW	04H
	DB	0cH
	DB	04H
	DW	08H
	DB	00H
	DB	00H
	DW	00H
?name_record_fields@?1??tt_face_load_name@@9@9 DB 0cH	; `tt_face_load_name'::`2'::name_record_fields
	DB	02H
	DW	00H
	DB	0cH
	DB	02H
	DW	02H
	DB	0cH
	DB	02H
	DW	04H
	DB	0cH
	DB	02H
	DW	06H
	DB	0cH
	DB	02H
	DW	08H
	DB	0cH
	DB	04H
	DW	0cH
	DB	00H
	DB	00H
	DW	00H
_tt_cmap8_class_rec DD 018H
	DD	FLAT:_tt_cmap_init
	DD	00H
	DD	FLAT:_tt_cmap8_char_index
	DD	FLAT:_tt_cmap8_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	08H
	DD	FLAT:_tt_cmap8_validate
	DD	FLAT:_tt_cmap8_get_info
?os2_fields@?1??tt_face_load_os2@@9@9 DB 04H		; `tt_face_load_os2'::`2'::os2_fields
	DB	00H
	DW	04eH
	DB	0cH
	DB	02H
	DW	00H
	DB	0dH
	DB	02H
	DW	02H
	DB	0cH
	DB	02H
	DW	04H
	DB	0cH
	DB	02H
	DW	06H
	DB	0dH
	DB	02H
	DW	08H
	DB	0dH
	DB	02H
	DW	0aH
	DB	0dH
	DB	02H
	DW	0cH
	DB	0dH
	DB	02H
	DW	0eH
	DB	0dH
	DB	02H
	DW	010H
	DB	0dH
	DB	02H
	DW	012H
	DB	0dH
	DB	02H
	DW	014H
	DB	0dH
	DB	02H
	DW	016H
	DB	0dH
	DB	02H
	DW	018H
	DB	0dH
	DB	02H
	DW	01aH
	DB	0dH
	DB	02H
	DW	01cH
	DB	0dH
	DB	02H
	DW	01eH
	DB	08H
	DB	01H
	DW	020H
	DB	08H
	DB	01H
	DW	021H
	DB	08H
	DB	01H
	DW	022H
	DB	08H
	DB	01H
	DW	023H
	DB	08H
	DB	01H
	DW	024H
	DB	08H
	DB	01H
	DW	025H
	DB	08H
	DB	01H
	DW	026H
	DB	08H
	DB	01H
	DW	027H
	DB	08H
	DB	01H
	DW	028H
	DB	08H
	DB	01H
	DW	029H
	DB	010H
	DB	04H
	DW	02cH
	DB	010H
	DB	04H
	DW	030H
	DB	010H
	DB	04H
	DW	034H
	DB	010H
	DB	04H
	DW	038H
	DB	08H
	DB	01H
	DW	03cH
	DB	08H
	DB	01H
	DW	03dH
	DB	08H
	DB	01H
	DW	03eH
	DB	08H
	DB	01H
	DW	03fH
	DB	0cH
	DB	02H
	DW	040H
	DB	0cH
	DB	02H
	DW	042H
	DB	0cH
	DB	02H
	DW	044H
	DB	0dH
	DB	02H
	DW	046H
	DB	0dH
	DB	02H
	DW	048H
	DB	0dH
	DB	02H
	DW	04aH
	DB	0cH
	DB	02H
	DW	04cH
	DB	0cH
	DB	02H
	DW	04eH
	DB	00H
	DB	00H
	DW	00H
_tt_cmap2_class_rec DD 018H
	DD	FLAT:_tt_cmap_init
	DD	00H
	DD	FLAT:_tt_cmap2_char_index
	DD	FLAT:_tt_cmap2_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:_tt_cmap2_validate
	DD	FLAT:_tt_cmap2_get_info
?os2_fields_extra1@?1??tt_face_load_os2@@9@9 DB 04H	; `tt_face_load_os2'::`2'::os2_fields_extra1
	DB	00H
	DW	08H
	DB	010H
	DB	04H
	DW	050H
	DB	010H
	DB	04H
	DW	054H
	DB	00H
	DB	00H
	DW	00H
?os2_fields_extra2@?1??tt_face_load_os2@@9@9 DB 04H	; `tt_face_load_os2'::`2'::os2_fields_extra2
	DB	00H
	DW	0aH
	DB	0dH
	DB	02H
	DW	058H
	DB	0dH
	DB	02H
	DW	05aH
	DB	0cH
	DB	02H
	DW	05cH
	DB	0cH
	DB	02H
	DW	05eH
	DB	0cH
	DB	02H
	DW	060H
	DB	00H
	DB	00H
	DW	00H
_tt_cmap10_class_rec DD 018H
	DD	FLAT:_tt_cmap_init
	DD	00H
	DD	FLAT:_tt_cmap10_char_index
	DD	FLAT:_tt_cmap10_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0aH
	DD	FLAT:_tt_cmap10_validate
	DD	FLAT:_tt_cmap10_get_info
?os2_fields_extra5@?1??tt_face_load_os2@@9@9 DB 04H	; `tt_face_load_os2'::`2'::os2_fields_extra5
	DB	00H
	DW	04H
	DB	0cH
	DB	02H
	DW	062H
	DB	0cH
	DB	02H
	DW	064H
	DB	00H
	DB	00H
	DW	00H
?post_fields@?1??tt_face_load_post@@9@9 DB 04H		; `tt_face_load_post'::`2'::post_fields
	DB	00H
	DW	020H
	DB	010H
	DB	04H
	DW	00H
	DB	010H
	DB	04H
	DW	04H
	DB	0dH
	DB	02H
	DW	08H
	DB	0dH
	DB	02H
	DW	0aH
	DB	010H
	DB	04H
	DW	0cH
	DB	010H
	DB	04H
	DW	010H
	DB	010H
	DB	04H
	DW	014H
	DB	010H
	DB	04H
	DW	018H
	DB	010H
	DB	04H
	DW	01cH
	DB	00H
	DB	00H
	DW	00H
?tt_encodings@?1??sfnt_find_encoding@@9@9 DD 02H	; `sfnt_find_encoding'::`2'::tt_encodings
	DD	0ffffffffH
	DD	0756e6963H
	DD	00H
	DD	0ffffffffH
	DD	0756e6963H
	DD	01H
	DD	00H
	DD	061726d6eH
	DD	03H
	DD	00H
	DD	073796d62H
	DD	03H
	DD	0aH
	DD	0756e6963H
	DD	03H
	DD	01H
	DD	0756e6963H
	DD	03H
	DD	02H
	DD	0736a6973H
	DD	03H
	DD	03H
	DD	067622020H
	DD	03H
	DD	04H
	DD	062696735H
	DD	03H
	DD	05H
	DD	077616e73H
	DD	03H
	DD	06H
	DD	06a6f6861H
	ORG $+4
?pclt_fields@?1??tt_face_load_pclt@@9@9 DB 04H		; `tt_face_load_pclt'::`2'::pclt_fields
	DB	00H
	DW	036H
	DB	010H
	DB	04H
	DW	00H
	DB	010H
	DB	04H
	DW	04H
	DB	0cH
	DB	02H
	DW	08H
	DB	0cH
	DB	02H
	DW	0aH
	DB	0cH
	DB	02H
	DW	0cH
	DB	0cH
	DB	02H
	DW	0eH
	DB	0cH
	DB	02H
	DW	010H
	DB	0cH
	DB	02H
	DW	012H
	DB	018H
	DB	010H
	DW	014H
	DB	018H
	DB	08H
	DW	024H
	DB	018H
	DB	06H
	DW	02cH
	DB	09H
	DB	01H
	DW	032H
	DB	09H
	DB	01H
	DW	033H
	DB	08H
	DB	01H
	DW	034H
	DB	08H
	DB	01H
	DW	035H
	DB	00H
	DB	00H
	DW	00H
?table_dir_entry_fields@?1??check_table_dir@@9@9 DB 04H	; `check_table_dir'::`2'::table_dir_entry_fields
	DB	00H
	DW	010H
	DB	010H
	DB	04H
	DW	00H
	DB	010H
	DB	04H
	DW	04H
	DB	010H
	DB	04H
	DW	08H
	DB	010H
	DB	04H
	DW	0cH
	DB	00H
	DB	00H
	DW	00H
CONST	ENDS
EXTRN	__imp__memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp__qsort:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_ft_mem_strcpyn:PROC
EXTRN	_ft_service_list_lookup:PROC
EXTRN	_FT_CMap_New:PROC
EXTRN	_FT_Get_Module_Interface:PROC
EXTRN	_ft_module_get_service:PROC
EXTRN	_FT_Match_Size:PROC
EXTRN	_ft_glyphslot_alloc_bitmap:PROC
EXTRN	_ft_glyphslot_set_bitmap:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Panic:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_FT_Stream_Free:PROC
EXTRN	_FT_Stream_OpenMemory:PROC
EXTRN	_FT_Stream_Close:PROC
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Skip:PROC
EXTRN	_FT_Stream_Pos:PROC
EXTRN	_FT_Stream_Read:PROC
EXTRN	_FT_Stream_ReadAt:PROC
EXTRN	_FT_Stream_EnterFrame:PROC
EXTRN	_FT_Stream_ExitFrame:PROC
EXTRN	_FT_Stream_ExtractFrame:PROC
EXTRN	_FT_Stream_ReleaseFrame:PROC
EXTRN	_FT_Stream_GetUShort:PROC
EXTRN	_FT_Stream_GetULong:PROC
EXTRN	_FT_Stream_ReadChar:PROC
EXTRN	_FT_Stream_ReadUShort:PROC
EXTRN	_FT_Stream_ReadULong:PROC
EXTRN	_FT_Stream_ReadFields:PROC
EXTRN	_ft_validator_init:PROC
EXTRN	_ft_validator_error:PROC
EXTRN	_FT_Gzip_Uncompress:PROC
EXTRN	_FT_Bitmap_New:PROC
EXTRN	_FT_Bitmap_Convert:PROC
EXTRN	_FT_Bitmap_Done:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__setjmp3:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num_items$1 = -48					; size = 4
_strike$2 = -44						; size = 4
_count$3 = -40						; size = 4
_strings$4 = -36					; size = 4
_num_strikes$5 = -32					; size = 4
_version$6 = -28					; size = 4
_p$7 = -24						; size = 4
_error$ = -20						; size = 4
_length$ = -12						; size = 4
_bdf$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_bdf_props PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttbdf.c
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 65
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 760				; 000002f8H
	mov	DWORD PTR _bdf$[ebp], eax
; Line 70
	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _bdf$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 72
	lea	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	1111770656				; 42444620H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_goto_table
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 75
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN7@tt_face_lo
	cmp	DWORD PTR _length$[ebp], 8
	jb	SHORT $LN7@tt_face_lo
	mov	edx, DWORD PTR _bdf$[ebp]
	push	edx
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@tt_face_lo
$LN7@tt_face_lo:
; Line 77
	push	OFFSET $SG16014
	push	77					; 0000004dH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 78
	jmp	$Exit$14
$LN8@tt_face_lo:
; Line 81
	mov	edx, DWORD PTR _bdf$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _bdf$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 84
	mov	edx, DWORD PTR _bdf$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _p$7[ebp], eax
; Line 85
	mov	ecx, DWORD PTR _p$7[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$7[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$7[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$7[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _version$6[ebp], ecx
; Line 86
	mov	edx, DWORD PTR _p$7[ebp]
	add	edx, 2
	mov	DWORD PTR _p$7[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$7[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$7[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _num_strikes$5[ebp], edx
; Line 87
	mov	eax, DWORD PTR _p$7[ebp]
	add	eax, 4
	mov	DWORD PTR _p$7[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$7[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$7[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$7[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$7[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _strings$4[ebp], ecx
; Line 95
	cmp	DWORD PTR _version$6[ebp], 1
	jne	SHORT $LN5@tt_face_lo
	cmp	DWORD PTR _strings$4[ebp], 8
	jb	SHORT $LN5@tt_face_lo
	mov	ecx, DWORD PTR _strings$4[ebp]
	sub	ecx, 8
	shr	ecx, 2
	cmp	ecx, DWORD PTR _num_strikes$5[ebp]
	jb	SHORT $LN5@tt_face_lo
	mov	edx, DWORD PTR _strings$4[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _length$[ebp]
	jbe	SHORT $LN6@tt_face_lo
$LN5@tt_face_lo:
; Line 97
	jmp	$BadTable$15
$LN6@tt_face_lo:
; Line 100
	mov	eax, DWORD PTR _bdf$[ebp]
	mov	ecx, DWORD PTR _num_strikes$5[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 101
	mov	edx, DWORD PTR _bdf$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _strings$4[ebp]
	mov	ecx, DWORD PTR _bdf$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 102
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, DWORD PTR _strings$4[ebp]
	mov	eax, DWORD PTR _bdf$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 104
	mov	ecx, DWORD PTR _bdf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _count$3[ebp], edx
; Line 105
	mov	eax, DWORD PTR _bdf$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	DWORD PTR _p$7[ebp], ecx
; Line 106
	mov	edx, DWORD PTR _count$3[ebp]
	mov	eax, DWORD PTR _p$7[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _strike$2[ebp], ecx
; Line 109
	jmp	SHORT $LN4@tt_face_lo
$LN3@tt_face_lo:
	mov	edx, DWORD PTR _count$3[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$3[ebp], edx
$LN4@tt_face_lo:
	cmp	DWORD PTR _count$3[ebp], 0
	jbe	SHORT $LN2@tt_face_lo
; Line 111
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$7[ebp]
	movzx	eax, BYTE PTR [edx+ecx+2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$7[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _num_items$1[ebp], edx
; Line 117
	imul	eax, DWORD PTR _num_items$1[ebp], 10
	add	eax, DWORD PTR _strike$2[ebp]
	mov	DWORD PTR _strike$2[ebp], eax
; Line 119
	mov	ecx, DWORD PTR _p$7[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$7[ebp], ecx
; Line 120
	jmp	SHORT $LN3@tt_face_lo
$LN2@tt_face_lo:
; Line 122
	mov	edx, DWORD PTR _bdf$[ebp]
	mov	eax, DWORD PTR _strike$2[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jbe	SHORT $LN1@tt_face_lo
; Line 123
	jmp	SHORT $BadTable$15
$LN1@tt_face_lo:
; Line 126
	mov	ecx, DWORD PTR _bdf$[ebp]
	mov	BYTE PTR [ecx+20], 1
$Exit$14:
; Line 129
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN9@tt_face_lo
$BadTable$15:
; Line 132
	mov	edx, DWORD PTR _bdf$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 133
	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _bdf$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 134
	push	OFFSET $SG16058
	push	134					; 00000086H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 135
	jmp	SHORT $Exit$14
$LN9@tt_face_lo:
; Line 136
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@tt_face_lo:
	DD	1
	DD	$LN12@tt_face_lo
$LN12@tt_face_lo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN11@tt_face_lo
$LN11@tt_face_lo:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_tt_face_load_bdf_props ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_post_limit$ = -28					; size = 4
_post_len$ = -20					; size = 4
_format$ = -12						; size = 4
_error$ = -8						; size = 4
_stream$ = -4						; size = 4
_face$ = 8						; size = 4
_load_post_names PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttpost.c
; Line 375
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 384
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 387
	mov	esi, esp
	lea	edx, DWORD PTR _post_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	1886352244				; 706f7374H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 388
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@load_post_
; Line 389
	jmp	$Exit$12
$LN6@load_post_:
; Line 391
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Pos
	add	esp, 4
	add	eax, DWORD PTR _post_len$[ebp]
	mov	DWORD PTR _post_limit$[ebp], eax
; Line 393
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+468]
	mov	DWORD PTR _format$[ebp], eax
; Line 396
	push	32					; 00000020H
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@load_post_
; Line 397
	jmp	SHORT $Exit$12
$LN5@load_post_:
; Line 400
	cmp	DWORD PTR _format$[ebp], 131072		; 00020000H
	jne	SHORT $LN4@load_post_
; Line 401
	mov	edx, DWORD PTR _post_limit$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_load_format_20
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	jmp	SHORT $LN3@load_post_
$LN4@load_post_:
; Line 402
	cmp	DWORD PTR _format$[ebp], 163840		; 00028000H
	jne	SHORT $LN2@load_post_
; Line 403
	mov	edx, DWORD PTR _post_limit$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_load_format_25
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 404
	jmp	SHORT $LN3@load_post_
$LN2@load_post_:
; Line 405
	push	OFFSET $SG15906
	push	405					; 00000195H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$LN3@load_post_:
; Line 407
	mov	edx, DWORD PTR _face$[ebp]
	mov	BYTE PTR [edx+612], 1
$Exit$12:
; Line 410
	mov	eax, DWORD PTR _error$[ebp]
; Line 411
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@load_post_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@load_post_:
	DD	1
	DD	$LN10@load_post_
$LN10@load_post_:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@load_post_
$LN9@load_post_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_load_post_names ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_table$1 = -36						; size = 4
_idx$2 = -32						; size = 4
_n$3 = -28						; size = 4
_offset_table$ = -24					; size = 4
_num_glyphs$ = -20					; size = 4
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_post_limit$ = 16					; size = 4
_load_format_25 PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttpost.c
; Line 311
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 312
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 316
	mov	DWORD PTR _offset_table$[ebp], 0
; Line 318
	mov	edx, DWORD PTR _post_limit$[ebp]
	mov	DWORD PTR _post_limit$[ebp], edx
; Line 322
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	edx, ax
	mov	DWORD PTR _num_glyphs$[ebp], edx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@load_forma
; Line 323
	jmp	$Exit$19
$LN13@load_forma:
; Line 326
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+264]
	cmp	DWORD PTR _num_glyphs$[ebp], ecx
	jg	SHORT $LN11@load_forma
	cmp	DWORD PTR _num_glyphs$[ebp], 258	; 00000102H
	jle	SHORT $LN12@load_forma
$LN11@load_forma:
; Line 328
	push	OFFSET $SG15861
	push	328					; 00000148H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 329
	jmp	$Exit$19
$LN12@load_forma:
; Line 333
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _num_glyphs$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _offset_table$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN9@load_forma
	mov	edx, DWORD PTR _num_glyphs$[ebp]
	push	edx
	mov	eax, DWORD PTR _offset_table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@load_forma
$LN9@load_forma:
; Line 334
	jmp	SHORT $Fail$20
$LN10@load_forma:
; Line 341
	mov	DWORD PTR _n$3[ebp], 0
	jmp	SHORT $LN8@load_forma
$LN7@load_forma:
	mov	edx, DWORD PTR _n$3[ebp]
	add	edx, 1
	mov	DWORD PTR _n$3[ebp], edx
$LN8@load_forma:
	mov	eax, DWORD PTR _n$3[ebp]
	cmp	eax, DWORD PTR _num_glyphs$[ebp]
	jge	SHORT $LN6@load_forma
; Line 343
	mov	ecx, DWORD PTR _offset_table$[ebp]
	add	ecx, DWORD PTR _n$3[ebp]
	movsx	edx, BYTE PTR [ecx]
	add	edx, DWORD PTR _n$3[ebp]
	mov	DWORD PTR _idx$2[ebp], edx
; Line 346
	js	SHORT $LN4@load_forma
	mov	eax, DWORD PTR _idx$2[ebp]
	cmp	eax, DWORD PTR _num_glyphs$[ebp]
	jle	SHORT $LN5@load_forma
$LN4@load_forma:
; Line 348
	push	OFFSET $SG15877
	push	348					; 0000015cH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 349
	jmp	SHORT $Fail$20
$LN5@load_forma:
; Line 351
	jmp	SHORT $LN7@load_forma
$LN6@load_forma:
; Line 356
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 616				; 00000268H
	mov	DWORD PTR _table$1[ebp], ecx
; Line 359
	mov	edx, DWORD PTR _table$1[ebp]
	mov	ax, WORD PTR _num_glyphs$[ebp]
	mov	WORD PTR [edx], ax
; Line 360
	mov	ecx, DWORD PTR _table$1[ebp]
	mov	edx, DWORD PTR _offset_table$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 363
	xor	eax, eax
	jmp	SHORT $LN14@load_forma
$Fail$20:
; Line 366
	mov	eax, DWORD PTR _offset_table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _offset_table$[ebp], 0
	xor	edx, edx
	jne	SHORT $Fail$20
$Exit$19:
; Line 369
	mov	eax, DWORD PTR _error$[ebp]
$LN14@load_forma:
; Line 370
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@load_forma
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@load_forma:
	DD	1
	DD	$LN17@load_forma
$LN17@load_forma:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@load_forma
$LN16@load_forma:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_load_format_25 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv187 = -64						; size = 4
_n$1 = -60						; size = 2
_table$2 = -56						; size = 4
_len$3 = -52						; size = 4
_n$4 = -48						; size = 2
_idx$5 = -44						; size = 4
_n$6 = -40						; size = 4
_n$7 = -36						; size = 4
_name_strings$ = -32					; size = 4
_glyph_indices$ = -28					; size = 4
_num_names$ = -24					; size = 2
_num_glyphs$ = -20					; size = 4
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_post_limit$ = 16					; size = 4
_load_format_20 PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttpost.c
; Line 159
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 160
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 166
	mov	DWORD PTR _glyph_indices$[ebp], 0
; Line 167
	mov	DWORD PTR _name_strings$[ebp], 0
; Line 170
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	ecx, ax
	mov	DWORD PTR _num_glyphs$[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN45@load_forma
; Line 171
	jmp	$Exit$53
$LN45@load_forma:
; Line 179
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+264]
	cmp	DWORD PTR _num_glyphs$[ebp], eax
	jle	SHORT $LN44@load_forma
; Line 181
	push	OFFSET $SG15767
	push	181					; 000000b5H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 182
	jmp	$Exit$53
$LN44@load_forma:
; Line 191
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _num_glyphs$[ebp]
	push	edx
	push	0
	push	2
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _glyph_indices$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN42@load_forma
	mov	ecx, DWORD PTR _num_glyphs$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN43@load_forma
$LN42@load_forma:
; Line 192
	jmp	$Fail$54
$LN43@load_forma:
; Line 194
	mov	DWORD PTR _n$7[ebp], 0
	jmp	SHORT $LN41@load_forma
$LN40@load_forma:
	mov	eax, DWORD PTR _n$7[ebp]
	add	eax, 1
	mov	DWORD PTR _n$7[ebp], eax
$LN41@load_forma:
	mov	ecx, DWORD PTR _n$7[ebp]
	cmp	ecx, DWORD PTR _num_glyphs$[ebp]
	jge	SHORT $LN39@load_forma
; Line 195
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	ecx, DWORD PTR _n$7[ebp]
	mov	edx, DWORD PTR _glyph_indices$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN40@load_forma
$LN39@load_forma:
; Line 197
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 205
	xor	ecx, ecx
	mov	WORD PTR _num_names$[ebp], cx
; Line 207
	mov	DWORD PTR _n$6[ebp], 0
	jmp	SHORT $LN38@load_forma
$LN37@load_forma:
	mov	edx, DWORD PTR _n$6[ebp]
	add	edx, 1
	mov	DWORD PTR _n$6[ebp], edx
$LN38@load_forma:
	mov	eax, DWORD PTR _n$6[ebp]
	cmp	eax, DWORD PTR _num_glyphs$[ebp]
	jge	SHORT $LN36@load_forma
; Line 212
	mov	ecx, DWORD PTR _n$6[ebp]
	mov	edx, DWORD PTR _glyph_indices$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	DWORD PTR _idx$5[ebp], eax
; Line 213
	cmp	DWORD PTR _idx$5[ebp], 258		; 00000102H
	jl	SHORT $LN35@load_forma
; Line 215
	mov	ecx, DWORD PTR _idx$5[ebp]
	sub	ecx, 257				; 00000101H
	mov	DWORD PTR _idx$5[ebp], ecx
; Line 216
	movzx	edx, WORD PTR _num_names$[ebp]
	cmp	DWORD PTR _idx$5[ebp], edx
	jle	SHORT $LN35@load_forma
; Line 217
	mov	ax, WORD PTR _idx$5[ebp]
	mov	WORD PTR _num_names$[ebp], ax
$LN35@load_forma:
; Line 219
	jmp	SHORT $LN37@load_forma
$LN36@load_forma:
; Line 227
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	movzx	edx, WORD PTR _num_names$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _name_strings$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN33@load_forma
; Line 228
	jmp	$Fail$54
$LN33@load_forma:
; Line 230
	xor	ecx, ecx
	mov	WORD PTR _n$4[ebp], cx
	jmp	SHORT $LN32@load_forma
$LN31@load_forma:
	mov	dx, WORD PTR _n$4[ebp]
	add	dx, 1
	mov	WORD PTR _n$4[ebp], dx
$LN32@load_forma:
	movzx	eax, WORD PTR _n$4[ebp]
	movzx	ecx, WORD PTR _num_names$[ebp]
	cmp	eax, ecx
	jge	$LN30@load_forma
; Line 235
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	cmp	eax, DWORD PTR _post_limit$[ebp]
	jl	SHORT $LN27@load_forma
; Line 236
	jmp	$LN30@load_forma
; Line 237
	jmp	SHORT $LN28@load_forma
$LN27@load_forma:
; Line 240
	mov	eax, 4
	imul	ecx, eax, 24
	cmp	DWORD PTR _ft_trace_levels[ecx], 6
	jl	SHORT $LN26@load_forma
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	ecx, DWORD PTR _post_limit$[ebp]
	sub	ecx, eax
	push	ecx
	push	OFFSET $SG15801
	call	_FT_Message
	add	esp, 8
$LN26@load_forma:
	xor	edx, edx
	jne	SHORT $LN27@load_forma
; Line 242
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadChar
	add	esp, 8
	movzx	edx, al
	mov	DWORD PTR _len$3[ebp], edx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@load_forma
; Line 243
	jmp	$Fail1$55
$LN28@load_forma:
; Line 247
	mov	eax, DWORD PTR _len$3[ebp]
	cmp	eax, DWORD PTR _post_limit$[ebp]
	jg	SHORT $LN21@load_forma
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	edx, DWORD PTR _post_limit$[ebp]
	sub	edx, DWORD PTR _len$3[ebp]
	cmp	eax, edx
	jle	SHORT $LN22@load_forma
$LN21@load_forma:
; Line 252
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Pos
	add	esp, 4
	mov	ecx, DWORD PTR _post_limit$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _len$3[ebp]
	push	edx
	push	OFFSET $SG15809
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 253
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Pos
	add	esp, 4
	mov	ecx, DWORD PTR _post_limit$[ebp]
	sub	ecx, eax
	jns	SHORT $LN48@load_forma
	mov	DWORD PTR tv187[ebp], 0
	jmp	SHORT $LN49@load_forma
$LN48@load_forma:
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	ecx, DWORD PTR _post_limit$[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv187[ebp], ecx
$LN49@load_forma:
	mov	edx, DWORD PTR tv187[ebp]
	mov	DWORD PTR _len$3[ebp], edx
$LN22@load_forma:
; Line 257
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _len$3[ebp]
	add	ecx, 1
	push	ecx
	push	0
	push	1
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	movzx	ecx, WORD PTR _n$4[ebp]
	mov	edx, DWORD PTR _name_strings$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN19@load_forma
	mov	eax, DWORD PTR _len$3[ebp]
	push	eax
	movzx	ecx, WORD PTR _n$4[ebp]
	mov	edx, DWORD PTR _name_strings$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@load_forma
$LN19@load_forma:
; Line 258
	jmp	$Fail1$55
$LN20@load_forma:
; Line 260
	movzx	edx, WORD PTR _n$4[ebp]
	mov	eax, DWORD PTR _name_strings$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _len$3[ebp]
	mov	BYTE PTR [ecx+edx], 0
; Line 261
	jmp	$LN31@load_forma
$LN30@load_forma:
; Line 263
	movzx	eax, WORD PTR _n$4[ebp]
	movzx	ecx, WORD PTR _num_names$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN18@load_forma
; Line 268
	movzx	edx, WORD PTR _num_names$[ebp]
	sub	edx, 1
	push	edx
	movzx	eax, WORD PTR _n$4[ebp]
	push	eax
	push	OFFSET $SG15817
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 269
	jmp	SHORT $LN17@load_forma
$LN16@load_forma:
	mov	cx, WORD PTR _n$4[ebp]
	add	cx, 1
	mov	WORD PTR _n$4[ebp], cx
$LN17@load_forma:
	movzx	edx, WORD PTR _n$4[ebp]
	movzx	eax, WORD PTR _num_names$[ebp]
	cmp	edx, eax
	jge	SHORT $LN18@load_forma
; Line 270
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	push	1
	push	0
	push	1
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	movzx	ecx, WORD PTR _n$4[ebp]
	mov	edx, DWORD PTR _name_strings$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@load_forma
; Line 271
	jmp	SHORT $Fail1$55
; Line 272
	jmp	SHORT $LN13@load_forma
$LN14@load_forma:
; Line 273
	movzx	eax, WORD PTR _n$4[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _name_strings$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [edx+eax], 0
$LN13@load_forma:
	jmp	SHORT $LN16@load_forma
$LN18@load_forma:
; Line 279
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 616				; 00000268H
	mov	DWORD PTR _table$2[ebp], ecx
; Line 282
	mov	edx, DWORD PTR _table$2[ebp]
	mov	ax, WORD PTR _num_glyphs$[ebp]
	mov	WORD PTR [edx], ax
; Line 283
	mov	ecx, DWORD PTR _table$2[ebp]
	mov	dx, WORD PTR _num_names$[ebp]
	mov	WORD PTR [ecx+2], dx
; Line 284
	mov	eax, DWORD PTR _table$2[ebp]
	mov	ecx, DWORD PTR _glyph_indices$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 285
	mov	edx, DWORD PTR _table$2[ebp]
	mov	eax, DWORD PTR _name_strings$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 287
	xor	eax, eax
	jmp	$LN46@load_forma
$Fail1$55:
; Line 294
	xor	ecx, ecx
	mov	WORD PTR _n$1[ebp], cx
	jmp	SHORT $LN12@load_forma
$LN11@load_forma:
	mov	dx, WORD PTR _n$1[ebp]
	add	dx, 1
	mov	WORD PTR _n$1[ebp], dx
$LN12@load_forma:
	movzx	eax, WORD PTR _n$1[ebp]
	movzx	ecx, WORD PTR _num_names$[ebp]
	cmp	eax, ecx
	jge	SHORT $Fail$54
$LN9@load_forma:
; Line 295
	movzx	edx, WORD PTR _n$1[ebp]
	mov	eax, DWORD PTR _name_strings$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	movzx	eax, WORD PTR _n$1[ebp]
	mov	ecx, DWORD PTR _name_strings$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
	xor	edx, edx
	jne	SHORT $LN9@load_forma
	jmp	SHORT $LN11@load_forma
$Fail$54:
; Line 299
	mov	eax, DWORD PTR _name_strings$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _name_strings$[ebp], 0
	xor	edx, edx
	jne	SHORT $Fail$54
$LN3@load_forma:
; Line 300
	mov	eax, DWORD PTR _glyph_indices$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _glyph_indices$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@load_forma
$Exit$53:
; Line 303
	mov	eax, DWORD PTR _error$[ebp]
$LN46@load_forma:
; Line 304
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN52@load_forma
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN52@load_forma:
	DD	1
	DD	$LN51@load_forma
$LN51@load_forma:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN50@load_forma
$LN50@load_forma:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_load_format_20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv204 = -80						; size = 4
_aadvance$1 = -72					; size = 2
_abearing$2 = -60					; size = 2
_p$ = -52						; size = 4
_error$ = -48						; size = 4
_recurse_depth$ = -44					; size = 4
_graphicType$ = -40					; size = 4
_originOffsetY$ = -36					; size = 4
_originOffsetX$ = -32					; size = 4
_table_size$ = -24					; size = 4
_glyph_end$ = -16					; size = 4
_glyph_start$ = -12					; size = 4
_strike_offset$ = -8					; size = 4
_sbix_pos$ = -4						; size = 4
_face$ = 8						; size = 4
_strike_index$ = 12					; size = 4
_glyph_index$ = 16					; size = 4
_stream$ = 20						; size = 4
_map$ = 24						; size = 4
_metrics$ = 28						; size = 4
_tt_face_load_sbix_image PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 1273
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1278
	mov	DWORD PTR _recurse_depth$[ebp], 0
; Line 1283
	mov	eax, DWORD PTR _map$[ebp]
	mov	DWORD PTR _map$[ebp], eax
; Line 1286
	xor	ecx, ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [edx+2], cx
; Line 1287
	xor	eax, eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1289
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+724]
	mov	ecx, DWORD PTR _strike_index$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4+8]
	mov	DWORD PTR _p$[ebp], edx
; Line 1290
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _strike_offset$[ebp], ecx
; Line 1292
	mov	esi, esp
	lea	ecx, DWORD PTR _table_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	1935829368				; 73626978H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1293
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@tt_face_lo
; Line 1294
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN20@tt_face_lo
$LN19@tt_face_lo:
; Line 1295
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _sbix_pos$[ebp], eax
$retry$28:
; Line 1298
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jbe	SHORT $LN18@tt_face_lo
; Line 1299
	push	OFFSET $SG15649
	push	1299					; 00000513H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN20@tt_face_lo
$LN18@tt_face_lo:
; Line 1302
	mov	eax, DWORD PTR _strike_offset$[ebp]
	cmp	eax, DWORD PTR _table_size$[ebp]
	jae	SHORT $LN16@tt_face_lo
	mov	ecx, DWORD PTR _table_size$[ebp]
	sub	ecx, DWORD PTR _strike_offset$[ebp]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	lea	eax, DWORD PTR [edx*4+12]
	cmp	ecx, eax
	jae	SHORT $LN17@tt_face_lo
$LN16@tt_face_lo:
; Line 1303
	push	OFFSET $SG15652
	push	1303					; 00000517H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN20@tt_face_lo
$LN17@tt_face_lo:
; Line 1306
	mov	ecx, DWORD PTR _sbix_pos$[ebp]
	add	ecx, DWORD PTR _strike_offset$[ebp]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+4]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN14@tt_face_lo
	push	8
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@tt_face_lo
$LN14@tt_face_lo:
; Line 1307
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN20@tt_face_lo
$LN15@tt_face_lo:
; Line 1309
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	DWORD PTR _glyph_start$[ebp], eax
; Line 1310
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	DWORD PTR _glyph_end$[ebp], eax
; Line 1312
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 1314
	mov	eax, DWORD PTR _glyph_start$[ebp]
	cmp	eax, DWORD PTR _glyph_end$[ebp]
	jne	SHORT $LN13@tt_face_lo
; Line 1315
	push	OFFSET $SG15660
	push	1315					; 00000523H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN20@tt_face_lo
$LN13@tt_face_lo:
; Line 1318
	mov	ecx, DWORD PTR _glyph_start$[ebp]
	cmp	ecx, DWORD PTR _glyph_end$[ebp]
	ja	SHORT $LN11@tt_face_lo
	mov	edx, DWORD PTR _glyph_end$[ebp]
	sub	edx, DWORD PTR _glyph_start$[ebp]
	cmp	edx, 8
	jb	SHORT $LN11@tt_face_lo
	mov	eax, DWORD PTR _table_size$[ebp]
	sub	eax, DWORD PTR _strike_offset$[ebp]
	cmp	eax, DWORD PTR _glyph_end$[ebp]
	jae	SHORT $LN12@tt_face_lo
$LN11@tt_face_lo:
; Line 1319
	push	OFFSET $SG15663
	push	1319					; 00000527H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN20@tt_face_lo
$LN12@tt_face_lo:
; Line 1322
	mov	ecx, DWORD PTR _sbix_pos$[ebp]
	add	ecx, DWORD PTR _strike_offset$[ebp]
	add	ecx, DWORD PTR _glyph_start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN9@tt_face_lo
	mov	eax, DWORD PTR _glyph_end$[ebp]
	sub	eax, DWORD PTR _glyph_start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@tt_face_lo
$LN9@tt_face_lo:
; Line 1323
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN20@tt_face_lo
$LN10@tt_face_lo:
; Line 1325
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	cwde
	mov	DWORD PTR _originOffsetX$[ebp], eax
; Line 1326
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	edx, ax
	mov	DWORD PTR _originOffsetY$[ebp], edx
; Line 1328
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	DWORD PTR _graphicType$[ebp], eax
; Line 1330
	mov	ecx, DWORD PTR _graphicType$[ebp]
	mov	DWORD PTR tv204[ebp], ecx
	cmp	DWORD PTR tv204[ebp], 1886283552	; 706e6720H
	ja	SHORT $LN22@tt_face_lo
	cmp	DWORD PTR tv204[ebp], 1886283552	; 706e6720H
	je	$LN4@tt_face_lo
	cmp	DWORD PTR tv204[ebp], 1685418085	; 64757065H
	je	SHORT $LN6@tt_face_lo
	cmp	DWORD PTR tv204[ebp], 1785751328	; 6a706720H
	je	$LN3@tt_face_lo
	jmp	$LN2@tt_face_lo
$LN22@tt_face_lo:
	cmp	DWORD PTR tv204[ebp], 1919378028	; 7267626cH
	je	SHORT $LN3@tt_face_lo
	cmp	DWORD PTR tv204[ebp], 1953064550	; 74696666H
	je	SHORT $LN3@tt_face_lo
	jmp	$LN2@tt_face_lo
$LN6@tt_face_lo:
; Line 1333
	cmp	DWORD PTR _recurse_depth$[ebp], 4
	jge	SHORT $LN5@tt_face_lo
; Line 1335
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movzx	eax, ax
	mov	DWORD PTR _glyph_index$[ebp], eax
; Line 1336
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 1337
	mov	edx, DWORD PTR _recurse_depth$[ebp]
	add	edx, 1
	mov	DWORD PTR _recurse_depth$[ebp], edx
; Line 1338
	jmp	$retry$28
$LN5@tt_face_lo:
; Line 1340
	push	OFFSET $SG15683
	push	1340					; 0000053cH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1341
	jmp	SHORT $LN7@tt_face_lo
$LN4@tt_face_lo:
; Line 1355
	push	OFFSET $SG15690
	push	1355					; 0000054bH
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	mov	DWORD PTR _error$[ebp], eax
; Line 1357
	jmp	SHORT $LN7@tt_face_lo
$LN3@tt_face_lo:
; Line 1362
	push	OFFSET $SG15707
	push	1362					; 00000552H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 1363
	jmp	SHORT $LN7@tt_face_lo
$LN2@tt_face_lo:
; Line 1366
	push	OFFSET $SG15709
	push	1366					; 00000556H
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	mov	DWORD PTR _error$[ebp], eax
$LN7@tt_face_lo:
; Line 1370
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 1372
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@tt_face_lo
; Line 1378
	lea	ecx, DWORD PTR _aadvance$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _abearing$2[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_get_metrics
	add	esp, 20					; 00000014H
; Line 1380
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	ax, WORD PTR _originOffsetX$[ebp]
	mov	WORD PTR [edx+4], ax
; Line 1381
	mov	ecx, DWORD PTR _originOffsetY$[ebp]
	neg	ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	movzx	eax, WORD PTR [edx]
	add	ecx, eax
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 1384
	movzx	eax, WORD PTR _aadvance$1[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	movzx	ecx, WORD PTR [edx+12]
	imul	eax, ecx
	mov	edx, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [edx+178]
	cdq
	idiv	ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [edx+8], ax
$LN1@tt_face_lo:
; Line 1387
	mov	eax, DWORD PTR _error$[ebp]
$LN20@tt_face_lo:
; Line 1388
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN27@tt_face_lo:
	DD	3
	DD	$LN26@tt_face_lo
$LN26@tt_face_lo:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN23@tt_face_lo
	DD	-60					; ffffffc4H
	DD	2
	DD	$LN24@tt_face_lo
	DD	-72					; ffffffb8H
	DD	2
	DD	$LN25@tt_face_lo
$LN25@tt_face_lo:
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN24@tt_face_lo:
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN23@tt_face_lo:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_tt_face_load_sbix_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv131 = -64						; size = 4
tv85 = -60						; size = 4
_byte_size$1 = -56					; size = 4
_bit_size$2 = -52					; size = 4
_height$3 = -48						; size = 4
_width$4 = -44						; size = 4
_loader$5 = -40						; size = 4
_data$ = -32						; size = 4
_p_limit$ = -24						; size = 4
_p$ = -16						; size = 4
_stream$ = -8						; size = 4
_error$ = -4						; size = 4
_decoder$ = 8						; size = 4
_glyph_format$ = 12					; size = 4
_glyph_start$ = 16					; size = 4
_glyph_size$ = 20					; size = 4
_x_pos$ = 24						; size = 4
_y_pos$ = 28						; size = 4
_tt_sbit_decoder_load_bitmap PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 935
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 937
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 944
	mov	edx, DWORD PTR _glyph_start$[ebp]
	add	edx, DWORD PTR _glyph_size$[ebp]
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	edx, DWORD PTR [eax+24]
	jbe	SHORT $LN23@tt_sbit_de
; Line 946
	push	OFFSET $SG15341
	push	946					; 000003b2H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 947
	jmp	$Exit$34
$LN23@tt_sbit_de:
; Line 951
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR _glyph_start$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN21@tt_sbit_de
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN22@tt_sbit_de
$LN21@tt_sbit_de:
; Line 952
	jmp	$Exit$34
$LN22@tt_sbit_de:
; Line 954
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 955
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _glyph_size$[ebp]
	mov	DWORD PTR _p_limit$[ebp], edx
; Line 958
	mov	eax, DWORD PTR _glyph_format$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv85[ebp], ecx
	cmp	DWORD PTR tv85[ebp], 17			; 00000011H
	ja	SHORT $LN16@tt_sbit_de
	mov	edx, DWORD PTR tv85[ebp]
	movzx	eax, BYTE PTR $LN26@tt_sbit_de[edx]
	jmp	DWORD PTR $LN32@tt_sbit_de[eax*4]
$LN18@tt_sbit_de:
; Line 964
	push	0
	mov	ecx, DWORD PTR _p_limit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_tt_sbit_decoder_load_metrics
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 965
	jmp	SHORT $LN19@tt_sbit_de
$LN17@tt_sbit_de:
; Line 971
	push	1
	mov	ecx, DWORD PTR _p_limit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_tt_sbit_decoder_load_metrics
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 972
	jmp	SHORT $LN19@tt_sbit_de
$LN16@tt_sbit_de:
; Line 975
	mov	DWORD PTR _error$[ebp], 0
$LN19@tt_sbit_de:
; Line 978
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@tt_sbit_de
; Line 979
	jmp	$Fail$35
$LN15@tt_sbit_de:
; Line 985
	mov	ecx, DWORD PTR _glyph_format$[ebp]
	mov	DWORD PTR tv131[ebp], ecx
	mov	edx, DWORD PTR tv131[ebp]
	sub	edx, 1
	mov	DWORD PTR tv131[ebp], edx
	cmp	DWORD PTR tv131[ebp], 18		; 00000012H
	ja	$LN3@tt_sbit_de
	mov	eax, DWORD PTR tv131[ebp]
	movzx	ecx, BYTE PTR $LN27@tt_sbit_de[eax]
	jmp	DWORD PTR $LN33@tt_sbit_de[ecx*4]
$LN12@tt_sbit_de:
; Line 989
	mov	DWORD PTR _loader$5[ebp], OFFSET _tt_sbit_decoder_load_byte_aligned
; Line 990
	jmp	$LN13@tt_sbit_de
$LN11@tt_sbit_de:
; Line 1007
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movzx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _width$4[ebp], ecx
; Line 1008
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _height$3[ebp], ecx
; Line 1010
	mov	edx, DWORD PTR _width$4[ebp]
	imul	edx, DWORD PTR _height$3[ebp]
	add	edx, 7
	shr	edx, 3
	mov	DWORD PTR _bit_size$2[ebp], edx
; Line 1011
	mov	eax, DWORD PTR _width$4[ebp]
	add	eax, 7
	shr	eax, 3
	imul	eax, DWORD PTR _height$3[ebp]
	mov	DWORD PTR _byte_size$1[ebp], eax
; Line 1015
	mov	ecx, DWORD PTR _bit_size$2[ebp]
	cmp	ecx, DWORD PTR _byte_size$1[ebp]
	jae	SHORT $LN10@tt_sbit_de
	mov	edx, DWORD PTR _p_limit$[ebp]
	sub	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR _byte_size$1[ebp], edx
	jne	SHORT $LN10@tt_sbit_de
; Line 1016
	mov	DWORD PTR _loader$5[ebp], OFFSET _tt_sbit_decoder_load_byte_aligned
; Line 1017
	jmp	SHORT $LN9@tt_sbit_de
$LN10@tt_sbit_de:
; Line 1018
	mov	DWORD PTR _loader$5[ebp], OFFSET _tt_sbit_decoder_load_bit_aligned
$LN9@tt_sbit_de:
; Line 1020
	jmp	SHORT $LN13@tt_sbit_de
$LN8@tt_sbit_de:
; Line 1023
	mov	DWORD PTR _loader$5[ebp], OFFSET _tt_sbit_decoder_load_bit_aligned
; Line 1024
	jmp	SHORT $LN13@tt_sbit_de
$LN7@tt_sbit_de:
; Line 1027
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _p_limit$[ebp]
	jbe	SHORT $LN6@tt_sbit_de
; Line 1028
	jmp	$Fail$35
$LN6@tt_sbit_de:
; Line 1030
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN5@tt_sbit_de:
; Line 1034
	mov	DWORD PTR _loader$5[ebp], OFFSET _tt_sbit_decoder_load_compound
; Line 1035
	jmp	SHORT $LN13@tt_sbit_de
$LN4@tt_sbit_de:
; Line 1044
	push	OFFSET $SG15376
	push	1044					; 00000414H
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	mov	DWORD PTR _error$[ebp], eax
; Line 1045
	jmp	SHORT $Fail$35
$LN3@tt_sbit_de:
; Line 1049
	push	OFFSET $SG15378
	push	1049					; 00000419H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1050
	jmp	SHORT $Fail$35
$LN13@tt_sbit_de:
; Line 1053
	mov	edx, DWORD PTR _decoder$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	test	eax, eax
	jne	SHORT $LN2@tt_sbit_de
; Line 1055
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_tt_sbit_decoder_alloc_bitmap
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 1056
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@tt_sbit_de
; Line 1057
	jmp	SHORT $Fail$35
$LN2@tt_sbit_de:
; Line 1060
	mov	esi, esp
	mov	edx, DWORD PTR _y_pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_limit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	DWORD PTR _loader$5[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$Fail$35:
; Line 1064
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
$Exit$34:
; Line 1067
	mov	eax, DWORD PTR _error$[ebp]
; Line 1068
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@tt_sbit_de
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN31@tt_sbit_de:
	DD	2
	DD	$LN30@tt_sbit_de
$LN30@tt_sbit_de:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN28@tt_sbit_de
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN29@tt_sbit_de
$LN29@tt_sbit_de:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN28@tt_sbit_de:
	DB	112					; 00000070H
	DB	0
	npad	1
$LN32@tt_sbit_de:
	DD	$LN18@tt_sbit_de
	DD	$LN17@tt_sbit_de
	DD	$LN16@tt_sbit_de
$LN26@tt_sbit_de:
	DB	0
	DB	0
	DB	2
	DB	2
	DB	2
	DB	1
	DB	1
	DB	0
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	1
	npad	2
$LN33@tt_sbit_de:
	DD	$LN12@tt_sbit_de
	DD	$LN11@tt_sbit_de
	DD	$LN8@tt_sbit_de
	DD	$LN7@tt_sbit_de
	DD	$LN5@tt_sbit_de
	DD	$LN4@tt_sbit_de
	DD	$LN3@tt_sbit_de
$LN27@tt_sbit_de:
	DB	0
	DB	1
	DB	6
	DB	6
	DB	2
	DB	0
	DB	1
	DB	3
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	DB	5
	DB	5
_tt_sbit_decoder_load_bitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dy$1 = -26						; size = 1
_dx$2 = -25						; size = 1
_gindex$3 = -24						; size = 4
_vertAdvance$ = -18					; size = 1
_vertBearingY$ = -17					; size = 1
_vertBearingX$ = -16					; size = 1
_horiAdvance$ = -15					; size = 1
_horiBearingY$ = -14					; size = 1
_horiBearingX$ = -13					; size = 1
_nn$ = -12						; size = 4
_num_components$ = -8					; size = 4
_error$ = -4						; size = 4
_decoder$ = 8						; size = 4
_p$ = 12						; size = 4
_limit$ = 16						; size = 4
_x_pos$ = 20						; size = 4
_y_pos$ = 24						; size = 4
_tt_sbit_decoder_load_compound PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 822
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 823
	mov	DWORD PTR _error$[ebp], 0
; Line 826
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR _horiBearingX$[ebp], dl
; Line 827
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	dl, BYTE PTR [ecx+6]
	mov	BYTE PTR _horiBearingY$[ebp], dl
; Line 828
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR _horiAdvance$[ebp], dl
; Line 829
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	dl, BYTE PTR [ecx+10]
	mov	BYTE PTR _vertBearingX$[ebp], dl
; Line 830
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR _vertBearingY$[ebp], dl
; Line 831
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	dl, BYTE PTR [ecx+14]
	mov	BYTE PTR _vertAdvance$[ebp], dl
; Line 834
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN18@tt_sbit_de
; Line 835
	jmp	$Fail$21
$LN18@tt_sbit_de:
; Line 837
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _num_components$[ebp], ecx
; Line 838
	mov	edx, DWORD PTR _num_components$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN12@tt_sbit_de
$LN16@tt_sbit_de:
; Line 840
	mov	edx, 4
	imul	eax, edx, 25
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN15@tt_sbit_de
	push	OFFSET $SG15291
	call	_FT_Message
	add	esp, 4
$LN15@tt_sbit_de:
	xor	ecx, ecx
	jne	SHORT $LN16@tt_sbit_de
; Line 841
	jmp	$Fail$21
$LN12@tt_sbit_de:
; Line 845
	mov	edx, 4
	imul	eax, edx, 25
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN11@tt_sbit_de
	mov	ecx, DWORD PTR _num_components$[ebp]
	push	ecx
	push	OFFSET $SG15296
	call	_FT_Message
	add	esp, 8
$LN11@tt_sbit_de:
	xor	edx, edx
	jne	SHORT $LN12@tt_sbit_de
; Line 847
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN8@tt_sbit_de
$LN7@tt_sbit_de:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN8@tt_sbit_de:
	mov	ecx, DWORD PTR _nn$[ebp]
	cmp	ecx, DWORD PTR _num_components$[ebp]
	jae	$LN4@tt_sbit_de
; Line 849
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _gindex$3[ebp], edx
; Line 850
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _dx$2[ebp], cl
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 851
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _dy$1[ebp], cl
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 856
	movzx	eax, BYTE PTR _dy$1[ebp]
	add	eax, DWORD PTR _y_pos$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _dx$2[ebp]
	add	ecx, DWORD PTR _x_pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _gindex$3[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_tt_sbit_decoder_load_image
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 857
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@tt_sbit_de
; Line 858
	jmp	SHORT $LN4@tt_sbit_de
$LN5@tt_sbit_de:
; Line 859
	jmp	$LN7@tt_sbit_de
$LN4@tt_sbit_de:
; Line 861
	mov	ecx, 4
	imul	edx, ecx, 25
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN3@tt_sbit_de
	push	OFFSET $SG15316
	call	_FT_Message
	add	esp, 4
$LN3@tt_sbit_de:
	xor	eax, eax
	jne	SHORT $LN4@tt_sbit_de
; Line 863
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movsx	ax, BYTE PTR _horiBearingX$[ebp]
	mov	WORD PTR [edx+4], ax
; Line 864
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movsx	ax, BYTE PTR _horiBearingY$[ebp]
	mov	WORD PTR [edx+6], ax
; Line 865
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movzx	ax, BYTE PTR _horiAdvance$[ebp]
	mov	WORD PTR [edx+8], ax
; Line 866
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movsx	ax, BYTE PTR _vertBearingX$[ebp]
	mov	WORD PTR [edx+10], ax
; Line 867
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movsx	ax, BYTE PTR _vertBearingY$[ebp]
	mov	WORD PTR [edx+12], ax
; Line 868
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movzx	ax, BYTE PTR _vertAdvance$[ebp]
	mov	WORD PTR [edx+14], ax
; Line 869
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movzx	dx, BYTE PTR [edx+4]
	mov	WORD PTR [ecx+2], dx
; Line 870
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movzx	cx, BYTE PTR [ecx]
	mov	WORD PTR [eax], cx
$Exit$22:
; Line 873
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN19@tt_sbit_de
$Fail$21:
; Line 876
	push	OFFSET $SG15320
	push	876					; 0000036cH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 877
	jmp	SHORT $Exit$22
$LN19@tt_sbit_de:
; Line 878
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_sbit_decoder_load_compound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv153 = -60						; size = 4
_w$1 = -56						; size = 4
_pwrite$2 = -52						; size = 4
_rval$ = -48						; size = 2
_bitmap$ = -44						; size = 4
_nbits$ = -40						; size = 4
_h$ = -36						; size = 4
_line_bits$ = -32					; size = 4
_height$ = -28						; size = 4
_width$ = -24						; size = 4
_pitch$ = -20						; size = 4
_bit_width$ = -16					; size = 4
_bit_height$ = -12					; size = 4
_line$ = -8						; size = 4
_error$ = -4						; size = 4
_decoder$ = 8						; size = 4
_p$ = 12						; size = 4
_limit$ = 16						; size = 4
_x_pos$ = 20						; size = 4
_y_pos$ = 24						; size = 4
_tt_sbit_decoder_load_bit_aligned PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 700
	mov	DWORD PTR _error$[ebp], 0
; Line 708
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _bitmap$[ebp], ecx
; Line 709
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _bit_width$[ebp], eax
; Line 710
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _bit_height$[ebp], edx
; Line 711
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pitch$[ebp], ecx
; Line 712
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _line$[ebp], eax
; Line 714
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movzx	eax, WORD PTR [edx+2]
	mov	DWORD PTR _width$[ebp], eax
; Line 715
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR _height$[ebp], eax
; Line 717
	mov	ecx, DWORD PTR _decoder$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	imul	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _line_bits$[ebp], edx
; Line 720
	cmp	DWORD PTR _x_pos$[ebp], 0
	jl	SHORT $LN30@tt_sbit_de
	mov	eax, DWORD PTR _x_pos$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _bit_width$[ebp]
	jg	SHORT $LN30@tt_sbit_de
	cmp	DWORD PTR _y_pos$[ebp], 0
	jl	SHORT $LN30@tt_sbit_de
	mov	ecx, DWORD PTR _y_pos$[ebp]
	add	ecx, DWORD PTR _height$[ebp]
	cmp	ecx, DWORD PTR _bit_height$[ebp]
	jle	SHORT $LN32@tt_sbit_de
$LN30@tt_sbit_de:
; Line 723
	mov	edx, 4
	imul	eax, edx, 25
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN29@tt_sbit_de
	push	OFFSET $SG15217
	call	_FT_Message
	add	esp, 4
$LN29@tt_sbit_de:
	xor	ecx, ecx
	jne	SHORT $LN30@tt_sbit_de
; Line 724
	push	OFFSET $SG15218
	push	724					; 000002d4H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 725
	jmp	$Exit$37
$LN32@tt_sbit_de:
; Line 728
	mov	edx, DWORD PTR _line_bits$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	add	edx, 7
	sar	edx, 3
	add	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN26@tt_sbit_de
$LN25@tt_sbit_de:
; Line 730
	mov	eax, 4
	imul	ecx, eax, 25
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN24@tt_sbit_de
	push	OFFSET $SG15225
	call	_FT_Message
	add	esp, 4
$LN24@tt_sbit_de:
	xor	edx, edx
	jne	SHORT $LN25@tt_sbit_de
; Line 731
	push	OFFSET $SG15226
	push	731					; 000002dbH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 732
	jmp	$Exit$37
$LN26@tt_sbit_de:
; Line 738
	mov	eax, DWORD PTR _y_pos$[ebp]
	imul	eax, DWORD PTR _pitch$[ebp]
	mov	ecx, DWORD PTR _x_pos$[ebp]
	sar	ecx, 3
	add	ecx, DWORD PTR _line$[ebp]
	add	ecx, eax
	mov	DWORD PTR _line$[ebp], ecx
; Line 739
	mov	edx, DWORD PTR _x_pos$[ebp]
	and	edx, 7
	mov	DWORD PTR _x_pos$[ebp], edx
; Line 742
	xor	eax, eax
	mov	WORD PTR _rval$[ebp], ax
; Line 743
	mov	DWORD PTR _nbits$[ebp], 0
; Line 745
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _h$[ebp], ecx
	jmp	SHORT $LN21@tt_sbit_de
$LN20@tt_sbit_de:
	mov	edx, DWORD PTR _h$[ebp]
	sub	edx, 1
	mov	DWORD PTR _h$[ebp], edx
	mov	eax, DWORD PTR _line$[ebp]
	add	eax, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR _line$[ebp], eax
$LN21@tt_sbit_de:
	cmp	DWORD PTR _h$[ebp], 0
	jle	$Exit$37
; Line 747
	mov	ecx, DWORD PTR _line$[ebp]
	mov	DWORD PTR _pwrite$2[ebp], ecx
; Line 748
	mov	edx, DWORD PTR _line_bits$[ebp]
	mov	DWORD PTR _w$1[ebp], edx
; Line 752
	cmp	DWORD PTR _x_pos$[ebp], 0
	je	$LN18@tt_sbit_de
; Line 754
	mov	eax, 8
	sub	eax, DWORD PTR _x_pos$[ebp]
	cmp	DWORD PTR _line_bits$[ebp], eax
	jge	SHORT $LN35@tt_sbit_de
	mov	ecx, DWORD PTR _line_bits$[ebp]
	mov	DWORD PTR tv153[ebp], ecx
	jmp	SHORT $LN36@tt_sbit_de
$LN35@tt_sbit_de:
	mov	edx, 8
	sub	edx, DWORD PTR _x_pos$[ebp]
	mov	DWORD PTR tv153[ebp], edx
$LN36@tt_sbit_de:
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR _w$1[ebp], eax
; Line 756
	mov	ecx, DWORD PTR _h$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jne	SHORT $LN17@tt_sbit_de
; Line 758
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ax, BYTE PTR [edx]
	mov	WORD PTR _rval$[ebp], ax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 759
	mov	edx, DWORD PTR _x_pos$[ebp]
	mov	DWORD PTR _nbits$[ebp], edx
	jmp	SHORT $LN16@tt_sbit_de
$LN17@tt_sbit_de:
; Line 761
	mov	eax, DWORD PTR _nbits$[ebp]
	cmp	eax, DWORD PTR _w$1[ebp]
	jge	SHORT $LN15@tt_sbit_de
; Line 763
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN14@tt_sbit_de
; Line 764
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	movzx	ecx, WORD PTR _rval$[ebp]
	or	ecx, eax
	mov	WORD PTR _rval$[ebp], cx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN14@tt_sbit_de:
; Line 765
	mov	eax, 8
	sub	eax, DWORD PTR _w$1[ebp]
	add	eax, DWORD PTR _nbits$[ebp]
	mov	DWORD PTR _nbits$[ebp], eax
; Line 767
	jmp	SHORT $LN16@tt_sbit_de
$LN15@tt_sbit_de:
; Line 769
	mov	cx, WORD PTR _rval$[ebp]
	shr	cx, 8
	mov	WORD PTR _rval$[ebp], cx
; Line 770
	mov	edx, DWORD PTR _nbits$[ebp]
	sub	edx, DWORD PTR _w$1[ebp]
	mov	DWORD PTR _nbits$[ebp], edx
$LN16@tt_sbit_de:
; Line 774
	movzx	eax, WORD PTR _rval$[ebp]
	mov	ecx, DWORD PTR _nbits$[ebp]
	sar	eax, cl
	and	eax, 255				; 000000ffH
	mov	edx, 255				; 000000ffH
	mov	ecx, DWORD PTR _w$1[ebp]
	shl	edx, cl
	not	edx
	mov	ecx, 8
	sub	ecx, DWORD PTR _w$1[ebp]
	sub	ecx, DWORD PTR _x_pos$[ebp]
	shl	edx, cl
	and	eax, edx
	mov	ecx, DWORD PTR _pwrite$2[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pwrite$2[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _pwrite$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _pwrite$2[ebp], ecx
; Line 775
	mov	dx, WORD PTR _rval$[ebp]
	shl	dx, 8
	mov	WORD PTR _rval$[ebp], dx
; Line 777
	mov	eax, DWORD PTR _line_bits$[ebp]
	sub	eax, DWORD PTR _w$1[ebp]
	mov	DWORD PTR _w$1[ebp], eax
$LN18@tt_sbit_de:
; Line 781
	jmp	SHORT $LN12@tt_sbit_de
$LN11@tt_sbit_de:
	mov	ecx, DWORD PTR _w$1[ebp]
	sub	ecx, 8
	mov	DWORD PTR _w$1[ebp], ecx
$LN12@tt_sbit_de:
	cmp	DWORD PTR _w$1[ebp], 8
	jl	SHORT $LN10@tt_sbit_de
; Line 783
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	movzx	ecx, WORD PTR _rval$[ebp]
	or	ecx, eax
	mov	WORD PTR _rval$[ebp], cx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 784
	movzx	eax, WORD PTR _rval$[ebp]
	mov	ecx, DWORD PTR _nbits$[ebp]
	sar	eax, cl
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pwrite$2[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pwrite$2[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _pwrite$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _pwrite$2[ebp], ecx
; Line 786
	mov	dx, WORD PTR _rval$[ebp]
	shl	dx, 8
	mov	WORD PTR _rval$[ebp], dx
; Line 787
	jmp	SHORT $LN11@tt_sbit_de
$LN10@tt_sbit_de:
; Line 790
	cmp	DWORD PTR _w$1[ebp], 0
	jle	$LN9@tt_sbit_de
; Line 792
	mov	eax, DWORD PTR _nbits$[ebp]
	cmp	eax, DWORD PTR _w$1[ebp]
	jge	SHORT $LN8@tt_sbit_de
; Line 794
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN7@tt_sbit_de
; Line 795
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	movzx	ecx, WORD PTR _rval$[ebp]
	or	ecx, eax
	mov	WORD PTR _rval$[ebp], cx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN7@tt_sbit_de:
; Line 796
	movzx	eax, WORD PTR _rval$[ebp]
	mov	ecx, DWORD PTR _nbits$[ebp]
	sar	eax, cl
	and	eax, 255				; 000000ffH
	mov	edx, 65280				; 0000ff00H
	mov	ecx, DWORD PTR _w$1[ebp]
	shr	edx, cl
	and	eax, edx
	mov	ecx, DWORD PTR _pwrite$2[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pwrite$2[ebp]
	mov	BYTE PTR [eax], dl
; Line 797
	mov	ecx, 8
	sub	ecx, DWORD PTR _w$1[ebp]
	add	ecx, DWORD PTR _nbits$[ebp]
	mov	DWORD PTR _nbits$[ebp], ecx
; Line 799
	mov	dx, WORD PTR _rval$[ebp]
	shl	dx, 8
	mov	WORD PTR _rval$[ebp], dx
; Line 801
	jmp	SHORT $LN9@tt_sbit_de
$LN8@tt_sbit_de:
; Line 803
	movzx	eax, WORD PTR _rval$[ebp]
	mov	ecx, DWORD PTR _nbits$[ebp]
	sar	eax, cl
	and	eax, 255				; 000000ffH
	mov	edx, 65280				; 0000ff00H
	mov	ecx, DWORD PTR _w$1[ebp]
	shr	edx, cl
	and	eax, edx
	mov	ecx, DWORD PTR _pwrite$2[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _pwrite$2[ebp]
	mov	BYTE PTR [eax], dl
; Line 804
	mov	ecx, DWORD PTR _nbits$[ebp]
	sub	ecx, DWORD PTR _w$1[ebp]
	mov	DWORD PTR _nbits$[ebp], ecx
$LN9@tt_sbit_de:
; Line 807
	jmp	$LN20@tt_sbit_de
$Exit$37:
; Line 810
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@tt_sbit_de
$LN4@tt_sbit_de:
; Line 811
	mov	edx, 4
	imul	eax, edx, 25
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN3@tt_sbit_de
	push	OFFSET $SG15250
	call	_FT_Message
	add	esp, 4
$LN3@tt_sbit_de:
	xor	ecx, ecx
	jne	SHORT $LN4@tt_sbit_de
$LN5@tt_sbit_de:
; Line 812
	mov	eax, DWORD PTR _error$[ebp]
; Line 813
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_sbit_decoder_load_bit_aligned ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_wval$1 = -60						; size = 4
_w$2 = -56						; size = 4
_pwrite$3 = -52						; size = 4
_w$4 = -48						; size = 4
_pwrite$5 = -44						; size = 4
_bitmap$ = -40						; size = 4
_h$ = -36						; size = 4
_line_bits$ = -32					; size = 4
_height$ = -28						; size = 4
_width$ = -24						; size = 4
_pitch$ = -20						; size = 4
_bit_width$ = -16					; size = 4
_bit_height$ = -12					; size = 4
_line$ = -8						; size = 4
_error$ = -4						; size = 4
_decoder$ = 8						; size = 4
_p$ = 12						; size = 4
_limit$ = 16						; size = 4
_x_pos$ = 20						; size = 4
_y_pos$ = 24						; size = 4
_tt_sbit_decoder_load_byte_aligned PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 561
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 562
	mov	DWORD PTR _error$[ebp], 0
; Line 569
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _bitmap$[ebp], ecx
; Line 570
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _bit_width$[ebp], eax
; Line 571
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _bit_height$[ebp], edx
; Line 572
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pitch$[ebp], ecx
; Line 573
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _line$[ebp], eax
; Line 575
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movzx	eax, WORD PTR [edx+2]
	mov	DWORD PTR _width$[ebp], eax
; Line 576
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR _height$[ebp], eax
; Line 578
	mov	ecx, DWORD PTR _decoder$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	imul	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _line_bits$[ebp], edx
; Line 581
	cmp	DWORD PTR _x_pos$[ebp], 0
	jl	SHORT $LN31@tt_sbit_de
	mov	eax, DWORD PTR _x_pos$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _bit_width$[ebp]
	jg	SHORT $LN31@tt_sbit_de
	cmp	DWORD PTR _y_pos$[ebp], 0
	jl	SHORT $LN31@tt_sbit_de
	mov	ecx, DWORD PTR _y_pos$[ebp]
	add	ecx, DWORD PTR _height$[ebp]
	cmp	ecx, DWORD PTR _bit_height$[ebp]
	jle	SHORT $LN33@tt_sbit_de
$LN31@tt_sbit_de:
; Line 584
	mov	edx, 4
	imul	eax, edx, 25
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN30@tt_sbit_de
	push	OFFSET $SG15142
	call	_FT_Message
	add	esp, 4
$LN30@tt_sbit_de:
	xor	ecx, ecx
	jne	SHORT $LN31@tt_sbit_de
; Line 585
	push	OFFSET $SG15143
	push	585					; 00000249H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 586
	jmp	$Exit$36
$LN33@tt_sbit_de:
; Line 589
	mov	edx, DWORD PTR _line_bits$[ebp]
	add	edx, 7
	sar	edx, 3
	imul	edx, DWORD PTR _height$[ebp]
	add	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN27@tt_sbit_de
$LN26@tt_sbit_de:
; Line 591
	mov	eax, 4
	imul	ecx, eax, 25
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN25@tt_sbit_de
	push	OFFSET $SG15150
	call	_FT_Message
	add	esp, 4
$LN25@tt_sbit_de:
	xor	edx, edx
	jne	SHORT $LN26@tt_sbit_de
; Line 592
	push	OFFSET $SG15151
	push	592					; 00000250H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 593
	jmp	$Exit$36
$LN27@tt_sbit_de:
; Line 597
	mov	eax, DWORD PTR _y_pos$[ebp]
	imul	eax, DWORD PTR _pitch$[ebp]
	mov	ecx, DWORD PTR _x_pos$[ebp]
	sar	ecx, 3
	add	ecx, DWORD PTR _line$[ebp]
	add	ecx, eax
	mov	DWORD PTR _line$[ebp], ecx
; Line 598
	mov	edx, DWORD PTR _x_pos$[ebp]
	and	edx, 7
	mov	DWORD PTR _x_pos$[ebp], edx
; Line 600
	jne	$LN22@tt_sbit_de
; Line 602
	mov	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _h$[ebp], eax
	jmp	SHORT $LN21@tt_sbit_de
$LN20@tt_sbit_de:
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	mov	edx, DWORD PTR _line$[ebp]
	add	edx, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR _line$[ebp], edx
$LN21@tt_sbit_de:
	cmp	DWORD PTR _h$[ebp], 0
	jle	$LN19@tt_sbit_de
; Line 604
	mov	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR _pwrite$5[ebp], eax
; Line 608
	mov	ecx, DWORD PTR _line_bits$[ebp]
	mov	DWORD PTR _w$4[ebp], ecx
	jmp	SHORT $LN18@tt_sbit_de
$LN17@tt_sbit_de:
	mov	edx, DWORD PTR _w$4[ebp]
	sub	edx, 8
	mov	DWORD PTR _w$4[ebp], edx
$LN18@tt_sbit_de:
	cmp	DWORD PTR _w$4[ebp], 8
	jl	SHORT $LN16@tt_sbit_de
; Line 610
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pwrite$5[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _pwrite$5[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 611
	mov	eax, DWORD PTR _pwrite$5[ebp]
	add	eax, 1
	mov	DWORD PTR _pwrite$5[ebp], eax
; Line 612
	jmp	SHORT $LN17@tt_sbit_de
$LN16@tt_sbit_de:
; Line 614
	cmp	DWORD PTR _w$4[ebp], 0
	jle	SHORT $LN15@tt_sbit_de
; Line 615
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pwrite$5[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	esi, 65280				; 0000ff00H
	mov	ecx, DWORD PTR _w$4[ebp]
	shr	esi, cl
	and	eax, esi
	or	edx, eax
	mov	ecx, 1
	imul	eax, ecx, 0
	mov	ecx, DWORD PTR _pwrite$5[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN15@tt_sbit_de:
; Line 616
	jmp	$LN20@tt_sbit_de
$LN19@tt_sbit_de:
; Line 618
	jmp	$Exit$36
$LN22@tt_sbit_de:
; Line 620
	mov	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _h$[ebp], eax
	jmp	SHORT $LN13@tt_sbit_de
$LN12@tt_sbit_de:
	mov	ecx, DWORD PTR _h$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	mov	edx, DWORD PTR _line$[ebp]
	add	edx, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR _line$[ebp], edx
$LN13@tt_sbit_de:
	cmp	DWORD PTR _h$[ebp], 0
	jle	$Exit$36
; Line 622
	mov	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR _pwrite$3[ebp], eax
; Line 624
	mov	DWORD PTR _wval$1[ebp], 0
; Line 627
	mov	ecx, DWORD PTR _line_bits$[ebp]
	mov	DWORD PTR _w$2[ebp], ecx
	jmp	SHORT $LN10@tt_sbit_de
$LN9@tt_sbit_de:
	mov	edx, DWORD PTR _w$2[ebp]
	sub	edx, 8
	mov	DWORD PTR _w$2[ebp], edx
$LN10@tt_sbit_de:
	cmp	DWORD PTR _w$2[ebp], 8
	jl	SHORT $LN8@tt_sbit_de
; Line 629
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	or	ecx, DWORD PTR _wval$1[ebp]
	mov	DWORD PTR _wval$1[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 630
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pwrite$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	edx, DWORD PTR _wval$1[ebp]
	mov	ecx, DWORD PTR _x_pos$[ebp]
	shr	edx, cl
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _pwrite$3[ebp]
	mov	BYTE PTR [ecx+edx], al
; Line 631
	mov	edx, DWORD PTR _pwrite$3[ebp]
	add	edx, 1
	mov	DWORD PTR _pwrite$3[ebp], edx
; Line 632
	mov	eax, DWORD PTR _wval$1[ebp]
	shl	eax, 8
	mov	DWORD PTR _wval$1[ebp], eax
; Line 633
	jmp	SHORT $LN9@tt_sbit_de
$LN8@tt_sbit_de:
; Line 635
	cmp	DWORD PTR _w$2[ebp], 0
	jle	SHORT $LN7@tt_sbit_de
; Line 636
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, 65280				; 0000ff00H
	mov	ecx, DWORD PTR _w$2[ebp]
	shr	eax, cl
	and	edx, eax
	or	edx, DWORD PTR _wval$1[ebp]
	mov	DWORD PTR _wval$1[ebp], edx
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN7@tt_sbit_de:
; Line 640
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pwrite$3[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _wval$1[ebp]
	mov	ecx, DWORD PTR _x_pos$[ebp]
	shr	eax, cl
	or	edx, eax
	mov	ecx, 1
	imul	eax, ecx, 0
	mov	ecx, DWORD PTR _pwrite$3[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 642
	mov	edx, DWORD PTR _x_pos$[ebp]
	add	edx, DWORD PTR _w$2[ebp]
	cmp	edx, 8
	jle	SHORT $LN6@tt_sbit_de
; Line 644
	mov	eax, DWORD PTR _pwrite$3[ebp]
	add	eax, 1
	mov	DWORD PTR _pwrite$3[ebp], eax
; Line 645
	mov	ecx, DWORD PTR _wval$1[ebp]
	shl	ecx, 8
	mov	DWORD PTR _wval$1[ebp], ecx
; Line 646
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pwrite$3[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _wval$1[ebp]
	mov	ecx, DWORD PTR _x_pos$[ebp]
	shr	eax, cl
	or	edx, eax
	mov	ecx, 1
	imul	eax, ecx, 0
	mov	ecx, DWORD PTR _pwrite$3[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN6@tt_sbit_de:
; Line 648
	jmp	$LN12@tt_sbit_de
$Exit$36:
; Line 652
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@tt_sbit_de
$LN4@tt_sbit_de:
; Line 653
	mov	edx, 4
	imul	eax, edx, 25
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN3@tt_sbit_de
	push	OFFSET $SG15186
	call	_FT_Message
	add	esp, 4
$LN3@tt_sbit_de:
	xor	ecx, ecx
	jne	SHORT $LN4@tt_sbit_de
$LN5@tt_sbit_de:
; Line 654
	mov	eax, DWORD PTR _error$[ebp]
; Line 655
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_sbit_decoder_load_byte_aligned ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv212 = -84						; size = 4
_gindex$1 = -80						; size = 4
_num_glyphs$2 = -76					; size = 4
_mm$3 = -72						; size = 4
_image_size$4 = -68					; size = 4
_gindex$5 = -64						; size = 4
_num_glyphs$6 = -60					; size = 4
_mm$7 = -56						; size = 4
_image_size$8 = -52					; size = 4
_image_offset$ = -48					; size = 4
_image_end$ = -44					; size = 4
_image_start$ = -40					; size = 4
_image_format$ = -36					; size = 4
_index_format$ = -32					; size = 4
_end$ = -28						; size = 4
_start$ = -24						; size = 4
_num_ranges$ = -20					; size = 4
_p_limit$ = -16						; size = 4
_p$ = -8						; size = 4
_decoder$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_x_pos$ = 16						; size = 4
_y_pos$ = 20						; size = 4
_tt_sbit_decoder_load_image PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 1076
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1082
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _decoder$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1083
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _p_limit$[ebp], ecx
; Line 1084
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _num_ranges$[ebp], eax
; Line 1086
	mov	DWORD PTR _image_start$[ebp], 0
	mov	DWORD PTR _image_end$[ebp], 0
; Line 1089
	jmp	SHORT $LN45@tt_sbit_de
$LN44@tt_sbit_de:
	mov	ecx, DWORD PTR _num_ranges$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _num_ranges$[ebp], ecx
$LN45@tt_sbit_de:
	cmp	DWORD PTR _num_ranges$[ebp], 0
	jbe	$LN43@tt_sbit_de
; Line 1091
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _start$[ebp], edx
; Line 1092
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _end$[ebp], eax
; Line 1094
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	jb	SHORT $LN42@tt_sbit_de
	mov	edx, DWORD PTR _glyph_index$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	ja	SHORT $LN42@tt_sbit_de
; Line 1095
	jmp	SHORT $FoundRange$53
$LN42@tt_sbit_de:
; Line 1097
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 1098
	jmp	$LN44@tt_sbit_de
$LN43@tt_sbit_de:
; Line 1099
	jmp	$NoBitmap$54
$FoundRange$53:
; Line 1102
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _image_offset$[ebp], edx
; Line 1105
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _decoder$[ebp]
	add	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _p$[ebp], eax
; Line 1106
	mov	edx, DWORD PTR _p_limit$[ebp]
	sub	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR _image_offset$[ebp], edx
	jbe	SHORT $LN41@tt_sbit_de
; Line 1107
	jmp	$Failure$55
$LN41@tt_sbit_de:
; Line 1109
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _image_offset$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1110
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 8
	cmp	ecx, DWORD PTR _p_limit$[ebp]
	jbe	SHORT $LN40@tt_sbit_de
; Line 1111
	jmp	$NoBitmap$54
$LN40@tt_sbit_de:
; Line 1114
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _index_format$[ebp], edx
; Line 1115
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _image_format$[ebp], eax
; Line 1116
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _image_offset$[ebp], edx
; Line 1118
	mov	edx, DWORD PTR _index_format$[ebp]
	mov	DWORD PTR tv212[ebp], edx
	mov	eax, DWORD PTR tv212[ebp]
	sub	eax, 1
	mov	DWORD PTR tv212[ebp], eax
	cmp	DWORD PTR tv212[ebp], 18		; 00000012H
	ja	$LN10@tt_sbit_de
	mov	ecx, DWORD PTR tv212[ebp]
	movzx	edx, BYTE PTR $LN48@tt_sbit_de[ecx]
	jmp	DWORD PTR $LN52@tt_sbit_de[edx*4]
$LN37@tt_sbit_de:
; Line 1121
	mov	eax, DWORD PTR _glyph_index$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _p$[ebp], edx
; Line 1122
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	cmp	eax, DWORD PTR _p_limit$[ebp]
	jbe	SHORT $LN36@tt_sbit_de
; Line 1123
	jmp	$NoBitmap$54
$LN36@tt_sbit_de:
; Line 1125
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _image_start$[ebp], edx
; Line 1126
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _image_end$[ebp], eax
; Line 1128
	mov	eax, DWORD PTR _image_start$[ebp]
	cmp	eax, DWORD PTR _image_end$[ebp]
	jne	SHORT $LN35@tt_sbit_de
; Line 1129
	jmp	$NoBitmap$54
$LN35@tt_sbit_de:
; Line 1130
	jmp	$LN38@tt_sbit_de
$LN34@tt_sbit_de:
; Line 1137
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	ecx, DWORD PTR _p_limit$[ebp]
	jbe	SHORT $LN33@tt_sbit_de
; Line 1138
	jmp	$NoBitmap$54
$LN33@tt_sbit_de:
; Line 1140
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _image_size$8[ebp], eax
; Line 1142
	push	1
	mov	eax, DWORD PTR _p_limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_tt_sbit_decoder_load_metrics
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN32@tt_sbit_de
; Line 1143
	jmp	$NoBitmap$54
$LN32@tt_sbit_de:
; Line 1145
	mov	eax, DWORD PTR _glyph_index$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	imul	eax, DWORD PTR _image_size$8[ebp]
	mov	DWORD PTR _image_start$[ebp], eax
; Line 1146
	mov	ecx, DWORD PTR _image_start$[ebp]
	add	ecx, DWORD PTR _image_size$8[ebp]
	mov	DWORD PTR _image_end$[ebp], ecx
; Line 1148
	jmp	$LN38@tt_sbit_de
$LN31@tt_sbit_de:
; Line 1151
	mov	edx, DWORD PTR _glyph_index$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1152
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	cmp	edx, DWORD PTR _p_limit$[ebp]
	jbe	SHORT $LN30@tt_sbit_de
; Line 1153
	jmp	$NoBitmap$54
$LN30@tt_sbit_de:
; Line 1155
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _image_start$[ebp], eax
; Line 1156
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _image_end$[ebp], ecx
; Line 1158
	mov	edx, DWORD PTR _image_start$[ebp]
	cmp	edx, DWORD PTR _image_end$[ebp]
	jne	SHORT $LN29@tt_sbit_de
; Line 1159
	jmp	$NoBitmap$54
$LN29@tt_sbit_de:
; Line 1160
	jmp	$LN38@tt_sbit_de
$LN28@tt_sbit_de:
; Line 1167
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	cmp	eax, DWORD PTR _p_limit$[ebp]
	jbe	SHORT $LN27@tt_sbit_de
; Line 1168
	jmp	$NoBitmap$54
$LN27@tt_sbit_de:
; Line 1170
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _num_glyphs$6[ebp], edx
; Line 1174
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	cmp	edx, DWORD PTR _p_limit$[ebp]
	ja	SHORT $LN25@tt_sbit_de
	mov	eax, DWORD PTR _p_limit$[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	sar	eax, 2
	sub	eax, 1
	cmp	DWORD PTR _num_glyphs$6[ebp], eax
	jbe	SHORT $LN26@tt_sbit_de
$LN25@tt_sbit_de:
; Line 1175
	jmp	$NoBitmap$54
$LN26@tt_sbit_de:
; Line 1177
	mov	DWORD PTR _mm$7[ebp], 0
	jmp	SHORT $LN24@tt_sbit_de
$LN23@tt_sbit_de:
	mov	ecx, DWORD PTR _mm$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _mm$7[ebp], ecx
$LN24@tt_sbit_de:
	mov	edx, DWORD PTR _mm$7[ebp]
	cmp	edx, DWORD PTR _num_glyphs$6[ebp]
	jae	$LN22@tt_sbit_de
; Line 1179
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _gindex$5[ebp], eax
; Line 1182
	mov	ecx, DWORD PTR _gindex$5[ebp]
	cmp	ecx, DWORD PTR _glyph_index$[ebp]
	jne	SHORT $LN21@tt_sbit_de
; Line 1184
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _image_start$[ebp], edx
; Line 1185
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 1186
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _image_end$[ebp], eax
; Line 1187
	jmp	SHORT $LN22@tt_sbit_de
$LN21@tt_sbit_de:
; Line 1189
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
; Line 1190
	jmp	$LN23@tt_sbit_de
$LN22@tt_sbit_de:
; Line 1192
	mov	edx, DWORD PTR _mm$7[ebp]
	cmp	edx, DWORD PTR _num_glyphs$6[ebp]
	jb	SHORT $LN20@tt_sbit_de
; Line 1193
	jmp	$NoBitmap$54
$LN20@tt_sbit_de:
; Line 1195
	jmp	$LN38@tt_sbit_de
$LN19@tt_sbit_de:
; Line 1203
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 16					; 00000010H
	cmp	eax, DWORD PTR _p_limit$[ebp]
	jbe	SHORT $LN18@tt_sbit_de
; Line 1204
	jmp	$NoBitmap$54
$LN18@tt_sbit_de:
; Line 1206
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _image_size$4[ebp], edx
; Line 1208
	push	1
	mov	edx, DWORD PTR _p_limit$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_tt_sbit_decoder_load_metrics
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN17@tt_sbit_de
; Line 1209
	jmp	$NoBitmap$54
$LN17@tt_sbit_de:
; Line 1211
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _num_glyphs$2[ebp], eax
; Line 1214
	mov	eax, DWORD PTR _p_limit$[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	sar	eax, 1
	cmp	DWORD PTR _num_glyphs$2[ebp], eax
	jbe	SHORT $LN16@tt_sbit_de
; Line 1215
	jmp	$NoBitmap$54
$LN16@tt_sbit_de:
; Line 1217
	mov	DWORD PTR _mm$3[ebp], 0
	jmp	SHORT $LN15@tt_sbit_de
$LN14@tt_sbit_de:
	mov	ecx, DWORD PTR _mm$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _mm$3[ebp], ecx
$LN15@tt_sbit_de:
	mov	edx, DWORD PTR _mm$3[ebp]
	cmp	edx, DWORD PTR _num_glyphs$2[ebp]
	jae	SHORT $LN13@tt_sbit_de
; Line 1219
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _gindex$1[ebp], eax
; Line 1222
	mov	ecx, DWORD PTR _gindex$1[ebp]
	cmp	ecx, DWORD PTR _glyph_index$[ebp]
	jne	SHORT $LN12@tt_sbit_de
; Line 1223
	jmp	SHORT $LN13@tt_sbit_de
$LN12@tt_sbit_de:
; Line 1224
	jmp	SHORT $LN14@tt_sbit_de
$LN13@tt_sbit_de:
; Line 1226
	mov	edx, DWORD PTR _mm$3[ebp]
	cmp	edx, DWORD PTR _num_glyphs$2[ebp]
	jb	SHORT $LN11@tt_sbit_de
; Line 1227
	jmp	$NoBitmap$54
$LN11@tt_sbit_de:
; Line 1229
	mov	eax, DWORD PTR _image_size$4[ebp]
	imul	eax, DWORD PTR _mm$3[ebp]
	mov	DWORD PTR _image_start$[ebp], eax
; Line 1230
	mov	ecx, DWORD PTR _image_start$[ebp]
	add	ecx, DWORD PTR _image_size$4[ebp]
	mov	DWORD PTR _image_end$[ebp], ecx
; Line 1232
	jmp	SHORT $LN38@tt_sbit_de
$LN10@tt_sbit_de:
; Line 1235
	jmp	$NoBitmap$54
$LN38@tt_sbit_de:
; Line 1238
	mov	edx, DWORD PTR _image_start$[ebp]
	cmp	edx, DWORD PTR _image_end$[ebp]
	jbe	SHORT $LN9@tt_sbit_de
; Line 1239
	jmp	SHORT $NoBitmap$54
$LN9@tt_sbit_de:
; Line 1241
	mov	eax, DWORD PTR _image_end$[ebp]
	sub	eax, DWORD PTR _image_start$[ebp]
	mov	DWORD PTR _image_end$[ebp], eax
; Line 1242
	mov	ecx, DWORD PTR _image_offset$[ebp]
	add	ecx, DWORD PTR _image_start$[ebp]
	mov	DWORD PTR _image_start$[ebp], ecx
$LN8@tt_sbit_de:
; Line 1246
	mov	edx, 4
	imul	eax, edx, 25
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN7@tt_sbit_de
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _image_format$[ebp]
	push	edx
	push	OFFSET $SG15597
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN7@tt_sbit_de:
	xor	eax, eax
	jne	SHORT $LN8@tt_sbit_de
; Line 1253
	mov	ecx, DWORD PTR _y_pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _image_end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _image_start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _image_format$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_tt_sbit_decoder_load_bitmap
	add	esp, 24					; 00000018H
	jmp	SHORT $LN46@tt_sbit_de
$Failure$55:
; Line 1256
	push	OFFSET $SG15598
	push	1256					; 000004e8H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	jmp	SHORT $LN46@tt_sbit_de
$NoBitmap$54:
; Line 1260
	mov	ecx, 4
	imul	edx, ecx, 25
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN3@tt_sbit_de
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	push	OFFSET $SG15603
	call	_FT_Message
	add	esp, 8
$LN3@tt_sbit_de:
	xor	ecx, ecx
	jne	SHORT $NoBitmap$54
; Line 1262
	push	OFFSET $SG15604
	push	1262					; 000004eeH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
$LN46@tt_sbit_de:
; Line 1263
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN51@tt_sbit_de
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN51@tt_sbit_de:
	DD	1
	DD	$LN50@tt_sbit_de
$LN50@tt_sbit_de:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN49@tt_sbit_de
$LN49@tt_sbit_de:
	DB	112					; 00000070H
	DB	0
	npad	2
$LN52@tt_sbit_de:
	DD	$LN37@tt_sbit_de
	DD	$LN34@tt_sbit_de
	DD	$LN31@tt_sbit_de
	DD	$LN28@tt_sbit_de
	DD	$LN19@tt_sbit_de
	DD	$LN10@tt_sbit_de
$LN48@tt_sbit_de:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_tt_sbit_decoder_load_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_metrics$ = -8						; size = 4
_p$ = -4						; size = 4
_decoder$ = 8						; size = 4
_pp$ = 12						; size = 4
_limit$ = 16						; size = 4
_big$ = 20						; size = 1
_tt_sbit_decoder_load_metrics PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 497
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 498
	mov	eax, DWORD PTR _pp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
; Line 499
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _metrics$[ebp], eax
; Line 502
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 5
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN8@tt_sbit_de
; Line 503
	jmp	$Fail$11
$LN8@tt_sbit_de:
; Line 505
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	dx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [eax], dx
; Line 506
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 507
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movsx	cx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 508
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _p$[ebp]
	movsx	ax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [ecx+6], ax
; Line 509
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _p$[ebp]
	movzx	cx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [edx+8], cx
; Line 511
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 5
	mov	DWORD PTR _p$[ebp], eax
; Line 512
	movzx	ecx, BYTE PTR _big$[ebp]
	test	ecx, ecx
	je	SHORT $LN7@tt_sbit_de
; Line 514
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 3
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN6@tt_sbit_de
; Line 515
	jmp	SHORT $Fail$11
$LN6@tt_sbit_de:
; Line 517
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movsx	ax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [ecx+10], ax
; Line 518
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movsx	cx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [edx+12], cx
; Line 519
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	dx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [eax+14], dx
; Line 521
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$[ebp], ecx
; Line 523
	jmp	SHORT $LN5@tt_sbit_de
$LN7@tt_sbit_de:
; Line 526
	xor	edx, edx
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [eax+10], dx
; Line 527
	xor	ecx, ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [edx+12], cx
; Line 528
	xor	eax, eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [ecx+14], ax
$LN5@tt_sbit_de:
; Line 531
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 532
	mov	eax, DWORD PTR _pp$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 533
	xor	eax, eax
	jmp	SHORT $LN9@tt_sbit_de
$Fail$11:
; Line 536
	mov	edx, 4
	imul	eax, edx, 25
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN3@tt_sbit_de
	push	OFFSET $SG15092
	call	_FT_Message
	add	esp, 4
$LN3@tt_sbit_de:
	xor	ecx, ecx
	jne	SHORT $Fail$11
; Line 537
	push	OFFSET $SG15093
	push	537					; 00000219H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
$LN9@tt_sbit_de:
; Line 538
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_sbit_decoder_load_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv83 = -24						; size = 4
_size$ = -20						; size = 4
_map$ = -16						; size = 4
_height$ = -12						; size = 4
_width$ = -8						; size = 4
_error$ = -4						; size = 4
_decoder$ = 8						; size = 4
_tt_sbit_decoder_alloc_bitmap PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 419
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 420
	mov	DWORD PTR _error$[ebp], 0
; Line 422
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _map$[ebp], ecx
; Line 426
	mov	edx, DWORD PTR _decoder$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	jne	SHORT $LN11@tt_sbit_de
; Line 428
	push	OFFSET $SG15050
	push	428					; 000001acH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 429
	jmp	$Exit$16
$LN11@tt_sbit_de:
; Line 432
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movzx	eax, WORD PTR [edx+2]
	mov	DWORD PTR _width$[ebp], eax
; Line 433
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR _height$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 436
	mov	eax, DWORD PTR _map$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 438
	mov	edx, DWORD PTR _decoder$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv83[ebp], ecx
	cmp	DWORD PTR tv83[ebp], 31			; 0000001fH
	ja	$LN3@tt_sbit_de
	mov	edx, DWORD PTR tv83[ebp]
	movzx	eax, BYTE PTR $LN14@tt_sbit_de[edx]
	jmp	DWORD PTR $LN15@tt_sbit_de[eax*4]
$LN8@tt_sbit_de:
; Line 441
	mov	ecx, DWORD PTR _map$[ebp]
	mov	BYTE PTR [ecx+18], 1
; Line 442
	mov	edx, DWORD PTR _map$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 7
	shr	eax, 3
	mov	ecx, DWORD PTR _map$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 443
	mov	edx, 2
	mov	eax, DWORD PTR _map$[ebp]
	mov	WORD PTR [eax+16], dx
; Line 444
	jmp	$LN9@tt_sbit_de
$LN7@tt_sbit_de:
; Line 447
	mov	ecx, DWORD PTR _map$[ebp]
	mov	BYTE PTR [ecx+18], 3
; Line 448
	mov	edx, DWORD PTR _map$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 3
	shr	eax, 2
	mov	ecx, DWORD PTR _map$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 449
	mov	edx, 4
	mov	eax, DWORD PTR _map$[ebp]
	mov	WORD PTR [eax+16], dx
; Line 450
	jmp	$LN9@tt_sbit_de
$LN6@tt_sbit_de:
; Line 453
	mov	ecx, DWORD PTR _map$[ebp]
	mov	BYTE PTR [ecx+18], 4
; Line 454
	mov	edx, DWORD PTR _map$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	shr	eax, 1
	mov	ecx, DWORD PTR _map$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 455
	mov	edx, 16					; 00000010H
	mov	eax, DWORD PTR _map$[ebp]
	mov	WORD PTR [eax+16], dx
; Line 456
	jmp	SHORT $LN9@tt_sbit_de
$LN5@tt_sbit_de:
; Line 459
	mov	ecx, DWORD PTR _map$[ebp]
	mov	BYTE PTR [ecx+18], 2
; Line 460
	mov	edx, DWORD PTR _map$[ebp]
	mov	eax, DWORD PTR _map$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
; Line 461
	mov	edx, 256				; 00000100H
	mov	eax, DWORD PTR _map$[ebp]
	mov	WORD PTR [eax+16], dx
; Line 462
	jmp	SHORT $LN9@tt_sbit_de
$LN4@tt_sbit_de:
; Line 465
	mov	ecx, DWORD PTR _map$[ebp]
	mov	BYTE PTR [ecx+18], 7
; Line 466
	mov	edx, DWORD PTR _map$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	mov	ecx, DWORD PTR _map$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 467
	mov	edx, 256				; 00000100H
	mov	eax, DWORD PTR _map$[ebp]
	mov	WORD PTR [eax+16], dx
; Line 468
	jmp	SHORT $LN9@tt_sbit_de
$LN3@tt_sbit_de:
; Line 471
	push	OFFSET $SG15064
	push	471					; 000001d7H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 472
	jmp	SHORT $Exit$16
$LN9@tt_sbit_de:
; Line 475
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR _map$[ebp]
	mov	eax, DWORD PTR [ecx]
	imul	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _size$[ebp], eax
; Line 478
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN2@tt_sbit_de
; Line 479
	jmp	SHORT $Exit$16
$LN2@tt_sbit_de:
; Line 481
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	_ft_glyphslot_alloc_bitmap
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 482
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@tt_sbit_de
; Line 483
	jmp	SHORT $Exit$16
$LN1@tt_sbit_de:
; Line 485
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	BYTE PTR [edx+17], 1
$Exit$16:
; Line 488
	mov	eax, DWORD PTR _error$[ebp]
; Line 489
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@tt_sbit_de:
	DD	$LN8@tt_sbit_de
	DD	$LN7@tt_sbit_de
	DD	$LN6@tt_sbit_de
	DD	$LN5@tt_sbit_de
	DD	$LN4@tt_sbit_de
	DD	$LN3@tt_sbit_de
$LN14@tt_sbit_de:
	DB	0
	DB	1
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_tt_sbit_decoder_alloc_bitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_tt_sbit_decoder_done PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 412
	push	ebp
	mov	ebp, esp
; Line 413
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR _decoder$[ebp], eax
; Line 414
	pop	ebp
	ret	0
_tt_sbit_decoder_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$1 = -24						; size = 4
_ebdt_size$ = -16					; size = 4
_stream$ = -8						; size = 4
_error$ = -4						; size = 4
_decoder$ = 8						; size = 4
_face$ = 12						; size = 4
_strike_index$ = 16					; size = 4
_metrics$ = 20						; size = 4
_tt_sbit_decoder_init PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 350
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 352
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 356
	mov	esi, esp
	lea	edx, DWORD PTR _ebdt_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	1128416340				; 43424454H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 357
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@tt_sbit_de
; Line 358
	mov	esi, esp
	lea	ecx, DWORD PTR _ebdt_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	1161970772				; 45424454H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN6@tt_sbit_de:
; Line 359
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@tt_sbit_de
; Line 360
	mov	esi, esp
	lea	eax, DWORD PTR _ebdt_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1650745716				; 62646174H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN5@tt_sbit_de:
; Line 361
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@tt_sbit_de
; Line 362
	jmp	$Exit$12
$LN4@tt_sbit_de:
; Line 364
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx], eax
; Line 365
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 366
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 367
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 369
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	BYTE PTR [edx+16], 0
; Line 370
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	BYTE PTR [eax+17], 0
; Line 372
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 373
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _ebdt_size$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 375
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+724]
	mov	DWORD PTR [edx+36], ecx
; Line 376
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+724]
	mov	ecx, DWORD PTR _face$[ebp]
	add	eax, DWORD PTR [ecx+728]
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 383
	imul	eax, DWORD PTR _strike_index$[ebp], 48
	add	eax, 55					; 00000037H
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	eax, DWORD PTR [ecx+728]
	jbe	SHORT $LN3@tt_sbit_de
; Line 385
	push	OFFSET $SG15012
	push	385					; 00000181H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 386
	jmp	$Exit$12
$LN3@tt_sbit_de:
; Line 389
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	ecx, DWORD PTR _strike_index$[ebp], 48
	lea	edx, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR _p$1[ebp], edx
; Line 391
	mov	eax, DWORD PTR _p$1[ebp]
	add	eax, 4
	mov	DWORD PTR _p$1[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$1[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$1[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$1[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$1[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 392
	mov	eax, DWORD PTR _p$1[ebp]
	add	eax, 4
	mov	DWORD PTR _p$1[ebp], eax
; Line 393
	mov	ecx, DWORD PTR _p$1[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$1[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$1[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$1[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$1[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$1[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 394
	mov	ecx, DWORD PTR _p$1[ebp]
	add	ecx, 34					; 00000022H
	mov	DWORD PTR _p$1[ebp], ecx
; Line 395
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _p$1[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx+18], cl
; Line 401
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	cmp	ecx, DWORD PTR [eax+728]
	ja	SHORT $LN1@tt_sbit_de
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [edx+728]
	sub	ecx, DWORD PTR [eax+28]
	shr	ecx, 3
	mov	edx, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [edx+32], ecx
	jbe	SHORT $Exit$12
$LN1@tt_sbit_de:
; Line 402
	push	OFFSET $SG15035
	push	402					; 00000192H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$Exit$12:
; Line 406
	mov	eax, DWORD PTR _error$[ebp]
; Line 407
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@tt_sbit_de
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN11@tt_sbit_de:
	DD	1
	DD	$LN10@tt_sbit_de
$LN10@tt_sbit_de:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN9@tt_sbit_de
$LN9@tt_sbit_de:
	DB	101					; 00000065H
	DB	98					; 00000062H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_tt_sbit_decoder_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_module_interface$ = 12					; size = 4
_sfnt_get_interface PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfdriver.c
; Line 429
	push	ebp
	mov	ebp, esp
; Line 441
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 444
	mov	ecx, DWORD PTR _module_interface$[ebp]
	push	ecx
	push	OFFSET _sfnt_services
	call	_ft_service_list_lookup
	add	esp, 8
; Line 445
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sfnt_get_interface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -36						; size = 4
_registry$ = -28					; size = 8
_encoding$ = -12					; size = 8
_face$ = 8						; size = 4
_acharset_encoding$ = 12				; size = 4
_acharset_registry$ = 16				; size = 4
_sfnt_get_charset_id PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfdriver.c
; Line 350
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 361
	lea	eax, DWORD PTR _registry$[ebp]
	push	eax
	push	OFFSET $SG14699
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_find_bdf_prop
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 362
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN4@sfnt_get_c
; Line 364
	lea	edx, DWORD PTR _encoding$[ebp]
	push	edx
	push	OFFSET $SG14701
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_find_bdf_prop
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 365
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN4@sfnt_get_c
; Line 368
	cmp	DWORD PTR _registry$[ebp], 1
	jne	SHORT $LN2@sfnt_get_c
	cmp	DWORD PTR _encoding$[ebp], 1
	jne	SHORT $LN2@sfnt_get_c
; Line 370
	mov	ecx, DWORD PTR _acharset_encoding$[ebp]
	mov	edx, DWORD PTR _encoding$[ebp+4]
	mov	DWORD PTR [ecx], edx
; Line 371
	mov	eax, DWORD PTR _acharset_registry$[ebp]
	mov	ecx, DWORD PTR _registry$[ebp+4]
	mov	DWORD PTR [eax], ecx
; Line 373
	jmp	SHORT $LN4@sfnt_get_c
$LN2@sfnt_get_c:
; Line 374
	push	OFFSET $SG14705
	push	374					; 00000176H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
$LN4@sfnt_get_c:
; Line 378
	mov	eax, DWORD PTR _error$[ebp]
; Line 379
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@sfnt_get_c
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@sfnt_get_c:
	DD	2
	DD	$LN9@sfnt_get_c
$LN9@sfnt_get_c:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN7@sfnt_get_c
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN8@sfnt_get_c
$LN8@sfnt_get_c:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
$LN7@sfnt_get_c:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_sfnt_get_charset_id ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$1 = -84						; size = 4
_error$2 = -76						; size = 4
_len$3 = -68						; size = 4
_name$4 = -64						; size = 4
_memory$5 = -60						; size = 4
_p$6 = -56						; size = 4
_r$7 = -52						; size = 4
_stream$8 = -48						; size = 4
_error$9 = -40						; size = 4
_len$10 = -32						; size = 4
_name$11 = -28						; size = 4
_memory$12 = -24					; size = 4
_name$13 = -20						; size = 4
_result$ = -16						; size = 4
_found_apple$ = -12					; size = 4
_found_win$ = -8					; size = 4
_n$ = -4						; size = 4
_face$ = 8						; size = 4
_sfnt_get_ps_name PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfdriver.c
; Line 222
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 224
	mov	DWORD PTR _result$[ebp], 0
; Line 228
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+664], 0
	je	SHORT $LN31@sfnt_get_p
; Line 229
	mov	ecx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [ecx+664]
	jmp	$LN32@sfnt_get_p
$LN31@sfnt_get_p:
; Line 233
	mov	DWORD PTR _found_win$[ebp], -1
; Line 234
	mov	DWORD PTR _found_apple$[ebp], -1
; Line 236
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN30@sfnt_get_p
$LN29@sfnt_get_p:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN30@sfnt_get_p:
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+340]
	cmp	DWORD PTR _n$[ebp], ecx
	jge	SHORT $LN28@sfnt_get_p
; Line 238
	imul	edx, DWORD PTR _n$[ebp], 20
	mov	eax, DWORD PTR _face$[ebp]
	add	edx, DWORD PTR [eax+356]
	mov	DWORD PTR _name$13[ebp], edx
; Line 241
	mov	ecx, DWORD PTR _name$13[ebp]
	movzx	edx, WORD PTR [ecx+6]
	cmp	edx, 6
	jne	SHORT $LN27@sfnt_get_p
	mov	eax, DWORD PTR _name$13[ebp]
	movzx	ecx, WORD PTR [eax+8]
	test	ecx, ecx
	jle	SHORT $LN27@sfnt_get_p
; Line 245
	mov	edx, DWORD PTR _name$13[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 3
	jne	SHORT $LN26@sfnt_get_p
	mov	ecx, DWORD PTR _name$13[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	edx, 1
	jne	SHORT $LN26@sfnt_get_p
	mov	eax, DWORD PTR _name$13[ebp]
	movzx	ecx, WORD PTR [eax+4]
	cmp	ecx, 1033				; 00000409H
	jne	SHORT $LN26@sfnt_get_p
; Line 246
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _found_win$[ebp], edx
$LN26@sfnt_get_p:
; Line 250
	mov	eax, DWORD PTR _name$13[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN27@sfnt_get_p
	mov	edx, DWORD PTR _name$13[ebp]
	movzx	eax, WORD PTR [edx+2]
	test	eax, eax
	jne	SHORT $LN27@sfnt_get_p
	mov	ecx, DWORD PTR _name$13[ebp]
	movzx	edx, WORD PTR [ecx+4]
	test	edx, edx
	jne	SHORT $LN27@sfnt_get_p
; Line 251
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _found_apple$[ebp], eax
$LN27@sfnt_get_p:
; Line 253
	jmp	$LN29@sfnt_get_p
$LN28@sfnt_get_p:
; Line 255
	cmp	DWORD PTR _found_win$[ebp], -1
	je	$LN24@sfnt_get_p
; Line 257
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$12[ebp], edx
; Line 258
	imul	eax, DWORD PTR _found_win$[ebp], 20
	mov	ecx, DWORD PTR _face$[ebp]
	add	eax, DWORD PTR [ecx+356]
	mov	DWORD PTR _name$11[ebp], eax
; Line 259
	mov	edx, DWORD PTR _name$11[ebp]
	movzx	eax, WORD PTR [edx+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _len$10[ebp], eax
; Line 260
	mov	DWORD PTR _error$9[ebp], 0
; Line 262
	mov	eax, DWORD PTR _error$9[ebp]
	mov	DWORD PTR _error$9[ebp], eax
; Line 265
	lea	ecx, DWORD PTR _error$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$11[ebp]
	movzx	eax, WORD PTR [edx+8]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _memory$12[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _error$9[ebp], 0
	jne	$LN23@sfnt_get_p
; Line 267
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+360]
	mov	DWORD PTR _stream$8[ebp], eax
; Line 268
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR _r$7[ebp], ecx
; Line 273
	mov	edx, DWORD PTR _name$11[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _stream$8[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$9[ebp], eax
	cmp	DWORD PTR _error$9[ebp], 0
	jne	SHORT $LN20@sfnt_get_p
	mov	edx, DWORD PTR _name$11[ebp]
	movzx	eax, WORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$8[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$9[ebp], eax
	cmp	DWORD PTR _error$9[ebp], 0
	je	SHORT $LN22@sfnt_get_p
$LN20@sfnt_get_p:
; Line 275
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$12[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _result$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN20@sfnt_get_p
; Line 276
	xor	edx, edx
	mov	eax, DWORD PTR _name$11[ebp]
	mov	WORD PTR [eax+8], dx
; Line 277
	mov	ecx, DWORD PTR _name$11[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN17@sfnt_get_p:
; Line 278
	mov	edx, DWORD PTR _name$11[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _memory$12[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _name$11[ebp]
	mov	DWORD PTR [edx+16], 0
	xor	eax, eax
	jne	SHORT $LN17@sfnt_get_p
; Line 280
	jmp	$Exit$38
$LN22@sfnt_get_p:
; Line 283
	mov	ecx, DWORD PTR _stream$8[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _p$6[ebp], edx
; Line 285
	jmp	SHORT $LN14@sfnt_get_p
$LN13@sfnt_get_p:
	mov	eax, DWORD PTR _len$10[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$10[ebp], eax
	mov	ecx, DWORD PTR _p$6[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$6[ebp], ecx
$LN14@sfnt_get_p:
	cmp	DWORD PTR _len$10[ebp], 0
	jbe	SHORT $LN12@sfnt_get_p
; Line 287
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$6[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN11@sfnt_get_p
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$6[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 32					; 00000020H
	jl	SHORT $LN11@sfnt_get_p
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$6[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 128				; 00000080H
	jge	SHORT $LN11@sfnt_get_p
; Line 288
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _r$7[ebp]
	mov	edx, DWORD PTR _p$6[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _r$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _r$7[ebp], ecx
$LN11@sfnt_get_p:
; Line 289
	jmp	SHORT $LN13@sfnt_get_p
$LN12@sfnt_get_p:
; Line 290
	mov	edx, DWORD PTR _r$7[ebp]
	mov	BYTE PTR [edx], 0
; Line 292
	mov	eax, DWORD PTR _stream$8[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
$LN23@sfnt_get_p:
; Line 294
	jmp	$Exit$38
$LN24@sfnt_get_p:
; Line 297
	cmp	DWORD PTR _found_apple$[ebp], -1
	je	$Exit$38
; Line 299
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$5[ebp], edx
; Line 300
	imul	eax, DWORD PTR _found_apple$[ebp], 20
	mov	ecx, DWORD PTR _face$[ebp]
	add	eax, DWORD PTR [ecx+356]
	mov	DWORD PTR _name$4[ebp], eax
; Line 301
	mov	edx, DWORD PTR _name$4[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	DWORD PTR _len$3[ebp], eax
; Line 302
	mov	DWORD PTR _error$2[ebp], 0
; Line 304
	mov	ecx, DWORD PTR _error$2[ebp]
	mov	DWORD PTR _error$2[ebp], ecx
; Line 307
	lea	edx, DWORD PTR _error$2[ebp]
	push	edx
	mov	eax, DWORD PTR _len$3[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _memory$5[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _error$2[ebp], 0
	jne	$Exit$38
; Line 309
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+360]
	mov	DWORD PTR _stream$1[ebp], eax
; Line 313
	mov	ecx, DWORD PTR _name$4[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _stream$1[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$2[ebp], eax
	cmp	DWORD PTR _error$2[ebp], 0
	jne	SHORT $LN7@sfnt_get_p
	mov	ecx, DWORD PTR _len$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$1[ebp]
	push	eax
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$2[ebp], eax
	cmp	DWORD PTR _error$2[ebp], 0
	je	SHORT $LN8@sfnt_get_p
$LN7@sfnt_get_p:
; Line 315
	mov	ecx, DWORD PTR _name$4[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 316
	xor	edx, edx
	mov	eax, DWORD PTR _name$4[ebp]
	mov	WORD PTR [eax+8], dx
$LN6@sfnt_get_p:
; Line 317
	mov	ecx, DWORD PTR _name$4[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _memory$5[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _name$4[ebp]
	mov	DWORD PTR [ecx+16], 0
	xor	edx, edx
	jne	SHORT $LN6@sfnt_get_p
$LN3@sfnt_get_p:
; Line 318
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$5[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _result$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@sfnt_get_p
; Line 319
	jmp	SHORT $Exit$38
$LN8@sfnt_get_p:
; Line 321
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, DWORD PTR _len$3[ebp]
	mov	BYTE PTR [eax], 0
$Exit$38:
; Line 326
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx+664], edx
; Line 327
	mov	eax, DWORD PTR _result$[ebp]
$LN32@sfnt_get_p:
; Line 328
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@sfnt_get_p
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN37@sfnt_get_p:
	DD	2
	DD	$LN36@sfnt_get_p
$LN36@sfnt_get_p:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN34@sfnt_get_p
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN35@sfnt_get_p
$LN35@sfnt_get_p:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN34@sfnt_get_p:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_sfnt_get_ps_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$1 = -28						; size = 4
_gname$2 = -20						; size = 4
_max_gid$ = -12						; size = 4
_i$ = -8						; size = 4
_root$ = -4						; size = 4
_face$ = 8						; size = 4
_glyph_name$ = 12					; size = 4
_sfnt_get_name_index PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfdriver.c
; Line 175
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 176
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _root$[ebp], eax
; Line 178
	mov	DWORD PTR _max_gid$[ebp], -1
; Line 181
	mov	ecx, DWORD PTR _root$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jge	SHORT $LN13@sfnt_get_n
; Line 182
	xor	eax, eax
	jmp	$LN14@sfnt_get_n
	jmp	SHORT $LN12@sfnt_get_n
$LN13@sfnt_get_n:
; Line 183
	mov	edx, DWORD PTR _root$[ebp]
	cmp	DWORD PTR [edx+16], -1
	jae	SHORT $LN9@sfnt_get_n
; Line 184
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _max_gid$[ebp], ecx
; Line 185
	jmp	SHORT $LN12@sfnt_get_n
$LN9@sfnt_get_n:
; Line 187
	mov	edx, 4
	imul	eax, edx, 18
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN8@sfnt_get_n
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	push	-1
	push	OFFSET $SG14605
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN8@sfnt_get_n:
	xor	eax, eax
	jne	SHORT $LN9@sfnt_get_n
$LN12@sfnt_get_n:
; Line 189
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@sfnt_get_n
$LN4@sfnt_get_n:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@sfnt_get_n:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _max_gid$[ebp]
	jae	SHORT $LN3@sfnt_get_n
; Line 192
	lea	eax, DWORD PTR _gname$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_get_ps_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$1[ebp], eax
; Line 195
	cmp	DWORD PTR _error$1[ebp], 0
	je	SHORT $LN2@sfnt_get_n
; Line 196
	jmp	SHORT $LN4@sfnt_get_n
$LN2@sfnt_get_n:
; Line 198
	mov	eax, DWORD PTR _gname$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@sfnt_get_n
; Line 199
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN14@sfnt_get_n
$LN1@sfnt_get_n:
; Line 200
	jmp	SHORT $LN4@sfnt_get_n
$LN3@sfnt_get_n:
; Line 202
	xor	eax, eax
$LN14@sfnt_get_n:
; Line 203
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@sfnt_get_n
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@sfnt_get_n:
	DD	1
	DD	$LN17@sfnt_get_n
$LN17@sfnt_get_n:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN16@sfnt_get_n
$LN16@sfnt_get_n:
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_sfnt_get_name_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -16						; size = 4
_gname$ = -8						; size = 4
_face$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_buffer$ = 16						; size = 4
_buffer_max$ = 20					; size = 4
_sfnt_get_glyph_name PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfdriver.c
; Line 159
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 164
	lea	eax, DWORD PTR _gname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_get_ps_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 165
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@sfnt_get_g
; Line 166
	mov	eax, DWORD PTR _buffer_max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _gname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_ft_mem_strcpyn
	add	esp, 12					; 0000000cH
$LN1@sfnt_get_g:
; Line 168
	mov	eax, DWORD PTR _error$[ebp]
; Line 169
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@sfnt_get_g
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@sfnt_get_g:
	DD	1
	DD	$LN5@sfnt_get_g
$LN5@sfnt_get_g:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@sfnt_get_g
$LN4@sfnt_get_g:
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_sfnt_get_glyph_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_idx$ = 12						; size = 4
_tag$ = 16						; size = 4
_offset$ = 20						; size = 4
_length$ = 24						; size = 4
_sfnt_table_info PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfdriver.c
; Line 120
	push	ebp
	mov	ebp, esp
; Line 121
	cmp	DWORD PTR _offset$[ebp], 0
	je	SHORT $LN4@sfnt_table
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN5@sfnt_table
$LN4@sfnt_table:
; Line 122
	push	OFFSET $SG14561
	push	122					; 0000007aH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN6@sfnt_table
$LN5@sfnt_table:
; Line 124
	cmp	DWORD PTR _tag$[ebp], 0
	jne	SHORT $LN3@sfnt_table
; Line 125
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+152]
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 126
	jmp	SHORT $LN2@sfnt_table
$LN3@sfnt_table:
; Line 128
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+152]
	cmp	DWORD PTR _idx$[ebp], ecx
	jb	SHORT $LN1@sfnt_table
; Line 129
	push	OFFSET $SG14565
	push	129					; 00000081H
	push	142					; 0000008eH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 142				; 0000008eH
	jmp	SHORT $LN6@sfnt_table
$LN1@sfnt_table:
; Line 131
	mov	edx, DWORD PTR _idx$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	eax, DWORD PTR _tag$[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax], ecx
; Line 132
	mov	edx, DWORD PTR _idx$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+8]
	mov	DWORD PTR [eax], ecx
; Line 133
	mov	edx, DWORD PTR _idx$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+12]
	mov	DWORD PTR [eax], ecx
$LN2@sfnt_table:
; Line 136
	xor	eax, eax
$LN6@sfnt_table:
; Line 137
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sfnt_table_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -20						; size = 4
tv76 = -16						; size = 4
tv71 = -12						; size = 4
tv64 = -8						; size = 4
_table$ = -4						; size = 4
_face$ = 8						; size = 4
_tag$ = 12						; size = 4
_get_sfnt_table PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfdriver.c
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 76
	mov	eax, DWORD PTR _tag$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 6
	ja	$LN1@get_sfnt_t
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN19@get_sfnt_t[ecx*4]
$LN8@get_sfnt_t:
; Line 79
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 160				; 000000a0H
	mov	DWORD PTR _table$[ebp], edx
; Line 80
	jmp	$LN9@get_sfnt_t
$LN7@get_sfnt_t:
; Line 83
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 216				; 000000d8H
	mov	DWORD PTR _table$[ebp], eax
; Line 84
	jmp	$LN9@get_sfnt_t
$LN6@get_sfnt_t:
; Line 87
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, BYTE PTR [ecx+292]
	test	edx, edx
	je	SHORT $LN13@get_sfnt_t
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 296				; 00000128H
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN14@get_sfnt_t
$LN13@get_sfnt_t:
	mov	DWORD PTR tv71[ebp], 0
$LN14@get_sfnt_t:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _table$[ebp], ecx
; Line 88
	jmp	SHORT $LN9@get_sfnt_t
$LN5@get_sfnt_t:
; Line 91
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+364]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN15@get_sfnt_t
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN16@get_sfnt_t
$LN15@get_sfnt_t:
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 364				; 0000016cH
	mov	DWORD PTR tv76[ebp], ecx
$LN16@get_sfnt_t:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _table$[ebp], edx
; Line 92
	jmp	SHORT $LN9@get_sfnt_t
$LN4@get_sfnt_t:
; Line 95
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 468				; 000001d4H
	mov	DWORD PTR _table$[ebp], eax
; Line 96
	jmp	SHORT $LN9@get_sfnt_t
$LN3@get_sfnt_t:
; Line 99
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 260				; 00000104H
	mov	DWORD PTR _table$[ebp], ecx
; Line 100
	jmp	SHORT $LN9@get_sfnt_t
$LN2@get_sfnt_t:
; Line 103
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+548], 0
	je	SHORT $LN17@get_sfnt_t
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 548				; 00000224H
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN18@get_sfnt_t
$LN17@get_sfnt_t:
	mov	DWORD PTR tv82[ebp], 0
$LN18@get_sfnt_t:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _table$[ebp], ecx
; Line 104
	jmp	SHORT $LN9@get_sfnt_t
$LN1@get_sfnt_t:
; Line 107
	mov	DWORD PTR _table$[ebp], 0
$LN9@get_sfnt_t:
; Line 110
	mov	eax, DWORD PTR _table$[ebp]
; Line 111
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@get_sfnt_t:
	DD	$LN8@get_sfnt_t
	DD	$LN3@get_sfnt_t
	DD	$LN5@get_sfnt_t
	DD	$LN7@get_sfnt_t
	DD	$LN6@get_sfnt_t
	DD	$LN4@get_sfnt_t
	DD	$LN2@get_sfnt_t
_get_sfnt_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_table$1 = -24						; size = 4
_n$2 = -20						; size = 2
_table$3 = -16						; size = 4
_format$ = -12						; size = 4
_names$ = -8						; size = 4
_memory$ = -4						; size = 4
_face$ = 8						; size = 4
_tt_face_free_ps_names PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttpost.c
; Line 416
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 417
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 418
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 612				; 00000264H
	mov	DWORD PTR _names$[ebp], edx
; Line 422
	mov	eax, DWORD PTR _names$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN19@tt_face_fr
; Line 424
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+468]
	mov	DWORD PTR _format$[ebp], eax
; Line 426
	cmp	DWORD PTR _format$[ebp], 131072		; 00020000H
	jne	$LN18@tt_face_fr
; Line 428
	mov	ecx, DWORD PTR _names$[ebp]
	add	ecx, 4
	mov	DWORD PTR _table$3[ebp], ecx
$LN17@tt_face_fr:
; Line 432
	mov	edx, DWORD PTR _table$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _table$3[ebp]
	mov	DWORD PTR [edx+4], 0
	xor	eax, eax
	jne	SHORT $LN17@tt_face_fr
; Line 433
	xor	ecx, ecx
	mov	edx, DWORD PTR _table$3[ebp]
	mov	WORD PTR [edx], cx
; Line 435
	xor	eax, eax
	mov	WORD PTR _n$2[ebp], ax
	jmp	SHORT $LN14@tt_face_fr
$LN13@tt_face_fr:
	mov	cx, WORD PTR _n$2[ebp]
	add	cx, 1
	mov	WORD PTR _n$2[ebp], cx
$LN14@tt_face_fr:
	movzx	edx, WORD PTR _n$2[ebp]
	mov	eax, DWORD PTR _table$3[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	edx, ecx
	jge	SHORT $LN8@tt_face_fr
$LN11@tt_face_fr:
; Line 436
	movzx	edx, WORD PTR _n$2[ebp]
	mov	eax, DWORD PTR _table$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	movzx	ecx, WORD PTR _n$2[ebp]
	mov	edx, DWORD PTR _table$3[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+ecx*4], 0
	xor	ecx, ecx
	jne	SHORT $LN11@tt_face_fr
	jmp	SHORT $LN13@tt_face_fr
$LN8@tt_face_fr:
; Line 438
	mov	edx, DWORD PTR _table$3[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _table$3[ebp]
	mov	DWORD PTR [edx+8], 0
	xor	eax, eax
	jne	SHORT $LN8@tt_face_fr
; Line 439
	xor	ecx, ecx
	mov	edx, DWORD PTR _table$3[ebp]
	mov	WORD PTR [edx+2], cx
	jmp	SHORT $LN19@tt_face_fr
$LN18@tt_face_fr:
; Line 441
	cmp	DWORD PTR _format$[ebp], 163840		; 00028000H
	jne	SHORT $LN19@tt_face_fr
; Line 443
	mov	eax, DWORD PTR _names$[ebp]
	add	eax, 4
	mov	DWORD PTR _table$1[ebp], eax
$LN3@tt_face_fr:
; Line 446
	mov	ecx, DWORD PTR _table$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _table$1[ebp]
	mov	DWORD PTR [ecx+4], 0
	xor	edx, edx
	jne	SHORT $LN3@tt_face_fr
; Line 447
	xor	eax, eax
	mov	ecx, DWORD PTR _table$1[ebp]
	mov	WORD PTR [ecx], ax
$LN19@tt_face_fr:
; Line 450
	mov	edx, DWORD PTR _names$[ebp]
	mov	BYTE PTR [edx], 0
; Line 451
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_free_ps_names ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_table$1 = -28						; size = 4
_name_index$2 = -24					; size = 2
_table$3 = -20						; size = 4
_psnames$ = -16						; size = 4
_format$ = -12						; size = 4
_names$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_idx$ = 12						; size = 4
_PSname$ = 16						; size = 4
_tt_face_get_ps_name PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttpost.c
; Line 480
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 490
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN17@tt_face_ge
; Line 491
	push	OFFSET $SG15951
	push	491					; 000001ebH
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN18@tt_face_ge
$LN17@tt_face_ge:
; Line 493
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+264]
	cmp	DWORD PTR _idx$[ebp], ecx
	jb	SHORT $LN16@tt_face_ge
; Line 494
	push	OFFSET $SG15954
	push	494					; 000001eeH
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	jmp	$LN18@tt_face_ge
$LN16@tt_face_ge:
; Line 497
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+536]
	mov	DWORD PTR _psnames$[ebp], eax
; Line 498
	cmp	DWORD PTR _psnames$[ebp], 0
	jne	SHORT $LN15@tt_face_ge
; Line 499
	push	OFFSET $SG15957
	push	499					; 000001f3H
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	jmp	$LN18@tt_face_ge
$LN15@tt_face_ge:
; Line 502
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 612				; 00000264H
	mov	DWORD PTR _names$[ebp], ecx
; Line 505
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _psnames$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _PSname$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 507
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+468]
	mov	DWORD PTR _format$[ebp], eax
; Line 509
	cmp	DWORD PTR _format$[ebp], 65536		; 00010000H
	jne	SHORT $LN14@tt_face_ge
; Line 511
	cmp	DWORD PTR _idx$[ebp], 258		; 00000102H
	jae	SHORT $LN13@tt_face_ge
; Line 512
	mov	esi, esp
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psnames$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _PSname$[ebp]
	mov	DWORD PTR [ecx], eax
$LN13@tt_face_ge:
; Line 514
	jmp	$End$20
$LN14@tt_face_ge:
	cmp	DWORD PTR _format$[ebp], 131072		; 00020000H
	jne	$LN11@tt_face_ge
; Line 516
	mov	edx, DWORD PTR _names$[ebp]
	add	edx, 4
	mov	DWORD PTR _table$3[ebp], edx
; Line 519
	mov	eax, DWORD PTR _names$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN10@tt_face_ge
; Line 521
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_load_post_names
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 522
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@tt_face_ge
; Line 523
	jmp	$End$20
$LN10@tt_face_ge:
; Line 526
	mov	eax, DWORD PTR _table$3[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	DWORD PTR _idx$[ebp], ecx
	jae	SHORT $LN8@tt_face_ge
; Line 528
	mov	edx, DWORD PTR _table$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _name_index$2[ebp], dx
; Line 531
	movzx	eax, WORD PTR _name_index$2[ebp]
	cmp	eax, 258				; 00000102H
	jge	SHORT $LN7@tt_face_ge
; Line 532
	movzx	ecx, WORD PTR _name_index$2[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _psnames$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _PSname$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 533
	jmp	SHORT $LN8@tt_face_ge
$LN7@tt_face_ge:
; Line 534
	movzx	edx, WORD PTR _name_index$2[ebp]
	mov	eax, DWORD PTR _table$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _PSname$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4-1032]
	mov	DWORD PTR [eax], ecx
$LN8@tt_face_ge:
; Line 535
	jmp	SHORT $End$20
$LN11@tt_face_ge:
; Line 537
	cmp	DWORD PTR _format$[ebp], 163840		; 00028000H
	jne	SHORT $End$20
; Line 539
	mov	edx, DWORD PTR _names$[ebp]
	add	edx, 4
	mov	DWORD PTR _table$1[ebp], edx
; Line 542
	mov	eax, DWORD PTR _names$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@tt_face_ge
; Line 544
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_load_post_names
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 545
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@tt_face_ge
; Line 546
	jmp	SHORT $End$20
$LN3@tt_face_ge:
; Line 549
	mov	eax, DWORD PTR _table$1[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	DWORD PTR _idx$[ebp], ecx
	jae	SHORT $End$20
; Line 551
	mov	edx, DWORD PTR _table$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _idx$[ebp]
	movsx	edx, BYTE PTR [eax+ecx]
	add	edx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR _idx$[ebp], edx
; Line 552
	mov	esi, esp
	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psnames$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _PSname$[ebp]
	mov	DWORD PTR [ecx], eax
$End$20:
; Line 559
	xor	eax, eax
$LN18@tt_face_ge:
; Line 560
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_get_ps_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv65 = -96						; size = 4
_library$1 = -92					; size = 4
_new_map$2 = -84					; size = 24
_decoder$3 = -52					; size = 44
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_strike_index$ = 12					; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_stream$ = 24						; size = 4
_map$ = 28						; size = 4
_metrics$ = 32						; size = 4
_tt_face_load_sbit_image PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 1398
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1399
	mov	DWORD PTR _error$[ebp], 0
; Line 1402
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 0
	jbe	SHORT $LN4@tt_face_lo
	cmp	DWORD PTR tv65[ebp], 2
	jbe	SHORT $LN7@tt_face_lo
	cmp	DWORD PTR tv65[ebp], 3
	je	SHORT $LN5@tt_face_lo
	jmp	SHORT $LN4@tt_face_lo
$LN7@tt_face_lo:
; Line 1410
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	mov	eax, DWORD PTR _strike_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoder$3[ebp]
	push	edx
	call	_tt_sbit_decoder_init
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1411
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN6@tt_face_lo
; Line 1416
	push	0
	push	0
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	lea	ecx, DWORD PTR _decoder$3[ebp]
	push	ecx
	call	_tt_sbit_decoder_load_image
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1417
	lea	edx, DWORD PTR _decoder$3[ebp]
	push	edx
	call	_tt_sbit_decoder_done
	add	esp, 4
$LN6@tt_face_lo:
; Line 1420
	jmp	SHORT $LN8@tt_face_lo
$LN5@tt_face_lo:
; Line 1428
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _map$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strike_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_load_sbix_image
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 1429
	jmp	SHORT $LN8@tt_face_lo
$LN4@tt_face_lo:
; Line 1432
	push	OFFSET $SG15742
	push	1432					; 00000598H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
$LN8@tt_face_lo:
; Line 1439
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN3@tt_face_lo
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 1048576				; 00100000H
	jne	$LN3@tt_face_lo
	mov	ecx, DWORD PTR _map$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	cmp	edx, 7
	jne	$LN3@tt_face_lo
; Line 1442
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _library$1[ebp], edx
; Line 1445
	lea	eax, DWORD PTR _new_map$2[ebp]
	push	eax
	call	_FT_Bitmap_New
	add	esp, 4
; Line 1448
	push	1
	lea	ecx, DWORD PTR _new_map$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _map$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$1[ebp]
	push	eax
	call	_FT_Bitmap_Convert
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1449
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@tt_face_lo
; Line 1450
	lea	ecx, DWORD PTR _new_map$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$1[ebp]
	push	edx
	call	_FT_Bitmap_Done
	add	esp, 8
; Line 1451
	jmp	SHORT $LN3@tt_face_lo
$LN2@tt_face_lo:
; Line 1453
	mov	eax, DWORD PTR _map$[ebp]
	mov	cl, BYTE PTR _new_map$2[ebp+18]
	mov	BYTE PTR [eax+18], cl
; Line 1454
	mov	edx, DWORD PTR _map$[ebp]
	mov	eax, DWORD PTR _new_map$2[ebp+8]
	mov	DWORD PTR [edx+8], eax
; Line 1455
	mov	ecx, DWORD PTR _map$[ebp]
	mov	dx, WORD PTR _new_map$2[ebp+16]
	mov	WORD PTR [ecx+16], dx
; Line 1457
	mov	eax, DWORD PTR _new_map$2[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	call	_ft_glyphslot_set_bitmap
	add	esp, 8
; Line 1458
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR [edx+4]
	or	eax, 1
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	ecx, DWORD PTR [edx+156]
	mov	DWORD PTR [ecx+4], eax
$LN3@tt_face_lo:
; Line 1462
	mov	eax, DWORD PTR _error$[ebp]
; Line 1463
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@tt_face_lo:
	DD	2
	DD	$LN14@tt_face_lo
$LN14@tt_face_lo:
	DD	-52					; ffffffccH
	DD	44					; 0000002cH
	DD	$LN12@tt_face_lo
	DD	-84					; ffffffacH
	DD	24					; 00000018H
	DD	$LN13@tt_face_lo
$LN13@tt_face_lo:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN12@tt_face_lo:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_tt_face_load_sbit_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -52						; size = 4
_p$1 = -48						; size = 4
_error$2 = -44						; size = 4
_table_size$3 = -36					; size = 4
_hori$4 = -28						; size = 4
_resolution$5 = -24					; size = 2
_ppem$6 = -20						; size = 2
_upem$7 = -16						; size = 4
_offset$8 = -12						; size = 4
_stream$9 = -8						; size = 4
_strike$10 = -4						; size = 4
_face$ = 8						; size = 4
_strike_index$ = 12					; size = 4
_metrics$ = 16						; size = 4
_tt_face_load_strike_metrics PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 241
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _strike_index$[ebp]
	cmp	ecx, DWORD PTR [eax+736]
	jb	SHORT $LN10@tt_face_lo
; Line 242
	push	OFFSET $SG14912
	push	242					; 000000f2H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN11@tt_face_lo
$LN10@tt_face_lo:
; Line 244
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+732]
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 0
	jbe	$LN1@tt_face_lo
	cmp	DWORD PTR tv72[ebp], 2
	jbe	SHORT $LN7@tt_face_lo
	cmp	DWORD PTR tv72[ebp], 3
	je	$LN6@tt_face_lo
	jmp	$LN1@tt_face_lo
$LN7@tt_face_lo:
; Line 252
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+724]
	imul	eax, DWORD PTR _strike_index$[ebp], 48
	lea	ecx, DWORD PTR [edx+eax+8]
	mov	DWORD PTR _strike$10[ebp], ecx
; Line 254
	mov	edx, 1
	imul	eax, edx, 44
	mov	ecx, DWORD PTR _strike$10[ebp]
	movzx	dx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [eax], dx
; Line 255
	mov	ecx, 1
	imul	edx, ecx, 45
	mov	eax, DWORD PTR _strike$10[ebp]
	movzx	cx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [edx+2], cx
; Line 257
	mov	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR _strike$10[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	shl	edx, 6
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 258
	mov	ecx, 1
	imul	edx, ecx, 17
	mov	eax, DWORD PTR _strike$10[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 6
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 259
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [eax+20], edx
; Line 265
	mov	ecx, 1
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _strike$10[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	mov	edx, 1
	imul	eax, edx, 18
	mov	edx, DWORD PTR _strike$10[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	add	ecx, eax
	mov	edx, 1
	imul	eax, edx, 23
	mov	edx, DWORD PTR _strike$10[ebp]
	movsx	eax, BYTE PTR [edx+eax]
	add	ecx, eax
	shl	ecx, 6
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 266
	xor	eax, eax
	jmp	$LN11@tt_face_lo
$LN6@tt_face_lo:
; Line 271
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$9[ebp], ecx
; Line 281
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+724]
	mov	ecx, DWORD PTR _strike_index$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4+8]
	mov	DWORD PTR _p$1[ebp], edx
; Line 282
	mov	eax, DWORD PTR _p$1[ebp]
	add	eax, 4
	mov	DWORD PTR _p$1[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$1[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$1[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$1[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$1[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _offset$8[ebp], ecx
; Line 284
	mov	esi, esp
	lea	ecx, DWORD PTR _table_size$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$9[ebp]
	push	edx
	push	1935829368				; 73626978H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$2[ebp], eax
; Line 285
	cmp	DWORD PTR _error$2[ebp], 0
	je	SHORT $LN5@tt_face_lo
; Line 286
	mov	eax, DWORD PTR _error$2[ebp]
	jmp	$LN11@tt_face_lo
$LN5@tt_face_lo:
; Line 288
	mov	eax, DWORD PTR _offset$8[ebp]
	add	eax, 4
	cmp	eax, DWORD PTR _table_size$3[ebp]
	jbe	SHORT $LN4@tt_face_lo
; Line 289
	push	OFFSET $SG14953
	push	289					; 00000121H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN11@tt_face_lo
$LN4@tt_face_lo:
; Line 292
	mov	ecx, DWORD PTR _stream$9[ebp]
	push	ecx
	call	_FT_Stream_Pos
	add	esp, 4
	add	eax, DWORD PTR _offset$8[ebp]
	push	eax
	mov	edx, DWORD PTR _stream$9[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$2[ebp], eax
	cmp	DWORD PTR _error$2[ebp], 0
	jne	SHORT $LN2@tt_face_lo
	push	4
	mov	eax, DWORD PTR _stream$9[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$2[ebp], eax
	cmp	DWORD PTR _error$2[ebp], 0
	je	SHORT $LN3@tt_face_lo
$LN2@tt_face_lo:
; Line 293
	mov	eax, DWORD PTR _error$2[ebp]
	jmp	$LN11@tt_face_lo
$LN3@tt_face_lo:
; Line 295
	mov	ecx, DWORD PTR _stream$9[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	WORD PTR _ppem$6[ebp], ax
; Line 296
	mov	edx, DWORD PTR _stream$9[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	WORD PTR _resolution$5[ebp], ax
; Line 298
	mov	ax, WORD PTR _resolution$5[ebp]
	mov	WORD PTR _resolution$5[ebp], ax
; Line 300
	mov	ecx, DWORD PTR _stream$9[ebp]
	push	ecx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 302
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+178]
	mov	DWORD PTR _upem$7[ebp], eax
; Line 303
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 216				; 000000d8H
	mov	DWORD PTR _hori$4[ebp], ecx
; Line 305
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	ax, WORD PTR _ppem$6[ebp]
	mov	WORD PTR [edx], ax
; Line 306
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	dx, WORD PTR _ppem$6[ebp]
	mov	WORD PTR [ecx+2], dx
; Line 308
	movzx	eax, WORD PTR _ppem$6[ebp]
	mov	ecx, DWORD PTR _hori$4[ebp]
	movsx	edx, WORD PTR [ecx+4]
	imul	eax, edx
	shl	eax, 6
	xor	edx, edx
	div	DWORD PTR _upem$7[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 309
	movzx	eax, WORD PTR _ppem$6[ebp]
	mov	edx, DWORD PTR _hori$4[ebp]
	movsx	ecx, WORD PTR [edx+6]
	imul	eax, ecx
	shl	eax, 6
	xor	edx, edx
	div	DWORD PTR _upem$7[ebp]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 312
	movzx	eax, WORD PTR _ppem$6[ebp]
	mov	ecx, DWORD PTR _hori$4[ebp]
	movsx	edx, WORD PTR [ecx+4]
	mov	ecx, DWORD PTR _hori$4[ebp]
	movsx	ecx, WORD PTR [ecx+6]
	sub	edx, ecx
	mov	ecx, DWORD PTR _hori$4[ebp]
	movsx	ecx, WORD PTR [ecx+8]
	add	edx, ecx
	imul	eax, edx
	shl	eax, 6
	xor	edx, edx
	div	DWORD PTR _upem$7[ebp]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 313
	movzx	eax, WORD PTR _ppem$6[ebp]
	mov	ecx, DWORD PTR _hori$4[ebp]
	movzx	edx, WORD PTR [ecx+10]
	imul	eax, edx
	shl	eax, 6
	xor	edx, edx
	div	DWORD PTR _upem$7[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 315
	mov	eax, DWORD PTR _error$2[ebp]
	jmp	SHORT $LN11@tt_face_lo
$LN1@tt_face_lo:
; Line 319
	push	OFFSET $SG14961
	push	319					; 0000013fH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
$LN11@tt_face_lo:
; Line 321
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@tt_face_lo:
	DD	1
	DD	$LN14@tt_face_lo
$LN14@tt_face_lo:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN13@tt_face_lo
$LN13@tt_face_lo:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_tt_face_load_strike_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_req$ = 12						; size = 4
_astrike_index$ = 16					; size = 4
_tt_face_set_sbit_strike PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 231
	push	ebp
	mov	ebp, esp
; Line 232
	mov	eax, DWORD PTR _astrike_index$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _req$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Match_Size
	add	esp, 16					; 00000010H
; Line 233
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_tt_face_set_sbit_strike ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = -4						; size = 4
_face$ = 8						; size = 4
_tt_face_free_sbit PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 216
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 217
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 220
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 724				; 000002d4H
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 221
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+728], 0
; Line 222
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+732], 0
; Line 223
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+736], 0
; Line 224
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_free_sbit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv141 = -52						; size = 4
_count$1 = -48						; size = 4
_num_strikes$2 = -44					; size = 4
_flags$3 = -40						; size = 2
_version$4 = -36					; size = 2
_count$5 = -32						; size = 4
_num_strikes$6 = -28					; size = 4
_version$7 = -24					; size = 4
_p$8 = -20						; size = 4
_table_size$ = -12					; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_sbit PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttsbit.c
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 53
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+724], 0
; Line 54
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+728], 0
; Line 55
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+732], 0
; Line 56
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+736], 0
; Line 58
	mov	esi, esp
	lea	ecx, DWORD PTR _table_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	1128418371				; 43424c43H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 59
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN37@tt_face_lo
; Line 60
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+732], 2
; Line 61
	jmp	SHORT $LN36@tt_face_lo
$LN37@tt_face_lo:
; Line 63
	mov	esi, esp
	lea	ecx, DWORD PTR _table_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	1161972803				; 45424c43H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 64
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN35@tt_face_lo
; Line 65
	mov	esi, esp
	lea	eax, DWORD PTR _table_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1651273571				; 626c6f63H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN35@tt_face_lo:
; Line 66
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN36@tt_face_lo
; Line 67
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+732], 1
$LN36@tt_face_lo:
; Line 70
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN33@tt_face_lo
; Line 72
	mov	esi, esp
	lea	eax, DWORD PTR _table_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1935829368				; 73626978H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 73
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN33@tt_face_lo
; Line 74
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+732], 3
$LN33@tt_face_lo:
; Line 76
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@tt_face_lo
; Line 77
	jmp	$Exit$43
$LN31@tt_face_lo:
; Line 79
	cmp	DWORD PTR _table_size$[ebp], 8
	jae	SHORT $LN30@tt_face_lo
; Line 81
	push	OFFSET $SG14807
	call	_FT_Message
	add	esp, 4
; Line 82
	push	OFFSET $SG14808
	push	82					; 00000052H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 83
	jmp	$Exit$43
$LN30@tt_face_lo:
; Line 86
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	mov	DWORD PTR tv141[ebp], ecx
	cmp	DWORD PTR tv141[ebp], 0
	jbe	$LN8@tt_face_lo
	cmp	DWORD PTR tv141[ebp], 2
	jbe	SHORT $LN27@tt_face_lo
	cmp	DWORD PTR tv141[ebp], 3
	je	$LN22@tt_face_lo
	jmp	$LN8@tt_face_lo
$LN27@tt_face_lo:
; Line 97
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 724				; 000002d4H
	push	edx
	mov	eax, DWORD PTR _table_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN26@tt_face_lo
; Line 98
	jmp	$Exit$43
$LN26@tt_face_lo:
; Line 100
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _table_size$[ebp]
	mov	DWORD PTR [edx+728], eax
; Line 102
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+724]
	mov	DWORD PTR _p$8[ebp], edx
; Line 104
	mov	eax, DWORD PTR _p$8[ebp]
	add	eax, 4
	mov	DWORD PTR _p$8[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$8[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$8[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$8[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$8[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _version$7[ebp], ecx
; Line 105
	mov	ecx, DWORD PTR _p$8[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$8[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$8[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$8[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$8[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$8[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _num_strikes$6[ebp], edx
; Line 107
	mov	edx, DWORD PTR _version$7[ebp]
	and	edx, -65536				; ffff0000H
	cmp	edx, 131072				; 00020000H
	je	SHORT $LN25@tt_face_lo
; Line 109
	push	OFFSET $SG14843
	push	109					; 0000006dH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 110
	jmp	$Exit$43
$LN25@tt_face_lo:
; Line 113
	cmp	DWORD PTR _num_strikes$6[ebp], 65536	; 00010000H
	jb	SHORT $LN24@tt_face_lo
; Line 115
	push	OFFSET $SG14845
	push	115					; 00000073H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 116
	jmp	$Exit$43
$LN24@tt_face_lo:
; Line 123
	mov	eax, DWORD PTR _num_strikes$6[ebp]
	mov	DWORD PTR _count$5[ebp], eax
; Line 124
	imul	ecx, DWORD PTR _count$5[ebp], 48
	add	ecx, 8
	cmp	ecx, DWORD PTR _table_size$[ebp]
	jbe	SHORT $LN23@tt_face_lo
; Line 125
	mov	eax, DWORD PTR _table_size$[ebp]
	sub	eax, 8
	xor	edx, edx
	mov	ecx, 48					; 00000030H
	div	ecx
	mov	DWORD PTR _count$5[ebp], eax
$LN23@tt_face_lo:
; Line 127
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _count$5[ebp]
	mov	DWORD PTR [edx+736], eax
; Line 129
	jmp	$LN28@tt_face_lo
$LN22@tt_face_lo:
; Line 139
	push	8
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@tt_face_lo
; Line 140
	jmp	$Exit$43
$LN21@tt_face_lo:
; Line 142
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	WORD PTR _version$4[ebp], ax
; Line 143
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	WORD PTR _flags$3[ebp], ax
; Line 144
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	DWORD PTR _num_strikes$2[ebp], eax
; Line 146
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 148
	movzx	eax, WORD PTR _version$4[ebp]
	cmp	eax, 1
	jge	SHORT $LN20@tt_face_lo
; Line 150
	push	OFFSET $SG14860
	push	150					; 00000096H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 151
	jmp	$Exit$43
$LN20@tt_face_lo:
; Line 158
	movzx	ecx, WORD PTR _flags$3[ebp]
	cmp	ecx, 1
	je	SHORT $LN17@tt_face_lo
	movzx	edx, WORD PTR _flags$3[ebp]
	cmp	edx, 3
	jne	SHORT $LN18@tt_face_lo
$LN17@tt_face_lo:
	cmp	DWORD PTR _num_strikes$2[ebp], 65536	; 00010000H
	jb	SHORT $LN19@tt_face_lo
$LN18@tt_face_lo:
; Line 160
	push	OFFSET $SG14864
	push	160					; 000000a0H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 161
	jmp	$Exit$43
$LN19@tt_face_lo:
; Line 166
	movzx	eax, WORD PTR _flags$3[ebp]
	cmp	eax, 3
	jne	SHORT $LN16@tt_face_lo
$LN15@tt_face_lo:
; Line 170
	mov	ecx, 4
	imul	edx, ecx, 25
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN14@tt_face_lo
	push	OFFSET $SG14870
	call	_FT_Message
	add	esp, 4
$LN14@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN15@tt_face_lo
$LN16@tt_face_lo:
; Line 176
	mov	ecx, DWORD PTR _num_strikes$2[ebp]
	mov	DWORD PTR _count$1[ebp], ecx
; Line 177
	mov	edx, DWORD PTR _count$1[ebp]
	lea	eax, DWORD PTR [edx*4+8]
	cmp	eax, DWORD PTR _table_size$[ebp]
	jbe	SHORT $LN11@tt_face_lo
; Line 178
	mov	ecx, DWORD PTR _table_size$[ebp]
	sub	ecx, 8
	shr	ecx, 2
	mov	DWORD PTR _count$1[ebp], ecx
$LN11@tt_face_lo:
; Line 180
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	sub	eax, 8
	push	eax
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@tt_face_lo
; Line 181
	jmp	$Exit$43
$LN10@tt_face_lo:
; Line 183
	mov	ecx, DWORD PTR _count$1[ebp]
	lea	edx, DWORD PTR [ecx*4+8]
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+728], edx
; Line 184
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 724				; 000002d4H
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+728]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@tt_face_lo
; Line 185
	jmp	SHORT $Exit$43
$LN9@tt_face_lo:
; Line 187
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _count$1[ebp]
	mov	DWORD PTR [edx+736], eax
; Line 189
	jmp	SHORT $LN28@tt_face_lo
$LN8@tt_face_lo:
; Line 192
	push	OFFSET $SG14880
	push	192					; 000000c0H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
$LN28@tt_face_lo:
; Line 196
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN7@tt_face_lo
$LN6@tt_face_lo:
; Line 197
	mov	ecx, 4
	imul	edx, ecx, 25
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN5@tt_face_lo
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+736]
	push	ecx
	push	OFFSET $SG14886
	call	_FT_Message
	add	esp, 8
$LN5@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN6@tt_face_lo
$LN7@tt_face_lo:
; Line 199
	xor	eax, eax
	jmp	SHORT $LN38@tt_face_lo
$Exit$43:
; Line 202
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@tt_face_lo
; Line 204
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+724], 0
	je	SHORT $LN1@tt_face_lo
; Line 205
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 724				; 000002d4H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
$LN1@tt_face_lo:
; Line 206
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+728], 0
; Line 207
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+732], 0
$LN2@tt_face_lo:
; Line 210
	mov	eax, DWORD PTR _error$[ebp]
$LN38@tt_face_lo:
; Line 211
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN42@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN42@tt_face_lo:
	DD	1
	DD	$LN41@tt_face_lo
$LN41@tt_face_lo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN40@tt_face_lo
$LN40@tt_face_lo:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_tt_face_load_sbit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$1 = -28						; size = 4
_offset$ = -24						; size = 4
_tag$ = -20						; size = 4
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_stream$ = 8						; size = 4
_face$ = 12						; size = 4
_sfnt_open_font PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfobjs.c
; Line 733
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 734
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 750
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+132], 0
; Line 751
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+136], 0
; Line 752
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+140], 0
$retry$38:
; Line 755
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _offset$[ebp], eax
; Line 757
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _tag$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN32@sfnt_open_
; Line 758
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN33@sfnt_open_
$LN32@sfnt_open_:
; Line 760
	cmp	DWORD PTR _tag$[ebp], 2001684038	; 774f4646H
	jne	SHORT $LN31@sfnt_open_
$LN30@sfnt_open_:
; Line 762
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN29@sfnt_open_
	push	OFFSET $SG13597
	call	_FT_Message
	add	esp, 4
$LN29@sfnt_open_:
	xor	ecx, ecx
	jne	SHORT $LN30@sfnt_open_
; Line 764
	mov	edx, DWORD PTR _offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN26@sfnt_open_
; Line 765
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN33@sfnt_open_
$LN26@sfnt_open_:
; Line 767
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_woff_open_font
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 768
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN25@sfnt_open_
; Line 769
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN33@sfnt_open_
$LN25@sfnt_open_:
; Line 772
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 773
	jmp	$retry$38
$LN31@sfnt_open_:
; Line 781
	cmp	DWORD PTR _tag$[ebp], 65536		; 00010000H
	je	SHORT $LN24@sfnt_open_
	cmp	DWORD PTR _tag$[ebp], 1953784678	; 74746366H
	je	SHORT $LN24@sfnt_open_
	cmp	DWORD PTR _tag$[ebp], 1330926671	; 4f54544fH
	je	SHORT $LN24@sfnt_open_
	cmp	DWORD PTR _tag$[ebp], 1953658213	; 74727565H
	je	SHORT $LN24@sfnt_open_
	cmp	DWORD PTR _tag$[ebp], 1954115633	; 74797031H
	je	SHORT $LN24@sfnt_open_
	cmp	DWORD PTR _tag$[ebp], 131072		; 00020000H
	je	SHORT $LN24@sfnt_open_
$LN23@sfnt_open_:
; Line 783
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN22@sfnt_open_
	push	OFFSET $SG13626
	call	_FT_Message
	add	esp, 4
$LN22@sfnt_open_:
	xor	ecx, ecx
	jne	SHORT $LN23@sfnt_open_
; Line 784
	push	OFFSET $SG13627
	push	784					; 00000310H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	jmp	$LN33@sfnt_open_
$LN24@sfnt_open_:
; Line 787
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+132], 1953784678		; 74746366H
; Line 789
	cmp	DWORD PTR _tag$[ebp], 1953784678	; 74746366H
	jne	$LN5@sfnt_open_
$LN18@sfnt_open_:
; Line 794
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN17@sfnt_open_
	push	OFFSET $SG13644
	call	_FT_Message
	add	esp, 4
$LN17@sfnt_open_:
	xor	edx, edx
	jne	SHORT $LN18@sfnt_open_
; Line 796
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 132				; 00000084H
	push	eax
	push	OFFSET ?ttc_header_fields@?1??sfnt_open_font@@9@9
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@sfnt_open_
; Line 797
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN33@sfnt_open_
$LN14@sfnt_open_:
; Line 799
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+140], 0
	jne	SHORT $LN13@sfnt_open_
; Line 800
	push	OFFSET $SG13647
	push	800					; 00000320H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	jmp	$LN33@sfnt_open_
$LN13@sfnt_open_:
; Line 807
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shr	ecx, 5
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+140], ecx
	jbe	SHORT $LN12@sfnt_open_
; Line 808
	push	OFFSET $SG13650
	push	808					; 00000328H
	push	10					; 0000000aH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 10					; 0000000aH
	jmp	$LN33@sfnt_open_
$LN12@sfnt_open_:
; Line 811
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+144], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@sfnt_open_
; Line 812
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN33@sfnt_open_
$LN11@sfnt_open_:
; Line 814
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+140]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@sfnt_open_
; Line 815
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN33@sfnt_open_
$LN10@sfnt_open_:
; Line 817
	mov	DWORD PTR _n$1[ebp], 0
	jmp	SHORT $LN9@sfnt_open_
$LN8@sfnt_open_:
	mov	edx, DWORD PTR _n$1[ebp]
	add	edx, 1
	mov	DWORD PTR _n$1[ebp], edx
$LN9@sfnt_open_:
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _n$1[ebp]
	cmp	ecx, DWORD PTR [eax+140]
	jge	SHORT $LN7@sfnt_open_
; Line 818
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	ecx, DWORD PTR _n$1[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN8@sfnt_open_
$LN7@sfnt_open_:
; Line 820
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 822
	jmp	SHORT $LN6@sfnt_open_
$LN5@sfnt_open_:
; Line 824
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN4@sfnt_open_
	push	OFFSET $SG13665
	call	_FT_Message
	add	esp, 4
$LN4@sfnt_open_:
	xor	edx, edx
	jne	SHORT $LN5@sfnt_open_
; Line 826
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+136], 65536		; 00010000H
; Line 827
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+140], 1
; Line 829
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+144], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@sfnt_open_
; Line 830
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN33@sfnt_open_
$LN1@sfnt_open_:
; Line 832
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax+edx], ecx
$LN6@sfnt_open_:
; Line 835
	mov	eax, DWORD PTR _error$[ebp]
$LN33@sfnt_open_:
; Line 836
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@sfnt_open_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN37@sfnt_open_:
	DD	1
	DD	$LN36@sfnt_open_
$LN36@sfnt_open_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN35@sfnt_open_
$LN35@sfnt_open_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_sfnt_open_font ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv521 = -152						; size = 4
_output_len$1 = -144					; size = 4
_table$2 = -136						; size = 4
_table$3 = -132						; size = 4
_table$4 = -128						; size = 4
_x$5 = -124						; size = 4
_rangeShift$6 = -120					; size = 4
_entrySelector$7 = -116					; size = 4
_searchRange$8 = -112					; size = 4
_old_tag$ = -108					; size = 4
_nn$ = -104						; size = 4
_sfnt_offset$ = -100					; size = 4
_sfnt_header$ = -96					; size = 4
_sfnt_stream$ = -92					; size = 4
_sfnt$ = -88						; size = 4
_woff_offset$ = -84					; size = 4
_indices$ = -80						; size = 4
_tables$ = -76						; size = 4
_woff$ = -68						; size = 44
_error$ = -16						; size = 4
_memory$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_stream$ = 8						; size = 4
_face$ = 12						; size = 4
_woff_open_font PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfobjs.c
; Line 410
	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-152]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 411
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 412
	mov	DWORD PTR _error$[ebp], 0
; Line 415
	mov	DWORD PTR _tables$[ebp], 0
; Line 416
	mov	DWORD PTR _indices$[ebp], 0
; Line 420
	mov	DWORD PTR _sfnt$[ebp], 0
; Line 421
	mov	DWORD PTR _sfnt_stream$[ebp], 0
; Line 427
	mov	DWORD PTR _old_tag$[ebp], 0
$LN98@woff_open_:
; Line 452
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	eax, DWORD PTR [edx+104]
	je	SHORT $LN97@woff_open_
	push	OFFSET $SG13382
	push	452					; 000001c4H
	push	OFFSET $SG13383
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN97@woff_open_:
	xor	ecx, ecx
	jne	SHORT $LN98@woff_open_
$LN94@woff_open_:
; Line 453
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	test	eax, eax
	je	SHORT $LN93@woff_open_
	push	OFFSET $SG13388
	push	453					; 000001c5H
	push	OFFSET $SG13389
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN93@woff_open_:
	xor	eax, eax
	jne	SHORT $LN94@woff_open_
; Line 455
	lea	ecx, DWORD PTR _woff$[ebp]
	push	ecx
	push	OFFSET ?woff_header_fields@?1??woff_open_font@@9@9
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN90@woff_open_
; Line 456
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN99@woff_open_
$LN90@woff_open_:
; Line 459
	cmp	DWORD PTR _woff$[ebp+4], 2001684038	; 774f4646H
	je	SHORT $LN88@woff_open_
	cmp	DWORD PTR _woff$[ebp+4], 1953784678	; 74746366H
	jne	SHORT $LN89@woff_open_
$LN88@woff_open_:
; Line 460
	push	OFFSET $SG13403
	push	460					; 000001ccH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	jmp	$LN99@woff_open_
$LN89@woff_open_:
; Line 471
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _woff$[ebp+8]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN86@woff_open_
	movzx	edx, WORD PTR _woff$[ebp+12]
	test	edx, edx
	je	SHORT $LN86@woff_open_
	movzx	eax, WORD PTR _woff$[ebp+12]
	imul	ecx, eax, 20
	add	ecx, 44					; 0000002cH
	cmp	ecx, DWORD PTR _woff$[ebp+8]
	jae	SHORT $LN86@woff_open_
	movzx	edx, WORD PTR _woff$[ebp+12]
	shl	edx, 4
	add	edx, 12					; 0000000cH
	cmp	edx, DWORD PTR _woff$[ebp+16]
	jae	SHORT $LN86@woff_open_
	mov	eax, DWORD PTR _woff$[ebp+16]
	and	eax, 3
	jne	SHORT $LN86@woff_open_
	cmp	DWORD PTR _woff$[ebp+24], 0
	jne	SHORT $LN85@woff_open_
	cmp	DWORD PTR _woff$[ebp+28], 0
	jne	SHORT $LN86@woff_open_
	cmp	DWORD PTR _woff$[ebp+32], 0
	jne	SHORT $LN86@woff_open_
$LN85@woff_open_:
	cmp	DWORD PTR _woff$[ebp+28], 0
	je	SHORT $LN84@woff_open_
	cmp	DWORD PTR _woff$[ebp+32], 0
	je	SHORT $LN86@woff_open_
$LN84@woff_open_:
	cmp	DWORD PTR _woff$[ebp+36], 0
	jne	SHORT $LN87@woff_open_
	cmp	DWORD PTR _woff$[ebp+40], 0
	je	SHORT $LN87@woff_open_
$LN86@woff_open_:
; Line 472
	push	OFFSET $SG13408
	push	472					; 000001d8H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	jmp	$LN99@woff_open_
$LN87@woff_open_:
; Line 475
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _woff$[ebp+16]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _sfnt$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN82@woff_open_
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	40					; 00000028H
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _sfnt_stream$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN83@woff_open_
$LN82@woff_open_:
; Line 476
	jmp	$Exit$108
$LN83@woff_open_:
; Line 478
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	DWORD PTR _sfnt_header$[ebp], eax
; Line 485
	movzx	ecx, WORD PTR _woff$[ebp+12]
	mov	DWORD PTR _x$5[ebp], ecx
; Line 486
	mov	DWORD PTR _entrySelector$7[ebp], 0
$LN81@woff_open_:
; Line 487
	cmp	DWORD PTR _x$5[ebp], 0
	je	SHORT $LN80@woff_open_
; Line 489
	mov	edx, DWORD PTR _x$5[ebp]
	shr	edx, 1
	mov	DWORD PTR _x$5[ebp], edx
; Line 490
	mov	eax, DWORD PTR _entrySelector$7[ebp]
	add	eax, 1
	mov	DWORD PTR _entrySelector$7[ebp], eax
; Line 491
	jmp	SHORT $LN81@woff_open_
$LN80@woff_open_:
; Line 492
	mov	ecx, DWORD PTR _entrySelector$7[ebp]
	sub	ecx, 1
	mov	DWORD PTR _entrySelector$7[ebp], ecx
; Line 494
	mov	edx, 1
	mov	ecx, DWORD PTR _entrySelector$7[ebp]
	shl	edx, cl
	shl	edx, 4
	mov	DWORD PTR _searchRange$8[ebp], edx
; Line 495
	movzx	eax, WORD PTR _woff$[ebp+12]
	shl	eax, 4
	sub	eax, DWORD PTR _searchRange$8[ebp]
	mov	DWORD PTR _rangeShift$6[ebp], eax
$LN79@woff_open_:
; Line 497
	mov	ecx, DWORD PTR _woff$[ebp+4]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	mov	ecx, DWORD PTR _woff$[ebp+4]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	mov	ecx, DWORD PTR _woff$[ebp+4]
	shr	ecx, 8
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	mov	dl, BYTE PTR _woff$[ebp+4]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN79@woff_open_
$LN76@woff_open_:
; Line 498
	movzx	edx, WORD PTR _woff$[ebp+12]
	sar	edx, 8
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sfnt_header$[ebp], ecx
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	mov	al, BYTE PTR _woff$[ebp+12]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sfnt_header$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN76@woff_open_
$LN73@woff_open_:
; Line 499
	mov	eax, DWORD PTR _searchRange$8[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	add	edx, 1
	mov	DWORD PTR _sfnt_header$[ebp], edx
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	mov	cl, BYTE PTR _searchRange$8[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	add	edx, 1
	mov	DWORD PTR _sfnt_header$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN73@woff_open_
$LN70@woff_open_:
; Line 500
	mov	ecx, DWORD PTR _entrySelector$7[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	mov	dl, BYTE PTR _entrySelector$7[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN70@woff_open_
$LN67@woff_open_:
; Line 501
	mov	edx, DWORD PTR _rangeShift$6[ebp]
	shr	edx, 8
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sfnt_header$[ebp], ecx
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	mov	al, BYTE PTR _rangeShift$6[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sfnt_header$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN67@woff_open_
; Line 509
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	movzx	ecx, WORD PTR _woff$[ebp+12]
	push	ecx
	push	0
	push	24					; 00000018H
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _tables$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN63@woff_open_
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	movzx	ecx, WORD PTR _woff$[ebp+12]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _indices$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN62@woff_open_
$LN63@woff_open_:
; Line 510
	jmp	$Exit$108
$LN62@woff_open_:
; Line 514
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN61@woff_open_
	push	OFFSET $SG13458
	call	_FT_Message
	add	esp, 4
$LN61@woff_open_:
	xor	edx, edx
	jne	SHORT $LN62@woff_open_
; Line 516
	movzx	eax, WORD PTR _woff$[ebp+12]
	imul	ecx, eax, 20
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN58@woff_open_
; Line 517
	jmp	$Exit$108
$LN58@woff_open_:
; Line 519
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN57@woff_open_
$LN56@woff_open_:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN57@woff_open_:
	movzx	ecx, WORD PTR _woff$[ebp+12]
	cmp	DWORD PTR _nn$[ebp], ecx
	jge	$LN55@woff_open_
; Line 521
	imul	edx, DWORD PTR _nn$[ebp], 24
	add	edx, DWORD PTR _tables$[ebp]
	mov	DWORD PTR _table$4[ebp], edx
; Line 523
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	ecx, DWORD PTR _table$4[ebp]
	mov	DWORD PTR [ecx], eax
; Line 524
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	ecx, DWORD PTR _table$4[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 525
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	ecx, DWORD PTR _table$4[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 526
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	ecx, DWORD PTR _table$4[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 527
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	ecx, DWORD PTR _table$4[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN54@woff_open_:
; Line 537
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN53@woff_open_
	mov	ecx, DWORD PTR _table$4[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _table$4[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _table$4[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _table$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _table$4[ebp]
	movsx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _table$4[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 8
	movsx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _table$4[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 16					; 00000010H
	movsx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _table$4[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 24					; 00000018H
	movsx	ecx, al
	push	ecx
	push	OFFSET $SG13478
	call	_FT_Message
	add	esp, 36					; 00000024H
$LN53@woff_open_:
	xor	edx, edx
	jne	SHORT $LN54@woff_open_
; Line 539
	mov	eax, DWORD PTR _table$4[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _old_tag$[ebp]
	ja	SHORT $LN50@woff_open_
; Line 541
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 542
	push	OFFSET $SG13480
	push	542					; 0000021eH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 543
	jmp	$Exit$108
$LN50@woff_open_:
; Line 546
	mov	eax, DWORD PTR _table$4[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_tag$[ebp], ecx
; Line 547
	mov	edx, DWORD PTR _nn$[ebp]
	mov	eax, DWORD PTR _indices$[ebp]
	mov	ecx, DWORD PTR _table$4[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 548
	jmp	$LN56@woff_open_
$LN55@woff_open_:
; Line 550
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 557
	mov	esi, esp
	push	OFFSET _compare_offsets
	push	4
	movzx	eax, WORD PTR _woff$[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _indices$[ebp]
	push	ecx
	call	DWORD PTR __imp__qsort
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 561
	movzx	edx, WORD PTR _woff$[ebp+12]
	imul	eax, edx, 20
	add	eax, 44					; 0000002cH
	mov	DWORD PTR _woff_offset$[ebp], eax
; Line 562
	movzx	ecx, WORD PTR _woff$[ebp+12]
	shl	ecx, 4
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _sfnt_offset$[ebp], ecx
; Line 564
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN49@woff_open_
$LN48@woff_open_:
	mov	edx, DWORD PTR _nn$[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$[ebp], edx
$LN49@woff_open_:
	movzx	eax, WORD PTR _woff$[ebp+12]
	cmp	DWORD PTR _nn$[ebp], eax
	jge	$LN47@woff_open_
; Line 566
	mov	ecx, DWORD PTR _nn$[ebp]
	mov	edx, DWORD PTR _indices$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _table$3[ebp], eax
; Line 574
	mov	ecx, DWORD PTR _table$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _woff_offset$[ebp]
	jne	SHORT $LN45@woff_open_
	mov	eax, DWORD PTR _table$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _woff$[ebp+8]
	ja	SHORT $LN45@woff_open_
	mov	edx, DWORD PTR _table$3[ebp]
	mov	eax, DWORD PTR _woff$[ebp+8]
	sub	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _table$3[ebp]
	cmp	DWORD PTR [ecx+4], eax
	ja	SHORT $LN45@woff_open_
	mov	edx, DWORD PTR _table$3[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR _woff$[ebp+16]
	ja	SHORT $LN45@woff_open_
	mov	ecx, DWORD PTR _table$3[ebp]
	mov	edx, DWORD PTR _woff$[ebp+16]
	sub	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR _sfnt_offset$[ebp], edx
	ja	SHORT $LN45@woff_open_
	mov	eax, DWORD PTR _table$3[ebp]
	mov	ecx, DWORD PTR _table$3[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jbe	SHORT $LN46@woff_open_
$LN45@woff_open_:
; Line 576
	push	OFFSET $SG13488
	push	576					; 00000240H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 577
	jmp	$Exit$108
$LN46@woff_open_:
; Line 580
	mov	eax, DWORD PTR _table$3[ebp]
	mov	ecx, DWORD PTR _sfnt_offset$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 583
	mov	edx, DWORD PTR _table$3[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 3
	and	eax, -4					; fffffffcH
	add	eax, DWORD PTR _woff_offset$[ebp]
	mov	DWORD PTR _woff_offset$[ebp], eax
; Line 584
	mov	ecx, DWORD PTR _table$3[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 3
	and	edx, -4					; fffffffcH
	add	edx, DWORD PTR _sfnt_offset$[ebp]
	mov	DWORD PTR _sfnt_offset$[ebp], edx
; Line 585
	jmp	$LN48@woff_open_
$LN47@woff_open_:
; Line 596
	cmp	DWORD PTR _woff$[ebp+24], 0
	je	SHORT $LN44@woff_open_
; Line 599
	mov	eax, DWORD PTR _woff$[ebp+24]
	cmp	eax, DWORD PTR _woff_offset$[ebp]
	jne	SHORT $LN42@woff_open_
	mov	ecx, DWORD PTR _woff$[ebp+24]
	add	ecx, DWORD PTR _woff$[ebp+28]
	cmp	ecx, DWORD PTR _woff$[ebp+8]
	jbe	SHORT $LN43@woff_open_
$LN42@woff_open_:
; Line 601
	push	OFFSET $SG13492
	push	601					; 00000259H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 602
	jmp	$Exit$108
$LN43@woff_open_:
; Line 606
	mov	edx, DWORD PTR _woff_offset$[ebp]
	add	edx, DWORD PTR _woff$[ebp+28]
	mov	DWORD PTR _woff_offset$[ebp], edx
$LN44@woff_open_:
; Line 609
	cmp	DWORD PTR _woff$[ebp+36], 0
	je	SHORT $LN41@woff_open_
; Line 612
	mov	eax, DWORD PTR _woff_offset$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _woff_offset$[ebp], eax
; Line 615
	mov	ecx, DWORD PTR _woff$[ebp+36]
	cmp	ecx, DWORD PTR _woff_offset$[ebp]
	jne	SHORT $LN39@woff_open_
	mov	edx, DWORD PTR _woff$[ebp+36]
	add	edx, DWORD PTR _woff$[ebp+40]
	cmp	edx, DWORD PTR _woff$[ebp+8]
	jbe	SHORT $LN40@woff_open_
$LN39@woff_open_:
; Line 617
	push	OFFSET $SG13496
	push	617					; 00000269H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 618
	jmp	$Exit$108
$LN40@woff_open_:
; Line 622
	mov	eax, DWORD PTR _woff_offset$[ebp]
	add	eax, DWORD PTR _woff$[ebp+40]
	mov	DWORD PTR _woff_offset$[ebp], eax
$LN41@woff_open_:
; Line 626
	mov	ecx, DWORD PTR _sfnt_offset$[ebp]
	cmp	ecx, DWORD PTR _woff$[ebp+16]
	jne	SHORT $LN37@woff_open_
	mov	edx, DWORD PTR _woff_offset$[ebp]
	cmp	edx, DWORD PTR _woff$[ebp+8]
	je	SHORT $LN38@woff_open_
$LN37@woff_open_:
; Line 628
	push	OFFSET $SG13499
	push	628					; 00000274H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 629
	jmp	$Exit$108
$LN38@woff_open_:
; Line 634
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN36@woff_open_
$LN35@woff_open_:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN36@woff_open_:
	movzx	ecx, WORD PTR _woff$[ebp+12]
	cmp	DWORD PTR _nn$[ebp], ecx
	jge	$LN34@woff_open_
; Line 636
	imul	edx, DWORD PTR _nn$[ebp], 24
	add	edx, DWORD PTR _tables$[ebp]
	mov	DWORD PTR _table$2[ebp], edx
$LN33@woff_open_:
; Line 640
	mov	eax, DWORD PTR _table$2[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	mov	ecx, DWORD PTR _table$2[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sfnt_header$[ebp], ecx
	mov	edx, DWORD PTR _table$2[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 8
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	add	edx, 1
	mov	DWORD PTR _sfnt_header$[ebp], edx
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	mov	ecx, DWORD PTR _table$2[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN33@woff_open_
$LN30@woff_open_:
; Line 641
	mov	edx, DWORD PTR _table$2[ebp]
	mov	eax, DWORD PTR [edx+16]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	add	edx, 1
	mov	DWORD PTR _sfnt_header$[ebp], edx
	mov	eax, DWORD PTR _table$2[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	mov	ecx, DWORD PTR _table$2[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 8
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sfnt_header$[ebp], ecx
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	mov	eax, DWORD PTR _table$2[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	add	edx, 1
	mov	DWORD PTR _sfnt_header$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN30@woff_open_
$LN27@woff_open_:
; Line 642
	mov	ecx, DWORD PTR _table$2[ebp]
	mov	edx, DWORD PTR [ecx+20]
	shr	edx, 24					; 00000018H
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sfnt_header$[ebp], ecx
	mov	edx, DWORD PTR _table$2[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	add	edx, 1
	mov	DWORD PTR _sfnt_header$[ebp], edx
	mov	eax, DWORD PTR _table$2[ebp]
	mov	ecx, DWORD PTR [eax+20]
	shr	ecx, 8
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	mov	edx, DWORD PTR _table$2[ebp]
	mov	al, BYTE PTR [edx+20]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sfnt_header$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN27@woff_open_
$LN24@woff_open_:
; Line 643
	mov	eax, DWORD PTR _table$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	mov	ecx, DWORD PTR _table$2[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sfnt_header$[ebp], ecx
	mov	edx, DWORD PTR _table$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 8
	mov	ecx, DWORD PTR _sfnt_header$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _sfnt_header$[ebp]
	add	edx, 1
	mov	DWORD PTR _sfnt_header$[ebp], edx
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	mov	ecx, DWORD PTR _table$2[ebp]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _sfnt_header$[ebp]
	add	eax, 1
	mov	DWORD PTR _sfnt_header$[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN24@woff_open_
; Line 647
	mov	edx, DWORD PTR _table$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN20@woff_open_
	mov	edx, DWORD PTR _table$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@woff_open_
$LN20@woff_open_:
; Line 648
	jmp	$Exit$108
$LN21@woff_open_:
; Line 650
	mov	edx, DWORD PTR _table$2[ebp]
	mov	eax, DWORD PTR _table$2[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN19@woff_open_
; Line 655
	mov	edx, DWORD PTR _table$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _table$2[ebp]
	mov	ecx, DWORD PTR _sfnt$[ebp]
	add	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 657
	jmp	SHORT $LN18@woff_open_
$LN19@woff_open_:
; Line 662
	mov	edx, DWORD PTR _table$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _output_len$1[ebp], eax
; Line 667
	mov	ecx, DWORD PTR _table$2[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	edx, DWORD PTR _output_len$1[ebp]
	push	edx
	mov	eax, DWORD PTR _table$2[ebp]
	mov	ecx, DWORD PTR _sfnt$[ebp]
	add	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_FT_Gzip_Uncompress
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 668
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@woff_open_
; Line 669
	jmp	$Exit$108
$LN17@woff_open_:
; Line 670
	mov	eax, DWORD PTR _table$2[ebp]
	mov	ecx, DWORD PTR _output_len$1[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	je	SHORT $LN18@woff_open_
; Line 672
	push	OFFSET $SG13541
	push	672					; 000002a0H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 673
	jmp	$Exit$108
$LN18@woff_open_:
; Line 684
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 688
	mov	eax, DWORD PTR _table$2[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _table$2[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _sfnt_offset$[ebp], ecx
$LN15@woff_open_:
; Line 689
	mov	eax, DWORD PTR _sfnt_offset$[ebp]
	and	eax, 3
	je	SHORT $LN14@woff_open_
; Line 691
	mov	ecx, DWORD PTR _sfnt$[ebp]
	add	ecx, DWORD PTR _sfnt_offset$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 692
	mov	edx, DWORD PTR _sfnt_offset$[ebp]
	add	edx, 1
	mov	DWORD PTR _sfnt_offset$[ebp], edx
; Line 693
	jmp	SHORT $LN15@woff_open_
$LN14@woff_open_:
; Line 694
	jmp	$LN35@woff_open_
$LN34@woff_open_:
; Line 697
	mov	eax, DWORD PTR _woff$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt_stream$[ebp]
	push	edx
	call	_FT_Stream_OpenMemory
	add	esp, 12					; 0000000cH
; Line 698
	mov	eax, DWORD PTR _sfnt_stream$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
; Line 699
	mov	eax, DWORD PTR _sfnt_stream$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _sfnt_stream_close
; Line 703
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 1024				; 00000400H
	je	SHORT $LN101@woff_open_
	mov	DWORD PTR tv521[ebp], 1
	jmp	SHORT $LN102@woff_open_
$LN101@woff_open_:
	mov	DWORD PTR tv521[ebp], 0
$LN102@woff_open_:
	mov	eax, DWORD PTR tv521[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	call	_FT_Stream_Free
	add	esp, 8
; Line 705
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _sfnt_stream$[ebp]
	mov	DWORD PTR [eax+104], ecx
; Line 707
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, -1025				; fffffbffH
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+8], eax
$Exit$108:
; Line 710
	mov	edx, DWORD PTR _tables$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _tables$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $Exit$108
$LN10@woff_open_:
; Line 711
	mov	edx, DWORD PTR _indices$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _indices$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN10@woff_open_
; Line 713
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@woff_open_
$LN6@woff_open_:
; Line 715
	mov	edx, DWORD PTR _sfnt$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _sfnt$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN6@woff_open_
; Line 716
	mov	edx, DWORD PTR _sfnt_stream$[ebp]
	push	edx
	call	_FT_Stream_Close
	add	esp, 4
$LN3@woff_open_:
; Line 717
	mov	eax, DWORD PTR _sfnt_stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _sfnt_stream$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@woff_open_
$LN7@woff_open_:
; Line 720
	mov	eax, DWORD PTR _error$[ebp]
$LN99@woff_open_:
; Line 721
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN107@woff_open_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 152				; 00000098H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN107@woff_open_:
	DD	3
	DD	$LN106@woff_open_
$LN106@woff_open_:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN103@woff_open_
	DD	-68					; ffffffbcH
	DD	44					; 0000002cH
	DD	$LN104@woff_open_
	DD	-144					; ffffff70H
	DD	4
	DD	$LN105@woff_open_
$LN105@woff_open_:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN104@woff_open_:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN103@woff_open_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_woff_open_font ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_offset2$ = -16						; size = 4
_offset1$ = -12						; size = 4
_table2$ = -8						; size = 4
_table1$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_compare_offsets PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfobjs.c
; Line 387
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 388
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _table1$[ebp], ecx
; Line 389
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _table2$[ebp], eax
; Line 391
	mov	ecx, DWORD PTR _table1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _offset1$[ebp], edx
; Line 392
	mov	eax, DWORD PTR _table2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _offset2$[ebp], ecx
; Line 395
	mov	edx, DWORD PTR _offset1$[ebp]
	cmp	edx, DWORD PTR _offset2$[ebp]
	jbe	SHORT $LN4@compare_of
; Line 396
	mov	eax, 1
	jmp	SHORT $LN5@compare_of
	jmp	SHORT $LN5@compare_of
$LN4@compare_of:
; Line 397
	mov	eax, DWORD PTR _offset1$[ebp]
	cmp	eax, DWORD PTR _offset2$[ebp]
	jae	SHORT $LN2@compare_of
; Line 398
	or	eax, -1
	jmp	SHORT $LN5@compare_of
; Line 399
	jmp	SHORT $LN5@compare_of
$LN2@compare_of:
; Line 400
	xor	eax, eax
$LN5@compare_of:
; Line 401
	mov	esp, ebp
	pop	ebp
	ret	0
_compare_offsets ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_stream$ = 8						; size = 4
_sfnt_stream_close PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfobjs.c
; Line 372
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 373
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
$LN3@sfnt_strea:
; Line 376
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], 0
	xor	eax, eax
	jne	SHORT $LN3@sfnt_strea
; Line 378
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 379
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], 0
; Line 380
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 381
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sfnt_stream_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$ = -8						; size = 4
_cur$ = -4						; size = 4
_platform_id$ = 8					; size = 4
_encoding_id$ = 12					; size = 4
_sfnt_find_encoding PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfobjs.c
; Line 303
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 334
	mov	DWORD PTR _cur$[ebp], OFFSET ?tt_encodings@?1??sfnt_find_encoding@@9@9
; Line 335
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 132				; 00000084H
	mov	DWORD PTR _limit$[ebp], eax
; Line 337
	jmp	SHORT $LN6@sfnt_find_
$LN5@sfnt_find_:
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _cur$[ebp], ecx
$LN6@sfnt_find_:
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN4@sfnt_find_
; Line 339
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _platform_id$[ebp]
	jne	SHORT $LN3@sfnt_find_
; Line 342
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _encoding_id$[ebp]
	je	SHORT $LN1@sfnt_find_
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	jne	SHORT $LN3@sfnt_find_
$LN1@sfnt_find_:
; Line 343
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	jmp	SHORT $LN7@sfnt_find_
$LN3@sfnt_find_:
; Line 345
	jmp	SHORT $LN5@sfnt_find_
$LN4@sfnt_find_:
; Line 347
	xor	eax, eax
$LN7@sfnt_find_:
; Line 348
	mov	esp, ebp
	pop	ebp
	ret	0
_sfnt_find_encoding ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv156 = -76						; size = 4
tv140 = -69						; size = 1
tv135 = -68						; size = 4
tv86 = -64						; size = 4
_stream$1 = -60						; size = 4
_convert$ = -56						; size = 4
_is_english$ = -49					; size = 1
_found_unicode$ = -48					; size = 4
_found_win$ = -44					; size = 4
_found_apple_english$ = -40				; size = 4
_found_apple_roman$ = -36				; size = 4
_found_apple$ = -32					; size = 4
_rec$ = -28						; size = 4
_n$ = -24						; size = 2
_result$ = -20						; size = 4
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_face$ = 8						; size = 4
_nameid$ = 12						; size = 2
_name$ = 16						; size = 4
_tt_face_get_name PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfobjs.c
; Line 147
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 148
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 149
	mov	DWORD PTR _error$[ebp], 0
; Line 150
	mov	DWORD PTR _result$[ebp], 0
; Line 153
	mov	DWORD PTR _found_apple$[ebp], -1
; Line 154
	mov	DWORD PTR _found_apple_roman$[ebp], -1
; Line 155
	mov	DWORD PTR _found_apple_english$[ebp], -1
; Line 156
	mov	DWORD PTR _found_win$[ebp], -1
; Line 157
	mov	DWORD PTR _found_unicode$[ebp], -1
; Line 159
	mov	BYTE PTR _is_english$[ebp], 0
$LN42@tt_face_ge:
; Line 164
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN41@tt_face_ge
	push	OFFSET $SG13185
	push	164					; 000000a4H
	push	OFFSET $SG13186
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN41@tt_face_ge:
	xor	edx, edx
	jne	SHORT $LN42@tt_face_ge
; Line 166
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	mov	DWORD PTR _rec$[ebp], ecx
; Line 167
	xor	edx, edx
	mov	WORD PTR _n$[ebp], dx
	jmp	SHORT $LN38@tt_face_ge
$LN37@tt_face_ge:
	mov	ax, WORD PTR _n$[ebp]
	add	ax, 1
	mov	WORD PTR _n$[ebp], ax
	mov	ecx, DWORD PTR _rec$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _rec$[ebp], ecx
$LN38@tt_face_ge:
	movzx	edx, WORD PTR _n$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+340]
	cmp	edx, ecx
	jge	$LN36@tt_face_ge
; Line 178
	mov	edx, DWORD PTR _rec$[ebp]
	movzx	eax, WORD PTR [edx+6]
	movzx	ecx, WORD PTR _nameid$[ebp]
	cmp	eax, ecx
	jne	$LN35@tt_face_ge
	mov	edx, DWORD PTR _rec$[ebp]
	movzx	eax, WORD PTR [edx+8]
	test	eax, eax
	jle	$LN35@tt_face_ge
; Line 180
	mov	ecx, DWORD PTR _rec$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv86[ebp], edx
	cmp	DWORD PTR tv86[ebp], 3
	ja	$LN35@tt_face_ge
	mov	eax, DWORD PTR tv86[ebp]
	jmp	DWORD PTR $LN50@tt_face_ge[eax*4]
$LN32@tt_face_ge:
; Line 188
	movzx	ecx, WORD PTR _n$[ebp]
	mov	DWORD PTR _found_unicode$[ebp], ecx
; Line 189
	jmp	$LN35@tt_face_ge
$LN31@tt_face_ge:
; Line 196
	mov	edx, DWORD PTR _rec$[ebp]
	movzx	eax, WORD PTR [edx+4]
	test	eax, eax
	jne	SHORT $LN30@tt_face_ge
; Line 197
	movzx	ecx, WORD PTR _n$[ebp]
	mov	DWORD PTR _found_apple_english$[ebp], ecx
	jmp	SHORT $LN29@tt_face_ge
$LN30@tt_face_ge:
; Line 198
	mov	edx, DWORD PTR _rec$[ebp]
	movzx	eax, WORD PTR [edx+2]
	test	eax, eax
	jne	SHORT $LN29@tt_face_ge
; Line 199
	movzx	ecx, WORD PTR _n$[ebp]
	mov	DWORD PTR _found_apple_roman$[ebp], ecx
$LN29@tt_face_ge:
; Line 200
	jmp	SHORT $LN35@tt_face_ge
$LN27@tt_face_ge:
; Line 206
	cmp	DWORD PTR _found_win$[ebp], -1
	je	SHORT $LN25@tt_face_ge
	mov	edx, DWORD PTR _rec$[ebp]
	movzx	eax, WORD PTR [edx+4]
	and	eax, 1023				; 000003ffH
	cmp	eax, 9
	jne	SHORT $LN35@tt_face_ge
$LN25@tt_face_ge:
; Line 208
	mov	ecx, DWORD PTR _rec$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR tv135[ebp], edx
	cmp	DWORD PTR tv135[ebp], 0
	jl	SHORT $LN35@tt_face_ge
	cmp	DWORD PTR tv135[ebp], 1
	jle	SHORT $LN22@tt_face_ge
	cmp	DWORD PTR tv135[ebp], 10		; 0000000aH
	je	SHORT $LN22@tt_face_ge
	jmp	SHORT $LN35@tt_face_ge
$LN22@tt_face_ge:
; Line 213
	mov	eax, DWORD PTR _rec$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	and	ecx, 1023				; 000003ffH
	cmp	ecx, 9
	jne	SHORT $LN45@tt_face_ge
	mov	BYTE PTR tv140[ebp], 1
	jmp	SHORT $LN46@tt_face_ge
$LN45@tt_face_ge:
	mov	BYTE PTR tv140[ebp], 0
$LN46@tt_face_ge:
	mov	dl, BYTE PTR tv140[ebp]
	mov	BYTE PTR _is_english$[ebp], dl
; Line 214
	movzx	eax, WORD PTR _n$[ebp]
	mov	DWORD PTR _found_win$[ebp], eax
$LN35@tt_face_ge:
; Line 227
	jmp	$LN37@tt_face_ge
$LN36@tt_face_ge:
; Line 229
	mov	ecx, DWORD PTR _found_apple_roman$[ebp]
	mov	DWORD PTR _found_apple$[ebp], ecx
; Line 230
	cmp	DWORD PTR _found_apple_english$[ebp], 0
	jl	SHORT $LN19@tt_face_ge
; Line 231
	mov	edx, DWORD PTR _found_apple_english$[ebp]
	mov	DWORD PTR _found_apple$[ebp], edx
$LN19@tt_face_ge:
; Line 237
	mov	DWORD PTR _convert$[ebp], 0
; Line 238
	cmp	DWORD PTR _found_win$[ebp], 0
	jl	SHORT $LN18@tt_face_ge
	cmp	DWORD PTR _found_apple$[ebp], 0
	jl	SHORT $LN17@tt_face_ge
	movzx	eax, BYTE PTR _is_english$[ebp]
	test	eax, eax
	je	SHORT $LN18@tt_face_ge
$LN17@tt_face_ge:
; Line 240
	imul	ecx, DWORD PTR _found_win$[ebp], 20
	mov	edx, DWORD PTR _face$[ebp]
	add	ecx, DWORD PTR [edx+356]
	mov	DWORD PTR _rec$[ebp], ecx
; Line 241
	mov	eax, DWORD PTR _rec$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR tv156[ebp], ecx
	cmp	DWORD PTR tv156[ebp], 0
	jl	SHORT $LN15@tt_face_ge
	cmp	DWORD PTR tv156[ebp], 1
	jle	SHORT $LN14@tt_face_ge
	cmp	DWORD PTR tv156[ebp], 10		; 0000000aH
	je	SHORT $LN13@tt_face_ge
	jmp	SHORT $LN15@tt_face_ge
$LN14@tt_face_ge:
; Line 246
	mov	DWORD PTR _convert$[ebp], OFFSET _tt_name_entry_ascii_from_utf16
; Line 247
	jmp	SHORT $LN15@tt_face_ge
$LN13@tt_face_ge:
; Line 255
	mov	DWORD PTR _convert$[ebp], OFFSET _tt_name_entry_ascii_from_utf16
$LN15@tt_face_ge:
; Line 262
	jmp	SHORT $LN11@tt_face_ge
$LN18@tt_face_ge:
	cmp	DWORD PTR _found_apple$[ebp], 0
	jl	SHORT $LN10@tt_face_ge
; Line 264
	imul	edx, DWORD PTR _found_apple$[ebp], 20
	mov	eax, DWORD PTR _face$[ebp]
	add	edx, DWORD PTR [eax+356]
	mov	DWORD PTR _rec$[ebp], edx
; Line 265
	mov	DWORD PTR _convert$[ebp], OFFSET _tt_name_entry_ascii_from_other
	jmp	SHORT $LN11@tt_face_ge
$LN10@tt_face_ge:
; Line 267
	cmp	DWORD PTR _found_unicode$[ebp], 0
	jl	SHORT $LN11@tt_face_ge
; Line 269
	imul	ecx, DWORD PTR _found_unicode$[ebp], 20
	mov	edx, DWORD PTR _face$[ebp]
	add	ecx, DWORD PTR [edx+356]
	mov	DWORD PTR _rec$[ebp], ecx
; Line 270
	mov	DWORD PTR _convert$[ebp], OFFSET _tt_name_entry_ascii_from_utf16
$LN11@tt_face_ge:
; Line 273
	cmp	DWORD PTR _rec$[ebp], 0
	je	$Exit$51
	cmp	DWORD PTR _convert$[ebp], 0
	je	$Exit$51
; Line 275
	mov	eax, DWORD PTR _rec$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	$LN6@tt_face_ge
; Line 277
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	DWORD PTR _stream$1[ebp], edx
; Line 282
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _rec$[ebp]
	movzx	edx, WORD PTR [ecx+8]
	push	edx
	push	0
	push	1
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	DWORD PTR [ecx+16], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@tt_face_ge
	mov	edx, DWORD PTR _rec$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _stream$1[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@tt_face_ge
	mov	edx, DWORD PTR _rec$[ebp]
	movzx	eax, WORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _stream$1[ebp]
	push	eax
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@tt_face_ge
$LN3@tt_face_ge:
; Line 284
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	DWORD PTR [ecx+16], 0
	xor	edx, edx
	jne	SHORT $LN3@tt_face_ge
; Line 285
	xor	eax, eax
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	WORD PTR [ecx+8], ax
; Line 286
	mov	DWORD PTR _result$[ebp], 0
; Line 287
	jmp	SHORT $Exit$51
$LN6@tt_face_ge:
; Line 291
	mov	esi, esp
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _rec$[ebp]
	push	eax
	call	DWORD PTR _convert$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$Exit$51:
; Line 295
	mov	ecx, DWORD PTR _name$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 296
	mov	eax, DWORD PTR _error$[ebp]
; Line 297
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN49@tt_face_ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN49@tt_face_ge:
	DD	1
	DD	$LN48@tt_face_ge
$LN48@tt_face_ge:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN47@tt_face_ge
$LN47@tt_face_ge:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
	npad	2
$LN50@tt_face_ge:
	DD	$LN32@tt_face_ge
	DD	$LN31@tt_face_ge
	DD	$LN32@tt_face_ge
	DD	$LN27@tt_face_ge
_tt_face_get_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -28						; size = 4
_read$ = -20						; size = 4
_n$ = -16						; size = 4
_code$ = -12						; size = 4
_len$ = -8						; size = 4
_string$ = -4						; size = 4
_entry$ = 8						; size = 4
_memory$ = 12						; size = 4
_tt_name_entry_ascii_from_other PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfobjs.c
; Line 88
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 89
	mov	DWORD PTR _string$[ebp], 0
; Line 91
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _read$[ebp], ecx
; Line 95
	mov	edx, DWORD PTR _entry$[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	DWORD PTR _len$[ebp], eax
; Line 97
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	push	edx
	push	0
	push	1
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _string$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@tt_name_en
; Line 98
	xor	eax, eax
	jmp	SHORT $LN8@tt_name_en
$LN7@tt_name_en:
; Line 100
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@tt_name_en
$LN5@tt_name_en:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN6@tt_name_en:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jae	SHORT $LN4@tt_name_en
; Line 102
	mov	eax, DWORD PTR _read$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _code$[ebp], ecx
	mov	edx, DWORD PTR _read$[ebp]
	add	edx, 1
	mov	DWORD PTR _read$[ebp], edx
; Line 104
	cmp	DWORD PTR _code$[ebp], 0
	jne	SHORT $LN3@tt_name_en
; Line 105
	jmp	SHORT $LN4@tt_name_en
$LN3@tt_name_en:
; Line 107
	cmp	DWORD PTR _code$[ebp], 32		; 00000020H
	jb	SHORT $LN1@tt_name_en
	cmp	DWORD PTR _code$[ebp], 127		; 0000007fH
	jbe	SHORT $LN2@tt_name_en
$LN1@tt_name_en:
; Line 108
	mov	DWORD PTR _code$[ebp], 63		; 0000003fH
$LN2@tt_name_en:
; Line 110
	mov	eax, DWORD PTR _string$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	cl, BYTE PTR _code$[ebp]
	mov	BYTE PTR [eax], cl
; Line 111
	jmp	SHORT $LN5@tt_name_en
$LN4@tt_name_en:
; Line 113
	mov	edx, DWORD PTR _string$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	mov	BYTE PTR [edx], 0
; Line 115
	mov	eax, DWORD PTR _string$[ebp]
$LN8@tt_name_en:
; Line 116
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@tt_name_en
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@tt_name_en:
	DD	1
	DD	$LN11@tt_name_en
$LN11@tt_name_en:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN10@tt_name_en
$LN10@tt_name_en:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_tt_name_entry_ascii_from_other ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -28						; size = 4
_read$ = -20						; size = 4
_n$ = -16						; size = 4
_code$ = -12						; size = 4
_len$ = -8						; size = 4
_string$ = -4						; size = 4
_entry$ = 8						; size = 4
_memory$ = 12						; size = 4
_tt_name_entry_ascii_from_utf16 PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfobjs.c
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 54
	mov	DWORD PTR _string$[ebp], 0
; Line 56
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _read$[ebp], ecx
; Line 60
	mov	edx, DWORD PTR _entry$[ebp]
	movzx	eax, WORD PTR [edx+8]
	shr	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 62
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	push	edx
	push	0
	push	1
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _string$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@tt_name_en
; Line 63
	xor	eax, eax
	jmp	$LN8@tt_name_en
$LN7@tt_name_en:
; Line 65
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@tt_name_en
$LN5@tt_name_en:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN6@tt_name_en:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jae	SHORT $LN4@tt_name_en
; Line 67
	mov	eax, DWORD PTR _read$[ebp]
	add	eax, 2
	mov	DWORD PTR _read$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _read$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _read$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _code$[ebp], eax
; Line 69
	cmp	DWORD PTR _code$[ebp], 0
	jne	SHORT $LN3@tt_name_en
; Line 70
	jmp	SHORT $LN4@tt_name_en
$LN3@tt_name_en:
; Line 72
	cmp	DWORD PTR _code$[ebp], 32		; 00000020H
	jb	SHORT $LN1@tt_name_en
	cmp	DWORD PTR _code$[ebp], 127		; 0000007fH
	jbe	SHORT $LN2@tt_name_en
$LN1@tt_name_en:
; Line 73
	mov	DWORD PTR _code$[ebp], 63		; 0000003fH
$LN2@tt_name_en:
; Line 75
	mov	ecx, DWORD PTR _string$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	dl, BYTE PTR _code$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 76
	jmp	SHORT $LN5@tt_name_en
$LN4@tt_name_en:
; Line 78
	mov	eax, DWORD PTR _string$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	BYTE PTR [eax], 0
; Line 80
	mov	eax, DWORD PTR _string$[ebp]
$LN8@tt_name_en:
; Line 81
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@tt_name_en
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@tt_name_en:
	DD	1
	DD	$LN11@tt_name_en
$LN11@tt_name_en:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN10@tt_name_en
$LN10@tt_name_en:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_tt_name_entry_ascii_from_utf16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv221 = -52						; size = 4
_value$1 = -48						; size = 4
_name_offset$2 = -44					; size = 4
_type$3 = -40						; size = 4
__count$4 = -36						; size = 4
__ppem$5 = -32						; size = 4
_property_len$ = -28					; size = 4
_strike$ = -24						; size = 4
_count$ = -20						; size = 4
_p$ = -16						; size = 4
_error$ = -12						; size = 4
_size$ = -8						; size = 4
_bdf$ = -4						; size = 4
_face$ = 8						; size = 4
_property_name$ = 12					; size = 4
_aprop$ = 16						; size = 4
_tt_face_find_bdf_prop PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttbdf.c
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 144
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 760				; 000002f8H
	mov	DWORD PTR _bdf$[ebp], eax
; Line 145
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR _size$[ebp], edx
; Line 146
	mov	DWORD PTR _error$[ebp], 0
; Line 153
	mov	eax, DWORD PTR _aprop$[ebp]
	mov	DWORD PTR [eax], 0
; Line 155
	mov	ecx, DWORD PTR _bdf$[ebp]
	movzx	edx, BYTE PTR [ecx+20]
	test	edx, edx
	jne	SHORT $LN21@tt_face_fi
; Line 157
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_load_bdf_props
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 158
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@tt_face_fi
; Line 159
	jmp	$Exit$25
$LN21@tt_face_fi:
; Line 162
	mov	eax, DWORD PTR _bdf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _count$[ebp], ecx
; Line 163
	mov	edx, DWORD PTR _bdf$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 164
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _strike$[ebp], eax
; Line 166
	mov	DWORD PTR _error$[ebp], 6
; Line 168
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN18@tt_face_fi
	cmp	DWORD PTR _property_name$[ebp], 0
	jne	SHORT $LN19@tt_face_fi
$LN18@tt_face_fi:
; Line 169
	jmp	$Exit$25
$LN19@tt_face_fi:
; Line 171
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _property_len$[ebp], eax
; Line 172
	cmp	DWORD PTR _property_len$[ebp], 0
	jne	SHORT $LN17@tt_face_fi
; Line 173
	jmp	$Exit$25
$LN17@tt_face_fi:
; Line 175
	jmp	SHORT $LN16@tt_face_fi
$LN15@tt_face_fi:
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
$LN16@tt_face_fi:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN14@tt_face_fi
; Line 177
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR __ppem$5[ebp], eax
; Line 178
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR __count$4[ebp], ecx
; Line 180
	mov	edx, DWORD PTR _size$[ebp]
	movzx	eax, WORD PTR [edx+14]
	cmp	DWORD PTR __ppem$5[ebp], eax
	jne	SHORT $LN13@tt_face_fi
; Line 182
	mov	ecx, DWORD PTR __count$4[ebp]
	mov	DWORD PTR _count$[ebp], ecx
; Line 183
	jmp	SHORT $FoundStrike$26
$LN13@tt_face_fi:
; Line 186
	imul	edx, DWORD PTR __count$4[ebp], 10
	add	edx, DWORD PTR _strike$[ebp]
	mov	DWORD PTR _strike$[ebp], edx
; Line 187
	jmp	$LN15@tt_face_fi
$LN14@tt_face_fi:
; Line 188
	jmp	$Exit$25
$FoundStrike$26:
; Line 191
	mov	eax, DWORD PTR _strike$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 192
	jmp	SHORT $LN12@tt_face_fi
$LN11@tt_face_fi:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
$LN12@tt_face_fi:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$Exit$25
; Line 194
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+4]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax+4]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _type$3[ebp], ecx
; Line 196
	mov	edx, DWORD PTR _type$3[ebp]
	and	edx, 16					; 00000010H
	je	$LN9@tt_face_fi
; Line 198
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	DWORD PTR _name_offset$2[ebp], eax
; Line 199
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+6]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+6]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx+6]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx+6]
	or	eax, edx
	mov	DWORD PTR _value$1[ebp], eax
; Line 206
	mov	eax, DWORD PTR _bdf$[ebp]
	mov	ecx, DWORD PTR _name_offset$2[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	$LN9@tt_face_fi
	mov	edx, DWORD PTR _bdf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _name_offset$2[ebp]
	cmp	DWORD PTR _property_len$[ebp], eax
	jae	$LN9@tt_face_fi
	mov	ecx, DWORD PTR _bdf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _name_offset$2[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _bdf$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _name_offset$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _property_name$[ebp]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN9@tt_face_fi
; Line 208
	mov	eax, DWORD PTR _type$3[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR tv221[ebp], eax
	cmp	DWORD PTR tv221[ebp], 3
	ja	$LN9@tt_face_fi
	mov	ecx, DWORD PTR tv221[ebp]
	jmp	DWORD PTR $LN24@tt_face_fi[ecx*4]
$LN5@tt_face_fi:
; Line 214
	mov	edx, DWORD PTR _bdf$[ebp]
	mov	eax, DWORD PTR _value$1[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jae	SHORT $LN4@tt_face_fi
	mov	esi, esp
	mov	ecx, DWORD PTR _bdf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	push	0
	mov	eax, DWORD PTR _bdf$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _value$1[ebp]
	push	ecx
	call	DWORD PTR __imp__memchr
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@tt_face_fi
; Line 216
	mov	edx, DWORD PTR _aprop$[ebp]
	mov	DWORD PTR [edx], 1
; Line 217
	mov	eax, DWORD PTR _bdf$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _value$1[ebp]
	mov	edx, DWORD PTR _aprop$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 218
	mov	DWORD PTR _error$[ebp], 0
; Line 219
	jmp	SHORT $Exit$25
$LN4@tt_face_fi:
; Line 221
	jmp	SHORT $LN9@tt_face_fi
$LN3@tt_face_fi:
; Line 224
	mov	eax, DWORD PTR _aprop$[ebp]
	mov	DWORD PTR [eax], 2
; Line 225
	mov	ecx, DWORD PTR _aprop$[ebp]
	mov	edx, DWORD PTR _value$1[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 226
	mov	DWORD PTR _error$[ebp], 0
; Line 227
	jmp	SHORT $Exit$25
$LN2@tt_face_fi:
; Line 230
	mov	eax, DWORD PTR _aprop$[ebp]
	mov	DWORD PTR [eax], 3
; Line 231
	mov	ecx, DWORD PTR _aprop$[ebp]
	mov	edx, DWORD PTR _value$1[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 232
	mov	DWORD PTR _error$[ebp], 0
; Line 233
	jmp	SHORT $Exit$25
$LN9@tt_face_fi:
; Line 240
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _p$[ebp], eax
; Line 241
	jmp	$LN11@tt_face_fi
$Exit$25:
; Line 244
	mov	eax, DWORD PTR _error$[ebp]
; Line 245
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@tt_face_fi:
	DD	$LN5@tt_face_fi
	DD	$LN5@tt_face_fi
	DD	$LN3@tt_face_fi
	DD	$LN2@tt_face_fi
_tt_face_find_bdf_prop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$1 = -8						; size = 4
_bdf$ = -4						; size = 4
_face$ = 8						; size = 4
_tt_face_free_bdf_props PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttbdf.c
; Line 42
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 43
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 760				; 000002f8H
	mov	DWORD PTR _bdf$[ebp], eax
; Line 46
	mov	ecx, DWORD PTR _bdf$[ebp]
	movzx	edx, BYTE PTR [ecx+20]
	test	edx, edx
	je	SHORT $LN3@tt_face_fr
; Line 48
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$1[ebp], ecx
; Line 51
	mov	edx, DWORD PTR _bdf$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@tt_face_fr
; Line 52
	mov	eax, DWORD PTR _bdf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$1[ebp]
	push	ecx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
$LN1@tt_face_fr:
; Line 54
	mov	edx, DWORD PTR _bdf$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 55
	mov	eax, DWORD PTR _bdf$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 56
	mov	ecx, DWORD PTR _bdf$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN3@tt_face_fr:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_free_bdf_props ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$1 = -16						; size = 4
_stream$2 = -12						; size = 4
_sfnt$ = -8						; size = 4
_memory$ = -4						; size = 4
_face$ = 8						; size = 4
_sfnt_done_face PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfobjs.c
; Line 1488
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1493
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN33@sfnt_done_
; Line 1494
	jmp	$LN34@sfnt_done_
$LN33@sfnt_done_:
; Line 1496
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1497
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+532]
	mov	DWORD PTR _sfnt$[ebp], eax
; Line 1499
	cmp	DWORD PTR _sfnt$[ebp], 0
	je	SHORT $LN32@sfnt_done_
; Line 1502
	mov	ecx, DWORD PTR _sfnt$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	je	SHORT $LN31@sfnt_done_
; Line 1503
	mov	esi, esp
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN31@sfnt_done_:
; Line 1506
	mov	edx, DWORD PTR _sfnt$[ebp]
	cmp	DWORD PTR [edx+100], 0
	je	SHORT $LN32@sfnt_done_
; Line 1507
	mov	esi, esp
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN32@sfnt_done_:
; Line 1512
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_free_bdf_props
	add	esp, 4
; Line 1516
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_done_kern
	add	esp, 4
$LN29@sfnt_done_:
; Line 1519
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+144]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+144], 0
	xor	eax, eax
	jne	SHORT $LN29@sfnt_done_
; Line 1520
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+140], 0
$LN26@sfnt_done_:
; Line 1523
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+156]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+156], 0
	xor	eax, eax
	jne	SHORT $LN26@sfnt_done_
; Line 1524
	xor	ecx, ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	WORD PTR [edx+152], cx
; Line 1527
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$2[ebp], ecx
; Line 1531
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 500				; 000001f4H
	push	edx
	mov	eax, DWORD PTR _stream$2[ebp]
	push	eax
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 1532
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+504], 0
; Line 1537
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR _stream$1[ebp], eax
; Line 1540
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 680				; 000002a8H
	push	ecx
	mov	edx, DWORD PTR _stream$1[ebp]
	push	edx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 1541
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 688				; 000002b0H
	push	eax
	mov	ecx, DWORD PTR _stream$1[ebp]
	push	ecx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 1542
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+684], 0
; Line 1543
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+692], 0
; Line 1547
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, BYTE PTR [ecx+292]
	test	edx, edx
	je	SHORT $LN16@sfnt_done_
$LN22@sfnt_done_:
; Line 1549
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+332], 0
	xor	ecx, ecx
	jne	SHORT $LN22@sfnt_done_
$LN19@sfnt_done_:
; Line 1550
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+336]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+336], 0
	xor	eax, eax
	jne	SHORT $LN19@sfnt_done_
; Line 1551
	mov	ecx, DWORD PTR _face$[ebp]
	mov	BYTE PTR [ecx+292], 0
$LN16@sfnt_done_:
; Line 1555
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+544]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+544], 0
	xor	eax, eax
	jne	SHORT $LN16@sfnt_done_
; Line 1556
	xor	ecx, ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	WORD PTR [edx+542], cx
; Line 1559
	cmp	DWORD PTR _sfnt$[ebp], 0
	je	SHORT $LN12@sfnt_done_
; Line 1560
	mov	esi, esp
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@sfnt_done_:
; Line 1563
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+20], 0
	xor	ecx, ecx
	jne	SHORT $LN12@sfnt_done_
$LN9@sfnt_done_:
; Line 1564
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+24], 0
	xor	eax, eax
	jne	SHORT $LN9@sfnt_done_
$LN6@sfnt_done_:
; Line 1567
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+32], 0
	xor	edx, edx
	jne	SHORT $LN6@sfnt_done_
; Line 1568
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN3@sfnt_done_:
; Line 1570
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+664]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+664], 0
	xor	edx, edx
	jne	SHORT $LN3@sfnt_done_
; Line 1572
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+532], 0
$LN34@sfnt_done_:
; Line 1573
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sfnt_done_face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv1151 = -308						; size = 4
tv802 = -304						; size = 4
tv804 = -300						; size = 4
tv799 = -296						; size = 4
tv769 = -292						; size = 4
tv771 = -288						; size = 4
tv766 = -284						; size = 4
tv700 = -280						; size = 4
tv702 = -276						; size = 4
tv697 = -272						; size = 4
tv664 = -268						; size = 4
tv666 = -264						; size = 4
tv661 = -260						; size = 4
tv627 = -256						; size = 4
tv629 = -252						; size = 4
tv624 = -248						; size = 4
tv589 = -244						; size = 4
tv591 = -240						; size = 4
tv586 = -236						; size = 4
tv553 = -232						; size = 4
tv555 = -228						; size = 4
tv550 = -224						; size = 4
tv446 = -220						; size = 4
tv448 = -216						; size = 4
tv443 = -212						; size = 4
tv410 = -208						; size = 4
tv412 = -204						; size = 4
tv407 = -200						; size = 4
tv373 = -196						; size = 4
tv375 = -192						; size = 4
tv370 = -188						; size = 4
tv308 = -184						; size = 4
tv310 = -180						; size = 4
tv305 = -176						; size = 4
tv275 = -172						; size = 4
tv277 = -168						; size = 4
tv272 = -164						; size = 4
tv242 = -160						; size = 4
tv244 = -156						; size = 4
tv239 = -152						; size = 4
tv200 = -148						; size = 4
tv202 = -144						; size = 4
tv197 = -140						; size = 4
tv174 = -133						; size = 1
tv161 = -132						; size = 4
tv163 = -128						; size = 4
tv158 = -124						; size = 4
tv132 = -120						; size = 4
tv92 = -113						; size = 1
_bsize$1 = -112						; size = 4
_metrics$2 = -104					; size = 28
_avgwidth$3 = -72					; size = 2
_em_size$4 = -68					; size = 2
_memory$5 = -64						; size = 4
_count$6 = -60						; size = 4
_i$7 = -56						; size = 4
_charmap$8 = -52					; size = 4
_m$9 = -48						; size = 4
_flags$10 = -44						; size = 4
_root$11 = -40						; size = 4
_i$12 = -36						; size = 4
_sfnt$ = -32						; size = 4
_ignore_preferred_subfamily$ = -25			; size = 1
_ignore_preferred_family$ = -24				; size = 1
_is_apple_sbix$ = -23					; size = 1
_is_apple_sbit$ = -22					; size = 1
_has_outline$ = -21					; size = 1
_psnames_error$ = -20					; size = 4
_error$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_stream$ = 8						; size = 4
_face$ = 12						; size = 4
_face_index$ = 16					; size = 4
_num_params$ = 20					; size = 4
_params$ = 24						; size = 4
_sfnt_load_face PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfobjs.c
; Line 952
	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 960
	mov	BYTE PTR _ignore_preferred_family$[ebp], 0
; Line 961
	mov	BYTE PTR _ignore_preferred_subfamily$[ebp], 0
; Line 963
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	DWORD PTR _sfnt$[ebp], ecx
; Line 965
	mov	edx, DWORD PTR _face_index$[ebp]
	mov	DWORD PTR _face_index$[ebp], edx
; Line 974
	mov	DWORD PTR _i$12[ebp], 0
	jmp	SHORT $LN413@sfnt_load_
$LN412@sfnt_load_:
	mov	eax, DWORD PTR _i$12[ebp]
	add	eax, 1
	mov	DWORD PTR _i$12[ebp], eax
$LN413@sfnt_load_:
	mov	ecx, DWORD PTR _i$12[ebp]
	cmp	ecx, DWORD PTR _num_params$[ebp]
	jge	SHORT $LN407@sfnt_load_
; Line 976
	mov	edx, DWORD PTR _i$12[ebp]
	mov	eax, DWORD PTR _params$[ebp]
	cmp	DWORD PTR [eax+edx*8], 1768386662	; 69677066H
	jne	SHORT $LN410@sfnt_load_
; Line 977
	mov	BYTE PTR _ignore_preferred_family$[ebp], 1
	jmp	SHORT $LN409@sfnt_load_
$LN410@sfnt_load_:
; Line 978
	mov	ecx, DWORD PTR _i$12[ebp]
	mov	edx, DWORD PTR _params$[ebp]
	cmp	DWORD PTR [edx+ecx*8], 1768386675	; 69677073H
	jne	SHORT $LN409@sfnt_load_
; Line 979
	mov	BYTE PTR _ignore_preferred_subfamily$[ebp], 1
$LN409@sfnt_load_:
; Line 980
	jmp	SHORT $LN412@sfnt_load_
$LN407@sfnt_load_:
; Line 1000
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN406@sfnt_load_
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	push	OFFSET $SG13755
	call	_FT_Message
	add	esp, 8
$LN406@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN407@sfnt_load_
; Line 1006
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN416@sfnt_load_
	push	1735162214				; 676c7966H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_lookup_table
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN416@sfnt_load_
	push	1128678944				; 43464620H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_lookup_table
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN416@sfnt_load_
	mov	BYTE PTR tv92[ebp], 0
	jmp	SHORT $LN417@sfnt_load_
$LN416@sfnt_load_:
	mov	BYTE PTR tv92[ebp], 1
$LN417@sfnt_load_:
	mov	dl, BYTE PTR tv92[ebp]
	mov	BYTE PTR _has_outline$[ebp], dl
; Line 1012
	mov	BYTE PTR _is_apple_sbit$[ebp], 0
; Line 1013
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	1935829368				; 73626978H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN418@sfnt_load_
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN419@sfnt_load_
$LN418@sfnt_load_:
	mov	DWORD PTR tv132[ebp], 0
$LN419@sfnt_load_:
	mov	cl, BYTE PTR tv132[ebp]
	mov	BYTE PTR _is_apple_sbix$[ebp], cl
; Line 1018
	movzx	edx, BYTE PTR _is_apple_sbix$[ebp]
	test	edx, edx
	je	SHORT $LN403@sfnt_load_
; Line 1019
	mov	BYTE PTR _has_outline$[ebp], 0
$LN403@sfnt_load_:
; Line 1023
	movzx	eax, BYTE PTR _has_outline$[ebp]
	test	eax, eax
	jne	$LN402@sfnt_load_
	mov	ecx, DWORD PTR _sfnt$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	$LN402@sfnt_load_
$LN398@sfnt_load_:
; Line 1025
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN397@sfnt_load_
	push	OFFSET $SG13781
	call	_FT_Message
	add	esp, 4
$LN397@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN398@sfnt_load_
$LN394@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN393@sfnt_load_
	push	OFFSET $SG13786
	call	_FT_Message
	add	esp, 4
$LN393@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN394@sfnt_load_
	mov	esi, esp
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN390@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN389@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN420@sfnt_load_
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN421@sfnt_load_
$LN420@sfnt_load_:
	mov	DWORD PTR tv158[ebp], 0
$LN421@sfnt_load_:
	cmp	DWORD PTR tv158[ebp], 0
	je	SHORT $LN424@sfnt_load_
	mov	DWORD PTR tv163[ebp], OFFSET $SG13791
	jmp	SHORT $LN425@sfnt_load_
$LN424@sfnt_load_:
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 142				; 0000008eH
	jne	SHORT $LN422@sfnt_load_
	mov	DWORD PTR tv161[ebp], OFFSET $SG13792
	jmp	SHORT $LN423@sfnt_load_
$LN422@sfnt_load_:
	mov	DWORD PTR tv161[ebp], OFFSET $SG13793
$LN423@sfnt_load_:
	mov	eax, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv163[ebp], eax
$LN425@sfnt_load_:
	mov	ecx, DWORD PTR tv163[ebp]
	push	ecx
	push	OFFSET $SG13794
	call	_FT_Message
	add	esp, 8
$LN389@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN390@sfnt_load_
$LN386@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN385@sfnt_load_
	push	OFFSET $SG13799
	call	_FT_Message
	add	esp, 4
$LN385@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN386@sfnt_load_
	xor	eax, eax
	jne	$LN398@sfnt_load_
; Line 1026
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN426@sfnt_load_
	mov	BYTE PTR tv174[ebp], 1
	jmp	SHORT $LN427@sfnt_load_
$LN426@sfnt_load_:
	mov	BYTE PTR tv174[ebp], 0
$LN427@sfnt_load_:
	mov	cl, BYTE PTR tv174[ebp]
	mov	BYTE PTR _is_apple_sbit$[ebp], cl
$LN402@sfnt_load_:
; Line 1031
	movzx	edx, BYTE PTR _is_apple_sbit$[ebp]
	test	edx, edx
	je	SHORT $LN377@sfnt_load_
	movzx	eax, BYTE PTR _is_apple_sbix$[ebp]
	test	eax, eax
	je	$LN382@sfnt_load_
$LN377@sfnt_load_:
; Line 1033
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN376@sfnt_load_
	push	OFFSET $SG13810
	call	_FT_Message
	add	esp, 4
$LN376@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN377@sfnt_load_
$LN373@sfnt_load_:
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN372@sfnt_load_
	push	OFFSET $SG13815
	call	_FT_Message
	add	esp, 4
$LN372@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN373@sfnt_load_
	mov	esi, esp
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN369@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN368@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN428@sfnt_load_
	mov	DWORD PTR tv197[ebp], 1
	jmp	SHORT $LN429@sfnt_load_
$LN428@sfnt_load_:
	mov	DWORD PTR tv197[ebp], 0
$LN429@sfnt_load_:
	cmp	DWORD PTR tv197[ebp], 0
	je	SHORT $LN432@sfnt_load_
	mov	DWORD PTR tv202[ebp], OFFSET $SG13820
	jmp	SHORT $LN433@sfnt_load_
$LN432@sfnt_load_:
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 142				; 0000008eH
	jne	SHORT $LN430@sfnt_load_
	mov	DWORD PTR tv200[ebp], OFFSET $SG13821
	jmp	SHORT $LN431@sfnt_load_
$LN430@sfnt_load_:
	mov	DWORD PTR tv200[ebp], OFFSET $SG13822
$LN431@sfnt_load_:
	mov	edx, DWORD PTR tv200[ebp]
	mov	DWORD PTR tv202[ebp], edx
$LN433@sfnt_load_:
	mov	eax, DWORD PTR tv202[ebp]
	push	eax
	push	OFFSET $SG13823
	call	_FT_Message
	add	esp, 8
$LN368@sfnt_load_:
	xor	ecx, ecx
	jne	$LN369@sfnt_load_
$LN365@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN364@sfnt_load_
	push	OFFSET $SG13828
	call	_FT_Message
	add	esp, 4
$LN364@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN365@sfnt_load_
	xor	edx, edx
	jne	$LN377@sfnt_load_
; Line 1034
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN382@sfnt_load_
; Line 1035
	jmp	$Exit$518
$LN382@sfnt_load_:
; Line 1038
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+178]
	test	ecx, ecx
	jne	SHORT $LN356@sfnt_load_
; Line 1040
	push	OFFSET $SG13832
	push	1040					; 00000410H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1042
	jmp	$Exit$518
$LN356@sfnt_load_:
; Line 1047
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN355@sfnt_load_
	push	OFFSET $SG13840
	call	_FT_Message
	add	esp, 4
$LN355@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN356@sfnt_load_
$LN352@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN351@sfnt_load_
	push	OFFSET $SG13845
	call	_FT_Message
	add	esp, 4
$LN351@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN352@sfnt_load_
	mov	esi, esp
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN348@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN347@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN434@sfnt_load_
	mov	DWORD PTR tv239[ebp], 1
	jmp	SHORT $LN435@sfnt_load_
$LN434@sfnt_load_:
	mov	DWORD PTR tv239[ebp], 0
$LN435@sfnt_load_:
	cmp	DWORD PTR tv239[ebp], 0
	je	SHORT $LN438@sfnt_load_
	mov	DWORD PTR tv244[ebp], OFFSET $SG13850
	jmp	SHORT $LN439@sfnt_load_
$LN438@sfnt_load_:
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 142				; 0000008eH
	jne	SHORT $LN436@sfnt_load_
	mov	DWORD PTR tv242[ebp], OFFSET $SG13851
	jmp	SHORT $LN437@sfnt_load_
$LN436@sfnt_load_:
	mov	DWORD PTR tv242[ebp], OFFSET $SG13852
$LN437@sfnt_load_:
	mov	eax, DWORD PTR tv242[ebp]
	mov	DWORD PTR tv244[ebp], eax
$LN439@sfnt_load_:
	mov	ecx, DWORD PTR tv244[ebp]
	push	ecx
	push	OFFSET $SG13853
	call	_FT_Message
	add	esp, 8
$LN347@sfnt_load_:
	xor	edx, edx
	jne	$LN348@sfnt_load_
$LN344@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN343@sfnt_load_
	push	OFFSET $SG13858
	call	_FT_Message
	add	esp, 4
$LN343@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN344@sfnt_load_
	xor	eax, eax
	jne	$LN356@sfnt_load_
$LN337@sfnt_load_:
; Line 1048
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN336@sfnt_load_
	push	OFFSET $SG13866
	call	_FT_Message
	add	esp, 4
$LN336@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN337@sfnt_load_
$LN333@sfnt_load_:
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN332@sfnt_load_
	push	OFFSET $SG13871
	call	_FT_Message
	add	esp, 4
$LN332@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN333@sfnt_load_
	mov	esi, esp
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN329@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN328@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN440@sfnt_load_
	mov	DWORD PTR tv272[ebp], 1
	jmp	SHORT $LN441@sfnt_load_
$LN440@sfnt_load_:
	mov	DWORD PTR tv272[ebp], 0
$LN441@sfnt_load_:
	cmp	DWORD PTR tv272[ebp], 0
	je	SHORT $LN444@sfnt_load_
	mov	DWORD PTR tv277[ebp], OFFSET $SG13876
	jmp	SHORT $LN445@sfnt_load_
$LN444@sfnt_load_:
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 142				; 0000008eH
	jne	SHORT $LN442@sfnt_load_
	mov	DWORD PTR tv275[ebp], OFFSET $SG13877
	jmp	SHORT $LN443@sfnt_load_
$LN442@sfnt_load_:
	mov	DWORD PTR tv275[ebp], OFFSET $SG13878
$LN443@sfnt_load_:
	mov	edx, DWORD PTR tv275[ebp]
	mov	DWORD PTR tv277[ebp], edx
$LN445@sfnt_load_:
	mov	eax, DWORD PTR tv277[ebp]
	push	eax
	push	OFFSET $SG13879
	call	_FT_Message
	add	esp, 8
$LN328@sfnt_load_:
	xor	ecx, ecx
	jne	$LN329@sfnt_load_
$LN325@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN324@sfnt_load_
	push	OFFSET $SG13884
	call	_FT_Message
	add	esp, 4
$LN324@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN325@sfnt_load_
	xor	edx, edx
	jne	$LN337@sfnt_load_
$LN318@sfnt_load_:
; Line 1052
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN317@sfnt_load_
	push	OFFSET $SG13892
	call	_FT_Message
	add	esp, 4
$LN317@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN318@sfnt_load_
$LN314@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN313@sfnt_load_
	push	OFFSET $SG13897
	call	_FT_Message
	add	esp, 4
$LN313@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN314@sfnt_load_
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN310@sfnt_load_:
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN309@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN446@sfnt_load_
	mov	DWORD PTR tv305[ebp], 1
	jmp	SHORT $LN447@sfnt_load_
$LN446@sfnt_load_:
	mov	DWORD PTR tv305[ebp], 0
$LN447@sfnt_load_:
	cmp	DWORD PTR tv305[ebp], 0
	je	SHORT $LN450@sfnt_load_
	mov	DWORD PTR tv310[ebp], OFFSET $SG13902
	jmp	SHORT $LN451@sfnt_load_
$LN450@sfnt_load_:
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN448@sfnt_load_
	mov	DWORD PTR tv308[ebp], OFFSET $SG13903
	jmp	SHORT $LN449@sfnt_load_
$LN448@sfnt_load_:
	mov	DWORD PTR tv308[ebp], OFFSET $SG13904
$LN449@sfnt_load_:
	mov	ecx, DWORD PTR tv308[ebp]
	mov	DWORD PTR tv310[ebp], ecx
$LN451@sfnt_load_:
	mov	edx, DWORD PTR tv310[ebp]
	push	edx
	push	OFFSET $SG13905
	call	_FT_Message
	add	esp, 8
$LN309@sfnt_load_:
	xor	eax, eax
	jne	$LN310@sfnt_load_
$LN306@sfnt_load_:
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN305@sfnt_load_
	push	OFFSET $SG13910
	call	_FT_Message
	add	esp, 4
$LN305@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN306@sfnt_load_
	xor	ecx, ecx
	jne	$LN318@sfnt_load_
$LN299@sfnt_load_:
; Line 1053
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN298@sfnt_load_
	push	OFFSET $SG13918
	call	_FT_Message
	add	esp, 4
$LN298@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN299@sfnt_load_
$LN295@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN294@sfnt_load_
	push	OFFSET $SG13923
	call	_FT_Message
	add	esp, 4
$LN294@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN295@sfnt_load_
	mov	esi, esp
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN291@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN290@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN452@sfnt_load_
	mov	DWORD PTR tv370[ebp], 1
	jmp	SHORT $LN453@sfnt_load_
$LN452@sfnt_load_:
	mov	DWORD PTR tv370[ebp], 0
$LN453@sfnt_load_:
	cmp	DWORD PTR tv370[ebp], 0
	je	SHORT $LN456@sfnt_load_
	mov	DWORD PTR tv375[ebp], OFFSET $SG13928
	jmp	SHORT $LN457@sfnt_load_
$LN456@sfnt_load_:
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 142				; 0000008eH
	jne	SHORT $LN454@sfnt_load_
	mov	DWORD PTR tv373[ebp], OFFSET $SG13929
	jmp	SHORT $LN455@sfnt_load_
$LN454@sfnt_load_:
	mov	DWORD PTR tv373[ebp], OFFSET $SG13930
$LN455@sfnt_load_:
	mov	eax, DWORD PTR tv373[ebp]
	mov	DWORD PTR tv375[ebp], eax
$LN457@sfnt_load_:
	mov	ecx, DWORD PTR tv375[ebp]
	push	ecx
	push	OFFSET $SG13931
	call	_FT_Message
	add	esp, 8
$LN290@sfnt_load_:
	xor	edx, edx
	jne	$LN291@sfnt_load_
$LN287@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN286@sfnt_load_
	push	OFFSET $SG13936
	call	_FT_Message
	add	esp, 4
$LN286@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN287@sfnt_load_
	xor	eax, eax
	jne	$LN299@sfnt_load_
; Line 1056
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR _psnames_error$[ebp], ecx
; Line 1061
	movzx	edx, BYTE PTR _is_apple_sbit$[ebp]
	test	edx, edx
	jne	$LN283@sfnt_load_
$LN279@sfnt_load_:
; Line 1064
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN278@sfnt_load_
	push	OFFSET $SG13945
	push	OFFSET $SG13946
	call	_FT_Message
	add	esp, 8
$LN278@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN279@sfnt_load_
$LN275@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN274@sfnt_load_
	push	OFFSET $SG13951
	call	_FT_Message
	add	esp, 4
$LN274@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN275@sfnt_load_
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN271@sfnt_load_:
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN270@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN458@sfnt_load_
	mov	DWORD PTR tv407[ebp], 1
	jmp	SHORT $LN459@sfnt_load_
$LN458@sfnt_load_:
	mov	DWORD PTR tv407[ebp], 0
$LN459@sfnt_load_:
	cmp	DWORD PTR tv407[ebp], 0
	je	SHORT $LN462@sfnt_load_
	mov	DWORD PTR tv412[ebp], OFFSET $SG13956
	jmp	SHORT $LN463@sfnt_load_
$LN462@sfnt_load_:
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN460@sfnt_load_
	mov	DWORD PTR tv410[ebp], OFFSET $SG13957
	jmp	SHORT $LN461@sfnt_load_
$LN460@sfnt_load_:
	mov	DWORD PTR tv410[ebp], OFFSET $SG13958
$LN461@sfnt_load_:
	mov	ecx, DWORD PTR tv410[ebp]
	mov	DWORD PTR tv412[ebp], ecx
$LN463@sfnt_load_:
	mov	edx, DWORD PTR tv412[ebp]
	push	edx
	push	OFFSET $SG13959
	call	_FT_Message
	add	esp, 8
$LN270@sfnt_load_:
	xor	eax, eax
	jne	$LN271@sfnt_load_
$LN267@sfnt_load_:
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN266@sfnt_load_
	push	OFFSET $SG13964
	call	_FT_Message
	add	esp, 4
$LN266@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN267@sfnt_load_
	xor	ecx, ecx
	jne	$LN279@sfnt_load_
; Line 1065
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN263@sfnt_load_
$LN259@sfnt_load_:
; Line 1067
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN258@sfnt_load_
	push	OFFSET $SG13973
	push	OFFSET $SG13974
	call	_FT_Message
	add	esp, 8
$LN258@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN259@sfnt_load_
$LN255@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN254@sfnt_load_
	push	OFFSET $SG13979
	call	_FT_Message
	add	esp, 4
$LN254@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN255@sfnt_load_
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN251@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN250@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN464@sfnt_load_
	mov	DWORD PTR tv443[ebp], 1
	jmp	SHORT $LN465@sfnt_load_
$LN464@sfnt_load_:
	mov	DWORD PTR tv443[ebp], 0
$LN465@sfnt_load_:
	cmp	DWORD PTR tv443[ebp], 0
	je	SHORT $LN468@sfnt_load_
	mov	DWORD PTR tv448[ebp], OFFSET $SG13984
	jmp	SHORT $LN469@sfnt_load_
$LN468@sfnt_load_:
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 142				; 0000008eH
	jne	SHORT $LN466@sfnt_load_
	mov	DWORD PTR tv446[ebp], OFFSET $SG13985
	jmp	SHORT $LN467@sfnt_load_
$LN466@sfnt_load_:
	mov	DWORD PTR tv446[ebp], OFFSET $SG13986
$LN467@sfnt_load_:
	mov	eax, DWORD PTR tv446[ebp]
	mov	DWORD PTR tv448[ebp], eax
$LN469@sfnt_load_:
	mov	ecx, DWORD PTR tv448[ebp]
	push	ecx
	push	OFFSET $SG13987
	call	_FT_Message
	add	esp, 8
$LN250@sfnt_load_:
	xor	edx, edx
	jne	$LN251@sfnt_load_
$LN247@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN246@sfnt_load_
	push	OFFSET $SG13992
	call	_FT_Message
	add	esp, 4
$LN246@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN247@sfnt_load_
	xor	eax, eax
	jne	$LN259@sfnt_load_
; Line 1068
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 142				; 0000008eH
	jne	SHORT $LN243@sfnt_load_
; Line 1070
	push	OFFSET $SG13994
	push	1070					; 0000042eH
	push	147					; 00000093H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 147				; 00000093H
	mov	DWORD PTR _error$[ebp], eax
; Line 1077
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN243@sfnt_load_
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN243@sfnt_load_
; Line 1079
	xor	edx, edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	WORD PTR [eax+250], dx
; Line 1080
	mov	DWORD PTR _error$[ebp], 0
$LN243@sfnt_load_:
; Line 1083
	jmp	$LN241@sfnt_load_
$LN263@sfnt_load_:
; Line 1085
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 142				; 0000008eH
	jne	$LN241@sfnt_load_
; Line 1088
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+148], 1953658213		; 74727565H
	jne	SHORT $LN239@sfnt_load_
$LN238@sfnt_load_:
; Line 1090
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN237@sfnt_load_
	push	OFFSET $SG14008
	call	_FT_Message
	add	esp, 4
$LN237@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN238@sfnt_load_
; Line 1092
	mov	BYTE PTR _has_outline$[ebp], 0
; Line 1093
	mov	DWORD PTR _error$[ebp], 0
; Line 1095
	jmp	SHORT $LN241@sfnt_load_
$LN239@sfnt_load_:
; Line 1097
	push	OFFSET $SG14010
	push	1097					; 00000449H
	push	143					; 0000008fH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 143				; 0000008fH
	mov	DWORD PTR _error$[ebp], eax
; Line 1104
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN241@sfnt_load_
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN241@sfnt_load_
; Line 1106
	xor	eax, eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	WORD PTR [ecx+250], ax
; Line 1107
	mov	DWORD PTR _error$[ebp], 0
$LN241@sfnt_load_:
; Line 1114
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN228@sfnt_load_
; Line 1115
	jmp	$Exit$518
$LN228@sfnt_load_:
; Line 1118
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN227@sfnt_load_
	push	OFFSET $SG14020
	push	OFFSET $SG14021
	call	_FT_Message
	add	esp, 8
$LN227@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN228@sfnt_load_
$LN224@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN223@sfnt_load_
	push	OFFSET $SG14026
	call	_FT_Message
	add	esp, 4
$LN223@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN224@sfnt_load_
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN220@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN219@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN470@sfnt_load_
	mov	DWORD PTR tv550[ebp], 1
	jmp	SHORT $LN471@sfnt_load_
$LN470@sfnt_load_:
	mov	DWORD PTR tv550[ebp], 0
$LN471@sfnt_load_:
	cmp	DWORD PTR tv550[ebp], 0
	je	SHORT $LN474@sfnt_load_
	mov	DWORD PTR tv555[ebp], OFFSET $SG14031
	jmp	SHORT $LN475@sfnt_load_
$LN474@sfnt_load_:
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 142				; 0000008eH
	jne	SHORT $LN472@sfnt_load_
	mov	DWORD PTR tv553[ebp], OFFSET $SG14032
	jmp	SHORT $LN473@sfnt_load_
$LN472@sfnt_load_:
	mov	DWORD PTR tv553[ebp], OFFSET $SG14033
$LN473@sfnt_load_:
	mov	eax, DWORD PTR tv553[ebp]
	mov	DWORD PTR tv555[ebp], eax
$LN475@sfnt_load_:
	mov	ecx, DWORD PTR tv555[ebp]
	push	ecx
	push	OFFSET $SG14034
	call	_FT_Message
	add	esp, 8
$LN219@sfnt_load_:
	xor	edx, edx
	jne	$LN220@sfnt_load_
$LN216@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN215@sfnt_load_
	push	OFFSET $SG14039
	call	_FT_Message
	add	esp, 4
$LN215@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN216@sfnt_load_
	xor	eax, eax
	jne	$LN228@sfnt_load_
; Line 1119
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN212@sfnt_load_
$LN208@sfnt_load_:
; Line 1121
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN207@sfnt_load_
	push	OFFSET $SG14048
	push	OFFSET $SG14049
	call	_FT_Message
	add	esp, 8
$LN207@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN208@sfnt_load_
$LN204@sfnt_load_:
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN203@sfnt_load_
	push	OFFSET $SG14054
	call	_FT_Message
	add	esp, 4
$LN203@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN204@sfnt_load_
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN200@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN199@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN476@sfnt_load_
	mov	DWORD PTR tv586[ebp], 1
	jmp	SHORT $LN477@sfnt_load_
$LN476@sfnt_load_:
	mov	DWORD PTR tv586[ebp], 0
$LN477@sfnt_load_:
	cmp	DWORD PTR tv586[ebp], 0
	je	SHORT $LN480@sfnt_load_
	mov	DWORD PTR tv591[ebp], OFFSET $SG14059
	jmp	SHORT $LN481@sfnt_load_
$LN480@sfnt_load_:
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 142				; 0000008eH
	jne	SHORT $LN478@sfnt_load_
	mov	DWORD PTR tv589[ebp], OFFSET $SG14060
	jmp	SHORT $LN479@sfnt_load_
$LN478@sfnt_load_:
	mov	DWORD PTR tv589[ebp], OFFSET $SG14061
$LN479@sfnt_load_:
	mov	edx, DWORD PTR tv589[ebp]
	mov	DWORD PTR tv591[ebp], edx
$LN481@sfnt_load_:
	mov	eax, DWORD PTR tv591[ebp]
	push	eax
	push	OFFSET $SG14062
	call	_FT_Message
	add	esp, 8
$LN199@sfnt_load_:
	xor	ecx, ecx
	jne	$LN200@sfnt_load_
$LN196@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN195@sfnt_load_
	push	OFFSET $SG14067
	call	_FT_Message
	add	esp, 4
$LN195@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN196@sfnt_load_
	xor	edx, edx
	jne	$LN208@sfnt_load_
; Line 1122
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN212@sfnt_load_
; Line 1123
	mov	eax, DWORD PTR _face$[ebp]
	mov	BYTE PTR [eax+292], 1
$LN212@sfnt_load_:
; Line 1126
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN187@sfnt_load_
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 142				; 0000008eH
	je	SHORT $LN187@sfnt_load_
; Line 1127
	jmp	$Exit$518
$LN187@sfnt_load_:
; Line 1129
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN186@sfnt_load_
	push	OFFSET $SG14077
	call	_FT_Message
	add	esp, 4
$LN186@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN187@sfnt_load_
$LN183@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN182@sfnt_load_
	push	OFFSET $SG14082
	call	_FT_Message
	add	esp, 4
$LN182@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN183@sfnt_load_
	mov	esi, esp
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN179@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN178@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN482@sfnt_load_
	mov	DWORD PTR tv624[ebp], 1
	jmp	SHORT $LN483@sfnt_load_
$LN482@sfnt_load_:
	mov	DWORD PTR tv624[ebp], 0
$LN483@sfnt_load_:
	cmp	DWORD PTR tv624[ebp], 0
	je	SHORT $LN486@sfnt_load_
	mov	DWORD PTR tv629[ebp], OFFSET $SG14087
	jmp	SHORT $LN487@sfnt_load_
$LN486@sfnt_load_:
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 142				; 0000008eH
	jne	SHORT $LN484@sfnt_load_
	mov	DWORD PTR tv627[ebp], OFFSET $SG14088
	jmp	SHORT $LN485@sfnt_load_
$LN484@sfnt_load_:
	mov	DWORD PTR tv627[ebp], OFFSET $SG14089
$LN485@sfnt_load_:
	mov	eax, DWORD PTR tv627[ebp]
	mov	DWORD PTR tv629[ebp], eax
$LN487@sfnt_load_:
	mov	ecx, DWORD PTR tv629[ebp]
	push	ecx
	push	OFFSET $SG14090
	call	_FT_Message
	add	esp, 8
$LN178@sfnt_load_:
	xor	edx, edx
	jne	$LN179@sfnt_load_
$LN175@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN174@sfnt_load_
	push	OFFSET $SG14095
	call	_FT_Message
	add	esp, 4
$LN174@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN175@sfnt_load_
	xor	eax, eax
	jne	$LN187@sfnt_load_
; Line 1130
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN283@sfnt_load_
; Line 1133
	mov	ecx, 65535				; 0000ffffH
	mov	edx, DWORD PTR _face$[ebp]
	mov	WORD PTR [edx+364], cx
$LN283@sfnt_load_:
; Line 1140
	mov	eax, DWORD PTR _sfnt$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	$LN144@sfnt_load_
$LN166@sfnt_load_:
; Line 1142
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN165@sfnt_load_
	push	OFFSET $SG14105
	call	_FT_Message
	add	esp, 4
$LN165@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN166@sfnt_load_
$LN162@sfnt_load_:
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN161@sfnt_load_
	push	OFFSET $SG14110
	call	_FT_Message
	add	esp, 4
$LN161@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN162@sfnt_load_
	mov	esi, esp
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN158@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN157@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN488@sfnt_load_
	mov	DWORD PTR tv661[ebp], 1
	jmp	SHORT $LN489@sfnt_load_
$LN488@sfnt_load_:
	mov	DWORD PTR tv661[ebp], 0
$LN489@sfnt_load_:
	cmp	DWORD PTR tv661[ebp], 0
	je	SHORT $LN492@sfnt_load_
	mov	DWORD PTR tv666[ebp], OFFSET $SG14115
	jmp	SHORT $LN493@sfnt_load_
$LN492@sfnt_load_:
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 142				; 0000008eH
	jne	SHORT $LN490@sfnt_load_
	mov	DWORD PTR tv664[ebp], OFFSET $SG14116
	jmp	SHORT $LN491@sfnt_load_
$LN490@sfnt_load_:
	mov	DWORD PTR tv664[ebp], OFFSET $SG14117
$LN491@sfnt_load_:
	mov	edx, DWORD PTR tv664[ebp]
	mov	DWORD PTR tv666[ebp], edx
$LN493@sfnt_load_:
	mov	eax, DWORD PTR tv666[ebp]
	push	eax
	push	OFFSET $SG14118
	call	_FT_Message
	add	esp, 8
$LN157@sfnt_load_:
	xor	ecx, ecx
	jne	$LN158@sfnt_load_
$LN154@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN153@sfnt_load_
	push	OFFSET $SG14123
	call	_FT_Message
	add	esp, 4
$LN153@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN154@sfnt_load_
	xor	edx, edx
	jne	$LN166@sfnt_load_
; Line 1143
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN144@sfnt_load_
; Line 1148
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN149@sfnt_load_
; Line 1149
	mov	DWORD PTR _error$[ebp], 0
; Line 1150
	jmp	SHORT $LN144@sfnt_load_
$LN149@sfnt_load_:
; Line 1151
	jmp	$Exit$518
$LN144@sfnt_load_:
; Line 1155
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN143@sfnt_load_
	push	OFFSET $SG14134
	call	_FT_Message
	add	esp, 4
$LN143@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN144@sfnt_load_
$LN140@sfnt_load_:
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN139@sfnt_load_
	push	OFFSET $SG14139
	call	_FT_Message
	add	esp, 4
$LN139@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN140@sfnt_load_
	mov	esi, esp
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN136@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN135@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN494@sfnt_load_
	mov	DWORD PTR tv697[ebp], 1
	jmp	SHORT $LN495@sfnt_load_
$LN494@sfnt_load_:
	mov	DWORD PTR tv697[ebp], 0
$LN495@sfnt_load_:
	cmp	DWORD PTR tv697[ebp], 0
	je	SHORT $LN498@sfnt_load_
	mov	DWORD PTR tv702[ebp], OFFSET $SG14144
	jmp	SHORT $LN499@sfnt_load_
$LN498@sfnt_load_:
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 142				; 0000008eH
	jne	SHORT $LN496@sfnt_load_
	mov	DWORD PTR tv700[ebp], OFFSET $SG14145
	jmp	SHORT $LN497@sfnt_load_
$LN496@sfnt_load_:
	mov	DWORD PTR tv700[ebp], OFFSET $SG14146
$LN497@sfnt_load_:
	mov	edx, DWORD PTR tv700[ebp]
	mov	DWORD PTR tv702[ebp], edx
$LN499@sfnt_load_:
	mov	eax, DWORD PTR tv702[ebp]
	push	eax
	push	OFFSET $SG14147
	call	_FT_Message
	add	esp, 8
$LN135@sfnt_load_:
	xor	ecx, ecx
	jne	$LN136@sfnt_load_
$LN132@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN131@sfnt_load_
	push	OFFSET $SG14152
	call	_FT_Message
	add	esp, 4
$LN131@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN132@sfnt_load_
	xor	edx, edx
	jne	$LN144@sfnt_load_
; Line 1156
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN123@sfnt_load_
; Line 1158
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 142				; 0000008eH
	je	SHORT $LN127@sfnt_load_
; Line 1159
	jmp	$Exit$518
$LN127@sfnt_load_:
; Line 1161
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+548], 0
$LN123@sfnt_load_:
; Line 1165
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN122@sfnt_load_
	push	OFFSET $SG14162
	call	_FT_Message
	add	esp, 4
$LN122@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN123@sfnt_load_
$LN119@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN118@sfnt_load_
	push	OFFSET $SG14167
	call	_FT_Message
	add	esp, 4
$LN118@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN119@sfnt_load_
	mov	esi, esp
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN115@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN114@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN500@sfnt_load_
	mov	DWORD PTR tv766[ebp], 1
	jmp	SHORT $LN501@sfnt_load_
$LN500@sfnt_load_:
	mov	DWORD PTR tv766[ebp], 0
$LN501@sfnt_load_:
	cmp	DWORD PTR tv766[ebp], 0
	je	SHORT $LN504@sfnt_load_
	mov	DWORD PTR tv771[ebp], OFFSET $SG14172
	jmp	SHORT $LN505@sfnt_load_
$LN504@sfnt_load_:
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 142				; 0000008eH
	jne	SHORT $LN502@sfnt_load_
	mov	DWORD PTR tv769[ebp], OFFSET $SG14173
	jmp	SHORT $LN503@sfnt_load_
$LN502@sfnt_load_:
	mov	DWORD PTR tv769[ebp], OFFSET $SG14174
$LN503@sfnt_load_:
	mov	eax, DWORD PTR tv769[ebp]
	mov	DWORD PTR tv771[ebp], eax
$LN505@sfnt_load_:
	mov	ecx, DWORD PTR tv771[ebp]
	push	ecx
	push	OFFSET $SG14175
	call	_FT_Message
	add	esp, 8
$LN114@sfnt_load_:
	xor	edx, edx
	jne	$LN115@sfnt_load_
$LN111@sfnt_load_:
	mov	eax, 4
	imul	ecx, eax, 19
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN110@sfnt_load_
	push	OFFSET $SG14180
	call	_FT_Message
	add	esp, 4
$LN110@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN111@sfnt_load_
	xor	eax, eax
	jne	$LN123@sfnt_load_
$LN104@sfnt_load_:
; Line 1166
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN103@sfnt_load_
	push	OFFSET $SG14188
	call	_FT_Message
	add	esp, 4
$LN103@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN104@sfnt_load_
$LN100@sfnt_load_:
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN99@sfnt_load_
	push	OFFSET $SG14193
	call	_FT_Message
	add	esp, 4
$LN99@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN100@sfnt_load_
	mov	esi, esp
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN96@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN95@sfnt_load_
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN506@sfnt_load_
	mov	DWORD PTR tv799[ebp], 1
	jmp	SHORT $LN507@sfnt_load_
$LN506@sfnt_load_:
	mov	DWORD PTR tv799[ebp], 0
$LN507@sfnt_load_:
	cmp	DWORD PTR tv799[ebp], 0
	je	SHORT $LN510@sfnt_load_
	mov	DWORD PTR tv804[ebp], OFFSET $SG14198
	jmp	SHORT $LN511@sfnt_load_
$LN510@sfnt_load_:
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 142				; 0000008eH
	jne	SHORT $LN508@sfnt_load_
	mov	DWORD PTR tv802[ebp], OFFSET $SG14199
	jmp	SHORT $LN509@sfnt_load_
$LN508@sfnt_load_:
	mov	DWORD PTR tv802[ebp], OFFSET $SG14200
$LN509@sfnt_load_:
	mov	edx, DWORD PTR tv802[ebp]
	mov	DWORD PTR tv804[ebp], edx
$LN511@sfnt_load_:
	mov	eax, DWORD PTR tv804[ebp]
	push	eax
	push	OFFSET $SG14201
	call	_FT_Message
	add	esp, 8
$LN95@sfnt_load_:
	xor	ecx, ecx
	jne	$LN96@sfnt_load_
$LN92@sfnt_load_:
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN91@sfnt_load_
	push	OFFSET $SG14206
	call	_FT_Message
	add	esp, 4
$LN91@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN92@sfnt_load_
	xor	edx, edx
	jne	$LN104@sfnt_load_
; Line 1168
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+264]
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 1176
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 1177
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 1178
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+364]
	cmp	eax, 65535				; 0000ffffH
	je	$LN66@sfnt_load_
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+428]
	and	edx, 256				; 00000100H
	je	$LN66@sfnt_load_
; Line 1180
	movzx	eax, BYTE PTR _ignore_preferred_family$[ebp]
	test	eax, eax
	jne	SHORT $LN87@sfnt_load_
$LN86@sfnt_load_:
; Line 1181
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_get_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN85@sfnt_load_
	jmp	$Exit$518
$LN85@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN86@sfnt_load_
$LN87@sfnt_load_:
; Line 1182
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN82@sfnt_load_
$LN81@sfnt_load_:
; Line 1183
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	push	1
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_get_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN80@sfnt_load_
	jmp	$Exit$518
$LN80@sfnt_load_:
	xor	ecx, ecx
	jne	SHORT $LN81@sfnt_load_
$LN82@sfnt_load_:
; Line 1185
	movzx	edx, BYTE PTR _ignore_preferred_subfamily$[ebp]
	test	edx, edx
	jne	SHORT $LN77@sfnt_load_
$LN76@sfnt_load_:
; Line 1186
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_get_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN75@sfnt_load_
	jmp	$Exit$518
$LN75@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN76@sfnt_load_
$LN77@sfnt_load_:
; Line 1187
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN72@sfnt_load_
$LN71@sfnt_load_:
; Line 1188
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	2
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_get_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN70@sfnt_load_
	jmp	$Exit$518
$LN70@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN71@sfnt_load_
$LN72@sfnt_load_:
; Line 1190
	jmp	$LN67@sfnt_load_
$LN66@sfnt_load_:
; Line 1192
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_get_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN65@sfnt_load_
	jmp	$Exit$518
$LN65@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN66@sfnt_load_
; Line 1193
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN62@sfnt_load_
	movzx	edx, BYTE PTR _ignore_preferred_family$[ebp]
	test	edx, edx
	jne	SHORT $LN62@sfnt_load_
$LN61@sfnt_load_:
; Line 1194
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_get_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN60@sfnt_load_
	jmp	$Exit$518
$LN60@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN61@sfnt_load_
$LN62@sfnt_load_:
; Line 1195
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN52@sfnt_load_
$LN56@sfnt_load_:
; Line 1196
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	push	1
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_get_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN55@sfnt_load_
	jmp	$Exit$518
$LN55@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN56@sfnt_load_
$LN52@sfnt_load_:
; Line 1198
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	22					; 00000016H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_get_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN51@sfnt_load_
	jmp	$Exit$518
$LN51@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN52@sfnt_load_
; Line 1199
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN48@sfnt_load_
	movzx	edx, BYTE PTR _ignore_preferred_subfamily$[ebp]
	test	edx, edx
	jne	SHORT $LN48@sfnt_load_
$LN47@sfnt_load_:
; Line 1200
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_get_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN46@sfnt_load_
	jmp	$Exit$518
$LN46@sfnt_load_:
	xor	edx, edx
	jne	SHORT $LN47@sfnt_load_
$LN48@sfnt_load_:
; Line 1201
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN67@sfnt_load_
$LN42@sfnt_load_:
; Line 1202
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	2
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_get_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN41@sfnt_load_
	jmp	$Exit$518
$LN41@sfnt_load_:
	xor	eax, eax
	jne	SHORT $LN42@sfnt_load_
$LN67@sfnt_load_:
; Line 1207
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR _root$11[ebp], ecx
; Line 1208
	mov	edx, DWORD PTR _root$11[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _flags$10[ebp], eax
; Line 1216
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+732], 2
	je	SHORT $LN37@sfnt_load_
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+732], 3
	jne	SHORT $LN38@sfnt_load_
$LN37@sfnt_load_:
; Line 1217
	mov	eax, DWORD PTR _flags$10[ebp]
	or	eax, 16384				; 00004000H
	mov	DWORD PTR _flags$10[ebp], eax
$LN38@sfnt_load_:
; Line 1219
	movzx	ecx, BYTE PTR _has_outline$[ebp]
	cmp	ecx, 1
	jne	SHORT $LN36@sfnt_load_
; Line 1220
	mov	edx, DWORD PTR _flags$10[ebp]
	or	edx, 1
	mov	DWORD PTR _flags$10[ebp], edx
$LN36@sfnt_load_:
; Line 1225
	mov	eax, DWORD PTR _flags$10[ebp]
	or	eax, 24					; 00000018H
	mov	DWORD PTR _flags$10[ebp], eax
; Line 1229
	cmp	DWORD PTR _psnames_error$[ebp], 0
	jne	SHORT $LN35@sfnt_load_
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+468], 196608		; 00030000H
	je	SHORT $LN35@sfnt_load_
; Line 1230
	mov	edx, DWORD PTR _flags$10[ebp]
	or	edx, 512				; 00000200H
	mov	DWORD PTR _flags$10[ebp], edx
$LN35@sfnt_load_:
; Line 1234
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+480], 0
	je	SHORT $LN34@sfnt_load_
; Line 1235
	mov	ecx, DWORD PTR _flags$10[ebp]
	or	ecx, 4
	mov	DWORD PTR _flags$10[ebp], ecx
$LN34@sfnt_load_:
; Line 1238
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, BYTE PTR [edx+292]
	test	eax, eax
	je	SHORT $LN33@sfnt_load_
; Line 1239
	mov	ecx, DWORD PTR _flags$10[ebp]
	or	ecx, 32					; 00000020H
	mov	DWORD PTR _flags$10[ebp], ecx
$LN33@sfnt_load_:
; Line 1242
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+752], 0
	je	SHORT $LN32@sfnt_load_
; Line 1243
	mov	eax, DWORD PTR _flags$10[ebp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR _flags$10[ebp], eax
$LN32@sfnt_load_:
; Line 1250
	push	1735162214				; 676c7966H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_lookup_table
	add	esp, 8
	test	eax, eax
	je	SHORT $LN31@sfnt_load_
	push	1719034226				; 66766172H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_tt_face_lookup_table
	add	esp, 8
	test	eax, eax
	je	SHORT $LN31@sfnt_load_
	push	1735811442				; 67766172H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_lookup_table
	add	esp, 8
	test	eax, eax
	je	SHORT $LN31@sfnt_load_
; Line 1251
	mov	ecx, DWORD PTR _flags$10[ebp]
	or	ecx, 256				; 00000100H
	mov	DWORD PTR _flags$10[ebp], ecx
$LN31@sfnt_load_:
; Line 1254
	mov	edx, DWORD PTR _root$11[ebp]
	mov	eax, DWORD PTR _flags$10[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 1261
	mov	DWORD PTR _flags$10[ebp], 0
; Line 1262
	movzx	ecx, BYTE PTR _has_outline$[ebp]
	cmp	ecx, 1
	jne	SHORT $LN30@sfnt_load_
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+364]
	cmp	eax, 65535				; 0000ffffH
	je	SHORT $LN30@sfnt_load_
; Line 1268
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+428]
	and	edx, 512				; 00000200H
	je	SHORT $LN29@sfnt_load_
; Line 1269
	mov	eax, DWORD PTR _flags$10[ebp]
	or	eax, 1
	mov	DWORD PTR _flags$10[ebp], eax
	jmp	SHORT $LN28@sfnt_load_
$LN29@sfnt_load_:
; Line 1270
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+428]
	and	edx, 1
	je	SHORT $LN28@sfnt_load_
; Line 1271
	mov	eax, DWORD PTR _flags$10[ebp]
	or	eax, 1
	mov	DWORD PTR _flags$10[ebp], eax
$LN28@sfnt_load_:
; Line 1273
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+428]
	and	edx, 32					; 00000020H
	je	SHORT $LN26@sfnt_load_
; Line 1274
	mov	eax, DWORD PTR _flags$10[ebp]
	or	eax, 2
	mov	DWORD PTR _flags$10[ebp], eax
$LN26@sfnt_load_:
; Line 1276
	jmp	SHORT $LN25@sfnt_load_
$LN30@sfnt_load_:
; Line 1280
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+204]
	and	edx, 1
	je	SHORT $LN24@sfnt_load_
; Line 1281
	mov	eax, DWORD PTR _flags$10[ebp]
	or	eax, 2
	mov	DWORD PTR _flags$10[ebp], eax
$LN24@sfnt_load_:
; Line 1283
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+204]
	and	edx, 2
	je	SHORT $LN25@sfnt_load_
; Line 1284
	mov	eax, DWORD PTR _flags$10[ebp]
	or	eax, 1
	mov	DWORD PTR _flags$10[ebp], eax
$LN25@sfnt_load_:
; Line 1287
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	edx, DWORD PTR _flags$10[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 1297
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_tt_face_build_cmaps
	add	esp, 4
; Line 1305
	mov	DWORD PTR _m$9[ebp], 0
	jmp	SHORT $LN22@sfnt_load_
$LN21@sfnt_load_:
	mov	ecx, DWORD PTR _m$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _m$9[ebp], ecx
$LN22@sfnt_load_:
	mov	edx, DWORD PTR _root$11[ebp]
	mov	eax, DWORD PTR _m$9[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jge	SHORT $LN20@sfnt_load_
; Line 1307
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _m$9[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _charmap$8[ebp], ecx
; Line 1311
	mov	edx, DWORD PTR _charmap$8[ebp]
	movzx	eax, WORD PTR [edx+10]
	push	eax
	mov	ecx, DWORD PTR _charmap$8[ebp]
	movzx	edx, WORD PTR [ecx+8]
	push	edx
	call	_sfnt_find_encoding
	add	esp, 8
	mov	ecx, DWORD PTR _charmap$8[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1321
	jmp	SHORT $LN21@sfnt_load_
$LN20@sfnt_load_:
; Line 1335
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+736]
	mov	DWORD PTR _count$6[ebp], eax
; Line 1337
	cmp	DWORD PTR _count$6[ebp], 0
	jbe	$LN19@sfnt_load_
; Line 1339
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _memory$5[ebp], eax
; Line 1340
	mov	ecx, DWORD PTR _face$[ebp]
	mov	dx, WORD PTR [ecx+178]
	mov	WORD PTR _em_size$4[ebp], dx
; Line 1341
	mov	eax, DWORD PTR _face$[ebp]
	mov	cx, WORD PTR [eax+366]
	mov	WORD PTR _avgwidth$3[ebp], cx
; Line 1345
	movzx	edx, WORD PTR _em_size$4[ebp]
	test	edx, edx
	je	SHORT $LN17@sfnt_load_
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+364]
	cmp	ecx, 65535				; 0000ffffH
	jne	SHORT $LN18@sfnt_load_
$LN17@sfnt_load_:
; Line 1347
	mov	edx, 1
	mov	WORD PTR _avgwidth$3[ebp], dx
; Line 1348
	mov	eax, 1
	mov	WORD PTR _em_size$4[ebp], ax
$LN18@sfnt_load_:
; Line 1351
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _count$6[ebp]
	push	edx
	push	0
	push	16					; 00000010H
	mov	eax, DWORD PTR _memory$5[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	DWORD PTR [ecx+32], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@sfnt_load_
; Line 1352
	jmp	$Exit$518
$LN16@sfnt_load_:
; Line 1354
	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN15@sfnt_load_
$LN14@sfnt_load_:
	mov	edx, DWORD PTR _i$7[ebp]
	add	edx, 1
	mov	DWORD PTR _i$7[ebp], edx
$LN15@sfnt_load_:
	mov	eax, DWORD PTR _i$7[ebp]
	cmp	eax, DWORD PTR _count$6[ebp]
	jae	$LN13@sfnt_load_
; Line 1356
	mov	ecx, DWORD PTR _i$7[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _root$11[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR _bsize$1[ebp], ecx
; Line 1359
	mov	esi, esp
	lea	eax, DWORD PTR _metrics$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1360
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@sfnt_load_
; Line 1361
	jmp	$Exit$518
$LN12@sfnt_load_:
; Line 1363
	mov	edx, DWORD PTR _metrics$2[ebp+20]
	sar	edx, 6
	mov	eax, DWORD PTR _bsize$1[ebp]
	mov	WORD PTR [eax], dx
; Line 1365
	movsx	ecx, WORD PTR _avgwidth$3[ebp]
	movzx	edx, WORD PTR _metrics$2[ebp]
	imul	ecx, edx
	movzx	eax, WORD PTR _em_size$4[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	movzx	esi, WORD PTR _em_size$4[ebp]
	mov	eax, ecx
	cdq
	idiv	esi
	mov	ecx, DWORD PTR _bsize$1[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 1367
	movzx	edx, WORD PTR _metrics$2[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR _bsize$1[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 1368
	movzx	ecx, WORD PTR _metrics$2[ebp+2]
	shl	ecx, 6
	mov	edx, DWORD PTR _bsize$1[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 1371
	movzx	eax, WORD PTR _metrics$2[ebp+2]
	shl	eax, 6
	mov	ecx, DWORD PTR _bsize$1[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1372
	jmp	$LN14@sfnt_load_
$LN13@sfnt_load_:
; Line 1374
	mov	edx, DWORD PTR _root$11[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 2
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1375
	mov	edx, DWORD PTR _root$11[ebp]
	mov	eax, DWORD PTR _count$6[ebp]
	mov	DWORD PTR [edx+28], eax
$LN19@sfnt_load_:
; Line 1383
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 2
	jne	SHORT $LN11@sfnt_load_
	mov	eax, DWORD PTR _root$11[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	jne	SHORT $LN11@sfnt_load_
; Line 1384
	mov	edx, DWORD PTR _root$11[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 1
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN11@sfnt_load_:
; Line 1391
	mov	edx, DWORD PTR _root$11[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	je	$Exit$518
; Line 1395
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+196]
	mov	eax, DWORD PTR _root$11[ebp]
	mov	DWORD PTR [eax+52], edx
; Line 1396
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+198]
	mov	eax, DWORD PTR _root$11[ebp]
	mov	DWORD PTR [eax+56], edx
; Line 1397
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+200]
	mov	eax, DWORD PTR _root$11[ebp]
	mov	DWORD PTR [eax+60], edx
; Line 1398
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+202]
	mov	eax, DWORD PTR _root$11[ebp]
	mov	DWORD PTR [eax+64], edx
; Line 1399
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	ax, WORD PTR [edx+178]
	mov	WORD PTR [ecx+68], ax
; Line 1431
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	ax, WORD PTR [edx+220]
	mov	WORD PTR [ecx+70], ax
; Line 1432
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	ax, WORD PTR [edx+222]
	mov	WORD PTR [ecx+72], ax
; Line 1435
	mov	ecx, DWORD PTR _root$11[ebp]
	movsx	edx, WORD PTR [ecx+70]
	mov	eax, DWORD PTR _root$11[ebp]
	movsx	ecx, WORD PTR [eax+72]
	sub	edx, ecx
	mov	eax, DWORD PTR _face$[ebp]
	movsx	ecx, WORD PTR [eax+224]
	add	edx, ecx
	mov	eax, DWORD PTR _root$11[ebp]
	mov	WORD PTR [eax+74], dx
; Line 1437
	mov	ecx, DWORD PTR _root$11[ebp]
	movsx	edx, WORD PTR [ecx+70]
	test	edx, edx
	jne	$LN9@sfnt_load_
	mov	eax, DWORD PTR _root$11[ebp]
	movsx	ecx, WORD PTR [eax+72]
	test	ecx, ecx
	jne	$LN9@sfnt_load_
; Line 1439
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+364]
	cmp	eax, 65535				; 0000ffffH
	je	$LN9@sfnt_load_
; Line 1441
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+434]
	test	edx, edx
	jne	SHORT $LN6@sfnt_load_
	mov	eax, DWORD PTR _face$[ebp]
	movsx	ecx, WORD PTR [eax+436]
	test	ecx, ecx
	je	SHORT $LN7@sfnt_load_
$LN6@sfnt_load_:
; Line 1443
	mov	edx, DWORD PTR _root$11[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	cx, WORD PTR [eax+434]
	mov	WORD PTR [edx+70], cx
; Line 1444
	mov	edx, DWORD PTR _root$11[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	cx, WORD PTR [eax+436]
	mov	WORD PTR [edx+72], cx
; Line 1447
	mov	edx, DWORD PTR _root$11[ebp]
	movsx	eax, WORD PTR [edx+70]
	mov	ecx, DWORD PTR _root$11[ebp]
	movsx	edx, WORD PTR [ecx+72]
	sub	eax, edx
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+438]
	add	eax, edx
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	WORD PTR [ecx+74], ax
; Line 1449
	jmp	SHORT $LN9@sfnt_load_
$LN7@sfnt_load_:
; Line 1451
	mov	edx, DWORD PTR _root$11[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	cx, WORD PTR [eax+440]
	mov	WORD PTR [edx+70], cx
; Line 1452
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+442]
	neg	eax
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	WORD PTR [ecx+72], ax
; Line 1454
	mov	edx, DWORD PTR _root$11[ebp]
	movsx	eax, WORD PTR [edx+70]
	mov	ecx, DWORD PTR _root$11[ebp]
	movsx	edx, WORD PTR [ecx+72]
	sub	eax, edx
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	WORD PTR [ecx+74], ax
$LN9@sfnt_load_:
; Line 1459
	mov	edx, DWORD PTR _root$11[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	cx, WORD PTR [eax+226]
	mov	WORD PTR [edx+76], cx
; Line 1462
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, BYTE PTR [edx+292]
	test	eax, eax
	je	SHORT $LN512@sfnt_load_
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+306]
	mov	DWORD PTR tv1151[ebp], edx
	jmp	SHORT $LN513@sfnt_load_
$LN512@sfnt_load_:
	mov	eax, DWORD PTR _root$11[ebp]
	movsx	ecx, WORD PTR [eax+74]
	mov	DWORD PTR tv1151[ebp], ecx
$LN513@sfnt_load_:
	mov	edx, DWORD PTR _root$11[ebp]
	mov	ax, WORD PTR tv1151[ebp]
	mov	WORD PTR [edx+78], ax
; Line 1468
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	ecx, WORD PTR [ecx+476]
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+478]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	ecx, eax
	mov	eax, DWORD PTR _root$11[ebp]
	mov	WORD PTR [eax+80], cx
; Line 1469
	mov	ecx, DWORD PTR _root$11[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	ax, WORD PTR [edx+478]
	mov	WORD PTR [ecx+82], ax
$Exit$518:
; Line 1475
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN3@sfnt_load_
	push	OFFSET $SG14334
	call	_FT_Message
	add	esp, 4
$LN3@sfnt_load_:
	xor	eax, eax
	jne	SHORT $Exit$518
; Line 1477
	mov	eax, DWORD PTR _error$[ebp]
; Line 1478
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN517@sfnt_load_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN517@sfnt_load_:
	DD	2
	DD	$LN516@sfnt_load_
$LN516@sfnt_load_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN514@sfnt_load_
	DD	-104					; ffffff98H
	DD	28					; 0000001cH
	DD	$LN515@sfnt_load_
$LN515@sfnt_load_:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
$LN514@sfnt_load_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_sfnt_load_face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__tmp_$1 = -20						; size = 4
_module$2 = -16						; size = 4
_sfnt$ = -12						; size = 4
_library$ = -8						; size = 4
_error$ = -4						; size = 4
_stream$ = 8						; size = 4
_face$ = 12						; size = 4
_face_index$ = 16					; size = 4
_num_params$ = 20					; size = 4
_params$ = 24						; size = 4
_sfnt_init_face PROC
; File d:\mozilla\modules\freetype2\src\sfnt\sfobjs.c
; Line 845
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 847
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _library$[ebp], edx
; Line 852
	mov	eax, DWORD PTR _num_params$[ebp]
	mov	DWORD PTR _num_params$[ebp], eax
; Line 853
	mov	ecx, DWORD PTR _params$[ebp]
	mov	DWORD PTR _params$[ebp], ecx
; Line 856
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+532]
	mov	DWORD PTR _sfnt$[ebp], eax
; Line 857
	cmp	DWORD PTR _sfnt$[ebp], 0
	jne	SHORT $LN16@sfnt_init_
; Line 859
	push	OFFSET $SG13685
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Get_Module_Interface
	add	esp, 8
	mov	DWORD PTR _sfnt$[ebp], eax
; Line 860
	cmp	DWORD PTR _sfnt$[ebp], 0
	jne	SHORT $LN17@sfnt_init_
; Line 862
	push	OFFSET $SG13687
	call	_FT_Message
	add	esp, 4
; Line 863
	push	OFFSET $SG13688
	push	863					; 0000035fH
	push	11					; 0000000bH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 11					; 0000000bH
	jmp	$LN19@sfnt_init_
$LN17@sfnt_init_:
; Line 866
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	DWORD PTR [edx+532], eax
; Line 867
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _sfnt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+508], eax
$LN16@sfnt_init_:
; Line 870
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _module$2[ebp], edx
	push	OFFSET $SG13696
	mov	eax, DWORD PTR _module$2[ebp]
	push	eax
	call	_ft_module_get_service
	add	esp, 8
	mov	DWORD PTR __tmp_$1[ebp], eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR [ecx+536], edx
	xor	eax, eax
	jne	SHORT $LN16@sfnt_init_
$LN13@sfnt_init_:
; Line 872
	mov	ecx, 4
	imul	edx, ecx, 19
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN12@sfnt_init_
	push	OFFSET $SG13701
	call	_FT_Message
	add	esp, 4
$LN12@sfnt_init_:
	xor	eax, eax
	jne	SHORT $LN13@sfnt_init_
; Line 874
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_sfnt_open_font
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 875
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@sfnt_init_
; Line 876
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN19@sfnt_init_
$LN9@sfnt_init_:
; Line 879
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
$LN8@sfnt_init_:
; Line 881
	mov	edx, 4
	imul	eax, edx, 19
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN7@sfnt_init_
	mov	ecx, DWORD PTR _face_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	push	OFFSET $SG13707
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN7@sfnt_init_:
	xor	eax, eax
	jne	SHORT $LN8@sfnt_init_
; Line 883
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN4@sfnt_init_
; Line 884
	mov	DWORD PTR _face_index$[ebp], 0
$LN4@sfnt_init_:
; Line 886
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _face_index$[ebp]
	cmp	edx, DWORD PTR [ecx+140]
	jl	SHORT $LN3@sfnt_init_
; Line 887
	push	OFFSET $SG13710
	push	887					; 00000377H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN19@sfnt_init_
$LN3@sfnt_init_:
; Line 889
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	edx, DWORD PTR _face_index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@sfnt_init_
; Line 890
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN19@sfnt_init_
$LN2@sfnt_init_:
; Line 893
	mov	esi, esp
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 894
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@sfnt_init_
; Line 895
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN19@sfnt_init_
$LN1@sfnt_init_:
; Line 897
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [eax], edx
; Line 898
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _face_index$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 900
	mov	eax, DWORD PTR _error$[ebp]
$LN19@sfnt_init_:
; Line 901
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sfnt_init_face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv172 = -84						; size = 4
_key$1 = -80						; size = 4
_count2$2 = -76						; size = 4
_key$3 = -72						; size = 4
_q$4 = -68						; size = 4
_mid$5 = -64						; size = 4
_max$6 = -60						; size = 4
_min$7 = -56						; size = 4
_key0$8 = -52						; size = 4
_value$9 = -48						; size = 4
_num_pairs$10 = -44					; size = 4
_coverage$11 = -40					; size = 4
_length$12 = -36					; size = 4
_version$13 = -32					; size = 4
_next$14 = -28						; size = 4
_base$15 = -24						; size = 4
_p_limit$ = -20						; size = 4
_p$ = -16						; size = 4
_mask$ = -12						; size = 4
_count$ = -8						; size = 4
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_left_glyph$ = 12					; size = 4
_right_glyph$ = 16					; size = 4
_tt_face_get_kerning PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttkern.c
; Line 184
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 185
	mov	DWORD PTR _result$[ebp], 0
; Line 187
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+740]
	mov	DWORD PTR _p$[ebp], ecx
; Line 188
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx+744]
	mov	DWORD PTR _p_limit$[ebp], eax
; Line 191
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 192
	mov	DWORD PTR _mask$[ebp], 1
; Line 196
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+748]
	mov	DWORD PTR _count$[ebp], eax
	jmp	SHORT $LN24@tt_face_ge
$LN23@tt_face_ge:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _mask$[ebp]
	shl	edx, 1
	mov	DWORD PTR _mask$[ebp], edx
$LN24@tt_face_ge:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN22@tt_face_ge
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 6
	cmp	eax, DWORD PTR _p_limit$[ebp]
	ja	$LN22@tt_face_ge
; Line 198
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _base$15[ebp], ecx
; Line 200
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _version$13[ebp], edx
; Line 201
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _length$12[ebp], eax
; Line 202
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _coverage$11[ebp], ecx
; Line 204
	mov	DWORD PTR _value$9[ebp], 0
; Line 206
	mov	edx, DWORD PTR _version$13[ebp]
	mov	DWORD PTR _version$13[ebp], edx
; Line 209
	mov	eax, DWORD PTR _base$15[ebp]
	add	eax, DWORD PTR _length$12[ebp]
	mov	DWORD PTR _next$14[ebp], eax
; Line 211
	mov	ecx, DWORD PTR _next$14[ebp]
	cmp	ecx, DWORD PTR _p_limit$[ebp]
	jbe	SHORT $LN21@tt_face_ge
; Line 212
	mov	edx, DWORD PTR _p_limit$[ebp]
	mov	DWORD PTR _next$14[ebp], edx
$LN21@tt_face_ge:
; Line 214
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+752]
	and	ecx, DWORD PTR _mask$[ebp]
	jne	SHORT $LN20@tt_face_ge
; Line 215
	jmp	$NextTable$27
$LN20@tt_face_ge:
; Line 217
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 8
	cmp	edx, DWORD PTR _next$14[ebp]
	jbe	SHORT $LN19@tt_face_ge
; Line 218
	jmp	$NextTable$27
$LN19@tt_face_ge:
; Line 220
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _num_pairs$10[ebp], eax
; Line 221
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 6
	mov	DWORD PTR _p$[ebp], ecx
; Line 223
	mov	edx, DWORD PTR _next$14[ebp]
	sub	edx, DWORD PTR _p$[ebp]
	imul	eax, DWORD PTR _num_pairs$10[ebp], 6
	cmp	edx, eax
	jge	SHORT $LN18@tt_face_ge
; Line 224
	mov	eax, DWORD PTR _next$14[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	DWORD PTR _num_pairs$10[ebp], eax
$LN18@tt_face_ge:
; Line 226
	mov	edx, DWORD PTR _coverage$11[ebp]
	shr	edx, 8
	mov	DWORD PTR tv172[ebp], edx
	cmp	DWORD PTR tv172[ebp], 0
	je	SHORT $LN15@tt_face_ge
	jmp	$LN16@tt_face_ge
$LN15@tt_face_ge:
; Line 230
	mov	eax, DWORD PTR _left_glyph$[ebp]
	shl	eax, 16					; 00000010H
	or	eax, DWORD PTR _right_glyph$[ebp]
	mov	DWORD PTR _key0$8[ebp], eax
; Line 233
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+756]
	and	edx, DWORD PTR _mask$[ebp]
	je	$LN14@tt_face_ge
; Line 235
	mov	DWORD PTR _min$7[ebp], 0
; Line 236
	mov	eax, DWORD PTR _num_pairs$10[ebp]
	mov	DWORD PTR _max$6[ebp], eax
$LN13@tt_face_ge:
; Line 239
	mov	ecx, DWORD PTR _min$7[ebp]
	cmp	ecx, DWORD PTR _max$6[ebp]
	jae	$LN12@tt_face_ge
; Line 241
	mov	edx, DWORD PTR _min$7[ebp]
	add	edx, DWORD PTR _max$6[ebp]
	shr	edx, 1
	mov	DWORD PTR _mid$5[ebp], edx
; Line 242
	imul	eax, DWORD PTR _mid$5[ebp], 6
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$4[ebp], eax
; Line 246
	mov	ecx, DWORD PTR _q$4[ebp]
	add	ecx, 4
	mov	DWORD PTR _q$4[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _q$4[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _q$4[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _q$4[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _q$4[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _key$3[ebp], edx
; Line 248
	mov	edx, DWORD PTR _key$3[ebp]
	cmp	edx, DWORD PTR _key0$8[ebp]
	jne	SHORT $LN11@tt_face_ge
; Line 250
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _q$4[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _q$4[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movsx	edx, ax
	mov	DWORD PTR _value$9[ebp], edx
; Line 251
	jmp	$Found$28
$LN11@tt_face_ge:
; Line 253
	mov	eax, DWORD PTR _key$3[ebp]
	cmp	eax, DWORD PTR _key0$8[ebp]
	jae	SHORT $LN10@tt_face_ge
; Line 254
	mov	ecx, DWORD PTR _mid$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _min$7[ebp], ecx
; Line 255
	jmp	SHORT $LN9@tt_face_ge
$LN10@tt_face_ge:
; Line 256
	mov	edx, DWORD PTR _mid$5[ebp]
	mov	DWORD PTR _max$6[ebp], edx
$LN9@tt_face_ge:
; Line 257
	jmp	$LN13@tt_face_ge
$LN12@tt_face_ge:
; Line 259
	jmp	$LN16@tt_face_ge
$LN14@tt_face_ge:
; Line 264
	mov	eax, DWORD PTR _num_pairs$10[ebp]
	mov	DWORD PTR _count2$2[ebp], eax
	jmp	SHORT $LN7@tt_face_ge
$LN6@tt_face_ge:
	mov	ecx, DWORD PTR _count2$2[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count2$2[ebp], ecx
$LN7@tt_face_ge:
	cmp	DWORD PTR _count2$2[ebp], 0
	jbe	$LN16@tt_face_ge
; Line 266
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _key$1[ebp], eax
; Line 269
	mov	eax, DWORD PTR _key$1[ebp]
	cmp	eax, DWORD PTR _key0$8[ebp]
	jne	SHORT $LN4@tt_face_ge
; Line 271
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movsx	eax, cx
	mov	DWORD PTR _value$9[ebp], eax
; Line 272
	jmp	SHORT $Found$28
$LN4@tt_face_ge:
; Line 274
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
; Line 275
	jmp	$LN6@tt_face_ge
$LN16@tt_face_ge:
; Line 289
	jmp	SHORT $NextTable$27
$Found$28:
; Line 292
	mov	edx, DWORD PTR _coverage$11[ebp]
	and	edx, 8
	je	SHORT $LN2@tt_face_ge
; Line 293
	mov	eax, DWORD PTR _value$9[ebp]
	mov	DWORD PTR _result$[ebp], eax
; Line 294
	jmp	SHORT $NextTable$27
$LN2@tt_face_ge:
; Line 295
	mov	ecx, DWORD PTR _result$[ebp]
	add	ecx, DWORD PTR _value$9[ebp]
	mov	DWORD PTR _result$[ebp], ecx
$NextTable$27:
; Line 298
	mov	edx, DWORD PTR _next$14[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 299
	jmp	$LN23@tt_face_ge
$LN22@tt_face_ge:
; Line 301
	mov	eax, DWORD PTR _result$[ebp]
; Line 302
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_get_kerning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = -4						; size = 4
_face$ = 8						; size = 4
_tt_face_done_kern PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttkern.c
; Line 168
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 169
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 172
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 740				; 000002e4H
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 173
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+744], 0
; Line 174
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+748], 0
; Line 175
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+752], 0
; Line 176
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+756], 0
; Line 177
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_done_kern ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cur_pair$1 = -72					; size = 4
_old_pair$2 = -68					; size = 4
_count$3 = -64						; size = 4
_mask$4 = -60						; size = 4
_p_next$5 = -56						; size = 4
_coverage$6 = -52					; size = 4
_length$7 = -48						; size = 4
_num_pairs$8 = -44					; size = 4
_ordered$ = -40						; size = 4
_avail$ = -36						; size = 4
_num_tables$ = -32					; size = 4
_nn$ = -28						; size = 4
_p_limit$ = -24						; size = 4
_p$ = -20						; size = 4
_table_size$ = -12					; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_kern PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttkern.c
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 52
	mov	DWORD PTR _avail$[ebp], 0
	mov	DWORD PTR _ordered$[ebp], 0
; Line 56
	mov	esi, esp
	lea	eax, DWORD PTR _table_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1801810542				; 6b65726eH
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 57
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@tt_face_lo
; Line 58
	jmp	$Exit$25
$LN19@tt_face_lo:
; Line 60
	cmp	DWORD PTR _table_size$[ebp], 4
	jae	SHORT $LN18@tt_face_lo
; Line 63
	push	OFFSET $SG12574
	call	_FT_Message
	add	esp, 4
; Line 64
	push	OFFSET $SG12575
	push	64					; 00000040H
	push	142					; 0000008eH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 142				; 0000008eH
	mov	DWORD PTR _error$[ebp], eax
; Line 65
	jmp	$Exit$25
$LN18@tt_face_lo:
; Line 68
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 740				; 000002e4H
	push	edx
	mov	eax, DWORD PTR _table_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@tt_face_lo
; Line 71
	push	OFFSET $SG12579
	call	_FT_Message
	add	esp, 4
; Line 72
	jmp	$Exit$25
$LN17@tt_face_lo:
; Line 75
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _table_size$[ebp]
	mov	DWORD PTR [edx+744], eax
; Line 77
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	mov	DWORD PTR _p$[ebp], edx
; Line 78
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _table_size$[ebp]
	mov	DWORD PTR _p_limit$[ebp], eax
; Line 80
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
; Line 81
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _num_tables$[ebp], edx
; Line 83
	cmp	DWORD PTR _num_tables$[ebp], 32		; 00000020H
	jbe	SHORT $LN16@tt_face_lo
; Line 84
	mov	DWORD PTR _num_tables$[ebp], 32		; 00000020H
$LN16@tt_face_lo:
; Line 86
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN15@tt_face_lo
$LN14@tt_face_lo:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN15@tt_face_lo:
	mov	ecx, DWORD PTR _nn$[ebp]
	cmp	ecx, DWORD PTR _num_tables$[ebp]
	jae	$LN13@tt_face_lo
; Line 90
	mov	edx, 1
	mov	ecx, DWORD PTR _nn$[ebp]
	shl	edx, cl
	mov	DWORD PTR _mask$4[ebp], edx
; Line 93
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 6
	cmp	eax, DWORD PTR _p_limit$[ebp]
	jbe	SHORT $LN12@tt_face_lo
; Line 94
	jmp	$LN13@tt_face_lo
$LN12@tt_face_lo:
; Line 96
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p_next$5[ebp], ecx
; Line 98
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
; Line 99
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _length$7[ebp], eax
; Line 100
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _coverage$6[ebp], ecx
; Line 102
	cmp	DWORD PTR _length$7[ebp], 14		; 0000000eH
	ja	SHORT $LN11@tt_face_lo
; Line 103
	jmp	$LN13@tt_face_lo
$LN11@tt_face_lo:
; Line 105
	mov	edx, DWORD PTR _p_next$5[ebp]
	add	edx, DWORD PTR _length$7[ebp]
	mov	DWORD PTR _p_next$5[ebp], edx
; Line 107
	mov	eax, DWORD PTR _p_next$5[ebp]
	cmp	eax, DWORD PTR _p_limit$[ebp]
	jbe	SHORT $LN10@tt_face_lo
; Line 108
	mov	ecx, DWORD PTR _p_limit$[ebp]
	mov	DWORD PTR _p_next$5[ebp], ecx
$LN10@tt_face_lo:
; Line 112
	mov	edx, DWORD PTR _coverage$6[ebp]
	and	edx, -9					; fffffff7H
	cmp	edx, 1
	jne	SHORT $LN8@tt_face_lo
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	cmp	eax, DWORD PTR _p_limit$[ebp]
	jbe	SHORT $LN9@tt_face_lo
$LN8@tt_face_lo:
; Line 113
	jmp	$NextTable$26
$LN9@tt_face_lo:
; Line 115
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _num_pairs$8[ebp], ecx
; Line 116
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 6
	mov	DWORD PTR _p$[ebp], edx
; Line 118
	mov	eax, DWORD PTR _p_next$5[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	imul	ecx, DWORD PTR _num_pairs$8[ebp], 6
	cmp	eax, ecx
	jge	SHORT $LN7@tt_face_lo
; Line 119
	mov	eax, DWORD PTR _p_next$5[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	DWORD PTR _num_pairs$8[ebp], eax
$LN7@tt_face_lo:
; Line 121
	mov	edx, DWORD PTR _avail$[ebp]
	or	edx, DWORD PTR _mask$4[ebp]
	mov	DWORD PTR _avail$[ebp], edx
; Line 127
	cmp	DWORD PTR _num_pairs$8[ebp], 0
	jbe	$NextTable$26
; Line 133
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _old_pair$2[ebp], ecx
; Line 134
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
; Line 136
	mov	edx, DWORD PTR _num_pairs$8[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$3[ebp], edx
	jmp	SHORT $LN5@tt_face_lo
$LN4@tt_face_lo:
	mov	eax, DWORD PTR _count$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$3[ebp], eax
$LN5@tt_face_lo:
	cmp	DWORD PTR _count$3[ebp], 0
	jbe	SHORT $LN3@tt_face_lo
; Line 141
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _cur_pair$1[ebp], edx
; Line 142
	mov	edx, DWORD PTR _cur_pair$1[ebp]
	cmp	edx, DWORD PTR _old_pair$2[ebp]
	ja	SHORT $LN2@tt_face_lo
; Line 143
	jmp	SHORT $LN3@tt_face_lo
$LN2@tt_face_lo:
; Line 145
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 146
	mov	ecx, DWORD PTR _cur_pair$1[ebp]
	mov	DWORD PTR _old_pair$2[ebp], ecx
; Line 147
	jmp	$LN4@tt_face_lo
$LN3@tt_face_lo:
; Line 149
	cmp	DWORD PTR _count$3[ebp], 0
	jne	SHORT $NextTable$26
; Line 150
	mov	edx, DWORD PTR _ordered$[ebp]
	or	edx, DWORD PTR _mask$4[ebp]
	mov	DWORD PTR _ordered$[ebp], edx
$NextTable$26:
; Line 154
	mov	eax, DWORD PTR _p_next$5[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 155
	jmp	$LN14@tt_face_lo
$LN13@tt_face_lo:
; Line 157
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _nn$[ebp]
	mov	DWORD PTR [ecx+748], edx
; Line 158
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _avail$[ebp]
	mov	DWORD PTR [eax+752], ecx
; Line 159
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _ordered$[ebp]
	mov	DWORD PTR [edx+756], eax
$Exit$25:
; Line 162
	mov	eax, DWORD PTR _error$[ebp]
; Line 163
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@tt_face_lo:
	DD	1
	DD	$LN23@tt_face_lo
$LN23@tt_face_lo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN22@tt_face_lo
$LN22@tt_face_lo:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_tt_face_load_kern ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$1 = -60						; size = 4
_k$2 = -56						; size = 4
_ni$3 = -52						; size = 4
_di$4 = -48						; size = 4
_dp$5 = -44						; size = 4
_nuni$6 = -40						; size = 4
_dcnt$7 = -36						; size = 4
_duni$8 = -32						; size = 4
_numMappings$9 = -28					; size = 4
_numRanges$10 = -24					; size = 4
_cmap14$11 = -20					; size = 4
_nondefOff$ = -16					; size = 4
_defOff$ = -12						; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_memory$ = 12						; size = 4
_variantSelector$ = 16					; size = 4
_tt_cmap14_variant_chars PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 3254
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3256
	mov	eax, DWORD PTR _variantSelector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 6
	push	edx
	call	_tt_cmap14_find_variant
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 3262
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN32@tt_cmap14_
; Line 3263
	xor	eax, eax
	jmp	$LN33@tt_cmap14_
$LN32@tt_cmap14_:
; Line 3265
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _defOff$[ebp], ecx
; Line 3266
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _nondefOff$[ebp], edx
; Line 3268
	cmp	DWORD PTR _defOff$[ebp], 0
	jne	SHORT $LN31@tt_cmap14_
	cmp	DWORD PTR _nondefOff$[ebp], 0
	jne	SHORT $LN31@tt_cmap14_
; Line 3269
	xor	eax, eax
	jmp	$LN33@tt_cmap14_
$LN31@tt_cmap14_:
; Line 3271
	cmp	DWORD PTR _defOff$[ebp], 0
	jne	SHORT $LN30@tt_cmap14_
; Line 3273
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _nondefOff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmap$[ebp]
	push	edx
	call	_tt_cmap14_get_nondef_chars
	add	esp, 12					; 0000000cH
	jmp	$LN33@tt_cmap14_
	jmp	$LN33@tt_cmap14_
$LN30@tt_cmap14_:
; Line 3274
	cmp	DWORD PTR _nondefOff$[ebp], 0
	jne	SHORT $LN28@tt_cmap14_
; Line 3276
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _defOff$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$[ebp]
	push	eax
	call	_tt_cmap14_get_def_chars
	add	esp, 12					; 0000000cH
	jmp	$LN33@tt_cmap14_
; Line 3277
	jmp	$LN33@tt_cmap14_
$LN28@tt_cmap14_:
; Line 3281
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap14$11[ebp], ecx
; Line 3293
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _nondefOff$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 3294
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _defOff$[ebp]
	mov	DWORD PTR _dp$5[ebp], edx
; Line 3296
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _numMappings$9[ebp], ecx
; Line 3297
	mov	ecx, DWORD PTR _dp$5[ebp]
	push	ecx
	call	_tt_cmap14_def_char_count
	add	esp, 4
	mov	DWORD PTR _dcnt$7[ebp], eax
; Line 3298
	mov	edx, DWORD PTR _dp$5[ebp]
	add	edx, 4
	mov	DWORD PTR _dp$5[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _dp$5[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _dp$5[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _dp$5[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _dp$5[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _numRanges$10[ebp], eax
; Line 3300
	cmp	DWORD PTR _numMappings$9[ebp], 0
	jne	SHORT $LN26@tt_cmap14_
; Line 3302
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _defOff$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$[ebp]
	push	eax
	call	_tt_cmap14_get_def_chars
	add	esp, 12					; 0000000cH
	jmp	$LN33@tt_cmap14_
$LN26@tt_cmap14_:
; Line 3303
	cmp	DWORD PTR _dcnt$7[ebp], 0
	jne	SHORT $LN25@tt_cmap14_
; Line 3305
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _nondefOff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	call	_tt_cmap14_get_nondef_chars
	add	esp, 12					; 0000000cH
	jmp	$LN33@tt_cmap14_
$LN25@tt_cmap14_:
; Line 3307
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _numMappings$9[ebp]
	mov	ecx, DWORD PTR _dcnt$7[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	push	edx
	mov	eax, DWORD PTR _cmap14$11[ebp]
	push	eax
	call	_tt_cmap14_ensure
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN24@tt_cmap14_
; Line 3308
	xor	eax, eax
	jmp	$LN33@tt_cmap14_
$LN24@tt_cmap14_:
; Line 3310
	mov	ecx, DWORD PTR _cmap14$11[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _ret$1[ebp], edx
; Line 3311
	mov	eax, DWORD PTR _dp$5[ebp]
	add	eax, 3
	mov	DWORD PTR _dp$5[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _dp$5[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _dp$5[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _dp$5[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	DWORD PTR _duni$8[ebp], ecx
; Line 3312
	mov	ecx, DWORD PTR _dp$5[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _dcnt$7[ebp], edx
	mov	eax, DWORD PTR _dp$5[ebp]
	add	eax, 1
	mov	DWORD PTR _dp$5[ebp], eax
; Line 3313
	mov	DWORD PTR _di$4[ebp], 1
; Line 3314
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-3]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-3]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-3]
	or	edx, ecx
	mov	DWORD PTR _nuni$6[ebp], edx
; Line 3315
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
; Line 3316
	mov	DWORD PTR _ni$3[ebp], 1
; Line 3317
	mov	DWORD PTR _i$[ebp], 0
$LN23@tt_cmap14_:
; Line 3321
	mov	eax, DWORD PTR _duni$8[ebp]
	add	eax, DWORD PTR _dcnt$7[ebp]
	cmp	DWORD PTR _nuni$6[ebp], eax
	jbe	$LN21@tt_cmap14_
; Line 3323
	mov	DWORD PTR _k$2[ebp], 0
	jmp	SHORT $LN20@tt_cmap14_
$LN19@tt_cmap14_:
	mov	ecx, DWORD PTR _k$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$2[ebp], ecx
$LN20@tt_cmap14_:
	mov	edx, DWORD PTR _k$2[ebp]
	cmp	edx, DWORD PTR _dcnt$7[ebp]
	ja	SHORT $LN18@tt_cmap14_
; Line 3324
	mov	eax, DWORD PTR _duni$8[ebp]
	add	eax, DWORD PTR _k$2[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN19@tt_cmap14_
$LN18@tt_cmap14_:
; Line 3326
	mov	ecx, DWORD PTR _di$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _di$4[ebp], ecx
; Line 3328
	mov	edx, DWORD PTR _di$4[ebp]
	cmp	edx, DWORD PTR _numRanges$10[ebp]
	jbe	SHORT $LN17@tt_cmap14_
; Line 3329
	jmp	$LN22@tt_cmap14_
$LN17@tt_cmap14_:
; Line 3331
	mov	eax, DWORD PTR _dp$5[ebp]
	add	eax, 3
	mov	DWORD PTR _dp$5[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _dp$5[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _dp$5[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _dp$5[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	DWORD PTR _duni$8[ebp], ecx
; Line 3332
	mov	ecx, DWORD PTR _dp$5[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _dcnt$7[ebp], edx
	mov	eax, DWORD PTR _dp$5[ebp]
	add	eax, 1
	mov	DWORD PTR _dp$5[ebp], eax
; Line 3334
	jmp	SHORT $LN16@tt_cmap14_
$LN21@tt_cmap14_:
; Line 3336
	mov	ecx, DWORD PTR _nuni$6[ebp]
	cmp	ecx, DWORD PTR _duni$8[ebp]
	jae	SHORT $LN15@tt_cmap14_
; Line 3337
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$1[ebp]
	mov	ecx, DWORD PTR _nuni$6[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN15@tt_cmap14_:
; Line 3340
	mov	eax, DWORD PTR _ni$3[ebp]
	add	eax, 1
	mov	DWORD PTR _ni$3[ebp], eax
; Line 3341
	mov	ecx, DWORD PTR _ni$3[ebp]
	cmp	ecx, DWORD PTR _numMappings$9[ebp]
	jbe	SHORT $LN14@tt_cmap14_
; Line 3342
	jmp	SHORT $LN22@tt_cmap14_
$LN14@tt_cmap14_:
; Line 3344
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 3
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-3]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-3]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-3]
	or	eax, edx
	mov	DWORD PTR _nuni$6[ebp], eax
; Line 3345
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
$LN16@tt_cmap14_:
; Line 3347
	jmp	$LN23@tt_cmap14_
$LN22@tt_cmap14_:
; Line 3349
	mov	ecx, DWORD PTR _ni$3[ebp]
	cmp	ecx, DWORD PTR _numMappings$9[ebp]
	ja	$LN13@tt_cmap14_
; Line 3354
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$1[ebp]
	mov	ecx, DWORD PTR _nuni$6[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN12@tt_cmap14_:
; Line 3355
	mov	eax, DWORD PTR _ni$3[ebp]
	cmp	eax, DWORD PTR _numMappings$9[ebp]
	jae	SHORT $LN11@tt_cmap14_
; Line 3357
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-3]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-3]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-3]
	or	edx, ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 3358
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 3359
	mov	ecx, DWORD PTR _ni$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _ni$3[ebp], ecx
; Line 3360
	jmp	SHORT $LN12@tt_cmap14_
$LN11@tt_cmap14_:
; Line 3362
	jmp	$LN10@tt_cmap14_
$LN13@tt_cmap14_:
	mov	edx, DWORD PTR _di$4[ebp]
	cmp	edx, DWORD PTR _numRanges$10[ebp]
	ja	$LN10@tt_cmap14_
; Line 3367
	mov	DWORD PTR _k$2[ebp], 0
	jmp	SHORT $LN8@tt_cmap14_
$LN7@tt_cmap14_:
	mov	eax, DWORD PTR _k$2[ebp]
	add	eax, 1
	mov	DWORD PTR _k$2[ebp], eax
$LN8@tt_cmap14_:
	mov	ecx, DWORD PTR _k$2[ebp]
	cmp	ecx, DWORD PTR _dcnt$7[ebp]
	ja	SHORT $LN5@tt_cmap14_
; Line 3368
	mov	edx, DWORD PTR _duni$8[ebp]
	add	edx, DWORD PTR _k$2[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN7@tt_cmap14_
$LN5@tt_cmap14_:
; Line 3370
	mov	eax, DWORD PTR _di$4[ebp]
	cmp	eax, DWORD PTR _numRanges$10[ebp]
	jae	$LN10@tt_cmap14_
; Line 3372
	mov	ecx, DWORD PTR _dp$5[ebp]
	add	ecx, 3
	mov	DWORD PTR _dp$5[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _dp$5[ebp]
	movzx	edx, BYTE PTR [ecx+eax-3]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _dp$5[ebp]
	movzx	eax, BYTE PTR [ecx+eax-3]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _dp$5[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-3]
	or	edx, ecx
	mov	DWORD PTR _duni$8[ebp], edx
; Line 3373
	mov	edx, DWORD PTR _dp$5[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _dcnt$7[ebp], eax
	mov	ecx, DWORD PTR _dp$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _dp$5[ebp], ecx
; Line 3375
	mov	DWORD PTR _k$2[ebp], 0
	jmp	SHORT $LN3@tt_cmap14_
$LN2@tt_cmap14_:
	mov	edx, DWORD PTR _k$2[ebp]
	add	edx, 1
	mov	DWORD PTR _k$2[ebp], edx
$LN3@tt_cmap14_:
	mov	eax, DWORD PTR _k$2[ebp]
	cmp	eax, DWORD PTR _dcnt$7[ebp]
	ja	SHORT $LN1@tt_cmap14_
; Line 3376
	mov	ecx, DWORD PTR _duni$8[ebp]
	add	ecx, DWORD PTR _k$2[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN2@tt_cmap14_
$LN1@tt_cmap14_:
; Line 3377
	mov	edx, DWORD PTR _di$4[ebp]
	add	edx, 1
	mov	DWORD PTR _di$4[ebp], edx
; Line 3378
	jmp	$LN5@tt_cmap14_
$LN10@tt_cmap14_:
; Line 3381
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
; Line 3383
	mov	eax, DWORD PTR _ret$1[ebp]
$LN33@tt_cmap14_:
; Line 3385
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_variant_chars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -16						; size = 4
_i$ = -12						; size = 4
_numMappings$ = -8					; size = 4
_cmap14$ = -4						; size = 4
_cmap$ = 8						; size = 4
_p$ = 12						; size = 4
_memory$ = 16						; size = 4
_tt_cmap14_get_nondef_chars PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 3226
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3227
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap14$[ebp], eax
; Line 3233
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _numMappings$[ebp], edx
; Line 3235
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _numMappings$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _cmap14$[ebp]
	push	ecx
	call	_tt_cmap14_ensure
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@tt_cmap14_
; Line 3236
	xor	eax, eax
	jmp	$LN5@tt_cmap14_
$LN4@tt_cmap14_:
; Line 3238
	mov	edx, DWORD PTR _cmap14$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _ret$[ebp], eax
; Line 3239
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@tt_cmap14_
$LN2@tt_cmap14_:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@tt_cmap14_:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numMappings$[ebp]
	jae	SHORT $LN1@tt_cmap14_
; Line 3241
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 3242
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
; Line 3243
	jmp	SHORT $LN2@tt_cmap14_
$LN1@tt_cmap14_:
; Line 3244
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+edx*4], 0
; Line 3246
	mov	eax, DWORD PTR _ret$[ebp]
$LN5@tt_cmap14_:
; Line 3247
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_get_nondef_chars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uni$1 = -20						; size = 4
_q$ = -16						; size = 4
_cnt$ = -12						; size = 4
_numRanges$ = -8					; size = 4
_cmap14$ = -4						; size = 4
_cmap$ = 8						; size = 4
_p$ = 12						; size = 4
_memory$ = 16						; size = 4
_tt_cmap14_get_def_chars PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 3189
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3190
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap14$[ebp], eax
; Line 3196
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_tt_cmap14_def_char_count
	add	esp, 4
	mov	DWORD PTR _cnt$[ebp], eax
; Line 3197
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _numRanges$[ebp], eax
; Line 3199
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnt$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cmap14$[ebp]
	push	edx
	call	_tt_cmap14_ensure
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@tt_cmap14_
; Line 3200
	xor	eax, eax
	jmp	$LN8@tt_cmap14_
$LN7@tt_cmap14_:
; Line 3202
	mov	eax, DWORD PTR _cmap14$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _q$[ebp], ecx
	jmp	SHORT $LN6@tt_cmap14_
$LN5@tt_cmap14_:
	mov	edx, DWORD PTR _numRanges$[ebp]
	sub	edx, 1
	mov	DWORD PTR _numRanges$[ebp], edx
$LN6@tt_cmap14_:
	cmp	DWORD PTR _numRanges$[ebp], 0
	jbe	$LN4@tt_cmap14_
; Line 3204
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	DWORD PTR _uni$1[ebp], ecx
; Line 3207
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	edx, 1
	mov	DWORD PTR _cnt$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN3@tt_cmap14_:
; Line 3210
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _uni$1[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 3211
	mov	edx, DWORD PTR _uni$1[ebp]
	add	edx, 1
	mov	DWORD PTR _uni$1[ebp], edx
; Line 3212
	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 4
	mov	DWORD PTR _q$[ebp], eax
; Line 3214
	mov	ecx, DWORD PTR _cnt$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _cnt$[ebp], ecx
	jne	SHORT $LN3@tt_cmap14_
; Line 3215
	jmp	$LN5@tt_cmap14_
$LN4@tt_cmap14_:
; Line 3216
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+eax], 0
; Line 3218
	mov	edx, DWORD PTR _cmap14$[ebp]
	mov	eax, DWORD PTR [edx+32]
$LN8@tt_cmap14_:
; Line 3219
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_get_def_chars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tot$ = -8						; size = 4
_numRanges$ = -4					; size = 4
_p$ = 8							; size = 4
_tt_cmap14_def_char_count PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 3169
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3170
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _numRanges$[ebp], ecx
; Line 3171
	mov	DWORD PTR _tot$[ebp], 0
; Line 3174
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$[ebp], ecx
; Line 3175
	jmp	SHORT $LN3@tt_cmap14_
$LN2@tt_cmap14_:
	mov	edx, DWORD PTR _numRanges$[ebp]
	sub	edx, 1
	mov	DWORD PTR _numRanges$[ebp], edx
$LN3@tt_cmap14_:
	cmp	DWORD PTR _numRanges$[ebp], 0
	jbe	SHORT $LN1@tt_cmap14_
; Line 3177
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _tot$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _tot$[ebp], edx
; Line 3178
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 3179
	jmp	SHORT $LN2@tt_cmap14_
$LN1@tt_cmap14_:
; Line 3181
	mov	eax, DWORD PTR _tot$[ebp]
; Line 3182
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_def_char_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nondefOff$1 = -28					; size = 4
_defOff$2 = -24						; size = 4
_varSel$3 = -20						; size = 4
_q$ = -16						; size = 4
_p$ = -12						; size = 4
_count$ = -8						; size = 4
_cmap14$ = -4						; size = 4
_cmap$ = 8						; size = 4
_memory$ = 12						; size = 4
_charCode$ = 16						; size = 4
_tt_cmap14_char_variants PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 3133
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3134
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap14$[ebp], eax
; Line 3135
	mov	ecx, DWORD PTR _cmap14$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _count$[ebp], edx
; Line 3136
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 10					; 0000000aH
	mov	DWORD PTR _p$[ebp], ecx
; Line 3140
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _cmap14$[ebp]
	push	ecx
	call	_tt_cmap14_ensure
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@tt_cmap14_
; Line 3141
	xor	eax, eax
	jmp	$LN8@tt_cmap14_
$LN7@tt_cmap14_:
; Line 3143
	mov	edx, DWORD PTR _cmap14$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _q$[ebp], eax
	jmp	SHORT $LN6@tt_cmap14_
$LN5@tt_cmap14_:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
$LN6@tt_cmap14_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN4@tt_cmap14_
; Line 3145
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 3
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-3]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-3]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-3]
	or	eax, edx
	mov	DWORD PTR _varSel$3[ebp], eax
; Line 3146
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _defOff$2[ebp], ecx
; Line 3147
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _nondefOff$1[ebp], edx
; Line 3155
	cmp	DWORD PTR _defOff$2[ebp], 0
	je	SHORT $LN1@tt_cmap14_
	mov	edx, DWORD PTR _charCode$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _defOff$2[ebp]
	push	ecx
	call	_tt_cmap14_char_map_def_binary
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@tt_cmap14_
$LN1@tt_cmap14_:
	cmp	DWORD PTR _nondefOff$1[ebp], 0
	je	SHORT $LN3@tt_cmap14_
	mov	edx, DWORD PTR _charCode$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _nondefOff$1[ebp]
	push	ecx
	call	_tt_cmap14_char_map_nondef_binary
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@tt_cmap14_
$LN2@tt_cmap14_:
; Line 3157
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR _varSel$3[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 3158
	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 4
	mov	DWORD PTR _q$[ebp], eax
$LN3@tt_cmap14_:
; Line 3160
	jmp	$LN5@tt_cmap14_
$LN4@tt_cmap14_:
; Line 3161
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+edx], 0
; Line 3163
	mov	ecx, DWORD PTR _cmap14$[ebp]
	mov	eax, DWORD PTR [ecx+32]
$LN8@tt_cmap14_:
; Line 3164
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_char_variants ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -20						; size = 4
_result$ = -16						; size = 4
_p$ = -12						; size = 4
_count$ = -8						; size = 4
_cmap14$ = -4						; size = 4
_cmap$ = 8						; size = 4
_memory$ = 12						; size = 4
_tt_cmap14_variants PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 3106
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3107
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap14$[ebp], eax
; Line 3108
	mov	ecx, DWORD PTR _cmap14$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _count$[ebp], edx
; Line 3109
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 10					; 0000000aH
	mov	DWORD PTR _p$[ebp], ecx
; Line 3114
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _cmap14$[ebp]
	push	ecx
	call	_tt_cmap14_ensure
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@tt_cmap14_
; Line 3115
	xor	eax, eax
	jmp	$LN5@tt_cmap14_
$LN4@tt_cmap14_:
; Line 3117
	mov	edx, DWORD PTR _cmap14$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _result$[ebp], eax
; Line 3118
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@tt_cmap14_
$LN2@tt_cmap14_:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@tt_cmap14_:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jae	SHORT $LN1@tt_cmap14_
; Line 3120
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 3121
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 8
	mov	DWORD PTR _p$[ebp], ecx
; Line 3122
	jmp	SHORT $LN2@tt_cmap14_
$LN1@tt_cmap14_:
; Line 3123
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR [eax+edx*4], 0
; Line 3125
	mov	eax, DWORD PTR _result$[ebp]
$LN5@tt_cmap14_:
; Line 3126
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_variants ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nondefOff$ = -12					; size = 4
_defOff$ = -8						; size = 4
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_charcode$ = 12						; size = 4
_variantSelector$ = 16					; size = 4
_tt_cmap14_char_var_isdefault PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 3078
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3079
	mov	eax, DWORD PTR _variantSelector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 6
	push	edx
	call	_tt_cmap14_find_variant
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 3084
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN3@tt_cmap14_
; Line 3085
	or	eax, -1
	jmp	$LN4@tt_cmap14_
$LN3@tt_cmap14_:
; Line 3087
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _defOff$[ebp], ecx
; Line 3088
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _nondefOff$[ebp], edx
; Line 3091
	cmp	DWORD PTR _defOff$[ebp], 0
	je	SHORT $LN2@tt_cmap14_
	mov	edx, DWORD PTR _charcode$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _defOff$[ebp]
	push	ecx
	call	_tt_cmap14_char_map_def_binary
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@tt_cmap14_
; Line 3092
	mov	eax, 1
	jmp	SHORT $LN4@tt_cmap14_
$LN2@tt_cmap14_:
; Line 3096
	cmp	DWORD PTR _nondefOff$[ebp], 0
	je	SHORT $LN1@tt_cmap14_
	mov	edx, DWORD PTR _charcode$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _nondefOff$[ebp]
	push	ecx
	call	_tt_cmap14_char_map_nondef_binary
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@tt_cmap14_
; Line 3097
	xor	eax, eax
	jmp	SHORT $LN4@tt_cmap14_
$LN1@tt_cmap14_:
; Line 3099
	or	eax, -1
$LN4@tt_cmap14_:
; Line 3100
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_char_var_isdefault ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nondefOff$ = -12					; size = 4
_defOff$ = -8						; size = 4
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_ucmap$ = 12						; size = 4
_charcode$ = 16						; size = 4
_variantSelector$ = 20					; size = 4
_tt_cmap14_char_var_index PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 3046
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3047
	mov	eax, DWORD PTR _variantSelector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 6
	push	edx
	call	_tt_cmap14_find_variant
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 3052
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN3@tt_cmap14_
; Line 3053
	xor	eax, eax
	jmp	$LN4@tt_cmap14_
$LN3@tt_cmap14_:
; Line 3055
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _defOff$[ebp], ecx
; Line 3056
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	or	ecx, eax
	mov	DWORD PTR _nondefOff$[ebp], ecx
; Line 3059
	cmp	DWORD PTR _defOff$[ebp], 0
	je	SHORT $LN2@tt_cmap14_
	mov	ecx, DWORD PTR _charcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _defOff$[ebp]
	push	eax
	call	_tt_cmap14_char_map_def_binary
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@tt_cmap14_
; Line 3063
	mov	esi, esp
	mov	ecx, DWORD PTR _charcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ucmap$[ebp]
	push	edx
	mov	eax, DWORD PTR _ucmap$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN4@tt_cmap14_
$LN2@tt_cmap14_:
; Line 3066
	cmp	DWORD PTR _nondefOff$[ebp], 0
	je	SHORT $LN1@tt_cmap14_
; Line 3068
	mov	eax, DWORD PTR _charcode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _nondefOff$[ebp]
	push	edx
	call	_tt_cmap14_char_map_nondef_binary
	add	esp, 8
	jmp	SHORT $LN4@tt_cmap14_
$LN1@tt_cmap14_:
; Line 3070
	xor	eax, eax
$LN4@tt_cmap14_:
; Line 3071
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_char_var_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_varSel$1 = -24						; size = 4
_p$2 = -20						; size = 4
_mid$3 = -16						; size = 4
_min$ = -12						; size = 4
_max$ = -8						; size = 4
_numVar$ = -4						; size = 4
_base$ = 8						; size = 4
_variantCode$ = 12					; size = 4
_tt_cmap14_find_variant PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 3011
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3012
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _base$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _base$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _base$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	DWORD PTR _numVar$[ebp], eax
; Line 3016
	mov	DWORD PTR _min$[ebp], 0
; Line 3017
	mov	eax, DWORD PTR _numVar$[ebp]
	mov	DWORD PTR _max$[ebp], eax
; Line 3019
	mov	ecx, DWORD PTR _base$[ebp]
	add	ecx, 4
	mov	DWORD PTR _base$[ebp], ecx
$LN6@tt_cmap14_:
; Line 3022
	mov	edx, DWORD PTR _min$[ebp]
	cmp	edx, DWORD PTR _max$[ebp]
	jae	$LN5@tt_cmap14_
; Line 3024
	mov	eax, DWORD PTR _min$[ebp]
	add	eax, DWORD PTR _max$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mid$3[ebp], eax
; Line 3025
	imul	ecx, DWORD PTR _mid$3[ebp], 11
	add	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR _p$2[ebp], ecx
; Line 3026
	mov	edx, DWORD PTR _p$2[ebp]
	add	edx, 3
	mov	DWORD PTR _p$2[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$2[ebp]
	movzx	eax, BYTE PTR [edx+ecx-3]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$2[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-3]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$2[ebp]
	movzx	edx, BYTE PTR [ecx+edx-3]
	or	eax, edx
	mov	DWORD PTR _varSel$1[ebp], eax
; Line 3029
	mov	eax, DWORD PTR _variantCode$[ebp]
	cmp	eax, DWORD PTR _varSel$1[ebp]
	jae	SHORT $LN4@tt_cmap14_
; Line 3030
	mov	ecx, DWORD PTR _mid$3[ebp]
	mov	DWORD PTR _max$[ebp], ecx
	jmp	SHORT $LN3@tt_cmap14_
$LN4@tt_cmap14_:
; Line 3031
	mov	edx, DWORD PTR _variantCode$[ebp]
	cmp	edx, DWORD PTR _varSel$1[ebp]
	jbe	SHORT $LN2@tt_cmap14_
; Line 3032
	mov	eax, DWORD PTR _mid$3[ebp]
	add	eax, 1
	mov	DWORD PTR _min$[ebp], eax
; Line 3033
	jmp	SHORT $LN3@tt_cmap14_
$LN2@tt_cmap14_:
; Line 3034
	mov	eax, DWORD PTR _p$2[ebp]
	jmp	SHORT $LN7@tt_cmap14_
$LN3@tt_cmap14_:
; Line 3035
	jmp	$LN6@tt_cmap14_
$LN5@tt_cmap14_:
; Line 3037
	xor	eax, eax
$LN7@tt_cmap14_:
; Line 3038
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_find_variant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uni$1 = -24						; size = 4
_p$2 = -20						; size = 4
_mid$3 = -16						; size = 4
_min$ = -12						; size = 4
_max$ = -8						; size = 4
_numMappings$ = -4					; size = 4
_base$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap14_char_map_nondef_binary PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2978
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2979
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _base$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _base$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _base$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	DWORD PTR _numMappings$[ebp], eax
; Line 2983
	mov	DWORD PTR _min$[ebp], 0
; Line 2984
	mov	eax, DWORD PTR _numMappings$[ebp]
	mov	DWORD PTR _max$[ebp], eax
; Line 2986
	mov	ecx, DWORD PTR _base$[ebp]
	add	ecx, 4
	mov	DWORD PTR _base$[ebp], ecx
$LN6@tt_cmap14_:
; Line 2989
	mov	edx, DWORD PTR _min$[ebp]
	cmp	edx, DWORD PTR _max$[ebp]
	jae	$LN5@tt_cmap14_
; Line 2991
	mov	eax, DWORD PTR _min$[ebp]
	add	eax, DWORD PTR _max$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mid$3[ebp], eax
; Line 2992
	imul	ecx, DWORD PTR _mid$3[ebp], 5
	add	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR _p$2[ebp], ecx
; Line 2993
	mov	edx, DWORD PTR _p$2[ebp]
	add	edx, 3
	mov	DWORD PTR _p$2[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$2[ebp]
	movzx	eax, BYTE PTR [edx+ecx-3]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$2[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-3]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$2[ebp]
	movzx	edx, BYTE PTR [ecx+edx-3]
	or	eax, edx
	mov	DWORD PTR _uni$1[ebp], eax
; Line 2996
	mov	eax, DWORD PTR _char_code$[ebp]
	cmp	eax, DWORD PTR _uni$1[ebp]
	jae	SHORT $LN4@tt_cmap14_
; Line 2997
	mov	ecx, DWORD PTR _mid$3[ebp]
	mov	DWORD PTR _max$[ebp], ecx
	jmp	SHORT $LN3@tt_cmap14_
$LN4@tt_cmap14_:
; Line 2998
	mov	edx, DWORD PTR _char_code$[ebp]
	cmp	edx, DWORD PTR _uni$1[ebp]
	jbe	SHORT $LN2@tt_cmap14_
; Line 2999
	mov	eax, DWORD PTR _mid$3[ebp]
	add	eax, 1
	mov	DWORD PTR _min$[ebp], eax
; Line 3000
	jmp	SHORT $LN3@tt_cmap14_
$LN2@tt_cmap14_:
; Line 3001
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$2[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$2[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movzx	eax, cx
	jmp	SHORT $LN7@tt_cmap14_
$LN3@tt_cmap14_:
; Line 3002
	jmp	$LN6@tt_cmap14_
$LN5@tt_cmap14_:
; Line 3004
	xor	eax, eax
$LN7@tt_cmap14_:
; Line 3005
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_char_map_nondef_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cnt$1 = -28						; size = 4
_start$2 = -24						; size = 4
_p$3 = -20						; size = 4
_mid$4 = -16						; size = 4
_min$ = -12						; size = 4
_max$ = -8						; size = 4
_numRanges$ = -4					; size = 4
_base$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap14_char_map_def_binary PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2944
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2945
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _base$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _base$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _base$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	DWORD PTR _numRanges$[ebp], eax
; Line 2949
	mov	DWORD PTR _min$[ebp], 0
; Line 2950
	mov	eax, DWORD PTR _numRanges$[ebp]
	mov	DWORD PTR _max$[ebp], eax
; Line 2952
	mov	ecx, DWORD PTR _base$[ebp]
	add	ecx, 4
	mov	DWORD PTR _base$[ebp], ecx
$LN6@tt_cmap14_:
; Line 2955
	mov	edx, DWORD PTR _min$[ebp]
	cmp	edx, DWORD PTR _max$[ebp]
	jae	$LN5@tt_cmap14_
; Line 2957
	mov	eax, DWORD PTR _min$[ebp]
	add	eax, DWORD PTR _max$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mid$4[ebp], eax
; Line 2958
	mov	ecx, DWORD PTR _mid$4[ebp]
	mov	edx, DWORD PTR _base$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _p$3[ebp], eax
; Line 2959
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$3[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+eax-3]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [ecx+eax-3]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-3]
	or	edx, ecx
	mov	DWORD PTR _start$2[ebp], edx
; Line 2960
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _cnt$1[ebp], eax
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$3[ebp], ecx
; Line 2963
	mov	edx, DWORD PTR _char_code$[ebp]
	cmp	edx, DWORD PTR _start$2[ebp]
	jae	SHORT $LN4@tt_cmap14_
; Line 2964
	mov	eax, DWORD PTR _mid$4[ebp]
	mov	DWORD PTR _max$[ebp], eax
	jmp	SHORT $LN3@tt_cmap14_
$LN4@tt_cmap14_:
; Line 2965
	mov	ecx, DWORD PTR _start$2[ebp]
	add	ecx, DWORD PTR _cnt$1[ebp]
	cmp	DWORD PTR _char_code$[ebp], ecx
	jbe	SHORT $LN2@tt_cmap14_
; Line 2966
	mov	edx, DWORD PTR _mid$4[ebp]
	add	edx, 1
	mov	DWORD PTR _min$[ebp], edx
; Line 2967
	jmp	SHORT $LN3@tt_cmap14_
$LN2@tt_cmap14_:
; Line 2968
	mov	eax, 1
	jmp	SHORT $LN7@tt_cmap14_
$LN3@tt_cmap14_:
; Line 2969
	jmp	$LN6@tt_cmap14_
$LN5@tt_cmap14_:
; Line 2971
	xor	eax, eax
$LN7@tt_cmap14_:
; Line 2972
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_char_map_def_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_cmap_info$ = 12					; size = 4
_tt_cmap14_get_info PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2930
	push	ebp
	mov	ebp, esp
; Line 2931
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap$[ebp], eax
; Line 2933
	mov	ecx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [ecx+4], 14			; 0000000eH
; Line 2935
	mov	edx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [edx], -1
; Line 2937
	xor	eax, eax
; Line 2938
	pop	ebp
	ret	0
_tt_cmap14_get_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_tt_cmap14_char_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2918
	push	ebp
	mov	ebp, esp
; Line 2919
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap$[ebp], eax
; Line 2922
	mov	ecx, DWORD PTR _pchar_code$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 2923
	xor	eax, eax
; Line 2924
	pop	ebp
	ret	0
_tt_cmap14_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap14_char_index PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2906
	push	ebp
	mov	ebp, esp
; Line 2907
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap$[ebp], eax
; Line 2908
	mov	ecx, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR _char_code$[ebp], ecx
; Line 2911
	xor	eax, eax
; Line 2912
	pop	ebp
	ret	0
_tt_cmap14_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gid$1 = -80						; size = 4
_uni$2 = -76						; size = 4
_lastUni$3 = -72					; size = 4
_i$4 = -68						; size = 4
_numMappings$5 = -64					; size = 4
_ndp$6 = -60						; size = 4
_cnt$7 = -56						; size = 4
_base$8 = -52						; size = 4
_lastBase$9 = -48					; size = 4
_i$10 = -44						; size = 4
_numRanges$11 = -40					; size = 4
_defp$12 = -36						; size = 4
_nondefOff$13 = -32					; size = 4
_defOff$14 = -28					; size = 4
_varSel$15 = -24					; size = 4
_lastVarSel$16 = -20					; size = 4
_n$17 = -16						; size = 4
_num_selectors$ = -12					; size = 4
_length$ = -8						; size = 4
_p$ = -4						; size = 4
_table$ = 8						; size = 4
_valid$ = 12						; size = 4
_tt_cmap14_validate PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2793
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2799
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _valid$[ebp]
	cmp	eax, DWORD PTR [ecx+68]
	jbe	SHORT $LN24@tt_cmap14_
; Line 2800
	push	OFFSET $SG11720
	push	2800					; 00000af0H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN24@tt_cmap14_:
; Line 2802
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 2803
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _length$[ebp], edx
; Line 2804
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _num_selectors$[ebp], eax
; Line 2809
	mov	eax, DWORD PTR _valid$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	sub	ecx, DWORD PTR _table$[ebp]
	cmp	DWORD PTR _length$[ebp], ecx
	ja	SHORT $LN22@tt_cmap14_
	cmp	DWORD PTR _length$[ebp], 10		; 0000000aH
	jb	SHORT $LN22@tt_cmap14_
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 10					; 0000000aH
	xor	edx, edx
	mov	ecx, 11					; 0000000bH
	div	ecx
	cmp	eax, DWORD PTR _num_selectors$[ebp]
	jae	SHORT $LN23@tt_cmap14_
$LN22@tt_cmap14_:
; Line 2810
	push	OFFSET $SG11744
	push	2810					; 00000afaH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN23@tt_cmap14_:
; Line 2817
	mov	DWORD PTR _lastVarSel$16[ebp], 1
; Line 2820
	mov	DWORD PTR _n$17[ebp], 0
	jmp	SHORT $LN21@tt_cmap14_
$LN20@tt_cmap14_:
	mov	eax, DWORD PTR _n$17[ebp]
	add	eax, 1
	mov	DWORD PTR _n$17[ebp], eax
$LN21@tt_cmap14_:
	mov	ecx, DWORD PTR _n$17[ebp]
	cmp	ecx, DWORD PTR _num_selectors$[ebp]
	jae	$LN19@tt_cmap14_
; Line 2822
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 3
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-3]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-3]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-3]
	or	eax, edx
	mov	DWORD PTR _varSel$15[ebp], eax
; Line 2823
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _defOff$14[ebp], ecx
; Line 2824
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _nondefOff$13[ebp], edx
; Line 2827
	mov	edx, DWORD PTR _defOff$14[ebp]
	cmp	edx, DWORD PTR _length$[ebp]
	jae	SHORT $LN17@tt_cmap14_
	mov	eax, DWORD PTR _nondefOff$13[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jb	SHORT $LN18@tt_cmap14_
$LN17@tt_cmap14_:
; Line 2828
	push	OFFSET $SG11783
	push	2828					; 00000b0cH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN18@tt_cmap14_:
; Line 2830
	mov	edx, DWORD PTR _varSel$15[ebp]
	cmp	edx, DWORD PTR _lastVarSel$16[ebp]
	jae	SHORT $LN16@tt_cmap14_
; Line 2831
	push	OFFSET $SG11785
	push	2831					; 00000b0fH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN16@tt_cmap14_:
; Line 2833
	mov	ecx, DWORD PTR _varSel$15[ebp]
	add	ecx, 1
	mov	DWORD PTR _lastVarSel$16[ebp], ecx
; Line 2837
	cmp	DWORD PTR _defOff$14[ebp], 0
	je	$LN15@tt_cmap14_
; Line 2839
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, DWORD PTR _defOff$14[ebp]
	mov	DWORD PTR _defp$12[ebp], edx
; Line 2840
	mov	eax, DWORD PTR _defp$12[ebp]
	add	eax, 4
	mov	DWORD PTR _defp$12[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _defp$12[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _defp$12[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _defp$12[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _defp$12[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _numRanges$11[ebp], ecx
; Line 2842
	mov	DWORD PTR _lastBase$9[ebp], 0
; Line 2846
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	sub	edx, DWORD PTR _defp$12[ebp]
	shr	edx, 2
	cmp	DWORD PTR _numRanges$11[ebp], edx
	jbe	SHORT $LN14@tt_cmap14_
; Line 2847
	push	OFFSET $SG11803
	push	2847					; 00000b1fH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN14@tt_cmap14_:
; Line 2849
	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN13@tt_cmap14_
$LN12@tt_cmap14_:
	mov	ecx, DWORD PTR _i$10[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$10[ebp], ecx
$LN13@tt_cmap14_:
	mov	edx, DWORD PTR _i$10[ebp]
	cmp	edx, DWORD PTR _numRanges$11[ebp]
	jae	$LN15@tt_cmap14_
; Line 2851
	mov	eax, DWORD PTR _defp$12[ebp]
	add	eax, 3
	mov	DWORD PTR _defp$12[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _defp$12[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _defp$12[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _defp$12[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	DWORD PTR _base$8[ebp], ecx
; Line 2852
	mov	ecx, DWORD PTR _defp$12[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _cnt$7[ebp], edx
	mov	eax, DWORD PTR _defp$12[ebp]
	add	eax, 1
	mov	DWORD PTR _defp$12[ebp], eax
; Line 2855
	mov	ecx, DWORD PTR _base$8[ebp]
	add	ecx, DWORD PTR _cnt$7[ebp]
	cmp	ecx, 1114112				; 00110000H
	jb	SHORT $LN10@tt_cmap14_
; Line 2856
	push	OFFSET $SG11819
	push	2856					; 00000b28H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN10@tt_cmap14_:
; Line 2858
	mov	eax, DWORD PTR _base$8[ebp]
	cmp	eax, DWORD PTR _lastBase$9[ebp]
	jae	SHORT $LN9@tt_cmap14_
; Line 2859
	push	OFFSET $SG11821
	push	2859					; 00000b2bH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN9@tt_cmap14_:
; Line 2861
	mov	edx, DWORD PTR _cnt$7[ebp]
	mov	eax, DWORD PTR _base$8[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	DWORD PTR _lastBase$9[ebp], ecx
; Line 2862
	jmp	$LN12@tt_cmap14_
$LN15@tt_cmap14_:
; Line 2866
	cmp	DWORD PTR _nondefOff$13[ebp], 0
	je	$LN8@tt_cmap14_
; Line 2868
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, DWORD PTR _nondefOff$13[ebp]
	mov	DWORD PTR _ndp$6[ebp], edx
; Line 2869
	mov	eax, DWORD PTR _ndp$6[ebp]
	add	eax, 4
	mov	DWORD PTR _ndp$6[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _ndp$6[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _ndp$6[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _ndp$6[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _ndp$6[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _numMappings$5[ebp], ecx
; Line 2870
	mov	DWORD PTR _lastUni$3[ebp], 0
; Line 2874
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	sub	edx, DWORD PTR _ndp$6[ebp]
	shr	edx, 2
	cmp	DWORD PTR _numMappings$5[ebp], edx
	jbe	SHORT $LN7@tt_cmap14_
; Line 2875
	push	OFFSET $SG11839
	push	2875					; 00000b3bH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN7@tt_cmap14_:
; Line 2877
	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN6@tt_cmap14_
$LN5@tt_cmap14_:
	mov	ecx, DWORD PTR _i$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$4[ebp], ecx
$LN6@tt_cmap14_:
	mov	edx, DWORD PTR _i$4[ebp]
	cmp	edx, DWORD PTR _numMappings$5[ebp]
	jae	$LN8@tt_cmap14_
; Line 2879
	mov	eax, DWORD PTR _ndp$6[ebp]
	add	eax, 3
	mov	DWORD PTR _ndp$6[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _ndp$6[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _ndp$6[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _ndp$6[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	DWORD PTR _uni$2[ebp], ecx
; Line 2880
	mov	ecx, DWORD PTR _ndp$6[ebp]
	add	ecx, 2
	mov	DWORD PTR _ndp$6[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ndp$6[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _ndp$6[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _gid$1[ebp], ecx
; Line 2883
	cmp	DWORD PTR _uni$2[ebp], 1114112		; 00110000H
	jb	SHORT $LN3@tt_cmap14_
; Line 2884
	push	OFFSET $SG11860
	push	2884					; 00000b44H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN3@tt_cmap14_:
; Line 2886
	mov	eax, DWORD PTR _uni$2[ebp]
	cmp	eax, DWORD PTR _lastUni$3[ebp]
	jae	SHORT $LN2@tt_cmap14_
; Line 2887
	push	OFFSET $SG11862
	push	2887					; 00000b47H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN2@tt_cmap14_:
; Line 2889
	mov	edx, DWORD PTR _uni$2[ebp]
	add	edx, 1
	mov	DWORD PTR _lastUni$3[ebp], edx
; Line 2892
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 1
	jl	SHORT $LN1@tt_cmap14_
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR _gid$1[ebp]
	cmp	edx, DWORD PTR [ecx+80]
	jb	SHORT $LN1@tt_cmap14_
; Line 2893
	push	OFFSET $SG11865
	push	2893					; 00000b4dH
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN1@tt_cmap14_:
; Line 2894
	jmp	$LN5@tt_cmap14_
$LN8@tt_cmap14_:
; Line 2896
	jmp	$LN20@tt_cmap14_
$LN19@tt_cmap14_:
; Line 2899
	xor	eax, eax
; Line 2900
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_table$ = 12						; size = 4
_tt_cmap14_init PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2778
	push	ebp
	mov	ebp, esp
; Line 2779
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2781
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 6
	mov	DWORD PTR _table$[ebp], edx
; Line 2782
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _table$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _table$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _table$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 2783
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 2784
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 2786
	xor	eax, eax
; Line 2787
	pop	ebp
	ret	0
_tt_cmap14_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -12						; size = 4
_old_max$ = -4						; size = 4
_cmap$ = 8						; size = 4
_num_results$ = 12					; size = 4
_memory$ = 16						; size = 4
_tt_cmap14_ensure PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2756
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2757
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _old_max$[ebp], ecx
; Line 2758
	mov	DWORD PTR _error$[ebp], 0
; Line 2761
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _num_results$[ebp]
	cmp	eax, DWORD PTR [edx+28]
	jbe	SHORT $LN2@tt_cmap14_
; Line 2763
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 2765
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _num_results$[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_max$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+32], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@tt_cmap14_
; Line 2766
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN3@tt_cmap14_
$LN1@tt_cmap14_:
; Line 2768
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _num_results$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN2@tt_cmap14_:
; Line 2771
	mov	eax, DWORD PTR _error$[ebp]
$LN3@tt_cmap14_:
; Line 2772
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@tt_cmap14_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@tt_cmap14_:
	DD	1
	DD	$LN6@tt_cmap14_
$LN6@tt_cmap14_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN5@tt_cmap14_
$LN5@tt_cmap14_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_tt_cmap14_ensure ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_cmap$ = 8						; size = 4
_tt_cmap14_done PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2742
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2743
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 2746
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 2747
	cmp	DWORD PTR _memory$[ebp], 0
	je	SHORT $LN5@tt_cmap14_
	mov	eax, DWORD PTR _cmap$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN5@tt_cmap14_
$LN3@tt_cmap14_:
; Line 2748
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+32], 0
	xor	edx, edx
	jne	SHORT $LN3@tt_cmap14_
$LN5@tt_cmap14_:
; Line 2749
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap14_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_cmap_info$ = 12					; size = 4
_tt_cmap13_get_info PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2628
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2629
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 8
	mov	DWORD PTR _p$[ebp], ecx
; Line 2632
	mov	edx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [edx+4], 13			; 0000000dH
; Line 2633
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	ecx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2635
	xor	eax, eax
; Line 2636
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap13_get_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gindex$ = -8						; size = 4
_cmap13$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_tt_cmap13_char_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2597
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2598
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap13$[ebp], eax
; Line 2602
	mov	ecx, DWORD PTR _cmap13$[ebp]
	cmp	DWORD PTR [ecx+28], -1
	jb	SHORT $LN6@tt_cmap13_
; Line 2603
	xor	eax, eax
	jmp	SHORT $LN7@tt_cmap13_
$LN6@tt_cmap13_:
; Line 2606
	mov	edx, DWORD PTR _cmap13$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	SHORT $LN5@tt_cmap13_
	mov	ecx, DWORD PTR _cmap13$[ebp]
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN5@tt_cmap13_
; Line 2608
	mov	ecx, DWORD PTR _cmap13$[ebp]
	push	ecx
	call	_tt_cmap13_next
	add	esp, 4
; Line 2609
	mov	edx, DWORD PTR _cmap13$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	SHORT $LN4@tt_cmap13_
; Line 2611
	mov	ecx, DWORD PTR _cmap13$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _gindex$[ebp], edx
; Line 2612
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN3@tt_cmap13_
; Line 2613
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR _cmap13$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax], edx
$LN3@tt_cmap13_:
; Line 2615
	jmp	SHORT $LN2@tt_cmap13_
$LN4@tt_cmap13_:
; Line 2616
	mov	DWORD PTR _gindex$[ebp], 0
$LN2@tt_cmap13_:
; Line 2618
	jmp	SHORT $LN1@tt_cmap13_
$LN5@tt_cmap13_:
; Line 2619
	push	1
	mov	eax, DWORD PTR _pchar_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	call	_tt_cmap13_char_map_binary
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _gindex$[ebp], eax
$LN1@tt_cmap13_:
; Line 2621
	mov	eax, DWORD PTR _gindex$[ebp]
$LN7@tt_cmap13_:
; Line 2622
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap13_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap13_char_index PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2589
	push	ebp
	mov	ebp, esp
; Line 2590
	push	0
	lea	eax, DWORD PTR _char_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	call	_tt_cmap13_char_map_binary
	add	esp, 12					; 0000000cH
; Line 2591
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_tt_cmap13_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap13$1 = -40						; size = 4
_mid$ = -36						; size = 4
_min$ = -32						; size = 4
_max$ = -28						; size = 4
_end$ = -24						; size = 4
_start$ = -20						; size = 4
_char_code$ = -16					; size = 4
_num_groups$ = -12					; size = 4
_p$ = -8						; size = 4
_gindex$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_next$ = 16						; size = 1
_tt_cmap13_char_map_binary PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2506
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2507
	mov	DWORD PTR _gindex$[ebp], 0
; Line 2508
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], ecx
; Line 2509
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	edx, ecx
	mov	DWORD PTR _num_groups$[ebp], edx
; Line 2510
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _char_code$[ebp], eax
; Line 2515
	cmp	DWORD PTR _num_groups$[ebp], 0
	jne	SHORT $LN15@tt_cmap13_
; Line 2516
	xor	eax, eax
	jmp	$LN16@tt_cmap13_
$LN15@tt_cmap13_:
; Line 2519
	mov	ecx, DWORD PTR _num_groups$[ebp]
	mov	DWORD PTR _mid$[ebp], ecx
; Line 2520
	mov	DWORD PTR _end$[ebp], -1
; Line 2522
	movzx	edx, BYTE PTR _next$[ebp]
	test	edx, edx
	je	SHORT $LN14@tt_cmap13_
; Line 2523
	mov	eax, DWORD PTR _char_code$[ebp]
	add	eax, 1
	mov	DWORD PTR _char_code$[ebp], eax
$LN14@tt_cmap13_:
; Line 2525
	mov	DWORD PTR _min$[ebp], 0
; Line 2526
	mov	ecx, DWORD PTR _num_groups$[ebp]
	mov	DWORD PTR _max$[ebp], ecx
$LN13@tt_cmap13_:
; Line 2529
	mov	edx, DWORD PTR _min$[ebp]
	cmp	edx, DWORD PTR _max$[ebp]
	jae	$LN12@tt_cmap13_
; Line 2531
	mov	eax, DWORD PTR _min$[ebp]
	add	eax, DWORD PTR _max$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mid$[ebp], eax
; Line 2532
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	imul	eax, DWORD PTR _mid$[ebp], 12
	lea	ecx, DWORD PTR [edx+eax+16]
	mov	DWORD PTR _p$[ebp], ecx
; Line 2534
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _start$[ebp], eax
; Line 2535
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _end$[ebp], ecx
; Line 2537
	mov	ecx, DWORD PTR _char_code$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	jae	SHORT $LN11@tt_cmap13_
; Line 2538
	mov	edx, DWORD PTR _mid$[ebp]
	mov	DWORD PTR _max$[ebp], edx
	jmp	SHORT $LN10@tt_cmap13_
$LN11@tt_cmap13_:
; Line 2539
	mov	eax, DWORD PTR _char_code$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jbe	SHORT $LN9@tt_cmap13_
; Line 2540
	mov	ecx, DWORD PTR _mid$[ebp]
	add	ecx, 1
	mov	DWORD PTR _min$[ebp], ecx
; Line 2541
	jmp	SHORT $LN10@tt_cmap13_
$LN9@tt_cmap13_:
; Line 2543
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	edx, ecx
	mov	DWORD PTR _gindex$[ebp], edx
; Line 2545
	jmp	SHORT $LN12@tt_cmap13_
$LN10@tt_cmap13_:
; Line 2547
	jmp	$LN13@tt_cmap13_
$LN12@tt_cmap13_:
; Line 2549
	movzx	edx, BYTE PTR _next$[ebp]
	test	edx, edx
	je	SHORT $LN7@tt_cmap13_
; Line 2551
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap13$1[ebp], eax
; Line 2557
	mov	ecx, DWORD PTR _char_code$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jbe	SHORT $LN6@tt_cmap13_
; Line 2559
	mov	edx, DWORD PTR _mid$[ebp]
	add	edx, 1
	mov	DWORD PTR _mid$[ebp], edx
; Line 2560
	mov	eax, DWORD PTR _mid$[ebp]
	cmp	eax, DWORD PTR _num_groups$[ebp]
	jne	SHORT $LN6@tt_cmap13_
; Line 2561
	xor	eax, eax
	jmp	SHORT $LN16@tt_cmap13_
$LN6@tt_cmap13_:
; Line 2564
	mov	ecx, DWORD PTR _cmap13$1[ebp]
	mov	BYTE PTR [ecx+24], 1
; Line 2565
	mov	edx, DWORD PTR _cmap13$1[ebp]
	mov	eax, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 2566
	mov	ecx, DWORD PTR _cmap13$1[ebp]
	mov	edx, DWORD PTR _mid$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 2568
	cmp	DWORD PTR _gindex$[ebp], 0
	jne	SHORT $LN4@tt_cmap13_
; Line 2570
	mov	eax, DWORD PTR _cmap13$1[ebp]
	push	eax
	call	_tt_cmap13_next
	add	esp, 4
; Line 2572
	mov	ecx, DWORD PTR _cmap13$1[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	je	SHORT $LN3@tt_cmap13_
; Line 2573
	mov	eax, DWORD PTR _cmap13$1[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _gindex$[ebp], ecx
$LN3@tt_cmap13_:
; Line 2575
	jmp	SHORT $LN2@tt_cmap13_
$LN4@tt_cmap13_:
; Line 2576
	mov	edx, DWORD PTR _cmap13$1[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [edx+32], eax
$LN2@tt_cmap13_:
; Line 2578
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN7@tt_cmap13_
; Line 2579
	mov	ecx, DWORD PTR _pchar_code$[ebp]
	mov	edx, DWORD PTR _cmap13$1[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx], eax
$LN7@tt_cmap13_:
; Line 2582
	mov	eax, DWORD PTR _gindex$[ebp]
$LN16@tt_cmap13_:
; Line 2583
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap13_char_map_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gindex$ = -28						; size = 4
_n$ = -24						; size = 4
_char_code$ = -20					; size = 4
_glyph_id$ = -16					; size = 4
_end$ = -12						; size = 4
_start$ = -8						; size = 4
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_tt_cmap13_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2460
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2467
	mov	eax, DWORD PTR _cmap$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jb	SHORT $LN7@tt_cmap13_
; Line 2468
	jmp	$Fail$10
$LN7@tt_cmap13_:
; Line 2470
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	DWORD PTR _char_code$[ebp], edx
; Line 2472
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _n$[ebp], ecx
	jmp	SHORT $LN6@tt_cmap13_
$LN5@tt_cmap13_:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN6@tt_cmap13_:
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	$Fail$10
; Line 2474
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	imul	ecx, DWORD PTR _n$[ebp], 12
	lea	edx, DWORD PTR [eax+ecx+16]
	mov	DWORD PTR _p$[ebp], edx
; Line 2475
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _start$[ebp], ecx
; Line 2476
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _end$[ebp], edx
; Line 2477
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	edx, ecx
	mov	DWORD PTR _glyph_id$[ebp], edx
; Line 2479
	mov	edx, DWORD PTR _char_code$[ebp]
	cmp	edx, DWORD PTR _start$[ebp]
	jae	SHORT $LN3@tt_cmap13_
; Line 2480
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _char_code$[ebp], eax
$LN3@tt_cmap13_:
; Line 2482
	mov	ecx, DWORD PTR _char_code$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	ja	SHORT $LN2@tt_cmap13_
; Line 2484
	mov	edx, DWORD PTR _glyph_id$[ebp]
	mov	DWORD PTR _gindex$[ebp], edx
; Line 2486
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN2@tt_cmap13_
; Line 2488
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 2489
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 2490
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 2492
	jmp	SHORT $LN8@tt_cmap13_
$LN2@tt_cmap13_:
; Line 2495
	jmp	$LN5@tt_cmap13_
$Fail$10:
; Line 2498
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	BYTE PTR [eax+24], 0
$LN8@tt_cmap13_:
; Line 2499
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap13_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_last$1 = -32						; size = 4
_glyph_id$2 = -28					; size = 4
_end$3 = -24						; size = 4
_start$4 = -20						; size = 4
_n$5 = -16						; size = 4
_num_groups$ = -12					; size = 4
_length$ = -8						; size = 4
_p$ = -4						; size = 4
_table$ = 8						; size = 4
_valid$ = 12						; size = 4
_tt_cmap13_validate PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2403
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2409
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _valid$[ebp]
	cmp	eax, DWORD PTR [ecx+68]
	jbe	SHORT $LN10@tt_cmap13_
; Line 2410
	push	OFFSET $SG11414
	push	2410					; 0000096aH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN10@tt_cmap13_:
; Line 2412
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 2413
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _length$[ebp], edx
; Line 2415
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], edx
; Line 2416
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _num_groups$[ebp], ecx
; Line 2421
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	sub	edx, DWORD PTR _table$[ebp]
	cmp	DWORD PTR _length$[ebp], edx
	ja	SHORT $LN8@tt_cmap13_
	cmp	DWORD PTR _length$[ebp], 16		; 00000010H
	jb	SHORT $LN8@tt_cmap13_
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 16					; 00000010H
	xor	edx, edx
	mov	ecx, 12					; 0000000cH
	div	ecx
	cmp	eax, DWORD PTR _num_groups$[ebp]
	jae	SHORT $LN9@tt_cmap13_
$LN8@tt_cmap13_:
; Line 2422
	push	OFFSET $SG11438
	push	2422					; 00000976H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN9@tt_cmap13_:
; Line 2426
	mov	DWORD PTR _last$1[ebp], 0
; Line 2429
	mov	DWORD PTR _n$5[ebp], 0
	jmp	SHORT $LN7@tt_cmap13_
$LN6@tt_cmap13_:
	mov	eax, DWORD PTR _n$5[ebp]
	add	eax, 1
	mov	DWORD PTR _n$5[ebp], eax
$LN7@tt_cmap13_:
	mov	ecx, DWORD PTR _n$5[ebp]
	cmp	ecx, DWORD PTR _num_groups$[ebp]
	jae	$LN5@tt_cmap13_
; Line 2431
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _start$4[ebp], eax
; Line 2432
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _end$3[ebp], ecx
; Line 2433
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _glyph_id$2[ebp], edx
; Line 2435
	mov	edx, DWORD PTR _start$4[ebp]
	cmp	edx, DWORD PTR _end$3[ebp]
	jbe	SHORT $LN4@tt_cmap13_
; Line 2436
	push	OFFSET $SG11478
	push	2436					; 00000984H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN4@tt_cmap13_:
; Line 2438
	cmp	DWORD PTR _n$5[ebp], 0
	jbe	SHORT $LN3@tt_cmap13_
	mov	ecx, DWORD PTR _start$4[ebp]
	cmp	ecx, DWORD PTR _last$1[ebp]
	ja	SHORT $LN3@tt_cmap13_
; Line 2439
	push	OFFSET $SG11480
	push	2439					; 00000987H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN3@tt_cmap13_:
; Line 2441
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 1
	jl	SHORT $LN2@tt_cmap13_
; Line 2443
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR _glyph_id$2[ebp]
	cmp	edx, DWORD PTR [ecx+80]
	jb	SHORT $LN2@tt_cmap13_
; Line 2444
	push	OFFSET $SG11484
	push	2444					; 0000098cH
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN2@tt_cmap13_:
; Line 2447
	mov	ecx, DWORD PTR _end$3[ebp]
	mov	DWORD PTR _last$1[ebp], ecx
; Line 2448
	jmp	$LN6@tt_cmap13_
$LN5@tt_cmap13_:
; Line 2451
	xor	eax, eax
; Line 2452
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap13_validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_table$ = 12						; size = 4
_tt_cmap13_init PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2388
	push	ebp
	mov	ebp, esp
; Line 2389
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2391
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _table$[ebp], edx
; Line 2392
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _table$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _table$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _table$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 2394
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	BYTE PTR [edx+24], 0
; Line 2396
	xor	eax, eax
; Line 2397
	pop	ebp
	ret	0
_tt_cmap13_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_cmap_info$ = 12					; size = 4
_tt_cmap12_get_info PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2309
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2310
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 8
	mov	DWORD PTR _p$[ebp], ecx
; Line 2313
	mov	edx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [edx+4], 12			; 0000000cH
; Line 2314
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	ecx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2316
	xor	eax, eax
; Line 2317
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap12_get_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gindex$ = -8						; size = 4
_cmap12$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_tt_cmap12_char_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2275
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2276
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap12$[ebp], eax
; Line 2280
	mov	ecx, DWORD PTR _cmap12$[ebp]
	cmp	DWORD PTR [ecx+28], -1
	jb	SHORT $LN6@tt_cmap12_
; Line 2281
	xor	eax, eax
	jmp	SHORT $LN7@tt_cmap12_
$LN6@tt_cmap12_:
; Line 2284
	mov	edx, DWORD PTR _cmap12$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	SHORT $LN5@tt_cmap12_
	mov	ecx, DWORD PTR _cmap12$[ebp]
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN5@tt_cmap12_
; Line 2286
	mov	ecx, DWORD PTR _cmap12$[ebp]
	push	ecx
	call	_tt_cmap12_next
	add	esp, 4
; Line 2287
	mov	edx, DWORD PTR _cmap12$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	SHORT $LN4@tt_cmap12_
; Line 2289
	mov	ecx, DWORD PTR _cmap12$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _gindex$[ebp], edx
; Line 2292
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN3@tt_cmap12_
; Line 2293
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR _cmap12$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax], edx
$LN3@tt_cmap12_:
; Line 2295
	jmp	SHORT $LN2@tt_cmap12_
$LN4@tt_cmap12_:
; Line 2296
	mov	DWORD PTR _gindex$[ebp], 0
$LN2@tt_cmap12_:
; Line 2298
	jmp	SHORT $LN1@tt_cmap12_
$LN5@tt_cmap12_:
; Line 2299
	push	1
	mov	eax, DWORD PTR _pchar_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	call	_tt_cmap12_char_map_binary
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _gindex$[ebp], eax
$LN1@tt_cmap12_:
; Line 2302
	mov	eax, DWORD PTR _gindex$[ebp]
$LN7@tt_cmap12_:
; Line 2303
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap12_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap12_char_index PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2267
	push	ebp
	mov	ebp, esp
; Line 2268
	push	0
	lea	eax, DWORD PTR _char_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	call	_tt_cmap12_char_map_binary
	add	esp, 12					; 0000000cH
; Line 2269
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_tt_cmap12_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap12$1 = -44						; size = 4
_mid$ = -40						; size = 4
_min$ = -36						; size = 4
_max$ = -32						; size = 4
_start_id$ = -28					; size = 4
_end$ = -24						; size = 4
_start$ = -20						; size = 4
_char_code$ = -16					; size = 4
_num_groups$ = -12					; size = 4
_p$ = -8						; size = 4
_gindex$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_next$ = 16						; size = 1
_tt_cmap12_char_map_binary PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2182
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2183
	mov	DWORD PTR _gindex$[ebp], 0
; Line 2184
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], ecx
; Line 2185
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	edx, ecx
	mov	DWORD PTR _num_groups$[ebp], edx
; Line 2186
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _char_code$[ebp], eax
; Line 2191
	cmp	DWORD PTR _num_groups$[ebp], 0
	jne	SHORT $LN15@tt_cmap12_
; Line 2192
	xor	eax, eax
	jmp	$LN16@tt_cmap12_
$LN15@tt_cmap12_:
; Line 2195
	mov	ecx, DWORD PTR _num_groups$[ebp]
	mov	DWORD PTR _mid$[ebp], ecx
; Line 2196
	mov	DWORD PTR _end$[ebp], -1
; Line 2198
	movzx	edx, BYTE PTR _next$[ebp]
	test	edx, edx
	je	SHORT $LN14@tt_cmap12_
; Line 2199
	mov	eax, DWORD PTR _char_code$[ebp]
	add	eax, 1
	mov	DWORD PTR _char_code$[ebp], eax
$LN14@tt_cmap12_:
; Line 2201
	mov	DWORD PTR _min$[ebp], 0
; Line 2202
	mov	ecx, DWORD PTR _num_groups$[ebp]
	mov	DWORD PTR _max$[ebp], ecx
$LN13@tt_cmap12_:
; Line 2205
	mov	edx, DWORD PTR _min$[ebp]
	cmp	edx, DWORD PTR _max$[ebp]
	jae	$LN12@tt_cmap12_
; Line 2207
	mov	eax, DWORD PTR _min$[ebp]
	add	eax, DWORD PTR _max$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mid$[ebp], eax
; Line 2208
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	imul	eax, DWORD PTR _mid$[ebp], 12
	lea	ecx, DWORD PTR [edx+eax+16]
	mov	DWORD PTR _p$[ebp], ecx
; Line 2210
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _start$[ebp], eax
; Line 2211
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _end$[ebp], ecx
; Line 2213
	mov	ecx, DWORD PTR _char_code$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	jae	SHORT $LN11@tt_cmap12_
; Line 2214
	mov	edx, DWORD PTR _mid$[ebp]
	mov	DWORD PTR _max$[ebp], edx
	jmp	SHORT $LN10@tt_cmap12_
$LN11@tt_cmap12_:
; Line 2215
	mov	eax, DWORD PTR _char_code$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jbe	SHORT $LN9@tt_cmap12_
; Line 2216
	mov	ecx, DWORD PTR _mid$[ebp]
	add	ecx, 1
	mov	DWORD PTR _min$[ebp], ecx
; Line 2217
	jmp	SHORT $LN10@tt_cmap12_
$LN9@tt_cmap12_:
; Line 2219
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	edx, ecx
	mov	DWORD PTR _start_id$[ebp], edx
; Line 2220
	mov	edx, DWORD PTR _start_id$[ebp]
	add	edx, DWORD PTR _char_code$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _gindex$[ebp], edx
; Line 2222
	jmp	SHORT $LN12@tt_cmap12_
$LN10@tt_cmap12_:
; Line 2224
	jmp	$LN13@tt_cmap12_
$LN12@tt_cmap12_:
; Line 2226
	movzx	eax, BYTE PTR _next$[ebp]
	test	eax, eax
	je	SHORT $LN7@tt_cmap12_
; Line 2228
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap12$1[ebp], ecx
; Line 2235
	mov	edx, DWORD PTR _char_code$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jbe	SHORT $LN6@tt_cmap12_
; Line 2237
	mov	eax, DWORD PTR _mid$[ebp]
	add	eax, 1
	mov	DWORD PTR _mid$[ebp], eax
; Line 2238
	mov	ecx, DWORD PTR _mid$[ebp]
	cmp	ecx, DWORD PTR _num_groups$[ebp]
	jne	SHORT $LN6@tt_cmap12_
; Line 2239
	xor	eax, eax
	jmp	SHORT $LN16@tt_cmap12_
$LN6@tt_cmap12_:
; Line 2242
	mov	edx, DWORD PTR _cmap12$1[ebp]
	mov	BYTE PTR [edx+24], 1
; Line 2243
	mov	eax, DWORD PTR _cmap12$1[ebp]
	mov	ecx, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 2244
	mov	edx, DWORD PTR _cmap12$1[ebp]
	mov	eax, DWORD PTR _mid$[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 2246
	cmp	DWORD PTR _gindex$[ebp], 0
	jne	SHORT $LN4@tt_cmap12_
; Line 2248
	mov	ecx, DWORD PTR _cmap12$1[ebp]
	push	ecx
	call	_tt_cmap12_next
	add	esp, 4
; Line 2250
	mov	edx, DWORD PTR _cmap12$1[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	SHORT $LN3@tt_cmap12_
; Line 2251
	mov	ecx, DWORD PTR _cmap12$1[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _gindex$[ebp], edx
$LN3@tt_cmap12_:
; Line 2253
	jmp	SHORT $LN2@tt_cmap12_
$LN4@tt_cmap12_:
; Line 2254
	mov	eax, DWORD PTR _cmap12$1[ebp]
	mov	ecx, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN2@tt_cmap12_:
; Line 2256
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN7@tt_cmap12_
; Line 2257
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	eax, DWORD PTR _cmap12$1[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx], ecx
$LN7@tt_cmap12_:
; Line 2260
	mov	eax, DWORD PTR _gindex$[ebp]
$LN16@tt_cmap12_:
; Line 2261
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap12_char_map_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gindex$ = -28						; size = 4
_n$ = -24						; size = 4
_char_code$ = -20					; size = 4
_start_id$ = -16					; size = 4
_end$ = -12						; size = 4
_start$ = -8						; size = 4
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_tt_cmap12_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2136
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2143
	mov	eax, DWORD PTR _cmap$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jb	SHORT $LN9@tt_cmap12_
; Line 2144
	jmp	$Fail$12
$LN9@tt_cmap12_:
; Line 2146
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	DWORD PTR _char_code$[ebp], edx
; Line 2148
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _n$[ebp], ecx
	jmp	SHORT $LN8@tt_cmap12_
$LN7@tt_cmap12_:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN8@tt_cmap12_:
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	$Fail$12
; Line 2150
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	imul	ecx, DWORD PTR _n$[ebp], 12
	lea	edx, DWORD PTR [eax+ecx+16]
	mov	DWORD PTR _p$[ebp], edx
; Line 2151
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _start$[ebp], ecx
; Line 2152
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _end$[ebp], edx
; Line 2153
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	edx, ecx
	mov	DWORD PTR _start_id$[ebp], edx
; Line 2155
	mov	edx, DWORD PTR _char_code$[ebp]
	cmp	edx, DWORD PTR _start$[ebp]
	jae	SHORT $LN5@tt_cmap12_
; Line 2156
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _char_code$[ebp], eax
$LN5@tt_cmap12_:
; Line 2158
	jmp	SHORT $LN4@tt_cmap12_
$LN3@tt_cmap12_:
	mov	ecx, DWORD PTR _char_code$[ebp]
	add	ecx, 1
	mov	DWORD PTR _char_code$[ebp], ecx
$LN4@tt_cmap12_:
	mov	edx, DWORD PTR _char_code$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	ja	SHORT $LN2@tt_cmap12_
; Line 2160
	mov	eax, DWORD PTR _start_id$[ebp]
	add	eax, DWORD PTR _char_code$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _gindex$[ebp], eax
; Line 2162
	je	SHORT $LN1@tt_cmap12_
; Line 2164
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 2165
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 2166
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 2168
	jmp	SHORT $LN10@tt_cmap12_
$LN1@tt_cmap12_:
; Line 2170
	jmp	SHORT $LN3@tt_cmap12_
$LN2@tt_cmap12_:
; Line 2171
	jmp	$LN7@tt_cmap12_
$Fail$12:
; Line 2174
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	BYTE PTR [ecx+24], 0
$LN10@tt_cmap12_:
; Line 2175
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap12_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_d$1 = -36						; size = 4
_last$2 = -32						; size = 4
_start_id$3 = -28					; size = 4
_end$4 = -24						; size = 4
_start$5 = -20						; size = 4
_n$6 = -16						; size = 4
_num_groups$ = -12					; size = 4
_length$ = -8						; size = 4
_p$ = -4						; size = 4
_table$ = 8						; size = 4
_valid$ = 12						; size = 4
_tt_cmap12_validate PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2074
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2080
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _valid$[ebp]
	cmp	eax, DWORD PTR [ecx+68]
	jbe	SHORT $LN11@tt_cmap12_
; Line 2081
	push	OFFSET $SG11126
	push	2081					; 00000821H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN11@tt_cmap12_:
; Line 2083
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 2084
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _length$[ebp], edx
; Line 2086
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], edx
; Line 2087
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _num_groups$[ebp], ecx
; Line 2092
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	sub	edx, DWORD PTR _table$[ebp]
	cmp	DWORD PTR _length$[ebp], edx
	ja	SHORT $LN9@tt_cmap12_
	cmp	DWORD PTR _length$[ebp], 16		; 00000010H
	jb	SHORT $LN9@tt_cmap12_
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 16					; 00000010H
	xor	edx, edx
	mov	ecx, 12					; 0000000cH
	div	ecx
	cmp	eax, DWORD PTR _num_groups$[ebp]
	jae	SHORT $LN10@tt_cmap12_
$LN9@tt_cmap12_:
; Line 2093
	push	OFFSET $SG11150
	push	2093					; 0000082dH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN10@tt_cmap12_:
; Line 2097
	mov	DWORD PTR _last$2[ebp], 0
; Line 2100
	mov	DWORD PTR _n$6[ebp], 0
	jmp	SHORT $LN8@tt_cmap12_
$LN7@tt_cmap12_:
	mov	eax, DWORD PTR _n$6[ebp]
	add	eax, 1
	mov	DWORD PTR _n$6[ebp], eax
$LN8@tt_cmap12_:
	mov	ecx, DWORD PTR _n$6[ebp]
	cmp	ecx, DWORD PTR _num_groups$[ebp]
	jae	$LN6@tt_cmap12_
; Line 2102
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _start$5[ebp], eax
; Line 2103
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _end$4[ebp], ecx
; Line 2104
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _start_id$3[ebp], edx
; Line 2106
	mov	edx, DWORD PTR _start$5[ebp]
	cmp	edx, DWORD PTR _end$4[ebp]
	jbe	SHORT $LN5@tt_cmap12_
; Line 2107
	push	OFFSET $SG11190
	push	2107					; 0000083bH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN5@tt_cmap12_:
; Line 2109
	cmp	DWORD PTR _n$6[ebp], 0
	jbe	SHORT $LN4@tt_cmap12_
	mov	ecx, DWORD PTR _start$5[ebp]
	cmp	ecx, DWORD PTR _last$2[ebp]
	ja	SHORT $LN4@tt_cmap12_
; Line 2110
	push	OFFSET $SG11192
	push	2110					; 0000083eH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN4@tt_cmap12_:
; Line 2112
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 1
	jl	SHORT $LN3@tt_cmap12_
; Line 2114
	mov	ecx, DWORD PTR _end$4[ebp]
	sub	ecx, DWORD PTR _start$5[ebp]
	mov	DWORD PTR _d$1[ebp], ecx
; Line 2119
	mov	edx, DWORD PTR _valid$[ebp]
	mov	eax, DWORD PTR _d$1[ebp]
	cmp	eax, DWORD PTR [edx+80]
	ja	SHORT $LN1@tt_cmap12_
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	sub	edx, DWORD PTR _d$1[ebp]
	cmp	DWORD PTR _start_id$3[ebp], edx
	jb	SHORT $LN3@tt_cmap12_
$LN1@tt_cmap12_:
; Line 2120
	push	OFFSET $SG11199
	push	2120					; 00000848H
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN3@tt_cmap12_:
; Line 2123
	mov	ecx, DWORD PTR _end$4[ebp]
	mov	DWORD PTR _last$2[ebp], ecx
; Line 2124
	jmp	$LN7@tt_cmap12_
$LN6@tt_cmap12_:
; Line 2127
	xor	eax, eax
; Line 2128
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap12_validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_table$ = 12						; size = 4
_tt_cmap12_init PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 2059
	push	ebp
	mov	ebp, esp
; Line 2060
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2062
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _table$[ebp], edx
; Line 2063
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _table$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _table$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _table$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _table$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 2065
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	BYTE PTR [edx+24], 0
; Line 2067
	xor	eax, eax
; Line 2068
	pop	ebp
	ret	0
_tt_cmap12_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_cmap_info$ = 12					; size = 4
_tt_cmap10_get_info PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1980
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1981
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 8
	mov	DWORD PTR _p$[ebp], ecx
; Line 1984
	mov	edx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [edx+4], 10			; 0000000aH
; Line 1985
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	ecx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1987
	xor	eax, eax
; Line 1988
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap10_get_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$ = -28						; size = 4
_count$ = -24						; size = 4
_start$ = -20						; size = 4
_p$ = -16						; size = 4
_gindex$ = -12						; size = 4
_char_code$ = -8					; size = 4
_table$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_tt_cmap10_char_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1948
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1949
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _table$[ebp], ecx
; Line 1950
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	DWORD PTR _char_code$[ebp], eax
; Line 1951
	mov	DWORD PTR _gindex$[ebp], 0
; Line 1952
	mov	ecx, DWORD PTR _table$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], ecx
; Line 1953
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _start$[ebp], eax
; Line 1954
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _count$[ebp], ecx
; Line 1958
	mov	ecx, DWORD PTR _char_code$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	jae	SHORT $LN5@tt_cmap10_
; Line 1959
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _char_code$[ebp], edx
$LN5@tt_cmap10_:
; Line 1961
	mov	eax, DWORD PTR _char_code$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _idx$[ebp], eax
; Line 1962
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _p$[ebp], eax
; Line 1964
	jmp	SHORT $LN4@tt_cmap10_
$LN3@tt_cmap10_:
	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx
$LN4@tt_cmap10_:
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jae	SHORT $LN2@tt_cmap10_
; Line 1966
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _gindex$[ebp], eax
; Line 1967
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN1@tt_cmap10_
; Line 1968
	jmp	SHORT $LN2@tt_cmap10_
$LN1@tt_cmap10_:
; Line 1969
	mov	ecx, DWORD PTR _char_code$[ebp]
	add	ecx, 1
	mov	DWORD PTR _char_code$[ebp], ecx
; Line 1970
	jmp	SHORT $LN3@tt_cmap10_
$LN2@tt_cmap10_:
; Line 1972
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	eax, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1973
	mov	eax, DWORD PTR _gindex$[ebp]
; Line 1974
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap10_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$ = -24						; size = 4
_count$ = -20						; size = 4
_start$ = -16						; size = 4
_p$ = -12						; size = 4
_result$ = -8						; size = 4
_table$ = -4						; size = 4
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap10_char_index PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1927
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1928
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _table$[ebp], ecx
; Line 1929
	mov	DWORD PTR _result$[ebp], 0
; Line 1930
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], edx
; Line 1931
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _start$[ebp], ecx
; Line 1932
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _count$[ebp], edx
; Line 1933
	mov	edx, DWORD PTR _char_code$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _idx$[ebp], edx
; Line 1936
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN1@tt_cmap10_
; Line 1938
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _p$[ebp], eax
; Line 1939
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _result$[ebp], eax
$LN1@tt_cmap10_:
; Line 1941
	mov	eax, DWORD PTR _result$[ebp]
; Line 1942
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap10_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gindex$1 = -16						; size = 4
_count$ = -12						; size = 4
_length$ = -8						; size = 4
_p$ = -4						; size = 4
_table$ = 8						; size = 4
_valid$ = 12						; size = 4
_tt_cmap10_validate PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1888
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1889
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 1893
	mov	ecx, DWORD PTR _table$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _valid$[ebp]
	cmp	ecx, DWORD PTR [edx+68]
	jbe	SHORT $LN8@tt_cmap10_
; Line 1894
	push	OFFSET $SG10938
	push	1894					; 00000766H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN8@tt_cmap10_:
; Line 1896
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _length$[ebp], edx
; Line 1897
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], edx
; Line 1898
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _count$[ebp], ecx
; Line 1903
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	sub	edx, DWORD PTR _table$[ebp]
	cmp	DWORD PTR _length$[ebp], edx
	ja	SHORT $LN6@tt_cmap10_
	cmp	DWORD PTR _length$[ebp], 20		; 00000014H
	jb	SHORT $LN6@tt_cmap10_
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 20					; 00000014H
	shr	eax, 1
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN7@tt_cmap10_
$LN6@tt_cmap10_:
; Line 1904
	push	OFFSET $SG10962
	push	1904					; 00000770H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN7@tt_cmap10_:
; Line 1907
	mov	edx, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [edx+72], 1
	jl	SHORT $LN5@tt_cmap10_
; Line 1912
	jmp	SHORT $LN4@tt_cmap10_
$LN3@tt_cmap10_:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN4@tt_cmap10_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN5@tt_cmap10_
; Line 1914
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _gindex$1[ebp], ecx
; Line 1915
	mov	edx, DWORD PTR _valid$[ebp]
	mov	eax, DWORD PTR _gindex$1[ebp]
	cmp	eax, DWORD PTR [edx+80]
	jb	SHORT $LN1@tt_cmap10_
; Line 1916
	push	OFFSET $SG10976
	push	1916					; 0000077cH
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN1@tt_cmap10_:
; Line 1917
	jmp	SHORT $LN3@tt_cmap10_
$LN5@tt_cmap10_:
; Line 1920
	xor	eax, eax
; Line 1921
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap10_validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_cmap_info$ = 12					; size = 4
_tt_cmap8_get_info PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1825
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1826
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 8
	mov	DWORD PTR _p$[ebp], ecx
; Line 1829
	mov	edx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [edx+4], 8
; Line 1830
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	ecx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1832
	xor	eax, eax
; Line 1833
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap8_get_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_start_id$ = -36					; size = 4
_end$ = -32						; size = 4
_start$ = -28						; size = 4
_num_groups$ = -24					; size = 4
_p$ = -20						; size = 4
_table$ = -16						; size = 4
_gindex$ = -12						; size = 4
_char_code$ = -8					; size = 4
_result$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_tt_cmap8_char_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1784
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1785
	mov	DWORD PTR _result$[ebp], 0
; Line 1786
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR _char_code$[ebp], ecx
; Line 1787
	mov	DWORD PTR _gindex$[ebp], 0
; Line 1788
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _table$[ebp], eax
; Line 1789
	mov	ecx, DWORD PTR _table$[ebp]
	add	ecx, 8204				; 0000200cH
	mov	DWORD PTR _p$[ebp], ecx
; Line 1790
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _num_groups$[ebp], eax
; Line 1794
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 8208				; 00002010H
	mov	DWORD PTR _p$[ebp], eax
; Line 1796
	jmp	SHORT $LN6@tt_cmap8_c
$LN5@tt_cmap8_c:
	mov	ecx, DWORD PTR _num_groups$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _num_groups$[ebp], ecx
$LN6@tt_cmap8_c:
	cmp	DWORD PTR _num_groups$[ebp], 0
	jbe	$Exit$9
; Line 1798
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _start$[ebp], eax
; Line 1799
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _end$[ebp], ecx
; Line 1800
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _start_id$[ebp], edx
; Line 1802
	mov	edx, DWORD PTR _char_code$[ebp]
	cmp	edx, DWORD PTR _start$[ebp]
	jae	SHORT $LN3@tt_cmap8_c
; Line 1803
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _char_code$[ebp], eax
$LN3@tt_cmap8_c:
; Line 1805
	mov	ecx, DWORD PTR _char_code$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	ja	SHORT $LN2@tt_cmap8_c
; Line 1807
	mov	edx, DWORD PTR _char_code$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	add	edx, DWORD PTR _start_id$[ebp]
	mov	DWORD PTR _gindex$[ebp], edx
; Line 1808
	je	SHORT $LN2@tt_cmap8_c
; Line 1810
	mov	eax, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR _result$[ebp], eax
; Line 1811
	jmp	SHORT $Exit$9
$LN2@tt_cmap8_c:
; Line 1814
	jmp	$LN5@tt_cmap8_c
$Exit$9:
; Line 1817
	mov	ecx, DWORD PTR _pchar_code$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1818
	mov	eax, DWORD PTR _gindex$[ebp]
; Line 1819
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap8_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_start_id$ = -28					; size = 4
_end$ = -24						; size = 4
_start$ = -20						; size = 4
_num_groups$ = -16					; size = 4
_p$ = -12						; size = 4
_result$ = -8						; size = 4
_table$ = -4						; size = 4
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap8_char_index PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1754
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1755
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _table$[ebp], ecx
; Line 1756
	mov	DWORD PTR _result$[ebp], 0
; Line 1757
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 8204				; 0000200cH
	mov	DWORD PTR _p$[ebp], edx
; Line 1758
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _num_groups$[ebp], ecx
; Line 1762
	jmp	SHORT $LN5@tt_cmap8_c
$LN4@tt_cmap8_c:
	mov	ecx, DWORD PTR _num_groups$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _num_groups$[ebp], ecx
$LN5@tt_cmap8_c:
	cmp	DWORD PTR _num_groups$[ebp], 0
	jbe	$LN3@tt_cmap8_c
; Line 1764
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _start$[ebp], eax
; Line 1765
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _end$[ebp], ecx
; Line 1766
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _start_id$[ebp], edx
; Line 1768
	mov	edx, DWORD PTR _char_code$[ebp]
	cmp	edx, DWORD PTR _start$[ebp]
	jae	SHORT $LN2@tt_cmap8_c
; Line 1769
	jmp	SHORT $LN3@tt_cmap8_c
$LN2@tt_cmap8_c:
; Line 1771
	mov	eax, DWORD PTR _char_code$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	ja	SHORT $LN1@tt_cmap8_c
; Line 1773
	mov	ecx, DWORD PTR _start_id$[ebp]
	add	ecx, DWORD PTR _char_code$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _result$[ebp], ecx
; Line 1774
	jmp	SHORT $LN3@tt_cmap8_c
$LN1@tt_cmap8_c:
; Line 1776
	jmp	$LN4@tt_cmap8_c
$LN3@tt_cmap8_c:
; Line 1777
	mov	eax, DWORD PTR _result$[ebp]
; Line 1778
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap8_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_d$1 = -52						; size = 4
_lo$2 = -48						; size = 4
_hi$3 = -44						; size = 4
_last$4 = -40						; size = 4
_count$5 = -36						; size = 4
_start_id$6 = -32					; size = 4
_end$7 = -28						; size = 4
_start$8 = -24						; size = 4
_n$9 = -20						; size = 4
_num_groups$ = -16					; size = 4
_length$ = -12						; size = 4
_is32$ = -8						; size = 4
_p$ = -4						; size = 4
_table$ = 8						; size = 4
_valid$ = 12						; size = 4
_tt_cmap8_validate PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1654
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1655
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 1661
	mov	ecx, DWORD PTR _table$[ebp]
	add	ecx, 8208				; 00002010H
	mov	edx, DWORD PTR _valid$[ebp]
	cmp	ecx, DWORD PTR [edx+68]
	jbe	SHORT $LN24@tt_cmap8_v
; Line 1662
	push	OFFSET $SG10675
	push	1662					; 0000067eH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN24@tt_cmap8_v:
; Line 1664
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _length$[ebp], edx
; Line 1665
	mov	edx, DWORD PTR _valid$[ebp]
	mov	eax, DWORD PTR [edx+68]
	sub	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR _length$[ebp], eax
	ja	SHORT $LN22@tt_cmap8_v
	cmp	DWORD PTR _length$[ebp], 8208		; 00002010H
	jae	SHORT $LN23@tt_cmap8_v
$LN22@tt_cmap8_v:
; Line 1666
	push	OFFSET $SG10689
	push	1666					; 00000682H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN23@tt_cmap8_v:
; Line 1668
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _is32$[ebp], edx
; Line 1669
	mov	eax, DWORD PTR _is32$[ebp]
	add	eax, 8192				; 00002000H
	mov	DWORD PTR _p$[ebp], eax
; Line 1670
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _num_groups$[ebp], edx
; Line 1673
	mov	edx, DWORD PTR _valid$[ebp]
	mov	eax, DWORD PTR [edx+68]
	sub	eax, DWORD PTR _p$[ebp]
	xor	edx, edx
	mov	ecx, 12					; 0000000cH
	div	ecx
	cmp	DWORD PTR _num_groups$[ebp], eax
	jbe	SHORT $LN21@tt_cmap8_v
; Line 1674
	push	OFFSET $SG10702
	push	1674					; 0000068aH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN21@tt_cmap8_v:
; Line 1678
	mov	DWORD PTR _last$4[ebp], 0
; Line 1681
	mov	DWORD PTR _n$9[ebp], 0
	jmp	SHORT $LN20@tt_cmap8_v
$LN19@tt_cmap8_v:
	mov	eax, DWORD PTR _n$9[ebp]
	add	eax, 1
	mov	DWORD PTR _n$9[ebp], eax
$LN20@tt_cmap8_v:
	mov	ecx, DWORD PTR _n$9[ebp]
	cmp	ecx, DWORD PTR _num_groups$[ebp]
	jae	$LN18@tt_cmap8_v
; Line 1686
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _start$8[ebp], eax
; Line 1687
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _end$7[ebp], ecx
; Line 1688
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _start_id$6[ebp], edx
; Line 1690
	mov	edx, DWORD PTR _start$8[ebp]
	cmp	edx, DWORD PTR _end$7[ebp]
	jbe	SHORT $LN17@tt_cmap8_v
; Line 1691
	push	OFFSET $SG10745
	push	1691					; 0000069bH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN17@tt_cmap8_v:
; Line 1693
	cmp	DWORD PTR _n$9[ebp], 0
	jbe	SHORT $LN16@tt_cmap8_v
	mov	ecx, DWORD PTR _start$8[ebp]
	cmp	ecx, DWORD PTR _last$4[ebp]
	ja	SHORT $LN16@tt_cmap8_v
; Line 1694
	push	OFFSET $SG10747
	push	1694					; 0000069eH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN16@tt_cmap8_v:
; Line 1696
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 1
	jl	$LN15@tt_cmap8_v
; Line 1698
	mov	ecx, DWORD PTR _end$7[ebp]
	sub	ecx, DWORD PTR _start$8[ebp]
	mov	DWORD PTR _d$1[ebp], ecx
; Line 1703
	mov	edx, DWORD PTR _valid$[ebp]
	mov	eax, DWORD PTR _d$1[ebp]
	cmp	eax, DWORD PTR [edx+80]
	ja	SHORT $LN13@tt_cmap8_v
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	sub	edx, DWORD PTR _d$1[ebp]
	cmp	DWORD PTR _start_id$6[ebp], edx
	jb	SHORT $LN14@tt_cmap8_v
$LN13@tt_cmap8_v:
; Line 1704
	push	OFFSET $SG10754
	push	1704					; 000006a8H
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN14@tt_cmap8_v:
; Line 1706
	mov	ecx, DWORD PTR _end$7[ebp]
	sub	ecx, DWORD PTR _start$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$5[ebp], ecx
; Line 1708
	mov	edx, DWORD PTR _start$8[ebp]
	and	edx, -65536				; ffff0000H
	je	$LN12@tt_cmap8_v
; Line 1712
	jmp	SHORT $LN11@tt_cmap8_v
$LN10@tt_cmap8_v:
	mov	eax, DWORD PTR _count$5[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$5[ebp], eax
	mov	ecx, DWORD PTR _start$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _start$8[ebp], ecx
$LN11@tt_cmap8_v:
	cmp	DWORD PTR _count$5[ebp], 0
	jbe	$LN9@tt_cmap8_v
; Line 1714
	mov	edx, DWORD PTR _start$8[ebp]
	shr	edx, 16					; 00000010H
	mov	DWORD PTR _hi$3[ebp], edx
; Line 1715
	mov	eax, DWORD PTR _start$8[ebp]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _lo$2[ebp], eax
; Line 1717
	mov	ecx, DWORD PTR _hi$3[ebp]
	shr	ecx, 3
	mov	edx, DWORD PTR _is32$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _hi$3[ebp]
	and	ecx, 7
	mov	edx, 128				; 00000080H
	sar	edx, cl
	and	eax, edx
	jne	SHORT $LN8@tt_cmap8_v
; Line 1718
	push	OFFSET $SG10763
	push	1718					; 000006b6H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN8@tt_cmap8_v:
; Line 1720
	mov	ecx, DWORD PTR _lo$2[ebp]
	shr	ecx, 3
	mov	edx, DWORD PTR _is32$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _lo$2[ebp]
	and	ecx, 7
	mov	edx, 128				; 00000080H
	sar	edx, cl
	and	eax, edx
	jne	SHORT $LN7@tt_cmap8_v
; Line 1721
	push	OFFSET $SG10765
	push	1721					; 000006b9H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN7@tt_cmap8_v:
; Line 1722
	jmp	$LN10@tt_cmap8_v
$LN9@tt_cmap8_v:
; Line 1724
	jmp	$LN15@tt_cmap8_v
$LN12@tt_cmap8_v:
; Line 1730
	mov	ecx, DWORD PTR _end$7[ebp]
	and	ecx, -65536				; ffff0000H
	je	SHORT $LN5@tt_cmap8_v
; Line 1731
	push	OFFSET $SG10768
	push	1731					; 000006c3H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN5@tt_cmap8_v:
; Line 1733
	jmp	SHORT $LN4@tt_cmap8_v
$LN3@tt_cmap8_v:
	mov	eax, DWORD PTR _count$5[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$5[ebp], eax
	mov	ecx, DWORD PTR _start$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _start$8[ebp], ecx
$LN4@tt_cmap8_v:
	cmp	DWORD PTR _count$5[ebp], 0
	jbe	SHORT $LN15@tt_cmap8_v
; Line 1735
	mov	edx, DWORD PTR _start$8[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _lo$2[ebp], edx
; Line 1737
	mov	eax, DWORD PTR _lo$2[ebp]
	shr	eax, 3
	mov	ecx, DWORD PTR _is32$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	ecx, DWORD PTR _lo$2[ebp]
	and	ecx, 7
	mov	eax, 128				; 00000080H
	sar	eax, cl
	and	edx, eax
	je	SHORT $LN1@tt_cmap8_v
; Line 1738
	push	OFFSET $SG10774
	push	1738					; 000006caH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN1@tt_cmap8_v:
; Line 1739
	jmp	SHORT $LN3@tt_cmap8_v
$LN15@tt_cmap8_v:
; Line 1743
	mov	edx, DWORD PTR _end$7[ebp]
	mov	DWORD PTR _last$4[ebp], edx
; Line 1744
	jmp	$LN19@tt_cmap8_v
$LN18@tt_cmap8_v:
; Line 1747
	xor	eax, eax
; Line 1748
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap8_validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_cmap_info$ = 12					; size = 4
_tt_cmap6_get_info PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1562
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1563
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 1566
	mov	edx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [edx+4], 6
; Line 1567
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	eax, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1569
	xor	eax, eax
; Line 1570
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap6_get_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$ = -32						; size = 4
_count$ = -28						; size = 4
_start$ = -24						; size = 4
_p$ = -20						; size = 4
_gindex$ = -16						; size = 4
_char_code$ = -12					; size = 4
_result$ = -8						; size = 4
_table$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_tt_cmap6_char_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1521
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1522
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _table$[ebp], ecx
; Line 1523
	mov	DWORD PTR _result$[ebp], 0
; Line 1524
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	DWORD PTR _char_code$[ebp], eax
; Line 1525
	mov	DWORD PTR _gindex$[ebp], 0
; Line 1527
	mov	ecx, DWORD PTR _table$[ebp]
	add	ecx, 6
	mov	DWORD PTR _p$[ebp], ecx
; Line 1528
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _start$[ebp], edx
; Line 1529
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _count$[ebp], eax
; Line 1533
	cmp	DWORD PTR _char_code$[ebp], 65536	; 00010000H
	jb	SHORT $LN6@tt_cmap6_c
; Line 1534
	jmp	$Exit$9
$LN6@tt_cmap6_c:
; Line 1536
	mov	ecx, DWORD PTR _char_code$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	jae	SHORT $LN5@tt_cmap6_c
; Line 1537
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _char_code$[ebp], edx
$LN5@tt_cmap6_c:
; Line 1539
	mov	eax, DWORD PTR _char_code$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _idx$[ebp], eax
; Line 1540
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _p$[ebp], eax
; Line 1542
	jmp	SHORT $LN4@tt_cmap6_c
$LN3@tt_cmap6_c:
	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx
$LN4@tt_cmap6_c:
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jae	SHORT $Exit$9
; Line 1544
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _gindex$[ebp], eax
; Line 1545
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN1@tt_cmap6_c
; Line 1547
	mov	ecx, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR _result$[ebp], ecx
; Line 1548
	jmp	SHORT $Exit$9
$LN1@tt_cmap6_c:
; Line 1550
	mov	edx, DWORD PTR _char_code$[ebp]
	add	edx, 1
	mov	DWORD PTR _char_code$[ebp], edx
; Line 1551
	jmp	SHORT $LN3@tt_cmap6_c
$Exit$9:
; Line 1554
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1555
	mov	eax, DWORD PTR _gindex$[ebp]
; Line 1556
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap6_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$ = -24						; size = 4
_count$ = -20						; size = 4
_start$ = -16						; size = 4
_p$ = -12						; size = 4
_result$ = -8						; size = 4
_table$ = -4						; size = 4
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap6_char_index PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1500
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1501
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _table$[ebp], ecx
; Line 1502
	mov	DWORD PTR _result$[ebp], 0
; Line 1503
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 6
	mov	DWORD PTR _p$[ebp], edx
; Line 1504
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _start$[ebp], eax
; Line 1505
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _count$[ebp], ecx
; Line 1506
	mov	edx, DWORD PTR _char_code$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _idx$[ebp], edx
; Line 1509
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN1@tt_cmap6_c
; Line 1511
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _p$[ebp], eax
; Line 1512
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _result$[ebp], eax
$LN1@tt_cmap6_c:
; Line 1514
	mov	eax, DWORD PTR _result$[ebp]
; Line 1515
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap6_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gindex$1 = -16						; size = 4
_count$ = -12						; size = 4
_length$ = -8						; size = 4
_p$ = -4						; size = 4
_table$ = 8						; size = 4
_valid$ = 12						; size = 4
_tt_cmap6_validate PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1462
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1467
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _valid$[ebp]
	cmp	eax, DWORD PTR [ecx+68]
	jbe	SHORT $LN8@tt_cmap6_v
; Line 1468
	push	OFFSET $SG10536
	push	1468					; 000005bcH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN8@tt_cmap6_v:
; Line 1470
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 1471
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _length$[ebp], ecx
; Line 1473
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 8
	mov	DWORD PTR _p$[ebp], edx
; Line 1474
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _count$[ebp], eax
; Line 1476
	mov	ecx, DWORD PTR _table$[ebp]
	add	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR _valid$[ebp]
	cmp	ecx, DWORD PTR [edx+68]
	ja	SHORT $LN6@tt_cmap6_v
	mov	eax, DWORD PTR _count$[ebp]
	lea	ecx, DWORD PTR [eax+eax+10]
	cmp	DWORD PTR _length$[ebp], ecx
	jae	SHORT $LN7@tt_cmap6_v
$LN6@tt_cmap6_v:
; Line 1477
	push	OFFSET $SG10551
	push	1477					; 000005c5H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN7@tt_cmap6_v:
; Line 1480
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 1
	jl	SHORT $LN5@tt_cmap6_v
; Line 1485
	jmp	SHORT $LN4@tt_cmap6_v
$LN3@tt_cmap6_v:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
$LN4@tt_cmap6_v:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN5@tt_cmap6_v
; Line 1487
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _gindex$1[ebp], edx
; Line 1488
	mov	eax, DWORD PTR _valid$[ebp]
	mov	ecx, DWORD PTR _gindex$1[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	jb	SHORT $LN1@tt_cmap6_v
; Line 1489
	push	OFFSET $SG10565
	push	1489					; 000005d1H
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN1@tt_cmap6_v:
; Line 1490
	jmp	SHORT $LN3@tt_cmap6_v
$LN5@tt_cmap6_v:
; Line 1493
	xor	eax, eax
; Line 1494
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap6_validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_cmap_info$ = 12					; size = 4
_tt_cmap4_get_info PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1399
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1400
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 1403
	mov	edx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [edx+4], 4
; Line 1404
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	eax, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1406
	xor	eax, eax
; Line 1407
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap4_get_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap4$1 = -8						; size = 4
_gindex$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_tt_cmap4_char_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1366
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1370
	mov	eax, DWORD PTR _pchar_code$[ebp]
	cmp	DWORD PTR [eax], 65535			; 0000ffffH
	jb	SHORT $LN6@tt_cmap4_c
; Line 1371
	xor	eax, eax
	jmp	SHORT $LN7@tt_cmap4_c
$LN6@tt_cmap4_c:
; Line 1373
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 1
	je	SHORT $LN5@tt_cmap4_c
; Line 1374
	push	1
	mov	eax, DWORD PTR _pchar_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	call	_tt_cmap4_char_map_linear
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _gindex$[ebp], eax
; Line 1375
	jmp	SHORT $LN4@tt_cmap4_c
$LN5@tt_cmap4_c:
; Line 1377
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap4$1[ebp], edx
; Line 1381
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR _cmap4$1[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+24]
	jne	SHORT $LN3@tt_cmap4_c
; Line 1383
	mov	eax, DWORD PTR _cmap4$1[ebp]
	push	eax
	call	_tt_cmap4_next
	add	esp, 4
; Line 1384
	mov	ecx, DWORD PTR _cmap4$1[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _gindex$[ebp], edx
; Line 1385
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN2@tt_cmap4_c
; Line 1386
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR _cmap4$1[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx
$LN2@tt_cmap4_c:
; Line 1388
	jmp	SHORT $LN4@tt_cmap4_c
$LN3@tt_cmap4_c:
; Line 1389
	push	1
	mov	eax, DWORD PTR _pchar_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	call	_tt_cmap4_char_map_binary
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _gindex$[ebp], eax
$LN4@tt_cmap4_c:
; Line 1392
	mov	eax, DWORD PTR _gindex$[ebp]
$LN7@tt_cmap4_c:
; Line 1393
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap4_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap4_char_index PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1352
	push	ebp
	mov	ebp, esp
; Line 1353
	cmp	DWORD PTR _char_code$[ebp], 65536	; 00010000H
	jb	SHORT $LN3@tt_cmap4_c
; Line 1354
	xor	eax, eax
	jmp	SHORT $LN4@tt_cmap4_c
$LN3@tt_cmap4_c:
; Line 1356
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 1
	je	SHORT $LN2@tt_cmap4_c
; Line 1357
	push	0
	lea	edx, DWORD PTR _char_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$[ebp]
	push	eax
	call	_tt_cmap4_char_map_linear
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN4@tt_cmap4_c
; Line 1358
	jmp	SHORT $LN4@tt_cmap4_c
$LN2@tt_cmap4_c:
; Line 1359
	push	0
	lea	ecx, DWORD PTR _char_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmap$[ebp]
	push	edx
	call	_tt_cmap4_char_map_binary
	add	esp, 12					; 0000000cH
$LN4@tt_cmap4_c:
; Line 1360
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_tt_cmap4_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap4$1 = -80						; size = 4
_next_start$2 = -76					; size = 4
_next_end$3 = -72					; size = 4
_old_p$4 = -68						; size = 4
_prev_end$5 = -64					; size = 4
_i$6 = -60						; size = 4
_limit$7 = -56						; size = 4
_face$8 = -52						; size = 4
_p$ = -48						; size = 4
_gindex$ = -44						; size = 4
_charcode$ = -40					; size = 4
_num_segs$ = -36					; size = 4
_mid$ = -32						; size = 4
_min$ = -28						; size = 4
_max$ = -24						; size = 4
_delta$ = -20						; size = 4
_offset$ = -16						; size = 4
_end$ = -12						; size = 4
_start$ = -8						; size = 4
_num_segs2$ = -4					; size = 4
_cmap$ = 8						; size = 4
_pcharcode$ = 12					; size = 4
_next$ = 16						; size = 1
_tt_cmap4_char_map_binary PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1117
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1121
	mov	eax, DWORD PTR _pcharcode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _charcode$[ebp], ecx
; Line 1122
	mov	DWORD PTR _gindex$[ebp], 0
; Line 1126
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 6
	mov	DWORD PTR _p$[ebp], eax
; Line 1127
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movzx	eax, cx
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _num_segs2$[ebp], eax
; Line 1129
	jne	SHORT $LN40@tt_cmap4_c
; Line 1130
	xor	eax, eax
	jmp	$LN41@tt_cmap4_c
$LN40@tt_cmap4_c:
; Line 1132
	mov	ecx, DWORD PTR _num_segs2$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _num_segs$[ebp], ecx
; Line 1135
	mov	edx, DWORD PTR _num_segs$[ebp]
	mov	DWORD PTR _mid$[ebp], edx
; Line 1136
	mov	DWORD PTR _end$[ebp], 65535		; 0000ffffH
; Line 1138
	movzx	eax, BYTE PTR _next$[ebp]
	test	eax, eax
	je	SHORT $LN39@tt_cmap4_c
; Line 1139
	mov	ecx, DWORD PTR _charcode$[ebp]
	add	ecx, 1
	mov	DWORD PTR _charcode$[ebp], ecx
$LN39@tt_cmap4_c:
; Line 1141
	mov	DWORD PTR _min$[ebp], 0
; Line 1142
	mov	edx, DWORD PTR _num_segs$[ebp]
	mov	DWORD PTR _max$[ebp], edx
$LN38@tt_cmap4_c:
; Line 1145
	mov	eax, DWORD PTR _min$[ebp]
	cmp	eax, DWORD PTR _max$[ebp]
	jae	$LN37@tt_cmap4_c
; Line 1147
	mov	ecx, DWORD PTR _min$[ebp]
	add	ecx, DWORD PTR _max$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mid$[ebp], ecx
; Line 1148
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _mid$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+14]
	mov	DWORD PTR _p$[ebp], edx
; Line 1149
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _end$[ebp], edx
; Line 1150
	mov	eax, DWORD PTR _num_segs2$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2]
	mov	DWORD PTR _p$[ebp], edx
; Line 1151
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _start$[ebp], edx
; Line 1153
	mov	eax, DWORD PTR _charcode$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jae	SHORT $LN36@tt_cmap4_c
; Line 1154
	mov	ecx, DWORD PTR _mid$[ebp]
	mov	DWORD PTR _max$[ebp], ecx
	jmp	$LN35@tt_cmap4_c
$LN36@tt_cmap4_c:
; Line 1155
	mov	edx, DWORD PTR _charcode$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jbe	SHORT $LN34@tt_cmap4_c
; Line 1156
	mov	eax, DWORD PTR _mid$[ebp]
	add	eax, 1
	mov	DWORD PTR _min$[ebp], eax
; Line 1157
	jmp	$LN35@tt_cmap4_c
$LN34@tt_cmap4_c:
; Line 1159
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _num_segs2$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1160
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movsx	ecx, dx
	mov	DWORD PTR _delta$[ebp], ecx
; Line 1161
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _num_segs2$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 1162
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _offset$[ebp], edx
; Line 1167
	mov	eax, DWORD PTR _num_segs$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _mid$[ebp], eax
	jb	SHORT $LN32@tt_cmap4_c
	cmp	DWORD PTR _start$[ebp], 65535		; 0000ffffH
	jne	SHORT $LN32@tt_cmap4_c
	cmp	DWORD PTR _end$[ebp], 65535		; 0000ffffH
	jne	SHORT $LN32@tt_cmap4_c
; Line 1169
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$8[ebp], edx
; Line 1170
	mov	eax, DWORD PTR _face$8[ebp]
	mov	ecx, DWORD PTR [eax+500]
	mov	edx, DWORD PTR _face$8[ebp]
	add	ecx, DWORD PTR [edx+504]
	mov	DWORD PTR _limit$7[ebp], ecx
; Line 1173
	cmp	DWORD PTR _offset$[ebp], 0
	je	SHORT $LN32@tt_cmap4_c
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2]
	cmp	edx, DWORD PTR _limit$7[ebp]
	jbe	SHORT $LN32@tt_cmap4_c
; Line 1175
	mov	DWORD PTR _delta$[ebp], 1
; Line 1176
	mov	DWORD PTR _offset$[ebp], 0
$LN32@tt_cmap4_c:
; Line 1181
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 2
	je	$LN30@tt_cmap4_c
; Line 1187
	mov	edx, DWORD PTR _mid$[ebp]
	mov	DWORD PTR _max$[ebp], edx
; Line 1189
	cmp	DWORD PTR _offset$[ebp], 65535		; 0000ffffH
	jne	SHORT $LN29@tt_cmap4_c
; Line 1190
	mov	eax, DWORD PTR _max$[ebp]
	add	eax, 1
	mov	DWORD PTR _mid$[ebp], eax
$LN29@tt_cmap4_c:
; Line 1193
	mov	ecx, DWORD PTR _max$[ebp]
	mov	DWORD PTR _i$6[ebp], ecx
	jmp	SHORT $LN28@tt_cmap4_c
$LN27@tt_cmap4_c:
	mov	edx, DWORD PTR _i$6[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$6[ebp], edx
$LN28@tt_cmap4_c:
	cmp	DWORD PTR _i$6[ebp], 0
	jbe	$LN26@tt_cmap4_c
; Line 1199
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _old_p$4[ebp], eax
; Line 1200
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _i$6[ebp]
	lea	ecx, DWORD PTR [edx+eax*2+12]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1201
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _prev_end$5[ebp], ecx
; Line 1203
	mov	edx, DWORD PTR _charcode$[ebp]
	cmp	edx, DWORD PTR _prev_end$5[ebp]
	jbe	SHORT $LN25@tt_cmap4_c
; Line 1205
	mov	eax, DWORD PTR _old_p$4[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1206
	jmp	$LN26@tt_cmap4_c
$LN25@tt_cmap4_c:
; Line 1209
	mov	ecx, DWORD PTR _prev_end$5[ebp]
	mov	DWORD PTR _end$[ebp], ecx
; Line 1210
	mov	edx, DWORD PTR _num_segs2$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+2]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1211
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _start$[ebp], ecx
; Line 1212
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _num_segs2$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 1213
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movsx	edx, ax
	mov	DWORD PTR _delta$[ebp], edx
; Line 1214
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _num_segs2$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1215
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _offset$[ebp], eax
; Line 1217
	cmp	DWORD PTR _offset$[ebp], 65535		; 0000ffffH
	je	SHORT $LN24@tt_cmap4_c
; Line 1218
	mov	ecx, DWORD PTR _i$6[ebp]
	sub	ecx, 1
	mov	DWORD PTR _mid$[ebp], ecx
$LN24@tt_cmap4_c:
; Line 1219
	jmp	$LN27@tt_cmap4_c
$LN26@tt_cmap4_c:
; Line 1222
	mov	edx, DWORD PTR _max$[ebp]
	add	edx, 1
	cmp	DWORD PTR _mid$[ebp], edx
	jne	$LN23@tt_cmap4_c
; Line 1224
	mov	eax, DWORD PTR _i$6[ebp]
	cmp	eax, DWORD PTR _max$[ebp]
	je	$LN22@tt_cmap4_c
; Line 1226
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _max$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2+14]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1227
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _end$[ebp], ecx
; Line 1228
	mov	edx, DWORD PTR _num_segs2$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+2]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1229
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _start$[ebp], ecx
; Line 1230
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _num_segs2$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 1231
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movsx	edx, ax
	mov	DWORD PTR _delta$[ebp], edx
; Line 1232
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _num_segs2$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1233
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _offset$[ebp], eax
$LN22@tt_cmap4_c:
; Line 1236
	mov	ecx, DWORD PTR _max$[ebp]
	mov	DWORD PTR _mid$[ebp], ecx
; Line 1239
	mov	edx, DWORD PTR _max$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$6[ebp], edx
	jmp	SHORT $LN21@tt_cmap4_c
$LN20@tt_cmap4_c:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN21@tt_cmap4_c:
	mov	ecx, DWORD PTR _i$6[ebp]
	cmp	ecx, DWORD PTR _num_segs$[ebp]
	jae	$LN19@tt_cmap4_c
; Line 1244
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _i$6[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+14]
	mov	DWORD PTR _p$[ebp], edx
; Line 1245
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _next_end$3[ebp], edx
; Line 1246
	mov	eax, DWORD PTR _num_segs2$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2]
	mov	DWORD PTR _p$[ebp], edx
; Line 1247
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _next_start$2[ebp], edx
; Line 1249
	mov	eax, DWORD PTR _charcode$[ebp]
	cmp	eax, DWORD PTR _next_start$2[ebp]
	jae	SHORT $LN18@tt_cmap4_c
; Line 1250
	jmp	$LN19@tt_cmap4_c
$LN18@tt_cmap4_c:
; Line 1252
	mov	ecx, DWORD PTR _next_end$3[ebp]
	mov	DWORD PTR _end$[ebp], ecx
; Line 1253
	mov	edx, DWORD PTR _next_start$2[ebp]
	mov	DWORD PTR _start$[ebp], edx
; Line 1254
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _num_segs2$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1255
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movsx	eax, cx
	mov	DWORD PTR _delta$[ebp], eax
; Line 1256
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _num_segs2$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1257
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _offset$[ebp], ecx
; Line 1259
	cmp	DWORD PTR _offset$[ebp], 65535		; 0000ffffH
	je	SHORT $LN17@tt_cmap4_c
; Line 1260
	mov	edx, DWORD PTR _i$6[ebp]
	mov	DWORD PTR _mid$[ebp], edx
$LN17@tt_cmap4_c:
; Line 1261
	jmp	$LN20@tt_cmap4_c
$LN19@tt_cmap4_c:
; Line 1262
	mov	eax, DWORD PTR _i$6[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
; Line 1265
	mov	ecx, DWORD PTR _mid$[ebp]
	cmp	ecx, DWORD PTR _max$[ebp]
	jne	SHORT $LN23@tt_cmap4_c
; Line 1267
	mov	edx, DWORD PTR _i$6[ebp]
	mov	DWORD PTR _mid$[ebp], edx
; Line 1269
	jmp	$LN37@tt_cmap4_c
$LN23@tt_cmap4_c:
; Line 1274
	mov	eax, DWORD PTR _mid$[ebp]
	cmp	eax, DWORD PTR _i$6[ebp]
	je	$LN15@tt_cmap4_c
; Line 1276
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _mid$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2+14]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1277
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _end$[ebp], ecx
; Line 1278
	mov	edx, DWORD PTR _num_segs2$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+2]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1279
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _start$[ebp], ecx
; Line 1280
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _num_segs2$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 1281
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movsx	edx, ax
	mov	DWORD PTR _delta$[ebp], edx
; Line 1282
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _num_segs2$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1283
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _offset$[ebp], eax
$LN15@tt_cmap4_c:
; Line 1286
	jmp	SHORT $LN14@tt_cmap4_c
$LN30@tt_cmap4_c:
; Line 1288
	cmp	DWORD PTR _offset$[ebp], 65535		; 0000ffffH
	jne	SHORT $LN14@tt_cmap4_c
; Line 1289
	jmp	SHORT $LN37@tt_cmap4_c
$LN14@tt_cmap4_c:
; Line 1292
	cmp	DWORD PTR _offset$[ebp], 0
	je	SHORT $LN12@tt_cmap4_c
; Line 1294
	mov	ecx, DWORD PTR _charcode$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1295
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _gindex$[ebp], eax
; Line 1296
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN11@tt_cmap4_c
; Line 1297
	mov	ecx, DWORD PTR _gindex$[ebp]
	add	ecx, DWORD PTR _delta$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _gindex$[ebp], ecx
$LN11@tt_cmap4_c:
; Line 1299
	jmp	SHORT $LN10@tt_cmap4_c
$LN12@tt_cmap4_c:
; Line 1300
	mov	edx, DWORD PTR _charcode$[ebp]
	add	edx, DWORD PTR _delta$[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _gindex$[ebp], edx
$LN10@tt_cmap4_c:
; Line 1302
	jmp	SHORT $LN37@tt_cmap4_c
$LN35@tt_cmap4_c:
; Line 1304
	jmp	$LN38@tt_cmap4_c
$LN37@tt_cmap4_c:
; Line 1306
	movzx	eax, BYTE PTR _next$[ebp]
	test	eax, eax
	je	$LN9@tt_cmap4_c
; Line 1308
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR _cmap4$1[ebp], ecx
; Line 1315
	mov	edx, DWORD PTR _charcode$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jbe	SHORT $LN8@tt_cmap4_c
; Line 1317
	mov	eax, DWORD PTR _mid$[ebp]
	add	eax, 1
	mov	DWORD PTR _mid$[ebp], eax
; Line 1318
	mov	ecx, DWORD PTR _mid$[ebp]
	cmp	ecx, DWORD PTR _num_segs$[ebp]
	jne	SHORT $LN8@tt_cmap4_c
; Line 1319
	xor	eax, eax
	jmp	SHORT $LN41@tt_cmap4_c
$LN8@tt_cmap4_c:
; Line 1322
	mov	edx, DWORD PTR _mid$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap4$1[ebp]
	push	eax
	call	_tt_cmap4_set_range
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@tt_cmap4_c
; Line 1324
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN5@tt_cmap4_c
; Line 1325
	mov	ecx, DWORD PTR _pcharcode$[ebp]
	mov	edx, DWORD PTR _charcode$[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@tt_cmap4_c:
; Line 1327
	jmp	SHORT $LN9@tt_cmap4_c
$LN6@tt_cmap4_c:
; Line 1329
	mov	eax, DWORD PTR _cmap4$1[ebp]
	mov	ecx, DWORD PTR _charcode$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 1331
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN3@tt_cmap4_c
; Line 1332
	mov	edx, DWORD PTR _cmap4$1[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 1333
	jmp	SHORT $LN2@tt_cmap4_c
$LN3@tt_cmap4_c:
; Line 1335
	mov	ecx, DWORD PTR _cmap4$1[ebp]
	mov	edx, DWORD PTR _charcode$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 1336
	mov	eax, DWORD PTR _cmap4$1[ebp]
	push	eax
	call	_tt_cmap4_next
	add	esp, 4
; Line 1337
	mov	ecx, DWORD PTR _cmap4$1[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _gindex$[ebp], edx
$LN2@tt_cmap4_c:
; Line 1340
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN9@tt_cmap4_c
; Line 1341
	mov	eax, DWORD PTR _pcharcode$[ebp]
	mov	ecx, DWORD PTR _cmap4$1[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx
$LN9@tt_cmap4_c:
; Line 1345
	mov	eax, DWORD PTR _gindex$[ebp]
$LN41@tt_cmap4_c:
; Line 1346
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap4_char_map_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$1 = -52						; size = 4
_face$2 = -48						; size = 4
_q$3 = -44						; size = 4
_p$ = -40						; size = 4
_gindex$ = -36						; size = 4
_charcode$ = -32					; size = 4
_num_segs$ = -28					; size = 4
_i$ = -24						; size = 4
_delta$ = -20						; size = 4
_offset$ = -16						; size = 4
_end$ = -12						; size = 4
_start$ = -8						; size = 4
_num_segs2$ = -4					; size = 4
_cmap$ = 8						; size = 4
_pcharcode$ = 12					; size = 4
_next$ = 16						; size = 1
_tt_cmap4_char_map_linear PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 1028
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1032
	mov	eax, DWORD PTR _pcharcode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _charcode$[ebp], ecx
; Line 1033
	mov	DWORD PTR _gindex$[ebp], 0
; Line 1037
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 6
	mov	DWORD PTR _p$[ebp], eax
; Line 1038
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movzx	eax, cx
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _num_segs2$[ebp], eax
; Line 1040
	mov	ecx, DWORD PTR _num_segs2$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _num_segs$[ebp], ecx
; Line 1042
	jne	SHORT $LN18@tt_cmap4_c
; Line 1043
	xor	eax, eax
	jmp	$LN19@tt_cmap4_c
$LN18@tt_cmap4_c:
; Line 1045
	movzx	edx, BYTE PTR _next$[ebp]
	test	edx, edx
	je	SHORT $LN17@tt_cmap4_c
; Line 1046
	mov	eax, DWORD PTR _charcode$[ebp]
	add	eax, 1
	mov	DWORD PTR _charcode$[ebp], eax
$LN17@tt_cmap4_c:
; Line 1049
	jmp	SHORT $LN16@tt_cmap4_c
$LN15@tt_cmap4_c:
	mov	ecx, DWORD PTR _charcode$[ebp]
	add	ecx, 1
	mov	DWORD PTR _charcode$[ebp], ecx
$LN16@tt_cmap4_c:
	cmp	DWORD PTR _charcode$[ebp], 65535	; 0000ffffH
	ja	$LN14@tt_cmap4_c
; Line 1054
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 14					; 0000000eH
	mov	DWORD PTR _p$[ebp], eax
; Line 1055
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _num_segs2$[ebp]
	lea	ecx, DWORD PTR [edx+eax+16]
	mov	DWORD PTR _q$3[ebp], ecx
; Line 1057
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@tt_cmap4_c
$LN12@tt_cmap4_c:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@tt_cmap4_c:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_segs$[ebp]
	jae	$LN11@tt_cmap4_c
; Line 1059
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _end$[ebp], ecx
; Line 1060
	mov	edx, DWORD PTR _q$3[ebp]
	add	edx, 2
	mov	DWORD PTR _q$3[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _q$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _q$3[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _start$[ebp], edx
; Line 1062
	mov	eax, DWORD PTR _charcode$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jb	$LN10@tt_cmap4_c
	mov	ecx, DWORD PTR _charcode$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	ja	$LN10@tt_cmap4_c
; Line 1064
	mov	edx, DWORD PTR _num_segs2$[ebp]
	mov	eax, DWORD PTR _q$3[ebp]
	lea	ecx, DWORD PTR [eax+edx-2]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1065
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movsx	ecx, dx
	mov	DWORD PTR _delta$[ebp], ecx
; Line 1066
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _num_segs2$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 1067
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _offset$[ebp], edx
; Line 1072
	mov	eax, DWORD PTR _num_segs$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jb	SHORT $LN9@tt_cmap4_c
	cmp	DWORD PTR _start$[ebp], 65535		; 0000ffffH
	jne	SHORT $LN9@tt_cmap4_c
	cmp	DWORD PTR _end$[ebp], 65535		; 0000ffffH
	jne	SHORT $LN9@tt_cmap4_c
; Line 1074
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$2[ebp], edx
; Line 1075
	mov	eax, DWORD PTR _face$2[ebp]
	mov	ecx, DWORD PTR [eax+500]
	mov	edx, DWORD PTR _face$2[ebp]
	add	ecx, DWORD PTR [edx+504]
	mov	DWORD PTR _limit$1[ebp], ecx
; Line 1078
	cmp	DWORD PTR _offset$[ebp], 0
	je	SHORT $LN9@tt_cmap4_c
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2]
	cmp	edx, DWORD PTR _limit$1[ebp]
	jbe	SHORT $LN9@tt_cmap4_c
; Line 1080
	mov	DWORD PTR _delta$[ebp], 1
; Line 1081
	mov	DWORD PTR _offset$[ebp], 0
$LN9@tt_cmap4_c:
; Line 1085
	cmp	DWORD PTR _offset$[ebp], 65535		; 0000ffffH
	jne	SHORT $LN7@tt_cmap4_c
; Line 1086
	jmp	$LN12@tt_cmap4_c
$LN7@tt_cmap4_c:
; Line 1088
	cmp	DWORD PTR _offset$[ebp], 0
	je	SHORT $LN6@tt_cmap4_c
; Line 1090
	mov	eax, DWORD PTR _charcode$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 1091
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _gindex$[ebp], edx
; Line 1092
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN5@tt_cmap4_c
; Line 1093
	mov	eax, DWORD PTR _gindex$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _gindex$[ebp], eax
$LN5@tt_cmap4_c:
; Line 1095
	jmp	SHORT $LN4@tt_cmap4_c
$LN6@tt_cmap4_c:
; Line 1096
	mov	ecx, DWORD PTR _charcode$[ebp]
	add	ecx, DWORD PTR _delta$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _gindex$[ebp], ecx
$LN4@tt_cmap4_c:
; Line 1098
	jmp	SHORT $LN11@tt_cmap4_c
$LN10@tt_cmap4_c:
; Line 1100
	jmp	$LN12@tt_cmap4_c
$LN11@tt_cmap4_c:
; Line 1102
	movzx	edx, BYTE PTR _next$[ebp]
	test	edx, edx
	je	SHORT $LN2@tt_cmap4_c
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN3@tt_cmap4_c
$LN2@tt_cmap4_c:
; Line 1103
	jmp	SHORT $LN14@tt_cmap4_c
$LN3@tt_cmap4_c:
; Line 1104
	jmp	$LN15@tt_cmap4_c
$LN14@tt_cmap4_c:
; Line 1106
	movzx	eax, BYTE PTR _next$[ebp]
	test	eax, eax
	je	SHORT $LN1@tt_cmap4_c
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN1@tt_cmap4_c
; Line 1107
	mov	ecx, DWORD PTR _pcharcode$[ebp]
	mov	edx, DWORD PTR _charcode$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@tt_cmap4_c:
; Line 1109
	mov	eax, DWORD PTR _gindex$[ebp]
$LN19@tt_cmap4_c:
; Line 1110
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap4_char_map_linear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$1 = -100						; size = 4
_i$2 = -96						; size = 4
_p_offset$3 = -92					; size = 4
_p_delta$4 = -88					; size = 4
_p_end$5 = -84						; size = 4
_p_start$6 = -80					; size = 4
_delta$7 = -76						; size = 4
_last_end$8 = -72					; size = 4
_last_start$9 = -68					; size = 4
_n$10 = -64						; size = 4
_offset$11 = -60					; size = 4
_end$12 = -56						; size = 4
_start$13 = -52						; size = 4
_range_shift$14 = -48					; size = 4
_entry_selector$15 = -44				; size = 4
_search_range$16 = -40					; size = 4
_error$ = -36						; size = 4
_num_segs$ = -32					; size = 4
_glyph_ids$ = -28					; size = 4
_deltas$ = -24						; size = 4
_offsets$ = -20						; size = 4
_starts$ = -16						; size = 4
_ends$ = -12						; size = 4
_length$ = -8						; size = 4
_p$ = -4						; size = 4
_table$ = 8						; size = 4
_valid$ = 12						; size = 4
_tt_cmap4_validate PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 833
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 839
	mov	DWORD PTR _error$[ebp], 0
; Line 842
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _valid$[ebp]
	cmp	eax, DWORD PTR [ecx+68]
	jbe	SHORT $LN44@tt_cmap4_v
; Line 843
	push	OFFSET $SG10076
	push	843					; 0000034bH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN44@tt_cmap4_v:
; Line 845
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 846
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _length$[ebp], ecx
; Line 850
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	edx, DWORD PTR [eax+68]
	jbe	SHORT $LN43@tt_cmap4_v
; Line 852
	mov	ecx, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [ecx+72], 1
	jl	SHORT $LN42@tt_cmap4_v
; Line 853
	push	OFFSET $SG10085
	push	853					; 00000355H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN42@tt_cmap4_v:
; Line 855
	mov	eax, DWORD PTR _valid$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	sub	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
$LN43@tt_cmap4_v:
; Line 858
	cmp	DWORD PTR _length$[ebp], 16		; 00000010H
	jae	SHORT $LN41@tt_cmap4_v
; Line 859
	push	OFFSET $SG10088
	push	859					; 0000035bH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN41@tt_cmap4_v:
; Line 861
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 6
	mov	DWORD PTR _p$[ebp], eax
; Line 862
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _num_segs$[ebp], ecx
; Line 864
	mov	edx, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [edx+72], 2
	jl	SHORT $LN40@tt_cmap4_v
; Line 867
	mov	eax, DWORD PTR _num_segs$[ebp]
	and	eax, 1
	je	SHORT $LN40@tt_cmap4_v
; Line 868
	push	OFFSET $SG10097
	push	868					; 00000364H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN40@tt_cmap4_v:
; Line 871
	mov	edx, DWORD PTR _num_segs$[ebp]
	shr	edx, 1
	mov	DWORD PTR _num_segs$[ebp], edx
; Line 873
	mov	eax, DWORD PTR _num_segs$[ebp]
	shl	eax, 1
	lea	ecx, DWORD PTR [eax*4+16]
	cmp	DWORD PTR _length$[ebp], ecx
	jae	SHORT $LN38@tt_cmap4_v
; Line 874
	push	OFFSET $SG10099
	push	874					; 0000036aH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN38@tt_cmap4_v:
; Line 878
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 2
	jl	$LN37@tt_cmap4_v
; Line 881
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _search_range$16[ebp], ecx
; Line 882
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _entry_selector$15[ebp], edx
; Line 883
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _range_shift$14[ebp], eax
; Line 886
	mov	ecx, DWORD PTR _search_range$16[ebp]
	or	ecx, DWORD PTR _range_shift$14[ebp]
	and	ecx, 1
	je	SHORT $LN36@tt_cmap4_v
; Line 887
	push	OFFSET $SG10123
	push	887					; 00000377H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN36@tt_cmap4_v:
; Line 889
	mov	eax, DWORD PTR _search_range$16[ebp]
	shr	eax, 1
	mov	DWORD PTR _search_range$16[ebp], eax
; Line 890
	mov	ecx, DWORD PTR _range_shift$14[ebp]
	shr	ecx, 1
	mov	DWORD PTR _range_shift$14[ebp], ecx
; Line 897
	mov	edx, DWORD PTR _search_range$16[ebp]
	cmp	edx, DWORD PTR _num_segs$[ebp]
	ja	SHORT $LN34@tt_cmap4_v
	mov	eax, DWORD PTR _search_range$16[ebp]
	shl	eax, 1
	cmp	eax, DWORD PTR _num_segs$[ebp]
	jb	SHORT $LN34@tt_cmap4_v
	mov	ecx, DWORD PTR _search_range$16[ebp]
	add	ecx, DWORD PTR _range_shift$14[ebp]
	cmp	ecx, DWORD PTR _num_segs$[ebp]
	jne	SHORT $LN34@tt_cmap4_v
	mov	edx, 1
	mov	ecx, DWORD PTR _entry_selector$15[ebp]
	shl	edx, cl
	cmp	DWORD PTR _search_range$16[ebp], edx
	je	SHORT $LN37@tt_cmap4_v
$LN34@tt_cmap4_v:
; Line 898
	push	OFFSET $SG10126
	push	898					; 00000382H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN37@tt_cmap4_v:
; Line 901
	mov	ecx, DWORD PTR _table$[ebp]
	add	ecx, 14					; 0000000eH
	mov	DWORD PTR _ends$[ebp], ecx
; Line 902
	mov	edx, DWORD PTR _num_segs$[ebp]
	mov	eax, DWORD PTR _table$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+16]
	mov	DWORD PTR _starts$[ebp], ecx
; Line 903
	mov	edx, DWORD PTR _num_segs$[ebp]
	mov	eax, DWORD PTR _starts$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _deltas$[ebp], ecx
; Line 904
	mov	edx, DWORD PTR _num_segs$[ebp]
	mov	eax, DWORD PTR _deltas$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 905
	mov	edx, DWORD PTR _num_segs$[ebp]
	mov	eax, DWORD PTR _offsets$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _glyph_ids$[ebp], ecx
; Line 908
	mov	edx, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [edx+72], 2
	jl	SHORT $LN33@tt_cmap4_v
; Line 910
	mov	eax, DWORD PTR _num_segs$[ebp]
	mov	ecx, DWORD PTR _ends$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	DWORD PTR _p$[ebp], edx
; Line 911
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	cmp	edx, 65535				; 0000ffffH
	je	SHORT $LN33@tt_cmap4_v
; Line 912
	push	OFFSET $SG10134
	push	912					; 00000390H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN33@tt_cmap4_v:
; Line 917
	mov	DWORD PTR _last_start$9[ebp], 0
	mov	DWORD PTR _last_end$8[ebp], 0
; Line 919
	mov	ecx, DWORD PTR _starts$[ebp]
	mov	DWORD PTR _p_start$6[ebp], ecx
; Line 920
	mov	edx, DWORD PTR _ends$[ebp]
	mov	DWORD PTR _p_end$5[ebp], edx
; Line 921
	mov	eax, DWORD PTR _deltas$[ebp]
	mov	DWORD PTR _p_delta$4[ebp], eax
; Line 922
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR _p_offset$3[ebp], ecx
; Line 925
	mov	DWORD PTR _n$10[ebp], 0
	jmp	SHORT $LN31@tt_cmap4_v
$LN30@tt_cmap4_v:
	mov	edx, DWORD PTR _n$10[ebp]
	add	edx, 1
	mov	DWORD PTR _n$10[ebp], edx
$LN31@tt_cmap4_v:
	mov	eax, DWORD PTR _n$10[ebp]
	cmp	eax, DWORD PTR _num_segs$[ebp]
	jae	$LN29@tt_cmap4_v
; Line 927
	mov	ecx, DWORD PTR _p_offset$3[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 928
	mov	edx, DWORD PTR _p_start$6[ebp]
	add	edx, 2
	mov	DWORD PTR _p_start$6[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p_start$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p_start$6[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _start$13[ebp], edx
; Line 929
	mov	eax, DWORD PTR _p_end$5[ebp]
	add	eax, 2
	mov	DWORD PTR _p_end$5[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p_end$5[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p_end$5[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _end$12[ebp], eax
; Line 930
	mov	ecx, DWORD PTR _p_delta$4[ebp]
	add	ecx, 2
	mov	DWORD PTR _p_delta$4[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p_delta$4[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p_delta$4[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	mov	DWORD PTR _delta$7[ebp], ecx
; Line 931
	mov	edx, DWORD PTR _p_offset$3[ebp]
	add	edx, 2
	mov	DWORD PTR _p_offset$3[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p_offset$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p_offset$3[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _offset$11[ebp], edx
; Line 933
	mov	eax, DWORD PTR _start$13[ebp]
	cmp	eax, DWORD PTR _end$12[ebp]
	jbe	SHORT $LN28@tt_cmap4_v
; Line 934
	push	OFFSET $SG10174
	push	934					; 000003a6H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN28@tt_cmap4_v:
; Line 940
	mov	edx, DWORD PTR _start$13[ebp]
	cmp	edx, DWORD PTR _last_end$8[ebp]
	ja	SHORT $LN27@tt_cmap4_v
	cmp	DWORD PTR _n$10[ebp], 0
	jbe	SHORT $LN27@tt_cmap4_v
; Line 942
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 1
	jl	SHORT $LN26@tt_cmap4_v
; Line 943
	push	OFFSET $SG10177
	push	943					; 000003afH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
; Line 944
	jmp	SHORT $LN27@tt_cmap4_v
$LN26@tt_cmap4_v:
; Line 949
	mov	edx, DWORD PTR _last_start$9[ebp]
	cmp	edx, DWORD PTR _start$13[ebp]
	ja	SHORT $LN23@tt_cmap4_v
	mov	eax, DWORD PTR _last_end$8[ebp]
	cmp	eax, DWORD PTR _end$12[ebp]
	jbe	SHORT $LN24@tt_cmap4_v
$LN23@tt_cmap4_v:
; Line 950
	mov	ecx, DWORD PTR _error$[ebp]
	or	ecx, 1
	mov	DWORD PTR _error$[ebp], ecx
; Line 951
	jmp	SHORT $LN27@tt_cmap4_v
$LN24@tt_cmap4_v:
; Line 952
	mov	edx, DWORD PTR _error$[ebp]
	or	edx, 2
	mov	DWORD PTR _error$[ebp], edx
$LN27@tt_cmap4_v:
; Line 956
	cmp	DWORD PTR _offset$11[ebp], 0
	je	$LN21@tt_cmap4_v
	cmp	DWORD PTR _offset$11[ebp], 65535	; 0000ffffH
	je	$LN21@tt_cmap4_v
; Line 958
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _offset$11[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 961
	mov	ecx, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [ecx+72], 1
	jl	SHORT $LN20@tt_cmap4_v
; Line 964
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _glyph_ids$[ebp]
	jb	SHORT $LN18@tt_cmap4_v
	mov	eax, DWORD PTR _end$12[ebp]
	sub	eax, DWORD PTR _start$13[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+2]
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	cmp	edx, eax
	jbe	SHORT $LN19@tt_cmap4_v
$LN18@tt_cmap4_v:
; Line 965
	push	OFFSET $SG10186
	push	965					; 000003c5H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN19@tt_cmap4_v:
; Line 977
	jmp	SHORT $LN17@tt_cmap4_v
$LN20@tt_cmap4_v:
; Line 978
	mov	edx, DWORD PTR _num_segs$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _n$10[ebp], edx
	jne	SHORT $LN15@tt_cmap4_v
	cmp	DWORD PTR _start$13[ebp], 65535		; 0000ffffH
	jne	SHORT $LN15@tt_cmap4_v
	cmp	DWORD PTR _end$12[ebp], 65535		; 0000ffffH
	je	SHORT $LN17@tt_cmap4_v
$LN15@tt_cmap4_v:
; Line 981
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _glyph_ids$[ebp]
	jb	SHORT $LN12@tt_cmap4_v
	mov	ecx, DWORD PTR _end$12[ebp]
	sub	ecx, DWORD PTR _start$13[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+2]
	mov	ecx, DWORD PTR _valid$[ebp]
	cmp	eax, DWORD PTR [ecx+68]
	jbe	SHORT $LN17@tt_cmap4_v
$LN12@tt_cmap4_v:
; Line 982
	push	OFFSET $SG10193
	push	982					; 000003d6H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN17@tt_cmap4_v:
; Line 986
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 1
	jl	$LN11@tt_cmap4_v
; Line 991
	mov	ecx, DWORD PTR _start$13[ebp]
	mov	DWORD PTR _i$2[ebp], ecx
	jmp	SHORT $LN10@tt_cmap4_v
$LN9@tt_cmap4_v:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN10@tt_cmap4_v:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _end$12[ebp]
	jae	SHORT $LN11@tt_cmap4_v
; Line 993
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _idx$1[ebp], ecx
; Line 994
	cmp	DWORD PTR _idx$1[ebp], 0
	je	SHORT $LN7@tt_cmap4_v
; Line 996
	mov	edx, DWORD PTR _idx$1[ebp]
	add	edx, DWORD PTR _delta$7[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _idx$1[ebp], edx
; Line 998
	mov	eax, DWORD PTR _valid$[ebp]
	mov	ecx, DWORD PTR _idx$1[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	jb	SHORT $LN7@tt_cmap4_v
; Line 999
	push	OFFSET $SG10210
	push	999					; 000003e7H
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN7@tt_cmap4_v:
; Line 1001
	jmp	$LN9@tt_cmap4_v
$LN11@tt_cmap4_v:
; Line 1002
	jmp	SHORT $LN5@tt_cmap4_v
$LN21@tt_cmap4_v:
; Line 1004
	cmp	DWORD PTR _offset$11[ebp], 65535	; 0000ffffH
	jne	SHORT $LN5@tt_cmap4_v
; Line 1011
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 2
	jge	SHORT $LN2@tt_cmap4_v
	mov	ecx, DWORD PTR _num_segs$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _n$10[ebp], ecx
	jne	SHORT $LN2@tt_cmap4_v
	cmp	DWORD PTR _start$13[ebp], 65535		; 0000ffffH
	jne	SHORT $LN2@tt_cmap4_v
	cmp	DWORD PTR _end$12[ebp], 65535		; 0000ffffH
	je	SHORT $LN5@tt_cmap4_v
$LN2@tt_cmap4_v:
; Line 1012
	push	OFFSET $SG10216
	push	1012					; 000003f4H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN5@tt_cmap4_v:
; Line 1015
	mov	eax, DWORD PTR _start$13[ebp]
	mov	DWORD PTR _last_start$9[ebp], eax
; Line 1016
	mov	ecx, DWORD PTR _end$12[ebp]
	mov	DWORD PTR _last_end$8[ebp], ecx
; Line 1017
	jmp	$LN30@tt_cmap4_v
$LN29@tt_cmap4_v:
; Line 1020
	mov	eax, DWORD PTR _error$[ebp]
; Line 1021
	pop	edi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap4_validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gindex$1 = -28						; size = 4
_gindex$2 = -24						; size = 4
_p$3 = -20						; size = 4
_delta$4 = -16						; size = 4
_end$5 = -12						; size = 4
_values$6 = -8						; size = 4
_charcode$ = -4						; size = 4
_cmap$ = 8						; size = 4
_tt_cmap4_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 756
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 760
	mov	eax, DWORD PTR _cmap$[ebp]
	cmp	DWORD PTR [eax+24], 65535		; 0000ffffH
	jb	SHORT $LN18@tt_cmap4_n
; Line 761
	jmp	$Fail$21
$LN18@tt_cmap4_n:
; Line 763
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 1
	mov	DWORD PTR _charcode$[ebp], edx
; Line 765
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _charcode$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	SHORT $LN16@tt_cmap4_n
; Line 766
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _charcode$[ebp], eax
$LN16@tt_cmap4_n:
; Line 770
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _values$6[ebp], edx
; Line 771
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _end$5[ebp], ecx
; Line 772
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _delta$4[ebp], eax
; Line 775
	mov	ecx, DWORD PTR _charcode$[ebp]
	cmp	ecx, DWORD PTR _end$5[ebp]
	ja	$LN14@tt_cmap4_n
; Line 777
	cmp	DWORD PTR _values$6[ebp], 0
	je	$LN6@tt_cmap4_n
; Line 779
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _charcode$[ebp]
	sub	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _values$6[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _p$3[ebp], edx
$LN12@tt_cmap4_n:
; Line 784
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 2
	mov	DWORD PTR _p$3[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _gindex$2[ebp], eax
; Line 787
	cmp	DWORD PTR _gindex$2[ebp], 0
	je	SHORT $LN11@tt_cmap4_n
; Line 789
	mov	ecx, DWORD PTR _gindex$2[ebp]
	add	ecx, DWORD PTR _delta$4[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _gindex$2[ebp], ecx
; Line 790
	je	SHORT $LN11@tt_cmap4_n
; Line 792
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _charcode$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 793
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _gindex$2[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 794
	jmp	$LN19@tt_cmap4_n
$LN11@tt_cmap4_n:
; Line 797
	mov	eax, DWORD PTR _charcode$[ebp]
	add	eax, 1
	mov	DWORD PTR _charcode$[ebp], eax
	mov	ecx, DWORD PTR _charcode$[ebp]
	cmp	ecx, DWORD PTR _end$5[ebp]
	jbe	SHORT $LN12@tt_cmap4_n
; Line 799
	jmp	SHORT $LN14@tt_cmap4_n
$LN6@tt_cmap4_n:
; Line 803
	mov	edx, DWORD PTR _charcode$[ebp]
	add	edx, DWORD PTR _delta$4[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _gindex$1[ebp], edx
; Line 806
	je	SHORT $LN5@tt_cmap4_n
; Line 808
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _charcode$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 809
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _gindex$1[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 810
	jmp	SHORT $LN19@tt_cmap4_n
$LN5@tt_cmap4_n:
; Line 812
	mov	ecx, DWORD PTR _charcode$[ebp]
	add	ecx, 1
	mov	DWORD PTR _charcode$[ebp], ecx
	mov	edx, DWORD PTR _charcode$[ebp]
	cmp	edx, DWORD PTR _end$5[ebp]
	jbe	SHORT $LN6@tt_cmap4_n
$LN14@tt_cmap4_n:
; Line 817
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cmap$[ebp]
	push	edx
	call	_tt_cmap4_set_range
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN2@tt_cmap4_n
; Line 818
	jmp	SHORT $Fail$21
$LN2@tt_cmap4_n:
; Line 820
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _charcode$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	SHORT $LN1@tt_cmap4_n
; Line 821
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _charcode$[ebp], eax
$LN1@tt_cmap4_n:
; Line 822
	jmp	$LN16@tt_cmap4_n
$Fail$21:
; Line 825
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+24], -1
; Line 826
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [edx+28], 0
$LN19@tt_cmap4_n:
; Line 827
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap4_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv171 = -28						; size = 4
_limit$1 = -24						; size = 4
_face$2 = -20						; size = 4
_offset$3 = -16						; size = 4
_num_ranges$ = -12					; size = 4
_p$ = -8						; size = 4
_table$ = -4						; size = 4
_cmap$ = 8						; size = 4
_range_index$ = 12					; size = 4
_tt_cmap4_set_range PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 695
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 696
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _table$[ebp], ecx
; Line 698
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _num_ranges$[ebp], eax
$LN5@tt_cmap4_s:
; Line 701
	mov	ecx, DWORD PTR _range_index$[ebp]
	cmp	ecx, DWORD PTR _num_ranges$[ebp]
	jae	$LN4@tt_cmap4_s
; Line 706
	mov	edx, DWORD PTR _range_index$[ebp]
	mov	eax, DWORD PTR _table$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+14]
	mov	DWORD PTR _p$[ebp], ecx
; Line 707
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 709
	mov	eax, DWORD PTR _num_ranges$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+2]
	mov	DWORD PTR _p$[ebp], edx
; Line 710
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 712
	mov	ecx, DWORD PTR _num_ranges$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _p$[ebp], eax
; Line 713
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movsx	eax, cx
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 715
	mov	edx, DWORD PTR _num_ranges$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _p$[ebp], ecx
; Line 716
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _offset$3[ebp], ecx
; Line 722
	mov	edx, DWORD PTR _num_ranges$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _range_index$[ebp], edx
	jb	SHORT $LN3@tt_cmap4_s
	mov	eax, DWORD PTR _cmap$[ebp]
	cmp	DWORD PTR [eax+40], 65535		; 0000ffffH
	jne	SHORT $LN3@tt_cmap4_s
	mov	ecx, DWORD PTR _cmap$[ebp]
	cmp	DWORD PTR [ecx+44], 65535		; 0000ffffH
	jne	SHORT $LN3@tt_cmap4_s
; Line 724
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _face$2[ebp], eax
; Line 725
	mov	ecx, DWORD PTR _face$2[ebp]
	mov	edx, DWORD PTR [ecx+500]
	mov	eax, DWORD PTR _face$2[ebp]
	add	edx, DWORD PTR [eax+504]
	mov	DWORD PTR _limit$1[ebp], edx
; Line 728
	cmp	DWORD PTR _offset$3[ebp], 0
	je	SHORT $LN3@tt_cmap4_s
	mov	ecx, DWORD PTR _offset$3[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+2]
	cmp	eax, DWORD PTR _limit$1[ebp]
	jbe	SHORT $LN3@tt_cmap4_s
; Line 730
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+48], 1
; Line 731
	mov	DWORD PTR _offset$3[ebp], 0
$LN3@tt_cmap4_s:
; Line 735
	cmp	DWORD PTR _offset$3[ebp], 65535		; 0000ffffH
	je	SHORT $LN1@tt_cmap4_s
; Line 737
	cmp	DWORD PTR _offset$3[ebp], 0
	je	SHORT $LN8@tt_cmap4_s
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _offset$3[ebp]
	mov	DWORD PTR tv171[ebp], edx
	jmp	SHORT $LN9@tt_cmap4_s
$LN8@tt_cmap4_s:
	mov	DWORD PTR tv171[ebp], 0
$LN9@tt_cmap4_s:
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR tv171[ebp]
	mov	DWORD PTR [eax+52], ecx
; Line 738
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _range_index$[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 739
	xor	eax, eax
	jmp	SHORT $LN6@tt_cmap4_s
$LN1@tt_cmap4_s:
; Line 743
	mov	ecx, DWORD PTR _range_index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _range_index$[ebp], ecx
; Line 744
	jmp	$LN5@tt_cmap4_s
$LN4@tt_cmap4_s:
; Line 746
	or	eax, -1
$LN6@tt_cmap4_s:
; Line 747
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap4_set_range ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_table$ = 12						; size = 4
_tt_cmap4_init PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 677
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 681
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 683
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 6
	mov	DWORD PTR _p$[ebp], edx
; Line 684
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	sar	edx, 1
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 685
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+24], -1
; Line 686
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 688
	xor	eax, eax
; Line 689
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap4_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_cmap_info$ = 12					; size = 4
_tt_cmap2_get_info PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 553
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 556
	mov	edx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [edx+4], 2
; Line 557
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	eax, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [eax], edx
; Line 559
	xor	eax, eax
; Line 560
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap2_get_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$1 = -52						; size = 4
_pos$2 = -48						; size = 4
_char_lo$3 = -44					; size = 4
_offset$4 = -40						; size = 4
_delta$5 = -36						; size = 4
_count$6 = -32						; size = 4
_start$7 = -28						; size = 4
_p$8 = -24						; size = 4
_subheader$ = -20					; size = 4
_charcode$ = -16					; size = 4
_result$ = -12						; size = 4
_gindex$ = -8						; size = 4
_table$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pcharcode$ = 12					; size = 4
_tt_cmap2_char_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 485
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 486
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _table$[ebp], ecx
; Line 487
	mov	DWORD PTR _gindex$[ebp], 0
; Line 488
	mov	DWORD PTR _result$[ebp], 0
; Line 489
	mov	edx, DWORD PTR _pcharcode$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	DWORD PTR _charcode$[ebp], eax
$LN11@tt_cmap2_c:
; Line 493
	cmp	DWORD PTR _charcode$[ebp], 65536	; 00010000H
	jae	$Exit$14
; Line 495
	mov	ecx, DWORD PTR _charcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_tt_cmap2_get_subheader
	add	esp, 8
	mov	DWORD PTR _subheader$[ebp], eax
; Line 496
	cmp	DWORD PTR _subheader$[ebp], 0
	je	$Next_SubHeader$15
; Line 498
	mov	eax, DWORD PTR _subheader$[ebp]
	mov	DWORD PTR _p$8[ebp], eax
; Line 499
	mov	ecx, DWORD PTR _p$8[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$8[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$8[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$8[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _start$7[ebp], ecx
; Line 500
	mov	edx, DWORD PTR _p$8[ebp]
	add	edx, 2
	mov	DWORD PTR _p$8[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$8[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$8[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _count$6[ebp], edx
; Line 501
	mov	eax, DWORD PTR _p$8[ebp]
	add	eax, 2
	mov	DWORD PTR _p$8[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$8[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$8[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	DWORD PTR _delta$5[ebp], eax
; Line 502
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$8[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$8[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _offset$4[ebp], eax
; Line 503
	mov	ecx, DWORD PTR _charcode$[ebp]
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR _char_lo$3[ebp], ecx
; Line 507
	cmp	DWORD PTR _offset$4[ebp], 0
	jne	SHORT $LN8@tt_cmap2_c
; Line 508
	jmp	$Next_SubHeader$15
$LN8@tt_cmap2_c:
; Line 510
	mov	edx, DWORD PTR _char_lo$3[ebp]
	cmp	edx, DWORD PTR _start$7[ebp]
	jae	SHORT $LN7@tt_cmap2_c
; Line 512
	mov	eax, DWORD PTR _start$7[ebp]
	mov	DWORD PTR _char_lo$3[ebp], eax
; Line 513
	mov	DWORD PTR _pos$2[ebp], 0
; Line 515
	jmp	SHORT $LN6@tt_cmap2_c
$LN7@tt_cmap2_c:
; Line 516
	mov	ecx, DWORD PTR _char_lo$3[ebp]
	sub	ecx, DWORD PTR _start$7[ebp]
	mov	DWORD PTR _pos$2[ebp], ecx
$LN6@tt_cmap2_c:
; Line 518
	mov	edx, DWORD PTR _pos$2[ebp]
	mov	eax, DWORD PTR _offset$4[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	add	ecx, DWORD PTR _p$8[ebp]
	mov	DWORD PTR _p$8[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _charcode$[ebp]
	and	edx, -256				; ffffff00H
	add	edx, DWORD PTR _char_lo$3[ebp]
	mov	DWORD PTR _charcode$[ebp], edx
; Line 521
	jmp	SHORT $LN5@tt_cmap2_c
$LN4@tt_cmap2_c:
	mov	eax, DWORD PTR _pos$2[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$2[ebp], eax
	mov	ecx, DWORD PTR _charcode$[ebp]
	add	ecx, 1
	mov	DWORD PTR _charcode$[ebp], ecx
$LN5@tt_cmap2_c:
	mov	edx, DWORD PTR _pos$2[ebp]
	cmp	edx, DWORD PTR _count$6[ebp]
	jae	SHORT $Next_SubHeader$15
; Line 523
	mov	eax, DWORD PTR _p$8[ebp]
	add	eax, 2
	mov	DWORD PTR _p$8[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$8[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$8[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _idx$1[ebp], eax
; Line 525
	cmp	DWORD PTR _idx$1[ebp], 0
	je	SHORT $LN2@tt_cmap2_c
; Line 527
	mov	ecx, DWORD PTR _idx$1[ebp]
	add	ecx, DWORD PTR _delta$5[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _gindex$[ebp], ecx
; Line 528
	je	SHORT $LN2@tt_cmap2_c
; Line 530
	mov	edx, DWORD PTR _charcode$[ebp]
	mov	DWORD PTR _result$[ebp], edx
; Line 531
	jmp	SHORT $Exit$14
$LN2@tt_cmap2_c:
; Line 534
	jmp	SHORT $LN4@tt_cmap2_c
$Next_SubHeader$15:
; Line 539
	mov	eax, DWORD PTR _charcode$[ebp]
	and	eax, -256				; ffffff00H
	add	eax, 256				; 00000100H
	mov	DWORD PTR _charcode$[ebp], eax
; Line 540
	jmp	$LN11@tt_cmap2_c
$Exit$14:
; Line 543
	mov	ecx, DWORD PTR _pcharcode$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 545
	mov	eax, DWORD PTR _gindex$[ebp]
; Line 546
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap2_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_offset$1 = -36						; size = 4
_delta$2 = -32						; size = 4
_count$3 = -28						; size = 4
_start$4 = -24						; size = 4
_idx$5 = -20						; size = 4
_p$6 = -16						; size = 4
_subheader$ = -12					; size = 4
_result$ = -8						; size = 4
_table$ = -4						; size = 4
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap2_char_index PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 447
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 448
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _table$[ebp], ecx
; Line 449
	mov	DWORD PTR _result$[ebp], 0
; Line 453
	mov	edx, DWORD PTR _char_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_tt_cmap2_get_subheader
	add	esp, 8
	mov	DWORD PTR _subheader$[ebp], eax
; Line 454
	cmp	DWORD PTR _subheader$[ebp], 0
	je	$LN3@tt_cmap2_c
; Line 456
	mov	ecx, DWORD PTR _subheader$[ebp]
	mov	DWORD PTR _p$6[ebp], ecx
; Line 457
	mov	edx, DWORD PTR _char_code$[ebp]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR _idx$5[ebp], edx
; Line 463
	mov	eax, DWORD PTR _p$6[ebp]
	add	eax, 2
	mov	DWORD PTR _p$6[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$6[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$6[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _start$4[ebp], eax
; Line 464
	mov	ecx, DWORD PTR _p$6[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$6[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$6[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$6[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _count$3[ebp], ecx
; Line 465
	mov	edx, DWORD PTR _p$6[ebp]
	add	edx, 2
	mov	DWORD PTR _p$6[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$6[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	mov	DWORD PTR _delta$2[ebp], edx
; Line 466
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$6[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _offset$1[ebp], edx
; Line 468
	mov	eax, DWORD PTR _idx$5[ebp]
	sub	eax, DWORD PTR _start$4[ebp]
	mov	DWORD PTR _idx$5[ebp], eax
; Line 469
	mov	ecx, DWORD PTR _idx$5[ebp]
	cmp	ecx, DWORD PTR _count$3[ebp]
	jae	SHORT $LN3@tt_cmap2_c
	cmp	DWORD PTR _offset$1[ebp], 0
	je	SHORT $LN3@tt_cmap2_c
; Line 471
	mov	edx, DWORD PTR _idx$5[ebp]
	mov	eax, DWORD PTR _offset$1[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	add	ecx, DWORD PTR _p$6[ebp]
	mov	DWORD PTR _p$6[ebp], ecx
; Line 472
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$6[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$6[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _idx$5[ebp], ecx
; Line 474
	cmp	DWORD PTR _idx$5[ebp], 0
	je	SHORT $LN3@tt_cmap2_c
; Line 475
	mov	edx, DWORD PTR _idx$5[ebp]
	add	edx, DWORD PTR _delta$2[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _result$[ebp], edx
$LN3@tt_cmap2_c:
; Line 478
	mov	eax, DWORD PTR _result$[ebp]
; Line 479
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap2_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sub$1 = -24						; size = 4
_subs$2 = -20						; size = 4
_p$3 = -16						; size = 4
_char_hi$4 = -12					; size = 4
_char_lo$5 = -8						; size = 4
_result$ = -4						; size = 4
_table$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap2_get_subheader PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 396
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 397
	mov	DWORD PTR _result$[ebp], 0
; Line 400
	cmp	DWORD PTR _char_code$[ebp], 65536	; 00010000H
	jae	$Exit$8
; Line 402
	mov	eax, DWORD PTR _char_code$[ebp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _char_lo$5[ebp], eax
; Line 403
	mov	ecx, DWORD PTR _char_code$[ebp]
	shr	ecx, 8
	mov	DWORD PTR _char_hi$4[ebp], ecx
; Line 404
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 6
	mov	DWORD PTR _p$3[ebp], edx
; Line 405
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 518				; 00000206H
	mov	DWORD PTR _subs$2[ebp], eax
; Line 409
	cmp	DWORD PTR _char_hi$4[ebp], 0
	jne	SHORT $LN4@tt_cmap2_g
; Line 414
	mov	ecx, DWORD PTR _subs$2[ebp]
	mov	DWORD PTR _sub$1[ebp], ecx
; Line 420
	mov	edx, DWORD PTR _char_lo$5[ebp]
	mov	eax, DWORD PTR _p$3[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _p$3[ebp], ecx
; Line 421
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	test	ecx, ecx
	je	SHORT $LN3@tt_cmap2_g
; Line 422
	jmp	SHORT $Exit$8
$LN3@tt_cmap2_g:
; Line 424
	jmp	SHORT $LN2@tt_cmap2_g
$LN4@tt_cmap2_g:
; Line 429
	mov	edx, DWORD PTR _char_hi$4[ebp]
	mov	eax, DWORD PTR _p$3[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _p$3[ebp], ecx
; Line 431
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movzx	ecx, dx
	and	ecx, -8					; fffffff8H
	add	ecx, DWORD PTR _subs$2[ebp]
	mov	DWORD PTR _sub$1[ebp], ecx
; Line 434
	mov	edx, DWORD PTR _sub$1[ebp]
	cmp	edx, DWORD PTR _subs$2[ebp]
	jne	SHORT $LN2@tt_cmap2_g
; Line 435
	jmp	SHORT $Exit$8
$LN2@tt_cmap2_g:
; Line 437
	mov	eax, DWORD PTR _sub$1[ebp]
	mov	DWORD PTR _result$[ebp], eax
$Exit$8:
; Line 440
	mov	eax, DWORD PTR _result$[ebp]
; Line 441
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap2_get_subheader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$1 = -60						; size = 4
_limit$2 = -56						; size = 4
_ids$3 = -52						; size = 4
_delta$4 = -48						; size = 4
_offset$5 = -44						; size = 4
_code_count$6 = -40					; size = 4
_first_code$7 = -36					; size = 4
_idx$8 = -32						; size = 4
_glyph_ids$ = -28					; size = 4
_subs$ = -24						; size = 4
_keys$ = -20						; size = 4
_max_subs$ = -16					; size = 4
_n$ = -12						; size = 4
_length$ = -8						; size = 4
_p$ = -4						; size = 4
_table$ = 8						; size = 4
_valid$ = 12						; size = 4
_tt_cmap2_validate PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 287
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 297
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _valid$[ebp]
	cmp	eax, DWORD PTR [ecx+68]
	jbe	SHORT $LN28@tt_cmap2_v
; Line 298
	push	OFFSET $SG9696
	push	298					; 0000012aH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN28@tt_cmap2_v:
; Line 300
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 301
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _length$[ebp], ecx
; Line 303
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	edx, DWORD PTR [eax+68]
	ja	SHORT $LN26@tt_cmap2_v
	cmp	DWORD PTR _length$[ebp], 518		; 00000206H
	jae	SHORT $LN27@tt_cmap2_v
$LN26@tt_cmap2_v:
; Line 304
	push	OFFSET $SG9705
	push	304					; 00000130H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN27@tt_cmap2_v:
; Line 306
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, 6
	mov	DWORD PTR _keys$[ebp], edx
; Line 309
	mov	eax, DWORD PTR _keys$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 310
	mov	DWORD PTR _max_subs$[ebp], 0
; Line 311
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN25@tt_cmap2_v
$LN24@tt_cmap2_v:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN25@tt_cmap2_v:
	cmp	DWORD PTR _n$[ebp], 256			; 00000100H
	jae	$LN20@tt_cmap2_v
; Line 313
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _idx$8[ebp], edx
; Line 317
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 2
	jl	SHORT $LN22@tt_cmap2_v
	mov	ecx, DWORD PTR _idx$8[ebp]
	and	ecx, 7
	je	SHORT $LN22@tt_cmap2_v
; Line 318
	push	OFFSET $SG9717
	push	318					; 0000013eH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN22@tt_cmap2_v:
; Line 320
	mov	eax, DWORD PTR _idx$8[ebp]
	shr	eax, 3
	mov	DWORD PTR _idx$8[ebp], eax
; Line 322
	mov	ecx, DWORD PTR _idx$8[ebp]
	cmp	ecx, DWORD PTR _max_subs$[ebp]
	jbe	SHORT $LN21@tt_cmap2_v
; Line 323
	mov	edx, DWORD PTR _idx$8[ebp]
	mov	DWORD PTR _max_subs$[ebp], edx
$LN21@tt_cmap2_v:
; Line 324
	jmp	$LN24@tt_cmap2_v
$LN20@tt_cmap2_v:
; Line 326
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 518				; 00000206H
	cmp	DWORD PTR _p$[ebp], eax
	je	SHORT $LN19@tt_cmap2_v
	push	OFFSET $SG9723
	push	326					; 00000146H
	push	OFFSET $SG9724
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN19@tt_cmap2_v:
	xor	ecx, ecx
	jne	SHORT $LN20@tt_cmap2_v
; Line 328
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _subs$[ebp], edx
; Line 329
	mov	eax, DWORD PTR _max_subs$[ebp]
	mov	ecx, DWORD PTR _subs$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+8]
	mov	DWORD PTR _glyph_ids$[ebp], edx
; Line 330
	mov	eax, DWORD PTR _valid$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	cmp	DWORD PTR _glyph_ids$[ebp], ecx
	jbe	SHORT $LN16@tt_cmap2_v
; Line 331
	push	OFFSET $SG9726
	push	331					; 0000014bH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN16@tt_cmap2_v:
; Line 334
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN15@tt_cmap2_v
$LN14@tt_cmap2_v:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN15@tt_cmap2_v:
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _max_subs$[ebp]
	ja	$LN13@tt_cmap2_v
; Line 340
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _first_code$7[ebp], edx
; Line 341
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _code_count$6[ebp], eax
; Line 342
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	mov	DWORD PTR _delta$4[ebp], ecx
; Line 343
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _offset$5[ebp], edx
; Line 346
	cmp	DWORD PTR _code_count$6[ebp], 0
	jne	SHORT $LN12@tt_cmap2_v
; Line 347
	jmp	$LN14@tt_cmap2_v
$LN12@tt_cmap2_v:
; Line 350
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 2
	jl	SHORT $LN11@tt_cmap2_v
; Line 352
	cmp	DWORD PTR _first_code$7[ebp], 256	; 00000100H
	jae	SHORT $LN9@tt_cmap2_v
	mov	ecx, DWORD PTR _first_code$7[ebp]
	add	ecx, DWORD PTR _code_count$6[ebp]
	cmp	ecx, 256				; 00000100H
	jbe	SHORT $LN11@tt_cmap2_v
$LN9@tt_cmap2_v:
; Line 353
	push	OFFSET $SG9762
	push	353					; 00000161H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN11@tt_cmap2_v:
; Line 357
	cmp	DWORD PTR _offset$5[ebp], 0
	je	$LN8@tt_cmap2_v
; Line 362
	mov	eax, DWORD PTR _offset$5[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax-2]
	mov	DWORD PTR _ids$3[ebp], edx
; Line 363
	mov	eax, DWORD PTR _ids$3[ebp]
	cmp	eax, DWORD PTR _glyph_ids$[ebp]
	jb	SHORT $LN6@tt_cmap2_v
	mov	ecx, DWORD PTR _code_count$6[ebp]
	mov	edx, DWORD PTR _ids$3[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _table$[ebp]
	add	ecx, DWORD PTR _length$[ebp]
	cmp	eax, ecx
	jbe	SHORT $LN7@tt_cmap2_v
$LN6@tt_cmap2_v:
; Line 364
	push	OFFSET $SG9767
	push	364					; 0000016cH
	push	9
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 9
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN7@tt_cmap2_v:
; Line 367
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [eax+72], 1
	jl	$LN8@tt_cmap2_v
; Line 369
	mov	ecx, DWORD PTR _code_count$6[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _limit$2[ebp], eax
$LN4@tt_cmap2_v:
; Line 373
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$2[ebp]
	jae	SHORT $LN8@tt_cmap2_v
; Line 375
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _idx$1[ebp], edx
; Line 376
	cmp	DWORD PTR _idx$1[ebp], 0
	je	SHORT $LN2@tt_cmap2_v
; Line 378
	mov	eax, DWORD PTR _idx$1[ebp]
	add	eax, DWORD PTR _delta$4[ebp]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _idx$1[ebp], eax
; Line 379
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR _idx$1[ebp]
	cmp	edx, DWORD PTR [ecx+80]
	jb	SHORT $LN2@tt_cmap2_v
; Line 380
	push	OFFSET $SG9783
	push	380					; 0000017cH
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _valid$[ebp]
	push	eax
	call	_ft_validator_error
	add	esp, 8
$LN2@tt_cmap2_v:
; Line 382
	jmp	$LN4@tt_cmap2_v
$LN8@tt_cmap2_v:
; Line 385
	jmp	$LN14@tt_cmap2_v
$LN13@tt_cmap2_v:
; Line 387
	xor	eax, eax
; Line 388
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap2_validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_cmap$ = 8						; size = 4
_cmap_info$ = 12					; size = 4
_tt_cmap0_get_info PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 163
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 164
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 167
	mov	edx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 168
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movzx	edx, ax
	mov	eax, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [eax], edx
; Line 170
	xor	eax, eax
; Line 171
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap0_get_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gindex$ = -16						; size = 4
_result$ = -12						; size = 4
_charcode$ = -8						; size = 4
_table$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_tt_cmap0_char_next PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 138
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _table$[ebp], ecx
; Line 139
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _charcode$[ebp], eax
; Line 140
	mov	DWORD PTR _result$[ebp], 0
; Line 141
	mov	DWORD PTR _gindex$[ebp], 0
; Line 144
	mov	ecx, DWORD PTR _table$[ebp]
	add	ecx, 6
	mov	DWORD PTR _table$[ebp], ecx
$LN3@tt_cmap0_c:
; Line 145
	mov	edx, DWORD PTR _charcode$[ebp]
	add	edx, 1
	mov	DWORD PTR _charcode$[ebp], edx
	cmp	DWORD PTR _charcode$[ebp], 256		; 00000100H
	jae	SHORT $LN2@tt_cmap0_c
; Line 147
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, DWORD PTR _charcode$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _gindex$[ebp], ecx
; Line 148
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN1@tt_cmap0_c
; Line 150
	mov	edx, DWORD PTR _charcode$[ebp]
	mov	DWORD PTR _result$[ebp], edx
; Line 151
	jmp	SHORT $LN2@tt_cmap0_c
$LN1@tt_cmap0_c:
; Line 153
	jmp	SHORT $LN3@tt_cmap0_c
$LN2@tt_cmap0_c:
; Line 155
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 156
	mov	eax, DWORD PTR _gindex$[ebp]
; Line 157
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap0_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -8						; size = 4
_table$ = -4						; size = 4
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_tt_cmap0_char_index PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 126
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 127
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _table$[ebp], ecx
; Line 130
	cmp	DWORD PTR _char_code$[ebp], 256		; 00000100H
	jae	SHORT $LN3@tt_cmap0_c
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, DWORD PTR _char_code$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN4@tt_cmap0_c
$LN3@tt_cmap0_c:
	mov	DWORD PTR tv70[ebp], 0
$LN4@tt_cmap0_c:
	mov	eax, DWORD PTR tv70[ebp]
; Line 131
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap0_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$1 = -16						; size = 4
_n$2 = -12						; size = 4
_length$ = -8						; size = 4
_p$ = -4						; size = 4
_table$ = 8						; size = 4
_valid$ = 12						; size = 4
_tt_cmap0_validate PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 95
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _valid$[ebp]
	cmp	eax, DWORD PTR [ecx+68]
	jbe	SHORT $LN8@tt_cmap0_v
; Line 96
	push	OFFSET $SG9615
	push	96					; 00000060H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	edx, DWORD PTR _valid$[ebp]
	push	edx
	call	_ft_validator_error
	add	esp, 8
$LN8@tt_cmap0_v:
; Line 98
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 99
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _length$[ebp], ecx
; Line 101
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR _valid$[ebp]
	cmp	edx, DWORD PTR [eax+68]
	ja	SHORT $LN6@tt_cmap0_v
	cmp	DWORD PTR _length$[ebp], 262		; 00000106H
	jae	SHORT $LN7@tt_cmap0_v
$LN6@tt_cmap0_v:
; Line 102
	push	OFFSET $SG9624
	push	102					; 00000066H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN7@tt_cmap0_v:
; Line 105
	mov	edx, DWORD PTR _valid$[ebp]
	cmp	DWORD PTR [edx+72], 1
	jl	SHORT $LN5@tt_cmap0_v
; Line 110
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 6
	mov	DWORD PTR _p$[ebp], eax
; Line 111
	mov	DWORD PTR _n$2[ebp], 0
	jmp	SHORT $LN4@tt_cmap0_v
$LN3@tt_cmap0_v:
	mov	ecx, DWORD PTR _n$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$2[ebp], ecx
$LN4@tt_cmap0_v:
	cmp	DWORD PTR _n$2[ebp], 256		; 00000100H
	jae	SHORT $LN5@tt_cmap0_v
; Line 113
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _idx$1[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 114
	mov	edx, DWORD PTR _valid$[ebp]
	mov	eax, DWORD PTR _idx$1[ebp]
	cmp	eax, DWORD PTR [edx+80]
	jb	SHORT $LN1@tt_cmap0_v
; Line 115
	push	OFFSET $SG9633
	push	115					; 00000073H
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _valid$[ebp]
	push	ecx
	call	_ft_validator_error
	add	esp, 8
$LN1@tt_cmap0_v:
; Line 116
	jmp	SHORT $LN3@tt_cmap0_v
$LN5@tt_cmap0_v:
; Line 119
	xor	eax, eax
; Line 120
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_cmap0_validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_table$ = 12						; size = 4
_tt_cmap_init PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 57
	push	ebp
	mov	ebp, esp
; Line 58
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 59
	xor	eax, eax
; Line 60
	pop	ebp
	ret	0
_tt_cmap_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_clazz$ = -8						; size = 4
_cmap$ = -4						; size = 4
_charmap$ = 8						; size = 4
_cmap_info$ = 12					; size = 4
_tt_get_cmap_info PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 3586
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3587
	mov	eax, DWORD PTR _charmap$[ebp]
	mov	DWORD PTR _cmap$[ebp], eax
; Line 3588
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _clazz$[ebp], edx
; Line 3591
	mov	esi, esp
	mov	eax, DWORD PTR _cmap_info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _charmap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _clazz$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3592
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_get_cmap_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ttcmap$1 = -168					; size = 4
_error$2 = -160						; size = 4
_valid$3 = -152						; size = 84
_clazz$4 = -64						; size = 4
_pclazz$5 = -60						; size = 4
_format$6 = -56						; size = 4
_cmap$7 = -52						; size = 4
_offset$8 = -48						; size = 4
_charmap$9 = -40					; size = 12
_library$ = -24						; size = 4
_p$ = -20						; size = 4
_num_cmaps$ = -16					; size = 4
_limit$ = -12						; size = 4
_table$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_tt_face_build_cmaps PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttcmap.c
; Line 3481
	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 43					; 0000002bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3482
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+500]
	mov	DWORD PTR _table$[ebp], ecx
; Line 3483
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, DWORD PTR [edx+504]
	mov	DWORD PTR _limit$[ebp], eax
; Line 3485
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 3486
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _library$[ebp], ecx
; Line 3488
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR _library$[ebp], edx
; Line 3491
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN23@tt_face_bu
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN24@tt_face_bu
$LN23@tt_face_bu:
; Line 3492
	push	OFFSET $SG12437
	push	3492					; 00000da4H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	jmp	$LN25@tt_face_bu
$LN24@tt_face_bu:
; Line 3495
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx-2]
	shl	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	eax, BYTE PTR [eax+ecx-2]
	or	edx, eax
	movzx	ecx, dx
	test	ecx, ecx
	je	SHORT $LN22@tt_face_bu
; Line 3499
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx-2]
	shl	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	eax, BYTE PTR [eax+ecx-2]
	or	edx, eax
	movzx	ecx, dx
	push	ecx
	push	OFFSET $SG12450
	call	_FT_Message
	add	esp, 8
; Line 3500
	push	OFFSET $SG12451
	push	3500					; 00000dacH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	jmp	$LN25@tt_face_bu
$LN22@tt_face_bu:
; Line 3503
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx-2]
	shl	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, 1
	shl	edx, 0
	movzx	ecx, BYTE PTR [ecx+edx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _num_cmaps$[ebp], edx
; Line 3505
	jmp	SHORT $LN21@tt_face_bu
$LN20@tt_face_bu:
	mov	eax, DWORD PTR _num_cmaps$[ebp]
	sub	eax, 1
	mov	DWORD PTR _num_cmaps$[ebp], eax
$LN21@tt_face_bu:
	cmp	DWORD PTR _num_cmaps$[ebp], 0
	jbe	$LN19@tt_face_bu
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 8
	cmp	ecx, DWORD PTR _limit$[ebp]
	ja	$LN19@tt_face_bu
; Line 3511
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx-2]
	shl	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, 1
	shl	edx, 0
	movzx	ecx, BYTE PTR [ecx+edx-2]
	or	eax, ecx
	mov	WORD PTR _charmap$9[ebp+8], ax
; Line 3512
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx-2]
	shl	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, 1
	shl	edx, 0
	movzx	ecx, BYTE PTR [ecx+edx-2]
	or	eax, ecx
	mov	WORD PTR _charmap$9[ebp+10], ax
; Line 3513
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR _charmap$9[ebp], edx
; Line 3514
	mov	DWORD PTR _charmap$9[ebp+4], 0
; Line 3515
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax-4]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, 1
	shl	eax, 0
	movzx	edx, BYTE PTR [edx+eax-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [eax+edx-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, 1
	imul	eax, eax, 3
	movzx	edx, BYTE PTR [edx+eax-4]
	or	ecx, edx
	mov	DWORD PTR _offset$8[ebp], ecx
; Line 3517
	je	$LN18@tt_face_bu
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+504]
	sub	ecx, 2
	cmp	DWORD PTR _offset$8[ebp], ecx
	ja	$LN18@tt_face_bu
; Line 3519
	mov	edx, DWORD PTR _table$[ebp]
	add	edx, DWORD PTR _offset$8[ebp]
	mov	DWORD PTR _cmap$7[ebp], edx
; Line 3520
	mov	eax, DWORD PTR _cmap$7[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx]
	shl	eax, 8
	mov	ecx, DWORD PTR _cmap$7[ebp]
	mov	edx, 1
	shl	edx, 0
	movzx	ecx, BYTE PTR [ecx+edx]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _format$6[ebp], edx
; Line 3521
	mov	DWORD PTR _pclazz$5[ebp], OFFSET _tt_cmap_classes
; Line 3525
	jmp	SHORT $LN17@tt_face_bu
$LN16@tt_face_bu:
	mov	eax, DWORD PTR _pclazz$5[ebp]
	add	eax, 4
	mov	DWORD PTR _pclazz$5[ebp], eax
$LN17@tt_face_bu:
	mov	ecx, DWORD PTR _pclazz$5[ebp]
	cmp	DWORD PTR [ecx], 0
	je	$LN15@tt_face_bu
; Line 3527
	mov	edx, DWORD PTR _pclazz$5[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _clazz$4[ebp], eax
; Line 3528
	mov	ecx, DWORD PTR _clazz$4[ebp]
	mov	edx, DWORD PTR _format$6[ebp]
	cmp	DWORD PTR [ecx+40], edx
	jne	$LN14@tt_face_bu
; Line 3531
	mov	DWORD PTR _error$2[ebp], 0
; Line 3535
	push	0
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$7[ebp]
	push	ecx
	lea	edx, DWORD PTR _valid$3[ebp]
	push	edx
	call	_ft_validator_init
	add	esp, 16					; 00000010H
; Line 3537
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+264]
	mov	DWORD PTR _valid$3[ebp+80], ecx
; Line 3539
	lea	edx, DWORD PTR _valid$3[ebp]
	push	0
	push	edx
	call	__setjmp3
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@tt_face_bu
; Line 3542
	mov	esi, esp
	lea	eax, DWORD PTR _valid$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _clazz$4[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$2[ebp], eax
$LN13@tt_face_bu:
; Line 3545
	cmp	DWORD PTR _valid$3[ebp+76], 0
	jne	SHORT $LN9@tt_face_bu
; Line 3555
	lea	ecx, DWORD PTR _ttcmap$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _charmap$9[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _clazz$4[ebp]
	push	ecx
	call	_FT_CMap_New
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN11@tt_face_bu
; Line 3559
	mov	edx, DWORD PTR _error$2[ebp]
	mov	eax, DWORD PTR _ttcmap$1[ebp]
	mov	DWORD PTR [eax+20], edx
$LN11@tt_face_bu:
; Line 3562
	jmp	SHORT $LN10@tt_face_bu
$LN9@tt_face_bu:
; Line 3565
	mov	ecx, 4
	imul	edx, ecx, 20
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN8@tt_face_bu
	push	OFFSET $SG12519
	call	_FT_Message
	add	esp, 4
$LN8@tt_face_bu:
	xor	eax, eax
	jne	SHORT $LN9@tt_face_bu
$LN10@tt_face_bu:
; Line 3567
	jmp	SHORT $LN15@tt_face_bu
$LN14@tt_face_bu:
; Line 3569
	jmp	$LN16@tt_face_bu
$LN15@tt_face_bu:
; Line 3571
	mov	ecx, DWORD PTR _pclazz$5[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN18@tt_face_bu
$LN4@tt_face_bu:
; Line 3574
	mov	edx, 4
	imul	eax, edx, 20
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN3@tt_face_bu
	push	OFFSET $SG12526
	call	_FT_Message
	add	esp, 4
$LN3@tt_face_bu:
	xor	ecx, ecx
	jne	SHORT $LN4@tt_face_bu
$LN18@tt_face_bu:
; Line 3577
	jmp	$LN20@tt_face_bu
$LN19@tt_face_bu:
; Line 3579
	xor	eax, eax
$LN25@tt_face_bu:
; Line 3580
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@tt_face_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN31@tt_face_bu:
	DD	3
	DD	$LN30@tt_face_bu
$LN30@tt_face_bu:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN27@tt_face_bu
	DD	-152					; ffffff68H
	DD	84					; 00000054H
	DD	$LN28@tt_face_bu
	DD	-168					; ffffff58H
	DD	4
	DD	$LN29@tt_face_bu
$LN29@tt_face_bu:
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN28@tt_face_bu:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN27@tt_face_bu:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
_tt_face_build_cmaps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$1 = -40						; size = 4
_k$ = -36						; size = 2
_table_end$ = -32					; size = 4
_table_size$ = -28					; size = 4
_table_pos$ = -24					; size = 4
_header$ = -20						; size = 4
_stream$ = -16						; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_vertical$ = 12						; size = 1
_gindex$ = 16						; size = 4
_abearing$ = 20						; size = 4
_aadvance$ = 24						; size = 4
_tt_face_get_metrics PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttmtx.c
; Line 210
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 212
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 218
	movzx	edx, BYTE PTR _vertical$[ebp]
	test	edx, edx
	je	SHORT $LN15@tt_face_ge
; Line 220
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 296				; 00000128H
	mov	DWORD PTR _v$1[ebp], eax
; Line 223
	mov	ecx, DWORD PTR _v$1[ebp]
	mov	DWORD PTR _header$[ebp], ecx
; Line 224
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+788]
	mov	DWORD PTR _table_pos$[ebp], eax
; Line 225
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+692]
	mov	DWORD PTR _table_size$[ebp], edx
; Line 227
	jmp	SHORT $LN14@tt_face_ge
$LN15@tt_face_ge:
; Line 229
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 216				; 000000d8H
	mov	DWORD PTR _header$[ebp], eax
; Line 230
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+784]
	mov	DWORD PTR _table_pos$[ebp], edx
; Line 231
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR _table_size$[ebp], ecx
$LN14@tt_face_ge:
; Line 234
	mov	edx, DWORD PTR _table_pos$[ebp]
	add	edx, DWORD PTR _table_size$[ebp]
	mov	DWORD PTR _table_end$[ebp], edx
; Line 236
	mov	eax, DWORD PTR _header$[ebp]
	mov	cx, WORD PTR [eax+34]
	mov	WORD PTR _k$[ebp], cx
; Line 238
	movzx	edx, WORD PTR _k$[ebp]
	test	edx, edx
	jle	$NoData$21
; Line 240
	movzx	eax, WORD PTR _k$[ebp]
	cmp	DWORD PTR _gindex$[ebp], eax
	jae	SHORT $LN12@tt_face_ge
; Line 242
	mov	ecx, DWORD PTR _gindex$[ebp]
	mov	edx, DWORD PTR _table_pos$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _table_pos$[ebp], eax
; Line 243
	mov	ecx, DWORD PTR _table_pos$[ebp]
	add	ecx, 4
	cmp	ecx, DWORD PTR _table_end$[ebp]
	jbe	SHORT $LN11@tt_face_ge
; Line 244
	jmp	$NoData$21
$LN11@tt_face_ge:
; Line 248
	mov	edx, DWORD PTR _table_pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN9@tt_face_ge
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	ecx, DWORD PTR _aadvance$[ebp]
	mov	WORD PTR [ecx], ax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN9@tt_face_ge
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	ecx, DWORD PTR _abearing$[ebp]
	mov	WORD PTR [ecx], ax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@tt_face_ge
$LN9@tt_face_ge:
; Line 249
	jmp	$NoData$21
$LN10@tt_face_ge:
; Line 251
	jmp	$LN8@tt_face_ge
$LN12@tt_face_ge:
; Line 253
	movzx	edx, WORD PTR _k$[ebp]
	mov	eax, DWORD PTR _table_pos$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4-4]
	mov	DWORD PTR _table_pos$[ebp], ecx
; Line 254
	mov	edx, DWORD PTR _table_pos$[ebp]
	add	edx, 4
	cmp	edx, DWORD PTR _table_end$[ebp]
	jbe	SHORT $LN7@tt_face_ge
; Line 255
	jmp	$NoData$21
$LN7@tt_face_ge:
; Line 258
	mov	eax, DWORD PTR _table_pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@tt_face_ge
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	ecx, DWORD PTR _aadvance$[ebp]
	mov	WORD PTR [ecx], ax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@tt_face_ge
$LN5@tt_face_ge:
; Line 259
	jmp	SHORT $NoData$21
$LN6@tt_face_ge:
; Line 261
	movzx	edx, WORD PTR _k$[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	sub	eax, edx
	mov	ecx, DWORD PTR _table_pos$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+4]
	mov	DWORD PTR _table_pos$[ebp], edx
; Line 262
	mov	eax, DWORD PTR _table_pos$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _table_end$[ebp]
	jbe	SHORT $LN4@tt_face_ge
; Line 263
	xor	ecx, ecx
	mov	edx, DWORD PTR _abearing$[ebp]
	mov	WORD PTR [edx], cx
; Line 264
	jmp	SHORT $LN8@tt_face_ge
$LN4@tt_face_ge:
; Line 266
	mov	eax, DWORD PTR _table_pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN8@tt_face_ge
; Line 267
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	ecx, DWORD PTR _abearing$[ebp]
	mov	WORD PTR [ecx], ax
$LN8@tt_face_ge:
; Line 271
	jmp	SHORT $LN16@tt_face_ge
$NoData$21:
; Line 274
	xor	edx, edx
	mov	eax, DWORD PTR _abearing$[ebp]
	mov	WORD PTR [eax], dx
; Line 275
	xor	ecx, ecx
	mov	edx, DWORD PTR _aadvance$[ebp]
	mov	WORD PTR [edx], cx
$LN16@tt_face_ge:
; Line 277
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@tt_face_ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@tt_face_ge:
	DD	1
	DD	$LN19@tt_face_ge
$LN19@tt_face_ge:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@tt_face_ge
$LN18@tt_face_ge:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_tt_face_get_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ptable_size$ = -28					; size = 4
_ptable_offset$ = -24					; size = 4
_table_size$ = -16					; size = 4
_tag$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_vertical$ = 16						; size = 1
_tt_face_load_hmtx PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttmtx.c
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 67
	movzx	eax, BYTE PTR _vertical$[ebp]
	test	eax, eax
	je	SHORT $LN3@tt_face_lo
; Line 69
	mov	DWORD PTR _tag$[ebp], 1986884728	; 766d7478H
; Line 70
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 788				; 00000314H
	mov	DWORD PTR _ptable_offset$[ebp], ecx
; Line 71
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 692				; 000002b4H
	mov	DWORD PTR _ptable_size$[ebp], edx
; Line 73
	jmp	SHORT $LN2@tt_face_lo
$LN3@tt_face_lo:
; Line 75
	mov	DWORD PTR _tag$[ebp], 1752003704	; 686d7478H
; Line 76
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 784				; 00000310H
	mov	DWORD PTR _ptable_offset$[ebp], eax
; Line 77
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 684				; 000002acH
	mov	DWORD PTR _ptable_size$[ebp], ecx
$LN2@tt_face_lo:
; Line 80
	mov	esi, esp
	lea	edx, DWORD PTR _table_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 81
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@tt_face_lo
; Line 82
	jmp	SHORT $Fail$9
$LN1@tt_face_lo:
; Line 84
	mov	edx, DWORD PTR _ptable_size$[ebp]
	mov	eax, DWORD PTR _table_size$[ebp]
	mov	DWORD PTR [edx], eax
; Line 85
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	edx, DWORD PTR _ptable_offset$[ebp]
	mov	DWORD PTR [edx], eax
$Fail$9:
; Line 88
	mov	eax, DWORD PTR _error$[ebp]
; Line 89
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@tt_face_lo:
	DD	1
	DD	$LN7@tt_face_lo
$LN7@tt_face_lo:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN6@tt_face_lo
$LN6@tt_face_lo:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_tt_face_load_hmtx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$1 = -12						; size = 4
_header$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_vertical$ = 16						; size = 1
_tt_face_load_hhea PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttmtx.c
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 145
	movzx	eax, BYTE PTR _vertical$[ebp]
	test	eax, eax
	je	SHORT $LN17@tt_face_lo
; Line 147
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 296				; 00000128H
	mov	DWORD PTR _v$1[ebp], ecx
; Line 150
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	1986553185				; 76686561H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 151
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@tt_face_lo
; Line 152
	jmp	$Fail$20
$LN16@tt_face_lo:
; Line 154
	mov	eax, DWORD PTR _v$1[ebp]
	mov	DWORD PTR _header$[ebp], eax
; Line 156
	jmp	SHORT $LN15@tt_face_lo
$LN17@tt_face_lo:
; Line 158
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1751672161				; 68686561H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 159
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@tt_face_lo
; Line 160
	jmp	$Fail$20
$LN14@tt_face_lo:
; Line 162
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 216				; 000000d8H
	mov	DWORD PTR _header$[ebp], edx
$LN15@tt_face_lo:
; Line 165
	mov	eax, DWORD PTR _header$[ebp]
	push	eax
	push	OFFSET ?metrics_header_fields@?1??tt_face_load_hhea@@9@9
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@tt_face_lo
; Line 166
	jmp	$Fail$20
$LN12@tt_face_lo:
; Line 168
	mov	edx, 4
	imul	eax, edx, 23
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN11@tt_face_lo
	mov	ecx, DWORD PTR _header$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	push	edx
	push	OFFSET $SG9464
	call	_FT_Message
	add	esp, 8
$LN11@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN12@tt_face_lo
$LN8@tt_face_lo:
; Line 169
	mov	ecx, 4
	imul	edx, ecx, 23
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN7@tt_face_lo
	mov	eax, DWORD PTR _header$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	push	ecx
	push	OFFSET $SG9469
	call	_FT_Message
	add	esp, 8
$LN7@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN8@tt_face_lo
$LN4@tt_face_lo:
; Line 170
	mov	eax, 4
	imul	ecx, eax, 23
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN3@tt_face_lo
	mov	edx, DWORD PTR _header$[ebp]
	movzx	eax, WORD PTR [edx+34]
	push	eax
	push	OFFSET $SG9474
	call	_FT_Message
	add	esp, 8
$LN3@tt_face_lo:
	xor	ecx, ecx
	jne	SHORT $LN4@tt_face_lo
; Line 172
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 173
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax+40], 0
$Fail$20:
; Line 176
	mov	eax, DWORD PTR _error$[ebp]
; Line 177
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_load_hhea ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_header$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tag$ = 16						; size = 4
_tt_face_load_generic_header PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 539
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 572
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 573
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@tt_face_lo
; Line 574
	jmp	$Exit$13
$LN10@tt_face_lo:
; Line 576
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 160				; 000000a0H
	mov	DWORD PTR _header$[ebp], edx
; Line 578
	mov	eax, DWORD PTR _header$[ebp]
	push	eax
	push	OFFSET ?header_fields@?1??tt_face_load_generic_header@@9@9
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@tt_face_lo
; Line 579
	jmp	SHORT $Exit$13
$LN8@tt_face_lo:
; Line 581
	mov	edx, 4
	imul	eax, edx, 22
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN7@tt_face_lo
	mov	ecx, DWORD PTR _header$[ebp]
	movzx	edx, WORD PTR [ecx+18]
	push	edx
	push	OFFSET $SG8518
	call	_FT_Message
	add	esp, 8
$LN7@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN8@tt_face_lo
$LN4@tt_face_lo:
; Line 582
	mov	ecx, 4
	imul	edx, ecx, 22
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN3@tt_face_lo
	mov	eax, DWORD PTR _header$[ebp]
	movsx	ecx, WORD PTR [eax+50]
	push	ecx
	push	OFFSET $SG8523
	call	_FT_Message
	add	esp, 8
$LN3@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN4@tt_face_lo
$Exit$13:
; Line 585
	mov	eax, DWORD PTR _error$[ebp]
; Line 586
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_load_generic_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv89 = -72						; size = 4
_magic$1 = -68						; size = 4
_table$2 = -60						; size = 16
_offset$ = -40						; size = 4
_has_meta$ = -36					; size = 4
_has_sing$ = -32					; size = 4
_has_head$ = -28					; size = 4
_valid_entries$ = -24					; size = 2
_nn$ = -20						; size = 2
_error$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sfnt$ = 8						; size = 4
_stream$ = 12						; size = 4
_check_table_dir PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 171
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 173
	xor	eax, eax
	mov	WORD PTR _valid_entries$[ebp], ax
; Line 174
	mov	DWORD PTR _has_head$[ebp], 0
	mov	DWORD PTR _has_sing$[ebp], 0
	mov	DWORD PTR _has_meta$[ebp], 0
; Line 175
	mov	ecx, DWORD PTR _sfnt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _offset$[ebp], edx
; Line 191
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN51@check_tabl
; Line 192
	jmp	$Exit$60
$LN51@check_tabl:
; Line 194
	xor	edx, edx
	mov	WORD PTR _nn$[ebp], dx
	jmp	SHORT $LN50@check_tabl
$LN49@check_tabl:
	mov	ax, WORD PTR _nn$[ebp]
	add	ax, 1
	mov	WORD PTR _nn$[ebp], ax
$LN50@check_tabl:
	movzx	ecx, WORD PTR _nn$[ebp]
	mov	edx, DWORD PTR _sfnt$[ebp]
	movzx	eax, WORD PTR [edx+4]
	cmp	ecx, eax
	jge	$LN48@check_tabl
; Line 199
	lea	ecx, DWORD PTR _table$2[ebp]
	push	ecx
	push	OFFSET ?table_dir_entry_fields@?1??check_table_dir@@9@9
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN47@check_tabl
; Line 201
	mov	ax, WORD PTR _nn$[ebp]
	sub	ax, 1
	mov	WORD PTR _nn$[ebp], ax
$LN46@check_tabl:
; Line 204
	mov	ecx, 4
	imul	edx, ecx, 22
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN45@check_tabl
	movzx	eax, WORD PTR _nn$[ebp]
	cmp	eax, 1
	jne	SHORT $LN54@check_tabl
	mov	DWORD PTR tv89[ebp], OFFSET $SG8201
	jmp	SHORT $LN55@check_tabl
$LN54@check_tabl:
	mov	DWORD PTR tv89[ebp], OFFSET $SG8202
$LN55@check_tabl:
	mov	ecx, DWORD PTR _sfnt$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR tv89[ebp]
	push	eax
	movzx	ecx, WORD PTR _nn$[ebp]
	push	ecx
	push	OFFSET $SG8203
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN45@check_tabl:
	xor	edx, edx
	jne	SHORT $LN46@check_tabl
; Line 205
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	cx, WORD PTR _nn$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 206
	jmp	$LN48@check_tabl
$LN47@check_tabl:
; Line 213
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _table$2[ebp+12]
	cmp	eax, DWORD PTR [edx+4]
	ja	SHORT $LN40@check_tabl
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _table$2[ebp+12]
	cmp	DWORD PTR _table$2[ebp+8], edx
	jbe	SHORT $LN42@check_tabl
$LN40@check_tabl:
; Line 215
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN39@check_tabl
	movzx	edx, WORD PTR _nn$[ebp]
	push	edx
	push	OFFSET $SG8210
	call	_FT_Message
	add	esp, 8
$LN39@check_tabl:
	xor	eax, eax
	jne	SHORT $LN40@check_tabl
; Line 216
	jmp	$LN49@check_tabl
; Line 218
	jmp	SHORT $LN36@check_tabl
$LN42@check_tabl:
; Line 219
	mov	cx, WORD PTR _valid_entries$[ebp]
	add	cx, 1
	mov	WORD PTR _valid_entries$[ebp], cx
$LN36@check_tabl:
; Line 221
	cmp	DWORD PTR _table$2[ebp], 1751474532	; 68656164H
	je	SHORT $LN34@check_tabl
	cmp	DWORD PTR _table$2[ebp], 1651008868	; 62686564H
	jne	$LN35@check_tabl
$LN34@check_tabl:
; Line 229
	mov	DWORD PTR _has_head$[ebp], 1
; Line 240
	cmp	DWORD PTR _table$2[ebp+12], 54		; 00000036H
	jae	SHORT $LN33@check_tabl
$LN32@check_tabl:
; Line 243
	mov	edx, 4
	imul	eax, edx, 22
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN31@check_tabl
	push	OFFSET $SG8230
	call	_FT_Message
	add	esp, 4
$LN31@check_tabl:
	xor	ecx, ecx
	jne	SHORT $LN32@check_tabl
; Line 244
	push	OFFSET $SG8231
	push	244					; 000000f4H
	push	142					; 0000008eH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 142				; 0000008eH
	mov	DWORD PTR _error$[ebp], eax
; Line 245
	jmp	$Exit$60
$LN33@check_tabl:
; Line 249
	mov	edx, DWORD PTR _table$2[ebp+8]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN27@check_tabl
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _magic$1[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@check_tabl
$LN27@check_tabl:
; Line 250
	jmp	$Exit$60
$LN28@check_tabl:
; Line 252
	cmp	DWORD PTR _magic$1[ebp], 1594834165	; 5f0f3cf5H
	je	SHORT $LN26@check_tabl
$LN25@check_tabl:
; Line 254
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN24@check_tabl
	push	OFFSET $SG8241
	call	_FT_Message
	add	esp, 4
$LN24@check_tabl:
	xor	edx, edx
	jne	SHORT $LN25@check_tabl
$LN26@check_tabl:
; Line 256
	movzx	eax, WORD PTR _nn$[ebp]
	add	eax, 1
	shl	eax, 4
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@check_tabl
; Line 257
	jmp	$Exit$60
$LN21@check_tabl:
; Line 259
	jmp	SHORT $LN20@check_tabl
$LN35@check_tabl:
	cmp	DWORD PTR _table$2[ebp], 1397313095	; 53494e47H
	jne	SHORT $LN19@check_tabl
; Line 260
	mov	DWORD PTR _has_sing$[ebp], 1
	jmp	SHORT $LN20@check_tabl
$LN19@check_tabl:
; Line 261
	cmp	DWORD PTR _table$2[ebp], 1296389185	; 4d455441H
	jne	SHORT $LN20@check_tabl
; Line 262
	mov	DWORD PTR _has_meta$[ebp], 1
$LN20@check_tabl:
; Line 263
	jmp	$LN49@check_tabl
$LN48@check_tabl:
; Line 265
	mov	edx, DWORD PTR _sfnt$[ebp]
	mov	ax, WORD PTR _valid_entries$[ebp]
	mov	WORD PTR [edx+4], ax
; Line 267
	mov	ecx, DWORD PTR _sfnt$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	test	edx, edx
	jne	SHORT $LN16@check_tabl
$LN15@check_tabl:
; Line 269
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN14@check_tabl
	push	OFFSET $SG8263
	call	_FT_Message
	add	esp, 4
$LN14@check_tabl:
	xor	edx, edx
	jne	SHORT $LN15@check_tabl
; Line 270
	push	OFFSET $SG8264
	push	270					; 0000010eH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 271
	jmp	$Exit$60
$LN16@check_tabl:
; Line 275
	cmp	DWORD PTR _has_head$[ebp], 0
	jne	SHORT $LN10@check_tabl
	cmp	DWORD PTR _has_sing$[ebp], 0
	je	SHORT $LN8@check_tabl
	cmp	DWORD PTR _has_meta$[ebp], 0
	je	SHORT $LN8@check_tabl
$LN10@check_tabl:
; Line 277
	mov	DWORD PTR _error$[ebp], 0
; Line 278
	jmp	SHORT $Exit$60
; Line 280
	jmp	SHORT $Exit$60
$LN8@check_tabl:
; Line 282
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN7@check_tabl
	push	OFFSET $SG8272
	call	_FT_Message
	add	esp, 4
$LN7@check_tabl:
	xor	edx, edx
	jne	SHORT $LN8@check_tabl
$LN4@check_tabl:
; Line 284
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN3@check_tabl
	push	OFFSET $SG8277
	call	_FT_Message
	add	esp, 4
$LN3@check_tabl:
	xor	edx, edx
	jne	SHORT $LN4@check_tabl
; Line 288
	push	OFFSET $SG8278
	push	288					; 00000120H
	push	142					; 0000008eH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 142				; 0000008eH
	mov	DWORD PTR _error$[ebp], eax
$Exit$60:
; Line 292
	mov	eax, DWORD PTR _error$[ebp]
; Line 293
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN59@check_tabl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN59@check_tabl:
	DD	2
	DD	$LN58@check_tabl
$LN58@check_tabl:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN56@check_tabl
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN57@check_tabl
$LN57@check_tabl:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN56@check_tabl:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_check_table_dir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_bhed PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 602
	push	ebp
	mov	ebp, esp
; Line 603
	push	1651008868				; 62686564H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_load_generic_header
	add	esp, 12					; 0000000cH
; Line 604
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_tt_face_load_bhed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gaspranges$ = -28					; size = 4
_num_ranges$ = -24					; size = 4
_j$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_gasp PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 1237
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1239
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1242
	mov	DWORD PTR _gaspranges$[ebp], 0
; Line 1246
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	1734439792				; 67617370H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1247
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@tt_face_lo
; Line 1248
	jmp	$Exit$22
$LN16@tt_face_lo:
; Line 1250
	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@tt_face_lo
; Line 1251
	jmp	$Exit$22
$LN15@tt_face_lo:
; Line 1253
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	edx, DWORD PTR _face$[ebp]
	mov	WORD PTR [edx+540], ax
; Line 1254
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	ecx, DWORD PTR _face$[ebp]
	mov	WORD PTR [ecx+542], ax
; Line 1256
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 1259
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+540]
	cmp	ecx, 2
	jl	SHORT $LN14@tt_face_lo
; Line 1261
	xor	edx, edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	WORD PTR [eax+542], dx
; Line 1262
	push	OFFSET $SG9272
	push	1262					; 000004eeH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1263
	jmp	$Exit$22
$LN14@tt_face_lo:
; Line 1266
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+542]
	mov	DWORD PTR _num_ranges$[ebp], edx
$LN13@tt_face_lo:
; Line 1267
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN12@tt_face_lo
	mov	edx, DWORD PTR _num_ranges$[ebp]
	push	edx
	push	OFFSET $SG9277
	call	_FT_Message
	add	esp, 8
$LN12@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN13@tt_face_lo
; Line 1270
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _num_ranges$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+544], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN8@tt_face_lo
	mov	edx, DWORD PTR _num_ranges$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@tt_face_lo
$LN8@tt_face_lo:
; Line 1271
	jmp	$Exit$22
$LN9@tt_face_lo:
; Line 1273
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+544]
	mov	DWORD PTR _gaspranges$[ebp], edx
; Line 1275
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@tt_face_lo
$LN6@tt_face_lo:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@tt_face_lo:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _num_ranges$[ebp]
	jae	SHORT $LN5@tt_face_lo
; Line 1277
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _gaspranges$[ebp]
	mov	WORD PTR [edx+ecx*4], ax
; Line 1278
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _gaspranges$[ebp]
	mov	WORD PTR [edx+ecx*4+2], ax
$LN4@tt_face_lo:
; Line 1283
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN3@tt_face_lo
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _gaspranges$[ebp]
	movzx	ecx, WORD PTR [eax+edx*4+2]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _gaspranges$[ebp]
	movzx	ecx, WORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	push	OFFSET $SG9292
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN3@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN4@tt_face_lo
; Line 1284
	jmp	SHORT $LN6@tt_face_lo
$LN5@tt_face_lo:
; Line 1286
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExitFrame
	add	esp, 4
$Exit$22:
; Line 1289
	mov	eax, DWORD PTR _error$[ebp]
; Line 1290
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN21@tt_face_lo:
	DD	1
	DD	$LN20@tt_face_lo
$LN20@tt_face_lo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN19@tt_face_lo
$LN19@tt_face_lo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_tt_face_load_gasp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_count$ = -16						; size = 4
_entry$ = -12						; size = 4
_table$ = -8						; size = 4
_memory$ = -4						; size = 4
_face$ = 8						; size = 4
_tt_face_free_name PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 874
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 875
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _memory$[ebp], edx
; Line 876
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 344				; 00000158H
	mov	DWORD PTR _table$[ebp], eax
; Line 877
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _entry$[ebp], edx
; Line 878
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _count$[ebp], ecx
; Line 881
	mov	edx, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN10@tt_face_fr
; Line 883
	jmp	SHORT $LN9@tt_face_fr
$LN8@tt_face_fr:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _entry$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _entry$[ebp], ecx
$LN9@tt_face_fr:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@tt_face_fr
$LN6@tt_face_fr:
; Line 885
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+16], 0
	xor	eax, eax
	jne	SHORT $LN6@tt_face_fr
; Line 886
	xor	ecx, ecx
	mov	edx, DWORD PTR _entry$[ebp]
	mov	WORD PTR [edx+8], cx
; Line 887
	jmp	SHORT $LN8@tt_face_fr
$LN3@tt_face_fr:
; Line 890
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+12], 0
	xor	ecx, ecx
	jne	SHORT $LN3@tt_face_fr
$LN10@tt_face_fr:
; Line 893
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 894
	xor	eax, eax
	mov	ecx, DWORD PTR _table$[ebp]
	mov	WORD PTR [ecx], ax
; Line 895
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 896
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_free_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pclt$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_pclt PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 1176
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1202
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 548				; 00000224H
	mov	DWORD PTR _pclt$[ebp], eax
; Line 1206
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1346587732				; 50434c54H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1207
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@tt_face_lo
; Line 1208
	jmp	SHORT $Exit$5
$LN2@tt_face_lo:
; Line 1210
	mov	edx, DWORD PTR _pclt$[ebp]
	push	edx
	push	OFFSET ?pclt_fields@?1??tt_face_load_pclt@@9@9
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$Exit$5:
; Line 1214
	mov	eax, DWORD PTR _error$[ebp]
; Line 1215
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_load_pclt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv89 = -12						; size = 4
_post$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_post PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 1116
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1118
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 468				; 000001d4H
	mov	DWORD PTR _post$[ebp], eax
; Line 1139
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1886352244				; 706f7374H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1140
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@tt_face_lo
; Line 1141
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN11@tt_face_lo
$LN10@tt_face_lo:
; Line 1143
	mov	edx, DWORD PTR _post$[ebp]
	push	edx
	push	OFFSET ?post_fields@?1??tt_face_load_post@@9@9
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@tt_face_lo
; Line 1144
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN11@tt_face_lo
$LN8@tt_face_lo:
; Line 1149
	mov	ecx, 4
	imul	edx, ecx, 22
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN7@tt_face_lo
	mov	eax, DWORD PTR _post$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG9155
	call	_FT_Message
	add	esp, 8
$LN7@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN8@tt_face_lo
$LN4@tt_face_lo:
; Line 1151
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN3@tt_face_lo
	mov	edx, DWORD PTR _post$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN13@tt_face_lo
	mov	DWORD PTR tv89[ebp], OFFSET $SG9160
	jmp	SHORT $LN14@tt_face_lo
$LN13@tt_face_lo:
	mov	DWORD PTR tv89[ebp], OFFSET $SG9161
$LN14@tt_face_lo:
	mov	eax, DWORD PTR tv89[ebp]
	push	eax
	push	OFFSET $SG9162
	call	_FT_Message
	add	esp, 8
$LN3@tt_face_lo:
	xor	ecx, ecx
	jne	SHORT $LN4@tt_face_lo
; Line 1153
	xor	eax, eax
$LN11@tt_face_lo:
; Line 1154
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_load_post ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_os2$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_os2 PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 956
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1046
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	1330851634				; 4f532f32H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1047
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@tt_face_lo
; Line 1048
	jmp	$Exit$31
$LN28@tt_face_lo:
; Line 1050
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 364				; 0000016cH
	mov	DWORD PTR _os2$[ebp], ecx
; Line 1052
	mov	edx, DWORD PTR _os2$[ebp]
	push	edx
	push	OFFSET ?os2_fields@?1??tt_face_load_os2@@9@9
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN27@tt_face_lo
; Line 1053
	jmp	$Exit$31
$LN27@tt_face_lo:
; Line 1055
	mov	ecx, DWORD PTR _os2$[ebp]
	mov	DWORD PTR [ecx+80], 0
; Line 1056
	mov	edx, DWORD PTR _os2$[ebp]
	mov	DWORD PTR [edx+84], 0
; Line 1057
	xor	eax, eax
	mov	ecx, DWORD PTR _os2$[ebp]
	mov	WORD PTR [ecx+88], ax
; Line 1058
	xor	edx, edx
	mov	eax, DWORD PTR _os2$[ebp]
	mov	WORD PTR [eax+90], dx
; Line 1059
	xor	ecx, ecx
	mov	edx, DWORD PTR _os2$[ebp]
	mov	WORD PTR [edx+92], cx
; Line 1060
	xor	eax, eax
	mov	ecx, DWORD PTR _os2$[ebp]
	mov	WORD PTR [ecx+94], ax
; Line 1061
	xor	edx, edx
	mov	eax, DWORD PTR _os2$[ebp]
	mov	WORD PTR [eax+96], dx
; Line 1062
	xor	ecx, ecx
	mov	edx, DWORD PTR _os2$[ebp]
	mov	WORD PTR [edx+98], cx
; Line 1063
	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _os2$[ebp]
	mov	WORD PTR [ecx+100], ax
; Line 1065
	mov	edx, DWORD PTR _os2$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 1
	jl	SHORT $LN20@tt_face_lo
; Line 1068
	mov	ecx, DWORD PTR _os2$[ebp]
	push	ecx
	push	OFFSET ?os2_fields_extra1@?1??tt_face_load_os2@@9@9
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN25@tt_face_lo
; Line 1069
	jmp	$Exit$31
$LN25@tt_face_lo:
; Line 1071
	mov	eax, DWORD PTR _os2$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 2
	jl	SHORT $LN20@tt_face_lo
; Line 1074
	mov	edx, DWORD PTR _os2$[ebp]
	push	edx
	push	OFFSET ?os2_fields_extra2@?1??tt_face_load_os2@@9@9
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN23@tt_face_lo
; Line 1075
	jmp	$Exit$31
$LN23@tt_face_lo:
; Line 1077
	mov	ecx, DWORD PTR _os2$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 5
	jl	SHORT $LN20@tt_face_lo
; Line 1080
	mov	eax, DWORD PTR _os2$[ebp]
	push	eax
	push	OFFSET ?os2_fields_extra5@?1??tt_face_load_os2@@9@9
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@tt_face_lo
; Line 1081
	jmp	$Exit$31
$LN20@tt_face_lo:
; Line 1086
	mov	edx, 4
	imul	eax, edx, 22
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN19@tt_face_lo
	mov	ecx, DWORD PTR _os2$[ebp]
	movsx	edx, WORD PTR [ecx+70]
	push	edx
	push	OFFSET $SG9069
	call	_FT_Message
	add	esp, 8
$LN19@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN20@tt_face_lo
$LN16@tt_face_lo:
; Line 1087
	mov	ecx, 4
	imul	edx, ecx, 22
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN15@tt_face_lo
	mov	eax, DWORD PTR _os2$[ebp]
	movsx	ecx, WORD PTR [eax+72]
	push	ecx
	push	OFFSET $SG9074
	call	_FT_Message
	add	esp, 8
$LN15@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN16@tt_face_lo
$LN12@tt_face_lo:
; Line 1088
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN11@tt_face_lo
	mov	edx, DWORD PTR _os2$[ebp]
	movzx	eax, WORD PTR [edx+76]
	push	eax
	push	OFFSET $SG9079
	call	_FT_Message
	add	esp, 8
$LN11@tt_face_lo:
	xor	ecx, ecx
	jne	SHORT $LN12@tt_face_lo
$LN8@tt_face_lo:
; Line 1089
	mov	edx, 4
	imul	eax, edx, 22
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN7@tt_face_lo
	mov	ecx, DWORD PTR _os2$[ebp]
	movzx	edx, WORD PTR [ecx+78]
	push	edx
	push	OFFSET $SG9084
	call	_FT_Message
	add	esp, 8
$LN7@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN8@tt_face_lo
$LN4@tt_face_lo:
; Line 1090
	mov	ecx, 4
	imul	edx, ecx, 22
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN3@tt_face_lo
	mov	eax, DWORD PTR _os2$[ebp]
	movzx	ecx, WORD PTR [eax+64]
	push	ecx
	push	OFFSET $SG9089
	call	_FT_Message
	add	esp, 8
$LN3@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN4@tt_face_lo
$Exit$31:
; Line 1093
	mov	eax, DWORD PTR _error$[ebp]
; Line 1094
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_load_os2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$1 = -52						; size = 4
_table$ = -48						; size = 4
_count$ = -44						; size = 4
_storage_limit$ = -40					; size = 4
_storage_start$ = -36					; size = 4
_table_len$ = -28					; size = 4
_table_pos$ = -20					; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_name PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 745
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 747
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 781
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 344				; 00000158H
	mov	DWORD PTR _table$[ebp], edx
; Line 782
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 784
	mov	esi, esp
	lea	edx, DWORD PTR _table_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	1851878757				; 6e616d65H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 785
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@tt_face_lo
; Line 786
	jmp	$Exit$19
$LN12@tt_face_lo:
; Line 788
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _table_pos$[ebp], eax
; Line 791
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	push	OFFSET ?name_table_fields@?1??tt_face_load_name@@9@9
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@tt_face_lo
; Line 792
	jmp	$Exit$19
$LN11@tt_face_lo:
; Line 801
	mov	ecx, DWORD PTR _table$[ebp]
	imul	edx, DWORD PTR [ecx+4], 12
	mov	eax, DWORD PTR _table_pos$[ebp]
	lea	ecx, DWORD PTR [eax+edx+6]
	mov	DWORD PTR _storage_start$[ebp], ecx
; Line 802
	mov	edx, DWORD PTR _table_pos$[ebp]
	add	edx, DWORD PTR _table_len$[ebp]
	mov	DWORD PTR _storage_limit$[ebp], edx
; Line 804
	mov	eax, DWORD PTR _storage_start$[ebp]
	cmp	eax, DWORD PTR _storage_limit$[ebp]
	jbe	SHORT $LN10@tt_face_lo
; Line 806
	push	OFFSET $SG8729
	call	_FT_Message
	add	esp, 4
; Line 807
	push	OFFSET $SG8730
	push	807					; 00000327H
	push	145					; 00000091H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 145				; 00000091H
	mov	DWORD PTR _error$[ebp], eax
; Line 808
	jmp	$Exit$19
$LN10@tt_face_lo:
; Line 812
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _count$[ebp], edx
; Line 813
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 816
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	push	0
	push	20					; 00000014H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN8@tt_face_lo
	imul	edx, DWORD PTR _count$[ebp], 12
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@tt_face_lo
$LN8@tt_face_lo:
; Line 817
	jmp	$Exit$19
$LN9@tt_face_lo:
; Line 822
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _entry$1[ebp], edx
; Line 825
	jmp	SHORT $LN7@tt_face_lo
$LN6@tt_face_lo:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN7@tt_face_lo:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN5@tt_face_lo
; Line 827
	mov	ecx, DWORD PTR _entry$1[ebp]
	push	ecx
	push	OFFSET ?name_record_fields@?1??tt_face_load_name@@9@9
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@tt_face_lo
; Line 828
	jmp	SHORT $LN6@tt_face_lo
$LN4@tt_face_lo:
; Line 831
	mov	eax, DWORD PTR _entry$1[ebp]
	movzx	ecx, WORD PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LN3@tt_face_lo
; Line 832
	jmp	SHORT $LN6@tt_face_lo
$LN3@tt_face_lo:
; Line 835
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _table_pos$[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _entry$1[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _entry$1[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 837
	mov	eax, DWORD PTR _entry$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _storage_start$[ebp]
	jb	SHORT $LN1@tt_face_lo
	mov	edx, DWORD PTR _entry$1[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	ecx, DWORD PTR _entry$1[ebp]
	add	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR _storage_limit$[ebp]
	jbe	SHORT $LN2@tt_face_lo
$LN1@tt_face_lo:
; Line 840
	mov	edx, DWORD PTR _entry$1[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 841
	xor	eax, eax
	mov	ecx, DWORD PTR _entry$1[ebp]
	mov	WORD PTR [ecx+8], ax
; Line 842
	jmp	$LN6@tt_face_lo
$LN2@tt_face_lo:
; Line 845
	mov	edx, DWORD PTR _entry$1[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _entry$1[ebp], edx
; Line 846
	jmp	$LN6@tt_face_lo
$LN5@tt_face_lo:
; Line 848
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _entry$1[ebp]
	sub	ecx, DWORD PTR [eax+12]
	mov	eax, ecx
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 851
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 854
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _table$[ebp]
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx+340], ax
$Exit$19:
; Line 857
	mov	eax, DWORD PTR _error$[ebp]
; Line 858
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@tt_face_lo:
	DD	2
	DD	$LN17@tt_face_lo
$LN17@tt_face_lo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN15@tt_face_lo
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN16@tt_face_lo
$LN16@tt_face_lo:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN15@tt_face_lo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_tt_face_load_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_maxProfile$ = -8					; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_maxp PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 628
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 630
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 260				; 00000104H
	mov	DWORD PTR _maxProfile$[ebp], eax
; Line 663
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1835104368				; 6d617870H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 664
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@tt_face_lo
; Line 665
	jmp	$Exit$22
$LN19@tt_face_lo:
; Line 667
	mov	edx, DWORD PTR _maxProfile$[ebp]
	push	edx
	push	OFFSET ?maxp_fields@?1??tt_face_load_maxp@@9@9
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@tt_face_lo
; Line 668
	jmp	$Exit$22
$LN18@tt_face_lo:
; Line 670
	xor	ecx, ecx
	mov	edx, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 671
	xor	eax, eax
	mov	ecx, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [ecx+8], ax
; Line 672
	xor	edx, edx
	mov	eax, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [eax+10], dx
; Line 673
	xor	ecx, ecx
	mov	edx, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [edx+12], cx
; Line 674
	xor	eax, eax
	mov	ecx, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [ecx+14], ax
; Line 675
	xor	edx, edx
	mov	eax, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [eax+16], dx
; Line 676
	xor	ecx, ecx
	mov	edx, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [edx+18], cx
; Line 677
	xor	eax, eax
	mov	ecx, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [ecx+20], ax
; Line 678
	xor	edx, edx
	mov	eax, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [eax+22], dx
; Line 679
	xor	ecx, ecx
	mov	edx, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [edx+24], cx
; Line 680
	xor	eax, eax
	mov	ecx, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [ecx+26], ax
; Line 681
	xor	edx, edx
	mov	eax, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [eax+28], dx
; Line 682
	xor	ecx, ecx
	mov	edx, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [edx+30], cx
; Line 684
	mov	eax, DWORD PTR _maxProfile$[ebp]
	cmp	DWORD PTR [eax], 65536			; 00010000H
	jl	$LN4@tt_face_lo
; Line 686
	mov	ecx, DWORD PTR _maxProfile$[ebp]
	push	ecx
	push	OFFSET ?maxp_fields_extra@?1??tt_face_load_maxp@@9@9
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@tt_face_lo
; Line 687
	jmp	$Exit$22
$LN16@tt_face_lo:
; Line 695
	mov	eax, DWORD PTR _maxProfile$[ebp]
	movzx	ecx, WORD PTR [eax+20]
	cmp	ecx, 64					; 00000040H
	jge	SHORT $LN15@tt_face_lo
; Line 696
	mov	edx, 64					; 00000040H
	mov	eax, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [eax+20], dx
$LN15@tt_face_lo:
; Line 699
	mov	ecx, DWORD PTR _maxProfile$[ebp]
	movzx	edx, WORD PTR [ecx+16]
	cmp	edx, 65531				; 0000fffbH
	jbe	SHORT $LN14@tt_face_lo
$LN13@tt_face_lo:
; Line 704
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 0
	jl	SHORT $LN12@tt_face_lo
	push	OFFSET $SG8646
	call	_FT_Message
	add	esp, 4
$LN12@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN13@tt_face_lo
; Line 706
	mov	eax, 65531				; 0000fffbH
	mov	ecx, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [ecx+16], ax
$LN14@tt_face_lo:
; Line 710
	mov	edx, DWORD PTR _maxProfile$[ebp]
	movzx	eax, WORD PTR [edx+30]
	cmp	eax, 100				; 00000064H
	jle	SHORT $LN4@tt_face_lo
$LN8@tt_face_lo:
; Line 714
	mov	ecx, 4
	imul	edx, ecx, 22
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN7@tt_face_lo
	mov	eax, DWORD PTR _maxProfile$[ebp]
	movzx	ecx, WORD PTR [eax+30]
	push	ecx
	push	OFFSET $SG8652
	call	_FT_Message
	add	esp, 8
$LN7@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN8@tt_face_lo
; Line 715
	mov	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _maxProfile$[ebp]
	mov	WORD PTR [ecx+30], ax
$LN4@tt_face_lo:
; Line 719
	mov	edx, 4
	imul	eax, edx, 22
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN3@tt_face_lo
	mov	ecx, DWORD PTR _maxProfile$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	push	OFFSET $SG8657
	call	_FT_Message
	add	esp, 8
$LN3@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN4@tt_face_lo
$Exit$22:
; Line 722
	mov	eax, DWORD PTR _error$[ebp]
; Line 723
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_load_maxp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_cmap PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 920
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 924
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 504				; 000001f8H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	push	1668112752				; 636d6170H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+508]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 925
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@tt_face_lo
; Line 926
	jmp	SHORT $Exit$5
$LN2@tt_face_lo:
; Line 928
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 500				; 000001f4H
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+504]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $Exit$5
; Line 929
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+504], 0
$Exit$5:
; Line 932
	mov	eax, DWORD PTR _error$[ebp]
; Line 933
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_load_cmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_head PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 592
	push	ebp
	mov	ebp, esp
; Line 593
	push	1751474532				; 68656164H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_load_generic_header
	add	esp, 12					; 0000000cH
; Line 594
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_tt_face_load_head ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -16						; size = 4
_table$ = -12						; size = 4
_stream$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_tag$ = 12						; size = 4
_offset$ = 16						; size = 4
_buffer$ = 20						; size = 4
_length$ = 24						; size = 4
_tt_face_load_any PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 475
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 482
	cmp	DWORD PTR _tag$[ebp], 0
	je	SHORT $LN6@tt_face_lo
; Line 485
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_lookup_table
	add	esp, 8
	mov	DWORD PTR _table$[ebp], eax
; Line 486
	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN5@tt_face_lo
; Line 488
	push	OFFSET $SG8395
	push	488					; 000001e8H
	push	142					; 0000008eH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 142				; 0000008eH
	mov	DWORD PTR _error$[ebp], eax
; Line 489
	jmp	SHORT $Exit$9
$LN5@tt_face_lo:
; Line 492
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _offset$[ebp], eax
; Line 493
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _size$[ebp], edx
; Line 495
	jmp	SHORT $LN4@tt_face_lo
$LN6@tt_face_lo:
; Line 497
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _size$[ebp], edx
$LN4@tt_face_lo:
; Line 499
	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN3@tt_face_lo
	mov	eax, DWORD PTR _length$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@tt_face_lo
; Line 501
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 503
	xor	eax, eax
	jmp	SHORT $LN7@tt_face_lo
$LN3@tt_face_lo:
; Line 506
	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN2@tt_face_lo
; Line 507
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _size$[ebp], ecx
$LN2@tt_face_lo:
; Line 509
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR _stream$[ebp], eax
; Line 511
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadAt
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$Exit$9:
; Line 515
	mov	eax, DWORD PTR _error$[ebp]
$LN7@tt_face_lo:
; Line 516
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_load_any ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nn$ = -52						; size = 4
_entry$ = -48						; size = 4
_memory$ = -44						; size = 4
_error$ = -36						; size = 4
_sfnt$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_tt_face_load_font_dir PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 321
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 324
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
$LN41@tt_face_lo:
; Line 342
	mov	edx, 4
	imul	eax, edx, 22
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN40@tt_face_lo
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	push	OFFSET $SG8315
	call	_FT_Message
	add	esp, 8
$LN40@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN41@tt_face_lo
; Line 346
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _sfnt$[ebp+12], eax
; Line 349
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _sfnt$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN36@tt_face_lo
	lea	eax, DWORD PTR _sfnt$[ebp]
	push	eax
	push	OFFSET ?offset_table_fields@?1??tt_face_load_font_dir@@9@9
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN35@tt_face_lo
$LN36@tt_face_lo:
; Line 350
	jmp	$Exit$48
$LN35@tt_face_lo:
; Line 361
	mov	edx, 4
	imul	eax, edx, 22
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN34@tt_face_lo
	movzx	ecx, WORD PTR _sfnt$[ebp+4]
	push	ecx
	push	OFFSET $SG8324
	call	_FT_Message
	add	esp, 8
$LN34@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN35@tt_face_lo
$LN31@tt_face_lo:
; Line 362
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN30@tt_face_lo
	mov	edx, DWORD PTR _sfnt$[ebp]
	push	edx
	push	OFFSET $SG8329
	call	_FT_Message
	add	esp, 8
$LN30@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN31@tt_face_lo
; Line 364
	cmp	DWORD PTR _sfnt$[ebp], 1330926671	; 4f54544fH
	je	SHORT $LN27@tt_face_lo
; Line 367
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sfnt$[ebp]
	push	edx
	call	_check_table_dir
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 368
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN27@tt_face_lo
$LN25@tt_face_lo:
; Line 371
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN24@tt_face_lo
	push	OFFSET $SG8341
	call	_FT_Message
	add	esp, 4
$LN24@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN25@tt_face_lo
; Line 373
	jmp	$Exit$48
$LN27@tt_face_lo:
; Line 377
	mov	eax, DWORD PTR _face$[ebp]
	mov	cx, WORD PTR _sfnt$[ebp+4]
	mov	WORD PTR [eax+152], cx
; Line 378
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	DWORD PTR [edx+148], eax
; Line 380
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+152]
	push	eax
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+156], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@tt_face_lo
; Line 381
	jmp	$Exit$48
$LN21@tt_face_lo:
; Line 384
	mov	eax, DWORD PTR _sfnt$[ebp+12]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN19@tt_face_lo
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+152]
	shl	eax, 4
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@tt_face_lo
$LN19@tt_face_lo:
; Line 385
	jmp	$Exit$48
$LN20@tt_face_lo:
; Line 387
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	DWORD PTR _entry$[ebp], eax
$LN18@tt_face_lo:
; Line 391
	mov	ecx, 4
	imul	edx, ecx, 22
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN17@tt_face_lo
	push	OFFSET $SG8353
	call	_FT_Message
	add	esp, 4
$LN17@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN18@tt_face_lo
; Line 393
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN14@tt_face_lo
$LN13@tt_face_lo:
	mov	ecx, DWORD PTR _nn$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$[ebp], ecx
$LN14@tt_face_lo:
	movzx	edx, WORD PTR _sfnt$[ebp+4]
	cmp	DWORD PTR _nn$[ebp], edx
	jge	$LN12@tt_face_lo
; Line 395
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 396
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 397
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 398
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 404
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax+4]
	ja	SHORT $LN10@tt_face_lo
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [edx+8], ecx
	jbe	SHORT $LN8@tt_face_lo
$LN10@tt_face_lo:
; Line 405
	jmp	$LN13@tt_face_lo
; Line 406
	jmp	SHORT $LN9@tt_face_lo
$LN8@tt_face_lo:
; Line 415
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN7@tt_face_lo
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _entry$[ebp]
	movsx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 8
	movsx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 16					; 00000010H
	movsx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 24					; 00000018H
	movsx	eax, dl
	push	eax
	push	OFFSET $SG8372
	call	_FT_Message
	add	esp, 32					; 00000020H
$LN7@tt_face_lo:
	xor	ecx, ecx
	jne	SHORT $LN8@tt_face_lo
; Line 416
	mov	edx, DWORD PTR _entry$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _entry$[ebp], edx
$LN9@tt_face_lo:
; Line 418
	jmp	$LN13@tt_face_lo
$LN12@tt_face_lo:
; Line 420
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
$LN4@tt_face_lo:
; Line 422
	mov	ecx, 4
	imul	edx, ecx, 22
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN3@tt_face_lo
	push	OFFSET $SG8377
	call	_FT_Message
	add	esp, 4
$LN3@tt_face_lo:
	xor	eax, eax
	jne	SHORT $LN4@tt_face_lo
$Exit$48:
; Line 425
	mov	eax, DWORD PTR _error$[ebp]
; Line 426
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN47@tt_face_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN47@tt_face_lo:
	DD	2
	DD	$LN46@tt_face_lo
$LN46@tt_face_lo:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN44@tt_face_lo
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN45@tt_face_lo
$LN45@tt_face_lo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN44@tt_face_lo:
	DB	115					; 00000073H
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_tt_face_load_font_dir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -8						; size = 4
_table$ = -4						; size = 4
_face$ = 8						; size = 4
_tag$ = 12						; size = 4
_stream$ = 16						; size = 4
_length$ = 20						; size = 4
_tt_face_goto_table PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 135
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_tt_face_lookup_table
	add	esp, 8
	mov	DWORD PTR _table$[ebp], eax
; Line 136
	cmp	DWORD PTR _table$[ebp], 0
	je	SHORT $LN4@tt_face_go
; Line 138
	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN3@tt_face_go
; Line 139
	mov	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx], ecx
$LN3@tt_face_go:
; Line 141
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@tt_face_go
; Line 142
	jmp	SHORT $Exit$7
$LN2@tt_face_go:
; Line 144
	jmp	SHORT $Exit$7
$LN4@tt_face_go:
; Line 145
	push	OFFSET $SG8153
	push	145					; 00000091H
	push	142					; 0000008eH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 142				; 0000008eH
	mov	DWORD PTR _error$[ebp], eax
$Exit$7:
; Line 148
	mov	eax, DWORD PTR _error$[ebp]
; Line 149
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_goto_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_zero_length$ = -9					; size = 1
_limit$ = -8						; size = 4
_entry$ = -4						; size = 4
_face$ = 8						; size = 4
_tag$ = 12						; size = 4
_tt_face_lookup_table PROC
; File d:\mozilla\modules\freetype2\src\sfnt\ttload.c
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 62
	mov	BYTE PTR _zero_length$[ebp], 0
$LN23@tt_face_lo:
; Line 71
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN22@tt_face_lo
	movsx	edx, BYTE PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	shr	eax, 8
	movsx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	shr	edx, 16					; 00000010H
	movsx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	shr	ecx, 24					; 00000018H
	movsx	edx, cl
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	push	OFFSET $SG8112
	call	_FT_Message
	add	esp, 24					; 00000018H
$LN22@tt_face_lo:
	xor	ecx, ecx
	jne	SHORT $LN23@tt_face_lo
; Line 73
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	DWORD PTR _entry$[ebp], eax
; Line 74
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+152]
	shl	edx, 4
	add	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR _limit$[ebp], edx
; Line 76
	jmp	SHORT $LN19@tt_face_lo
$LN18@tt_face_lo:
	mov	eax, DWORD PTR _entry$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _entry$[ebp], eax
$LN19@tt_face_lo:
	mov	ecx, DWORD PTR _entry$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN17@tt_face_lo
; Line 80
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _tag$[ebp]
	jne	SHORT $LN16@tt_face_lo
; Line 82
	mov	ecx, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN15@tt_face_lo
$LN14@tt_face_lo:
; Line 84
	mov	edx, 4
	imul	eax, edx, 22
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN13@tt_face_lo
	push	OFFSET $SG8122
	call	_FT_Message
	add	esp, 4
$LN13@tt_face_lo:
	xor	ecx, ecx
	jne	SHORT $LN14@tt_face_lo
; Line 85
	mov	eax, DWORD PTR _entry$[ebp]
	jmp	SHORT $LN24@tt_face_lo
$LN15@tt_face_lo:
; Line 88
	mov	BYTE PTR _zero_length$[ebp], 1
$LN16@tt_face_lo:
; Line 91
	jmp	SHORT $LN18@tt_face_lo
$LN17@tt_face_lo:
; Line 94
	movzx	edx, BYTE PTR _zero_length$[ebp]
	test	edx, edx
	je	SHORT $LN4@tt_face_lo
$LN9@tt_face_lo:
; Line 95
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN8@tt_face_lo
	push	OFFSET $SG8128
	call	_FT_Message
	add	esp, 4
$LN8@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN9@tt_face_lo
; Line 96
	jmp	SHORT $LN5@tt_face_lo
$LN4@tt_face_lo:
; Line 97
	mov	eax, 4
	imul	ecx, eax, 22
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN3@tt_face_lo
	push	OFFSET $SG8134
	call	_FT_Message
	add	esp, 4
$LN3@tt_face_lo:
	xor	edx, edx
	jne	SHORT $LN4@tt_face_lo
$LN5@tt_face_lo:
; Line 100
	xor	eax, eax
$LN24@tt_face_lo:
; Line 101
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tt_face_lookup_table ENDP
_TEXT	ENDS
END
