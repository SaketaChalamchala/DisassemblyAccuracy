; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\type42\type42.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_t42_driver_class
CONST	SEGMENT
_t42_driver_class DD 0501H
	DD	024H
	DD	FLAT:$SG9387
	DD	010000H
	DD	020000H
	DD	00H
	DD	FLAT:_T42_Driver_Init
	DD	FLAT:_T42_Driver_Done
	DD	FLAT:_T42_Get_Interface
	DD	0230H
	DD	030H
	DD	0a4H
	DD	FLAT:_T42_Face_Init
	DD	FLAT:_T42_Face_Done
	DD	FLAT:_T42_Size_Init
	DD	FLAT:_T42_Size_Done
	DD	FLAT:_T42_GlyphSlot_Init
	DD	FLAT:_T42_GlyphSlot_Done
	DD	FLAT:_T42_GlyphSlot_Load
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_T42_Size_Request
	DD	FLAT:_T42_Size_Select
_t42_service_glyph_dict DD FLAT:_t42_get_glyph_name
	DD	FLAT:_t42_get_name_index
_t42_service_ps_font_name DD FLAT:_t42_get_ps_font_name
_t42_service_ps_info DD FLAT:_t42_ps_get_font_info
	DD	FLAT:_t42_ps_get_font_extra
	DD	FLAT:_t42_ps_has_glyph_names
	DD	FLAT:_t42_ps_get_font_private
	DD	00H
_t42_services DD FLAT:$SG9372
	DD	FLAT:_t42_service_glyph_dict
	DD	FLAT:$SG9373
	DD	FLAT:_t42_service_ps_font_name
	DD	FLAT:$SG9374
	DD	FLAT:_t42_service_ps_info
	DD	FLAT:$SG9375
	DD	FLAT:$SG9376
	DD	00H
	DD	00H
_t42_keywords DD FLAT:$SG8745
	DD	03H
	DD	05H
	DD	00H
	DD	00H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8746
	DD	03H
	DD	05H
	DD	00H
	DD	04H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8747
	DD	03H
	DD	05H
	DD	00H
	DD	08H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8748
	DD	03H
	DD	05H
	DD	00H
	DD	0cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8749
	DD	03H
	DD	05H
	DD	00H
	DD	010H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8750
	DD	03H
	DD	02H
	DD	00H
	DD	014H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8751
	DD	03H
	DD	01H
	DD	00H
	DD	018H
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8752
	DD	03H
	DD	02H
	DD	00H
	DD	01aH
	DB	02H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8753
	DD	03H
	DD	02H
	DD	00H
	DD	01cH
	DB	02H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8754
	DD	02H
	DD	02H
	DD	00H
	DD	00H
	DB	02H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8755
	DD	01H
	DD	06H
	DD	00H
	DD	0e8H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8756
	DD	01H
	DD	02H
	DD	00H
	DD	012cH
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8757
	DD	01H
	DD	02H
	DD	00H
	DD	012dH
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8758
	DD	01H
	DD	03H
	DD	00H
	DD	015cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8759
	DD	05H
	DD	07H
	DD	00H
	DD	00H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8760
	DD	05H
	DD	0bH
	DD	FLAT:_t42_parse_font_matrix
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8761
	DD	05H
	DD	0bH
	DD	FLAT:_t42_parse_encoding
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8762
	DD	05H
	DD	0bH
	DD	FLAT:_t42_parse_charstrings
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8763
	DD	05H
	DD	0bH
	DD	FLAT:_t42_parse_sfnts
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
_DATA	SEGMENT
$SG8193	DB	'.notdef', 00H
$SG8207	DB	'.notdef', 00H
$SG8238	DB	'postscript-cmaps', 00H
	ORG $+3
$SG8240	DB	'psaux', 00H
	ORG $+2
$SG8243	DB	'T42_Face_Init: cannot access `psaux'' module', 0aH, 00H
	ORG $+3
$SG8244	DB	'd:\mozilla\modules\freetype2\src\type42\t42objs.c', 00H
	ORG $+2
$SG8250	DB	'Type 42 driver', 0aH, 00H
$SG8254	DB	'T42_Face_Init: invalid face index', 0aH, 00H
	ORG $+1
$SG8255	DB	'd:\mozilla\modules\freetype2\src\type42\t42objs.c', 00H
	ORG $+2
$SG8258	DB	'Regular', 00H
$SG8279	DB	'truetype', 00H
	ORG $+3
$SG9372	DB	'glyph-dict', 00H
	ORG $+1
$SG9373	DB	'postscript-font-name', 00H
	ORG $+3
$SG9374	DB	'postscript-info', 00H
$SG9375	DB	'xf86-driver-name', 00H
	ORG $+3
$SG9376	DB	'Type 42', 00H
$SG9387	DB	'type42', 00H
	ORG $+1
$SG8384	DB	'truetype', 00H
	ORG $+3
$SG8386	DB	'T42_Driver_Init: cannot access `truetype'' module', 0aH, 00H
	ORG $+2
$SG8387	DB	'd:\mozilla\modules\freetype2\src\type42\t42objs.c', 00H
	ORG $+2
$SG8478	DB	'T42_GlyphSlot_Load: glyph index %d', 0aH, 00H
$SG8745	DB	'version', 00H
$SG8746	DB	'Notice', 00H
	ORG $+1
$SG8747	DB	'FullName', 00H
	ORG $+3
$SG8748	DB	'FamilyName', 00H
	ORG $+1
$SG8749	DB	'Weight', 00H
	ORG $+1
$SG8750	DB	'ItalicAngle', 00H
$SG8751	DB	'isFixedPitch', 00H
	ORG $+3
$SG8752	DB	'UnderlinePosition', 00H
	ORG $+2
$SG8753	DB	'UnderlineThickness', 00H
	ORG $+1
$SG8754	DB	'FSType', 00H
	ORG $+1
$SG8755	DB	'FontName', 00H
	ORG $+3
$SG8756	DB	'PaintType', 00H
	ORG $+2
$SG8757	DB	'FontType', 00H
	ORG $+3
$SG8758	DB	'StrokeWidth', 00H
$SG8759	DB	'FontBBox', 00H
	ORG $+3
$SG8760	DB	'FontMatrix', 00H
	ORG $+1
$SG8761	DB	'Encoding', 00H
	ORG $+3
$SG8762	DB	'CharStrings', 00H
$SG8763	DB	'sfnts', 00H
	ORG $+2
$SG8781	DB	'%!PS-TrueTypeFont', 00H
	ORG $+2
$SG8786	DB	'  not a Type42 font', 0aH, 00H
	ORG $+3
$SG8787	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8833	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8835	DB	't1_parse_font_matrix: invalid font matrix', 0aH, 00H
	ORG $+1
$SG8836	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8850	DB	't42_parse_encoding: out of bounds', 0aH, 00H
	ORG $+1
$SG8851	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8877	DB	'.notdef', 00H
$SG8888	DB	'encoding end', 0aH, 00H
	ORG $+2
$SG8894	DB	'encoding end', 0aH, 00H
	ORG $+2
$SG8909	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8915	DB	'StandardEncoding', 00H
	ORG $+3
$SG8919	DB	'ExpertEncoding', 00H
	ORG $+1
$SG8923	DB	'ISOLatin1Encoding', 00H
	ORG $+2
$SG8925	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8953	DB	't42_parse_sfnts: can''t find begin of sfnts vector', 0aH
	DB	00H
	ORG $+1
$SG8954	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8966	DB	't42_parse_sfnts: invalid data in sfnts array', 0aH, 00H
	ORG $+2
$SG8967	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8976	DB	't42_parse_sfnts: can''t handle mixed binary and hex stri'
	DB	'ngs', 0aH, 00H
$SG8977	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8979	DB	't42_parse_sfnts: invalid string size', 0aH, 00H
	ORG $+2
$SG8980	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8983	DB	't42_parse_sfnts: too much binary data', 0aH, 00H
	ORG $+1
$SG8984	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8987	DB	't42_parse_sfnts: invalid data in sfnts array', 0aH, 00H
	ORG $+2
$SG8988	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG8991	DB	't42_parse_sfnts: invalid string', 0aH, 00H
	ORG $+3
$SG8992	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG9005	DB	't42_parse_sfnts: invalid data in sfnts array', 0aH, 00H
	ORG $+2
$SG9006	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG9033	DB	't42_parse_sfnts: too much binary data', 0aH, 00H
	ORG $+1
$SG9034	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG9035	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG9060	DB	't42_parse_charstrings: out of bounds', 0aH, 00H
	ORG $+2
$SG9061	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG9079	DB	't42_parse_charstrings: invalid token', 0aH, 00H
	ORG $+2
$SG9080	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG9082	DB	't42_parse_charstrings: out of bounds', 0aH, 00H
	ORG $+2
$SG9083	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG9094	DB	't42_parse_charstrings: out of bounds', 0aH, 00H
	ORG $+2
$SG9095	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG9100	DB	't42_parse_charstrings: out of bounds', 0aH, 00H
	ORG $+2
$SG9101	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG9105	DB	'.notdef', 00H
$SG9108	DB	't42_parse_charstrings: out of bounds', 0aH, 00H
	ORG $+2
$SG9109	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG9113	DB	't42_parse_charstrings: no /.notdef glyph', 0aH, 00H
	ORG $+2
$SG9114	DB	'd:\mozilla\modules\freetype2\src\type42\t42parse.c', 00H
	ORG $+1
$SG9118	DB	'.notdef', 00H
$SG9172	DB	'FontDirectory', 00H
	ORG $+2
$SG9179	DB	'known', 00H
	ORG $+2
$SG8176	DB	'T42_Open_Face: cannot handle FontType %d', 0aH, 00H
	ORG $+2
$SG8177	DB	'd:\mozilla\modules\freetype2\src\type42\t42objs.c', 00H
	ORG $+2
$SG8179	DB	'T42_Open_Face: no charstrings array in face', 0aH, 00H
	ORG $+3
$SG8180	DB	'd:\mozilla\modules\freetype2\src\type42\t42objs.c', 00H
_DATA	ENDS
EXTRN	_memcmp:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp__atol:PROC
EXTRN	_FT_Open_Face:PROC
EXTRN	_FT_Done_Face:PROC
EXTRN	_FT_Select_Size:PROC
EXTRN	_FT_Request_Size:PROC
EXTRN	_FT_DivFix:PROC
EXTRN	_ft_service_list_lookup:PROC
EXTRN	_FT_Get_Module:PROC
EXTRN	_FT_New_Size:PROC
EXTRN	_FT_Done_Size:PROC
EXTRN	_FT_Activate_Size:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_ft_mem_strcpyn:PROC
EXTRN	_FT_CMap_New:PROC
EXTRN	_FT_Get_Module_Interface:PROC
EXTRN	_ft_module_get_service:PROC
EXTRN	_FT_New_GlyphSlot:PROC
EXTRN	_FT_Done_GlyphSlot:PROC
EXTRN	_ft_glyphslot_free_bitmap:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_FT_List_Find:PROC
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Skip:PROC
EXTRN	_FT_Stream_Read:PROC
EXTRN	_FT_Stream_EnterFrame:PROC
EXTRN	_FT_Stream_ExitFrame:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_t42_interface$ = 12					; size = 4
_T42_Get_Interface PROC
; File d:\mozilla\modules\freetype2\src\type42\t42drivr.c
; Line 191
	push	ebp
	mov	ebp, esp
; Line 192
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 194
	mov	ecx, DWORD PTR _t42_interface$[ebp]
	push	ecx
	push	OFFSET _t42_services
	call	_ft_service_list_lookup
	add	esp, 8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_T42_Get_Interface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_afont_private$ = 12					; size = 4
_t42_ps_get_font_private PROC
; File d:\mozilla\modules\freetype2\src\type42\t42drivr.c
; Line 155
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 156
	mov	esi, DWORD PTR _face$[ebp]
	add	esi, 168				; 000000a8H
	mov	ecx, 49					; 00000031H
	mov	edi, DWORD PTR _afont_private$[ebp]
	rep movsd
; Line 158
	xor	eax, eax
; Line 159
	pop	edi
	pop	esi
	pop	ebp
	ret	0
_t42_ps_get_font_private ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_t42_ps_has_glyph_names PROC
; File d:\mozilla\modules\freetype2\src\type42\t42drivr.c
; Line 145
	push	ebp
	mov	ebp, esp
; Line 146
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 148
	mov	eax, 1
; Line 149
	pop	ebp
	ret	0
_t42_ps_has_glyph_names ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_afont_extra$ = 12					; size = 4
_t42_ps_get_font_extra PROC
; File d:\mozilla\modules\freetype2\src\type42\t42drivr.c
; Line 136
	push	ebp
	mov	ebp, esp
; Line 137
	mov	eax, DWORD PTR _face$[ebp]
	mov	cx, WORD PTR [eax+164]
	mov	edx, DWORD PTR _afont_extra$[ebp]
	mov	WORD PTR [edx], cx
; Line 139
	xor	eax, eax
; Line 140
	pop	ebp
	ret	0
_t42_ps_get_font_extra ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_afont_info$ = 12					; size = 4
_t42_ps_get_font_info PROC
; File d:\mozilla\modules\freetype2\src\type42\t42drivr.c
; Line 126
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 127
	mov	esi, DWORD PTR _face$[ebp]
	add	esi, 132				; 00000084H
	mov	ecx, 8
	mov	edi, DWORD PTR _afont_info$[ebp]
	rep movsd
; Line 129
	xor	eax, eax
; Line 130
	pop	edi
	pop	esi
	pop	ebp
	ret	0
_t42_ps_get_font_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_t42_get_ps_font_name PROC
; File d:\mozilla\modules\freetype2\src\type42\t42drivr.c
; Line 106
	push	ebp
	mov	ebp, esp
; Line 107
	mov	eax, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [eax+364]
; Line 108
	pop	ebp
	ret	0
_t42_get_ps_font_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gname$1 = -8						; size = 4
_i$ = -4						; size = 4
_face$ = 8						; size = 4
_glyph_name$ = 12					; size = 4
_t42_get_name_index PROC
; File d:\mozilla\modules\freetype2\src\type42\t42drivr.c
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 78
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@t42_get_na
$LN3@t42_get_na:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@t42_get_na:
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+416]
	jge	SHORT $LN2@t42_get_na
; Line 80
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _gname$1[ebp], eax
; Line 83
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _glyph_name$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _gname$1[ebp]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	ecx, eax
	jne	SHORT $LN1@t42_get_na
	mov	ecx, DWORD PTR _gname$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_name$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@t42_get_na
; Line 84
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+424]
	mov	esi, esp
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__atol
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN5@t42_get_na
$LN1@t42_get_na:
; Line 85
	jmp	$LN3@t42_get_na
$LN2@t42_get_na:
; Line 87
	xor	eax, eax
$LN5@t42_get_na:
; Line 88
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t42_get_name_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_buffer$ = 16						; size = 4
_buffer_max$ = 20					; size = 4
_t42_get_glyph_name PROC
; File d:\mozilla\modules\freetype2\src\type42\t42drivr.c
; Line 64
	push	ebp
	mov	ebp, esp
; Line 65
	mov	eax, DWORD PTR _buffer_max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+420]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_ft_mem_strcpyn
	add	esp, 12					; 0000000cH
; Line 67
	xor	eax, eax
; Line 68
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t42_get_glyph_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -28						; size = 4
_max_objects$ = -24					; size = 4
_objects$ = -20						; size = 4
_dummy_object$ = -12					; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_field$ = 16						; size = 4
_t42_load_keyword PROC
; File d:\mozilla\modules\freetype2\src\type42\t42parse.c
; Line 1015
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1019
	mov	DWORD PTR _max_objects$[ebp], 0
; Line 1023
	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax+8], 11			; 0000000bH
	jne	SHORT $LN10@t42_load_k
; Line 1025
	mov	esi, esp
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1026
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _error$[ebp], eax
; Line 1027
	jmp	$Exit$16
$LN10@t42_load_k:
; Line 1033
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 2
	je	SHORT $LN6@t42_load_k
	cmp	DWORD PTR tv71[ebp], 3
	je	SHORT $LN7@t42_load_k
	cmp	DWORD PTR tv71[ebp], 5
	je	SHORT $LN5@t42_load_k
	jmp	SHORT $LN4@t42_load_k
$LN7@t42_load_k:
; Line 1036
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 132				; 00000084H
	mov	DWORD PTR _dummy_object$[ebp], eax
; Line 1037
	jmp	SHORT $LN8@t42_load_k
$LN6@t42_load_k:
; Line 1040
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 164				; 000000a4H
	mov	DWORD PTR _dummy_object$[ebp], ecx
; Line 1041
	jmp	SHORT $LN8@t42_load_k
$LN5@t42_load_k:
; Line 1044
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 460				; 000001ccH
	mov	DWORD PTR _dummy_object$[ebp], edx
; Line 1045
	jmp	SHORT $LN8@t42_load_k
$LN4@t42_load_k:
; Line 1048
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 132				; 00000084H
	mov	DWORD PTR _dummy_object$[ebp], eax
$LN8@t42_load_k:
; Line 1051
	lea	ecx, DWORD PTR _dummy_object$[ebp]
	mov	DWORD PTR _objects$[ebp], ecx
; Line 1054
	mov	edx, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [edx+8], 9
	je	SHORT $LN2@t42_load_k
	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax+8], 10			; 0000000aH
	jne	SHORT $LN3@t42_load_k
$LN2@t42_load_k:
; Line 1056
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _max_objects$[ebp]
	push	ecx
	mov	edx, DWORD PTR _objects$[ebp]
	push	edx
	mov	eax, DWORD PTR _field$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1057
	jmp	SHORT $Exit$16
$LN3@t42_load_k:
; Line 1059
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _max_objects$[ebp]
	push	ecx
	mov	edx, DWORD PTR _objects$[ebp]
	push	edx
	mov	eax, DWORD PTR _field$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$Exit$16:
; Line 1062
	mov	eax, DWORD PTR _error$[ebp]
; Line 1063
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@t42_load_k
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@t42_load_k:
	DD	1
	DD	$LN14@t42_load_k
$LN14@t42_load_k:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@t42_load_k
$LN13@t42_load_k:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_t42_load_keyword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -4						; size = 4
_c$ = 8							; size = 1
_t42_is_space PROC
; File d:\mozilla\modules\freetype2\src\type42\t42parse.c
; Line 241
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 244
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN3@t42_is_spa
	movzx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 9
	je	SHORT $LN3@t42_is_spa
	movzx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN3@t42_is_spa
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN3@t42_is_spa
	movzx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 12					; 0000000cH
	je	SHORT $LN3@t42_is_spa
	movzx	edx, BYTE PTR _c$[ebp]
	test	edx, edx
	je	SHORT $LN3@t42_is_spa
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN4@t42_is_spa
$LN3@t42_is_spa:
	mov	DWORD PTR tv76[ebp], 1
$LN4@t42_is_spa:
	mov	eax, DWORD PTR tv76[ebp]
; Line 245
	mov	esp, ebp
	pop	ebp
	ret	0
_t42_is_space ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv233 = -96						; size = 4
tv80 = -92						; size = 4
tv79 = -88						; size = 4
_p$1 = -84						; size = 4
_len$2 = -80						; size = 4
_i$3 = -76						; size = 4
_status$ = -72						; size = 4
_allocated$ = -65					; size = 1
_string_buf$ = -64					; size = 4
_real_size$ = -56					; size = 4
_old_string_size$ = -48					; size = 4
_string_size$ = -44					; size = 4
_n$ = -40						; size = 4
_count$ = -36						; size = 4
_num_tables$ = -32					; size = 4
_error$ = -24						; size = 4
_limit$ = -16						; size = 4
_cur$ = -12						; size = 4
_memory$ = -8						; size = 4
_parser$ = -4						; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_t42_parse_sfnts PROC
; File d:\mozilla\modules\freetype2\src\type42\t42parse.c
; Line 520
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 521
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 522
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _memory$[ebp], edx
; Line 524
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 526
	mov	DWORD PTR _num_tables$[ebp], 0
; Line 530
	mov	DWORD PTR _string_buf$[ebp], 0
; Line 531
	mov	BYTE PTR _allocated$[ebp], 0
; Line 550
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 552
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN42@t42_parse_
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax], edx
	cmp	DWORD PTR tv79[ebp], 91			; 0000005bH
	je	SHORT $LN46@t42_parse_
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN47@t42_parse_
$LN46@t42_parse_:
	mov	DWORD PTR tv80[ebp], 0
$LN47@t42_parse_:
	cmp	DWORD PTR tv80[ebp], 0
	je	SHORT $LN43@t42_parse_
$LN42@t42_parse_:
; Line 554
	push	OFFSET $SG8953
	call	_FT_Message
	add	esp, 4
; Line 555
	push	OFFSET $SG8954
	push	555					; 0000022bH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 556
	jmp	$Fail$52
$LN43@t42_parse_:
; Line 559
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 560
	mov	DWORD PTR _status$[ebp], 0
; Line 561
	mov	DWORD PTR _string_size$[ebp], 0
; Line 562
	mov	DWORD PTR _old_string_size$[ebp], 0
; Line 563
	mov	DWORD PTR _count$[ebp], 0
$LN41@t42_parse_:
; Line 565
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	$LN40@t42_parse_
; Line 567
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 569
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 93					; 0000005dH
	jne	SHORT $LN39@t42_parse_
; Line 571
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax], edx
; Line 572
	jmp	$Exit$53
	jmp	$LN38@t42_parse_
$LN39@t42_parse_:
; Line 575
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 60					; 0000003cH
	jne	$LN37@t42_parse_
; Line 577
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 578
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN36@t42_parse_
; Line 579
	jmp	$Exit$53
$LN36@t42_parse_:
; Line 582
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR _cur$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _string_size$[ebp], eax
; Line 583
	jne	SHORT $LN35@t42_parse_
; Line 585
	push	OFFSET $SG8966
	call	_FT_Message
	add	esp, 4
; Line 586
	push	OFFSET $SG8967
	push	586					; 0000024aH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 587
	jmp	$Fail$52
$LN35@t42_parse_:
; Line 589
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _string_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _old_string_size$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _string_buf$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN34@t42_parse_
; Line 590
	jmp	$Fail$52
$LN34@t42_parse_:
; Line 592
	mov	BYTE PTR _allocated$[ebp], 1
; Line 594
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 595
	mov	esi, esp
	push	1
	lea	eax, DWORD PTR _real_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 596
	mov	eax, DWORD PTR _string_size$[ebp]
	mov	DWORD PTR _old_string_size$[ebp], eax
; Line 597
	mov	ecx, DWORD PTR _real_size$[ebp]
	mov	DWORD PTR _string_size$[ebp], ecx
	jmp	$LN38@t42_parse_
$LN37@t42_parse_:
; Line 600
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	eax, 48					; 00000030H
	cmp	eax, 10					; 0000000aH
	jae	$LN38@t42_parse_
; Line 602
	movzx	ecx, BYTE PTR _allocated$[ebp]
	test	ecx, ecx
	je	SHORT $LN31@t42_parse_
; Line 605
	push	OFFSET $SG8976
	call	_FT_Message
	add	esp, 4
; Line 606
	push	OFFSET $SG8977
	push	606					; 0000025eH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 607
	jmp	$Fail$52
$LN31@t42_parse_:
; Line 610
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _string_size$[ebp], eax
; Line 611
	cmp	DWORD PTR _string_size$[ebp], 0
	jge	SHORT $LN30@t42_parse_
; Line 613
	push	OFFSET $SG8979
	call	_FT_Message
	add	esp, 4
; Line 614
	push	OFFSET $SG8980
	push	614					; 00000266H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 615
	jmp	$Fail$52
$LN30@t42_parse_:
; Line 618
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 619
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN29@t42_parse_
; Line 620
	jmp	$LN44@t42_parse_
$LN29@t42_parse_:
; Line 622
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR _string_buf$[ebp], ecx
; Line 624
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _string_size$[ebp]
	jge	SHORT $LN28@t42_parse_
; Line 626
	push	OFFSET $SG8983
	call	_FT_Message
	add	esp, 4
; Line 627
	push	OFFSET $SG8984
	push	627					; 00000273H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 628
	jmp	$Fail$52
; Line 630
	jmp	SHORT $LN38@t42_parse_
$LN28@t42_parse_:
; Line 631
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _string_size$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx], ecx
$LN38@t42_parse_:
; Line 634
	cmp	DWORD PTR _string_buf$[ebp], 0
	jne	SHORT $LN26@t42_parse_
; Line 636
	push	OFFSET $SG8987
	call	_FT_Message
	add	esp, 4
; Line 637
	push	OFFSET $SG8988
	push	637					; 0000027dH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 638
	jmp	$Fail$52
$LN26@t42_parse_:
; Line 643
	mov	eax, DWORD PTR _string_size$[ebp]
	and	eax, 1
	je	SHORT $LN25@t42_parse_
	mov	ecx, DWORD PTR _string_buf$[ebp]
	add	ecx, DWORD PTR _string_size$[ebp]
	movzx	edx, BYTE PTR [ecx-1]
	test	edx, edx
	jne	SHORT $LN25@t42_parse_
; Line 644
	mov	eax, DWORD PTR _string_size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _string_size$[ebp], eax
$LN25@t42_parse_:
; Line 646
	cmp	DWORD PTR _string_size$[ebp], 0
	jne	SHORT $LN24@t42_parse_
; Line 648
	push	OFFSET $SG8991
	call	_FT_Message
	add	esp, 4
; Line 649
	push	OFFSET $SG8992
	push	649					; 00000289H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 650
	jmp	$Fail$52
$LN24@t42_parse_:
; Line 653
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN23@t42_parse_
$LN22@t42_parse_:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN23@t42_parse_:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _string_size$[ebp]
	jge	$LN21@t42_parse_
; Line 655
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR tv233[ebp], eax
	cmp	DWORD PTR tv233[ebp], 0
	je	SHORT $LN18@t42_parse_
	cmp	DWORD PTR tv233[ebp], 1
	je	$LN13@t42_parse_
	cmp	DWORD PTR tv233[ebp], 2
	je	$LN6@t42_parse_
	jmp	$LN19@t42_parse_
$LN18@t42_parse_:
; Line 659
	cmp	DWORD PTR _count$[ebp], 12		; 0000000cH
	jae	SHORT $LN17@t42_parse_
; Line 661
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	mov	eax, DWORD PTR _string_buf$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx], al
	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
; Line 662
	jmp	SHORT $LN22@t42_parse_
; Line 664
	jmp	$LN13@t42_parse_
$LN17@t42_parse_:
; Line 666
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 4
	mov	eax, 1
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [eax+492]
	movzx	ecx, BYTE PTR [eax+ecx]
	add	edx, ecx
	mov	DWORD PTR _num_tables$[ebp], edx
; Line 667
	mov	DWORD PTR _status$[ebp], 1
; Line 668
	mov	edx, DWORD PTR _num_tables$[ebp]
	shl	edx, 4
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+496], edx
; Line 670
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _limit$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _face$[ebp]
	cmp	edx, DWORD PTR [eax+496]
	jae	SHORT $LN15@t42_parse_
; Line 672
	push	OFFSET $SG9005
	call	_FT_Message
	add	esp, 4
; Line 673
	push	OFFSET $SG9006
	push	673					; 000002a1H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 674
	jmp	$Fail$52
$LN15@t42_parse_:
; Line 677
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+492]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+496]
	push	edx
	push	12					; 0000000cH
	push	1
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+492], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@t42_parse_
; Line 678
	jmp	$Fail$52
$LN13@t42_parse_:
; Line 684
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR [edx+496]
	jae	SHORT $LN12@t42_parse_
; Line 686
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	mov	eax, DWORD PTR _string_buf$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx], al
	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
; Line 687
	jmp	$LN22@t42_parse_
; Line 689
	jmp	$LN6@t42_parse_
$LN12@t42_parse_:
; Line 695
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN10@t42_parse_
$LN9@t42_parse_:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN10@t42_parse_:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _num_tables$[ebp]
	jge	$LN8@t42_parse_
; Line 697
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	mov	eax, DWORD PTR _i$3[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR [edx+eax+24]
	mov	DWORD PTR _p$1[ebp], ecx
; Line 700
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$1[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$1[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$1[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$1[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	edx, ecx
	mov	DWORD PTR _len$2[ebp], edx
; Line 703
	mov	edx, DWORD PTR _len$2[ebp]
	add	edx, 3
	and	edx, -4					; fffffffcH
	mov	eax, DWORD PTR _face$[ebp]
	add	edx, DWORD PTR [eax+496]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+496], edx
; Line 704
	jmp	$LN9@t42_parse_
$LN8@t42_parse_:
; Line 706
	mov	DWORD PTR _status$[ebp], 2
; Line 710
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+496]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _num_tables$[ebp]
	shl	ecx, 4
	add	ecx, 12					; 0000000cH
	push	ecx
	push	1
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+492], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@t42_parse_
; Line 711
	jmp	$Fail$52
$LN6@t42_parse_:
; Line 717
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR [edx+496]
	jb	SHORT $LN5@t42_parse_
; Line 719
	push	OFFSET $SG9033
	call	_FT_Message
	add	esp, 4
; Line 720
	push	OFFSET $SG9034
	push	720					; 000002d0H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 721
	jmp	SHORT $Fail$52
$LN5@t42_parse_:
; Line 723
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	mov	eax, DWORD PTR _string_buf$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx], al
	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
$LN19@t42_parse_:
; Line 725
	jmp	$LN22@t42_parse_
$LN21@t42_parse_:
; Line 727
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 728
	jmp	$LN41@t42_parse_
$LN40@t42_parse_:
; Line 731
	push	OFFSET $SG9035
	push	731					; 000002dbH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$Fail$52:
; Line 734
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx+12], eax
$Exit$53:
; Line 737
	movzx	ecx, BYTE PTR _allocated$[ebp]
	test	ecx, ecx
	je	SHORT $LN44@t42_parse_
$LN3@t42_parse_:
; Line 738
	mov	edx, DWORD PTR _string_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _string_buf$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@t42_parse_
$LN44@t42_parse_:
; Line 739
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN51@t42_parse_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN51@t42_parse_:
	DD	2
	DD	$LN50@t42_parse_
$LN50@t42_parse_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN48@t42_parse_
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN49@t42_parse_
$LN49@t42_parse_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN48@t42_parse_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_t42_parse_sfnts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$1 = -56						; size = 4
_count$2 = -52						; size = 4
_notdef_found$ = -45					; size = 1
_notdef_index$ = -44					; size = 4
_n$ = -40						; size = 4
_limit$ = -36						; size = 4
_cur$ = -32						; size = 4
_psaux$ = -28						; size = 4
_error$ = -24						; size = 4
_memory$ = -20						; size = 4
_swap_table$ = -16					; size = 4
_name_table$ = -12					; size = 4
_code_table$ = -8					; size = 4
_parser$ = -4						; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_t42_parse_charstrings PROC
; File d:\mozilla\modules\freetype2\src\type42\t42parse.c
; Line 745
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 746
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 747
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 200				; 000000c8H
	mov	DWORD PTR _code_table$[ebp], ecx
; Line 748
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 148				; 00000094H
	mov	DWORD PTR _name_table$[ebp], edx
; Line 749
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 252				; 000000fcH
	mov	DWORD PTR _swap_table$[ebp], eax
; Line 750
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _memory$[ebp], edx
; Line 753
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+488]
	mov	DWORD PTR _psaux$[ebp], ecx
; Line 756
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _limit$[ebp], eax
; Line 758
	mov	DWORD PTR _notdef_index$[ebp], 0
; Line 759
	mov	BYTE PTR _notdef_found$[ebp], 0
; Line 762
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 764
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN41@t42_parse_
; Line 766
	push	OFFSET $SG9060
	call	_FT_Message
	add	esp, 4
; Line 767
	push	OFFSET $SG9061
	push	767					; 000002ffH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 768
	jmp	$Fail$44
$LN41@t42_parse_:
; Line 771
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	sub	edx, 48					; 00000030H
	cmp	edx, 10					; 0000000aH
	jae	SHORT $LN40@t42_parse_
; Line 773
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+144], eax
; Line 774
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN39@t42_parse_
; Line 775
	jmp	$LN42@t42_parse_
$LN39@t42_parse_:
; Line 777
	jmp	$LN38@t42_parse_
$LN40@t42_parse_:
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 60					; 0000003cH
	jne	$LN37@t42_parse_
; Line 781
	mov	DWORD PTR _count$2[ebp], 0
; Line 784
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 785
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN36@t42_parse_
; Line 786
	jmp	$LN42@t42_parse_
$LN36@t42_parse_:
; Line 787
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 788
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
$LN35@t42_parse_:
; Line 790
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN34@t42_parse_
; Line 792
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN33@t42_parse_
; Line 793
	mov	edx, DWORD PTR _count$2[ebp]
	add	edx, 1
	mov	DWORD PTR _count$2[ebp], edx
	jmp	SHORT $LN32@t42_parse_
$LN33@t42_parse_:
; Line 794
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 62					; 0000003eH
	jne	SHORT $LN32@t42_parse_
; Line 796
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _count$2[ebp]
	mov	DWORD PTR [eax+144], ecx
; Line 797
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], eax
; Line 798
	jmp	SHORT $LN34@t42_parse_
$LN32@t42_parse_:
; Line 800
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 801
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN30@t42_parse_
; Line 802
	jmp	$LN42@t42_parse_
$LN30@t42_parse_:
; Line 803
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 804
	jmp	$LN35@t42_parse_
$LN34@t42_parse_:
; Line 806
	jmp	SHORT $LN38@t42_parse_
$LN37@t42_parse_:
; Line 808
	push	OFFSET $SG9079
	call	_FT_Message
	add	esp, 4
; Line 809
	push	OFFSET $SG9080
	push	809					; 00000329H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 810
	jmp	$Fail$44
$LN38@t42_parse_:
; Line 813
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN28@t42_parse_
; Line 815
	push	OFFSET $SG9082
	call	_FT_Message
	add	esp, 4
; Line 816
	push	OFFSET $SG9083
	push	816					; 00000330H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 817
	jmp	$Fail$44
$LN28@t42_parse_:
; Line 824
	mov	esi, esp
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+144]
	push	eax
	mov	ecx, DWORD PTR _code_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 825
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN27@t42_parse_
; Line 826
	jmp	$Fail$44
$LN27@t42_parse_:
; Line 830
	mov	esi, esp
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	mov	edx, DWORD PTR _name_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 831
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN26@t42_parse_
; Line 832
	jmp	$Fail$44
$LN26@t42_parse_:
; Line 837
	mov	esi, esp
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _swap_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 838
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN25@t42_parse_
; Line 839
	jmp	$Fail$44
$LN25@t42_parse_:
; Line 841
	mov	DWORD PTR _n$[ebp], 0
$LN24@t42_parse_:
; Line 848
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 850
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 851
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN22@t42_parse_
; Line 852
	jmp	$LN23@t42_parse_
$LN22@t42_parse_:
; Line 859
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 101				; 00000065H
	jne	SHORT $LN21@t42_parse_
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 3
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN21@t42_parse_
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 110				; 0000006eH
	jne	SHORT $LN21@t42_parse_
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 100				; 00000064H
	jne	SHORT $LN21@t42_parse_
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	push	edx
	call	_t42_is_space
	add	esp, 4
	test	eax, eax
	je	SHORT $LN21@t42_parse_
; Line 860
	jmp	$LN23@t42_parse_
$LN21@t42_parse_:
; Line 861
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	jne	SHORT $LN20@t42_parse_
; Line 862
	jmp	$LN23@t42_parse_
$LN20@t42_parse_:
; Line 864
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 865
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN19@t42_parse_
; Line 867
	push	OFFSET $SG9094
	call	_FT_Message
	add	esp, 4
; Line 868
	push	OFFSET $SG9095
	push	868					; 00000364H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 869
	jmp	$Fail$44
$LN19@t42_parse_:
; Line 871
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN18@t42_parse_
; Line 872
	jmp	$LN42@t42_parse_
$LN18@t42_parse_:
; Line 874
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	$LN17@t42_parse_
; Line 879
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN16@t42_parse_
; Line 881
	push	OFFSET $SG9100
	call	_FT_Message
	add	esp, 4
; Line 882
	push	OFFSET $SG9101
	push	882					; 00000372H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 883
	jmp	$Fail$44
$LN16@t42_parse_:
; Line 886
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
; Line 887
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _len$1[ebp], ecx
; Line 889
	mov	edx, DWORD PTR _len$1[ebp]
	add	edx, 1
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _name_table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 890
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@t42_parse_
; Line 891
	jmp	$Fail$44
$LN15@t42_parse_:
; Line 894
	mov	edx, DWORD PTR _name_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _len$1[ebp]
	mov	BYTE PTR [edx+eax], 0
; Line 899
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 46					; 0000002eH
	jne	SHORT $LN14@t42_parse_
	mov	eax, DWORD PTR _name_table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	OFFSET $SG9105
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@t42_parse_
; Line 901
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _notdef_index$[ebp], ecx
; Line 902
	mov	BYTE PTR _notdef_found$[ebp], 1
$LN14@t42_parse_:
; Line 905
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 907
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 909
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 910
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN13@t42_parse_
; Line 912
	push	OFFSET $SG9108
	call	_FT_Message
	add	esp, 4
; Line 913
	push	OFFSET $SG9109
	push	913					; 00000391H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 914
	jmp	$Fail$44
$LN13@t42_parse_:
; Line 917
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _len$1[ebp], ecx
; Line 919
	mov	edx, DWORD PTR _len$1[ebp]
	add	edx, 1
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 920
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@t42_parse_
; Line 921
	jmp	$Fail$44
$LN12@t42_parse_:
; Line 923
	mov	edx, DWORD PTR _code_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _len$1[ebp]
	mov	BYTE PTR [edx+eax], 0
; Line 925
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
; Line 926
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx+144]
	jb	SHORT $LN17@t42_parse_
; Line 927
	jmp	SHORT $LN23@t42_parse_
$LN17@t42_parse_:
; Line 929
	jmp	$LN24@t42_parse_
$LN23@t42_parse_:
; Line 931
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+144], edx
; Line 933
	movzx	eax, BYTE PTR _notdef_found$[ebp]
	test	eax, eax
	jne	SHORT $LN10@t42_parse_
; Line 935
	push	OFFSET $SG9113
	call	_FT_Message
	add	esp, 4
; Line 936
	push	OFFSET $SG9114
	push	936					; 000003a8H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 937
	jmp	$Fail$44
$LN10@t42_parse_:
; Line 942
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _name_table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	push	OFFSET $SG9118
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	$LN9@t42_parse_
; Line 953
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _name_table$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _name_table$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	push	0
	mov	ecx, DWORD PTR _swap_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _swap_table$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 954
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@t42_parse_
; Line 955
	jmp	$Fail$44
$LN8@t42_parse_:
; Line 960
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _code_table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _code_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	push	1
	mov	edx, DWORD PTR _swap_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _swap_table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 961
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@t42_parse_
; Line 962
	jmp	$Fail$44
$LN7@t42_parse_:
; Line 967
	mov	edx, DWORD PTR _name_table$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	esi, esp
	mov	ecx, DWORD PTR _notdef_index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _name_table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _notdef_index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	2
	mov	ecx, DWORD PTR _swap_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _swap_table$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 968
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@t42_parse_
; Line 969
	jmp	$Fail$44
$LN6@t42_parse_:
; Line 974
	mov	ecx, DWORD PTR _code_table$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	esi, esp
	mov	eax, DWORD PTR _notdef_index$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _code_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _notdef_index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	3
	mov	eax, DWORD PTR _swap_table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _swap_table$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 975
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@t42_parse_
; Line 976
	jmp	$Fail$44
$LN5@t42_parse_:
; Line 980
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _swap_table$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _swap_table$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	mov	ecx, DWORD PTR _notdef_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _name_table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 981
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@t42_parse_
; Line 982
	jmp	$Fail$44
$LN4@t42_parse_:
; Line 986
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _swap_table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _swap_table$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	mov	ecx, DWORD PTR _notdef_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 987
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@t42_parse_
; Line 988
	jmp	$Fail$44
$LN3@t42_parse_:
; Line 992
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _swap_table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _swap_table$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	push	0
	mov	ecx, DWORD PTR _name_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name_table$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 993
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@t42_parse_
; Line 994
	jmp	SHORT $Fail$44
$LN2@t42_parse_:
; Line 998
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _swap_table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _swap_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	push	0
	mov	edx, DWORD PTR _code_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 999
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@t42_parse_
; Line 1000
	jmp	SHORT $Fail$44
$LN9@t42_parse_:
; Line 1004
	jmp	SHORT $LN42@t42_parse_
$Fail$44:
; Line 1007
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN42@t42_parse_:
; Line 1008
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t42_parse_charstrings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$1 = -64						; size = 4
_charcode$2 = -60					; size = 4
_notdef$3 = -56						; size = 4
_only_immediates$4 = -49				; size = 1
_error$5 = -44						; size = 4
_memory$6 = -36						; size = 4
_char_table$7 = -32					; size = 4
_n$8 = -28						; size = 4
_count$9 = -24						; size = 4
_encode$10 = -20					; size = 4
_psaux$ = -16						; size = 4
_limit$ = -12						; size = 4
_cur$ = -8						; size = 4
_parser$ = -4						; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_t42_parse_encoding PROC
; File d:\mozilla\modules\freetype2\src\type42\t42parse.c
; Line 309
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 310
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 312
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _limit$[ebp], edx
; Line 314
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+488]
	mov	DWORD PTR _psaux$[ebp], ecx
; Line 317
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 318
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 319
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN43@t42_parse_
; Line 321
	push	OFFSET $SG8850
	call	_FT_Message
	add	esp, 4
; Line 322
	push	OFFSET $SG8851
	push	322					; 00000142H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 323
	jmp	$LN44@t42_parse_
$LN43@t42_parse_:
; Line 328
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	cmp	ecx, 10					; 0000000aH
	jb	SHORT $LN41@t42_parse_
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 91					; 0000005bH
	jne	$LN42@t42_parse_
$LN41@t42_parse_:
; Line 330
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 372				; 00000174H
	mov	DWORD PTR _encode$10[ebp], ecx
; Line 332
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR _char_table$7[ebp], edx
; Line 333
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _memory$6[ebp], ecx
; Line 335
	mov	BYTE PTR _only_immediates$4[ebp], 0
; Line 339
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 91					; 0000005bH
	jne	SHORT $LN40@t42_parse_
; Line 341
	mov	DWORD PTR _count$9[ebp], 256		; 00000100H
; Line 342
	mov	BYTE PTR _only_immediates$4[ebp], 1
; Line 343
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax], edx
; Line 345
	jmp	SHORT $LN39@t42_parse_
$LN40@t42_parse_:
; Line 346
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _count$9[ebp], eax
$LN39@t42_parse_:
; Line 348
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 349
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN38@t42_parse_
; Line 350
	jmp	$LN44@t42_parse_
$LN38@t42_parse_:
; Line 353
	mov	eax, DWORD PTR _encode$10[ebp]
	mov	ecx, DWORD PTR _count$9[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _count$9[ebp]
	mov	DWORD PTR [edx+88], eax
; Line 357
	lea	ecx, DWORD PTR _error$5[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _count$9[ebp]
	push	edx
	push	0
	push	2
	mov	eax, DWORD PTR _memory$6[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _encode$10[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$5[ebp], 0
	jne	SHORT $LN36@t42_parse_
	lea	edx, DWORD PTR _error$5[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _count$9[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _memory$6[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _encode$10[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR _error$5[ebp], 0
	jne	SHORT $LN36@t42_parse_
	mov	esi, esp
	mov	eax, DWORD PTR _memory$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _char_table$7[ebp]
	push	edx
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$5[ebp], eax
	cmp	DWORD PTR _error$5[ebp], 0
	je	SHORT $LN37@t42_parse_
$LN36@t42_parse_:
; Line 359
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _error$5[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 360
	jmp	$LN44@t42_parse_
$LN37@t42_parse_:
; Line 364
	mov	DWORD PTR _n$8[ebp], 0
	jmp	SHORT $LN35@t42_parse_
$LN34@t42_parse_:
	mov	edx, DWORD PTR _n$8[ebp]
	add	edx, 1
	mov	DWORD PTR _n$8[ebp], edx
$LN35@t42_parse_:
	mov	eax, DWORD PTR _n$8[ebp]
	cmp	eax, DWORD PTR _count$9[ebp]
	jge	SHORT $LN33@t42_parse_
; Line 366
	mov	DWORD PTR _notdef$3[ebp], OFFSET $SG8877
; Line 369
	mov	esi, esp
	push	8
	mov	ecx, DWORD PTR _notdef$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$8[ebp]
	push	edx
	mov	eax, DWORD PTR _char_table$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _char_table$7[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 370
	jmp	SHORT $LN34@t42_parse_
$LN33@t42_parse_:
; Line 392
	mov	DWORD PTR _n$8[ebp], 0
; Line 393
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN32@t42_parse_:
; Line 395
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN31@t42_parse_
; Line 397
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 400
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 100				; 00000064H
	jne	SHORT $LN30@t42_parse_
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 3
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN30@t42_parse_
; Line 404
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 101				; 00000065H
	jne	SHORT $LN30@t42_parse_
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 102				; 00000066H
	jne	SHORT $LN30@t42_parse_
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	push	ecx
	call	_t42_is_space
	add	esp, 4
	test	eax, eax
	je	SHORT $LN30@t42_parse_
$LN28@t42_parse_:
; Line 406
	mov	edx, 4
	imul	eax, edx, 54
	cmp	DWORD PTR _ft_trace_levels[eax], 6
	jl	SHORT $LN27@t42_parse_
	push	OFFSET $SG8888
	call	_FT_Message
	add	esp, 4
$LN27@t42_parse_:
	xor	ecx, ecx
	jne	SHORT $LN28@t42_parse_
; Line 407
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 3
	mov	DWORD PTR _cur$[ebp], edx
; Line 408
	jmp	$LN31@t42_parse_
$LN30@t42_parse_:
; Line 411
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 93					; 0000005dH
	jne	SHORT $LN24@t42_parse_
$LN23@t42_parse_:
; Line 413
	mov	edx, 4
	imul	eax, edx, 54
	cmp	DWORD PTR _ft_trace_levels[eax], 6
	jl	SHORT $LN22@t42_parse_
	push	OFFSET $SG8894
	call	_FT_Message
	add	esp, 4
$LN22@t42_parse_:
	xor	ecx, ecx
	jne	SHORT $LN23@t42_parse_
; Line 414
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
; Line 415
	jmp	$LN31@t42_parse_
$LN24@t42_parse_:
; Line 419
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	cmp	ecx, 10					; 0000000aH
	jb	SHORT $LN18@t42_parse_
	movzx	edx, BYTE PTR _only_immediates$4[ebp]
	test	edx, edx
	je	$LN19@t42_parse_
$LN18@t42_parse_:
; Line 424
	movzx	eax, BYTE PTR _only_immediates$4[ebp]
	test	eax, eax
	je	SHORT $LN17@t42_parse_
; Line 425
	mov	ecx, DWORD PTR _n$8[ebp]
	mov	DWORD PTR _charcode$2[ebp], ecx
; Line 426
	jmp	SHORT $LN16@t42_parse_
$LN17@t42_parse_:
; Line 428
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _charcode$2[ebp], eax
; Line 429
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@t42_parse_:
; Line 432
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 434
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN15@t42_parse_
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	$LN15@t42_parse_
	mov	ecx, DWORD PTR _n$8[ebp]
	cmp	ecx, DWORD PTR _count$9[ebp]
	jge	$LN15@t42_parse_
; Line 439
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
; Line 441
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 442
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 443
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN14@t42_parse_
; Line 444
	jmp	$LN44@t42_parse_
$LN14@t42_parse_:
; Line 445
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN13@t42_parse_
; Line 446
	jmp	$LN44@t42_parse_
$LN13@t42_parse_:
; Line 448
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _len$1[ebp], eax
; Line 451
	mov	ecx, DWORD PTR _len$1[ebp]
	add	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _charcode$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _char_table$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _char_table$7[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 452
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN12@t42_parse_
; Line 453
	jmp	$LN44@t42_parse_
$LN12@t42_parse_:
; Line 454
	mov	eax, DWORD PTR _char_table$7[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _charcode$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _len$1[ebp]
	mov	BYTE PTR [eax+ecx], 0
; Line 456
	mov	edx, DWORD PTR _n$8[ebp]
	add	edx, 1
	mov	DWORD PTR _n$8[ebp], edx
	jmp	SHORT $LN11@t42_parse_
$LN15@t42_parse_:
; Line 458
	movzx	eax, BYTE PTR _only_immediates$4[ebp]
	test	eax, eax
	je	SHORT $LN11@t42_parse_
; Line 468
	push	OFFSET $SG8909
	push	468					; 000001d4H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 469
	jmp	$LN44@t42_parse_
$LN11@t42_parse_:
; Line 472
	jmp	SHORT $LN9@t42_parse_
$LN19@t42_parse_:
; Line 474
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 475
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN9@t42_parse_
; Line 476
	jmp	$LN44@t42_parse_
$LN9@t42_parse_:
; Line 479
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 480
	jmp	$LN32@t42_parse_
$LN31@t42_parse_:
; Line 482
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+368], 1
; Line 483
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 488
	jmp	$LN44@t42_parse_
$LN42@t42_parse_:
; Line 491
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 17					; 00000011H
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN6@t42_parse_
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET $SG8915
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@t42_parse_
; Line 492
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+368], 2
; Line 494
	jmp	$LN44@t42_parse_
$LN6@t42_parse_:
; Line 495
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 15					; 0000000fH
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN4@t42_parse_
	mov	esi, esp
	push	14					; 0000000eH
	push	OFFSET $SG8919
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@t42_parse_
; Line 496
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+368], 4
; Line 498
	jmp	SHORT $LN44@t42_parse_
$LN4@t42_parse_:
; Line 499
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 18					; 00000012H
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN2@t42_parse_
	mov	esi, esp
	push	17					; 00000011H
	push	OFFSET $SG8923
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@t42_parse_
; Line 500
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+368], 3
; Line 502
	jmp	SHORT $LN44@t42_parse_
$LN2@t42_parse_:
; Line 503
	push	OFFSET $SG8925
	push	503					; 000001f7H
	push	162					; 000000a2H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 162				; 000000a2H
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN44@t42_parse_:
; Line 505
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN48@t42_parse_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN48@t42_parse_:
	DD	1
	DD	$LN47@t42_parse_
$LN47@t42_parse_:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN46@t42_parse_
$LN46@t42_parse_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_t42_parse_encoding ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv177 = -68						; size = 4
tv90 = -64						; size = 4
_result$ = -60						; size = 4
_temp_scale$ = -56					; size = 4
_temp$ = -48						; size = 24
_root$ = -20						; size = 4
_offset$ = -16						; size = 4
_matrix$ = -12						; size = 4
_parser$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_t42_parse_font_matrix PROC
; File d:\mozilla\modules\freetype2\src\type42\t42parse.c
; Line 251
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 252
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 253
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 436				; 000001b4H
	mov	DWORD PTR _matrix$[ebp], ecx
; Line 254
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 452				; 000001c4H
	mov	DWORD PTR _offset$[ebp], edx
; Line 255
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _root$[ebp], eax
; Line 261
	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	push	6
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
; Line 263
	cmp	DWORD PTR _result$[ebp], 6
	jge	SHORT $LN3@t42_parse_
; Line 265
	push	OFFSET $SG8833
	push	265					; 00000109H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 266
	jmp	$LN4@t42_parse_
$LN3@t42_parse_:
; Line 269
	mov	eax, 4
	imul	ecx, eax, 3
	cmp	DWORD PTR _temp$[ebp+ecx], 0
	jge	SHORT $LN6@t42_parse_
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _temp$[ebp+eax]
	neg	ecx
	mov	DWORD PTR tv90[ebp], ecx
	jmp	SHORT $LN7@t42_parse_
$LN6@t42_parse_:
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _temp$[ebp+eax]
	mov	DWORD PTR tv90[ebp], ecx
$LN7@t42_parse_:
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR _temp_scale$[ebp], edx
; Line 271
	cmp	DWORD PTR _temp_scale$[ebp], 0
	jne	SHORT $LN2@t42_parse_
; Line 273
	push	OFFSET $SG8835
	call	_FT_Message
	add	esp, 4
; Line 274
	push	OFFSET $SG8836
	push	274					; 00000112H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 275
	jmp	$LN4@t42_parse_
$LN2@t42_parse_:
; Line 282
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	push	1000					; 000003e8H
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _root$[ebp]
	mov	WORD PTR [ecx+68], ax
; Line 285
	cmp	DWORD PTR _temp_scale$[ebp], 65536	; 00010000H
	je	$LN1@t42_parse_
; Line 287
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _temp$[ebp+edx], eax
; Line 288
	mov	eax, DWORD PTR _temp_scale$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _temp$[ebp+ecx], eax
; Line 289
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _temp$[ebp+eax]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR _temp$[ebp+edx], eax
; Line 290
	mov	eax, DWORD PTR _temp_scale$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	DWORD PTR _temp$[ebp+ecx], eax
; Line 291
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	DWORD PTR _temp$[ebp+edx], eax
; Line 292
	mov	eax, 4
	imul	ecx, eax, 3
	cmp	DWORD PTR _temp$[ebp+ecx], 0
	jge	SHORT $LN8@t42_parse_
	mov	DWORD PTR tv177[ebp], -65536		; ffff0000H
	jmp	SHORT $LN9@t42_parse_
$LN8@t42_parse_:
	mov	DWORD PTR tv177[ebp], 65536		; 00010000H
$LN9@t42_parse_:
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR _temp$[ebp+eax], ecx
$LN1@t42_parse_:
; Line 295
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR _temp$[ebp+eax]
	mov	DWORD PTR [ecx], edx
; Line 296
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR _temp$[ebp+eax]
	mov	DWORD PTR [ecx+8], edx
; Line 297
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR _temp$[ebp+eax]
	mov	DWORD PTR [ecx+4], edx
; Line 298
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	eax, DWORD PTR _temp$[ebp+ecx]
	mov	DWORD PTR [edx+12], eax
; Line 301
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax], edx
; Line 302
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _temp$[ebp+edx]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN4@t42_parse_:
; Line 303
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@t42_parse_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@t42_parse_:
	DD	1
	DD	$LN11@t42_parse_
$LN11@t42_parse_:
	DD	-48					; ffffffd0H
	DD	24					; 00000018H
	DD	$LN10@t42_parse_
$LN10@t42_parse_:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_t42_parse_font_matrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_slot$ = 8						; size = 4
_t42_glyphslot_clear PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 623
	push	ebp
	mov	ebp, esp
; Line 625
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	call	_ft_glyphslot_free_bitmap
	add	esp, 4
; Line 628
	push	32					; 00000020H
	push	0
	mov	ecx, DWORD PTR _slot$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 629
	push	20					; 00000014H
	push	0
	mov	edx, DWORD PTR _slot$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 630
	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _slot$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 632
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+100], 0
; Line 633
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+104], 0
; Line 634
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+128], 0
; Line 635
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+132], 0
; Line 636
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+136], 0
; Line 637
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+140], 0
; Line 638
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+152], 0
; Line 639
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+72], 0
; Line 641
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 642
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+60], 0
; Line 643
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t42_glyphslot_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_char_name$1 = -364					; size = 4
_glyph_name$2 = -360					; size = 4
_max_char$3 = -356					; size = 4
_min_char$4 = -352					; size = 4
_idx$5 = -348						; size = 4
_charcode$6 = -344					; size = 4
_psaux$ = -340						; size = 4
_error$ = -332						; size = 4
_memory$ = -324						; size = 4
_type1$ = -320						; size = 4
_parser$ = -316						; size = 4
_loader$ = -308						; size = 304
_face$ = 8						; size = 4
_T42_Open_Face PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 33
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 36
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 132				; 00000084H
	mov	DWORD PTR _type1$[ebp], eax
; Line 37
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 40
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+488]
	mov	DWORD PTR _psaux$[ebp], ecx
; Line 43
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	lea	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_t42_loader_init
	add	esp, 8
; Line 45
	lea	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 47
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+492], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@T42_Open_F
; Line 48
	jmp	$Exit$24
$LN17@T42_Open_F:
; Line 54
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+496], 12			; 0000000cH
; Line 59
	mov	eax, DWORD PTR _psaux$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+104]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_t42_parser_init
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 60
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@T42_Open_F
; Line 61
	jmp	$Exit$24
$LN16@T42_Open_F:
; Line 64
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	lea	eax, DWORD PTR _loader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_t42_parse_dict
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 65
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@T42_Open_F
; Line 66
	jmp	$Exit$24
$LN15@T42_Open_F:
; Line 68
	mov	edx, DWORD PTR _type1$[ebp]
	movzx	eax, BYTE PTR [edx+301]
	cmp	eax, 42					; 0000002aH
	je	SHORT $LN14@T42_Open_F
; Line 71
	mov	ecx, DWORD PTR _type1$[ebp]
	movzx	edx, BYTE PTR [ecx+301]
	push	edx
	push	OFFSET $SG8176
	call	_FT_Message
	add	esp, 8
; Line 72
	push	OFFSET $SG8177
	push	72					; 00000048H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 73
	jmp	$Exit$24
$LN14@T42_Open_F:
; Line 78
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp+144]
	mov	DWORD PTR [eax+284], ecx
; Line 80
	cmp	DWORD PTR _loader$[ebp+212], 0
	jne	SHORT $LN13@T42_Open_F
; Line 82
	push	OFFSET $SG8179
	call	_FT_Message
	add	esp, 4
; Line 83
	push	OFFSET $SG8180
	push	83					; 00000053H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$LN13@T42_Open_F:
; Line 86
	mov	DWORD PTR _loader$[ebp+212], 0
; Line 87
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _loader$[ebp+200]
	mov	DWORD PTR [edx+264], eax
; Line 88
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR _loader$[ebp+224]
	mov	DWORD PTR [ecx+292], edx
; Line 89
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp+228]
	mov	DWORD PTR [eax+296], ecx
; Line 93
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _loader$[ebp+148]
	mov	DWORD PTR [edx+268], eax
; Line 94
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR _loader$[ebp+172]
	mov	DWORD PTR [ecx+288], edx
; Line 95
	mov	DWORD PTR _loader$[ebp+148], 0
; Line 96
	mov	DWORD PTR _loader$[ebp+172], 0
; Line 99
	mov	eax, DWORD PTR _type1$[ebp]
	cmp	DWORD PTR [eax+236], 1
	jne	$Exit$24
; Line 111
	mov	DWORD PTR _min_char$4[ebp], 0
; Line 112
	mov	DWORD PTR _max_char$3[ebp], 0
; Line 114
	mov	DWORD PTR _charcode$6[ebp], 0
; Line 115
	jmp	SHORT $LN11@T42_Open_F
$LN10@T42_Open_F:
	mov	ecx, DWORD PTR _charcode$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _charcode$6[ebp], ecx
$LN11@T42_Open_F:
	mov	edx, DWORD PTR _charcode$6[ebp]
	cmp	edx, DWORD PTR _loader$[ebp+108]
	jge	$LN9@T42_Open_F
; Line 120
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	xor	edx, edx
	mov	eax, DWORD PTR _charcode$6[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 121
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+256]
	mov	eax, DWORD PTR _charcode$6[ebp]
	mov	DWORD PTR [edx+eax*4], OFFSET $SG8193
; Line 123
	mov	ecx, DWORD PTR _charcode$6[ebp]
	mov	edx, DWORD PTR _loader$[ebp+116]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _char_name$1[ebp], eax
; Line 124
	cmp	DWORD PTR _char_name$1[ebp], 0
	je	$LN8@T42_Open_F
; Line 125
	mov	DWORD PTR _idx$5[ebp], 0
	jmp	SHORT $LN7@T42_Open_F
$LN6@T42_Open_F:
	mov	ecx, DWORD PTR _idx$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$5[ebp], ecx
$LN7@T42_Open_F:
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _idx$5[ebp]
	cmp	eax, DWORD PTR [edx+284]
	jge	$LN8@T42_Open_F
; Line 127
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	mov	eax, DWORD PTR _idx$5[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _glyph_name$2[ebp], ecx
; Line 129
	mov	edx, DWORD PTR _glyph_name$2[ebp]
	push	edx
	mov	eax, DWORD PTR _char_name$1[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN4@T42_Open_F
; Line 131
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _charcode$6[ebp]
	mov	cx, WORD PTR _idx$5[ebp]
	mov	WORD PTR [edx+eax*2], cx
; Line 132
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+256]
	mov	ecx, DWORD PTR _charcode$6[ebp]
	mov	edx, DWORD PTR _glyph_name$2[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 137
	mov	eax, DWORD PTR _glyph_name$2[ebp]
	push	eax
	push	OFFSET $SG8207
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@T42_Open_F
; Line 139
	mov	ecx, DWORD PTR _charcode$6[ebp]
	cmp	ecx, DWORD PTR _min_char$4[ebp]
	jge	SHORT $LN2@T42_Open_F
; Line 140
	mov	edx, DWORD PTR _charcode$6[ebp]
	mov	DWORD PTR _min_char$4[ebp], edx
$LN2@T42_Open_F:
; Line 141
	mov	eax, DWORD PTR _charcode$6[ebp]
	cmp	eax, DWORD PTR _max_char$3[ebp]
	jl	SHORT $LN3@T42_Open_F
; Line 142
	mov	ecx, DWORD PTR _charcode$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _max_char$3[ebp], ecx
$LN3@T42_Open_F:
; Line 144
	jmp	SHORT $LN8@T42_Open_F
$LN4@T42_Open_F:
; Line 146
	jmp	$LN6@T42_Open_F
$LN8@T42_Open_F:
; Line 147
	jmp	$LN10@T42_Open_F
$LN9@T42_Open_F:
; Line 149
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _min_char$4[ebp]
	mov	DWORD PTR [edx+244], eax
; Line 150
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR _max_char$3[ebp]
	mov	DWORD PTR [ecx+248], edx
; Line 151
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp+88]
	mov	DWORD PTR [eax+240], ecx
$Exit$24:
; Line 155
	lea	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_t42_loader_done
	add	esp, 4
; Line 156
	mov	eax, DWORD PTR _error$[ebp]
; Line 157
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@T42_Open_F
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN23@T42_Open_F:
	DD	2
	DD	$LN22@T42_Open_F
$LN22@T42_Open_F:
	DD	-308					; fffffeccH
	DD	304					; 00000130H
	DD	$LN20@T42_Open_F
	DD	-332					; fffffeb4H
	DD	4
	DD	$LN21@T42_Open_F
$LN21@T42_Open_F:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN20@T42_Open_F:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_T42_Open_Face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = -4						; size = 4
_loader$ = 8						; size = 4
_t42_loader_done PROC
; File d:\mozilla\modules\freetype2\src\type42\t42parse.c
; Line 1216
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1217
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
$LN16@t42_loader:
; Line 1221
	mov	ecx, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN15@t42_loader
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 92					; 0000005cH
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@t42_loader:
	xor	edx, edx
	jne	SHORT $LN16@t42_loader
$LN12@t42_loader:
; Line 1222
	mov	eax, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [eax+248], 0
	je	SHORT $LN11@t42_loader
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 200				; 000000c8H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@t42_loader:
	xor	ecx, ecx
	jne	SHORT $LN12@t42_loader
$LN8@t42_loader:
; Line 1223
	mov	edx, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [edx+196], 0
	je	SHORT $LN7@t42_loader
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 148				; 00000094H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@t42_loader:
	xor	eax, eax
	jne	SHORT $LN8@t42_loader
$LN4@t42_loader:
; Line 1224
	mov	ecx, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [ecx+300], 0
	je	SHORT $LN3@t42_loader
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 252				; 000000fcH
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@t42_loader:
	xor	edx, edx
	jne	SHORT $LN4@t42_loader
; Line 1227
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_t42_parser_done
	add	esp, 4
; Line 1228
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t42_loader_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_loader$ = 8						; size = 4
_face$ = 12						; size = 4
_t42_loader_init PROC
; File d:\mozilla\modules\freetype2\src\type42\t42parse.c
; Line 1200
	push	ebp
	mov	ebp, esp
; Line 1201
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 1203
	push	304					; 00000130H
	push	0
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1204
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+144], 0
; Line 1205
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+88], 0
; Line 1208
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+104], 0
; Line 1209
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+212], 0
; Line 1210
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+160], 0
; Line 1211
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t42_loader_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_name$1 = -56						; size = 4
_keyword$2 = -52					; size = 4
_i$3 = -48						; size = 4
_len$4 = -44						; size = 4
_token$5 = -36						; size = 12
_cur2$6 = -20						; size = 4
_cur$7 = -16						; size = 4
_n_keywords$ = -12					; size = 4
_limit$ = -8						; size = 4
_parser$ = -4						; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_base$ = 16						; size = 4
_size$ = 20						; size = 4
_t42_parse_dict PROC
; File d:\mozilla\modules\freetype2\src\type42\t42parse.c
; Line 1071
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1072
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 1075
	mov	DWORD PTR _n_keywords$[ebp], 20		; 00000014H
; Line 1078
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1079
	mov	eax, DWORD PTR _base$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1080
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 1082
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 1084
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN21@t42_parse_:
; Line 1086
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$Exit$27
; Line 1091
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$7[ebp], edx
; Line 1095
	mov	eax, DWORD PTR _cur$7[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 70					; 00000046H
	jne	$LN19@t42_parse_
	mov	edx, DWORD PTR _cur$7[ebp]
	add	edx, 25					; 00000019H
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	$LN19@t42_parse_
	mov	esi, esp
	push	13					; 0000000dH
	push	OFFSET $SG9172
	mov	eax, DWORD PTR _cur$7[ebp]
	push	eax
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN19@t42_parse_
; Line 1101
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1102
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1103
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur2$6[ebp], edx
	mov	eax, DWORD PTR _cur2$6[ebp]
	mov	DWORD PTR _cur$7[ebp], eax
$LN18@t42_parse_:
; Line 1106
	mov	ecx, DWORD PTR _cur$7[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN17@t42_parse_
; Line 1109
	mov	edx, DWORD PTR _cur$7[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 107				; 0000006bH
	jne	SHORT $LN16@t42_parse_
	mov	ecx, DWORD PTR _cur$7[ebp]
	add	ecx, 5
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN16@t42_parse_
	mov	esi, esp
	push	5
	push	OFFSET $SG9179
	mov	edx, DWORD PTR _cur$7[ebp]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN16@t42_parse_
; Line 1110
	jmp	SHORT $LN17@t42_parse_
$LN16@t42_parse_:
; Line 1112
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1113
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN15@t42_parse_
; Line 1114
	jmp	$Exit$27
$LN15@t42_parse_:
; Line 1115
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1116
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$7[ebp], edx
; Line 1117
	jmp	$LN18@t42_parse_
$LN17@t42_parse_:
; Line 1119
	mov	eax, DWORD PTR _cur$7[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN14@t42_parse_
; Line 1125
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1126
	mov	esi, esp
	lea	ecx, DWORD PTR _token$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1129
	cmp	DWORD PTR _token$5[ebp+8], 3
	jne	SHORT $LN14@t42_parse_
; Line 1130
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur2$6[ebp], eax
$LN14@t42_parse_:
; Line 1132
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _cur2$6[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	$LN12@t42_parse_
$LN19@t42_parse_:
; Line 1136
	mov	eax, DWORD PTR _cur$7[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	$LN11@t42_parse_
	mov	edx, DWORD PTR _cur$7[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	$LN11@t42_parse_
; Line 1141
	mov	eax, DWORD PTR _cur$7[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$7[ebp], eax
; Line 1143
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _cur$7[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1144
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1145
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN10@t42_parse_
; Line 1146
	jmp	$Exit$27
$LN10@t42_parse_:
; Line 1148
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _cur$7[ebp]
	mov	DWORD PTR _len$4[ebp], edx
; Line 1150
	cmp	DWORD PTR _len$4[ebp], 0
	jle	$LN9@t42_parse_
	cmp	DWORD PTR _len$4[ebp], 22		; 00000016H
	jge	$LN9@t42_parse_
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN9@t42_parse_
; Line 1158
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN8@t42_parse_
$LN7@t42_parse_:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN8@t42_parse_:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _n_keywords$[ebp]
	jge	$LN9@t42_parse_
; Line 1160
	imul	ecx, DWORD PTR _i$3[ebp], 36
	add	ecx, OFFSET _t42_keywords
	mov	DWORD PTR _keyword$2[ebp], ecx
; Line 1161
	mov	edx, DWORD PTR _keyword$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _name$1[ebp], eax
; Line 1164
	cmp	DWORD PTR _name$1[ebp], 0
	jne	SHORT $LN5@t42_parse_
; Line 1165
	jmp	SHORT $LN7@t42_parse_
$LN5@t42_parse_:
; Line 1169
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$7[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _name$1[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	ecx, eax
	jne	SHORT $LN4@t42_parse_
	mov	ecx, DWORD PTR _name$1[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	cmp	DWORD PTR _len$4[ebp], eax
	jne	SHORT $LN4@t42_parse_
	mov	edx, DWORD PTR _len$4[ebp]
	push	edx
	mov	eax, DWORD PTR _name$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$7[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@t42_parse_
; Line 1174
	mov	edx, DWORD PTR _keyword$2[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_t42_load_keyword
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 1175
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@t42_parse_
; Line 1176
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	jmp	SHORT $LN22@t42_parse_
$LN3@t42_parse_:
; Line 1177
	jmp	SHORT $LN9@t42_parse_
$LN4@t42_parse_:
; Line 1179
	jmp	$LN7@t42_parse_
$LN9@t42_parse_:
; Line 1182
	jmp	SHORT $LN12@t42_parse_
$LN11@t42_parse_:
; Line 1184
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1185
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN12@t42_parse_
; Line 1186
	jmp	SHORT $Exit$27
$LN12@t42_parse_:
; Line 1189
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1190
	jmp	$LN21@t42_parse_
$Exit$27:
; Line 1193
	mov	eax, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [eax+12]
$LN22@t42_parse_:
; Line 1194
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@t42_parse_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@t42_parse_:
	DD	1
	DD	$LN25@t42_parse_
$LN25@t42_parse_:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN24@t42_parse_
$LN24@t42_parse_:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_t42_parse_dict ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_parser$ = 8						; size = 4
_t42_parser_done PROC
; File d:\mozilla\modules\freetype2\src\type42\t42parse.c
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 228
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 232
	mov	edx, DWORD PTR _parser$[ebp]
	movzx	eax, BYTE PTR [edx+84]
	test	eax, eax
	jne	SHORT $LN4@t42_parser
$LN3@t42_parser:
; Line 233
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+76], 0
	xor	edx, edx
	jne	SHORT $LN3@t42_parser
$LN4@t42_parser:
; Line 235
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 236
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t42_parser_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -16						; size = 4
_error$ = -8						; size = 4
_parser$ = 8						; size = 4
_stream$ = 12						; size = 4
_memory$ = 16						; size = 4
_psaux$ = 20						; size = 4
_t42_parser_init PROC
; File d:\mozilla\modules\freetype2\src\type42\t42parse.c
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 147
	mov	DWORD PTR _error$[ebp], 0
; Line 151
	mov	esi, esp
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 153
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+72], eax
; Line 154
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+80], 0
; Line 155
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+76], 0
; Line 156
	mov	eax, DWORD PTR _parser$[ebp]
	mov	BYTE PTR [eax+84], 0
; Line 173
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN17@t42_parser
	push	17					; 00000011H
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@t42_parser
$LN17@t42_parser:
; Line 174
	jmp	$Exit$24
$LN18@t42_parser:
; Line 176
	push	17					; 00000011H
	push	OFFSET $SG8781
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN16@t42_parser
$LN15@t42_parser:
; Line 178
	mov	edx, 4
	imul	eax, edx, 54
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN14@t42_parser
	push	OFFSET $SG8786
	call	_FT_Message
	add	esp, 4
$LN14@t42_parser:
	xor	ecx, ecx
	jne	SHORT $LN15@t42_parser
; Line 179
	push	OFFSET $SG8787
	push	179					; 000000b3H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
$LN16@t42_parser:
; Line 182
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 184
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN10@t42_parser
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@t42_parser
$LN10@t42_parser:
; Line 185
	jmp	$Exit$24
$LN11@t42_parser:
; Line 187
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _size$[ebp], edx
; Line 193
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN9@t42_parser
; Line 195
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _stream$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+76], edx
; Line 196
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+80], eax
; Line 197
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	BYTE PTR [ecx+84], 1
; Line 200
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@t42_parser
; Line 201
	jmp	SHORT $Exit$24
$LN8@t42_parser:
; Line 203
	jmp	SHORT $LN7@t42_parser
$LN9@t42_parser:
; Line 207
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+76], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@t42_parser
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@t42_parser
$LN5@t42_parser:
; Line 208
	jmp	SHORT $Exit$24
$LN6@t42_parser:
; Line 210
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+80], ecx
$LN7@t42_parser:
; Line 213
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR [edx+4], ecx
; Line 214
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR [edx], ecx
; Line 215
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _parser$[ebp]
	add	eax, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+8], eax
$Exit$24:
; Line 218
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@t42_parser
	mov	eax, DWORD PTR _parser$[ebp]
	movzx	ecx, BYTE PTR [eax+84]
	test	ecx, ecx
	jne	SHORT $LN4@t42_parser
$LN3@t42_parser:
; Line 219
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+76], 0
	xor	eax, eax
	jne	SHORT $LN3@t42_parser
$LN4@t42_parser:
; Line 221
	mov	eax, DWORD PTR _error$[ebp]
; Line 222
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@t42_parser
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@t42_parser:
	DD	1
	DD	$LN22@t42_parser
$LN22@t42_parser:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN21@t42_parser
$LN21@t42_parser:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_t42_parser_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_T42_Driver_Done PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 505
	push	ebp
	mov	ebp, esp
; Line 506
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 507
	pop	ebp
	ret	0
_T42_Driver_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ttmodule$ = -8						; size = 4
_driver$ = -4						; size = 4
_module$ = 8						; size = 4
_T42_Driver_Init PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 485
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 486
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 490
	push	OFFSET $SG8384
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _ttmodule$[ebp], eax
; Line 491
	cmp	DWORD PTR _ttmodule$[ebp], 0
	jne	SHORT $LN1@T42_Driver
; Line 493
	push	OFFSET $SG8386
	call	_FT_Message
	add	esp, 4
; Line 494
	push	OFFSET $SG8387
	push	494					; 000001eeH
	push	11					; 0000000bH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 11					; 0000000bH
	jmp	SHORT $LN2@T42_Driver
$LN1@T42_Driver:
; Line 497
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR _ttmodule$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+28], edx
; Line 499
	xor	eax, eax
$LN2@T42_Driver:
; Line 500
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T42_Driver_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_slot$ = -4						; size = 4
_t42slot$ = 8						; size = 4
_T42_GlyphSlot_Done PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 613
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 614
	mov	eax, DWORD PTR _t42slot$[ebp]
	mov	DWORD PTR _slot$[ebp], eax
; Line 617
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	push	edx
	call	_FT_Done_GlyphSlot
	add	esp, 4
; Line 618
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T42_GlyphSlot_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ttclazz$ = -16						; size = 4
_t42size$ = -12						; size = 4
_t42slot$ = -8						; size = 4
_error$ = -4						; size = 4
_glyph$ = 8						; size = 4
_size$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_T42_GlyphSlot_Load PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 651
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 653
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR _t42slot$[ebp], eax
; Line 654
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _t42size$[ebp], ecx
; Line 655
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _ttclazz$[ebp], edx
$LN5@T42_GlyphS:
; Line 658
	mov	eax, 4
	imul	ecx, eax, 54
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN4@T42_GlyphS
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	push	OFFSET $SG8478
	call	_FT_Message
	add	esp, 8
$LN4@T42_GlyphS:
	xor	eax, eax
	jne	SHORT $LN5@T42_GlyphS
; Line 660
	mov	ecx, DWORD PTR _t42slot$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	push	edx
	call	_t42_glyphslot_clear
	add	esp, 4
; Line 664
	mov	eax, DWORD PTR _load_flags$[ebp]
	or	eax, 8
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t42size$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _t42slot$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	push	edx
	mov	eax, DWORD PTR _ttclazz$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 666
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN1@T42_GlyphS
; Line 668
	mov	edx, DWORD PTR _t42slot$[ebp]
	mov	esi, DWORD PTR [edx+160]
	add	esi, 24					; 00000018H
	mov	edi, DWORD PTR _glyph$[ebp]
	add	edi, 24					; 00000018H
	mov	ecx, 8
	rep movsd
; Line 670
	mov	eax, DWORD PTR _t42slot$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+56], eax
; Line 671
	mov	ecx, DWORD PTR _t42slot$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	mov	DWORD PTR [eax+60], ecx
; Line 673
	mov	edx, DWORD PTR _t42slot$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	DWORD PTR [ecx+72], edx
; Line 674
	mov	eax, DWORD PTR _t42slot$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	add	ecx, 108				; 0000006cH
	mov	edx, DWORD PTR _glyph$[ebp]
	add	edx, 108				; 0000006cH
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], ecx
; Line 676
	mov	edx, DWORD PTR _t42slot$[ebp]
	mov	eax, DWORD PTR [edx+160]
	add	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _glyph$[ebp]
	add	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 677
	mov	ecx, DWORD PTR _t42slot$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [edx+100]
	mov	DWORD PTR [eax+100], ecx
; Line 678
	mov	edx, DWORD PTR _t42slot$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [eax+104]
	mov	DWORD PTR [ecx+104], edx
; Line 680
	mov	eax, DWORD PTR _t42slot$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [ecx+128]
	mov	DWORD PTR [edx+128], eax
; Line 681
	mov	ecx, DWORD PTR _t42slot$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [edx+132]
	mov	DWORD PTR [eax+132], ecx
; Line 683
	mov	edx, DWORD PTR _t42slot$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [eax+136]
	mov	DWORD PTR [ecx+136], edx
; Line 684
	mov	eax, DWORD PTR _t42slot$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [ecx+140]
	mov	DWORD PTR [edx+140], eax
$LN1@T42_GlyphS:
; Line 687
	mov	eax, DWORD PTR _error$[ebp]
; Line 688
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T42_GlyphSlot_Load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -28						; size = 4
_ttslot$ = -20						; size = 4
_t42face$ = -12						; size = 4
_face$ = -8						; size = 4
_slot$ = -4						; size = 4
_t42slot$ = 8						; size = 4
_T42_GlyphSlot_Init PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 588
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 589
	mov	eax, DWORD PTR _t42slot$[ebp]
	mov	DWORD PTR _slot$[ebp], eax
; Line 590
	mov	ecx, DWORD PTR _t42slot$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _face$[ebp], edx
; Line 591
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _t42face$[ebp], eax
; Line 593
	mov	DWORD PTR _error$[ebp], 0
; Line 596
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+84], 0
	jne	SHORT $LN2@T42_GlyphS
; Line 599
	mov	edx, DWORD PTR _t42face$[ebp]
	mov	eax, DWORD PTR [edx+500]
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [eax+84]
	mov	DWORD PTR [ecx+160], edx
; Line 601
	jmp	SHORT $LN1@T42_GlyphS
$LN2@T42_GlyphS:
; Line 603
	lea	eax, DWORD PTR _ttslot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t42face$[ebp]
	mov	edx, DWORD PTR [ecx+500]
	push	edx
	call	_FT_New_GlyphSlot
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 604
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR _ttslot$[ebp]
	mov	DWORD PTR [eax+160], ecx
$LN1@T42_GlyphS:
; Line 607
	mov	eax, DWORD PTR _error$[ebp]
; Line 608
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@T42_GlyphS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@T42_GlyphS:
	DD	1
	DD	$LN6@T42_GlyphS
$LN6@T42_GlyphS:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@T42_GlyphS
$LN5@T42_GlyphS:
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
_T42_GlyphSlot_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_node$ = -16						; size = 4
_t42face$ = -12						; size = 4
_face$ = -8						; size = 4
_size$ = -4						; size = 4
_t42size$ = 8						; size = 4
_T42_Size_Done PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 570
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 571
	mov	eax, DWORD PTR _t42size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 572
	mov	ecx, DWORD PTR _t42size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 573
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _t42face$[ebp], eax
; Line 577
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _t42face$[ebp]
	mov	ecx, DWORD PTR [eax+500]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_FT_List_Find
	add	esp, 8
	mov	DWORD PTR _node$[ebp], eax
; Line 578
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@T42_Size_D
; Line 580
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_FT_Done_Size
	add	esp, 4
; Line 581
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+44], 0
$LN2@T42_Size_D:
; Line 583
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T42_Size_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -12						; size = 4
_face$ = -8						; size = 4
_size$ = -4						; size = 4
_t42size$ = 8						; size = 4
_strike_index$ = 12					; size = 4
_T42_Size_Select PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 551
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 552
	mov	eax, DWORD PTR _t42size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 553
	mov	ecx, DWORD PTR _t42size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 557
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_FT_Activate_Size
	add	esp, 4
; Line 559
	mov	edx, DWORD PTR _strike_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+500]
	push	ecx
	call	_FT_Select_Size
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 560
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@T42_Size_S
; Line 561
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+500]
	mov	esi, DWORD PTR [eax+88]
	add	esi, 12					; 0000000cH
	mov	edi, DWORD PTR _t42size$[ebp]
	add	edi, 12					; 0000000cH
	mov	ecx, 7
	rep movsd
$LN1@T42_Size_S:
; Line 563
	mov	eax, DWORD PTR _error$[ebp]
; Line 565
	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T42_Size_Select ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -12						; size = 4
_face$ = -8						; size = 4
_size$ = -4						; size = 4
_t42size$ = 8						; size = 4
_req$ = 12						; size = 4
_T42_Size_Request PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 532
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 533
	mov	eax, DWORD PTR _t42size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 534
	mov	ecx, DWORD PTR _t42size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 538
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_FT_Activate_Size
	add	esp, 4
; Line 540
	mov	edx, DWORD PTR _req$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+500]
	push	ecx
	call	_FT_Request_Size
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 541
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@T42_Size_R
; Line 542
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+500]
	mov	esi, DWORD PTR [eax+88]
	add	esi, 12					; 0000000cH
	mov	edi, DWORD PTR _t42size$[ebp]
	add	edi, 12					; 0000000cH
	mov	ecx, 7
	rep movsd
$LN1@T42_Size_R:
; Line 544
	mov	eax, DWORD PTR _error$[ebp]
; Line 545
	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T42_Size_Request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -28						; size = 4
_ttsize$ = -20						; size = 4
_t42face$ = -12						; size = 4
_face$ = -8						; size = 4
_t42size$ = -4						; size = 4
_size$ = 8						; size = 4
_T42_Size_Init PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 512
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 513
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _t42size$[ebp], eax
; Line 514
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 515
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _t42face$[ebp], eax
; Line 520
	lea	ecx, DWORD PTR _ttsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t42face$[ebp]
	mov	eax, DWORD PTR [edx+500]
	push	eax
	call	_FT_New_Size
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 521
	mov	ecx, DWORD PTR _t42size$[ebp]
	mov	edx, DWORD PTR _ttsize$[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 523
	mov	eax, DWORD PTR _ttsize$[ebp]
	push	eax
	call	_FT_Activate_Size
	add	esp, 4
; Line 525
	mov	eax, DWORD PTR _error$[ebp]
; Line 526
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@T42_Size_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@T42_Size_I:
	DD	1
	DD	$LN4@T42_Size_I
$LN4@T42_Size_I:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@T42_Size_I
$LN3@T42_Size_I:
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_T42_Size_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -16						; size = 4
_info$ = -12						; size = 4
_type1$ = -8						; size = 4
_face$ = -4						; size = 4
_t42face$ = 8						; size = 4
_T42_Face_Done PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 415
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 416
	mov	eax, DWORD PTR _t42face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 422
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN47@T42_Face_D
; Line 423
	jmp	$LN48@T42_Face_D
$LN47@T42_Face_D:
; Line 425
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 132				; 00000084H
	mov	DWORD PTR _type1$[ebp], ecx
; Line 426
	mov	edx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR _info$[ebp], edx
; Line 427
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 430
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+500], 0
	je	SHORT $LN45@T42_Face_D
; Line 431
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+500]
	push	ecx
	call	_FT_Done_Face
	add	esp, 4
$LN45@T42_Face_D:
; Line 434
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx], 0
	xor	eax, eax
	jne	SHORT $LN45@T42_Face_D
$LN42@T42_Face_D:
; Line 435
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+4], 0
	xor	edx, edx
	jne	SHORT $LN42@T42_Face_D
$LN39@T42_Face_D:
; Line 436
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _info$[ebp]
	mov	DWORD PTR [eax+8], 0
	xor	ecx, ecx
	jne	SHORT $LN39@T42_Face_D
$LN36@T42_Face_D:
; Line 437
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+12], 0
	xor	eax, eax
	jne	SHORT $LN36@T42_Face_D
$LN33@T42_Face_D:
; Line 438
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+16], 0
	xor	edx, edx
	jne	SHORT $LN33@T42_Face_D
$LN30@T42_Face_D:
; Line 441
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [eax+296], 0
	xor	ecx, ecx
	jne	SHORT $LN30@T42_Face_D
$LN27@T42_Face_D:
; Line 442
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+292]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [edx+292], 0
	xor	eax, eax
	jne	SHORT $LN27@T42_Face_D
$LN24@T42_Face_D:
; Line 443
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [ecx+288], 0
	xor	edx, edx
	jne	SHORT $LN24@T42_Face_D
$LN21@T42_Face_D:
; Line 445
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [eax+264], 0
	xor	ecx, ecx
	jne	SHORT $LN21@T42_Face_D
$LN18@T42_Face_D:
; Line 446
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [edx+268], 0
	xor	eax, eax
	jne	SHORT $LN18@T42_Face_D
$LN15@T42_Face_D:
; Line 448
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+252]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [ecx+252], 0
	xor	edx, edx
	jne	SHORT $LN15@T42_Face_D
$LN12@T42_Face_D:
; Line 449
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+256]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [eax+256], 0
	xor	ecx, ecx
	jne	SHORT $LN12@T42_Face_D
$LN9@T42_Face_D:
; Line 450
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+232]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [edx+232], 0
	xor	eax, eax
	jne	SHORT $LN9@T42_Face_D
$LN6@T42_Face_D:
; Line 452
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+492], 0
	xor	edx, edx
	jne	SHORT $LN6@T42_Face_D
$LN3@T42_Face_D:
; Line 461
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+556]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+556], 0
	xor	ecx, ecx
	jne	SHORT $LN3@T42_Face_D
; Line 462
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+552], 0
; Line 464
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 465
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+24], 0
$LN48@T42_Face_D:
; Line 466
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T42_Face_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv298 = -116						; size = 4
_clazz$1 = -112						; size = 4
_cmap_classes$2 = -108					; size = 4
_charmap$3 = -100					; size = 12
_args$4 = -80						; size = 32
_family$5 = -44						; size = 4
_full$6 = -40						; size = 4
__tmp_$7 = -36						; size = 4
_module$8 = -32						; size = 4
_info$ = -28						; size = 4
_type1$ = -24						; size = 4
_root$ = -20						; size = 4
_psaux$ = -16						; size = 4
_psnames$ = -12						; size = 4
_error$ = -8						; size = 4
_face$ = -4						; size = 4
_stream$ = 8						; size = 4
_t42face$ = 12						; size = 4
_face_index$ = 16					; size = 4
_num_params$ = 20					; size = 4
_params$ = 24						; size = 4
_T42_Face_Init PROC
; File d:\mozilla\modules\freetype2\src\type42\t42objs.c
; Line 169
	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	edi
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 29					; 0000001dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 170
	mov	eax, DWORD PTR _t42face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 174
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR _root$[ebp], ecx
; Line 175
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 132				; 00000084H
	mov	DWORD PTR _type1$[ebp], edx
; Line 176
	mov	eax, DWORD PTR _type1$[ebp]
	mov	DWORD PTR _info$[ebp], eax
; Line 178
	mov	ecx, DWORD PTR _num_params$[ebp]
	mov	DWORD PTR _num_params$[ebp], ecx
; Line 179
	mov	edx, DWORD PTR _params$[ebp]
	mov	DWORD PTR _params$[ebp], edx
; Line 180
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _stream$[ebp], eax
; Line 183
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+500], 0
; Line 184
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx], 1
$LN42@T42_Face_I:
; Line 186
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _module$8[ebp], ecx
	push	OFFSET $SG8238
	mov	edx, DWORD PTR _module$8[ebp]
	push	edx
	call	_ft_module_get_service
	add	esp, 8
	mov	DWORD PTR __tmp_$7[ebp], eax
	mov	eax, DWORD PTR __tmp_$7[ebp]
	mov	DWORD PTR _psnames$[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN42@T42_Face_I
; Line 187
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _psnames$[ebp]
	mov	DWORD PTR [edx+484], eax
; Line 190
	push	OFFSET $SG8240
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_Get_Module_Interface
	add	esp, 8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+488], eax
; Line 191
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+488]
	mov	DWORD PTR _psaux$[ebp], eax
; Line 192
	cmp	DWORD PTR _psaux$[ebp], 0
	jne	SHORT $LN38@T42_Face_I
; Line 194
	push	OFFSET $SG8243
	call	_FT_Message
	add	esp, 4
; Line 195
	push	OFFSET $SG8244
	push	195					; 000000c3H
	push	11					; 0000000bH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 11					; 0000000bH
	mov	DWORD PTR _error$[ebp], eax
; Line 196
	jmp	$Exit$50
$LN38@T42_Face_I:
; Line 199
	mov	ecx, 4
	imul	edx, ecx, 54
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN37@T42_Face_I
	push	OFFSET $SG8250
	call	_FT_Message
	add	esp, 4
$LN37@T42_Face_I:
	xor	eax, eax
	jne	SHORT $LN38@T42_Face_I
; Line 202
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_T42_Open_Face
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 203
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN34@T42_Face_I
; Line 204
	jmp	$Exit$50
$LN34@T42_Face_I:
; Line 207
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN33@T42_Face_I
; Line 208
	jmp	$Exit$50
$LN33@T42_Face_I:
; Line 211
	cmp	DWORD PTR _face_index$[ebp], 0
	jle	SHORT $LN32@T42_Face_I
; Line 213
	push	OFFSET $SG8254
	call	_FT_Message
	add	esp, 4
; Line 214
	push	OFFSET $SG8255
	push	214					; 000000d6H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 215
	jmp	$Exit$50
$LN32@T42_Face_I:
; Line 223
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	mov	DWORD PTR [edx+16], ecx
; Line 224
	mov	edx, DWORD PTR _root$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 225
	mov	eax, DWORD PTR _root$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 229
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 529				; 00000211H
	mov	eax, DWORD PTR _root$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 231
	mov	ecx, DWORD PTR _info$[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	je	SHORT $LN31@T42_Face_I
; Line 232
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 4
	mov	edx, DWORD PTR _root$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN31@T42_Face_I:
; Line 238
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _root$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 245
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+20], edx
; Line 247
	mov	eax, DWORD PTR _root$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG8258
; Line 248
	mov	ecx, DWORD PTR _root$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	$LN30@T42_Face_I
; Line 250
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _full$6[ebp], eax
; Line 251
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _family$5[ebp], edx
; Line 254
	cmp	DWORD PTR _full$6[ebp], 0
	je	$LN29@T42_Face_I
$LN28@T42_Face_I:
; Line 256
	mov	eax, DWORD PTR _full$6[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN29@T42_Face_I
; Line 258
	mov	edx, DWORD PTR _full$6[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _family$5[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN26@T42_Face_I
; Line 260
	mov	eax, DWORD PTR _family$5[ebp]
	add	eax, 1
	mov	DWORD PTR _family$5[ebp], eax
; Line 261
	mov	ecx, DWORD PTR _full$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _full$6[ebp], ecx
; Line 263
	jmp	SHORT $LN25@T42_Face_I
$LN26@T42_Face_I:
; Line 265
	mov	edx, DWORD PTR _full$6[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN23@T42_Face_I
	mov	ecx, DWORD PTR _full$6[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 45					; 0000002dH
	jne	SHORT $LN24@T42_Face_I
$LN23@T42_Face_I:
; Line 266
	mov	eax, DWORD PTR _full$6[ebp]
	add	eax, 1
	mov	DWORD PTR _full$6[ebp], eax
	jmp	SHORT $LN25@T42_Face_I
$LN24@T42_Face_I:
; Line 267
	mov	ecx, DWORD PTR _family$5[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN20@T42_Face_I
	mov	eax, DWORD PTR _family$5[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN21@T42_Face_I
$LN20@T42_Face_I:
; Line 268
	mov	edx, DWORD PTR _family$5[ebp]
	add	edx, 1
	mov	DWORD PTR _family$5[ebp], edx
; Line 269
	jmp	SHORT $LN25@T42_Face_I
$LN21@T42_Face_I:
; Line 271
	mov	eax, DWORD PTR _family$5[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN18@T42_Face_I
; Line 272
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR _full$6[ebp]
	mov	DWORD PTR [edx+24], eax
$LN18@T42_Face_I:
; Line 273
	jmp	SHORT $LN29@T42_Face_I
$LN25@T42_Face_I:
; Line 276
	jmp	$LN28@T42_Face_I
$LN29@T42_Face_I:
; Line 279
	jmp	SHORT $LN17@T42_Face_I
$LN30@T42_Face_I:
; Line 282
	mov	ecx, DWORD PTR _type1$[ebp]
	cmp	DWORD PTR [ecx+232], 0
	je	SHORT $LN17@T42_Face_I
; Line 283
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	mov	DWORD PTR [edx+20], ecx
$LN17@T42_Face_I:
; Line 287
	mov	edx, DWORD PTR _root$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 288
	mov	eax, DWORD PTR _root$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 295
	mov	DWORD PTR _args$4[ebp], 9
; Line 297
	push	OFFSET $SG8279
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _args$4[ebp+20], eax
; Line 298
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	mov	DWORD PTR _args$4[ebp+4], edx
; Line 299
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+496]
	mov	DWORD PTR _args$4[ebp+8], ecx
; Line 301
	cmp	DWORD PTR _num_params$[ebp], 0
	je	SHORT $LN15@T42_Face_I
; Line 303
	mov	edx, DWORD PTR _args$4[ebp]
	or	edx, 16					; 00000010H
	mov	DWORD PTR _args$4[ebp], edx
; Line 304
	mov	eax, DWORD PTR _num_params$[ebp]
	mov	DWORD PTR _args$4[ebp+24], eax
; Line 305
	mov	ecx, DWORD PTR _params$[ebp]
	mov	DWORD PTR _args$4[ebp+28], ecx
$LN15@T42_Face_I:
; Line 309
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 500				; 000001f4H
	push	edx
	push	0
	lea	eax, DWORD PTR _args$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_Open_Face
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 312
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@T42_Face_I
; Line 313
	jmp	$Exit$50
$LN14@T42_Face_I:
; Line 315
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+500]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	_FT_Done_Size
	add	esp, 4
; Line 319
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+500]
	add	edx, 52					; 00000034H
	mov	eax, DWORD PTR _root$[ebp]
	add	eax, 52					; 00000034H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 320
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+500]
	mov	edx, DWORD PTR _root$[ebp]
	mov	ax, WORD PTR [ecx+68]
	mov	WORD PTR [edx+68], ax
; Line 322
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+500]
	mov	eax, DWORD PTR _root$[ebp]
	mov	cx, WORD PTR [edx+70]
	mov	WORD PTR [eax+70], cx
; Line 323
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+500]
	mov	ecx, DWORD PTR _root$[ebp]
	mov	dx, WORD PTR [eax+72]
	mov	WORD PTR [ecx+72], dx
; Line 324
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+500]
	mov	edx, DWORD PTR _root$[ebp]
	mov	ax, WORD PTR [ecx+74]
	mov	WORD PTR [edx+74], ax
; Line 326
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+500]
	mov	eax, DWORD PTR _root$[ebp]
	mov	cx, WORD PTR [edx+76]
	mov	WORD PTR [eax+76], cx
; Line 327
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+500]
	mov	ecx, DWORD PTR _root$[ebp]
	mov	dx, WORD PTR [eax+78]
	mov	WORD PTR [ecx+78], dx
; Line 329
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	dx, WORD PTR [ecx+26]
	mov	WORD PTR [eax+80], dx
; Line 330
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	dx, WORD PTR [ecx+28]
	mov	WORD PTR [eax+82], dx
; Line 333
	mov	eax, DWORD PTR _root$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 334
	mov	ecx, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN13@T42_Face_I
; Line 335
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 1
	mov	ecx, DWORD PTR _root$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN13@T42_Face_I:
; Line 337
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+500]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 2
	je	SHORT $LN12@T42_Face_I
; Line 338
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 2
	mov	ecx, DWORD PTR _root$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN12@T42_Face_I:
; Line 340
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+500]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN11@T42_Face_I
; Line 341
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _root$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN11@T42_Face_I:
; Line 344
	cmp	DWORD PTR _psnames$[ebp], 0
	je	$Exit$50
; Line 347
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cmap_classes$2[ebp], eax
; Line 351
	mov	ecx, DWORD PTR _root$[ebp]
	mov	DWORD PTR _charmap$3[ebp], ecx
; Line 354
	mov	edx, 3
	mov	WORD PTR _charmap$3[ebp+8], dx
; Line 355
	mov	eax, 1
	mov	WORD PTR _charmap$3[ebp+10], ax
; Line 356
	mov	DWORD PTR _charmap$3[ebp+4], 1970170211	; 756e6963H
; Line 358
	push	0
	lea	ecx, DWORD PTR _charmap$3[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _cmap_classes$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_FT_CMap_New
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 360
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@T42_Face_I
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 163				; 000000a3H
	je	SHORT $LN9@T42_Face_I
; Line 361
	jmp	$Exit$50
$LN9@T42_Face_I:
; Line 362
	mov	DWORD PTR _error$[ebp], 0
; Line 365
	mov	edx, 7
	mov	WORD PTR _charmap$3[ebp+8], dx
; Line 366
	mov	DWORD PTR _clazz$1[ebp], 0
; Line 368
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	mov	DWORD PTR tv298[ebp], ecx
	mov	edx, DWORD PTR tv298[ebp]
	sub	edx, 1
	mov	DWORD PTR tv298[ebp], edx
	cmp	DWORD PTR tv298[ebp], 3
	ja	SHORT $LN7@T42_Face_I
	mov	eax, DWORD PTR tv298[ebp]
	jmp	DWORD PTR $LN49@T42_Face_I[eax*4]
$LN6@T42_Face_I:
; Line 371
	mov	DWORD PTR _charmap$3[ebp+4], 1094995778	; 41444f42H
; Line 372
	xor	ecx, ecx
	mov	WORD PTR _charmap$3[ebp+10], cx
; Line 373
	mov	edx, DWORD PTR _cmap_classes$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _clazz$1[ebp], eax
; Line 374
	jmp	SHORT $LN7@T42_Face_I
$LN5@T42_Face_I:
; Line 377
	mov	DWORD PTR _charmap$3[ebp+4], 1094992453	; 41444245H
; Line 378
	mov	ecx, 1
	mov	WORD PTR _charmap$3[ebp+10], cx
; Line 379
	mov	edx, DWORD PTR _cmap_classes$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _clazz$1[ebp], eax
; Line 380
	jmp	SHORT $LN7@T42_Face_I
$LN4@T42_Face_I:
; Line 383
	mov	DWORD PTR _charmap$3[ebp+4], 1094992451	; 41444243H
; Line 384
	mov	ecx, 2
	mov	WORD PTR _charmap$3[ebp+10], cx
; Line 385
	mov	edx, DWORD PTR _cmap_classes$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _clazz$1[ebp], eax
; Line 386
	jmp	SHORT $LN7@T42_Face_I
$LN3@T42_Face_I:
; Line 389
	mov	DWORD PTR _charmap$3[ebp+4], 1818326065	; 6c617431H
; Line 390
	mov	ecx, 3
	mov	WORD PTR _charmap$3[ebp+10], cx
; Line 391
	mov	edx, DWORD PTR _cmap_classes$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _clazz$1[ebp], eax
$LN7@T42_Face_I:
; Line 398
	cmp	DWORD PTR _clazz$1[ebp], 0
	je	SHORT $Exit$50
; Line 399
	push	0
	lea	ecx, DWORD PTR _charmap$3[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _clazz$1[ebp]
	push	edx
	call	_FT_CMap_New
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$Exit$50:
; Line 409
	mov	eax, DWORD PTR _error$[ebp]
; Line 410
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN48@T42_Face_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN48@T42_Face_I:
	DD	2
	DD	$LN47@T42_Face_I
$LN47@T42_Face_I:
	DD	-80					; ffffffb0H
	DD	32					; 00000020H
	DD	$LN45@T42_Face_I
	DD	-100					; ffffff9cH
	DD	12					; 0000000cH
	DD	$LN46@T42_Face_I
$LN46@T42_Face_I:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN45@T42_Face_I:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
	npad	3
$LN49@T42_Face_I:
	DD	$LN4@T42_Face_I
	DD	$LN6@T42_Face_I
	DD	$LN3@T42_Face_I
	DD	$LN5@T42_Face_I
_T42_Face_Init ENDP
_TEXT	ENDS
END
