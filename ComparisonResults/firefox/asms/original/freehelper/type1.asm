; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\type1\type1.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_t1_driver_class
CONST	SEGMENT
_t1_keywords DD	FLAT:$SG9514
	DD	03H
	DD	05H
	DD	00H
	DD	00H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9515
	DD	03H
	DD	05H
	DD	00H
	DD	04H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9516
	DD	03H
	DD	05H
	DD	00H
	DD	08H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9517
	DD	03H
	DD	05H
	DD	00H
	DD	0cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9518
	DD	03H
	DD	05H
	DD	00H
	DD	010H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9519
	DD	03H
	DD	02H
	DD	00H
	DD	014H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9520
	DD	03H
	DD	01H
	DD	00H
	DD	018H
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9521
	DD	03H
	DD	02H
	DD	00H
	DD	01aH
	DB	02H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9522
	DD	03H
	DD	02H
	DD	00H
	DD	01cH
	DB	02H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9523
	DD	02H
	DD	02H
	DD	00H
	DD	00H
	DB	02H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9524
	DD	04H
	DD	02H
	DD	00H
	DD	00H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	03H
	DD	FLAT:$SG9525
	DD	04H
	DD	02H
	DD	00H
	DD	04H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9526
	DD	04H
	DD	02H
	DD	00H
	DD	0b8H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9527
	DD	04H
	DD	02H
	DD	00H
	DD	0bcH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9528
	DD	04H
	DD	04H
	DD	00H
	DD	06cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9529
	DD	04H
	DD	02H
	DD	00H
	DD	070H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9530
	DD	04H
	DD	02H
	DD	00H
	DD	074H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9531
	DD	04H
	DD	09H
	DD	00H
	DD	0cH
	DB	02H
	ORG $+3
	DD	0eH
	DD	08H
	DD	02H
	DD	FLAT:$SG9532
	DD	04H
	DD	09H
	DD	00H
	DD	028H
	DB	02H
	ORG $+3
	DD	0aH
	DD	09H
	DD	02H
	DD	FLAT:$SG9533
	DD	04H
	DD	09H
	DD	00H
	DD	03cH
	DB	02H
	ORG $+3
	DD	0eH
	DD	0aH
	DD	02H
	DD	FLAT:$SG9534
	DD	04H
	DD	09H
	DD	00H
	DD	058H
	DB	02H
	ORG $+3
	DD	0aH
	DD	0bH
	DD	02H
	DD	FLAT:$SG9535
	DD	04H
	DD	09H
	DD	00H
	DD	078H
	DB	02H
	ORG $+3
	DD	01H
	DD	00H
	DD	02H
	DD	FLAT:$SG9536
	DD	04H
	DD	09H
	DD	00H
	DD	07aH
	DB	02H
	ORG $+3
	DD	01H
	DD	00H
	DD	02H
	DD	FLAT:$SG9537
	DD	04H
	DD	09H
	DD	00H
	DD	0c0H
	DB	02H
	ORG $+3
	DD	02H
	DD	00H
	DD	02H
	DD	FLAT:$SG9538
	DD	04H
	DD	09H
	DD	00H
	DD	080H
	DB	02H
	ORG $+3
	DD	0cH
	DD	07cH
	DD	02H
	DD	FLAT:$SG9539
	DD	04H
	DD	09H
	DD	00H
	DD	09aH
	DB	02H
	ORG $+3
	DD	0cH
	DD	07dH
	DD	02H
	DD	FLAT:$SG9540
	DD	04H
	DD	03H
	DD	00H
	DD	0b4H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9541
	DD	04H
	DD	01H
	DD	00H
	DD	07eH
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9542
	DD	01H
	DD	06H
	DD	00H
	DD	0e8H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9543
	DD	01H
	DD	02H
	DD	00H
	DD	012cH
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9544
	DD	01H
	DD	02H
	DD	00H
	DD	012dH
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9545
	DD	01H
	DD	03H
	DD	00H
	DD	015cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9546
	DD	05H
	DD	07H
	DD	00H
	DD	00H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9547
	DD	07H
	DD	02H
	DD	00H
	DD	0214H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9548
	DD	07H
	DD	02H
	DD	00H
	DD	0218H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9549
	DD	08H
	DD	09H
	DD	00H
	DD	0160H
	DB	04H
	ORG $+3
	DD	010H
	DD	01a0H
	DD	01H
	DD	FLAT:$SG9550
	DD	08H
	DD	0bH
	DD	FLAT:_t1_parse_font_matrix
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9551
	DD	08H
	DD	0bH
	DD	FLAT:_parse_encoding
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9552
	DD	08H
	DD	0bH
	DD	FLAT:_parse_subrs
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9553
	DD	08H
	DD	0bH
	DD	FLAT:_parse_charstrings
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	FLAT:$SG9554
	DD	08H
	DD	0bH
	DD	FLAT:_parse_private
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9555
	DD	08H
	DD	0bH
	DD	FLAT:_parse_blend_design_positions
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9556
	DD	08H
	DD	0bH
	DD	FLAT:_parse_blend_design_map
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9557
	DD	08H
	DD	0bH
	DD	FLAT:_parse_blend_axis_types
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9558
	DD	08H
	DD	0bH
	DD	FLAT:_parse_weight_vector
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$SG9559
	DD	08H
	DD	0bH
	DD	FLAT:_parse_buildchar
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
_t1_service_glyph_dict DD FLAT:_t1_get_glyph_name
	DD	FLAT:_t1_get_name_index
_t1_service_ps_name DD FLAT:_t1_get_ps_name
_t1_service_multi_masters DD FLAT:_T1_Get_Multi_Master
	DD	FLAT:_T1_Set_MM_Design
	DD	FLAT:_T1_Set_MM_Blend
	DD	FLAT:_T1_Get_MM_Var
	DD	FLAT:_T1_Set_Var_Design
_t1_service_ps_info DD FLAT:_t1_ps_get_font_info
	DD	FLAT:_t1_ps_get_font_extra
	DD	FLAT:_t1_ps_has_glyph_names
	DD	FLAT:_t1_ps_get_font_private
	DD	FLAT:_t1_ps_get_font_value
_t1_service_kerning DD FLAT:_T1_Get_Track_Kerning
_t1_services DD	FLAT:$SG10740
	DD	FLAT:_t1_service_ps_name
	DD	FLAT:$SG10741
	DD	FLAT:_t1_service_glyph_dict
	DD	FLAT:$SG10742
	DD	FLAT:$SG10743
	DD	FLAT:$SG10744
	DD	FLAT:_t1_service_ps_info
	DD	FLAT:$SG10745
	DD	FLAT:_t1_service_kerning
	DD	FLAT:$SG10746
	DD	FLAT:_t1_service_multi_masters
	DD	00H
	DD	00H
	ORG $+4
_t1_driver_class DD 0501H
	DD	01cH
	DD	FLAT:$SG10771
	DD	010000H
	DD	020000H
	DD	00H
	DD	FLAT:_T1_Driver_Init
	DD	FLAT:_T1_Driver_Done
	DD	FLAT:_Get_Interface
	DD	0228H
	DD	02cH
	DD	0b4H
	DD	FLAT:_T1_Face_Init
	DD	FLAT:_T1_Face_Done
	DD	FLAT:_T1_Size_Init
	DD	FLAT:_T1_Size_Done
	DD	FLAT:_T1_GlyphSlot_Init
	DD	FLAT:_T1_GlyphSlot_Done
	DD	FLAT:_T1_Load_Glyph
	DD	FLAT:_Get_Kerning
	DD	FLAT:_T1_Read_Metrics
	DD	FLAT:_T1_Get_Advances
	DD	FLAT:_T1_Size_Request
	DD	00H
CONST	ENDS
_DATA	SEGMENT
$SG11268 DB	'd:\mozilla\modules\freetype2\src\type1\t1afm.c', 00H
	ORG $+1
$SG8205	DB	'd:\mozilla\modules\freetype2\src\type1\t1parse.c', 00H
	ORG $+3
$SG9232	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG8218	DB	'%!PS-AdobeFont', 00H
	ORG $+1
$SG8222	DB	'%!FontType', 00H
	ORG $+1
$SG8228	DB	'  not a Type 1 font', 0aH, 00H
	ORG $+3
$SG9253	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9258	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9265	DB	'.notdef', 00H
$SG9269	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9280	DB	'.notdef', 00H
$SG9294	DB	'.notdef', 00H
$SG8285	DB	'T1_Get_Private_Dict: invalid private dictionary section', 0aH
	DB	00H
	ORG $+3
$SG8286	DB	'd:\mozilla\modules\freetype2\src\type1\t1parse.c', 00H
	ORG $+3
$SG8312	DB	'T1_Get_Private_Dict: could not find `eexec'' keyword', 0aH
	DB	00H
	ORG $+3
$SG8313	DB	'd:\mozilla\modules\freetype2\src\type1\t1parse.c', 00H
	ORG $+3
$SG8320	DB	'eexec', 00H
	ORG $+2
$SG8330	DB	'T1_Get_Private_Dict: `eexec'' not properly terminated', 0aH
	DB	00H
	ORG $+2
$SG8331	DB	'd:\mozilla\modules\freetype2\src\type1\t1parse.c', 00H
	ORG $+3
$SG8358	DB	'T1_Get_Private_Dict: invalid private dictionary section', 0aH
	DB	00H
	ORG $+3
$SG8359	DB	'd:\mozilla\modules\freetype2\src\type1\t1parse.c', 00H
	ORG $+3
$SG9514	DB	'version', 00H
$SG9515	DB	'Notice', 00H
	ORG $+1
$SG9516	DB	'FullName', 00H
	ORG $+3
$SG9517	DB	'FamilyName', 00H
	ORG $+1
$SG9518	DB	'Weight', 00H
	ORG $+1
$SG9519	DB	'ItalicAngle', 00H
$SG9520	DB	'isFixedPitch', 00H
	ORG $+3
$SG9521	DB	'UnderlinePosition', 00H
	ORG $+2
$SG9522	DB	'UnderlineThickness', 00H
	ORG $+1
$SG9523	DB	'FSType', 00H
	ORG $+1
$SG9524	DB	'UniqueID', 00H
	ORG $+3
$SG9525	DB	'lenIV', 00H
	ORG $+2
$SG9526	DB	'LanguageGroup', 00H
	ORG $+2
$SG9527	DB	'password', 00H
	ORG $+3
$SG9528	DB	'BlueScale', 00H
	ORG $+2
$SG9529	DB	'BlueShift', 00H
	ORG $+2
$SG9530	DB	'BlueFuzz', 00H
	ORG $+3
$SG9531	DB	'BlueValues', 00H
	ORG $+1
$SG9532	DB	'OtherBlues', 00H
	ORG $+1
$SG9533	DB	'FamilyBlues', 00H
$SG9534	DB	'FamilyOtherBlues', 00H
	ORG $+3
$SG9535	DB	'StdHW', 00H
	ORG $+2
$SG9536	DB	'StdVW', 00H
	ORG $+2
$SG9537	DB	'MinFeature', 00H
	ORG $+1
$SG9538	DB	'StemSnapH', 00H
	ORG $+2
$SG9539	DB	'StemSnapV', 00H
	ORG $+2
$SG9540	DB	'ExpansionFactor', 00H
$SG9541	DB	'ForceBold', 00H
	ORG $+2
$SG9542	DB	'FontName', 00H
	ORG $+3
$SG9543	DB	'PaintType', 00H
	ORG $+2
$SG9544	DB	'FontType', 00H
	ORG $+3
$SG9545	DB	'StrokeWidth', 00H
$SG9546	DB	'FontBBox', 00H
	ORG $+3
$SG9547	DB	'NDV', 00H
$SG9548	DB	'CDV', 00H
$SG9549	DB	'DesignVector', 00H
	ORG $+3
$SG9550	DB	'FontMatrix', 00H
	ORG $+1
$SG9551	DB	'Encoding', 00H
	ORG $+3
$SG9552	DB	'Subrs', 00H
	ORG $+2
$SG9553	DB	'CharStrings', 00H
$SG9554	DB	'Private', 00H
$SG9555	DB	'BlendDesignPositions', 00H
	ORG $+3
$SG9556	DB	'BlendDesignMap', 00H
	ORG $+1
$SG9557	DB	'BlendAxisTypes', 00H
	ORG $+1
$SG9558	DB	'WeightVector', 00H
	ORG $+3
$SG9559	DB	'BuildCharArray', 00H
	ORG $+1
$SG9582	DB	'eexec', 00H
	ORG $+2
$SG9586	DB	'eexec', 00H
	ORG $+2
$SG9591	DB	'closefile', 00H
	ORG $+2
$SG9595	DB	'closefile', 00H
	ORG $+2
$SG9600	DB	'FontDirectory', 00H
	ORG $+2
$SG9604	DB	'FontDirectory', 00H
	ORG $+2
$SG8580	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG8589	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9617	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9624	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9647	DB	'parse_dict: found `%s'' but ignoring it since it is in t'
	DB	'he wrong dictionary', 0aH, 00H
$SG8623	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG8624	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9651	DB	'CharStrings', 00H
$SG8658	DB	'Weight', 00H
	ORG $+1
$SG8666	DB	'Width', 00H
	ORG $+2
$SG8674	DB	'OpticalSize', 00H
$SG10741 DB	'glyph-dict', 00H
	ORG $+1
$SG9706	DB	'T1_Open_Face(): /DesignVector contains %u entries while '
	DB	'there are %u axes.', 0aH, 00H
$SG10740 DB	'postscript-font-name', 00H
	ORG $+3
$SG10742 DB	'xf86-driver-name', 00H
	ORG $+3
$SG10743 DB	'Type 1', 00H
	ORG $+1
$SG10744 DB	'postscript-info', 00H
$SG10745 DB	'kerning', 00H
$SG9721	DB	'T1_Open_Face: cannot allocate BuildCharArray', 0aH, 00H
	ORG $+2
$SG10746 DB	'multi-masters', 00H
	ORG $+2
$SG9727	DB	'T1_Open_Face: no `/CharStrings'' array in face', 0aH, 00H
	ORG $+1
$SG9728	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9741	DB	'.notdef', 00H
$SG10771 DB	'type1', 00H
	ORG $+2
$SG9755	DB	'.notdef', 00H
$SG8833	DB	'parse_blend_axis_types: incorrect number of axes: %d', 0aH
	DB	00H
	ORG $+2
$SG8834	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG8845	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9882	DB	'pshinter', 00H
	ORG $+3
$SG8866	DB	'parse_blend_design_positions: incorrect number of design'
	DB	's: %d', 0aH, 00H
	ORG $+1
$SG8867	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG10924 DB	'd:\mozilla\modules\freetype2\src\type1\t1gload.c', 00H
	ORG $+3
$SG10925 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG8881	DB	'parse_blend_design_positions: invalid number of axes: %d'
	DB	0aH, 00H
	ORG $+2
$SG8882	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG8886	DB	'parse_blend_design_positions: incorrect table', 0aH, 00H
	ORG $+1
$SG8887	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9928	DB	'pshinter', 00H
	ORG $+3
$SG8911	DB	'parse_blend_design_map: incorrect number of axes: %d', 0aH
	DB	00H
	ORG $+2
$SG8912	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9945	DB	'd:\mozilla\modules\freetype2\src\type1\t1objs.c', 00H
$SG9946	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG8924	DB	'parse_blend_design_map: incorrect table', 0aH, 00H
	ORG $+3
$SG8925	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG10993 DB	'd:\mozilla\modules\freetype2\src\type1\t1gload.c', 00H
	ORG $+3
$SG10999 DB	'T1_Load_Glyph: glyph index %d', 0aH, 00H
	ORG $+1
$SG8953	DB	'parse_weight_vector: incorrect number of designs: %d', 0aH
	DB	00H
	ORG $+2
$SG8954	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG11005 DB	'd:\mozilla\modules\freetype2\src\type1\t1gload.c', 00H
	ORG $+3
$SG11006 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10047 DB	'postscript-cmaps', 00H
	ORG $+3
$SG8961	DB	'parse_weight_vector: /BlendDesignPosition and /WeightVec'
	DB	'tor have', 0aH, '                     different number of ele'
	DB	'ments', 0aH, 00H
$SG8962	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG10052 DB	'T1_Face_Init: cannot access `psaux'' module', 0aH, 00H
$SG9018	DB	't1_load_keyword: ignoring keyword `%s'' which is not val'
	DB	'id at this point', 0aH, '                 (probably due to mi'
	DB	'ssing keywords)', 0aH, 00H
	ORG $+3
$SG10049 DB	'psaux', 00H
	ORG $+2
$SG10053 DB	'd:\mozilla\modules\freetype2\src\type1\t1objs.c', 00H
$SG10056 DB	'pshinter', 00H
	ORG $+3
$SG10061 DB	'Type 1 driver', 0aH, 00H
	ORG $+1
$SG10065 DB	'T1_Face_Init: invalid face index', 0aH, 00H
	ORG $+2
$SG10066 DB	'd:\mozilla\modules\freetype2\src\type1\t1objs.c', 00H
$SG9042	DB	'read_binary_data: invalid size field', 0aH, 00H
	ORG $+2
$SG9043	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9059	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9061	DB	't1_parse_font_matrix: invalid font matrix', 0aH, 00H
	ORG $+1
$SG9062	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG10091 DB	'Regular', 00H
$SG10098 DB	'Regular', 00H
$SG9077	DB	'parse_encoding: out of bounds', 0aH, 00H
	ORG $+1
$SG9078	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG10103 DB	'Bold', 00H
	ORG $+3
$SG10104 DB	'Black', 00H
	ORG $+2
$SG11129 DB	'd:\mozilla\modules\freetype2\src\type1\t1afm.c', 00H
	ORG $+1
$SG9104	DB	'.notdef', 00H
$SG11154 DB	'd:\mozilla\modules\freetype2\src\type1\t1afm.c', 00H
	ORG $+1
$SG11161 DB	'd:\mozilla\modules\freetype2\src\type1\t1afm.c', 00H
	ORG $+1
$SG9117	DB	'encoding end', 0aH, 00H
	ORG $+2
$SG9123	DB	'encoding end', 0aH, 00H
	ORG $+2
$SG9132	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9140	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9146	DB	'StandardEncoding', 00H
	ORG $+3
$SG9150	DB	'ExpertEncoding', 00H
	ORG $+1
$SG9154	DB	'ISOLatin1Encoding', 00H
	ORG $+2
$SG9172	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
$SG9187	DB	'dup', 00H
$SG9193	DB	'put', 00H
$SG9198	DB	'd:\mozilla\modules\freetype2\src\type1\t1load.c', 00H
_DATA	ENDS
EXTRN	__imp__memchr:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__memmove:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp__qsort:PROC
EXTRN	_FT_Set_Charmap:PROC
EXTRN	_FT_Get_Char_Index:PROC
EXTRN	_FT_MulDiv:PROC
EXTRN	_FT_DivFix:PROC
EXTRN	_FT_RoundFix:PROC
EXTRN	_FT_Vector_Transform:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Panic:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_FT_Get_Module:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_ft_mem_strcpyn:PROC
EXTRN	_ft_service_list_lookup:PROC
EXTRN	_FT_CMap_New:PROC
EXTRN	_FT_Get_Module_Interface:PROC
EXTRN	_ft_module_get_service:PROC
EXTRN	_FT_Request_Metrics:PROC
EXTRN	_ft_synthesize_vertical_metrics:PROC
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Skip:PROC
EXTRN	_FT_Stream_Pos:PROC
EXTRN	_FT_Stream_Read:PROC
EXTRN	_FT_Stream_EnterFrame:PROC
EXTRN	_FT_Stream_ExitFrame:PROC
EXTRN	_FT_Stream_ReadUShort:PROC
EXTRN	_FT_Stream_ReadULongLE:PROC
EXTRN	_FT_Outline_Get_CBox:PROC
EXTRN	_FT_Outline_Translate:PROC
EXTRN	_FT_Outline_Transform:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$ = -48						; size = 4
_charmap$ = -44						; size = 4
_oldcharmap$ = -40					; size = 4
_width_table_length$ = -36				; size = 4
_kp$ = -32						; size = 4
_p$ = -28						; size = 4
_limit$ = -24						; size = 4
_start$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_t1_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_fi$ = 16						; size = 4
_T1_Read_PFM PROC
; File d:\mozilla\modules\freetype2\src\type1\t1afm.c
; Line 110
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 111
	mov	DWORD PTR _error$[ebp], 0
; Line 112
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 123
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _start$[ebp], eax
; Line 124
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _limit$[ebp], edx
; Line 128
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 99					; 00000063H
	mov	DWORD PTR _p$[ebp], eax
; Line 129
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN22@T1_Read_PF
; Line 131
	push	OFFSET $SG11129
	push	131					; 00000083H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 132
	jmp	$Exit$28
$LN22@T1_Read_PF:
; Line 134
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	or	ecx, eax
	movzx	ecx, cx
	mov	DWORD PTR _width_table_length$[ebp], ecx
; Line 136
	mov	edx, DWORD PTR _width_table_length$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+18]
	mov	DWORD PTR _p$[ebp], ecx
; Line 137
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 18					; 00000012H
	cmp	edx, DWORD PTR _limit$[ebp]
	ja	SHORT $LN20@T1_Read_PF
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	edx, ecx
	movzx	edx, dx
	cmp	edx, 18					; 00000012H
	jge	SHORT $LN21@T1_Read_PF
$LN20@T1_Read_PF:
; Line 139
	jmp	$Exit$28
$LN21@T1_Read_PF:
; Line 142
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 14					; 0000000eH
	mov	DWORD PTR _p$[ebp], eax
; Line 143
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	or	ecx, eax
	add	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 145
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	jne	SHORT $LN19@T1_Read_PF
; Line 147
	jmp	$Exit$28
$LN19@T1_Read_PF:
; Line 149
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN18@T1_Read_PF
; Line 151
	push	OFFSET $SG11154
	push	151					; 00000097H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 152
	jmp	$Exit$28
$LN18@T1_Read_PF:
; Line 155
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	edx, ecx
	movzx	edx, dx
	mov	eax, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 156
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
; Line 157
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN17@T1_Read_PF
; Line 159
	push	OFFSET $SG11161
	push	159					; 0000009fH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 160
	jmp	$Exit$28
$LN17@T1_Read_PF:
; Line 164
	mov	eax, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN16@T1_Read_PF
; Line 165
	jmp	$Exit$28
$LN16@T1_Read_PF:
; Line 168
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+36], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@T1_Read_PF
; Line 169
	jmp	$Exit$28
$LN15@T1_Read_PF:
; Line 172
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _kp$[ebp], ecx
; Line 173
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _limit$[ebp], edx
; Line 179
	mov	eax, DWORD PTR _t1_face$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _oldcharmap$[ebp], ecx
; Line 180
	mov	DWORD PTR _charmap$[ebp], 0
; Line 182
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN14@T1_Read_PF
$LN13@T1_Read_PF:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN14@T1_Read_PF:
	mov	eax, DWORD PTR _t1_face$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jge	SHORT $LN12@T1_Read_PF
; Line 184
	mov	edx, DWORD PTR _t1_face$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _charmap$[ebp], edx
; Line 186
	mov	eax, DWORD PTR _charmap$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 7
	jne	SHORT $LN11@T1_Read_PF
; Line 188
	mov	edx, DWORD PTR _charmap$[ebp]
	push	edx
	mov	eax, DWORD PTR _t1_face$[ebp]
	push	eax
	call	_FT_Set_Charmap
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 189
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@T1_Read_PF
; Line 190
	jmp	$Exit$28
$LN10@T1_Read_PF:
; Line 191
	jmp	SHORT $LN12@T1_Read_PF
$LN11@T1_Read_PF:
; Line 193
	jmp	SHORT $LN13@T1_Read_PF
$LN12@T1_Read_PF:
; Line 200
	jmp	SHORT $LN9@T1_Read_PF
$LN8@T1_Read_PF:
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
$LN9@T1_Read_PF:
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	$LN7@T1_Read_PF
; Line 202
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _t1_face$[ebp]
	push	ecx
	call	_FT_Get_Char_Index
	add	esp, 8
	mov	edx, DWORD PTR _kp$[ebp]
	mov	DWORD PTR [edx], eax
; Line 203
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _t1_face$[ebp]
	push	eax
	call	_FT_Get_Char_Index
	add	esp, 8
	mov	ecx, DWORD PTR _kp$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 205
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+2]
	shl	ecx, 8
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax+2]
	or	ecx, eax
	movsx	ecx, cx
	mov	edx, DWORD PTR _kp$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 206
	mov	eax, DWORD PTR _kp$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 208
	mov	ecx, DWORD PTR _kp$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _kp$[ebp], ecx
; Line 209
	jmp	$LN8@T1_Read_PF
$LN7@T1_Read_PF:
; Line 211
	cmp	DWORD PTR _oldcharmap$[ebp], 0
	je	SHORT $LN6@T1_Read_PF
; Line 212
	mov	edx, DWORD PTR _oldcharmap$[ebp]
	push	edx
	mov	eax, DWORD PTR _t1_face$[ebp]
	push	eax
	call	_FT_Set_Charmap
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN6@T1_Read_PF:
; Line 213
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@T1_Read_PF
; Line 214
	jmp	SHORT $Exit$28
$LN5@T1_Read_PF:
; Line 218
	mov	esi, esp
	push	OFFSET _compare_kern_pairs
	push	16					; 00000010H
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	DWORD PTR __imp__qsort
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$Exit$28:
; Line 221
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@T1_Read_PF
$LN3@T1_Read_PF:
; Line 223
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+36], 0
	xor	eax, eax
	jne	SHORT $LN3@T1_Read_PF
; Line 224
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+40], 0
$LN4@T1_Read_PF:
; Line 227
	mov	eax, DWORD PTR _error$[ebp]
; Line 228
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@T1_Read_PF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN27@T1_Read_PF:
	DD	1
	DD	$LN26@T1_Read_PF
$LN26@T1_Read_PF:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN25@T1_Read_PF
$LN25@T1_Read_PF:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_T1_Read_PFM ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_index2$ = -16						; size = 4
_index1$ = -12						; size = 4
_pair2$ = -8						; size = 4
_pair1$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_compare_kern_pairs PROC
; File d:\mozilla\modules\freetype2\src\type1\t1afm.c
; Line 88
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 89
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _pair1$[ebp], eax
; Line 90
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _pair2$[ebp], ecx
; Line 92
	mov	edx, DWORD PTR _pair1$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pair1$[ebp]
	or	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _index1$[ebp], eax
; Line 93
	mov	edx, DWORD PTR _pair2$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pair2$[ebp]
	or	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _index2$[ebp], eax
; Line 96
	mov	edx, DWORD PTR _index1$[ebp]
	cmp	edx, DWORD PTR _index2$[ebp]
	jbe	SHORT $LN4@compare_ke
; Line 97
	mov	eax, 1
	jmp	SHORT $LN5@compare_ke
	jmp	SHORT $LN5@compare_ke
$LN4@compare_ke:
; Line 98
	mov	eax, DWORD PTR _index1$[ebp]
	cmp	eax, DWORD PTR _index2$[ebp]
	jae	SHORT $LN2@compare_ke
; Line 99
	or	eax, -1
	jmp	SHORT $LN5@compare_ke
; Line 100
	jmp	SHORT $LN5@compare_ke
$LN2@compare_ke:
; Line 101
	xor	eax, eax
$LN5@compare_ke:
; Line 102
	mov	esp, ebp
	pop	ebp
	ret	0
_compare_kern_pairs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gname$1 = -12						; size = 4
_n$ = -8						; size = 4
_type1$ = -4						; size = 4
_name$ = 8						; size = 4
_len$ = 12						; size = 4
_user_data$ = 16					; size = 4
_t1_get_index PROC
; File d:\mozilla\modules\freetype2\src\type1\t1afm.c
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 57
	mov	eax, DWORD PTR _user_data$[ebp]
	mov	DWORD PTR _type1$[ebp], eax
; Line 62
	cmp	DWORD PTR _len$[ebp], 65535		; 0000ffffH
	jbe	SHORT $LN5@t1_get_ind
; Line 63
	xor	eax, eax
	jmp	$LN6@t1_get_ind
$LN5@t1_get_ind:
; Line 65
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@t1_get_ind
$LN3@t1_get_ind:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN4@t1_get_ind:
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx+284]
	jge	SHORT $LN2@t1_get_ind
; Line 67
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _gname$1[ebp], ecx
; Line 72
	cmp	DWORD PTR _gname$1[ebp], 0
	je	SHORT $LN1@t1_get_ind
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _gname$1[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _name$[ebp]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	edx, ecx
	jne	SHORT $LN1@t1_get_ind
	mov	edx, DWORD PTR _gname$1[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	cmp	eax, DWORD PTR _len$[ebp]
	jne	SHORT $LN1@t1_get_ind
	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _gname$1[ebp]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@t1_get_ind
; Line 73
	mov	eax, DWORD PTR _n$[ebp]
	jmp	SHORT $LN6@t1_get_ind
$LN1@t1_get_ind:
; Line 74
	jmp	$LN3@t1_get_ind
$LN2@t1_get_ind:
; Line 76
	xor	eax, eax
$LN6@t1_get_ind:
; Line 77
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_get_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$1 = -24						; size = 4
_error$ = -20						; size = 4
_glyph_data$ = -12					; size = 8
_decoder$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_T1_Parse_Glyph PROC
; File d:\mozilla\modules\freetype2\src\type1\t1gload.c
; Line 127
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 130
	lea	eax, DWORD PTR _glyph_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_T1_Parse_Glyph_And_Get_Char_String
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 135
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@T1_Parse_G
; Line 137
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$1[ebp], ecx
; Line 140
	mov	edx, DWORD PTR _face$1[ebp]
	mov	eax, DWORD PTR [edx+128]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN2@T1_Parse_G
; Line 143
	mov	esi, esp
	lea	ecx, DWORD PTR _glyph_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$1[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _face$1[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@T1_Parse_G:
; Line 148
	mov	eax, DWORD PTR _error$[ebp]
; Line 149
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@T1_Parse_G
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@T1_Parse_G:
	DD	1
	DD	$LN6@T1_Parse_G
$LN6@T1_Parse_G:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN5@T1_Parse_G
$LN5@T1_Parse_G:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_T1_Parse_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_metrics$1 = -40					; size = 16
_inc$ = -20						; size = 4
_error$ = -16						; size = 4
_type1$ = -12						; size = 4
_face$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_decoder$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_char_string$ = 16					; size = 4
_T1_Parse_Glyph_And_Get_Char_String PROC
; File d:\mozilla\modules\freetype2\src\type1\t1gload.c
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 62
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$[ebp], ecx
; Line 63
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 132				; 00000084H
	mov	DWORD PTR _type1$[ebp], edx
; Line 64
	mov	DWORD PTR _error$[ebp], 0
; Line 68
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _inc$[ebp], edx
; Line 72
	mov	eax, DWORD PTR _type1$[ebp]
	add	eax, 304				; 00000130H
	mov	ecx, DWORD PTR _decoder$[ebp]
	add	ecx, 1376				; 00000560H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 73
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+320]
	mov	eax, DWORD PTR [ecx+324]
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [ecx+1392], edx
	mov	DWORD PTR [ecx+1396], eax
; Line 79
	cmp	DWORD PTR _inc$[ebp], 0
	je	SHORT $LN4@T1_Parse_G
; Line 81
	mov	esi, esp
	mov	edx, DWORD PTR _char_string$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _inc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 82
	jmp	SHORT $LN3@T1_Parse_G
$LN4@T1_Parse_G:
; Line 88
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR _char_string$[ebp]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
; Line 89
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+296]
	mov	ecx, DWORD PTR _char_string$[ebp]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+4], eax
$LN3@T1_Parse_G:
; Line 92
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@T1_Parse_G
; Line 95
	mov	esi, esp
	mov	ecx, DWORD PTR _char_string$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _char_string$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+1484]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN2@T1_Parse_G:
; Line 100
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN1@T1_Parse_G
	cmp	DWORD PTR _inc$[ebp], 0
	je	$LN1@T1_Parse_G
	mov	edx, DWORD PTR _inc$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+8], 0
	je	$LN1@T1_Parse_G
; Line 105
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _metrics$1[ebp], eax
; Line 106
	mov	DWORD PTR _metrics$1[ebp+4], 0
; Line 107
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _metrics$1[ebp+8], eax
; Line 108
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _metrics$1[ebp+12], eax
; Line 111
	mov	esi, esp
	lea	ecx, DWORD PTR _metrics$1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _inc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _inc$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 113
	mov	edx, DWORD PTR _metrics$1[ebp]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 114
	mov	ecx, DWORD PTR _metrics$1[ebp+8]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 115
	mov	eax, DWORD PTR _metrics$1[ebp+12]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [ecx+44], eax
$LN1@T1_Parse_G:
; Line 120
	mov	eax, DWORD PTR _error$[ebp]
; Line 121
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@T1_Parse_G
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@T1_Parse_G:
	DD	1
	DD	$LN8@T1_Parse_G
$LN8@T1_Parse_G:
	DD	-40					; ffffffd8H
	DD	16					; 00000010H
	DD	$LN7@T1_Parse_G
$LN7@T1_Parse_G:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
_T1_Parse_Glyph_And_Get_Char_String ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = -4						; size = 4
_t1face$ = 8						; size = 4
_left_glyph$ = 12					; size = 4
_right_glyph$ = 16					; size = 4
_kerning$ = 20						; size = 4
_Get_Kerning PROC
; File d:\mozilla\modules\freetype2\src\type1\t1driver.c
; Line 656
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 657
	mov	eax, DWORD PTR _t1face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 660
	mov	ecx, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 661
	mov	edx, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 663
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+492], 0
	je	SHORT $LN1@Get_Kernin
; Line 667
	mov	ecx, DWORD PTR _kerning$[ebp]
	push	ecx
	mov	edx, DWORD PTR _right_glyph$[ebp]
	push	edx
	mov	eax, DWORD PTR _left_glyph$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	push	edx
	call	_T1_Get_Kerning
	add	esp, 16					; 00000010H
$LN1@Get_Kernin:
; Line 669
	xor	eax, eax
; Line 670
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Get_Kerning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_t1_interface$ = 12					; size = 4
_Get_Interface PROC
; File d:\mozilla\modules\freetype2\src\type1\t1driver.c
; Line 610
	push	ebp
	mov	ebp, esp
; Line 611
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 613
	mov	ecx, DWORD PTR _t1_interface$[ebp]
	push	ecx
	push	OFFSET _t1_services
	call	_ft_service_list_lookup
	add	esp, 8
; Line 614
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Get_Interface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv81 = -32						; size = 4
tv72 = -28						; size = 4
tv65 = -24						; size = 4
_val$1 = -20						; size = 4
_val$2 = -16						; size = 4
_type1$ = -12						; size = 4
_t1face$ = -8						; size = 4
_retval$ = -4						; size = 4
_face$ = 8						; size = 4
_key$ = 12						; size = 4
_idx$ = 16						; size = 4
_value$ = 20						; size = 4
_value_len$ = 24					; size = 4
_t1_ps_get_font_value PROC
; File d:\mozilla\modules\freetype2\src\type1\t1driver.c
; Line 180
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 181
	mov	DWORD PTR _retval$[ebp], -1
; Line 182
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _t1face$[ebp], eax
; Line 183
	mov	ecx, DWORD PTR _t1face$[ebp]
	add	ecx, 132				; 00000084H
	mov	DWORD PTR _type1$[ebp], ecx
; Line 186
	mov	edx, DWORD PTR _key$[ebp]
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 45			; 0000002dH
	ja	$LN118@t1_ps_get_
	mov	eax, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN122@t1_ps_get_[eax*4]
$LN117@t1_ps_get_:
; Line 189
	mov	DWORD PTR _retval$[ebp], 1
; Line 190
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN116@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN116@t1_ps_get_
; Line 191
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	cl, BYTE PTR [eax+301]
	mov	BYTE PTR [edx], cl
$LN116@t1_ps_get_:
; Line 192
	jmp	$LN118@t1_ps_get_
$LN115@t1_ps_get_:
; Line 196
	cmp	DWORD PTR _idx$[ebp], 4
	jae	SHORT $LN114@t1_ps_get_
; Line 198
	mov	DWORD PTR _val$2[ebp], 0
; Line 201
	mov	DWORD PTR _retval$[ebp], 4
; Line 202
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN114@t1_ps_get_
	mov	edx, DWORD PTR _value_len$[ebp]
	cmp	edx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN114@t1_ps_get_
; Line 204
	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 3
	ja	SHORT $LN111@t1_ps_get_
	mov	ecx, DWORD PTR tv72[ebp]
	jmp	DWORD PTR $LN123@t1_ps_get_[ecx*4]
$LN110@t1_ps_get_:
; Line 207
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+304]
	mov	DWORD PTR _val$2[ebp], eax
; Line 208
	jmp	SHORT $LN111@t1_ps_get_
$LN109@t1_ps_get_:
; Line 210
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+308]
	mov	DWORD PTR _val$2[ebp], edx
; Line 211
	jmp	SHORT $LN111@t1_ps_get_
$LN108@t1_ps_get_:
; Line 213
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+312]
	mov	DWORD PTR _val$2[ebp], ecx
; Line 214
	jmp	SHORT $LN111@t1_ps_get_
$LN107@t1_ps_get_:
; Line 216
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+316]
	mov	DWORD PTR _val$2[ebp], eax
$LN111@t1_ps_get_:
; Line 219
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _val$2[ebp]
	mov	DWORD PTR [ecx], edx
$LN114@t1_ps_get_:
; Line 222
	jmp	$LN118@t1_ps_get_
$LN106@t1_ps_get_:
; Line 226
	cmp	DWORD PTR _idx$[ebp], 4
	jae	SHORT $LN105@t1_ps_get_
; Line 228
	mov	DWORD PTR _val$1[ebp], 0
; Line 231
	mov	DWORD PTR _retval$[ebp], 4
; Line 232
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN105@t1_ps_get_
	mov	eax, DWORD PTR _value_len$[ebp]
	cmp	eax, DWORD PTR _retval$[ebp]
	jl	SHORT $LN105@t1_ps_get_
; Line 234
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR tv81[ebp], ecx
	cmp	DWORD PTR tv81[ebp], 3
	ja	SHORT $LN102@t1_ps_get_
	mov	edx, DWORD PTR tv81[ebp]
	jmp	DWORD PTR $LN124@t1_ps_get_[edx*4]
$LN101@t1_ps_get_:
; Line 237
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	DWORD PTR _val$1[ebp], ecx
; Line 238
	jmp	SHORT $LN102@t1_ps_get_
$LN100@t1_ps_get_:
; Line 240
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+332]
	mov	DWORD PTR _val$1[ebp], eax
; Line 241
	jmp	SHORT $LN102@t1_ps_get_
$LN99@t1_ps_get_:
; Line 243
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+336]
	mov	DWORD PTR _val$1[ebp], edx
; Line 244
	jmp	SHORT $LN102@t1_ps_get_
$LN98@t1_ps_get_:
; Line 246
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+340]
	mov	DWORD PTR _val$1[ebp], ecx
$LN102@t1_ps_get_:
; Line 249
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _val$1[ebp]
	mov	DWORD PTR [edx], eax
$LN105@t1_ps_get_:
; Line 252
	jmp	$LN118@t1_ps_get_
$LN97@t1_ps_get_:
; Line 255
	mov	DWORD PTR _retval$[ebp], 1
; Line 256
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN96@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN96@t1_ps_get_
; Line 257
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	cl, BYTE PTR [eax+300]
	mov	BYTE PTR [edx], cl
$LN96@t1_ps_get_:
; Line 258
	jmp	$LN118@t1_ps_get_
$LN95@t1_ps_get_:
; Line 261
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+232]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _retval$[ebp], eax
; Line 262
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN94@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN94@t1_ps_get_
; Line 263
	mov	edx, DWORD PTR _retval$[ebp]
	push	edx
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN94@t1_ps_get_:
; Line 264
	jmp	$LN118@t1_ps_get_
$LN93@t1_ps_get_:
; Line 267
	mov	DWORD PTR _retval$[ebp], 4
; Line 268
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN92@t1_ps_get_
	mov	eax, DWORD PTR _value_len$[ebp]
	cmp	eax, DWORD PTR _retval$[ebp]
	jl	SHORT $LN92@t1_ps_get_
; Line 269
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx], eax
$LN92@t1_ps_get_:
; Line 270
	jmp	$LN118@t1_ps_get_
$LN91@t1_ps_get_:
; Line 273
	mov	DWORD PTR _retval$[ebp], 4
; Line 274
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN90@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN90@t1_ps_get_
; Line 275
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	mov	DWORD PTR [edx], ecx
$LN90@t1_ps_get_:
; Line 276
	jmp	$LN118@t1_ps_get_
$LN89@t1_ps_get_:
; Line 279
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR [edx+284]
	jae	SHORT $LN88@t1_ps_get_
; Line 281
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _retval$[ebp], eax
; Line 282
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN88@t1_ps_get_
	mov	edx, DWORD PTR _value_len$[ebp]
	cmp	edx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN88@t1_ps_get_
; Line 284
	mov	eax, DWORD PTR _retval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 285
	mov	eax, DWORD PTR _value$[ebp]
	add	eax, DWORD PTR _retval$[ebp]
	mov	BYTE PTR [eax-1], 0
$LN88@t1_ps_get_:
; Line 288
	jmp	$LN118@t1_ps_get_
$LN86@t1_ps_get_:
; Line 291
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	edx, DWORD PTR [ecx+284]
	jae	SHORT $LN85@t1_ps_get_
; Line 293
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	add	eax, 1
	mov	DWORD PTR _retval$[ebp], eax
; Line 294
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN85@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN85@t1_ps_get_
; Line 297
	mov	edx, DWORD PTR _retval$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 298
	mov	edx, DWORD PTR _value$[ebp]
	add	edx, DWORD PTR _retval$[ebp]
	mov	BYTE PTR [edx-1], 0
$LN85@t1_ps_get_:
; Line 301
	jmp	$LN118@t1_ps_get_
$LN83@t1_ps_get_:
; Line 304
	mov	DWORD PTR _retval$[ebp], 4
; Line 305
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN82@t1_ps_get_
	mov	eax, DWORD PTR _value_len$[ebp]
	cmp	eax, DWORD PTR _retval$[ebp]
	jl	SHORT $LN82@t1_ps_get_
; Line 306
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+236]
	mov	DWORD PTR [ecx], eax
$LN82@t1_ps_get_:
; Line 307
	jmp	$LN118@t1_ps_get_
$LN81@t1_ps_get_:
; Line 311
	mov	ecx, DWORD PTR _type1$[ebp]
	cmp	DWORD PTR [ecx+236], 1
	jne	SHORT $LN80@t1_ps_get_
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR [edx+240]
	jae	SHORT $LN80@t1_ps_get_
; Line 313
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+256]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _retval$[ebp], eax
; Line 314
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN80@t1_ps_get_
	mov	edx, DWORD PTR _value_len$[ebp]
	cmp	edx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN80@t1_ps_get_
; Line 317
	mov	eax, DWORD PTR _retval$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+256]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 318
	mov	eax, DWORD PTR _value$[ebp]
	add	eax, DWORD PTR _retval$[ebp]
	mov	BYTE PTR [eax-1], 0
$LN80@t1_ps_get_:
; Line 321
	jmp	$LN118@t1_ps_get_
$LN78@t1_ps_get_:
; Line 324
	mov	DWORD PTR _retval$[ebp], 4
; Line 325
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN77@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN77@t1_ps_get_
; Line 326
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	mov	DWORD PTR [edx], ecx
$LN77@t1_ps_get_:
; Line 327
	jmp	$LN118@t1_ps_get_
$LN76@t1_ps_get_:
; Line 330
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR [edx+272]
	jae	SHORT $LN75@t1_ps_get_
; Line 332
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 1
	mov	DWORD PTR _retval$[ebp], ecx
; Line 333
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN75@t1_ps_get_
	mov	edx, DWORD PTR _value_len$[ebp]
	cmp	edx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN75@t1_ps_get_
; Line 335
	mov	eax, DWORD PTR _retval$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+276]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 336
	mov	eax, DWORD PTR _value$[ebp]
	add	eax, DWORD PTR _retval$[ebp]
	mov	BYTE PTR [eax-1], 0
$LN75@t1_ps_get_:
; Line 339
	jmp	$LN118@t1_ps_get_
$LN73@t1_ps_get_:
; Line 342
	mov	DWORD PTR _retval$[ebp], 2
; Line 343
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN72@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN72@t1_ps_get_
; Line 344
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _type1$[ebp]
	mov	ax, WORD PTR [edx+eax+156]
	mov	WORD PTR [ecx], ax
$LN72@t1_ps_get_:
; Line 345
	jmp	$LN118@t1_ps_get_
$LN71@t1_ps_get_:
; Line 348
	mov	DWORD PTR _retval$[ebp], 2
; Line 349
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN70@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN70@t1_ps_get_
; Line 350
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _type1$[ebp]
	mov	ax, WORD PTR [edx+eax+158]
	mov	WORD PTR [ecx], ax
$LN70@t1_ps_get_:
; Line 351
	jmp	$LN118@t1_ps_get_
$LN69@t1_ps_get_:
; Line 354
	mov	DWORD PTR _retval$[ebp], 1
; Line 355
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN68@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN68@t1_ps_get_
; Line 356
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	cl, BYTE PTR [eax+44]
	mov	BYTE PTR [edx], cl
$LN68@t1_ps_get_:
; Line 357
	jmp	$LN118@t1_ps_get_
$LN67@t1_ps_get_:
; Line 360
	mov	edx, DWORD PTR _type1$[ebp]
	movzx	eax, BYTE PTR [edx+44]
	cmp	DWORD PTR _idx$[ebp], eax
	jae	SHORT $LN66@t1_ps_get_
; Line 362
	mov	DWORD PTR _retval$[ebp], 2
; Line 363
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN66@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN66@t1_ps_get_
; Line 364
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	ax, WORD PTR [ecx+eax*2+48]
	mov	WORD PTR [edx], ax
$LN66@t1_ps_get_:
; Line 366
	jmp	$LN118@t1_ps_get_
$LN64@t1_ps_get_:
; Line 369
	mov	DWORD PTR _retval$[ebp], 4
; Line 370
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN63@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN63@t1_ps_get_
; Line 371
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	DWORD PTR [edx], ecx
$LN63@t1_ps_get_:
; Line 372
	jmp	$LN118@t1_ps_get_
$LN62@t1_ps_get_:
; Line 375
	mov	DWORD PTR _retval$[ebp], 4
; Line 376
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN61@t1_ps_get_
	mov	edx, DWORD PTR _value_len$[ebp]
	cmp	edx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN61@t1_ps_get_
; Line 377
	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	DWORD PTR [eax], edx
$LN61@t1_ps_get_:
; Line 378
	jmp	$LN118@t1_ps_get_
$LN60@t1_ps_get_:
; Line 381
	mov	DWORD PTR _retval$[ebp], 4
; Line 382
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN59@t1_ps_get_
	mov	eax, DWORD PTR _value_len$[ebp]
	cmp	eax, DWORD PTR _retval$[ebp]
	jl	SHORT $LN59@t1_ps_get_
; Line 383
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	DWORD PTR [ecx], eax
$LN59@t1_ps_get_:
; Line 384
	jmp	$LN118@t1_ps_get_
$LN58@t1_ps_get_:
; Line 387
	mov	DWORD PTR _retval$[ebp], 1
; Line 388
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN57@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN57@t1_ps_get_
; Line 389
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	cl, BYTE PTR [eax+45]
	mov	BYTE PTR [edx], cl
$LN57@t1_ps_get_:
; Line 390
	jmp	$LN118@t1_ps_get_
$LN56@t1_ps_get_:
; Line 393
	mov	edx, DWORD PTR _type1$[ebp]
	movzx	eax, BYTE PTR [edx+45]
	cmp	DWORD PTR _idx$[ebp], eax
	jae	SHORT $LN55@t1_ps_get_
; Line 395
	mov	DWORD PTR _retval$[ebp], 2
; Line 396
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN55@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN55@t1_ps_get_
; Line 397
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	ax, WORD PTR [ecx+eax*2+76]
	mov	WORD PTR [edx], ax
$LN55@t1_ps_get_:
; Line 399
	jmp	$LN118@t1_ps_get_
$LN53@t1_ps_get_:
; Line 402
	mov	DWORD PTR _retval$[ebp], 1
; Line 403
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN52@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN52@t1_ps_get_
; Line 404
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	cl, BYTE PTR [eax+46]
	mov	BYTE PTR [edx], cl
$LN52@t1_ps_get_:
; Line 405
	jmp	$LN118@t1_ps_get_
$LN51@t1_ps_get_:
; Line 408
	mov	edx, DWORD PTR _type1$[ebp]
	movzx	eax, BYTE PTR [edx+46]
	cmp	DWORD PTR _idx$[ebp], eax
	jae	SHORT $LN50@t1_ps_get_
; Line 410
	mov	DWORD PTR _retval$[ebp], 2
; Line 411
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN50@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN50@t1_ps_get_
; Line 412
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	ax, WORD PTR [ecx+eax*2+96]
	mov	WORD PTR [edx], ax
$LN50@t1_ps_get_:
; Line 414
	jmp	$LN118@t1_ps_get_
$LN48@t1_ps_get_:
; Line 417
	mov	DWORD PTR _retval$[ebp], 1
; Line 418
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN47@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN47@t1_ps_get_
; Line 419
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	cl, BYTE PTR [eax+47]
	mov	BYTE PTR [edx], cl
$LN47@t1_ps_get_:
; Line 420
	jmp	$LN118@t1_ps_get_
$LN46@t1_ps_get_:
; Line 423
	mov	edx, DWORD PTR _type1$[ebp]
	movzx	eax, BYTE PTR [edx+47]
	cmp	DWORD PTR _idx$[ebp], eax
	jae	SHORT $LN45@t1_ps_get_
; Line 425
	mov	DWORD PTR _retval$[ebp], 2
; Line 426
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN45@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN45@t1_ps_get_
; Line 427
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	ax, WORD PTR [ecx+eax*2+124]
	mov	WORD PTR [edx], ax
$LN45@t1_ps_get_:
; Line 429
	jmp	$LN118@t1_ps_get_
$LN43@t1_ps_get_:
; Line 432
	mov	DWORD PTR _retval$[ebp], 1
; Line 433
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN42@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN42@t1_ps_get_
; Line 434
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	cl, BYTE PTR [eax+160]
	mov	BYTE PTR [edx], cl
$LN42@t1_ps_get_:
; Line 435
	jmp	$LN118@t1_ps_get_
$LN41@t1_ps_get_:
; Line 438
	mov	edx, DWORD PTR _type1$[ebp]
	movzx	eax, BYTE PTR [edx+160]
	cmp	DWORD PTR _idx$[ebp], eax
	jae	SHORT $LN40@t1_ps_get_
; Line 440
	mov	DWORD PTR _retval$[ebp], 2
; Line 441
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN40@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN40@t1_ps_get_
; Line 442
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	ax, WORD PTR [ecx+eax*2+164]
	mov	WORD PTR [edx], ax
$LN40@t1_ps_get_:
; Line 444
	jmp	$LN118@t1_ps_get_
$LN38@t1_ps_get_:
; Line 447
	mov	DWORD PTR _retval$[ebp], 1
; Line 448
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN37@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN37@t1_ps_get_
; Line 449
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	cl, BYTE PTR [eax+161]
	mov	BYTE PTR [edx], cl
$LN37@t1_ps_get_:
; Line 450
	jmp	$LN118@t1_ps_get_
$LN36@t1_ps_get_:
; Line 453
	mov	edx, DWORD PTR _type1$[ebp]
	movzx	eax, BYTE PTR [edx+161]
	cmp	DWORD PTR _idx$[ebp], eax
	jae	SHORT $LN35@t1_ps_get_
; Line 455
	mov	DWORD PTR _retval$[ebp], 2
; Line 456
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN35@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN35@t1_ps_get_
; Line 457
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	ax, WORD PTR [ecx+eax*2+190]
	mov	WORD PTR [edx], ax
$LN35@t1_ps_get_:
; Line 459
	jmp	$LN118@t1_ps_get_
$LN33@t1_ps_get_:
; Line 462
	mov	DWORD PTR _retval$[ebp], 1
; Line 463
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN32@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN32@t1_ps_get_
; Line 464
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	cl, BYTE PTR [eax+163]
	mov	BYTE PTR [edx], cl
$LN32@t1_ps_get_:
; Line 465
	jmp	$LN118@t1_ps_get_
$LN31@t1_ps_get_:
; Line 468
	mov	DWORD PTR _retval$[ebp], 1
; Line 469
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN30@t1_ps_get_
	mov	edx, DWORD PTR _value_len$[ebp]
	cmp	edx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN30@t1_ps_get_
; Line 470
	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	dl, BYTE PTR [ecx+162]
	mov	BYTE PTR [eax], dl
$LN30@t1_ps_get_:
; Line 471
	jmp	$LN118@t1_ps_get_
$LN29@t1_ps_get_:
; Line 475
	cmp	DWORD PTR _idx$[ebp], 2
	jae	SHORT $LN28@t1_ps_get_
; Line 477
	mov	DWORD PTR _retval$[ebp], 2
; Line 478
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN28@t1_ps_get_
	mov	eax, DWORD PTR _value_len$[ebp]
	cmp	eax, DWORD PTR _retval$[ebp]
	jl	SHORT $LN28@t1_ps_get_
; Line 479
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	dx, WORD PTR [eax+edx*2+228]
	mov	WORD PTR [ecx], dx
$LN28@t1_ps_get_:
; Line 481
	jmp	$LN118@t1_ps_get_
$LN26@t1_ps_get_:
; Line 484
	mov	DWORD PTR _retval$[ebp], 4
; Line 485
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN25@t1_ps_get_
	mov	eax, DWORD PTR _value_len$[ebp]
	cmp	eax, DWORD PTR _retval$[ebp]
	jl	SHORT $LN25@t1_ps_get_
; Line 486
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx], eax
$LN25@t1_ps_get_:
; Line 487
	jmp	$LN118@t1_ps_get_
$LN24@t1_ps_get_:
; Line 490
	mov	DWORD PTR _retval$[ebp], 4
; Line 491
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN23@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN23@t1_ps_get_
; Line 492
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR [edx], ecx
$LN23@t1_ps_get_:
; Line 493
	jmp	$LN118@t1_ps_get_
$LN22@t1_ps_get_:
; Line 496
	mov	DWORD PTR _retval$[ebp], 4
; Line 497
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN21@t1_ps_get_
	mov	edx, DWORD PTR _value_len$[ebp]
	cmp	edx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN21@t1_ps_get_
; Line 498
	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+220]
	mov	DWORD PTR [eax], edx
$LN21@t1_ps_get_:
; Line 499
	jmp	$LN118@t1_ps_get_
$LN20@t1_ps_get_:
; Line 502
	mov	DWORD PTR _retval$[ebp], 1
; Line 503
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN19@t1_ps_get_
	mov	eax, DWORD PTR _value_len$[ebp]
	cmp	eax, DWORD PTR _retval$[ebp]
	jl	SHORT $LN19@t1_ps_get_
; Line 504
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _type1$[ebp]
	mov	al, BYTE PTR [edx+24]
	mov	BYTE PTR [ecx], al
$LN19@t1_ps_get_:
; Line 505
	jmp	$LN118@t1_ps_get_
$LN18@t1_ps_get_:
; Line 508
	mov	DWORD PTR _retval$[ebp], 2
; Line 509
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN17@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN17@t1_ps_get_
; Line 510
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	cx, WORD PTR [eax+26]
	mov	WORD PTR [edx], cx
$LN17@t1_ps_get_:
; Line 511
	jmp	$LN118@t1_ps_get_
$LN16@t1_ps_get_:
; Line 514
	mov	DWORD PTR _retval$[ebp], 2
; Line 515
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN15@t1_ps_get_
	mov	edx, DWORD PTR _value_len$[ebp]
	cmp	edx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN15@t1_ps_get_
; Line 516
	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	dx, WORD PTR [ecx+28]
	mov	WORD PTR [eax], dx
$LN15@t1_ps_get_:
; Line 517
	jmp	$LN118@t1_ps_get_
$LN14@t1_ps_get_:
; Line 520
	mov	DWORD PTR _retval$[ebp], 2
; Line 521
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN13@t1_ps_get_
	mov	eax, DWORD PTR _value_len$[ebp]
	cmp	eax, DWORD PTR _retval$[ebp]
	jl	SHORT $LN13@t1_ps_get_
; Line 522
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _type1$[ebp]
	mov	ax, WORD PTR [edx+32]
	mov	WORD PTR [ecx], ax
$LN13@t1_ps_get_:
; Line 523
	jmp	$LN118@t1_ps_get_
$LN12@t1_ps_get_:
; Line 526
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _retval$[ebp], eax
; Line 527
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN11@t1_ps_get_
	mov	eax, DWORD PTR _value_len$[ebp]
	cmp	eax, DWORD PTR _retval$[ebp]
	jl	SHORT $LN11@t1_ps_get_
; Line 528
	mov	ecx, DWORD PTR _retval$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN11@t1_ps_get_:
; Line 529
	jmp	$LN118@t1_ps_get_
$LN10@t1_ps_get_:
; Line 532
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _retval$[ebp], eax
; Line 533
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN9@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN9@t1_ps_get_
; Line 534
	mov	edx, DWORD PTR _retval$[ebp]
	push	edx
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN9@t1_ps_get_:
; Line 535
	jmp	$LN118@t1_ps_get_
$LN8@t1_ps_get_:
; Line 538
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _retval$[ebp], eax
; Line 539
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN7@t1_ps_get_
	mov	edx, DWORD PTR _value_len$[ebp]
	cmp	edx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN7@t1_ps_get_
; Line 540
	mov	eax, DWORD PTR _retval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN7@t1_ps_get_:
; Line 541
	jmp	$LN118@t1_ps_get_
$LN6@t1_ps_get_:
; Line 544
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _retval$[ebp], eax
; Line 545
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN5@t1_ps_get_
	mov	eax, DWORD PTR _value_len$[ebp]
	cmp	eax, DWORD PTR _retval$[ebp]
	jl	SHORT $LN5@t1_ps_get_
; Line 546
	mov	ecx, DWORD PTR _retval$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN5@t1_ps_get_:
; Line 547
	jmp	SHORT $LN118@t1_ps_get_
$LN4@t1_ps_get_:
; Line 550
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _retval$[ebp], eax
; Line 551
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN3@t1_ps_get_
	mov	ecx, DWORD PTR _value_len$[ebp]
	cmp	ecx, DWORD PTR _retval$[ebp]
	jl	SHORT $LN3@t1_ps_get_
; Line 552
	mov	edx, DWORD PTR _retval$[ebp]
	push	edx
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@t1_ps_get_:
; Line 553
	jmp	SHORT $LN118@t1_ps_get_
$LN2@t1_ps_get_:
; Line 556
	mov	DWORD PTR _retval$[ebp], 4
; Line 557
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN118@t1_ps_get_
	mov	eax, DWORD PTR _value_len$[ebp]
	cmp	eax, DWORD PTR _retval$[ebp]
	jl	SHORT $LN118@t1_ps_get_
; Line 558
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx], eax
$LN118@t1_ps_get_:
; Line 562
	mov	eax, DWORD PTR _retval$[ebp]
; Line 563
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN122@t1_ps_get_:
	DD	$LN117@t1_ps_get_
	DD	$LN115@t1_ps_get_
	DD	$LN106@t1_ps_get_
	DD	$LN97@t1_ps_get_
	DD	$LN95@t1_ps_get_
	DD	$LN93@t1_ps_get_
	DD	$LN91@t1_ps_get_
	DD	$LN89@t1_ps_get_
	DD	$LN86@t1_ps_get_
	DD	$LN83@t1_ps_get_
	DD	$LN81@t1_ps_get_
	DD	$LN78@t1_ps_get_
	DD	$LN76@t1_ps_get_
	DD	$LN73@t1_ps_get_
	DD	$LN71@t1_ps_get_
	DD	$LN69@t1_ps_get_
	DD	$LN67@t1_ps_get_
	DD	$LN62@t1_ps_get_
	DD	$LN58@t1_ps_get_
	DD	$LN56@t1_ps_get_
	DD	$LN53@t1_ps_get_
	DD	$LN51@t1_ps_get_
	DD	$LN48@t1_ps_get_
	DD	$LN46@t1_ps_get_
	DD	$LN64@t1_ps_get_
	DD	$LN60@t1_ps_get_
	DD	$LN43@t1_ps_get_
	DD	$LN41@t1_ps_get_
	DD	$LN38@t1_ps_get_
	DD	$LN36@t1_ps_get_
	DD	$LN31@t1_ps_get_
	DD	$LN33@t1_ps_get_
	DD	$LN29@t1_ps_get_
	DD	$LN26@t1_ps_get_
	DD	$LN24@t1_ps_get_
	DD	$LN22@t1_ps_get_
	DD	$LN12@t1_ps_get_
	DD	$LN10@t1_ps_get_
	DD	$LN8@t1_ps_get_
	DD	$LN6@t1_ps_get_
	DD	$LN4@t1_ps_get_
	DD	$LN20@t1_ps_get_
	DD	$LN18@t1_ps_get_
	DD	$LN16@t1_ps_get_
	DD	$LN14@t1_ps_get_
	DD	$LN2@t1_ps_get_
$LN123@t1_ps_get_:
	DD	$LN110@t1_ps_get_
	DD	$LN109@t1_ps_get_
	DD	$LN108@t1_ps_get_
	DD	$LN107@t1_ps_get_
$LN124@t1_ps_get_:
	DD	$LN101@t1_ps_get_
	DD	$LN100@t1_ps_get_
	DD	$LN99@t1_ps_get_
	DD	$LN98@t1_ps_get_
_t1_ps_get_font_value ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_afont_private$ = 12					; size = 4
_t1_ps_get_font_private PROC
; File d:\mozilla\modules\freetype2\src\type1\t1driver.c
; Line 167
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 168
	mov	esi, DWORD PTR _face$[ebp]
	add	esi, 168				; 000000a8H
	mov	ecx, 49					; 00000031H
	mov	edi, DWORD PTR _afont_private$[ebp]
	rep movsd
; Line 170
	xor	eax, eax
; Line 171
	pop	edi
	pop	esi
	pop	ebp
	ret	0
_t1_ps_get_font_private ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_t1_ps_has_glyph_names PROC
; File d:\mozilla\modules\freetype2\src\type1\t1driver.c
; Line 157
	push	ebp
	mov	ebp, esp
; Line 158
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 160
	mov	eax, 1
; Line 161
	pop	ebp
	ret	0
_t1_ps_has_glyph_names ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_afont_extra$ = 12					; size = 4
_t1_ps_get_font_extra PROC
; File d:\mozilla\modules\freetype2\src\type1\t1driver.c
; Line 148
	push	ebp
	mov	ebp, esp
; Line 149
	mov	eax, DWORD PTR _face$[ebp]
	mov	cx, WORD PTR [eax+164]
	mov	edx, DWORD PTR _afont_extra$[ebp]
	mov	WORD PTR [edx], cx
; Line 151
	xor	eax, eax
; Line 152
	pop	ebp
	ret	0
_t1_ps_get_font_extra ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_afont_info$ = 12					; size = 4
_t1_ps_get_font_info PROC
; File d:\mozilla\modules\freetype2\src\type1\t1driver.c
; Line 138
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 139
	mov	esi, DWORD PTR _face$[ebp]
	add	esi, 132				; 00000084H
	mov	ecx, 8
	mov	edi, DWORD PTR _afont_info$[ebp]
	rep movsd
; Line 141
	xor	eax, eax
; Line 142
	pop	edi
	pop	esi
	pop	ebp
	ret	0
_t1_ps_get_font_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_t1_get_ps_name PROC
; File d:\mozilla\modules\freetype2\src\type1\t1driver.c
; Line 102
	push	ebp
	mov	ebp, esp
; Line 103
	mov	eax, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [eax+364]
; Line 104
	pop	ebp
	ret	0
_t1_get_ps_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gname$1 = -8						; size = 4
_i$ = -4						; size = 4
_face$ = 8						; size = 4
_glyph_name$ = 12					; size = 4
_t1_get_name_index PROC
; File d:\mozilla\modules\freetype2\src\type1\t1driver.c
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 75
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@t1_get_nam
$LN3@t1_get_nam:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@t1_get_nam:
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+416]
	jge	SHORT $LN2@t1_get_nam
; Line 77
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _gname$1[ebp], eax
; Line 80
	mov	ecx, DWORD PTR _gname$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_name$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@t1_get_nam
; Line 81
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN5@t1_get_nam
$LN1@t1_get_nam:
; Line 82
	jmp	SHORT $LN3@t1_get_nam
$LN2@t1_get_nam:
; Line 84
	xor	eax, eax
$LN5@t1_get_nam:
; Line 85
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_get_name_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_buffer$ = 16						; size = 4
_buffer_max$ = 20					; size = 4
_t1_get_glyph_name PROC
; File d:\mozilla\modules\freetype2\src\type1\t1driver.c
; Line 61
	push	ebp
	mov	ebp, esp
; Line 62
	mov	eax, DWORD PTR _buffer_max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+420]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_ft_mem_strcpyn
	add	esp, 12					; 0000000cH
; Line 64
	xor	eax, eax
; Line 65
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t1_get_glyph_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -16						; size = 4
_module$ = -12						; size = 4
_pshinter$ = -8						; size = 4
_face$ = -4						; size = 4
_size$ = 8						; size = 4
_T1_Size_Get_Globals_Funcs PROC
; File d:\mozilla\modules\freetype2\src\type1\t1objs.c
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 61
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 62
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+548]
	mov	DWORD PTR _pshinter$[ebp], eax
; Line 67
	push	OFFSET $SG9882
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _module$[ebp], eax
; Line 70
	cmp	DWORD PTR _module$[ebp], 0
	je	SHORT $LN3@T1_Size_Ge
	cmp	DWORD PTR _pshinter$[ebp], 0
	je	SHORT $LN3@T1_Size_Ge
	mov	edx, DWORD PTR _pshinter$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@T1_Size_Ge
	mov	esi, esp
	mov	eax, DWORD PTR _module$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pshinter$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@T1_Size_Ge
$LN3@T1_Size_Ge:
	mov	DWORD PTR tv79[ebp], 0
$LN4@T1_Size_Ge:
	mov	eax, DWORD PTR tv79[ebp]
; Line 71
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T1_Size_Get_Globals_Funcs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tk$1 = -12						; size = 4
_i$ = -8						; size = 4
_fi$ = -4						; size = 4
_face$ = 8						; size = 4
_ptsize$ = 12						; size = 4
_degree$ = 16						; size = 4
_kerning$ = 20						; size = 4
_T1_Get_Track_Kerning PROC
; File d:\mozilla\modules\freetype2\src\type1\t1afm.c
; Line 363
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 364
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	mov	DWORD PTR _fi$[ebp], ecx
; Line 368
	cmp	DWORD PTR _fi$[ebp], 0
	jne	SHORT $LN9@T1_Get_Tra
; Line 369
	push	OFFSET $SG11268
	push	369					; 00000171H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN10@T1_Get_Tra
$LN9@T1_Get_Tra:
; Line 371
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@T1_Get_Tra
$LN7@T1_Get_Tra:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@T1_Get_Tra:
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	$LN6@T1_Get_Tra
; Line 373
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	eax, DWORD PTR _fi$[ebp]
	add	edx, DWORD PTR [eax+28]
	mov	DWORD PTR _tk$1[ebp], edx
; Line 376
	mov	ecx, DWORD PTR _tk$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _degree$[ebp]
	je	SHORT $LN5@T1_Get_Tra
; Line 377
	jmp	SHORT $LN7@T1_Get_Tra
$LN5@T1_Get_Tra:
; Line 379
	mov	eax, DWORD PTR _tk$1[ebp]
	mov	ecx, DWORD PTR _ptsize$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN4@T1_Get_Tra
; Line 380
	mov	edx, DWORD PTR _kerning$[ebp]
	mov	eax, DWORD PTR _tk$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN3@T1_Get_Tra
$LN4@T1_Get_Tra:
; Line 381
	mov	edx, DWORD PTR _tk$1[ebp]
	mov	eax, DWORD PTR _ptsize$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jle	SHORT $LN2@T1_Get_Tra
; Line 382
	mov	ecx, DWORD PTR _kerning$[ebp]
	mov	edx, DWORD PTR _tk$1[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx], eax
; Line 383
	jmp	SHORT $LN3@T1_Get_Tra
$LN2@T1_Get_Tra:
; Line 388
	mov	ecx, DWORD PTR _tk$1[ebp]
	mov	edx, DWORD PTR _tk$1[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _tk$1[ebp]
	mov	edx, DWORD PTR _tk$1[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _tk$1[ebp]
	mov	edx, DWORD PTR _ptsize$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _tk$1[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [edx], eax
$LN3@T1_Get_Tra:
; Line 390
	jmp	$LN7@T1_Get_Tra
$LN6@T1_Get_Tra:
; Line 392
	xor	eax, eax
$LN10@T1_Get_Tra:
; Line 393
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T1_Get_Track_Kerning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_midi$1 = -20						; size = 4
_idx$ = -16						; size = 4
_max$ = -12						; size = 4
_mid$ = -8						; size = 4
_min$ = -4						; size = 4
_fi$ = 8						; size = 4
_glyph1$ = 12						; size = 4
_glyph2$ = 16						; size = 4
_kerning$ = 20						; size = 4
_T1_Get_Kerning PROC
; File d:\mozilla\modules\freetype2\src\type1\t1afm.c
; Line 322
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 324
	mov	eax, DWORD PTR _glyph1$[ebp]
	shl	eax, 16					; 00000010H
	or	eax, DWORD PTR _glyph2$[ebp]
	mov	DWORD PTR _idx$[ebp], eax
; Line 328
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _min$[ebp], edx
; Line 329
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	shl	ecx, 4
	mov	edx, DWORD PTR _min$[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	DWORD PTR _max$[ebp], eax
$LN5@T1_Get_Ker:
; Line 331
	mov	ecx, DWORD PTR _min$[ebp]
	cmp	ecx, DWORD PTR _max$[ebp]
	ja	SHORT $LN4@T1_Get_Ker
; Line 336
	mov	eax, DWORD PTR _max$[ebp]
	sub	eax, DWORD PTR _min$[ebp]
	sar	eax, 4
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 4
	add	eax, DWORD PTR _min$[ebp]
	mov	DWORD PTR _mid$[ebp], eax
; Line 337
	mov	edx, DWORD PTR _mid$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _mid$[ebp]
	or	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _midi$1[ebp], eax
; Line 339
	mov	edx, DWORD PTR _midi$1[ebp]
	cmp	edx, DWORD PTR _idx$[ebp]
	jne	SHORT $LN3@T1_Get_Ker
; Line 341
	mov	eax, DWORD PTR _kerning$[ebp]
	mov	ecx, DWORD PTR _mid$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
; Line 342
	mov	eax, DWORD PTR _kerning$[ebp]
	mov	ecx, DWORD PTR _mid$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+4], edx
; Line 344
	jmp	SHORT $LN6@T1_Get_Ker
$LN3@T1_Get_Ker:
; Line 347
	mov	eax, DWORD PTR _midi$1[ebp]
	cmp	eax, DWORD PTR _idx$[ebp]
	jae	SHORT $LN2@T1_Get_Ker
; Line 348
	mov	ecx, DWORD PTR _mid$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _min$[ebp], ecx
; Line 349
	jmp	SHORT $LN1@T1_Get_Ker
$LN2@T1_Get_Ker:
; Line 350
	mov	edx, DWORD PTR _mid$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR _max$[ebp], edx
$LN1@T1_Get_Ker:
; Line 351
	jmp	SHORT $LN5@T1_Get_Ker
$LN4@T1_Get_Ker:
; Line 353
	mov	eax, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [eax], 0
; Line 354
	mov	ecx, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN6@T1_Get_Ker:
; Line 355
	mov	esp, ebp
	pop	ebp
	ret	0
_T1_Get_Kerning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = 8						; size = 4
_fi$ = 12						; size = 4
_T1_Done_Metrics PROC
; File d:\mozilla\modules\freetype2\src\type1\t1afm.c
; Line 40
	push	ebp
	mov	ebp, esp
$LN9@T1_Done_Me:
; Line 41
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [eax+36], 0
	xor	ecx, ecx
	jne	SHORT $LN9@T1_Done_Me
; Line 42
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+40], 0
$LN6@T1_Done_Me:
; Line 44
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [eax+28], 0
	xor	ecx, ecx
	jne	SHORT $LN6@T1_Done_Me
; Line 45
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+32], 0
$LN3@T1_Done_Me:
; Line 47
	mov	eax, DWORD PTR _fi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _fi$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@T1_Done_Me
; Line 48
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_T1_Done_Metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_start$1 = -60						; size = 4
_t1_font$ = -56						; size = 4
_error$ = -48						; size = 4
_fi$ = -40						; size = 4
_parser$ = -32						; size = 20
_memory$ = -8						; size = 4
_psaux$ = -4						; size = 4
_t1_face$ = 8						; size = 4
_stream$ = 12						; size = 4
_T1_Read_Metrics PROC
; File d:\mozilla\modules\freetype2\src\type1\t1afm.c
; Line 236
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 238
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 240
	mov	DWORD PTR _fi$[ebp], 0
; Line 241
	mov	DWORD PTR _error$[ebp], 2
; Line 242
	mov	edx, DWORD PTR _t1_face$[ebp]
	add	edx, 132				; 00000084H
	mov	DWORD PTR _t1_font$[ebp], edx
; Line 246
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	44					; 0000002cH
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fi$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN8@T1_Read_Me
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@T1_Read_Me
$LN8@T1_Read_Me:
; Line 247
	jmp	$Exit$16
$LN9@T1_Read_Me:
; Line 249
	mov	edx, DWORD PTR _t1_font$[ebp]
	add	edx, 328				; 00000148H
	mov	eax, DWORD PTR _fi$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 250
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _t1_font$[ebp]
	mov	edx, DWORD PTR [ecx+340]
	mov	DWORD PTR [eax+20], edx
; Line 251
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _t1_font$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	mov	DWORD PTR [eax+24], edx
; Line 253
	mov	eax, DWORD PTR _t1_face$[ebp]
	mov	ecx, DWORD PTR [eax+488]
	mov	DWORD PTR _psaux$[ebp], ecx
; Line 254
	mov	edx, DWORD PTR _psaux$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	$LN7@T1_Read_Me
; Line 259
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	lea	eax, DWORD PTR _parser$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psaux$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 261
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN7@T1_Read_Me
; Line 263
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR _parser$[ebp+8], ecx
; Line 264
	mov	DWORD PTR _parser$[ebp+12], OFFSET _t1_get_index
; Line 265
	mov	edx, DWORD PTR _t1_font$[ebp]
	mov	DWORD PTR _parser$[ebp+16], edx
; Line 267
	mov	esi, esp
	lea	eax, DWORD PTR _parser$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psaux$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 268
	mov	esi, esp
	lea	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@T1_Read_Me:
; Line 272
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 2
	jne	$LN5@T1_Read_Me
; Line 274
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _start$1[ebp], ecx
; Line 280
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [edx+4], 6
	jbe	$LN5@T1_Read_Me
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _start$1[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 4
	jge	SHORT $LN5@T1_Read_Me
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _start$1[ebp]
	movzx	eax, BYTE PTR [edx+ecx+2]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _start$1[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+2]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _start$1[ebp]
	movzx	edx, BYTE PTR [ecx+edx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _start$1[ebp]
	movzx	edx, BYTE PTR [ecx+edx+2]
	or	eax, edx
	mov	ecx, DWORD PTR _stream$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jne	SHORT $LN5@T1_Read_Me
; Line 281
	mov	edx, DWORD PTR _fi$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t1_face$[ebp]
	push	ecx
	call	_T1_Read_PFM
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$LN5@T1_Read_Me:
; Line 284
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN3@T1_Read_Me
; Line 286
	mov	edx, DWORD PTR _fi$[ebp]
	add	edx, 4
	mov	eax, DWORD PTR _t1_font$[ebp]
	add	eax, 328				; 00000148H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 288
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _t1_face$[ebp]
	mov	DWORD PTR [edx+52], ecx
; Line 289
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _t1_face$[ebp]
	mov	DWORD PTR [edx+56], ecx
; Line 291
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 65535				; 0000ffffH
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _t1_face$[ebp]
	mov	DWORD PTR [edx+60], ecx
; Line 292
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 65535				; 0000ffffH
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _t1_face$[ebp]
	mov	DWORD PTR [edx+64], ecx
; Line 295
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 32768				; 00008000H
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _t1_face$[ebp]
	mov	WORD PTR [edx+70], cx
; Line 296
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 32768				; 00008000H
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _t1_face$[ebp]
	mov	WORD PTR [edx+72], cx
; Line 298
	mov	eax, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN3@T1_Read_Me
; Line 300
	mov	ecx, DWORD PTR _t1_face$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 64					; 00000040H
	mov	eax, DWORD PTR _t1_face$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 301
	mov	ecx, DWORD PTR _t1_face$[ebp]
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [ecx+492], edx
; Line 302
	mov	DWORD PTR _fi$[ebp], 0
$LN3@T1_Read_Me:
; Line 306
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
$Exit$16:
; Line 309
	cmp	DWORD PTR _fi$[ebp], 0
	je	SHORT $LN1@T1_Read_Me
; Line 310
	mov	ecx, DWORD PTR _fi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_T1_Done_Metrics
	add	esp, 8
$LN1@T1_Read_Me:
; Line 312
	mov	eax, DWORD PTR _error$[ebp]
; Line 313
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@T1_Read_Me
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@T1_Read_Me:
	DD	2
	DD	$LN14@T1_Read_Me
$LN14@T1_Read_Me:
	DD	-32					; ffffffe0H
	DD	20					; 00000014H
	DD	$LN12@T1_Read_Me
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN13@T1_Read_Me
$LN13@T1_Read_Me:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN12@T1_Read_Me:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_T1_Read_Metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv164 = -1678						; size = 1
tv143 = -1677						; size = 1
tv88 = -1676						; size = 4
tv89 = -1672						; size = 4
_y_scale$1 = -1668					; size = 4
_x_scale$2 = -1664					; size = 4
_vec$3 = -1660						; size = 4
_cur$4 = -1656						; size = 4
_n$5 = -1652						; size = 4
_advance$6 = -1644					; size = 8
_metrics$7 = -1632					; size = 4
_cbox$8 = -1624						; size = 16
_internal$9 = -1604					; size = 4
_glyph_data_loaded$ = -1598				; size = 1
_must_finish_decoder$ = -1597				; size = 1
_glyph_data$ = -1592					; size = 8
_font_offset$ = -1576					; size = 8
_font_matrix$ = -1560					; size = 16
_decoder_funcs$ = -1540					; size = 4
_psaux$ = -1536						; size = 4
_type1$ = -1532						; size = 4
_hinting$ = -1525					; size = 1
_face$ = -1524						; size = 4
_decoder$ = -1516					; size = 1500
_error$ = -12						; size = 4
_glyph$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_t1glyph$ = 8						; size = 4
_t1size$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_T1_Load_Glyph PROC
; File d:\mozilla\modules\freetype2\src\type1\t1gload.c
; Line 273
	push	ebp
	mov	ebp, esp
	sub	esp, 1680				; 00000690H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1680]
	mov	ecx, 420				; 000001a4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 274
	mov	eax, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR _glyph$[ebp], eax
; Line 277
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _face$[ebp], edx
; Line 279
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 132				; 00000084H
	mov	DWORD PTR _type1$[ebp], eax
; Line 280
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+488]
	mov	DWORD PTR _psaux$[ebp], edx
; Line 281
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _decoder_funcs$[ebp], ecx
; Line 286
	mov	BYTE PTR _must_finish_decoder$[ebp], 0
; Line 288
	mov	BYTE PTR _glyph_data_loaded$[ebp], 0
; Line 294
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jb	SHORT $LN32@T1_Load_Gl
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN32@T1_Load_Gl
; Line 299
	push	OFFSET $SG10993
	push	299					; 0000012bH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 300
	jmp	$Exit$52
$LN32@T1_Load_Gl:
; Line 303
	mov	eax, 4
	imul	ecx, eax, 35
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN31@T1_Load_Gl
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	push	OFFSET $SG10999
	call	_FT_Message
	add	esp, 8
$LN31@T1_Load_Gl:
	xor	eax, eax
	jne	SHORT $LN32@T1_Load_Gl
$LN28@T1_Load_Gl:
; Line 305
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+540], 0
	jne	SHORT $LN38@T1_Load_Gl
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN39@T1_Load_Gl
$LN38@T1_Load_Gl:
	mov	DWORD PTR tv89[ebp], 0
$LN39@T1_Load_Gl:
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+544], 0
	jne	SHORT $LN36@T1_Load_Gl
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN37@T1_Load_Gl
$LN36@T1_Load_Gl:
	mov	DWORD PTR tv88[ebp], 0
$LN37@T1_Load_Gl:
	mov	eax, DWORD PTR tv89[ebp]
	cmp	eax, DWORD PTR tv88[ebp]
	je	SHORT $LN27@T1_Load_Gl
	push	OFFSET $SG11005
	push	305					; 00000131H
	push	OFFSET $SG11006
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN27@T1_Load_Gl:
	xor	ecx, ecx
	jne	SHORT $LN28@T1_Load_Gl
; Line 307
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 1024				; 00000400H
	je	SHORT $LN24@T1_Load_Gl
; Line 308
	mov	eax, DWORD PTR _load_flags$[ebp]
	or	eax, 3
	mov	DWORD PTR _load_flags$[ebp], eax
$LN24@T1_Load_Gl:
; Line 310
	cmp	DWORD PTR _t1size$[ebp], 0
	je	SHORT $LN23@T1_Load_Gl
; Line 312
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _t1size$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+172], eax
; Line 313
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _t1size$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+176], eax
; Line 315
	jmp	SHORT $LN22@T1_Load_Gl
$LN23@T1_Load_Gl:
; Line 317
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+172], 65536		; 00010000H
; Line 318
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+176], 65536		; 00010000H
$LN22@T1_Load_Gl:
; Line 321
	xor	eax, eax
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	WORD PTR [ecx+110], ax
; Line 322
	xor	edx, edx
	mov	eax, DWORD PTR _t1glyph$[ebp]
	mov	WORD PTR [eax+108], dx
; Line 325
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 1
	jne	SHORT $LN40@T1_Load_Gl
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 2
	jne	SHORT $LN40@T1_Load_Gl
	mov	BYTE PTR tv143[ebp], 1
	jmp	SHORT $LN41@T1_Load_Gl
$LN40@T1_Load_Gl:
	mov	BYTE PTR tv143[ebp], 0
$LN41@T1_Load_Gl:
	mov	al, BYTE PTR tv143[ebp]
	mov	BYTE PTR _hinting$[ebp], al
; Line 327
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR [ecx+72], 1869968492		; 6f75746cH
; Line 337
	mov	esi, esp
	push	OFFSET _T1_Parse_Glyph
	mov	edx, DWORD PTR _load_flags$[ebp]
	sar	edx, 16					; 00000010H
	and	edx, 15					; 0000000fH
	push	edx
	movzx	eax, BYTE PTR _hinting$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	push	edx
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	push	ecx
	mov	edx, DWORD PTR _t1glyph$[ebp]
	push	edx
	mov	eax, DWORD PTR _t1size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR _decoder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoder_funcs$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 36					; 00000024H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 338
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@T1_Load_Gl
; Line 339
	jmp	$Exit$52
$LN21@T1_Load_Gl:
; Line 341
	mov	BYTE PTR _must_finish_decoder$[ebp], 1
; Line 344
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 1024				; 00000400H
	je	SHORT $LN42@T1_Load_Gl
	mov	BYTE PTR tv164[ebp], 1
	jmp	SHORT $LN43@T1_Load_Gl
$LN42@T1_Load_Gl:
	mov	BYTE PTR tv164[ebp], 0
$LN43@T1_Load_Gl:
	mov	cl, BYTE PTR tv164[ebp]
	mov	BYTE PTR _decoder$[ebp+69], cl
; Line 346
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+272]
	mov	DWORD PTR _decoder$[ebp+1364], eax
; Line 347
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+276]
	mov	DWORD PTR _decoder$[ebp+1368], edx
; Line 348
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	mov	DWORD PTR _decoder$[ebp+1372], ecx
; Line 350
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+544]
	mov	DWORD PTR _decoder$[ebp+1488], eax
; Line 351
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+540]
	mov	DWORD PTR _decoder$[ebp+1492], edx
; Line 355
	lea	eax, DWORD PTR _glyph_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_T1_Parse_Glyph_And_Get_Char_String
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 356
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@T1_Load_Gl
; Line 357
	jmp	$Exit$52
$LN20@T1_Load_Gl:
; Line 359
	mov	BYTE PTR _glyph_data_loaded$[ebp], 1
; Line 362
	mov	eax, DWORD PTR _decoder$[ebp+1376]
	mov	DWORD PTR _font_matrix$[ebp], eax
	mov	ecx, DWORD PTR _decoder$[ebp+1380]
	mov	DWORD PTR _font_matrix$[ebp+4], ecx
	mov	edx, DWORD PTR _decoder$[ebp+1384]
	mov	DWORD PTR _font_matrix$[ebp+8], edx
	mov	eax, DWORD PTR _decoder$[ebp+1388]
	mov	DWORD PTR _font_matrix$[ebp+12], eax
; Line 363
	mov	ecx, DWORD PTR _decoder$[ebp+1392]
	mov	DWORD PTR _font_offset$[ebp], ecx
	mov	edx, DWORD PTR _decoder$[ebp+1396]
	mov	DWORD PTR _font_offset$[ebp+4], edx
; Line 366
	mov	esi, esp
	lea	eax, DWORD PTR _decoder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoder_funcs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 368
	mov	BYTE PTR _must_finish_decoder$[ebp], 0
; Line 373
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$52
; Line 375
	mov	eax, DWORD PTR _t1glyph$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	and	ecx, 1
	mov	edx, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR [edx+124], ecx
; Line 376
	mov	eax, DWORD PTR _t1glyph$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	or	ecx, 4
	mov	edx, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR [edx+124], ecx
; Line 380
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 1024				; 00000400H
	je	$LN18@T1_Load_Gl
; Line 382
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR _internal$9[ebp], edx
; Line 386
	mov	eax, DWORD PTR _decoder$[ebp+32]
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 388
	mov	edx, DWORD PTR _decoder$[ebp+40]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 390
	mov	edx, DWORD PTR _internal$9[ebp]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _font_matrix$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _font_matrix$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _font_matrix$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _font_matrix$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
; Line 391
	mov	edx, DWORD PTR _internal$9[ebp]
	mov	eax, DWORD PTR _font_offset$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _font_offset$[ebp+4]
	mov	DWORD PTR [edx+32], ecx
; Line 392
	mov	edx, DWORD PTR _internal$9[ebp]
	mov	BYTE PTR [edx+8], 1
; Line 394
	jmp	$LN17@T1_Load_Gl
$LN18@T1_Load_Gl:
; Line 397
	mov	eax, DWORD PTR _t1glyph$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _metrics$7[ebp], eax
; Line 403
	mov	ecx, DWORD PTR _decoder$[ebp+40]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 405
	mov	eax, DWORD PTR _decoder$[ebp+40]
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR [ecx+56], eax
; Line 406
	mov	edx, DWORD PTR _t1glyph$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	BYTE PTR [eax+8], 0
; Line 408
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN16@T1_Load_Gl
; Line 412
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [edx+472]
	sub	ecx, DWORD PTR [eax+464]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 413
	mov	eax, DWORD PTR _t1glyph$[ebp]
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+60], edx
; Line 415
	jmp	SHORT $LN15@T1_Load_Gl
$LN16@T1_Load_Gl:
; Line 418
	mov	eax, DWORD PTR _decoder$[ebp+44]
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 420
	mov	edx, DWORD PTR _decoder$[ebp+44]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN15@T1_Load_Gl:
; Line 423
	mov	edx, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR [edx+72], 1869968492		; 6f75746cH
; Line 425
	cmp	DWORD PTR _t1size$[ebp], 0
	je	SHORT $LN14@T1_Load_Gl
	mov	eax, DWORD PTR _t1size$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cmp	ecx, 24					; 00000018H
	jge	SHORT $LN14@T1_Load_Gl
; Line 426
	mov	edx, DWORD PTR _t1glyph$[ebp]
	mov	eax, DWORD PTR [edx+124]
	or	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR [ecx+124], eax
$LN14@T1_Load_Gl:
; Line 431
	cmp	DWORD PTR _font_matrix$[ebp], 65536	; 00010000H
	jne	SHORT $LN12@T1_Load_Gl
	mov	edx, DWORD PTR _font_matrix$[ebp+12]
	cmp	edx, DWORD PTR _font_matrix$[ebp]
	jne	SHORT $LN12@T1_Load_Gl
	cmp	DWORD PTR _font_matrix$[ebp+4], 0
	jne	SHORT $LN12@T1_Load_Gl
	cmp	DWORD PTR _font_matrix$[ebp+8], 0
	je	SHORT $LN13@T1_Load_Gl
$LN12@T1_Load_Gl:
; Line 432
	lea	eax, DWORD PTR _font_matrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_FT_Outline_Transform
	add	esp, 8
$LN13@T1_Load_Gl:
; Line 434
	cmp	DWORD PTR _font_offset$[ebp], 0
	jne	SHORT $LN10@T1_Load_Gl
	cmp	DWORD PTR _font_offset$[ebp+4], 0
	je	SHORT $LN11@T1_Load_Gl
$LN10@T1_Load_Gl:
; Line 437
	mov	edx, DWORD PTR _font_offset$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _font_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
$LN11@T1_Load_Gl:
; Line 439
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _advance$6[ebp], eax
; Line 440
	mov	DWORD PTR _advance$6[ebp+4], 0
; Line 441
	lea	ecx, DWORD PTR _font_matrix$[ebp]
	push	ecx
	lea	edx, DWORD PTR _advance$6[ebp]
	push	edx
	call	_FT_Vector_Transform
	add	esp, 8
; Line 442
	mov	eax, DWORD PTR _advance$6[ebp]
	add	eax, DWORD PTR _font_offset$[ebp]
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 443
	mov	DWORD PTR _advance$6[ebp], 0
; Line 444
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _advance$6[ebp+4], eax
; Line 445
	lea	ecx, DWORD PTR _font_matrix$[ebp]
	push	ecx
	lea	edx, DWORD PTR _advance$6[ebp]
	push	edx
	call	_FT_Vector_Transform
	add	esp, 8
; Line 446
	mov	eax, DWORD PTR _advance$6[ebp+4]
	add	eax, DWORD PTR _font_offset$[ebp+4]
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 449
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 1
	jne	$LN9@T1_Load_Gl
; Line 453
	mov	eax, DWORD PTR _decoder$[ebp+16]
	mov	DWORD PTR _cur$4[ebp], eax
; Line 454
	mov	ecx, DWORD PTR _cur$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _vec$3[ebp], edx
; Line 455
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	mov	DWORD PTR _x_scale$2[ebp], ecx
; Line 456
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	DWORD PTR _y_scale$1[ebp], eax
; Line 460
	movzx	ecx, BYTE PTR _hinting$[ebp]
	test	ecx, ecx
	je	SHORT $LN7@T1_Load_Gl
	cmp	DWORD PTR _decoder$[ebp+72], 0
	jne	SHORT $LN8@T1_Load_Gl
$LN7@T1_Load_Gl:
; Line 461
	mov	edx, DWORD PTR _cur$4[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR _n$5[ebp], eax
	jmp	SHORT $LN6@T1_Load_Gl
$LN5@T1_Load_Gl:
	mov	ecx, DWORD PTR _n$5[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$5[ebp], ecx
	mov	edx, DWORD PTR _vec$3[ebp]
	add	edx, 8
	mov	DWORD PTR _vec$3[ebp], edx
$LN6@T1_Load_Gl:
	cmp	DWORD PTR _n$5[ebp], 0
	jle	SHORT $LN8@T1_Load_Gl
; Line 463
	mov	eax, DWORD PTR _x_scale$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _vec$3[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _vec$3[ebp]
	mov	DWORD PTR [ecx], eax
; Line 464
	mov	edx, DWORD PTR _y_scale$1[ebp]
	push	edx
	mov	eax, DWORD PTR _vec$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _vec$3[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 465
	jmp	SHORT $LN5@T1_Load_Gl
$LN8@T1_Load_Gl:
; Line 468
	mov	eax, DWORD PTR _x_scale$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 469
	mov	edx, DWORD PTR _y_scale$1[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$7[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [edx+28], eax
$LN9@T1_Load_Gl:
; Line 473
	lea	eax, DWORD PTR _cbox$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_FT_Outline_Get_CBox
	add	esp, 8
; Line 475
	mov	edx, DWORD PTR _cbox$8[ebp+8]
	sub	edx, DWORD PTR _cbox$8[ebp]
	mov	eax, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [eax], edx
; Line 476
	mov	ecx, DWORD PTR _cbox$8[ebp+12]
	sub	ecx, DWORD PTR _cbox$8[ebp+4]
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 478
	mov	eax, DWORD PTR _metrics$7[ebp]
	mov	ecx, DWORD PTR _cbox$8[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 479
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	eax, DWORD PTR _cbox$8[ebp+12]
	mov	DWORD PTR [edx+12], eax
; Line 481
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN17@T1_Load_Gl
; Line 485
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _metrics$7[ebp]
	push	ecx
	call	_ft_synthesize_vertical_metrics
	add	esp, 8
$LN17@T1_Load_Gl:
; Line 491
	mov	edx, DWORD PTR _t1glyph$[ebp]
	mov	eax, DWORD PTR _glyph_data$[ebp]
	mov	DWORD PTR [edx+136], eax
; Line 492
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	edx, DWORD PTR _glyph_data$[ebp+4]
	mov	DWORD PTR [ecx+140], edx
$Exit$52:
; Line 499
	movzx	eax, BYTE PTR _glyph_data_loaded$[ebp]
	test	eax, eax
	je	SHORT $LN2@T1_Load_Gl
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN2@T1_Load_Gl
; Line 503
	mov	esi, esp
	lea	eax, DWORD PTR _glyph_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 507
	mov	ecx, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR [ecx+136], 0
; Line 508
	mov	edx, DWORD PTR _t1glyph$[ebp]
	mov	DWORD PTR [edx+140], 0
$LN2@T1_Load_Gl:
; Line 512
	movzx	eax, BYTE PTR _must_finish_decoder$[ebp]
	test	eax, eax
	je	SHORT $LN1@T1_Load_Gl
; Line 513
	mov	esi, esp
	lea	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	mov	edx, DWORD PTR _decoder_funcs$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@T1_Load_Gl:
; Line 515
	mov	eax, DWORD PTR _error$[ebp]
; Line 516
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN51@T1_Load_Gl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1680				; 00000690H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN51@T1_Load_Gl:
	DD	6
	DD	$LN50@T1_Load_Gl
$LN50@T1_Load_Gl:
	DD	-1516					; fffffa14H
	DD	1500					; 000005dcH
	DD	$LN44@T1_Load_Gl
	DD	-1560					; fffff9e8H
	DD	16					; 00000010H
	DD	$LN45@T1_Load_Gl
	DD	-1576					; fffff9d8H
	DD	8
	DD	$LN46@T1_Load_Gl
	DD	-1592					; fffff9c8H
	DD	8
	DD	$LN47@T1_Load_Gl
	DD	-1624					; fffff9a8H
	DD	16					; 00000010H
	DD	$LN48@T1_Load_Gl
	DD	-1644					; fffff994H
	DD	8
	DD	$LN49@T1_Load_Gl
$LN49@T1_Load_Gl:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN48@T1_Load_Gl:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
$LN47@T1_Load_Gl:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN46@T1_Load_Gl:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN45@T1_Load_Gl:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN44@T1_Load_Gl:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_T1_Load_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -1532						; size = 4
_nn$ = -1528						; size = 4
_psaux$ = -1524						; size = 4
_type1$ = -1520						; size = 4
_decoder$ = -1512					; size = 1500
_face$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_t1face$ = 8						; size = 4
_first$ = 12						; size = 4
_count$ = 16						; size = 4
_load_flags$ = 20					; size = 4
_advances$ = 24						; size = 4
_T1_Get_Advances PROC
; File d:\mozilla\modules\freetype2\src\type1\t1gload.c
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 1532				; 000005fcH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1532]
	mov	ecx, 383				; 0000017fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 217
	mov	eax, DWORD PTR _t1face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 219
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 132				; 00000084H
	mov	DWORD PTR _type1$[ebp], ecx
; Line 220
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+488]
	mov	DWORD PTR _psaux$[ebp], eax
; Line 225
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN10@T1_Get_Adv
; Line 227
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN9@T1_Get_Adv
$LN8@T1_Get_Adv:
	mov	edx, DWORD PTR _nn$[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$[ebp], edx
$LN9@T1_Get_Adv:
	mov	eax, DWORD PTR _nn$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN7@T1_Get_Adv
; Line 228
	mov	ecx, DWORD PTR _nn$[ebp]
	mov	edx, DWORD PTR _advances$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
	jmp	SHORT $LN8@T1_Get_Adv
$LN7@T1_Get_Adv:
; Line 230
	xor	eax, eax
	jmp	$LN11@T1_Get_Adv
$LN10@T1_Get_Adv:
; Line 241
	mov	esi, esp
	push	OFFSET _T1_Parse_Glyph
	push	0
	push	0
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	push	ecx
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+288]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoder$[ebp]
	push	edx
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 36					; 00000024H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 242
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@T1_Get_Adv
; Line 243
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN11@T1_Get_Adv
$LN6@T1_Get_Adv:
; Line 245
	mov	BYTE PTR _decoder$[ebp+70], 1
; Line 246
	mov	BYTE PTR _decoder$[ebp+68], 0
; Line 248
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	mov	DWORD PTR _decoder$[ebp+1364], ecx
; Line 249
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+276]
	mov	DWORD PTR _decoder$[ebp+1368], eax
; Line 250
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	mov	DWORD PTR _decoder$[ebp+1372], edx
; Line 252
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+544]
	mov	DWORD PTR _decoder$[ebp+1488], ecx
; Line 253
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+540]
	mov	DWORD PTR _decoder$[ebp+1492], eax
; Line 255
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN5@T1_Get_Adv
$LN4@T1_Get_Adv:
	mov	ecx, DWORD PTR _nn$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$[ebp], ecx
$LN5@T1_Get_Adv:
	mov	edx, DWORD PTR _nn$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jae	SHORT $LN3@T1_Get_Adv
; Line 257
	mov	eax, DWORD PTR _first$[ebp]
	add	eax, DWORD PTR _nn$[ebp]
	push	eax
	lea	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_T1_Parse_Glyph
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 258
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@T1_Get_Adv
; Line 259
	mov	edx, DWORD PTR _decoder$[ebp+40]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _nn$[ebp]
	mov	edx, DWORD PTR _advances$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 260
	jmp	SHORT $LN1@T1_Get_Adv
$LN2@T1_Get_Adv:
; Line 261
	mov	eax, DWORD PTR _nn$[ebp]
	mov	ecx, DWORD PTR _advances$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
$LN1@T1_Get_Adv:
; Line 262
	jmp	SHORT $LN4@T1_Get_Adv
$LN3@T1_Get_Adv:
; Line 264
	xor	eax, eax
$LN11@T1_Get_Adv:
; Line 265
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@T1_Get_Adv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1532				; 000005fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@T1_Get_Adv:
	DD	1
	DD	$LN14@T1_Get_Adv
$LN14@T1_Get_Adv:
	DD	-1512					; fffffa18H
	DD	1500					; 000005dcH
	DD	$LN13@T1_Get_Adv
$LN13@T1_Get_Adv:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_T1_Get_Advances ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -1536						; size = 4
tv71 = -1532						; size = 4
_psaux$ = -1528						; size = 4
_type1$ = -1524						; size = 4
_glyph_index$ = -1520					; size = 4
_decoder$ = -1512					; size = 1500
_error$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_max_advance$ = 12					; size = 4
_T1_Compute_Max_Advance PROC
; File d:\mozilla\modules\freetype2\src\type1\t1gload.c
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 1536				; 00000600H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1536]
	mov	ecx, 384				; 00000180H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 159
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 132				; 00000084H
	mov	DWORD PTR _type1$[ebp], eax
; Line 160
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+488]
	mov	DWORD PTR _psaux$[ebp], edx
$LN10@T1_Compute:
; Line 163
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+540], 0
	jne	SHORT $LN15@T1_Compute
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN16@T1_Compute
$LN15@T1_Compute:
	mov	DWORD PTR tv71[ebp], 0
$LN16@T1_Compute:
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+544], 0
	jne	SHORT $LN13@T1_Compute
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN14@T1_Compute
$LN13@T1_Compute:
	mov	DWORD PTR tv70[ebp], 0
$LN14@T1_Compute:
	mov	edx, DWORD PTR tv71[ebp]
	cmp	edx, DWORD PTR tv70[ebp]
	je	SHORT $LN9@T1_Compute
	push	OFFSET $SG10924
	push	163					; 000000a3H
	push	OFFSET $SG10925
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@T1_Compute:
	xor	eax, eax
	jne	SHORT $LN10@T1_Compute
; Line 165
	mov	ecx, DWORD PTR _max_advance$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 176
	mov	esi, esp
	push	OFFSET _T1_Parse_Glyph
	push	0
	push	0
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+528]
	push	eax
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	lea	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 36					; 00000024H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 177
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@T1_Compute
; Line 178
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN11@T1_Compute
$LN6@T1_Compute:
; Line 180
	mov	BYTE PTR _decoder$[ebp+70], 1
; Line 181
	mov	BYTE PTR _decoder$[ebp+68], 0
; Line 183
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+272]
	mov	DWORD PTR _decoder$[ebp+1364], eax
; Line 184
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+276]
	mov	DWORD PTR _decoder$[ebp+1368], edx
; Line 185
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	mov	DWORD PTR _decoder$[ebp+1372], ecx
; Line 187
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+544]
	mov	DWORD PTR _decoder$[ebp+1488], eax
; Line 188
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+540]
	mov	DWORD PTR _decoder$[ebp+1492], edx
; Line 190
	mov	eax, DWORD PTR _max_advance$[ebp]
	mov	DWORD PTR [eax], 0
; Line 194
	mov	DWORD PTR _glyph_index$[ebp], 0
	jmp	SHORT $LN5@T1_Compute
$LN4@T1_Compute:
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _glyph_index$[ebp], ecx
$LN5@T1_Compute:
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	cmp	eax, DWORD PTR [edx+284]
	jge	SHORT $LN3@T1_Compute
; Line 197
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_T1_Parse_Glyph
	add	esp, 8
; Line 198
	cmp	DWORD PTR _glyph_index$[ebp], 0
	je	SHORT $LN1@T1_Compute
	mov	eax, DWORD PTR _max_advance$[ebp]
	mov	ecx, DWORD PTR _decoder$[ebp+40]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN2@T1_Compute
$LN1@T1_Compute:
; Line 199
	mov	edx, DWORD PTR _max_advance$[ebp]
	mov	eax, DWORD PTR _decoder$[ebp+40]
	mov	DWORD PTR [edx], eax
$LN2@T1_Compute:
; Line 202
	jmp	SHORT $LN4@T1_Compute
$LN3@T1_Compute:
; Line 204
	mov	esi, esp
	lea	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 206
	xor	eax, eax
$LN11@T1_Compute:
; Line 207
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@T1_Compute
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1536				; 00000600H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN19@T1_Compute:
	DD	1
	DD	$LN18@T1_Compute
$LN18@T1_Compute:
	DD	-1512					; fffffa18H
	DD	1500					; 000005dcH
	DD	$LN17@T1_Compute
$LN17@T1_Compute:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_T1_Compute_Max_Advance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_driver$ = 8						; size = 4
_T1_Driver_Done PROC
; File d:\mozilla\modules\freetype2\src\type1\t1objs.c
; Line 611
	push	ebp
	mov	ebp, esp
; Line 612
	mov	eax, DWORD PTR _driver$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 613
	pop	ebp
	ret	0
_T1_Driver_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_driver$ = 8						; size = 4
_T1_Driver_Init PROC
; File d:\mozilla\modules\freetype2\src\type1\t1objs.c
; Line 591
	push	ebp
	mov	ebp, esp
; Line 592
	mov	eax, DWORD PTR _driver$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 594
	xor	eax, eax
; Line 595
	pop	ebp
	ret	0
_T1_Driver_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_slot$ = 8						; size = 4
_T1_GlyphSlot_Done PROC
; File d:\mozilla\modules\freetype2\src\type1\t1objs.c
; Line 146
	push	ebp
	mov	ebp, esp
; Line 147
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR [ecx+36], 0
; Line 148
	pop	ebp
	ret	0
_T1_GlyphSlot_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_funcs$1 = -16						; size = 4
_module$2 = -12						; size = 4
_pshinter$ = -8						; size = 4
_face$ = -4						; size = 4
_slot$ = 8						; size = 4
_T1_GlyphSlot_Init PROC
; File d:\mozilla\modules\freetype2\src\type1\t1objs.c
; Line 153
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 158
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$[ebp], ecx
; Line 159
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+548]
	mov	DWORD PTR _pshinter$[ebp], eax
; Line 161
	cmp	DWORD PTR _pshinter$[ebp], 0
	je	SHORT $LN2@T1_GlyphSl
; Line 167
	push	OFFSET $SG9928
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _module$2[ebp], eax
; Line 168
	cmp	DWORD PTR _module$2[ebp], 0
	je	SHORT $LN2@T1_GlyphSl
; Line 173
	mov	esi, esp
	mov	edx, DWORD PTR _module$2[ebp]
	push	edx
	mov	eax, DWORD PTR _pshinter$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _funcs$1[ebp], eax
; Line 174
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR _funcs$1[ebp]
	mov	DWORD PTR [eax+36], ecx
$LN2@T1_GlyphSl:
; Line 178
	xor	eax, eax
; Line 179
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T1_GlyphSlot_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -24						; size = 4
tv72 = -20						; size = 4
_info$1 = -16						; size = 4
_type1$ = -12						; size = 4
_memory$ = -8						; size = 4
_face$ = -4						; size = 4
_t1face$ = 8						; size = 4
_T1_Face_Done PROC
; File d:\mozilla\modules\freetype2\src\type1\t1objs.c
; Line 202
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 203
	mov	eax, DWORD PTR _t1face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 208
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN58@T1_Face_Do
; Line 209
	jmp	$LN59@T1_Face_Do
$LN58@T1_Face_Do:
; Line 211
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 212
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 132				; 00000084H
	mov	DWORD PTR _type1$[ebp], eax
$LN57@T1_Face_Do:
; Line 216
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+540], 0
	jne	SHORT $LN63@T1_Face_Do
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN64@T1_Face_Do
$LN63@T1_Face_Do:
	mov	DWORD PTR tv72[ebp], 0
$LN64@T1_Face_Do:
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+544], 0
	jne	SHORT $LN61@T1_Face_Do
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN62@T1_Face_Do
$LN61@T1_Face_Do:
	mov	DWORD PTR tv71[ebp], 0
$LN62@T1_Face_Do:
	mov	eax, DWORD PTR tv72[ebp]
	cmp	eax, DWORD PTR tv71[ebp]
	je	SHORT $LN56@T1_Face_Do
	push	OFFSET $SG9945
	push	216					; 000000d8H
	push	OFFSET $SG9946
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN56@T1_Face_Do:
	xor	ecx, ecx
	jne	SHORT $LN57@T1_Face_Do
; Line 218
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+544], 0
	je	SHORT $LN53@T1_Face_Do
$LN52@T1_Face_Do:
; Line 220
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+544]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+544], 0
	xor	ecx, ecx
	jne	SHORT $LN52@T1_Face_Do
; Line 222
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+544], 0
; Line 223
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+540], 0
$LN53@T1_Face_Do:
; Line 226
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_T1_Done_Blend
	add	esp, 4
; Line 227
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+528], 0
; Line 232
	mov	eax, DWORD PTR _type1$[ebp]
	mov	DWORD PTR _info$1[ebp], eax
$LN49@T1_Face_Do:
; Line 235
	mov	ecx, DWORD PTR _info$1[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _info$1[ebp]
	mov	DWORD PTR [ecx], 0
	xor	edx, edx
	jne	SHORT $LN49@T1_Face_Do
$LN46@T1_Face_Do:
; Line 236
	mov	eax, DWORD PTR _info$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _info$1[ebp]
	mov	DWORD PTR [eax+4], 0
	xor	ecx, ecx
	jne	SHORT $LN46@T1_Face_Do
$LN43@T1_Face_Do:
; Line 237
	mov	edx, DWORD PTR _info$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _info$1[ebp]
	mov	DWORD PTR [edx+8], 0
	xor	eax, eax
	jne	SHORT $LN43@T1_Face_Do
$LN40@T1_Face_Do:
; Line 238
	mov	ecx, DWORD PTR _info$1[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _info$1[ebp]
	mov	DWORD PTR [ecx+12], 0
	xor	edx, edx
	jne	SHORT $LN40@T1_Face_Do
$LN37@T1_Face_Do:
; Line 239
	mov	eax, DWORD PTR _info$1[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _info$1[ebp]
	mov	DWORD PTR [eax+16], 0
	xor	ecx, ecx
	jne	SHORT $LN37@T1_Face_Do
$LN34@T1_Face_Do:
; Line 243
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+296]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [edx+296], 0
	xor	eax, eax
	jne	SHORT $LN34@T1_Face_Do
$LN31@T1_Face_Do:
; Line 244
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [ecx+292], 0
	xor	edx, edx
	jne	SHORT $LN31@T1_Face_Do
$LN28@T1_Face_Do:
; Line 245
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [eax+288], 0
	xor	ecx, ecx
	jne	SHORT $LN28@T1_Face_Do
$LN25@T1_Face_Do:
; Line 247
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+276]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [edx+276], 0
	xor	eax, eax
	jne	SHORT $LN25@T1_Face_Do
$LN22@T1_Face_Do:
; Line 248
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [ecx+280], 0
	xor	edx, edx
	jne	SHORT $LN22@T1_Face_Do
$LN19@T1_Face_Do:
; Line 250
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [eax+260], 0
	xor	ecx, ecx
	jne	SHORT $LN19@T1_Face_Do
$LN16@T1_Face_Do:
; Line 251
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+264]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [edx+264], 0
	xor	eax, eax
	jne	SHORT $LN16@T1_Face_Do
$LN13@T1_Face_Do:
; Line 252
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [ecx+268], 0
	xor	edx, edx
	jne	SHORT $LN13@T1_Face_Do
$LN10@T1_Face_Do:
; Line 254
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [eax+252], 0
	xor	ecx, ecx
	jne	SHORT $LN10@T1_Face_Do
$LN7@T1_Face_Do:
; Line 255
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+256]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [edx+256], 0
	xor	eax, eax
	jne	SHORT $LN7@T1_Face_Do
$LN4@T1_Face_Do:
; Line 256
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR [ecx+232], 0
	xor	edx, edx
	jne	SHORT $LN4@T1_Face_Do
; Line 260
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+492], 0
	je	SHORT $LN1@T1_Face_Do
; Line 261
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_T1_Done_Metrics
	add	esp, 8
$LN1@T1_Face_Do:
; Line 271
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 272
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+24], 0
$LN59@T1_Face_Do:
; Line 273
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T1_Face_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv297 = -96						; size = 4
_clazz$1 = -92						; size = 4
_cmap_classes$2 = -88					; size = 4
_charmap$3 = -80					; size = 12
_root$4 = -64						; size = 4
_max_advance$5 = -56					; size = 4
_the_same$6 = -45					; size = 1
_family$7 = -44						; size = 4
_full$8 = -40						; size = 4
_root$9 = -36						; size = 4
__tmp_$10 = -32						; size = 4
_module$11 = -28					; size = 4
_info$ = -24						; size = 4
_type1$ = -20						; size = 4
_psaux$ = -16						; size = 4
_psnames$ = -12						; size = 4
_error$ = -8						; size = 4
_face$ = -4						; size = 4
_stream$ = 8						; size = 4
_t1face$ = 12						; size = 4
_face_index$ = 16					; size = 4
_num_params$ = 20					; size = 4
_params$ = 24						; size = 4
_T1_Face_Init PROC
; File d:\mozilla\modules\freetype2\src\type1\t1objs.c
; Line 305
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 306
	mov	eax, DWORD PTR _t1face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 310
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 132				; 00000084H
	mov	DWORD PTR _type1$[ebp], ecx
; Line 311
	mov	edx, DWORD PTR _type1$[ebp]
	mov	DWORD PTR _info$[ebp], edx
; Line 313
	mov	eax, DWORD PTR _num_params$[ebp]
	mov	DWORD PTR _num_params$[ebp], eax
; Line 314
	mov	ecx, DWORD PTR _params$[ebp]
	mov	DWORD PTR _params$[ebp], ecx
; Line 315
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _stream$[ebp], edx
; Line 318
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax], 1
$LN50@T1_Face_In:
; Line 320
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _module$11[ebp], edx
	push	OFFSET $SG10047
	mov	eax, DWORD PTR _module$11[ebp]
	push	eax
	call	_ft_module_get_service
	add	esp, 8
	mov	DWORD PTR __tmp_$10[ebp], eax
	mov	ecx, DWORD PTR __tmp_$10[ebp]
	mov	DWORD PTR _psnames$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN50@T1_Face_In
; Line 321
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _psnames$[ebp]
	mov	DWORD PTR [eax+484], ecx
; Line 324
	push	OFFSET $SG10049
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_Get_Module_Interface
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+488], eax
; Line 325
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+488]
	mov	DWORD PTR _psaux$[ebp], ecx
; Line 326
	cmp	DWORD PTR _psaux$[ebp], 0
	jne	SHORT $LN47@T1_Face_In
; Line 328
	push	OFFSET $SG10052
	call	_FT_Message
	add	esp, 4
; Line 329
	push	OFFSET $SG10053
	push	329					; 00000149H
	push	11					; 0000000bH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 11					; 0000000bH
	mov	DWORD PTR _error$[ebp], eax
; Line 330
	jmp	$Exit$58
$LN47@T1_Face_In:
; Line 334
	push	OFFSET $SG10056
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_Get_Module_Interface
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+548], eax
$LN46@T1_Face_In:
; Line 336
	mov	eax, 4
	imul	ecx, eax, 38
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN45@T1_Face_In
	push	OFFSET $SG10061
	call	_FT_Message
	add	esp, 4
$LN45@T1_Face_In:
	xor	edx, edx
	jne	SHORT $LN46@T1_Face_In
; Line 339
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_T1_Open_Face
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 340
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN42@T1_Face_In
; Line 341
	jmp	$Exit$58
$LN42@T1_Face_In:
; Line 344
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN41@T1_Face_In
; Line 345
	jmp	$Exit$58
$LN41@T1_Face_In:
; Line 348
	cmp	DWORD PTR _face_index$[ebp], 0
	jle	SHORT $LN40@T1_Face_In
; Line 350
	push	OFFSET $SG10065
	call	_FT_Message
	add	esp, 4
; Line 351
	push	OFFSET $SG10066
	push	351					; 0000015fH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 352
	jmp	$Exit$58
$LN40@T1_Face_In:
; Line 361
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR _root$9[ebp], ecx
; Line 364
	mov	edx, DWORD PTR _root$9[ebp]
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	mov	DWORD PTR [edx+16], ecx
; Line 365
	mov	edx, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 370
	mov	eax, DWORD PTR _root$9[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 2577				; 00000a11H
	mov	edx, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 372
	mov	eax, DWORD PTR _info$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN39@T1_Face_In
; Line 373
	mov	edx, DWORD PTR _root$9[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 4
	mov	ecx, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN39@T1_Face_In:
; Line 375
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+528], 0
	je	SHORT $LN38@T1_Face_In
; Line 376
	mov	eax, DWORD PTR _root$9[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN38@T1_Face_In:
; Line 389
	mov	eax, DWORD PTR _root$9[ebp]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+20], edx
; Line 390
	mov	eax, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 392
	mov	ecx, DWORD PTR _root$9[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	$LN37@T1_Face_In
; Line 394
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _full$8[ebp], eax
; Line 395
	mov	ecx, DWORD PTR _root$9[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _family$7[ebp], edx
; Line 398
	cmp	DWORD PTR _full$8[ebp], 0
	je	$LN36@T1_Face_In
; Line 400
	mov	BYTE PTR _the_same$6[ebp], 1
$LN35@T1_Face_In:
; Line 403
	mov	eax, DWORD PTR _full$8[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN34@T1_Face_In
; Line 405
	mov	edx, DWORD PTR _full$8[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _family$7[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN33@T1_Face_In
; Line 407
	mov	eax, DWORD PTR _family$7[ebp]
	add	eax, 1
	mov	DWORD PTR _family$7[ebp], eax
; Line 408
	mov	ecx, DWORD PTR _full$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _full$8[ebp], ecx
; Line 410
	jmp	SHORT $LN32@T1_Face_In
$LN33@T1_Face_In:
; Line 412
	mov	edx, DWORD PTR _full$8[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN30@T1_Face_In
	mov	ecx, DWORD PTR _full$8[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 45					; 0000002dH
	jne	SHORT $LN31@T1_Face_In
$LN30@T1_Face_In:
; Line 413
	mov	eax, DWORD PTR _full$8[ebp]
	add	eax, 1
	mov	DWORD PTR _full$8[ebp], eax
	jmp	SHORT $LN32@T1_Face_In
$LN31@T1_Face_In:
; Line 414
	mov	ecx, DWORD PTR _family$7[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN27@T1_Face_In
	mov	eax, DWORD PTR _family$7[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN28@T1_Face_In
$LN27@T1_Face_In:
; Line 415
	mov	edx, DWORD PTR _family$7[ebp]
	add	edx, 1
	mov	DWORD PTR _family$7[ebp], edx
; Line 416
	jmp	SHORT $LN32@T1_Face_In
$LN28@T1_Face_In:
; Line 418
	mov	BYTE PTR _the_same$6[ebp], 0
; Line 420
	mov	eax, DWORD PTR _family$7[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN25@T1_Face_In
; Line 421
	mov	edx, DWORD PTR _root$9[ebp]
	mov	eax, DWORD PTR _full$8[ebp]
	mov	DWORD PTR [edx+24], eax
$LN25@T1_Face_In:
; Line 422
	jmp	SHORT $LN34@T1_Face_In
$LN32@T1_Face_In:
; Line 425
	jmp	$LN35@T1_Face_In
$LN34@T1_Face_In:
; Line 427
	movzx	ecx, BYTE PTR _the_same$6[ebp]
	test	ecx, ecx
	je	SHORT $LN36@T1_Face_In
; Line 428
	mov	edx, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG10091
$LN36@T1_Face_In:
; Line 431
	jmp	SHORT $LN23@T1_Face_In
$LN37@T1_Face_In:
; Line 434
	mov	eax, DWORD PTR _type1$[ebp]
	cmp	DWORD PTR [eax+232], 0
	je	SHORT $LN23@T1_Face_In
; Line 435
	mov	ecx, DWORD PTR _root$9[ebp]
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+232]
	mov	DWORD PTR [ecx+20], eax
$LN23@T1_Face_In:
; Line 438
	mov	ecx, DWORD PTR _root$9[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN21@T1_Face_In
; Line 440
	mov	edx, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN20@T1_Face_In
; Line 441
	mov	eax, DWORD PTR _root$9[ebp]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+24], edx
; Line 442
	jmp	SHORT $LN21@T1_Face_In
$LN20@T1_Face_In:
; Line 444
	mov	eax, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG10098
$LN21@T1_Face_In:
; Line 448
	mov	ecx, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 449
	mov	edx, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN18@T1_Face_In
; Line 450
	mov	eax, DWORD PTR _root$9[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 1
	mov	edx, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN18@T1_Face_In:
; Line 451
	mov	eax, DWORD PTR _info$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN17@T1_Face_In
; Line 454
	push	OFFSET $SG10103
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@T1_Face_In
	push	OFFSET $SG10104
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@T1_Face_In
$LN15@T1_Face_In:
; Line 455
	mov	edx, DWORD PTR _root$9[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 2
	mov	ecx, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN17@T1_Face_In:
; Line 459
	mov	edx, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 460
	mov	eax, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 462
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+328]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [eax+52], edx
; Line 463
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [eax+56], edx
; Line 465
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+336]
	add	edx, 65535				; 0000ffffH
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [eax+60], edx
; Line 466
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+340]
	add	edx, 65535				; 0000ffffH
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _root$9[ebp]
	mov	DWORD PTR [eax+64], edx
; Line 469
	mov	ecx, DWORD PTR _root$9[ebp]
	movzx	edx, WORD PTR [ecx+68]
	test	edx, edx
	jne	SHORT $LN14@T1_Face_In
; Line 470
	mov	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR _root$9[ebp]
	mov	WORD PTR [ecx+68], ax
$LN14@T1_Face_In:
; Line 472
	mov	edx, DWORD PTR _root$9[ebp]
	mov	eax, DWORD PTR _root$9[ebp]
	mov	cx, WORD PTR [eax+64]
	mov	WORD PTR [edx+70], cx
; Line 473
	mov	edx, DWORD PTR _root$9[ebp]
	mov	eax, DWORD PTR _root$9[ebp]
	mov	cx, WORD PTR [eax+56]
	mov	WORD PTR [edx+72], cx
; Line 475
	mov	edx, DWORD PTR _root$9[ebp]
	movzx	eax, WORD PTR [edx+68]
	imul	eax, eax, 12
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	edx, DWORD PTR _root$9[ebp]
	mov	WORD PTR [edx+74], ax
; Line 476
	mov	eax, DWORD PTR _root$9[ebp]
	movsx	ecx, WORD PTR [eax+74]
	mov	edx, DWORD PTR _root$9[ebp]
	movsx	eax, WORD PTR [edx+70]
	mov	edx, DWORD PTR _root$9[ebp]
	movsx	edx, WORD PTR [edx+72]
	sub	eax, edx
	cmp	ecx, eax
	jge	SHORT $LN13@T1_Face_In
; Line 477
	mov	eax, DWORD PTR _root$9[ebp]
	movsx	ecx, WORD PTR [eax+70]
	mov	edx, DWORD PTR _root$9[ebp]
	movsx	eax, WORD PTR [edx+72]
	sub	ecx, eax
	mov	edx, DWORD PTR _root$9[ebp]
	mov	WORD PTR [edx+74], cx
$LN13@T1_Face_In:
; Line 481
	mov	eax, DWORD PTR _root$9[ebp]
	mov	ecx, DWORD PTR _root$9[ebp]
	mov	dx, WORD PTR [ecx+60]
	mov	WORD PTR [eax+76], dx
; Line 486
	lea	eax, DWORD PTR _max_advance$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_T1_Compute_Max_Advance
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 489
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN12@T1_Face_In
; Line 490
	mov	edx, DWORD PTR _max_advance$5[ebp]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _root$9[ebp]
	mov	WORD PTR [ecx+76], ax
; Line 491
	jmp	SHORT $LN11@T1_Face_In
$LN12@T1_Face_In:
; Line 492
	mov	DWORD PTR _error$[ebp], 0
$LN11@T1_Face_In:
; Line 495
	mov	edx, DWORD PTR _root$9[ebp]
	mov	eax, DWORD PTR _root$9[ebp]
	mov	cx, WORD PTR [eax+74]
	mov	WORD PTR [edx+78], cx
; Line 497
	mov	edx, DWORD PTR _root$9[ebp]
	mov	eax, DWORD PTR _info$[ebp]
	mov	cx, WORD PTR [eax+26]
	mov	WORD PTR [edx+80], cx
; Line 498
	mov	edx, DWORD PTR _root$9[ebp]
	mov	eax, DWORD PTR _info$[ebp]
	mov	cx, WORD PTR [eax+28]
	mov	WORD PTR [edx+82], cx
; Line 502
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR _root$4[ebp], edx
; Line 505
	cmp	DWORD PTR _psnames$[ebp], 0
	je	$Exit$58
; Line 508
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cmap_classes$2[ebp], ecx
; Line 512
	mov	edx, DWORD PTR _root$4[ebp]
	mov	DWORD PTR _charmap$3[ebp], edx
; Line 515
	mov	eax, 3
	mov	WORD PTR _charmap$3[ebp+8], ax
; Line 516
	mov	ecx, 1
	mov	WORD PTR _charmap$3[ebp+10], cx
; Line 517
	mov	DWORD PTR _charmap$3[ebp+4], 1970170211	; 756e6963H
; Line 519
	push	0
	lea	edx, DWORD PTR _charmap$3[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _cmap_classes$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_FT_CMap_New
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 521
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@T1_Face_In
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 163				; 000000a3H
	je	SHORT $LN9@T1_Face_In
; Line 522
	jmp	$Exit$58
$LN9@T1_Face_In:
; Line 523
	mov	DWORD PTR _error$[ebp], 0
; Line 526
	mov	eax, 7
	mov	WORD PTR _charmap$3[ebp+8], ax
; Line 527
	mov	DWORD PTR _clazz$1[ebp], 0
; Line 529
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	mov	DWORD PTR tv297[ebp], edx
	mov	eax, DWORD PTR tv297[ebp]
	sub	eax, 1
	mov	DWORD PTR tv297[ebp], eax
	cmp	DWORD PTR tv297[ebp], 3
	ja	SHORT $LN7@T1_Face_In
	mov	ecx, DWORD PTR tv297[ebp]
	jmp	DWORD PTR $LN57@T1_Face_In[ecx*4]
$LN6@T1_Face_In:
; Line 532
	mov	DWORD PTR _charmap$3[ebp+4], 1094995778	; 41444f42H
; Line 533
	xor	edx, edx
	mov	WORD PTR _charmap$3[ebp+10], dx
; Line 534
	mov	eax, DWORD PTR _cmap_classes$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _clazz$1[ebp], ecx
; Line 535
	jmp	SHORT $LN7@T1_Face_In
$LN5@T1_Face_In:
; Line 538
	mov	DWORD PTR _charmap$3[ebp+4], 1094992453	; 41444245H
; Line 539
	mov	edx, 1
	mov	WORD PTR _charmap$3[ebp+10], dx
; Line 540
	mov	eax, DWORD PTR _cmap_classes$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _clazz$1[ebp], ecx
; Line 541
	jmp	SHORT $LN7@T1_Face_In
$LN4@T1_Face_In:
; Line 544
	mov	DWORD PTR _charmap$3[ebp+4], 1094992451	; 41444243H
; Line 545
	mov	edx, 2
	mov	WORD PTR _charmap$3[ebp+10], dx
; Line 546
	mov	eax, DWORD PTR _cmap_classes$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _clazz$1[ebp], ecx
; Line 547
	jmp	SHORT $LN7@T1_Face_In
$LN3@T1_Face_In:
; Line 550
	mov	DWORD PTR _charmap$3[ebp+4], 1818326065	; 6c617431H
; Line 551
	mov	edx, 3
	mov	WORD PTR _charmap$3[ebp+10], dx
; Line 552
	mov	eax, DWORD PTR _cmap_classes$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _clazz$1[ebp], ecx
$LN7@T1_Face_In:
; Line 559
	cmp	DWORD PTR _clazz$1[ebp], 0
	je	SHORT $Exit$58
; Line 560
	push	0
	lea	edx, DWORD PTR _charmap$3[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _clazz$1[ebp]
	push	eax
	call	_FT_CMap_New
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$Exit$58:
; Line 571
	mov	eax, DWORD PTR _error$[ebp]
; Line 572
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN56@T1_Face_In
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN56@T1_Face_In:
	DD	2
	DD	$LN55@T1_Face_In
$LN55@T1_Face_In:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN53@T1_Face_In
	DD	-80					; ffffffb0H
	DD	12					; 0000000cH
	DD	$LN54@T1_Face_In
$LN54@T1_Face_In:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN53@T1_Face_In:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN57@T1_Face_In:
	DD	$LN4@T1_Face_In
	DD	$LN6@T1_Face_In
	DD	$LN3@T1_Face_In
	DD	$LN5@T1_Face_In
_T1_Face_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$1 = -28						; size = 4
_globals$2 = -20					; size = 4
_funcs$ = -12						; size = 4
_error$ = -8						; size = 4
_size$ = -4						; size = 4
_t1size$ = 8						; size = 4
_T1_Size_Init PROC
; File d:\mozilla\modules\freetype2\src\type1\t1objs.c
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 97
	mov	eax, DWORD PTR _t1size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 98
	mov	DWORD PTR _error$[ebp], 0
; Line 99
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_T1_Size_Get_Globals_Funcs
	add	esp, 4
	mov	DWORD PTR _funcs$[ebp], eax
; Line 102
	cmp	DWORD PTR _funcs$[ebp], 0
	je	SHORT $LN2@T1_Size_In
; Line 105
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _face$1[ebp], eax
; Line 109
	mov	esi, esp
	lea	ecx, DWORD PTR _globals$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$1[ebp]
	add	edx, 168				; 000000a8H
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR _funcs$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 110
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@T1_Size_In
; Line 111
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _globals$2[ebp]
	mov	DWORD PTR [edx+40], eax
$LN2@T1_Size_In:
; Line 114
	mov	eax, DWORD PTR _error$[ebp]
; Line 115
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@T1_Size_In
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@T1_Size_In:
	DD	1
	DD	$LN6@T1_Size_In
$LN6@T1_Size_In:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@T1_Size_In
$LN5@T1_Size_In:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
_T1_Size_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_funcs$ = -8						; size = 4
_size$ = -4						; size = 4
_t1size$ = 8						; size = 4
_req$ = 12						; size = 4
_T1_Size_Request PROC
; File d:\mozilla\modules\freetype2\src\type1\t1objs.c
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 122
	mov	eax, DWORD PTR _t1size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 123
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_T1_Size_Get_Globals_Funcs
	add	esp, 4
	mov	DWORD PTR _funcs$[ebp], eax
; Line 126
	mov	edx, DWORD PTR _req$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_Request_Metrics
	add	esp, 8
; Line 128
	cmp	DWORD PTR _funcs$[ebp], 0
	je	SHORT $LN1@T1_Size_Re
; Line 132
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _funcs$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@T1_Size_Re:
; Line 134
	xor	eax, eax
; Line 135
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T1_Size_Request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_funcs$1 = -8						; size = 4
_size$ = -4						; size = 4
_t1size$ = 8						; size = 4
_T1_Size_Done PROC
; File d:\mozilla\modules\freetype2\src\type1\t1objs.c
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 77
	mov	eax, DWORD PTR _t1size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 80
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN3@T1_Size_Do
; Line 85
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	_T1_Size_Get_Globals_Funcs
	add	esp, 4
	mov	DWORD PTR _funcs$1[ebp], eax
; Line 86
	cmp	DWORD PTR _funcs$1[ebp], 0
	je	SHORT $LN1@T1_Size_Do
; Line 87
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _funcs$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@T1_Size_Do:
; Line 89
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+40], 0
$LN3@T1_Size_Do:
; Line 91
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T1_Size_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = -4						; size = 4
_loader$ = 8						; size = 4
_t1_done_loader PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 2065
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2066
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
$LN20@t1_done_lo:
; Line 2070
	mov	ecx, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [ecx+148], 0
	je	SHORT $LN19@t1_done_lo
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 100				; 00000064H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@t1_done_lo:
	xor	edx, edx
	jne	SHORT $LN20@t1_done_lo
$LN16@t1_done_lo:
; Line 2071
	mov	eax, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [eax+256], 0
	je	SHORT $LN15@t1_done_lo
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 208				; 000000d0H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@t1_done_lo:
	xor	ecx, ecx
	jne	SHORT $LN16@t1_done_lo
$LN12@t1_done_lo:
; Line 2072
	mov	edx, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [edx+204], 0
	je	SHORT $LN11@t1_done_lo
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 156				; 0000009cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@t1_done_lo:
	xor	eax, eax
	jne	SHORT $LN12@t1_done_lo
$LN8@t1_done_lo:
; Line 2073
	mov	ecx, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [ecx+308], 0
	je	SHORT $LN7@t1_done_lo
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 260				; 00000104H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@t1_done_lo:
	xor	edx, edx
	jne	SHORT $LN8@t1_done_lo
$LN4@t1_done_lo:
; Line 2074
	mov	eax, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [eax+364], 0
	je	SHORT $LN3@t1_done_lo
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 316				; 0000013cH
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+364]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@t1_done_lo:
	xor	ecx, ecx
	jne	SHORT $LN4@t1_done_lo
; Line 2077
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_T1_Finalize_Parser
	add	esp, 4
; Line 2078
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_done_loader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_loader$ = 8						; size = 4
_face$ = 12						; size = 4
_t1_init_loader PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 2045
	push	ebp
	mov	ebp, esp
; Line 2046
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 2048
	push	376					; 00000178H
	push	0
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2049
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+152], 0
; Line 2050
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+96], 0
; Line 2053
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+112], 0
; Line 2054
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+220], 0
; Line 2055
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+168], 0
; Line 2056
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+328], 0
; Line 2057
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+272], 0
; Line 2058
	mov	eax, DWORD PTR _loader$[ebp]
	mov	BYTE PTR [eax+368], 0
; Line 2059
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+372], 0
; Line 2060
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t1_init_loader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv452 = -92						; size = 4
tv404 = -86						; size = 1
tv379 = -85						; size = 1
_dict$1 = -84						; size = 4
_name$2 = -80						; size = 4
_keyword$3 = -76					; size = 4
_len$4 = -72						; size = 4
_b$5 = -64						; size = 4
_s$6 = -52						; size = 4
_b$7 = -40						; size = 4
_s$8 = -28						; size = 4
_cur$9 = -20						; size = 4
_have_integer$ = -13					; size = 1
_start_binary$ = -12					; size = 4
_limit$ = -8						; size = 4
_parser$ = -4						; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_base$ = 16						; size = 4
_size$ = 20						; size = 4
_parse_dict PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 1850
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1851
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 1852
	mov	DWORD PTR _start_binary$[ebp], 0
; Line 1853
	mov	BYTE PTR _have_integer$[ebp], 0
; Line 1856
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1857
	mov	eax, DWORD PTR _base$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1858
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 1860
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 1862
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN46@parse_dict:
; Line 1864
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$Exit$61
; Line 1869
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$9[ebp], edx
; Line 1872
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$9[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	ecx, BYTE PTR $SG9582[edx]
	cmp	eax, ecx
	jne	$LN44@parse_dict
	mov	edx, DWORD PTR _cur$9[ebp]
	add	edx, 6
	cmp	edx, DWORD PTR _limit$[ebp]
	je	$LN43@parse_dict
	mov	eax, DWORD PTR _cur$9[ebp]
	add	eax, 6
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN44@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 32					; 00000020H
	je	$LN43@parse_dict
	mov	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 13					; 0000000dH
	je	$LN43@parse_dict
	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 10					; 0000000aH
	je	$LN43@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 9
	je	$LN43@parse_dict
	mov	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 12					; 0000000cH
	je	$LN43@parse_dict
	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	$LN43@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 47					; 0000002fH
	je	$LN43@parse_dict
	mov	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 40					; 00000028H
	je	$LN43@parse_dict
	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 41					; 00000029H
	je	$LN43@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN43@parse_dict
	mov	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 62					; 0000003eH
	je	SHORT $LN43@parse_dict
	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 91					; 0000005bH
	je	SHORT $LN43@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 93					; 0000005dH
	je	SHORT $LN43@parse_dict
	mov	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 123				; 0000007bH
	je	SHORT $LN43@parse_dict
	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 125				; 0000007dH
	je	SHORT $LN43@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 37					; 00000025H
	jne	SHORT $LN44@parse_dict
$LN43@parse_dict:
	mov	esi, esp
	push	5
	push	OFFSET $SG9586
	mov	edx, DWORD PTR _cur$9[ebp]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN44@parse_dict
; Line 1873
	jmp	$Exit$61
	jmp	$LN40@parse_dict
$LN44@parse_dict:
; Line 1876
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$9[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	ecx, BYTE PTR $SG9591[edx]
	cmp	eax, ecx
	jne	$LN39@parse_dict
	mov	edx, DWORD PTR _cur$9[ebp]
	add	edx, 10					; 0000000aH
	cmp	edx, DWORD PTR _limit$[ebp]
	je	$LN38@parse_dict
	mov	eax, DWORD PTR _cur$9[ebp]
	add	eax, 10					; 0000000aH
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN39@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 32					; 00000020H
	je	$LN38@parse_dict
	mov	edx, 1
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 13					; 0000000dH
	je	$LN38@parse_dict
	mov	eax, 1
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 10					; 0000000aH
	je	$LN38@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 9
	je	$LN38@parse_dict
	mov	edx, 1
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 12					; 0000000cH
	je	$LN38@parse_dict
	mov	eax, 1
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	$LN38@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 47					; 0000002fH
	je	$LN38@parse_dict
	mov	edx, 1
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 40					; 00000028H
	je	$LN38@parse_dict
	mov	eax, 1
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 41					; 00000029H
	je	$LN38@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN38@parse_dict
	mov	edx, 1
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 62					; 0000003eH
	je	SHORT $LN38@parse_dict
	mov	eax, 1
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 91					; 0000005bH
	je	SHORT $LN38@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 93					; 0000005dH
	je	SHORT $LN38@parse_dict
	mov	edx, 1
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 123				; 0000007bH
	je	SHORT $LN38@parse_dict
	mov	eax, 1
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 125				; 0000007dH
	je	SHORT $LN38@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 37					; 00000025H
	jne	SHORT $LN39@parse_dict
$LN38@parse_dict:
	mov	esi, esp
	push	9
	push	OFFSET $SG9595
	mov	edx, DWORD PTR _cur$9[ebp]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN39@parse_dict
; Line 1877
	jmp	$Exit$61
	jmp	$LN40@parse_dict
$LN39@parse_dict:
; Line 1881
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$9[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	ecx, BYTE PTR $SG9600[edx]
	cmp	eax, ecx
	jne	$LN34@parse_dict
	mov	edx, DWORD PTR _cur$9[ebp]
	add	edx, 14					; 0000000eH
	cmp	edx, DWORD PTR _limit$[ebp]
	je	$LN33@parse_dict
	mov	eax, DWORD PTR _cur$9[ebp]
	add	eax, 14					; 0000000eH
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN34@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 32					; 00000020H
	je	$LN33@parse_dict
	mov	edx, 1
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 13					; 0000000dH
	je	$LN33@parse_dict
	mov	eax, 1
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 10					; 0000000aH
	je	$LN33@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 9
	je	$LN33@parse_dict
	mov	edx, 1
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 12					; 0000000cH
	je	$LN33@parse_dict
	mov	eax, 1
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	$LN33@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 47					; 0000002fH
	je	$LN33@parse_dict
	mov	edx, 1
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 40					; 00000028H
	je	$LN33@parse_dict
	mov	eax, 1
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 41					; 00000029H
	je	$LN33@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN33@parse_dict
	mov	edx, 1
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 62					; 0000003eH
	je	SHORT $LN33@parse_dict
	mov	eax, 1
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 91					; 0000005bH
	je	SHORT $LN33@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 93					; 0000005dH
	je	SHORT $LN33@parse_dict
	mov	edx, 1
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 123				; 0000007bH
	je	SHORT $LN33@parse_dict
	mov	eax, 1
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 125				; 0000007dH
	je	SHORT $LN33@parse_dict
	mov	ecx, 1
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 37					; 00000025H
	jne	SHORT $LN34@parse_dict
$LN33@parse_dict:
	mov	esi, esp
	push	13					; 0000000dH
	push	OFFSET $SG9604
	mov	edx, DWORD PTR _cur$9[ebp]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN34@parse_dict
; Line 1883
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	and	ecx, 1
	je	SHORT $LN30@parse_dict
; Line 1885
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+372]
	or	eax, 2
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+372], eax
$LN30@parse_dict:
; Line 1886
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 13					; 0000000dH
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	$LN40@parse_dict
$LN34@parse_dict:
; Line 1890
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	eax, 48					; 00000030H
	cmp	eax, 10					; 0000000aH
	jae	SHORT $LN28@parse_dict
; Line 1892
	mov	ecx, DWORD PTR _cur$9[ebp]
	mov	DWORD PTR _start_binary$[ebp], ecx
; Line 1893
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1894
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN27@parse_dict
; Line 1895
	jmp	$Exit$61
$LN27@parse_dict:
; Line 1896
	mov	BYTE PTR _have_integer$[ebp], 1
; Line 1902
	jmp	$LN40@parse_dict
$LN28@parse_dict:
; Line 1903
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 82					; 00000052H
	jne	$LN25@parse_dict
	mov	edx, DWORD PTR _cur$9[ebp]
	add	edx, 6
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN25@parse_dict
	mov	eax, DWORD PTR _cur$9[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 68					; 00000044H
	jne	SHORT $LN25@parse_dict
	movzx	edx, BYTE PTR _have_integer$[ebp]
	test	edx, edx
	je	SHORT $LN25@parse_dict
; Line 1909
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _start_binary$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1910
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN49@parse_dict
	mov	BYTE PTR tv379[ebp], 1
	jmp	SHORT $LN50@parse_dict
$LN49@parse_dict:
	mov	BYTE PTR tv379[ebp], 0
$LN50@parse_dict:
	movzx	ecx, BYTE PTR tv379[ebp]
	push	ecx
	lea	edx, DWORD PTR _b$7[ebp]
	push	edx
	lea	eax, DWORD PTR _s$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_read_binary_data
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN24@parse_dict
; Line 1911
	push	OFFSET $SG9617
	push	1911					; 00000777H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN47@parse_dict
$LN24@parse_dict:
; Line 1912
	mov	BYTE PTR _have_integer$[ebp], 0
; Line 1915
	jmp	$LN40@parse_dict
$LN25@parse_dict:
; Line 1916
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	$LN22@parse_dict
	mov	ecx, DWORD PTR _cur$9[ebp]
	add	ecx, 6
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN22@parse_dict
	mov	edx, DWORD PTR _cur$9[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	eax, 124				; 0000007cH
	jne	SHORT $LN22@parse_dict
	movzx	ecx, BYTE PTR _have_integer$[ebp]
	test	ecx, ecx
	je	SHORT $LN22@parse_dict
; Line 1922
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _start_binary$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1923
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN51@parse_dict
	mov	BYTE PTR tv404[ebp], 1
	jmp	SHORT $LN52@parse_dict
$LN51@parse_dict:
	mov	BYTE PTR tv404[ebp], 0
$LN52@parse_dict:
	movzx	eax, BYTE PTR tv404[ebp]
	push	eax
	lea	ecx, DWORD PTR _b$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$6[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_read_binary_data
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN21@parse_dict
; Line 1924
	push	OFFSET $SG9624
	push	1924					; 00000784H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN47@parse_dict
$LN21@parse_dict:
; Line 1925
	mov	BYTE PTR _have_integer$[ebp], 0
	jmp	$LN40@parse_dict
$LN22@parse_dict:
; Line 1929
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 47					; 0000002fH
	jne	$LN19@parse_dict
	mov	eax, DWORD PTR _cur$9[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN19@parse_dict
; Line 1934
	mov	ecx, DWORD PTR _cur$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$9[ebp], ecx
; Line 1936
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _cur$9[ebp]
	mov	DWORD PTR [edx], eax
; Line 1937
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1938
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN18@parse_dict
; Line 1939
	jmp	$Exit$61
$LN18@parse_dict:
; Line 1941
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _cur$9[ebp]
	mov	DWORD PTR _len$4[ebp], eax
; Line 1943
	cmp	DWORD PTR _len$4[ebp], 0
	jle	$LN17@parse_dict
	cmp	DWORD PTR _len$4[ebp], 22		; 00000016H
	jge	$LN17@parse_dict
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	$LN17@parse_dict
; Line 1946
	mov	DWORD PTR _keyword$3[ebp], OFFSET _t1_keywords
$LN16@parse_dict:
; Line 1954
	mov	eax, DWORD PTR _keyword$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _name$2[ebp], ecx
; Line 1955
	cmp	DWORD PTR _name$2[ebp], 0
	jne	SHORT $LN14@parse_dict
; Line 1956
	jmp	$LN17@parse_dict
$LN14@parse_dict:
; Line 1960
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$9[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _name$2[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	edx, ecx
	jne	$LN13@parse_dict
	mov	edx, DWORD PTR _name$2[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	cmp	DWORD PTR _len$4[ebp], eax
	jne	$LN13@parse_dict
	mov	eax, DWORD PTR _len$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$9[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN13@parse_dict
; Line 1992
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+372]
	and	ecx, 1
	je	SHORT $LN53@parse_dict
	mov	DWORD PTR tv452[ebp], 2
	jmp	SHORT $LN54@parse_dict
$LN53@parse_dict:
	mov	DWORD PTR tv452[ebp], 1
$LN54@parse_dict:
	mov	edx, DWORD PTR tv452[ebp]
	mov	DWORD PTR _dict$1[ebp], edx
; Line 1994
	mov	eax, DWORD PTR _keyword$3[ebp]
	mov	ecx, DWORD PTR _dict$1[ebp]
	and	ecx, DWORD PTR [eax+32]
	jne	SHORT $LN12@parse_dict
$LN11@parse_dict:
; Line 1998
	mov	edx, 4
	imul	eax, edx, 37
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN10@parse_dict
	mov	ecx, DWORD PTR _keyword$3[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG9647
	call	_FT_Message
	add	esp, 8
$LN10@parse_dict:
	xor	eax, eax
	jne	SHORT $LN11@parse_dict
; Line 1999
	jmp	SHORT $LN17@parse_dict
$LN12@parse_dict:
; Line 2004
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	and	edx, 2
	je	SHORT $LN6@parse_dict
	push	OFFSET $SG9651
	mov	eax, DWORD PTR _name$2[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@parse_dict
$LN6@parse_dict:
; Line 2008
	mov	ecx, DWORD PTR _keyword$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_t1_load_keyword
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2009
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN7@parse_dict
; Line 2011
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 162				; 000000a2H
	jne	SHORT $LN4@parse_dict
; Line 2012
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 2013
	jmp	SHORT $LN7@parse_dict
$LN4@parse_dict:
; Line 2014
	mov	eax, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [eax+12]
	jmp	SHORT $LN47@parse_dict
$LN7@parse_dict:
; Line 2017
	jmp	SHORT $LN17@parse_dict
$LN13@parse_dict:
; Line 2020
	mov	ecx, DWORD PTR _keyword$3[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR _keyword$3[ebp], ecx
; Line 2021
	jmp	$LN16@parse_dict
$LN17@parse_dict:
; Line 2024
	mov	BYTE PTR _have_integer$[ebp], 0
; Line 2026
	jmp	SHORT $LN40@parse_dict
$LN19@parse_dict:
; Line 2028
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2029
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN1@parse_dict
; Line 2030
	jmp	SHORT $Exit$61
$LN1@parse_dict:
; Line 2031
	mov	BYTE PTR _have_integer$[ebp], 0
$LN40@parse_dict:
; Line 2034
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2035
	jmp	$LN46@parse_dict
$Exit$61:
; Line 2038
	mov	eax, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [eax+12]
$LN47@parse_dict:
; Line 2039
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN60@parse_dict
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN60@parse_dict:
	DD	4
	DD	$LN59@parse_dict
$LN59@parse_dict:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN55@parse_dict
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN56@parse_dict
	DD	-52					; ffffffccH
	DD	4
	DD	$LN57@parse_dict
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN58@parse_dict
$LN58@parse_dict:
	DB	98					; 00000062H
	DB	0
$LN57@parse_dict:
	DB	115					; 00000073H
	DB	0
$LN56@parse_dict:
	DB	98					; 00000062H
	DB	0
$LN55@parse_dict:
	DB	115					; 00000073H
	DB	0
_parse_dict ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv267 = -117						; size = 1
_notdef_name$1 = -116					; size = 4
_notdef_glyph$2 = -108					; size = 5
_temp$3 = -96						; size = 4
_len$4 = -92						; size = 4
_base$5 = -84						; size = 4
_size$6 = -72						; size = 4
_notdef_found$ = -61					; size = 1
_notdef_index$ = -60					; size = 4
_num_glyphs$ = -56					; size = 4
_n$ = -52						; size = 4
_limit$ = -48						; size = 4
_cur$ = -44						; size = 4
_psaux$ = -40						; size = 4
_error$ = -32						; size = 4
_memory$ = -24						; size = 4
_swap_table$ = -20					; size = 4
_name_table$ = -16					; size = 4
_code_table$ = -12					; size = 4
_parser$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_parse_charstrings PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 1498
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1499
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 1500
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 208				; 000000d0H
	mov	DWORD PTR _code_table$[ebp], ecx
; Line 1501
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 156				; 0000009cH
	mov	DWORD PTR _name_table$[ebp], edx
; Line 1502
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 260				; 00000104H
	mov	DWORD PTR _swap_table$[ebp], eax
; Line 1503
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _memory$[ebp], edx
; Line 1506
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+488]
	mov	DWORD PTR _psaux$[ebp], ecx
; Line 1509
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _limit$[ebp], eax
; Line 1511
	mov	DWORD PTR _notdef_index$[ebp], 0
; Line 1512
	mov	BYTE PTR _notdef_found$[ebp], 0
; Line 1515
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _num_glyphs$[ebp], eax
; Line 1516
	cmp	DWORD PTR _num_glyphs$[ebp], 0
	jge	SHORT $LN49@parse_char
; Line 1518
	push	OFFSET $SG9232
	push	1518					; 000005eeH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1519
	jmp	$Fail$61
$LN49@parse_char:
; Line 1524
	cmp	DWORD PTR _num_glyphs$[ebp], 0
	je	SHORT $LN47@parse_char
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN48@parse_char
$LN47@parse_char:
; Line 1525
	jmp	$LN50@parse_char
$LN48@parse_char:
; Line 1534
	mov	edx, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [edx+152], 0
	jne	$LN46@parse_char
; Line 1537
	mov	esi, esp
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_glyphs$[ebp]
	add	ecx, 6
	push	ecx
	mov	edx, DWORD PTR _code_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1538
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN45@parse_char
; Line 1539
	jmp	$Fail$61
$LN45@parse_char:
; Line 1542
	mov	esi, esp
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_glyphs$[ebp]
	add	ecx, 6
	push	ecx
	mov	edx, DWORD PTR _name_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1543
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN44@parse_char
; Line 1544
	jmp	$Fail$61
$LN44@parse_char:
; Line 1549
	mov	esi, esp
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _swap_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1550
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN46@parse_char
; Line 1551
	jmp	$Fail$61
$LN46@parse_char:
; Line 1554
	mov	DWORD PTR _n$[ebp], 0
$LN42@parse_char:
; Line 1565
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1567
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 1568
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN40@parse_char
; Line 1569
	jmp	$LN41@parse_char
$LN40@parse_char:
; Line 1572
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 3
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	$LN39@parse_char
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 32					; 00000020H
	je	$LN38@parse_char
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 13					; 0000000dH
	je	$LN38@parse_char
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 10					; 0000000aH
	je	$LN38@parse_char
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 9
	je	$LN38@parse_char
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 12					; 0000000cH
	je	$LN38@parse_char
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	$LN38@parse_char
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 47					; 0000002fH
	je	$LN38@parse_char
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 40					; 00000028H
	je	$LN38@parse_char
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 41					; 00000029H
	je	$LN38@parse_char
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 60					; 0000003cH
	je	SHORT $LN38@parse_char
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN38@parse_char
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 91					; 0000005bH
	je	SHORT $LN38@parse_char
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN38@parse_char
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 123				; 0000007bH
	je	SHORT $LN38@parse_char
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 125				; 0000007dH
	je	SHORT $LN38@parse_char
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 37					; 00000025H
	jne	$LN39@parse_char
$LN38@parse_char:
; Line 1576
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 100				; 00000064H
	jne	SHORT $LN36@parse_char
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 101				; 00000065H
	jne	SHORT $LN36@parse_char
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 102				; 00000066H
	jne	SHORT $LN36@parse_char
; Line 1588
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN36@parse_char
; Line 1589
	jmp	$LN41@parse_char
$LN36@parse_char:
; Line 1594
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 101				; 00000065H
	jne	SHORT $LN39@parse_char
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 110				; 0000006eH
	jne	SHORT $LN39@parse_char
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 100				; 00000064H
	jne	SHORT $LN39@parse_char
; Line 1595
	jmp	$LN41@parse_char
$LN39@parse_char:
; Line 1598
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1599
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN33@parse_char
; Line 1601
	push	OFFSET $SG9253
	push	1601					; 00000641H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1602
	jmp	$Fail$61
$LN33@parse_char:
; Line 1604
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN32@parse_char
; Line 1605
	jmp	$LN50@parse_char
$LN32@parse_char:
; Line 1607
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	$LN31@parse_char
; Line 1612
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN30@parse_char
; Line 1614
	push	OFFSET $SG9258
	push	1614					; 0000064eH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1615
	jmp	$Fail$61
$LN30@parse_char:
; Line 1618
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax
; Line 1619
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _len$4[ebp], edx
; Line 1621
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN52@parse_char
	mov	BYTE PTR tv267[ebp], 1
	jmp	SHORT $LN53@parse_char
$LN52@parse_char:
	mov	BYTE PTR tv267[ebp], 0
$LN53@parse_char:
	movzx	edx, BYTE PTR tv267[ebp]
	push	edx
	lea	eax, DWORD PTR _base$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _size$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_read_binary_data
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN29@parse_char
; Line 1622
	jmp	$LN50@parse_char
$LN29@parse_char:
; Line 1627
	mov	eax, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN28@parse_char
; Line 1628
	jmp	$LN42@parse_char
$LN28@parse_char:
; Line 1630
	mov	ecx, DWORD PTR _len$4[ebp]
	add	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name_table$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1631
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN27@parse_char
; Line 1632
	jmp	$Fail$61
$LN27@parse_char:
; Line 1635
	mov	ecx, DWORD PTR _name_table$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _len$4[ebp]
	mov	BYTE PTR [ecx+edx], 0
; Line 1640
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN26@parse_char
	mov	edx, DWORD PTR _name_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	OFFSET $SG9265
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN26@parse_char
; Line 1642
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _notdef_index$[ebp], eax
; Line 1643
	mov	BYTE PTR _notdef_found$[ebp], 1
$LN26@parse_char:
; Line 1647
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	jl	$LN25@parse_char
	mov	edx, DWORD PTR _num_glyphs$[ebp]
	add	edx, 5
	cmp	DWORD PTR _n$[ebp], edx
	jge	$LN25@parse_char
; Line 1652
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _size$6[ebp]
	cmp	ecx, DWORD PTR [eax+172]
	jg	SHORT $LN24@parse_char
; Line 1654
	push	OFFSET $SG9269
	push	1654					; 00000676H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1655
	jmp	$Fail$61
$LN24@parse_char:
; Line 1659
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _temp$3[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN23@parse_char
; Line 1660
	jmp	$Fail$61
$LN23@parse_char:
; Line 1661
	mov	edx, DWORD PTR _size$6[ebp]
	push	edx
	mov	eax, DWORD PTR _base$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _temp$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1662
	mov	esi, esp
	push	4330					; 000010eaH
	mov	edx, DWORD PTR _size$6[ebp]
	push	edx
	mov	eax, DWORD PTR _temp$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _psaux$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1663
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _size$6[ebp]
	sub	ecx, DWORD PTR [eax+172]
	mov	DWORD PTR _size$6[ebp], ecx
; Line 1665
	mov	esi, esp
	mov	edx, DWORD PTR _size$6[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _temp$3[ebp]
	add	ecx, DWORD PTR [eax+172]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _code_table$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN22@parse_char:
; Line 1666
	mov	eax, DWORD PTR _temp$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _temp$3[ebp], 0
	xor	edx, edx
	jne	SHORT $LN22@parse_char
; Line 1668
	jmp	SHORT $LN19@parse_char
$LN25@parse_char:
; Line 1669
	mov	esi, esp
	mov	eax, DWORD PTR _size$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _code_table$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN19@parse_char:
; Line 1670
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@parse_char
; Line 1671
	jmp	$Fail$61
$LN18@parse_char:
; Line 1673
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN31@parse_char:
; Line 1675
	jmp	$LN42@parse_char
$LN41@parse_char:
; Line 1677
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+152], edx
; Line 1681
	movzx	eax, BYTE PTR _notdef_found$[ebp]
	test	eax, eax
	je	$LN17@parse_char
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _name_table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	push	OFFSET $SG9280
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	$LN17@parse_char
; Line 1692
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _name_table$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _name_table$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	push	0
	mov	ecx, DWORD PTR _swap_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _swap_table$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1693
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@parse_char
; Line 1694
	jmp	$Fail$61
$LN16@parse_char:
; Line 1699
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _code_table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _code_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	push	1
	mov	edx, DWORD PTR _swap_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _swap_table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1700
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@parse_char
; Line 1701
	jmp	$Fail$61
$LN15@parse_char:
; Line 1706
	mov	edx, DWORD PTR _name_table$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	esi, esp
	mov	ecx, DWORD PTR _notdef_index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _name_table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _notdef_index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	2
	mov	ecx, DWORD PTR _swap_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _swap_table$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1707
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@parse_char
; Line 1708
	jmp	$Fail$61
$LN14@parse_char:
; Line 1713
	mov	ecx, DWORD PTR _code_table$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	esi, esp
	mov	eax, DWORD PTR _notdef_index$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _code_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _notdef_index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	3
	mov	eax, DWORD PTR _swap_table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _swap_table$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1714
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@parse_char
; Line 1715
	jmp	$Fail$61
$LN13@parse_char:
; Line 1719
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _swap_table$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _swap_table$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	mov	ecx, DWORD PTR _notdef_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _name_table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1720
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@parse_char
; Line 1721
	jmp	$Fail$61
$LN12@parse_char:
; Line 1725
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _swap_table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _swap_table$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	mov	ecx, DWORD PTR _notdef_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1726
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@parse_char
; Line 1727
	jmp	$Fail$61
$LN11@parse_char:
; Line 1731
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _swap_table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _swap_table$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	push	0
	mov	ecx, DWORD PTR _name_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name_table$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1732
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@parse_char
; Line 1733
	jmp	$Fail$61
$LN10@parse_char:
; Line 1737
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _swap_table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _swap_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	push	0
	mov	edx, DWORD PTR _code_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1738
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@parse_char
; Line 1739
	jmp	$Fail$61
$LN9@parse_char:
; Line 1742
	jmp	$LN8@parse_char
$LN17@parse_char:
	movzx	edx, BYTE PTR _notdef_found$[ebp]
	test	edx, edx
	jne	$LN8@parse_char
; Line 1750
	mov	BYTE PTR _notdef_glyph$2[ebp], 139	; 0000008bH
	mov	BYTE PTR _notdef_glyph$2[ebp+1], 247	; 000000f7H
	mov	BYTE PTR _notdef_glyph$2[ebp+2], 225	; 000000e1H
	mov	BYTE PTR _notdef_glyph$2[ebp+3], 13	; 0000000dH
	mov	BYTE PTR _notdef_glyph$2[ebp+4], 14	; 0000000eH
; Line 1751
	mov	DWORD PTR _notdef_name$1[ebp], OFFSET $SG9294
; Line 1756
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _name_table$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _name_table$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	push	0
	mov	ecx, DWORD PTR _swap_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _swap_table$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1757
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@parse_char
; Line 1758
	jmp	$Fail$61
$LN6@parse_char:
; Line 1762
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _code_table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _code_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	push	1
	mov	edx, DWORD PTR _swap_table$[ebp]
	push	edx
	mov	eax, DWORD PTR _swap_table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1763
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@parse_char
; Line 1764
	jmp	$Fail$61
$LN5@parse_char:
; Line 1766
	mov	esi, esp
	push	8
	mov	edx, DWORD PTR _notdef_name$1[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _name_table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name_table$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1767
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@parse_char
; Line 1768
	jmp	$Fail$61
$LN4@parse_char:
; Line 1770
	mov	esi, esp
	push	5
	lea	eax, DWORD PTR _notdef_glyph$2[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _code_table$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code_table$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1772
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@parse_char
; Line 1773
	jmp	$Fail$61
$LN3@parse_char:
; Line 1777
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _swap_table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _swap_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _name_table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name_table$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1778
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@parse_char
; Line 1779
	jmp	SHORT $Fail$61
$LN2@parse_char:
; Line 1783
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _swap_table$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _swap_table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _code_table$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1784
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@parse_char
; Line 1785
	jmp	SHORT $Fail$61
$LN1@parse_char:
; Line 1788
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	add	ecx, 1
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+152], ecx
$LN8@parse_char:
; Line 1791
	jmp	SHORT $LN50@parse_char
$Fail$61:
; Line 1794
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN50@parse_char:
; Line 1795
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN60@parse_char
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN60@parse_char:
	DD	4
	DD	$LN59@parse_char
$LN59@parse_char:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN55@parse_char
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN56@parse_char
	DD	-84					; ffffffacH
	DD	4
	DD	$LN57@parse_char
	DD	-108					; ffffff94H
	DD	5
	DD	$LN58@parse_char
$LN58@parse_char:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	0
$LN57@parse_char:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN56@parse_char:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN55@parse_char:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_parse_charstrings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv171 = -65						; size = 1
_temp$1 = -64						; size = 4
_base$2 = -56						; size = 4
_size$3 = -44						; size = 4
_idx$4 = -36						; size = 4
_psaux$ = -32						; size = 4
_num_subrs$ = -28					; size = 4
_error$ = -20						; size = 4
_memory$ = -12						; size = 4
_table$ = -8						; size = 4
_parser$ = -4						; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_parse_subrs PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 1363
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1364
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 1365
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 316				; 0000013cH
	mov	DWORD PTR _table$[ebp], ecx
; Line 1366
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _memory$[ebp], eax
; Line 1370
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+488]
	mov	DWORD PTR _psaux$[ebp], edx
; Line 1373
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1377
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN23@parse_subr
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 91					; 0000005bH
	jne	SHORT $LN23@parse_subr
; Line 1379
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1380
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1382
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN21@parse_subr
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 93					; 0000005dH
	je	SHORT $LN22@parse_subr
$LN21@parse_subr:
; Line 1383
	push	OFFSET $SG9172
	push	1383					; 00000567H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN22@parse_subr:
; Line 1384
	jmp	$LN24@parse_subr
$LN23@parse_subr:
; Line 1387
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _num_subrs$[ebp], eax
; Line 1390
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1391
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN20@parse_subr
; Line 1392
	jmp	$LN24@parse_subr
$LN20@parse_subr:
; Line 1393
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1397
	mov	eax, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [eax+312], 0
	jne	SHORT $LN17@parse_subr
; Line 1399
	mov	esi, esp
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _num_subrs$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psaux$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1400
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@parse_subr
; Line 1401
	jmp	$Fail$34
$LN17@parse_subr:
; Line 1417
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	edx, DWORD PTR [eax+8]
	jae	SHORT $LN14@parse_subr
	mov	esi, esp
	push	3
	push	OFFSET $SG9187
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN15@parse_subr
$LN14@parse_subr:
; Line 1418
	jmp	$LN16@parse_subr
$LN15@parse_subr:
; Line 1420
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1422
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _idx$4[ebp], eax
; Line 1424
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN26@parse_subr
	mov	BYTE PTR tv171[ebp], 1
	jmp	SHORT $LN27@parse_subr
$LN26@parse_subr:
	mov	BYTE PTR tv171[ebp], 0
$LN27@parse_subr:
	movzx	edx, BYTE PTR tv171[ebp]
	push	edx
	lea	eax, DWORD PTR _base$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _size$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_read_binary_data
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN13@parse_subr
; Line 1425
	jmp	$LN24@parse_subr
$LN13@parse_subr:
; Line 1431
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1432
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN12@parse_subr
; Line 1433
	jmp	$LN24@parse_subr
$LN12@parse_subr:
; Line 1434
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1437
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	edx, DWORD PTR [eax+8]
	jae	SHORT $LN11@parse_subr
	mov	esi, esp
	push	3
	push	OFFSET $SG9193
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN11@parse_subr
; Line 1439
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1440
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@parse_subr:
; Line 1444
	mov	eax, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [eax+312], 0
	je	SHORT $LN10@parse_subr
; Line 1445
	jmp	$LN17@parse_subr
$LN10@parse_subr:
; Line 1452
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	jl	$LN9@parse_subr
; Line 1460
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _size$3[ebp]
	cmp	eax, DWORD PTR [edx+172]
	jge	SHORT $LN8@parse_subr
; Line 1462
	push	OFFSET $SG9198
	push	1462					; 000005b6H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1463
	jmp	$Fail$34
$LN8@parse_subr:
; Line 1467
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$3[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _temp$1[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@parse_subr
; Line 1468
	jmp	$Fail$34
$LN7@parse_subr:
; Line 1469
	mov	ecx, DWORD PTR _size$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$2[ebp]
	push	edx
	mov	eax, DWORD PTR _temp$1[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1470
	mov	esi, esp
	push	4330					; 000010eaH
	mov	ecx, DWORD PTR _size$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _temp$1[ebp]
	push	edx
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1471
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _size$3[ebp]
	sub	eax, DWORD PTR [edx+172]
	mov	DWORD PTR _size$3[ebp], eax
; Line 1473
	mov	esi, esp
	mov	ecx, DWORD PTR _size$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _temp$1[ebp]
	add	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _idx$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN6@parse_subr:
; Line 1474
	mov	edx, DWORD PTR _temp$1[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _temp$1[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN6@parse_subr
; Line 1476
	jmp	SHORT $LN3@parse_subr
$LN9@parse_subr:
; Line 1477
	mov	esi, esp
	mov	edx, DWORD PTR _size$3[ebp]
	push	edx
	mov	eax, DWORD PTR _base$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN3@parse_subr:
; Line 1478
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@parse_subr
; Line 1479
	jmp	SHORT $Fail$34
$LN2@parse_subr:
; Line 1480
	jmp	$LN17@parse_subr
$LN16@parse_subr:
; Line 1482
	mov	edx, DWORD PTR _loader$[ebp]
	cmp	DWORD PTR [edx+312], 0
	jne	SHORT $LN1@parse_subr
; Line 1483
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _num_subrs$[ebp]
	mov	DWORD PTR [eax+312], ecx
$LN1@parse_subr:
; Line 1485
	jmp	SHORT $LN24@parse_subr
$Fail$34:
; Line 1488
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN24@parse_subr:
; Line 1489
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@parse_subr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@parse_subr:
	DD	3
	DD	$LN32@parse_subr
$LN32@parse_subr:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN29@parse_subr
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN30@parse_subr
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN31@parse_subr
$LN31@parse_subr:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN30@parse_subr:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN29@parse_subr:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_parse_subrs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$1 = -64						; size = 4
_charcode$2 = -60					; size = 4
_notdef$3 = -56						; size = 4
_only_immediates$4 = -49				; size = 1
_error$5 = -44						; size = 4
_memory$6 = -36						; size = 4
_char_table$7 = -32					; size = 4
_n$8 = -28						; size = 4
_count$9 = -24						; size = 4
_encode$10 = -20					; size = 4
_psaux$ = -16						; size = 4
_limit$ = -12						; size = 4
_cur$ = -8						; size = 4
_parser$ = -4						; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_parse_encoding PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 1154
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1155
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 1157
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _limit$[ebp], edx
; Line 1159
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+488]
	mov	DWORD PTR _psaux$[ebp], ecx
; Line 1162
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1163
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 1164
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN46@parse_enco
; Line 1166
	push	OFFSET $SG9077
	call	_FT_Message
	add	esp, 4
; Line 1167
	push	OFFSET $SG9078
	push	1167					; 0000048fH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 1168
	jmp	$LN47@parse_enco
$LN46@parse_enco:
; Line 1173
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	cmp	ecx, 10					; 0000000aH
	jb	SHORT $LN44@parse_enco
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 91					; 0000005bH
	jne	$LN45@parse_enco
$LN44@parse_enco:
; Line 1175
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 372				; 00000174H
	mov	DWORD PTR _encode$10[ebp], ecx
; Line 1177
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 100				; 00000064H
	mov	DWORD PTR _char_table$7[ebp], edx
; Line 1178
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _memory$6[ebp], ecx
; Line 1180
	mov	BYTE PTR _only_immediates$4[ebp], 0
; Line 1184
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 91					; 0000005bH
	jne	SHORT $LN43@parse_enco
; Line 1186
	mov	DWORD PTR _count$9[ebp], 256		; 00000100H
; Line 1187
	mov	BYTE PTR _only_immediates$4[ebp], 1
; Line 1188
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1190
	jmp	SHORT $LN42@parse_enco
$LN43@parse_enco:
; Line 1191
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _count$9[ebp], eax
$LN42@parse_enco:
; Line 1193
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1194
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN41@parse_enco
; Line 1195
	jmp	$LN47@parse_enco
$LN41@parse_enco:
; Line 1198
	mov	eax, DWORD PTR _encode$10[ebp]
	mov	ecx, DWORD PTR _count$9[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _count$9[ebp]
	mov	DWORD PTR [edx+96], eax
; Line 1202
	lea	ecx, DWORD PTR _error$5[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _count$9[ebp]
	push	edx
	push	0
	push	2
	mov	eax, DWORD PTR _memory$6[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _encode$10[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$5[ebp], 0
	jne	SHORT $LN39@parse_enco
	lea	edx, DWORD PTR _error$5[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _count$9[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _memory$6[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _encode$10[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR _error$5[ebp], 0
	jne	SHORT $LN39@parse_enco
	mov	esi, esp
	mov	eax, DWORD PTR _memory$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _char_table$7[ebp]
	push	edx
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$5[ebp], eax
	cmp	DWORD PTR _error$5[ebp], 0
	je	SHORT $LN40@parse_enco
$LN39@parse_enco:
; Line 1204
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _error$5[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1205
	jmp	$LN47@parse_enco
$LN40@parse_enco:
; Line 1209
	mov	DWORD PTR _n$8[ebp], 0
	jmp	SHORT $LN38@parse_enco
$LN37@parse_enco:
	mov	edx, DWORD PTR _n$8[ebp]
	add	edx, 1
	mov	DWORD PTR _n$8[ebp], edx
$LN38@parse_enco:
	mov	eax, DWORD PTR _n$8[ebp]
	cmp	eax, DWORD PTR _count$9[ebp]
	jge	SHORT $LN36@parse_enco
; Line 1211
	mov	DWORD PTR _notdef$3[ebp], OFFSET $SG9104
; Line 1214
	mov	esi, esp
	push	8
	mov	ecx, DWORD PTR _notdef$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$8[ebp]
	push	edx
	mov	eax, DWORD PTR _char_table$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _char_table$7[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1215
	jmp	SHORT $LN37@parse_enco
$LN36@parse_enco:
; Line 1237
	mov	DWORD PTR _n$8[ebp], 0
; Line 1238
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@parse_enco:
; Line 1240
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN34@parse_enco
; Line 1242
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 1245
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 100				; 00000064H
	jne	$LN33@parse_enco
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 3
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN33@parse_enco
; Line 1249
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 101				; 00000065H
	jne	$LN33@parse_enco
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 102				; 00000066H
	jne	$LN33@parse_enco
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 32					; 00000020H
	je	$LN29@parse_enco
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 13					; 0000000dH
	je	$LN29@parse_enco
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 10					; 0000000aH
	je	$LN29@parse_enco
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 9
	je	$LN29@parse_enco
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 12					; 0000000cH
	je	$LN29@parse_enco
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	$LN29@parse_enco
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 47					; 0000002fH
	je	$LN29@parse_enco
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 40					; 00000028H
	je	$LN29@parse_enco
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 41					; 00000029H
	je	$LN29@parse_enco
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN29@parse_enco
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 62					; 0000003eH
	je	SHORT $LN29@parse_enco
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 91					; 0000005bH
	je	SHORT $LN29@parse_enco
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 93					; 0000005dH
	je	SHORT $LN29@parse_enco
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 123				; 0000007bH
	je	SHORT $LN29@parse_enco
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 125				; 0000007dH
	je	SHORT $LN29@parse_enco
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 37					; 00000025H
	jne	SHORT $LN33@parse_enco
$LN29@parse_enco:
; Line 1251
	mov	edx, 4
	imul	eax, edx, 37
	cmp	DWORD PTR _ft_trace_levels[eax], 6
	jl	SHORT $LN28@parse_enco
	push	OFFSET $SG9117
	call	_FT_Message
	add	esp, 4
$LN28@parse_enco:
	xor	ecx, ecx
	jne	SHORT $LN29@parse_enco
; Line 1252
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 3
	mov	DWORD PTR _cur$[ebp], edx
; Line 1253
	jmp	$LN34@parse_enco
$LN33@parse_enco:
; Line 1256
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 93					; 0000005dH
	jne	SHORT $LN25@parse_enco
$LN24@parse_enco:
; Line 1258
	mov	edx, 4
	imul	eax, edx, 37
	cmp	DWORD PTR _ft_trace_levels[eax], 6
	jl	SHORT $LN23@parse_enco
	push	OFFSET $SG9123
	call	_FT_Message
	add	esp, 4
$LN23@parse_enco:
	xor	ecx, ecx
	jne	SHORT $LN24@parse_enco
; Line 1259
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
; Line 1260
	jmp	$LN34@parse_enco
$LN25@parse_enco:
; Line 1264
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	cmp	ecx, 10					; 0000000aH
	jb	SHORT $LN19@parse_enco
	movzx	edx, BYTE PTR _only_immediates$4[ebp]
	test	edx, edx
	je	$LN20@parse_enco
$LN19@parse_enco:
; Line 1269
	movzx	eax, BYTE PTR _only_immediates$4[ebp]
	test	eax, eax
	je	SHORT $LN18@parse_enco
; Line 1270
	mov	ecx, DWORD PTR _n$8[ebp]
	mov	DWORD PTR _charcode$2[ebp], ecx
; Line 1271
	jmp	SHORT $LN17@parse_enco
$LN18@parse_enco:
; Line 1273
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _charcode$2[ebp], eax
; Line 1274
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1277
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN17@parse_enco
; Line 1279
	push	OFFSET $SG9132
	push	1279					; 000004ffH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1280
	jmp	$LN47@parse_enco
$LN17@parse_enco:
; Line 1284
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 1286
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN15@parse_enco
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	$LN15@parse_enco
	mov	ecx, DWORD PTR _n$8[ebp]
	cmp	ecx, DWORD PTR _count$9[ebp]
	jge	$LN15@parse_enco
; Line 1291
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
; Line 1293
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1294
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1295
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN14@parse_enco
; Line 1296
	jmp	$LN47@parse_enco
$LN14@parse_enco:
; Line 1297
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN13@parse_enco
; Line 1298
	jmp	$LN47@parse_enco
$LN13@parse_enco:
; Line 1300
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _len$1[ebp], eax
; Line 1303
	mov	ecx, DWORD PTR _len$1[ebp]
	add	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _charcode$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _char_table$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _char_table$7[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1304
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN12@parse_enco
; Line 1305
	jmp	$LN47@parse_enco
$LN12@parse_enco:
; Line 1306
	mov	eax, DWORD PTR _char_table$7[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _charcode$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _len$1[ebp]
	mov	BYTE PTR [eax+ecx], 0
; Line 1308
	mov	edx, DWORD PTR _n$8[ebp]
	add	edx, 1
	mov	DWORD PTR _n$8[ebp], edx
	jmp	SHORT $LN11@parse_enco
$LN15@parse_enco:
; Line 1310
	movzx	eax, BYTE PTR _only_immediates$4[ebp]
	test	eax, eax
	je	SHORT $LN11@parse_enco
; Line 1320
	push	OFFSET $SG9140
	push	1320					; 00000528H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1321
	jmp	$LN47@parse_enco
$LN11@parse_enco:
; Line 1324
	jmp	SHORT $LN9@parse_enco
$LN20@parse_enco:
; Line 1326
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1327
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN9@parse_enco
; Line 1328
	jmp	$LN47@parse_enco
$LN9@parse_enco:
; Line 1331
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1332
	jmp	$LN35@parse_enco
$LN34@parse_enco:
; Line 1334
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+368], 1
; Line 1335
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1340
	jmp	$LN47@parse_enco
$LN45@parse_enco:
; Line 1343
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 17					; 00000011H
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN6@parse_enco
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET $SG9146
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@parse_enco
; Line 1344
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+368], 2
; Line 1346
	jmp	$LN47@parse_enco
$LN6@parse_enco:
; Line 1347
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 15					; 0000000fH
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN4@parse_enco
	mov	esi, esp
	push	14					; 0000000eH
	push	OFFSET $SG9150
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@parse_enco
; Line 1348
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+368], 4
; Line 1350
	jmp	SHORT $LN47@parse_enco
$LN4@parse_enco:
; Line 1351
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 18					; 00000012H
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN2@parse_enco
	mov	esi, esp
	push	17					; 00000011H
	push	OFFSET $SG9154
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@parse_enco
; Line 1352
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+368], 3
; Line 1354
	jmp	SHORT $LN47@parse_enco
$LN2@parse_enco:
; Line 1355
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+12], 162			; 000000a2H
$LN47@parse_enco:
; Line 1357
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN51@parse_enco
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN51@parse_enco:
	DD	1
	DD	$LN50@parse_enco
$LN50@parse_enco:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN49@parse_enco
$LN49@parse_enco:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_parse_encoding ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv177 = -68						; size = 4
tv90 = -64						; size = 4
_result$ = -60						; size = 4
_temp_scale$ = -56					; size = 4
_temp$ = -48						; size = 24
_root$ = -20						; size = 4
_offset$ = -16						; size = 4
_matrix$ = -12						; size = 4
_parser$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_t1_parse_font_matrix PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 1096
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1097
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 1098
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 436				; 000001b4H
	mov	DWORD PTR _matrix$[ebp], ecx
; Line 1099
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 452				; 000001c4H
	mov	DWORD PTR _offset$[ebp], edx
; Line 1100
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _root$[ebp], eax
; Line 1106
	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	push	6
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
; Line 1108
	cmp	DWORD PTR _result$[ebp], 6
	jge	SHORT $LN3@t1_parse_f
; Line 1110
	push	OFFSET $SG9059
	push	1110					; 00000456H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 1111
	jmp	$LN4@t1_parse_f
$LN3@t1_parse_f:
; Line 1114
	mov	eax, 4
	imul	ecx, eax, 3
	cmp	DWORD PTR _temp$[ebp+ecx], 0
	jge	SHORT $LN6@t1_parse_f
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _temp$[ebp+eax]
	neg	ecx
	mov	DWORD PTR tv90[ebp], ecx
	jmp	SHORT $LN7@t1_parse_f
$LN6@t1_parse_f:
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _temp$[ebp+eax]
	mov	DWORD PTR tv90[ebp], ecx
$LN7@t1_parse_f:
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR _temp_scale$[ebp], edx
; Line 1116
	cmp	DWORD PTR _temp_scale$[ebp], 0
	jne	SHORT $LN2@t1_parse_f
; Line 1118
	push	OFFSET $SG9061
	call	_FT_Message
	add	esp, 4
; Line 1119
	push	OFFSET $SG9062
	push	1119					; 0000045fH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1120
	jmp	$LN4@t1_parse_f
$LN2@t1_parse_f:
; Line 1127
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	push	1000					; 000003e8H
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _root$[ebp]
	mov	WORD PTR [ecx+68], ax
; Line 1130
	cmp	DWORD PTR _temp_scale$[ebp], 65536	; 00010000H
	je	$LN1@t1_parse_f
; Line 1132
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _temp$[ebp+edx], eax
; Line 1133
	mov	eax, DWORD PTR _temp_scale$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _temp$[ebp+ecx], eax
; Line 1134
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _temp$[ebp+eax]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR _temp$[ebp+edx], eax
; Line 1135
	mov	eax, DWORD PTR _temp_scale$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	DWORD PTR _temp$[ebp+ecx], eax
; Line 1136
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	DWORD PTR _temp$[ebp+edx], eax
; Line 1137
	mov	eax, 4
	imul	ecx, eax, 3
	cmp	DWORD PTR _temp$[ebp+ecx], 0
	jge	SHORT $LN8@t1_parse_f
	mov	DWORD PTR tv177[ebp], -65536		; ffff0000H
	jmp	SHORT $LN9@t1_parse_f
$LN8@t1_parse_f:
	mov	DWORD PTR tv177[ebp], 65536		; 00010000H
$LN9@t1_parse_f:
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR _temp$[ebp+eax], ecx
$LN1@t1_parse_f:
; Line 1140
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR _temp$[ebp+eax]
	mov	DWORD PTR [ecx], edx
; Line 1141
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR _temp$[ebp+eax]
	mov	DWORD PTR [ecx+8], edx
; Line 1142
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR _temp$[ebp+eax]
	mov	DWORD PTR [ecx+4], edx
; Line 1143
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	eax, DWORD PTR _temp$[ebp+ecx]
	mov	DWORD PTR [edx+12], eax
; Line 1146
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1147
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _temp$[ebp+edx]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN4@t1_parse_f:
; Line 1148
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@t1_parse_f
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@t1_parse_f:
	DD	1
	DD	$LN11@t1_parse_f
$LN11@t1_parse_f:
	DD	-48					; ffffffd0H
	DD	24					; 00000018H
	DD	$LN10@t1_parse_f
$LN10@t1_parse_f:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_t1_parse_font_matrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv91 = -16						; size = 4
_s$1 = -12						; size = 4
_limit$ = -8						; size = 4
_cur$ = -4						; size = 4
_parser$ = 8						; size = 4
_size$ = 12						; size = 4
_base$ = 16						; size = 4
_incremental$ = 20					; size = 1
_read_binary_data PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 1046
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1048
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 1057
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1059
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 1061
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN3@read_binar
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	eax, 48					; 00000030H
	cmp	eax, 10					; 0000000aH
	jae	$LN3@read_binar
; Line 1063
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$1[ebp], eax
; Line 1066
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1070
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1072
	cmp	DWORD PTR _s$1[ebp], 0
	jl	SHORT $LN3@read_binar
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _limit$[ebp]
	sub	edx, DWORD PTR [ecx]
	cmp	DWORD PTR _s$1[ebp], edx
	jge	SHORT $LN3@read_binar
; Line 1074
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _s$1[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1075
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _s$1[ebp]
	mov	DWORD PTR [edx], eax
; Line 1076
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN6@read_binar
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN7@read_binar
$LN6@read_binar:
	mov	DWORD PTR tv91[ebp], 0
$LN7@read_binar:
	mov	eax, DWORD PTR tv91[ebp]
	jmp	SHORT $LN4@read_binar
$LN3@read_binar:
; Line 1080
	movzx	edx, BYTE PTR _incremental$[ebp]
	test	edx, edx
	jne	SHORT $LN1@read_binar
; Line 1082
	push	OFFSET $SG9042
	call	_FT_Message
	add	esp, 4
; Line 1083
	push	OFFSET $SG9043
	push	1083					; 0000043bH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@read_binar:
; Line 1086
	xor	eax, eax
$LN4@read_binar:
; Line 1087
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_read_binary_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_parse_private PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 1034
	push	ebp
	mov	ebp, esp
; Line 1035
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 1037
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	or	edx, 1
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+372], edx
; Line 1038
	pop	ebp
	ret	0
_parse_private ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -32						; size = 4
_blend$ = -28						; size = 4
_max_objects$ = -24					; size = 4
_objects$ = -20						; size = 4
_dummy_object$ = -12					; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_field$ = 16						; size = 4
_t1_load_keyword PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 916
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 921
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR _blend$[ebp], ecx
; Line 924
	cmp	DWORD PTR _blend$[ebp], 0
	je	SHORT $LN24@t1_load_ke
	mov	edx, DWORD PTR _blend$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN24@t1_load_ke
; Line 925
	mov	DWORD PTR _blend$[ebp], 0
$LN24@t1_load_ke:
; Line 928
	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax+8], 11			; 0000000bH
	jne	SHORT $LN23@t1_load_ke
; Line 930
	mov	esi, esp
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 931
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _error$[ebp], eax
; Line 932
	jmp	$Exit$31
$LN23@t1_load_ke:
; Line 937
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv75[ebp], edx
	mov	eax, DWORD PTR tv75[ebp]
	sub	eax, 2
	mov	DWORD PTR tv75[ebp], eax
	cmp	DWORD PTR tv75[ebp], 6
	ja	$LN10@t1_load_ke
	mov	ecx, DWORD PTR tv75[ebp]
	jmp	DWORD PTR $LN30@t1_load_ke[ecx*4]
$LN20@t1_load_ke:
; Line 940
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 132				; 00000084H
	mov	DWORD PTR _dummy_object$[ebp], edx
; Line 941
	lea	eax, DWORD PTR _dummy_object$[ebp]
	mov	DWORD PTR _objects$[ebp], eax
; Line 942
	mov	DWORD PTR _max_objects$[ebp], 0
; Line 944
	cmp	DWORD PTR _blend$[ebp], 0
	je	SHORT $LN19@t1_load_ke
; Line 946
	mov	ecx, DWORD PTR _blend$[ebp]
	add	ecx, 144				; 00000090H
	mov	DWORD PTR _objects$[ebp], ecx
; Line 947
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _max_objects$[ebp], eax
$LN19@t1_load_ke:
; Line 949
	jmp	$LN21@t1_load_ke
$LN18@t1_load_ke:
; Line 952
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 164				; 000000a4H
	mov	DWORD PTR _dummy_object$[ebp], ecx
; Line 953
	lea	edx, DWORD PTR _dummy_object$[ebp]
	mov	DWORD PTR _objects$[ebp], edx
; Line 954
	mov	DWORD PTR _max_objects$[ebp], 0
; Line 955
	jmp	$LN21@t1_load_ke
$LN17@t1_load_ke:
; Line 958
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 168				; 000000a8H
	mov	DWORD PTR _dummy_object$[ebp], eax
; Line 959
	lea	ecx, DWORD PTR _dummy_object$[ebp]
	mov	DWORD PTR _objects$[ebp], ecx
; Line 960
	mov	DWORD PTR _max_objects$[ebp], 0
; Line 962
	cmp	DWORD PTR _blend$[ebp], 0
	je	SHORT $LN16@t1_load_ke
; Line 964
	mov	edx, DWORD PTR _blend$[ebp]
	add	edx, 212				; 000000d4H
	mov	DWORD PTR _objects$[ebp], edx
; Line 965
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _max_objects$[ebp], ecx
$LN16@t1_load_ke:
; Line 967
	jmp	$LN21@t1_load_ke
$LN15@t1_load_ke:
; Line 970
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 460				; 000001ccH
	mov	DWORD PTR _dummy_object$[ebp], edx
; Line 971
	lea	eax, DWORD PTR _dummy_object$[ebp]
	mov	DWORD PTR _objects$[ebp], eax
; Line 972
	mov	DWORD PTR _max_objects$[ebp], 0
; Line 974
	cmp	DWORD PTR _blend$[ebp], 0
	je	SHORT $LN14@t1_load_ke
; Line 976
	mov	ecx, DWORD PTR _blend$[ebp]
	add	ecx, 284				; 0000011cH
	mov	DWORD PTR _objects$[ebp], ecx
; Line 977
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _max_objects$[ebp], eax
$LN14@t1_load_ke:
; Line 979
	jmp	SHORT $LN21@t1_load_ke
$LN13@t1_load_ke:
; Line 982
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _dummy_object$[ebp], ecx
; Line 983
	lea	edx, DWORD PTR _dummy_object$[ebp]
	mov	DWORD PTR _objects$[ebp], edx
; Line 984
	mov	DWORD PTR _max_objects$[ebp], 0
; Line 985
	jmp	SHORT $LN21@t1_load_ke
$LN12@t1_load_ke:
; Line 988
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _dummy_object$[ebp], eax
; Line 989
	lea	ecx, DWORD PTR _dummy_object$[ebp]
	mov	DWORD PTR _objects$[ebp], ecx
; Line 990
	mov	DWORD PTR _max_objects$[ebp], 0
; Line 991
	jmp	SHORT $LN21@t1_load_ke
$LN11@t1_load_ke:
; Line 995
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	DWORD PTR _dummy_object$[ebp], eax
; Line 996
	lea	ecx, DWORD PTR _dummy_object$[ebp]
	mov	DWORD PTR _objects$[ebp], ecx
; Line 997
	mov	DWORD PTR _max_objects$[ebp], 0
; Line 998
	jmp	SHORT $LN21@t1_load_ke
$LN10@t1_load_ke:
; Line 1002
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 132				; 00000084H
	mov	DWORD PTR _dummy_object$[ebp], edx
; Line 1003
	lea	eax, DWORD PTR _dummy_object$[ebp]
	mov	DWORD PTR _objects$[ebp], eax
; Line 1004
	mov	DWORD PTR _max_objects$[ebp], 0
$LN21@t1_load_ke:
; Line 1007
	mov	ecx, DWORD PTR _objects$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@t1_load_ke
; Line 1010
	mov	edx, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [edx+8], 9
	je	SHORT $LN7@t1_load_ke
	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax+8], 10			; 0000000aH
	jne	SHORT $LN8@t1_load_ke
$LN7@t1_load_ke:
; Line 1012
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _max_objects$[ebp]
	push	ecx
	mov	edx, DWORD PTR _objects$[ebp]
	push	edx
	mov	eax, DWORD PTR _field$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1013
	jmp	SHORT $LN6@t1_load_ke
$LN8@t1_load_ke:
; Line 1015
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _max_objects$[ebp]
	push	ecx
	mov	edx, DWORD PTR _objects$[ebp]
	push	edx
	mov	eax, DWORD PTR _field$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN6@t1_load_ke:
; Line 1017
	jmp	SHORT $Exit$31
$LN4@t1_load_ke:
; Line 1022
	mov	ecx, 4
	imul	edx, ecx, 37
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN3@t1_load_ke
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG9018
	call	_FT_Message
	add	esp, 8
$LN3@t1_load_ke:
	xor	edx, edx
	jne	SHORT $LN4@t1_load_ke
; Line 1023
	mov	DWORD PTR _error$[ebp], 0
$Exit$31:
; Line 1027
	mov	eax, DWORD PTR _error$[ebp]
; Line 1028
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@t1_load_ke
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@t1_load_ke:
	DD	1
	DD	$LN28@t1_load_ke
$LN28@t1_load_ke:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN27@t1_load_ke
$LN27@t1_load_ke:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
	npad	3
$LN30@t1_load_ke:
	DD	$LN18@t1_load_ke
	DD	$LN20@t1_load_ke
	DD	$LN17@t1_load_ke
	DD	$LN15@t1_load_ke
	DD	$LN13@t1_load_ke
	DD	$LN12@t1_load_ke
	DD	$LN11@t1_load_ke
_t1_load_keyword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_parse_buildchar PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 892
	push	ebp
	mov	ebp, esp
	push	esi
; Line 893
	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+540], eax
; Line 896
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_parse_buildchar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv148 = -248						; size = 4
_old_limit$ = -244					; size = 4
_old_cursor$ = -240					; size = 4
_n$ = -236						; size = 4
_token$ = -232						; size = 4
_blend$ = -228						; size = 4
_parser$ = -224						; size = 4
_error$ = -220						; size = 4
_num_designs$ = -212					; size = 4
_design_tokens$ = -200					; size = 192
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_parse_weight_vector PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 821
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 824
	mov	DWORD PTR _error$[ebp], 0
; Line 825
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 826
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	DWORD PTR _blend$[ebp], edx
; Line 834
	mov	esi, esp
	lea	eax, DWORD PTR _num_designs$[ebp]
	push	eax
	push	16					; 00000010H
	lea	ecx, DWORD PTR _design_tokens$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 835
	cmp	DWORD PTR _num_designs$[ebp], 0
	jge	SHORT $LN11@parse_weig
; Line 837
	mov	DWORD PTR _error$[ebp], 162		; 000000a2H
; Line 838
	jmp	$Exit$18
$LN11@parse_weig:
; Line 840
	cmp	DWORD PTR _num_designs$[ebp], 0
	je	SHORT $LN9@parse_weig
	cmp	DWORD PTR _num_designs$[ebp], 16	; 00000010H
	jle	SHORT $LN10@parse_weig
$LN9@parse_weig:
; Line 844
	mov	edx, DWORD PTR _num_designs$[ebp]
	push	edx
	push	OFFSET $SG8953
	call	_FT_Message
	add	esp, 8
; Line 845
	push	OFFSET $SG8954
	push	845					; 0000034dH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 846
	jmp	$Exit$18
$LN10@parse_weig:
; Line 849
	cmp	DWORD PTR _blend$[ebp], 0
	je	SHORT $LN7@parse_weig
	mov	eax, DWORD PTR _blend$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@parse_weig
$LN7@parse_weig:
; Line 851
	push	0
	mov	ecx, DWORD PTR _num_designs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_t1_allocate_blend
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 852
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@parse_weig
; Line 853
	jmp	$Exit$18
$LN6@parse_weig:
; Line 854
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR _blend$[ebp], ecx
	jmp	SHORT $LN5@parse_weig
$LN8@parse_weig:
; Line 856
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _num_designs$[ebp]
	je	SHORT $LN5@parse_weig
; Line 861
	push	OFFSET $SG8961
	call	_FT_Message
	add	esp, 4
; Line 862
	push	OFFSET $SG8962
	push	862					; 0000035eH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 863
	jmp	$Exit$18
$LN5@parse_weig:
; Line 866
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _old_cursor$[ebp], edx
; Line 867
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _old_limit$[ebp], ecx
; Line 869
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN3@parse_weig
$LN2@parse_weig:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN3@parse_weig:
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _num_designs$[ebp]
	jge	$LN1@parse_weig
; Line 871
	imul	ecx, DWORD PTR _n$[ebp], 12
	lea	edx, DWORD PTR _design_tokens$[ebp+ecx]
	mov	DWORD PTR _token$[ebp], edx
; Line 872
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 873
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 876
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv148[ebp], eax
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR tv148[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 877
	jmp	$LN2@parse_weig
$LN1@parse_weig:
; Line 879
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _old_cursor$[ebp]
	mov	DWORD PTR [edx], eax
; Line 880
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _old_limit$[ebp]
	mov	DWORD PTR [ecx+8], edx
$Exit$18:
; Line 883
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 884
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@parse_weig
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@parse_weig:
	DD	2
	DD	$LN16@parse_weig
$LN16@parse_weig:
	DD	-200					; ffffff38H
	DD	192					; 000000c0H
	DD	$LN14@parse_weig
	DD	-212					; ffffff2cH
	DD	4
	DD	$LN15@parse_weig
$LN15@parse_weig:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN14@parse_weig:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
_parse_weight_vector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_point_token$1 = -384					; size = 4
_num_points$2 = -376					; size = 4
_p$3 = -368						; size = 4
_point_tokens$4 = -360					; size = 240
_axis_token$5 = -116					; size = 4
_map$6 = -112						; size = 4
_memory$ = -108						; size = 4
_old_limit$ = -104					; size = 4
_old_cursor$ = -100					; size = 4
_num_axis$ = -92					; size = 4
_n$ = -84						; size = 4
_axis_tokens$ = -76					; size = 48
_blend$ = -24						; size = 4
_parser$ = -20						; size = 4
_error$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_parse_blend_design_map PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 731
	push	ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 732
	mov	DWORD PTR _error$[ebp], 0
; Line 733
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 739
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 743
	mov	esi, esp
	lea	eax, DWORD PTR _num_axis$[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _axis_tokens$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 744
	cmp	DWORD PTR _num_axis$[ebp], 0
	jge	SHORT $LN13@parse_blen
; Line 746
	mov	DWORD PTR _error$[ebp], 162		; 000000a2H
; Line 747
	jmp	$Exit$23
$LN13@parse_blen:
; Line 749
	cmp	DWORD PTR _num_axis$[ebp], 0
	je	SHORT $LN11@parse_blen
	cmp	DWORD PTR _num_axis$[ebp], 4
	jle	SHORT $LN12@parse_blen
$LN11@parse_blen:
; Line 752
	mov	edx, DWORD PTR _num_axis$[ebp]
	push	edx
	push	OFFSET $SG8911
	call	_FT_Message
	add	esp, 8
; Line 753
	push	OFFSET $SG8912
	push	753					; 000002f1H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 754
	jmp	$Exit$23
$LN12@parse_blen:
; Line 757
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_cursor$[ebp], ecx
; Line 758
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _old_limit$[ebp], eax
; Line 760
	mov	ecx, DWORD PTR _num_axis$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_t1_allocate_blend
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 761
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@parse_blen
; Line 762
	jmp	$Exit$23
$LN10@parse_blen:
; Line 763
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR _blend$[ebp], ecx
; Line 766
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN9@parse_blen
$LN8@parse_blen:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN9@parse_blen:
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _num_axis$[ebp]
	jge	$LN7@parse_blen
; Line 768
	imul	ecx, DWORD PTR _n$[ebp], 12
	mov	edx, DWORD PTR _blend$[ebp]
	lea	eax, DWORD PTR [edx+ecx+88]
	mov	DWORD PTR _map$6[ebp], eax
; Line 774
	imul	ecx, DWORD PTR _n$[ebp], 12
	lea	edx, DWORD PTR _axis_tokens$[ebp+ecx]
	mov	DWORD PTR _axis_token$5[ebp], edx
; Line 776
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _axis_token$5[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 777
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _axis_token$5[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 779
	mov	esi, esp
	lea	eax, DWORD PTR _num_points$2[ebp]
	push	eax
	push	20					; 00000014H
	lea	ecx, DWORD PTR _point_tokens$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 781
	cmp	DWORD PTR _num_points$2[ebp], 0
	jle	SHORT $LN5@parse_blen
	cmp	DWORD PTR _num_points$2[ebp], 20	; 00000014H
	jle	SHORT $LN6@parse_blen
$LN5@parse_blen:
; Line 783
	push	OFFSET $SG8924
	call	_FT_Message
	add	esp, 4
; Line 784
	push	OFFSET $SG8925
	push	784					; 00000310H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 785
	jmp	$Exit$23
$LN6@parse_blen:
; Line 789
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _num_points$2[ebp]
	shl	eax, 1
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _map$6[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@parse_blen
; Line 790
	jmp	$Exit$23
$LN4@parse_blen:
; Line 791
	mov	eax, DWORD PTR _map$6[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _num_points$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _map$6[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 792
	mov	edx, DWORD PTR _map$6[ebp]
	mov	al, BYTE PTR _num_points$2[ebp]
	mov	BYTE PTR [edx], al
; Line 794
	mov	DWORD PTR _p$3[ebp], 0
	jmp	SHORT $LN3@parse_blen
$LN2@parse_blen:
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$3[ebp], ecx
$LN3@parse_blen:
	mov	edx, DWORD PTR _p$3[ebp]
	cmp	edx, DWORD PTR _num_points$2[ebp]
	jge	$LN1@parse_blen
; Line 799
	imul	eax, DWORD PTR _p$3[ebp], 12
	lea	ecx, DWORD PTR _point_tokens$4[ebp+eax]
	mov	DWORD PTR _point_token$1[ebp], ecx
; Line 802
	mov	edx, DWORD PTR _point_token$1[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 803
	mov	edx, DWORD PTR _point_token$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 805
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _map$6[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _p$3[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 806
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _map$6[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _p$3[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 807
	jmp	$LN2@parse_blen
$LN1@parse_blen:
; Line 808
	jmp	$LN8@parse_blen
$LN7@parse_blen:
; Line 810
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _old_cursor$[ebp]
	mov	DWORD PTR [edx], eax
; Line 811
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _old_limit$[ebp]
	mov	DWORD PTR [ecx+8], edx
$Exit$23:
; Line 814
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 815
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@parse_blen
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN22@parse_blen:
	DD	5
	DD	$LN21@parse_blen
$LN21@parse_blen:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@parse_blen
	DD	-76					; ffffffb4H
	DD	48					; 00000030H
	DD	$LN17@parse_blen
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN18@parse_blen
	DD	-360					; fffffe98H
	DD	240					; 000000f0H
	DD	$LN19@parse_blen
	DD	-376					; fffffe88H
	DD	4
	DD	$LN20@parse_blen
$LN20@parse_blen:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN19@parse_blen:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN18@parse_blen:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN17@parse_blen:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN16@parse_blen:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_parse_blend_design_map ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_token2$1 = -324					; size = 4
_n_axis$2 = -316					; size = 4
_axis$3 = -308						; size = 4
_token$4 = -304						; size = 4
_axis_tokens$5 = -296					; size = 48
_n$6 = -244						; size = 4
_old_limit$7 = -240					; size = 4
_old_cursor$8 = -236					; size = 4
_blend$ = -232						; size = 4
_error$ = -228						; size = 4
_parser$ = -224						; size = 4
_num_axis$ = -220					; size = 4
_num_designs$ = -212					; size = 4
_design_tokens$ = -200					; size = 192
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_parse_blend_design_positions PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 634
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 638
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 640
	mov	DWORD PTR _error$[ebp], 0
; Line 646
	mov	esi, esp
	lea	ecx, DWORD PTR _num_designs$[ebp]
	push	ecx
	push	16					; 00000010H
	lea	edx, DWORD PTR _design_tokens$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 647
	cmp	DWORD PTR _num_designs$[ebp], 0
	jge	SHORT $LN15@parse_blen
; Line 649
	mov	DWORD PTR _error$[ebp], 162		; 000000a2H
; Line 650
	jmp	$Exit$24
$LN15@parse_blen:
; Line 652
	cmp	DWORD PTR _num_designs$[ebp], 0
	je	SHORT $LN13@parse_blen
	cmp	DWORD PTR _num_designs$[ebp], 16	; 00000010H
	jle	SHORT $LN14@parse_blen
$LN13@parse_blen:
; Line 656
	mov	eax, DWORD PTR _num_designs$[ebp]
	push	eax
	push	OFFSET $SG8866
	call	_FT_Message
	add	esp, 8
; Line 657
	push	OFFSET $SG8867
	push	657					; 00000291H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 658
	jmp	$Exit$24
$LN14@parse_blen:
; Line 662
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _old_cursor$8[ebp], edx
; Line 663
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _old_limit$7[ebp], ecx
; Line 667
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	DWORD PTR _blend$[ebp], eax
; Line 668
	mov	DWORD PTR _num_axis$[ebp], 0
; Line 670
	mov	DWORD PTR _n$6[ebp], 0
	jmp	SHORT $LN12@parse_blen
$LN11@parse_blen:
	mov	ecx, DWORD PTR _n$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$6[ebp], ecx
$LN12@parse_blen:
	mov	edx, DWORD PTR _n$6[ebp]
	cmp	edx, DWORD PTR _num_designs$[ebp]
	jge	$LN10@parse_blen
; Line 678
	imul	eax, DWORD PTR _n$6[ebp], 12
	lea	ecx, DWORD PTR _design_tokens$[ebp+eax]
	mov	DWORD PTR _token$4[ebp], ecx
; Line 679
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _token$4[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 680
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _token$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
; Line 681
	mov	esi, esp
	lea	edx, DWORD PTR _n_axis$2[ebp]
	push	edx
	push	4
	lea	eax, DWORD PTR _axis_tokens$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 683
	cmp	DWORD PTR _n$6[ebp], 0
	jne	$LN9@parse_blen
; Line 685
	cmp	DWORD PTR _n_axis$2[ebp], 0
	jle	SHORT $LN7@parse_blen
	cmp	DWORD PTR _n_axis$2[ebp], 4
	jle	SHORT $LN8@parse_blen
$LN7@parse_blen:
; Line 689
	mov	ecx, DWORD PTR _n_axis$2[ebp]
	push	ecx
	push	OFFSET $SG8881
	call	_FT_Message
	add	esp, 8
; Line 690
	push	OFFSET $SG8882
	push	690					; 000002b2H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 691
	jmp	$Exit$24
$LN8@parse_blen:
; Line 694
	mov	edx, DWORD PTR _n_axis$2[ebp]
	mov	DWORD PTR _num_axis$[ebp], edx
; Line 695
	mov	eax, DWORD PTR _num_axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_designs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_t1_allocate_blend
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 696
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@parse_blen
; Line 697
	jmp	$Exit$24
$LN6@parse_blen:
; Line 698
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR _blend$[ebp], ecx
	jmp	SHORT $LN5@parse_blen
$LN9@parse_blen:
; Line 700
	mov	edx, DWORD PTR _n_axis$2[ebp]
	cmp	edx, DWORD PTR _num_axis$[ebp]
	je	SHORT $LN5@parse_blen
; Line 702
	push	OFFSET $SG8886
	call	_FT_Message
	add	esp, 4
; Line 703
	push	OFFSET $SG8887
	push	703					; 000002bfH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 704
	jmp	$Exit$24
$LN5@parse_blen:
; Line 708
	mov	DWORD PTR _axis$3[ebp], 0
	jmp	SHORT $LN3@parse_blen
$LN2@parse_blen:
	mov	eax, DWORD PTR _axis$3[ebp]
	add	eax, 1
	mov	DWORD PTR _axis$3[ebp], eax
$LN3@parse_blen:
	mov	ecx, DWORD PTR _axis$3[ebp]
	cmp	ecx, DWORD PTR _n_axis$2[ebp]
	jge	SHORT $LN1@parse_blen
; Line 710
	imul	edx, DWORD PTR _axis$3[ebp], 12
	lea	eax, DWORD PTR _axis_tokens$5[ebp+edx]
	mov	DWORD PTR _token2$1[ebp], eax
; Line 713
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _token2$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
; Line 714
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _token2$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+8], eax
; Line 715
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _n$6[ebp]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+24]
	mov	edx, DWORD PTR _axis$3[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 716
	jmp	$LN2@parse_blen
$LN1@parse_blen:
; Line 717
	jmp	$LN11@parse_blen
$LN10@parse_blen:
; Line 719
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _old_cursor$8[ebp]
	mov	DWORD PTR [eax], ecx
; Line 720
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _old_limit$7[ebp]
	mov	DWORD PTR [edx+8], eax
$Exit$24:
; Line 724
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 725
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@parse_blen
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@parse_blen:
	DD	4
	DD	$LN22@parse_blen
$LN22@parse_blen:
	DD	-200					; ffffff38H
	DD	192					; 000000c0H
	DD	$LN18@parse_blen
	DD	-212					; ffffff2cH
	DD	4
	DD	$LN19@parse_blen
	DD	-296					; fffffed8H
	DD	48					; 00000030H
	DD	$LN20@parse_blen
	DD	-316					; fffffec4H
	DD	4
	DD	$LN21@parse_blen
$LN21@parse_blen:
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN20@parse_blen:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN19@parse_blen:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN18@parse_blen:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
_parse_blend_design_positions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$1 = -108						; size = 4
_name$2 = -104						; size = 4
_token$3 = -100						; size = 4
_memory$ = -96						; size = 4
_blend$ = -92						; size = 4
_error$ = -84						; size = 4
_num_axis$ = -72					; size = 4
_n$ = -64						; size = 4
_axis_tokens$ = -56					; size = 48
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_parse_blend_axis_types PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 567
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 570
	mov	DWORD PTR _error$[ebp], 0
; Line 577
	mov	esi, esp
	lea	eax, DWORD PTR _num_axis$[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _axis_tokens$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 578
	cmp	DWORD PTR _num_axis$[ebp], 0
	jge	SHORT $LN10@parse_blen
; Line 580
	mov	DWORD PTR _error$[ebp], 162		; 000000a2H
; Line 581
	jmp	$Exit$18
$LN10@parse_blen:
; Line 583
	cmp	DWORD PTR _num_axis$[ebp], 0
	je	SHORT $LN8@parse_blen
	cmp	DWORD PTR _num_axis$[ebp], 4
	jle	SHORT $LN9@parse_blen
$LN8@parse_blen:
; Line 586
	mov	edx, DWORD PTR _num_axis$[ebp]
	push	edx
	push	OFFSET $SG8833
	call	_FT_Message
	add	esp, 8
; Line 587
	push	OFFSET $SG8834
	push	587					; 0000024bH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 588
	jmp	$Exit$18
$LN9@parse_blen:
; Line 592
	mov	eax, DWORD PTR _num_axis$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_t1_allocate_blend
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 593
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@parse_blen
; Line 594
	jmp	$Exit$18
$LN7@parse_blen:
; Line 596
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	DWORD PTR _blend$[ebp], eax
; Line 597
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 600
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@parse_blen
$LN5@parse_blen:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN6@parse_blen:
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _num_axis$[ebp]
	jge	$Exit$18
; Line 602
	imul	edx, DWORD PTR _n$[ebp], 12
	lea	eax, DWORD PTR _axis_tokens$[ebp+edx]
	mov	DWORD PTR _token$3[ebp], eax
; Line 608
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _token$3[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 47					; 0000002fH
	jne	SHORT $LN3@parse_blen
; Line 609
	mov	eax, DWORD PTR _token$3[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _token$3[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@parse_blen:
; Line 611
	mov	eax, DWORD PTR _token$3[ebp]
	mov	ecx, DWORD PTR _token$3[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _len$1[ebp], edx
; Line 612
	jne	SHORT $LN2@parse_blen
; Line 614
	push	OFFSET $SG8845
	push	614					; 00000266H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 615
	jmp	SHORT $Exit$18
$LN2@parse_blen:
; Line 618
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$1[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+ecx*4+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@parse_blen
; Line 619
	jmp	SHORT $Exit$18
$LN1@parse_blen:
; Line 621
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	mov	DWORD PTR _name$2[ebp], edx
; Line 622
	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$3[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _name$2[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 623
	mov	ecx, DWORD PTR _name$2[ebp]
	add	ecx, DWORD PTR _len$1[ebp]
	mov	BYTE PTR [ecx], 0
; Line 624
	jmp	$LN5@parse_blen
$Exit$18:
; Line 627
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 628
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@parse_blen
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@parse_blen:
	DD	3
	DD	$LN16@parse_blen
$LN16@parse_blen:
	DD	-56					; ffffffc8H
	DD	48					; 00000030H
	DD	$LN13@parse_blen
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN14@parse_blen
	DD	-84					; ffffffacH
	DD	4
	DD	$LN15@parse_blen
$LN15@parse_blen:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN14@parse_blen:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN13@parse_blen:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
_parse_blend_axis_types ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_weights$ = 8						; size = 4
_axiscoords$ = 12					; size = 4
_axis_count$ = 16					; size = 4
_mm_weights_unmap PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 262
	push	ebp
	mov	ebp, esp
	push	esi
$LN10@mm_weights:
; Line 263
	cmp	DWORD PTR _axis_count$[ebp], 4
	jbe	SHORT $LN9@mm_weights
	push	OFFSET $SG8623
	push	263					; 00000107H
	push	OFFSET $SG8624
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@mm_weights:
	xor	eax, eax
	jne	SHORT $LN10@mm_weights
; Line 265
	cmp	DWORD PTR _axis_count$[ebp], 1
	jne	SHORT $LN6@mm_weights
; Line 266
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _axiscoords$[ebp]
	mov	esi, DWORD PTR _weights$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	jmp	$LN11@mm_weights
$LN6@mm_weights:
; Line 268
	cmp	DWORD PTR _axis_count$[ebp], 2
	jne	SHORT $LN4@mm_weights
; Line 270
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _weights$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _axiscoords$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 271
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _weights$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _axiscoords$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	jmp	$LN11@mm_weights
$LN4@mm_weights:
; Line 274
	cmp	DWORD PTR _axis_count$[ebp], 3
	jne	$LN2@mm_weights
; Line 276
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _weights$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 3
	mov	eax, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _axiscoords$[ebp]
	mov	DWORD PTR [edx+eax], ecx
; Line 277
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _weights$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 3
	mov	eax, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _axiscoords$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 278
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, 4
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _weights$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	eax, DWORD PTR _weights$[ebp]
	add	edx, DWORD PTR [eax+ecx]
	mov	ecx, 4
	imul	eax, ecx, 5
	mov	ecx, DWORD PTR _weights$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _weights$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _axiscoords$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 281
	jmp	$LN11@mm_weights
$LN2@mm_weights:
; Line 284
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _weights$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 11
	mov	edx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 7
	mov	edx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 3
	mov	edx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _axiscoords$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 286
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _weights$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 11
	mov	edx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 7
	mov	edx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 3
	mov	edx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _weights$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _axiscoords$[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 288
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _weights$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 13
	mov	eax, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 7
	mov	eax, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 5
	mov	eax, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _weights$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _axiscoords$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 290
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, 4
	imul	ecx, eax, 14
	mov	eax, DWORD PTR _weights$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	eax, DWORD PTR _weights$[ebp]
	add	edx, DWORD PTR [eax+ecx]
	mov	ecx, 4
	imul	eax, ecx, 13
	mov	ecx, DWORD PTR _weights$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	eax, 4
	imul	ecx, eax, 12
	mov	eax, DWORD PTR _weights$[ebp]
	add	edx, DWORD PTR [eax+ecx]
	mov	ecx, 4
	imul	eax, ecx, 11
	mov	ecx, DWORD PTR _weights$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	eax, 4
	imul	ecx, eax, 10
	mov	eax, DWORD PTR _weights$[ebp]
	add	edx, DWORD PTR [eax+ecx]
	mov	ecx, 4
	imul	eax, ecx, 9
	mov	ecx, DWORD PTR _weights$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _weights$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _axiscoords$[ebp]
	mov	DWORD PTR [eax+ecx], edx
$LN11@mm_weights:
; Line 292
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_mm_weights_unmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_j$ = -4						; size = 4
_axismap$ = 8						; size = 4
_ncv$ = 12						; size = 4
_mm_axis_unmap PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 232
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 236
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _axismap$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _ncv$[ebp]
	cmp	edx, DWORD PTR [ecx+eax]
	jg	SHORT $LN5@mm_axis_un
; Line 237
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _axismap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+ecx]
	shl	eax, 16					; 00000010H
	jmp	$LN6@mm_axis_un
$LN5@mm_axis_un:
; Line 239
	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN4@mm_axis_un
$LN3@mm_axis_un:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN4@mm_axis_un:
	mov	edx, DWORD PTR _axismap$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN2@mm_axis_un
; Line 241
	mov	ecx, DWORD PTR _axismap$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _ncv$[ebp]
	cmp	ecx, DWORD PTR [edx+eax*4]
	jg	SHORT $LN1@mm_axis_un
; Line 246
	mov	edx, DWORD PTR _axismap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR [eax+ecx*4-4]
	shl	esi, 16					; 00000010H
	mov	edx, DWORD PTR _axismap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _axismap$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _j$[ebp]
	mov	ebx, DWORD PTR [eax+ecx*4]
	sub	ebx, DWORD PTR [edx+edi*4-4]
	mov	edx, DWORD PTR _axismap$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _axismap$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	sub	eax, DWORD PTR [edx+edi*4-4]
	push	eax
	mov	ecx, DWORD PTR _axismap$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _ncv$[ebp]
	sub	ecx, DWORD PTR [edx+eax*4-4]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	imul	ebx, eax
	add	esi, ebx
	mov	eax, esi
	jmp	SHORT $LN6@mm_axis_un
$LN1@mm_axis_un:
; Line 247
	jmp	$LN3@mm_axis_un
$LN2@mm_axis_un:
; Line 249
	mov	edx, DWORD PTR _axismap$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _axismap$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4-4]
	shl	eax, 16					; 00000010H
$LN6@mm_axis_un:
; Line 250
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_mm_axis_unmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$1 = -28						; size = 4
_nn$2 = -24						; size = 4
_error$ = -16						; size = 4
_memory$ = -8						; size = 4
_blend$ = -4						; size = 4
_face$ = 8						; size = 4
_num_designs$ = 12					; size = 4
_num_axis$ = 16						; size = 4
_t1_allocate_blend PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 106
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 108
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 109
	mov	DWORD PTR _error$[ebp], 0
; Line 112
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	DWORD PTR _blend$[ebp], eax
; Line 113
	cmp	DWORD PTR _blend$[ebp], 0
	jne	SHORT $LN18@t1_allocat
; Line 115
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	420					; 000001a4H
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _blend$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@t1_allocat
; Line 116
	jmp	$Exit$24
$LN17@t1_allocat:
; Line 118
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+416], 0
; Line 120
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+528], edx
$LN18@t1_allocat:
; Line 124
	cmp	DWORD PTR _num_designs$[ebp], 0
	jbe	$LN16@t1_allocat
; Line 126
	mov	eax, DWORD PTR _blend$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN15@t1_allocat
; Line 135
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _num_designs$[ebp]
	push	edx
	push	0
	push	32					; 00000020H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+ecx+144], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN13@t1_allocat
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _num_designs$[ebp]
	push	ecx
	push	0
	push	196					; 000000c4H
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+ecx+212], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN13@t1_allocat
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _num_designs$[ebp]
	push	ecx
	push	0
	push	16					; 00000010H
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+ecx+284], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN13@t1_allocat
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _num_designs$[ebp]
	shl	ecx, 1
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+136], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@t1_allocat
$LN13@t1_allocat:
; Line 136
	jmp	$Exit$24
$LN14@t1_allocat:
; Line 138
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR _num_designs$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+140], edx
; Line 140
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 132				; 00000084H
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+eax+144], ecx
; Line 141
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 168				; 000000a8H
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+edx+212], eax
; Line 142
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 460				; 000001ccH
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+ecx+284], edx
; Line 144
	mov	DWORD PTR _nn$2[ebp], 2
	jmp	SHORT $LN12@t1_allocat
$LN11@t1_allocat:
	mov	ecx, DWORD PTR _nn$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$2[ebp], ecx
$LN12@t1_allocat:
	mov	edx, DWORD PTR _nn$2[ebp]
	cmp	edx, DWORD PTR _num_designs$[ebp]
	ja	SHORT $LN10@t1_allocat
; Line 146
	mov	eax, DWORD PTR _nn$2[ebp]
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+140]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR _nn$2[ebp]
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+eax*4+144], edx
; Line 147
	mov	edx, DWORD PTR _nn$2[ebp]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+208]
	add	ecx, 196				; 000000c4H
	mov	edx, DWORD PTR _nn$2[ebp]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+edx*4+212], ecx
; Line 148
	mov	ecx, DWORD PTR _nn$2[ebp]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+280]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _nn$2[ebp]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+ecx*4+284], eax
; Line 149
	jmp	SHORT $LN11@t1_allocat
$LN10@t1_allocat:
; Line 151
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR _num_designs$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN16@t1_allocat
$LN15@t1_allocat:
; Line 153
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _num_designs$[ebp]
	je	SHORT $LN16@t1_allocat
; Line 154
	jmp	$Fail$25
$LN16@t1_allocat:
; Line 158
	cmp	DWORD PTR _num_axis$[ebp], 0
	jbe	SHORT $LN7@t1_allocat
; Line 160
	mov	ecx, DWORD PTR _blend$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN6@t1_allocat
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _num_axis$[ebp]
	je	SHORT $LN6@t1_allocat
; Line 161
	jmp	$Fail$25
$LN6@t1_allocat:
; Line 163
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR _num_axis$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN7@t1_allocat:
; Line 167
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _num_designs$[ebp], ecx
; Line 168
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _num_axis$[ebp], eax
; Line 169
	cmp	DWORD PTR _num_designs$[ebp], 0
	je	$Exit$24
	cmp	DWORD PTR _num_axis$[ebp], 0
	je	$Exit$24
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _blend$[ebp]
	cmp	DWORD PTR [eax+edx+24], 0
	jne	SHORT $Exit$24
; Line 174
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _num_designs$[ebp]
	imul	edx, DWORD PTR _num_axis$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+edx+24], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@t1_allocat
; Line 175
	jmp	SHORT $Exit$24
$LN4@t1_allocat:
; Line 177
	mov	DWORD PTR _n$1[ebp], 1
	jmp	SHORT $LN3@t1_allocat
$LN2@t1_allocat:
	mov	edx, DWORD PTR _n$1[ebp]
	add	edx, 1
	mov	DWORD PTR _n$1[ebp], edx
$LN3@t1_allocat:
	mov	eax, DWORD PTR _n$1[ebp]
	cmp	eax, DWORD PTR _num_designs$[ebp]
	jae	SHORT $Exit$24
; Line 178
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _num_axis$[ebp]
	imul	eax, DWORD PTR _n$1[ebp]
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+edx+24]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _n$1[ebp]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+ecx*4+24], eax
	jmp	SHORT $LN2@t1_allocat
$Exit$24:
; Line 182
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN19@t1_allocat
$Fail$25:
; Line 185
	push	OFFSET $SG8580
	push	185					; 000000b9H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 186
	jmp	SHORT $Exit$24
$LN19@t1_allocat:
; Line 187
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@t1_allocat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@t1_allocat:
	DD	1
	DD	$LN22@t1_allocat
$LN22@t1_allocat:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN21@t1_allocat
$LN21@t1_allocat:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_t1_allocate_blend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dmap$1 = -24						; size = 4
_n$2 = -20						; size = 4
_num_axis$3 = -16					; size = 4
_num_designs$4 = -12					; size = 4
_blend$ = -8						; size = 4
_memory$ = -4						; size = 4
_face$ = 8						; size = 4
_T1_Done_Blend PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 512
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 513
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 514
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	DWORD PTR _blend$[ebp], eax
; Line 517
	cmp	DWORD PTR _blend$[ebp], 0
	je	$LN38@T1_Done_Bl
; Line 519
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _num_designs$4[ebp], edx
; Line 520
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _num_axis$3[ebp], ecx
$LN36@T1_Done_Bl:
; Line 525
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+eax+24]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+edx+24], 0
	xor	ecx, ecx
	jne	SHORT $LN36@T1_Done_Bl
; Line 526
	mov	DWORD PTR _n$2[ebp], 1
	jmp	SHORT $LN33@T1_Done_Bl
$LN32@T1_Done_Bl:
	mov	edx, DWORD PTR _n$2[ebp]
	add	edx, 1
	mov	DWORD PTR _n$2[ebp], edx
$LN33@T1_Done_Bl:
	mov	eax, DWORD PTR _n$2[ebp]
	cmp	eax, DWORD PTR _num_designs$4[ebp]
	jae	SHORT $LN30@T1_Done_Bl
; Line 527
	mov	ecx, DWORD PTR _n$2[ebp]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+ecx*4+24], 0
	jmp	SHORT $LN32@T1_Done_Bl
$LN30@T1_Done_Bl:
; Line 530
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+eax+212]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+ecx+212], 0
	xor	eax, eax
	jne	SHORT $LN30@T1_Done_Bl
$LN27@T1_Done_Bl:
; Line 531
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+ecx+144]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+edx+144], 0
	xor	ecx, ecx
	jne	SHORT $LN27@T1_Done_Bl
$LN24@T1_Done_Bl:
; Line 532
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+edx+284]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+eax+284], 0
	xor	edx, edx
	jne	SHORT $LN24@T1_Done_Bl
; Line 534
	mov	DWORD PTR _n$2[ebp], 0
	jmp	SHORT $LN21@T1_Done_Bl
$LN20@T1_Done_Bl:
	mov	eax, DWORD PTR _n$2[ebp]
	add	eax, 1
	mov	DWORD PTR _n$2[ebp], eax
$LN21@T1_Done_Bl:
	mov	ecx, DWORD PTR _n$2[ebp]
	cmp	ecx, DWORD PTR _num_designs$4[ebp]
	jae	SHORT $LN18@T1_Done_Bl
; Line 536
	mov	edx, DWORD PTR _n$2[ebp]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+edx*4+212], 0
; Line 537
	mov	ecx, DWORD PTR _n$2[ebp]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+ecx*4+144], 0
; Line 538
	mov	eax, DWORD PTR _n$2[ebp]
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+eax*4+284], 0
; Line 539
	jmp	SHORT $LN20@T1_Done_Bl
$LN18@T1_Done_Bl:
; Line 542
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+136], 0
	xor	eax, eax
	jne	SHORT $LN18@T1_Done_Bl
; Line 543
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [ecx+140], 0
; Line 546
	mov	DWORD PTR _n$2[ebp], 0
	jmp	SHORT $LN15@T1_Done_Bl
$LN14@T1_Done_Bl:
	mov	edx, DWORD PTR _n$2[ebp]
	add	edx, 1
	mov	DWORD PTR _n$2[ebp], edx
$LN15@T1_Done_Bl:
	mov	eax, DWORD PTR _n$2[ebp]
	cmp	eax, DWORD PTR _num_axis$3[ebp]
	jae	SHORT $LN13@T1_Done_Bl
$LN12@T1_Done_Bl:
; Line 547
	mov	ecx, DWORD PTR _n$2[ebp]
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _n$2[ebp]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [eax+edx*4+8], 0
	xor	ecx, ecx
	jne	SHORT $LN12@T1_Done_Bl
	jmp	SHORT $LN14@T1_Done_Bl
$LN13@T1_Done_Bl:
; Line 550
	mov	DWORD PTR _n$2[ebp], 0
	jmp	SHORT $LN9@T1_Done_Bl
$LN8@T1_Done_Bl:
	mov	edx, DWORD PTR _n$2[ebp]
	add	edx, 1
	mov	DWORD PTR _n$2[ebp], edx
$LN9@T1_Done_Bl:
	mov	eax, DWORD PTR _n$2[ebp]
	cmp	eax, DWORD PTR _num_axis$3[ebp]
	jae	SHORT $LN3@T1_Done_Bl
; Line 552
	imul	ecx, DWORD PTR _n$2[ebp], 12
	mov	edx, DWORD PTR _blend$[ebp]
	lea	eax, DWORD PTR [edx+ecx+88]
	mov	DWORD PTR _dmap$1[ebp], eax
$LN6@T1_Done_Bl:
; Line 555
	mov	ecx, DWORD PTR _dmap$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _dmap$1[ebp]
	mov	DWORD PTR [ecx+4], 0
	xor	edx, edx
	jne	SHORT $LN6@T1_Done_Bl
; Line 556
	mov	eax, DWORD PTR _dmap$1[ebp]
	mov	BYTE PTR [eax], 0
; Line 557
	jmp	SHORT $LN8@T1_Done_Bl
$LN3@T1_Done_Bl:
; Line 559
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+528], 0
	xor	edx, edx
	jne	SHORT $LN3@T1_Done_Bl
$LN38@T1_Done_Bl:
; Line 561
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T1_Done_Blend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -36						; size = 4
_i$ = -32						; size = 4
_lcoords$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_num_coords$ = 12					; size = 4
_coords$ = 16						; size = 4
_T1_Set_Var_Design PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 492
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 498
	mov	DWORD PTR _error$[ebp], 6
; Line 499
	cmp	DWORD PTR _num_coords$[ebp], 4
	ja	SHORT $LN4@T1_Set_Var
	cmp	DWORD PTR _num_coords$[ebp], 0
	jbe	SHORT $LN4@T1_Set_Var
; Line 501
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@T1_Set_Var
$LN2@T1_Set_Var:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@T1_Set_Var:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _num_coords$[ebp]
	jae	SHORT $LN1@T1_Set_Var
; Line 502
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _coords$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _lcoords$[ebp+edx*4], eax
	jmp	SHORT $LN2@T1_Set_Var
$LN1@T1_Set_Var:
; Line 503
	lea	eax, DWORD PTR _lcoords$[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_coords$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_T1_Set_MM_Design
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$LN4@T1_Set_Var:
; Line 506
	mov	eax, DWORD PTR _error$[ebp]
; Line 507
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@T1_Set_Var
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@T1_Set_Var:
	DD	1
	DD	$LN8@T1_Set_Var
$LN8@T1_Set_Var:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN7@T1_Set_Var
$LN7@T1_Set_Var:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_T1_Set_Var_Design ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p_design$1 = -124					; size = 4
_after$2 = -120						; size = 4
_before$3 = -116					; size = 4
_blends$4 = -112					; size = 4
_designs$5 = -108					; size = 4
_map$6 = -104						; size = 4
_the_blend$7 = -100					; size = 4
_design$8 = -96						; size = 4
_final_blends$9 = -88					; size = 64
_p$ = -20						; size = 4
_n$ = -16						; size = 4
_error$ = -12						; size = 4
_blend$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_num_coords$ = 12					; size = 4
_coords$ = 16						; size = 4
_T1_Set_MM_Design PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 416
	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 31					; 0000001fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 417
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR _blend$[ebp], ecx
; Line 422
	mov	DWORD PTR _error$[ebp], 6
; Line 423
	cmp	DWORD PTR _blend$[ebp], 0
	je	$LN13@T1_Set_MM_
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _num_coords$[ebp]
	jne	$LN13@T1_Set_MM_
; Line 429
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN12@T1_Set_MM_
$LN11@T1_Set_MM_:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN12@T1_Set_MM_:
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	$LN10@T1_Set_MM_
; Line 431
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _coords$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _design$8[ebp], eax
; Line 433
	imul	ecx, DWORD PTR _n$[ebp], 12
	mov	edx, DWORD PTR _blend$[ebp]
	lea	eax, DWORD PTR [edx+ecx+88]
	mov	DWORD PTR _map$6[ebp], eax
; Line 434
	mov	ecx, DWORD PTR _map$6[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _designs$5[ebp], edx
; Line 435
	mov	eax, DWORD PTR _map$6[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _blends$4[ebp], ecx
; Line 436
	mov	DWORD PTR _before$3[ebp], -1
	mov	DWORD PTR _after$2[ebp], -1
; Line 439
	mov	DWORD PTR _p$[ebp], 0
	jmp	SHORT $LN9@T1_Set_MM_
$LN8@T1_Set_MM_:
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN9@T1_Set_MM_:
	mov	eax, DWORD PTR _map$6[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _p$[ebp], ecx
	jae	SHORT $LN7@T1_Set_MM_
; Line 441
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _designs$5[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _p_design$1[ebp], ecx
; Line 445
	mov	edx, DWORD PTR _design$8[ebp]
	cmp	edx, DWORD PTR _p_design$1[ebp]
	jne	SHORT $LN6@T1_Set_MM_
; Line 447
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _blends$4[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _the_blend$7[ebp], edx
; Line 448
	jmp	$Found$19
$LN6@T1_Set_MM_:
; Line 451
	mov	eax, DWORD PTR _design$8[ebp]
	cmp	eax, DWORD PTR _p_design$1[ebp]
	jge	SHORT $LN5@T1_Set_MM_
; Line 453
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _after$2[ebp], ecx
; Line 454
	jmp	SHORT $LN7@T1_Set_MM_
$LN5@T1_Set_MM_:
; Line 457
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _before$3[ebp], edx
; Line 458
	jmp	SHORT $LN8@T1_Set_MM_
$LN7@T1_Set_MM_:
; Line 461
	cmp	DWORD PTR _before$3[ebp], 0
	jge	SHORT $LN4@T1_Set_MM_
; Line 462
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _blends$4[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _the_blend$7[ebp], eax
	jmp	SHORT $Found$19
$LN4@T1_Set_MM_:
; Line 464
	cmp	DWORD PTR _after$2[ebp], 0
	jge	SHORT $LN2@T1_Set_MM_
; Line 465
	mov	ecx, DWORD PTR _map$6[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _blends$4[ebp]
	mov	ecx, DWORD PTR [eax+edx*4-4]
	mov	DWORD PTR _the_blend$7[ebp], ecx
; Line 467
	jmp	SHORT $Found$19
$LN2@T1_Set_MM_:
; Line 470
	mov	edx, DWORD PTR _after$2[ebp]
	mov	eax, DWORD PTR _designs$5[ebp]
	mov	ecx, DWORD PTR _before$3[ebp]
	mov	esi, DWORD PTR _designs$5[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	sub	edx, DWORD PTR [esi+ecx*4]
	push	edx
	mov	eax, DWORD PTR _after$2[ebp]
	mov	ecx, DWORD PTR _blends$4[ebp]
	mov	edx, DWORD PTR _before$3[ebp]
	mov	esi, DWORD PTR _blends$4[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	sub	eax, DWORD PTR [esi+edx*4]
	push	eax
	mov	ecx, DWORD PTR _before$3[ebp]
	mov	edx, DWORD PTR _designs$5[ebp]
	mov	eax, DWORD PTR _design$8[ebp]
	sub	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _the_blend$7[ebp], eax
$Found$19:
; Line 473
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _the_blend$7[ebp]
	mov	DWORD PTR _final_blends$9[ebp+ecx*4], edx
; Line 474
	jmp	$LN11@T1_Set_MM_
$LN10@T1_Set_MM_:
; Line 476
	lea	eax, DWORD PTR _final_blends$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_coords$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_T1_Set_MM_Blend
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$LN13@T1_Set_MM_:
; Line 479
	mov	eax, DWORD PTR _error$[ebp]
; Line 480
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@T1_Set_MM_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@T1_Set_MM_:
	DD	1
	DD	$LN17@T1_Set_MM_
$LN17@T1_Set_MM_:
	DD	-88					; ffffffa8H
	DD	64					; 00000040H
	DD	$LN16@T1_Set_MM_
$LN16@T1_Set_MM_:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_T1_Set_MM_Design ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_factor$1 = -24						; size = 4
_result$2 = -20						; size = 4
_m$ = -16						; size = 4
_n$ = -12						; size = 4
_error$ = -8						; size = 4
_blend$ = -4						; size = 4
_face$ = 8						; size = 4
_num_coords$ = 12					; size = 4
_coords$ = 16						; size = 4
_T1_Set_MM_Blend PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 369
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 370
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR _blend$[ebp], ecx
; Line 375
	mov	DWORD PTR _error$[ebp], 6
; Line 377
	cmp	DWORD PTR _blend$[ebp], 0
	je	$LN10@T1_Set_MM_
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _num_coords$[ebp]
	jne	$LN10@T1_Set_MM_
; Line 380
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN9@T1_Set_MM_
$LN8@T1_Set_MM_:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN9@T1_Set_MM_:
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	$LN7@T1_Set_MM_
; Line 382
	mov	DWORD PTR _result$2[ebp], 65536		; 00010000H
; Line 385
	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN6@T1_Set_MM_
$LN5@T1_Set_MM_:
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 1
	mov	DWORD PTR _m$[ebp], ecx
$LN6@T1_Set_MM_:
	mov	edx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN4@T1_Set_MM_
; Line 391
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _coords$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _factor$1[ebp], eax
; Line 392
	cmp	DWORD PTR _factor$1[ebp], 0
	jge	SHORT $LN3@T1_Set_MM_
; Line 393
	mov	DWORD PTR _factor$1[ebp], 0
$LN3@T1_Set_MM_:
; Line 394
	cmp	DWORD PTR _factor$1[ebp], 65536		; 00010000H
	jle	SHORT $LN2@T1_Set_MM_
; Line 395
	mov	DWORD PTR _factor$1[ebp], 65536		; 00010000H
$LN2@T1_Set_MM_:
; Line 397
	mov	edx, 1
	mov	ecx, DWORD PTR _m$[ebp]
	shl	edx, cl
	and	edx, DWORD PTR _n$[ebp]
	jne	SHORT $LN1@T1_Set_MM_
; Line 398
	mov	eax, 65536				; 00010000H
	sub	eax, DWORD PTR _factor$1[ebp]
	mov	DWORD PTR _factor$1[ebp], eax
$LN1@T1_Set_MM_:
; Line 400
	mov	ecx, DWORD PTR _factor$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _result$2[ebp]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _result$2[ebp], eax
; Line 401
	jmp	SHORT $LN5@T1_Set_MM_
$LN4@T1_Set_MM_:
; Line 402
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _result$2[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 403
	jmp	$LN8@T1_Set_MM_
$LN7@T1_Set_MM_:
; Line 405
	mov	DWORD PTR _error$[ebp], 0
$LN10@T1_Set_MM_:
; Line 408
	mov	eax, DWORD PTR _error$[ebp]
; Line 409
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T1_Set_MM_Blend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_blend$ = -120						; size = 4
_axiscoords$ = -112					; size = 16
_i$ = -92						; size = 4
_error$ = -84						; size = 4
_mmaster$ = -72						; size = 56
_mmvar$ = -12						; size = 4
_memory$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_master$ = 12						; size = 4
_T1_Get_MM_Var PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 303
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 304
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 305
	mov	DWORD PTR _mmvar$[ebp], 0
; Line 310
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	DWORD PTR _blend$[ebp], eax
; Line 313
	lea	ecx, DWORD PTR _mmaster$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_T1_Get_Multi_Master
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 314
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@T1_Get_MM_
; Line 315
	jmp	$Exit$22
$LN14@T1_Get_MM_:
; Line 318
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	imul	ecx, DWORD PTR _mmaster$[ebp], 24
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _mmvar$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@T1_Get_MM_
; Line 319
	jmp	$Exit$22
$LN13@T1_Get_MM_:
; Line 321
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR _mmaster$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 322
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR _mmaster$[ebp+4]
	mov	DWORD PTR [edx+4], eax
; Line 323
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [ecx+8], -1
; Line 324
	mov	edx, 20					; 00000014H
	shl	edx, 0
	add	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 326
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 328
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@T1_Get_MM_
$LN11@T1_Get_MM_:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN12@T1_Get_MM_:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _mmaster$[ebp]
	jae	$LN10@T1_Get_MM_
; Line 330
	imul	ecx, DWORD PTR _i$[ebp], 12
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _mmaster$[ebp+ecx+8]
	mov	DWORD PTR [eax+edx], ecx
; Line 331
	imul	edx, DWORD PTR _i$[ebp], 12
	mov	eax, DWORD PTR _mmaster$[ebp+edx+12]
	shl	eax, 16					; 00000010H
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 332
	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, DWORD PTR _mmaster$[ebp+eax+16]
	shl	ecx, 16					; 00000010H
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+edx+12], ecx
; Line 334
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR [edx+12]
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	esi, DWORD PTR _mmvar$[ebp]
	mov	esi, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [eax+ecx+4]
	add	eax, DWORD PTR [esi+edx+12]
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [edx+ecx+8], eax
; Line 336
	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+eax+20], -1
; Line 337
	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+eax+16], -1
; Line 339
	push	OFFSET $SG8658
	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@T1_Get_MM_
; Line 340
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+ecx+16], 2003265652	; 77676874H
	jmp	SHORT $LN8@T1_Get_MM_
$LN9@T1_Get_MM_:
; Line 341
	push	OFFSET $SG8666
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@T1_Get_MM_
; Line 342
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+edx+16], 2003072104	; 77647468H
	jmp	SHORT $LN8@T1_Get_MM_
$LN7@T1_Get_MM_:
; Line 343
	push	OFFSET $SG8674
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, DWORD PTR _mmvar$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@T1_Get_MM_
; Line 344
	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+eax+16], 1869640570	; 6f70737aH
$LN8@T1_Get_MM_:
; Line 345
	jmp	$LN11@T1_Get_MM_
$LN10@T1_Get_MM_:
; Line 347
	mov	eax, DWORD PTR _blend$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+4]
	shl	edx, cl
	mov	eax, DWORD PTR _blend$[ebp]
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN4@T1_Get_MM_
; Line 351
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR _axiscoords$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	call	_mm_weights_unmap
	add	esp, 12					; 0000000cH
; Line 353
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@T1_Get_MM_
$LN2@T1_Get_MM_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@T1_Get_MM_:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _mmaster$[ebp]
	jae	SHORT $LN4@T1_Get_MM_
; Line 355
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _axiscoords$[ebp+edx*4]
	push	eax
	imul	ecx, DWORD PTR _i$[ebp], 12
	mov	edx, DWORD PTR _blend$[ebp]
	lea	eax, DWORD PTR [edx+ecx+88]
	push	eax
	call	_mm_axis_unmap
	add	esp, 8
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _mmvar$[ebp]
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [edx+ecx+8], eax
	jmp	SHORT $LN2@T1_Get_MM_
$LN4@T1_Get_MM_:
; Line 358
	mov	eax, DWORD PTR _master$[ebp]
	mov	ecx, DWORD PTR _mmvar$[ebp]
	mov	DWORD PTR [eax], ecx
$Exit$22:
; Line 361
	mov	eax, DWORD PTR _error$[ebp]
; Line 362
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@T1_Get_MM_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@T1_Get_MM_:
	DD	3
	DD	$LN20@T1_Get_MM_
$LN20@T1_Get_MM_:
	DD	-72					; ffffffb8H
	DD	56					; 00000038H
	DD	$LN17@T1_Get_MM_
	DD	-84					; ffffffacH
	DD	4
	DD	$LN18@T1_Get_MM_
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN19@T1_Get_MM_
$LN19@T1_Get_MM_:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN18@T1_Get_MM_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN17@T1_Get_MM_:
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_T1_Get_MM_Var ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_map$1 = -20						; size = 4
_axis$2 = -16						; size = 4
_error$ = -12						; size = 4
_n$ = -8						; size = 4
_blend$ = -4						; size = 4
_face$ = 8						; size = 4
_master$ = 12						; size = 4
_T1_Get_Multi_Master PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 193
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 194
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR _blend$[ebp], ecx
; Line 199
	push	OFFSET $SG8589
	push	199					; 000000c7H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 201
	cmp	DWORD PTR _blend$[ebp], 0
	je	$LN4@T1_Get_Mul
; Line 203
	mov	edx, DWORD PTR _master$[ebp]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx
; Line 204
	mov	edx, DWORD PTR _master$[ebp]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+4], ecx
; Line 206
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN3@T1_Get_Mul
$LN2@T1_Get_Mul:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN3@T1_Get_Mul:
	mov	eax, DWORD PTR _blend$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN1@T1_Get_Mul
; Line 208
	imul	edx, DWORD PTR _n$[ebp], 12
	mov	eax, DWORD PTR _master$[ebp]
	lea	ecx, DWORD PTR [eax+edx+8]
	mov	DWORD PTR _axis$2[ebp], ecx
; Line 209
	imul	edx, DWORD PTR _n$[ebp], 12
	mov	eax, DWORD PTR _blend$[ebp]
	lea	ecx, DWORD PTR [eax+edx+88]
	mov	DWORD PTR _map$1[ebp], ecx
; Line 212
	mov	edx, DWORD PTR _axis$2[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _blend$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	mov	DWORD PTR [edx], eax
; Line 213
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _map$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _axis$2[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	DWORD PTR [eax+4], ecx
; Line 214
	mov	edx, DWORD PTR _map$1[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _map$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _axis$2[ebp]
	mov	edx, DWORD PTR [edx+eax*4-4]
	mov	DWORD PTR [ecx+8], edx
; Line 215
	jmp	SHORT $LN2@T1_Get_Mul
$LN1@T1_Get_Mul:
; Line 217
	mov	DWORD PTR _error$[ebp], 0
$LN4@T1_Get_Mul:
; Line 220
	mov	eax, DWORD PTR _error$[ebp]
; Line 221
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T1_Get_Multi_Master ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv211 = -445						; size = 1
_char_name$1 = -444					; size = 4
_glyph_name$2 = -440					; size = 4
_max_char$3 = -436					; size = 4
_min_char$4 = -432					; size = 4
_idx$5 = -428						; size = 4
_charcode$6 = -424					; size = 4
_memory$7 = -420					; size = 4
_i$8 = -416						; size = 4
_psaux$ = -412						; size = 4
_error$ = -404						; size = 4
_priv$ = -396						; size = 4
_type1$ = -392						; size = 4
_parser$ = -388						; size = 4
_loader$ = -380						; size = 376
_face$ = 8						; size = 4
_T1_Open_Face PROC
; File d:\mozilla\modules\freetype2\src\type1\t1load.c
; Line 2083
	push	ebp
	mov	ebp, esp
	sub	esp, 448				; 000001c0H
	push	edi
	lea	edi, DWORD PTR [ebp-448]
	mov	ecx, 112				; 00000070H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2086
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 132				; 00000084H
	mov	DWORD PTR _type1$[ebp], eax
; Line 2087
	mov	ecx, DWORD PTR _type1$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR _priv$[ebp], ecx
; Line 2090
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+488]
	mov	DWORD PTR _psaux$[ebp], eax
; Line 2093
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	lea	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_t1_init_loader
	add	esp, 8
; Line 2096
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+532], -1
; Line 2097
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+536], -1
; Line 2098
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+540], 0
; Line 2100
	mov	eax, DWORD PTR _priv$[ebp]
	mov	DWORD PTR [eax+112], 7
; Line 2101
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	DWORD PTR [ecx+116], 1
; Line 2102
	mov	edx, DWORD PTR _priv$[ebp]
	mov	DWORD PTR [edx+4], 4
; Line 2103
	mov	eax, DWORD PTR _priv$[ebp]
	mov	DWORD PTR [eax+180], 3932		; 00000f5cH
; Line 2104
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	DWORD PTR [ecx+108], 2596864		; 0027a000H
; Line 2106
	lea	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], edx
; Line 2110
	mov	eax, DWORD PTR _psaux$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_T1_New_Parser
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2111
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@T1_Open_Fa
; Line 2112
	jmp	$Exit$40
$LN31@T1_Open_Fa:
; Line 2115
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	lea	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_parse_dict
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2116
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN30@T1_Open_Fa
; Line 2117
	jmp	$Exit$40
$LN30@T1_Open_Fa:
; Line 2119
	mov	eax, DWORD PTR _psaux$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_T1_Get_Private_Dict
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2120
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN29@T1_Open_Fa
; Line 2121
	jmp	$Exit$40
$LN29@T1_Open_Fa:
; Line 2124
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	lea	eax, DWORD PTR _loader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_parse_dict
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2125
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@T1_Open_Fa
; Line 2126
	jmp	$Exit$40
$LN28@T1_Open_Fa:
; Line 2129
	mov	edx, DWORD PTR _priv$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	BYTE PTR [ecx+8], al
; Line 2135
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+528], 0
	je	SHORT $LN27@T1_Open_Fa
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	cmp	DWORD PTR [ecx+416], 0
	je	SHORT $LN27@T1_Open_Fa
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	eax, DWORD PTR [eax+416]
	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN27@T1_Open_Fa
; Line 2141
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	eax, DWORD PTR [edx+416]
	push	eax
	push	OFFSET $SG9706
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 2143
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	DWORD PTR [edx+416], 0
$LN27@T1_Open_Fa:
; Line 2149
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+528], 0
	je	SHORT $LN26@T1_Open_Fa
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN25@T1_Open_Fa
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN26@T1_Open_Fa
$LN25@T1_Open_Fa:
; Line 2150
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_T1_Done_Blend
	add	esp, 4
$LN26@T1_Open_Fa:
; Line 2153
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+528], 0
	je	SHORT $LN24@T1_Open_Fa
; Line 2158
	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN23@T1_Open_Fa
$LN22@T1_Open_Fa:
	mov	ecx, DWORD PTR _i$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$8[ebp], ecx
$LN23@T1_Open_Fa:
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	ecx, DWORD PTR _i$8[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN24@T1_Open_Fa
; Line 2159
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+528]
	imul	ecx, DWORD PTR _i$8[ebp], 12
	movzx	edx, BYTE PTR [eax+ecx+88]
	test	edx, edx
	jne	SHORT $LN20@T1_Open_Fa
; Line 2161
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_T1_Done_Blend
	add	esp, 4
; Line 2162
	jmp	SHORT $LN24@T1_Open_Fa
$LN20@T1_Open_Fa:
; Line 2164
	jmp	SHORT $LN22@T1_Open_Fa
$LN24@T1_Open_Fa:
; Line 2166
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+528], 0
	je	SHORT $LN19@T1_Open_Fa
; Line 2168
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+540], 0
	jbe	SHORT $LN18@T1_Open_Fa
; Line 2170
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$7[ebp], ecx
; Line 2173
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+540]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$7[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+544], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@T1_Open_Fa
; Line 2175
	push	OFFSET $SG9721
	call	_FT_Message
	add	esp, 4
; Line 2176
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+540], 0
; Line 2177
	jmp	$Exit$40
$LN18@T1_Open_Fa:
; Line 2181
	jmp	SHORT $LN16@T1_Open_Fa
$LN19@T1_Open_Fa:
; Line 2182
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+540], 0
$LN16@T1_Open_Fa:
; Line 2188
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR _loader$[ebp+152]
	mov	DWORD PTR [ecx+284], edx
; Line 2190
	cmp	DWORD PTR _loader$[ebp+328], 0
	je	SHORT $LN15@T1_Open_Fa
; Line 2192
	mov	DWORD PTR _loader$[ebp+328], 0
; Line 2193
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp+312]
	mov	DWORD PTR [eax+272], ecx
; Line 2194
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _loader$[ebp+316]
	mov	DWORD PTR [edx+260], eax
; Line 2195
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR _loader$[ebp+340]
	mov	DWORD PTR [ecx+276], edx
; Line 2196
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp+344]
	mov	DWORD PTR [eax+280], ecx
$LN15@T1_Open_Fa:
; Line 2199
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN34@T1_Open_Fa
	mov	BYTE PTR tv211[ebp], 1
	jmp	SHORT $LN35@T1_Open_Fa
$LN34@T1_Open_Fa:
	mov	BYTE PTR tv211[ebp], 0
$LN35@T1_Open_Fa:
	movzx	ecx, BYTE PTR tv211[ebp]
	test	ecx, ecx
	jne	SHORT $LN14@T1_Open_Fa
; Line 2200
	cmp	DWORD PTR _loader$[ebp+220], 0
	jne	SHORT $LN14@T1_Open_Fa
; Line 2202
	push	OFFSET $SG9727
	call	_FT_Message
	add	esp, 4
; Line 2203
	push	OFFSET $SG9728
	push	2203					; 0000089bH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$LN14@T1_Open_Fa:
; Line 2206
	mov	DWORD PTR _loader$[ebp+220], 0
; Line 2207
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _loader$[ebp+208]
	mov	DWORD PTR [edx+264], eax
; Line 2208
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR _loader$[ebp+232]
	mov	DWORD PTR [ecx+292], edx
; Line 2209
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp+236]
	mov	DWORD PTR [eax+296], ecx
; Line 2213
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _loader$[ebp+156]
	mov	DWORD PTR [edx+268], eax
; Line 2214
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR _loader$[ebp+180]
	mov	DWORD PTR [ecx+288], edx
; Line 2215
	mov	DWORD PTR _loader$[ebp+156], 0
; Line 2216
	mov	DWORD PTR _loader$[ebp+180], 0
; Line 2219
	mov	eax, DWORD PTR _type1$[ebp]
	cmp	DWORD PTR [eax+236], 1
	jne	$Exit$40
; Line 2230
	mov	DWORD PTR _min_char$4[ebp], 0
; Line 2231
	mov	DWORD PTR _max_char$3[ebp], 0
; Line 2233
	mov	DWORD PTR _charcode$6[ebp], 0
; Line 2234
	jmp	SHORT $LN11@T1_Open_Fa
$LN10@T1_Open_Fa:
	mov	ecx, DWORD PTR _charcode$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _charcode$6[ebp], ecx
$LN11@T1_Open_Fa:
	mov	edx, DWORD PTR _charcode$6[ebp]
	cmp	edx, DWORD PTR _loader$[ebp+116]
	jge	$LN9@T1_Open_Fa
; Line 2239
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	xor	edx, edx
	mov	eax, DWORD PTR _charcode$6[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 2240
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+256]
	mov	eax, DWORD PTR _charcode$6[ebp]
	mov	DWORD PTR [edx+eax*4], OFFSET $SG9741
; Line 2242
	mov	ecx, DWORD PTR _charcode$6[ebp]
	mov	edx, DWORD PTR _loader$[ebp+124]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _char_name$1[ebp], eax
; Line 2243
	cmp	DWORD PTR _char_name$1[ebp], 0
	je	$LN8@T1_Open_Fa
; Line 2244
	mov	DWORD PTR _idx$5[ebp], 0
	jmp	SHORT $LN7@T1_Open_Fa
$LN6@T1_Open_Fa:
	mov	ecx, DWORD PTR _idx$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$5[ebp], ecx
$LN7@T1_Open_Fa:
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _idx$5[ebp]
	cmp	eax, DWORD PTR [edx+284]
	jge	$LN8@T1_Open_Fa
; Line 2246
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	mov	eax, DWORD PTR _idx$5[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _glyph_name$2[ebp], ecx
; Line 2248
	mov	edx, DWORD PTR _glyph_name$2[ebp]
	push	edx
	mov	eax, DWORD PTR _char_name$1[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN4@T1_Open_Fa
; Line 2250
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _charcode$6[ebp]
	mov	cx, WORD PTR _idx$5[ebp]
	mov	WORD PTR [edx+eax*2], cx
; Line 2251
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR [edx+256]
	mov	ecx, DWORD PTR _charcode$6[ebp]
	mov	edx, DWORD PTR _glyph_name$2[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 2256
	mov	eax, DWORD PTR _glyph_name$2[ebp]
	push	eax
	push	OFFSET $SG9755
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@T1_Open_Fa
; Line 2258
	mov	ecx, DWORD PTR _charcode$6[ebp]
	cmp	ecx, DWORD PTR _min_char$4[ebp]
	jge	SHORT $LN2@T1_Open_Fa
; Line 2259
	mov	edx, DWORD PTR _charcode$6[ebp]
	mov	DWORD PTR _min_char$4[ebp], edx
$LN2@T1_Open_Fa:
; Line 2260
	mov	eax, DWORD PTR _charcode$6[ebp]
	cmp	eax, DWORD PTR _max_char$3[ebp]
	jl	SHORT $LN3@T1_Open_Fa
; Line 2261
	mov	ecx, DWORD PTR _charcode$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _max_char$3[ebp], ecx
$LN3@T1_Open_Fa:
; Line 2263
	jmp	SHORT $LN8@T1_Open_Fa
$LN4@T1_Open_Fa:
; Line 2265
	jmp	$LN6@T1_Open_Fa
$LN8@T1_Open_Fa:
; Line 2266
	jmp	$LN10@T1_Open_Fa
$LN9@T1_Open_Fa:
; Line 2268
	mov	edx, DWORD PTR _type1$[ebp]
	mov	eax, DWORD PTR _min_char$4[ebp]
	mov	DWORD PTR [edx+244], eax
; Line 2269
	mov	ecx, DWORD PTR _type1$[ebp]
	mov	edx, DWORD PTR _max_char$3[ebp]
	mov	DWORD PTR [ecx+248], edx
; Line 2270
	mov	eax, DWORD PTR _type1$[ebp]
	mov	ecx, DWORD PTR _loader$[ebp+96]
	mov	DWORD PTR [eax+240], ecx
$Exit$40:
; Line 2274
	lea	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_t1_done_loader
	add	esp, 4
; Line 2275
	mov	eax, DWORD PTR _error$[ebp]
; Line 2276
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@T1_Open_Fa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 448				; 000001c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN39@T1_Open_Fa:
	DD	2
	DD	$LN38@T1_Open_Fa
$LN38@T1_Open_Fa:
	DD	-380					; fffffe84H
	DD	376					; 00000178H
	DD	$LN36@T1_Open_Fa
	DD	-404					; fffffe6cH
	DD	4
	DD	$LN37@T1_Open_Fa
$LN37@T1_Open_Fa:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN36@T1_Open_Fa:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_T1_Open_Face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_MulFix_i386 PROC
; File d:\mozilla\modules\freetype2\include\internal\ftcalc.h
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 159
	mov	eax, DWORD PTR _a$[ebp]
; Line 160
	mov	edx, DWORD PTR _b$[ebp]
; Line 161
	imul	edx
; Line 162
	mov	ecx, edx
; Line 163
	sar	ecx, 31					; 0000001fH
; Line 164
	add	ecx, 32768				; 00008000H
; Line 165
	add	eax, ecx
; Line 166
	adc	edx, 0
; Line 167
	shr	eax, 16					; 00000010H
; Line 168
	shl	edx, 16					; 00000010H
; Line 169
	add	eax, edx
; Line 170
	mov	DWORD PTR _result$[ebp], eax
; Line 172
	mov	eax, DWORD PTR _result$[ebp]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_MulFix_i386 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dummy$ = -24						; size = 4
_tag$ = -12						; size = 2
_error$ = -4						; size = 4
_stream$ = 8						; size = 4
_header_string$ = 12					; size = 4
_header_length$ = 16					; size = 4
_check_type1_format PROC
; File d:\mozilla\modules\freetype2\src\type1\t1parse.c
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 107
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@check_type
; Line 108
	jmp	$Exit$12
$LN5@check_type:
; Line 110
	lea	ecx, DWORD PTR _dummy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_read_pfb_tag
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 111
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@check_type
; Line 112
	jmp	$Exit$12
$LN4@check_type:
; Line 117
	movzx	ecx, WORD PTR _tag$[ebp]
	cmp	ecx, 32769				; 00008001H
	je	SHORT $LN3@check_type
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@check_type
; Line 118
	jmp	SHORT $Exit$12
$LN3@check_type:
; Line 120
	mov	eax, DWORD PTR _header_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $Exit$12
; Line 122
	mov	DWORD PTR _error$[ebp], 0
; Line 124
	mov	edx, DWORD PTR _header_length$[ebp]
	push	edx
	mov	eax, DWORD PTR _header_string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@check_type
; Line 125
	push	OFFSET $SG8205
	push	125					; 0000007dH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
$LN1@check_type:
; Line 127
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
$Exit$12:
; Line 131
	mov	eax, DWORD PTR _error$[ebp]
; Line 132
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@check_type
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@check_type:
	DD	2
	DD	$LN10@check_type
$LN10@check_type:
	DD	-12					; fffffff4H
	DD	2
	DD	$LN8@check_type
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@check_type
$LN9@check_type:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN8@check_type:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
_check_type1_format ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -20						; size = 4
_tag$ = -16						; size = 2
_error$ = -8						; size = 4
_stream$ = 8						; size = 4
_atag$ = 12						; size = 4
_asize$ = 16						; size = 4
_read_pfb_tag PROC
; File d:\mozilla\modules\freetype2\src\type1\t1parse.c
; Line 73
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 79
	xor	eax, eax
	mov	ecx, DWORD PTR _atag$[ebp]
	mov	WORD PTR [ecx], ax
; Line 80
	mov	edx, DWORD PTR _asize$[ebp]
	mov	DWORD PTR [edx], 0
; Line 82
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	WORD PTR _tag$[ebp], ax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN4@read_pfb_t
; Line 84
	movzx	edx, WORD PTR _tag$[ebp]
	cmp	edx, 32769				; 00008001H
	je	SHORT $LN2@read_pfb_t
	movzx	eax, WORD PTR _tag$[ebp]
	cmp	eax, 32770				; 00008002H
	jne	SHORT $LN3@read_pfb_t
$LN2@read_pfb_t:
; Line 86
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadULongLE
	add	esp, 8
	mov	DWORD PTR _size$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@read_pfb_t
; Line 87
	mov	eax, DWORD PTR _asize$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@read_pfb_t:
; Line 90
	mov	edx, DWORD PTR _atag$[ebp]
	mov	ax, WORD PTR _tag$[ebp]
	mov	WORD PTR [edx], ax
$LN4@read_pfb_t:
; Line 93
	mov	eax, DWORD PTR _error$[ebp]
; Line 94
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@read_pfb_t
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@read_pfb_t:
	DD	1
	DD	$LN8@read_pfb_t
$LN8@read_pfb_t:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@read_pfb_t
$LN7@read_pfb_t:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_read_pfb_tag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_parser$ = 8						; size = 4
_T1_Finalize_Parser PROC
; File d:\mozilla\modules\freetype2\src\type1\t1parse.c
; Line 245
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 246
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _memory$[ebp], ecx
$LN7@T1_Finaliz:
; Line 250
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+84], 0
	xor	eax, eax
	jne	SHORT $LN7@T1_Finaliz
; Line 253
	mov	ecx, DWORD PTR _parser$[ebp]
	movzx	edx, BYTE PTR [ecx+93]
	test	edx, edx
	jne	SHORT $LN4@T1_Finaliz
$LN3@T1_Finaliz:
; Line 254
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+76], 0
	xor	ecx, ecx
	jne	SHORT $LN3@T1_Finaliz
$LN4@T1_Finaliz:
; Line 256
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 257
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T1_Finalize_Parser ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv236 = -81						; size = 1
_len$1 = -76						; size = 4
_test_cr$2 = -65					; size = 1
_pos_lf$3 = -64						; size = 4
_c$4 = -57						; size = 1
_limit$5 = -56						; size = 4
_cur$6 = -52						; size = 4
_tag$7 = -44						; size = 2
_start_pos$8 = -36					; size = 4
_size$ = -28						; size = 4
_error$ = -16						; size = 4
_memory$ = -8						; size = 4
_stream$ = -4						; size = 4
_parser$ = 8						; size = 4
_psaux$ = 12						; size = 4
_T1_Get_Private_Dict PROC
; File d:\mozilla\modules\freetype2\src\type1\t1parse.c
; Line 263
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 264
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 265
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _memory$[ebp], eax
; Line 266
	mov	DWORD PTR _error$[ebp], 0
; Line 270
	mov	ecx, DWORD PTR _parser$[ebp]
	movzx	edx, BYTE PTR [ecx+92]
	test	edx, edx
	je	$LN39@T1_Get_Pri
; Line 276
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _start_pos$8[ebp], eax
; Line 280
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+88], 0
$LN38@T1_Get_Pri:
; Line 283
	lea	edx, DWORD PTR _size$[ebp]
	push	edx
	lea	eax, DWORD PTR _tag$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_read_pfb_tag
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 284
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN36@T1_Get_Pri
; Line 285
	jmp	$Fail$50
$LN36@T1_Get_Pri:
; Line 287
	movzx	edx, WORD PTR _tag$7[ebp]
	cmp	edx, 32770				; 00008002H
	je	SHORT $LN35@T1_Get_Pri
; Line 288
	jmp	SHORT $LN37@T1_Get_Pri
$LN35@T1_Get_Pri:
; Line 290
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+88], ecx
; Line 292
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN34@T1_Get_Pri
; Line 293
	jmp	$Fail$50
$LN34@T1_Get_Pri:
; Line 294
	jmp	SHORT $LN38@T1_Get_Pri
$LN37@T1_Get_Pri:
; Line 298
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+88], 0
	jne	SHORT $LN33@T1_Get_Pri
; Line 301
	push	OFFSET $SG8285
	call	_FT_Message
	add	esp, 4
; Line 302
	push	OFFSET $SG8286
	push	302					; 0000012eH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 303
	jmp	$Fail$50
$LN33@T1_Get_Pri:
; Line 307
	mov	eax, DWORD PTR _start_pos$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN31@T1_Get_Pri
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+84], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN32@T1_Get_Pri
$LN31@T1_Get_Pri:
; Line 308
	jmp	$Fail$50
$LN32@T1_Get_Pri:
; Line 310
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+88], 0
$LN30@T1_Get_Pri:
; Line 313
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tag$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_read_pfb_tag
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 314
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN27@T1_Get_Pri
	movzx	eax, WORD PTR _tag$7[ebp]
	cmp	eax, 32770				; 00008002H
	je	SHORT $LN28@T1_Get_Pri
$LN27@T1_Get_Pri:
; Line 316
	mov	DWORD PTR _error$[ebp], 0
; Line 317
	jmp	SHORT $LN29@T1_Get_Pri
$LN28@T1_Get_Pri:
; Line 321
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _parser$[ebp]
	add	eax, DWORD PTR [ecx+88]
	push	eax
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN26@T1_Get_Pri
; Line 322
	jmp	$Fail$50
$LN26@T1_Get_Pri:
; Line 324
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+88], ecx
; Line 325
	jmp	SHORT $LN30@T1_Get_Pri
$LN29@T1_Get_Pri:
; Line 327
	jmp	$LN25@T1_Get_Pri
$LN39@T1_Get_Pri:
; Line 335
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _cur$6[ebp], ecx
; Line 336
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _cur$6[ebp]
	add	eax, DWORD PTR [edx+80]
	mov	DWORD PTR _limit$5[ebp], eax
$Again$51:
; Line 345
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$6[ebp]
	mov	cl, BYTE PTR [eax+edx]
	mov	BYTE PTR _c$4[ebp], cl
; Line 346
	movzx	edx, BYTE PTR _c$4[ebp]
	cmp	edx, 101				; 00000065H
	jne	SHORT $LN22@T1_Get_Pri
	mov	eax, DWORD PTR _cur$6[ebp]
	add	eax, 9
	cmp	eax, DWORD PTR _limit$5[ebp]
	jae	SHORT $LN22@T1_Get_Pri
; Line 352
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 101				; 00000065H
	jne	SHORT $LN22@T1_Get_Pri
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 120				; 00000078H
	jne	SHORT $LN22@T1_Get_Pri
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$6[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 101				; 00000065H
	jne	SHORT $LN22@T1_Get_Pri
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _cur$6[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 99					; 00000063H
	jne	SHORT $LN22@T1_Get_Pri
; Line 353
	jmp	SHORT $LN23@T1_Get_Pri
$LN22@T1_Get_Pri:
; Line 355
	mov	edx, DWORD PTR _cur$6[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$6[ebp], edx
; Line 356
	mov	eax, DWORD PTR _cur$6[ebp]
	cmp	eax, DWORD PTR _limit$5[ebp]
	jb	SHORT $LN20@T1_Get_Pri
; Line 359
	push	OFFSET $SG8312
	call	_FT_Message
	add	esp, 4
; Line 360
	push	OFFSET $SG8313
	push	360					; 00000168H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 361
	jmp	$Fail$50
$LN20@T1_Get_Pri:
; Line 363
	jmp	$Again$51
$LN23@T1_Get_Pri:
; Line 368
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx], eax
; Line 370
	mov	ecx, DWORD PTR _cur$6[ebp]
	add	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 372
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$6[ebp], ecx
; Line 373
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _limit$5[ebp], eax
$LN19@T1_Get_Pri:
; Line 375
	mov	ecx, DWORD PTR _cur$6[ebp]
	cmp	ecx, DWORD PTR _limit$5[ebp]
	jae	SHORT $LN18@T1_Get_Pri
; Line 377
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 101				; 00000065H
	jne	SHORT $LN17@T1_Get_Pri
	mov	esi, esp
	push	5
	push	OFFSET $SG8320
	mov	ecx, DWORD PTR _cur$6[ebp]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN17@T1_Get_Pri
; Line 378
	jmp	SHORT $Found$52
$LN17@T1_Get_Pri:
; Line 380
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 381
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN16@T1_Get_Pri
; Line 382
	jmp	SHORT $LN18@T1_Get_Pri
$LN16@T1_Get_Pri:
; Line 383
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 384
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$6[ebp], ecx
; Line 385
	jmp	SHORT $LN19@T1_Get_Pri
$LN18@T1_Get_Pri:
; Line 390
	mov	edx, DWORD PTR _limit$5[ebp]
	mov	DWORD PTR _cur$6[ebp], edx
; Line 391
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _parser$[ebp]
	add	ecx, DWORD PTR [edx+80]
	mov	DWORD PTR _limit$5[ebp], ecx
; Line 392
	jmp	$Again$51
$Found$52:
; Line 399
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _parser$[ebp]
	add	ecx, DWORD PTR [edx+80]
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 401
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 402
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$6[ebp], edx
; Line 403
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _limit$5[ebp], ecx
; Line 414
	mov	edx, DWORD PTR _limit$5[ebp]
	sub	edx, DWORD PTR _cur$6[ebp]
	mov	esi, esp
	push	edx
	push	10					; 0000000aH
	mov	eax, DWORD PTR _cur$6[ebp]
	push	eax
	call	DWORD PTR __imp__memchr
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pos_lf$3[ebp], eax
; Line 416
	cmp	DWORD PTR _pos_lf$3[ebp], 0
	je	SHORT $LN42@T1_Get_Pri
	mov	ecx, DWORD PTR _limit$5[ebp]
	sub	ecx, DWORD PTR _cur$6[ebp]
	mov	esi, esp
	push	ecx
	push	13					; 0000000dH
	mov	edx, DWORD PTR _cur$6[ebp]
	push	edx
	call	DWORD PTR __imp__memchr
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _pos_lf$3[ebp], eax
	ja	SHORT $LN42@T1_Get_Pri
	mov	BYTE PTR tv236[ebp], 0
	jmp	SHORT $LN43@T1_Get_Pri
$LN42@T1_Get_Pri:
	mov	BYTE PTR tv236[ebp], 1
$LN43@T1_Get_Pri:
	mov	al, BYTE PTR tv236[ebp]
	mov	BYTE PTR _test_cr$2[ebp], al
$LN15@T1_Get_Pri:
; Line 422
	mov	ecx, DWORD PTR _cur$6[ebp]
	cmp	ecx, DWORD PTR _limit$5[ebp]
	jae	SHORT $LN14@T1_Get_Pri
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN13@T1_Get_Pri
	mov	ecx, DWORD PTR _cur$6[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	je	SHORT $LN13@T1_Get_Pri
	movzx	eax, BYTE PTR _test_cr$2[ebp]
	test	eax, eax
	je	SHORT $LN12@T1_Get_Pri
	mov	ecx, DWORD PTR _cur$6[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN13@T1_Get_Pri
$LN12@T1_Get_Pri:
	mov	eax, DWORD PTR _cur$6[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN14@T1_Get_Pri
$LN13@T1_Get_Pri:
; Line 423
	mov	edx, DWORD PTR _cur$6[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$6[ebp], edx
	jmp	SHORT $LN15@T1_Get_Pri
$LN14@T1_Get_Pri:
; Line 424
	mov	eax, DWORD PTR _cur$6[ebp]
	cmp	eax, DWORD PTR _limit$5[ebp]
	jb	SHORT $LN11@T1_Get_Pri
; Line 427
	push	OFFSET $SG8330
	call	_FT_Message
	add	esp, 4
; Line 428
	push	OFFSET $SG8331
	push	428					; 000001acH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 429
	jmp	$Fail$50
$LN11@T1_Get_Pri:
; Line 432
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _cur$6[ebp]
	sub	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sub	ecx, edx
	mov	DWORD PTR _size$[ebp], ecx
; Line 434
	mov	edx, DWORD PTR _parser$[ebp]
	movzx	eax, BYTE PTR [edx+93]
	test	eax, eax
	je	SHORT $LN10@T1_Get_Pri
; Line 437
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+84], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@T1_Get_Pri
; Line 438
	jmp	$Fail$50
$LN9@T1_Get_Pri:
; Line 439
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+88], eax
; Line 441
	jmp	SHORT $LN8@T1_Get_Pri
$LN10@T1_Get_Pri:
; Line 443
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	BYTE PTR [ecx+94], 1
; Line 444
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR [edx+84], ecx
; Line 445
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+88], eax
; Line 446
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+76], 0
; Line 447
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+80], 0
$LN8@T1_Get_Pri:
; Line 459
	mov	eax, DWORD PTR _cur$6[ebp]
	add	eax, 3
	cmp	eax, DWORD PTR _limit$5[ebp]
	jae	$LN7@T1_Get_Pri
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$6[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	sub	ecx, 48					; 00000030H
	cmp	ecx, 10					; 0000000aH
	jb	SHORT $LN6@T1_Get_Pri
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$6[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	sub	edx, 97					; 00000061H
	cmp	edx, 6
	jb	SHORT $LN6@T1_Get_Pri
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sub	eax, 65					; 00000041H
	cmp	eax, 6
	jae	$LN7@T1_Get_Pri
$LN6@T1_Get_Pri:
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sub	eax, 48					; 00000030H
	cmp	eax, 10					; 0000000aH
	jb	SHORT $LN5@T1_Get_Pri
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sub	eax, 97					; 00000061H
	cmp	eax, 6
	jb	SHORT $LN5@T1_Get_Pri
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sub	eax, 65					; 00000041H
	cmp	eax, 6
	jae	$LN7@T1_Get_Pri
$LN5@T1_Get_Pri:
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sub	eax, 48					; 00000030H
	cmp	eax, 10					; 0000000aH
	jb	SHORT $LN4@T1_Get_Pri
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sub	eax, 97					; 00000061H
	cmp	eax, 6
	jb	SHORT $LN4@T1_Get_Pri
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sub	eax, 65					; 00000041H
	cmp	eax, 6
	jae	$LN7@T1_Get_Pri
$LN4@T1_Get_Pri:
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$6[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	sub	ecx, 48					; 00000030H
	cmp	ecx, 10					; 0000000aH
	jb	SHORT $LN3@T1_Get_Pri
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$6[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	sub	edx, 97					; 00000061H
	cmp	edx, 6
	jb	SHORT $LN3@T1_Get_Pri
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sub	eax, 65					; 00000041H
	cmp	eax, 6
	jae	SHORT $LN7@T1_Get_Pri
$LN3@T1_Get_Pri:
; Line 465
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _cur$6[ebp]
	mov	DWORD PTR [ecx], edx
; Line 470
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 471
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _len$1[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 474
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _len$1[ebp]
	mov	BYTE PTR [eax+ecx], 0
; Line 476
	jmp	SHORT $LN25@T1_Get_Pri
$LN7@T1_Get_Pri:
; Line 478
	mov	esi, esp
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@T1_Get_Pri:
; Line 482
	mov	esi, esp
	push	55665					; 0000d971H
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _psaux$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 484
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+88], 4
	jae	SHORT $LN1@T1_Get_Pri
; Line 487
	push	OFFSET $SG8358
	call	_FT_Message
	add	esp, 4
; Line 488
	push	OFFSET $SG8359
	push	488					; 000001e8H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 489
	jmp	SHORT $Fail$50
$LN1@T1_Get_Pri:
; Line 493
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	BYTE PTR [edx+ecx], 32			; 00000020H
; Line 494
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	BYTE PTR [edx+ecx], 32			; 00000020H
; Line 495
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	BYTE PTR [edx+ecx], 32			; 00000020H
; Line 496
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	BYTE PTR [eax+edx], 32			; 00000020H
; Line 498
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+4], edx
; Line 499
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax], edx
; Line 500
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _parser$[ebp]
	add	ecx, DWORD PTR [edx+88]
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+8], ecx
$Fail$50:
$Exit$53:
; Line 504
	mov	eax, DWORD PTR _error$[ebp]
; Line 505
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN49@T1_Get_Pri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN49@T1_Get_Pri:
	DD	4
	DD	$LN48@T1_Get_Pri
$LN48@T1_Get_Pri:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN44@T1_Get_Pri
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN45@T1_Get_Pri
	DD	-44					; ffffffd4H
	DD	2
	DD	$LN46@T1_Get_Pri
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN47@T1_Get_Pri
$LN47@T1_Get_Pri:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN46@T1_Get_Pri:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
$LN45@T1_Get_Pri:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN44@T1_Get_Pri:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_T1_Get_Private_Dict ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -32						; size = 4
_tag$ = -20						; size = 2
_error$ = -8						; size = 4
_parser$ = 8						; size = 4
_stream$ = 12						; size = 4
_memory$ = 16						; size = 4
_psaux$ = 20						; size = 4
_T1_New_Parser PROC
; File d:\mozilla\modules\freetype2\src\type1\t1parse.c
; Line 140
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 146
	mov	esi, esp
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 148
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+72], eax
; Line 149
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+80], 0
; Line 150
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+76], 0
; Line 151
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+88], 0
; Line 152
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+84], 0
; Line 153
	mov	edx, DWORD PTR _parser$[ebp]
	mov	BYTE PTR [edx+92], 0
; Line 154
	mov	eax, DWORD PTR _parser$[ebp]
	mov	BYTE PTR [eax+93], 0
; Line 155
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	BYTE PTR [ecx+94], 0
; Line 158
	push	14					; 0000000eH
	push	OFFSET $SG8218
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_check_type1_format
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 159
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@T1_New_Par
; Line 161
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 2
	je	SHORT $LN20@T1_New_Par
; Line 162
	jmp	$Exit$29
$LN20@T1_New_Par:
; Line 164
	push	10					; 0000000aH
	push	OFFSET $SG8222
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_check_type1_format
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 165
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@T1_New_Par
$LN18@T1_New_Par:
; Line 167
	mov	edx, 4
	imul	eax, edx, 39
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN17@T1_New_Par
	push	OFFSET $SG8228
	call	_FT_Message
	add	esp, 4
$LN17@T1_New_Par:
	xor	ecx, ecx
	jne	SHORT $LN18@T1_New_Par
; Line 168
	jmp	$Exit$29
$LN21@T1_New_Par:
; Line 190
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@T1_New_Par
; Line 191
	jmp	$Exit$29
$LN14@T1_New_Par:
; Line 193
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_read_pfb_tag
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 194
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@T1_New_Par
; Line 195
	jmp	$Exit$29
$LN13@T1_New_Par:
; Line 197
	movzx	eax, WORD PTR _tag$[ebp]
	cmp	eax, 32769				; 00008001H
	je	SHORT $LN12@T1_New_Par
; Line 201
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@T1_New_Par
; Line 202
	jmp	$Exit$29
$LN11@T1_New_Par:
; Line 203
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _size$[ebp], eax
; Line 205
	jmp	SHORT $LN10@T1_New_Par
$LN12@T1_New_Par:
; Line 206
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	BYTE PTR [ecx+92], 1
$LN10@T1_New_Par:
; Line 212
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jne	SHORT $LN9@T1_New_Par
; Line 214
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _stream$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+76], ecx
; Line 215
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+80], edx
; Line 216
	mov	eax, DWORD PTR _parser$[ebp]
	mov	BYTE PTR [eax+93], 1
; Line 219
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@T1_New_Par
; Line 220
	jmp	SHORT $Exit$29
$LN8@T1_New_Par:
; Line 222
	jmp	SHORT $LN7@T1_New_Par
$LN9@T1_New_Par:
; Line 226
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+76], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@T1_New_Par
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@T1_New_Par
$LN5@T1_New_Par:
; Line 227
	jmp	SHORT $Exit$29
$LN6@T1_New_Par:
; Line 228
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+80], ecx
$LN7@T1_New_Par:
; Line 231
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR [edx+4], ecx
; Line 232
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR [edx], ecx
; Line 233
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _parser$[ebp]
	add	eax, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+8], eax
$Exit$29:
; Line 236
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@T1_New_Par
	mov	eax, DWORD PTR _parser$[ebp]
	movzx	ecx, BYTE PTR [eax+93]
	test	ecx, ecx
	jne	SHORT $LN4@T1_New_Par
$LN3@T1_New_Par:
; Line 237
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+76], 0
	xor	eax, eax
	jne	SHORT $LN3@T1_New_Par
$LN4@T1_New_Par:
; Line 239
	mov	eax, DWORD PTR _error$[ebp]
; Line 240
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@T1_New_Par
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@T1_New_Par:
	DD	3
	DD	$LN27@T1_New_Par
$LN27@T1_New_Par:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN24@T1_New_Par
	DD	-20					; ffffffecH
	DD	2
	DD	$LN25@T1_New_Par
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN26@T1_New_Par
$LN26@T1_New_Par:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN25@T1_New_Par:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
$LN24@T1_New_Par:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_T1_New_Parser ENDP
_TEXT	ENDS
END
