; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\base\ftfstype.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

_DATA	SEGMENT
$SG7586	DB	'postscript-info', 00H
_DATA	ENDS
PUBLIC	_FT_Get_FSType_Flags
EXTRN	_FT_Get_Sfnt_Table:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_extra$1 = -24						; size = 2
__tmp_$2 = -16						; size = 4
_module$3 = -12						; size = 4
_service$4 = -8						; size = 4
_os2$ = -4						; size = 4
_face$ = 8						; size = 4
_FT_Get_FSType_Flags PROC
; File d:\mozilla\modules\freetype2\src\base\ftfstype.c
; Line 29
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 34
	cmp	DWORD PTR _face$[ebp], 0
	je	$LN8@FT_Get_FST
; Line 36
	mov	DWORD PTR _service$4[ebp], 0
$LN7@FT_Get_FST:
; Line 39
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _module$3[ebp], ecx
	mov	DWORD PTR __tmp_$2[ebp], 0
	mov	edx, DWORD PTR _module$3[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN4@FT_Get_FST
	mov	esi, esp
	push	OFFSET $SG7586
	mov	ecx, DWORD PTR _module$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _module$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$2[ebp], eax
$LN4@FT_Get_FST:
	mov	edx, DWORD PTR __tmp_$2[ebp]
	mov	DWORD PTR _service$4[ebp], edx
	xor	eax, eax
	jne	SHORT $LN7@FT_Get_FST
; Line 41
	cmp	DWORD PTR _service$4[ebp], 0
	je	SHORT $LN8@FT_Get_FST
	mov	ecx, DWORD PTR _service$4[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN8@FT_Get_FST
; Line 47
	mov	esi, esp
	lea	edx, DWORD PTR _extra$1[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _service$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN8@FT_Get_FST
	movzx	eax, WORD PTR _extra$1[ebp]
	test	eax, eax
	je	SHORT $LN8@FT_Get_FST
; Line 48
	mov	ax, WORD PTR _extra$1[ebp]
	jmp	SHORT $LN9@FT_Get_FST
$LN8@FT_Get_FST:
; Line 55
	push	2
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Get_Sfnt_Table
	add	esp, 8
	mov	DWORD PTR _os2$[ebp], eax
	cmp	DWORD PTR _os2$[ebp], 0
	je	SHORT $LN1@FT_Get_FST
	mov	edx, DWORD PTR _os2$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 65535				; 0000ffffH
	je	SHORT $LN1@FT_Get_FST
; Line 56
	mov	ecx, DWORD PTR _os2$[ebp]
	mov	ax, WORD PTR [ecx+8]
	jmp	SHORT $LN9@FT_Get_FST
$LN1@FT_Get_FST:
; Line 58
	xor	eax, eax
$LN9@FT_Get_FST:
; Line 59
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FT_Get_FST
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@FT_Get_FST:
	DD	1
	DD	$LN12@FT_Get_FST
$LN12@FT_Get_FST:
	DD	-24					; ffffffe8H
	DD	2
	DD	$LN11@FT_Get_FST
$LN11@FT_Get_FST:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	0
_FT_Get_FSType_Flags ENDP
_TEXT	ENDS
END
