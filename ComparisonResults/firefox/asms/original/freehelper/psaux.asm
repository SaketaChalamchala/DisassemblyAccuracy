; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\psaux\psaux.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_t1_decoder_funcs
PUBLIC	_ps_table_funcs
PUBLIC	_ps_parser_funcs
PUBLIC	_t1_builder_funcs
PUBLIC	_t1_cmap_standard_class_rec
PUBLIC	_t1_cmap_expert_class_rec
PUBLIC	_t1_cmap_custom_class_rec
PUBLIC	_t1_cmap_unicode_class_rec
PUBLIC	_afm_parser_funcs
PUBLIC	_t1_cmap_classes
PUBLIC	_psaux_module_class
CONST	SEGMENT
_ft_char_table DB 0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
_t1_decoder_funcs DD FLAT:_t1_decoder_init
	DD	FLAT:_t1_decoder_done
	DD	FLAT:_t1_decoder_parse_charstrings
_ps_table_funcs DD FLAT:_ps_table_new
	DD	FLAT:_ps_table_done
	DD	FLAT:_ps_table_add
	DD	FLAT:_ps_table_release
_ps_parser_funcs DD FLAT:_ps_parser_init
	DD	FLAT:_ps_parser_done
	DD	FLAT:_ps_parser_skip_spaces
	DD	FLAT:_ps_parser_skip_PS_token
	DD	FLAT:_ps_parser_to_int
	DD	FLAT:_ps_parser_to_fixed
	DD	FLAT:_ps_parser_to_bytes
	DD	FLAT:_ps_parser_to_coord_array
	DD	FLAT:_ps_parser_to_fixed_array
	DD	FLAT:_ps_parser_to_token
	DD	FLAT:_ps_parser_to_token_array
	DD	FLAT:_ps_parser_load_field
	DD	FLAT:_ps_parser_load_field_table
_t1_builder_funcs DD FLAT:_t1_builder_init
	DD	FLAT:_t1_builder_done
	DD	FLAT:_t1_builder_check_points
	DD	FLAT:_t1_builder_add_point
	DD	FLAT:_t1_builder_add_point1
	DD	FLAT:_t1_builder_add_contour
	DD	FLAT:_t1_builder_start_point
	DD	FLAT:_t1_builder_close_contour
_t1_cmap_standard_class_rec DD 020H
	DD	FLAT:_t1_cmap_standard_init
	DD	FLAT:_t1_cmap_std_done
	DD	FLAT:_t1_cmap_std_char_index
	DD	FLAT:_t1_cmap_std_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_t1_cmap_expert_class_rec DD 020H
	DD	FLAT:_t1_cmap_expert_init
	DD	FLAT:_t1_cmap_std_done
	DD	FLAT:_t1_cmap_std_char_index
	DD	FLAT:_t1_cmap_std_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_t1_cmap_custom_class_rec DD 01cH
	DD	FLAT:_t1_cmap_custom_init
	DD	FLAT:_t1_cmap_custom_done
	DD	FLAT:_t1_cmap_custom_char_index
	DD	FLAT:_t1_cmap_custom_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_t1_cmap_unicode_class_rec DD 018H
	DD	FLAT:_t1_cmap_unicode_init
	DD	FLAT:_t1_cmap_unicode_done
	DD	FLAT:_t1_cmap_unicode_char_index
	DD	FLAT:_t1_cmap_unicode_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_afm_parser_funcs DD FLAT:_afm_parser_init
	DD	FLAT:_afm_parser_done
	DD	FLAT:_afm_parser_parse
_t1_cmap_classes DD FLAT:_t1_cmap_standard_class_rec
	DD	FLAT:_t1_cmap_expert_class_rec
	DD	FLAT:_t1_cmap_custom_class_rec
	DD	FLAT:_t1_cmap_unicode_class_rec
_psaux_interface DD FLAT:_ps_table_funcs
	DD	FLAT:_ps_parser_funcs
	DD	FLAT:_t1_builder_funcs
	DD	FLAT:_t1_decoder_funcs
	DD	FLAT:_t1_decrypt
	DD	FLAT:_t1_cmap_classes
	DD	FLAT:_afm_parser_funcs
_psaux_module_class DD 00H
	DD	0cH
	DD	FLAT:$SG9057
	DD	020000H
	DD	020000H
	DD	FLAT:_psaux_interface
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
_afm_key_table DD FLAT:$SG10198
	DD	FLAT:$SG10199
	DD	FLAT:$SG10200
	DD	FLAT:$SG10201
	DD	FLAT:$SG10202
	DD	FLAT:$SG10203
	DD	FLAT:$SG10204
	DD	FLAT:$SG10205
	DD	FLAT:$SG10206
	DD	FLAT:$SG10207
	DD	FLAT:$SG10208
	DD	FLAT:$SG10209
	DD	FLAT:$SG10210
	DD	FLAT:$SG10211
	DD	FLAT:$SG10212
	DD	FLAT:$SG10213
	DD	FLAT:$SG10214
	DD	FLAT:$SG10215
	DD	FLAT:$SG10216
	DD	FLAT:$SG10217
	DD	FLAT:$SG10218
	DD	FLAT:$SG10219
	DD	FLAT:$SG10220
	DD	FLAT:$SG10221
	DD	FLAT:$SG10222
	DD	FLAT:$SG10223
	DD	FLAT:$SG10224
	DD	FLAT:$SG10225
	DD	FLAT:$SG10226
	DD	FLAT:$SG10227
	DD	FLAT:$SG10228
	DD	FLAT:$SG10229
	DD	FLAT:$SG10230
	DD	FLAT:$SG10231
	DD	FLAT:$SG10232
	DD	FLAT:$SG10233
	DD	FLAT:$SG10234
	DD	FLAT:$SG10235
	DD	FLAT:$SG10236
	DD	FLAT:$SG10237
	DD	FLAT:$SG10238
	DD	FLAT:$SG10239
	DD	FLAT:$SG10240
	DD	FLAT:$SG10241
	DD	FLAT:$SG10242
	DD	FLAT:$SG10243
	DD	FLAT:$SG10244
	DD	FLAT:$SG10245
	DD	FLAT:$SG10246
	DD	FLAT:$SG10247
	DD	FLAT:$SG10248
	DD	FLAT:$SG10249
	DD	FLAT:$SG10250
	DD	FLAT:$SG10251
	DD	FLAT:$SG10252
	DD	FLAT:$SG10253
	DD	FLAT:$SG10254
	DD	FLAT:$SG10255
	DD	FLAT:$SG10256
	DD	FLAT:$SG10257
	DD	FLAT:$SG10258
	DD	FLAT:$SG10259
	DD	FLAT:$SG10260
	DD	FLAT:$SG10261
	DD	FLAT:$SG10262
	DD	FLAT:$SG10263
	DD	FLAT:$SG10264
	DD	FLAT:$SG10265
	DD	FLAT:$SG10266
	DD	FLAT:$SG10267
	DD	FLAT:$SG10268
	DD	FLAT:$SG10269
	DD	FLAT:$SG10270
	DD	FLAT:$SG10271
_t1_args_count DD 00H
	DD	00H
	DD	02H
	DD	05H
	DD	04H
	DD	00H
	DD	01H
	DD	01H
	DD	04H
	DD	02H
	DD	02H
	DD	06H
	DD	04H
	DD	01H
	DD	01H
	DD	00H
	DD	02H
	DD	06H
	DD	02H
	DD	06H
	DD	02H
	DD	0ffffffffH
	DD	01H
	DD	00H
	DD	00H
	DD	02H
	DD	02H
CONST	ENDS
_DATA	SEGMENT
$SG10240 DB	'Notice', 00H
	ORG $+1
$SG10241 DB	'PCC', 00H
$SG10242 DB	'StartAxis', 00H
	ORG $+2
$SG10243 DB	'StartCharMetrics', 00H
	ORG $+3
$SG10244 DB	'StartComposites', 00H
$SG10245 DB	'StartDirection', 00H
	ORG $+1
$SG10246 DB	'StartFontMetrics', 00H
	ORG $+3
$SG10247 DB	'StartKernData', 00H
	ORG $+2
$SG10248 DB	'StartKernPairs', 00H
	ORG $+1
$SG10249 DB	'StartKernPairs0', 00H
$SG10250 DB	'StartKernPairs1', 00H
$SG10251 DB	'StartTrackKern', 00H
	ORG $+1
$SG10252 DB	'StdHW', 00H
	ORG $+2
$SG10253 DB	'StdVW', 00H
	ORG $+2
$SG9229	DB	't1operator_seac: invalid nested seac', 0aH, 00H
	ORG $+2
$SG10254 DB	'TrackKern', 00H
	ORG $+2
$SG9230	DB	'd:\mozilla\modules\freetype2\src\psaux\t1decode.c', 00H
	ORG $+2
$SG10255 DB	'UnderlinePosition', 00H
	ORG $+2
$SG10256 DB	'UnderlineThickness', 00H
	ORG $+1
$SG9232	DB	't1operator_seac: unexpected seac', 0aH, 00H
	ORG $+2
$SG10257 DB	'VV', 00H
	ORG $+1
$SG9233	DB	'd:\mozilla\modules\freetype2\src\psaux\t1decode.c', 00H
	ORG $+2
$SG10258 DB	'VVector', 00H
$SG10259 DB	'Version', 00H
$SG9235	DB	't1operator_seac: glyph names table not available in this'
	DB	' font', 0aH, 00H
	ORG $+1
$SG10260 DB	'W', 00H
	ORG $+2
$SG9236	DB	'd:\mozilla\modules\freetype2\src\psaux\t1decode.c', 00H
	ORG $+2
$SG10261 DB	'W0', 00H
	ORG $+1
$SG10262 DB	'W0X', 00H
$SG10263 DB	'W0Y', 00H
$SG10264 DB	'W1', 00H
	ORG $+1
$SG10265 DB	'W1X', 00H
$SG9241	DB	't1operator_seac: invalid seac character code arguments', 0aH
	DB	00H
$SG10266 DB	'W1Y', 00H
$SG9242	DB	'd:\mozilla\modules\freetype2\src\psaux\t1decode.c', 00H
	ORG $+2
$SG10267 DB	'WX', 00H
	ORG $+1
$SG10268 DB	'WY', 00H
	ORG $+1
$SG10269 DB	'Weight', 00H
	ORG $+1
$SG10270 DB	'WeightVector', 00H
	ORG $+3
$SG10271 DB	'XHeight', 00H
$SG10311 DB	'true', 00H
	ORG $+3
$SG9290	DB	'd:\mozilla\modules\freetype2\src\psaux\t1decode.c', 00H
	ORG $+2
$SG9291	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9297	DB	0aH, 'Start charstring', 0aH, 00H
	ORG $+1
$SG9309	DB	'd:\mozilla\modules\freetype2\src\psaux\t1decode.c', 00H
	ORG $+2
$SG9310	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9316	DB	' (%d)', 00H
	ORG $+2
$SG8300	DB	'ps_table_add: invalid index', 0aH, 00H
	ORG $+3
$SG8301	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG8303	DB	'ps_table_add: invalid length', 0aH, 00H
	ORG $+2
$SG8304	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG9340	DB	't1_decoder_parse_charstrings: invalid escape (12+EOF)', 0aH
	DB	00H
	ORG $+1
$SG9356	DB	't1_decoder_parse_charstrings: invalid escape (12+%d)', 0aH
	DB	00H
	ORG $+2
$SG9359	DB	't1_decoder_parse_charstrings: unexpected EOF in integer', 0aH
	DB	00H
	ORG $+3
$SG10391 DB	'd:\mozilla\modules\freetype2\src\psaux\afmparse.c', 00H
	ORG $+2
$SG9368	DB	't1_decoder_parse_charstrings: no `div'' after large inte'
	DB	'ger', 0aH, 00H
$SG9380	DB	't1_decoder_parse_charstrings: unexpected EOF in integer', 0aH
	DB	00H
	ORG $+3
$SG9387	DB	't1_decoder_parse_charstrings: invalid byte (%d)', 0aH, 00H
	ORG $+3
$SG9396	DB	't1_decoder_parse_charstrings: no `div'' after large inte'
	DB	'ger', 0aH, 00H
$SG10423 DB	'd:\mozilla\modules\freetype2\src\psaux\afmparse.c', 00H
	ORG $+2
$SG9399	DB	't1_decoder_parse_charstrings: stack overflow', 0aH, 00H
	ORG $+2
$SG9405	DB	' %ld', 00H
	ORG $+3
$SG9413	DB	' %ld', 00H
	ORG $+3
$SG9422	DB	' callothersubr', 0aH, 00H
$SG9439	DB	't1_decoder_parse_charstrings: unexpected flex end', 0aH, 00H
	ORG $+1
$SG8423	DB	'skip_string: missing closing delimiter `>''', 0aH, 00H
$SG8424	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG9449	DB	't1_decoder_parse_charstrings: missing flex start', 0aH, 00H
	ORG $+2
$SG10478 DB	'd:\mozilla\modules\freetype2\src\psaux\afmparse.c', 00H
	ORG $+2
$SG8439	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG9464	DB	't1_decoder_parse_charstrings: unexpected multiple master'
	DB	's operator', 0aH, 00H
$SG8440	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10501 DB	'd:\mozilla\modules\freetype2\src\psaux\afmparse.c', 00H
	ORG $+2
$SG9468	DB	't1_decoder_parse_charstrings: incorrect number of multip'
	DB	'le masters arguments', 0aH, 00H
	ORG $+2
$SG8456	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG8475	DB	'ps_parser_skip_PS_token: unexpected closing delimiter `>'
	DB	'''', 0aH, 00H
	ORG $+1
$SG10524 DB	'd:\mozilla\modules\freetype2\src\psaux\afmparse.c', 00H
	ORG $+2
$SG8476	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG8485	DB	'ps_parser_skip_PS_token: current token is `%c'' which is'
	DB	' self-delimiting', 0aH, '                         but invalid'
	DB	' at this point', 0aH, 00H
$SG8486	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG10535 DB	'd:\mozilla\modules\freetype2\src\psaux\afmparse.c', 00H
	ORG $+2
$SG10538 DB	'StartFontMetrics', 00H
	ORG $+3
$SG10539 DB	'd:\mozilla\modules\freetype2\src\psaux\afmparse.c', 00H
	ORG $+2
$SG10552 DB	'd:\mozilla\modules\freetype2\src\psaux\afmparse.c', 00H
	ORG $+2
$SG9534	DB	't1_decoder_parse_charstrings: invalid othersubr [%d %d]', 0aH
	DB	00H
	ORG $+3
$SG9533	DB	't1_decoder_parse_charstrings: unknown othersubr [%d %d],'
	DB	' wish me luck', 0aH, 00H
	ORG $+1
$SG9541	DB	'd:\mozilla\modules\freetype2\src\psaux\t1decode.c', 00H
	ORG $+2
$SG9542	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9565	DB	' endchar', 0aH, 00H
	ORG $+2
$SG9555	DB	't1_decoder_parse_charstrings: too much operands on the s'
	DB	'tack (seen %d, expected %d)', 0aH, 00H
	ORG $+3
$SG10600 DB	'!!!INVALID BASE:!!!', 00H
$SG9576	DB	'BuildCharArray = [ ', 00H
$SG9584	DB	'%d ', 00H
$SG9589	DB	']', 0aH, 00H
	ORG $+1
$SG9594	DB	0aH, 00H
	ORG $+2
$SG10622 DB	'!!!OVERFLOW:!!!', 00H
$SG9600	DB	' hsbw', 00H
	ORG $+2
$SG10628 DB	'!!!END OF DATA:!!!', 00H
	ORG $+1
$SG9612	DB	' sbw', 00H
	ORG $+3
$SG9619	DB	' closepath', 00H
	ORG $+1
$SG9627	DB	' hlineto', 00H
	ORG $+3
$SG9635	DB	' hmoveto', 00H
	ORG $+3
$SG9643	DB	' hvcurveto', 00H
	ORG $+1
$SG9651	DB	' rlineto', 00H
	ORG $+3
$SG9659	DB	' rmoveto', 00H
	ORG $+3
$SG9667	DB	' rrcurveto', 00H
	ORG $+1
$SG9675	DB	' vhcurveto', 00H
	ORG $+1
$SG9683	DB	' vlineto', 00H
	ORG $+3
$SG10712 DB	'!!!END OF DATA:!!!', 00H
	ORG $+1
$SG9690	DB	' vmoveto', 00H
	ORG $+3
$SG10717 DB	'!!!OVERFLOW:!!!', 00H
$SG10722 DB	'!!!UNDERFLOW:!!!', 00H
	ORG $+3
$SG9698	DB	' div', 00H
	ORG $+3
$SG9705	DB	' callsubr', 00H
	ORG $+2
$SG9711	DB	't1_decoder_parse_charstrings: invalid subrs index', 0aH, 00H
	ORG $+1
$SG9713	DB	't1_decoder_parse_charstrings: too many nested subrs', 0aH
	DB	00H
	ORG $+3
$SG8690	DB	'ps_parser_load_field: expected a name or string', 0aH, ' '
	DB	'                     but found token of type %d instead', 0aH
	DB	00H
	ORG $+2
$SG8691	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG9717	DB	't1_decoder_parse_charstrings: invoking empty subrs', 0aH
	DB	00H
$SG9723	DB	' pop', 00H
	ORG $+3
$SG8700	DB	'ps_parser_load_field: overwriting field %s', 0aH, 00H
$SG9726	DB	't1_decoder_parse_charstrings: no more operands for other'
	DB	'subr', 0aH, 00H
	ORG $+2
$SG9732	DB	' return', 00H
$SG9734	DB	't1_decoder_parse_charstrings: unexpected return', 0aH, 00H
	ORG $+3
$SG9740	DB	' dotsection', 00H
$SG8718	DB	'ps_parser_load_field: expected four integers in bounding'
	DB	' box', 0aH, 00H
	ORG $+2
$SG8719	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG9746	DB	' hstem', 00H
	ORG $+1
$SG9753	DB	' hstem3', 00H
$SG8734	DB	'first', 00H
	ORG $+2
$SG8735	DB	'second', 00H
	ORG $+1
$SG9760	DB	' vstem', 00H
	ORG $+1
$SG8736	DB	'third', 00H
	ORG $+2
$SG8737	DB	'fourth', 00H
	ORG $+1
$SG8739	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG9775	DB	' setcurrentpoint', 00H
	ORG $+3
$SG8738	DB	'ps_parser_load_field: expected %d integers in the %s sub'
	DB	'array', 0aH, '                      of /FontBBox in the /Blen'
	DB	'd dictionary', 0aH, 00H
	ORG $+1
$SG9767	DB	' vstem3', 00H
$SG8750	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG9781	DB	' opcode_15', 00H
	ORG $+1
$SG9783	DB	't1_decoder_parse_charstrings: unhandled opcode %d', 0aH, 00H
	ORG $+1
$SG9788	DB	0aH, 00H
	ORG $+2
$SG9793	DB	'..end..', 0aH, 0aH, 00H
	ORG $+2
$SG9794	DB	'd:\mozilla\modules\freetype2\src\psaux\t1decode.c', 00H
	ORG $+2
$SG9795	DB	'd:\mozilla\modules\freetype2\src\psaux\t1decode.c', 00H
	ORG $+2
$SG9828	DB	'postscript-cmaps', 00H
	ORG $+3
$SG8804	DB	'ps_parser_to_bytes: Missing starting delimiter `<''', 0aH
	DB	00H
$SG8805	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG9830	DB	't1_decoder_init: the `psnames'' module is not available', 0aH
	DB	00H
$SG9831	DB	'd:\mozilla\modules\freetype2\src\psaux\t1decode.c', 00H
	ORG $+2
$SG8808	DB	'ps_parser_to_bytes: Missing closing delimiter `>''', 0aH
	DB	00H
	ORG $+1
$SG8809	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG9854	DB	'd:\mozilla\modules\freetype2\src\psaux\t1cmap.c', 00H
$SG9855	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG8899	DB	't1_builder_add_contour: no outline to add points to', 0aH
	DB	00H
	ORG $+3
$SG8900	DB	'd:\mozilla\modules\freetype2\src\psaux\psobjs.c', 00H
$SG9940	DB	'd:\mozilla\modules\freetype2\src\psaux\t1cmap.c', 00H
$SG9941	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9946	DB	'd:\mozilla\modules\freetype2\src\psaux\t1cmap.c', 00H
$SG9947	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9057	DB	'psaux', 00H
	ORG $+2
$SG10198 DB	'Ascender', 00H
	ORG $+3
$SG10199 DB	'AxisLabel', 00H
	ORG $+2
$SG10200 DB	'AxisType', 00H
	ORG $+3
$SG10201 DB	'B', 00H
	ORG $+2
$SG10202 DB	'BlendAxisTypes', 00H
	ORG $+1
$SG10203 DB	'BlendDesignMap', 00H
	ORG $+1
$SG10204 DB	'BlendDesignPositions', 00H
	ORG $+3
$SG10205 DB	'C', 00H
	ORG $+2
$SG10206 DB	'CC', 00H
	ORG $+1
$SG10207 DB	'CH', 00H
	ORG $+1
$SG10208 DB	'CapHeight', 00H
	ORG $+2
$SG10209 DB	'CharWidth', 00H
	ORG $+2
$SG10210 DB	'CharacterSet', 00H
	ORG $+3
$SG10211 DB	'Characters', 00H
	ORG $+1
$SG10212 DB	'Descender', 00H
	ORG $+2
$SG10213 DB	'EncodingScheme', 00H
	ORG $+1
$SG10214 DB	'EndAxis', 00H
$SG10215 DB	'EndCharMetrics', 00H
	ORG $+1
$SG10216 DB	'EndComposites', 00H
	ORG $+2
$SG10217 DB	'EndDirection', 00H
	ORG $+3
$SG10218 DB	'EndFontMetrics', 00H
	ORG $+1
$SG10219 DB	'EndKernData', 00H
$SG10220 DB	'EndKernPairs', 00H
	ORG $+3
$SG10221 DB	'EndTrackKern', 00H
	ORG $+3
$SG10222 DB	'EscChar', 00H
$SG10223 DB	'FamilyName', 00H
	ORG $+1
$SG10224 DB	'FontBBox', 00H
	ORG $+3
$SG10225 DB	'FontName', 00H
	ORG $+3
$SG10226 DB	'FullName', 00H
	ORG $+3
$SG10227 DB	'IsBaseFont', 00H
	ORG $+1
$SG10228 DB	'IsCIDFont', 00H
	ORG $+2
$SG10229 DB	'IsFixedPitch', 00H
	ORG $+3
$SG10230 DB	'IsFixedV', 00H
	ORG $+3
$SG10231 DB	'ItalicAngle', 00H
$SG10232 DB	'KP', 00H
	ORG $+1
$SG10233 DB	'KPH', 00H
$SG10234 DB	'KPX', 00H
$SG10235 DB	'KPY', 00H
$SG10236 DB	'L', 00H
	ORG $+2
$SG10237 DB	'MappingScheme', 00H
	ORG $+2
$SG10238 DB	'MetricsSets', 00H
$SG10239 DB	'N', 00H
_DATA	ENDS
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp__qsort:PROC
EXTRN	_FT_DivFix:PROC
EXTRN	_FT_RoundFix:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_qalloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_FT_GlyphLoader_Rewind:PROC
EXTRN	_FT_GlyphLoader_CheckPoints:PROC
EXTRN	_FT_GlyphLoader_CheckSubGlyphs:PROC
EXTRN	_FT_GlyphLoader_Prepare:PROC
EXTRN	_FT_GlyphLoader_Add:PROC
EXTRN	_ft_module_get_service:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Panic:PROC
EXTRN	_FT_Throw:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -28						; size = 4
tv66 = -24						; size = 4
_token$1 = -20						; size = 4
_len$ = -12						; size = 4
_key$ = -4						; size = 4
_parser$ = 8						; size = 4
_n$ = 12						; size = 4
_end_section$ = 16					; size = 4
_afm_parser_skip_section PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 820
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN7@afm_parser:
; Line 825
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN10@afm_parser
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN11@afm_parser
$LN10@afm_parser:
	mov	DWORD PTR tv67[ebp], 0
$LN11@afm_parser:
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN4@afm_parser
; Line 827
	push	0
	push	1
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_afm_parser_next_key
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$[ebp], eax
; Line 828
	cmp	DWORD PTR _key$[ebp], 0
	jne	SHORT $LN5@afm_parser
; Line 829
	jmp	SHORT $Fail$15
$LN5@afm_parser:
; Line 830
	jmp	SHORT $LN7@afm_parser
$LN4@afm_parser:
; Line 832
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_afm_parser_next_key
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$[ebp], eax
	cmp	DWORD PTR _key$[ebp], 0
	je	SHORT $Fail$15
; Line 834
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_afm_tokenize
	add	esp, 8
	mov	DWORD PTR _token$1[ebp], eax
; Line 837
	mov	ecx, DWORD PTR _token$1[ebp]
	cmp	ecx, DWORD PTR _end_section$[ebp]
	je	SHORT $LN1@afm_parser
	cmp	DWORD PTR _token$1[ebp], 20		; 00000014H
	jne	SHORT $LN2@afm_parser
$LN1@afm_parser:
; Line 838
	xor	eax, eax
	jmp	SHORT $LN8@afm_parser
$LN2@afm_parser:
; Line 839
	jmp	SHORT $LN4@afm_parser
$Fail$15:
; Line 842
	push	OFFSET $SG10524
	push	842					; 0000034aH
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
$LN8@afm_parser:
; Line 843
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@afm_parser
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@afm_parser:
	DD	1
	DD	$LN13@afm_parser
$LN13@afm_parser:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN12@afm_parser
$LN12@afm_parser:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_afm_parser_skip_section ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -24						; size = 4
_len$ = -16						; size = 4
_key$ = -8						; size = 4
_error$ = -4						; size = 4
_parser$ = 8						; size = 4
_afm_parse_kern_data PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 776
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN11@afm_parse_:
; Line 782
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_afm_parser_next_key
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$[ebp], eax
	cmp	DWORD PTR _key$[ebp], 0
	je	SHORT $Fail$19
; Line 784
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_afm_tokenize
	add	esp, 8
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR tv72[ebp]
	sub	ecx, 20					; 00000014H
	mov	DWORD PTR tv72[ebp], ecx
	cmp	DWORD PTR tv72[ebp], 55			; 00000037H
	ja	SHORT $LN1@afm_parse_
	mov	edx, DWORD PTR tv72[ebp]
	movzx	eax, BYTE PTR $LN14@afm_parse_[edx]
	jmp	DWORD PTR $LN18@afm_parse_[eax*4]
$LN7@afm_parse_:
; Line 787
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_afm_parse_track_kern
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 788
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@afm_parse_
; Line 789
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN12@afm_parse_
$LN6@afm_parse_:
; Line 790
	jmp	SHORT $LN8@afm_parse_
$LN5@afm_parse_:
; Line 794
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_afm_parse_kern_pairs
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 795
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@afm_parse_
; Line 796
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN12@afm_parse_
$LN4@afm_parse_:
; Line 797
	jmp	SHORT $LN8@afm_parse_
$LN3@afm_parse_:
; Line 801
	xor	eax, eax
	jmp	SHORT $LN12@afm_parse_
$LN2@afm_parse_:
; Line 804
	jmp	SHORT $LN8@afm_parse_
$LN1@afm_parse_:
; Line 807
	jmp	SHORT $Fail$19
$LN8@afm_parse_:
; Line 809
	jmp	$LN11@afm_parse_
$Fail$19:
; Line 812
	push	OFFSET $SG10501
	push	812					; 0000032cH
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
$LN12@afm_parse_:
; Line 813
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@afm_parse_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@afm_parse_:
	DD	1
	DD	$LN16@afm_parse_
$LN16@afm_parse_:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN15@afm_parse_
$LN15@afm_parse_:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN18@afm_parse_:
	DD	$LN3@afm_parse_
	DD	$LN5@afm_parse_
	DD	$LN7@afm_parse_
	DD	$LN2@afm_parse_
	DD	$LN1@afm_parse_
$LN14@afm_parse_:
	DB	0
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	1
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_afm_parse_kern_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv171 = -104						; size = 4
tv91 = -100						; size = 4
_shared_vals$1 = -92					; size = 32
_r$2 = -56						; size = 4
_token$3 = -52						; size = 4
_error$4 = -44						; size = 4
_memory$5 = -36						; size = 4
_n$ = -32						; size = 4
_len$ = -24						; size = 4
_key$ = -16						; size = 4
_kp$ = -12						; size = 4
_fi$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_parser$ = 8						; size = 4
_afm_parse_kern_pairs PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 685
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 686
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _fi$[ebp], ecx
; Line 690
	mov	DWORD PTR _n$[ebp], -1
; Line 693
	mov	edx, DWORD PTR _fi$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_afm_parser_read_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@afm_parse_
; Line 694
	jmp	$Fail$27
$LN15@afm_parse_:
; Line 696
	mov	ecx, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN12@afm_parse_
; Line 698
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$5[ebp], eax
; Line 702
	lea	ecx, DWORD PTR _error$4[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _memory$5[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+36], eax
	cmp	DWORD PTR _error$4[ebp], 0
	je	SHORT $LN12@afm_parse_
; Line 703
	mov	eax, DWORD PTR _error$4[ebp]
	jmp	$LN16@afm_parse_
$LN12@afm_parse_:
; Line 706
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_afm_parser_next_key
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$[ebp], eax
	cmp	DWORD PTR _key$[ebp], 0
	je	$Fail$27
; Line 708
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_afm_tokenize
	add	esp, 8
	mov	DWORD PTR _token$3[ebp], eax
; Line 711
	mov	ecx, DWORD PTR _token$3[ebp]
	mov	DWORD PTR tv91[ebp], ecx
	mov	edx, DWORD PTR tv91[ebp]
	sub	edx, 20					; 00000014H
	mov	DWORD PTR tv91[ebp], edx
	cmp	DWORD PTR tv91[ebp], 55			; 00000037H
	ja	$LN1@afm_parse_
	mov	eax, DWORD PTR tv91[ebp]
	movzx	ecx, BYTE PTR $LN20@afm_parse_[eax]
	jmp	DWORD PTR $LN26@afm_parse_[ecx*4]
$LN8@afm_parse_:
; Line 721
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
; Line 723
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jl	SHORT $LN7@afm_parse_
; Line 724
	jmp	$Fail$27
$LN7@afm_parse_:
; Line 726
	mov	edx, DWORD PTR _n$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _fi$[ebp]
	add	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _kp$[ebp], edx
; Line 728
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	DWORD PTR _shared_vals$1[ebp+edx], 5
; Line 729
	mov	eax, 8
	shl	eax, 0
	mov	DWORD PTR _shared_vals$1[ebp+eax], 5
; Line 730
	mov	ecx, 8
	shl	ecx, 1
	mov	DWORD PTR _shared_vals$1[ebp+ecx], 3
; Line 731
	mov	edx, 8
	imul	eax, edx, 3
	mov	DWORD PTR _shared_vals$1[ebp+eax], 3
; Line 732
	push	4
	lea	ecx, DWORD PTR _shared_vals$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_afm_parser_read_vals
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$2[ebp], eax
; Line 733
	cmp	DWORD PTR _r$2[ebp], 3
	jge	SHORT $LN6@afm_parse_
; Line 734
	jmp	$Fail$27
$LN6@afm_parse_:
; Line 736
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _kp$[ebp]
	mov	eax, DWORD PTR _shared_vals$1[ebp+ecx+4]
	mov	DWORD PTR [edx], eax
; Line 737
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _kp$[ebp]
	mov	eax, DWORD PTR _shared_vals$1[ebp+ecx+4]
	mov	DWORD PTR [edx+4], eax
; Line 738
	cmp	DWORD PTR _token$3[ebp], 37		; 00000025H
	jne	SHORT $LN5@afm_parse_
; Line 740
	mov	ecx, DWORD PTR _kp$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 741
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _kp$[ebp]
	mov	ecx, DWORD PTR _shared_vals$1[ebp+edx+4]
	mov	DWORD PTR [eax+12], ecx
; Line 743
	jmp	SHORT $LN4@afm_parse_
$LN5@afm_parse_:
; Line 745
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _kp$[ebp]
	mov	ecx, DWORD PTR _shared_vals$1[ebp+edx+4]
	mov	DWORD PTR [eax+8], ecx
; Line 747
	cmp	DWORD PTR _token$3[ebp], 34		; 00000022H
	jne	SHORT $LN18@afm_parse_
	cmp	DWORD PTR _r$2[ebp], 4
	jne	SHORT $LN18@afm_parse_
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _shared_vals$1[ebp+eax+4]
	mov	DWORD PTR tv171[ebp], ecx
	jmp	SHORT $LN19@afm_parse_
$LN18@afm_parse_:
	mov	DWORD PTR tv171[ebp], 0
$LN19@afm_parse_:
	mov	edx, DWORD PTR _kp$[ebp]
	mov	eax, DWORD PTR tv171[ebp]
	mov	DWORD PTR [edx+12], eax
$LN4@afm_parse_:
; Line 750
	jmp	SHORT $LN9@afm_parse_
$LN3@afm_parse_:
; Line 755
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 758
	mov	esi, esp
	push	OFFSET _afm_compare_kern_pairs
	push	16					; 00000010H
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	DWORD PTR __imp__qsort
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 759
	xor	eax, eax
	jmp	SHORT $LN16@afm_parse_
$LN2@afm_parse_:
; Line 762
	jmp	SHORT $LN9@afm_parse_
$LN1@afm_parse_:
; Line 765
	jmp	SHORT $Fail$27
$LN9@afm_parse_:
; Line 767
	jmp	$LN12@afm_parse_
$Fail$27:
; Line 770
	push	OFFSET $SG10478
	push	770					; 00000302H
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
$LN16@afm_parse_:
; Line 771
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@afm_parse_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN25@afm_parse_:
	DD	3
	DD	$LN24@afm_parse_
$LN24@afm_parse_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN21@afm_parse_
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN22@afm_parse_
	DD	-92					; ffffffa4H
	DD	32					; 00000020H
	DD	$LN23@afm_parse_
$LN23@afm_parse_:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
$LN22@afm_parse_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN21@afm_parse_:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
	npad	2
$LN26@afm_parse_:
	DD	$LN3@afm_parse_
	DD	$LN8@afm_parse_
	DD	$LN2@afm_parse_
	DD	$LN1@afm_parse_
$LN20@afm_parse_:
	DB	0
	DB	0
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	3
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
_afm_parse_kern_pairs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_index2$ = -16						; size = 4
_index1$ = -12						; size = 4
_kp2$ = -8						; size = 4
_kp1$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_afm_compare_kern_pairs PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 666
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 667
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _kp1$[ebp], eax
; Line 668
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _kp2$[ebp], ecx
; Line 670
	mov	edx, DWORD PTR _kp1$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _kp1$[ebp]
	or	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _index1$[ebp], eax
; Line 671
	mov	edx, DWORD PTR _kp2$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _kp2$[ebp]
	or	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _index2$[ebp], eax
; Line 674
	mov	edx, DWORD PTR _index1$[ebp]
	cmp	edx, DWORD PTR _index2$[ebp]
	jbe	SHORT $LN4@afm_compar
; Line 675
	mov	eax, 1
	jmp	SHORT $LN5@afm_compar
	jmp	SHORT $LN5@afm_compar
$LN4@afm_compar:
; Line 676
	mov	eax, DWORD PTR _index1$[ebp]
	cmp	eax, DWORD PTR _index2$[ebp]
	jae	SHORT $LN2@afm_compar
; Line 677
	or	eax, -1
	jmp	SHORT $LN5@afm_compar
; Line 678
	jmp	SHORT $LN5@afm_compar
$LN2@afm_compar:
; Line 679
	xor	eax, eax
$LN5@afm_compar:
; Line 680
	mov	esp, ebp
	pop	ebp
	ret	0
_afm_compare_kern_pairs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv91 = -100						; size = 4
_shared_vals$1 = -92					; size = 40
_error$2 = -44						; size = 4
_memory$3 = -36						; size = 4
_n$ = -32						; size = 4
_len$ = -24						; size = 4
_key$ = -16						; size = 4
_tk$ = -12						; size = 4
_fi$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_parser$ = 8						; size = 4
_afm_parse_track_kern PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 587
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 588
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _fi$[ebp], ecx
; Line 592
	mov	DWORD PTR _n$[ebp], -1
; Line 595
	mov	edx, DWORD PTR _fi$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_afm_parser_read_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@afm_parse_
; Line 596
	jmp	$Fail$23
$LN13@afm_parse_:
; Line 598
	mov	ecx, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN10@afm_parse_
; Line 600
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$3[ebp], eax
; Line 604
	lea	ecx, DWORD PTR _error$2[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	push	0
	push	20					; 00000014H
	mov	ecx, DWORD PTR _memory$3[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+28], eax
	cmp	DWORD PTR _error$2[ebp], 0
	je	SHORT $LN10@afm_parse_
; Line 605
	mov	eax, DWORD PTR _error$2[ebp]
	jmp	$LN14@afm_parse_
$LN10@afm_parse_:
; Line 608
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_afm_parser_next_key
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$[ebp], eax
	cmp	DWORD PTR _key$[ebp], 0
	je	$Fail$23
; Line 613
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_afm_tokenize
	add	esp, 8
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR tv91[ebp]
	sub	ecx, 20					; 00000014H
	mov	DWORD PTR tv91[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 55			; 00000037H
	ja	$LN1@afm_parse_
	mov	edx, DWORD PTR tv91[ebp]
	movzx	eax, BYTE PTR $LN16@afm_parse_[edx]
	jmp	DWORD PTR $LN22@afm_parse_[eax*4]
$LN6@afm_parse_:
; Line 616
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
; Line 618
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx+32]
	jl	SHORT $LN5@afm_parse_
; Line 619
	jmp	$Fail$23
$LN5@afm_parse_:
; Line 621
	imul	ecx, DWORD PTR _n$[ebp], 20
	mov	edx, DWORD PTR _fi$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _tk$[ebp], ecx
; Line 623
	mov	eax, 8
	imul	ecx, eax, 0
	mov	DWORD PTR _shared_vals$1[ebp+ecx], 3
; Line 624
	mov	edx, 8
	shl	edx, 0
	mov	DWORD PTR _shared_vals$1[ebp+edx], 2
; Line 625
	mov	eax, 8
	shl	eax, 1
	mov	DWORD PTR _shared_vals$1[ebp+eax], 2
; Line 626
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	DWORD PTR _shared_vals$1[ebp+edx], 2
; Line 627
	mov	eax, 8
	shl	eax, 2
	mov	DWORD PTR _shared_vals$1[ebp+eax], 2
; Line 628
	push	5
	lea	ecx, DWORD PTR _shared_vals$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_afm_parser_read_vals
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	je	SHORT $LN4@afm_parse_
; Line 629
	jmp	SHORT $Fail$23
$LN4@afm_parse_:
; Line 631
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tk$[ebp]
	mov	eax, DWORD PTR _shared_vals$1[ebp+ecx+4]
	mov	DWORD PTR [edx], eax
; Line 632
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _tk$[ebp]
	mov	eax, DWORD PTR _shared_vals$1[ebp+ecx+4]
	mov	DWORD PTR [edx+4], eax
; Line 633
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _tk$[ebp]
	mov	eax, DWORD PTR _shared_vals$1[ebp+ecx+4]
	mov	DWORD PTR [edx+8], eax
; Line 634
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _tk$[ebp]
	mov	ecx, DWORD PTR _shared_vals$1[ebp+edx+4]
	mov	DWORD PTR [eax+12], ecx
; Line 635
	mov	edx, 8
	shl	edx, 2
	mov	eax, DWORD PTR _tk$[ebp]
	mov	ecx, DWORD PTR _shared_vals$1[ebp+edx+4]
	mov	DWORD PTR [eax+16], ecx
; Line 637
	jmp	SHORT $LN7@afm_parse_
$LN3@afm_parse_:
; Line 642
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 643
	xor	eax, eax
	jmp	SHORT $LN14@afm_parse_
$LN2@afm_parse_:
; Line 646
	jmp	SHORT $LN7@afm_parse_
$LN1@afm_parse_:
; Line 649
	jmp	SHORT $Fail$23
$LN7@afm_parse_:
; Line 651
	jmp	$LN10@afm_parse_
$Fail$23:
; Line 654
	push	OFFSET $SG10423
	push	654					; 0000028eH
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
$LN14@afm_parse_:
; Line 655
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@afm_parse_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@afm_parse_:
	DD	3
	DD	$LN20@afm_parse_
$LN20@afm_parse_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@afm_parse_
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN18@afm_parse_
	DD	-92					; ffffffa4H
	DD	40					; 00000028H
	DD	$LN19@afm_parse_
$LN19@afm_parse_:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
$LN18@afm_parse_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN17@afm_parse_:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
	npad	2
$LN22@afm_parse_:
	DD	$LN3@afm_parse_
	DD	$LN6@afm_parse_
	DD	$LN2@afm_parse_
	DD	$LN1@afm_parse_
$LN16@afm_parse_:
	DB	0
	DB	0
	DB	3
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
_afm_parse_track_kern ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -12						; size = 8
_parser$ = 8						; size = 4
_aint$ = 12						; size = 4
_afm_parser_read_int PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 568
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 572
	mov	DWORD PTR _val$[ebp], 3
; Line 574
	push	1
	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_afm_parser_read_vals
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN2@afm_parser
; Line 576
	mov	edx, DWORD PTR _aint$[ebp]
	mov	eax, DWORD PTR _val$[ebp+4]
	mov	DWORD PTR [edx], eax
; Line 578
	xor	eax, eax
	jmp	SHORT $LN3@afm_parser
; Line 580
	jmp	SHORT $LN3@afm_parser
$LN2@afm_parser:
; Line 581
	push	OFFSET $SG10391
	push	581					; 00000245H
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
$LN3@afm_parser:
; Line 582
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@afm_parser
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@afm_parser:
	DD	1
	DD	$LN6@afm_parser
$LN6@afm_parser:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN5@afm_parser
$LN5@afm_parser:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
_afm_parser_read_int ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$ = -4						; size = 4
_key$ = 8						; size = 4
_len$ = 12						; size = 4
_afm_tokenize PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 504
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 508
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN9@afm_tokeni
$LN8@afm_tokeni:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN9@afm_tokeni:
	cmp	DWORD PTR _n$[ebp], 74			; 0000004aH
	jge	SHORT $LN7@afm_tokeni
; Line 510
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _afm_key_table[ecx*4]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _key$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN6@afm_tokeni
; Line 512
	jmp	SHORT $LN5@afm_tokeni
$LN4@afm_tokeni:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN5@afm_tokeni:
	cmp	DWORD PTR _n$[ebp], 74			; 0000004aH
	jge	SHORT $LN6@afm_tokeni
; Line 514
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _afm_key_table[ecx*4]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _key$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN2@afm_tokeni
; Line 515
	mov	eax, 75					; 0000004bH
	jmp	SHORT $LN10@afm_tokeni
$LN2@afm_tokeni:
; Line 517
	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _afm_key_table[edx*4]
	push	eax
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@afm_tokeni
; Line 518
	mov	eax, DWORD PTR _n$[ebp]
	jmp	SHORT $LN10@afm_tokeni
$LN1@afm_tokeni:
; Line 519
	jmp	SHORT $LN4@afm_tokeni
$LN6@afm_tokeni:
; Line 521
	jmp	$LN8@afm_tokeni
$LN7@afm_tokeni:
; Line 523
	mov	eax, 75					; 0000004bH
$LN10@afm_tokeni:
; Line 524
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_afm_tokenize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -12						; size = 4
_ch$1 = -8						; size = 4
_str$ = -4						; size = 4
_stream$ = 8						; size = 4
_afm_stream_read_string PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 162
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 166
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_afm_stream_skip_spaces
	add	esp, 4
; Line 167
	mov	ecx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [ecx+12], 2
	jl	SHORT $LN8@afm_stream
; Line 168
	xor	eax, eax
	jmp	SHORT $LN9@afm_stream
$LN8@afm_stream:
; Line 170
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	DWORD PTR _str$[ebp], eax
$LN7@afm_stream:
; Line 173
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN6@afm_stream
; Line 175
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN11@afm_stream
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv79[ebp], ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN12@afm_stream
$LN11@afm_stream:
	mov	DWORD PTR tv79[ebp], -1
$LN12@afm_stream:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _ch$1[ebp], edx
; Line 178
	cmp	DWORD PTR _ch$1[ebp], 13		; 0000000dH
	je	SHORT $LN4@afm_stream
	cmp	DWORD PTR _ch$1[ebp], 10		; 0000000aH
	jne	SHORT $LN5@afm_stream
$LN4@afm_stream:
; Line 180
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+12], 2
; Line 181
	jmp	SHORT $LN6@afm_stream
	jmp	SHORT $LN3@afm_stream
$LN5@afm_stream:
; Line 183
	cmp	DWORD PTR _ch$1[ebp], -1
	je	SHORT $LN1@afm_stream
	cmp	DWORD PTR _ch$1[ebp], 26		; 0000001aH
	jne	SHORT $LN3@afm_stream
$LN1@afm_stream:
; Line 185
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+12], 3
; Line 186
	jmp	SHORT $LN6@afm_stream
$LN3@afm_stream:
; Line 188
	jmp	SHORT $LN7@afm_stream
$LN6@afm_stream:
; Line 190
	mov	eax, DWORD PTR _str$[ebp]
$LN9@afm_stream:
; Line 191
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_afm_stream_read_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -12						; size = 4
_ch$1 = -8						; size = 4
_str$ = -4						; size = 4
_stream$ = 8						; size = 4
_afm_stream_read_one PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 125
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_afm_stream_skip_spaces
	add	esp, 4
; Line 126
	mov	ecx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [ecx+12], 1
	jl	SHORT $LN13@afm_stream
; Line 127
	xor	eax, eax
	jmp	$LN14@afm_stream
$LN13@afm_stream:
; Line 129
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	DWORD PTR _str$[ebp], eax
$LN12@afm_stream:
; Line 131
	mov	ecx, 1
	test	ecx, ecx
	je	$LN11@afm_stream
; Line 133
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN16@afm_stream
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv79[ebp], ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN17@afm_stream
$LN16@afm_stream:
	mov	DWORD PTR tv79[ebp], -1
$LN17@afm_stream:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _ch$1[ebp], edx
; Line 136
	cmp	DWORD PTR _ch$1[ebp], 32		; 00000020H
	je	SHORT $LN9@afm_stream
	cmp	DWORD PTR _ch$1[ebp], 9
	jne	SHORT $LN10@afm_stream
$LN9@afm_stream:
; Line 137
	jmp	SHORT $LN11@afm_stream
	jmp	SHORT $LN8@afm_stream
$LN10@afm_stream:
; Line 138
	cmp	DWORD PTR _ch$1[ebp], 13		; 0000000dH
	je	SHORT $LN6@afm_stream
	cmp	DWORD PTR _ch$1[ebp], 10		; 0000000aH
	jne	SHORT $LN7@afm_stream
$LN6@afm_stream:
; Line 140
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+12], 2
; Line 141
	jmp	SHORT $LN11@afm_stream
	jmp	SHORT $LN8@afm_stream
$LN7@afm_stream:
; Line 143
	cmp	DWORD PTR _ch$1[ebp], 59		; 0000003bH
	jne	SHORT $LN4@afm_stream
; Line 145
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+12], 1
; Line 146
	jmp	SHORT $LN11@afm_stream
	jmp	SHORT $LN8@afm_stream
$LN4@afm_stream:
; Line 148
	cmp	DWORD PTR _ch$1[ebp], -1
	je	SHORT $LN1@afm_stream
	cmp	DWORD PTR _ch$1[ebp], 26		; 0000001aH
	jne	SHORT $LN8@afm_stream
$LN1@afm_stream:
; Line 150
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+12], 3
; Line 151
	jmp	SHORT $LN11@afm_stream
$LN8@afm_stream:
; Line 153
	jmp	$LN12@afm_stream
$LN11@afm_stream:
; Line 155
	mov	eax, DWORD PTR _str$[ebp]
$LN14@afm_stream:
; Line 156
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_afm_stream_read_one ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -8						; size = 4
_ch$ = -4						; size = 4
_stream$ = 8						; size = 4
_afm_stream_skip_spaces PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 94
	mov	DWORD PTR _ch$[ebp], 0
; Line 97
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+12], 1
	jl	SHORT $LN10@afm_stream
; Line 98
	mov	eax, 59					; 0000003bH
	jmp	$LN12@afm_stream
$LN10@afm_stream:
; Line 100
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN9@afm_stream
; Line 102
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN14@afm_stream
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN15@afm_stream
$LN14@afm_stream:
	mov	DWORD PTR tv76[ebp], -1
$LN15@afm_stream:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _ch$[ebp], edx
; Line 103
	cmp	DWORD PTR _ch$[ebp], 32			; 00000020H
	je	SHORT $LN8@afm_stream
	cmp	DWORD PTR _ch$[ebp], 9
	je	SHORT $LN8@afm_stream
; Line 104
	jmp	SHORT $LN9@afm_stream
$LN8@afm_stream:
; Line 105
	jmp	SHORT $LN10@afm_stream
$LN9@afm_stream:
; Line 107
	cmp	DWORD PTR _ch$[ebp], 13			; 0000000dH
	je	SHORT $LN6@afm_stream
	cmp	DWORD PTR _ch$[ebp], 10			; 0000000aH
	jne	SHORT $LN7@afm_stream
$LN6@afm_stream:
; Line 108
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+12], 2
	jmp	SHORT $LN5@afm_stream
$LN7@afm_stream:
; Line 109
	cmp	DWORD PTR _ch$[ebp], 59			; 0000003bH
	jne	SHORT $LN4@afm_stream
; Line 110
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+12], 1
	jmp	SHORT $LN5@afm_stream
$LN4@afm_stream:
; Line 111
	cmp	DWORD PTR _ch$[ebp], -1
	je	SHORT $LN1@afm_stream
	cmp	DWORD PTR _ch$[ebp], 26			; 0000001aH
	jne	SHORT $LN5@afm_stream
$LN1@afm_stream:
; Line 112
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+12], 3
$LN5@afm_stream:
; Line 114
	mov	eax, DWORD PTR _ch$[ebp]
$LN12@afm_stream:
; Line 115
	mov	esp, ebp
	pop	ebp
	ret	0
_afm_stream_skip_spaces ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_psnames$ = -8						; size = 4
_face$ = -4						; size = 4
_unicodes$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_t1_cmap_unicode_char_next PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 332
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 333
	mov	eax, DWORD PTR _unicodes$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 334
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+484]
	mov	DWORD PTR _psnames$[ebp], eax
; Line 337
	mov	esi, esp
	mov	ecx, DWORD PTR _pchar_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _unicodes$[ebp]
	push	edx
	mov	eax, DWORD PTR _psnames$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 338
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_cmap_unicode_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_psnames$ = -8						; size = 4
_face$ = -4						; size = 4
_unicodes$ = 8						; size = 4
_char_code$ = 12					; size = 4
_t1_cmap_unicode_char_index PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 320
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 321
	mov	eax, DWORD PTR _unicodes$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 322
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+484]
	mov	DWORD PTR _psnames$[ebp], eax
; Line 325
	mov	esi, esp
	mov	ecx, DWORD PTR _char_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _unicodes$[ebp]
	push	edx
	mov	eax, DWORD PTR _psnames$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 326
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_cmap_unicode_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_face$ = -4						; size = 4
_unicodes$ = 8						; size = 4
_t1_cmap_unicode_done PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 307
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 308
	mov	eax, DWORD PTR _unicodes$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 309
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$[ebp], eax
$LN3@t1_cmap_un:
; Line 312
	mov	ecx, DWORD PTR _unicodes$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _unicodes$[ebp]
	mov	DWORD PTR [ecx+20], 0
	xor	edx, edx
	jne	SHORT $LN3@t1_cmap_un
; Line 313
	mov	eax, DWORD PTR _unicodes$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 314
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_cmap_unicode_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_psnames$ = -12						; size = 4
_memory$ = -8						; size = 4
_face$ = -4						; size = 4
_unicodes$ = 8						; size = 4
_pointer$ = 12						; size = 4
_t1_cmap_unicode_init PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 288
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 289
	mov	eax, DWORD PTR _unicodes$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 290
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$[ebp], eax
; Line 291
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+484]
	mov	DWORD PTR _psnames$[ebp], edx
; Line 293
	mov	eax, DWORD PTR _pointer$[ebp]
	mov	DWORD PTR _pointer$[ebp], eax
; Line 301
	mov	esi, esp
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	push	0
	push	OFFSET _psaux_get_glyph_name
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+416]
	push	eax
	mov	ecx, DWORD PTR _unicodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _psnames$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 302
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_cmap_unicode_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_idx$ = 12						; size = 4
_psaux_get_glyph_name PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 280
	push	ebp
	mov	ebp, esp
; Line 281
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
; Line 282
	pop	ebp
	ret	0
_psaux_get_glyph_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_char_code$ = -8					; size = 4
_result$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_t1_cmap_custom_char_next PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 230
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 231
	mov	DWORD PTR _result$[ebp], 0
; Line 232
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _char_code$[ebp], ecx
; Line 235
	mov	edx, DWORD PTR _char_code$[ebp]
	add	edx, 1
	mov	DWORD PTR _char_code$[ebp], edx
; Line 237
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _char_code$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN5@t1_cmap_cu
; Line 238
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _char_code$[ebp], eax
$LN5@t1_cmap_cu:
; Line 240
	jmp	SHORT $LN4@t1_cmap_cu
$LN3@t1_cmap_cu:
	mov	ecx, DWORD PTR _char_code$[ebp]
	add	ecx, 1
	mov	DWORD PTR _char_code$[ebp], ecx
$LN4@t1_cmap_cu:
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _cmap$[ebp]
	add	eax, DWORD PTR [ecx+20]
	cmp	DWORD PTR _char_code$[ebp], eax
	jae	SHORT $LN2@t1_cmap_cu
; Line 242
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _char_code$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _result$[ebp], edx
; Line 243
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN1@t1_cmap_cu
; Line 244
	jmp	SHORT $Exit$8
$LN1@t1_cmap_cu:
; Line 245
	jmp	SHORT $LN3@t1_cmap_cu
$LN2@t1_cmap_cu:
; Line 247
	mov	DWORD PTR _char_code$[ebp], 0
$Exit$8:
; Line 250
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 251
	mov	eax, DWORD PTR _result$[ebp]
; Line 252
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_cmap_custom_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_t1_cmap_custom_char_index PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 215
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 216
	mov	DWORD PTR _result$[ebp], 0
; Line 220
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _char_code$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN1@t1_cmap_cu
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _cmap$[ebp]
	add	eax, DWORD PTR [ecx+20]
	cmp	DWORD PTR _char_code$[ebp], eax
	jae	SHORT $LN1@t1_cmap_cu
; Line 221
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _char_code$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _result$[ebp], edx
$LN1@t1_cmap_cu:
; Line 223
	mov	eax, DWORD PTR _result$[ebp]
; Line 224
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_cmap_custom_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_t1_cmap_custom_done PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 205
	push	ebp
	mov	ebp, esp
; Line 206
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 207
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 208
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 209
	pop	ebp
	ret	0
_t1_cmap_custom_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_encoding$ = -8						; size = 4
_face$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pointer$ = 12						; size = 4
_t1_cmap_custom_init PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 185
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 186
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 187
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 372				; 00000174H
	mov	DWORD PTR _encoding$[ebp], edx
; Line 189
	mov	eax, DWORD PTR _pointer$[ebp]
	mov	DWORD PTR _pointer$[ebp], eax
; Line 192
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+16], eax
; Line 193
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 194
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _encoding$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+24], ecx
$LN8@t1_cmap_cu:
; Line 196
	mov	edx, DWORD PTR _cmap$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN7@t1_cmap_cu
	push	OFFSET $SG9940
	push	196					; 000000c4H
	push	OFFSET $SG9941
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN7@t1_cmap_cu:
	xor	eax, eax
	jne	SHORT $LN8@t1_cmap_cu
$LN4@t1_cmap_cu:
; Line 197
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jle	SHORT $LN3@t1_cmap_cu
	push	OFFSET $SG9946
	push	197					; 000000c5H
	push	OFFSET $SG9947
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@t1_cmap_cu:
	xor	ecx, ecx
	jne	SHORT $LN4@t1_cmap_cu
; Line 199
	xor	eax, eax
; Line 200
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_cmap_custom_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_pointer$ = 12						; size = 4
_t1_cmap_expert_init PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 151
	push	ebp
	mov	ebp, esp
; Line 152
	mov	eax, DWORD PTR _pointer$[ebp]
	mov	DWORD PTR _pointer$[ebp], eax
; Line 155
	push	1
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	call	_t1_cmap_std_init
	add	esp, 8
; Line 156
	xor	eax, eax
; Line 157
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t1_cmap_expert_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_pointer$ = 12						; size = 4
_t1_cmap_standard_init PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 125
	push	ebp
	mov	ebp, esp
; Line 126
	mov	eax, DWORD PTR _pointer$[ebp]
	mov	DWORD PTR _pointer$[ebp], eax
; Line 129
	push	0
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	call	_t1_cmap_std_init
	add	esp, 8
; Line 130
	xor	eax, eax
; Line 131
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t1_cmap_standard_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_char_code$ = -8					; size = 4
_result$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_t1_cmap_std_char_next PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 102
	mov	DWORD PTR _result$[ebp], 0
; Line 103
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR _char_code$[ebp], ecx
$LN3@t1_cmap_st:
; Line 106
	cmp	DWORD PTR _char_code$[ebp], 256		; 00000100H
	jae	SHORT $LN2@t1_cmap_st
; Line 108
	mov	edx, DWORD PTR _char_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$[ebp]
	push	eax
	call	_t1_cmap_std_char_index
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
; Line 109
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN1@t1_cmap_st
; Line 110
	jmp	SHORT $Exit$6
$LN1@t1_cmap_st:
; Line 112
	mov	ecx, DWORD PTR _char_code$[ebp]
	add	ecx, 1
	mov	DWORD PTR _char_code$[ebp], ecx
; Line 113
	jmp	SHORT $LN3@t1_cmap_st
$LN2@t1_cmap_st:
; Line 114
	mov	DWORD PTR _char_code$[ebp], 0
$Exit$6:
; Line 117
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	eax, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR [edx], eax
; Line 118
	mov	eax, DWORD PTR _result$[ebp]
; Line 119
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_cmap_std_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gname$1 = -20						; size = 4
_glyph_name$2 = -16					; size = 4
_n$3 = -12						; size = 4
_code$4 = -8						; size = 4
_result$ = -4						; size = 4
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_t1_cmap_std_char_index PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 66
	mov	DWORD PTR _result$[ebp], 0
; Line 69
	cmp	DWORD PTR _char_code$[ebp], 256		; 00000100H
	jae	$LN5@t1_cmap_st
; Line 76
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _char_code$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _code$4[ebp], eax
; Line 77
	mov	esi, esp
	mov	ecx, DWORD PTR _code$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _glyph_name$2[ebp], eax
; Line 80
	mov	DWORD PTR _n$3[ebp], 0
	jmp	SHORT $LN4@t1_cmap_st
$LN3@t1_cmap_st:
	mov	ecx, DWORD PTR _n$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$3[ebp], ecx
$LN4@t1_cmap_st:
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _n$3[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jae	SHORT $LN5@t1_cmap_st
; Line 82
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _n$3[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _gname$1[ebp], ecx
; Line 86
	cmp	DWORD PTR _gname$1[ebp], 0
	je	SHORT $LN1@t1_cmap_st
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _gname$1[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _glyph_name$2[ebp]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	edx, ecx
	jne	SHORT $LN1@t1_cmap_st
	mov	edx, DWORD PTR _glyph_name$2[ebp]
	push	edx
	mov	eax, DWORD PTR _gname$1[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@t1_cmap_st
; Line 88
	mov	ecx, DWORD PTR _n$3[ebp]
	mov	DWORD PTR _result$[ebp], ecx
; Line 89
	jmp	SHORT $LN5@t1_cmap_st
$LN1@t1_cmap_st:
; Line 91
	jmp	SHORT $LN3@t1_cmap_st
$LN5@t1_cmap_st:
; Line 94
	mov	eax, DWORD PTR _result$[ebp]
; Line 95
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_cmap_std_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_t1_cmap_std_done PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 54
	push	ebp
	mov	ebp, esp
; Line 55
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 56
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 57
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 58
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 59
	pop	ebp
	ret	0
_t1_cmap_std_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -12						; size = 4
_psnames$ = -8						; size = 4
_face$ = -4						; size = 4
_cmap$ = 8						; size = 4
_is_expert$ = 12					; size = 4
_t1_cmap_std_init PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1cmap.c
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 38
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 39
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+484]
	mov	DWORD PTR _psnames$[ebp], eax
; Line 42
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+416]
	mov	DWORD PTR [ecx+24], eax
; Line 43
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+420]
	mov	DWORD PTR [ecx+28], eax
; Line 44
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _psnames$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
; Line 46
	cmp	DWORD PTR _is_expert$[ebp], 0
	je	SHORT $LN7@t1_cmap_st
	mov	ecx, DWORD PTR _psnames$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN8@t1_cmap_st
$LN7@t1_cmap_st:
	mov	eax, DWORD PTR _psnames$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv76[ebp], ecx
$LN8@t1_cmap_st:
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR [edx+16], eax
$LN4@t1_cmap_st:
; Line 48
	mov	ecx, DWORD PTR _cmap$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN3@t1_cmap_st
	push	OFFSET $SG9854
	push	48					; 00000030H
	push	OFFSET $SG9855
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@t1_cmap_st:
	xor	edx, edx
	jne	SHORT $LN4@t1_cmap_st
; Line 49
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_cmap_std_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_subg$1 = -60						; size = 4
_loader$2 = -56						; size = 4
_glyph$3 = -52						; size = 4
_face$ = -48						; size = 4
_advance$ = -40						; size = 8
_left_bearing$ = -24					; size = 8
_achar_index$ = -12					; size = 4
_bchar_index$ = -8					; size = 4
_error$ = -4						; size = 4
_decoder$ = 8						; size = 4
_asb$ = 12						; size = 4
_adx$ = 16						; size = 4
_ady$ = 20						; size = 4
_bchar$ = 24						; size = 4
_achar$ = 28						; size = 4
_t1operator_seac PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1decode.c
; Line 191
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 201
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$[ebp], ecx
; Line 205
	mov	edx, DWORD PTR _decoder$[ebp]
	movzx	eax, BYTE PTR [edx+1496]
	test	eax, eax
	je	SHORT $LN11@t1operator
; Line 207
	push	OFFSET $SG9229
	call	_FT_Message
	add	esp, 4
; Line 208
	push	OFFSET $SG9230
	push	208					; 000000d0H
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
	jmp	$LN12@t1operator
$LN11@t1operator:
; Line 211
	mov	ecx, DWORD PTR _decoder$[ebp]
	movzx	edx, BYTE PTR [ecx+70]
	test	edx, edx
	je	SHORT $LN10@t1operator
; Line 213
	push	OFFSET $SG9232
	call	_FT_Message
	add	esp, 4
; Line 214
	push	OFFSET $SG9233
	push	214					; 000000d6H
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
	jmp	$LN12@t1operator
$LN10@t1operator:
; Line 218
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _adx$[ebp]
	add	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _adx$[ebp], ecx
; Line 224
	mov	edx, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [edx+1356], 0
	jne	SHORT $LN9@t1operator
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN9@t1operator
; Line 230
	push	OFFSET $SG9235
	call	_FT_Message
	add	esp, 4
; Line 231
	push	OFFSET $SG9236
	push	231					; 000000e7H
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
	jmp	$LN12@t1operator
$LN9@t1operator:
; Line 235
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN8@t1operator
; Line 238
	mov	ecx, DWORD PTR _bchar$[ebp]
	mov	DWORD PTR _bchar_index$[ebp], ecx
; Line 239
	mov	edx, DWORD PTR _achar$[ebp]
	mov	DWORD PTR _achar_index$[ebp], edx
; Line 241
	jmp	SHORT $LN7@t1operator
$LN8@t1operator:
; Line 244
	mov	eax, DWORD PTR _bchar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_t1_lookup_glyph_by_stdcharcode
	add	esp, 8
	mov	DWORD PTR _bchar_index$[ebp], eax
; Line 245
	mov	edx, DWORD PTR _achar$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_t1_lookup_glyph_by_stdcharcode
	add	esp, 8
	mov	DWORD PTR _achar_index$[ebp], eax
$LN7@t1operator:
; Line 248
	cmp	DWORD PTR _bchar_index$[ebp], 0
	jl	SHORT $LN5@t1operator
	cmp	DWORD PTR _achar_index$[ebp], 0
	jge	SHORT $LN6@t1operator
$LN5@t1operator:
; Line 251
	push	OFFSET $SG9241
	call	_FT_Message
	add	esp, 4
; Line 252
	push	OFFSET $SG9242
	push	252					; 000000fcH
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
	jmp	$LN12@t1operator
$LN6@t1operator:
; Line 257
	mov	ecx, DWORD PTR _decoder$[ebp]
	movzx	edx, BYTE PTR [ecx+69]
	test	edx, edx
	je	$LN4@t1operator
; Line 259
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _glyph$3[ebp], ecx
; Line 260
	mov	edx, DWORD PTR _glyph$3[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _loader$2[ebp], ecx
; Line 265
	push	2
	mov	edx, DWORD PTR _loader$2[ebp]
	push	edx
	call	_FT_GlyphLoader_CheckSubGlyphs
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 266
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@t1operator
; Line 267
	jmp	$Exit$18
$LN3@t1operator:
; Line 269
	mov	eax, DWORD PTR _loader$2[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _subg$1[ebp], ecx
; Line 272
	mov	edx, DWORD PTR _subg$1[ebp]
	mov	eax, DWORD PTR _bchar_index$[ebp]
	mov	DWORD PTR [edx], eax
; Line 274
	mov	ecx, 514				; 00000202H
	mov	edx, DWORD PTR _subg$1[ebp]
	mov	WORD PTR [edx+4], cx
; Line 275
	mov	eax, DWORD PTR _subg$1[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 276
	mov	ecx, DWORD PTR _subg$1[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 277
	mov	edx, DWORD PTR _subg$1[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _subg$1[ebp], edx
; Line 280
	mov	eax, DWORD PTR _subg$1[ebp]
	mov	ecx, DWORD PTR _achar_index$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 281
	mov	edx, 2
	mov	eax, DWORD PTR _subg$1[ebp]
	mov	WORD PTR [eax+4], dx
; Line 282
	mov	ecx, DWORD PTR _adx$[ebp]
	sub	ecx, DWORD PTR _asb$[ebp]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _subg$1[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 283
	mov	eax, DWORD PTR _ady$[ebp]
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _subg$1[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 286
	mov	edx, DWORD PTR _glyph$3[ebp]
	mov	DWORD PTR [edx+128], 2
; Line 287
	mov	eax, DWORD PTR _glyph$3[ebp]
	mov	ecx, DWORD PTR _loader$2[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+132], edx
; Line 288
	mov	eax, DWORD PTR _glyph$3[ebp]
	mov	DWORD PTR [eax+72], 1668246896		; 636f6d70H
; Line 290
	mov	ecx, DWORD PTR _loader$2[ebp]
	mov	DWORD PTR [ecx+84], 2
; Line 291
	jmp	$Exit$18
$LN4@t1operator:
; Line 297
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_FT_GlyphLoader_Prepare
	add	esp, 4
; Line 300
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	BYTE PTR [ecx+1496], 1
; Line 301
	mov	edx, DWORD PTR _bchar_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_t1_decoder_parse_glyph
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 302
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	BYTE PTR [ecx+1496], 0
; Line 303
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@t1operator
; Line 304
	jmp	$Exit$18
$LN2@t1operator:
; Line 309
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [edx+36]
	mov	DWORD PTR _left_bearing$[ebp], eax
	mov	DWORD PTR _left_bearing$[ebp+4], ecx
; Line 310
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR _advance$[ebp], eax
	mov	DWORD PTR _advance$[ebp+4], ecx
; Line 312
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 313
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 315
	mov	ecx, DWORD PTR _adx$[ebp]
	sub	ecx, DWORD PTR _asb$[ebp]
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 316
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _ady$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 322
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	BYTE PTR [edx+1496], 1
; Line 323
	mov	eax, DWORD PTR _achar_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_t1_decoder_parse_glyph
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 324
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	BYTE PTR [edx+1496], 0
; Line 325
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@t1operator
; Line 326
	jmp	SHORT $Exit$18
$LN1@t1operator:
; Line 331
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _left_bearing$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _left_bearing$[ebp+4]
	mov	DWORD PTR [eax+36], edx
; Line 332
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _advance$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _advance$[ebp+4]
	mov	DWORD PTR [eax+44], edx
; Line 334
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 335
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [ecx+28], 0
$Exit$18:
; Line 338
	mov	eax, DWORD PTR _error$[ebp]
$LN12@t1operator:
; Line 339
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@t1operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@t1operator:
	DD	2
	DD	$LN16@t1operator
$LN16@t1operator:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN14@t1operator
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN15@t1operator
$LN15@t1operator:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN14@t1operator:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_t1operator_seac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_name$1 = -16						; size = 4
_psnames$ = -12						; size = 4
_glyph_name$ = -8					; size = 4
_n$ = -4						; size = 4
_decoder$ = 8						; size = 4
_charcode$ = 12						; size = 4
_t1_lookup_glyph_by_stdcharcode PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1decode.c
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 135
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+1348]
	mov	DWORD PTR _psnames$[ebp], ecx
; Line 139
	cmp	DWORD PTR _charcode$[ebp], 0
	jl	SHORT $LN5@t1_lookup_
	cmp	DWORD PTR _charcode$[ebp], 255		; 000000ffH
	jle	SHORT $LN6@t1_lookup_
$LN5@t1_lookup_:
; Line 140
	or	eax, -1
	jmp	$LN7@t1_lookup_
$LN6@t1_lookup_:
; Line 143
	mov	edx, DWORD PTR _psnames$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _charcode$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _psnames$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _glyph_name$[ebp], eax
; Line 145
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@t1_lookup_
$LN3@t1_lookup_:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN4@t1_lookup_:
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+1352]
	jae	SHORT $LN2@t1_lookup_
; Line 147
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+1356]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _name$1[ebp], edx
; Line 152
	cmp	DWORD PTR _name$1[ebp], 0
	je	SHORT $LN1@t1_lookup_
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _name$1[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _glyph_name$[ebp]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	eax, edx
	jne	SHORT $LN1@t1_lookup_
	mov	eax, DWORD PTR _glyph_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$1[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@t1_lookup_
; Line 153
	mov	eax, DWORD PTR _n$[ebp]
	jmp	SHORT $LN7@t1_lookup_
$LN1@t1_lookup_:
; Line 154
	jmp	SHORT $LN3@t1_lookup_
$LN2@t1_lookup_:
; Line 156
	or	eax, -1
$LN7@t1_lookup_:
; Line 157
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_lookup_glyph_by_stdcharcode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv128 = -12						; size = 4
_key$ = -8						; size = 4
_stream$ = -4						; size = 4
_parser$ = 8						; size = 4
_line$ = 12						; size = 1
_len$ = 16						; size = 4
_afm_parser_next_key PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 447
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 448
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 449
	mov	DWORD PTR _key$[ebp], 0
; Line 452
	movzx	edx, BYTE PTR _line$[ebp]
	test	edx, edx
	je	SHORT $LN6@afm_parser
$LN11@afm_parser:
; Line 454
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@afm_parser
; Line 457
	mov	ecx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [ecx+12], 2
	jge	SHORT $LN9@afm_parser
; Line 458
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_afm_stream_read_string
	add	esp, 4
$LN9@afm_parser:
; Line 460
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 461
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_afm_stream_read_one
	add	esp, 4
	mov	DWORD PTR _key$[ebp], eax
; Line 466
	cmp	DWORD PTR _key$[ebp], 0
	jne	SHORT $LN8@afm_parser
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [edx+12], 3
	jge	SHORT $LN8@afm_parser
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+12], 2
	jl	SHORT $LN8@afm_parser
; Line 467
	jmp	SHORT $LN11@afm_parser
$LN8@afm_parser:
; Line 469
	jmp	SHORT $LN10@afm_parser
; Line 470
	jmp	SHORT $LN11@afm_parser
$LN10@afm_parser:
; Line 472
	jmp	SHORT $LN7@afm_parser
$LN6@afm_parser:
; Line 474
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN7@afm_parser
$LN4@afm_parser:
; Line 477
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [edx+12], 1
	jge	SHORT $LN3@afm_parser
; Line 478
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_afm_stream_read_one
	add	esp, 4
	jmp	SHORT $LN4@afm_parser
$LN3@afm_parser:
; Line 480
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 481
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_afm_stream_read_one
	add	esp, 4
	mov	DWORD PTR _key$[ebp], eax
; Line 486
	cmp	DWORD PTR _key$[ebp], 0
	jne	SHORT $LN2@afm_parser
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+12], 3
	jge	SHORT $LN2@afm_parser
	mov	ecx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [ecx+12], 1
	jl	SHORT $LN2@afm_parser
; Line 487
	jmp	SHORT $LN6@afm_parser
$LN2@afm_parser:
; Line 489
	jmp	SHORT $LN7@afm_parser
; Line 490
	jmp	SHORT $LN6@afm_parser
$LN7@afm_parser:
; Line 493
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN1@afm_parser
; Line 495
	cmp	DWORD PTR _key$[ebp], 0
	je	SHORT $LN15@afm_parser
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _key$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN16@afm_parser
$LN15@afm_parser:
	mov	DWORD PTR tv128[ebp], 0
$LN16@afm_parser:
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR tv128[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@afm_parser:
; Line 497
	mov	eax, DWORD PTR _key$[ebp]
; Line 498
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_afm_parser_next_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv147 = -49						; size = 1
tv81 = -48						; size = 4
_error$1 = -40						; size = 4
_memory$2 = -32						; size = 4
_val$3 = -28						; size = 4
_len$4 = -24						; size = 4
_i$ = -20						; size = 4
_str$ = -12						; size = 4
_stream$ = -4						; size = 4
_parser$ = 8						; size = 4
_vals$ = 12						; size = 4
_n$ = 16						; size = 4
_afm_parser_read_vals PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 373
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 374
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 379
	cmp	DWORD PTR _n$[ebp], 5
	jbe	SHORT $LN17@afm_parser
; Line 380
	xor	eax, eax
	jmp	$LN18@afm_parser
$LN17@afm_parser:
; Line 382
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@afm_parser
$LN15@afm_parser:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN16@afm_parser:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jae	$LN14@afm_parser
; Line 385
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _vals$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _val$3[ebp], eax
; Line 388
	mov	ecx, DWORD PTR _val$3[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN13@afm_parser
; Line 389
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_afm_stream_read_string
	add	esp, 4
	mov	DWORD PTR _str$[ebp], eax
; Line 390
	jmp	SHORT $LN12@afm_parser
$LN13@afm_parser:
; Line 391
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_afm_stream_read_one
	add	esp, 4
	mov	DWORD PTR _str$[ebp], eax
$LN12@afm_parser:
; Line 393
	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN11@afm_parser
; Line 394
	jmp	$LN14@afm_parser
$LN11@afm_parser:
; Line 396
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _str$[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$4[ebp], edx
; Line 398
	mov	eax, DWORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv81[ebp], ecx
	cmp	DWORD PTR tv81[ebp], 5
	ja	$LN9@afm_parser
	mov	edx, DWORD PTR tv81[ebp]
	jmp	DWORD PTR $LN26@afm_parser[edx*4]
$LN8@afm_parser:
; Line 403
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$2[ebp], ecx
; Line 407
	lea	edx, DWORD PTR _error$1[ebp]
	push	edx
	mov	eax, DWORD PTR _len$4[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _memory$2[ebp]
	push	ecx
	call	_ft_mem_qalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _val$3[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR _error$1[ebp], 0
	jne	SHORT $LN7@afm_parser
; Line 409
	mov	eax, DWORD PTR _len$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _val$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 410
	mov	ecx, DWORD PTR _val$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _len$4[ebp]
	mov	BYTE PTR [edx+eax], 0
$LN7@afm_parser:
; Line 413
	jmp	$LN9@afm_parser
$LN6@afm_parser:
; Line 417
	push	0
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _len$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_PS_Conv_ToFixed
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _val$3[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 418
	jmp	$LN9@afm_parser
$LN5@afm_parser:
; Line 422
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, DWORD PTR _len$4[ebp]
	push	edx
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_PS_Conv_ToInt
	add	esp, 8
	mov	ecx, DWORD PTR _val$3[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 423
	jmp	SHORT $LN9@afm_parser
$LN4@afm_parser:
; Line 427
	cmp	DWORD PTR _len$4[ebp], 4
	jne	SHORT $LN20@afm_parser
	mov	esi, esp
	push	4
	push	OFFSET $SG10311
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN20@afm_parser
	mov	BYTE PTR tv147[ebp], 1
	jmp	SHORT $LN21@afm_parser
$LN20@afm_parser:
	mov	BYTE PTR tv147[ebp], 0
$LN21@afm_parser:
	mov	eax, DWORD PTR _val$3[ebp]
	mov	cl, BYTE PTR tv147[ebp]
	mov	BYTE PTR [eax+4], cl
; Line 428
	jmp	SHORT $LN9@afm_parser
$LN3@afm_parser:
; Line 431
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@afm_parser
; Line 432
	mov	esi, esp
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _len$4[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _val$3[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 433
	jmp	SHORT $LN9@afm_parser
$LN2@afm_parser:
; Line 434
	mov	edx, DWORD PTR _val$3[ebp]
	mov	DWORD PTR [edx+4], 0
$LN9@afm_parser:
; Line 437
	jmp	$LN15@afm_parser
$LN14@afm_parser:
; Line 439
	mov	eax, DWORD PTR _i$[ebp]
$LN18@afm_parser:
; Line 440
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@afm_parser
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@afm_parser:
	DD	2
	DD	$LN24@afm_parser
$LN24@afm_parser:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN22@afm_parser
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN23@afm_parser
$LN23@afm_parser:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN22@afm_parser:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
	npad	2
$LN26@afm_parser:
	DD	$LN8@afm_parser
	DD	$LN8@afm_parser
	DD	$LN6@afm_parser
	DD	$LN5@afm_parser
	DD	$LN4@afm_parser
	DD	$LN3@afm_parser
_afm_parser_read_vals ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv128 = -100						; size = 4
_n$1 = -92						; size = 4
_shared_vals$2 = -80					; size = 32
_metrics_sets$ = -40					; size = 4
_len$ = -28						; size = 4
_key$ = -20						; size = 4
_error$ = -16						; size = 4
_fi$ = -12						; size = 4
_memory$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_parser$ = 8						; size = 4
_afm_parser_parse PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 848
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 849
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 850
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _fi$[ebp], eax
; Line 851
	mov	DWORD PTR _error$[ebp], 160		; 000000a0H
; Line 854
	mov	DWORD PTR _metrics_sets$[ebp], 0
; Line 857
	cmp	DWORD PTR _fi$[ebp], 0
	jne	SHORT $LN31@afm_parser
; Line 858
	push	OFFSET $SG10535
	push	858					; 0000035aH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN32@afm_parser
$LN31@afm_parser:
; Line 860
	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_afm_parser_next_key
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$[ebp], eax
; Line 862
	cmp	DWORD PTR _key$[ebp], 0
	je	SHORT $LN29@afm_parser
	cmp	DWORD PTR _len$[ebp], 16		; 00000010H
	jne	SHORT $LN29@afm_parser
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET $SG10538
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN28@afm_parser
$LN29@afm_parser:
; Line 863
	push	OFFSET $SG10539
	push	863					; 0000035fH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	jmp	$LN32@afm_parser
$LN28@afm_parser:
; Line 865
	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_afm_parser_next_key
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$[ebp], eax
	cmp	DWORD PTR _key$[ebp], 0
	je	$Fail$42
; Line 870
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_afm_tokenize
	add	esp, 8
	mov	DWORD PTR tv128[ebp], eax
	cmp	DWORD PTR tv128[ebp], 49		; 00000031H
	ja	$LN25@afm_parser
	mov	edx, DWORD PTR tv128[ebp]
	movzx	eax, BYTE PTR $LN34@afm_parser[edx]
	jmp	DWORD PTR $LN41@afm_parser[eax*4]
$LN24@afm_parser:
; Line 873
	lea	ecx, DWORD PTR _metrics_sets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_afm_parser_read_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN23@afm_parser
; Line 874
	jmp	$Fail$42
$LN23@afm_parser:
; Line 876
	cmp	DWORD PTR _metrics_sets$[ebp], 0
	je	SHORT $LN22@afm_parser
	cmp	DWORD PTR _metrics_sets$[ebp], 2
	je	SHORT $LN22@afm_parser
; Line 878
	push	OFFSET $SG10552
	push	878					; 0000036eH
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	mov	DWORD PTR _error$[ebp], eax
; Line 880
	jmp	$Fail$42
$LN22@afm_parser:
; Line 882
	jmp	$LN25@afm_parser
$LN21@afm_parser:
; Line 885
	mov	eax, 8
	imul	ecx, eax, 0
	mov	DWORD PTR _shared_vals$2[ebp+ecx], 4
; Line 886
	push	1
	lea	edx, DWORD PTR _shared_vals$2[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_afm_parser_read_vals
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	je	SHORT $LN20@afm_parser
; Line 887
	jmp	$Fail$42
$LN20@afm_parser:
; Line 889
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _fi$[ebp]
	mov	cl, BYTE PTR _shared_vals$2[ebp+edx+4]
	mov	BYTE PTR [eax], cl
; Line 890
	jmp	$LN25@afm_parser
$LN19@afm_parser:
; Line 893
	mov	edx, 8
	imul	eax, edx, 0
	mov	DWORD PTR _shared_vals$2[ebp+eax], 2
; Line 894
	mov	ecx, 8
	shl	ecx, 0
	mov	DWORD PTR _shared_vals$2[ebp+ecx], 2
; Line 895
	mov	edx, 8
	shl	edx, 1
	mov	DWORD PTR _shared_vals$2[ebp+edx], 2
; Line 896
	mov	eax, 8
	imul	ecx, eax, 3
	mov	DWORD PTR _shared_vals$2[ebp+ecx], 2
; Line 897
	push	4
	lea	edx, DWORD PTR _shared_vals$2[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_afm_parser_read_vals
	add	esp, 12					; 0000000cH
	cmp	eax, 4
	je	SHORT $LN18@afm_parser
; Line 898
	jmp	$Fail$42
$LN18@afm_parser:
; Line 900
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _shared_vals$2[ebp+edx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 901
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _shared_vals$2[ebp+edx+4]
	mov	DWORD PTR [eax+8], ecx
; Line 902
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _shared_vals$2[ebp+edx+4]
	mov	DWORD PTR [eax+12], ecx
; Line 903
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _fi$[ebp]
	mov	edx, DWORD PTR _shared_vals$2[ebp+eax+4]
	mov	DWORD PTR [ecx+16], edx
; Line 904
	jmp	$LN25@afm_parser
$LN17@afm_parser:
; Line 907
	mov	eax, 8
	imul	ecx, eax, 0
	mov	DWORD PTR _shared_vals$2[ebp+ecx], 2
; Line 908
	push	1
	lea	edx, DWORD PTR _shared_vals$2[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_afm_parser_read_vals
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	je	SHORT $LN16@afm_parser
; Line 909
	jmp	$Fail$42
$LN16@afm_parser:
; Line 911
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR _shared_vals$2[ebp+edx+4]
	mov	DWORD PTR [eax+20], ecx
; Line 912
	jmp	$LN25@afm_parser
$LN15@afm_parser:
; Line 915
	mov	edx, 8
	imul	eax, edx, 0
	mov	DWORD PTR _shared_vals$2[ebp+eax], 2
; Line 916
	push	1
	lea	ecx, DWORD PTR _shared_vals$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_afm_parser_read_vals
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	je	SHORT $LN14@afm_parser
; Line 917
	jmp	SHORT $Fail$42
$LN14@afm_parser:
; Line 919
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR _shared_vals$2[ebp+ecx+4]
	mov	DWORD PTR [edx+24], eax
; Line 920
	jmp	SHORT $LN25@afm_parser
$LN13@afm_parser:
; Line 924
	mov	DWORD PTR _n$1[ebp], 0
; Line 927
	lea	ecx, DWORD PTR _n$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_afm_parser_read_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@afm_parser
; Line 928
	jmp	SHORT $Fail$42
$LN12@afm_parser:
; Line 931
	push	17					; 00000011H
	mov	eax, DWORD PTR _n$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_afm_parser_skip_section
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 932
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@afm_parser
; Line 933
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN32@afm_parser
$LN11@afm_parser:
; Line 935
	jmp	SHORT $LN25@afm_parser
$LN10@afm_parser:
; Line 938
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_afm_parse_kern_data
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 939
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@afm_parser
; Line 940
	jmp	SHORT $Fail$42
$LN8@afm_parser:
; Line 944
	xor	eax, eax
	jmp	SHORT $LN32@afm_parser
$LN25@afm_parser:
; Line 949
	jmp	$LN28@afm_parser
$Fail$42:
; Line 952
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [eax+28], 0
	xor	ecx, ecx
	jne	SHORT $Fail$42
; Line 953
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+32], 0
$LN3@afm_parser:
; Line 955
	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [eax+36], 0
	xor	ecx, ecx
	jne	SHORT $LN3@afm_parser
; Line 956
	mov	edx, DWORD PTR _fi$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 958
	mov	eax, DWORD PTR _fi$[ebp]
	mov	BYTE PTR [eax], 0
; Line 960
	mov	eax, DWORD PTR _error$[ebp]
$LN32@afm_parser:
; Line 961
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN40@afm_parser
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN40@afm_parser:
	DD	4
	DD	$LN39@afm_parser
$LN39@afm_parser:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN35@afm_parser
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN36@afm_parser
	DD	-80					; ffffffb0H
	DD	32					; 00000020H
	DD	$LN37@afm_parser
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN38@afm_parser
$LN38@afm_parser:
	DB	110					; 0000006eH
	DB	0
$LN37@afm_parser:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
$LN36@afm_parser:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN35@afm_parser:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
	npad	1
$LN41@afm_parser:
	DD	$LN17@afm_parser
	DD	$LN15@afm_parser
	DD	$LN8@afm_parser
	DD	$LN19@afm_parser
	DD	$LN21@afm_parser
	DD	$LN24@afm_parser
	DD	$LN13@afm_parser
	DD	$LN10@afm_parser
	DD	$LN25@afm_parser
$LN34@afm_parser:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	2
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	7
_afm_parser_parse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_parser$ = 8						; size = 4
_afm_parser_done PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 557
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 558
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
$LN3@afm_parser:
; Line 561
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+4], 0
	xor	eax, eax
	jne	SHORT $LN3@afm_parser
; Line 562
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_afm_parser_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -12						; size = 4
_stream$ = -4						; size = 4
_parser$ = 8						; size = 4
_memory$ = 12						; size = 4
_base$ = 16						; size = 4
_limit$ = 20						; size = 4
_afm_parser_init PROC
; File d:\mozilla\modules\freetype2\src\psaux\afmparse.c
; Line 532
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 533
	mov	DWORD PTR _stream$[ebp], 0
; Line 537
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _stream$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@afm_parser
; Line 538
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN2@afm_parser
$LN1@afm_parser:
; Line 540
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 541
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 544
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+12], 2
; Line 546
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 547
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 548
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 549
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 551
	xor	eax, eax
$LN2@afm_parser:
; Line 552
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@afm_parser
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@afm_parser:
	DD	1
	DD	$LN5@afm_parser
$LN5@afm_parser:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@afm_parser
$LN4@afm_parser:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_afm_parser_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_t1_decoder_done PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1decode.c
; Line 1617
	push	ebp
	mov	ebp, esp
; Line 1618
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_t1_builder_done
	add	esp, 4
; Line 1619
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t1_decoder_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__tmp_$1 = -12						; size = 4
_module$2 = -8						; size = 4
_psnames$3 = -4						; size = 4
_decoder$ = 8						; size = 4
_face$ = 12						; size = 4
_size$ = 16						; size = 4
_slot$ = 20						; size = 4
_glyph_names$ = 24					; size = 4
_blend$ = 28						; size = 4
_hinting$ = 32						; size = 1
_hint_mode$ = 36					; size = 4
_parse_callback$ = 40					; size = 4
_t1_decoder_init PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1decode.c
; Line 1577
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1578
	push	1500					; 000005dcH
	push	0
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1582
	mov	DWORD PTR _psnames$3[ebp], 0
$LN4@t1_decoder:
; Line 1585
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _module$2[ebp], edx
	push	OFFSET $SG9828
	mov	eax, DWORD PTR _module$2[ebp]
	push	eax
	call	_ft_module_get_service
	add	esp, 8
	mov	DWORD PTR __tmp_$1[ebp], eax
	mov	ecx, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR _psnames$3[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN4@t1_decoder
; Line 1586
	cmp	DWORD PTR _psnames$3[ebp], 0
	jne	SHORT $LN1@t1_decoder
; Line 1589
	push	OFFSET $SG9830
	call	_FT_Message
	add	esp, 4
; Line 1590
	push	OFFSET $SG9831
	push	1590					; 00000636H
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	jmp	$LN5@t1_decoder
$LN1@t1_decoder:
; Line 1593
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _psnames$3[ebp]
	mov	DWORD PTR [eax+1348], ecx
; Line 1596
	movzx	edx, BYTE PTR _hinting$[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_t1_builder_init
	add	esp, 20					; 00000014H
; Line 1602
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+1352], eax
; Line 1603
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _glyph_names$[ebp]
	mov	DWORD PTR [ecx+1356], edx
; Line 1604
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _hint_mode$[ebp]
	mov	DWORD PTR [eax+1468], ecx
; Line 1605
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _blend$[ebp]
	mov	DWORD PTR [edx+1464], eax
; Line 1606
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _parse_callback$[ebp]
	mov	DWORD PTR [ecx+1472], edx
; Line 1608
	mov	eax, DWORD PTR _decoder$[ebp]
	add	eax, 1476				; 000005c4H
	mov	ecx, DWORD PTR _t1_decoder_funcs
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _t1_decoder_funcs+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _t1_decoder_funcs+8
	mov	DWORD PTR [eax+8], ecx
; Line 1610
	xor	eax, eax
$LN5@t1_decoder:
; Line 1611
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_decoder_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv1038 = -224						; size = 4
tv598 = -220						; size = 4
tv579 = -216						; size = 4
tv406 = -212						; size = 4
tv385 = -208						; size = 4
tv365 = -201						; size = 1
tv330 = -200						; size = 4
tv269 = -196						; size = 4
tv181 = -192						; size = 4
tv180 = -188						; size = 4
tv175 = -184						; size = 4
tv174 = -180						; size = 4
tv142 = -176						; size = 4
tv84 = -172						; size = 4
tv85 = -168						; size = 4
_dx$1 = -164						; size = 4
_idx$2 = -160						; size = 4
_i$3 = -156						; size = 4
_num_args$4 = -152					; size = 4
_Rand$5 = -148						; size = 4
_blend$6 = -144						; size = 4
_idx$7 = -140						; size = 4
_blend$8 = -136						; size = 4
_idx$9 = -132						; size = 4
_blend$10 = -128					; size = 4
_idx$11 = -124						; size = 4
_tmp$12 = -120						; size = 4
_values$13 = -116					; size = 4
_delta$14 = -112					; size = 4
_mm$15 = -108						; size = 4
_nn$16 = -104						; size = 4
_num_points$17 = -100					; size = 4
_blend$18 = -96						; size = 4
_idx$19 = -92						; size = 4
_arg_cnt$20 = -88					; size = 4
_subr_no$21 = -84					; size = 4
_value$22 = -80						; size = 4
_op$23 = -76						; size = 4
_top$24 = -72						; size = 4
_bol$ = -65						; size = 1
_hinter$ = -64						; size = 4
_seed$ = -56						; size = 4
_large_int$ = -45					; size = 1
_unknown_othersubr_result_cnt$ = -44			; size = 4
_known_othersubr_result_cnt$ = -40			; size = 4
_orig_y$ = -36						; size = 4
_orig_x$ = -32						; size = 4
_y$ = -28						; size = 4
_x$ = -24						; size = 4
_builder$ = -20						; size = 4
_limit$ = -16						; size = 4
_ip$ = -12						; size = 4
_zone$ = -8						; size = 4
_error$ = -4						; size = 4
_decoder$ = 8						; size = 4
_charstring_base$ = 12					; size = 4
_charstring_len$ = 16					; size = 4
_t1_decoder_parse_charstrings PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1decode.c
; Line 364
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 369
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR _builder$[ebp], eax
; Line 371
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], 0
; Line 372
	mov	DWORD PTR _unknown_othersubr_result_cnt$[ebp], 0
; Line 379
	mov	BYTE PTR _bol$[ebp], 1
; Line 387
	lea	ecx, DWORD PTR _seed$[ebp]
	lea	edx, DWORD PTR _decoder$[ebp]
	xor	ecx, edx
	lea	eax, DWORD PTR _charstring_base$[ebp]
	xor	ecx, eax
	mov	DWORD PTR _seed$[ebp], ecx
; Line 388
	mov	ecx, DWORD PTR _seed$[ebp]
	sar	ecx, 10					; 0000000aH
	xor	ecx, DWORD PTR _seed$[ebp]
	mov	edx, DWORD PTR _seed$[ebp]
	sar	edx, 20					; 00000014H
	xor	ecx, edx
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _seed$[ebp], ecx
; Line 389
	jne	SHORT $LN361@t1_decoder
; Line 390
	mov	DWORD PTR _seed$[ebp], 29572		; 00007384H
$LN361@t1_decoder:
; Line 393
	mov	eax, DWORD PTR _decoder$[ebp]
	add	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [ecx+1136], eax
; Line 394
	mov	edx, DWORD PTR _decoder$[ebp]
	add	edx, 1140				; 00000474H
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax+1344], edx
; Line 395
	mov	ecx, DWORD PTR _decoder$[ebp]
	add	ecx, 1140				; 00000474H
	mov	DWORD PTR _zone$[ebp], ecx
; Line 397
	mov	edx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [edx+64], 0
; Line 399
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _hinter$[ebp], ecx
$LN360@t1_decoder:
; Line 404
	mov	edx, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [edx+1492], 0
	jne	SHORT $LN366@t1_decoder
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN367@t1_decoder
$LN366@t1_decoder:
	mov	DWORD PTR tv85[ebp], 0
$LN367@t1_decoder:
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+1488], 0
	jne	SHORT $LN364@t1_decoder
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN365@t1_decoder
$LN364@t1_decoder:
	mov	DWORD PTR tv84[ebp], 0
$LN365@t1_decoder:
	mov	ecx, DWORD PTR tv85[ebp]
	cmp	ecx, DWORD PTR tv84[ebp]
	je	SHORT $LN359@t1_decoder
	push	OFFSET $SG9290
	push	404					; 00000194H
	push	OFFSET $SG9291
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN359@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN360@t1_decoder
; Line 406
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+1488], 0
	je	SHORT $LN355@t1_decoder
	mov	ecx, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [ecx+1492], 0
	jbe	SHORT $LN355@t1_decoder
; Line 409
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+1492]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _decoder$[ebp]
	add	edx, DWORD PTR [eax+1488]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN355@t1_decoder:
; Line 412
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN354@t1_decoder
	push	OFFSET $SG9297
	call	_FT_Message
	add	esp, 4
$LN354@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN355@t1_decoder
; Line 414
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR _charstring_base$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 415
	mov	eax, DWORD PTR _charstring_base$[ebp]
	add	eax, DWORD PTR _charstring_len$[ebp]
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 416
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ip$[ebp], edx
; Line 418
	mov	DWORD PTR _error$[ebp], 0
; Line 420
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _orig_x$[ebp], ecx
	mov	edx, DWORD PTR _orig_x$[ebp]
	mov	DWORD PTR _x$[ebp], edx
; Line 421
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _orig_y$[ebp], ecx
	mov	edx, DWORD PTR _orig_y$[ebp]
	mov	DWORD PTR _y$[ebp], edx
; Line 424
	cmp	DWORD PTR _hinter$[ebp], 0
	je	SHORT $LN351@t1_decoder
; Line 425
	mov	esi, esp
	mov	eax, DWORD PTR _hinter$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _hinter$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN351@t1_decoder:
; Line 427
	mov	BYTE PTR _large_int$[ebp], 0
$LN350@t1_decoder:
; Line 430
	mov	ecx, DWORD PTR _ip$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN4@t1_decoder
; Line 432
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+1136]
	mov	DWORD PTR _top$24[ebp], eax
; Line 433
	mov	DWORD PTR _op$23[ebp], 0
; Line 434
	mov	DWORD PTR _value$22[ebp], 0
$LN348@t1_decoder:
; Line 438
	cmp	DWORD PTR _known_othersubr_result_cnt$[ebp], 0
	je	SHORT $LN347@t1_decoder
	cmp	DWORD PTR _unknown_othersubr_result_cnt$[ebp], 0
	je	SHORT $LN347@t1_decoder
	push	OFFSET $SG9309
	push	438					; 000001b6H
	push	OFFSET $SG9310
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN347@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN348@t1_decoder
; Line 441
	movzx	edx, BYTE PTR _bol$[ebp]
	test	edx, edx
	je	SHORT $LN344@t1_decoder
$LN343@t1_decoder:
; Line 443
	mov	eax, 4
	imul	ecx, eax, 40
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN342@t1_decoder
	mov	edx, DWORD PTR _decoder$[ebp]
	add	edx, 112				; 00000070H
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+1136]
	sub	ecx, edx
	sar	ecx, 2
	push	ecx
	push	OFFSET $SG9316
	call	_FT_Message
	add	esp, 8
$LN342@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN343@t1_decoder
; Line 444
	mov	BYTE PTR _bol$[ebp], 0
$LN344@t1_decoder:
; Line 455
	mov	eax, DWORD PTR _ip$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv174[ebp], ecx
	mov	edx, DWORD PTR _ip$[ebp]
	add	edx, 1
	mov	DWORD PTR _ip$[ebp], edx
	mov	eax, DWORD PTR tv174[ebp]
	mov	DWORD PTR tv175[ebp], eax
	mov	ecx, DWORD PTR tv175[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv175[ebp], ecx
	cmp	DWORD PTR tv175[ebp], 254		; 000000feH
	ja	$LN298@t1_decoder
	mov	edx, DWORD PTR tv175[ebp]
	movzx	eax, BYTE PTR $LN374@t1_decoder[edx]
	jmp	DWORD PTR $LN380@t1_decoder[eax*4]
$LN337@t1_decoder:
; Line 458
	mov	DWORD PTR _op$23[ebp], 16		; 00000010H
; Line 459
	jmp	$LN338@t1_decoder
$LN336@t1_decoder:
; Line 462
	mov	DWORD PTR _op$23[ebp], 18		; 00000012H
; Line 463
	jmp	$LN338@t1_decoder
$LN335@t1_decoder:
; Line 465
	mov	DWORD PTR _op$23[ebp], 14		; 0000000eH
; Line 466
	jmp	$LN338@t1_decoder
$LN334@t1_decoder:
; Line 468
	mov	DWORD PTR _op$23[ebp], 9
; Line 469
	jmp	$LN338@t1_decoder
$LN333@t1_decoder:
; Line 471
	mov	DWORD PTR _op$23[ebp], 6
; Line 472
	jmp	$LN338@t1_decoder
$LN332@t1_decoder:
; Line 474
	mov	DWORD PTR _op$23[ebp], 13		; 0000000dH
; Line 475
	jmp	$LN338@t1_decoder
$LN331@t1_decoder:
; Line 477
	mov	DWORD PTR _op$23[ebp], 11		; 0000000bH
; Line 478
	jmp	$LN338@t1_decoder
$LN330@t1_decoder:
; Line 480
	mov	DWORD PTR _op$23[ebp], 5
; Line 481
	jmp	$LN338@t1_decoder
$LN329@t1_decoder:
; Line 483
	mov	DWORD PTR _op$23[ebp], 22		; 00000016H
; Line 484
	jmp	$LN338@t1_decoder
$LN328@t1_decoder:
; Line 486
	mov	DWORD PTR _op$23[ebp], 24		; 00000018H
; Line 487
	jmp	$LN338@t1_decoder
$LN327@t1_decoder:
; Line 490
	mov	DWORD PTR _op$23[ebp], 2
; Line 491
	jmp	$LN338@t1_decoder
$LN326@t1_decoder:
; Line 493
	mov	DWORD PTR _op$23[ebp], 1
; Line 494
	jmp	$LN338@t1_decoder
$LN325@t1_decoder:
; Line 497
	mov	DWORD PTR _op$23[ebp], 26		; 0000001aH
; Line 498
	jmp	$LN338@t1_decoder
$LN324@t1_decoder:
; Line 501
	mov	DWORD PTR _op$23[ebp], 10		; 0000000aH
; Line 502
	jmp	$LN338@t1_decoder
$LN323@t1_decoder:
; Line 504
	mov	DWORD PTR _op$23[ebp], 7
; Line 505
	jmp	$LN338@t1_decoder
$LN322@t1_decoder:
; Line 508
	mov	DWORD PTR _op$23[ebp], 12		; 0000000cH
; Line 509
	jmp	$LN338@t1_decoder
$LN321@t1_decoder:
; Line 511
	mov	DWORD PTR _op$23[ebp], 8
; Line 512
	jmp	$LN338@t1_decoder
$LN320@t1_decoder:
; Line 515
	mov	ecx, DWORD PTR _ip$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN319@t1_decoder
; Line 518
	push	OFFSET $SG9340
	call	_FT_Message
	add	esp, 4
; Line 519
	jmp	$Syntax_Error$384
$LN319@t1_decoder:
; Line 522
	mov	edx, DWORD PTR _ip$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv180[ebp], eax
	mov	ecx, DWORD PTR _ip$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ip$[ebp], ecx
	mov	edx, DWORD PTR tv180[ebp]
	mov	DWORD PTR tv181[ebp], edx
	cmp	DWORD PTR tv181[ebp], 33		; 00000021H
	ja	SHORT $LN307@t1_decoder
	mov	eax, DWORD PTR tv181[ebp]
	movzx	ecx, BYTE PTR $LN375@t1_decoder[eax]
	jmp	DWORD PTR $LN381@t1_decoder[ecx*4]
$LN316@t1_decoder:
; Line 525
	mov	DWORD PTR _op$23[ebp], 15		; 0000000fH
; Line 526
	jmp	SHORT $LN317@t1_decoder
$LN315@t1_decoder:
; Line 528
	mov	DWORD PTR _op$23[ebp], 19		; 00000013H
; Line 529
	jmp	SHORT $LN317@t1_decoder
$LN314@t1_decoder:
; Line 531
	mov	DWORD PTR _op$23[ebp], 17		; 00000011H
; Line 532
	jmp	SHORT $LN317@t1_decoder
$LN313@t1_decoder:
; Line 534
	mov	DWORD PTR _op$23[ebp], 3
; Line 535
	jmp	SHORT $LN317@t1_decoder
$LN312@t1_decoder:
; Line 537
	mov	DWORD PTR _op$23[ebp], 4
; Line 538
	jmp	SHORT $LN317@t1_decoder
$LN311@t1_decoder:
; Line 540
	mov	DWORD PTR _op$23[ebp], 20		; 00000014H
; Line 541
	jmp	SHORT $LN317@t1_decoder
$LN310@t1_decoder:
; Line 543
	mov	DWORD PTR _op$23[ebp], 21		; 00000015H
; Line 544
	jmp	SHORT $LN317@t1_decoder
$LN309@t1_decoder:
; Line 546
	mov	DWORD PTR _op$23[ebp], 23		; 00000017H
; Line 547
	jmp	SHORT $LN317@t1_decoder
$LN308@t1_decoder:
; Line 549
	mov	DWORD PTR _op$23[ebp], 25		; 00000019H
; Line 550
	jmp	SHORT $LN317@t1_decoder
$LN307@t1_decoder:
; Line 555
	mov	edx, 1
	imul	eax, edx, -1
	mov	ecx, DWORD PTR _ip$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	push	edx
	push	OFFSET $SG9356
	call	_FT_Message
	add	esp, 8
; Line 556
	jmp	$Syntax_Error$384
$LN317@t1_decoder:
; Line 558
	jmp	$LN338@t1_decoder
$LN306@t1_decoder:
; Line 561
	mov	eax, DWORD PTR _ip$[ebp]
	add	eax, 4
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN305@t1_decoder
; Line 564
	push	OFFSET $SG9359
	call	_FT_Message
	add	esp, 4
; Line 565
	jmp	$Syntax_Error$384
$LN305@t1_decoder:
; Line 571
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _ip$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _ip$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _ip$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _ip$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	or	ecx, eax
	mov	DWORD PTR _value$22[ebp], ecx
; Line 572
	mov	ecx, DWORD PTR _ip$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ip$[ebp], ecx
; Line 581
	cmp	DWORD PTR _value$22[ebp], 32000		; 00007d00H
	jg	SHORT $LN303@t1_decoder
	cmp	DWORD PTR _value$22[ebp], -32000	; ffff8300H
	jge	SHORT $LN304@t1_decoder
$LN303@t1_decoder:
; Line 583
	movzx	edx, BYTE PTR _large_int$[ebp]
	test	edx, edx
	je	SHORT $LN302@t1_decoder
; Line 586
	push	OFFSET $SG9368
	call	_FT_Message
	add	esp, 4
; Line 588
	jmp	SHORT $LN301@t1_decoder
$LN302@t1_decoder:
; Line 589
	mov	BYTE PTR _large_int$[ebp], 1
$LN301@t1_decoder:
; Line 591
	jmp	SHORT $LN300@t1_decoder
$LN304@t1_decoder:
; Line 593
	movzx	eax, BYTE PTR _large_int$[ebp]
	test	eax, eax
	jne	SHORT $LN300@t1_decoder
; Line 594
	mov	ecx, DWORD PTR _value$22[ebp]
	shl	ecx, 16					; 00000010H
	mov	DWORD PTR _value$22[ebp], ecx
$LN300@t1_decoder:
; Line 597
	jmp	$LN338@t1_decoder
$LN298@t1_decoder:
; Line 600
	mov	edx, 1
	imul	eax, edx, -1
	mov	ecx, DWORD PTR _ip$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 32					; 00000020H
	jl	$LN297@t1_decoder
; Line 602
	mov	eax, 1
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _ip$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 247				; 000000f7H
	jge	SHORT $LN296@t1_decoder
; Line 603
	mov	ecx, 1
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _ip$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	sub	ecx, 139				; 0000008bH
	mov	DWORD PTR _value$22[ebp], ecx
; Line 604
	jmp	$LN295@t1_decoder
$LN296@t1_decoder:
; Line 606
	mov	edx, DWORD PTR _ip$[ebp]
	add	edx, 1
	mov	DWORD PTR _ip$[ebp], edx
	mov	eax, DWORD PTR _ip$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN294@t1_decoder
; Line 609
	push	OFFSET $SG9380
	call	_FT_Message
	add	esp, 4
; Line 610
	jmp	$Syntax_Error$384
$LN294@t1_decoder:
; Line 613
	mov	ecx, 1
	imul	edx, ecx, -2
	mov	eax, DWORD PTR _ip$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 251				; 000000fbH
	jge	SHORT $LN293@t1_decoder
; Line 614
	mov	edx, 1
	imul	eax, edx, -2
	mov	ecx, DWORD PTR _ip$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	sub	edx, 247				; 000000f7H
	shl	edx, 8
	mov	eax, 1
	imul	ecx, eax, -1
	mov	eax, DWORD PTR _ip$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	lea	edx, DWORD PTR [edx+ecx+108]
	mov	DWORD PTR _value$22[ebp], edx
; Line 615
	jmp	SHORT $LN295@t1_decoder
$LN293@t1_decoder:
; Line 616
	mov	eax, 1
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _ip$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	sub	eax, 251				; 000000fbH
	shl	eax, 8
	mov	ecx, 1
	imul	edx, ecx, -1
	mov	ecx, DWORD PTR _ip$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	lea	eax, DWORD PTR [eax+edx+108]
	neg	eax
	mov	DWORD PTR _value$22[ebp], eax
$LN295@t1_decoder:
; Line 619
	movzx	ecx, BYTE PTR _large_int$[ebp]
	test	ecx, ecx
	jne	SHORT $LN291@t1_decoder
; Line 620
	mov	edx, DWORD PTR _value$22[ebp]
	shl	edx, 16					; 00000010H
	mov	DWORD PTR _value$22[ebp], edx
$LN291@t1_decoder:
; Line 622
	jmp	SHORT $LN338@t1_decoder
$LN297@t1_decoder:
; Line 625
	mov	eax, 1
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _ip$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	push	eax
	push	OFFSET $SG9387
	call	_FT_Message
	add	esp, 8
; Line 626
	jmp	$Syntax_Error$384
$LN338@t1_decoder:
; Line 630
	cmp	DWORD PTR _unknown_othersubr_result_cnt$[ebp], 0
	jle	SHORT $LN289@t1_decoder
; Line 632
	mov	ecx, DWORD PTR _op$23[ebp]
	mov	DWORD PTR tv269[ebp], ecx
	cmp	DWORD PTR tv269[ebp], 0
	je	SHORT $LN286@t1_decoder
	cmp	DWORD PTR tv269[ebp], 21		; 00000015H
	jle	SHORT $LN285@t1_decoder
	cmp	DWORD PTR tv269[ebp], 24		; 00000018H
	jle	SHORT $LN286@t1_decoder
	jmp	SHORT $LN285@t1_decoder
$LN286@t1_decoder:
; Line 638
	jmp	SHORT $LN289@t1_decoder
$LN285@t1_decoder:
; Line 642
	mov	DWORD PTR _unknown_othersubr_result_cnt$[ebp], 0
$LN289@t1_decoder:
; Line 647
	movzx	edx, BYTE PTR _large_int$[ebp]
	test	edx, edx
	je	SHORT $LN284@t1_decoder
	cmp	DWORD PTR _op$23[ebp], 0
	je	SHORT $LN284@t1_decoder
	cmp	DWORD PTR _op$23[ebp], 20		; 00000014H
	je	SHORT $LN284@t1_decoder
; Line 650
	push	OFFSET $SG9396
	call	_FT_Message
	add	esp, 4
; Line 652
	mov	BYTE PTR _large_int$[ebp], 0
$LN284@t1_decoder:
; Line 660
	cmp	DWORD PTR _op$23[ebp], 0
	jne	$LN283@t1_decoder
; Line 662
	mov	eax, DWORD PTR _decoder$[ebp]
	add	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _top$24[ebp]
	sub	ecx, eax
	sar	ecx, 2
	cmp	ecx, 256				; 00000100H
	jl	SHORT $LN282@t1_decoder
; Line 664
	push	OFFSET $SG9399
	call	_FT_Message
	add	esp, 4
; Line 665
	jmp	$Syntax_Error$384
$LN282@t1_decoder:
; Line 669
	movzx	edx, BYTE PTR _large_int$[ebp]
	test	edx, edx
	je	SHORT $LN275@t1_decoder
$LN280@t1_decoder:
; Line 670
	mov	eax, 4
	imul	ecx, eax, 40
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN279@t1_decoder
	mov	edx, DWORD PTR _value$22[ebp]
	push	edx
	push	OFFSET $SG9405
	call	_FT_Message
	add	esp, 8
$LN279@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN280@t1_decoder
; Line 671
	jmp	SHORT $LN276@t1_decoder
$LN275@t1_decoder:
; Line 672
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN274@t1_decoder
	mov	eax, DWORD PTR _value$22[ebp]
	sar	eax, 16					; 00000010H
	movsx	ecx, ax
	push	ecx
	push	OFFSET $SG9413
	call	_FT_Message
	add	esp, 8
$LN274@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN275@t1_decoder
$LN276@t1_decoder:
; Line 675
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _value$22[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _top$24[ebp]
	add	edx, 4
	mov	DWORD PTR _top$24[ebp], edx
; Line 676
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [eax+1136], ecx
	jmp	$LN271@t1_decoder
$LN283@t1_decoder:
; Line 678
	cmp	DWORD PTR _op$23[ebp], 21		; 00000015H
	jne	$LN270@t1_decoder
$LN269@t1_decoder:
; Line 685
	mov	edx, 4
	imul	eax, edx, 40
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN268@t1_decoder
	push	OFFSET $SG9422
	call	_FT_Message
	add	esp, 4
$LN268@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN269@t1_decoder
; Line 686
	mov	BYTE PTR _bol$[ebp], 1
; Line 689
	mov	edx, DWORD PTR _decoder$[ebp]
	add	edx, 112				; 00000070H
	mov	eax, DWORD PTR _top$24[ebp]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 2
	jge	SHORT $LN265@t1_decoder
; Line 690
	jmp	$Stack_Underflow$385
$LN265@t1_decoder:
; Line 692
	mov	ecx, DWORD PTR _top$24[ebp]
	sub	ecx, 8
	mov	DWORD PTR _top$24[ebp], ecx
; Line 694
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	sar	ecx, 16					; 00000010H
	movsx	edx, cx
	mov	DWORD PTR _subr_no$21[ebp], edx
; Line 695
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	sar	eax, 16					; 00000010H
	movsx	ecx, ax
	mov	DWORD PTR _arg_cnt$20[ebp], ecx
; Line 708
	mov	edx, DWORD PTR _decoder$[ebp]
	add	edx, 112				; 00000070H
	mov	eax, DWORD PTR _top$24[ebp]
	sub	eax, edx
	sar	eax, 2
	cmp	DWORD PTR _arg_cnt$20[ebp], eax
	jle	SHORT $LN264@t1_decoder
; Line 709
	jmp	$Stack_Underflow$385
$LN264@t1_decoder:
; Line 711
	mov	ecx, DWORD PTR _arg_cnt$20[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _top$24[ebp]
	sub	edx, ecx
	mov	DWORD PTR _top$24[ebp], edx
; Line 713
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], 0
; Line 714
	mov	DWORD PTR _unknown_othersubr_result_cnt$[ebp], 0
; Line 732
	mov	eax, DWORD PTR _subr_no$21[ebp]
	mov	DWORD PTR tv330[ebp], eax
	cmp	DWORD PTR tv330[ebp], 28		; 0000001cH
	ja	$LN205@t1_decoder
	mov	ecx, DWORD PTR tv330[ebp]
	movzx	edx, BYTE PTR $LN376@t1_decoder[ecx]
	jmp	DWORD PTR $LN382@t1_decoder[edx*4]
$LN261@t1_decoder:
; Line 735
	cmp	DWORD PTR _arg_cnt$20[ebp], 3
	je	SHORT $LN260@t1_decoder
; Line 736
	jmp	$Unexpected_OtherSubr$386
$LN260@t1_decoder:
; Line 739
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+1400], 0
	je	SHORT $LN258@t1_decoder
	mov	ecx, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [ecx+1404], 7
	je	SHORT $LN259@t1_decoder
$LN258@t1_decoder:
; Line 742
	push	OFFSET $SG9439
	call	_FT_Message
	add	esp, 4
; Line 743
	jmp	$Syntax_Error$384
$LN259@t1_decoder:
; Line 747
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 748
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 749
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], 2
; Line 750
	jmp	$LN262@t1_decoder
$LN257@t1_decoder:
; Line 753
	cmp	DWORD PTR _arg_cnt$20[ebp], 0
	je	SHORT $LN256@t1_decoder
; Line 754
	jmp	$Unexpected_OtherSubr$386
$LN256@t1_decoder:
; Line 756
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax+1400], 1
; Line 757
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [ecx+1404], 0
; Line 761
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_t1_builder_start_point
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN254@t1_decoder
	push	6
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_check_points
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN255@t1_decoder
$LN254@t1_decoder:
; Line 762
	jmp	$Fail$387
$LN255@t1_decoder:
; Line 763
	jmp	$LN262@t1_decoder
$LN253@t1_decoder:
; Line 770
	cmp	DWORD PTR _arg_cnt$20[ebp], 0
	je	SHORT $LN252@t1_decoder
; Line 771
	jmp	$Unexpected_OtherSubr$386
$LN252@t1_decoder:
; Line 773
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+1400], 0
	jne	SHORT $LN251@t1_decoder
; Line 776
	push	OFFSET $SG9449
	call	_FT_Message
	add	esp, 4
; Line 777
	jmp	$Syntax_Error$384
$LN251@t1_decoder:
; Line 783
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+1404]
	mov	DWORD PTR _idx$19[ebp], edx
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+1404]
	add	ecx, 1
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+1404], ecx
; Line 784
	cmp	DWORD PTR _idx$19[ebp], 0
	jle	SHORT $LN250@t1_decoder
	cmp	DWORD PTR _idx$19[ebp], 7
	jge	SHORT $LN250@t1_decoder
; Line 788
	cmp	DWORD PTR _idx$19[ebp], 3
	je	SHORT $LN368@t1_decoder
	cmp	DWORD PTR _idx$19[ebp], 6
	je	SHORT $LN368@t1_decoder
	mov	BYTE PTR tv365[ebp], 0
	jmp	SHORT $LN369@t1_decoder
$LN368@t1_decoder:
	mov	BYTE PTR tv365[ebp], 1
$LN369@t1_decoder:
	movzx	eax, BYTE PTR tv365[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_t1_builder_add_point
	add	esp, 16					; 00000010H
$LN250@t1_decoder:
; Line 790
	jmp	$LN262@t1_decoder
$LN249@t1_decoder:
; Line 793
	cmp	DWORD PTR _arg_cnt$20[ebp], 1
	je	SHORT $LN248@t1_decoder
; Line 794
	jmp	$Unexpected_OtherSubr$386
$LN248@t1_decoder:
; Line 796
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], 1
; Line 798
	cmp	DWORD PTR _hinter$[ebp], 0
	je	SHORT $LN247@t1_decoder
; Line 799
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	eax, WORD PTR [edx+2]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _hinter$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hinter$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN247@t1_decoder:
; Line 800
	jmp	$LN262@t1_decoder
$LN246@t1_decoder:
; Line 805
	mov	edx, DWORD PTR _decoder$[ebp]
	add	edx, 112				; 00000070H
	mov	DWORD PTR _top$24[ebp], edx
; Line 806
	jmp	$LN262@t1_decoder
$LN245@t1_decoder:
; Line 814
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+1464]
	mov	DWORD PTR _blend$18[ebp], ecx
; Line 820
	cmp	DWORD PTR _blend$18[ebp], 0
	jne	SHORT $LN244@t1_decoder
; Line 823
	push	OFFSET $SG9464
	call	_FT_Message
	add	esp, 4
; Line 824
	jmp	$Syntax_Error$384
$LN244@t1_decoder:
; Line 827
	cmp	DWORD PTR _subr_no$21[ebp], 18		; 00000012H
	jne	SHORT $LN370@t1_decoder
	mov	DWORD PTR tv385[ebp], 1
	jmp	SHORT $LN371@t1_decoder
$LN370@t1_decoder:
	mov	DWORD PTR tv385[ebp], 0
$LN371@t1_decoder:
	mov	edx, DWORD PTR tv385[ebp]
	mov	eax, DWORD PTR _subr_no$21[ebp]
	lea	ecx, DWORD PTR [eax+edx-13]
	mov	DWORD PTR _num_points$17[ebp], ecx
; Line 828
	mov	edx, DWORD PTR _blend$18[ebp]
	mov	eax, DWORD PTR _num_points$17[ebp]
	imul	eax, DWORD PTR [edx]
	cmp	DWORD PTR _arg_cnt$20[ebp], eax
	je	SHORT $LN243@t1_decoder
; Line 831
	push	OFFSET $SG9468
	call	_FT_Message
	add	esp, 4
; Line 832
	jmp	$Syntax_Error$384
$LN243@t1_decoder:
; Line 851
	mov	ecx, DWORD PTR _num_points$17[ebp]
	mov	edx, DWORD PTR _top$24[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _delta$14[ebp], eax
; Line 852
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	DWORD PTR _values$13[ebp], ecx
; Line 853
	mov	DWORD PTR _nn$16[ebp], 0
	jmp	SHORT $LN242@t1_decoder
$LN241@t1_decoder:
	mov	edx, DWORD PTR _nn$16[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$16[ebp], edx
$LN242@t1_decoder:
	mov	eax, DWORD PTR _nn$16[ebp]
	cmp	eax, DWORD PTR _num_points$17[ebp]
	jae	SHORT $LN240@t1_decoder
; Line 855
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _values$13[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _tmp$12[ebp], ecx
; Line 858
	mov	DWORD PTR _mm$15[ebp], 1
	jmp	SHORT $LN239@t1_decoder
$LN238@t1_decoder:
	mov	edx, DWORD PTR _mm$15[ebp]
	add	edx, 1
	mov	DWORD PTR _mm$15[ebp], edx
$LN239@t1_decoder:
	mov	eax, DWORD PTR _blend$18[ebp]
	mov	ecx, DWORD PTR _mm$15[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN237@t1_decoder
; Line 859
	mov	edx, DWORD PTR _delta$14[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv406[ebp], eax
	mov	ecx, DWORD PTR _delta$14[ebp]
	add	ecx, 4
	mov	DWORD PTR _delta$14[ebp], ecx
	mov	edx, DWORD PTR _blend$18[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR _mm$15[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR tv406[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, DWORD PTR _tmp$12[ebp]
	mov	DWORD PTR _tmp$12[ebp], eax
	jmp	SHORT $LN238@t1_decoder
$LN237@t1_decoder:
; Line 861
	mov	ecx, DWORD PTR _values$13[ebp]
	mov	edx, DWORD PTR _tmp$12[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _values$13[ebp]
	add	eax, 4
	mov	DWORD PTR _values$13[ebp], eax
; Line 862
	jmp	$LN241@t1_decoder
$LN240@t1_decoder:
; Line 864
	mov	ecx, DWORD PTR _num_points$17[ebp]
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], ecx
; Line 865
	jmp	$LN262@t1_decoder
$LN236@t1_decoder:
; Line 874
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+1464]
	mov	DWORD PTR _blend$10[ebp], eax
; Line 877
	cmp	DWORD PTR _arg_cnt$20[ebp], 1
	jne	SHORT $LN234@t1_decoder
	cmp	DWORD PTR _blend$10[ebp], 0
	jne	SHORT $LN235@t1_decoder
$LN234@t1_decoder:
; Line 878
	jmp	$Unexpected_OtherSubr$386
$LN235@t1_decoder:
; Line 880
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	sar	ecx, 16					; 00000010H
	movsx	edx, cx
	mov	DWORD PTR _idx$11[ebp], edx
; Line 883
	cmp	DWORD PTR _idx$11[ebp], 0
	jl	SHORT $LN232@t1_decoder
	mov	eax, DWORD PTR _blend$10[ebp]
	mov	ecx, DWORD PTR _idx$11[ebp]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _decoder$[ebp]
	cmp	ecx, DWORD PTR [edx+1492]
	jbe	SHORT $LN233@t1_decoder
$LN232@t1_decoder:
; Line 884
	jmp	$Unexpected_OtherSubr$386
$LN233@t1_decoder:
; Line 889
	mov	eax, DWORD PTR _blend$10[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _blend$10[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+1488]
	mov	eax, DWORD PTR _idx$11[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 891
	jmp	$LN262@t1_decoder
$LN231@t1_decoder:
; Line 896
	cmp	DWORD PTR _arg_cnt$20[ebp], 2
	je	SHORT $LN230@t1_decoder
; Line 897
	jmp	$Unexpected_OtherSubr$386
$LN230@t1_decoder:
; Line 899
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR _top$24[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 901
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], 1
; Line 902
	jmp	$LN262@t1_decoder
$LN229@t1_decoder:
; Line 907
	cmp	DWORD PTR _arg_cnt$20[ebp], 2
	je	SHORT $LN228@t1_decoder
; Line 908
	jmp	$Unexpected_OtherSubr$386
$LN228@t1_decoder:
; Line 910
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	esi, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR [edx+eax]
	sub	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 912
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], 1
; Line 913
	jmp	$LN262@t1_decoder
$LN227@t1_decoder:
; Line 918
	cmp	DWORD PTR _arg_cnt$20[ebp], 2
	je	SHORT $LN226@t1_decoder
; Line 919
	jmp	$Unexpected_OtherSubr$386
$LN226@t1_decoder:
; Line 921
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 923
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], 1
; Line 924
	jmp	$LN262@t1_decoder
$LN225@t1_decoder:
; Line 929
	cmp	DWORD PTR _arg_cnt$20[ebp], 2
	jne	SHORT $LN223@t1_decoder
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	cmp	DWORD PTR [eax+edx], 0
	jne	SHORT $LN224@t1_decoder
$LN223@t1_decoder:
; Line 930
	jmp	$Unexpected_OtherSubr$386
$LN224@t1_decoder:
; Line 932
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 934
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], 1
; Line 935
	jmp	$LN262@t1_decoder
$LN222@t1_decoder:
; Line 942
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+1464]
	mov	DWORD PTR _blend$8[ebp], ecx
; Line 945
	cmp	DWORD PTR _arg_cnt$20[ebp], 2
	jne	SHORT $LN220@t1_decoder
	cmp	DWORD PTR _blend$8[ebp], 0
	jne	SHORT $LN221@t1_decoder
$LN220@t1_decoder:
; Line 946
	jmp	$Unexpected_OtherSubr$386
$LN221@t1_decoder:
; Line 948
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	sar	ecx, 16					; 00000010H
	movsx	edx, cx
	mov	DWORD PTR _idx$9[ebp], edx
; Line 950
	cmp	DWORD PTR _idx$9[ebp], 0
	jl	SHORT $LN218@t1_decoder
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _idx$9[ebp]
	cmp	ecx, DWORD PTR [eax+1492]
	jb	SHORT $LN219@t1_decoder
$LN218@t1_decoder:
; Line 951
	jmp	$Unexpected_OtherSubr$386
$LN219@t1_decoder:
; Line 953
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+1488]
	mov	ecx, DWORD PTR _idx$9[ebp]
	mov	esi, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 955
	jmp	$LN262@t1_decoder
$LN217@t1_decoder:
; Line 963
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+1464]
	mov	DWORD PTR _blend$6[ebp], edx
; Line 966
	cmp	DWORD PTR _arg_cnt$20[ebp], 1
	jne	SHORT $LN215@t1_decoder
	cmp	DWORD PTR _blend$6[ebp], 0
	jne	SHORT $LN216@t1_decoder
$LN215@t1_decoder:
; Line 967
	jmp	$Unexpected_OtherSubr$386
$LN216@t1_decoder:
; Line 969
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	sar	eax, 16					; 00000010H
	movsx	ecx, ax
	mov	DWORD PTR _idx$7[ebp], ecx
; Line 971
	cmp	DWORD PTR _idx$7[ebp], 0
	jl	SHORT $LN213@t1_decoder
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _idx$7[ebp]
	cmp	eax, DWORD PTR [edx+1492]
	jb	SHORT $LN214@t1_decoder
$LN213@t1_decoder:
; Line 972
	jmp	$Unexpected_OtherSubr$386
$LN214@t1_decoder:
; Line 974
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+1488]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	esi, DWORD PTR _idx$7[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [eax+ecx], edx
; Line 977
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], 1
; Line 978
	jmp	$LN262@t1_decoder
$LN212@t1_decoder:
; Line 993
	cmp	DWORD PTR _arg_cnt$20[ebp], 4
	je	SHORT $LN211@t1_decoder
; Line 994
	jmp	$Unexpected_OtherSubr$386
$LN211@t1_decoder:
; Line 996
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	esi, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	cmp	eax, DWORD PTR [esi+edx]
	jle	SHORT $LN210@t1_decoder
; Line 997
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	esi, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
$LN210@t1_decoder:
; Line 999
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], 1
; Line 1000
	jmp	$LN262@t1_decoder
$LN209@t1_decoder:
; Line 1005
	cmp	DWORD PTR _arg_cnt$20[ebp], 0
	je	SHORT $LN208@t1_decoder
; Line 1006
	jmp	$Unexpected_OtherSubr$386
$LN208@t1_decoder:
; Line 1012
	mov	edx, DWORD PTR _seed$[ebp]
	mov	DWORD PTR _Rand$5[ebp], edx
; Line 1013
	cmp	DWORD PTR _Rand$5[ebp], 32768		; 00008000H
	jl	SHORT $LN207@t1_decoder
; Line 1014
	mov	eax, DWORD PTR _Rand$5[ebp]
	add	eax, 1
	mov	DWORD PTR _Rand$5[ebp], eax
$LN207@t1_decoder:
; Line 1016
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _Rand$5[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 1018
	mov	edx, 65536				; 00010000H
	sub	edx, DWORD PTR _seed$[ebp]
	push	edx
	mov	eax, DWORD PTR _seed$[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _seed$[ebp], eax
; Line 1019
	cmp	DWORD PTR _seed$[ebp], 0
	jne	SHORT $LN206@t1_decoder
; Line 1020
	mov	ecx, DWORD PTR _seed$[ebp]
	add	ecx, 10355				; 00002873H
	mov	DWORD PTR _seed$[ebp], ecx
$LN206@t1_decoder:
; Line 1023
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], 1
; Line 1024
	jmp	SHORT $LN262@t1_decoder
$LN205@t1_decoder:
; Line 1027
	cmp	DWORD PTR _arg_cnt$20[ebp], 0
	jl	SHORT $Unexpected_OtherSubr$386
	cmp	DWORD PTR _subr_no$21[ebp], 0
	jl	SHORT $Unexpected_OtherSubr$386
; Line 1031
	mov	edx, DWORD PTR _subr_no$21[ebp]
	push	edx
	mov	eax, DWORD PTR _arg_cnt$20[ebp]
	push	eax
	push	OFFSET $SG9533
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 1032
	mov	ecx, DWORD PTR _arg_cnt$20[ebp]
	mov	DWORD PTR _unknown_othersubr_result_cnt$[ebp], ecx
; Line 1033
	jmp	SHORT $LN262@t1_decoder
$Unexpected_OtherSubr$386:
; Line 1039
	mov	edx, DWORD PTR _subr_no$21[ebp]
	push	edx
	mov	eax, DWORD PTR _arg_cnt$20[ebp]
	push	eax
	push	OFFSET $SG9534
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 1040
	jmp	$Syntax_Error$384
$LN262@t1_decoder:
; Line 1043
	mov	ecx, DWORD PTR _known_othersubr_result_cnt$[ebp]
	mov	edx, DWORD PTR _top$24[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _top$24[ebp], eax
; Line 1045
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [ecx+1136], edx
; Line 1047
	jmp	$LN271@t1_decoder
$LN270@t1_decoder:
; Line 1049
	mov	eax, DWORD PTR _op$23[ebp]
	mov	ecx, DWORD PTR _t1_args_count[eax*4]
	mov	DWORD PTR _num_args$4[ebp], ecx
$LN202@t1_decoder:
; Line 1052
	cmp	DWORD PTR _num_args$4[ebp], 0
	jge	SHORT $LN201@t1_decoder
	push	OFFSET $SG9541
	push	1052					; 0000041cH
	push	OFFSET $SG9542
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN201@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN202@t1_decoder
; Line 1054
	mov	eax, DWORD PTR _decoder$[ebp]
	add	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _top$24[ebp]
	sub	ecx, eax
	sar	ecx, 2
	cmp	ecx, DWORD PTR _num_args$4[ebp]
	jge	SHORT $LN198@t1_decoder
; Line 1055
	jmp	$Stack_Underflow$385
$LN198@t1_decoder:
; Line 1065
	mov	edx, DWORD PTR _op$23[ebp]
	mov	DWORD PTR tv579[ebp], edx
	cmp	DWORD PTR tv579[ebp], 20		; 00000014H
	jl	SHORT $LN194@t1_decoder
	cmp	DWORD PTR tv579[ebp], 24		; 00000018H
	jle	SHORT $LN195@t1_decoder
	jmp	SHORT $LN194@t1_decoder
$LN195@t1_decoder:
; Line 1072
	jmp	SHORT $LN196@t1_decoder
$LN194@t1_decoder:
; Line 1075
	mov	eax, DWORD PTR _decoder$[ebp]
	add	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _top$24[ebp]
	sub	ecx, eax
	sar	ecx, 2
	cmp	ecx, DWORD PTR _num_args$4[ebp]
	je	SHORT $LN196@t1_decoder
$LN192@t1_decoder:
; Line 1079
	mov	edx, 4
	imul	eax, edx, 40
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN191@t1_decoder
	mov	ecx, DWORD PTR _num_args$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	add	edx, 112				; 00000070H
	mov	eax, DWORD PTR _top$24[ebp]
	sub	eax, edx
	sar	eax, 2
	push	eax
	push	OFFSET $SG9555
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN191@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN192@t1_decoder
$LN196@t1_decoder:
; Line 1085
	mov	edx, DWORD PTR _num_args$4[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _top$24[ebp]
	sub	eax, edx
	mov	DWORD PTR _top$24[ebp], eax
; Line 1087
	mov	ecx, DWORD PTR _op$23[ebp]
	mov	DWORD PTR tv598[ebp], ecx
	mov	edx, DWORD PTR tv598[ebp]
	sub	edx, 1
	mov	DWORD PTR tv598[ebp], edx
	cmp	DWORD PTR tv598[ebp], 25		; 00000019H
	ja	$LN9@t1_decoder
	mov	eax, DWORD PTR tv598[ebp]
	jmp	DWORD PTR $LN383@t1_decoder[eax*4]
$LN185@t1_decoder:
; Line 1090
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN184@t1_decoder
	push	OFFSET $SG9565
	call	_FT_Message
	add	esp, 4
$LN184@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN185@t1_decoder
; Line 1092
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_t1_builder_close_contour
	add	esp, 4
; Line 1095
	cmp	DWORD PTR _hinter$[ebp], 0
	je	SHORT $LN181@t1_decoder
; Line 1097
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	ecx, WORD PTR [eax+2]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _hinter$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _hinter$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN180@t1_decoder
; Line 1098
	jmp	$Syntax_Error$384
$LN180@t1_decoder:
; Line 1104
	mov	esi, esp
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+1468]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _hinter$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _hinter$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1105
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN181@t1_decoder
; Line 1106
	jmp	$Fail$387
$LN181@t1_decoder:
; Line 1110
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_GlyphLoader_Add
	add	esp, 4
; Line 1116
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+1492], 0
	jbe	$LN162@t1_decoder
$LN177@t1_decoder:
; Line 1121
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN176@t1_decoder
	push	OFFSET $SG9576
	call	_FT_Message
	add	esp, 4
$LN176@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN177@t1_decoder
; Line 1123
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN173@t1_decoder
$LN172@t1_decoder:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN173@t1_decoder:
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR [edx+1492]
	jae	SHORT $LN166@t1_decoder
$LN170@t1_decoder:
; Line 1124
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN169@t1_decoder
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+1488]
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	OFFSET $SG9584
	call	_FT_Message
	add	esp, 8
$LN169@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN170@t1_decoder
	jmp	SHORT $LN172@t1_decoder
$LN166@t1_decoder:
; Line 1126
	mov	edx, 4
	imul	eax, edx, 40
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN165@t1_decoder
	push	OFFSET $SG9589
	call	_FT_Message
	add	esp, 4
$LN165@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN166@t1_decoder
$LN162@t1_decoder:
; Line 1131
	mov	edx, 4
	imul	eax, edx, 40
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN161@t1_decoder
	push	OFFSET $SG9594
	call	_FT_Message
	add	esp, 4
$LN161@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN162@t1_decoder
; Line 1134
	xor	eax, eax
	jmp	$LN362@t1_decoder
$LN157@t1_decoder:
; Line 1137
	mov	edx, 4
	imul	eax, edx, 40
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN156@t1_decoder
	push	OFFSET $SG9600
	call	_FT_Message
	add	esp, 4
$LN156@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN157@t1_decoder
; Line 1139
	mov	edx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [edx+64], 1
; Line 1141
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	edx, DWORD PTR _top$24[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 1142
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+40], edx
; Line 1143
	mov	eax, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 1145
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _top$24[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _x$[ebp], ecx
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _orig_x$[ebp], ecx
; Line 1146
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _y$[ebp], eax
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _orig_y$[ebp], ecx
; Line 1148
	mov	edx, DWORD PTR _orig_y$[ebp]
	mov	DWORD PTR _orig_y$[ebp], edx
; Line 1153
	mov	eax, DWORD PTR _builder$[ebp]
	movzx	ecx, BYTE PTR [eax+70]
	test	ecx, ecx
	je	SHORT $LN153@t1_decoder
; Line 1154
	xor	eax, eax
	jmp	$LN362@t1_decoder
$LN153@t1_decoder:
; Line 1156
	jmp	$LN187@t1_decoder
$LN152@t1_decoder:
; Line 1164
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	sar	ecx, 16					; 00000010H
	movsx	edx, cx
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	sar	eax, 16					; 00000010H
	movsx	ecx, ax
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_t1operator_seac
	add	esp, 24					; 00000018H
	jmp	$LN362@t1_decoder
$LN150@t1_decoder:
; Line 1167
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN149@t1_decoder
	push	OFFSET $SG9612
	call	_FT_Message
	add	esp, 4
$LN149@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN150@t1_decoder
; Line 1169
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+64], 1
; Line 1171
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR _top$24[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 1172
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR _top$24[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 1173
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+40], edx
; Line 1174
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+44], ecx
; Line 1176
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR _top$24[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _x$[ebp], edx
; Line 1177
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR _top$24[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _y$[ebp], ecx
; Line 1182
	mov	ecx, DWORD PTR _builder$[ebp]
	movzx	edx, BYTE PTR [ecx+70]
	test	edx, edx
	je	SHORT $LN146@t1_decoder
; Line 1183
	xor	eax, eax
	jmp	$LN362@t1_decoder
$LN146@t1_decoder:
; Line 1185
	jmp	$LN187@t1_decoder
$LN144@t1_decoder:
; Line 1188
	mov	eax, 4
	imul	ecx, eax, 40
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN143@t1_decoder
	push	OFFSET $SG9619
	call	_FT_Message
	add	esp, 4
$LN143@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN144@t1_decoder
; Line 1192
	mov	eax, DWORD PTR _builder$[ebp]
	cmp	DWORD PTR [eax+64], 3
	je	SHORT $LN139@t1_decoder
	mov	ecx, DWORD PTR _builder$[ebp]
	cmp	DWORD PTR [ecx+64], 2
	jne	SHORT $LN140@t1_decoder
$LN139@t1_decoder:
; Line 1193
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_close_contour
	add	esp, 4
$LN140@t1_decoder:
; Line 1195
	mov	eax, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [eax+64], 1
; Line 1196
	jmp	$LN187@t1_decoder
$LN137@t1_decoder:
; Line 1199
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN136@t1_decoder
	push	OFFSET $SG9627
	call	_FT_Message
	add	esp, 4
$LN136@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN137@t1_decoder
; Line 1202
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_t1_builder_start_point
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN133@t1_decoder
; Line 1203
	jmp	$Fail$387
$LN133@t1_decoder:
; Line 1205
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _x$[ebp], ecx
; Line 1206
	jmp	$Add_Line$388
$LN131@t1_decoder:
; Line 1209
	mov	edx, 4
	imul	eax, edx, 40
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN130@t1_decoder
	push	OFFSET $SG9635
	call	_FT_Message
	add	esp, 4
$LN130@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN131@t1_decoder
; Line 1211
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _x$[ebp], edx
; Line 1212
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+1400], 0
	jne	SHORT $LN127@t1_decoder
; Line 1214
	mov	ecx, DWORD PTR _builder$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jne	SHORT $LN126@t1_decoder
; Line 1215
	jmp	$Syntax_Error$384
$LN126@t1_decoder:
; Line 1216
	mov	edx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [edx+64], 2
$LN127@t1_decoder:
; Line 1218
	jmp	$LN187@t1_decoder
$LN124@t1_decoder:
; Line 1221
	mov	eax, 4
	imul	ecx, eax, 40
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN123@t1_decoder
	push	OFFSET $SG9643
	call	_FT_Message
	add	esp, 4
$LN123@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN124@t1_decoder
; Line 1226
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_start_point
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN119@t1_decoder
	push	3
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_t1_builder_check_points
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN120@t1_decoder
$LN119@t1_decoder:
; Line 1227
	jmp	$Fail$387
$LN120@t1_decoder:
; Line 1229
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _x$[ebp], ecx
; Line 1230
	push	0
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_t1_builder_add_point
	add	esp, 16					; 00000010H
; Line 1231
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _x$[ebp], ecx
; Line 1232
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _y$[ebp], ecx
; Line 1233
	push	0
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_t1_builder_add_point
	add	esp, 16					; 00000010H
; Line 1234
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _y$[ebp], edx
; Line 1235
	push	1
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_add_point
	add	esp, 16					; 00000010H
; Line 1236
	jmp	$LN187@t1_decoder
$LN117@t1_decoder:
; Line 1239
	mov	eax, 4
	imul	ecx, eax, 40
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN116@t1_decoder
	push	OFFSET $SG9651
	call	_FT_Message
	add	esp, 4
$LN116@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN117@t1_decoder
; Line 1242
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_start_point
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN113@t1_decoder
; Line 1243
	jmp	$Fail$387
$LN113@t1_decoder:
; Line 1245
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _x$[ebp], eax
; Line 1246
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _y$[ebp], eax
$Add_Line$388:
; Line 1250
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_t1_builder_add_point1
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN112@t1_decoder
; Line 1251
	jmp	$Fail$387
$LN112@t1_decoder:
; Line 1252
	jmp	$LN187@t1_decoder
$LN110@t1_decoder:
; Line 1255
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN109@t1_decoder
	push	OFFSET $SG9659
	call	_FT_Message
	add	esp, 4
$LN109@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN110@t1_decoder
; Line 1257
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _x$[ebp], ecx
; Line 1258
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _y$[ebp], ecx
; Line 1259
	mov	edx, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [edx+1400], 0
	jne	SHORT $LN106@t1_decoder
; Line 1261
	mov	eax, DWORD PTR _builder$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN105@t1_decoder
; Line 1262
	jmp	$Syntax_Error$384
$LN105@t1_decoder:
; Line 1263
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+64], 2
$LN106@t1_decoder:
; Line 1265
	jmp	$LN187@t1_decoder
$LN103@t1_decoder:
; Line 1268
	mov	edx, 4
	imul	eax, edx, 40
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN102@t1_decoder
	push	OFFSET $SG9667
	call	_FT_Message
	add	esp, 4
$LN102@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN103@t1_decoder
; Line 1273
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_t1_builder_start_point
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN98@t1_decoder
	push	3
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_check_points
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN99@t1_decoder
$LN98@t1_decoder:
; Line 1274
	jmp	$Fail$387
$LN99@t1_decoder:
; Line 1276
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _x$[ebp], eax
; Line 1277
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _y$[ebp], eax
; Line 1278
	push	0
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_t1_builder_add_point
	add	esp, 16					; 00000010H
; Line 1280
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _x$[ebp], eax
; Line 1281
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _y$[ebp], ecx
; Line 1282
	push	0
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_t1_builder_add_point
	add	esp, 16					; 00000010H
; Line 1284
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _x$[ebp], ecx
; Line 1285
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _y$[ebp], edx
; Line 1286
	push	1
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_add_point
	add	esp, 16					; 00000010H
; Line 1287
	jmp	$LN187@t1_decoder
$LN96@t1_decoder:
; Line 1290
	mov	eax, 4
	imul	ecx, eax, 40
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN95@t1_decoder
	push	OFFSET $SG9675
	call	_FT_Message
	add	esp, 4
$LN95@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN96@t1_decoder
; Line 1295
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_start_point
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN91@t1_decoder
	push	3
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_t1_builder_check_points
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN92@t1_decoder
$LN91@t1_decoder:
; Line 1296
	jmp	$Fail$387
$LN92@t1_decoder:
; Line 1298
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _y$[ebp], ecx
; Line 1299
	push	0
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_t1_builder_add_point
	add	esp, 16					; 00000010H
; Line 1300
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _x$[ebp], ecx
; Line 1301
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _y$[ebp], ecx
; Line 1302
	push	0
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_t1_builder_add_point
	add	esp, 16					; 00000010H
; Line 1303
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _x$[ebp], edx
; Line 1304
	push	1
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_add_point
	add	esp, 16					; 00000010H
; Line 1305
	jmp	$LN187@t1_decoder
$LN89@t1_decoder:
; Line 1308
	mov	eax, 4
	imul	ecx, eax, 40
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN88@t1_decoder
	push	OFFSET $SG9683
	call	_FT_Message
	add	esp, 4
$LN88@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN89@t1_decoder
; Line 1311
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_start_point
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN85@t1_decoder
; Line 1312
	jmp	$Fail$387
$LN85@t1_decoder:
; Line 1314
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _y$[ebp], eax
; Line 1315
	jmp	$Add_Line$388
$LN83@t1_decoder:
; Line 1318
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN82@t1_decoder
	push	OFFSET $SG9690
	call	_FT_Message
	add	esp, 4
$LN82@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN83@t1_decoder
; Line 1320
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _y$[ebp], ecx
; Line 1321
	mov	edx, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [edx+1400], 0
	jne	SHORT $LN79@t1_decoder
; Line 1323
	mov	eax, DWORD PTR _builder$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN78@t1_decoder
; Line 1324
	jmp	$Syntax_Error$384
$LN78@t1_decoder:
; Line 1325
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+64], 2
$LN79@t1_decoder:
; Line 1327
	jmp	$LN187@t1_decoder
$LN76@t1_decoder:
; Line 1330
	mov	edx, 4
	imul	eax, edx, 40
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN75@t1_decoder
	push	OFFSET $SG9698
	call	_FT_Message
	add	esp, 4
$LN75@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN76@t1_decoder
; Line 1335
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1336
	mov	edx, DWORD PTR _top$24[ebp]
	add	edx, 4
	mov	DWORD PTR _top$24[ebp], edx
; Line 1338
	mov	BYTE PTR _large_int$[ebp], 0
; Line 1339
	jmp	$LN187@t1_decoder
$LN71@t1_decoder:
; Line 1346
	mov	eax, 4
	imul	ecx, eax, 40
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN70@t1_decoder
	push	OFFSET $SG9705
	call	_FT_Message
	add	esp, 4
$LN70@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN71@t1_decoder
; Line 1348
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	sar	eax, 16					; 00000010H
	movsx	ecx, ax
	mov	DWORD PTR _idx$2[ebp], ecx
; Line 1349
	cmp	DWORD PTR _idx$2[ebp], 0
	jl	SHORT $LN66@t1_decoder
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _idx$2[ebp]
	cmp	eax, DWORD PTR [edx+1364]
	jl	SHORT $LN67@t1_decoder
$LN66@t1_decoder:
; Line 1352
	push	OFFSET $SG9711
	call	_FT_Message
	add	esp, 4
; Line 1353
	jmp	$Syntax_Error$384
$LN67@t1_decoder:
; Line 1356
	mov	ecx, DWORD PTR _decoder$[ebp]
	add	ecx, 1140				; 00000474H
	mov	eax, DWORD PTR _zone$[ebp]
	sub	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN65@t1_decoder
; Line 1359
	push	OFFSET $SG9713
	call	_FT_Message
	add	esp, 4
; Line 1360
	jmp	$Syntax_Error$384
$LN65@t1_decoder:
; Line 1363
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR _ip$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1365
	mov	ecx, DWORD PTR _zone$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _zone$[ebp], ecx
; Line 1370
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+1368]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR _idx$2[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+4], eax
; Line 1372
	mov	ecx, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [ecx+1372], 0
	je	SHORT $LN64@t1_decoder
; Line 1373
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+1372]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _idx$2[ebp]
	add	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 1374
	jmp	SHORT $LN63@t1_decoder
$LN64@t1_decoder:
; Line 1378
	mov	ecx, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [ecx+1360], 0
	jl	SHORT $LN372@t1_decoder
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+1360]
	mov	DWORD PTR tv1038[ebp], eax
	jmp	SHORT $LN373@t1_decoder
$LN372@t1_decoder:
	mov	DWORD PTR tv1038[ebp], 0
$LN373@t1_decoder:
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR tv1038[ebp]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 1379
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+1368]
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR _idx$2[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR [eax+8], edx
$LN63@t1_decoder:
; Line 1382
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR _zone$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 1384
	mov	eax, DWORD PTR _zone$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN62@t1_decoder
; Line 1387
	push	OFFSET $SG9717
	call	_FT_Message
	add	esp, 4
; Line 1388
	jmp	$Syntax_Error$384
$LN62@t1_decoder:
; Line 1391
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [ecx+1344], edx
; Line 1392
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ip$[ebp], ecx
; Line 1393
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _limit$[ebp], eax
; Line 1394
	jmp	$LN187@t1_decoder
$LN60@t1_decoder:
; Line 1398
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN59@t1_decoder
	push	OFFSET $SG9723
	call	_FT_Message
	add	esp, 4
$LN59@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN60@t1_decoder
; Line 1400
	cmp	DWORD PTR _known_othersubr_result_cnt$[ebp], 0
	jle	SHORT $LN56@t1_decoder
; Line 1402
	mov	ecx, DWORD PTR _known_othersubr_result_cnt$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _known_othersubr_result_cnt$[ebp], ecx
; Line 1404
	jmp	$LN187@t1_decoder
$LN56@t1_decoder:
; Line 1407
	cmp	DWORD PTR _unknown_othersubr_result_cnt$[ebp], 0
	jne	SHORT $LN55@t1_decoder
; Line 1410
	push	OFFSET $SG9726
	call	_FT_Message
	add	esp, 4
; Line 1411
	jmp	$Syntax_Error$384
$LN55@t1_decoder:
; Line 1414
	mov	edx, DWORD PTR _unknown_othersubr_result_cnt$[ebp]
	sub	edx, 1
	mov	DWORD PTR _unknown_othersubr_result_cnt$[ebp], edx
; Line 1415
	mov	eax, DWORD PTR _top$24[ebp]
	add	eax, 4
	mov	DWORD PTR _top$24[ebp], eax
; Line 1416
	jmp	$LN187@t1_decoder
$LN53@t1_decoder:
; Line 1419
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN52@t1_decoder
	push	OFFSET $SG9732
	call	_FT_Message
	add	esp, 4
$LN52@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN53@t1_decoder
; Line 1421
	mov	ecx, DWORD PTR _decoder$[ebp]
	add	ecx, 1140				; 00000474H
	cmp	DWORD PTR _zone$[ebp], ecx
	ja	SHORT $LN49@t1_decoder
; Line 1424
	push	OFFSET $SG9734
	call	_FT_Message
	add	esp, 4
; Line 1425
	jmp	$Syntax_Error$384
$LN49@t1_decoder:
; Line 1428
	mov	edx, DWORD PTR _zone$[ebp]
	sub	edx, 12					; 0000000cH
	mov	DWORD PTR _zone$[ebp], edx
; Line 1429
	mov	eax, DWORD PTR _zone$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ip$[ebp], ecx
; Line 1430
	mov	edx, DWORD PTR _zone$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _limit$[ebp], eax
; Line 1431
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _zone$[ebp]
	mov	DWORD PTR [ecx+1344], edx
; Line 1432
	jmp	$LN187@t1_decoder
$LN47@t1_decoder:
; Line 1435
	mov	eax, 4
	imul	ecx, eax, 40
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN46@t1_decoder
	push	OFFSET $SG9740
	call	_FT_Message
	add	esp, 4
$LN46@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN47@t1_decoder
; Line 1437
	jmp	$LN187@t1_decoder
$LN42@t1_decoder:
; Line 1440
	mov	eax, 4
	imul	ecx, eax, 40
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN41@t1_decoder
	push	OFFSET $SG9746
	call	_FT_Message
	add	esp, 4
$LN41@t1_decoder:
	xor	edx, edx
	jne	SHORT $LN42@t1_decoder
; Line 1443
	cmp	DWORD PTR _hinter$[ebp], 0
	je	SHORT $LN38@t1_decoder
; Line 1446
	mov	esi, esp
	mov	eax, DWORD PTR _top$24[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _hinter$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hinter$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@t1_decoder:
; Line 1448
	jmp	$LN187@t1_decoder
$LN36@t1_decoder:
; Line 1451
	mov	edx, 4
	imul	eax, edx, 40
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN35@t1_decoder
	push	OFFSET $SG9753
	call	_FT_Message
	add	esp, 4
$LN35@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN36@t1_decoder
; Line 1454
	cmp	DWORD PTR _hinter$[ebp], 0
	je	SHORT $LN32@t1_decoder
; Line 1455
	mov	esi, esp
	mov	edx, DWORD PTR _top$24[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _hinter$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _hinter$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN32@t1_decoder:
; Line 1456
	jmp	$LN187@t1_decoder
$LN30@t1_decoder:
; Line 1459
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN29@t1_decoder
	push	OFFSET $SG9760
	call	_FT_Message
	add	esp, 4
$LN29@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN30@t1_decoder
; Line 1462
	cmp	DWORD PTR _hinter$[ebp], 0
	je	SHORT $LN26@t1_decoder
; Line 1464
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	add	ecx, DWORD PTR _orig_x$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [edx+eax], ecx
; Line 1465
	mov	esi, esp
	mov	eax, DWORD PTR _top$24[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hinter$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hinter$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@t1_decoder:
; Line 1467
	jmp	$LN187@t1_decoder
$LN24@t1_decoder:
; Line 1470
	mov	edx, 4
	imul	eax, edx, 40
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN23@t1_decoder
	push	OFFSET $SG9767
	call	_FT_Message
	add	esp, 4
$LN23@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN24@t1_decoder
; Line 1473
	cmp	DWORD PTR _hinter$[ebp], 0
	je	$LN20@t1_decoder
; Line 1475
	mov	edx, DWORD PTR _orig_x$[ebp]
	mov	DWORD PTR _dx$1[ebp], edx
; Line 1478
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	add	eax, DWORD PTR _dx$1[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 1479
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _top$24[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	add	ecx, DWORD PTR _dx$1[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 1480
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _top$24[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	add	eax, DWORD PTR _dx$1[ebp]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 1481
	mov	esi, esp
	mov	eax, DWORD PTR _top$24[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hinter$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hinter$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@t1_decoder:
; Line 1483
	jmp	$LN187@t1_decoder
$LN18@t1_decoder:
; Line 1486
	mov	edx, 4
	imul	eax, edx, 40
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN17@t1_decoder
	push	OFFSET $SG9775
	call	_FT_Message
	add	esp, 4
$LN17@t1_decoder:
	xor	ecx, ecx
	jne	SHORT $LN18@t1_decoder
; Line 1512
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _x$[ebp], edx
; Line 1513
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _top$24[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _y$[ebp], edx
; Line 1514
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax+1400], 0
; Line 1515
	jmp	SHORT $LN187@t1_decoder
$LN13@t1_decoder:
; Line 1518
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN12@t1_decoder
	push	OFFSET $SG9781
	call	_FT_Message
	add	esp, 4
$LN12@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN13@t1_decoder
; Line 1520
	jmp	SHORT $LN187@t1_decoder
$LN9@t1_decoder:
; Line 1524
	mov	ecx, DWORD PTR _op$23[ebp]
	push	ecx
	push	OFFSET $SG9783
	call	_FT_Message
	add	esp, 8
; Line 1525
	jmp	SHORT $Syntax_Error$384
$LN187@t1_decoder:
; Line 1533
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _top$24[ebp]
	mov	DWORD PTR [edx+1136], eax
$LN8@t1_decoder:
; Line 1536
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN7@t1_decoder
	push	OFFSET $SG9788
	call	_FT_Message
	add	esp, 4
$LN7@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN8@t1_decoder
; Line 1537
	mov	BYTE PTR _bol$[ebp], 1
$LN271@t1_decoder:
; Line 1542
	jmp	$LN350@t1_decoder
$LN4@t1_decoder:
; Line 1544
	mov	ecx, 4
	imul	edx, ecx, 40
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN3@t1_decoder
	push	OFFSET $SG9793
	call	_FT_Message
	add	esp, 4
$LN3@t1_decoder:
	xor	eax, eax
	jne	SHORT $LN4@t1_decoder
$Fail$387:
; Line 1547
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN362@t1_decoder
$Syntax_Error$384:
; Line 1550
	push	OFFSET $SG9794
	push	1550					; 0000060eH
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
	jmp	SHORT $LN362@t1_decoder
$Stack_Underflow$385:
; Line 1553
	push	OFFSET $SG9795
	push	1553					; 00000611H
	push	161					; 000000a1H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 161				; 000000a1H
$LN362@t1_decoder:
; Line 1554
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN379@t1_decoder
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN379@t1_decoder:
	DD	1
	DD	$LN378@t1_decoder
$LN378@t1_decoder:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN377@t1_decoder
$LN377@t1_decoder:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
	npad	3
$LN380@t1_decoder:
	DD	$LN337@t1_decoder
	DD	$LN336@t1_decoder
	DD	$LN335@t1_decoder
	DD	$LN334@t1_decoder
	DD	$LN333@t1_decoder
	DD	$LN332@t1_decoder
	DD	$LN331@t1_decoder
	DD	$LN330@t1_decoder
	DD	$LN329@t1_decoder
	DD	$LN328@t1_decoder
	DD	$LN320@t1_decoder
	DD	$LN327@t1_decoder
	DD	$LN326@t1_decoder
	DD	$LN325@t1_decoder
	DD	$LN324@t1_decoder
	DD	$LN323@t1_decoder
	DD	$LN322@t1_decoder
	DD	$LN321@t1_decoder
	DD	$LN306@t1_decoder
	DD	$LN298@t1_decoder
$LN374@t1_decoder:
	DB	0
	DB	19					; 00000013H
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	18					; 00000012H
	npad	1
$LN381@t1_decoder:
	DD	$LN316@t1_decoder
	DD	$LN315@t1_decoder
	DD	$LN314@t1_decoder
	DD	$LN313@t1_decoder
	DD	$LN312@t1_decoder
	DD	$LN311@t1_decoder
	DD	$LN310@t1_decoder
	DD	$LN309@t1_decoder
	DD	$LN308@t1_decoder
	DD	$LN307@t1_decoder
$LN375@t1_decoder:
	DB	0
	DB	1
	DB	2
	DB	9
	DB	9
	DB	9
	DB	3
	DB	4
	DB	9
	DB	9
	DB	9
	DB	9
	DB	5
	DB	9
	DB	9
	DB	9
	DB	6
	DB	7
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	8
	npad	2
$LN382@t1_decoder:
	DD	$LN261@t1_decoder
	DD	$LN257@t1_decoder
	DD	$LN253@t1_decoder
	DD	$LN249@t1_decoder
	DD	$LN246@t1_decoder
	DD	$LN245@t1_decoder
	DD	$LN236@t1_decoder
	DD	$LN231@t1_decoder
	DD	$LN229@t1_decoder
	DD	$LN227@t1_decoder
	DD	$LN225@t1_decoder
	DD	$LN222@t1_decoder
	DD	$LN217@t1_decoder
	DD	$LN212@t1_decoder
	DD	$LN209@t1_decoder
	DD	$LN205@t1_decoder
$LN376@t1_decoder:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	4
	DB	4
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	15					; 0000000fH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	npad	3
$LN383@t1_decoder:
	DD	$LN185@t1_decoder
	DD	$LN157@t1_decoder
	DD	$LN152@t1_decoder
	DD	$LN150@t1_decoder
	DD	$LN144@t1_decoder
	DD	$LN137@t1_decoder
	DD	$LN131@t1_decoder
	DD	$LN124@t1_decoder
	DD	$LN117@t1_decoder
	DD	$LN110@t1_decoder
	DD	$LN103@t1_decoder
	DD	$LN96@t1_decoder
	DD	$LN89@t1_decoder
	DD	$LN83@t1_decoder
	DD	$LN47@t1_decoder
	DD	$LN42@t1_decoder
	DD	$LN36@t1_decoder
	DD	$LN30@t1_decoder
	DD	$LN24@t1_decoder
	DD	$LN76@t1_decoder
	DD	$LN9@t1_decoder
	DD	$LN71@t1_decoder
	DD	$LN60@t1_decoder
	DD	$LN53@t1_decoder
	DD	$LN18@t1_decoder
	DD	$LN13@t1_decoder
_t1_decoder_parse_charstrings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_glyph$ = 12						; size = 4
_t1_decoder_parse_glyph PROC
; File d:\mozilla\modules\freetype2\src\psaux\t1decode.c
; Line 1561
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1562
	mov	esi, esp
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+1472]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1563
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t1_decoder_parse_glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -5						; size = 1
_cur$ = -4						; size = 4
_acur$ = 8						; size = 4
_limit$ = 12						; size = 4
_ps_tobool PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 992
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 993
	mov	eax, DWORD PTR _acur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 994
	mov	BYTE PTR _result$[ebp], 0
; Line 1002
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 3
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN3@ps_tobool
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 116				; 00000074H
	jne	SHORT $LN3@ps_tobool
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 114				; 00000072H
	jne	SHORT $LN3@ps_tobool
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 117				; 00000075H
	jne	SHORT $LN3@ps_tobool
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 101				; 00000065H
	jne	SHORT $LN3@ps_tobool
; Line 1004
	mov	BYTE PTR _result$[ebp], 1
; Line 1005
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 5
	mov	DWORD PTR _cur$[ebp], edx
; Line 1007
	jmp	SHORT $LN2@ps_tobool
$LN3@ps_tobool:
; Line 1012
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 4
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN2@ps_tobool
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 102				; 00000066H
	jne	SHORT $LN2@ps_tobool
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 97					; 00000061H
	jne	SHORT $LN2@ps_tobool
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 108				; 0000006cH
	jne	SHORT $LN2@ps_tobool
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 115				; 00000073H
	jne	SHORT $LN2@ps_tobool
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 101				; 00000065H
	jne	SHORT $LN2@ps_tobool
; Line 1014
	mov	BYTE PTR _result$[ebp], 0
; Line 1015
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 6
	mov	DWORD PTR _cur$[ebp], eax
$LN2@ps_tobool:
; Line 1018
	mov	ecx, DWORD PTR _acur$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1019
	movzx	eax, BYTE PTR _result$[ebp]
; Line 1020
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_tobool ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv85 = -40						; size = 4
_old_cur$1 = -36					; size = 4
_dummy$2 = -28						; size = 4
_ender$ = -18						; size = 1
_c$ = -17						; size = 1
_count$ = -16						; size = 4
_cur$ = -8						; size = 4
_acur$ = 8						; size = 4
_limit$ = 12						; size = 4
_max_values$ = 16					; size = 4
_values$ = 20						; size = 4
_power_ten$ = 24					; size = 4
_ps_tofixedarray PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 859
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 860
	mov	eax, DWORD PTR _acur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 861
	mov	DWORD PTR _count$[ebp], 0
; Line 865
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN13@ps_tofixed
; Line 866
	jmp	$Exit$22
$LN13@ps_tofixed:
; Line 870
	mov	eax, DWORD PTR _cur$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
; Line 871
	mov	BYTE PTR _ender$[ebp], 0
; Line 873
	movzx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 91					; 0000005bH
	jne	SHORT $LN12@ps_tofixed
; Line 874
	mov	BYTE PTR _ender$[ebp], 93		; 0000005dH
	jmp	SHORT $LN11@ps_tofixed
$LN12@ps_tofixed:
; Line 875
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 123				; 0000007bH
	jne	SHORT $LN11@ps_tofixed
; Line 876
	mov	BYTE PTR _ender$[ebp], 125		; 0000007dH
$LN11@ps_tofixed:
; Line 878
	movzx	ecx, BYTE PTR _ender$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@ps_tofixed
; Line 879
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
$LN8@ps_tofixed:
; Line 882
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$Exit$22
; Line 889
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_skip_spaces
	add	esp, 8
; Line 890
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN6@ps_tofixed
; Line 891
	jmp	$Exit$22
$LN6@ps_tofixed:
; Line 893
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _ender$[ebp]
	cmp	edx, eax
	jne	SHORT $LN5@ps_tofixed
; Line 895
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
; Line 896
	jmp	SHORT $Exit$22
$LN5@ps_tofixed:
; Line 899
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _old_cur$1[ebp], edx
; Line 901
	cmp	DWORD PTR _values$[ebp], 0
	je	SHORT $LN4@ps_tofixed
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _max_values$[ebp]
	jl	SHORT $LN4@ps_tofixed
; Line 902
	jmp	SHORT $Exit$22
$LN4@ps_tofixed:
; Line 907
	cmp	DWORD PTR _values$[ebp], 0
	je	SHORT $LN16@ps_tofixed
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _values$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN17@ps_tofixed
$LN16@ps_tofixed:
	lea	ecx, DWORD PTR _dummy$2[ebp]
	mov	DWORD PTR tv85[ebp], ecx
$LN17@ps_tofixed:
	mov	edx, DWORD PTR _power_ten$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_PS_Conv_ToFixed
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR [edx], eax
; Line 909
	mov	eax, DWORD PTR _old_cur$1[ebp]
	cmp	eax, DWORD PTR _cur$[ebp]
	jne	SHORT $LN3@ps_tofixed
; Line 911
	mov	DWORD PTR _count$[ebp], -1
; Line 912
	jmp	SHORT $Exit$22
; Line 914
	jmp	SHORT $LN2@ps_tofixed
$LN3@ps_tofixed:
; Line 915
	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
$LN2@ps_tofixed:
; Line 917
	movzx	edx, BYTE PTR _ender$[ebp]
	test	edx, edx
	jne	SHORT $LN1@ps_tofixed
; Line 918
	jmp	SHORT $Exit$22
$LN1@ps_tofixed:
; Line 919
	jmp	$LN8@ps_tofixed
$Exit$22:
; Line 922
	mov	eax, DWORD PTR _acur$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 923
	mov	eax, DWORD PTR _count$[ebp]
; Line 924
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@ps_tofixed
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@ps_tofixed:
	DD	2
	DD	$LN20@ps_tofixed
$LN20@ps_tofixed:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@ps_tofixed
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN19@ps_tofixed
$LN19@ps_tofixed:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN18@ps_tofixed:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
_ps_tofixedarray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv85 = -40						; size = 4
_old_cur$1 = -36					; size = 4
_dummy$2 = -28						; size = 2
_ender$ = -18						; size = 1
_c$ = -17						; size = 1
_count$ = -16						; size = 4
_cur$ = -8						; size = 4
_acur$ = 8						; size = 4
_limit$ = 12						; size = 4
_max_coords$ = 16					; size = 4
_coords$ = 20						; size = 4
_ps_tocoordarray PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 779
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 780
	mov	eax, DWORD PTR _acur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 781
	mov	DWORD PTR _count$[ebp], 0
; Line 785
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN13@ps_tocoord
; Line 786
	jmp	$Exit$22
$LN13@ps_tocoord:
; Line 790
	mov	eax, DWORD PTR _cur$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
; Line 791
	mov	BYTE PTR _ender$[ebp], 0
; Line 793
	movzx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 91					; 0000005bH
	jne	SHORT $LN12@ps_tocoord
; Line 794
	mov	BYTE PTR _ender$[ebp], 93		; 0000005dH
	jmp	SHORT $LN11@ps_tocoord
$LN12@ps_tocoord:
; Line 795
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 123				; 0000007bH
	jne	SHORT $LN11@ps_tocoord
; Line 796
	mov	BYTE PTR _ender$[ebp], 125		; 0000007dH
$LN11@ps_tocoord:
; Line 798
	movzx	ecx, BYTE PTR _ender$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@ps_tocoord
; Line 799
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
$LN8@ps_tocoord:
; Line 802
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$Exit$22
; Line 809
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_skip_spaces
	add	esp, 8
; Line 810
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN6@ps_tocoord
; Line 811
	jmp	$Exit$22
$LN6@ps_tocoord:
; Line 813
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _ender$[ebp]
	cmp	edx, eax
	jne	SHORT $LN5@ps_tocoord
; Line 815
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
; Line 816
	jmp	SHORT $Exit$22
$LN5@ps_tocoord:
; Line 819
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _old_cur$1[ebp], edx
; Line 821
	cmp	DWORD PTR _coords$[ebp], 0
	je	SHORT $LN4@ps_tocoord
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _max_coords$[ebp]
	jl	SHORT $LN4@ps_tocoord
; Line 822
	jmp	SHORT $Exit$22
$LN4@ps_tocoord:
; Line 827
	cmp	DWORD PTR _coords$[ebp], 0
	je	SHORT $LN16@ps_tocoord
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _coords$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN17@ps_tocoord
$LN16@ps_tocoord:
	lea	ecx, DWORD PTR _dummy$2[ebp]
	mov	DWORD PTR tv85[ebp], ecx
$LN17@ps_tocoord:
	push	0
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	lea	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_PS_Conv_ToFixed
	add	esp, 12					; 0000000cH
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR tv85[ebp]
	mov	WORD PTR [ecx], ax
; Line 829
	mov	edx, DWORD PTR _old_cur$1[ebp]
	cmp	edx, DWORD PTR _cur$[ebp]
	jne	SHORT $LN3@ps_tocoord
; Line 831
	mov	DWORD PTR _count$[ebp], -1
; Line 832
	jmp	SHORT $Exit$22
; Line 834
	jmp	SHORT $LN2@ps_tocoord
$LN3@ps_tocoord:
; Line 835
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN2@ps_tocoord:
; Line 837
	movzx	ecx, BYTE PTR _ender$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@ps_tocoord
; Line 838
	jmp	SHORT $Exit$22
$LN1@ps_tocoord:
; Line 839
	jmp	$LN8@ps_tocoord
$Exit$22:
; Line 842
	mov	edx, DWORD PTR _acur$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], eax
; Line 843
	mov	eax, DWORD PTR _count$[ebp]
; Line 844
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@ps_tocoord
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@ps_tocoord:
	DD	2
	DD	$LN20@ps_tocoord
$LN20@ps_tocoord:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@ps_tocoord
	DD	-28					; ffffffe4H
	DD	2
	DD	$LN19@ps_tocoord
$LN19@ps_tocoord:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN18@ps_tocoord:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
_ps_tocoordarray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -24						; size = 4
_error$ = -20						; size = 4
_embed$ = -16						; size = 4
_cur$ = -8						; size = 4
_acur$ = 8						; size = 4
_limit$ = 12						; size = 4
_skip_procedure PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 456
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 458
	mov	DWORD PTR _embed$[ebp], 0
; Line 459
	mov	DWORD PTR _error$[ebp], 0
$LN16@skip_proce:
; Line 462
	mov	eax, DWORD PTR _acur$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 123				; 0000007bH
	je	SHORT $LN15@skip_proce
	push	OFFSET $SG8439
	push	462					; 000001ceH
	push	OFFSET $SG8440
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN15@skip_proce:
	xor	eax, eax
	jne	SHORT $LN16@skip_proce
; Line 464
	mov	ecx, DWORD PTR _acur$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
	jmp	SHORT $LN12@skip_proce
$LN11@skip_proce:
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax
$LN12@skip_proce:
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$end$24
	cmp	DWORD PTR _error$[ebp], 0
	jne	$end$24
; Line 466
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR tv75[ebp]
	sub	ecx, 37					; 00000025H
	mov	DWORD PTR tv75[ebp], ecx
	cmp	DWORD PTR tv75[ebp], 88			; 00000058H
	ja	SHORT $LN8@skip_proce
	mov	edx, DWORD PTR tv75[ebp]
	movzx	eax, BYTE PTR $LN19@skip_proce[edx]
	jmp	DWORD PTR $LN23@skip_proce[eax*4]
$LN7@skip_proce:
; Line 469
	mov	ecx, DWORD PTR _embed$[ebp]
	add	ecx, 1
	mov	DWORD PTR _embed$[ebp], ecx
; Line 470
	jmp	SHORT $LN8@skip_proce
$LN6@skip_proce:
; Line 473
	mov	edx, DWORD PTR _embed$[ebp]
	sub	edx, 1
	mov	DWORD PTR _embed$[ebp], edx
; Line 474
	jne	SHORT $LN5@skip_proce
; Line 476
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax
; Line 477
	jmp	SHORT $end$24
$LN5@skip_proce:
; Line 479
	jmp	SHORT $LN8@skip_proce
$LN4@skip_proce:
; Line 482
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_skip_literal_string
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 483
	jmp	SHORT $LN8@skip_proce
$LN3@skip_proce:
; Line 486
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_skip_string
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 487
	jmp	SHORT $LN8@skip_proce
$LN2@skip_proce:
; Line 490
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	lea	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_skip_comment
	add	esp, 8
$LN8@skip_proce:
; Line 493
	jmp	$LN11@skip_proce
$end$24:
; Line 496
	cmp	DWORD PTR _embed$[ebp], 0
	je	SHORT $LN1@skip_proce
; Line 497
	push	OFFSET $SG8456
	push	497					; 000001f1H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$LN1@skip_proce:
; Line 499
	mov	ecx, DWORD PTR _acur$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 501
	mov	eax, DWORD PTR _error$[ebp]
; Line 502
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@skip_proce
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@skip_proce:
	DD	1
	DD	$LN21@skip_proce
$LN21@skip_proce:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN20@skip_proce
$LN20@skip_proce:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
$LN23@skip_proce:
	DD	$LN2@skip_proce
	DD	$LN4@skip_proce
	DD	$LN3@skip_proce
	DD	$LN7@skip_proce
	DD	$LN6@skip_proce
	DD	$LN8@skip_proce
$LN19@skip_proce:
	DB	0
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	4
_skip_procedure ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_err$ = -16						; size = 4
_cur$ = -8						; size = 4
_acur$ = 8						; size = 4
_limit$ = 12						; size = 4
_skip_string PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 417
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 418
	mov	eax, DWORD PTR _acur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 419
	mov	DWORD PTR _err$[ebp], 0
$LN9@skip_strin:
; Line 422
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN8@skip_strin
; Line 425
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_skip_spaces
	add	esp, 8
; Line 426
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN7@skip_strin
; Line 427
	jmp	SHORT $LN8@skip_strin
$LN7@skip_strin:
; Line 429
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN5@skip_strin
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jle	SHORT $LN6@skip_strin
$LN5@skip_strin:
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN4@skip_strin
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 70					; 00000046H
	jle	SHORT $LN6@skip_strin
$LN4@skip_strin:
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN3@skip_strin
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 102				; 00000066H
	jle	SHORT $LN6@skip_strin
$LN3@skip_strin:
; Line 430
	jmp	SHORT $LN8@skip_strin
$LN6@skip_strin:
; Line 431
	jmp	SHORT $LN9@skip_strin
$LN8@skip_strin:
; Line 433
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN2@skip_strin
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 62					; 0000003eH
	je	SHORT $LN2@skip_strin
; Line 435
	push	OFFSET $SG8423
	call	_FT_Message
	add	esp, 4
; Line 436
	push	OFFSET $SG8424
	push	436					; 000001b4H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _err$[ebp], eax
; Line 438
	jmp	SHORT $LN1@skip_strin
$LN2@skip_strin:
; Line 439
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
$LN1@skip_strin:
; Line 441
	mov	edx, DWORD PTR _acur$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], eax
; Line 442
	mov	eax, DWORD PTR _err$[ebp]
; Line 443
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@skip_strin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@skip_strin:
	DD	1
	DD	$LN13@skip_strin
$LN13@skip_strin:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN12@skip_strin
$LN12@skip_strin:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
_skip_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -24						; size = 4
_c$1 = -17						; size = 1
_i$ = -16						; size = 4
_error$ = -12						; size = 4
_embed$ = -8						; size = 4
_cur$ = -4						; size = 4
_acur$ = 8						; size = 4
_limit$ = 12						; size = 4
_skip_literal_string PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 341
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 342
	mov	eax, DWORD PTR _acur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 343
	mov	DWORD PTR _embed$[ebp], 0
; Line 344
	mov	DWORD PTR _error$[ebp], 3
$LN18@skip_liter:
; Line 348
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	$LN17@skip_liter
; Line 350
	mov	eax, DWORD PTR _cur$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$1[ebp], cl
; Line 353
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
; Line 355
	movzx	eax, BYTE PTR _c$1[ebp]
	cmp	eax, 92					; 0000005cH
	jne	$LN16@skip_liter
; Line 364
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jne	SHORT $LN15@skip_liter
; Line 366
	jmp	$LN17@skip_liter
$LN15@skip_liter:
; Line 368
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR tv70[ebp]
	sub	ecx, 40					; 00000028H
	mov	DWORD PTR tv70[ebp], ecx
	cmp	DWORD PTR tv70[ebp], 76			; 0000004cH
	ja	SHORT $LN11@skip_liter
	mov	edx, DWORD PTR tv70[ebp]
	movzx	eax, BYTE PTR $LN21@skip_liter[edx]
	jmp	DWORD PTR $LN22@skip_liter[eax*4]
$LN12@skip_liter:
; Line 379
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
; Line 380
	jmp	SHORT $LN13@skip_liter
$LN11@skip_liter:
; Line 384
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@skip_liter
$LN9@skip_liter:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@skip_liter:
	cmp	DWORD PTR _i$[ebp], 3
	jae	SHORT $LN13@skip_liter
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN13@skip_liter
; Line 386
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN6@skip_liter
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 55					; 00000037H
	jle	SHORT $LN7@skip_liter
$LN6@skip_liter:
; Line 387
	jmp	SHORT $LN13@skip_liter
$LN7@skip_liter:
; Line 389
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
; Line 390
	jmp	SHORT $LN9@skip_liter
$LN13@skip_liter:
; Line 393
	jmp	SHORT $LN5@skip_liter
$LN16@skip_liter:
	movzx	eax, BYTE PTR _c$1[ebp]
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN4@skip_liter
; Line 394
	mov	ecx, DWORD PTR _embed$[ebp]
	add	ecx, 1
	mov	DWORD PTR _embed$[ebp], ecx
	jmp	SHORT $LN5@skip_liter
$LN4@skip_liter:
; Line 395
	movzx	edx, BYTE PTR _c$1[ebp]
	cmp	edx, 41					; 00000029H
	jne	SHORT $LN5@skip_liter
; Line 397
	mov	eax, DWORD PTR _embed$[ebp]
	sub	eax, 1
	mov	DWORD PTR _embed$[ebp], eax
; Line 398
	jne	SHORT $LN5@skip_liter
; Line 400
	mov	DWORD PTR _error$[ebp], 0
; Line 401
	jmp	SHORT $LN17@skip_liter
$LN5@skip_liter:
; Line 404
	jmp	$LN18@skip_liter
$LN17@skip_liter:
; Line 406
	mov	ecx, DWORD PTR _acur$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 408
	mov	eax, DWORD PTR _error$[ebp]
; Line 409
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@skip_liter:
	DD	$LN12@skip_liter
	DD	$LN11@skip_liter
$LN21@skip_liter:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	0
_skip_literal_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_acur$ = 8						; size = 4
_limit$ = 12						; size = 4
_skip_spaces PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 311
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 312
	mov	eax, DWORD PTR _acur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN5@skip_space:
; Line 315
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN4@skip_space
; Line 317
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN3@skip_space
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN3@skip_space
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	je	SHORT $LN3@skip_space
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	je	SHORT $LN3@skip_space
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 12					; 0000000cH
	je	SHORT $LN3@skip_space
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@skip_space
; Line 319
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 37					; 00000025H
	jne	SHORT $LN2@skip_space
; Line 321
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	lea	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_skip_comment
	add	esp, 8
; Line 322
	jmp	SHORT $LN3@skip_space
$LN2@skip_space:
; Line 323
	jmp	SHORT $LN4@skip_space
$LN3@skip_space:
; Line 325
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
; Line 326
	jmp	SHORT $LN5@skip_space
$LN4@skip_space:
; Line 328
	mov	edx, DWORD PTR _acur$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], eax
; Line 329
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@skip_space
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@skip_space:
	DD	1
	DD	$LN9@skip_space
$LN9@skip_space:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@skip_space
$LN8@skip_space:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
_skip_spaces ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cur$ = -4						; size = 4
_acur$ = 8						; size = 4
_limit$ = 12						; size = 4
_skip_comment PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 293
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 294
	mov	eax, DWORD PTR _acur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN4@skip_comme:
; Line 297
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN3@skip_comme
; Line 299
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN1@skip_comme
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN2@skip_comme
$LN1@skip_comme:
; Line 300
	jmp	SHORT $LN3@skip_comme
$LN2@skip_comme:
; Line 301
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
; Line 302
	jmp	SHORT $LN4@skip_comme
$LN3@skip_comme:
; Line 304
	mov	edx, DWORD PTR _acur$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], eax
; Line 305
	mov	esp, ebp
	pop	ebp
	ret	0
_skip_comment ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -16						; size = 4
_old_base$ = -8						; size = 4
_memory$ = -4						; size = 4
_table$ = 8						; size = 4
_new_size$ = 12						; size = 4
_reallocate_t1_table PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 118
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 119
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 120
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _old_base$[ebp], eax
; Line 125
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _new_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@reallocate
; Line 127
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _old_base$[ebp]
	mov	DWORD PTR [edx], eax
; Line 128
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN6@reallocate
$LN5@reallocate:
; Line 132
	cmp	DWORD PTR _old_base$[ebp], 0
	je	SHORT $LN4@reallocate
; Line 134
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _old_base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 135
	mov	eax, DWORD PTR _old_base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_shift_elements
	add	esp, 8
$LN3@reallocate:
; Line 136
	mov	edx, DWORD PTR _old_base$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _old_base$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@reallocate
$LN4@reallocate:
; Line 139
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _new_size$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 141
	xor	eax, eax
$LN6@reallocate:
; Line 142
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@reallocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@reallocate:
	DD	1
	DD	$LN9@reallocate
$LN9@reallocate:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN8@reallocate
$LN8@reallocate:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_reallocate_t1_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$ = -12						; size = 4
_offset$ = -8						; size = 4
_delta$ = -4						; size = 4
_table$ = 8						; size = 4
_old_base$ = 12						; size = 4
_shift_elements PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 102
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _old_base$[ebp]
	mov	DWORD PTR _delta$[ebp], ecx
; Line 103
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _offset$[ebp], eax
; Line 104
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _offset$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 107
	jmp	SHORT $LN4@shift_elem
$LN3@shift_elem:
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, 4
	mov	DWORD PTR _offset$[ebp], edx
$LN4@shift_elem:
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN5@shift_elem
; Line 109
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	DWORD PTR [eax+edx], 0
	je	SHORT $LN1@shift_elem
; Line 110
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	add	ecx, DWORD PTR _delta$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx+eax], ecx
$LN1@shift_elem:
; Line 111
	jmp	SHORT $LN3@shift_elem
$LN5@shift_elem:
; Line 112
	mov	esp, ebp
	pop	ebp
	ret	0
_shift_elements ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$1 = -20						; size = 4
_val$2 = -16						; size = 4
_s$ = -12						; size = 4
_r$ = -8						; size = 4
_p$ = -4						; size = 4
_cursor$ = 8						; size = 4
_limit$ = 12						; size = 4
_buffer$ = 16						; size = 4
_n$ = 20						; size = 4
_seed$ = 24						; size = 4
_PS_Conv_EexecDecode PROC
; File d:\mozilla\modules\freetype2\src\psaux\psconv.c
; Line 555
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 558
	mov	eax, DWORD PTR _seed$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
; Line 563
	mov	edx, DWORD PTR _cursor$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _p$[ebp], eax
; Line 565
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN5@PS_Conv_Ee
; Line 566
	xor	eax, eax
	jmp	$LN6@PS_Conv_Ee
$LN5@PS_Conv_Ee:
; Line 568
	mov	edx, DWORD PTR _limit$[ebp]
	sub	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR _n$[ebp], edx
	jbe	SHORT $LN4@PS_Conv_Ee
; Line 569
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _n$[ebp], eax
$LN4@PS_Conv_Ee:
; Line 571
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN3@PS_Conv_Ee
$LN2@PS_Conv_Ee:
	mov	ecx, DWORD PTR _r$[ebp]
	add	ecx, 1
	mov	DWORD PTR _r$[ebp], ecx
$LN3@PS_Conv_Ee:
	mov	edx, DWORD PTR _r$[ebp]
	cmp	edx, DWORD PTR _n$[ebp]
	jae	SHORT $LN1@PS_Conv_Ee
; Line 573
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _r$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _val$2[ebp], ecx
; Line 574
	mov	edx, DWORD PTR _s$[ebp]
	shr	edx, 8
	xor	edx, DWORD PTR _val$2[ebp]
	mov	DWORD PTR _b$1[ebp], edx
; Line 577
	mov	eax, DWORD PTR _val$2[ebp]
	add	eax, DWORD PTR _s$[ebp]
	imul	ecx, eax, 52845
	add	ecx, 22719				; 000058bfH
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _s$[ebp], ecx
; Line 578
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, DWORD PTR _r$[ebp]
	mov	al, BYTE PTR _b$1[ebp]
	mov	BYTE PTR [edx], al
; Line 579
	jmp	SHORT $LN2@PS_Conv_Ee
$LN1@PS_Conv_Ee:
; Line 581
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _cursor$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 582
	mov	eax, DWORD PTR _seed$[ebp]
	mov	cx, WORD PTR _s$[ebp]
	mov	WORD PTR [eax], cx
; Line 599
	mov	eax, DWORD PTR _r$[ebp]
$LN6@PS_Conv_Ee:
; Line 600
	mov	esp, ebp
	pop	ebp
	ret	0
_PS_Conv_EexecDecode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$1 = -20						; size = 4
_pad$ = -16						; size = 4
_w$ = -12						; size = 4
_r$ = -8						; size = 4
_p$ = -4						; size = 4
_cursor$ = 8						; size = 4
_limit$ = 12						; size = 4
_buffer$ = 16						; size = 4
_n$ = 20						; size = 4
_PS_Conv_ASCIIHexDecode PROC
; File d:\mozilla\modules\freetype2\src\psaux\psconv.c
; Line 461
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 463
	mov	DWORD PTR _r$[ebp], 0
; Line 464
	mov	DWORD PTR _w$[ebp], 0
; Line 465
	mov	DWORD PTR _pad$[ebp], 1
; Line 468
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 472
	mov	ecx, DWORD PTR _cursor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _p$[ebp], edx
; Line 474
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN11@PS_Conv_AS
; Line 475
	xor	eax, eax
	jmp	$LN12@PS_Conv_AS
$LN11@PS_Conv_AS:
; Line 477
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR _n$[ebp], ecx
	jbe	SHORT $LN10@PS_Conv_AS
; Line 478
	mov	edx, DWORD PTR _limit$[ebp]
	sub	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _n$[ebp], edx
$LN10@PS_Conv_AS:
; Line 481
	jmp	SHORT $LN9@PS_Conv_AS
$LN8@PS_Conv_AS:
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 1
	mov	DWORD PTR _r$[ebp], eax
$LN9@PS_Conv_AS:
	mov	ecx, DWORD PTR _r$[ebp]
	cmp	ecx, DWORD PTR _n$[ebp]
	jae	$LN7@PS_Conv_AS
; Line 483
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _r$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _c$1[ebp], eax
; Line 486
	cmp	DWORD PTR _c$1[ebp], 32			; 00000020H
	je	SHORT $LN5@PS_Conv_AS
	cmp	DWORD PTR _c$1[ebp], 13			; 0000000dH
	je	SHORT $LN5@PS_Conv_AS
	cmp	DWORD PTR _c$1[ebp], 10			; 0000000aH
	je	SHORT $LN5@PS_Conv_AS
	cmp	DWORD PTR _c$1[ebp], 9
	je	SHORT $LN5@PS_Conv_AS
	cmp	DWORD PTR _c$1[ebp], 12			; 0000000cH
	je	SHORT $LN5@PS_Conv_AS
	cmp	DWORD PTR _c$1[ebp], 0
	jne	SHORT $LN6@PS_Conv_AS
$LN5@PS_Conv_AS:
; Line 487
	jmp	SHORT $LN8@PS_Conv_AS
$LN6@PS_Conv_AS:
; Line 489
	cmp	DWORD PTR _c$1[ebp], 128		; 00000080H
	jb	SHORT $LN4@PS_Conv_AS
; Line 490
	jmp	SHORT $LN7@PS_Conv_AS
$LN4@PS_Conv_AS:
; Line 492
	mov	ecx, DWORD PTR _c$1[ebp]
	and	ecx, 127				; 0000007fH
	movsx	edx, BYTE PTR _ft_char_table[ecx]
	mov	DWORD PTR _c$1[ebp], edx
; Line 493
	cmp	DWORD PTR _c$1[ebp], 16			; 00000010H
	jb	SHORT $LN3@PS_Conv_AS
; Line 494
	jmp	SHORT $LN7@PS_Conv_AS
$LN3@PS_Conv_AS:
; Line 496
	mov	eax, DWORD PTR _pad$[ebp]
	shl	eax, 4
	or	eax, DWORD PTR _c$1[ebp]
	mov	DWORD PTR _pad$[ebp], eax
; Line 497
	mov	ecx, DWORD PTR _pad$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN2@PS_Conv_AS
; Line 499
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, DWORD PTR _w$[ebp]
	mov	al, BYTE PTR _pad$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, 1
	mov	DWORD PTR _w$[ebp], ecx
; Line 500
	mov	DWORD PTR _pad$[ebp], 1
$LN2@PS_Conv_AS:
; Line 502
	jmp	$LN8@PS_Conv_AS
$LN7@PS_Conv_AS:
; Line 504
	cmp	DWORD PTR _pad$[ebp], 1
	je	SHORT $LN1@PS_Conv_AS
; Line 505
	mov	edx, DWORD PTR _pad$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _w$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, 1
	mov	DWORD PTR _w$[ebp], ecx
$LN1@PS_Conv_AS:
; Line 507
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _cursor$[ebp]
	mov	DWORD PTR [eax], edx
; Line 509
	mov	eax, DWORD PTR _w$[ebp]
$LN12@PS_Conv_AS:
; Line 546
	mov	esp, ebp
	pop	ebp
	ret	0
_PS_Conv_ASCIIHexDecode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -37						; size = 1
_exponent$1 = -36					; size = 4
_c$2 = -32						; size = 1
_have_underflow$ = -31					; size = 1
_have_overflow$ = -30					; size = 1
_sign$ = -29						; size = 1
_divider$ = -28						; size = 4
_decimal$ = -24						; size = 4
_integral$ = -20					; size = 4
_curp$ = -16						; size = 4
_p$ = -8						; size = 4
_cursor$ = 8						; size = 4
_limit$ = 12						; size = 4
_power_ten$ = 16					; size = 4
_PS_Conv_ToFixed PROC
; File d:\mozilla\modules\freetype2\src\psaux\psconv.c
; Line 195
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 196
	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
; Line 199
	mov	DWORD PTR _integral$[ebp], 0
; Line 200
	mov	DWORD PTR _decimal$[ebp], 0
; Line 201
	mov	DWORD PTR _divider$[ebp], 1
; Line 203
	mov	BYTE PTR _sign$[ebp], 0
; Line 204
	mov	BYTE PTR _have_overflow$[ebp], 0
; Line 205
	mov	BYTE PTR _have_underflow$[ebp], 0
; Line 208
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN54@PS_Conv_To
; Line 209
	jmp	$Bad$62
$LN54@PS_Conv_To:
; Line 211
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN52@PS_Conv_To
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN53@PS_Conv_To
$LN52@PS_Conv_To:
; Line 213
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 45					; 0000002dH
	jne	SHORT $LN57@PS_Conv_To
	mov	BYTE PTR tv71[ebp], 1
	jmp	SHORT $LN58@PS_Conv_To
$LN57@PS_Conv_To:
	mov	BYTE PTR tv71[ebp], 0
$LN58@PS_Conv_To:
	mov	al, BYTE PTR tv71[ebp]
	mov	BYTE PTR _sign$[ebp], al
; Line 215
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 216
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jne	SHORT $LN53@PS_Conv_To
; Line 217
	jmp	$Bad$62
$LN53@PS_Conv_To:
; Line 221
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	je	SHORT $LN50@PS_Conv_To
; Line 223
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _curp$[ebp], edx
; Line 224
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_PS_Conv_ToInt
	add	esp, 8
	mov	DWORD PTR _integral$[ebp], eax
; Line 226
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _curp$[ebp]
	jne	SHORT $LN49@PS_Conv_To
; Line 227
	xor	eax, eax
	jmp	$LN55@PS_Conv_To
$LN49@PS_Conv_To:
; Line 229
	cmp	DWORD PTR _integral$[ebp], 32767	; 00007fffH
	jle	SHORT $LN48@PS_Conv_To
; Line 230
	mov	BYTE PTR _have_overflow$[ebp], 1
; Line 231
	jmp	SHORT $LN50@PS_Conv_To
$LN48@PS_Conv_To:
; Line 232
	mov	eax, DWORD PTR _integral$[ebp]
	shl	eax, 16					; 00000010H
	mov	DWORD PTR _integral$[ebp], eax
$LN50@PS_Conv_To:
; Line 236
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN46@PS_Conv_To
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 46					; 0000002eH
	jne	$LN46@PS_Conv_To
; Line 238
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 240
	jmp	SHORT $LN45@PS_Conv_To
$LN44@PS_Conv_To:
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN45@PS_Conv_To:
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN46@PS_Conv_To
; Line 245
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN41@PS_Conv_To
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN41@PS_Conv_To
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN41@PS_Conv_To
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	je	SHORT $LN41@PS_Conv_To
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 12					; 0000000cH
	je	SHORT $LN41@PS_Conv_To
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN41@PS_Conv_To
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 128				; 00000080H
	jl	SHORT $LN42@PS_Conv_To
$LN41@PS_Conv_To:
; Line 246
	jmp	SHORT $LN46@PS_Conv_To
$LN42@PS_Conv_To:
; Line 248
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 127				; 0000007fH
	mov	dl, BYTE PTR _ft_char_table[ecx]
	mov	BYTE PTR _c$2[ebp], dl
; Line 250
	movsx	eax, BYTE PTR _c$2[ebp]
	test	eax, eax
	jl	SHORT $LN39@PS_Conv_To
	movsx	ecx, BYTE PTR _c$2[ebp]
	cmp	ecx, 10					; 0000000aH
	jl	SHORT $LN40@PS_Conv_To
$LN39@PS_Conv_To:
; Line 251
	jmp	SHORT $LN46@PS_Conv_To
$LN40@PS_Conv_To:
; Line 254
	cmp	DWORD PTR _divider$[ebp], 214748364	; 0cccccccH
	jge	SHORT $LN38@PS_Conv_To
	cmp	DWORD PTR _decimal$[ebp], 214748364	; 0cccccccH
	jge	SHORT $LN38@PS_Conv_To
; Line 256
	imul	edx, DWORD PTR _decimal$[ebp], 10
	movsx	eax, BYTE PTR _c$2[ebp]
	add	edx, eax
	mov	DWORD PTR _decimal$[ebp], edx
; Line 258
	cmp	DWORD PTR _integral$[ebp], 0
	jne	SHORT $LN37@PS_Conv_To
	cmp	DWORD PTR _power_ten$[ebp], 0
	jle	SHORT $LN37@PS_Conv_To
; Line 259
	mov	ecx, DWORD PTR _power_ten$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _power_ten$[ebp], ecx
; Line 260
	jmp	SHORT $LN38@PS_Conv_To
$LN37@PS_Conv_To:
; Line 261
	imul	edx, DWORD PTR _divider$[ebp], 10
	mov	DWORD PTR _divider$[ebp], edx
$LN38@PS_Conv_To:
; Line 263
	jmp	$LN44@PS_Conv_To
$LN46@PS_Conv_To:
; Line 267
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN35@PS_Conv_To
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 101				; 00000065H
	je	SHORT $LN34@PS_Conv_To
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 69					; 00000045H
	jne	SHORT $LN35@PS_Conv_To
$LN34@PS_Conv_To:
; Line 272
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 274
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _curp$[ebp], eax
; Line 275
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_PS_Conv_ToInt
	add	esp, 8
	mov	DWORD PTR _exponent$1[ebp], eax
; Line 277
	mov	eax, DWORD PTR _curp$[ebp]
	cmp	eax, DWORD PTR _p$[ebp]
	jne	SHORT $LN33@PS_Conv_To
; Line 278
	xor	eax, eax
	jmp	$LN55@PS_Conv_To
$LN33@PS_Conv_To:
; Line 281
	cmp	DWORD PTR _exponent$1[ebp], 1000	; 000003e8H
	jle	SHORT $LN32@PS_Conv_To
; Line 282
	mov	BYTE PTR _have_overflow$[ebp], 1
	jmp	SHORT $LN35@PS_Conv_To
$LN32@PS_Conv_To:
; Line 283
	cmp	DWORD PTR _exponent$1[ebp], -1000	; fffffc18H
	jge	SHORT $LN30@PS_Conv_To
; Line 284
	mov	BYTE PTR _have_underflow$[ebp], 1
; Line 285
	jmp	SHORT $LN35@PS_Conv_To
$LN30@PS_Conv_To:
; Line 286
	mov	ecx, DWORD PTR _power_ten$[ebp]
	add	ecx, DWORD PTR _exponent$1[ebp]
	mov	DWORD PTR _power_ten$[ebp], ecx
$LN35@PS_Conv_To:
; Line 289
	mov	edx, DWORD PTR _cursor$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 291
	cmp	DWORD PTR _integral$[ebp], 0
	jne	SHORT $LN28@PS_Conv_To
	cmp	DWORD PTR _decimal$[ebp], 0
	jne	SHORT $LN28@PS_Conv_To
; Line 292
	xor	eax, eax
	jmp	$LN55@PS_Conv_To
$LN28@PS_Conv_To:
; Line 294
	movzx	ecx, BYTE PTR _have_overflow$[ebp]
	test	ecx, ecx
	je	SHORT $LN27@PS_Conv_To
; Line 295
	jmp	$Overflow$63
$LN27@PS_Conv_To:
; Line 296
	movzx	edx, BYTE PTR _have_underflow$[ebp]
	test	edx, edx
	je	SHORT $LN25@PS_Conv_To
; Line 297
	jmp	$Underflow$64
$LN25@PS_Conv_To:
; Line 299
	cmp	DWORD PTR _power_ten$[ebp], 0
	jle	SHORT $LN19@PS_Conv_To
; Line 301
	cmp	DWORD PTR _integral$[ebp], 214748364	; 0cccccccH
	jl	SHORT $LN23@PS_Conv_To
; Line 302
	jmp	$Overflow$63
$LN23@PS_Conv_To:
; Line 303
	imul	eax, DWORD PTR _integral$[ebp], 10
	mov	DWORD PTR _integral$[ebp], eax
; Line 305
	cmp	DWORD PTR _decimal$[ebp], 214748364	; 0cccccccH
	jl	SHORT $LN22@PS_Conv_To
; Line 307
	cmp	DWORD PTR _divider$[ebp], 1
	jne	SHORT $LN21@PS_Conv_To
; Line 308
	jmp	$Overflow$63
$LN21@PS_Conv_To:
; Line 309
	mov	eax, DWORD PTR _divider$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _divider$[ebp], eax
; Line 311
	jmp	SHORT $LN20@PS_Conv_To
$LN22@PS_Conv_To:
; Line 312
	imul	edx, DWORD PTR _decimal$[ebp], 10
	mov	DWORD PTR _decimal$[ebp], edx
$LN20@PS_Conv_To:
; Line 314
	mov	eax, DWORD PTR _power_ten$[ebp]
	sub	eax, 1
	mov	DWORD PTR _power_ten$[ebp], eax
; Line 315
	jmp	SHORT $LN25@PS_Conv_To
$LN19@PS_Conv_To:
; Line 317
	cmp	DWORD PTR _power_ten$[ebp], 0
	jge	SHORT $LN18@PS_Conv_To
; Line 319
	mov	eax, DWORD PTR _integral$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _integral$[ebp], eax
; Line 320
	cmp	DWORD PTR _divider$[ebp], 214748364	; 0cccccccH
	jge	SHORT $LN17@PS_Conv_To
; Line 321
	imul	edx, DWORD PTR _divider$[ebp], 10
	mov	DWORD PTR _divider$[ebp], edx
; Line 322
	jmp	SHORT $LN16@PS_Conv_To
$LN17@PS_Conv_To:
; Line 323
	mov	eax, DWORD PTR _decimal$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _decimal$[ebp], eax
$LN16@PS_Conv_To:
; Line 325
	cmp	DWORD PTR _integral$[ebp], 0
	jne	SHORT $LN15@PS_Conv_To
	cmp	DWORD PTR _decimal$[ebp], 0
	jne	SHORT $LN15@PS_Conv_To
; Line 326
	jmp	$Underflow$64
$LN15@PS_Conv_To:
; Line 328
	mov	edx, DWORD PTR _power_ten$[ebp]
	add	edx, 1
	mov	DWORD PTR _power_ten$[ebp], edx
; Line 329
	jmp	SHORT $LN19@PS_Conv_To
$LN18@PS_Conv_To:
; Line 331
	cmp	DWORD PTR _decimal$[ebp], 0
	je	SHORT $Exit$65
; Line 333
	mov	eax, DWORD PTR _divider$[ebp]
	push	eax
	mov	ecx, DWORD PTR _decimal$[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _decimal$[ebp], eax
; Line 336
	mov	edx, DWORD PTR _integral$[ebp]
	add	edx, DWORD PTR _decimal$[ebp]
	mov	DWORD PTR _integral$[ebp], edx
$Exit$65:
; Line 340
	movzx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	je	SHORT $LN13@PS_Conv_To
; Line 341
	mov	ecx, DWORD PTR _integral$[ebp]
	neg	ecx
	mov	DWORD PTR _integral$[ebp], ecx
$LN13@PS_Conv_To:
; Line 343
	mov	eax, DWORD PTR _integral$[ebp]
	jmp	SHORT $LN55@PS_Conv_To
$Bad$62:
; Line 346
	mov	edx, 4
	imul	eax, edx, 42
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN11@PS_Conv_To
	push	OFFSET $SG10712
	call	_FT_Message
	add	esp, 4
$LN11@PS_Conv_To:
	xor	ecx, ecx
	jne	SHORT $Bad$62
; Line 347
	xor	eax, eax
	jmp	SHORT $LN55@PS_Conv_To
$Overflow$63:
; Line 350
	mov	DWORD PTR _integral$[ebp], 2147483647	; 7fffffffH
$LN8@PS_Conv_To:
; Line 351
	mov	edx, 4
	imul	eax, edx, 42
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN7@PS_Conv_To
	push	OFFSET $SG10717
	call	_FT_Message
	add	esp, 4
$LN7@PS_Conv_To:
	xor	ecx, ecx
	jne	SHORT $LN8@PS_Conv_To
; Line 352
	jmp	SHORT $Exit$65
$Underflow$64:
; Line 355
	mov	edx, 4
	imul	eax, edx, 42
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN3@PS_Conv_To
	push	OFFSET $SG10722
	call	_FT_Message
	add	esp, 4
$LN3@PS_Conv_To:
	xor	ecx, ecx
	jne	SHORT $Underflow$64
; Line 356
	xor	eax, eax
$LN55@PS_Conv_To:
; Line 357
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN61@PS_Conv_To
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN61@PS_Conv_To:
	DD	1
	DD	$LN60@PS_Conv_To
$LN60@PS_Conv_To:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN59@PS_Conv_To
$LN59@PS_Conv_To:
	DB	112					; 00000070H
	DB	0
_PS_Conv_ToFixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num$ = -20						; size = 4
_curp$ = -16						; size = 4
_p$ = -8						; size = 4
_cursor$ = 8						; size = 4
_limit$ = 12						; size = 4
_PS_Conv_ToInt PROC
; File d:\mozilla\modules\freetype2\src\psaux\psconv.c
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 162
	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
; Line 168
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _curp$[ebp], edx
; Line 169
	push	10					; 0000000aH
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_PS_Conv_Strtol
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _num$[ebp], eax
; Line 171
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _curp$[ebp]
	jne	SHORT $LN3@PS_Conv_To
; Line 172
	xor	eax, eax
	jmp	SHORT $LN4@PS_Conv_To
$LN3@PS_Conv_To:
; Line 174
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN2@PS_Conv_To
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 35					; 00000023H
	jne	SHORT $LN2@PS_Conv_To
; Line 176
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 178
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _curp$[ebp], ecx
; Line 179
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_PS_Conv_Strtol
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _num$[ebp], eax
; Line 181
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _curp$[ebp]
	jne	SHORT $LN2@PS_Conv_To
; Line 182
	xor	eax, eax
	jmp	SHORT $LN4@PS_Conv_To
$LN2@PS_Conv_To:
; Line 185
	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 187
	mov	eax, DWORD PTR _num$[ebp]
$LN4@PS_Conv_To:
; Line 188
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@PS_Conv_To
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@PS_Conv_To:
	DD	1
	DD	$LN7@PS_Conv_To
$LN7@PS_Conv_To:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@PS_Conv_To
$LN6@PS_Conv_To:
	DB	112					; 00000070H
	DB	0
_PS_Conv_ToInt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv78 = -19						; size = 1
_c$1 = -18						; size = 1
_c_limit$ = -17						; size = 1
_num_limit$ = -16					; size = 4
_have_overflow$ = -10					; size = 1
_sign$ = -9						; size = 1
_num$ = -8						; size = 4
_p$ = -4						; size = 4
_cursor$ = 8						; size = 4
_limit$ = 12						; size = 4
_base$ = 16						; size = 4
_PS_Conv_Strtol PROC
; File d:\mozilla\modules\freetype2\src\psaux\psconv.c
; Line 87
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 88
	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
; Line 90
	mov	DWORD PTR _num$[ebp], 0
; Line 91
	mov	BYTE PTR _sign$[ebp], 0
; Line 92
	mov	BYTE PTR _have_overflow$[ebp], 0
; Line 98
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN30@PS_Conv_St
; Line 99
	jmp	$Bad$35
$LN30@PS_Conv_St:
; Line 101
	cmp	DWORD PTR _base$[ebp], 2
	jl	SHORT $LN27@PS_Conv_St
	cmp	DWORD PTR _base$[ebp], 36		; 00000024H
	jle	SHORT $LN29@PS_Conv_St
$LN27@PS_Conv_St:
; Line 103
	mov	eax, 4
	imul	ecx, eax, 42
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN26@PS_Conv_St
	push	OFFSET $SG10600
	call	_FT_Message
	add	esp, 4
$LN26@PS_Conv_St:
	xor	edx, edx
	jne	SHORT $LN27@PS_Conv_St
; Line 104
	xor	eax, eax
	jmp	$LN31@PS_Conv_St
$LN29@PS_Conv_St:
; Line 107
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN22@PS_Conv_St
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN23@PS_Conv_St
$LN22@PS_Conv_St:
; Line 109
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 45					; 0000002dH
	jne	SHORT $LN33@PS_Conv_St
	mov	BYTE PTR tv78[ebp], 1
	jmp	SHORT $LN34@PS_Conv_St
$LN33@PS_Conv_St:
	mov	BYTE PTR tv78[ebp], 0
$LN34@PS_Conv_St:
	mov	al, BYTE PTR tv78[ebp]
	mov	BYTE PTR _sign$[ebp], al
; Line 111
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 112
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jne	SHORT $LN23@PS_Conv_St
; Line 113
	jmp	$Bad$35
$LN23@PS_Conv_St:
; Line 116
	mov	eax, 2147483647				; 7fffffffH
	cdq
	idiv	DWORD PTR _base$[ebp]
	mov	DWORD PTR _num_limit$[ebp], eax
; Line 117
	mov	eax, 2147483647				; 7fffffffH
	cdq
	idiv	DWORD PTR _base$[ebp]
	mov	BYTE PTR _c_limit$[ebp], dl
; Line 119
	jmp	SHORT $LN20@PS_Conv_St
$LN19@PS_Conv_St:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN20@PS_Conv_St:
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN18@PS_Conv_St
; Line 124
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN16@PS_Conv_St
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN16@PS_Conv_St
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN16@PS_Conv_St
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	je	SHORT $LN16@PS_Conv_St
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 12					; 0000000cH
	je	SHORT $LN16@PS_Conv_St
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN16@PS_Conv_St
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN17@PS_Conv_St
$LN16@PS_Conv_St:
; Line 125
	jmp	SHORT $LN18@PS_Conv_St
$LN17@PS_Conv_St:
; Line 127
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 127				; 0000007fH
	mov	al, BYTE PTR _ft_char_table[edx]
	mov	BYTE PTR _c$1[ebp], al
; Line 129
	movsx	ecx, BYTE PTR _c$1[ebp]
	test	ecx, ecx
	jl	SHORT $LN14@PS_Conv_St
	movsx	edx, BYTE PTR _c$1[ebp]
	cmp	edx, DWORD PTR _base$[ebp]
	jl	SHORT $LN15@PS_Conv_St
$LN14@PS_Conv_St:
; Line 130
	jmp	SHORT $LN18@PS_Conv_St
$LN15@PS_Conv_St:
; Line 132
	mov	eax, DWORD PTR _num$[ebp]
	cmp	eax, DWORD PTR _num_limit$[ebp]
	jg	SHORT $LN12@PS_Conv_St
	mov	ecx, DWORD PTR _num$[ebp]
	cmp	ecx, DWORD PTR _num_limit$[ebp]
	jne	SHORT $LN13@PS_Conv_St
	movsx	edx, BYTE PTR _c$1[ebp]
	movsx	eax, BYTE PTR _c_limit$[ebp]
	cmp	edx, eax
	jle	SHORT $LN13@PS_Conv_St
$LN12@PS_Conv_St:
; Line 133
	mov	BYTE PTR _have_overflow$[ebp], 1
; Line 134
	jmp	SHORT $LN11@PS_Conv_St
$LN13@PS_Conv_St:
; Line 135
	mov	ecx, DWORD PTR _num$[ebp]
	imul	ecx, DWORD PTR _base$[ebp]
	movsx	edx, BYTE PTR _c$1[ebp]
	add	ecx, edx
	mov	DWORD PTR _num$[ebp], ecx
$LN11@PS_Conv_St:
; Line 136
	jmp	$LN19@PS_Conv_St
$LN18@PS_Conv_St:
; Line 138
	mov	eax, DWORD PTR _cursor$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 140
	movzx	edx, BYTE PTR _have_overflow$[ebp]
	test	edx, edx
	je	SHORT $LN10@PS_Conv_St
; Line 142
	mov	DWORD PTR _num$[ebp], 2147483647	; 7fffffffH
$LN9@PS_Conv_St:
; Line 143
	mov	eax, 4
	imul	ecx, eax, 42
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN8@PS_Conv_St
	push	OFFSET $SG10622
	call	_FT_Message
	add	esp, 4
$LN8@PS_Conv_St:
	xor	edx, edx
	jne	SHORT $LN9@PS_Conv_St
$LN10@PS_Conv_St:
; Line 146
	movzx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	je	SHORT $LN5@PS_Conv_St
; Line 147
	mov	ecx, DWORD PTR _num$[ebp]
	neg	ecx
	mov	DWORD PTR _num$[ebp], ecx
$LN5@PS_Conv_St:
; Line 149
	mov	eax, DWORD PTR _num$[ebp]
	jmp	SHORT $LN31@PS_Conv_St
$Bad$35:
; Line 152
	mov	edx, 4
	imul	eax, edx, 42
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN3@PS_Conv_St
	push	OFFSET $SG10628
	call	_FT_Message
	add	esp, 4
$LN3@PS_Conv_St:
	xor	ecx, ecx
	jne	SHORT $Bad$35
; Line 153
	xor	eax, eax
$LN31@PS_Conv_St:
; Line 154
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_PS_Conv_Strtol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
_seed$ = 16						; size = 2
_t1_decrypt PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1766
	push	ebp
	mov	ebp, esp
; Line 1771
	lea	eax, DWORD PTR _seed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_PS_Conv_EexecDecode
	add	esp, 20					; 00000014H
; Line 1772
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_t1_decrypt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -24						; size = 4
_control$1 = -20					; size = 4
_p2$2 = -16						; size = 4
_p1$3 = -12						; size = 4
_first$ = -8						; size = 4
_outline$ = -4						; size = 4
_builder$ = 8						; size = 4
_t1_builder_close_contour PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1711
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1712
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _outline$[ebp], ecx
; Line 1716
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN7@t1_builder
; Line 1717
	jmp	$LN8@t1_builder
$LN7@t1_builder:
; Line 1720
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	cmp	eax, 1
	jg	SHORT $LN10@t1_builder
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN11@t1_builder
$LN10@t1_builder:
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	edx, WORD PTR [ecx+edx*2-4]
	add	edx, 1
	mov	DWORD PTR tv77[ebp], edx
$LN11@t1_builder:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR _first$[ebp], eax
; Line 1724
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	edx, 1
	jle	SHORT $LN6@t1_builder
; Line 1726
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _first$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _p1$3[ebp], eax
; Line 1727
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*8-8]
	mov	DWORD PTR _p2$2[ebp], edx
; Line 1728
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx-1]
	mov	DWORD PTR _control$1[ebp], ecx
; Line 1733
	mov	edx, DWORD PTR _p1$3[ebp]
	mov	eax, DWORD PTR _p2$2[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN6@t1_builder
	mov	edx, DWORD PTR _p1$3[ebp]
	mov	eax, DWORD PTR _p2$2[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN6@t1_builder
; Line 1734
	mov	edx, DWORD PTR _control$1[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 1
	jne	SHORT $LN6@t1_builder
; Line 1735
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	dx, WORD PTR [ecx+2]
	sub	dx, 1
	mov	eax, DWORD PTR _outline$[ebp]
	mov	WORD PTR [eax+2], dx
$LN6@t1_builder:
; Line 1738
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	test	edx, edx
	jle	SHORT $LN8@t1_builder
; Line 1742
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	ecx, 1
	cmp	DWORD PTR _first$[ebp], ecx
	jne	SHORT $LN2@t1_builder
; Line 1744
	mov	edx, DWORD PTR _outline$[ebp]
	mov	ax, WORD PTR [edx]
	sub	ax, 1
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1745
	mov	edx, DWORD PTR _outline$[ebp]
	mov	ax, WORD PTR [edx+2]
	sub	ax, 1
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 1747
	jmp	SHORT $LN8@t1_builder
$LN2@t1_builder:
; Line 1749
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx+2]
	sub	eax, 1
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	WORD PTR [ecx+edx*2-2], ax
$LN8@t1_builder:
; Line 1751
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_builder_close_contour ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_builder$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_t1_builder_start_point PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1688
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1689
	mov	DWORD PTR _error$[ebp], 3
; Line 1694
	mov	eax, DWORD PTR _builder$[ebp]
	cmp	DWORD PTR [eax+64], 3
	jne	SHORT $LN3@t1_builder
; Line 1695
	mov	DWORD PTR _error$[ebp], 0
; Line 1696
	jmp	SHORT $LN2@t1_builder
$LN3@t1_builder:
; Line 1698
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+64], 3
; Line 1699
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_add_contour
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 1700
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@t1_builder
; Line 1701
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_t1_builder_add_point1
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$LN2@t1_builder:
; Line 1704
	mov	eax, DWORD PTR _error$[ebp]
; Line 1705
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_builder_start_point ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv129 = -12						; size = 4
_error$ = -8						; size = 4
_outline$ = -4						; size = 4
_builder$ = 8						; size = 4
_t1_builder_add_contour PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1651
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1652
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _outline$[ebp], ecx
; Line 1657
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN4@t1_builder
; Line 1659
	push	OFFSET $SG8899
	call	_FT_Message
	add	esp, 4
; Line 1660
	push	OFFSET $SG8900
	push	1660					; 0000067cH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN5@t1_builder
$LN4@t1_builder:
; Line 1663
	mov	edx, DWORD PTR _builder$[ebp]
	movzx	eax, BYTE PTR [edx+68]
	test	eax, eax
	jne	SHORT $LN3@t1_builder
; Line 1665
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	dx, WORD PTR [ecx]
	add	dx, 1
	mov	eax, DWORD PTR _outline$[ebp]
	mov	WORD PTR [eax], dx
; Line 1666
	xor	eax, eax
	jmp	$LN5@t1_builder
$LN3@t1_builder:
; Line 1669
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN8@t1_builder
	xor	edx, edx
	jne	SHORT $LN7@t1_builder
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	edx, WORD PTR [ecx+20]
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	eax, WORD PTR [ecx+56]
	lea	ecx, DWORD PTR [edx+eax+1]
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax+8]
	ja	SHORT $LN8@t1_builder
$LN7@t1_builder:
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN9@t1_builder
$LN8@t1_builder:
	push	1
	push	0
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv129[ebp], eax
$LN9@t1_builder:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR _error$[ebp], eax
; Line 1670
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@t1_builder
; Line 1672
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	test	edx, edx
	jle	SHORT $LN1@t1_builder
; Line 1674
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	ecx, 1
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [edx+12]
	mov	WORD PTR [edx+eax*2-2], cx
$LN1@t1_builder:
; Line 1676
	mov	eax, DWORD PTR _outline$[ebp]
	mov	cx, WORD PTR [eax]
	add	cx, 1
	mov	edx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [edx], cx
$LN2@t1_builder:
; Line 1679
	mov	eax, DWORD PTR _error$[ebp]
$LN5@t1_builder:
; Line 1680
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_builder_add_contour ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_builder$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_t1_builder_add_point1 PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1636
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1640
	push	1
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_t1_builder_check_points
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1641
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@t1_builder
; Line 1642
	push	1
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_t1_builder_add_point
	add	esp, 16					; 00000010H
$LN1@t1_builder:
; Line 1644
	mov	eax, DWORD PTR _error$[ebp]
; Line 1645
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_builder_add_point1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv87 = -16						; size = 4
_control$1 = -12					; size = 4
_point$2 = -8						; size = 4
_outline$ = -4						; size = 4
_builder$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_flag$ = 20						; size = 1
_t1_builder_add_point PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1613
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1614
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _outline$[ebp], ecx
; Line 1617
	mov	edx, DWORD PTR _builder$[ebp]
	movzx	eax, BYTE PTR [edx+68]
	test	eax, eax
	je	SHORT $LN1@t1_builder
; Line 1619
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _point$2[ebp], edx
; Line 1620
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _outline$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _control$1[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _point$2[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1624
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _point$2[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1625
	movzx	edx, BYTE PTR _flag$[ebp]
	test	edx, edx
	je	SHORT $LN4@t1_builder
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN5@t1_builder
$LN4@t1_builder:
	mov	DWORD PTR tv87[ebp], 2
$LN5@t1_builder:
	mov	eax, DWORD PTR _control$1[ebp]
	mov	cl, BYTE PTR tv87[ebp]
	mov	BYTE PTR [eax], cl
$LN1@t1_builder:
; Line 1627
	mov	edx, DWORD PTR _outline$[ebp]
	mov	ax, WORD PTR [edx+2]
	add	ax, 1
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 1628
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_builder_add_point ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -4						; size = 4
_builder$ = 8						; size = 4
_count$ = 12						; size = 4
_t1_builder_check_points PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1602
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1603
	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN3@t1_builder
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	edx, WORD PTR [ecx+22]
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	eax, WORD PTR [ecx+58]
	add	edx, DWORD PTR _count$[ebp]
	add	eax, edx
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+4]
	ja	SHORT $LN4@t1_builder
$LN3@t1_builder:
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@t1_builder
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN5@t1_builder
$LN4@t1_builder:
	push	0
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv82[ebp], eax
$LN5@t1_builder:
	mov	eax, DWORD PTR tv82[ebp]
; Line 1604
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_builder_check_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyph$ = -4						; size = 4
_builder$ = 8						; size = 4
_t1_builder_done PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1589
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1590
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _glyph$[ebp], ecx
; Line 1593
	cmp	DWORD PTR _glyph$[ebp], 0
	je	SHORT $LN2@t1_builder
; Line 1594
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR _glyph$[ebp]
	add	eax, 108				; 0000006cH
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
$LN2@t1_builder:
; Line 1595
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_builder_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_loader$1 = -4						; size = 4
_builder$ = 8						; size = 4
_face$ = 12						; size = 4
_size$ = 16						; size = 4
_glyph$ = 20						; size = 4
_hinting$ = 24						; size = 1
_t1_builder_init PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1537
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1538
	mov	eax, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 1539
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	BYTE PTR [ecx+68], 1
; Line 1541
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1542
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 1543
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR [eax], edx
; Line 1545
	cmp	DWORD PTR _glyph$[ebp], 0
	je	SHORT $LN2@t1_builder
; Line 1547
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _loader$1[ebp], edx
; Line 1550
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR _loader$1[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1551
	mov	edx, DWORD PTR _loader$1[ebp]
	add	edx, 20					; 00000014H
	mov	eax, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 1552
	mov	ecx, DWORD PTR _loader$1[ebp]
	add	ecx, 56					; 00000038H
	mov	edx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 1553
	mov	eax, DWORD PTR _loader$1[ebp]
	push	eax
	call	_FT_GlyphLoader_Rewind
	add	esp, 4
; Line 1555
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+76], eax
; Line 1556
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+72], 0
; Line 1558
	movzx	edx, BYTE PTR _hinting$[ebp]
	test	edx, edx
	je	SHORT $LN2@t1_builder
; Line 1559
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR [edx+72], eax
$LN2@t1_builder:
; Line 1562
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 1563
	mov	edx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 1565
	mov	eax, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 1566
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+36], 0
; Line 1567
	mov	edx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 1568
	mov	eax, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 1570
	mov	edi, DWORD PTR _builder$[ebp]
	add	edi, 80					; 00000050H
	mov	ecx, 8
	mov	esi, OFFSET _t1_builder_funcs
	rep movsd
; Line 1571
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_t1_builder_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_ps_parser_done PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1498
	push	ebp
	mov	ebp, esp
; Line 1499
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 1500
	pop	ebp
	ret	0
_ps_parser_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_base$ = 12						; size = 4
_limit$ = 16						; size = 4
_memory$ = 20						; size = 4
_ps_parser_init PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1486
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 1487
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 1488
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1489
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1490
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1491
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 1492
	mov	edi, DWORD PTR _parser$[ebp]
	add	edi, 20					; 00000014H
	mov	ecx, 13					; 0000000dH
	mov	esi, OFFSET _ps_parser_funcs
	rep movsd
; Line 1493
	pop	edi
	pop	esi
	pop	ebp
	ret	0
_ps_parser_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_max_values$ = 12					; size = 4
_values$ = 16						; size = 4
_power_ten$ = 20					; size = 4
_ps_parser_to_fixed_array PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1456
	push	ebp
	mov	ebp, esp
; Line 1457
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_ps_parser_skip_spaces
	add	esp, 4
; Line 1459
	mov	ecx, DWORD PTR _power_ten$[ebp]
	push	ecx
	mov	edx, DWORD PTR _values$[ebp]
	push	edx
	mov	eax, DWORD PTR _max_values$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_ps_tofixedarray
	add	esp, 20					; 00000014H
; Line 1460
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ps_parser_to_fixed_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_max_coords$ = 12					; size = 4
_coords$ = 16						; size = 4
_ps_parser_to_coord_array PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1444
	push	ebp
	mov	ebp, esp
; Line 1445
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_ps_parser_skip_spaces
	add	esp, 4
; Line 1447
	mov	ecx, DWORD PTR _coords$[ebp]
	push	ecx
	mov	edx, DWORD PTR _max_coords$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_ps_tocoordarray
	add	esp, 16					; 00000010H
; Line 1448
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ps_parser_to_coord_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_power_ten$ = 12					; size = 4
_ps_parser_to_fixed PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1434
	push	ebp
	mov	ebp, esp
; Line 1435
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_ps_parser_skip_spaces
	add	esp, 4
; Line 1436
	mov	ecx, DWORD PTR _power_ten$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_PS_Conv_ToFixed
	add	esp, 12					; 0000000cH
; Line 1437
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ps_parser_to_fixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cur$ = -12						; size = 4
_error$ = -4						; size = 4
_parser$ = 8						; size = 4
_bytes$ = 12						; size = 4
_max_bytes$ = 16					; size = 4
_pnum_bytes$ = 20					; size = 4
_delimiters$ = 24					; size = 1
_ps_parser_to_bytes PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1384
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1385
	mov	DWORD PTR _error$[ebp], 0
; Line 1389
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_ps_parser_skip_spaces
	add	esp, 4
; Line 1390
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
; Line 1392
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN5@ps_parser_
; Line 1393
	jmp	$Exit$11
$LN5@ps_parser_:
; Line 1395
	movzx	edx, BYTE PTR _delimiters$[ebp]
	test	edx, edx
	je	SHORT $LN4@ps_parser_
; Line 1397
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN3@ps_parser_
; Line 1399
	push	OFFSET $SG8804
	call	_FT_Message
	add	esp, 4
; Line 1400
	push	OFFSET $SG8805
	push	1400					; 00000578H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1401
	jmp	$Exit$11
$LN3@ps_parser_:
; Line 1404
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
$LN4@ps_parser_:
; Line 1410
	mov	eax, DWORD PTR _max_bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	lea	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_PS_Conv_ASCIIHexDecode
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _pnum_bytes$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1412
	movzx	eax, BYTE PTR _delimiters$[ebp]
	test	eax, eax
	je	SHORT $LN2@ps_parser_
; Line 1414
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN1@ps_parser_
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN1@ps_parser_
; Line 1416
	push	OFFSET $SG8808
	call	_FT_Message
	add	esp, 4
; Line 1417
	push	OFFSET $SG8809
	push	1417					; 00000589H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1418
	jmp	SHORT $Exit$11
$LN1@ps_parser_:
; Line 1421
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
$LN2@ps_parser_:
; Line 1424
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], ecx
$Exit$11:
; Line 1427
	mov	eax, DWORD PTR _error$[ebp]
; Line 1428
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ps_parser_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@ps_parser_:
	DD	1
	DD	$LN9@ps_parser_
$LN9@ps_parser_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@ps_parser_
$LN8@ps_parser_:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
_ps_parser_to_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_ps_parser_to_int PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1370
	push	ebp
	mov	ebp, esp
; Line 1371
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_ps_parser_skip_spaces
	add	esp, 4
; Line 1372
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_PS_Conv_ToInt
	add	esp, 8
; Line 1373
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ps_parser_to_int ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fieldrec$ = -464					; size = 36
_old_limit$ = -424					; size = 4
_old_cursor$ = -420					; size = 4
_error$ = -416						; size = 4
_num_elements$ = -408					; size = 4
_token$ = -400						; size = 4
_elements$ = -392					; size = 384
__$ArrayPad$ = -4					; size = 4
_parser$ = 8						; size = 4
_field$ = 12						; size = 4
_objects$ = 16						; size = 4
_max_objects$ = 20					; size = 4
_pflags$ = 24						; size = 4
_ps_parser_load_field_table PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1301
	push	ebp
	mov	ebp, esp
	sub	esp, 468				; 000001d4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-468]
	mov	ecx, 117				; 00000075H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1305
	mov	DWORD PTR _error$[ebp], 0
; Line 1308
	mov	ecx, 9
	mov	esi, DWORD PTR _field$[ebp]
	lea	edi, DWORD PTR _fieldrec$[ebp]
	rep movsd
; Line 1311
	mov	DWORD PTR _fieldrec$[ebp+8], 2
; Line 1313
	mov	eax, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [eax+8], 10			; 0000000aH
	je	SHORT $LN8@ps_parser_
	mov	ecx, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [ecx+8], 7
	jne	SHORT $LN9@ps_parser_
$LN8@ps_parser_:
; Line 1314
	mov	DWORD PTR _fieldrec$[ebp+8], 3
$LN9@ps_parser_:
; Line 1317
	lea	edx, DWORD PTR _num_elements$[ebp]
	push	edx
	push	32					; 00000020H
	lea	eax, DWORD PTR _elements$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_ps_parser_to_token_array
	add	esp, 16					; 00000010H
; Line 1318
	cmp	DWORD PTR _num_elements$[ebp], 0
	jge	SHORT $LN7@ps_parser_
; Line 1320
	mov	DWORD PTR _error$[ebp], 162		; 000000a2H
; Line 1321
	jmp	$Exit$17
$LN7@ps_parser_:
; Line 1323
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR _num_elements$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jbe	SHORT $LN6@ps_parser_
; Line 1324
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _num_elements$[ebp], edx
$LN6@ps_parser_:
; Line 1326
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_cursor$[ebp], ecx
; Line 1327
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _old_limit$[ebp], eax
; Line 1331
	mov	ecx, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [ecx+8], 7
	je	SHORT $LN5@ps_parser_
	mov	edx, DWORD PTR _field$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN5@ps_parser_
; Line 1333
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _objects$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	cl, BYTE PTR _num_elements$[ebp]
	mov	BYTE PTR [eax+edx], cl
$LN5@ps_parser_:
; Line 1336
	lea	edx, DWORD PTR _elements$[ebp]
	mov	DWORD PTR _token$[ebp], edx
; Line 1337
	jmp	SHORT $LN4@ps_parser_
$LN3@ps_parser_:
	mov	eax, DWORD PTR _num_elements$[ebp]
	sub	eax, 1
	mov	DWORD PTR _num_elements$[ebp], eax
	mov	ecx, DWORD PTR _token$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _token$[ebp], ecx
$LN4@ps_parser_:
	cmp	DWORD PTR _num_elements$[ebp], 0
	jle	SHORT $LN2@ps_parser_
; Line 1339
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 1340
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
; Line 1346
	push	0
	mov	edx, DWORD PTR _max_objects$[ebp]
	push	edx
	mov	eax, DWORD PTR _objects$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fieldrec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_ps_parser_load_field
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 1347
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ps_parser_
; Line 1348
	jmp	SHORT $LN2@ps_parser_
$LN1@ps_parser_:
; Line 1350
	movzx	eax, BYTE PTR _fieldrec$[ebp+20]
	add	eax, DWORD PTR _fieldrec$[ebp+16]
	mov	DWORD PTR _fieldrec$[ebp+16], eax
; Line 1351
	jmp	$LN3@ps_parser_
$LN2@ps_parser_:
; Line 1357
	mov	ecx, DWORD PTR _pflags$[ebp]
	mov	DWORD PTR _pflags$[ebp], ecx
; Line 1360
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _old_cursor$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1361
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _old_limit$[ebp]
	mov	DWORD PTR [ecx+8], edx
$Exit$17:
; Line 1364
	mov	eax, DWORD PTR _error$[ebp]
; Line 1365
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@ps_parser_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 468				; 000001d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@ps_parser_:
	DD	3
	DD	$LN15@ps_parser_
$LN15@ps_parser_:
	DD	-392					; fffffe78H
	DD	384					; 00000180H
	DD	$LN12@ps_parser_
	DD	-408					; fffffe68H
	DD	4
	DD	$LN13@ps_parser_
	DD	-464					; fffffe30H
	DD	36					; 00000024H
	DD	$LN14@ps_parser_
$LN14@ps_parser_:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN13@ps_parser_:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN12@ps_parser_:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_ps_parser_load_field_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv277 = -184						; size = 4
tv278 = -180						; size = 4
tv279 = -176						; size = 4
tv142 = -172						; size = 4
tv93 = -168						; size = 4
_bbox$1 = -164						; size = 4
_i$2 = -160						; size = 4
_result$3 = -156					; size = 4
_temp$4 = -152						; size = 4
_memory$5 = -148					; size = 4
_result$6 = -144					; size = 4
_bbox$7 = -140						; size = 4
_temp$8 = -132						; size = 16
_len$9 = -112						; size = 4
_memory$10 = -108					; size = 4
_string$11 = -104					; size = 4
_val$12 = -100						; size = 4
_q$13 = -96						; size = 4
_old_limit$14 = -92					; size = 4
_old_cur$15 = -88					; size = 4
_token2$16 = -80					; size = 12
_type$ = -64						; size = 4
_error$ = -56						; size = 4
_idx$ = -48						; size = 4
_count$ = -44						; size = 4
_limit$ = -40						; size = 4
_cur$ = -32						; size = 4
_token$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_parser$ = 8						; size = 4
_field$ = 12						; size = 4
_objects$ = 16						; size = 4
_max_objects$ = 20					; size = 4
_pflags$ = 24						; size = 4
_ps_parser_load_field PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 1031
	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	push	edi
	lea	edi, DWORD PTR [ebp-184]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1042
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_ps_parser_to_token
	add	esp, 8
; Line 1043
	cmp	DWORD PTR _token$[ebp+8], 0
	jne	SHORT $LN52@ps_parser_
; Line 1044
	jmp	$Fail$69
$LN52@ps_parser_:
; Line 1046
	mov	DWORD PTR _count$[ebp], 1
; Line 1047
	mov	DWORD PTR _idx$[ebp], 0
; Line 1048
	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR _cur$[ebp], edx
; Line 1049
	mov	eax, DWORD PTR _token$[ebp+4]
	mov	DWORD PTR _limit$[ebp], eax
; Line 1051
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _type$[ebp], edx
; Line 1054
	cmp	DWORD PTR _type$[ebp], 7
	jne	SHORT $LN51@ps_parser_
; Line 1057
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_cur$15[ebp], ecx
; Line 1058
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _old_limit$14[ebp], eax
; Line 1062
	mov	ecx, DWORD PTR _token$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1063
	mov	eax, DWORD PTR _token$[ebp+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1065
	lea	edx, DWORD PTR _token2$16[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_ps_parser_to_token
	add	esp, 8
; Line 1066
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _old_cur$15[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1067
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _old_limit$14[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1069
	cmp	DWORD PTR _token2$16[ebp+8], 3
	jne	SHORT $LN50@ps_parser_
; Line 1071
	mov	DWORD PTR _type$[ebp], 8
; Line 1072
	jmp	SHORT $FieldArray$70
$LN50@ps_parser_:
; Line 1073
	jmp	SHORT $LN49@ps_parser_
$LN51@ps_parser_:
; Line 1075
	cmp	DWORD PTR _token$[ebp+8], 3
	jne	SHORT $LN49@ps_parser_
; Line 1077
	mov	edx, DWORD PTR _max_objects$[ebp]
	mov	DWORD PTR _count$[ebp], edx
$FieldArray$70:
; Line 1081
	cmp	DWORD PTR _max_objects$[ebp], 0
	jne	SHORT $LN47@ps_parser_
; Line 1082
	jmp	$Fail$69
$LN47@ps_parser_:
; Line 1084
	mov	DWORD PTR _idx$[ebp], 1
; Line 1087
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax
; Line 1088
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _limit$[ebp], ecx
$LN49@ps_parser_:
; Line 1091
	jmp	SHORT $LN46@ps_parser_
$LN45@ps_parser_:
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax
$LN46@ps_parser_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN44@ps_parser_
; Line 1093
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _objects$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _field$[ebp]
	add	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _q$13[ebp], eax
; Line 1098
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	lea	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_skip_spaces
	add	esp, 8
; Line 1100
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv93[ebp], ecx
	mov	edx, DWORD PTR tv93[ebp]
	sub	edx, 1
	mov	DWORD PTR tv93[ebp], edx
	cmp	DWORD PTR tv93[ebp], 7
	ja	$LN1@ps_parser_
	mov	eax, DWORD PTR tv93[ebp]
	jmp	DWORD PTR $LN68@ps_parser_[eax*4]
$LN41@ps_parser_:
; Line 1103
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_ps_tobool
	add	esp, 8
	mov	DWORD PTR _val$12[ebp], eax
; Line 1104
	jmp	SHORT $Store_Integer$71
$LN40@ps_parser_:
; Line 1107
	push	0
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_PS_Conv_ToFixed
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$12[ebp], eax
; Line 1108
	jmp	SHORT $Store_Integer$71
$LN39@ps_parser_:
; Line 1111
	push	3
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	lea	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_PS_Conv_ToFixed
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$12[ebp], eax
; Line 1112
	jmp	SHORT $Store_Integer$71
$LN38@ps_parser_:
; Line 1115
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_PS_Conv_ToInt
	add	esp, 8
	mov	DWORD PTR _val$12[ebp], eax
$Store_Integer$71:
; Line 1119
	mov	eax, DWORD PTR _field$[ebp]
	mov	cl, BYTE PTR [eax+20]
	mov	BYTE PTR tv142[ebp], cl
	cmp	BYTE PTR tv142[ebp], 1
	je	SHORT $LN35@ps_parser_
	cmp	BYTE PTR tv142[ebp], 2
	je	SHORT $LN34@ps_parser_
	cmp	BYTE PTR tv142[ebp], 4
	je	SHORT $LN33@ps_parser_
	jmp	SHORT $LN32@ps_parser_
$LN35@ps_parser_:
; Line 1122
	mov	edx, DWORD PTR _q$13[ebp]
	mov	al, BYTE PTR _val$12[ebp]
	mov	BYTE PTR [edx], al
; Line 1123
	jmp	SHORT $LN36@ps_parser_
$LN34@ps_parser_:
; Line 1126
	mov	ecx, DWORD PTR _q$13[ebp]
	mov	dx, WORD PTR _val$12[ebp]
	mov	WORD PTR [ecx], dx
; Line 1127
	jmp	SHORT $LN36@ps_parser_
$LN33@ps_parser_:
; Line 1130
	mov	eax, DWORD PTR _q$13[ebp]
	mov	ecx, DWORD PTR _val$12[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1131
	jmp	SHORT $LN36@ps_parser_
$LN32@ps_parser_:
; Line 1134
	mov	edx, DWORD PTR _q$13[ebp]
	mov	eax, DWORD PTR _val$12[ebp]
	mov	DWORD PTR [edx], eax
$LN36@ps_parser_:
; Line 1136
	jmp	$LN42@ps_parser_
$LN31@ps_parser_:
; Line 1141
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _memory$10[ebp], edx
; Line 1142
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _len$9[ebp], eax
; Line 1145
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN30@ps_parser_
; Line 1146
	jmp	$LN42@ps_parser_
$LN30@ps_parser_:
; Line 1150
	cmp	DWORD PTR _token$[ebp+8], 4
	jne	SHORT $LN29@ps_parser_
; Line 1153
	mov	edx, DWORD PTR _len$9[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$9[ebp], edx
; Line 1154
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN28@ps_parser_
$LN29@ps_parser_:
; Line 1156
	cmp	DWORD PTR _token$[ebp+8], 2
	jne	SHORT $LN27@ps_parser_
; Line 1162
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
; Line 1163
	mov	edx, DWORD PTR _len$9[ebp]
	sub	edx, 2
	mov	DWORD PTR _len$9[ebp], edx
; Line 1165
	jmp	SHORT $LN28@ps_parser_
$LN27@ps_parser_:
; Line 1171
	mov	eax, DWORD PTR _token$[ebp+8]
	push	eax
	push	OFFSET $SG8690
	call	_FT_Message
	add	esp, 8
; Line 1172
	push	OFFSET $SG8691
	push	1172					; 00000494H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1173
	jmp	$Exit$72
$LN28@ps_parser_:
; Line 1178
	mov	ecx, DWORD PTR _q$13[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN25@ps_parser_
$LN24@ps_parser_:
; Line 1181
	mov	edx, 4
	imul	eax, edx, 41
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN23@ps_parser_
	mov	ecx, DWORD PTR _field$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG8700
	call	_FT_Message
	add	esp, 8
$LN23@ps_parser_:
	xor	eax, eax
	jne	SHORT $LN24@ps_parser_
$LN20@ps_parser_:
; Line 1182
	mov	ecx, DWORD PTR _q$13[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _memory$10[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _q$13[ebp]
	mov	DWORD PTR [ecx], 0
	xor	edx, edx
	jne	SHORT $LN20@ps_parser_
; Line 1183
	mov	eax, DWORD PTR _q$13[ebp]
	mov	DWORD PTR [eax], 0
$LN25@ps_parser_:
; Line 1186
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$9[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _memory$10[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _string$11[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@ps_parser_
; Line 1187
	jmp	$Exit$72
$LN17@ps_parser_:
; Line 1189
	mov	ecx, DWORD PTR _len$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$11[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1190
	mov	ecx, DWORD PTR _string$11[ebp]
	add	ecx, DWORD PTR _len$9[ebp]
	mov	BYTE PTR [ecx], 0
; Line 1192
	mov	edx, DWORD PTR _q$13[ebp]
	mov	eax, DWORD PTR _string$11[ebp]
	mov	DWORD PTR [edx], eax
; Line 1194
	jmp	$LN42@ps_parser_
$LN16@ps_parser_:
; Line 1199
	mov	ecx, DWORD PTR _q$13[ebp]
	mov	DWORD PTR _bbox$7[ebp], ecx
; Line 1203
	push	0
	lea	edx, DWORD PTR _temp$8[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_ps_tofixedarray
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$6[ebp], eax
; Line 1205
	cmp	DWORD PTR _result$6[ebp], 4
	jge	SHORT $LN15@ps_parser_
; Line 1208
	push	OFFSET $SG8718
	call	_FT_Message
	add	esp, 4
; Line 1209
	push	OFFSET $SG8719
	push	1209					; 000004b9H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1210
	jmp	$Exit$72
$LN15@ps_parser_:
; Line 1213
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _temp$8[ebp+eax]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	mov	edx, DWORD PTR _bbox$7[ebp]
	mov	DWORD PTR [edx], eax
; Line 1214
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _temp$8[ebp+eax]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	mov	edx, DWORD PTR _bbox$7[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1215
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _temp$8[ebp+eax]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	mov	edx, DWORD PTR _bbox$7[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 1216
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _temp$8[ebp+ecx]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	mov	ecx, DWORD PTR _bbox$7[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1218
	jmp	$LN42@ps_parser_
$LN14@ps_parser_:
; Line 1222
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _memory$5[ebp], eax
; Line 1228
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _max_objects$[ebp]
	shl	edx, 2
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _memory$5[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _temp$4[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@ps_parser_
; Line 1229
	jmp	$Exit$72
$LN13@ps_parser_:
; Line 1231
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN12@ps_parser_
$LN11@ps_parser_:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN12@ps_parser_:
	cmp	DWORD PTR _i$2[ebp], 4
	jae	$LN10@ps_parser_
; Line 1234
	push	0
	mov	edx, DWORD PTR _i$2[ebp]
	imul	edx, DWORD PTR _max_objects$[ebp]
	mov	eax, DWORD PTR _temp$4[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _max_objects$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_ps_tofixedarray
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$3[ebp], eax
; Line 1235
	cmp	DWORD PTR _result$3[ebp], 0
	jl	SHORT $LN8@ps_parser_
	mov	edx, DWORD PTR _result$3[ebp]
	cmp	edx, DWORD PTR _max_objects$[ebp]
	jae	$LN9@ps_parser_
$LN8@ps_parser_:
; Line 1245
	cmp	DWORD PTR _i$2[ebp], 0
	jne	SHORT $LN59@ps_parser_
	mov	DWORD PTR tv279[ebp], OFFSET $SG8734
	jmp	SHORT $LN60@ps_parser_
$LN59@ps_parser_:
	cmp	DWORD PTR _i$2[ebp], 1
	jne	SHORT $LN57@ps_parser_
	mov	DWORD PTR tv278[ebp], OFFSET $SG8735
	jmp	SHORT $LN58@ps_parser_
$LN57@ps_parser_:
	cmp	DWORD PTR _i$2[ebp], 2
	jne	SHORT $LN55@ps_parser_
	mov	DWORD PTR tv277[ebp], OFFSET $SG8736
	jmp	SHORT $LN56@ps_parser_
$LN55@ps_parser_:
	mov	DWORD PTR tv277[ebp], OFFSET $SG8737
$LN56@ps_parser_:
	mov	eax, DWORD PTR tv277[ebp]
	mov	DWORD PTR tv278[ebp], eax
$LN58@ps_parser_:
	mov	ecx, DWORD PTR tv278[ebp]
	mov	DWORD PTR tv279[ebp], ecx
$LN60@ps_parser_:
	mov	edx, DWORD PTR tv279[ebp]
	push	edx
	mov	eax, DWORD PTR _max_objects$[ebp]
	push	eax
	push	OFFSET $SG8738
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 1246
	push	OFFSET $SG8739
	push	1246					; 000004deH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1247
	jmp	$Exit$72
$LN9@ps_parser_:
; Line 1250
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_skip_spaces
	add	esp, 8
; Line 1251
	jmp	$LN11@ps_parser_
$LN10@ps_parser_:
; Line 1253
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@ps_parser_
$LN6@ps_parser_:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@ps_parser_:
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR _max_objects$[ebp]
	jae	$LN4@ps_parser_
; Line 1255
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _objects$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _bbox$1[ebp], ecx
; Line 1258
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	mov	edx, DWORD PTR _bbox$1[ebp]
	mov	DWORD PTR [edx], eax
; Line 1259
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, DWORD PTR _max_objects$[ebp]
	mov	ecx, DWORD PTR _temp$4[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	mov	ecx, DWORD PTR _bbox$1[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1260
	mov	edx, DWORD PTR _max_objects$[ebp]
	mov	eax, DWORD PTR _i$2[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	mov	ecx, DWORD PTR _bbox$1[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1261
	imul	edx, DWORD PTR _max_objects$[ebp], 3
	add	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	mov	edx, DWORD PTR _bbox$1[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 1262
	jmp	$LN6@ps_parser_
$LN4@ps_parser_:
; Line 1264
	mov	eax, DWORD PTR _temp$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$5[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _temp$4[ebp], 0
	xor	edx, edx
	jne	SHORT $LN4@ps_parser_
; Line 1266
	jmp	SHORT $LN42@ps_parser_
$LN1@ps_parser_:
; Line 1270
	jmp	SHORT $Fail$69
$LN42@ps_parser_:
; Line 1272
	jmp	$LN45@ps_parser_
$LN44@ps_parser_:
; Line 1278
	mov	eax, DWORD PTR _pflags$[ebp]
	mov	DWORD PTR _pflags$[ebp], eax
; Line 1281
	mov	DWORD PTR _error$[ebp], 0
$Exit$72:
; Line 1284
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN53@ps_parser_
$Fail$69:
; Line 1287
	push	OFFSET $SG8750
	push	1287					; 00000507H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1288
	jmp	SHORT $Exit$72
$LN53@ps_parser_:
; Line 1289
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN67@ps_parser_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 184				; 000000b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN67@ps_parser_:
	DD	5
	DD	$LN66@ps_parser_
$LN66@ps_parser_:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN61@ps_parser_
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN62@ps_parser_
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN63@ps_parser_
	DD	-80					; ffffffb0H
	DD	12					; 0000000cH
	DD	$LN64@ps_parser_
	DD	-132					; ffffff7cH
	DD	16					; 00000010H
	DD	$LN65@ps_parser_
$LN65@ps_parser_:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN64@ps_parser_:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	50					; 00000032H
	DB	0
$LN63@ps_parser_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN62@ps_parser_:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
$LN61@ps_parser_:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN68@ps_parser_:
	DD	$LN41@ps_parser_
	DD	$LN38@ps_parser_
	DD	$LN40@ps_parser_
	DD	$LN39@ps_parser_
	DD	$LN31@ps_parser_
	DD	$LN31@ps_parser_
	DD	$LN16@ps_parser_
	DD	$LN14@ps_parser_
_ps_parser_load_field ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_token$1 = -52						; size = 12
_limit$2 = -36						; size = 4
_cur$3 = -32						; size = 4
_old_limit$4 = -28					; size = 4
_old_cursor$5 = -24					; size = 4
_master$ = -16						; size = 12
_parser$ = 8						; size = 4
_tokens$ = 12						; size = 4
_max_tokens$ = 16					; size = 4
_pnum_tokens$ = 20					; size = 4
_ps_parser_to_token_array PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 726
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 730
	mov	eax, DWORD PTR _pnum_tokens$[ebp]
	mov	DWORD PTR [eax], -1
; Line 733
	lea	ecx, DWORD PTR _master$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_ps_parser_to_token
	add	esp, 8
; Line 735
	cmp	DWORD PTR _master$[ebp+8], 3
	jne	$LN6@ps_parser_
; Line 737
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _old_cursor$5[ebp], ecx
; Line 738
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _old_limit$4[ebp], eax
; Line 739
	mov	ecx, DWORD PTR _tokens$[ebp]
	mov	DWORD PTR _cur$3[ebp], ecx
; Line 740
	imul	edx, DWORD PTR _max_tokens$[ebp], 12
	add	edx, DWORD PTR _cur$3[ebp]
	mov	DWORD PTR _limit$2[ebp], edx
; Line 744
	mov	eax, DWORD PTR _master$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 745
	mov	edx, DWORD PTR _master$[ebp+4]
	sub	edx, 1
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN4@ps_parser_:
; Line 747
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN3@ps_parser_
; Line 752
	lea	ecx, DWORD PTR _token$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_ps_parser_to_token
	add	esp, 8
; Line 753
	cmp	DWORD PTR _token$1[ebp+8], 0
	jne	SHORT $LN2@ps_parser_
; Line 754
	jmp	SHORT $LN3@ps_parser_
$LN2@ps_parser_:
; Line 756
	cmp	DWORD PTR _tokens$[ebp], 0
	je	SHORT $LN1@ps_parser_
	mov	eax, DWORD PTR _cur$3[ebp]
	cmp	eax, DWORD PTR _limit$2[ebp]
	jae	SHORT $LN1@ps_parser_
; Line 757
	mov	ecx, DWORD PTR _cur$3[ebp]
	mov	edx, DWORD PTR _token$1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _token$1[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _token$1[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN1@ps_parser_:
; Line 759
	mov	eax, DWORD PTR _cur$3[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _cur$3[ebp], eax
; Line 760
	jmp	SHORT $LN4@ps_parser_
$LN3@ps_parser_:
; Line 762
	mov	eax, DWORD PTR _cur$3[ebp]
	sub	eax, DWORD PTR _tokens$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR _pnum_tokens$[ebp]
	mov	DWORD PTR [edx], eax
; Line 764
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _old_cursor$5[ebp]
	mov	DWORD PTR [eax], ecx
; Line 765
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _old_limit$4[ebp]
	mov	DWORD PTR [edx+8], eax
$LN6@ps_parser_:
; Line 767
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ps_parser_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@ps_parser_:
	DD	2
	DD	$LN10@ps_parser_
$LN10@ps_parser_:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN8@ps_parser_
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN9@ps_parser_
$LN9@ps_parser_:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN8@ps_parser_:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_ps_parser_to_token_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv145 = -28						; size = 4
tv72 = -24						; size = 4
_embed$ = -20						; size = 4
_limit$ = -16						; size = 4
_cur$ = -8						; size = 4
_parser$ = 8						; size = 4
_token$ = 12						; size = 4
_ps_parser_to_token PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 627
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 628
	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 629
	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 632
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_ps_parser_skip_spaces
	add	esp, 4
; Line 634
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
; Line 635
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 637
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN17@ps_parser_
; Line 638
	jmp	$LN18@ps_parser_
$LN17@ps_parser_:
; Line 640
	mov	eax, DWORD PTR _cur$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv72[ebp], cl
	cmp	BYTE PTR tv72[ebp], 40			; 00000028H
	je	SHORT $LN14@ps_parser_
	cmp	BYTE PTR tv72[ebp], 91			; 0000005bH
	je	SHORT $LN10@ps_parser_
	cmp	BYTE PTR tv72[ebp], 123			; 0000007bH
	je	SHORT $LN12@ps_parser_
	jmp	$LN3@ps_parser_
$LN14@ps_parser_:
; Line 644
	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx+8], 2
; Line 645
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 647
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	lea	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_skip_literal_string
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@ps_parser_
; Line 648
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN13@ps_parser_:
; Line 649
	jmp	$LN15@ps_parser_
$LN12@ps_parser_:
; Line 653
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+8], 3
; Line 654
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 656
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_skip_procedure
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@ps_parser_
; Line 657
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN11@ps_parser_:
; Line 658
	jmp	$LN15@ps_parser_
$LN10@ps_parser_:
; Line 665
	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx+8], 3
; Line 666
	mov	DWORD PTR _embed$[ebp], 1
; Line 667
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
; Line 670
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], eax
; Line 671
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_ps_parser_skip_spaces
	add	esp, 4
; Line 672
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
$LN9@ps_parser_:
; Line 674
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN8@ps_parser_
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN8@ps_parser_
; Line 678
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 91					; 0000005bH
	jne	SHORT $LN7@ps_parser_
; Line 679
	mov	edx, DWORD PTR _embed$[ebp]
	add	edx, 1
	mov	DWORD PTR _embed$[ebp], edx
	jmp	SHORT $LN6@ps_parser_
$LN7@ps_parser_:
; Line 680
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 93					; 0000005dH
	jne	SHORT $LN6@ps_parser_
; Line 682
	mov	edx, DWORD PTR _embed$[ebp]
	sub	edx, 1
	mov	DWORD PTR _embed$[ebp], edx
; Line 683
	cmp	DWORD PTR _embed$[ebp], 0
	jg	SHORT $LN6@ps_parser_
; Line 685
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 686
	jmp	SHORT $LN8@ps_parser_
$LN6@ps_parser_:
; Line 690
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 691
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_ps_parser_skip_PS_token
	add	esp, 4
; Line 693
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_ps_parser_skip_spaces
	add	esp, 4
; Line 694
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
; Line 695
	jmp	SHORT $LN9@ps_parser_
$LN8@ps_parser_:
; Line 696
	jmp	SHORT $LN15@ps_parser_
$LN3@ps_parser_:
; Line 700
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 701
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN20@ps_parser_
	mov	DWORD PTR tv145[ebp], 4
	jmp	SHORT $LN21@ps_parser_
$LN20@ps_parser_:
	mov	DWORD PTR tv145[ebp], 1
$LN21@ps_parser_:
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 702
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_ps_parser_skip_PS_token
	add	esp, 4
; Line 703
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
; Line 704
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN15@ps_parser_
; Line 705
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN15@ps_parser_:
; Line 708
	mov	eax, DWORD PTR _token$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@ps_parser_
; Line 710
	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 711
	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx+8], 0
$LN1@ps_parser_:
; Line 714
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], ecx
$LN18@ps_parser_:
; Line 715
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@ps_parser_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@ps_parser_:
	DD	1
	DD	$LN23@ps_parser_
$LN23@ps_parser_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN22@ps_parser_
$LN22@ps_parser_:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
_ps_parser_to_token ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -20						; size = 4
_limit$ = -16						; size = 4
_cur$ = -8						; size = 4
_parser$ = 8						; size = 4
_ps_parser_skip_PS_token PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 520
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 521
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _limit$[ebp], eax
; Line 522
	mov	DWORD PTR _error$[ebp], 0
; Line 525
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_skip_spaces
	add	esp, 8
; Line 526
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN18@ps_parser_
; Line 527
	jmp	$Exit$24
$LN18@ps_parser_:
; Line 530
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 91					; 0000005bH
	je	SHORT $LN16@ps_parser_
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 93					; 0000005dH
	jne	SHORT $LN17@ps_parser_
$LN16@ps_parser_:
; Line 532
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
; Line 533
	jmp	$Exit$24
$LN17@ps_parser_:
; Line 538
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 123				; 0000007bH
	jne	SHORT $LN15@ps_parser_
; Line 540
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	lea	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_skip_procedure
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 541
	jmp	$Exit$24
$LN15@ps_parser_:
; Line 544
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 40					; 00000028H
	jne	SHORT $LN14@ps_parser_
; Line 546
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_skip_literal_string
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 547
	jmp	$Exit$24
$LN14@ps_parser_:
; Line 550
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 60					; 0000003cH
	jne	SHORT $LN13@ps_parser_
; Line 552
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN12@ps_parser_
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	eax, 60					; 0000003cH
	jne	SHORT $LN12@ps_parser_
; Line 554
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
; Line 555
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
; Line 557
	jmp	SHORT $LN11@ps_parser_
$LN12@ps_parser_:
; Line 558
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_skip_string
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN11@ps_parser_:
; Line 560
	jmp	$Exit$24
$LN13@ps_parser_:
; Line 563
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 62					; 0000003eH
	jne	SHORT $LN10@ps_parser_
; Line 565
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
; Line 566
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN8@ps_parser_
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN9@ps_parser_
$LN8@ps_parser_:
; Line 569
	push	OFFSET $SG8475
	call	_FT_Message
	add	esp, 4
; Line 570
	push	OFFSET $SG8476
	push	570					; 0000023aH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 571
	jmp	$Exit$24
$LN9@ps_parser_:
; Line 573
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
; Line 574
	jmp	$Exit$24
$LN10@ps_parser_:
; Line 577
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN6@ps_parser_
; Line 578
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
$LN6@ps_parser_:
; Line 581
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$Exit$24
; Line 585
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	$LN3@ps_parser_
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	je	$LN3@ps_parser_
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	je	$LN3@ps_parser_
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	je	$LN3@ps_parser_
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 12					; 0000000cH
	je	SHORT $LN3@ps_parser_
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN3@ps_parser_
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 47					; 0000002fH
	je	SHORT $LN3@ps_parser_
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 40					; 00000028H
	je	SHORT $LN3@ps_parser_
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 41					; 00000029H
	je	SHORT $LN3@ps_parser_
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 60					; 0000003cH
	je	SHORT $LN3@ps_parser_
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN3@ps_parser_
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 91					; 0000005bH
	je	SHORT $LN3@ps_parser_
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 93					; 0000005dH
	je	SHORT $LN3@ps_parser_
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 123				; 0000007bH
	je	SHORT $LN3@ps_parser_
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 125				; 0000007dH
	je	SHORT $LN3@ps_parser_
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 37					; 00000025H
	jne	SHORT $LN4@ps_parser_
$LN3@ps_parser_:
; Line 586
	jmp	SHORT $Exit$24
$LN4@ps_parser_:
; Line 588
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax
; Line 589
	jmp	$LN6@ps_parser_
$Exit$24:
; Line 592
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN1@ps_parser_
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN1@ps_parser_
; Line 598
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	push	OFFSET $SG8485
	call	_FT_Message
	add	esp, 8
; Line 600
	push	OFFSET $SG8486
	push	600					; 00000258H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$LN1@ps_parser_:
; Line 603
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 604
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], eax
; Line 605
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@ps_parser_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@ps_parser_:
	DD	1
	DD	$LN22@ps_parser_
$LN22@ps_parser_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN21@ps_parser_
$LN21@ps_parser_:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
_ps_parser_skip_PS_token ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_ps_parser_skip_spaces PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 610
	push	ebp
	mov	ebp, esp
; Line 611
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_skip_spaces
	add	esp, 8
; Line 612
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ps_parser_skip_spaces ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_table$ = 8						; size = 4
_ps_table_release PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 265
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 266
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 269
	mov	edx, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [edx+12], -559038737		; deadbeefH
	jne	SHORT $LN11@ps_table_r
$LN9@ps_table_r:
; Line 271
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax], 0
	xor	ecx, ecx
	jne	SHORT $LN9@ps_table_r
$LN6@ps_table_r:
; Line 272
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+24], 0
	xor	eax, eax
	jne	SHORT $LN6@ps_table_r
$LN3@ps_table_r:
; Line 273
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+28], 0
	xor	edx, edx
	jne	SHORT $LN3@ps_table_r
; Line 274
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN11@ps_table_r:
; Line 276
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_table_release ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_old_base$ = -20					; size = 4
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_table$ = 8						; size = 4
_ps_table_done PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 241
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 242
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 244
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _old_base$[ebp], eax
; Line 248
	cmp	DWORD PTR _old_base$[ebp], 0
	jne	SHORT $LN5@ps_table_d
; Line 249
	jmp	SHORT $LN6@ps_table_d
$LN5@ps_table_d:
; Line 251
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@ps_table_d
; Line 252
	jmp	SHORT $LN6@ps_table_d
$LN4@ps_table_d:
; Line 253
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _old_base$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 254
	mov	edx, DWORD PTR _old_base$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_shift_elements
	add	esp, 8
; Line 256
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+8], eax
$LN3@ps_table_d:
; Line 257
	mov	ecx, DWORD PTR _old_base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _old_base$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@ps_table_d
; Line 259
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR _error$[ebp], ecx
$LN6@ps_table_d:
; Line 260
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ps_table_d
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@ps_table_d:
	DD	1
	DD	$LN9@ps_table_d
$LN9@ps_table_d:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@ps_table_d
$LN8@ps_table_d:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ps_table_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_in_offset$1 = -12					; size = 4
_new_size$2 = -8					; size = 4
_error$3 = -4						; size = 4
_table$ = 8						; size = 4
_idx$ = 12						; size = 4
_object$ = 16						; size = 4
_length$ = 20						; size = 4
_ps_table_add PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 172
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 173
	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN9@ps_table_a
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jl	SHORT $LN10@ps_table_a
$LN9@ps_table_a:
; Line 175
	push	OFFSET $SG8300
	call	_FT_Message
	add	esp, 4
; Line 176
	push	OFFSET $SG8301
	push	176					; 000000b0H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN11@ps_table_a
$LN10@ps_table_a:
; Line 179
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN8@ps_table_a
; Line 181
	push	OFFSET $SG8303
	call	_FT_Message
	add	esp, 4
; Line 182
	push	OFFSET $SG8304
	push	182					; 000000b6H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN11@ps_table_a
$LN8@ps_table_a:
; Line 186
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jbe	$LN7@ps_table_a
; Line 189
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _new_size$2[ebp], eax
; Line 193
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR _object$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _in_offset$1[ebp], edx
; Line 194
	js	SHORT $LN5@ps_table_a
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _in_offset$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN4@ps_table_a
$LN5@ps_table_a:
; Line 195
	mov	DWORD PTR _in_offset$1[ebp], -1
$LN4@ps_table_a:
; Line 197
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _length$[ebp]
	cmp	DWORD PTR _new_size$2[ebp], eax
	jae	SHORT $LN3@ps_table_a
; Line 201
	mov	ecx, DWORD PTR _new_size$2[ebp]
	shr	ecx, 2
	mov	edx, DWORD PTR _new_size$2[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	mov	DWORD PTR _new_size$2[ebp], eax
; Line 202
	mov	ecx, DWORD PTR _new_size$2[ebp]
	add	ecx, 1023				; 000003ffH
	and	ecx, -1024				; fffffc00H
	mov	DWORD PTR _new_size$2[ebp], ecx
; Line 203
	jmp	SHORT $LN4@ps_table_a
$LN3@ps_table_a:
; Line 205
	mov	edx, DWORD PTR _new_size$2[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_reallocate_t1_table
	add	esp, 8
	mov	DWORD PTR _error$3[ebp], eax
; Line 206
	cmp	DWORD PTR _error$3[ebp], 0
	je	SHORT $LN2@ps_table_a
; Line 207
	mov	eax, DWORD PTR _error$3[ebp]
	jmp	SHORT $LN11@ps_table_a
$LN2@ps_table_a:
; Line 209
	cmp	DWORD PTR _in_offset$1[ebp], 0
	jl	SHORT $LN7@ps_table_a
; Line 210
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _in_offset$1[ebp]
	mov	DWORD PTR _object$[ebp], edx
$LN7@ps_table_a:
; Line 214
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 215
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 216
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _table$[ebp]
	add	edx, DWORD PTR [eax+4]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 218
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 219
	xor	eax, eax
$LN11@ps_table_a:
; Line 220
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ps_table_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -8						; size = 4
_table$ = 8						; size = 4
_count$ = 12						; size = 4
_memory$ = 16						; size = 4
_ps_table_new PROC
; File d:\mozilla\modules\freetype2\src\psaux\psobjs.c
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 76
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 78
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+24], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@ps_table_n
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+28], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@ps_table_n
$LN5@ps_table_n:
; Line 79
	jmp	SHORT $Exit$12
$LN6@ps_table_n:
; Line 81
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 82
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+12], -559038737		; deadbeefH
; Line 83
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 84
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax], 0
; Line 85
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 86
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 88
	mov	eax, DWORD PTR _table$[ebp]
	add	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _ps_table_funcs
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ps_table_funcs+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _ps_table_funcs+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _ps_table_funcs+12
	mov	DWORD PTR [eax+12], edx
$Exit$12:
; Line 91
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@ps_table_n
$LN3@ps_table_n:
; Line 92
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+24], 0
	xor	ecx, ecx
	jne	SHORT $LN3@ps_table_n
$LN4@ps_table_n:
; Line 94
	mov	eax, DWORD PTR _error$[ebp]
; Line 95
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ps_table_n
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@ps_table_n:
	DD	1
	DD	$LN10@ps_table_n
$LN10@ps_table_n:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@ps_table_n
$LN9@ps_table_n:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ps_table_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_MulFix_i386 PROC
; File d:\mozilla\modules\freetype2\include\internal\ftcalc.h
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 159
	mov	eax, DWORD PTR _a$[ebp]
; Line 160
	mov	edx, DWORD PTR _b$[ebp]
; Line 161
	imul	edx
; Line 162
	mov	ecx, edx
; Line 163
	sar	ecx, 31					; 0000001fH
; Line 164
	add	ecx, 32768				; 00008000H
; Line 165
	add	eax, ecx
; Line 166
	adc	edx, 0
; Line 167
	shr	eax, 16					; 00000010H
; Line 168
	shl	edx, 16					; 00000010H
; Line 169
	add	eax, edx
; Line 170
	mov	DWORD PTR _result$[ebp], eax
; Line 172
	mov	eax, DWORD PTR _result$[ebp]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_MulFix_i386 ENDP
_TEXT	ENDS
END
