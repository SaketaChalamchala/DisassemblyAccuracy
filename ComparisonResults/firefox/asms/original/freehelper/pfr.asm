; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\pfr\pfr.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_pfr_driver_class
PUBLIC	_pfr_cmap_class_rec
CONST	SEGMENT
_pfr_header_fields DB 04H
	DB	00H
	DW	03aH
	DB	010H
	DB	04H
	DW	00H
	DB	0cH
	DB	04H
	DW	04H
	DB	0cH
	DB	04H
	DW	08H
	DB	0cH
	DB	04H
	DW	0cH
	DB	0cH
	DB	04H
	DW	010H
	DB	0cH
	DB	04H
	DW	014H
	DB	0cH
	DB	04H
	DW	018H
	DB	014H
	DB	04H
	DW	01cH
	DB	014H
	DB	04H
	DW	020H
	DB	0cH
	DB	04H
	DW	024H
	DB	014H
	DB	04H
	DW	028H
	DB	014H
	DB	04H
	DW	02cH
	DB	0cH
	DB	04H
	DW	030H
	DB	014H
	DB	04H
	DW	034H
	DB	014H
	DB	04H
	DW	038H
	DB	08H
	DB	04H
	DW	03cH
	DB	08H
	DB	04H
	DW	040H
	DB	08H
	DB	04H
	DW	044H
	DB	08H
	DB	04H
	DW	048H
	DB	08H
	DB	04H
	DW	04cH
	DB	014H
	DB	04H
	DW	050H
	DB	014H
	DB	04H
	DW	054H
	DB	014H
	DB	04H
	DW	058H
	DB	0cH
	DB	04H
	DW	05cH
	DB	08H
	DB	04H
	DW	060H
	DB	08H
	DB	04H
	DW	064H
	DB	0cH
	DB	04H
	DW	068H
	DB	00H
	DB	00H
	DW	00H
_pfr_metrics_service_rec DD FLAT:_pfr_get_metrics
	DD	FLAT:_pfr_face_get_kerning
	DD	FLAT:_pfr_get_advance
_pfr_driver_class DD 0101H
	DD	01cH
	DD	FLAT:$SG9773
	DD	010000H
	DD	020000H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_pfr_get_service
	DD	01b8H
	DD	02cH
	DD	0c4H
	DD	FLAT:_pfr_face_init
	DD	FLAT:_pfr_face_done
	DD	00H
	DD	00H
	DD	FLAT:_pfr_slot_init
	DD	FLAT:_pfr_slot_done
	DD	FLAT:_pfr_slot_load
	DD	FLAT:_pfr_get_kerning
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_pfr_services DD FLAT:$SG9759
	DD	FLAT:_pfr_metrics_service_rec
	DD	FLAT:$SG9760
	DD	FLAT:$SG9761
	DD	00H
	DD	00H
_pfr_cmap_class_rec DD 018H
	DD	FLAT:_pfr_cmap_init
	DD	FLAT:_pfr_cmap_done
	DD	FLAT:_pfr_cmap_char_index
	DD	FLAT:_pfr_cmap_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_pfr_phy_font_extra_items DD 01H
	DD	FLAT:_pfr_extra_item_load_bitmap_info
	DD	02H
	DD	FLAT:_pfr_extra_item_load_font_id
	DD	03H
	DD	FLAT:_pfr_extra_item_load_stem_snaps
	DD	04H
	DD	FLAT:_pfr_extra_item_load_kerning_pairs
	DD	00H
	DD	00H
CONST	ENDS
_DATA	SEGMENT
$SG9382	DB	'PFR driver', 0aH, 00H
$SG9390	DB	'  not a PFR font', 0aH, 00H
	ORG $+2
$SG9391	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrobjs.c', 00H
	ORG $+1
$SG9396	DB	'pfr_face_init: invalid face index', 0aH, 00H
	ORG $+1
$SG9397	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrobjs.c', 00H
	ORG $+1
$SG9410	DB	'pfr_face_init: font doesn''t contain glyphs', 0aH, 00H
$SG9411	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrobjs.c', 00H
	ORG $+1
$SG9490	DB	'pfr_slot_load: glyph index %d', 0aH, 00H
	ORG $+1
$SG9494	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrobjs.c', 00H
	ORG $+1
$SG8471	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrload.c', 00H
	ORG $+1
$SG8472	DB	'pfr_phy_font_load: invalid physical font table', 0aH, 00H
$SG9499	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrobjs.c', 00H
	ORG $+1
$SG8551	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrgload.c', 00H
$SG8552	DB	'pfr_glyph_line_to: invalid glyph data', 0aH, 00H
	ORG $+1
$SG8572	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrgload.c', 00H
$SG8573	DB	'pfr_glyph_line_to: invalid glyph data', 0aH, 00H
	ORG $+1
$SG7593	DB	'pfr_extra_items_parse: invalid extra items table', 0aH, 00H
	ORG $+2
$SG7594	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrload.c', 00H
	ORG $+1
$SG8699	DB	'- end glyph', 00H
$SG8705	DB	'- general line', 00H
	ORG $+1
$SG8712	DB	'- move to inside', 00H
	ORG $+3
$SG8718	DB	'- move to outside', 00H
	ORG $+2
$SG8724	DB	'- horizontal line to cx.%d', 00H
	ORG $+1
$SG8731	DB	'- vertical line to cy.%d', 00H
	ORG $+3
$SG9759	DB	'pfr-metrics', 00H
$SG9760	DB	'xf86-driver-name', 00H
	ORG $+3
$SG9761	DB	'PFR', 00H
$SG8738	DB	'- hv curve ', 00H
$SG8744	DB	'- vh curve', 00H
	ORG $+1
$SG9773	DB	'pfr', 00H
$SG8750	DB	'- general curve', 00H
$SG8771	DB	' cx#%d', 00H
	ORG $+1
$SG8787	DB	' x.%d', 00H
	ORG $+2
$SG8798	DB	' dx.%d', 00H
	ORG $+1
$SG8804	DB	' |', 00H
	ORG $+1
$SG7783	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrload.c', 00H
	ORG $+1
$SG8820	DB	' cy#%d', 00H
	ORG $+1
$SG8836	DB	' y.%d', 00H
	ORG $+2
$SG8847	DB	' dy.%d', 00H
	ORG $+1
$SG8853	DB	' -', 00H
	ORG $+1
$SG8865	DB	0aH, 00H
	ORG $+2
$SG8876	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrgload.c', 00H
$SG8877	DB	'pfr_glyph_load_simple: invalid glyph data', 0aH, 00H
	ORG $+1
$SG8911	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrgload.c', 00H
$SG8912	DB	'pfr_glyph_load_compound: too many compound glyphs compon'
	DB	'ents', 0aH, 00H
	ORG $+2
$SG7896	DB	'pfr_log_font_load: invalid logical font table', 0aH, 00H
	ORG $+1
$SG7897	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrload.c', 00H
	ORG $+1
$SG7988	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrload.c', 00H
	ORG $+1
$SG7989	DB	'pfr_extra_item_load_bitmap_info: invalid bitmap info tab'
	DB	'le', 0aH, 00H
$SG9032	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrgload.c', 00H
$SG9033	DB	'pfr_glyph_load_compound: invalid glyph data', 0aH, 00H
	ORG $+3
$SG9066	DB	'compound glyph with %d elements (offset %lu):', 0aH, 00H
	ORG $+1
$SG8046	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrload.c', 00H
	ORG $+1
$SG8047	DB	'pfr_exta_item_load_stem_snaps: invalid stem snaps table', 0aH
	DB	00H
	ORG $+3
$SG9078	DB	'  subglyph %d:', 0aH, 00H
$SG8064	DB	'pfr_extra_item_load_kerning_pairs()', 0aH, 00H
	ORG $+3
$SG9095	DB	'end compound glyph with %d elements', 0aH, 00H
	ORG $+3
$SG10124 DB	'd:\mozilla\modules\freetype2\src\pfr\pfrsbit.c', 00H
	ORG $+1
$SG10125 DB	'pfr_load_bitmap_metrics: invalid glyph data', 0aH, 00H
	ORG $+3
$SG9101	DB	'simple glyph (offset %lu)', 0aH, 00H
	ORG $+1
$SG10149 DB	'pfr_read_bitmap_data: invalid image type', 0aH, 00H
	ORG $+2
$SG10150 DB	'd:\mozilla\modules\freetype2\src\pfr\pfrsbit.c', 00H
	ORG $+1
$SG9137	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrcmap.c', 00H
	ORG $+1
$SG10175 DB	'd:\mozilla\modules\freetype2\src\pfr\pfrsbit.c', 00H
	ORG $+1
$SG10186 DB	'd:\mozilla\modules\freetype2\src\pfr\pfrsbit.c', 00H
	ORG $+1
$SG8139	DB	'd:\mozilla\modules\freetype2\src\pfr\pfrload.c', 00H
	ORG $+1
$SG8140	DB	'pfr_extra_item_load_kerning_pairs: invalid kerning pairs'
	DB	' table', 0aH, 00H
$SG10207 DB	'pfr_slot_load_bitmap:', 00H
	ORG $+2
$SG10212 DB	'huge bitmap glyph %dx%d over FT_GlyphSlot', 0aH, 00H
	ORG $+1
$SG10213 DB	'd:\mozilla\modules\freetype2\src\pfr\pfrsbit.c', 00H
_DATA	ENDS
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_FT_MulDiv:PROC
EXTRN	_FT_MulFix:PROC
EXTRN	_FT_DivFix:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_FT_GlyphLoader_Rewind:PROC
EXTRN	_FT_GlyphLoader_CheckPoints:PROC
EXTRN	_FT_GlyphLoader_Add:PROC
EXTRN	_ft_service_list_lookup:PROC
EXTRN	_FT_CMap_New:PROC
EXTRN	_ft_glyphslot_alloc_bitmap:PROC
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Skip:PROC
EXTRN	_FT_Stream_Pos:PROC
EXTRN	_FT_Stream_EnterFrame:PROC
EXTRN	_FT_Stream_ExitFrame:PROC
EXTRN	_FT_Stream_ReadUShort:PROC
EXTRN	_FT_Stream_ReadUOffset:PROC
EXTRN	_FT_Stream_ReadFields:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_FT_Outline_Get_CBox:PROC
EXTRN	_FT_MSB:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -36						; size = 4
_writer$ = -28						; size = 20
_error$ = -4						; size = 4
_p$ = 8							; size = 4
_limit$ = 12						; size = 4
_format$ = 16						; size = 4
_decreasing$ = 20					; size = 1
_target$ = 24						; size = 4
_pfr_load_bitmap_bits PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrsbit.c
; Line 486
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 487
	mov	DWORD PTR _error$[ebp], 0
; Line 491
	mov	eax, DWORD PTR _target$[ebp]
	cmp	DWORD PTR [eax], 0
	jbe	$LN7@pfr_load_b
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jbe	$LN7@pfr_load_b
; Line 493
	movzx	edx, BYTE PTR _decreasing$[ebp]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR _writer$[ebp]
	push	ecx
	call	_pfr_bitwriter_init
	add	esp, 12					; 0000000cH
; Line 495
	mov	edx, DWORD PTR _format$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN4@pfr_load_b
	cmp	DWORD PTR tv71[ebp], 1
	je	SHORT $LN3@pfr_load_b
	cmp	DWORD PTR tv71[ebp], 2
	je	SHORT $LN2@pfr_load_b
	jmp	SHORT $LN1@pfr_load_b
$LN4@pfr_load_b:
; Line 498
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _writer$[ebp]
	push	edx
	call	_pfr_bitwriter_decode_bytes
	add	esp, 12					; 0000000cH
; Line 499
	jmp	SHORT $LN7@pfr_load_b
$LN3@pfr_load_b:
; Line 502
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _writer$[ebp]
	push	edx
	call	_pfr_bitwriter_decode_rle1
	add	esp, 12					; 0000000cH
; Line 503
	jmp	SHORT $LN7@pfr_load_b
$LN2@pfr_load_b:
; Line 506
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _writer$[ebp]
	push	edx
	call	_pfr_bitwriter_decode_rle2
	add	esp, 12					; 0000000cH
; Line 507
	jmp	SHORT $LN7@pfr_load_b
$LN1@pfr_load_b:
; Line 510
	push	OFFSET $SG10149
	call	_FT_Message
	add	esp, 4
; Line 511
	push	OFFSET $SG10150
	push	511					; 000001ffH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$LN7@pfr_load_b:
; Line 515
	mov	eax, DWORD PTR _error$[ebp]
; Line 516
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@pfr_load_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@pfr_load_b:
	DD	1
	DD	$LN11@pfr_load_b
$LN11@pfr_load_b:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN10@pfr_load_b
$LN10@pfr_load_b:
	DB	119					; 00000077H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_pfr_load_bitmap_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv241 = -44						; size = 4
tv191 = -40						; size = 4
tv70 = -36						; size = 4
_ysize$ = -32						; size = 4
_xsize$ = -28						; size = 4
_advance$ = -24						; size = 4
_ypos$ = -20						; size = 4
_xpos$ = -16						; size = 4
_p$ = -12						; size = 4
_b$ = -6						; size = 1
_flags$ = -5						; size = 1
_error$ = -4						; size = 4
_pdata$ = 8						; size = 4
_limit$ = 12						; size = 4
_scaled_advance$ = 16					; size = 4
_axpos$ = 20						; size = 4
_aypos$ = 24						; size = 4
_axsize$ = 28						; size = 4
_aysize$ = 32						; size = 4
_aadvance$ = 36						; size = 4
_aformat$ = 40						; size = 4
_pfr_load_bitmap_metrics PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrsbit.c
; Line 355
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 356
	mov	DWORD PTR _error$[ebp], 0
; Line 359
	mov	eax, DWORD PTR _pdata$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
$LN65@pfr_load_b:
; Line 364
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN64@pfr_load_b
	jmp	$Too_Short$71
$LN64@pfr_load_b:
	xor	eax, eax
	jne	SHORT $LN65@pfr_load_b
; Line 365
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _flags$[ebp], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 367
	mov	DWORD PTR _xpos$[ebp], 0
; Line 368
	mov	DWORD PTR _ypos$[ebp], 0
; Line 369
	mov	DWORD PTR _xsize$[ebp], 0
; Line 370
	mov	DWORD PTR _ysize$[ebp], 0
; Line 371
	mov	DWORD PTR _advance$[ebp], 0
; Line 373
	movzx	ecx, BYTE PTR _flags$[ebp]
	and	ecx, 3
	mov	DWORD PTR tv70[ebp], ecx
	cmp	DWORD PTR tv70[ebp], 3
	ja	$LN60@pfr_load_b
	mov	edx, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN68@pfr_load_b[edx*4]
$LN58@pfr_load_b:
; Line 376
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN57@pfr_load_b
	jmp	$Too_Short$71
$LN57@pfr_load_b:
	xor	ecx, ecx
	jne	SHORT $LN58@pfr_load_b
; Line 377
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _b$[ebp], al
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 378
	movsx	edx, BYTE PTR _b$[ebp]
	sar	edx, 4
	mov	DWORD PTR _xpos$[ebp], edx
; Line 379
	movsx	eax, BYTE PTR _b$[ebp]
	shl	eax, 4
	movsx	ecx, al
	sar	ecx, 4
	mov	DWORD PTR _ypos$[ebp], ecx
; Line 380
	jmp	$LN60@pfr_load_b
$LN53@pfr_load_b:
; Line 383
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN52@pfr_load_b
	jmp	$Too_Short$71
$LN52@pfr_load_b:
	xor	eax, eax
	jne	SHORT $LN53@pfr_load_b
; Line 384
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _xpos$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 385
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _ypos$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 386
	jmp	$LN60@pfr_load_b
$LN48@pfr_load_b:
; Line 389
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN47@pfr_load_b
	jmp	$Too_Short$71
$LN47@pfr_load_b:
	xor	edx, edx
	jne	SHORT $LN48@pfr_load_b
; Line 390
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	DWORD PTR _xpos$[ebp], eax
; Line 391
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	mov	DWORD PTR _ypos$[ebp], ecx
; Line 392
	jmp	$LN60@pfr_load_b
$LN43@pfr_load_b:
; Line 395
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 6
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN42@pfr_load_b
	jmp	$Too_Short$71
$LN42@pfr_load_b:
	xor	eax, eax
	jne	SHORT $LN43@pfr_load_b
; Line 396
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-3]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-3]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-3]
	or	edx, ecx
	mov	DWORD PTR _xpos$[ebp], edx
; Line 397
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 3
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-3]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-3]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-3]
	or	eax, edx
	mov	DWORD PTR _ypos$[ebp], eax
$LN60@pfr_load_b:
; Line 404
	mov	al, BYTE PTR _flags$[ebp]
	shr	al, 2
	mov	BYTE PTR _flags$[ebp], al
; Line 405
	movzx	ecx, BYTE PTR _flags$[ebp]
	and	ecx, 3
	mov	DWORD PTR tv191[ebp], ecx
	cmp	DWORD PTR tv191[ebp], 3
	ja	$LN37@pfr_load_b
	mov	edx, DWORD PTR tv191[ebp]
	jmp	DWORD PTR $LN69@pfr_load_b[edx*4]
$LN36@pfr_load_b:
; Line 409
	mov	DWORD PTR _xsize$[ebp], 0
; Line 410
	mov	DWORD PTR _ysize$[ebp], 0
; Line 411
	jmp	$LN37@pfr_load_b
$LN34@pfr_load_b:
; Line 414
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN33@pfr_load_b
	jmp	$Too_Short$71
$LN33@pfr_load_b:
	xor	ecx, ecx
	jne	SHORT $LN34@pfr_load_b
; Line 415
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _b$[ebp], al
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 416
	movsx	edx, BYTE PTR _b$[ebp]
	sar	edx, 4
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _xsize$[ebp], edx
; Line 417
	movsx	eax, BYTE PTR _b$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _ysize$[ebp], eax
; Line 418
	jmp	$LN37@pfr_load_b
$LN29@pfr_load_b:
; Line 421
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN28@pfr_load_b
	jmp	$Too_Short$71
$LN28@pfr_load_b:
	xor	edx, edx
	jne	SHORT $LN29@pfr_load_b
; Line 422
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _xsize$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 423
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ysize$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 424
	jmp	SHORT $LN37@pfr_load_b
$LN24@pfr_load_b:
; Line 427
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN23@pfr_load_b
	jmp	$Too_Short$71
$LN23@pfr_load_b:
	xor	ecx, ecx
	jne	SHORT $LN24@pfr_load_b
; Line 428
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _xsize$[ebp], edx
; Line 429
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _ysize$[ebp], eax
$LN37@pfr_load_b:
; Line 436
	mov	cl, BYTE PTR _flags$[ebp]
	shr	cl, 2
	mov	BYTE PTR _flags$[ebp], cl
; Line 437
	movzx	edx, BYTE PTR _flags$[ebp]
	and	edx, 3
	mov	DWORD PTR tv241[ebp], edx
	cmp	DWORD PTR tv241[ebp], 3
	ja	$LN18@pfr_load_b
	mov	eax, DWORD PTR tv241[ebp]
	jmp	DWORD PTR $LN70@pfr_load_b[eax*4]
$LN17@pfr_load_b:
; Line 440
	mov	ecx, DWORD PTR _scaled_advance$[ebp]
	mov	DWORD PTR _advance$[ebp], ecx
; Line 441
	jmp	$LN18@pfr_load_b
$LN15@pfr_load_b:
; Line 444
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN14@pfr_load_b
	jmp	$Too_Short$71
$LN14@pfr_load_b:
	xor	eax, eax
	jne	SHORT $LN15@pfr_load_b
; Line 445
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	shl	edx, 8
	mov	DWORD PTR _advance$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 446
	jmp	$LN18@pfr_load_b
$LN10@pfr_load_b:
; Line 449
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN9@pfr_load_b
	jmp	$Too_Short$71
$LN9@pfr_load_b:
	xor	edx, edx
	jne	SHORT $LN10@pfr_load_b
; Line 450
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	DWORD PTR _advance$[ebp], eax
; Line 451
	jmp	SHORT $LN18@pfr_load_b
$LN5@pfr_load_b:
; Line 454
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN4@pfr_load_b
	jmp	$Too_Short$71
$LN4@pfr_load_b:
	xor	edx, edx
	jne	SHORT $LN5@pfr_load_b
; Line 455
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	DWORD PTR _advance$[ebp], ecx
$LN18@pfr_load_b:
; Line 462
	mov	ecx, DWORD PTR _axpos$[ebp]
	mov	edx, DWORD PTR _xpos$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 463
	mov	eax, DWORD PTR _aypos$[ebp]
	mov	ecx, DWORD PTR _ypos$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 464
	mov	edx, DWORD PTR _axsize$[ebp]
	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR [edx], eax
; Line 465
	mov	ecx, DWORD PTR _aysize$[ebp]
	mov	edx, DWORD PTR _ysize$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 466
	mov	eax, DWORD PTR _aadvance$[ebp]
	mov	ecx, DWORD PTR _advance$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 467
	movzx	edx, BYTE PTR _flags$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR _aformat$[ebp]
	mov	DWORD PTR [eax], edx
; Line 468
	mov	ecx, DWORD PTR _pdata$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
$Exit$72:
; Line 471
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN66@pfr_load_b
$Too_Short$71:
; Line 474
	push	OFFSET $SG10124
	push	474					; 000001daH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 475
	push	OFFSET $SG10125
	call	_FT_Message
	add	esp, 4
; Line 476
	jmp	SHORT $Exit$72
$LN66@pfr_load_b:
; Line 477
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN68@pfr_load_b:
	DD	$LN58@pfr_load_b
	DD	$LN53@pfr_load_b
	DD	$LN48@pfr_load_b
	DD	$LN43@pfr_load_b
$LN69@pfr_load_b:
	DD	$LN36@pfr_load_b
	DD	$LN34@pfr_load_b
	DD	$LN29@pfr_load_b
	DD	$LN24@pfr_load_b
$LN70@pfr_load_b:
	DD	$LN17@pfr_load_b
	DD	$LN15@pfr_load_b
	DD	$LN10@pfr_load_b
	DD	$LN5@pfr_load_b
_pfr_load_bitmap_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_code$1 = -28						; size = 4
_middle$2 = -24						; size = 4
_buff$ = -20						; size = 4
_two$ = -13						; size = 1
_char_len$ = -12					; size = 4
_right$ = -8						; size = 4
_left$ = -4						; size = 4
_base$ = 8						; size = 4
_limit$ = 12						; size = 4
_count$ = 16						; size = 4
_flags$ = 20						; size = 4
_char_code$ = 24					; size = 4
_found_offset$ = 28					; size = 4
_found_size$ = 32					; size = 4
_pfr_lookup_bitmap_data PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrsbit.c
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 284
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1
	mov	BYTE PTR _two$[ebp], al
; Line 288
	mov	DWORD PTR _char_len$[ebp], 4
; Line 289
	movzx	ecx, BYTE PTR _two$[ebp]
	test	ecx, ecx
	je	SHORT $LN15@pfr_lookup
	mov	edx, DWORD PTR _char_len$[ebp]
	add	edx, 1
	mov	DWORD PTR _char_len$[ebp], edx
$LN15@pfr_lookup:
; Line 290
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 2
	je	SHORT $LN14@pfr_lookup
	mov	ecx, DWORD PTR _char_len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _char_len$[ebp], ecx
$LN14@pfr_lookup:
; Line 291
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 4
	je	SHORT $LN13@pfr_lookup
	mov	eax, DWORD PTR _char_len$[ebp]
	add	eax, 1
	mov	DWORD PTR _char_len$[ebp], eax
$LN13@pfr_lookup:
; Line 293
	mov	DWORD PTR _left$[ebp], 0
; Line 294
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _right$[ebp], ecx
$LN12@pfr_lookup:
; Line 296
	mov	edx, DWORD PTR _left$[ebp]
	cmp	edx, DWORD PTR _right$[ebp]
	jae	$Fail$18
; Line 301
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR _right$[ebp]
	shr	eax, 1
	mov	DWORD PTR _middle$2[ebp], eax
; Line 302
	mov	ecx, DWORD PTR _middle$2[ebp]
	imul	ecx, DWORD PTR _char_len$[ebp]
	add	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR _buff$[ebp], ecx
; Line 306
	mov	edx, DWORD PTR _buff$[ebp]
	add	edx, DWORD PTR _char_len$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN10@pfr_lookup
; Line 307
	jmp	SHORT $Fail$18
$LN10@pfr_lookup:
; Line 309
	movzx	eax, BYTE PTR _two$[ebp]
	test	eax, eax
	je	SHORT $LN9@pfr_lookup
; Line 310
	mov	ecx, DWORD PTR _buff$[ebp]
	add	ecx, 2
	mov	DWORD PTR _buff$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _buff$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _buff$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _code$1[ebp], ecx
; Line 311
	jmp	SHORT $LN8@pfr_lookup
$LN9@pfr_lookup:
; Line 312
	mov	edx, DWORD PTR _buff$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _code$1[ebp], eax
	mov	ecx, DWORD PTR _buff$[ebp]
	add	ecx, 1
	mov	DWORD PTR _buff$[ebp], ecx
$LN8@pfr_lookup:
; Line 314
	mov	edx, DWORD PTR _code$1[ebp]
	cmp	edx, DWORD PTR _char_code$[ebp]
	jne	SHORT $LN7@pfr_lookup
; Line 315
	jmp	SHORT $Found_It$19
$LN7@pfr_lookup:
; Line 317
	mov	eax, DWORD PTR _code$1[ebp]
	cmp	eax, DWORD PTR _char_code$[ebp]
	jae	SHORT $LN6@pfr_lookup
; Line 318
	mov	ecx, DWORD PTR _middle$2[ebp]
	mov	DWORD PTR _left$[ebp], ecx
; Line 319
	jmp	SHORT $LN5@pfr_lookup
$LN6@pfr_lookup:
; Line 320
	mov	edx, DWORD PTR _middle$2[ebp]
	mov	DWORD PTR _right$[ebp], edx
$LN5@pfr_lookup:
; Line 321
	jmp	$LN12@pfr_lookup
$Fail$18:
; Line 325
	mov	eax, DWORD PTR _found_size$[ebp]
	mov	DWORD PTR [eax], 0
; Line 326
	mov	ecx, DWORD PTR _found_offset$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 327
	jmp	$LN16@pfr_lookup
$Found_It$19:
; Line 330
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 2
	je	SHORT $LN4@pfr_lookup
; Line 331
	mov	eax, DWORD PTR _buff$[ebp]
	add	eax, 2
	mov	DWORD PTR _buff$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _buff$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _buff$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	ecx, DWORD PTR _found_size$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 332
	jmp	SHORT $LN3@pfr_lookup
$LN4@pfr_lookup:
; Line 333
	mov	edx, DWORD PTR _buff$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _found_size$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _buff$[ebp]
	add	edx, 1
	mov	DWORD PTR _buff$[ebp], edx
$LN3@pfr_lookup:
; Line 335
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4
	je	SHORT $LN2@pfr_lookup
; Line 336
	mov	ecx, DWORD PTR _buff$[ebp]
	add	ecx, 3
	mov	DWORD PTR _buff$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _buff$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-3]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _buff$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-3]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _buff$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-3]
	or	edx, ecx
	mov	eax, DWORD PTR _found_offset$[ebp]
	mov	DWORD PTR [eax], edx
; Line 337
	jmp	SHORT $LN16@pfr_lookup
$LN2@pfr_lookup:
; Line 338
	mov	ecx, DWORD PTR _buff$[ebp]
	add	ecx, 2
	mov	DWORD PTR _buff$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _buff$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _buff$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	edx, DWORD PTR _found_offset$[ebp]
	mov	DWORD PTR [edx], ecx
$LN16@pfr_lookup:
; Line 339
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_lookup_bitmap_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv94 = -36						; size = 4
_c$ = -32						; size = 4
_mask$ = -28						; size = 4
_cur$ = -24						; size = 4
_left$ = -20						; size = 4
_reload$ = -16						; size = 4
_count$ = -12						; size = 4
_phase$ = -8						; size = 4
_n$ = -4						; size = 4
_writer$ = 8						; size = 4
_p$ = 12						; size = 4
_limit$ = 16						; size = 4
_pfr_bitwriter_decode_rle2 PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrsbit.c
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 208
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _left$[ebp], ecx
; Line 209
	mov	edx, DWORD PTR _writer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 210
	mov	DWORD PTR _mask$[ebp], 128		; 00000080H
; Line 211
	mov	DWORD PTR _c$[ebp], 0
; Line 214
	mov	ecx, DWORD PTR _writer$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _n$[ebp], edx
; Line 216
	mov	DWORD PTR _phase$[ebp], 1
; Line 217
	mov	DWORD PTR _count$[ebp], 0
; Line 218
	mov	DWORD PTR _reload$[ebp], 1
; Line 220
	jmp	SHORT $LN13@pfr_bitwri
$LN12@pfr_bitwri:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN13@pfr_bitwri:
	cmp	DWORD PTR _n$[ebp], 0
	jle	$LN11@pfr_bitwri
; Line 222
	cmp	DWORD PTR _reload$[ebp], 0
	je	SHORT $LN10@pfr_bitwri
$LN9@pfr_bitwri:
; Line 226
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN6@pfr_bitwri
; Line 227
	jmp	SHORT $LN10@pfr_bitwri
$LN6@pfr_bitwri:
; Line 229
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 230
	mov	edx, DWORD PTR _phase$[ebp]
	xor	edx, 1
	mov	DWORD PTR _phase$[ebp], edx
; Line 232
	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN9@pfr_bitwri
$LN10@pfr_bitwri:
; Line 235
	cmp	DWORD PTR _phase$[ebp], 0
	je	SHORT $LN5@pfr_bitwri
; Line 236
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN5@pfr_bitwri:
; Line 238
	mov	ecx, DWORD PTR _mask$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mask$[ebp], ecx
; Line 240
	mov	edx, DWORD PTR _left$[ebp]
	sub	edx, 1
	mov	DWORD PTR _left$[ebp], edx
	cmp	DWORD PTR _left$[ebp], 0
	jg	SHORT $LN4@pfr_bitwri
; Line 242
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx+ecx], al
; Line 243
	mov	DWORD PTR _c$[ebp], 0
; Line 244
	mov	DWORD PTR _mask$[ebp], 128		; 00000080H
; Line 245
	mov	ecx, DWORD PTR _writer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _left$[ebp], edx
; Line 247
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _writer$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _writer$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 248
	mov	ecx, DWORD PTR _writer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
	jmp	SHORT $LN3@pfr_bitwri
$LN4@pfr_bitwri:
; Line 250
	cmp	DWORD PTR _mask$[ebp], 0
	jne	SHORT $LN3@pfr_bitwri
; Line 252
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx+ecx], al
; Line 253
	mov	DWORD PTR _c$[ebp], 0
; Line 254
	mov	DWORD PTR _mask$[ebp], 128		; 00000080H
; Line 255
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@pfr_bitwri:
; Line 258
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
	cmp	DWORD PTR _count$[ebp], 0
	jg	SHORT $LN16@pfr_bitwri
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN17@pfr_bitwri
$LN16@pfr_bitwri:
	mov	DWORD PTR tv94[ebp], 0
$LN17@pfr_bitwri:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR _reload$[ebp], eax
; Line 259
	jmp	$LN12@pfr_bitwri
$LN11@pfr_bitwri:
; Line 261
	cmp	DWORD PTR _mask$[ebp], 128		; 00000080H
	je	SHORT $LN14@pfr_bitwri
; Line 262
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+edx], cl
$LN14@pfr_bitwri:
; Line 263
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_bitwriter_decode_rle2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv140 = -56						; size = 4
_v$1 = -52						; size = 4
_c$ = -48						; size = 4
_mask$ = -44						; size = 4
_cur$ = -40						; size = 4
_left$ = -36						; size = 4
_reload$ = -32						; size = 4
_counts$ = -24						; size = 8
_count$ = -12						; size = 4
_phase$ = -8						; size = 4
_n$ = -4						; size = 4
_writer$ = 8						; size = 4
_p$ = 12						; size = 4
_limit$ = 16						; size = 4
_pfr_bitwriter_decode_rle1 PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrsbit.c
; Line 126
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 128
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _left$[ebp], ecx
; Line 129
	mov	edx, DWORD PTR _writer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 130
	mov	DWORD PTR _mask$[ebp], 128		; 00000080H
; Line 131
	mov	DWORD PTR _c$[ebp], 0
; Line 134
	mov	ecx, DWORD PTR _writer$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _n$[ebp], edx
; Line 136
	mov	DWORD PTR _phase$[ebp], 1
; Line 137
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _counts$[ebp+ecx], 0
; Line 138
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _counts$[ebp+edx], 0
; Line 139
	mov	DWORD PTR _count$[ebp], 0
; Line 140
	mov	DWORD PTR _reload$[ebp], 1
; Line 142
	jmp	SHORT $LN15@pfr_bitwri
$LN14@pfr_bitwri:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN15@pfr_bitwri:
	cmp	DWORD PTR _n$[ebp], 0
	jle	$LN13@pfr_bitwri
; Line 144
	cmp	DWORD PTR _reload$[ebp], 0
	je	SHORT $LN12@pfr_bitwri
$LN11@pfr_bitwri:
; Line 148
	cmp	DWORD PTR _phase$[ebp], 0
	je	SHORT $LN8@pfr_bitwri
; Line 153
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN7@pfr_bitwri
; Line 154
	jmp	SHORT $LN12@pfr_bitwri
$LN7@pfr_bitwri:
; Line 156
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _v$1[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 157
	mov	edx, DWORD PTR _v$1[ebp]
	sar	edx, 4
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _counts$[ebp+ecx], edx
; Line 158
	mov	edx, DWORD PTR _v$1[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _counts$[ebp+eax], edx
; Line 159
	mov	DWORD PTR _phase$[ebp], 0
; Line 160
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _counts$[ebp+edx]
	mov	DWORD PTR _count$[ebp], eax
; Line 162
	jmp	SHORT $LN10@pfr_bitwri
$LN8@pfr_bitwri:
; Line 164
	mov	DWORD PTR _phase$[ebp], 1
; Line 165
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _counts$[ebp+ecx]
	mov	DWORD PTR _count$[ebp], edx
$LN10@pfr_bitwri:
; Line 168
	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN11@pfr_bitwri
$LN12@pfr_bitwri:
; Line 171
	cmp	DWORD PTR _phase$[ebp], 0
	je	SHORT $LN5@pfr_bitwri
; Line 172
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN5@pfr_bitwri:
; Line 174
	mov	ecx, DWORD PTR _mask$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mask$[ebp], ecx
; Line 176
	mov	edx, DWORD PTR _left$[ebp]
	sub	edx, 1
	mov	DWORD PTR _left$[ebp], edx
	cmp	DWORD PTR _left$[ebp], 0
	jg	SHORT $LN4@pfr_bitwri
; Line 178
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx+ecx], al
; Line 179
	mov	ecx, DWORD PTR _writer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _left$[ebp], edx
; Line 180
	mov	DWORD PTR _mask$[ebp], 128		; 00000080H
; Line 182
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _writer$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _writer$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 183
	mov	ecx, DWORD PTR _writer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
; Line 184
	mov	DWORD PTR _c$[ebp], 0
	jmp	SHORT $LN3@pfr_bitwri
$LN4@pfr_bitwri:
; Line 186
	cmp	DWORD PTR _mask$[ebp], 0
	jne	SHORT $LN3@pfr_bitwri
; Line 188
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx+ecx], al
; Line 189
	mov	DWORD PTR _mask$[ebp], 128		; 00000080H
; Line 190
	mov	DWORD PTR _c$[ebp], 0
; Line 191
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@pfr_bitwri:
; Line 194
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
	cmp	DWORD PTR _count$[ebp], 0
	jg	SHORT $LN18@pfr_bitwri
	mov	DWORD PTR tv140[ebp], 1
	jmp	SHORT $LN19@pfr_bitwri
$LN18@pfr_bitwri:
	mov	DWORD PTR tv140[ebp], 0
$LN19@pfr_bitwri:
	mov	eax, DWORD PTR tv140[ebp]
	mov	DWORD PTR _reload$[ebp], eax
; Line 195
	jmp	$LN14@pfr_bitwri
$LN13@pfr_bitwri:
; Line 197
	cmp	DWORD PTR _mask$[ebp], 128		; 00000080H
	je	SHORT $LN16@pfr_bitwri
; Line 198
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+edx], cl
$LN16@pfr_bitwri:
; Line 199
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@pfr_bitwri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@pfr_bitwri:
	DD	1
	DD	$LN21@pfr_bitwri
$LN21@pfr_bitwri:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN20@pfr_bitwri
$LN20@pfr_bitwri:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_pfr_bitwriter_decode_rle1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -28						; size = 4
_val$ = -24						; size = 4
_mask$ = -20						; size = 4
_cur$ = -16						; size = 4
_left$ = -12						; size = 4
_reload$ = -8						; size = 4
_n$ = -4						; size = 4
_writer$ = 8						; size = 4
_p$ = 12						; size = 4
_limit$ = 16						; size = 4
_pfr_bitwriter_decode_bytes PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrsbit.c
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 74
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _left$[ebp], ecx
; Line 75
	mov	edx, DWORD PTR _writer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 76
	mov	DWORD PTR _mask$[ebp], 128		; 00000080H
; Line 77
	mov	DWORD PTR _val$[ebp], 0
; Line 78
	mov	DWORD PTR _c$[ebp], 0
; Line 81
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, DWORD PTR _p$[ebp]
	shl	ecx, 3
	mov	DWORD PTR _n$[ebp], ecx
; Line 82
	mov	edx, DWORD PTR _writer$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jle	SHORT $LN10@pfr_bitwri
; Line 83
	mov	ecx, DWORD PTR _writer$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _n$[ebp], edx
$LN10@pfr_bitwri:
; Line 85
	mov	eax, DWORD PTR _n$[ebp]
	and	eax, 7
	mov	DWORD PTR _reload$[ebp], eax
; Line 87
	jmp	SHORT $LN9@pfr_bitwri
$LN8@pfr_bitwri:
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN9@pfr_bitwri:
	cmp	DWORD PTR _n$[ebp], 0
	jle	$LN7@pfr_bitwri
; Line 89
	mov	edx, DWORD PTR _n$[ebp]
	and	edx, 7
	cmp	edx, DWORD PTR _reload$[ebp]
	jne	SHORT $LN6@pfr_bitwri
; Line 90
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _val$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN6@pfr_bitwri:
; Line 92
	mov	eax, DWORD PTR _val$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN5@pfr_bitwri
; Line 93
	mov	ecx, DWORD PTR _c$[ebp]
	or	ecx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
$LN5@pfr_bitwri:
; Line 95
	mov	edx, DWORD PTR _val$[ebp]
	shl	edx, 1
	mov	DWORD PTR _val$[ebp], edx
; Line 96
	mov	eax, DWORD PTR _mask$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mask$[ebp], eax
; Line 98
	mov	ecx, DWORD PTR _left$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _left$[ebp], ecx
	cmp	DWORD PTR _left$[ebp], 0
	jg	SHORT $LN4@pfr_bitwri
; Line 100
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 101
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _left$[ebp], ecx
; Line 102
	mov	DWORD PTR _mask$[ebp], 128		; 00000080H
; Line 104
	mov	edx, DWORD PTR _writer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _writer$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _writer$[ebp]
	mov	DWORD PTR [edx], eax
; Line 105
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 106
	mov	DWORD PTR _c$[ebp], 0
	jmp	SHORT $LN3@pfr_bitwri
$LN4@pfr_bitwri:
; Line 108
	cmp	DWORD PTR _mask$[ebp], 0
	jne	SHORT $LN3@pfr_bitwri
; Line 110
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 111
	mov	DWORD PTR _mask$[ebp], 128		; 00000080H
; Line 112
	mov	DWORD PTR _c$[ebp], 0
; Line 113
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax
$LN3@pfr_bitwri:
; Line 115
	jmp	$LN8@pfr_bitwri
$LN7@pfr_bitwri:
; Line 117
	cmp	DWORD PTR _mask$[ebp], 128		; 00000080H
	je	SHORT $LN11@pfr_bitwri
; Line 118
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+edx], cl
$LN11@pfr_bitwri:
; Line 119
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_bitwriter_decode_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_target$ = 12						; size = 4
_decreasing$ = 16					; size = 1
_pfr_bitwriter_init PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrsbit.c
; Line 53
	push	ebp
	mov	ebp, esp
; Line 54
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx
; Line 55
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
; Line 56
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 57
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx
; Line 58
	mov	eax, DWORD PTR _writer$[ebp]
	mov	ecx, DWORD PTR _writer$[ebp]
	mov	edx, DWORD PTR [eax+8]
	imul	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _writer$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 60
	movzx	ecx, BYTE PTR _decreasing$[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@pfr_bitwri
; Line 62
	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	ecx, DWORD PTR _writer$[ebp]
	imul	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _writer$[ebp]
	add	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _writer$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 63
	mov	edx, DWORD PTR _writer$[ebp]
	mov	eax, DWORD PTR [edx+4]
	neg	eax
	mov	ecx, DWORD PTR _writer$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN2@pfr_bitwri:
; Line 65
	pop	ebp
	ret	0
_pfr_bitwriter_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_service_id$ = 12					; size = 4
_pfr_get_service PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrdrivr.c
; Line 162
	push	ebp
	mov	ebp, esp
; Line 163
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 165
	mov	ecx, DWORD PTR _service_id$[ebp]
	push	ecx
	push	OFFSET _pfr_services
	call	_ft_service_list_lookup
	add	esp, 8
; Line 166
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pfr_get_service ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -20						; size = 4
_y_scale$ = -16						; size = 4
_x_scale$ = -12						; size = 4
_phys$ = -8						; size = 4
_face$ = -4						; size = 4
_pfrface$ = 8						; size = 4
_anoutline_resolution$ = 12				; size = 4
_ametrics_resolution$ = 16				; size = 4
_ametrics_x_scale$ = 20					; size = 4
_ametrics_y_scale$ = 24					; size = 4
_pfr_get_metrics PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrdrivr.c
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 103
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 104
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 288				; 00000120H
	mov	DWORD PTR _phys$[ebp], ecx
; Line 106
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR _size$[ebp], eax
; Line 109
	cmp	DWORD PTR _anoutline_resolution$[ebp], 0
	je	SHORT $LN5@pfr_get_me
; Line 110
	mov	ecx, DWORD PTR _anoutline_resolution$[ebp]
	mov	edx, DWORD PTR _phys$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx], eax
$LN5@pfr_get_me:
; Line 112
	cmp	DWORD PTR _ametrics_resolution$[ebp], 0
	je	SHORT $LN4@pfr_get_me
; Line 113
	mov	ecx, DWORD PTR _ametrics_resolution$[ebp]
	mov	edx, DWORD PTR _phys$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx], eax
$LN4@pfr_get_me:
; Line 115
	mov	DWORD PTR _x_scale$[ebp], 65536		; 00010000H
; Line 116
	mov	DWORD PTR _y_scale$[ebp], 65536		; 00010000H
; Line 118
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@pfr_get_me
; Line 121
	mov	ecx, DWORD PTR _phys$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	shl	ecx, 6
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _x_scale$[ebp], eax
; Line 124
	mov	edx, DWORD PTR _phys$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	movzx	edx, WORD PTR [ecx+14]
	shl	edx, 6
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _y_scale$[ebp], eax
$LN3@pfr_get_me:
; Line 127
	cmp	DWORD PTR _ametrics_x_scale$[ebp], 0
	je	SHORT $LN2@pfr_get_me
; Line 128
	mov	eax, DWORD PTR _ametrics_x_scale$[ebp]
	mov	ecx, DWORD PTR _x_scale$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@pfr_get_me:
; Line 130
	cmp	DWORD PTR _ametrics_y_scale$[ebp], 0
	je	SHORT $LN1@pfr_get_me
; Line 131
	mov	edx, DWORD PTR _ametrics_y_scale$[ebp]
	mov	eax, DWORD PTR _y_scale$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@pfr_get_me:
; Line 133
	xor	eax, eax
; Line 134
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_get_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_phys$1 = -12						; size = 4
_error$ = -8						; size = 4
_face$ = -4						; size = 4
_pfrface$ = 8						; size = 4
_gindex$ = 12						; size = 4
_anadvance$ = 16					; size = 4
_pfr_get_advance PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrdrivr.c
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 68
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 69
	mov	DWORD PTR _error$[ebp], 6
; Line 72
	mov	ecx, DWORD PTR _anadvance$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 74
	cmp	DWORD PTR _gindex$[ebp], 0
	jne	SHORT $LN3@pfr_get_ad
; Line 75
	jmp	SHORT $Exit$6
$LN3@pfr_get_ad:
; Line 77
	mov	edx, DWORD PTR _gindex$[ebp]
	sub	edx, 1
	mov	DWORD PTR _gindex$[ebp], edx
; Line 79
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $Exit$6
; Line 81
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 288				; 00000120H
	mov	DWORD PTR _phys$1[ebp], eax
; Line 84
	mov	ecx, DWORD PTR _phys$1[ebp]
	mov	edx, DWORD PTR _gindex$[ebp]
	cmp	edx, DWORD PTR [ecx+120]
	jae	SHORT $Exit$6
; Line 86
	mov	eax, DWORD PTR _gindex$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _phys$1[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	ecx, DWORD PTR _anadvance$[ebp]
	mov	edx, DWORD PTR [edx+eax+4]
	mov	DWORD PTR [ecx], edx
; Line 87
	mov	DWORD PTR _error$[ebp], 0
$Exit$6:
; Line 92
	mov	eax, DWORD PTR _error$[ebp]
; Line 93
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_get_advance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_phys$ = -8						; size = 4
_face$ = -4						; size = 4
_pfrface$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
_avector$ = 20						; size = 4
_pfr_get_kerning PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrdrivr.c
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 36
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 37
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 288				; 00000120H
	mov	DWORD PTR _phys$[ebp], ecx
; Line 40
	mov	edx, DWORD PTR _avector$[ebp]
	push	edx
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pfrface$[ebp]
	push	edx
	call	_pfr_face_get_kerning
	add	esp, 16					; 00000010H
; Line 43
	mov	eax, DWORD PTR _phys$[ebp]
	mov	ecx, DWORD PTR _phys$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN3@pfr_get_ke
; Line 45
	mov	eax, DWORD PTR _avector$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@pfr_get_ke
; Line 47
	mov	ecx, DWORD PTR _phys$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _phys$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _avector$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _avector$[ebp]
	mov	DWORD PTR [ecx], eax
$LN2@pfr_get_ke:
; Line 49
	mov	edx, DWORD PTR _avector$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN3@pfr_get_ke
; Line 51
	mov	eax, DWORD PTR _phys$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _phys$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _avector$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _avector$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@pfr_get_ke:
; Line 54
	xor	eax, eax
; Line 55
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_get_kerning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_MulFix_i386 PROC
; File d:\mozilla\modules\freetype2\include\internal\ftcalc.h
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 159
	mov	eax, DWORD PTR _a$[ebp]
; Line 160
	mov	edx, DWORD PTR _b$[ebp]
; Line 161
	imul	edx
; Line 162
	mov	ecx, edx
; Line 163
	sar	ecx, 31					; 0000001fH
; Line 164
	add	ecx, 32768				; 00008000H
; Line 165
	add	eax, ecx
; Line 166
	adc	edx, 0
; Line 167
	shr	eax, 16					; 00000010H
; Line 168
	shl	edx, 16					; 00000010H
; Line 169
	add	eax, edx
; Line 170
	mov	DWORD PTR _result$[ebp], eax
; Line 172
	mov	eax, DWORD PTR _result$[ebp]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_MulFix_i386 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gchar$1 = -24						; size = 4
_mid$2 = -20						; size = 4
_max$3 = -16						; size = 4
_min$4 = -12						; size = 4
_char_code$ = -8					; size = 4
_result$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_pfr_cmap_char_next PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrcmap.c
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 102
	mov	DWORD PTR _result$[ebp], 0
; Line 103
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR _char_code$[ebp], ecx
$Restart$11:
; Line 108
	mov	DWORD PTR _min$4[ebp], 0
; Line 109
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _max$3[ebp], eax
$LN8@pfr_cmap_c:
; Line 114
	mov	ecx, DWORD PTR _min$4[ebp]
	cmp	ecx, DWORD PTR _max$3[ebp]
	jae	SHORT $LN7@pfr_cmap_c
; Line 116
	mov	edx, DWORD PTR _max$3[ebp]
	sub	edx, DWORD PTR _min$4[ebp]
	shr	edx, 1
	add	edx, DWORD PTR _min$4[ebp]
	mov	DWORD PTR _mid$2[ebp], edx
; Line 117
	mov	eax, DWORD PTR _mid$2[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cmap$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _gchar$1[ebp], eax
; Line 119
	mov	edx, DWORD PTR _gchar$1[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _char_code$[ebp]
	jne	SHORT $LN6@pfr_cmap_c
; Line 121
	mov	ecx, DWORD PTR _mid$2[ebp]
	mov	DWORD PTR _result$[ebp], ecx
; Line 122
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@pfr_cmap_c
; Line 124
	mov	edx, DWORD PTR _result$[ebp]
	add	edx, 1
	mov	DWORD PTR _result$[ebp], edx
; Line 125
	jmp	SHORT $Exit$12
$LN5@pfr_cmap_c:
; Line 128
	mov	eax, DWORD PTR _char_code$[ebp]
	add	eax, 1
	mov	DWORD PTR _char_code$[ebp], eax
; Line 129
	jmp	SHORT $Restart$11
$LN6@pfr_cmap_c:
; Line 132
	mov	ecx, DWORD PTR _gchar$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _char_code$[ebp]
	jae	SHORT $LN4@pfr_cmap_c
; Line 133
	mov	eax, DWORD PTR _mid$2[ebp]
	add	eax, 1
	mov	DWORD PTR _min$4[ebp], eax
; Line 134
	jmp	SHORT $LN3@pfr_cmap_c
$LN4@pfr_cmap_c:
; Line 135
	mov	ecx, DWORD PTR _mid$2[ebp]
	mov	DWORD PTR _max$3[ebp], ecx
$LN3@pfr_cmap_c:
; Line 136
	jmp	SHORT $LN8@pfr_cmap_c
$LN7@pfr_cmap_c:
; Line 139
	mov	DWORD PTR _char_code$[ebp], 0
; Line 141
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _min$4[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $Exit$12
; Line 143
	mov	ecx, DWORD PTR _min$4[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _cmap$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _gchar$1[ebp], ecx
; Line 144
	mov	eax, DWORD PTR _min$4[ebp]
	mov	DWORD PTR _result$[ebp], eax
; Line 145
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $Exit$12
; Line 147
	mov	ecx, DWORD PTR _result$[ebp]
	add	ecx, 1
	mov	DWORD PTR _result$[ebp], ecx
; Line 148
	mov	edx, DWORD PTR _gchar$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _char_code$[ebp], eax
$Exit$12:
; Line 154
	mov	ecx, DWORD PTR _pchar_code$[ebp]
	mov	edx, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 155
	mov	eax, DWORD PTR _result$[ebp]
; Line 156
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_cmap_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mid$1 = -16						; size = 4
_gchar$2 = -12						; size = 4
_max$ = -8						; size = 4
_min$ = -4						; size = 4
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_pfr_cmap_char_index PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrcmap.c
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 73
	mov	DWORD PTR _min$[ebp], 0
; Line 74
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _max$[ebp], ecx
$LN5@pfr_cmap_c:
; Line 77
	mov	edx, DWORD PTR _min$[ebp]
	cmp	edx, DWORD PTR _max$[ebp]
	jae	SHORT $LN4@pfr_cmap_c
; Line 83
	mov	eax, DWORD PTR _max$[ebp]
	sub	eax, DWORD PTR _min$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR _min$[ebp]
	mov	DWORD PTR _mid$1[ebp], eax
; Line 84
	mov	ecx, DWORD PTR _mid$1[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _cmap$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _gchar$2[ebp], ecx
; Line 86
	mov	eax, DWORD PTR _gchar$2[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _char_code$[ebp]
	jne	SHORT $LN3@pfr_cmap_c
; Line 87
	mov	eax, DWORD PTR _mid$1[ebp]
	add	eax, 1
	jmp	SHORT $LN6@pfr_cmap_c
$LN3@pfr_cmap_c:
; Line 89
	mov	edx, DWORD PTR _gchar$2[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _char_code$[ebp]
	jae	SHORT $LN2@pfr_cmap_c
; Line 90
	mov	ecx, DWORD PTR _mid$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _min$[ebp], ecx
; Line 91
	jmp	SHORT $LN1@pfr_cmap_c
$LN2@pfr_cmap_c:
; Line 92
	mov	edx, DWORD PTR _mid$1[ebp]
	mov	DWORD PTR _max$[ebp], edx
$LN1@pfr_cmap_c:
; Line 93
	jmp	SHORT $LN5@pfr_cmap_c
$LN4@pfr_cmap_c:
; Line 94
	xor	eax, eax
$LN6@pfr_cmap_c:
; Line 95
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_cmap_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_pfr_cmap_done PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrcmap.c
; Line 63
	push	ebp
	mov	ebp, esp
; Line 64
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 65
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 66
	pop	ebp
	ret	0
_pfr_cmap_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$1 = -12						; size = 4
_face$ = -8						; size = 4
_error$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pointer$ = 12						; size = 4
_pfr_cmap_init PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrcmap.c
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 31
	mov	DWORD PTR _error$[ebp], 0
; Line 32
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 34
	mov	edx, DWORD PTR _pointer$[ebp]
	mov	DWORD PTR _pointer$[ebp], edx
; Line 37
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	mov	DWORD PTR [eax+16], edx
; Line 38
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+416]
	mov	DWORD PTR [eax+20], edx
; Line 46
	mov	DWORD PTR _n$1[ebp], 1
	jmp	SHORT $LN4@pfr_cmap_i
$LN3@pfr_cmap_i:
	mov	eax, DWORD PTR _n$1[ebp]
	add	eax, 1
	mov	DWORD PTR _n$1[ebp], eax
$LN4@pfr_cmap_i:
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _n$1[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $Exit$7
; Line 48
	mov	eax, DWORD PTR _n$1[ebp]
	sub	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _n$1[ebp]
	shl	ecx, 4
	mov	esi, DWORD PTR _cmap$[ebp]
	mov	esi, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [edx+eax]
	cmp	edx, DWORD PTR [esi+ecx]
	jb	SHORT $LN1@pfr_cmap_i
; Line 50
	push	OFFSET $SG9137
	push	50					; 00000032H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 51
	jmp	SHORT $Exit$7
$LN1@pfr_cmap_i:
; Line 53
	jmp	SHORT $LN3@pfr_cmap_i
$Exit$7:
; Line 57
	mov	eax, DWORD PTR _error$[ebp]
; Line 58
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_cmap_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vec$1 = -56						; size = 4
_vec$2 = -52						; size = 4
_subglyph$3 = -48					; size = 4
_num_points$4 = -44					; size = 4
_old_points$5 = -40					; size = 4
_i$6 = -36						; size = 4
_base$7 = -32						; size = 4
_loader$8 = -28						; size = 4
_count$9 = -24						; size = 4
_old_count$10 = -20					; size = 4
_n$11 = -16						; size = 4
_limit$ = -12						; size = 4
_p$ = -8						; size = 4
_error$ = -4						; size = 4
_glyph$ = 8						; size = 4
_stream$ = 12						; size = 4
_gps_offset$ = 16					; size = 4
_offset$ = 20						; size = 4
_size$ = 24						; size = 4
_pfr_glyph_load_rec PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 724
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 731
	mov	eax, DWORD PTR _gps_offset$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN33@pfr_glyph_
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN34@pfr_glyph_
$LN33@pfr_glyph_:
; Line 732
	jmp	$Exit$37
$LN34@pfr_glyph_:
; Line 734
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _p$[ebp], edx
; Line 735
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 737
	cmp	DWORD PTR _size$[ebp], 0
	jbe	$LN4@pfr_glyph_
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 128				; 00000080H
	je	$LN4@pfr_glyph_
; Line 740
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _loader$8[ebp], ecx
; Line 741
	mov	edx, DWORD PTR _loader$8[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _base$7[ebp], edx
; Line 744
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _old_count$10[ebp], ecx
; Line 747
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_pfr_glyph_load_compound
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 749
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 751
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@pfr_glyph_
; Line 752
	jmp	$Exit$37
$LN31@pfr_glyph_:
; Line 754
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _old_count$10[ebp]
	mov	DWORD PTR _count$9[ebp], ecx
$LN30@pfr_glyph_:
; Line 757
	mov	edx, 4
	imul	eax, edx, 66
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN29@pfr_glyph_
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$9[ebp]
	push	edx
	push	OFFSET $SG9066
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN29@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN30@pfr_glyph_
; Line 760
	mov	DWORD PTR _n$11[ebp], 0
	jmp	SHORT $LN26@pfr_glyph_
$LN25@pfr_glyph_:
	mov	ecx, DWORD PTR _n$11[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$11[ebp], ecx
$LN26@pfr_glyph_:
	mov	edx, DWORD PTR _n$11[ebp]
	cmp	edx, DWORD PTR _count$9[ebp]
	jge	$LN9@pfr_glyph_
$LN23@pfr_glyph_:
; Line 766
	mov	eax, 4
	imul	ecx, eax, 66
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN22@pfr_glyph_
	mov	edx, DWORD PTR _n$11[ebp]
	push	edx
	push	OFFSET $SG9078
	call	_FT_Message
	add	esp, 8
$LN22@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN23@pfr_glyph_
; Line 768
	imul	ecx, DWORD PTR _old_count$10[ebp], 24
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, ecx
	imul	ecx, DWORD PTR _n$11[ebp], 24
	add	eax, ecx
	mov	DWORD PTR _subglyph$3[ebp], eax
; Line 769
	mov	edx, DWORD PTR _base$7[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR _old_points$5[ebp], eax
; Line 773
	mov	ecx, DWORD PTR _subglyph$3[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _subglyph$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _gps_offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_pfr_glyph_load_rec
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 774
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@pfr_glyph_
; Line 775
	jmp	$LN9@pfr_glyph_
$LN19@pfr_glyph_:
; Line 778
	imul	edx, DWORD PTR _old_count$10[ebp], 24
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, edx
	imul	edx, DWORD PTR _n$11[ebp], 24
	add	ecx, edx
	mov	DWORD PTR _subglyph$3[ebp], ecx
; Line 779
	mov	eax, DWORD PTR _base$7[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	ecx, DWORD PTR _old_points$5[ebp]
	mov	DWORD PTR _num_points$4[ebp], ecx
; Line 782
	mov	edx, DWORD PTR _subglyph$3[ebp]
	cmp	DWORD PTR [edx], 65536			; 00010000H
	jne	SHORT $LN17@pfr_glyph_
	mov	eax, DWORD PTR _subglyph$3[ebp]
	cmp	DWORD PTR [eax+4], 65536		; 00010000H
	je	SHORT $LN18@pfr_glyph_
$LN17@pfr_glyph_:
; Line 784
	mov	ecx, DWORD PTR _base$7[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _old_points$5[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _vec$2[ebp], ecx
; Line 787
	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN16@pfr_glyph_
$LN15@pfr_glyph_:
	mov	edx, DWORD PTR _i$6[ebp]
	add	edx, 1
	mov	DWORD PTR _i$6[ebp], edx
	mov	eax, DWORD PTR _vec$2[ebp]
	add	eax, 8
	mov	DWORD PTR _vec$2[ebp], eax
$LN16@pfr_glyph_:
	mov	ecx, DWORD PTR _i$6[ebp]
	cmp	ecx, DWORD PTR _num_points$4[ebp]
	jge	SHORT $LN14@pfr_glyph_
; Line 790
	mov	edx, DWORD PTR _subglyph$3[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _vec$2[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	mov	ecx, DWORD PTR _subglyph$3[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [edx], eax
; Line 792
	mov	eax, DWORD PTR _subglyph$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _vec$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_MulFix
	add	esp, 8
	mov	ecx, DWORD PTR _subglyph$3[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 793
	jmp	SHORT $LN15@pfr_glyph_
$LN14@pfr_glyph_:
; Line 795
	jmp	SHORT $LN13@pfr_glyph_
$LN18@pfr_glyph_:
; Line 797
	mov	eax, DWORD PTR _loader$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _old_points$5[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _vec$1[ebp], eax
; Line 800
	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN12@pfr_glyph_
$LN11@pfr_glyph_:
	mov	ecx, DWORD PTR _i$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$6[ebp], ecx
	mov	edx, DWORD PTR _vec$1[ebp]
	add	edx, 8
	mov	DWORD PTR _vec$1[ebp], edx
$LN12@pfr_glyph_:
	mov	eax, DWORD PTR _i$6[ebp]
	cmp	eax, DWORD PTR _num_points$4[ebp]
	jge	SHORT $LN13@pfr_glyph_
; Line 802
	mov	ecx, DWORD PTR _vec$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _subglyph$3[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _vec$1[ebp]
	mov	DWORD PTR [ecx], edx
; Line 803
	mov	edx, DWORD PTR _vec$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _subglyph$3[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _vec$1[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 804
	jmp	SHORT $LN11@pfr_glyph_
$LN13@pfr_glyph_:
; Line 808
	jmp	$LN25@pfr_glyph_
$LN9@pfr_glyph_:
; Line 810
	mov	eax, 4
	imul	ecx, eax, 66
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN8@pfr_glyph_
	mov	edx, DWORD PTR _count$9[ebp]
	push	edx
	push	OFFSET $SG9095
	call	_FT_Message
	add	esp, 8
$LN8@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN9@pfr_glyph_
; Line 812
	jmp	SHORT $Exit$37
$LN4@pfr_glyph_:
; Line 814
	mov	ecx, 4
	imul	edx, ecx, 66
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN3@pfr_glyph_
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	push	OFFSET $SG9101
	call	_FT_Message
	add	esp, 8
$LN3@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN4@pfr_glyph_
; Line 817
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_pfr_glyph_load_simple
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 819
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
$Exit$37:
; Line 823
	mov	eax, DWORD PTR _error$[ebp]
; Line 824
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_glyph_load_rec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv219 = -64						; size = 4
tv192 = -60						; size = 4
_format$1 = -56						; size = 4
_new_max$2 = -52					; size = 4
_y_pos$ = -48						; size = 4
_x_pos$ = -44						; size = 4
_org_count$ = -40					; size = 4
_count$ = -36						; size = 4
_i$ = -32						; size = 4
_flags$ = -28						; size = 4
_subglyph$ = -24					; size = 4
_memory$ = -20						; size = 4
_loader$ = -16						; size = 4
_error$ = -8						; size = 4
_glyph$ = 8						; size = 4
_p$ = 12						; size = 4
_limit$ = 16						; size = 4
_pfr_glyph_load_compound PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 560
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 561
	mov	DWORD PTR _error$[ebp], 0
; Line 562
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _loader$[ebp], ecx
; Line 563
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$[ebp], eax
$LN73@pfr_glyph_:
; Line 569
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN72@pfr_glyph_
	jmp	$Failure$79
$LN72@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN73@pfr_glyph_
; Line 570
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _flags$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 573
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN69@pfr_glyph_
; Line 574
	jmp	$Failure$79
$LN69@pfr_glyph_:
; Line 576
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _count$[ebp], ecx
; Line 580
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 8
	je	SHORT $LN68@pfr_glyph_
; Line 582
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_pfr_extra_items_skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 583
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN68@pfr_glyph_
	jmp	$Exit$80
$LN68@pfr_glyph_:
; Line 594
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _org_count$[ebp], eax
; Line 596
	mov	ecx, DWORD PTR _org_count$[ebp]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _glyph$[ebp]
	cmp	ecx, DWORD PTR [edx+20]
	jbe	$LN66@pfr_glyph_
; Line 598
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _org_count$[ebp]
	lea	edx, DWORD PTR [ecx+eax+3]
	and	edx, -4					; fffffffcH
	mov	DWORD PTR _new_max$2[ebp], edx
; Line 603
	cmp	DWORD PTR _new_max$2[ebp], 64		; 00000040H
	jbe	SHORT $LN65@pfr_glyph_
; Line 605
	push	OFFSET $SG8911
	push	605					; 0000025dH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 607
	push	OFFSET $SG8912
	call	_FT_Message
	add	esp, 4
; Line 608
	jmp	$Exit$80
$LN65@pfr_glyph_:
; Line 611
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _new_max$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+24], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN64@pfr_glyph_
; Line 612
	jmp	$Exit$80
$LN64@pfr_glyph_:
; Line 614
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR _new_max$2[ebp]
	mov	DWORD PTR [edx+20], eax
$LN66@pfr_glyph_:
; Line 617
	imul	ecx, DWORD PTR _org_count$[ebp], 24
	mov	edx, DWORD PTR _glyph$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _subglyph$[ebp], ecx
; Line 619
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN63@pfr_glyph_
$LN62@pfr_glyph_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _subglyph$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _subglyph$[ebp], ecx
$LN63@pfr_glyph_:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jae	$Exit$80
; Line 624
	mov	DWORD PTR _x_pos$[ebp], 0
; Line 625
	mov	DWORD PTR _y_pos$[ebp], 0
$LN60@pfr_glyph_:
; Line 627
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN59@pfr_glyph_
	jmp	$Failure$79
$LN59@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN60@pfr_glyph_
; Line 628
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _format$1[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 631
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [edx], 65536			; 00010000H
; Line 632
	mov	eax, DWORD PTR _format$1[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN56@pfr_glyph_
$LN55@pfr_glyph_:
; Line 634
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN54@pfr_glyph_
	jmp	$Failure$79
$LN54@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN55@pfr_glyph_
; Line 635
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	shl	eax, 4
	mov	ecx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [ecx], eax
$LN56@pfr_glyph_:
; Line 638
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [edx+4], 65536		; 00010000H
; Line 639
	mov	eax, DWORD PTR _format$1[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN51@pfr_glyph_
$LN50@pfr_glyph_:
; Line 641
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN49@pfr_glyph_
	jmp	$Failure$79
$LN49@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN50@pfr_glyph_
; Line 642
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	shl	eax, 4
	mov	ecx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN51@pfr_glyph_:
; Line 646
	mov	edx, DWORD PTR _format$1[ebp]
	and	edx, 3
	mov	DWORD PTR tv192[ebp], edx
	cmp	DWORD PTR tv192[ebp], 1
	je	SHORT $LN43@pfr_glyph_
	cmp	DWORD PTR tv192[ebp], 2
	je	SHORT $LN38@pfr_glyph_
	jmp	SHORT $LN45@pfr_glyph_
$LN43@pfr_glyph_:
; Line 649
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN42@pfr_glyph_
	jmp	$Failure$79
$LN42@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN43@pfr_glyph_
; Line 650
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	mov	DWORD PTR _x_pos$[ebp], edx
; Line 651
	jmp	SHORT $LN45@pfr_glyph_
$LN38@pfr_glyph_:
; Line 654
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN37@pfr_glyph_
	jmp	$Failure$79
$LN37@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN38@pfr_glyph_
; Line 655
	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR _x_pos$[ebp]
	mov	DWORD PTR _x_pos$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN45@pfr_glyph_:
; Line 662
	mov	edx, DWORD PTR _format$1[ebp]
	shr	edx, 2
	and	edx, 3
	mov	DWORD PTR tv219[ebp], edx
	cmp	DWORD PTR tv219[ebp], 1
	je	SHORT $LN30@pfr_glyph_
	cmp	DWORD PTR tv219[ebp], 2
	je	SHORT $LN25@pfr_glyph_
	jmp	SHORT $LN32@pfr_glyph_
$LN30@pfr_glyph_:
; Line 665
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN29@pfr_glyph_
	jmp	$Failure$79
$LN29@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN30@pfr_glyph_
; Line 666
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	mov	DWORD PTR _y_pos$[ebp], edx
; Line 667
	jmp	SHORT $LN32@pfr_glyph_
$LN25@pfr_glyph_:
; Line 670
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN24@pfr_glyph_
	jmp	$Failure$79
$LN24@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN25@pfr_glyph_
; Line 671
	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR _y_pos$[ebp]
	mov	DWORD PTR _y_pos$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN32@pfr_glyph_:
; Line 678
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	eax, DWORD PTR _x_pos$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 679
	mov	ecx, DWORD PTR _subglyph$[ebp]
	mov	edx, DWORD PTR _y_pos$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 682
	mov	eax, DWORD PTR _format$1[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN14@pfr_glyph_
$LN19@pfr_glyph_:
; Line 684
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN18@pfr_glyph_
	jmp	$Failure$79
$LN18@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN19@pfr_glyph_
; Line 685
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	ecx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 687
	jmp	SHORT $LN15@pfr_glyph_
$LN14@pfr_glyph_:
; Line 689
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN13@pfr_glyph_
	jmp	$Failure$79
$LN13@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN14@pfr_glyph_
; Line 690
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN15@pfr_glyph_:
; Line 693
	mov	edx, DWORD PTR _format$1[ebp]
	and	edx, 128				; 00000080H
	je	SHORT $LN4@pfr_glyph_
$LN9@pfr_glyph_:
; Line 695
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN8@pfr_glyph_
	jmp	$Failure$79
$LN8@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN9@pfr_glyph_
; Line 696
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 3
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-3]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-3]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-3]
	or	eax, edx
	mov	ecx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 698
	jmp	SHORT $LN5@pfr_glyph_
$LN4@pfr_glyph_:
; Line 700
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN3@pfr_glyph_
	jmp	SHORT $Failure$79
$LN3@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN4@pfr_glyph_
; Line 701
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	edx, DWORD PTR _subglyph$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN5@pfr_glyph_:
; Line 704
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 705
	jmp	$LN62@pfr_glyph_
$Exit$80:
; Line 708
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN74@pfr_glyph_
$Failure$79:
$Too_Short$81:
; Line 712
	push	OFFSET $SG9032
	push	712					; 000002c8H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 713
	push	OFFSET $SG9033
	call	_FT_Message
	add	esp, 4
; Line 714
	jmp	SHORT $Exit$80
$LN74@pfr_glyph_:
; Line 715
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN78@pfr_glyph_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN78@pfr_glyph_:
	DD	1
	DD	$LN77@pfr_glyph_
$LN77@pfr_glyph_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN76@pfr_glyph_
$LN76@pfr_glyph_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pfr_glyph_load_compound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv460 = -140						; size = 4
tv370 = -136						; size = 4
tv299 = -132						; size = 4
tv211 = -128						; size = 4
_delta$1 = -124						; size = 4
_idx$2 = -120						; size = 4
_n$3 = -116						; size = 4
_args_count$4 = -112					; size = 4
_args_format$5 = -108					; size = 4
_format_low$6 = -104					; size = 4
_format$7 = -100					; size = 4
_cur$8 = -96						; size = 4
_pos$9 = -88						; size = 32
_new_max$10 = -52					; size = 4
_x$ = -48						; size = 4
_mask$ = -44						; size = 4
_count$ = -40						; size = 4
_i$ = -36						; size = 4
_y_count$ = -32						; size = 4
_x_count$ = -28						; size = 4
_flags$ = -24						; size = 4
_memory$ = -20						; size = 4
_error$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_glyph$ = 8						; size = 4
_p$ = 12						; size = 4
_limit$ = 16						; size = 4
_pfr_glyph_load_simple PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 250
	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	edi
	lea	edi, DWORD PTR [ebp-140]
	mov	ecx, 35					; 00000023H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 251
	mov	DWORD PTR _error$[ebp], 0
; Line 252
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$[ebp], edx
$LN188@pfr_glyph_:
; Line 257
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN187@pfr_glyph_
	jmp	$Failure$197
$LN187@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN188@pfr_glyph_
; Line 258
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _flags$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 261
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 128				; 00000080H
	je	SHORT $LN184@pfr_glyph_
; Line 262
	jmp	$Failure$197
$LN184@pfr_glyph_:
; Line 264
	mov	DWORD PTR _x_count$[ebp], 0
; Line 265
	mov	DWORD PTR _y_count$[ebp], 0
; Line 267
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4
	je	SHORT $LN183@pfr_glyph_
$LN182@pfr_glyph_:
; Line 269
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN181@pfr_glyph_
	jmp	$Failure$197
$LN181@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN182@pfr_glyph_
; Line 270
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 271
	mov	eax, DWORD PTR _count$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _x_count$[ebp], eax
; Line 272
	mov	ecx, DWORD PTR _count$[ebp]
	shr	ecx, 4
	mov	DWORD PTR _y_count$[ebp], ecx
; Line 274
	jmp	SHORT $LN178@pfr_glyph_
$LN183@pfr_glyph_:
; Line 276
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 2
	je	SHORT $LN177@pfr_glyph_
$LN176@pfr_glyph_:
; Line 278
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN175@pfr_glyph_
	jmp	$Failure$197
$LN175@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN176@pfr_glyph_
; Line 279
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _x_count$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN177@pfr_glyph_:
; Line 282
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 1
	je	SHORT $LN178@pfr_glyph_
$LN171@pfr_glyph_:
; Line 284
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN170@pfr_glyph_
	jmp	$Failure$197
$LN170@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN171@pfr_glyph_
; Line 285
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _y_count$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN178@pfr_glyph_:
; Line 289
	mov	edx, DWORD PTR _x_count$[ebp]
	add	edx, DWORD PTR _y_count$[ebp]
	mov	DWORD PTR _count$[ebp], edx
; Line 292
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN167@pfr_glyph_
; Line 294
	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 7
	and	edx, -8					; fffffff8H
	mov	DWORD PTR _new_max$10[ebp], edx
; Line 299
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _new_max$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN166@pfr_glyph_
; Line 300
	jmp	$Exit$198
$LN166@pfr_glyph_:
; Line 302
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR _new_max$10[ebp]
	mov	DWORD PTR [edx+4], eax
$LN167@pfr_glyph_:
; Line 305
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _x_count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 307
	mov	DWORD PTR _mask$[ebp], 0
; Line 308
	mov	DWORD PTR _x$[ebp], 0
; Line 310
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN165@pfr_glyph_
$LN164@pfr_glyph_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN165@pfr_glyph_:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	$LN163@pfr_glyph_
; Line 312
	mov	edx, DWORD PTR _i$[ebp]
	and	edx, 7
	jne	SHORT $LN162@pfr_glyph_
$LN161@pfr_glyph_:
; Line 314
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN160@pfr_glyph_
	jmp	$Failure$197
$LN160@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN161@pfr_glyph_
; Line 315
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _mask$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN162@pfr_glyph_:
; Line 318
	mov	edx, DWORD PTR _mask$[ebp]
	and	edx, 1
	je	SHORT $LN151@pfr_glyph_
$LN156@pfr_glyph_:
; Line 320
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN155@pfr_glyph_
	jmp	$Failure$197
$LN155@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN156@pfr_glyph_
; Line 321
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	mov	DWORD PTR _x$[ebp], edx
; Line 323
	jmp	SHORT $LN152@pfr_glyph_
$LN151@pfr_glyph_:
; Line 325
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN150@pfr_glyph_
	jmp	$Failure$197
$LN150@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN151@pfr_glyph_
; Line 326
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN152@pfr_glyph_:
; Line 329
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 331
	mov	eax, DWORD PTR _mask$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mask$[ebp], eax
; Line 332
	jmp	$LN164@pfr_glyph_
$LN163@pfr_glyph_:
; Line 337
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 8
	je	SHORT $LN147@pfr_glyph_
; Line 339
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_pfr_extra_items_skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 340
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN147@pfr_glyph_
; Line 341
	jmp	$Exit$198
$LN147@pfr_glyph_:
; Line 344
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_pfr_glyph_start
	add	esp, 4
; Line 352
	mov	edx, 8
	imul	eax, edx, 0
	mov	DWORD PTR _pos$9[ebp+eax+4], 0
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	DWORD PTR _pos$9[ebp+edx], 0
; Line 353
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pos$9[ebp+ecx]
	mov	eax, DWORD PTR _pos$9[ebp+ecx+4]
	mov	ecx, 8
	imul	ecx, ecx, 3
	mov	DWORD PTR _pos$9[ebp+ecx], edx
	mov	DWORD PTR _pos$9[ebp+ecx+4], eax
$LN145@pfr_glyph_:
; Line 357
	mov	DWORD PTR _args_format$5[ebp], 0
$LN143@pfr_glyph_:
; Line 363
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN142@pfr_glyph_
	jmp	$Failure$197
$LN142@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN143@pfr_glyph_
; Line 364
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _format$7[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 365
	mov	ecx, DWORD PTR _format$7[ebp]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _format_low$6[ebp], ecx
; Line 367
	mov	edx, DWORD PTR _format$7[ebp]
	shr	edx, 4
	mov	DWORD PTR tv211[ebp], edx
	cmp	DWORD PTR tv211[ebp], 7
	ja	$LN94@pfr_glyph_
	mov	eax, DWORD PTR tv211[ebp]
	jmp	DWORD PTR $LN195@pfr_glyph_[eax*4]
$LN136@pfr_glyph_:
; Line 370
	mov	ecx, 4
	imul	edx, ecx, 66
	cmp	DWORD PTR _ft_trace_levels[edx], 6
	jl	SHORT $LN135@pfr_glyph_
	push	OFFSET $SG8699
	call	_FT_Message
	add	esp, 4
$LN135@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN136@pfr_glyph_
; Line 371
	mov	DWORD PTR _args_count$4[ebp], 0
; Line 372
	jmp	$LN138@pfr_glyph_
$LN131@pfr_glyph_:
; Line 375
	mov	ecx, 4
	imul	edx, ecx, 66
	cmp	DWORD PTR _ft_trace_levels[edx], 6
	jl	SHORT $LN130@pfr_glyph_
	push	OFFSET $SG8705
	call	_FT_Message
	add	esp, 4
$LN130@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN131@pfr_glyph_
; Line 376
	jmp	SHORT $Line1$199
$LN126@pfr_glyph_:
; Line 379
	mov	ecx, 4
	imul	edx, ecx, 66
	cmp	DWORD PTR _ft_trace_levels[edx], 6
	jl	SHORT $LN125@pfr_glyph_
	push	OFFSET $SG8712
	call	_FT_Message
	add	esp, 4
$LN125@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN126@pfr_glyph_
; Line 380
	jmp	SHORT $Line1$199
$LN121@pfr_glyph_:
; Line 383
	mov	ecx, 4
	imul	edx, ecx, 66
	cmp	DWORD PTR _ft_trace_levels[edx], 6
	jl	SHORT $LN120@pfr_glyph_
	push	OFFSET $SG8718
	call	_FT_Message
	add	esp, 4
$LN120@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN121@pfr_glyph_
$Line1$199:
; Line 385
	mov	ecx, DWORD PTR _format_low$6[ebp]
	mov	DWORD PTR _args_format$5[ebp], ecx
; Line 386
	mov	DWORD PTR _args_count$4[ebp], 1
; Line 387
	jmp	$LN138@pfr_glyph_
$LN116@pfr_glyph_:
; Line 390
	mov	edx, 4
	imul	eax, edx, 66
	cmp	DWORD PTR _ft_trace_levels[eax], 6
	jl	SHORT $LN115@pfr_glyph_
	mov	ecx, DWORD PTR _format_low$6[ebp]
	push	ecx
	push	OFFSET $SG8724
	call	_FT_Message
	add	esp, 8
$LN115@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN116@pfr_glyph_
; Line 391
	mov	eax, DWORD PTR _format_low$6[ebp]
	cmp	eax, DWORD PTR _x_count$[ebp]
	jb	SHORT $LN112@pfr_glyph_
; Line 392
	jmp	$Failure$197
$LN112@pfr_glyph_:
; Line 393
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _format_low$6[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _pos$9[ebp+ecx], edx
; Line 394
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pos$9[ebp+ecx+4]
	mov	DWORD PTR _pos$9[ebp+eax+4], ecx
; Line 395
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pos$9[ebp+eax]
	mov	edx, DWORD PTR _pos$9[ebp+eax+4]
	mov	eax, 8
	imul	eax, eax, 3
	mov	DWORD PTR _pos$9[ebp+eax], ecx
	mov	DWORD PTR _pos$9[ebp+eax+4], edx
; Line 396
	mov	DWORD PTR _args_count$4[ebp], 0
; Line 397
	jmp	$LN138@pfr_glyph_
$LN110@pfr_glyph_:
; Line 400
	mov	ecx, 4
	imul	edx, ecx, 66
	cmp	DWORD PTR _ft_trace_levels[edx], 6
	jl	SHORT $LN109@pfr_glyph_
	mov	eax, DWORD PTR _format_low$6[ebp]
	push	eax
	push	OFFSET $SG8731
	call	_FT_Message
	add	esp, 8
$LN109@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN110@pfr_glyph_
; Line 401
	mov	edx, DWORD PTR _format_low$6[ebp]
	cmp	edx, DWORD PTR _y_count$[ebp]
	jb	SHORT $LN106@pfr_glyph_
; Line 402
	jmp	$Failure$197
$LN106@pfr_glyph_:
; Line 403
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pos$9[ebp+ecx]
	mov	DWORD PTR _pos$9[ebp+eax], ecx
; Line 404
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _format_low$6[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _pos$9[ebp+edx+4], eax
; Line 405
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pos$9[ebp+edx]
	mov	ecx, DWORD PTR _pos$9[ebp+edx+4]
	mov	edx, 8
	imul	edx, edx, 3
	mov	DWORD PTR _pos$9[ebp+edx], eax
	mov	DWORD PTR _pos$9[ebp+edx+4], ecx
; Line 406
	mov	DWORD PTR _args_count$4[ebp], 0
; Line 407
	jmp	$LN138@pfr_glyph_
$LN104@pfr_glyph_:
; Line 410
	mov	eax, 4
	imul	ecx, eax, 66
	cmp	DWORD PTR _ft_trace_levels[ecx], 6
	jl	SHORT $LN103@pfr_glyph_
	push	OFFSET $SG8738
	call	_FT_Message
	add	esp, 4
$LN103@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN104@pfr_glyph_
; Line 411
	mov	DWORD PTR _args_format$5[ebp], 2958	; 00000b8eH
; Line 412
	mov	DWORD PTR _args_count$4[ebp], 3
; Line 413
	jmp	SHORT $LN138@pfr_glyph_
$LN99@pfr_glyph_:
; Line 416
	mov	eax, 4
	imul	ecx, eax, 66
	cmp	DWORD PTR _ft_trace_levels[ecx], 6
	jl	SHORT $LN98@pfr_glyph_
	push	OFFSET $SG8744
	call	_FT_Message
	add	esp, 4
$LN98@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN99@pfr_glyph_
; Line 417
	mov	DWORD PTR _args_format$5[ebp], 3627	; 00000e2bH
; Line 418
	mov	DWORD PTR _args_count$4[ebp], 3
; Line 419
	jmp	SHORT $LN138@pfr_glyph_
$LN94@pfr_glyph_:
; Line 422
	mov	eax, 4
	imul	ecx, eax, 66
	cmp	DWORD PTR _ft_trace_levels[ecx], 6
	jl	SHORT $LN93@pfr_glyph_
	push	OFFSET $SG8750
	call	_FT_Message
	add	esp, 4
$LN93@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN94@pfr_glyph_
; Line 423
	mov	DWORD PTR _args_count$4[ebp], 4
; Line 424
	mov	eax, DWORD PTR _format_low$6[ebp]
	mov	DWORD PTR _args_format$5[ebp], eax
$LN138@pfr_glyph_:
; Line 430
	lea	ecx, DWORD PTR _pos$9[ebp]
	mov	DWORD PTR _cur$8[ebp], ecx
; Line 431
	mov	DWORD PTR _n$3[ebp], 0
	jmp	SHORT $LN90@pfr_glyph_
$LN89@pfr_glyph_:
	mov	edx, DWORD PTR _n$3[ebp]
	add	edx, 1
	mov	DWORD PTR _n$3[ebp], edx
$LN90@pfr_glyph_:
	mov	eax, DWORD PTR _n$3[ebp]
	cmp	eax, DWORD PTR _args_count$4[ebp]
	jae	$LN11@pfr_glyph_
; Line 438
	mov	ecx, DWORD PTR _args_format$5[ebp]
	and	ecx, 3
	mov	DWORD PTR tv299[ebp], ecx
	je	SHORT $LN84@pfr_glyph_
	cmp	DWORD PTR tv299[ebp], 1
	je	$LN74@pfr_glyph_
	cmp	DWORD PTR tv299[ebp], 2
	je	$LN65@pfr_glyph_
	jmp	$LN56@pfr_glyph_
$LN84@pfr_glyph_:
; Line 441
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN83@pfr_glyph_
	jmp	$Failure$197
$LN83@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN84@pfr_glyph_
; Line 442
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _idx$2[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 443
	mov	ecx, DWORD PTR _idx$2[ebp]
	cmp	ecx, DWORD PTR _x_count$[ebp]
	jb	SHORT $LN80@pfr_glyph_
; Line 444
	jmp	$Failure$197
$LN80@pfr_glyph_:
; Line 445
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _cur$8[ebp]
	mov	edx, DWORD PTR _idx$2[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx], eax
$LN79@pfr_glyph_:
; Line 446
	mov	ecx, 4
	imul	edx, ecx, 66
	cmp	DWORD PTR _ft_trace_levels[edx], 7
	jl	SHORT $LN78@pfr_glyph_
	mov	eax, DWORD PTR _idx$2[ebp]
	push	eax
	push	OFFSET $SG8771
	call	_FT_Message
	add	esp, 8
$LN78@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN79@pfr_glyph_
; Line 447
	jmp	$LN86@pfr_glyph_
$LN74@pfr_glyph_:
; Line 450
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN73@pfr_glyph_
	jmp	$Failure$197
$LN73@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN74@pfr_glyph_
; Line 451
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	mov	edx, DWORD PTR _cur$8[ebp]
	mov	DWORD PTR [edx], ecx
$LN70@pfr_glyph_:
; Line 452
	mov	eax, 4
	imul	ecx, eax, 66
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN69@pfr_glyph_
	mov	edx, DWORD PTR _cur$8[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG8787
	call	_FT_Message
	add	esp, 8
$LN69@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN70@pfr_glyph_
; Line 453
	jmp	$LN86@pfr_glyph_
$LN65@pfr_glyph_:
; Line 456
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN64@pfr_glyph_
	jmp	$Failure$197
$LN64@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN65@pfr_glyph_
; Line 457
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _delta$1[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 458
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _pos$9[ebp+edx]
	add	eax, DWORD PTR _delta$1[ebp]
	mov	ecx, DWORD PTR _cur$8[ebp]
	mov	DWORD PTR [ecx], eax
$LN61@pfr_glyph_:
; Line 459
	mov	edx, 4
	imul	eax, edx, 66
	cmp	DWORD PTR _ft_trace_levels[eax], 7
	jl	SHORT $LN60@pfr_glyph_
	mov	ecx, DWORD PTR _delta$1[ebp]
	push	ecx
	push	OFFSET $SG8798
	call	_FT_Message
	add	esp, 8
$LN60@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN61@pfr_glyph_
; Line 460
	jmp	SHORT $LN86@pfr_glyph_
$LN56@pfr_glyph_:
; Line 463
	mov	eax, 4
	imul	ecx, eax, 66
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN55@pfr_glyph_
	push	OFFSET $SG8804
	call	_FT_Message
	add	esp, 4
$LN55@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN56@pfr_glyph_
; Line 464
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$8[ebp]
	mov	eax, DWORD PTR _pos$9[ebp+ecx]
	mov	DWORD PTR [edx], eax
$LN86@pfr_glyph_:
; Line 468
	mov	ecx, DWORD PTR _args_format$5[ebp]
	shr	ecx, 2
	and	ecx, 3
	mov	DWORD PTR tv370[ebp], ecx
	je	SHORT $LN49@pfr_glyph_
	cmp	DWORD PTR tv370[ebp], 1
	je	$LN39@pfr_glyph_
	cmp	DWORD PTR tv370[ebp], 2
	je	$LN30@pfr_glyph_
	jmp	$LN21@pfr_glyph_
$LN49@pfr_glyph_:
; Line 471
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN48@pfr_glyph_
	jmp	$Failure$197
$LN48@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN49@pfr_glyph_
; Line 472
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _idx$2[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 473
	mov	ecx, DWORD PTR _idx$2[ebp]
	cmp	ecx, DWORD PTR _y_count$[ebp]
	jb	SHORT $LN45@pfr_glyph_
; Line 474
	jmp	$Failure$197
$LN45@pfr_glyph_:
; Line 475
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _cur$8[ebp]
	mov	edx, DWORD PTR _idx$2[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+4], eax
$LN44@pfr_glyph_:
; Line 476
	mov	ecx, 4
	imul	edx, ecx, 66
	cmp	DWORD PTR _ft_trace_levels[edx], 7
	jl	SHORT $LN43@pfr_glyph_
	mov	eax, DWORD PTR _idx$2[ebp]
	push	eax
	push	OFFSET $SG8820
	call	_FT_Message
	add	esp, 8
$LN43@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN44@pfr_glyph_
; Line 477
	jmp	$LN51@pfr_glyph_
$LN39@pfr_glyph_:
; Line 480
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN38@pfr_glyph_
	jmp	$Failure$197
$LN38@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN39@pfr_glyph_
; Line 481
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	mov	edx, DWORD PTR _cur$8[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN35@pfr_glyph_:
; Line 482
	mov	eax, 4
	imul	ecx, eax, 66
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN34@pfr_glyph_
	mov	edx, DWORD PTR _cur$8[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	OFFSET $SG8836
	call	_FT_Message
	add	esp, 8
$LN34@pfr_glyph_:
	xor	ecx, ecx
	jne	SHORT $LN35@pfr_glyph_
; Line 483
	jmp	$LN51@pfr_glyph_
$LN30@pfr_glyph_:
; Line 486
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN29@pfr_glyph_
	jmp	$Failure$197
$LN29@pfr_glyph_:
	xor	eax, eax
	jne	SHORT $LN30@pfr_glyph_
; Line 487
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _delta$1[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 488
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _pos$9[ebp+edx+4]
	add	eax, DWORD PTR _delta$1[ebp]
	mov	ecx, DWORD PTR _cur$8[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN26@pfr_glyph_:
; Line 489
	mov	edx, 4
	imul	eax, edx, 66
	cmp	DWORD PTR _ft_trace_levels[eax], 7
	jl	SHORT $LN25@pfr_glyph_
	mov	ecx, DWORD PTR _delta$1[ebp]
	push	ecx
	push	OFFSET $SG8847
	call	_FT_Message
	add	esp, 8
$LN25@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN26@pfr_glyph_
; Line 490
	jmp	SHORT $LN51@pfr_glyph_
$LN21@pfr_glyph_:
; Line 493
	mov	eax, 4
	imul	ecx, eax, 66
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN20@pfr_glyph_
	push	OFFSET $SG8853
	call	_FT_Message
	add	esp, 4
$LN20@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN21@pfr_glyph_
; Line 494
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cur$8[ebp]
	mov	eax, DWORD PTR _pos$9[ebp+ecx+4]
	mov	DWORD PTR [edx+4], eax
$LN51@pfr_glyph_:
; Line 498
	cmp	DWORD PTR _n$3[ebp], 0
	jne	SHORT $LN17@pfr_glyph_
	cmp	DWORD PTR _args_count$4[ebp], 4
	jne	SHORT $LN17@pfr_glyph_
$LN16@pfr_glyph_:
; Line 500
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN15@pfr_glyph_
	jmp	$Failure$197
$LN15@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN16@pfr_glyph_
; Line 501
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _args_format$5[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 502
	mov	eax, DWORD PTR _args_count$4[ebp]
	sub	eax, 1
	mov	DWORD PTR _args_count$4[ebp], eax
; Line 504
	jmp	SHORT $LN12@pfr_glyph_
$LN17@pfr_glyph_:
; Line 505
	mov	ecx, DWORD PTR _args_format$5[ebp]
	shr	ecx, 4
	mov	DWORD PTR _args_format$5[ebp], ecx
$LN12@pfr_glyph_:
; Line 508
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$8[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [ecx+eax+4]
	mov	ecx, 8
	imul	ecx, ecx, 3
	mov	DWORD PTR _pos$9[ebp+ecx], edx
	mov	DWORD PTR _pos$9[ebp+ecx+4], eax
; Line 509
	mov	edx, DWORD PTR _cur$8[ebp]
	add	edx, 8
	mov	DWORD PTR _cur$8[ebp], edx
; Line 510
	jmp	$LN89@pfr_glyph_
$LN11@pfr_glyph_:
; Line 512
	mov	eax, 4
	imul	ecx, eax, 66
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN10@pfr_glyph_
	push	OFFSET $SG8865
	call	_FT_Message
	add	esp, 4
$LN10@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN11@pfr_glyph_
; Line 517
	mov	eax, DWORD PTR _format$7[ebp]
	shr	eax, 4
	mov	DWORD PTR tv460[ebp], eax
	cmp	DWORD PTR tv460[ebp], 5
	ja	SHORT $LN2@pfr_glyph_
	mov	ecx, DWORD PTR tv460[ebp]
	jmp	DWORD PTR $LN196@pfr_glyph_[ecx*4]
$LN5@pfr_glyph_:
; Line 520
	mov	edx, DWORD PTR _glyph$[ebp]
	push	edx
	call	_pfr_glyph_end
	add	esp, 4
; Line 521
	jmp	SHORT $Exit$198
$LN4@pfr_glyph_:
; Line 526
	lea	eax, DWORD PTR _pos$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_pfr_glyph_line_to
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 527
	jmp	SHORT $Test_Error$200
$LN3@pfr_glyph_:
; Line 531
	lea	edx, DWORD PTR _pos$9[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	call	_pfr_glyph_move_to
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 532
	jmp	SHORT $Test_Error$200
$LN2@pfr_glyph_:
; Line 535
	lea	ecx, DWORD PTR _pos$9[ebp+16]
	push	ecx
	lea	edx, DWORD PTR _pos$9[ebp+8]
	push	edx
	lea	eax, DWORD PTR _pos$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_pfr_glyph_curve_to
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$Test_Error$200:
; Line 538
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@pfr_glyph_
; Line 539
	jmp	SHORT $Exit$198
$LN6@pfr_glyph_:
; Line 541
	jmp	$LN145@pfr_glyph_
$Exit$198:
; Line 545
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN189@pfr_glyph_
$Failure$197:
$Too_Short$201:
; Line 549
	push	OFFSET $SG8876
	push	549					; 00000225H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 550
	push	OFFSET $SG8877
	call	_FT_Message
	add	esp, 4
; Line 551
	jmp	SHORT $Exit$198
$LN189@pfr_glyph_:
; Line 552
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN194@pfr_glyph_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 140				; 0000008cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN194@pfr_glyph_:
	DD	2
	DD	$LN193@pfr_glyph_
$LN193@pfr_glyph_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN191@pfr_glyph_
	DD	-88					; ffffffa8H
	DD	32					; 00000020H
	DD	$LN192@pfr_glyph_
$LN192@pfr_glyph_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN191@pfr_glyph_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
	npad	2
$LN195@pfr_glyph_:
	DD	$LN136@pfr_glyph_
	DD	$LN131@pfr_glyph_
	DD	$LN116@pfr_glyph_
	DD	$LN110@pfr_glyph_
	DD	$LN126@pfr_glyph_
	DD	$LN121@pfr_glyph_
	DD	$LN104@pfr_glyph_
	DD	$LN99@pfr_glyph_
$LN196@pfr_glyph_:
	DD	$LN5@pfr_glyph_
	DD	$LN4@pfr_glyph_
	DD	$LN4@pfr_glyph_
	DD	$LN4@pfr_glyph_
	DD	$LN3@pfr_glyph_
	DD	$LN3@pfr_glyph_
_pfr_glyph_load_simple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyph$ = 8						; size = 4
_pfr_glyph_end PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 227
	push	ebp
	mov	ebp, esp
; Line 229
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	call	_pfr_glyph_close_contour
	add	esp, 4
; Line 232
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_FT_GlyphLoader_Add
	add	esp, 4
; Line 233
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pfr_glyph_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv89 = -12						; size = 4
_error$ = -8						; size = 4
_loader$ = -4						; size = 4
_glyph$ = 8						; size = 4
_to$ = 12						; size = 4
_pfr_glyph_move_to PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 204
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 205
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _loader$[ebp], ecx
; Line 210
	mov	edx, DWORD PTR _glyph$[ebp]
	push	edx
	call	_pfr_glyph_close_contour
	add	esp, 4
; Line 213
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	BYTE PTR [eax+32], 1
; Line 216
	xor	ecx, ecx
	jne	SHORT $LN4@pfr_glyph_
	mov	edx, DWORD PTR _loader$[ebp]
	movsx	eax, WORD PTR [edx+22]
	mov	ecx, DWORD PTR _loader$[ebp]
	movsx	edx, WORD PTR [ecx+58]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	ecx, DWORD PTR _loader$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	ja	SHORT $LN6@pfr_glyph_
$LN4@pfr_glyph_:
	xor	edx, edx
	jne	SHORT $LN5@pfr_glyph_
	mov	eax, DWORD PTR _loader$[ebp]
	movsx	ecx, WORD PTR [eax+20]
	mov	edx, DWORD PTR _loader$[ebp]
	movsx	eax, WORD PTR [edx+56]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	edx, DWORD PTR _loader$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	ja	SHORT $LN6@pfr_glyph_
$LN5@pfr_glyph_:
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN7@pfr_glyph_
$LN6@pfr_glyph_:
	push	1
	push	1
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv89[ebp], eax
$LN7@pfr_glyph_:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _error$[ebp], ecx
; Line 217
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@pfr_glyph_
; Line 219
	mov	edx, DWORD PTR _to$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	call	_pfr_glyph_line_to
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN1@pfr_glyph_:
; Line 221
	mov	eax, DWORD PTR _error$[ebp]
; Line 222
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_glyph_move_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv89 = -24						; size = 4
_tag$1 = -20						; size = 4
_vec$2 = -16						; size = 4
_error$ = -12						; size = 4
_outline$ = -8						; size = 4
_loader$ = -4						; size = 4
_glyph$ = 8						; size = 4
_control1$ = 12						; size = 4
_control2$ = 16						; size = 4
_to$ = 20						; size = 4
_pfr_glyph_curve_to PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 165
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 166
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _loader$[ebp], ecx
; Line 167
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 56					; 00000038H
	mov	DWORD PTR _outline$[ebp], edx
; Line 172
	mov	eax, DWORD PTR _glyph$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	jne	SHORT $LN2@pfr_glyph_
; Line 174
	push	OFFSET $SG8572
	push	174					; 000000aeH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 175
	push	OFFSET $SG8573
	call	_FT_Message
	add	esp, 4
; Line 176
	jmp	$Exit$8
$LN2@pfr_glyph_:
; Line 179
	xor	edx, edx
	jne	SHORT $LN5@pfr_glyph_
	mov	eax, DWORD PTR _loader$[ebp]
	movsx	ecx, WORD PTR [eax+22]
	mov	edx, DWORD PTR _loader$[ebp]
	movsx	eax, WORD PTR [edx+58]
	lea	ecx, DWORD PTR [ecx+eax+3]
	mov	edx, DWORD PTR _loader$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	ja	SHORT $LN6@pfr_glyph_
$LN5@pfr_glyph_:
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@pfr_glyph_
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN7@pfr_glyph_
$LN6@pfr_glyph_:
	push	0
	push	3
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv89[ebp], eax
$LN7@pfr_glyph_:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _error$[ebp], edx
; Line 180
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$8
; Line 182
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _vec$2[ebp], ecx
; Line 183
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _outline$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _tag$1[ebp], eax
; Line 186
	mov	edx, DWORD PTR _control1$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, 8
	imul	edx, edx, 0
	mov	esi, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [esi+edx], eax
	mov	DWORD PTR [esi+edx+4], ecx
; Line 187
	mov	eax, DWORD PTR _control2$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, 8
	shl	eax, 0
	mov	esi, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [esi+eax], ecx
	mov	DWORD PTR [esi+eax+4], edx
; Line 188
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, 8
	shl	ecx, 1
	mov	esi, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [esi+ecx], edx
	mov	DWORD PTR [esi+ecx+4], eax
; Line 189
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _tag$1[ebp]
	mov	BYTE PTR [ecx+eax], 2
; Line 190
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _tag$1[ebp]
	mov	BYTE PTR [eax+edx], 2
; Line 191
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _tag$1[ebp]
	mov	BYTE PTR [edx+ecx], 1
; Line 193
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	add	ecx, 3
	mov	edx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [edx+2], cx
$Exit$8:
; Line 197
	mov	eax, DWORD PTR _error$[ebp]
; Line 198
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_glyph_curve_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv89 = -20						; size = 4
_n$1 = -16						; size = 4
_error$ = -12						; size = 4
_outline$ = -8						; size = 4
_loader$ = -4						; size = 4
_glyph$ = 8						; size = 4
_to$ = 12						; size = 4
_pfr_glyph_line_to PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 130
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _loader$[ebp], ecx
; Line 131
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 56					; 00000038H
	mov	DWORD PTR _outline$[ebp], edx
; Line 136
	mov	eax, DWORD PTR _glyph$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	jne	SHORT $LN2@pfr_glyph_
; Line 138
	push	OFFSET $SG8551
	push	138					; 0000008aH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 139
	push	OFFSET $SG8552
	call	_FT_Message
	add	esp, 4
; Line 140
	jmp	$Exit$8
$LN2@pfr_glyph_:
; Line 143
	xor	edx, edx
	jne	SHORT $LN5@pfr_glyph_
	mov	eax, DWORD PTR _loader$[ebp]
	movsx	ecx, WORD PTR [eax+22]
	mov	edx, DWORD PTR _loader$[ebp]
	movsx	eax, WORD PTR [edx+58]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	edx, DWORD PTR _loader$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	ja	SHORT $LN6@pfr_glyph_
$LN5@pfr_glyph_:
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@pfr_glyph_
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN7@pfr_glyph_
$LN6@pfr_glyph_:
	push	0
	push	1
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv89[ebp], eax
$LN7@pfr_glyph_:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _error$[ebp], edx
; Line 144
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $Exit$8
; Line 146
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _n$1[ebp], ecx
; Line 149
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	esi, DWORD PTR _n$1[ebp]
	mov	DWORD PTR [edx+esi*8], eax
	mov	DWORD PTR [edx+esi*8+4], ecx
; Line 150
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _n$1[ebp]
	mov	BYTE PTR [ecx+edx], 1
; Line 152
	mov	eax, DWORD PTR _outline$[ebp]
	mov	cx, WORD PTR [eax+2]
	add	cx, 1
	mov	edx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [edx+2], cx
$Exit$8:
; Line 156
	mov	eax, DWORD PTR _error$[ebp]
; Line 157
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_glyph_line_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyph$ = 8						; size = 4
_pfr_glyph_start PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 121
	push	ebp
	mov	ebp, esp
; Line 122
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	BYTE PTR [eax+32], 0
; Line 123
	pop	ebp
	ret	0
_pfr_glyph_start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p2$1 = -24						; size = 4
_p1$2 = -20						; size = 4
_first$ = -16						; size = 4
_last$ = -12						; size = 4
_outline$ = -8						; size = 4
_loader$ = -4						; size = 4
_glyph$ = 8						; size = 4
_pfr_glyph_close_contour PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 80
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 81
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _loader$[ebp], ecx
; Line 82
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 56					; 00000038H
	mov	DWORD PTR _outline$[ebp], edx
; Line 86
	mov	eax, DWORD PTR _glyph$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	jne	SHORT $LN5@pfr_glyph_
; Line 87
	jmp	$LN6@pfr_glyph_
$LN5@pfr_glyph_:
; Line 90
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx+2]
	sub	eax, 1
	mov	DWORD PTR _last$[ebp], eax
; Line 91
	mov	DWORD PTR _first$[ebp], 0
; Line 92
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	test	edx, edx
	jle	SHORT $LN4@pfr_glyph_
; Line 93
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movsx	ecx, WORD PTR [eax+ecx*2-2]
	mov	DWORD PTR _first$[ebp], ecx
$LN4@pfr_glyph_:
; Line 97
	mov	edx, DWORD PTR _last$[ebp]
	cmp	edx, DWORD PTR _first$[ebp]
	jle	SHORT $LN3@pfr_glyph_
; Line 99
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _first$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _p1$2[ebp], eax
; Line 100
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _last$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _p2$1[ebp], ecx
; Line 103
	mov	edx, DWORD PTR _p1$2[ebp]
	mov	eax, DWORD PTR _p2$1[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN3@pfr_glyph_
	mov	edx, DWORD PTR _p1$2[ebp]
	mov	eax, DWORD PTR _p2$1[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@pfr_glyph_
; Line 105
	mov	edx, DWORD PTR _outline$[ebp]
	mov	ax, WORD PTR [edx+2]
	sub	ax, 1
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 106
	mov	edx, DWORD PTR _last$[ebp]
	sub	edx, 1
	mov	DWORD PTR _last$[ebp], edx
$LN3@pfr_glyph_:
; Line 111
	mov	eax, DWORD PTR _last$[ebp]
	cmp	eax, DWORD PTR _first$[ebp]
	jl	SHORT $LN1@pfr_glyph_
; Line 112
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	ax, WORD PTR _last$[ebp]
	mov	WORD PTR [ecx+edx*2], ax
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	dx, WORD PTR [ecx]
	add	dx, 1
	mov	eax, DWORD PTR _outline$[ebp]
	mov	WORD PTR [eax], dx
$LN1@pfr_glyph_:
; Line 114
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	BYTE PTR [ecx+32], 0
$LN6@pfr_glyph_:
; Line 115
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_glyph_close_contour ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$1 = -144						; size = 4
_p$2 = -136						; size = 4
_format$3 = -124					; size = 4
_ysize$4 = -112						; size = 4
_xsize$5 = -100						; size = 4
_advance$6 = -88					; size = 4
_ypos$7 = -76						; size = 4
_xpos$8 = -64						; size = 4
_char_len$9 = -56					; size = 4
_n$10 = -52						; size = 4
_strike$ = -48						; size = 4
_character$ = -44					; size = 4
_gps_size$ = -36					; size = 4
_gps_offset$ = -24					; size = 4
_phys$ = -16						; size = 4
_stream$ = -12						; size = 4
_face$ = -8						; size = 4
_error$ = -4						; size = 4
_glyph$ = 8						; size = 4
_size$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_pfr_slot_load_bitmap PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrsbit.c
; Line 531
	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	edi
	lea	edi, DWORD PTR [ebp-144]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 533
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$[ebp], ecx
; Line 534
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR _stream$[ebp], eax
; Line 535
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 288				; 00000120H
	mov	DWORD PTR _phys$[ebp], ecx
; Line 542
	mov	edx, DWORD PTR _glyph_index$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _phys$[ebp]
	add	edx, DWORD PTR [eax+128]
	mov	DWORD PTR _character$[ebp], edx
; Line 550
	mov	ecx, DWORD PTR _phys$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _strike$[ebp], edx
; Line 551
	mov	DWORD PTR _n$10[ebp], 0
	jmp	SHORT $LN25@pfr_slot_l
$LN24@pfr_slot_l:
	mov	eax, DWORD PTR _n$10[ebp]
	add	eax, 1
	mov	DWORD PTR _n$10[ebp], eax
$LN25@pfr_slot_l:
	mov	ecx, DWORD PTR _phys$[ebp]
	mov	edx, DWORD PTR _n$10[ebp]
	cmp	edx, DWORD PTR [ecx+92]
	jae	SHORT $LN23@pfr_slot_l
; Line 554
	mov	eax, DWORD PTR _size$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	mov	edx, DWORD PTR _strike$[ebp]
	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN22@pfr_slot_l
	mov	eax, DWORD PTR _size$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	mov	edx, DWORD PTR _strike$[ebp]
	cmp	DWORD PTR [edx+4], ecx
	jne	SHORT $LN22@pfr_slot_l
; Line 556
	jmp	SHORT $Found_Strike$39
$LN22@pfr_slot_l:
; Line 559
	mov	eax, DWORD PTR _strike$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR _strike$[ebp], eax
; Line 560
	jmp	SHORT $LN24@pfr_slot_l
$LN23@pfr_slot_l:
; Line 563
	push	OFFSET $SG10175
	push	563					; 00000233H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN26@pfr_slot_l
$Found_Strike$39:
; Line 573
	mov	DWORD PTR _char_len$9[ebp], 4
; Line 574
	mov	ecx, DWORD PTR _strike$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 1
	je	SHORT $LN21@pfr_slot_l
	mov	eax, DWORD PTR _char_len$9[ebp]
	add	eax, 1
	mov	DWORD PTR _char_len$9[ebp], eax
$LN21@pfr_slot_l:
; Line 575
	mov	ecx, DWORD PTR _strike$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 2
	je	SHORT $LN20@pfr_slot_l
	mov	eax, DWORD PTR _char_len$9[ebp]
	add	eax, 1
	mov	DWORD PTR _char_len$9[ebp], eax
$LN20@pfr_slot_l:
; Line 576
	mov	ecx, DWORD PTR _strike$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 4
	je	SHORT $LN19@pfr_slot_l
	mov	eax, DWORD PTR _char_len$9[ebp]
	add	eax, 1
	mov	DWORD PTR _char_len$9[ebp], eax
$LN19@pfr_slot_l:
; Line 580
	mov	ecx, DWORD PTR _phys$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	eax, DWORD PTR _strike$[ebp]
	add	edx, DWORD PTR [eax+24]
	push	edx
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN17@pfr_slot_l
	mov	edx, DWORD PTR _strike$[ebp]
	mov	eax, DWORD PTR _char_len$9[ebp]
	imul	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@pfr_slot_l
$LN17@pfr_slot_l:
; Line 581
	jmp	$Exit$40
$LN18@pfr_slot_l:
; Line 589
	lea	edx, DWORD PTR _gps_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _gps_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _character$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _strike$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _strike$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_pfr_lookup_bitmap_data
	add	esp, 28					; 0000001cH
; Line 591
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 593
	cmp	DWORD PTR _gps_size$[ebp], 0
	jne	SHORT $LN16@pfr_slot_l
; Line 596
	push	OFFSET $SG10186
	push	596					; 00000254H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 597
	jmp	$Exit$40
$LN16@pfr_slot_l:
; Line 603
	mov	DWORD PTR _xpos$8[ebp], 0
	mov	DWORD PTR _ypos$7[ebp], 0
	mov	DWORD PTR _advance$6[ebp], 0
; Line 604
	mov	DWORD PTR _xsize$5[ebp], 0
	mov	DWORD PTR _ysize$4[ebp], 0
	mov	DWORD PTR _format$3[ebp], 0
; Line 609
	mov	eax, DWORD PTR _character$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _advance$6[ebp], ecx
; Line 610
	mov	edx, DWORD PTR _phys$[ebp]
	mov	eax, DWORD PTR _phys$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+12]
	je	SHORT $LN15@pfr_slot_l
; Line 613
	mov	edx, DWORD PTR _phys$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _phys$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _advance$6[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _advance$6[ebp], eax
$LN15@pfr_slot_l:
; Line 615
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _advance$6[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 621
	mov	eax, DWORD PTR _phys$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _character$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	movzx	edx, WORD PTR [ecx+12]
	shl	edx, 8
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _advance$6[ebp], eax
; Line 624
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	add	ecx, DWORD PTR _gps_offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN13@pfr_slot_l
	mov	eax, DWORD PTR _gps_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@pfr_slot_l
$LN13@pfr_slot_l:
; Line 625
	jmp	$Exit$40
$LN14@pfr_slot_l:
; Line 627
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _p$2[ebp], eax
; Line 632
	lea	ecx, DWORD PTR _format$3[ebp]
	push	ecx
	lea	edx, DWORD PTR _advance$6[ebp]
	push	edx
	lea	eax, DWORD PTR _ysize$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _xsize$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _ypos$7[ebp]
	push	edx
	lea	eax, DWORD PTR _xpos$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _advance$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	lea	ecx, DWORD PTR _p$2[ebp]
	push	ecx
	call	_pfr_load_bitmap_metrics
	add	esp, 36					; 00000024H
	mov	DWORD PTR _error$[ebp], eax
; Line 641
	cmp	DWORD PTR _xpos$8[ebp], 2147483647	; 7fffffffH
	jg	SHORT $LN10@pfr_slot_l
	cmp	DWORD PTR _xpos$8[ebp], -2147483648	; 80000000H
	jl	SHORT $LN10@pfr_slot_l
	cmp	DWORD PTR _ysize$4[ebp], 2147483647	; 7fffffffH
	ja	SHORT $LN10@pfr_slot_l
	mov	edx, DWORD PTR _ypos$7[ebp]
	add	edx, DWORD PTR _ysize$4[ebp]
	cmp	edx, 2147483647				; 7fffffffH
	ja	SHORT $LN10@pfr_slot_l
	mov	eax, DWORD PTR _ypos$7[ebp]
	add	eax, DWORD PTR _ysize$4[ebp]
	cmp	eax, -2147483648			; 80000000H
	jge	SHORT $LN12@pfr_slot_l
$LN10@pfr_slot_l:
; Line 643
	mov	ecx, 4
	imul	edx, ecx, 66
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN9@pfr_slot_l
	push	OFFSET $SG10207
	call	_FT_Message
	add	esp, 4
$LN9@pfr_slot_l:
	xor	eax, eax
	jne	SHORT $LN10@pfr_slot_l
$LN6@pfr_slot_l:
; Line 645
	mov	ecx, 4
	imul	edx, ecx, 66
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN5@pfr_slot_l
	mov	eax, DWORD PTR _ypos$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _xpos$8[ebp]
	push	ecx
	push	OFFSET $SG10212
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN5@pfr_slot_l:
	xor	edx, edx
	jne	SHORT $LN6@pfr_slot_l
; Line 646
	push	OFFSET $SG10213
	push	646					; 00000286H
	push	23					; 00000017H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 23					; 00000017H
	mov	DWORD PTR _error$[ebp], eax
$LN12@pfr_slot_l:
; Line 649
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN2@pfr_slot_l
; Line 651
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+72], 1651078259		; 62697473H
; Line 656
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _xsize$5[ebp]
	mov	DWORD PTR [ecx+80], edx
; Line 657
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR _ysize$4[ebp]
	mov	DWORD PTR [eax+76], ecx
; Line 658
	mov	edx, DWORD PTR _xsize$5[ebp]
	add	edx, 7
	sar	edx, 3
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+84], edx
; Line 659
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	BYTE PTR [ecx+94], 1
; Line 662
	mov	edx, DWORD PTR _xsize$5[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+24], edx
; Line 663
	mov	ecx, DWORD PTR _ysize$4[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 664
	mov	eax, DWORD PTR _xpos$8[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 665
	mov	edx, DWORD PTR _ypos$7[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+36], edx
; Line 666
	mov	ecx, DWORD PTR _advance$6[ebp]
	sar	ecx, 2
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 667
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	sar	ecx, 1
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 668
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 669
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+52], eax
; Line 672
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _xpos$8[ebp]
	mov	DWORD PTR [ecx+100], edx
; Line 673
	mov	eax, DWORD PTR _ypos$7[ebp]
	add	eax, DWORD PTR _ysize$4[ebp]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+104], eax
; Line 677
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+84]
	imul	eax, DWORD PTR _ysize$4[ebp]
	mov	DWORD PTR _len$1[ebp], eax
; Line 680
	mov	ecx, DWORD PTR _len$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	push	edx
	call	_ft_glyphslot_alloc_bitmap
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 681
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@pfr_slot_l
; Line 688
	mov	eax, DWORD PTR _glyph$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+208]
	and	edx, 2
	push	edx
	mov	eax, DWORD PTR _format$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _p$2[ebp]
	push	eax
	call	_pfr_load_bitmap_bits
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
$LN2@pfr_slot_l:
; Line 693
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExitFrame
	add	esp, 4
$Exit$40:
; Line 697
	mov	eax, DWORD PTR _error$[ebp]
$LN26@pfr_slot_l:
; Line 698
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@pfr_slot_l
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 144				; 00000090H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN38@pfr_slot_l:
	DD	9
	DD	$LN37@pfr_slot_l
$LN37@pfr_slot_l:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN28@pfr_slot_l
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN29@pfr_slot_l
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN30@pfr_slot_l
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN31@pfr_slot_l
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN32@pfr_slot_l
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN33@pfr_slot_l
	DD	-112					; ffffff90H
	DD	4
	DD	$LN34@pfr_slot_l
	DD	-124					; ffffff84H
	DD	4
	DD	$LN35@pfr_slot_l
	DD	-136					; ffffff78H
	DD	4
	DD	$LN36@pfr_slot_l
$LN36@pfr_slot_l:
	DB	112					; 00000070H
	DB	0
$LN35@pfr_slot_l:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN34@pfr_slot_l:
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN33@pfr_slot_l:
	DB	120					; 00000078H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN32@pfr_slot_l:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN31@pfr_slot_l:
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN30@pfr_slot_l:
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN29@pfr_slot_l:
	DB	103					; 00000067H
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN28@pfr_slot_l:
	DB	103					; 00000067H
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_pfr_slot_load_bitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyph$ = 8						; size = 4
_stream$ = 12						; size = 4
_gps_offset$ = 16					; size = 4
_offset$ = 20						; size = 4
_size$ = 24						; size = 4
_pfr_glyph_load PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 833
	push	ebp
	mov	ebp, esp
; Line 835
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_FT_GlyphLoader_Rewind
	add	esp, 4
; Line 837
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 840
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _gps_offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	push	ecx
	call	_pfr_glyph_load_rec
	add	esp, 20					; 00000014H
; Line 841
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pfr_glyph_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_glyph$ = 8						; size = 4
_pfr_glyph_done PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 54
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 55
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$[ebp], edx
$LN6@pfr_glyph_:
; Line 58
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+8], 0
	xor	ecx, ecx
	jne	SHORT $LN6@pfr_glyph_
; Line 59
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 61
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN3@pfr_glyph_:
; Line 67
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+24], 0
	xor	edx, edx
	jne	SHORT $LN3@pfr_glyph_
; Line 69
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 70
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 72
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 73
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	BYTE PTR [eax+32], 0
; Line 74
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_glyph_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyph$ = 8						; size = 4
_loader$ = 12						; size = 4
_pfr_glyph_init PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrgload.c
; Line 42
	push	ebp
	mov	ebp, esp
; Line 43
	push	36					; 00000024H
	push	0
	mov	eax, DWORD PTR _glyph$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 45
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 46
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	BYTE PTR [eax+32], 0
; Line 48
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_FT_GlyphLoader_Rewind
	add	esp, 4
; Line 49
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pfr_glyph_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -28						; size = 4
_ok$ = -24						; size = 4
_n$ = -20						; size = 4
_result$ = -16						; size = 4
_error$ = -8						; size = 4
_p$ = 8							; size = 4
_len$ = 12						; size = 4
_memory$ = 16						; size = 4
_astring$ = 20						; size = 4
_pfr_aux_name_load PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 633
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 634
	mov	DWORD PTR _error$[ebp], 0
; Line 635
	mov	DWORD PTR _result$[ebp], 0
; Line 639
	cmp	DWORD PTR _len$[ebp], 0
	jbe	SHORT $LN8@pfr_aux_na
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	test	ecx, ecx
	jne	SHORT $LN8@pfr_aux_na
; Line 640
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$[ebp], edx
$LN8@pfr_aux_na:
; Line 645
	cmp	DWORD PTR _len$[ebp], 0
	jbe	SHORT $LN11@pfr_aux_na
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN12@pfr_aux_na
$LN11@pfr_aux_na:
	mov	DWORD PTR tv72[ebp], 0
$LN12@pfr_aux_na:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _ok$[ebp], eax
; Line 646
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN7@pfr_aux_na
$LN6@pfr_aux_na:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN7@pfr_aux_na:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jae	SHORT $LN5@pfr_aux_na
; Line 647
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jl	SHORT $LN3@pfr_aux_na
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 127				; 0000007fH
	jle	SHORT $LN4@pfr_aux_na
$LN3@pfr_aux_na:
; Line 649
	mov	DWORD PTR _ok$[ebp], 0
; Line 650
	jmp	SHORT $LN5@pfr_aux_na
$LN4@pfr_aux_na:
; Line 651
	jmp	SHORT $LN6@pfr_aux_na
$LN5@pfr_aux_na:
; Line 653
	cmp	DWORD PTR _ok$[ebp], 0
	je	SHORT $Exit$16
; Line 655
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@pfr_aux_na
; Line 656
	jmp	SHORT $Exit$16
$LN1@pfr_aux_na:
; Line 658
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 659
	mov	ecx, DWORD PTR _result$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx], 0
$Exit$16:
; Line 662
	mov	edx, DWORD PTR _astring$[ebp]
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR [edx], eax
; Line 663
	mov	eax, DWORD PTR _error$[ebp]
; Line 664
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@pfr_aux_na
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@pfr_aux_na:
	DD	1
	DD	$LN14@pfr_aux_na
$LN14@pfr_aux_na:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@pfr_aux_na
$LN13@pfr_aux_na:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pfr_aux_name_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_q$1 = -32						; size = 4
_char2$2 = -28						; size = 4
_char1$3 = -24						; size = 4
_memory$ = -20						; size = 4
_error$ = -12						; size = 4
_item$ = -4						; size = 4
_p$ = 8							; size = 4
_limit$ = 12						; size = 4
_phy_font$ = 16						; size = 4
_pfr_extra_item_load_kerning_pairs PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 522
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 523
	mov	DWORD PTR _item$[ebp], 0
; Line 524
	mov	DWORD PTR _error$[ebp], 0
; Line 525
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
$LN25@pfr_extra_:
; Line 528
	mov	edx, 4
	imul	eax, edx, 66
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN24@pfr_extra_
	push	OFFSET $SG8064
	call	_FT_Message
	add	esp, 4
$LN24@pfr_extra_:
	xor	ecx, ecx
	jne	SHORT $LN25@pfr_extra_
; Line 530
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _item$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@pfr_extra_
; Line 531
	jmp	$Exit$31
$LN20@pfr_extra_:
; Line 533
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN19@pfr_extra_
	jmp	$Too_Short$32
$LN19@pfr_extra_:
	xor	edx, edx
	jne	SHORT $LN20@pfr_extra_
; Line 535
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 536
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	mov	ecx, DWORD PTR _item$[ebp]
	mov	WORD PTR [ecx+6], dx
; Line 537
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx+5], cl
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 538
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax+148]
	mov	edx, DWORD PTR _phy_font$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 541
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+8], 3
; Line 543
	mov	edx, DWORD PTR _item$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	and	eax, 1
	je	SHORT $LN16@pfr_extra_
; Line 544
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 2
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN16@pfr_extra_:
; Line 546
	mov	ecx, DWORD PTR _item$[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	and	edx, 2
	je	SHORT $LN14@pfr_extra_
; Line 547
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN14@pfr_extra_:
; Line 549
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	mov	edx, DWORD PTR _item$[ebp]
	imul	ecx, DWORD PTR [edx+8]
	add	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN13@pfr_extra_
	jmp	$Too_Short$32
$LN13@pfr_extra_:
	xor	eax, eax
	jne	SHORT $LN14@pfr_extra_
; Line 554
	mov	ecx, DWORD PTR _item$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	test	edx, edx
	jle	$LN6@pfr_extra_
; Line 560
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	and	ecx, 1
	je	$LN9@pfr_extra_
; Line 562
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$1[ebp], edx
; Line 563
	mov	eax, DWORD PTR _q$1[ebp]
	add	eax, 2
	mov	DWORD PTR _q$1[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _q$1[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _q$1[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _char1$3[ebp], eax
; Line 564
	mov	ecx, DWORD PTR _q$1[ebp]
	add	ecx, 2
	mov	DWORD PTR _q$1[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _q$1[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _q$1[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR _char2$2[ebp], ecx
; Line 566
	mov	edx, DWORD PTR _char1$3[ebp]
	shl	edx, 16					; 00000010H
	movzx	eax, WORD PTR _char2$2[ebp]
	or	edx, eax
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 568
	mov	edx, DWORD PTR _item$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _item$[ebp]
	imul	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$1[ebp], eax
; Line 569
	mov	edx, DWORD PTR _q$1[ebp]
	add	edx, 2
	mov	DWORD PTR _q$1[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _q$1[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _q$1[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _char1$3[ebp], edx
; Line 570
	mov	eax, DWORD PTR _q$1[ebp]
	add	eax, 2
	mov	DWORD PTR _q$1[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _q$1[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _q$1[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _char2$2[ebp], eax
; Line 572
	mov	ecx, DWORD PTR _char1$3[ebp]
	shl	ecx, 16					; 00000010H
	movzx	edx, WORD PTR _char2$2[ebp]
	or	ecx, edx
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 574
	jmp	$LN8@pfr_extra_
$LN9@pfr_extra_:
; Line 576
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$1[ebp], ecx
; Line 577
	mov	edx, DWORD PTR _q$1[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _char1$3[ebp], eax
	mov	ecx, DWORD PTR _q$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _q$1[ebp], ecx
; Line 578
	mov	edx, DWORD PTR _q$1[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _char2$2[ebp], eax
	mov	ecx, DWORD PTR _q$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _q$1[ebp], ecx
; Line 580
	mov	edx, DWORD PTR _char1$3[ebp]
	shl	edx, 16					; 00000010H
	movzx	eax, WORD PTR _char2$2[ebp]
	or	edx, eax
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 582
	mov	edx, DWORD PTR _item$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _item$[ebp]
	imul	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$1[ebp], eax
; Line 583
	mov	edx, DWORD PTR _q$1[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _char1$3[ebp], eax
	mov	ecx, DWORD PTR _q$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _q$1[ebp], ecx
; Line 584
	mov	edx, DWORD PTR _q$1[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _char2$2[ebp], eax
	mov	ecx, DWORD PTR _q$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _q$1[ebp], ecx
; Line 586
	mov	edx, DWORD PTR _char1$3[ebp]
	shl	edx, 16					; 00000010H
	movzx	eax, WORD PTR _char2$2[ebp]
	or	edx, eax
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN8@pfr_extra_:
; Line 590
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx], 0
; Line 591
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 592
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+140], eax
; Line 593
	mov	edx, DWORD PTR _item$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	mov	ecx, DWORD PTR _phy_font$[ebp]
	add	eax, DWORD PTR [ecx+132]
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+132], eax
; Line 595
	jmp	SHORT $Exit$31
$LN6@pfr_extra_:
; Line 598
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _item$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN6@pfr_extra_
$Exit$31:
; Line 602
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN26@pfr_extra_
$Too_Short$32:
; Line 605
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _item$[ebp], 0
	xor	edx, edx
	jne	SHORT $Too_Short$32
; Line 607
	push	OFFSET $SG8139
	push	607					; 0000025fH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 609
	push	OFFSET $SG8140
	call	_FT_Message
	add	esp, 4
; Line 610
	jmp	SHORT $Exit$31
$LN26@pfr_extra_:
; Line 611
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@pfr_extra_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN30@pfr_extra_:
	DD	1
	DD	$LN29@pfr_extra_
$LN29@pfr_extra_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN28@pfr_extra_
$LN28@pfr_extra_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pfr_extra_item_load_kerning_pairs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -32						; size = 4
_error$ = -24						; size = 4
_snaps$ = -16						; size = 4
_num_horz$ = -12					; size = 4
_num_vert$ = -8						; size = 4
_count$ = -4						; size = 4
_p$ = 8							; size = 4
_limit$ = 12						; size = 4
_phy_font$ = 16						; size = 4
_pfr_extra_item_load_stem_snaps PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 477
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 479
	mov	DWORD PTR _snaps$[ebp], 0
; Line 480
	mov	DWORD PTR _error$[ebp], 0
; Line 481
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 484
	mov	edx, DWORD PTR _phy_font$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN12@pfr_extra_
; Line 485
	jmp	$Exit$19
$LN12@pfr_extra_:
; Line 487
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN11@pfr_extra_
	jmp	$Too_Short$20
$LN11@pfr_extra_:
	xor	ecx, ecx
	jne	SHORT $LN12@pfr_extra_
; Line 488
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 490
	mov	edx, DWORD PTR _count$[ebp]
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _num_vert$[ebp], edx
; Line 491
	mov	eax, DWORD PTR _count$[ebp]
	shr	eax, 4
	mov	DWORD PTR _num_horz$[ebp], eax
; Line 492
	mov	ecx, DWORD PTR _num_vert$[ebp]
	add	ecx, DWORD PTR _num_horz$[ebp]
	mov	DWORD PTR _count$[ebp], ecx
$LN8@pfr_extra_:
; Line 494
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN7@pfr_extra_
	jmp	$Too_Short$20
$LN7@pfr_extra_:
	xor	edx, edx
	jne	SHORT $LN8@pfr_extra_
; Line 496
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _snaps$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@pfr_extra_
; Line 497
	jmp	SHORT $Exit$19
$LN4@pfr_extra_:
; Line 499
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR _snaps$[ebp]
	mov	DWORD PTR [eax+76], ecx
; Line 500
	mov	edx, DWORD PTR _num_vert$[ebp]
	mov	eax, DWORD PTR _snaps$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+64], ecx
; Line 502
	jmp	SHORT $LN3@pfr_extra_
$LN2@pfr_extra_:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _snaps$[ebp]
	add	ecx, 4
	mov	DWORD PTR _snaps$[ebp], ecx
$LN3@pfr_extra_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $Exit$19
; Line 503
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	mov	eax, DWORD PTR _snaps$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN2@pfr_extra_
$Exit$19:
; Line 506
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN14@pfr_extra_
$Too_Short$20:
; Line 509
	push	OFFSET $SG8046
	push	509					; 000001fdH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 511
	push	OFFSET $SG8047
	call	_FT_Message
	add	esp, 4
; Line 512
	jmp	SHORT $Exit$19
$LN14@pfr_extra_:
; Line 513
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@pfr_extra_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@pfr_extra_:
	DD	1
	DD	$LN17@pfr_extra_
$LN17@pfr_extra_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN16@pfr_extra_
$LN16@pfr_extra_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pfr_extra_item_load_stem_snaps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_p$ = 8							; size = 4
_limit$ = 12						; size = 4
_phy_font$ = 16						; size = 4
_pfr_extra_item_load_font_id PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 451
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 452
	mov	DWORD PTR _error$[ebp], 0
; Line 453
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 454
	mov	edx, DWORD PTR _limit$[ebp]
	sub	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _len$[ebp], edx
; Line 457
	mov	eax, DWORD PTR _phy_font$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN2@pfr_extra_
; Line 458
	jmp	SHORT $Exit$8
$LN2@pfr_extra_:
; Line 460
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+80], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@pfr_extra_
; Line 461
	jmp	SHORT $Exit$8
$LN1@pfr_extra_:
; Line 464
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 465
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx+edx], 0
$Exit$8:
; Line 468
	mov	eax, DWORD PTR _error$[ebp]
; Line 469
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@pfr_extra_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@pfr_extra_:
	DD	1
	DD	$LN6@pfr_extra_
$LN6@pfr_extra_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@pfr_extra_
$LN5@pfr_extra_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pfr_extra_item_load_font_id ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv278 = -60						; size = 4
tv259 = -56						; size = 4
tv225 = -52						; size = 4
tv188 = -48						; size = 4
tv169 = -44						; size = 4
_new_max$1 = -40					; size = 4
_error$ = -32						; size = 4
_size1$ = -24						; size = 4
_count$ = -20						; size = 4
_n$ = -16						; size = 4
_flags0$ = -12						; size = 4
_strike$ = -8						; size = 4
_memory$ = -4						; size = 4
_p$ = 8							; size = 4
_limit$ = 12						; size = 4
_phy_font$ = 16						; size = 4
_pfr_extra_item_load_bitmap_info PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 351
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 352
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 356
	mov	DWORD PTR _error$[ebp], 0
$LN18@pfr_extra_:
; Line 359
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 5
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN17@pfr_extra_
	jmp	$Too_Short$34
$LN17@pfr_extra_:
	xor	eax, eax
	jne	SHORT $LN18@pfr_extra_
; Line 361
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$[ebp], ecx
; Line 362
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _flags0$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 363
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 366
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	eax, DWORD PTR [edx+92]
	add	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _phy_font$[ebp]
	cmp	eax, DWORD PTR [ecx+96]
	jbe	SHORT $LN14@pfr_extra_
; Line 368
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR _count$[ebp]
	lea	edx, DWORD PTR [eax+ecx+3]
	and	edx, -4					; fffffffcH
	mov	DWORD PTR _new_max$1[ebp], edx
; Line 373
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR _new_max$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	push	edx
	push	36					; 00000024H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+100], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@pfr_extra_
; Line 374
	jmp	$Exit$35
$LN13@pfr_extra_:
; Line 376
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	eax, DWORD PTR _new_max$1[ebp]
	mov	DWORD PTR [edx+96], eax
$LN14@pfr_extra_:
; Line 379
	mov	DWORD PTR _size1$[ebp], 8
; Line 380
	mov	ecx, DWORD PTR _flags0$[ebp]
	and	ecx, 1
	je	SHORT $LN12@pfr_extra_
; Line 381
	mov	edx, DWORD PTR _size1$[ebp]
	add	edx, 1
	mov	DWORD PTR _size1$[ebp], edx
$LN12@pfr_extra_:
; Line 383
	mov	eax, DWORD PTR _flags0$[ebp]
	and	eax, 2
	je	SHORT $LN11@pfr_extra_
; Line 384
	mov	ecx, DWORD PTR _size1$[ebp]
	add	ecx, 1
	mov	DWORD PTR _size1$[ebp], ecx
$LN11@pfr_extra_:
; Line 386
	mov	edx, DWORD PTR _flags0$[ebp]
	and	edx, 4
	je	SHORT $LN10@pfr_extra_
; Line 387
	mov	eax, DWORD PTR _size1$[ebp]
	add	eax, 1
	mov	DWORD PTR _size1$[ebp], eax
$LN10@pfr_extra_:
; Line 389
	mov	ecx, DWORD PTR _flags0$[ebp]
	and	ecx, 8
	je	SHORT $LN9@pfr_extra_
; Line 390
	mov	edx, DWORD PTR _size1$[ebp]
	add	edx, 1
	mov	DWORD PTR _size1$[ebp], edx
$LN9@pfr_extra_:
; Line 392
	mov	eax, DWORD PTR _flags0$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN8@pfr_extra_
; Line 393
	mov	ecx, DWORD PTR _size1$[ebp]
	add	ecx, 1
	mov	DWORD PTR _size1$[ebp], ecx
$LN8@pfr_extra_:
; Line 395
	mov	edx, DWORD PTR _phy_font$[ebp]
	imul	eax, DWORD PTR [edx+92], 36
	mov	ecx, DWORD PTR _phy_font$[ebp]
	add	eax, DWORD PTR [ecx+100]
	mov	DWORD PTR _strike$[ebp], eax
$LN7@pfr_extra_:
; Line 397
	mov	edx, DWORD PTR _count$[ebp]
	imul	edx, DWORD PTR _size1$[ebp]
	add	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN6@pfr_extra_
	jmp	$Too_Short$34
$LN6@pfr_extra_:
	xor	eax, eax
	jne	SHORT $LN7@pfr_extra_
; Line 399
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN3@pfr_extra_
$LN2@pfr_extra_:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	mov	edx, DWORD PTR _strike$[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR _strike$[ebp], edx
$LN3@pfr_extra_:
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	$LN1@pfr_extra_
; Line 403
	mov	ecx, DWORD PTR _flags0$[ebp]
	and	ecx, 1
	je	SHORT $LN21@pfr_extra_
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR tv169[ebp], edx
	jmp	SHORT $LN22@pfr_extra_
$LN21@pfr_extra_:
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv169[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN22@pfr_extra_:
	mov	eax, DWORD PTR _strike$[ebp]
	mov	ecx, DWORD PTR tv169[ebp]
	mov	DWORD PTR [eax], ecx
; Line 407
	mov	edx, DWORD PTR _flags0$[ebp]
	and	edx, 2
	je	SHORT $LN23@pfr_extra_
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR tv188[ebp], eax
	jmp	SHORT $LN24@pfr_extra_
$LN23@pfr_extra_:
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv188[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN24@pfr_extra_:
	mov	ecx, DWORD PTR _strike$[ebp]
	mov	edx, DWORD PTR tv188[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 409
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _strike$[ebp]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 413
	mov	ecx, DWORD PTR _flags0$[ebp]
	and	ecx, 4
	je	SHORT $LN25@pfr_extra_
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 3
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-3]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-3]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-3]
	or	eax, edx
	mov	DWORD PTR tv225[ebp], eax
	jmp	SHORT $LN26@pfr_extra_
$LN25@pfr_extra_:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR tv225[ebp], eax
$LN26@pfr_extra_:
	mov	ecx, DWORD PTR _strike$[ebp]
	mov	edx, DWORD PTR tv225[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 417
	mov	eax, DWORD PTR _flags0$[ebp]
	and	eax, 8
	je	SHORT $LN27@pfr_extra_
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-3]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-3]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-3]
	or	edx, ecx
	mov	DWORD PTR tv259[ebp], edx
	jmp	SHORT $LN28@pfr_extra_
$LN27@pfr_extra_:
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR tv259[ebp], edx
$LN28@pfr_extra_:
	mov	eax, DWORD PTR _strike$[ebp]
	mov	ecx, DWORD PTR tv259[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 421
	mov	edx, DWORD PTR _flags0$[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN29@pfr_extra_
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR tv278[ebp], eax
	jmp	SHORT $LN30@pfr_extra_
$LN29@pfr_extra_:
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv278[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN30@pfr_extra_:
	mov	ecx, DWORD PTR _strike$[ebp]
	mov	edx, DWORD PTR tv278[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 422
	jmp	$LN2@pfr_extra_
$LN1@pfr_extra_:
; Line 424
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+92], ecx
$Exit$35:
; Line 427
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN19@pfr_extra_
$Too_Short$34:
; Line 430
	push	OFFSET $SG7988
	push	430					; 000001aeH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 432
	push	OFFSET $SG7989
	call	_FT_Message
	add	esp, 4
; Line 433
	jmp	SHORT $Exit$35
$LN19@pfr_extra_:
; Line 434
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@pfr_extra_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@pfr_extra_:
	DD	1
	DD	$LN32@pfr_extra_
$LN32@pfr_extra_:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN31@pfr_extra_
$LN31@pfr_extra_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pfr_extra_item_load_bitmap_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_next$1 = -8						; size = 4
_item$2 = -4						; size = 4
_phy_font$ = 8						; size = 4
_memory$ = 12						; size = 4
_pfr_phy_font_done PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 670
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN26@pfr_phy_fo:
; Line 671
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [eax+80], 0
	xor	ecx, ecx
	jne	SHORT $LN26@pfr_phy_fo
$LN23@pfr_phy_fo:
; Line 672
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+84], 0
	xor	eax, eax
	jne	SHORT $LN23@pfr_phy_fo
$LN20@pfr_phy_fo:
; Line 673
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+88], 0
	xor	edx, edx
	jne	SHORT $LN20@pfr_phy_fo
$LN17@pfr_phy_fo:
; Line 675
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [eax+76], 0
	xor	ecx, ecx
	jne	SHORT $LN17@pfr_phy_fo
; Line 676
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+72], 0
; Line 678
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 679
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+60], 0
$LN14@pfr_phy_fo:
; Line 681
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	eax, DWORD PTR [edx+100]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+100], 0
	xor	eax, eax
	jne	SHORT $LN14@pfr_phy_fo
; Line 682
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+92], 0
; Line 683
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+96], 0
$LN11@pfr_phy_fo:
; Line 685
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [eax+128], 0
	xor	ecx, ecx
	jne	SHORT $LN11@pfr_phy_fo
; Line 686
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+120], 0
; Line 687
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [eax+124], 0
$LN8@pfr_phy_fo:
; Line 689
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+108], 0
	xor	edx, edx
	jne	SHORT $LN8@pfr_phy_fo
; Line 690
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [eax+104], 0
; Line 696
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR _item$2[ebp], edx
$LN5@pfr_phy_fo:
; Line 697
	cmp	DWORD PTR _item$2[ebp], 0
	je	SHORT $LN4@pfr_phy_fo
; Line 699
	mov	eax, DWORD PTR _item$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$1[ebp], ecx
$LN3@pfr_phy_fo:
; Line 700
	mov	edx, DWORD PTR _item$2[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _item$2[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@pfr_phy_fo
; Line 701
	mov	edx, DWORD PTR _next$1[ebp]
	mov	DWORD PTR _item$2[ebp], edx
; Line 702
	jmp	SHORT $LN5@pfr_phy_fo
$LN4@pfr_phy_fo:
; Line 703
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [eax+136], 0
; Line 704
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+140], 0
; Line 707
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+132], 0
; Line 708
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_phy_font_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv586 = -100						; size = 4
tv552 = -96						; size = 4
tv530 = -92						; size = 4
tv512 = -88						; size = 4
tv303 = -84						; size = 4
_cur$1 = -80						; size = 4
_Size$2 = -76						; size = 4
_count$3 = -72						; size = 4
_n$4 = -68						; size = 4
_count$5 = -64						; size = 4
_n$6 = -60						; size = 4
_type$7 = -56						; size = 4
_length$8 = -52						; size = 4
_q2$9 = -48						; size = 4
_q$10 = -44						; size = 4
_limit$ = -40						; size = 4
_p$ = -32						; size = 4
_num_aux$ = -24						; size = 4
_flags$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_phy_font$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_size$ = 20						; size = 4
_pfr_phy_font_load PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 716
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 718
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 725
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	eax, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [edx], eax
; Line 726
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 728
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [eax+136], 0
; Line 729
	mov	ecx, DWORD PTR _phy_font$[ebp]
	add	ecx, 136				; 00000088H
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+140], ecx
; Line 731
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN65@pfr_phy_fo
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN66@pfr_phy_fo
$LN65@pfr_phy_fo:
; Line 732
	jmp	$Exit$81
$LN66@pfr_phy_fo:
; Line 734
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+148], eax
; Line 736
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _p$[ebp], edx
; Line 737
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
$LN64@pfr_phy_fo:
; Line 739
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 15					; 0000000fH
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN63@pfr_phy_fo
	jmp	$Too_Short$82
$LN63@pfr_phy_fo:
	xor	edx, edx
	jne	SHORT $LN64@pfr_phy_fo
; Line 740
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 741
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 742
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 743
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 744
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [eax+24], edx
; Line 745
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 746
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 747
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _flags$[ebp], eax
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	edx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [ecx+36], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 750
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 4
	jne	SHORT $LN60@pfr_phy_fo
$LN59@pfr_phy_fo:
; Line 752
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN58@pfr_phy_fo
	jmp	$Too_Short$82
$LN58@pfr_phy_fo:
	xor	eax, eax
	jne	SHORT $LN59@pfr_phy_fo
; Line 753
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+40], ecx
$LN60@pfr_phy_fo:
; Line 757
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN53@pfr_phy_fo
; Line 760
	mov	ecx, DWORD PTR _phy_font$[ebp]
	push	ecx
	push	OFFSET _pfr_phy_font_extra_items
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_pfr_extra_items_parse
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 762
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN53@pfr_phy_fo
; Line 763
	jmp	$Fail$83
$LN53@pfr_phy_fo:
; Line 769
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN52@pfr_phy_fo
	jmp	$Too_Short$82
$LN52@pfr_phy_fo:
	xor	edx, edx
	jne	SHORT $LN53@pfr_phy_fo
; Line 770
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	DWORD PTR _num_aux$[ebp], ecx
; Line 772
	jbe	$LN30@pfr_phy_fo
; Line 774
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$10[ebp], ecx
$LN48@pfr_phy_fo:
; Line 778
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _num_aux$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN47@pfr_phy_fo
	jmp	$Too_Short$82
$LN47@pfr_phy_fo:
	xor	eax, eax
	jne	SHORT $LN48@pfr_phy_fo
; Line 779
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _num_aux$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
$LN44@pfr_phy_fo:
; Line 781
	cmp	DWORD PTR _num_aux$[ebp], 0
	jbe	$LN30@pfr_phy_fo
; Line 786
	mov	edx, DWORD PTR _q$10[ebp]
	add	edx, 4
	cmp	edx, DWORD PTR _p$[ebp]
	jbe	SHORT $LN42@pfr_phy_fo
; Line 787
	jmp	$LN30@pfr_phy_fo
$LN42@pfr_phy_fo:
; Line 789
	mov	eax, DWORD PTR _q$10[ebp]
	add	eax, 2
	mov	DWORD PTR _q$10[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _q$10[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _q$10[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _length$8[ebp], eax
; Line 790
	cmp	DWORD PTR _length$8[ebp], 4
	jb	SHORT $LN40@pfr_phy_fo
	mov	ecx, DWORD PTR _length$8[ebp]
	cmp	ecx, DWORD PTR _num_aux$[ebp]
	jbe	SHORT $LN41@pfr_phy_fo
$LN40@pfr_phy_fo:
; Line 791
	jmp	$LN30@pfr_phy_fo
$LN41@pfr_phy_fo:
; Line 793
	mov	edx, DWORD PTR _length$8[ebp]
	mov	eax, DWORD PTR _q$10[ebp]
	lea	ecx, DWORD PTR [eax+edx-2]
	mov	DWORD PTR _q2$9[ebp], ecx
; Line 794
	mov	edx, DWORD PTR _q$10[ebp]
	add	edx, 2
	mov	DWORD PTR _q$10[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _q$10[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _q$10[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _type$7[ebp], edx
; Line 796
	mov	eax, DWORD PTR _type$7[ebp]
	mov	DWORD PTR tv303[ebp], eax
	cmp	DWORD PTR tv303[ebp], 1
	je	SHORT $LN37@pfr_phy_fo
	cmp	DWORD PTR tv303[ebp], 2
	je	SHORT $LN35@pfr_phy_fo
	cmp	DWORD PTR tv303[ebp], 3
	je	$LN33@pfr_phy_fo
	jmp	$LN38@pfr_phy_fo
$LN37@pfr_phy_fo:
; Line 803
	mov	ecx, DWORD PTR _phy_font$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _length$8[ebp]
	sub	eax, 4
	push	eax
	mov	ecx, DWORD PTR _q$10[ebp]
	push	ecx
	call	_pfr_aux_name_load
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 804
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN36@pfr_phy_fo
; Line 805
	jmp	$Exit$81
$LN36@pfr_phy_fo:
; Line 806
	jmp	$LN38@pfr_phy_fo
$LN35@pfr_phy_fo:
; Line 809
	mov	edx, DWORD PTR _q$10[ebp]
	add	edx, 32					; 00000020H
	cmp	edx, DWORD PTR _q2$9[ebp]
	jbe	SHORT $LN34@pfr_phy_fo
; Line 810
	jmp	$LN38@pfr_phy_fo
$LN34@pfr_phy_fo:
; Line 812
	mov	eax, DWORD PTR _q$10[ebp]
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _q$10[ebp], eax
; Line 813
	mov	ecx, DWORD PTR _q$10[ebp]
	add	ecx, 2
	mov	DWORD PTR _q$10[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _q$10[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _q$10[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movsx	ecx, dx
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 814
	mov	eax, DWORD PTR _q$10[ebp]
	add	eax, 2
	mov	DWORD PTR _q$10[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _q$10[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _q$10[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 815
	mov	edx, DWORD PTR _q$10[ebp]
	add	edx, 2
	mov	DWORD PTR _q$10[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _q$10[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _q$10[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movsx	edx, ax
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [eax+52], edx
; Line 816
	jmp	SHORT $LN38@pfr_phy_fo
$LN33@pfr_phy_fo:
; Line 823
	mov	ecx, DWORD PTR _phy_font$[ebp]
	add	ecx, 88					; 00000058H
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _length$8[ebp]
	sub	eax, 4
	push	eax
	mov	ecx, DWORD PTR _q$10[ebp]
	push	ecx
	call	_pfr_aux_name_load
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 824
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN38@pfr_phy_fo
; Line 825
	jmp	$Exit$81
$LN38@pfr_phy_fo:
; Line 832
	mov	edx, DWORD PTR _q2$9[ebp]
	mov	DWORD PTR _q$10[ebp], edx
; Line 833
	mov	eax, DWORD PTR _num_aux$[ebp]
	sub	eax, DWORD PTR _length$8[ebp]
	mov	DWORD PTR _num_aux$[ebp], eax
; Line 834
	jmp	$LN44@pfr_phy_fo
$LN30@pfr_phy_fo:
; Line 842
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN29@pfr_phy_fo
	jmp	$Too_Short$82
$LN29@pfr_phy_fo:
	xor	edx, edx
	jne	SHORT $LN30@pfr_phy_fo
; Line 843
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _count$5[ebp], ecx
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	eax, DWORD PTR _count$5[ebp]
	mov	DWORD PTR [edx+104], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN26@pfr_phy_fo:
; Line 845
	mov	edx, DWORD PTR _count$5[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN25@pfr_phy_fo
	jmp	$Too_Short$82
$LN25@pfr_phy_fo:
	xor	edx, edx
	jne	SHORT $LN26@pfr_phy_fo
; Line 847
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _count$5[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+108], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN22@pfr_phy_fo
; Line 848
	jmp	$Fail$83
$LN22@pfr_phy_fo:
; Line 850
	mov	DWORD PTR _n$6[ebp], 0
	jmp	SHORT $LN21@pfr_phy_fo
$LN20@pfr_phy_fo:
	mov	edx, DWORD PTR _n$6[ebp]
	add	edx, 1
	mov	DWORD PTR _n$6[ebp], edx
$LN21@pfr_phy_fo:
	mov	eax, DWORD PTR _n$6[ebp]
	cmp	eax, DWORD PTR _count$5[ebp]
	jae	SHORT $LN18@pfr_phy_fo
; Line 851
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	movsx	ecx, dx
	mov	edx, DWORD PTR _n$6[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN20@pfr_phy_fo
$LN18@pfr_phy_fo:
; Line 854
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN17@pfr_phy_fo
	jmp	$Too_Short$82
$LN17@pfr_phy_fo:
	xor	ecx, ecx
	jne	SHORT $LN18@pfr_phy_fo
; Line 855
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+112], eax
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 856
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+116], ecx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 858
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+68], ecx
; Line 859
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+56], eax
; Line 866
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _count$3[ebp], edx
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR _count$3[ebp]
	mov	DWORD PTR [eax+120], ecx
; Line 867
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx+32]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+124], eax
; Line 869
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _count$3[ebp]
	push	eax
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+128], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@pfr_phy_fo
; Line 870
	jmp	$Fail$83
$LN14@pfr_phy_fo:
; Line 872
	mov	DWORD PTR _Size$2[ebp], 4
; Line 873
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 2
	je	SHORT $LN13@pfr_phy_fo
; Line 874
	mov	ecx, DWORD PTR _Size$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _Size$2[ebp], ecx
$LN13@pfr_phy_fo:
; Line 876
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 4
	je	SHORT $LN12@pfr_phy_fo
; Line 877
	mov	eax, DWORD PTR _Size$2[ebp]
	add	eax, 2
	mov	DWORD PTR _Size$2[ebp], eax
$LN12@pfr_phy_fo:
; Line 879
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 8
	je	SHORT $LN11@pfr_phy_fo
; Line 880
	mov	edx, DWORD PTR _Size$2[ebp]
	add	edx, 1
	mov	DWORD PTR _Size$2[ebp], edx
$LN11@pfr_phy_fo:
; Line 882
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN10@pfr_phy_fo
; Line 883
	mov	ecx, DWORD PTR _Size$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _Size$2[ebp], ecx
$LN10@pfr_phy_fo:
; Line 885
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN8@pfr_phy_fo
; Line 886
	mov	eax, DWORD PTR _Size$2[ebp]
	add	eax, 1
	mov	DWORD PTR _Size$2[ebp], eax
$LN8@pfr_phy_fo:
; Line 888
	mov	ecx, DWORD PTR _count$3[ebp]
	imul	ecx, DWORD PTR _Size$2[ebp]
	add	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN7@pfr_phy_fo
	jmp	$Too_Short$82
$LN7@pfr_phy_fo:
	xor	edx, edx
	jne	SHORT $LN8@pfr_phy_fo
; Line 890
	mov	DWORD PTR _n$4[ebp], 0
	jmp	SHORT $LN4@pfr_phy_fo
$LN3@pfr_phy_fo:
	mov	eax, DWORD PTR _n$4[ebp]
	add	eax, 1
	mov	DWORD PTR _n$4[ebp], eax
$LN4@pfr_phy_fo:
	mov	ecx, DWORD PTR _n$4[ebp]
	cmp	ecx, DWORD PTR _count$3[ebp]
	jae	$Fail$83
; Line 892
	mov	edx, DWORD PTR _n$4[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _phy_font$[ebp]
	add	edx, DWORD PTR [eax+128]
	mov	DWORD PTR _cur$1[ebp], edx
; Line 897
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 2
	je	SHORT $LN69@pfr_phy_fo
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR tv512[ebp], edx
	jmp	SHORT $LN70@pfr_phy_fo
$LN69@pfr_phy_fo:
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv512[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN70@pfr_phy_fo:
	mov	eax, DWORD PTR _cur$1[ebp]
	mov	ecx, DWORD PTR tv512[ebp]
	mov	DWORD PTR [eax], ecx
; Line 901
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 4
	je	SHORT $LN71@pfr_phy_fo
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	DWORD PTR tv530[ebp], eax
	jmp	SHORT $LN72@pfr_phy_fo
$LN71@pfr_phy_fo:
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR tv530[ebp], edx
$LN72@pfr_phy_fo:
	mov	eax, DWORD PTR _cur$1[ebp]
	mov	ecx, DWORD PTR tv530[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 908
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 8
	je	SHORT $LN1@pfr_phy_fo
; Line 909
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN1@pfr_phy_fo:
; Line 913
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN73@pfr_phy_fo
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR tv552[ebp], edx
	jmp	SHORT $LN74@pfr_phy_fo
$LN73@pfr_phy_fo:
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv552[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN74@pfr_phy_fo:
	mov	eax, DWORD PTR _cur$1[ebp]
	mov	ecx, DWORD PTR tv552[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 917
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN75@pfr_phy_fo
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	DWORD PTR tv586[ebp], ecx
	jmp	SHORT $LN76@pfr_phy_fo
$LN75@pfr_phy_fo:
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	movzx	ecx, dx
	mov	DWORD PTR tv586[ebp], ecx
$LN76@pfr_phy_fo:
	mov	edx, DWORD PTR _cur$1[ebp]
	mov	eax, DWORD PTR tv586[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 918
	jmp	$LN3@pfr_phy_fo
$Fail$83:
; Line 924
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 927
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	ecx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [ecx+144], eax
; Line 928
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	DWORD PTR [edx+148], 0
$Exit$81:
; Line 931
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN67@pfr_phy_fo
$Too_Short$82:
; Line 934
	push	OFFSET $SG8471
	push	934					; 000003a6H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 935
	push	OFFSET $SG8472
	call	_FT_Message
	add	esp, 4
; Line 936
	jmp	SHORT $Fail$83
$LN67@pfr_phy_fo:
; Line 937
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN80@pfr_phy_fo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN80@pfr_phy_fo:
	DD	2
	DD	$LN79@pfr_phy_fo
$LN79@pfr_phy_fo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN77@pfr_phy_fo
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN78@pfr_phy_fo
$LN78@pfr_phy_fo:
	DB	112					; 00000070H
	DB	0
$LN77@pfr_phy_fo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pfr_phy_font_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv301 = -56						; size = 4
tv260 = -52						; size = 4
_local$1 = -48						; size = 4
_limit$2 = -44						; size = 4
_p$3 = -36						; size = 4
_error$ = -24						; size = 4
_size$ = -16						; size = 4
_offset$ = -12						; size = 4
_flags$ = -8						; size = 4
_num_log_fonts$ = -4					; size = 4
_log_font$ = 8						; size = 4
_stream$ = 12						; size = 4
_idx$ = 16						; size = 4
_section_offset$ = 20					; size = 4
_size_increment$ = 24					; size = 1
_pfr_log_font_load PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 226
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 235
	mov	eax, DWORD PTR _section_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN33@pfr_log_fo
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	ecx, ax
	mov	DWORD PTR _num_log_fonts$[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN34@pfr_log_fo
$LN33@pfr_log_fo:
; Line 236
	jmp	$Exit$45
$LN34@pfr_log_fo:
; Line 238
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	edx, DWORD PTR _num_log_fonts$[ebp]
	jb	SHORT $LN32@pfr_log_fo
; Line 239
	push	OFFSET $SG7783
	push	239					; 000000efH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN35@pfr_log_fo
$LN32@pfr_log_fo:
; Line 243
	imul	eax, DWORD PTR _idx$[ebp], 5
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN30@pfr_log_fo
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	ecx, ax
	mov	DWORD PTR _size$[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN30@pfr_log_fo
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUOffset
	add	esp, 8
	mov	DWORD PTR _offset$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@pfr_log_fo
$LN30@pfr_log_fo:
; Line 244
	jmp	$Exit$45
$LN31@pfr_log_fo:
; Line 247
	mov	ecx, DWORD PTR _log_font$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 248
	mov	eax, DWORD PTR _log_font$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 257
	mov	edx, DWORD PTR _offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN28@pfr_log_fo
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN29@pfr_log_fo
$LN28@pfr_log_fo:
; Line 258
	jmp	$Exit$45
$LN29@pfr_log_fo:
; Line 260
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _p$3[ebp], ecx
; Line 261
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _limit$2[ebp], edx
$LN27@pfr_log_fo:
; Line 263
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 13					; 0000000dH
	cmp	eax, DWORD PTR _limit$2[ebp]
	jbe	SHORT $LN26@pfr_log_fo
	jmp	$Too_Short$46
$LN26@pfr_log_fo:
	xor	ecx, ecx
	jne	SHORT $LN27@pfr_log_fo
; Line 265
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, 3
	mov	DWORD PTR _p$3[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx-3]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-3]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+edx-3]
	or	eax, edx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _log_font$[ebp]
	mov	DWORD PTR [ecx+edx+8], eax
; Line 266
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, 3
	mov	DWORD PTR _p$3[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx-3]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-3]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+edx-3]
	or	eax, edx
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _log_font$[ebp]
	mov	DWORD PTR [edx+ecx+8], eax
; Line 267
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 3
	mov	DWORD PTR _p$3[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _log_font$[ebp]
	mov	DWORD PTR [eax+edx+8], ecx
; Line 268
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$3[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+eax-3]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [ecx+eax-3]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-3]
	or	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _log_font$[ebp]
	mov	DWORD PTR [eax+ecx+8], edx
; Line 270
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _flags$[ebp], edx
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 1
	mov	DWORD PTR _p$3[ebp], eax
; Line 272
	mov	DWORD PTR _local$1[ebp], 0
; Line 273
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 4
	je	SHORT $LN23@pfr_log_fo
; Line 275
	mov	edx, DWORD PTR _local$1[ebp]
	add	edx, 1
	mov	DWORD PTR _local$1[ebp], edx
; Line 276
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 8
	je	SHORT $LN22@pfr_log_fo
; Line 277
	mov	ecx, DWORD PTR _local$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _local$1[ebp], ecx
$LN22@pfr_log_fo:
; Line 279
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 3
	jne	SHORT $LN23@pfr_log_fo
; Line 280
	mov	eax, DWORD PTR _local$1[ebp]
	add	eax, 3
	mov	DWORD PTR _local$1[ebp], eax
$LN23@pfr_log_fo:
; Line 282
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN18@pfr_log_fo
; Line 284
	mov	edx, DWORD PTR _local$1[ebp]
	add	edx, 1
	mov	DWORD PTR _local$1[ebp], edx
; Line 285
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN18@pfr_log_fo
; Line 286
	mov	ecx, DWORD PTR _local$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _local$1[ebp], ecx
$LN18@pfr_log_fo:
; Line 289
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, DWORD PTR _local$1[ebp]
	cmp	edx, DWORD PTR _limit$2[ebp]
	jbe	SHORT $LN17@pfr_log_fo
	jmp	$Too_Short$46
$LN17@pfr_log_fo:
	xor	eax, eax
	jne	SHORT $LN18@pfr_log_fo
; Line 291
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 4
	je	$LN14@pfr_log_fo
; Line 295
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 8
	je	SHORT $LN37@pfr_log_fo
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 2
	mov	DWORD PTR _p$3[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	DWORD PTR tv260[ebp], eax
	jmp	SHORT $LN38@pfr_log_fo
$LN37@pfr_log_fo:
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv260[ebp], edx
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 1
	mov	DWORD PTR _p$3[ebp], eax
$LN38@pfr_log_fo:
	mov	ecx, DWORD PTR _log_font$[ebp]
	mov	edx, DWORD PTR tv260[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 297
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 3
	jne	SHORT $LN14@pfr_log_fo
; Line 298
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$3[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+eax-3]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [ecx+eax-3]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-3]
	or	edx, ecx
	mov	eax, DWORD PTR _log_font$[ebp]
	mov	DWORD PTR [eax+36], edx
$LN14@pfr_log_fo:
; Line 301
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN12@pfr_log_fo
; Line 305
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN39@pfr_log_fo
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 2
	mov	DWORD PTR _p$3[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movsx	eax, cx
	mov	DWORD PTR tv301[ebp], eax
	jmp	SHORT $LN40@pfr_log_fo
$LN39@pfr_log_fo:
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv301[ebp], edx
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 1
	mov	DWORD PTR _p$3[ebp], eax
$LN40@pfr_log_fo:
	mov	ecx, DWORD PTR _log_font$[ebp]
	mov	edx, DWORD PTR tv301[ebp]
	mov	DWORD PTR [ecx+32], edx
$LN12@pfr_log_fo:
; Line 308
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN9@pfr_log_fo
; Line 310
	mov	ecx, DWORD PTR _limit$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$3[ebp]
	push	edx
	call	_pfr_extra_items_skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 311
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@pfr_log_fo
	jmp	$Fail$47
$LN9@pfr_log_fo:
; Line 314
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 5
	cmp	eax, DWORD PTR _limit$2[ebp]
	jbe	SHORT $LN8@pfr_log_fo
	jmp	$Too_Short$46
$LN8@pfr_log_fo:
	xor	ecx, ecx
	jne	SHORT $LN9@pfr_log_fo
; Line 315
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, 2
	mov	DWORD PTR _p$3[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	eax, DWORD PTR _log_font$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 316
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$3[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+eax-3]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [ecx+eax-3]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-3]
	or	edx, ecx
	mov	eax, DWORD PTR _log_font$[ebp]
	mov	DWORD PTR [eax+44], edx
; Line 317
	movzx	ecx, BYTE PTR _size_increment$[ebp]
	test	ecx, ecx
	je	SHORT $Fail$47
$LN4@pfr_log_fo:
; Line 319
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _limit$2[ebp]
	jbe	SHORT $LN3@pfr_log_fo
	jmp	SHORT $Too_Short$46
$LN3@pfr_log_fo:
	xor	eax, eax
	jne	SHORT $LN4@pfr_log_fo
; Line 320
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _log_font$[ebp]
	add	edx, DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _log_font$[ebp]
	mov	DWORD PTR [ecx+40], edx
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, 1
	mov	DWORD PTR _p$3[ebp], edx
$Fail$47:
; Line 325
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
$Exit$45:
; Line 328
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN35@pfr_log_fo
$Too_Short$46:
; Line 331
	push	OFFSET $SG7896
	call	_FT_Message
	add	esp, 4
; Line 332
	push	OFFSET $SG7897
	push	332					; 0000014cH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 333
	jmp	SHORT $Fail$47
$LN35@pfr_log_fo:
; Line 334
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@pfr_log_fo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN44@pfr_log_fo:
	DD	2
	DD	$LN43@pfr_log_fo
$LN43@pfr_log_fo:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN41@pfr_log_fo
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN42@pfr_log_fo
$LN42@pfr_log_fo:
	DB	112					; 00000070H
	DB	0
$LN41@pfr_log_fo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pfr_log_font_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -20						; size = 4
_count$ = -16						; size = 4
_error$ = -8						; size = 4
_stream$ = 8						; size = 4
_section_offset$ = 12					; size = 4
_acount$ = 16						; size = 4
_pfr_log_font_count PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 206
	mov	DWORD PTR _result$[ebp], 0
; Line 209
	mov	eax, DWORD PTR _section_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@pfr_log_fo
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	ecx, ax
	mov	DWORD PTR _count$[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@pfr_log_fo
$LN1@pfr_log_fo:
; Line 210
	jmp	SHORT $Exit$8
$LN2@pfr_log_fo:
; Line 212
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _result$[ebp], edx
$Exit$8:
; Line 215
	mov	eax, DWORD PTR _acount$[ebp]
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 216
	mov	eax, DWORD PTR _error$[ebp]
; Line 217
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@pfr_log_fo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@pfr_log_fo:
	DD	1
	DD	$LN6@pfr_log_fo
$LN6@pfr_log_fo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@pfr_log_fo
$LN5@pfr_log_fo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pfr_log_font_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -1						; size = 1
_header$ = 8						; size = 4
_pfr_header_check PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 174
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 175
	mov	BYTE PTR _result$[ebp], 1
; Line 182
	mov	eax, DWORD PTR _header$[ebp]
	cmp	DWORD PTR [eax], 1346785840		; 50465230H
	jne	SHORT $LN1@pfr_header
	mov	ecx, DWORD PTR _header$[ebp]
	cmp	DWORD PTR [ecx+4], 4
	ja	SHORT $LN1@pfr_header
	mov	edx, DWORD PTR _header$[ebp]
	cmp	DWORD PTR [edx+12], 58			; 0000003aH
	jb	SHORT $LN1@pfr_header
	mov	eax, DWORD PTR _header$[ebp]
	cmp	DWORD PTR [eax+8], 3338			; 00000d0aH
	je	SHORT $LN2@pfr_header
$LN1@pfr_header:
; Line 184
	mov	BYTE PTR _result$[ebp], 0
$LN2@pfr_header:
; Line 186
	mov	al, BYTE PTR _result$[ebp]
; Line 187
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_header_check ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_header$ = 8						; size = 4
_stream$ = 12						; size = 4
_pfr_header_load PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 155
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 161
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@pfr_header
	mov	ecx, DWORD PTR _header$[ebp]
	push	ecx
	push	OFFSET _pfr_header_fields
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@pfr_header
; Line 165
	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _header$[ebp]
	add	ecx, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax+36], ecx
$LN1@pfr_header:
; Line 168
	mov	eax, DWORD PTR _error$[ebp]
; Line 169
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_header_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_extra$1 = -24						; size = 4
_item_size$ = -20					; size = 4
_item_type$ = -16					; size = 4
_num_items$ = -12					; size = 4
_p$ = -8						; size = 4
_error$ = -4						; size = 4
_pp$ = 8						; size = 4
_limit$ = 12						; size = 4
_item_list$ = 16					; size = 4
_item_data$ = 20					; size = 4
_pfr_extra_items_parse PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 52
	mov	DWORD PTR _error$[ebp], 0
; Line 53
	mov	eax, DWORD PTR _pp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
$LN21@pfr_extra_:
; Line 57
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN20@pfr_extra_
	jmp	$Too_Short$24
$LN20@pfr_extra_:
	xor	eax, eax
	jne	SHORT $LN21@pfr_extra_
; Line 58
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _num_items$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 60
	jmp	SHORT $LN17@pfr_extra_
$LN16@pfr_extra_:
	mov	ecx, DWORD PTR _num_items$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _num_items$[ebp], ecx
$LN17@pfr_extra_:
	cmp	DWORD PTR _num_items$[ebp], 0
	jbe	$Exit$25
$LN14@pfr_extra_:
; Line 62
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN13@pfr_extra_
	jmp	$Too_Short$24
$LN13@pfr_extra_:
	xor	eax, eax
	jne	SHORT $LN14@pfr_extra_
; Line 63
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _item_size$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 64
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _item_type$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN10@pfr_extra_:
; Line 66
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _item_size$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN9@pfr_extra_
	jmp	$Too_Short$24
$LN9@pfr_extra_:
	xor	edx, edx
	jne	SHORT $LN10@pfr_extra_
; Line 68
	cmp	DWORD PTR _item_list$[ebp], 0
	je	SHORT $LN6@pfr_extra_
; Line 70
	mov	eax, DWORD PTR _item_list$[ebp]
	mov	DWORD PTR _extra$1[ebp], eax
; Line 73
	mov	ecx, DWORD PTR _item_list$[ebp]
	mov	DWORD PTR _extra$1[ebp], ecx
	jmp	SHORT $LN5@pfr_extra_
$LN4@pfr_extra_:
	mov	edx, DWORD PTR _extra$1[ebp]
	add	edx, 8
	mov	DWORD PTR _extra$1[ebp], edx
$LN5@pfr_extra_:
	mov	eax, DWORD PTR _extra$1[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN6@pfr_extra_
; Line 75
	mov	ecx, DWORD PTR _extra$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _item_type$[ebp]
	jne	SHORT $LN2@pfr_extra_
; Line 77
	mov	esi, esp
	mov	eax, DWORD PTR _item_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _item_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _extra$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 78
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@pfr_extra_
	jmp	SHORT $Exit$25
$LN1@pfr_extra_:
; Line 80
	jmp	SHORT $LN6@pfr_extra_
$LN2@pfr_extra_:
; Line 82
	jmp	SHORT $LN4@pfr_extra_
$LN6@pfr_extra_:
; Line 85
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _item_size$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 86
	jmp	$LN16@pfr_extra_
$Exit$25:
; Line 89
	mov	eax, DWORD PTR _pp$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 90
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN22@pfr_extra_
$Too_Short$24:
; Line 93
	push	OFFSET $SG7593
	call	_FT_Message
	add	esp, 4
; Line 94
	push	OFFSET $SG7594
	push	94					; 0000005eH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 95
	jmp	SHORT $Exit$25
$LN22@pfr_extra_:
; Line 96
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_extra_items_parse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_limit$ = 12						; size = 4
_pfr_extra_items_skip PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrload.c
; Line 41
	push	ebp
	mov	ebp, esp
; Line 42
	push	0
	push	0
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pp$[ebp]
	push	ecx
	call	_pfr_extra_items_parse
	add	esp, 16					; 00000010H
; Line 43
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pfr_extra_items_skip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv149 = -93						; size = 1
_vec$1 = -92						; size = 4
_y_scale$2 = -88					; size = 4
_x_scale$3 = -84					; size = 4
_n$4 = -80						; size = 4
_scaling$5 = -73					; size = 1
_em_outline$6 = -72					; size = 4
_em_metrics$7 = -68					; size = 4
_advance$8 = -64					; size = 4
_metrics$9 = -60					; size = 4
_cbox$10 = -52						; size = 16
_gps_offset$ = -32					; size = 4
_outline$ = -28						; size = 4
_gchar$ = -24						; size = 4
_face$ = -20						; size = 4
_error$ = -16						; size = 4
_size$ = -12						; size = 4
_slot$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pfrslot$ = 8						; size = 4
_pfrsize$ = 12						; size = 4
_gindex$ = 16						; size = 4
_load_flags$ = 20					; size = 4
_pfr_slot_load PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrobjs.c
; Line 319
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 320
	mov	eax, DWORD PTR _pfrslot$[ebp]
	mov	DWORD PTR _slot$[ebp], eax
; Line 321
	mov	ecx, DWORD PTR _pfrsize$[ebp]
	mov	DWORD PTR _size$[ebp], ecx
; Line 323
	mov	edx, DWORD PTR _pfrslot$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _face$[ebp], eax
; Line 325
	mov	ecx, DWORD PTR _pfrslot$[ebp]
	add	ecx, 108				; 0000006cH
	mov	DWORD PTR _outline$[ebp], ecx
$LN19@pfr_slot_l:
; Line 329
	mov	edx, 4
	imul	eax, edx, 66
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN18@pfr_slot_l
	mov	ecx, DWORD PTR _gindex$[ebp]
	push	ecx
	push	OFFSET $SG9490
	call	_FT_Message
	add	esp, 8
$LN18@pfr_slot_l:
	xor	edx, edx
	jne	SHORT $LN19@pfr_slot_l
; Line 331
	cmp	DWORD PTR _gindex$[ebp], 0
	jbe	SHORT $LN15@pfr_slot_l
; Line 332
	mov	eax, DWORD PTR _gindex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _gindex$[ebp], eax
$LN15@pfr_slot_l:
; Line 334
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN13@pfr_slot_l
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _gindex$[ebp]
	cmp	edx, DWORD PTR [ecx+408]
	jb	SHORT $LN14@pfr_slot_l
$LN13@pfr_slot_l:
; Line 336
	push	OFFSET $SG9494
	push	336					; 00000150H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 337
	jmp	$Exit$27
$LN14@pfr_slot_l:
; Line 341
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 9
	jne	SHORT $LN12@pfr_slot_l
; Line 343
	mov	ecx, DWORD PTR _gindex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	call	_pfr_slot_load_bitmap
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 344
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN12@pfr_slot_l
; Line 345
	jmp	$Exit$27
$LN12@pfr_slot_l:
; Line 348
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 16384				; 00004000H
	je	SHORT $LN10@pfr_slot_l
; Line 350
	push	OFFSET $SG9499
	push	350					; 0000015eH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 351
	jmp	$Exit$27
$LN10@pfr_slot_l:
; Line 354
	mov	edx, DWORD PTR _gindex$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _face$[ebp]
	add	edx, DWORD PTR [eax+416]
	mov	DWORD PTR _gchar$[ebp], edx
; Line 355
	mov	ecx, DWORD PTR _pfrslot$[ebp]
	mov	DWORD PTR [ecx+72], 1869968492		; 6f75746cH
; Line 356
	xor	edx, edx
	mov	eax, DWORD PTR _outline$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 357
	xor	ecx, ecx
	mov	edx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [edx], cx
; Line 358
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	DWORD PTR _gps_offset$[ebp], ecx
; Line 362
	mov	edx, DWORD PTR _gchar$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _gchar$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _gps_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	add	eax, 160				; 000000a0H
	push	eax
	call	_pfr_glyph_load
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 364
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$27
; Line 367
	mov	ecx, DWORD PTR _pfrslot$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _metrics$9[ebp], ecx
; Line 373
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 1
	jne	SHORT $LN22@pfr_slot_l
	mov	BYTE PTR tv149[ebp], 1
	jmp	SHORT $LN23@pfr_slot_l
$LN22@pfr_slot_l:
	mov	BYTE PTR tv149[ebp], 0
$LN23@pfr_slot_l:
	mov	al, BYTE PTR tv149[ebp]
	mov	BYTE PTR _scaling$5[ebp], al
; Line 376
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	add	edx, 20					; 00000014H
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], edx
; Line 378
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 379
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 4
	mov	edx, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 381
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN8@pfr_slot_l
	mov	eax, DWORD PTR _pfrsize$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cmp	ecx, 24					; 00000018H
	jge	SHORT $LN8@pfr_slot_l
; Line 382
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+16]
	or	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN8@pfr_slot_l:
; Line 385
	mov	edx, DWORD PTR _metrics$9[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 386
	mov	eax, DWORD PTR _metrics$9[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 388
	mov	ecx, DWORD PTR _gchar$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _advance$8[ebp], edx
; Line 389
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	mov	DWORD PTR _em_metrics$7[ebp], ecx
; Line 390
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+300]
	mov	DWORD PTR _em_outline$6[ebp], eax
; Line 392
	mov	ecx, DWORD PTR _em_metrics$7[ebp]
	cmp	ecx, DWORD PTR _em_outline$6[ebp]
	je	SHORT $LN7@pfr_slot_l
; Line 393
	mov	edx, DWORD PTR _em_metrics$7[ebp]
	push	edx
	mov	eax, DWORD PTR _em_outline$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _advance$8[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _advance$8[ebp], eax
$LN7@pfr_slot_l:
; Line 395
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+324]
	and	eax, 1
	je	SHORT $LN6@pfr_slot_l
; Line 396
	mov	ecx, DWORD PTR _metrics$9[ebp]
	mov	edx, DWORD PTR _advance$8[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 397
	jmp	SHORT $LN5@pfr_slot_l
$LN6@pfr_slot_l:
; Line 398
	mov	eax, DWORD PTR _metrics$9[ebp]
	mov	ecx, DWORD PTR _advance$8[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN5@pfr_slot_l:
; Line 400
	mov	edx, DWORD PTR _pfrslot$[ebp]
	mov	eax, DWORD PTR _metrics$9[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+56], ecx
; Line 401
	mov	edx, DWORD PTR _pfrslot$[ebp]
	mov	eax, DWORD PTR _metrics$9[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+60], ecx
; Line 404
	mov	edx, DWORD PTR _metrics$9[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 405
	mov	eax, DWORD PTR _metrics$9[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 426
	movzx	ecx, BYTE PTR _scaling$5[ebp]
	test	ecx, ecx
	je	$LN4@pfr_slot_l
; Line 429
	mov	edx, DWORD PTR _pfrsize$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _x_scale$3[ebp], eax
; Line 430
	mov	ecx, DWORD PTR _pfrsize$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _y_scale$2[ebp], edx
; Line 431
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vec$1[ebp], ecx
; Line 435
	mov	DWORD PTR _n$4[ebp], 0
	jmp	SHORT $LN3@pfr_slot_l
$LN2@pfr_slot_l:
	mov	edx, DWORD PTR _n$4[ebp]
	add	edx, 1
	mov	DWORD PTR _n$4[ebp], edx
	mov	eax, DWORD PTR _vec$1[ebp]
	add	eax, 8
	mov	DWORD PTR _vec$1[ebp], eax
$LN3@pfr_slot_l:
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	DWORD PTR _n$4[ebp], edx
	jge	SHORT $LN1@pfr_slot_l
; Line 437
	mov	eax, DWORD PTR _x_scale$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _vec$1[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _vec$1[ebp]
	mov	DWORD PTR [ecx], eax
; Line 438
	mov	edx, DWORD PTR _y_scale$2[ebp]
	push	edx
	mov	eax, DWORD PTR _vec$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _vec$1[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 439
	jmp	SHORT $LN2@pfr_slot_l
$LN1@pfr_slot_l:
; Line 442
	mov	eax, DWORD PTR _x_scale$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$9[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _metrics$9[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 443
	mov	edx, DWORD PTR _y_scale$2[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$9[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _metrics$9[ebp]
	mov	DWORD PTR [edx+28], eax
$LN4@pfr_slot_l:
; Line 447
	lea	eax, DWORD PTR _cbox$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _outline$[ebp]
	push	ecx
	call	_FT_Outline_Get_CBox
	add	esp, 8
; Line 449
	mov	edx, DWORD PTR _cbox$10[ebp+8]
	sub	edx, DWORD PTR _cbox$10[ebp]
	mov	eax, DWORD PTR _metrics$9[ebp]
	mov	DWORD PTR [eax], edx
; Line 450
	mov	ecx, DWORD PTR _cbox$10[ebp+12]
	sub	ecx, DWORD PTR _cbox$10[ebp+4]
	mov	edx, DWORD PTR _metrics$9[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 451
	mov	eax, DWORD PTR _metrics$9[ebp]
	mov	ecx, DWORD PTR _cbox$10[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 452
	mov	edx, DWORD PTR _metrics$9[ebp]
	mov	eax, DWORD PTR _cbox$10[ebp+12]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _metrics$9[ebp]
	mov	DWORD PTR [ecx+12], eax
$Exit$27:
; Line 456
	mov	eax, DWORD PTR _error$[ebp]
; Line 457
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@pfr_slot_l
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN26@pfr_slot_l:
	DD	1
	DD	$LN25@pfr_slot_l
$LN25@pfr_slot_l:
	DD	-52					; ffffffccH
	DD	16					; 00000010H
	DD	$LN24@pfr_slot_l
$LN24@pfr_slot_l:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
_pfr_slot_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_slot$ = -4						; size = 4
_pfrslot$ = 8						; size = 4
_pfr_slot_done PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrobjs.c
; Line 306
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 307
	mov	eax, DWORD PTR _pfrslot$[ebp]
	mov	DWORD PTR _slot$[ebp], eax
; Line 310
	mov	ecx, DWORD PTR _slot$[ebp]
	add	ecx, 160				; 000000a0H
	push	ecx
	call	_pfr_glyph_done
	add	esp, 4
; Line 311
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_slot_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_loader$ = -8						; size = 4
_slot$ = -4						; size = 4
_pfrslot$ = 8						; size = 4
_pfr_slot_init PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrobjs.c
; Line 293
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 294
	mov	eax, DWORD PTR _pfrslot$[ebp]
	mov	DWORD PTR _slot$[ebp], eax
; Line 295
	mov	ecx, DWORD PTR _pfrslot$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _loader$[ebp], eax
; Line 298
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	add	edx, 160				; 000000a0H
	push	edx
	call	_pfr_glyph_init
	add	esp, 8
; Line 300
	xor	eax, eax
; Line 301
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_slot_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_value$1 = -72						; size = 4
_cpair$2 = -68						; size = 4
_p$3 = -64						; size = 4
_twobyte_adj$4 = -58					; size = 1
_twobytes$5 = -57					; size = 1
_base$6 = -56						; size = 4
_extra$7 = -52						; size = 4
_probe$8 = -48						; size = 4
_power$9 = -44						; size = 4
_size$10 = -40						; size = 4
_count$11 = -36						; size = 4
_stream$12 = -32					; size = 4
_item$13 = -28						; size = 4
_pair$ = -24						; size = 4
_code2$ = -20						; size = 4
_code1$ = -16						; size = 4
_phy_font$ = -12					; size = 4
_error$ = -8						; size = 4
_face$ = -4						; size = 4
_pfrface$ = 8						; size = 4
_glyph1$ = 12						; size = 4
_glyph2$ = 16						; size = 4
_kerning$ = 20						; size = 4
_pfr_face_get_kerning PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrobjs.c
; Line 473
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 474
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 475
	mov	DWORD PTR _error$[ebp], 0
; Line 476
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 288				; 00000120H
	mov	DWORD PTR _phy_font$[ebp], ecx
; Line 480
	mov	edx, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [edx], 0
; Line 481
	mov	eax, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	cmp	DWORD PTR _glyph1$[ebp], 0
	jbe	SHORT $LN28@pfr_face_g
; Line 484
	mov	ecx, DWORD PTR _glyph1$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _glyph1$[ebp], ecx
$LN28@pfr_face_g:
; Line 486
	cmp	DWORD PTR _glyph2$[ebp], 0
	jbe	SHORT $LN27@pfr_face_g
; Line 487
	mov	edx, DWORD PTR _glyph2$[ebp]
	sub	edx, 1
	mov	DWORD PTR _glyph2$[ebp], edx
$LN27@pfr_face_g:
; Line 491
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR _glyph1$[ebp]
	cmp	ecx, DWORD PTR [eax+120]
	ja	SHORT $LN25@pfr_face_g
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	eax, DWORD PTR _glyph2$[ebp]
	cmp	eax, DWORD PTR [edx+120]
	jbe	SHORT $LN26@pfr_face_g
$LN25@pfr_face_g:
; Line 492
	jmp	$Exit$31
$LN26@pfr_face_g:
; Line 494
	mov	ecx, DWORD PTR _glyph1$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _code1$[ebp], ecx
; Line 495
	mov	edx, DWORD PTR _glyph2$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _phy_font$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code2$[ebp], edx
; Line 496
	mov	eax, DWORD PTR _code1$[ebp]
	shl	eax, 16					; 00000010H
	movzx	ecx, WORD PTR _code2$[ebp]
	or	eax, ecx
	mov	DWORD PTR _pair$[ebp], eax
; Line 500
	mov	edx, DWORD PTR _phy_font$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	DWORD PTR _item$13[ebp], eax
; Line 501
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR _stream$12[ebp], edx
; Line 504
	jmp	SHORT $LN24@pfr_face_g
$LN23@pfr_face_g:
	mov	eax, DWORD PTR _item$13[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _item$13[ebp], ecx
$LN24@pfr_face_g:
	cmp	DWORD PTR _item$13[ebp], 0
	je	SHORT $LN22@pfr_face_g
; Line 506
	mov	edx, DWORD PTR _item$13[ebp]
	mov	eax, DWORD PTR _pair$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jb	SHORT $LN21@pfr_face_g
	mov	ecx, DWORD PTR _item$13[ebp]
	mov	edx, DWORD PTR _pair$[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	ja	SHORT $LN21@pfr_face_g
; Line 507
	jmp	SHORT $FoundPair$32
$LN21@pfr_face_g:
; Line 508
	jmp	SHORT $LN23@pfr_face_g
$LN22@pfr_face_g:
; Line 509
	jmp	$Exit$31
$FoundPair$32:
; Line 513
	mov	eax, DWORD PTR _item$13[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _stream$12[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN19@pfr_face_g
	mov	eax, DWORD PTR _item$13[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	mov	edx, DWORD PTR _item$13[ebp]
	imul	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _stream$12[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@pfr_face_g
$LN19@pfr_face_g:
; Line 514
	jmp	$Exit$31
$LN20@pfr_face_g:
; Line 517
	mov	ecx, DWORD PTR _item$13[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	mov	DWORD PTR _count$11[ebp], edx
; Line 518
	mov	eax, DWORD PTR _item$13[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _size$10[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _count$11[ebp]
	push	edx
	call	_FT_MSB
	add	esp, 4
	mov	edx, 1
	mov	ecx, eax
	shl	edx, cl
	mov	DWORD PTR _power$9[ebp], edx
; Line 520
	mov	eax, DWORD PTR _power$9[ebp]
	imul	eax, DWORD PTR _size$10[ebp]
	mov	DWORD PTR _probe$8[ebp], eax
; Line 521
	mov	ecx, DWORD PTR _count$11[ebp]
	sub	ecx, DWORD PTR _power$9[ebp]
	mov	DWORD PTR _extra$7[ebp], ecx
; Line 522
	mov	edx, DWORD PTR _stream$12[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _base$6[ebp], eax
; Line 523
	mov	ecx, DWORD PTR _item$13[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	and	edx, 1
	mov	BYTE PTR _twobytes$5[ebp], dl
; Line 524
	mov	eax, DWORD PTR _item$13[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	and	ecx, 2
	mov	BYTE PTR _twobyte_adj$4[ebp], cl
; Line 529
	cmp	DWORD PTR _extra$7[ebp], 0
	jbe	$LN11@pfr_face_g
; Line 531
	mov	edx, DWORD PTR _extra$7[ebp]
	imul	edx, DWORD PTR _size$10[ebp]
	add	edx, DWORD PTR _base$6[ebp]
	mov	DWORD PTR _p$3[ebp], edx
; Line 533
	movzx	eax, BYTE PTR _twobytes$5[ebp]
	test	eax, eax
	je	SHORT $LN17@pfr_face_g
; Line 534
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$3[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _cpair$2[ebp], edx
; Line 535
	jmp	SHORT $LN16@pfr_face_g
$LN17@pfr_face_g:
; Line 536
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, 2
	mov	DWORD PTR _p$3[ebp], edx
	mov	eax, 1
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	imul	edx, ecx, -1
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	DWORD PTR _cpair$2[ebp], eax
$LN16@pfr_face_g:
; Line 538
	mov	eax, DWORD PTR _cpair$2[ebp]
	cmp	eax, DWORD PTR _pair$[ebp]
	jne	SHORT $LN15@pfr_face_g
; Line 539
	jmp	$Found$33
$LN15@pfr_face_g:
; Line 541
	mov	ecx, DWORD PTR _cpair$2[ebp]
	cmp	ecx, DWORD PTR _pair$[ebp]
	jae	SHORT $LN11@pfr_face_g
; Line 543
	movzx	edx, BYTE PTR _twobyte_adj$4[ebp]
	test	edx, edx
	je	SHORT $LN13@pfr_face_g
; Line 544
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 2
	mov	DWORD PTR _p$3[ebp], eax
; Line 545
	jmp	SHORT $LN12@pfr_face_g
$LN13@pfr_face_g:
; Line 546
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$3[ebp], ecx
$LN12@pfr_face_g:
; Line 547
	mov	edx, DWORD PTR _p$3[ebp]
	mov	DWORD PTR _base$6[ebp], edx
$LN11@pfr_face_g:
; Line 551
	mov	eax, DWORD PTR _probe$8[ebp]
	cmp	eax, DWORD PTR _size$10[ebp]
	jbe	$LN10@pfr_face_g
; Line 553
	mov	ecx, DWORD PTR _probe$8[ebp]
	shr	ecx, 1
	mov	DWORD PTR _probe$8[ebp], ecx
; Line 554
	mov	edx, DWORD PTR _base$6[ebp]
	add	edx, DWORD PTR _probe$8[ebp]
	mov	DWORD PTR _p$3[ebp], edx
; Line 556
	movzx	eax, BYTE PTR _twobytes$5[ebp]
	test	eax, eax
	je	SHORT $LN9@pfr_face_g
; Line 557
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$3[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _cpair$2[ebp], edx
; Line 558
	jmp	SHORT $LN8@pfr_face_g
$LN9@pfr_face_g:
; Line 559
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, 2
	mov	DWORD PTR _p$3[ebp], edx
	mov	eax, 1
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 16					; 00000010H
	mov	ecx, 1
	imul	edx, ecx, -1
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	DWORD PTR _cpair$2[ebp], eax
$LN8@pfr_face_g:
; Line 561
	mov	eax, DWORD PTR _cpair$2[ebp]
	cmp	eax, DWORD PTR _pair$[ebp]
	jne	SHORT $LN7@pfr_face_g
; Line 562
	jmp	$Found$33
$LN7@pfr_face_g:
; Line 564
	mov	ecx, DWORD PTR _cpair$2[ebp]
	cmp	ecx, DWORD PTR _pair$[ebp]
	jae	SHORT $LN6@pfr_face_g
; Line 565
	mov	edx, DWORD PTR _base$6[ebp]
	add	edx, DWORD PTR _probe$8[ebp]
	mov	DWORD PTR _base$6[ebp], edx
$LN6@pfr_face_g:
; Line 566
	jmp	$LN11@pfr_face_g
$LN10@pfr_face_g:
; Line 568
	mov	eax, DWORD PTR _base$6[ebp]
	mov	DWORD PTR _p$3[ebp], eax
; Line 570
	movzx	ecx, BYTE PTR _twobytes$5[ebp]
	test	ecx, ecx
	je	SHORT $LN5@pfr_face_g
; Line 571
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, 4
	mov	DWORD PTR _p$3[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _cpair$2[ebp], eax
; Line 572
	jmp	SHORT $LN4@pfr_face_g
$LN5@pfr_face_g:
; Line 573
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 2
	mov	DWORD PTR _p$3[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, -2
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	imul	eax, edx, -1
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	or	ecx, eax
	mov	DWORD PTR _cpair$2[ebp], ecx
$LN4@pfr_face_g:
; Line 575
	mov	ecx, DWORD PTR _cpair$2[ebp]
	cmp	ecx, DWORD PTR _pair$[ebp]
	jne	SHORT $LN3@pfr_face_g
$Found$33:
; Line 581
	movzx	edx, BYTE PTR _twobyte_adj$4[ebp]
	test	edx, edx
	je	SHORT $LN2@pfr_face_g
; Line 582
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	or	eax, ecx
	movsx	edx, ax
	mov	DWORD PTR _value$1[ebp], edx
; Line 583
	jmp	SHORT $LN1@pfr_face_g
$LN2@pfr_face_g:
; Line 584
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _value$1[ebp], eax
$LN1@pfr_face_g:
; Line 586
	mov	ecx, DWORD PTR _item$13[ebp]
	movsx	edx, WORD PTR [ecx+6]
	add	edx, DWORD PTR _value$1[ebp]
	mov	eax, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@pfr_face_g:
; Line 590
	mov	ecx, DWORD PTR _stream$12[ebp]
	push	ecx
	call	_FT_Stream_ExitFrame
	add	esp, 4
$Exit$31:
; Line 594
	mov	eax, DWORD PTR _error$[ebp]
; Line 595
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_face_get_kerning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_face$ = -4						; size = 4
_pfrface$ = 8						; size = 4
_pfr_face_done PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrobjs.c
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 46
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 50
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN4@pfr_face_d
; Line 51
	jmp	SHORT $LN5@pfr_face_d
$LN4@pfr_face_d:
; Line 53
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _memory$[ebp], eax
; Line 56
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 57
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 60
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	call	_pfr_phy_font_done
	add	esp, 8
$LN3@pfr_face_d:
; Line 63
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [eax+32], 0
	xor	ecx, ecx
	jne	SHORT $LN3@pfr_face_d
$LN5@pfr_face_d:
; Line 64
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfr_face_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv140 = -89						; size = 1
_charmap$1 = -84					; size = 12
_gchar$2 = -68						; size = 4
_count$3 = -64						; size = 4
_max$4 = -60						; size = 4
_memory$5 = -56						; size = 4
_strike$6 = -52						; size = 4
_size$7 = -48						; size = 4
_count$8 = -44						; size = 4
_n$9 = -40						; size = 4
_nn$10 = -36						; size = 4
_phy_font$11 = -32					; size = 4
_num_faces$12 = -24					; size = 4
_error$ = -12						; size = 4
_face$ = -4						; size = 4
_stream$ = 8						; size = 4
_pfrface$ = 12						; size = 4
_face_index$ = 16					; size = 4
_num_params$ = 20					; size = 4
_params$ = 24						; size = 4
_pfr_face_init PROC
; File d:\mozilla\modules\freetype2\src\pfr\pfrobjs.c
; Line 73
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 74
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 77
	mov	ecx, DWORD PTR _num_params$[ebp]
	mov	DWORD PTR _num_params$[ebp], ecx
; Line 78
	mov	edx, DWORD PTR _params$[ebp]
	mov	DWORD PTR _params$[ebp], edx
$LN41@pfr_face_i:
; Line 81
	mov	eax, 4
	imul	ecx, eax, 66
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN40@pfr_face_i
	push	OFFSET $SG9382
	call	_FT_Message
	add	esp, 4
$LN40@pfr_face_i:
	xor	edx, edx
	jne	SHORT $LN41@pfr_face_i
; Line 84
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 132				; 00000084H
	push	ecx
	call	_pfr_header_load
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 85
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN37@pfr_face_i
; Line 86
	jmp	$Exit$51
$LN37@pfr_face_i:
; Line 88
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 132				; 00000084H
	push	edx
	call	_pfr_header_check
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN36@pfr_face_i
$LN35@pfr_face_i:
; Line 90
	mov	ecx, 4
	imul	edx, ecx, 66
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN34@pfr_face_i
	push	OFFSET $SG9390
	call	_FT_Message
	add	esp, 4
$LN34@pfr_face_i:
	xor	eax, eax
	jne	SHORT $LN35@pfr_face_i
; Line 91
	push	OFFSET $SG9391
	push	91					; 0000005bH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 92
	jmp	$Exit$51
$LN36@pfr_face_i:
; Line 102
	lea	ecx, DWORD PTR _num_faces$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+152]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_pfr_log_font_count
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 103
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@pfr_face_i
; Line 104
	jmp	$Exit$51
$LN31@pfr_face_i:
; Line 106
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	eax, DWORD PTR _num_faces$12[ebp]
	mov	DWORD PTR [edx], eax
; Line 109
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN30@pfr_face_i
; Line 110
	jmp	$Exit$51
$LN30@pfr_face_i:
; Line 112
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	edx, DWORD PTR _face_index$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN29@pfr_face_i
; Line 114
	push	OFFSET $SG9396
	call	_FT_Message
	add	esp, 4
; Line 115
	push	OFFSET $SG9397
	push	115					; 00000073H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 116
	jmp	$Exit$51
$LN29@pfr_face_i:
; Line 123
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+204], 0
	je	SHORT $LN44@pfr_face_i
	mov	BYTE PTR tv140[ebp], 1
	jmp	SHORT $LN45@pfr_face_i
$LN44@pfr_face_i:
	mov	BYTE PTR tv140[ebp], 0
$LN45@pfr_face_i:
	movzx	ecx, BYTE PTR tv140[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+152]
	push	eax
	mov	ecx, DWORD PTR _face_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	call	_pfr_log_font_load
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 124
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@pfr_face_i
; Line 125
	jmp	$Exit$51
$LN28@pfr_face_i:
; Line 130
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 288				; 00000120H
	push	eax
	call	_pfr_phy_font_load
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 131
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN27@pfr_face_i
; Line 132
	jmp	$Exit$51
$LN27@pfr_face_i:
; Line 136
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 288				; 00000120H
	mov	DWORD PTR _phy_font$11[ebp], ecx
; Line 139
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	eax, DWORD PTR _face_index$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 140
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	mov	edx, DWORD PTR [ecx+120]
	add	edx, 1
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 142
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 1
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 150
	mov	DWORD PTR _nn$10[ebp], 0
	jmp	SHORT $LN26@pfr_face_i
$LN25@pfr_face_i:
	mov	ecx, DWORD PTR _nn$10[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$10[ebp], ecx
$LN26@pfr_face_i:
	mov	edx, DWORD PTR _phy_font$11[ebp]
	mov	eax, DWORD PTR _nn$10[ebp]
	cmp	eax, DWORD PTR [edx+120]
	jae	SHORT $LN24@pfr_face_i
; Line 151
	mov	ecx, DWORD PTR _nn$10[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _phy_font$11[ebp]
	mov	eax, DWORD PTR [edx+128]
	cmp	DWORD PTR [eax+ecx+12], 0
	je	SHORT $LN23@pfr_face_i
; Line 152
	jmp	SHORT $LN24@pfr_face_i
$LN23@pfr_face_i:
; Line 154
	jmp	SHORT $LN25@pfr_face_i
$LN24@pfr_face_i:
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	mov	edx, DWORD PTR _nn$10[ebp]
	cmp	edx, DWORD PTR [ecx+120]
	jne	SHORT $LN22@pfr_face_i
; Line 156
	mov	eax, DWORD PTR _phy_font$11[ebp]
	cmp	DWORD PTR [eax+92], 0
	jbe	SHORT $LN21@pfr_face_i
; Line 157
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 158
	jmp	SHORT $LN22@pfr_face_i
$LN21@pfr_face_i:
; Line 160
	push	OFFSET $SG9410
	call	_FT_Message
	add	esp, 4
; Line 161
	push	OFFSET $SG9411
	push	161					; 000000a1H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 162
	jmp	$Exit$51
$LN22@pfr_face_i:
; Line 167
	mov	edx, DWORD PTR _phy_font$11[ebp]
	mov	eax, DWORD PTR [edx+36]
	and	eax, 4
	jne	SHORT $LN19@pfr_face_i
; Line 168
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 4
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN19@pfr_face_i:
; Line 170
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	mov	edx, DWORD PTR [ecx+36]
	and	edx, 1
	je	SHORT $LN18@pfr_face_i
; Line 171
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 172
	jmp	SHORT $LN17@pfr_face_i
$LN18@pfr_face_i:
; Line 173
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN17@pfr_face_i:
; Line 175
	mov	eax, DWORD PTR _phy_font$11[ebp]
	cmp	DWORD PTR [eax+92], 0
	jbe	SHORT $LN16@pfr_face_i
; Line 176
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 2
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN16@pfr_face_i:
; Line 178
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	cmp	DWORD PTR [ecx+132], 0
	jbe	SHORT $LN15@pfr_face_i
; Line 179
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN15@pfr_face_i:
; Line 185
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	eax, DWORD PTR _phy_font$11[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR [edx+20], ecx
; Line 186
	mov	edx, DWORD PTR _pfrface$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jne	SHORT $LN14@pfr_face_i
; Line 187
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+20], edx
$LN14@pfr_face_i:
; Line 192
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+24], edx
; Line 194
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 195
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 197
	mov	edx, DWORD PTR _phy_font$11[ebp]
	add	edx, 20					; 00000014H
	mov	eax, DWORD PTR _pfrface$[ebp]
	add	eax, 52					; 00000034H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 198
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	mov	dx, WORD PTR [ecx+12]
	mov	WORD PTR [eax+68], dx
; Line 199
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	mov	dx, WORD PTR [ecx+32]
	mov	WORD PTR [eax+70], dx
; Line 200
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	mov	dx, WORD PTR [ecx+24]
	mov	WORD PTR [eax+72], dx
; Line 202
	mov	eax, DWORD PTR _pfrface$[ebp]
	movzx	ecx, WORD PTR [eax+68]
	imul	eax, ecx, 12
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	WORD PTR [edx+74], ax
; Line 203
	mov	eax, DWORD PTR _pfrface$[ebp]
	movsx	ecx, WORD PTR [eax+74]
	mov	edx, DWORD PTR _pfrface$[ebp]
	movsx	eax, WORD PTR [edx+70]
	mov	edx, DWORD PTR _pfrface$[ebp]
	movsx	edx, WORD PTR [edx+72]
	sub	eax, edx
	cmp	ecx, eax
	jge	SHORT $LN13@pfr_face_i
; Line 204
	mov	eax, DWORD PTR _pfrface$[ebp]
	movsx	ecx, WORD PTR [eax+70]
	mov	edx, DWORD PTR _pfrface$[ebp]
	movsx	eax, WORD PTR [edx+72]
	sub	ecx, eax
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	WORD PTR [edx+74], cx
$LN13@pfr_face_i:
; Line 206
	mov	eax, DWORD PTR _phy_font$11[ebp]
	cmp	DWORD PTR [eax+92], 0
	jbe	$LN12@pfr_face_i
; Line 208
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR _count$8[ebp], edx
; Line 211
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _memory$5[ebp], edx
; Line 214
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _count$8[ebp]
	push	ecx
	push	0
	push	16					; 00000010H
	mov	edx, DWORD PTR _memory$5[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [ecx+32], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@pfr_face_i
; Line 215
	jmp	$Exit$51
$LN11@pfr_face_i:
; Line 217
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _size$7[ebp], eax
; Line 218
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _strike$6[ebp], edx
; Line 219
	mov	DWORD PTR _n$9[ebp], 0
	jmp	SHORT $LN10@pfr_face_i
$LN9@pfr_face_i:
	mov	eax, DWORD PTR _n$9[ebp]
	add	eax, 1
	mov	DWORD PTR _n$9[ebp], eax
	mov	ecx, DWORD PTR _size$7[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _size$7[ebp], ecx
	mov	edx, DWORD PTR _strike$6[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR _strike$6[ebp], edx
$LN10@pfr_face_i:
	mov	eax, DWORD PTR _n$9[ebp]
	cmp	eax, DWORD PTR _count$8[ebp]
	jae	SHORT $LN8@pfr_face_i
; Line 221
	mov	ecx, DWORD PTR _size$7[ebp]
	mov	edx, DWORD PTR _strike$6[ebp]
	mov	ax, WORD PTR [edx+4]
	mov	WORD PTR [ecx], ax
; Line 222
	mov	ecx, DWORD PTR _size$7[ebp]
	mov	edx, DWORD PTR _strike$6[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx+2], ax
; Line 223
	mov	ecx, DWORD PTR _strike$6[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 6
	mov	eax, DWORD PTR _size$7[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 224
	mov	ecx, DWORD PTR _strike$6[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 6
	mov	eax, DWORD PTR _size$7[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 225
	mov	ecx, DWORD PTR _strike$6[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 6
	mov	eax, DWORD PTR _size$7[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 226
	jmp	SHORT $LN9@pfr_face_i
$LN8@pfr_face_i:
; Line 227
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	edx, DWORD PTR _count$8[ebp]
	mov	DWORD PTR [ecx+28], edx
$LN12@pfr_face_i:
; Line 231
	mov	eax, DWORD PTR _phy_font$11[ebp]
	mov	ecx, DWORD PTR [eax+36]
	and	ecx, 4
	jne	SHORT $LN7@pfr_face_i
; Line 232
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	eax, DWORD PTR _phy_font$11[ebp]
	mov	cx, WORD PTR [eax+40]
	mov	WORD PTR [edx+76], cx
; Line 233
	jmp	SHORT $LN6@pfr_face_i
$LN7@pfr_face_i:
; Line 235
	mov	DWORD PTR _max$4[ebp], 0
; Line 236
	mov	edx, DWORD PTR _phy_font$11[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR _count$3[ebp], eax
; Line 237
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR _gchar$2[ebp], edx
; Line 240
	jmp	SHORT $LN5@pfr_face_i
$LN4@pfr_face_i:
	mov	eax, DWORD PTR _count$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$3[ebp], eax
	mov	ecx, DWORD PTR _gchar$2[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _gchar$2[ebp], ecx
$LN5@pfr_face_i:
	cmp	DWORD PTR _count$3[ebp], 0
	jbe	SHORT $LN3@pfr_face_i
; Line 242
	mov	edx, DWORD PTR _gchar$2[ebp]
	mov	eax, DWORD PTR _max$4[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $LN2@pfr_face_i
; Line 243
	mov	ecx, DWORD PTR _gchar$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _max$4[ebp], edx
$LN2@pfr_face_i:
; Line 244
	jmp	SHORT $LN4@pfr_face_i
$LN3@pfr_face_i:
; Line 246
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	cx, WORD PTR _max$4[ebp]
	mov	WORD PTR [eax+76], cx
$LN6@pfr_face_i:
; Line 249
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	cx, WORD PTR [eax+74]
	mov	WORD PTR [edx+78], cx
; Line 251
	mov	edx, DWORD PTR _pfrface$[ebp]
	movzx	eax, WORD PTR [edx+68]
	neg	eax
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	WORD PTR [edx+80], ax
; Line 252
	mov	eax, DWORD PTR _pfrface$[ebp]
	movzx	eax, WORD PTR [eax+68]
	cdq
	mov	ecx, 30					; 0000001eH
	idiv	ecx
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	WORD PTR [edx+82], ax
; Line 259
	mov	eax, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR _charmap$1[ebp], eax
; Line 260
	mov	ecx, 3
	mov	WORD PTR _charmap$1[ebp+8], cx
; Line 261
	mov	edx, 1
	mov	WORD PTR _charmap$1[ebp+10], dx
; Line 262
	mov	DWORD PTR _charmap$1[ebp+4], 1970170211	; 756e6963H
; Line 264
	push	0
	lea	eax, DWORD PTR _charmap$1[ebp]
	push	eax
	push	0
	push	OFFSET _pfr_cmap_class_rec
	call	_FT_CMap_New
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 274
	mov	ecx, DWORD PTR _phy_font$11[ebp]
	cmp	DWORD PTR [ecx+132], 0
	je	SHORT $Exit$51
; Line 275
	mov	edx, DWORD PTR _pfrface$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _pfrface$[ebp]
	mov	DWORD PTR [ecx+8], eax
$Exit$51:
; Line 279
	mov	eax, DWORD PTR _error$[ebp]
; Line 280
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN50@pfr_face_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN50@pfr_face_i:
	DD	3
	DD	$LN49@pfr_face_i
$LN49@pfr_face_i:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN46@pfr_face_i
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN47@pfr_face_i
	DD	-84					; ffffffacH
	DD	12					; 0000000cH
	DD	$LN48@pfr_face_i
$LN48@pfr_face_i:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN47@pfr_face_i:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN46@pfr_face_i:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pfr_face_init ENDP
_TEXT	ENDS
END
