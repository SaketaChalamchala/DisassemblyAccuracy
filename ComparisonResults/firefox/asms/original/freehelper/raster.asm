; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\raster\raster.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_ft_raster1_renderer_class
PUBLIC	_ft_raster5_renderer_class
PUBLIC	_ft_standard_raster
CONST	SEGMENT
_ft_raster1_renderer_class DD 02H
	DD	040H
	DD	FLAT:$SG8475
	DD	010000H
	DD	020000H
	DD	00H
	DD	FLAT:_ft_raster1_init
	DD	00H
	DD	00H
	DD	06f75746cH
	DD	FLAT:_ft_raster1_render
	DD	FLAT:_ft_raster1_transform
	DD	FLAT:_ft_raster1_get_cbox
	DD	FLAT:_ft_raster1_set_mode
	DD	FLAT:_ft_standard_raster
_ft_raster5_renderer_class DD 02H
	DD	040H
	DD	FLAT:$SG8485
	DD	010000H
	DD	020000H
	DD	00H
	DD	FLAT:_ft_raster1_init
	DD	00H
	DD	00H
	DD	06f75746cH
	DD	FLAT:_ft_raster1_render
	DD	FLAT:_ft_raster1_transform
	DD	FLAT:_ft_raster1_get_cbox
	DD	FLAT:_ft_raster1_set_mode
	DD	FLAT:_ft_standard_raster
_ft_standard_raster DD 06f75746cH
	DD	FLAT:_ft_black_new
	DD	FLAT:_ft_black_reset
	DD	FLAT:_ft_black_set_mode
	DD	FLAT:_ft_black_render
	DD	FLAT:_ft_black_done
CONST	ENDS
_DATA	SEGMENT
$SG8249	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG8251	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG8256	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG8258	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG8260	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG8262	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG8266	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG7253	DB	'true', 00H
	ORG $+3
$SG7254	DB	'false', 00H
	ORG $+2
$SG7255	DB	'Set_High_Precision(%s)', 0aH, 00H
$SG7270	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG7283	DB	'New ascending profile = %p', 0aH, 00H
$SG7290	DB	'New descending profile = %p', 0aH, 00H
	ORG $+3
$SG7292	DB	'New_Profile: invalid profile direction', 0aH, 00H
$SG7293	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG7304	DB	'End_Profile: negative height encountered', 0aH, 00H
	ORG $+2
$SG7305	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG7312	DB	'Ending profile %p, start = %ld, height = %ld', 0aH, 00H
	ORG $+2
$SG7325	DB	'overflow in End_Profile', 0aH, 00H
	ORG $+3
$SG7326	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG7346	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG8404	DB	'd:\mozilla\modules\freetype2\src\raster\ftrend1.c', 00H
	ORG $+2
$SG8437	DB	'd:\mozilla\modules\freetype2\src\raster\ftrend1.c', 00H
	ORG $+2
$SG8441	DB	'd:\mozilla\modules\freetype2\src\raster\ftrend1.c', 00H
	ORG $+2
$SG8444	DB	'd:\mozilla\modules\freetype2\src\raster\ftrend1.c', 00H
	ORG $+2
$SG8450	DB	'd:\mozilla\modules\freetype2\src\raster\ftrend1.c', 00H
	ORG $+2
$SG7438	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG8475	DB	'raster1', 00H
$SG8485	DB	'raster5', 00H
$SG7502	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG7775	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG8089	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG8157	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
	ORG $+1
$SG8184	DB	'd:\mozilla\modules\freetype2\src\raster\ftraster.c', 00H
_DATA	ENDS
EXTRN	_memset:PROC
EXTRN	_FT_MulDiv:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_FT_MulDiv_No_Round:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_FT_Outline_Get_CBox:PROC
EXTRN	_FT_Outline_Translate:PROC
EXTRN	_FT_Outline_Transform:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_params$ = -116						; size = 48
_memory$ = -64						; size = 4
_bitmap$ = -60						; size = 4
_pitch$ = -56						; size = 4
_height$ = -52						; size = 4
_width$ = -48						; size = 4
_cbox$ = -40						; size = 16
_outline$ = -20						; size = 4
_error$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_render$ = 8						; size = 4
_slot$ = 12						; size = 4
_mode$ = 16						; size = 4
_origin$ = 20						; size = 4
_ft_raster1_render PROC
; File d:\mozilla\modules\freetype2\src\raster\ftrend1.c
; Line 104
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 116
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR _render$[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN17@ft_raster1
; Line 118
	push	OFFSET $SG8437
	push	118					; 00000076H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 119
	jmp	$Exit$25
$LN17@ft_raster1:
; Line 124
	cmp	DWORD PTR _mode$[ebp], 2
	je	SHORT $LN16@ft_raster1
; Line 127
	mov	eax, DWORD PTR _render$[ebp]
	cmp	DWORD PTR [eax+12], OFFSET _ft_raster1_renderer_class
	jne	SHORT $LN15@ft_raster1
; Line 128
	push	OFFSET $SG8441
	push	128					; 00000080H
	push	19					; 00000013H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 19					; 00000013H
	jmp	$LN18@ft_raster1
$LN15@ft_raster1:
; Line 130
	jmp	SHORT $LN14@ft_raster1
$LN16@ft_raster1:
; Line 133
	mov	ecx, DWORD PTR _render$[ebp]
	cmp	DWORD PTR [ecx+12], OFFSET _ft_raster5_renderer_class
	jne	SHORT $LN14@ft_raster1
; Line 134
	push	OFFSET $SG8444
	push	134					; 00000086H
	push	19					; 00000013H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 19					; 00000013H
	jmp	$LN18@ft_raster1
$LN14@ft_raster1:
; Line 156
	mov	edx, DWORD PTR _slot$[ebp]
	add	edx, 108				; 0000006cH
	mov	DWORD PTR _outline$[ebp], edx
; Line 159
	cmp	DWORD PTR _origin$[ebp], 0
	je	SHORT $LN12@ft_raster1
; Line 160
	mov	eax, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _outline$[ebp]
	push	ecx
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
$LN12@ft_raster1:
; Line 163
	lea	edx, DWORD PTR _cbox$[ebp]
	push	edx
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	call	_FT_Outline_Get_CBox
	add	esp, 8
; Line 167
	mov	ecx, DWORD PTR _cbox$[ebp]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _cbox$[ebp], ecx
; Line 168
	mov	edx, DWORD PTR _cbox$[ebp+4]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _cbox$[ebp+4], edx
; Line 169
	mov	eax, DWORD PTR _cbox$[ebp+8]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _cbox$[ebp+8], eax
; Line 170
	mov	ecx, DWORD PTR _cbox$[ebp+12]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _cbox$[ebp+12], ecx
; Line 178
	mov	edx, DWORD PTR _cbox$[ebp+8]
	sub	edx, DWORD PTR _cbox$[ebp]
	sar	edx, 6
	mov	DWORD PTR _width$[ebp], edx
; Line 179
	mov	eax, DWORD PTR _cbox$[ebp+12]
	sub	eax, DWORD PTR _cbox$[ebp+4]
	sar	eax, 6
	mov	DWORD PTR _height$[ebp], eax
; Line 181
	cmp	DWORD PTR _width$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN10@ft_raster1
	cmp	DWORD PTR _height$[ebp], 65535		; 0000ffffH
	jbe	SHORT $LN11@ft_raster1
$LN10@ft_raster1:
; Line 183
	push	OFFSET $SG8450
	push	183					; 000000b7H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 184
	jmp	$Exit$25
$LN11@ft_raster1:
; Line 187
	mov	ecx, DWORD PTR _slot$[ebp]
	add	ecx, 76					; 0000004cH
	mov	DWORD PTR _bitmap$[ebp], ecx
; Line 188
	mov	edx, DWORD PTR _render$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _memory$[ebp], eax
; Line 191
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 1
	je	SHORT $LN9@ft_raster1
$LN8@ft_raster1:
; Line 193
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [ecx+12], 0
	xor	edx, edx
	jne	SHORT $LN8@ft_raster1
; Line 194
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR [ecx+4], edx
$LN9@ft_raster1:
; Line 198
	mov	edx, DWORD PTR _mode$[ebp]
	and	edx, 2
	jne	SHORT $LN5@ft_raster1
; Line 201
	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _pitch$[ebp], eax
; Line 202
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	BYTE PTR [ecx+18], 2
; Line 203
	mov	edx, 256				; 00000100H
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	WORD PTR [eax+16], dx
; Line 205
	jmp	SHORT $LN4@ft_raster1
$LN5@ft_raster1:
; Line 207
	mov	ecx, DWORD PTR _width$[ebp]
	add	ecx, 15					; 0000000fH
	shr	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR _pitch$[ebp], ecx
; Line 208
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	BYTE PTR [edx+18], 1
$LN4@ft_raster1:
; Line 211
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 212
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR [edx], eax
; Line 213
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 215
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pitch$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@ft_raster1
; Line 216
	jmp	$Exit$25
$LN3@ft_raster1:
; Line 218
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 1
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	DWORD PTR [eax+4], ecx
; Line 221
	mov	ecx, DWORD PTR _cbox$[ebp+4]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _cbox$[ebp]
	neg	edx
	push	edx
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
; Line 224
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR _params$[ebp], ecx
; Line 225
	mov	edx, DWORD PTR _outline$[ebp]
	mov	DWORD PTR _params$[ebp+4], edx
; Line 226
	mov	DWORD PTR _params$[ebp+8], 0
; Line 228
	mov	eax, DWORD PTR _bitmap$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	cmp	ecx, 2
	jne	SHORT $LN2@ft_raster1
; Line 229
	mov	edx, DWORD PTR _params$[ebp+8]
	or	edx, 1
	mov	DWORD PTR _params$[ebp+8], edx
$LN2@ft_raster1:
; Line 232
	mov	esi, esp
	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _render$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _render$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 234
	mov	edx, DWORD PTR _cbox$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cbox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outline$[ebp]
	push	ecx
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
; Line 236
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ft_raster1
; Line 237
	jmp	SHORT $Exit$25
$LN1@ft_raster1:
; Line 239
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+72], 1651078259		; 62697473H
; Line 240
	mov	eax, DWORD PTR _cbox$[ebp]
	sar	eax, 6
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+100], eax
; Line 241
	mov	edx, DWORD PTR _cbox$[ebp+12]
	sar	edx, 6
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+104], edx
$Exit$25:
; Line 244
	mov	eax, DWORD PTR _error$[ebp]
$LN18@ft_raster1:
; Line 245
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@ft_raster1
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN24@ft_raster1:
	DD	3
	DD	$LN23@ft_raster1
$LN23@ft_raster1:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN20@ft_raster1
	DD	-40					; ffffffd8H
	DD	16					; 00000010H
	DD	$LN21@ft_raster1
	DD	-116					; ffffff8cH
	DD	48					; 00000030H
	DD	$LN22@ft_raster1
$LN22@ft_raster1:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN21@ft_raster1:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
$LN20@ft_raster1:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_raster1_render ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_render$ = 8						; size = 4
_slot$ = 12						; size = 4
_cbox$ = 16						; size = 4
_ft_raster1_get_cbox PROC
; File d:\mozilla\modules\freetype2\src\raster\ftrend1.c
; Line 90
	push	ebp
	mov	ebp, esp
; Line 91
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _cbox$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 93
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR _render$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	cmp	eax, DWORD PTR [edx+16]
	jne	SHORT $LN2@ft_raster1
; Line 94
	mov	ecx, DWORD PTR _cbox$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_FT_Outline_Get_CBox
	add	esp, 8
$LN2@ft_raster1:
; Line 95
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_raster1_get_cbox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_render$ = 8						; size = 4
_slot$ = 12						; size = 4
_matrix$ = 16						; size = 4
_delta$ = 20						; size = 4
_ft_raster1_transform PROC
; File d:\mozilla\modules\freetype2\src\raster\ftrend1.c
; Line 64
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 65
	mov	DWORD PTR _error$[ebp], 0
; Line 68
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR _render$[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN3@ft_raster1
; Line 70
	push	OFFSET $SG8404
	push	70					; 00000046H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 71
	jmp	SHORT $Exit$6
$LN3@ft_raster1:
; Line 74
	cmp	DWORD PTR _matrix$[ebp], 0
	je	SHORT $LN2@ft_raster1
; Line 75
	mov	eax, DWORD PTR _matrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_FT_Outline_Transform
	add	esp, 8
$LN2@ft_raster1:
; Line 77
	cmp	DWORD PTR _delta$[ebp], 0
	je	SHORT $Exit$6
; Line 78
	mov	edx, DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
$Exit$6:
; Line 81
	mov	eax, DWORD PTR _error$[ebp]
; Line 82
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_raster1_transform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_render$ = 8						; size = 4
_mode_tag$ = 12						; size = 4
_data$ = 16						; size = 4
_ft_raster1_set_mode PROC
; File d:\mozilla\modules\freetype2\src\raster\ftrend1.c
; Line 50
	push	ebp
	mov	ebp, esp
	push	esi
; Line 54
	mov	esi, esp
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode_tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _render$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _render$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 55
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_raster1_set_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = -4						; size = 4
_render$ = 8						; size = 4
_ft_raster1_init PROC
; File d:\mozilla\modules\freetype2\src\raster\ftrend1.c
; Line 33
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 34
	mov	eax, DWORD PTR _render$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _library$[ebp], ecx
; Line 39
	mov	esi, esp
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx+168]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	mov	eax, DWORD PTR _render$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _render$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 41
	xor	eax, eax
; Line 42
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_raster1_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv190 = -16						; size = 4
_worker$ = -12						; size = 4
_target_map$ = -8					; size = 4
_outline$ = -4						; size = 4
_raster$ = 8						; size = 4
_params$ = 12						; size = 4
_ft_black_render PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 3577
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3578
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _outline$[ebp], ecx
; Line 3579
	mov	edx, DWORD PTR _params$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _target_map$[ebp], eax
; Line 3583
	cmp	DWORD PTR _raster$[ebp], 0
	je	SHORT $LN12@ft_black_r
	mov	ecx, DWORD PTR _raster$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN12@ft_black_r
	mov	edx, DWORD PTR _raster$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN13@ft_black_r
$LN12@ft_black_r:
; Line 3584
	push	OFFSET $SG8249
	push	3584					; 00000e00H
	push	96					; 00000060H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 96					; 00000060H
	jmp	$LN14@ft_black_r
$LN13@ft_black_r:
; Line 3586
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN11@ft_black_r
; Line 3587
	push	OFFSET $SG8251
	push	3587					; 00000e03H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN14@ft_black_r
$LN11@ft_black_r:
; Line 3590
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN9@ft_black_r
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	test	eax, eax
	jg	SHORT $LN10@ft_black_r
$LN9@ft_black_r:
; Line 3591
	xor	eax, eax
	jmp	$LN14@ft_black_r
$LN10@ft_black_r:
; Line 3593
	mov	ecx, DWORD PTR _outline$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN7@ft_black_r
	mov	edx, DWORD PTR _outline$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN8@ft_black_r
$LN7@ft_black_r:
; Line 3594
	push	OFFSET $SG8256
	push	3594					; 00000e0aH
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN14@ft_black_r
$LN8@ft_black_r:
; Line 3597
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [edx+12]
	movsx	eax, WORD PTR [edx+eax*2-2]
	add	eax, 1
	cmp	ecx, eax
	je	SHORT $LN6@ft_black_r
; Line 3598
	push	OFFSET $SG8258
	push	3598					; 00000e0eH
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN14@ft_black_r
$LN6@ft_black_r:
; Line 3600
	mov	ecx, DWORD PTR _raster$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _worker$[ebp], edx
; Line 3603
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	je	SHORT $LN5@ft_black_r
; Line 3604
	push	OFFSET $SG8260
	push	3604					; 00000e14H
	push	19					; 00000013H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 19					; 00000013H
	jmp	$LN14@ft_black_r
$LN5@ft_black_r:
; Line 3606
	cmp	DWORD PTR _target_map$[ebp], 0
	jne	SHORT $LN4@ft_black_r
; Line 3607
	push	OFFSET $SG8262
	push	3607					; 00000e17H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN14@ft_black_r
$LN4@ft_black_r:
; Line 3610
	mov	edx, DWORD PTR _target_map$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN2@ft_black_r
	mov	eax, DWORD PTR _target_map$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@ft_black_r
$LN2@ft_black_r:
; Line 3611
	xor	eax, eax
	jmp	$LN14@ft_black_r
$LN3@ft_black_r:
; Line 3613
	mov	ecx, DWORD PTR _target_map$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN1@ft_black_r
; Line 3614
	push	OFFSET $SG8266
	push	3614					; 00000e1eH
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN14@ft_black_r
$LN1@ft_black_r:
; Line 3616
	mov	edx, DWORD PTR _worker$[ebp]
	add	edx, 128				; 00000080H
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax
; Line 3617
	mov	ecx, DWORD PTR _worker$[ebp]
	add	ecx, 104				; 00000068H
	mov	edx, DWORD PTR _target_map$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], edx
; Line 3619
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _raster$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+28], edx
; Line 3621
	mov	eax, DWORD PTR _raster$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shr	ecx, 2
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+28]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+32], ecx
; Line 3631
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	SHORT $LN16@ft_black_r
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_Render_Gray_Glyph
	add	esp, 4
	mov	DWORD PTR tv190[ebp], eax
	jmp	SHORT $LN17@ft_black_r
$LN16@ft_black_r:
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_Render_Glyph
	add	esp, 4
	mov	DWORD PTR tv190[ebp], eax
$LN17@ft_black_r:
	mov	eax, DWORD PTR tv190[ebp]
$LN14@ft_black_r:
; Line 3632
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_black_render ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_raster$ = 8						; size = 4
_mode$ = 12						; size = 4
_palette$ = 16						; size = 4
_ft_black_set_mode PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 3549
	push	ebp
	mov	ebp, esp
; Line 3564
	mov	eax, DWORD PTR _raster$[ebp]
	mov	DWORD PTR _raster$[ebp], eax
; Line 3565
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR _mode$[ebp], ecx
; Line 3566
	mov	edx, DWORD PTR _palette$[ebp]
	mov	DWORD PTR _palette$[ebp], edx
; Line 3570
	xor	eax, eax
; Line 3571
	pop	ebp
	ret	0
_ft_black_set_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_worker$1 = -4						; size = 4
_raster$ = 8						; size = 4
_pool_base$ = 12					; size = 4
_pool_size$ = 16					; size = 4
_ft_black_reset PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 3522
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3523
	cmp	DWORD PTR _raster$[ebp], 0
	je	SHORT $LN4@ft_black_r
; Line 3525
	cmp	DWORD PTR _pool_base$[ebp], 0
	je	SHORT $LN2@ft_black_r
	cmp	DWORD PTR _pool_size$[ebp], 3076	; 00000c04H
	jl	SHORT $LN2@ft_black_r
; Line 3527
	mov	eax, DWORD PTR _pool_base$[ebp]
	mov	DWORD PTR _worker$1[ebp], eax
; Line 3530
	mov	ecx, DWORD PTR _pool_base$[ebp]
	add	ecx, 1032				; 00000408H
	mov	edx, DWORD PTR _raster$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 3532
	mov	eax, DWORD PTR _pool_base$[ebp]
	add	eax, DWORD PTR _pool_size$[ebp]
	mov	ecx, DWORD PTR _raster$[ebp]
	sub	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _raster$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 3533
	mov	eax, DWORD PTR _raster$[ebp]
	mov	ecx, DWORD PTR _worker$1[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 3535
	jmp	SHORT $LN4@ft_black_r
$LN2@ft_black_r:
; Line 3537
	mov	edx, DWORD PTR _raster$[ebp]
	mov	DWORD PTR [edx], 0
; Line 3538
	mov	eax, DWORD PTR _raster$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 3539
	mov	ecx, DWORD PTR _raster$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN4@ft_black_r:
; Line 3542
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_black_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_raster$ = 8						; size = 4
_ft_black_done PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 3507
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3508
	mov	eax, DWORD PTR _raster$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memory$[ebp], ecx
$LN3@ft_black_d:
; Line 3511
	mov	edx, DWORD PTR _raster$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _raster$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@ft_black_d
; Line 3512
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_black_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_raster$ = -16						; size = 4
_error$ = -8						; size = 4
_memory$ = 8						; size = 4
_araster$ = 12						; size = 4
_ft_black_new PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 3487
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3489
	mov	DWORD PTR _raster$[ebp], 0
; Line 3492
	mov	eax, DWORD PTR _araster$[ebp]
	mov	DWORD PTR [eax], 0
; Line 3493
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	24					; 00000018H
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _raster$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ft_black_n
; Line 3495
	mov	eax, DWORD PTR _raster$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 3496
	mov	edx, DWORD PTR _raster$[ebp]
	push	edx
	call	_ft_black_init
	add	esp, 4
; Line 3498
	mov	eax, DWORD PTR _araster$[ebp]
	mov	ecx, DWORD PTR _raster$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@ft_black_n:
; Line 3501
	mov	eax, DWORD PTR _error$[ebp]
; Line 3502
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ft_black_n
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@ft_black_n:
	DD	1
	DD	$LN5@ft_black_n
$LN5@ft_black_n:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@ft_black_n
$LN4@ft_black_n:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_black_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_raster$ = 8						; size = 4
_ft_black_init PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 3434
	push	ebp
	mov	ebp, esp
; Line 3445
	mov	eax, DWORD PTR _raster$[ebp]
	mov	DWORD PTR _raster$[ebp], eax
; Line 3447
	pop	ebp
	ret	0
_ft_black_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_worker$ = 8						; size = 4
_Render_Gray_Glyph PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 3423
	push	ebp
	mov	ebp, esp
; Line 3424
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR _worker$[ebp], eax
; Line 3426
	push	OFFSET $SG8184
	push	3426					; 00000d62H
	push	19					; 00000013H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 19					; 00000013H
; Line 3427
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Render_Gray_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv91 = -5						; size = 1
_error$ = -4						; size = 4
_worker$ = 8						; size = 4
_Render_Glyph PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 3275
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3280
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	and	ecx, 256				; 00000100H
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_Set_High_Precision
	add	esp, 8
; Line 3281
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+24], edx
; Line 3283
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	and	ecx, 8
	je	SHORT $LN8@Render_Gly
; Line 3284
	mov	edx, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [edx+180], 2
; Line 3285
	jmp	SHORT $LN7@Render_Gly
$LN8@Render_Gly:
; Line 3287
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	and	ecx, 16					; 00000010H
	je	SHORT $LN6@Render_Gly
; Line 3288
	mov	edx, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [edx+180], 4
; Line 3289
	jmp	SHORT $LN5@Render_Gly
$LN6@Render_Gly:
; Line 3290
	mov	eax, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [eax+180], 0
$LN5@Render_Gly:
; Line 3292
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	and	edx, 32					; 00000020H
	jne	SHORT $LN7@Render_Gly
; Line 3293
	mov	eax, DWORD PTR _worker$[ebp]
	movzx	ecx, BYTE PTR [eax+180]
	add	ecx, 1
	mov	edx, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [edx+180], cl
$LN7@Render_Gly:
; Line 3297
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	and	ecx, 512				; 00000200H
	jne	SHORT $LN11@Render_Gly
	mov	BYTE PTR tv91[ebp], 1
	jmp	SHORT $LN12@Render_Gly
$LN11@Render_Gly:
	mov	BYTE PTR tv91[ebp], 0
$LN12@Render_Gly:
	mov	edx, DWORD PTR _worker$[ebp]
	mov	al, BYTE PTR tv91[ebp]
	mov	BYTE PTR [edx+181], al
; Line 3300
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+164], OFFSET _Vertical_Sweep_Init
; Line 3301
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+168], OFFSET _Vertical_Sweep_Span
; Line 3302
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+172], OFFSET _Vertical_Sweep_Drop
; Line 3303
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+176], OFFSET _Vertical_Sweep_Step
; Line 3305
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+1024], 0
; Line 3306
	mov	eax, 4
	imul	ecx, eax, 0
	xor	edx, edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	WORD PTR [eax+ecx+960], dx
; Line 3307
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	sub	edx, 1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _worker$[ebp]
	mov	WORD PTR [eax+ecx+962], dx
; Line 3309
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	ax, WORD PTR [edx+108]
	mov	WORD PTR [ecx+56], ax
; Line 3310
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	DWORD PTR [ecx+60], eax
; Line 3312
	push	0
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_Render_Single_Pass
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@Render_Gly
; Line 3313
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN9@Render_Gly
$LN3@Render_Gly:
; Line 3316
	mov	edx, DWORD PTR _worker$[ebp]
	movsx	eax, BYTE PTR [edx+181]
	test	eax, eax
	je	$LN2@Render_Gly
	mov	ecx, DWORD PTR _worker$[ebp]
	movzx	edx, BYTE PTR [ecx+180]
	cmp	edx, 2
	je	$LN2@Render_Gly
; Line 3318
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+164], OFFSET _Horizontal_Sweep_Init
; Line 3319
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+168], OFFSET _Horizontal_Sweep_Span
; Line 3320
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+172], OFFSET _Horizontal_Sweep_Drop
; Line 3321
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+176], OFFSET _Horizontal_Sweep_Step
; Line 3323
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+1024], 0
; Line 3324
	mov	edx, 4
	imul	eax, edx, 0
	xor	ecx, ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	WORD PTR [edx+eax+960], cx
; Line 3325
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _worker$[ebp]
	mov	WORD PTR [edx+eax+962], cx
; Line 3327
	push	1
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_Render_Single_Pass
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@Render_Gly
; Line 3328
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN9@Render_Gly
$LN2@Render_Gly:
; Line 3331
	xor	eax, eax
$LN9@Render_Gly:
; Line 3332
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Render_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_k$ = -12						; size = 2
_j$ = -8						; size = 2
_i$ = -4						; size = 2
_worker$ = 8						; size = 4
_flipped$ = 12						; size = 1
_Render_Single_Pass PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 3203
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN9@Render_Sin:
; Line 3207
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+1024], 0
	jl	$LN8@Render_Sin
; Line 3209
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+1024]
	mov	eax, DWORD PTR _worker$[ebp]
	movsx	ecx, WORD PTR [eax+edx*4+962]
	mov	edx, DWORD PTR _worker$[ebp]
	imul	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+80], ecx
; Line 3210
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+1024]
	mov	eax, DWORD PTR _worker$[ebp]
	movsx	ecx, WORD PTR [eax+edx*4+960]
	mov	edx, DWORD PTR _worker$[ebp]
	imul	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+76], ecx
; Line 3212
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+40], eax
; Line 3214
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+44], 0
; Line 3216
	movsx	edx, BYTE PTR _flipped$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_Convert_Glyph
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	$LN7@Render_Sin
; Line 3218
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [edx+44], 98			; 00000062H
	je	SHORT $LN6@Render_Sin
; Line 3219
	mov	eax, 1
	jmp	$LN10@Render_Sin
$LN6@Render_Sin:
; Line 3221
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 3229
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+1024]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	cx, WORD PTR [eax+edx*4+960]
	mov	WORD PTR _i$[ebp], cx
; Line 3230
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+1024]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+962]
	mov	WORD PTR _j$[ebp], dx
; Line 3232
	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR _j$[ebp]
	add	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	WORD PTR _k$[ebp], ax
; Line 3234
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [edx+1024], 7
	jge	SHORT $LN4@Render_Sin
	movsx	eax, WORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _i$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN5@Render_Sin
$LN4@Render_Sin:
; Line 3236
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+1024], 0
; Line 3237
	push	OFFSET $SG8157
	push	3237					; 00000ca5H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 3239
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+44]
	jmp	$LN10@Render_Sin
$LN5@Render_Sin:
; Line 3242
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1024]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	ax, WORD PTR _k$[ebp]
	mov	WORD PTR [edx+ecx*4+964], ax
; Line 3243
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+1024]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	cx, WORD PTR _j$[ebp]
	mov	WORD PTR [eax+edx*4+966], cx
; Line 3245
	movsx	edx, WORD PTR _k$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1024]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	WORD PTR [eax+ecx*4+962], dx
; Line 3247
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+1024]
	add	edx, 1
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+1024], edx
; Line 3249
	jmp	SHORT $LN3@Render_Sin
$LN7@Render_Sin:
; Line 3251
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	je	SHORT $LN2@Render_Sin
; Line 3252
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_Draw_Sweep
	add	esp, 4
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@Render_Sin
; Line 3253
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	jmp	SHORT $LN10@Render_Sin
$LN2@Render_Sin:
; Line 3254
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+1024]
	sub	eax, 1
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+1024], eax
$LN3@Render_Sin:
; Line 3256
	jmp	$LN9@Render_Sin
$LN8@Render_Sin:
; Line 3258
	xor	eax, eax
$LN10@Render_Sin:
; Line 3259
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Render_Single_Pass ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dropOutControl$1 = -124				; size = 4
_draw_right$ = -116					; size = 4
_draw_left$ = -104					; size = 4
_waiting$ = -92						; size = 4
_e2$ = -84						; size = 4
_e1$ = -80						; size = 4
_xs$ = -76						; size = 4
_x2$ = -72						; size = 4
_x1$ = -68						; size = 4
_dropouts$ = -64					; size = 2
_bottom$ = -60						; size = 2
_top$ = -56						; size = 2
_max_Y$ = -48						; size = 2
_min_Y$ = -36						; size = 2
_P_Right$ = -28						; size = 4
_P_Left$ = -24						; size = 4
_Q$ = -20						; size = 4
_P$ = -16						; size = 4
_y_height$ = -12					; size = 2
_y_change$ = -8						; size = 2
_y$ = -4						; size = 2
_worker$ = 8						; size = 4
_Draw_Sweep PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2949
	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 31					; 0000001fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2964
	lea	eax, DWORD PTR _waiting$[ebp]
	push	eax
	call	_Init_Linked
	add	esp, 4
; Line 2966
	lea	ecx, DWORD PTR _draw_left$[ebp]
	push	ecx
	call	_Init_Linked
	add	esp, 4
; Line 2967
	lea	edx, DWORD PTR _draw_right$[ebp]
	push	edx
	call	_Init_Linked
	add	esp, 4
; Line 2971
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _P$[ebp], ecx
; Line 2972
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR [eax]
	sar	edx, cl
	mov	WORD PTR _max_Y$[ebp], dx
; Line 2973
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+80]
	mov	ecx, DWORD PTR [ecx]
	sar	edx, cl
	mov	WORD PTR _min_Y$[ebp], dx
$LN37@Draw_Sweep:
; Line 2975
	cmp	DWORD PTR _P$[ebp], 0
	je	SHORT $LN36@Draw_Sweep
; Line 2977
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Q$[ebp], ecx
; Line 2979
	mov	edx, DWORD PTR _P$[ebp]
	mov	ax, WORD PTR [edx+20]
	mov	WORD PTR _bottom$[ebp], ax
; Line 2980
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	WORD PTR _top$[ebp], dx
; Line 2982
	movsx	eax, WORD PTR _min_Y$[ebp]
	movsx	ecx, WORD PTR _bottom$[ebp]
	cmp	eax, ecx
	jle	SHORT $LN35@Draw_Sweep
; Line 2983
	mov	dx, WORD PTR _bottom$[ebp]
	mov	WORD PTR _min_Y$[ebp], dx
$LN35@Draw_Sweep:
; Line 2984
	movsx	eax, WORD PTR _max_Y$[ebp]
	movsx	ecx, WORD PTR _top$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN34@Draw_Sweep
; Line 2985
	mov	dx, WORD PTR _top$[ebp]
	mov	WORD PTR _max_Y$[ebp], dx
$LN34@Draw_Sweep:
; Line 2987
	mov	eax, DWORD PTR _P$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2988
	mov	ecx, DWORD PTR _P$[ebp]
	push	ecx
	lea	edx, DWORD PTR _waiting$[ebp]
	push	edx
	call	_InsNew
	add	esp, 8
; Line 2990
	mov	eax, DWORD PTR _Q$[ebp]
	mov	DWORD PTR _P$[ebp], eax
; Line 2991
	jmp	SHORT $LN37@Draw_Sweep
$LN36@Draw_Sweep:
; Line 2994
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN33@Draw_Sweep
; Line 2996
	push	OFFSET $SG8089
	push	2996					; 00000bb4H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+44], eax
; Line 2997
	mov	al, 1
	jmp	$LN38@Draw_Sweep
$LN33@Draw_Sweep:
; Line 3002
	mov	esi, esp
	lea	eax, DWORD PTR _max_Y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _min_Y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3006
	mov	edx, DWORD PTR _waiting$[ebp]
	mov	DWORD PTR _P$[ebp], edx
$LN32@Draw_Sweep:
; Line 3008
	cmp	DWORD PTR _P$[ebp], 0
	je	SHORT $LN31@Draw_Sweep
; Line 3010
	movsx	eax, WORD PTR _min_Y$[ebp]
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, eax
	movzx	eax, dx
	mov	ecx, DWORD PTR _P$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 3011
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _P$[ebp], eax
; Line 3012
	jmp	SHORT $LN32@Draw_Sweep
$LN31@Draw_Sweep:
; Line 3016
	mov	cx, WORD PTR _min_Y$[ebp]
	mov	WORD PTR _y$[ebp], cx
; Line 3017
	xor	edx, edx
	mov	WORD PTR _y_height$[ebp], dx
; Line 3020
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jle	SHORT $LN29@Draw_Sweep
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	neg	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movsx	eax, WORD PTR _min_Y$[ebp]
	cmp	DWORD PTR [ecx+edx*4], eax
	jne	SHORT $LN29@Draw_Sweep
; Line 3021
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, 1
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+48], edx
$LN29@Draw_Sweep:
; Line 3023
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jle	$LN5@Draw_Sweep
; Line 3027
	mov	edx, DWORD PTR _waiting$[ebp]
	mov	DWORD PTR _P$[ebp], edx
$LN27@Draw_Sweep:
; Line 3029
	cmp	DWORD PTR _P$[ebp], 0
	je	SHORT $LN26@Draw_Sweep
; Line 3031
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Q$[ebp], ecx
; Line 3032
	movsx	edx, WORD PTR _y_height$[ebp]
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, edx
	mov	edx, DWORD PTR _P$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 3033
	mov	eax, DWORD PTR _P$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN25@Draw_Sweep
; Line 3035
	mov	ecx, DWORD PTR _P$[ebp]
	push	ecx
	lea	edx, DWORD PTR _waiting$[ebp]
	push	edx
	call	_DelOld
	add	esp, 8
; Line 3037
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 8
	je	SHORT $LN24@Draw_Sweep
; Line 3038
	mov	edx, DWORD PTR _P$[ebp]
	push	edx
	lea	eax, DWORD PTR _draw_left$[ebp]
	push	eax
	call	_InsNew
	add	esp, 8
; Line 3039
	jmp	SHORT $LN25@Draw_Sweep
$LN24@Draw_Sweep:
; Line 3040
	mov	ecx, DWORD PTR _P$[ebp]
	push	ecx
	lea	edx, DWORD PTR _draw_right$[ebp]
	push	edx
	call	_InsNew
	add	esp, 8
$LN25@Draw_Sweep:
; Line 3043
	mov	eax, DWORD PTR _Q$[ebp]
	mov	DWORD PTR _P$[ebp], eax
; Line 3044
	jmp	SHORT $LN27@Draw_Sweep
$LN26@Draw_Sweep:
; Line 3048
	lea	ecx, DWORD PTR _draw_left$[ebp]
	push	ecx
	call	_Sort
	add	esp, 4
; Line 3049
	lea	edx, DWORD PTR _draw_right$[ebp]
	push	edx
	call	_Sort
	add	esp, 4
; Line 3051
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	neg	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	cx, WORD PTR [eax+ecx*4]
	mov	WORD PTR _y_change$[ebp], cx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+48]
	sub	eax, 1
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 3052
	movsx	edx, WORD PTR _y_change$[ebp]
	movsx	eax, WORD PTR _y$[ebp]
	sub	edx, eax
	mov	WORD PTR _y_height$[ebp], dx
$LN22@Draw_Sweep:
; Line 3054
	movsx	ecx, WORD PTR _y$[ebp]
	movsx	edx, WORD PTR _y_change$[ebp]
	cmp	ecx, edx
	jge	$LN21@Draw_Sweep
; Line 3058
	xor	eax, eax
	mov	WORD PTR _dropouts$[ebp], ax
; Line 3060
	mov	ecx, DWORD PTR _draw_left$[ebp]
	mov	DWORD PTR _P_Left$[ebp], ecx
; Line 3061
	mov	edx, DWORD PTR _draw_right$[ebp]
	mov	DWORD PTR _P_Right$[ebp], edx
$LN20@Draw_Sweep:
; Line 3063
	cmp	DWORD PTR _P_Left$[ebp], 0
	je	$LN19@Draw_Sweep
; Line 3065
	mov	eax, DWORD PTR _P_Left$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x1$[ebp], ecx
; Line 3066
	mov	edx, DWORD PTR _P_Right$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _x2$[ebp], eax
; Line 3068
	mov	ecx, DWORD PTR _x1$[ebp]
	cmp	ecx, DWORD PTR _x2$[ebp]
	jle	SHORT $LN18@Draw_Sweep
; Line 3070
	mov	edx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _xs$[ebp], edx
; Line 3071
	mov	eax, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _x1$[ebp], eax
; Line 3072
	mov	ecx, DWORD PTR _xs$[ebp]
	mov	DWORD PTR _x2$[ebp], ecx
$LN18@Draw_Sweep:
; Line 3075
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	neg	eax
	and	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _e1$[ebp], eax
; Line 3076
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _x2$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	neg	eax
	and	ecx, eax
	mov	DWORD PTR _e2$[ebp], ecx
; Line 3079
	mov	ecx, DWORD PTR _x2$[ebp]
	sub	ecx, DWORD PTR _x1$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	jg	SHORT $LN17@Draw_Sweep
	mov	eax, DWORD PTR _e1$[ebp]
	cmp	eax, DWORD PTR _x1$[ebp]
	je	SHORT $LN17@Draw_Sweep
	mov	ecx, DWORD PTR _e2$[ebp]
	cmp	ecx, DWORD PTR _x2$[ebp]
	je	SHORT $LN17@Draw_Sweep
; Line 3081
	mov	edx, DWORD PTR _e1$[ebp]
	cmp	edx, DWORD PTR _e2$[ebp]
	jg	SHORT $LN15@Draw_Sweep
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _e1$[ebp]
	add	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR _e2$[ebp], ecx
	jne	SHORT $LN17@Draw_Sweep
$LN15@Draw_Sweep:
; Line 3083
	mov	edx, DWORD PTR _P_Left$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 7
	mov	DWORD PTR _dropOutControl$1[ebp], eax
; Line 3086
	cmp	DWORD PTR _dropOutControl$1[ebp], 2
	je	SHORT $LN14@Draw_Sweep
; Line 3090
	mov	ecx, DWORD PTR _P_Left$[ebp]
	mov	edx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 3091
	mov	eax, DWORD PTR _P_Right$[ebp]
	mov	ecx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 3094
	mov	edx, DWORD PTR _P_Left$[ebp]
	mov	DWORD PTR [edx+24], 1
; Line 3095
	mov	ax, WORD PTR _dropouts$[ebp]
	add	ax, 1
	mov	WORD PTR _dropouts$[ebp], ax
$LN14@Draw_Sweep:
; Line 3098
	jmp	SHORT $Skip_To_Next$47
$LN17@Draw_Sweep:
; Line 3102
	mov	esi, esp
	mov	ecx, DWORD PTR _P_Right$[ebp]
	push	ecx
	mov	edx, DWORD PTR _P_Left$[ebp]
	push	edx
	mov	eax, DWORD PTR _x2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$Skip_To_Next$47:
; Line 3106
	mov	eax, DWORD PTR _P_Left$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _P_Left$[ebp], ecx
; Line 3107
	mov	edx, DWORD PTR _P_Right$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _P_Right$[ebp], eax
; Line 3108
	jmp	$LN20@Draw_Sweep
$LN19@Draw_Sweep:
; Line 3113
	movsx	ecx, WORD PTR _dropouts$[ebp]
	test	ecx, ecx
	jle	SHORT $Next_Line$48
; Line 3114
	jmp	$Scan_DropOuts$49
$Next_Line$48:
; Line 3118
	mov	esi, esp
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3120
	mov	dx, WORD PTR _y$[ebp]
	add	dx, 1
	mov	WORD PTR _y$[ebp], dx
; Line 3122
	movsx	eax, WORD PTR _y$[ebp]
	movsx	ecx, WORD PTR _y_change$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN12@Draw_Sweep
; Line 3124
	lea	edx, DWORD PTR _draw_left$[ebp]
	push	edx
	call	_Sort
	add	esp, 4
; Line 3125
	lea	eax, DWORD PTR _draw_right$[ebp]
	push	eax
	call	_Sort
	add	esp, 4
$LN12@Draw_Sweep:
; Line 3127
	jmp	$LN22@Draw_Sweep
$LN21@Draw_Sweep:
; Line 3131
	mov	ecx, DWORD PTR _draw_left$[ebp]
	mov	DWORD PTR _P$[ebp], ecx
$LN11@Draw_Sweep:
; Line 3132
	cmp	DWORD PTR _P$[ebp], 0
	je	SHORT $LN10@Draw_Sweep
; Line 3134
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _Q$[ebp], eax
; Line 3135
	mov	ecx, DWORD PTR _P$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN9@Draw_Sweep
; Line 3136
	mov	edx, DWORD PTR _P$[ebp]
	push	edx
	lea	eax, DWORD PTR _draw_left$[ebp]
	push	eax
	call	_DelOld
	add	esp, 8
$LN9@Draw_Sweep:
; Line 3137
	mov	ecx, DWORD PTR _Q$[ebp]
	mov	DWORD PTR _P$[ebp], ecx
; Line 3138
	jmp	SHORT $LN11@Draw_Sweep
$LN10@Draw_Sweep:
; Line 3140
	mov	edx, DWORD PTR _draw_right$[ebp]
	mov	DWORD PTR _P$[ebp], edx
$LN8@Draw_Sweep:
; Line 3141
	cmp	DWORD PTR _P$[ebp], 0
	je	SHORT $LN7@Draw_Sweep
; Line 3143
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Q$[ebp], ecx
; Line 3144
	mov	edx, DWORD PTR _P$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN6@Draw_Sweep
; Line 3145
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	lea	ecx, DWORD PTR _draw_right$[ebp]
	push	ecx
	call	_DelOld
	add	esp, 8
$LN6@Draw_Sweep:
; Line 3146
	mov	edx, DWORD PTR _Q$[ebp]
	mov	DWORD PTR _P$[ebp], edx
; Line 3147
	jmp	SHORT $LN8@Draw_Sweep
$LN7@Draw_Sweep:
; Line 3148
	jmp	$LN29@Draw_Sweep
$LN5@Draw_Sweep:
; Line 3151
	movsx	eax, WORD PTR _y$[ebp]
	movsx	ecx, WORD PTR _max_Y$[ebp]
	cmp	eax, ecx
	jg	SHORT $LN4@Draw_Sweep
; Line 3153
	mov	esi, esp
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3154
	mov	dx, WORD PTR _y$[ebp]
	add	dx, 1
	mov	WORD PTR _y$[ebp], dx
; Line 3155
	jmp	SHORT $LN5@Draw_Sweep
$LN4@Draw_Sweep:
; Line 3157
	xor	al, al
	jmp	SHORT $LN38@Draw_Sweep
$Scan_DropOuts$49:
; Line 3161
	mov	eax, DWORD PTR _draw_left$[ebp]
	mov	DWORD PTR _P_Left$[ebp], eax
; Line 3162
	mov	ecx, DWORD PTR _draw_right$[ebp]
	mov	DWORD PTR _P_Right$[ebp], ecx
$LN3@Draw_Sweep:
; Line 3164
	cmp	DWORD PTR _P_Left$[ebp], 0
	je	SHORT $LN2@Draw_Sweep
; Line 3166
	mov	edx, DWORD PTR _P_Left$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN1@Draw_Sweep
; Line 3168
	mov	eax, DWORD PTR _P_Left$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 3176
	mov	esi, esp
	mov	ecx, DWORD PTR _P_Right$[ebp]
	push	ecx
	mov	edx, DWORD PTR _P_Left$[ebp]
	push	edx
	mov	eax, DWORD PTR _P_Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _P_Left$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	call	ecx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Draw_Sweep:
; Line 3179
	mov	edx, DWORD PTR _P_Left$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _P_Left$[ebp], eax
; Line 3180
	mov	ecx, DWORD PTR _P_Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _P_Right$[ebp], edx
; Line 3181
	jmp	SHORT $LN3@Draw_Sweep
$LN2@Draw_Sweep:
; Line 3183
	jmp	$Next_Line$48
$LN38@Draw_Sweep:
; Line 3184
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@Draw_Sweep
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN46@Draw_Sweep:
	DD	5
	DD	$LN45@Draw_Sweep
$LN45@Draw_Sweep:
	DD	-36					; ffffffdcH
	DD	2
	DD	$LN40@Draw_Sweep
	DD	-48					; ffffffd0H
	DD	2
	DD	$LN41@Draw_Sweep
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN42@Draw_Sweep
	DD	-104					; ffffff98H
	DD	4
	DD	$LN43@Draw_Sweep
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN44@Draw_Sweep
$LN44@Draw_Sweep:
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN43@Draw_Sweep:
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN42@Draw_Sweep:
	DB	119					; 00000077H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN41@Draw_Sweep:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	89					; 00000059H
	DB	0
$LN40@Draw_Sweep:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	89					; 00000059H
	DB	0
_Draw_Sweep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_worker$ = 8						; size = 4
_Horizontal_Sweep_Step PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2692
	push	ebp
	mov	ebp, esp
; Line 2694
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR _worker$[ebp], eax
; Line 2695
	pop	ebp
	ret	0
_Horizontal_Sweep_Step ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv157 = -32						; size = 4
tv79 = -28						; size = 4
_dropOutControl$1 = -24					; size = 4
_f1$ = -17						; size = 1
_bits$ = -16						; size = 4
_pxl$ = -12						; size = 4
_e2$ = -8						; size = 4
_e1$ = -4						; size = 4
_worker$ = 8						; size = 4
_y$ = 12						; size = 2
_x1$ = 16						; size = 4
_x2$ = 20						; size = 4
_left$ = 24						; size = 4
_right$ = 28						; size = 4
_Horizontal_Sweep_Drop PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2578
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2596
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	and	eax, edx
	mov	DWORD PTR _e1$[ebp], eax
; Line 2597
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	and	ecx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _e2$[ebp], ecx
; Line 2598
	mov	edx, DWORD PTR _e1$[ebp]
	mov	DWORD PTR _pxl$[ebp], edx
; Line 2600
	mov	eax, DWORD PTR _e1$[ebp]
	cmp	eax, DWORD PTR _e2$[ebp]
	jle	$LN22@Horizontal
; Line 2602
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 7
	mov	DWORD PTR _dropOutControl$1[ebp], edx
; Line 2605
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _e2$[ebp]
	add	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR _e1$[ebp], ecx
	jne	$LN21@Horizontal
; Line 2607
	mov	edx, DWORD PTR _dropOutControl$1[ebp]
	mov	DWORD PTR tv79[ebp], edx
	cmp	DWORD PTR tv79[ebp], 5
	ja	$LN9@Horizontal
	mov	eax, DWORD PTR tv79[ebp]
	jmp	DWORD PTR $LN27@Horizontal[eax*4]
$LN18@Horizontal:
; Line 2610
	mov	ecx, DWORD PTR _e2$[ebp]
	mov	DWORD PTR _pxl$[ebp], ecx
; Line 2611
	jmp	$LN19@Horizontal
$LN17@Horizontal:
; Line 2614
	mov	edx, DWORD PTR _x2$[ebp]
	mov	eax, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [eax+edx-1]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	neg	ecx
	and	eax, ecx
	mov	DWORD PTR _pxl$[ebp], eax
; Line 2615
	jmp	$LN19@Horizontal
$LN16@Horizontal:
; Line 2625
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	eax, DWORD PTR _right$[ebp]
	jne	SHORT $LN15@Horizontal
	mov	ecx, DWORD PTR _left$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jg	SHORT $LN15@Horizontal
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 16					; 00000010H
	je	SHORT $LN14@Horizontal
	mov	ecx, DWORD PTR _x2$[ebp]
	sub	ecx, DWORD PTR _x1$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	jge	SHORT $LN15@Horizontal
$LN14@Horizontal:
; Line 2626
	jmp	$LN23@Horizontal
$LN15@Horizontal:
; Line 2632
	mov	eax, DWORD PTR _right$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR _left$[ebp]
	jne	SHORT $LN13@Horizontal
	movsx	edx, WORD PTR _y$[ebp]
	mov	eax, DWORD PTR _left$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jne	SHORT $LN13@Horizontal
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 32					; 00000020H
	je	SHORT $LN12@Horizontal
	mov	eax, DWORD PTR _x2$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jge	SHORT $LN13@Horizontal
$LN12@Horizontal:
; Line 2633
	jmp	$LN23@Horizontal
$LN13@Horizontal:
; Line 2635
	cmp	DWORD PTR _dropOutControl$1[ebp], 1
	jne	SHORT $LN11@Horizontal
; Line 2636
	mov	edx, DWORD PTR _e2$[ebp]
	mov	DWORD PTR _pxl$[ebp], edx
; Line 2637
	jmp	SHORT $LN10@Horizontal
$LN11@Horizontal:
; Line 2638
	mov	eax, DWORD PTR _x2$[ebp]
	mov	ecx, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	and	eax, edx
	mov	DWORD PTR _pxl$[ebp], eax
$LN10@Horizontal:
; Line 2639
	jmp	SHORT $LN19@Horizontal
$LN9@Horizontal:
; Line 2642
	jmp	$LN23@Horizontal
$LN19@Horizontal:
; Line 2648
	cmp	DWORD PTR _pxl$[ebp], 0
	jge	SHORT $LN8@Horizontal
; Line 2649
	mov	eax, DWORD PTR _e1$[ebp]
	mov	DWORD PTR _pxl$[ebp], eax
	jmp	SHORT $LN7@Horizontal
$LN8@Horizontal:
; Line 2650
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _pxl$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sar	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	edx, DWORD PTR [eax+104]
	jb	SHORT $LN7@Horizontal
; Line 2651
	mov	ecx, DWORD PTR _e2$[ebp]
	mov	DWORD PTR _pxl$[ebp], ecx
$LN7@Horizontal:
; Line 2654
	mov	edx, DWORD PTR _pxl$[ebp]
	cmp	edx, DWORD PTR _e1$[ebp]
	jne	SHORT $LN25@Horizontal
	mov	eax, DWORD PTR _e2$[ebp]
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN26@Horizontal
$LN25@Horizontal:
	mov	ecx, DWORD PTR _e1$[ebp]
	mov	DWORD PTR tv157[ebp], ecx
$LN26@Horizontal:
	mov	edx, DWORD PTR tv157[ebp]
	mov	DWORD PTR _e1$[ebp], edx
; Line 2656
	mov	eax, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _e1$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	edx, cl
	mov	DWORD PTR _e1$[ebp], edx
; Line 2658
	movsx	eax, WORD PTR _y$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR _bits$[ebp], eax
; Line 2659
	movsx	ecx, WORD PTR _y$[ebp]
	and	ecx, 7
	mov	edx, 128				; 00000080H
	sar	edx, cl
	mov	BYTE PTR _f1$[ebp], dl
; Line 2661
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _e1$[ebp]
	imul	ecx, DWORD PTR [eax+112]
	mov	edx, DWORD PTR _bits$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _bits$[ebp], edx
; Line 2662
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+112], 0
	jle	SHORT $LN5@Horizontal
; Line 2663
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	sub	edx, 1
	mov	eax, DWORD PTR _worker$[ebp]
	imul	edx, DWORD PTR [eax+112]
	add	edx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR _bits$[ebp], edx
$LN5@Horizontal:
; Line 2667
	cmp	DWORD PTR _e1$[ebp], 0
	jl	SHORT $LN4@Horizontal
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _e1$[ebp]
	cmp	edx, DWORD PTR [ecx+104]
	jae	SHORT $LN4@Horizontal
	mov	eax, DWORD PTR _bits$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _f1$[ebp]
	and	ecx, edx
	je	SHORT $LN4@Horizontal
; Line 2668
	jmp	$LN23@Horizontal
$LN4@Horizontal:
; Line 2670
	jmp	SHORT $LN22@Horizontal
$LN21@Horizontal:
; Line 2671
	jmp	$LN23@Horizontal
$LN22@Horizontal:
; Line 2674
	movsx	eax, WORD PTR _y$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR _bits$[ebp], eax
; Line 2675
	movsx	ecx, WORD PTR _y$[ebp]
	and	ecx, 7
	mov	edx, 128				; 00000080H
	sar	edx, cl
	mov	BYTE PTR _f1$[ebp], dl
; Line 2677
	mov	eax, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _pxl$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	edx, cl
	mov	DWORD PTR _e1$[ebp], edx
; Line 2679
	cmp	DWORD PTR _e1$[ebp], 0
	jl	SHORT $LN23@Horizontal
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _e1$[ebp]
	cmp	ecx, DWORD PTR [eax+104]
	jae	SHORT $LN23@Horizontal
; Line 2681
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _e1$[ebp]
	imul	eax, DWORD PTR [edx+112]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
; Line 2682
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [edx+112], 0
	jle	SHORT $LN1@Horizontal
; Line 2683
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	sub	ecx, 1
	mov	edx, DWORD PTR _worker$[ebp]
	imul	ecx, DWORD PTR [edx+112]
	add	ecx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR _bits$[ebp], ecx
$LN1@Horizontal:
; Line 2685
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR _f1$[ebp]
	mov	eax, DWORD PTR _bits$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	ecx, edx
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _bits$[ebp]
	mov	BYTE PTR [edx+eax], cl
$LN23@Horizontal:
; Line 2687
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@Horizontal:
	DD	$LN18@Horizontal
	DD	$LN16@Horizontal
	DD	$LN9@Horizontal
	DD	$LN9@Horizontal
	DD	$LN17@Horizontal
	DD	$LN16@Horizontal
_Horizontal_Sweep_Drop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$1 = -20						; size = 4
_bits$2 = -16						; size = 4
_f1$3 = -9						; size = 1
_e2$4 = -8						; size = 4
_e1$5 = -4						; size = 4
_worker$ = 8						; size = 4
_y$ = 12						; size = 2
_x1$ = 16						; size = 4
_x2$ = 20						; size = 4
_left$ = 24						; size = 4
_right$ = 28						; size = 4
_Horizontal_Sweep_Span PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2532
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2533
	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _left$[ebp], eax
; Line 2534
	mov	ecx, DWORD PTR _right$[ebp]
	mov	DWORD PTR _right$[ebp], ecx
; Line 2537
	mov	edx, DWORD PTR _x2$[ebp]
	sub	edx, DWORD PTR _x1$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	edx, DWORD PTR [eax+4]
	jge	$LN5@Horizontal
; Line 2542
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _x1$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	neg	eax
	and	ecx, eax
	mov	DWORD PTR _e1$5[ebp], ecx
; Line 2543
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	and	edx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _e2$4[ebp], edx
; Line 2545
	mov	eax, DWORD PTR _e1$5[ebp]
	cmp	eax, DWORD PTR _e2$4[ebp]
	jne	$LN5@Horizontal
; Line 2551
	movsx	ecx, WORD PTR _y$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR _worker$[ebp]
	add	ecx, DWORD PTR [edx+60]
	mov	DWORD PTR _bits$2[ebp], ecx
; Line 2552
	movsx	ecx, WORD PTR _y$[ebp]
	and	ecx, 7
	mov	eax, 128				; 00000080H
	sar	eax, cl
	mov	BYTE PTR _f1$3[ebp], al
; Line 2554
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _e1$5[ebp]
	mov	ecx, DWORD PTR [ecx]
	sar	edx, cl
	mov	DWORD PTR _e1$5[ebp], edx
; Line 2556
	cmp	DWORD PTR _e1$5[ebp], 0
	jl	SHORT $LN5@Horizontal
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _e1$5[ebp]
	cmp	ecx, DWORD PTR [eax+104]
	jae	SHORT $LN5@Horizontal
; Line 2561
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _e1$5[ebp]
	imul	eax, DWORD PTR [edx+112]
	mov	ecx, DWORD PTR _bits$2[ebp]
	sub	ecx, eax
	mov	DWORD PTR _p$1[ebp], ecx
; Line 2562
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [edx+112], 0
	jle	SHORT $LN1@Horizontal
; Line 2563
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	sub	ecx, 1
	mov	edx, DWORD PTR _worker$[ebp]
	imul	ecx, DWORD PTR [edx+112]
	add	ecx, DWORD PTR _p$1[ebp]
	mov	DWORD PTR _p$1[ebp], ecx
$LN1@Horizontal:
; Line 2565
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR _f1$3[ebp]
	mov	eax, DWORD PTR _p$1[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	ecx, edx
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$1[ebp]
	mov	BYTE PTR [edx+eax], cl
$LN5@Horizontal:
; Line 2569
	mov	esp, ebp
	pop	ebp
	ret	0
_Horizontal_Sweep_Span ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_worker$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
_Horizontal_Sweep_Init PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2518
	push	ebp
	mov	ebp, esp
; Line 2520
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR _worker$[ebp], eax
; Line 2521
	mov	ecx, DWORD PTR _min$[ebp]
	mov	DWORD PTR _min$[ebp], ecx
; Line 2522
	mov	edx, DWORD PTR _max$[ebp]
	mov	DWORD PTR _max$[ebp], edx
; Line 2523
	pop	ebp
	ret	0
_Horizontal_Sweep_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_worker$ = 8						; size = 4
_Vertical_Sweep_Step PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2501
	push	ebp
	mov	ebp, esp
; Line 2502
	mov	eax, DWORD PTR _worker$[ebp]
	movsx	ecx, WORD PTR [eax+156]
	mov	edx, DWORD PTR _worker$[ebp]
	add	ecx, DWORD PTR [edx+148]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+148], ecx
; Line 2503
	pop	ebp
	ret	0
_Vertical_Sweep_Step ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv158 = -32						; size = 4
tv79 = -28						; size = 4
_dropOutControl$1 = -24					; size = 4
_f1$ = -20						; size = 2
_c1$ = -16						; size = 2
_pxl$ = -12						; size = 4
_e2$ = -8						; size = 4
_e1$ = -4						; size = 4
_worker$ = 8						; size = 4
_y$ = 12						; size = 2
_x1$ = 16						; size = 4
_x2$ = 20						; size = 4
_left$ = 24						; size = 4
_right$ = 28						; size = 4
_Vertical_Sweep_Drop PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2356
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2384
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	and	eax, edx
	mov	DWORD PTR _e1$[ebp], eax
; Line 2385
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	and	ecx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _e2$[ebp], ecx
; Line 2386
	mov	edx, DWORD PTR _e1$[ebp]
	mov	DWORD PTR _pxl$[ebp], edx
; Line 2388
	mov	eax, DWORD PTR _e1$[ebp]
	cmp	eax, DWORD PTR _e2$[ebp]
	jle	$LN22@Vertical_S
; Line 2390
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 7
	mov	DWORD PTR _dropOutControl$1[ebp], edx
; Line 2393
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _e2$[ebp]
	add	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR _e1$[ebp], ecx
	jne	$LN21@Vertical_S
; Line 2395
	mov	edx, DWORD PTR _dropOutControl$1[ebp]
	mov	DWORD PTR tv79[ebp], edx
	cmp	DWORD PTR tv79[ebp], 5
	ja	$LN9@Vertical_S
	mov	eax, DWORD PTR tv79[ebp]
	jmp	DWORD PTR $LN27@Vertical_S[eax*4]
$LN18@Vertical_S:
; Line 2398
	mov	ecx, DWORD PTR _e2$[ebp]
	mov	DWORD PTR _pxl$[ebp], ecx
; Line 2399
	jmp	$LN19@Vertical_S
$LN17@Vertical_S:
; Line 2402
	mov	edx, DWORD PTR _x2$[ebp]
	mov	eax, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [eax+edx-1]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	neg	ecx
	and	eax, ecx
	mov	DWORD PTR _pxl$[ebp], eax
; Line 2403
	jmp	$LN19@Vertical_S
$LN16@Vertical_S:
; Line 2438
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	eax, DWORD PTR _right$[ebp]
	jne	SHORT $LN15@Vertical_S
	mov	ecx, DWORD PTR _left$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jg	SHORT $LN15@Vertical_S
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 16					; 00000010H
	je	SHORT $LN14@Vertical_S
	mov	ecx, DWORD PTR _x2$[ebp]
	sub	ecx, DWORD PTR _x1$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	jge	SHORT $LN15@Vertical_S
$LN14@Vertical_S:
; Line 2439
	jmp	$LN23@Vertical_S
$LN15@Vertical_S:
; Line 2445
	mov	eax, DWORD PTR _right$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR _left$[ebp]
	jne	SHORT $LN13@Vertical_S
	movsx	edx, WORD PTR _y$[ebp]
	mov	eax, DWORD PTR _left$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jne	SHORT $LN13@Vertical_S
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 32					; 00000020H
	je	SHORT $LN12@Vertical_S
	mov	eax, DWORD PTR _x2$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jge	SHORT $LN13@Vertical_S
$LN12@Vertical_S:
; Line 2446
	jmp	$LN23@Vertical_S
$LN13@Vertical_S:
; Line 2448
	cmp	DWORD PTR _dropOutControl$1[ebp], 1
	jne	SHORT $LN11@Vertical_S
; Line 2449
	mov	edx, DWORD PTR _e2$[ebp]
	mov	DWORD PTR _pxl$[ebp], edx
; Line 2450
	jmp	SHORT $LN10@Vertical_S
$LN11@Vertical_S:
; Line 2451
	mov	eax, DWORD PTR _x2$[ebp]
	mov	ecx, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	and	eax, edx
	mov	DWORD PTR _pxl$[ebp], eax
$LN10@Vertical_S:
; Line 2452
	jmp	SHORT $LN19@Vertical_S
$LN9@Vertical_S:
; Line 2455
	jmp	$LN23@Vertical_S
$LN19@Vertical_S:
; Line 2461
	cmp	DWORD PTR _pxl$[ebp], 0
	jge	SHORT $LN8@Vertical_S
; Line 2462
	mov	eax, DWORD PTR _e1$[ebp]
	mov	DWORD PTR _pxl$[ebp], eax
	jmp	SHORT $LN7@Vertical_S
$LN8@Vertical_S:
; Line 2463
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _pxl$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sar	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	movzx	ecx, WORD PTR [eax+56]
	cmp	edx, ecx
	jl	SHORT $LN7@Vertical_S
; Line 2464
	mov	edx, DWORD PTR _e2$[ebp]
	mov	DWORD PTR _pxl$[ebp], edx
$LN7@Vertical_S:
; Line 2467
	mov	eax, DWORD PTR _pxl$[ebp]
	cmp	eax, DWORD PTR _e1$[ebp]
	jne	SHORT $LN25@Vertical_S
	mov	ecx, DWORD PTR _e2$[ebp]
	mov	DWORD PTR tv158[ebp], ecx
	jmp	SHORT $LN26@Vertical_S
$LN25@Vertical_S:
	mov	edx, DWORD PTR _e1$[ebp]
	mov	DWORD PTR tv158[ebp], edx
$LN26@Vertical_S:
	mov	eax, DWORD PTR tv158[ebp]
	mov	DWORD PTR _e1$[ebp], eax
; Line 2469
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _e1$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sar	edx, cl
	mov	DWORD PTR _e1$[ebp], edx
; Line 2471
	mov	eax, DWORD PTR _e1$[ebp]
	sar	eax, 3
	mov	WORD PTR _c1$[ebp], ax
; Line 2472
	mov	ecx, DWORD PTR _e1$[ebp]
	and	ecx, 7
	mov	WORD PTR _f1$[ebp], cx
; Line 2475
	cmp	DWORD PTR _e1$[ebp], 0
	jl	SHORT $LN5@Vertical_S
	mov	edx, DWORD PTR _worker$[ebp]
	movzx	eax, WORD PTR [edx+56]
	cmp	DWORD PTR _e1$[ebp], eax
	jge	SHORT $LN5@Vertical_S
	movsx	ecx, WORD PTR _c1$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+148]
	add	eax, ecx
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movzx	eax, BYTE PTR [edx+eax]
	movsx	ecx, WORD PTR _f1$[ebp]
	mov	edx, 128				; 00000080H
	sar	edx, cl
	and	eax, edx
	je	SHORT $LN5@Vertical_S
; Line 2476
	jmp	$LN23@Vertical_S
$LN5@Vertical_S:
; Line 2478
	jmp	SHORT $LN22@Vertical_S
$LN21@Vertical_S:
; Line 2479
	jmp	$LN23@Vertical_S
$LN22@Vertical_S:
; Line 2482
	mov	eax, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _pxl$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	edx, cl
	mov	DWORD PTR _e1$[ebp], edx
; Line 2484
	cmp	DWORD PTR _e1$[ebp], 0
	jl	$LN23@Vertical_S
	mov	eax, DWORD PTR _worker$[ebp]
	movzx	ecx, WORD PTR [eax+56]
	cmp	DWORD PTR _e1$[ebp], ecx
	jge	$LN23@Vertical_S
; Line 2486
	mov	edx, DWORD PTR _e1$[ebp]
	sar	edx, 3
	mov	WORD PTR _c1$[ebp], dx
; Line 2487
	mov	eax, DWORD PTR _e1$[ebp]
	and	eax, 7
	mov	WORD PTR _f1$[ebp], ax
; Line 2489
	mov	ecx, DWORD PTR _worker$[ebp]
	movsx	edx, WORD PTR [ecx+158]
	movsx	eax, WORD PTR _c1$[ebp]
	cmp	edx, eax
	jle	SHORT $LN2@Vertical_S
; Line 2490
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	dx, WORD PTR _c1$[ebp]
	mov	WORD PTR [ecx+158], dx
$LN2@Vertical_S:
; Line 2491
	mov	eax, DWORD PTR _worker$[ebp]
	movsx	ecx, WORD PTR [eax+160]
	movsx	edx, WORD PTR _c1$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN1@Vertical_S
; Line 2492
	mov	eax, DWORD PTR _worker$[ebp]
	mov	cx, WORD PTR _c1$[ebp]
	mov	WORD PTR [eax+160], cx
$LN1@Vertical_S:
; Line 2494
	movsx	edx, WORD PTR _c1$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [eax+148]
	add	eax, edx
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movsx	ecx, WORD PTR _f1$[ebp]
	mov	ebx, 128				; 00000080H
	sar	ebx, cl
	movsx	ecx, bl
	movzx	edx, BYTE PTR [edx+eax]
	or	edx, ecx
	movsx	eax, WORD PTR _c1$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [ecx+148]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	mov	BYTE PTR [ecx+eax], dl
$LN23@Vertical_S:
; Line 2496
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN27@Vertical_S:
	DD	$LN18@Vertical_S
	DD	$LN16@Vertical_S
	DD	$LN9@Vertical_S
	DD	$LN9@Vertical_S
	DD	$LN17@Vertical_S
	DD	$LN16@Vertical_S
_Vertical_Sweep_Drop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_f2$1 = -26						; size = 1
_f1$2 = -25						; size = 1
_c2$3 = -24						; size = 4
_c1$4 = -20						; size = 4
_dropOutControl$ = -16					; size = 4
_target$ = -12						; size = 4
_e2$ = -8						; size = 4
_e1$ = -4						; size = 4
_worker$ = 8						; size = 4
_y$ = 12						; size = 2
_x1$ = 16						; size = 4
_x2$ = 20						; size = 4
_left$ = 24						; size = 4
_right$ = 28						; size = 4
_Vertical_Sweep_Span PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2283
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2287
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 7
	mov	DWORD PTR _dropOutControl$[ebp], ecx
; Line 2289
	mov	dx, WORD PTR _y$[ebp]
	mov	WORD PTR _y$[ebp], dx
; Line 2290
	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _left$[ebp], eax
; Line 2291
	mov	ecx, DWORD PTR _right$[ebp]
	mov	DWORD PTR _right$[ebp], ecx
; Line 2296
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _x1$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	and	edx, ecx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	edx, cl
	mov	DWORD PTR _e1$[ebp], edx
; Line 2299
	cmp	DWORD PTR _dropOutControl$[ebp], 2
	je	SHORT $LN11@Vertical_S
	mov	ecx, DWORD PTR _x2$[ebp]
	sub	ecx, DWORD PTR _x1$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	sub	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jg	SHORT $LN11@Vertical_S
; Line 2300
	mov	ecx, DWORD PTR _e1$[ebp]
	mov	DWORD PTR _e2$[ebp], ecx
; Line 2301
	jmp	SHORT $LN10@Vertical_S
$LN11@Vertical_S:
; Line 2302
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	neg	eax
	and	eax, DWORD PTR _x2$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sar	eax, cl
	mov	DWORD PTR _e2$[ebp], eax
$LN10@Vertical_S:
; Line 2304
	cmp	DWORD PTR _e2$[ebp], 0
	jl	$LN12@Vertical_S
	mov	edx, DWORD PTR _worker$[ebp]
	movzx	eax, WORD PTR [edx+56]
	cmp	DWORD PTR _e1$[ebp], eax
	jge	$LN12@Vertical_S
; Line 2310
	cmp	DWORD PTR _e1$[ebp], 0
	jge	SHORT $LN8@Vertical_S
; Line 2311
	mov	DWORD PTR _e1$[ebp], 0
$LN8@Vertical_S:
; Line 2312
	mov	ecx, DWORD PTR _worker$[ebp]
	movzx	edx, WORD PTR [ecx+56]
	cmp	DWORD PTR _e2$[ebp], edx
	jl	SHORT $LN7@Vertical_S
; Line 2313
	mov	eax, DWORD PTR _worker$[ebp]
	movzx	ecx, WORD PTR [eax+56]
	sub	ecx, 1
	mov	DWORD PTR _e2$[ebp], ecx
$LN7@Vertical_S:
; Line 2315
	mov	edx, DWORD PTR _e1$[ebp]
	sar	edx, 3
	movsx	eax, dx
	mov	DWORD PTR _c1$4[ebp], eax
; Line 2316
	mov	ecx, DWORD PTR _e2$[ebp]
	sar	ecx, 3
	movsx	edx, cx
	mov	DWORD PTR _c2$3[ebp], edx
; Line 2318
	mov	ecx, DWORD PTR _e1$[ebp]
	and	ecx, 7
	mov	eax, 255				; 000000ffH
	sar	eax, cl
	mov	BYTE PTR _f1$2[ebp], al
; Line 2319
	mov	ecx, DWORD PTR _e2$[ebp]
	and	ecx, 7
	mov	edx, 127				; 0000007fH
	sar	edx, cl
	not	edx
	mov	BYTE PTR _f2$1[ebp], dl
; Line 2321
	mov	eax, DWORD PTR _worker$[ebp]
	movsx	ecx, WORD PTR [eax+158]
	cmp	ecx, DWORD PTR _c1$4[ebp]
	jle	SHORT $LN6@Vertical_S
; Line 2322
	mov	edx, DWORD PTR _worker$[ebp]
	mov	ax, WORD PTR _c1$4[ebp]
	mov	WORD PTR [edx+158], ax
$LN6@Vertical_S:
; Line 2323
	mov	ecx, DWORD PTR _worker$[ebp]
	movsx	edx, WORD PTR [ecx+160]
	cmp	edx, DWORD PTR _c2$3[ebp]
	jge	SHORT $LN5@Vertical_S
; Line 2324
	mov	eax, DWORD PTR _worker$[ebp]
	mov	cx, WORD PTR _c2$3[ebp]
	mov	WORD PTR [eax+160], cx
$LN5@Vertical_S:
; Line 2326
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [ecx+148]
	add	eax, DWORD PTR _c1$4[ebp]
	mov	DWORD PTR _target$[ebp], eax
; Line 2327
	mov	edx, DWORD PTR _c2$3[ebp]
	sub	edx, DWORD PTR _c1$4[ebp]
	mov	DWORD PTR _c2$3[ebp], edx
; Line 2329
	cmp	DWORD PTR _c2$3[ebp], 0
	jle	SHORT $LN4@Vertical_S
; Line 2331
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR _f1$2[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	ecx, edx
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx+eax], cl
; Line 2336
	mov	eax, DWORD PTR _c2$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _c2$3[ebp], eax
$LN3@Vertical_S:
; Line 2337
	cmp	DWORD PTR _c2$3[ebp], 0
	jle	SHORT $LN2@Vertical_S
; Line 2339
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx], 255			; 000000ffH
; Line 2340
	mov	eax, DWORD PTR _c2$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _c2$3[ebp], eax
; Line 2341
	jmp	SHORT $LN3@Vertical_S
$LN2@Vertical_S:
; Line 2342
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR _f2$1[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	ecx, edx
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax+edx], cl
; Line 2344
	jmp	SHORT $LN12@Vertical_S
$LN4@Vertical_S:
; Line 2345
	movzx	ecx, BYTE PTR _f1$2[ebp]
	movzx	edx, BYTE PTR _f2$1[ebp]
	and	ecx, edx
	mov	eax, DWORD PTR _target$[ebp]
	movzx	edx, BYTE PTR [eax]
	or	edx, ecx
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], dl
$LN12@Vertical_S:
; Line 2347
	mov	esp, ebp
	pop	ebp
	ret	0
_Vertical_Sweep_Span ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pitch$ = -4						; size = 4
_worker$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
_Vertical_Sweep_Init PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2261
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2262
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _pitch$[ebp], ecx
; Line 2264
	mov	edx, DWORD PTR _max$[ebp]
	mov	DWORD PTR _max$[ebp], edx
; Line 2267
	mov	eax, DWORD PTR _pitch$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	WORD PTR [ecx+156], ax
; Line 2268
	mov	edx, DWORD PTR _min$[ebp]
	movsx	eax, WORD PTR [edx]
	neg	eax
	imul	eax, DWORD PTR _pitch$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+148], eax
; Line 2269
	cmp	DWORD PTR _pitch$[ebp], 0
	jle	SHORT $LN1@Vertical_S
; Line 2270
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+104]
	sub	eax, 1
	imul	eax, DWORD PTR _pitch$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [ecx+148]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+148], eax
$LN1@Vertical_S:
; Line 2272
	xor	eax, eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	WORD PTR [ecx+158], ax
; Line 2273
	xor	edx, edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	WORD PTR [eax+160], dx
; Line 2274
	mov	esp, ebp
	pop	ebp
	ret	0
_Vertical_Sweep_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -16						; size = 4
_next$ = -12						; size = 4
_current$ = -8						; size = 4
_old$ = -4						; size = 4
_list$ = 8						; size = 4
_Sort	PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2201
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2206
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _current$[ebp], ecx
$LN8@Sort:
; Line 2207
	cmp	DWORD PTR _current$[ebp], 0
	je	SHORT $LN7@Sort
; Line 2209
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 2210
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 8
	je	SHORT $LN11@Sort
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN12@Sort
$LN11@Sort:
	mov	DWORD PTR tv72[ebp], -1
$LN12@Sort:
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR tv72[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 2211
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, 1
	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 2212
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _current$[ebp], edx
; Line 2213
	jmp	SHORT $LN8@Sort
$LN7@Sort:
; Line 2216
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _old$[ebp], eax
; Line 2217
	mov	ecx, DWORD PTR _old$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _current$[ebp], edx
; Line 2219
	cmp	DWORD PTR _current$[ebp], 0
	jne	SHORT $LN6@Sort
; Line 2220
	jmp	SHORT $LN9@Sort
$LN6@Sort:
; Line 2222
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$[ebp], ecx
$LN5@Sort:
; Line 2224
	cmp	DWORD PTR _next$[ebp], 0
	je	SHORT $LN9@Sort
; Line 2226
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jg	SHORT $LN3@Sort
; Line 2228
	mov	edx, DWORD PTR _current$[ebp]
	add	edx, 4
	mov	DWORD PTR _old$[ebp], edx
; Line 2229
	mov	eax, DWORD PTR _old$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _current$[ebp], ecx
; Line 2231
	cmp	DWORD PTR _current$[ebp], 0
	jne	SHORT $LN2@Sort
; Line 2232
	jmp	SHORT $LN9@Sort
$LN2@Sort:
; Line 2234
	jmp	SHORT $LN1@Sort
$LN3@Sort:
; Line 2236
	mov	edx, DWORD PTR _old$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx], eax
; Line 2237
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR _next$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
; Line 2238
	mov	ecx, DWORD PTR _next$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 2240
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _old$[ebp], eax
; Line 2241
	mov	ecx, DWORD PTR _old$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _current$[ebp], edx
$LN1@Sort:
; Line 2244
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$[ebp], ecx
; Line 2245
	jmp	SHORT $LN5@Sort
$LN9@Sort:
; Line 2246
	mov	esp, ebp
	pop	ebp
	ret	0
_Sort	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_current$ = -8						; size = 4
_old$ = -4						; size = 4
_list$ = 8						; size = 4
_profile$ = 12						; size = 4
_DelOld	PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2167
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2171
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _old$[ebp], eax
; Line 2172
	mov	ecx, DWORD PTR _old$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _current$[ebp], edx
$LN3@DelOld:
; Line 2174
	cmp	DWORD PTR _current$[ebp], 0
	je	SHORT $LN4@DelOld
; Line 2176
	mov	eax, DWORD PTR _current$[ebp]
	cmp	eax, DWORD PTR _profile$[ebp]
	jne	SHORT $LN1@DelOld
; Line 2178
	mov	ecx, DWORD PTR _old$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax
; Line 2179
	jmp	SHORT $LN4@DelOld
$LN1@DelOld:
; Line 2182
	mov	ecx, DWORD PTR _current$[ebp]
	add	ecx, 4
	mov	DWORD PTR _old$[ebp], ecx
; Line 2183
	mov	edx, DWORD PTR _old$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _current$[ebp], eax
; Line 2184
	jmp	SHORT $LN3@DelOld
$LN4@DelOld:
; Line 2188
	mov	esp, ebp
	pop	ebp
	ret	0
_DelOld	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_x$ = -12						; size = 4
_current$ = -8						; size = 4
_old$ = -4						; size = 4
_list$ = 8						; size = 4
_profile$ = 12						; size = 4
_InsNew	PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2136
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2141
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _old$[ebp], eax
; Line 2142
	mov	ecx, DWORD PTR _old$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _current$[ebp], edx
; Line 2143
	mov	eax, DWORD PTR _profile$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$[ebp], ecx
$LN3@InsNew:
; Line 2145
	cmp	DWORD PTR _current$[ebp], 0
	je	SHORT $LN2@InsNew
; Line 2147
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN1@InsNew
; Line 2148
	jmp	SHORT $LN2@InsNew
$LN1@InsNew:
; Line 2149
	mov	ecx, DWORD PTR _current$[ebp]
	add	ecx, 4
	mov	DWORD PTR _old$[ebp], ecx
; Line 2150
	mov	edx, DWORD PTR _old$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _current$[ebp], eax
; Line 2151
	jmp	SHORT $LN3@InsNew
$LN2@InsNew:
; Line 2153
	mov	ecx, DWORD PTR _profile$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 2154
	mov	eax, DWORD PTR _old$[ebp]
	mov	ecx, DWORD PTR _profile$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 2155
	mov	esp, ebp
	pop	ebp
	ret	0
_InsNew	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l$ = 8							; size = 4
_Init_Linked PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2122
	push	ebp
	mov	ebp, esp
; Line 2123
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2124
	pop	ebp
	ret	0
_Init_Linked ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv196 = -20						; size = 4
tv179 = -15						; size = 1
tv167 = -14						; size = 1
_o$1 = -13						; size = 1
_lastProfile$2 = -12					; size = 4
_start$ = -8						; size = 4
_i$ = -4						; size = 4
_worker$ = 8						; size = 4
_flipped$ = 12						; size = 4
_Convert_Glyph PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 2039
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2044
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 2045
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [ecx+87], 0
; Line 2046
	mov	edx, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [edx+86], 0
; Line 2048
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 2050
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 2052
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+88], eax
; Line 2053
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+8], ecx
; Line 2054
	xor	edx, edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	WORD PTR [eax+84], dx
; Line 2056
	mov	DWORD PTR _start$[ebp], 0
; Line 2058
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@Convert_Gl
$LN10@Convert_Gl:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@Convert_Gl:
	mov	edx, DWORD PTR _worker$[ebp]
	movsx	eax, WORD PTR [edx+128]
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN9@Convert_Gl
; Line 2064
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+100], 0
; Line 2065
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+96], 0
; Line 2069
	mov	eax, DWORD PTR _flipped$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2]
	push	ecx
	movzx	edx, WORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_Decompose_Curve
	add	esp, 16					; 00000010H
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@Convert_Gl
; Line 2070
	mov	al, 1
	jmp	$LN12@Convert_Gl
$LN8@Convert_Gl:
; Line 2072
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	add	edx, 1
	mov	DWORD PTR _start$[ebp], edx
; Line 2077
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _worker$[ebp]
	and	ecx, DWORD PTR [edx+72]
	jne	SHORT $LN7@Convert_Gl
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+76]
	jl	SHORT $LN7@Convert_Gl
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+80]
	jg	SHORT $LN7@Convert_Gl
; Line 2080
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $LN7@Convert_Gl
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 8
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	ecx, DWORD PTR [edx+12]
	and	ecx, 8
	cmp	eax, ecx
	jne	SHORT $LN7@Convert_Gl
; Line 2081
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 4
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+40], eax
$LN7@Convert_Gl:
; Line 2085
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR _lastProfile$2[ebp], eax
; Line 2086
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 8
	je	SHORT $LN5@Convert_Gl
; Line 2087
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	mov	eax, DWORD PTR _worker$[ebp]
	and	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	sub	eax, edx
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jl	SHORT $LN14@Convert_Gl
	mov	BYTE PTR tv167[ebp], 1
	jmp	SHORT $LN15@Convert_Gl
$LN14@Convert_Gl:
	mov	BYTE PTR tv167[ebp], 0
$LN15@Convert_Gl:
	mov	dl, BYTE PTR tv167[ebp]
	mov	BYTE PTR _o$1[ebp], dl
; Line 2088
	jmp	SHORT $LN4@Convert_Gl
$LN5@Convert_Gl:
; Line 2089
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	neg	eax
	and	ecx, eax
	mov	edx, DWORD PTR _worker$[ebp]
	sub	ecx, DWORD PTR [edx+72]
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN16@Convert_Gl
	mov	BYTE PTR tv179[ebp], 1
	jmp	SHORT $LN17@Convert_Gl
$LN16@Convert_Gl:
	mov	BYTE PTR tv179[ebp], 0
$LN17@Convert_Gl:
	mov	cl, BYTE PTR tv179[ebp]
	mov	BYTE PTR _o$1[ebp], cl
$LN4@Convert_Gl:
; Line 2090
	movzx	edx, BYTE PTR _o$1[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_End_Profile
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Convert_Gl
; Line 2091
	mov	al, 1
	jmp	SHORT $LN12@Convert_Gl
$LN3@Convert_Gl:
; Line 2094
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [edx+96], 0
	je	SHORT $LN2@Convert_Gl
; Line 2095
	mov	eax, DWORD PTR _lastProfile$2[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+28], edx
$LN2@Convert_Gl:
; Line 2096
	jmp	$LN10@Convert_Gl
$LN9@Convert_Gl:
; Line 2098
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_Finalize_Profile_Table
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Convert_Gl
; Line 2099
	mov	al, 1
	jmp	SHORT $LN12@Convert_Gl
$LN1@Convert_Gl:
; Line 2101
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	cmp	ecx, DWORD PTR [eax+36]
	jae	SHORT $LN18@Convert_Gl
	mov	DWORD PTR tv196[ebp], 0
	jmp	SHORT $LN19@Convert_Gl
$LN18@Convert_Gl:
	mov	DWORD PTR tv196[ebp], 1
$LN19@Convert_Gl:
	mov	al, BYTE PTR tv196[ebp]
$LN12@Convert_Gl:
; Line 2102
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Convert_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv181 = -160						; size = 4
_swap$1 = -156						; size = 4
_swap$2 = -152						; size = 4
_swap$3 = -148						; size = 4
_y3$4 = -144						; size = 4
_x3$5 = -140						; size = 4
_y2$6 = -136						; size = 4
_x2$7 = -132						; size = 4
_y1$8 = -128						; size = 4
_x1$9 = -124						; size = 4
_swap$10 = -120						; size = 4
_y$11 = -116						; size = 4
_x$12 = -112						; size = 4
_v_middle$13 = -104					; size = 8
_swap$14 = -92						; size = 4
_swap$15 = -88						; size = 4
_y$16 = -84						; size = 4
_x$17 = -80						; size = 4
_swap$18 = -76						; size = 4
_swap$19 = -72						; size = 4
_tag$ = -68						; size = 4
_tags$ = -64						; size = 4
_limit$ = -60						; size = 4
_point$ = -56						; size = 4
_points$ = -52						; size = 4
_v_start$ = -44						; size = 8
_v_control$ = -28					; size = 8
_v_last$ = -12						; size = 8
_worker$ = 8						; size = 4
_first$ = 12						; size = 2
_last$ = 16						; size = 2
_flipped$ = 20						; size = 4
_Decompose_Curve PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 1817
	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	edi
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1830
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _points$[ebp], ecx
; Line 1831
	movzx	edx, WORD PTR _last$[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 1833
	movzx	edx, WORD PTR _first$[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+edx*8]
	mov	ecx, DWORD PTR [ecx+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v_start$[ebp], edx
; Line 1834
	movzx	ecx, WORD PTR _first$[ebp]
	mov	edx, DWORD PTR _points$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [edx+ecx*8+4]
	mov	ecx, DWORD PTR [eax+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v_start$[ebp+4], edx
; Line 1835
	movzx	ecx, WORD PTR _last$[ebp]
	mov	edx, DWORD PTR _points$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [eax+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v_last$[ebp], edx
; Line 1836
	movzx	ecx, WORD PTR _last$[ebp]
	mov	edx, DWORD PTR _points$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [edx+ecx*8+4]
	mov	ecx, DWORD PTR [eax+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v_last$[ebp+4], edx
; Line 1838
	cmp	DWORD PTR _flipped$[ebp], 0
	je	SHORT $LN55@Decompose_
$LN54@Decompose_:
; Line 1840
	mov	ecx, DWORD PTR _v_start$[ebp]
	mov	DWORD PTR _swap$19[ebp], ecx
	mov	edx, DWORD PTR _v_start$[ebp+4]
	mov	DWORD PTR _v_start$[ebp], edx
	mov	eax, DWORD PTR _swap$19[ebp]
	mov	DWORD PTR _v_start$[ebp+4], eax
	xor	ecx, ecx
	jne	SHORT $LN54@Decompose_
$LN51@Decompose_:
; Line 1841
	mov	edx, DWORD PTR _v_last$[ebp]
	mov	DWORD PTR _swap$18[ebp], edx
	mov	eax, DWORD PTR _v_last$[ebp+4]
	mov	DWORD PTR _v_last$[ebp], eax
	mov	ecx, DWORD PTR _swap$18[ebp]
	mov	DWORD PTR _v_last$[ebp+4], ecx
	xor	edx, edx
	jne	SHORT $LN51@Decompose_
$LN55@Decompose_:
; Line 1844
	mov	eax, DWORD PTR _v_start$[ebp]
	mov	DWORD PTR _v_control$[ebp], eax
	mov	ecx, DWORD PTR _v_start$[ebp+4]
	mov	DWORD PTR _v_control$[ebp+4], ecx
; Line 1846
	movzx	edx, WORD PTR _first$[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _point$[ebp], ecx
; Line 1847
	movzx	edx, WORD PTR _first$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	add	edx, DWORD PTR [eax+136]
	mov	DWORD PTR _tags$[ebp], edx
; Line 1850
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _tags$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	and	ecx, 4
	je	SHORT $LN48@Decompose_
; Line 1851
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _tags$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	sar	edx, 5
	mov	eax, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [eax+180], dl
$LN48@Decompose_:
; Line 1853
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _tags$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	and	ecx, 3
	mov	DWORD PTR _tag$[ebp], ecx
; Line 1856
	cmp	DWORD PTR _tag$[ebp], 2
	jne	SHORT $LN47@Decompose_
; Line 1857
	jmp	$Invalid_Outline$66
$LN47@Decompose_:
; Line 1860
	cmp	DWORD PTR _tag$[ebp], 0
	jne	SHORT $LN46@Decompose_
; Line 1863
	movzx	edx, WORD PTR _last$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	movsx	edx, BYTE PTR [ecx+edx]
	and	edx, 3
	cmp	edx, 1
	jne	SHORT $LN45@Decompose_
; Line 1866
	mov	eax, DWORD PTR _v_last$[ebp]
	mov	DWORD PTR _v_start$[ebp], eax
	mov	ecx, DWORD PTR _v_last$[ebp+4]
	mov	DWORD PTR _v_start$[ebp+4], ecx
; Line 1867
	mov	edx, DWORD PTR _limit$[ebp]
	sub	edx, 8
	mov	DWORD PTR _limit$[ebp], edx
; Line 1869
	jmp	SHORT $LN44@Decompose_
$LN45@Decompose_:
; Line 1874
	mov	eax, DWORD PTR _v_start$[ebp]
	add	eax, DWORD PTR _v_last$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_start$[ebp], eax
; Line 1875
	mov	eax, DWORD PTR _v_start$[ebp+4]
	add	eax, DWORD PTR _v_last$[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_start$[ebp+4], eax
$LN44@Decompose_:
; Line 1879
	mov	eax, DWORD PTR _point$[ebp]
	sub	eax, 8
	mov	DWORD PTR _point$[ebp], eax
; Line 1880
	mov	ecx, DWORD PTR _tags$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _tags$[ebp], ecx
$LN46@Decompose_:
; Line 1883
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _v_start$[ebp]
	mov	DWORD PTR [edx+68], eax
; Line 1884
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _v_start$[ebp+4]
	mov	DWORD PTR [ecx+72], edx
$LN43@Decompose_:
; Line 1886
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN42@Decompose_
; Line 1888
	mov	ecx, DWORD PTR _point$[ebp]
	add	ecx, 8
	mov	DWORD PTR _point$[ebp], ecx
; Line 1889
	mov	edx, DWORD PTR _tags$[ebp]
	add	edx, 1
	mov	DWORD PTR _tags$[ebp], edx
; Line 1891
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tags$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	and	eax, 3
	mov	DWORD PTR _tag$[ebp], eax
; Line 1893
	mov	ecx, DWORD PTR _tag$[ebp]
	mov	DWORD PTR tv181[ebp], ecx
	cmp	DWORD PTR tv181[ebp], 0
	je	SHORT $LN33@Decompose_
	cmp	DWORD PTR tv181[ebp], 1
	je	SHORT $LN39@Decompose_
	jmp	$LN18@Decompose_
$LN39@Decompose_:
; Line 1900
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$17[ebp], edx
; Line 1901
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+24]
	shl	eax, cl
	mov	ecx, DWORD PTR _worker$[ebp]
	sub	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _y$16[ebp], eax
; Line 1902
	cmp	DWORD PTR _flipped$[ebp], 0
	je	SHORT $LN38@Decompose_
$LN37@Decompose_:
; Line 1903
	mov	edx, DWORD PTR _x$17[ebp]
	mov	DWORD PTR _swap$15[ebp], edx
	mov	eax, DWORD PTR _y$16[ebp]
	mov	DWORD PTR _x$17[ebp], eax
	mov	ecx, DWORD PTR _swap$15[ebp]
	mov	DWORD PTR _y$16[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN37@Decompose_
$LN38@Decompose_:
; Line 1905
	mov	eax, DWORD PTR _y$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$17[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_Line_To
	add	esp, 12					; 0000000cH
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN34@Decompose_
; Line 1906
	jmp	$Fail$67
$LN34@Decompose_:
; Line 1907
	jmp	$LN43@Decompose_
$LN33@Decompose_:
; Line 1911
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR [ecx+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v_control$[ebp], edx
; Line 1912
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	ecx, DWORD PTR [ecx+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v_control$[ebp+4], edx
; Line 1914
	cmp	DWORD PTR _flipped$[ebp], 0
	je	SHORT $Do_Conic$68
$LN31@Decompose_:
; Line 1915
	mov	ecx, DWORD PTR _v_control$[ebp]
	mov	DWORD PTR _swap$14[ebp], ecx
	mov	edx, DWORD PTR _v_control$[ebp+4]
	mov	DWORD PTR _v_control$[ebp], edx
	mov	eax, DWORD PTR _swap$14[ebp]
	mov	DWORD PTR _v_control$[ebp+4], eax
	xor	ecx, ecx
	jne	SHORT $LN31@Decompose_
$Do_Conic$68:
; Line 1918
	mov	edx, DWORD PTR _point$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	$LN28@Decompose_
; Line 1924
	mov	eax, DWORD PTR _point$[ebp]
	add	eax, 8
	mov	DWORD PTR _point$[ebp], eax
; Line 1925
	mov	ecx, DWORD PTR _tags$[ebp]
	add	ecx, 1
	mov	DWORD PTR _tags$[ebp], ecx
; Line 1926
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _tags$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	and	edx, 3
	mov	DWORD PTR _tag$[ebp], edx
; Line 1928
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [eax+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$12[ebp], edx
; Line 1929
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	ecx, DWORD PTR [ecx+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _y$11[ebp], edx
; Line 1931
	cmp	DWORD PTR _flipped$[ebp], 0
	je	SHORT $LN27@Decompose_
$LN26@Decompose_:
; Line 1932
	mov	ecx, DWORD PTR _x$12[ebp]
	mov	DWORD PTR _swap$10[ebp], ecx
	mov	edx, DWORD PTR _y$11[ebp]
	mov	DWORD PTR _x$12[ebp], edx
	mov	eax, DWORD PTR _swap$10[ebp]
	mov	DWORD PTR _y$11[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN26@Decompose_
$LN27@Decompose_:
; Line 1934
	cmp	DWORD PTR _tag$[ebp], 1
	jne	SHORT $LN23@Decompose_
; Line 1936
	mov	edx, DWORD PTR _y$11[ebp]
	push	edx
	mov	eax, DWORD PTR _x$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_control$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_control$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_Conic_To
	add	esp, 20					; 00000014H
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN22@Decompose_
; Line 1937
	jmp	$Fail$67
$LN22@Decompose_:
; Line 1938
	jmp	$LN43@Decompose_
$LN23@Decompose_:
; Line 1941
	cmp	DWORD PTR _tag$[ebp], 0
	je	SHORT $LN21@Decompose_
; Line 1942
	jmp	$Invalid_Outline$66
$LN21@Decompose_:
; Line 1944
	mov	eax, DWORD PTR _v_control$[ebp]
	add	eax, DWORD PTR _x$12[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_middle$13[ebp], eax
; Line 1945
	mov	eax, DWORD PTR _v_control$[ebp+4]
	add	eax, DWORD PTR _y$11[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_middle$13[ebp+4], eax
; Line 1948
	mov	edx, DWORD PTR _v_middle$13[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v_middle$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_control$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_control$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_Conic_To
	add	esp, 20					; 00000014H
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@Decompose_
; Line 1949
	jmp	$Fail$67
$LN20@Decompose_:
; Line 1951
	mov	edx, DWORD PTR _x$12[ebp]
	mov	DWORD PTR _v_control$[ebp], edx
; Line 1952
	mov	eax, DWORD PTR _y$11[ebp]
	mov	DWORD PTR _v_control$[ebp+4], eax
; Line 1954
	jmp	$Do_Conic$68
$LN28@Decompose_:
; Line 1958
	mov	ecx, DWORD PTR _v_start$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_start$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_control$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _v_control$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_Conic_To
	add	esp, 20					; 00000014H
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN19@Decompose_
; Line 1959
	jmp	$Fail$67
$LN19@Decompose_:
; Line 1961
	jmp	$Close$69
$LN18@Decompose_:
; Line 1969
	mov	ecx, DWORD PTR _point$[ebp]
	add	ecx, 8
	cmp	ecx, DWORD PTR _limit$[ebp]
	ja	SHORT $LN16@Decompose_
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _tags$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	and	ecx, 3
	cmp	ecx, 2
	je	SHORT $LN17@Decompose_
$LN16@Decompose_:
; Line 1970
	jmp	$Invalid_Outline$66
$LN17@Decompose_:
; Line 1972
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _point$[ebp], edx
; Line 1973
	mov	eax, DWORD PTR _tags$[ebp]
	add	eax, 2
	mov	DWORD PTR _tags$[ebp], eax
; Line 1975
	mov	ecx, 8
	imul	edx, ecx, -2
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR [ecx+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _x1$9[ebp], edx
; Line 1976
	mov	ecx, 8
	imul	edx, ecx, -2
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	ecx, DWORD PTR [ecx+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _y1$8[ebp], edx
; Line 1977
	mov	ecx, 8
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR [ecx+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _x2$7[ebp], edx
; Line 1978
	mov	ecx, 8
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	ecx, DWORD PTR [ecx+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _y2$6[ebp], edx
; Line 1980
	cmp	DWORD PTR _flipped$[ebp], 0
	je	SHORT $LN15@Decompose_
$LN14@Decompose_:
; Line 1982
	mov	ecx, DWORD PTR _x1$9[ebp]
	mov	DWORD PTR _swap$3[ebp], ecx
	mov	edx, DWORD PTR _y1$8[ebp]
	mov	DWORD PTR _x1$9[ebp], edx
	mov	eax, DWORD PTR _swap$3[ebp]
	mov	DWORD PTR _y1$8[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN14@Decompose_
$LN11@Decompose_:
; Line 1983
	mov	edx, DWORD PTR _x2$7[ebp]
	mov	DWORD PTR _swap$2[ebp], edx
	mov	eax, DWORD PTR _y2$6[ebp]
	mov	DWORD PTR _x2$7[ebp], eax
	mov	ecx, DWORD PTR _swap$2[ebp]
	mov	DWORD PTR _y2$6[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN11@Decompose_
$LN15@Decompose_:
; Line 1986
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	ja	$LN8@Decompose_
; Line 1988
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR [ecx+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _x3$5[ebp], edx
; Line 1989
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _point$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	ecx, DWORD PTR [ecx+24]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _y3$4[ebp], edx
; Line 1991
	cmp	DWORD PTR _flipped$[ebp], 0
	je	SHORT $LN7@Decompose_
$LN6@Decompose_:
; Line 1992
	mov	ecx, DWORD PTR _x3$5[ebp]
	mov	DWORD PTR _swap$1[ebp], ecx
	mov	edx, DWORD PTR _y3$4[ebp]
	mov	DWORD PTR _x3$5[ebp], edx
	mov	eax, DWORD PTR _swap$1[ebp]
	mov	DWORD PTR _y3$4[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN6@Decompose_
$LN7@Decompose_:
; Line 1994
	mov	edx, DWORD PTR _y3$4[ebp]
	push	edx
	mov	eax, DWORD PTR _x3$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _y2$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$7[ebp]
	push	edx
	mov	eax, DWORD PTR _y1$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_Cubic_To
	add	esp, 28					; 0000001cH
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN3@Decompose_
; Line 1995
	jmp	SHORT $Fail$67
$LN3@Decompose_:
; Line 1996
	jmp	$LN43@Decompose_
$LN8@Decompose_:
; Line 1999
	mov	ecx, DWORD PTR _v_start$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_start$[ebp]
	push	edx
	mov	eax, DWORD PTR _y2$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _x2$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _y1$8[ebp]
	push	edx
	mov	eax, DWORD PTR _x1$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_Cubic_To
	add	esp, 28					; 0000001cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@Decompose_
; Line 2000
	jmp	SHORT $Fail$67
$LN2@Decompose_:
; Line 2001
	jmp	SHORT $Close$69
; Line 2004
	jmp	$LN43@Decompose_
$LN42@Decompose_:
; Line 2007
	mov	eax, DWORD PTR _v_start$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _v_start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_Line_To
	add	esp, 12					; 0000000cH
	movsx	eax, al
	test	eax, eax
	je	SHORT $Close$69
; Line 2008
	jmp	SHORT $Fail$67
$Close$69:
; Line 2011
	xor	al, al
	jmp	SHORT $LN56@Decompose_
$Invalid_Outline$66:
; Line 2014
	push	OFFSET $SG7775
	push	2014					; 000007deH
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+44], eax
$Fail$67:
; Line 2017
	mov	al, 1
$LN56@Decompose_:
; Line 2018
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN65@Decompose_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 160				; 000000a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN65@Decompose_:
	DD	4
	DD	$LN64@Decompose_
$LN64@Decompose_:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN60@Decompose_
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN61@Decompose_
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN62@Decompose_
	DD	-104					; ffffff98H
	DD	8
	DD	$LN63@Decompose_
$LN63@Decompose_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN62@Decompose_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN61@Decompose_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN60@Decompose_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_Decompose_Curve ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv187 = -57						; size = 1
tv189 = -56						; size = 4
tv179 = -49						; size = 1
tv166 = -48						; size = 4
_o$1 = -41						; size = 1
_state_bez$ = -40					; size = 4
_ymax2$ = -36						; size = 4
_ymin2$ = -32						; size = 4
_ymax1$ = -28						; size = 4
_ymin1$ = -24						; size = 4
_x4$ = -20						; size = 4
_y4$ = -16						; size = 4
_y3$ = -12						; size = 4
_y2$ = -8						; size = 4
_y1$ = -4						; size = 4
_worker$ = 8						; size = 4
_cx1$ = 12						; size = 4
_cy1$ = 16						; size = 4
_cx2$ = 20						; size = 4
_cy2$ = 24						; size = 4
_x$ = 28						; size = 4
_y$ = 32						; size = 4
_Cubic_To PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 1680
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1685
	mov	eax, DWORD PTR _worker$[ebp]
	add	eax, 184				; 000000b8H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 1686
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [ecx+68]
	mov	DWORD PTR [edx+eax], ecx
; Line 1687
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	mov	DWORD PTR [edx+eax+4], ecx
; Line 1688
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _cx1$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 1689
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _cy1$[ebp]
	mov	DWORD PTR [eax+ecx+4], edx
; Line 1690
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _cx2$[ebp]
	mov	DWORD PTR [edx+eax], ecx
; Line 1691
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _cy2$[ebp]
	mov	DWORD PTR [ecx+edx+4], eax
; Line 1692
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 1693
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx+edx+4], eax
$LN19@Cubic_To:
; Line 1697
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+edx+4]
	mov	DWORD PTR _y1$[ebp], edx
; Line 1698
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+eax+4]
	mov	DWORD PTR _y2$[ebp], eax
; Line 1699
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR _y3$[ebp], ecx
; Line 1700
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+eax+4]
	mov	DWORD PTR _y4$[ebp], eax
; Line 1701
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _x4$[ebp], edx
; Line 1705
	mov	eax, DWORD PTR _y1$[ebp]
	cmp	eax, DWORD PTR _y4$[ebp]
	jg	SHORT $LN16@Cubic_To
; Line 1707
	mov	ecx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _ymin1$[ebp], ecx
; Line 1708
	mov	edx, DWORD PTR _y4$[ebp]
	mov	DWORD PTR _ymax1$[ebp], edx
; Line 1710
	jmp	SHORT $LN15@Cubic_To
$LN16@Cubic_To:
; Line 1712
	mov	eax, DWORD PTR _y4$[ebp]
	mov	DWORD PTR _ymin1$[ebp], eax
; Line 1713
	mov	ecx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _ymax1$[ebp], ecx
$LN15@Cubic_To:
; Line 1716
	mov	edx, DWORD PTR _y2$[ebp]
	cmp	edx, DWORD PTR _y3$[ebp]
	jg	SHORT $LN14@Cubic_To
; Line 1718
	mov	eax, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _ymin2$[ebp], eax
; Line 1719
	mov	ecx, DWORD PTR _y3$[ebp]
	mov	DWORD PTR _ymax2$[ebp], ecx
; Line 1721
	jmp	SHORT $LN13@Cubic_To
$LN14@Cubic_To:
; Line 1723
	mov	edx, DWORD PTR _y3$[ebp]
	mov	DWORD PTR _ymin2$[ebp], edx
; Line 1724
	mov	eax, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _ymax2$[ebp], eax
$LN13@Cubic_To:
; Line 1727
	mov	ecx, DWORD PTR _ymin2$[ebp]
	cmp	ecx, DWORD PTR _ymin1$[ebp]
	jl	SHORT $LN11@Cubic_To
	mov	edx, DWORD PTR _ymax2$[ebp]
	cmp	edx, DWORD PTR _ymax1$[ebp]
	jle	SHORT $LN12@Cubic_To
$LN11@Cubic_To:
; Line 1730
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_Split_Cubic
	add	esp, 4
; Line 1731
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+52]
	add	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+52], eax
	jmp	$LN18@Cubic_To
$LN12@Cubic_To:
; Line 1733
	mov	edx, DWORD PTR _y1$[ebp]
	cmp	edx, DWORD PTR _y4$[ebp]
	jne	SHORT $LN9@Cubic_To
; Line 1736
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	sub	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+52], ecx
; Line 1738
	jmp	$LN18@Cubic_To
$LN9@Cubic_To:
; Line 1740
	mov	eax, DWORD PTR _y1$[ebp]
	cmp	eax, DWORD PTR _y4$[ebp]
	jg	SHORT $LN22@Cubic_To
	mov	DWORD PTR tv166[ebp], 1
	jmp	SHORT $LN23@Cubic_To
$LN22@Cubic_To:
	mov	DWORD PTR tv166[ebp], 2
$LN23@Cubic_To:
	mov	ecx, DWORD PTR tv166[ebp]
	mov	DWORD PTR _state_bez$[ebp], ecx
; Line 1743
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+100]
	cmp	eax, DWORD PTR _state_bez$[ebp]
	je	$LN7@Cubic_To
; Line 1746
	cmp	DWORD PTR _state_bez$[ebp], 1
	jne	SHORT $LN28@Cubic_To
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _y1$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	neg	eax
	and	ecx, eax
	sub	ecx, DWORD PTR _y1$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	jl	SHORT $LN24@Cubic_To
	mov	BYTE PTR tv179[ebp], 1
	jmp	SHORT $LN25@Cubic_To
$LN24@Cubic_To:
	mov	BYTE PTR tv179[ebp], 0
$LN25@Cubic_To:
	movsx	eax, BYTE PTR tv179[ebp]
	mov	DWORD PTR tv189[ebp], eax
	jmp	SHORT $LN29@Cubic_To
$LN28@Cubic_To:
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	and	edx, DWORD PTR _y1$[ebp]
	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, edx
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jl	SHORT $LN26@Cubic_To
	mov	BYTE PTR tv187[ebp], 1
	jmp	SHORT $LN27@Cubic_To
$LN26@Cubic_To:
	mov	BYTE PTR tv187[ebp], 0
$LN27@Cubic_To:
	movsx	edx, BYTE PTR tv187[ebp]
	mov	DWORD PTR tv189[ebp], edx
$LN29@Cubic_To:
	mov	al, BYTE PTR tv189[ebp]
	mov	BYTE PTR _o$1[ebp], al
; Line 1751
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [ecx+100], 0
	je	SHORT $LN6@Cubic_To
	movzx	edx, BYTE PTR _o$1[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_End_Profile
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@Cubic_To
; Line 1752
	jmp	$Fail$30
$LN6@Cubic_To:
; Line 1754
	movzx	edx, BYTE PTR _o$1[ebp]
	push	edx
	mov	eax, DWORD PTR _state_bez$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_New_Profile
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@Cubic_To
; Line 1755
	jmp	$Fail$30
$LN7@Cubic_To:
; Line 1759
	cmp	DWORD PTR _state_bez$[ebp], 1
	jne	SHORT $LN4@Cubic_To
; Line 1761
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	push	OFFSET _Split_Cubic
	push	3
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_Bezier_Up
	add	esp, 20					; 00000014H
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@Cubic_To
; Line 1762
	jmp	SHORT $Fail$30
$LN3@Cubic_To:
; Line 1764
	jmp	SHORT $LN18@Cubic_To
$LN4@Cubic_To:
; Line 1765
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	push	OFFSET _Split_Cubic
	push	3
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_Bezier_Down
	add	esp, 20					; 00000014H
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN18@Cubic_To
; Line 1766
	jmp	SHORT $Fail$30
$LN18@Cubic_To:
; Line 1769
	mov	eax, DWORD PTR _worker$[ebp]
	add	eax, 184				; 000000b8H
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [ecx+52], eax
	jae	$LN19@Cubic_To
; Line 1771
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _x4$[ebp]
	mov	DWORD PTR [edx+68], eax
; Line 1772
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _y4$[ebp]
	mov	DWORD PTR [ecx+72], edx
; Line 1774
	xor	al, al
	jmp	SHORT $LN20@Cubic_To
$Fail$30:
; Line 1777
	mov	al, 1
$LN20@Cubic_To:
; Line 1778
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Cubic_To ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv174 = -45						; size = 1
tv176 = -44						; size = 4
tv166 = -37						; size = 1
tv153 = -36						; size = 4
_o$1 = -29						; size = 1
_state_bez$ = -28					; size = 4
_ymax$ = -24						; size = 4
_ymin$ = -20						; size = 4
_x3$ = -16						; size = 4
_y3$ = -12						; size = 4
_y2$ = -8						; size = 4
_y1$ = -4						; size = 4
_worker$ = 8						; size = 4
_cx$ = 12						; size = 4
_cy$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_Conic_To PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 1558
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1563
	mov	eax, DWORD PTR _worker$[ebp]
	add	eax, 184				; 000000b8H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 1564
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [eax+68]
	mov	DWORD PTR [ecx+edx], eax
; Line 1565
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	DWORD PTR [eax+ecx+4], edx
; Line 1566
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _cx$[ebp]
	mov	DWORD PTR [edx+eax], ecx
; Line 1567
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _cy$[ebp]
	mov	DWORD PTR [ecx+edx+4], eax
; Line 1568
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 1569
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx+edx+4], eax
$LN17@Conic_To:
; Line 1573
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR _y1$[ebp], ecx
; Line 1574
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+edx+4]
	mov	DWORD PTR _y2$[ebp], edx
; Line 1575
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR _y3$[ebp], ecx
; Line 1576
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _x3$[ebp], eax
; Line 1580
	mov	ecx, DWORD PTR _y1$[ebp]
	cmp	ecx, DWORD PTR _y3$[ebp]
	jg	SHORT $LN14@Conic_To
; Line 1582
	mov	edx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _ymin$[ebp], edx
; Line 1583
	mov	eax, DWORD PTR _y3$[ebp]
	mov	DWORD PTR _ymax$[ebp], eax
; Line 1585
	jmp	SHORT $LN13@Conic_To
$LN14@Conic_To:
; Line 1587
	mov	ecx, DWORD PTR _y3$[ebp]
	mov	DWORD PTR _ymin$[ebp], ecx
; Line 1588
	mov	edx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _ymax$[ebp], edx
$LN13@Conic_To:
; Line 1591
	mov	eax, DWORD PTR _y2$[ebp]
	cmp	eax, DWORD PTR _ymin$[ebp]
	jl	SHORT $LN11@Conic_To
	mov	ecx, DWORD PTR _y2$[ebp]
	cmp	ecx, DWORD PTR _ymax$[ebp]
	jle	SHORT $LN12@Conic_To
$LN11@Conic_To:
; Line 1594
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	_Split_Conic
	add	esp, 4
; Line 1595
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+52], edx
	jmp	$LN16@Conic_To
$LN12@Conic_To:
; Line 1597
	mov	ecx, DWORD PTR _y1$[ebp]
	cmp	ecx, DWORD PTR _y3$[ebp]
	jne	SHORT $LN9@Conic_To
; Line 1600
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+52]
	sub	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 1602
	jmp	$LN16@Conic_To
$LN9@Conic_To:
; Line 1606
	mov	edx, DWORD PTR _y1$[ebp]
	cmp	edx, DWORD PTR _y3$[ebp]
	jge	SHORT $LN20@Conic_To
	mov	DWORD PTR tv153[ebp], 1
	jmp	SHORT $LN21@Conic_To
$LN20@Conic_To:
	mov	DWORD PTR tv153[ebp], 2
$LN21@Conic_To:
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR _state_bez$[ebp], eax
; Line 1607
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	cmp	edx, DWORD PTR _state_bez$[ebp]
	je	$LN7@Conic_To
; Line 1610
	cmp	DWORD PTR _state_bez$[ebp], 1
	jne	SHORT $LN26@Conic_To
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _y1$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	and	eax, edx
	sub	eax, DWORD PTR _y1$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jl	SHORT $LN22@Conic_To
	mov	BYTE PTR tv166[ebp], 1
	jmp	SHORT $LN23@Conic_To
$LN22@Conic_To:
	mov	BYTE PTR tv166[ebp], 0
$LN23@Conic_To:
	movsx	edx, BYTE PTR tv166[ebp]
	mov	DWORD PTR tv176[ebp], edx
	jmp	SHORT $LN27@Conic_To
$LN26@Conic_To:
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	and	ecx, DWORD PTR _y1$[ebp]
	mov	edx, DWORD PTR _y1$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	edx, DWORD PTR [eax+8]
	jl	SHORT $LN24@Conic_To
	mov	BYTE PTR tv174[ebp], 1
	jmp	SHORT $LN25@Conic_To
$LN24@Conic_To:
	mov	BYTE PTR tv174[ebp], 0
$LN25@Conic_To:
	movsx	ecx, BYTE PTR tv174[ebp]
	mov	DWORD PTR tv176[ebp], ecx
$LN27@Conic_To:
	mov	dl, BYTE PTR tv176[ebp]
	mov	BYTE PTR _o$1[ebp], dl
; Line 1615
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $LN6@Conic_To
	movzx	ecx, BYTE PTR _o$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_End_Profile
	add	esp, 8
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN6@Conic_To
; Line 1616
	jmp	$Fail$28
$LN6@Conic_To:
; Line 1619
	movzx	ecx, BYTE PTR _o$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _state_bez$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_New_Profile
	add	esp, 12					; 0000000cH
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@Conic_To
; Line 1620
	jmp	$Fail$28
$LN7@Conic_To:
; Line 1624
	cmp	DWORD PTR _state_bez$[ebp], 1
	jne	SHORT $LN4@Conic_To
; Line 1626
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	push	OFFSET _Split_Conic
	push	2
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_Bezier_Up
	add	esp, 20					; 00000014H
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Conic_To
; Line 1627
	jmp	SHORT $Fail$28
$LN3@Conic_To:
; Line 1629
	jmp	SHORT $LN16@Conic_To
$LN4@Conic_To:
; Line 1630
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	push	OFFSET _Split_Conic
	push	2
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_Bezier_Down
	add	esp, 20					; 00000014H
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN16@Conic_To
; Line 1631
	jmp	SHORT $Fail$28
$LN16@Conic_To:
; Line 1634
	mov	edx, DWORD PTR _worker$[ebp]
	add	edx, 184				; 000000b8H
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+52], edx
	jae	$LN17@Conic_To
; Line 1636
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _x3$[ebp]
	mov	DWORD PTR [ecx+68], edx
; Line 1637
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _y3$[ebp]
	mov	DWORD PTR [eax+72], ecx
; Line 1639
	xor	al, al
	jmp	SHORT $LN18@Conic_To
$Fail$28:
; Line 1642
	mov	al, 1
$LN18@Conic_To:
; Line 1643
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Conic_To ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv207 = -16						; size = 4
tv197 = -10						; size = 1
tv180 = -9						; size = 1
tv160 = -8						; size = 1
tv146 = -7						; size = 1
tv129 = -6						; size = 1
tv80 = -5						; size = 1
tv65 = -4						; size = 4
_worker$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Line_To PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 1458
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1461
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 0
	je	SHORT $LN22@Line_To
	cmp	DWORD PTR tv65[ebp], 1
	je	$LN16@Line_To
	cmp	DWORD PTR tv65[ebp], 2
	je	$LN12@Line_To
	jmp	$LN23@Line_To
$LN22@Line_To:
; Line 1464
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR [edx+72]
	jle	SHORT $LN21@Line_To
; Line 1467
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	and	edx, ecx
	mov	eax, DWORD PTR _worker$[ebp]
	sub	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN27@Line_To
	mov	BYTE PTR tv80[ebp], 1
	jmp	SHORT $LN28@Line_To
$LN27@Line_To:
	mov	BYTE PTR tv80[ebp], 0
$LN28@Line_To:
	movzx	edx, BYTE PTR tv80[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_New_Profile
	add	esp, 12					; 0000000cH
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@Line_To
; Line 1468
	mov	al, 1
	jmp	$LN25@Line_To
$LN20@Line_To:
; Line 1470
	jmp	SHORT $LN19@Line_To
$LN21@Line_To:
; Line 1472
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR [edx+72]
	jge	SHORT $LN19@Line_To
; Line 1474
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	mov	eax, DWORD PTR _worker$[ebp]
	and	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	sub	eax, edx
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jl	SHORT $LN29@Line_To
	mov	BYTE PTR tv129[ebp], 1
	jmp	SHORT $LN30@Line_To
$LN29@Line_To:
	mov	BYTE PTR tv129[ebp], 0
$LN30@Line_To:
	movzx	edx, BYTE PTR tv129[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_New_Profile
	add	esp, 12					; 0000000cH
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN19@Line_To
; Line 1475
	mov	al, 1
	jmp	$LN25@Line_To
$LN19@Line_To:
; Line 1477
	jmp	$LN23@Line_To
$LN16@Line_To:
; Line 1480
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR [edx+72]
	jge	$LN15@Line_To
; Line 1484
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	mov	eax, DWORD PTR _worker$[ebp]
	and	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	sub	eax, edx
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jl	SHORT $LN31@Line_To
	mov	BYTE PTR tv146[ebp], 1
	jmp	SHORT $LN32@Line_To
$LN31@Line_To:
	mov	BYTE PTR tv146[ebp], 0
$LN32@Line_To:
	movzx	edx, BYTE PTR tv146[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_End_Profile
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN13@Line_To
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	neg	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	and	eax, DWORD PTR [ecx+72]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	sub	ecx, eax
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	jl	SHORT $LN33@Line_To
	mov	BYTE PTR tv160[ebp], 1
	jmp	SHORT $LN34@Line_To
$LN33@Line_To:
	mov	BYTE PTR tv160[ebp], 0
$LN34@Line_To:
	movzx	eax, BYTE PTR tv160[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_New_Profile
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN15@Line_To
$LN13@Line_To:
; Line 1485
	mov	al, 1
	jmp	$LN25@Line_To
$LN15@Line_To:
; Line 1487
	jmp	$LN23@Line_To
$LN12@Line_To:
; Line 1490
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR [eax+72]
	jle	$LN23@Line_To
; Line 1494
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+edx-1]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	and	eax, edx
	mov	ecx, DWORD PTR _worker$[ebp]
	sub	eax, DWORD PTR [ecx+72]
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN35@Line_To
	mov	BYTE PTR tv180[ebp], 1
	jmp	SHORT $LN36@Line_To
$LN35@Line_To:
	mov	BYTE PTR tv180[ebp], 0
$LN36@Line_To:
	movzx	eax, BYTE PTR tv180[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_End_Profile
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN9@Line_To
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	neg	eax
	and	ecx, eax
	mov	edx, DWORD PTR _worker$[ebp]
	sub	ecx, DWORD PTR [edx+72]
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN37@Line_To
	mov	BYTE PTR tv197[ebp], 1
	jmp	SHORT $LN38@Line_To
$LN37@Line_To:
	mov	BYTE PTR tv197[ebp], 0
$LN38@Line_To:
	movzx	ecx, BYTE PTR tv197[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_New_Profile
	add	esp, 12					; 0000000cH
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN23@Line_To
$LN9@Line_To:
; Line 1495
	mov	al, 1
	jmp	$LN25@Line_To
$LN23@Line_To:
; Line 1505
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR tv207[ebp], edx
	cmp	DWORD PTR tv207[ebp], 1
	je	SHORT $LN5@Line_To
	cmp	DWORD PTR tv207[ebp], 2
	je	SHORT $LN3@Line_To
	jmp	SHORT $LN6@Line_To
$LN5@Line_To:
; Line 1509
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_Line_Up
	add	esp, 28					; 0000001cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@Line_To
; Line 1510
	mov	al, 1
	jmp	SHORT $LN25@Line_To
$LN4@Line_To:
; Line 1511
	jmp	SHORT $LN6@Line_To
$LN3@Line_To:
; Line 1515
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_Line_Down
	add	esp, 28					; 0000001cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@Line_To
; Line 1516
	mov	al, 1
	jmp	SHORT $LN25@Line_To
$LN6@Line_To:
; Line 1523
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+68], ecx
; Line 1524
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+72], eax
; Line 1526
	xor	al, al
$LN25@Line_To:
; Line 1527
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Line_To ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fresh$ = -6						; size = 1
_result$ = -5						; size = 1
_arc$ = -4						; size = 4
_worker$ = 8						; size = 4
_degree$ = 12						; size = 4
_splitter$ = 16						; size = 4
_miny$ = 20						; size = 4
_maxy$ = 24						; size = 4
_Bezier_Down PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 1413
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1414
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _arc$[ebp], ecx
; Line 1418
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	neg	edx
	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [eax+ecx+4], edx
; Line 1419
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	neg	eax
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 1420
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	neg	edx
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [ecx+eax+4], edx
; Line 1421
	cmp	DWORD PTR _degree$[ebp], 2
	jle	SHORT $LN2@Bezier_Dow
; Line 1422
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	neg	edx
	mov	eax, 8
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [eax+ecx+4], edx
$LN2@Bezier_Dow:
; Line 1424
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	dl, BYTE PTR [ecx+86]
	mov	BYTE PTR _fresh$[ebp], dl
; Line 1426
	mov	eax, DWORD PTR _miny$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _maxy$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _splitter$[ebp]
	push	edx
	mov	eax, DWORD PTR _degree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_Bezier_Up
	add	esp, 20					; 00000014H
	mov	BYTE PTR _result$[ebp], al
; Line 1428
	movsx	edx, BYTE PTR _fresh$[ebp]
	test	edx, edx
	je	SHORT $LN1@Bezier_Dow
	mov	eax, DWORD PTR _worker$[ebp]
	movsx	ecx, BYTE PTR [eax+86]
	test	ecx, ecx
	jne	SHORT $LN1@Bezier_Dow
; Line 1429
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR [eax+20]
	neg	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR [eax+20], ecx
$LN1@Bezier_Dow:
; Line 1431
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+edx+4]
	neg	ecx
	mov	edx, 8
	imul	eax, edx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [edx+eax+4], ecx
; Line 1432
	mov	al, BYTE PTR _result$[ebp]
; Line 1433
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Bezier_Down ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_top$ = -36						; size = 4
_start_arc$ = -32					; size = 4
_arc$ = -28						; size = 4
_f1$ = -24						; size = 2
_e0$ = -20						; size = 4
_e2$ = -16						; size = 4
_e$ = -12						; size = 4
_y2$ = -8						; size = 4
_y1$ = -4						; size = 4
_worker$ = 8						; size = 4
_degree$ = 12						; size = 4
_splitter$ = 16						; size = 4
_miny$ = 20						; size = 4
_maxy$ = 24						; size = 4
_Bezier_Up PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 1280
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1290
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _arc$[ebp], ecx
; Line 1291
	mov	edx, DWORD PTR _degree$[ebp]
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+4]
	mov	DWORD PTR _y1$[ebp], ecx
; Line 1292
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _y2$[ebp], edx
; Line 1293
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _top$[ebp], ecx
; Line 1295
	mov	edx, DWORD PTR _y2$[ebp]
	cmp	edx, DWORD PTR _miny$[ebp]
	jl	SHORT $LN16@Bezier_Up
	mov	eax, DWORD PTR _y1$[ebp]
	cmp	eax, DWORD PTR _maxy$[ebp]
	jle	SHORT $LN17@Bezier_Up
$LN16@Bezier_Up:
; Line 1296
	jmp	$Fin$20
$LN17@Bezier_Up:
; Line 1298
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	neg	edx
	and	edx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _e2$[ebp], edx
; Line 1300
	mov	eax, DWORD PTR _e2$[ebp]
	cmp	eax, DWORD PTR _maxy$[ebp]
	jle	SHORT $LN15@Bezier_Up
; Line 1301
	mov	ecx, DWORD PTR _maxy$[ebp]
	mov	DWORD PTR _e2$[ebp], ecx
$LN15@Bezier_Up:
; Line 1303
	mov	edx, DWORD PTR _miny$[ebp]
	mov	DWORD PTR _e0$[ebp], edx
; Line 1305
	mov	eax, DWORD PTR _y1$[ebp]
	cmp	eax, DWORD PTR _miny$[ebp]
	jge	SHORT $LN14@Bezier_Up
; Line 1306
	mov	ecx, DWORD PTR _miny$[ebp]
	mov	DWORD PTR _e$[ebp], ecx
; Line 1307
	jmp	SHORT $LN13@Bezier_Up
$LN14@Bezier_Up:
; Line 1309
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _y1$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	and	edx, ecx
	mov	DWORD PTR _e$[ebp], edx
; Line 1310
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	and	eax, DWORD PTR _y1$[ebp]
	mov	WORD PTR _f1$[ebp], ax
; Line 1311
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _e0$[ebp], ecx
; Line 1313
	movsx	edx, WORD PTR _f1$[ebp]
	test	edx, edx
	jne	SHORT $LN13@Bezier_Up
; Line 1315
	mov	eax, DWORD PTR _worker$[ebp]
	movsx	ecx, BYTE PTR [eax+87]
	test	ecx, ecx
	je	SHORT $LN11@Bezier_Up
; Line 1317
	mov	edx, DWORD PTR _top$[ebp]
	sub	edx, 4
	mov	DWORD PTR _top$[ebp], edx
; Line 1318
	mov	eax, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [eax+87], 0
$LN11@Bezier_Up:
; Line 1321
	mov	ecx, DWORD PTR _top$[ebp]
	mov	edx, DWORD PTR _degree$[ebp]
	mov	eax, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _top$[ebp]
	add	eax, 4
	mov	DWORD PTR _top$[ebp], eax
; Line 1323
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _e$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _e$[ebp], edx
$LN13@Bezier_Up:
; Line 1327
	mov	eax, DWORD PTR _worker$[ebp]
	movsx	ecx, BYTE PTR [eax+86]
	test	ecx, ecx
	je	SHORT $LN10@Bezier_Up
; Line 1329
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _e0$[ebp]
	mov	ecx, DWORD PTR [edx]
	sar	eax, cl
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [edx+20], eax
; Line 1330
	mov	eax, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [eax+86], 0
$LN10@Bezier_Up:
; Line 1333
	mov	ecx, DWORD PTR _e2$[ebp]
	cmp	ecx, DWORD PTR _e$[ebp]
	jge	SHORT $LN9@Bezier_Up
; Line 1334
	jmp	$Fin$20
$LN9@Bezier_Up:
; Line 1336
	mov	edx, DWORD PTR _e2$[ebp]
	sub	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	edx, cl
	mov	ecx, DWORD PTR _top$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4+4]
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	edx, DWORD PTR [eax+36]
	jb	SHORT $LN8@Bezier_Up
; Line 1338
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [ecx+40], edx
; Line 1339
	push	OFFSET $SG7502
	push	1339					; 0000053bH
	push	98					; 00000062H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 98					; 00000062H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 1340
	mov	al, 1
	jmp	$LN18@Bezier_Up
$LN8@Bezier_Up:
; Line 1343
	mov	edx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR _start_arc$[ebp], edx
$LN7@Bezier_Up:
; Line 1345
	mov	eax, DWORD PTR _arc$[ebp]
	cmp	eax, DWORD PTR _start_arc$[ebp]
	jb	$Fin$20
	mov	ecx, DWORD PTR _e$[ebp]
	cmp	ecx, DWORD PTR _e2$[ebp]
	jg	$Fin$20
; Line 1347
	mov	edx, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [edx+87], 0
; Line 1349
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _y2$[ebp], eax
; Line 1351
	mov	ecx, DWORD PTR _y2$[ebp]
	cmp	ecx, DWORD PTR _e$[ebp]
	jle	$LN5@Bezier_Up
; Line 1353
	mov	edx, DWORD PTR _degree$[ebp]
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+4]
	mov	DWORD PTR _y1$[ebp], ecx
; Line 1354
	mov	edx, DWORD PTR _y2$[ebp]
	sub	edx, DWORD PTR _y1$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	edx, DWORD PTR [eax+16]
	jl	SHORT $LN4@Bezier_Up
; Line 1356
	mov	esi, esp
	mov	ecx, DWORD PTR _arc$[ebp]
	push	ecx
	call	DWORD PTR _splitter$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1357
	mov	edx, DWORD PTR _degree$[ebp]
	mov	eax, DWORD PTR _arc$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _arc$[ebp], ecx
; Line 1359
	jmp	SHORT $LN3@Bezier_Up
$LN4@Bezier_Up:
; Line 1362
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR _degree$[ebp]
	mov	esi, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [esi+edx*8]
	mov	ecx, DWORD PTR _e$[ebp]
	sub	ecx, DWORD PTR _y1$[ebp]
	imul	eax, ecx
	mov	ecx, DWORD PTR _y2$[ebp]
	sub	ecx, DWORD PTR _y1$[ebp]
	cdq
	idiv	ecx
	mov	edx, DWORD PTR _degree$[ebp]
	mov	ecx, DWORD PTR _arc$[ebp]
	add	eax, DWORD PTR [ecx+edx*8]
	mov	edx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _top$[ebp]
	add	eax, 4
	mov	DWORD PTR _top$[ebp], eax
; Line 1363
	mov	ecx, DWORD PTR _degree$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _arc$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _arc$[ebp], edx
; Line 1364
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _e$[ebp], ecx
$LN3@Bezier_Up:
; Line 1367
	jmp	SHORT $LN2@Bezier_Up
$LN5@Bezier_Up:
; Line 1369
	mov	edx, DWORD PTR _y2$[ebp]
	cmp	edx, DWORD PTR _e$[ebp]
	jne	SHORT $LN1@Bezier_Up
; Line 1371
	mov	eax, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [eax+87], 1
; Line 1372
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _top$[ebp]
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _top$[ebp]
	add	eax, 4
	mov	DWORD PTR _top$[ebp], eax
; Line 1374
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _e$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _e$[ebp], edx
$LN1@Bezier_Up:
; Line 1376
	mov	eax, DWORD PTR _degree$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _arc$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _arc$[ebp], ecx
$LN2@Bezier_Up:
; Line 1378
	jmp	$LN7@Bezier_Up
$Fin$20:
; Line 1381
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 1382
	mov	ecx, DWORD PTR _degree$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+52]
	sub	eax, ecx
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 1383
	xor	al, al
$LN18@Bezier_Up:
; Line 1384
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Bezier_Up ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fresh$ = -2						; size = 1
_result$ = -1						; size = 1
_worker$ = 8						; size = 4
_x1$ = 12						; size = 4
_y1$ = 16						; size = 4
_x2$ = 20						; size = 4
_y2$ = 24						; size = 4
_miny$ = 28						; size = 4
_maxy$ = 32						; size = 4
_Line_Down PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 1235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1239
	mov	eax, DWORD PTR _worker$[ebp]
	mov	cl, BYTE PTR [eax+86]
	mov	BYTE PTR _fresh$[ebp], cl
; Line 1241
	mov	edx, DWORD PTR _miny$[ebp]
	neg	edx
	push	edx
	mov	eax, DWORD PTR _maxy$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _y2$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _x2$[ebp]
	push	edx
	mov	eax, DWORD PTR _y1$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_Line_Up
	add	esp, 28					; 0000001cH
	mov	BYTE PTR _result$[ebp], al
; Line 1243
	movsx	eax, BYTE PTR _fresh$[ebp]
	test	eax, eax
	je	SHORT $LN1@Line_Down
	mov	ecx, DWORD PTR _worker$[ebp]
	movsx	edx, BYTE PTR [ecx+86]
	test	edx, edx
	jne	SHORT $LN1@Line_Down
; Line 1244
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR [ecx+20]
	neg	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR [ecx+20], edx
$LN1@Line_Down:
; Line 1246
	mov	al, BYTE PTR _result$[ebp]
; Line 1247
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Line_Down ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv143 = -45						; size = 1
_top$ = -44						; size = 4
_Ax$ = -40						; size = 4
_Rx$ = -36						; size = 4
_Ix$ = -32						; size = 4
_size$ = -28						; size = 4
_f2$ = -24						; size = 4
_f1$ = -20						; size = 4
_e2$ = -16						; size = 4
_e1$ = -12						; size = 4
_Dy$ = -8						; size = 4
_Dx$ = -4						; size = 4
_worker$ = 8						; size = 4
_x1$ = 12						; size = 4
_y1$ = 16						; size = 4
_x2$ = 20						; size = 4
_y2$ = 24						; size = 4
_miny$ = 28						; size = 4
_maxy$ = 32						; size = 4
_Line_Up PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 1096
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1104
	mov	eax, DWORD PTR _x2$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _Dx$[ebp], eax
; Line 1105
	mov	ecx, DWORD PTR _y2$[ebp]
	sub	ecx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _Dy$[ebp], ecx
; Line 1107
	cmp	DWORD PTR _Dy$[ebp], 0
	jle	SHORT $LN17@Line_Up
	mov	edx, DWORD PTR _y2$[ebp]
	cmp	edx, DWORD PTR _miny$[ebp]
	jl	SHORT $LN17@Line_Up
	mov	eax, DWORD PTR _y1$[ebp]
	cmp	eax, DWORD PTR _maxy$[ebp]
	jle	SHORT $LN18@Line_Up
$LN17@Line_Up:
; Line 1108
	xor	al, al
	jmp	$LN19@Line_Up
$LN18@Line_Up:
; Line 1110
	mov	ecx, DWORD PTR _y1$[ebp]
	cmp	ecx, DWORD PTR _miny$[ebp]
	jge	SHORT $LN16@Line_Up
; Line 1114
	mov	edx, DWORD PTR _Dy$[ebp]
	push	edx
	mov	eax, DWORD PTR _miny$[ebp]
	sub	eax, DWORD PTR _y1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Dx$[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _x1$[ebp], eax
; Line 1115
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _miny$[ebp]
	mov	ecx, DWORD PTR [edx]
	sar	eax, cl
	mov	DWORD PTR _e1$[ebp], eax
; Line 1116
	mov	DWORD PTR _f1$[ebp], 0
; Line 1118
	jmp	SHORT $LN15@Line_Up
$LN16@Line_Up:
; Line 1120
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _y1$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sar	edx, cl
	mov	DWORD PTR _e1$[ebp], edx
; Line 1121
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	and	ecx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _f1$[ebp], ecx
$LN15@Line_Up:
; Line 1124
	mov	edx, DWORD PTR _y2$[ebp]
	cmp	edx, DWORD PTR _maxy$[ebp]
	jle	SHORT $LN14@Line_Up
; Line 1127
	mov	eax, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _maxy$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	edx, cl
	mov	DWORD PTR _e2$[ebp], edx
; Line 1128
	mov	DWORD PTR _f2$[ebp], 0
; Line 1130
	jmp	SHORT $LN13@Line_Up
$LN14@Line_Up:
; Line 1132
	mov	eax, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _y2$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	edx, cl
	mov	DWORD PTR _e2$[ebp], edx
; Line 1133
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	and	ecx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR _f2$[ebp], ecx
$LN13@Line_Up:
; Line 1136
	cmp	DWORD PTR _f1$[ebp], 0
	jle	SHORT $LN12@Line_Up
; Line 1138
	mov	edx, DWORD PTR _e1$[ebp]
	cmp	edx, DWORD PTR _e2$[ebp]
	jne	SHORT $LN11@Line_Up
; Line 1139
	xor	al, al
	jmp	$LN19@Line_Up
; Line 1140
	jmp	SHORT $LN10@Line_Up
$LN11@Line_Up:
; Line 1142
	mov	eax, DWORD PTR _Dy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _f1$[ebp]
	push	edx
	mov	eax, DWORD PTR _Dx$[ebp]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _x1$[ebp], eax
; Line 1143
	mov	ecx, DWORD PTR _e1$[ebp]
	add	ecx, 1
	mov	DWORD PTR _e1$[ebp], ecx
$LN10@Line_Up:
; Line 1146
	jmp	SHORT $LN9@Line_Up
$LN12@Line_Up:
; Line 1147
	mov	edx, DWORD PTR _worker$[ebp]
	movsx	eax, BYTE PTR [edx+87]
	test	eax, eax
	je	SHORT $LN9@Line_Up
; Line 1149
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	sub	edx, 4
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 1150
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [ecx+87], 0
$LN9@Line_Up:
; Line 1153
	cmp	DWORD PTR _f2$[ebp], 0
	jne	SHORT $LN21@Line_Up
	mov	BYTE PTR tv143[ebp], 1
	jmp	SHORT $LN22@Line_Up
$LN21@Line_Up:
	mov	BYTE PTR tv143[ebp], 0
$LN22@Line_Up:
	mov	edx, DWORD PTR _worker$[ebp]
	mov	al, BYTE PTR tv143[ebp]
	mov	BYTE PTR [edx+87], al
; Line 1155
	mov	ecx, DWORD PTR _worker$[ebp]
	movsx	edx, BYTE PTR [ecx+86]
	test	edx, edx
	je	SHORT $LN7@Line_Up
; Line 1157
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _e1$[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 1158
	mov	eax, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [eax+86], 0
$LN7@Line_Up:
; Line 1161
	mov	ecx, DWORD PTR _e2$[ebp]
	sub	ecx, DWORD PTR _e1$[ebp]
	add	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
; Line 1162
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _size$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	edx, DWORD PTR [eax+36]
	jb	SHORT $LN6@Line_Up
; Line 1164
	push	OFFSET $SG7438
	push	1164					; 0000048cH
	push	98					; 00000062H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 98					; 00000062H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 1165
	mov	al, 1
	jmp	$LN19@Line_Up
$LN6@Line_Up:
; Line 1168
	cmp	DWORD PTR _Dx$[ebp], 0
	jle	SHORT $LN5@Line_Up
; Line 1170
	mov	edx, DWORD PTR _Dy$[ebp]
	push	edx
	mov	eax, DWORD PTR _Dx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_MulDiv_No_Round
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Ix$[ebp], eax
; Line 1171
	mov	eax, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [eax+4]
	imul	eax, DWORD PTR _Dx$[ebp]
	cdq
	idiv	DWORD PTR _Dy$[ebp]
	mov	DWORD PTR _Rx$[ebp], edx
; Line 1172
	mov	DWORD PTR _Dx$[ebp], 1
; Line 1174
	jmp	SHORT $LN4@Line_Up
$LN5@Line_Up:
; Line 1176
	mov	ecx, DWORD PTR _Dy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Dx$[ebp]
	neg	edx
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulDiv_No_Round
	add	esp, 12					; 0000000cH
	neg	eax
	mov	DWORD PTR _Ix$[ebp], eax
; Line 1177
	mov	edx, DWORD PTR _Dx$[ebp]
	neg	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, edx
	imul	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	idiv	DWORD PTR _Dy$[ebp]
	mov	DWORD PTR _Rx$[ebp], edx
; Line 1178
	mov	DWORD PTR _Dx$[ebp], -1
$LN4@Line_Up:
; Line 1181
	mov	edx, DWORD PTR _Dy$[ebp]
	neg	edx
	mov	DWORD PTR _Ax$[ebp], edx
; Line 1182
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _top$[ebp], ecx
$LN3@Line_Up:
; Line 1184
	cmp	DWORD PTR _size$[ebp], 0
	jle	SHORT $LN2@Line_Up
; Line 1186
	mov	edx, DWORD PTR _top$[ebp]
	mov	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _top$[ebp]
	add	ecx, 4
	mov	DWORD PTR _top$[ebp], ecx
; Line 1188
	mov	edx, DWORD PTR _x1$[ebp]
	add	edx, DWORD PTR _Ix$[ebp]
	mov	DWORD PTR _x1$[ebp], edx
; Line 1189
	mov	eax, DWORD PTR _Ax$[ebp]
	add	eax, DWORD PTR _Rx$[ebp]
	mov	DWORD PTR _Ax$[ebp], eax
; Line 1190
	js	SHORT $LN1@Line_Up
; Line 1192
	mov	ecx, DWORD PTR _Ax$[ebp]
	sub	ecx, DWORD PTR _Dy$[ebp]
	mov	DWORD PTR _Ax$[ebp], ecx
; Line 1193
	mov	edx, DWORD PTR _x1$[ebp]
	add	edx, DWORD PTR _Dx$[ebp]
	mov	DWORD PTR _x1$[ebp], edx
$LN1@Line_Up:
; Line 1195
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
; Line 1196
	jmp	SHORT $LN3@Line_Up
$LN2@Line_Up:
; Line 1198
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [ecx+40], edx
; Line 1199
	xor	al, al
$LN19@Line_Up:
; Line 1200
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Line_Up ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_d$ = -16						; size = 4
_c$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_base$ = 8						; size = 4
_Split_Cubic PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 1038
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1042
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, 8
	imul	eax, edx, 6
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
; Line 1043
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _c$[ebp], ecx
; Line 1044
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _d$[ebp], ecx
; Line 1045
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	sar	ecx, 1
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 1046
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	sar	ecx, 1
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, 8
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 1047
	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	sar	edx, 1
	mov	DWORD PTR _c$[ebp], edx
; Line 1048
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	sar	edx, 1
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 1049
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	sar	edx, 1
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, 8
	shl	eax, 2
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 1050
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	sar	edx, 1
	mov	eax, 8
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR [eax+ecx], edx
; Line 1052
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	eax, 8
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [esi+edx+4]
	mov	DWORD PTR [eax+ecx+4], edx
; Line 1053
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _c$[ebp], edx
; Line 1054
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _d$[ebp], edx
; Line 1055
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	sar	edx, 1
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+eax+4], edx
; Line 1056
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	sar	edx, 1
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, 8
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 1057
	mov	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	sar	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 1058
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	sar	eax, 1
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 1059
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	sar	eax, 1
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, 8
	shl	ecx, 2
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 1060
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	sar	eax, 1
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx+edx+4], eax
; Line 1061
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_Split_Cubic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv150 = -24						; size = 4
tv142 = -20						; size = 4
tv88 = -16						; size = 4
tv80 = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_base$ = 8						; size = 4
_Split_Conic PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 1001
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1005
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	shl	ecx, 2
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax
; Line 1006
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _b$[ebp], eax
; Line 1007
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv80[ebp], eax
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 1008
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv88[ebp], eax
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 1009
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 1011
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	shl	ecx, 2
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [esi+eax+4]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 1012
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _b$[ebp], eax
; Line 1013
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 1014
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+eax+4]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv150[ebp], eax
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	mov	DWORD PTR [eax+edx+4], ecx
	mov	edx, DWORD PTR tv150[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 1015
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 1019
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_Split_Conic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_top$1 = -16						; size = 4
_bottom$2 = -12						; size = 4
_p$ = -8						; size = 4
_n$ = -4						; size = 2
_worker$ = 8						; size = 4
_Finalize_Profile_Table PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 935
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 940
	mov	eax, DWORD PTR _worker$[ebp]
	mov	cx, WORD PTR [eax+84]
	mov	WORD PTR _n$[ebp], cx
; Line 941
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	DWORD PTR _p$[ebp], eax
; Line 943
	movzx	ecx, WORD PTR _n$[ebp]
	cmp	ecx, 1
	jle	$LN10@Finalize_P
	cmp	DWORD PTR _p$[ebp], 0
	je	$LN10@Finalize_P
$LN9@Finalize_P:
; Line 945
	movzx	edx, WORD PTR _n$[ebp]
	test	edx, edx
	jle	$LN8@Finalize_P
; Line 950
	movzx	eax, WORD PTR _n$[ebp]
	cmp	eax, 1
	jle	SHORT $LN7@Finalize_P
; Line 951
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 952
	jmp	SHORT $LN6@Finalize_P
$LN7@Finalize_P:
; Line 953
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN6@Finalize_P:
; Line 955
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 8
	je	SHORT $LN5@Finalize_P
; Line 957
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _bottom$2[ebp], edx
; Line 958
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _top$1[ebp], ecx
; Line 960
	jmp	SHORT $LN4@Finalize_P
$LN5@Finalize_P:
; Line 962
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR _bottom$2[ebp], ecx
; Line 963
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _top$1[ebp], eax
; Line 964
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _bottom$2[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 965
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*4-4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN4@Finalize_P:
; Line 969
	mov	eax, DWORD PTR _bottom$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_Insert_Y_Turn
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN2@Finalize_P
	mov	eax, DWORD PTR _top$1[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_Insert_Y_Turn
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@Finalize_P
$LN2@Finalize_P:
; Line 970
	mov	al, 1
	jmp	SHORT $LN11@Finalize_P
$LN3@Finalize_P:
; Line 972
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _p$[ebp], ecx
; Line 973
	mov	dx, WORD PTR _n$[ebp]
	sub	dx, 1
	mov	WORD PTR _n$[ebp], dx
; Line 974
	jmp	$LN9@Finalize_P
$LN8@Finalize_P:
; Line 976
	jmp	SHORT $LN1@Finalize_P
$LN10@Finalize_P:
; Line 977
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+92], 0
$LN1@Finalize_P:
; Line 979
	xor	al, al
$LN11@Finalize_P:
; Line 980
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Finalize_Profile_Table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_y2$1 = -12						; size = 4
_n$ = -8						; size = 4
_y_turns$ = -4						; size = 4
_worker$ = 8						; size = 4
_y$ = 12						; size = 4
_Insert_Y_Turn PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 882
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 887
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
; Line 888
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shl	eax, 2
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	sub	edx, eax
	mov	DWORD PTR _y_turns$[ebp], edx
$LN7@Insert_Y_T:
; Line 891
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN6@Insert_Y_T
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _y_turns$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4]
	jge	SHORT $LN6@Insert_Y_T
; Line 892
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jmp	SHORT $LN7@Insert_Y_T
$LN6@Insert_Y_T:
; Line 895
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN5@Insert_Y_T
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _y_turns$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR [edx+ecx*4]
	jle	SHORT $LN5@Insert_Y_T
$LN4@Insert_Y_T:
; Line 896
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN5@Insert_Y_T
; Line 898
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _y_turns$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _y2$1[ebp], eax
; Line 901
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _y_turns$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 902
	mov	ecx, DWORD PTR _y2$1[ebp]
	mov	DWORD PTR _y$[ebp], ecx
; Line 903
	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$[ebp], edx
; Line 904
	jmp	SHORT $LN4@Insert_Y_T
$LN5@Insert_Y_T:
; Line 906
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@Insert_Y_T
; Line 908
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, 4
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 909
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx+40]
	ja	SHORT $LN1@Insert_Y_T
; Line 911
	push	OFFSET $SG7346
	push	911					; 0000038fH
	push	98					; 00000062H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 98					; 00000062H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 912
	mov	al, 1
	jmp	SHORT $LN8@Insert_Y_T
$LN1@Insert_Y_T:
; Line 914
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+48]
	add	eax, 1
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 915
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+48]
	neg	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
$LN2@Insert_Y_T:
; Line 918
	xor	al, al
$LN8@Insert_Y_T:
; Line 919
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Insert_Y_Turn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_oldProfile$1 = -8					; size = 4
_h$ = -4						; size = 4
_worker$ = 8						; size = 4
_overshoot$ = 12					; size = 1
_End_Profile PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 810
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 814
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2
	mov	DWORD PTR _h$[ebp], eax
; Line 816
	cmp	DWORD PTR _h$[ebp], 0
	jge	SHORT $LN14@End_Profil
; Line 818
	push	OFFSET $SG7304
	call	_FT_Message
	add	esp, 4
; Line 819
	push	OFFSET $SG7305
	push	819					; 00000333H
	push	99					; 00000063H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 99					; 00000063H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 820
	mov	al, 1
	jmp	$LN15@End_Profil
$LN14@End_Profil:
; Line 823
	cmp	DWORD PTR _h$[ebp], 0
	jle	$LN13@End_Profil
$LN12@End_Profil:
; Line 829
	mov	edx, 4
	imul	eax, edx, 11
	cmp	DWORD PTR _ft_trace_levels[eax], 6
	jl	SHORT $LN11@End_Profil
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	push	OFFSET $SG7312
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN11@End_Profil:
	xor	ecx, ecx
	jne	SHORT $LN12@End_Profil
; Line 831
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 832
	movsx	edx, BYTE PTR _overshoot$[ebp]
	test	edx, edx
	je	SHORT $LN8@End_Profil
; Line 834
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 8
	je	SHORT $LN7@End_Profil
; Line 835
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 16					; 00000010H
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR [ecx+12], edx
; Line 836
	jmp	SHORT $LN8@End_Profil
$LN7@End_Profil:
; Line 837
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR [eax+12], ecx
$LN8@End_Profil:
; Line 840
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR _oldProfile$1[ebp], edx
; Line 841
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+88], edx
; Line 843
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 845
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR [ecx+16], 0
; Line 846
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+8], edx
; Line 848
	mov	eax, DWORD PTR _oldProfile$1[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+28], edx
; Line 849
	mov	eax, DWORD PTR _worker$[ebp]
	mov	cx, WORD PTR [eax+84]
	add	cx, 1
	mov	edx, DWORD PTR _worker$[ebp]
	mov	WORD PTR [edx+84], cx
$LN13@End_Profil:
; Line 852
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+36]
	jb	SHORT $LN5@End_Profil
$LN4@End_Profil:
; Line 854
	mov	eax, 4
	imul	ecx, eax, 11
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN3@End_Profil
	push	OFFSET $SG7325
	call	_FT_Message
	add	esp, 4
$LN3@End_Profil:
	xor	edx, edx
	jne	SHORT $LN4@End_Profil
; Line 855
	push	OFFSET $SG7326
	push	855					; 00000357H
	push	98					; 00000062H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 98					; 00000062H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 856
	mov	al, 1
	jmp	SHORT $LN15@End_Profil
$LN5@End_Profil:
; Line 859
	mov	edx, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [edx+87], 0
; Line 861
	xor	al, al
$LN15@End_Profil:
; Line 862
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_End_Profile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv131 = -4						; size = 4
_worker$ = 8						; size = 4
_aState$ = 12						; size = 4
_overshoot$ = 16					; size = 1
_New_Profile PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 738
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 739
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jne	SHORT $LN18@New_Profil
; Line 741
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+88], eax
; Line 742
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR [ecx+92], eax
; Line 743
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+40], edx
$LN18@New_Profil:
; Line 746
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	cmp	eax, DWORD PTR [edx+36]
	jb	SHORT $LN17@New_Profil
; Line 748
	push	OFFSET $SG7270
	push	748					; 000002ecH
	push	98					; 00000062H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 98					; 00000062H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 749
	mov	al, 1
	jmp	$LN19@New_Profil
$LN17@New_Profil:
; Line 752
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR [eax+12], 0
; Line 753
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [edx+20], 0
; Line 754
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR [ecx+16], 0
; Line 755
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+8], edx
; Line 756
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR [ecx+4], 0
; Line 757
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR [eax+28], 0
; Line 758
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR _worker$[ebp]
	movzx	ecx, BYTE PTR [eax+180]
	mov	DWORD PTR [edx+12], ecx
; Line 760
	mov	edx, DWORD PTR _aState$[ebp]
	mov	DWORD PTR tv131[ebp], edx
	cmp	DWORD PTR tv131[ebp], 1
	je	SHORT $LN14@New_Profil
	cmp	DWORD PTR tv131[ebp], 2
	je	SHORT $LN8@New_Profil
	jmp	$LN2@New_Profil
$LN14@New_Profil:
; Line 763
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 8
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR [ecx+12], edx
; Line 764
	movsx	edx, BYTE PTR _overshoot$[ebp]
	test	edx, edx
	je	SHORT $LN12@New_Profil
; Line 765
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 32					; 00000020H
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR [ecx+12], edx
$LN12@New_Profil:
; Line 767
	mov	edx, 4
	imul	eax, edx, 11
	cmp	DWORD PTR _ft_trace_levels[eax], 6
	jl	SHORT $LN11@New_Profil
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	push	OFFSET $SG7283
	call	_FT_Message
	add	esp, 8
$LN11@New_Profil:
	xor	eax, eax
	jne	SHORT $LN12@New_Profil
; Line 768
	jmp	SHORT $LN15@New_Profil
$LN8@New_Profil:
; Line 771
	movsx	ecx, BYTE PTR _overshoot$[ebp]
	test	ecx, ecx
	je	SHORT $LN6@New_Profil
; Line 772
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR [eax+12], ecx
$LN6@New_Profil:
; Line 773
	mov	ecx, 4
	imul	edx, ecx, 11
	cmp	DWORD PTR _ft_trace_levels[edx], 6
	jl	SHORT $LN5@New_Profil
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	push	OFFSET $SG7290
	call	_FT_Message
	add	esp, 8
$LN5@New_Profil:
	xor	edx, edx
	jne	SHORT $LN6@New_Profil
; Line 774
	jmp	SHORT $LN15@New_Profil
$LN2@New_Profil:
; Line 777
	push	OFFSET $SG7292
	call	_FT_Message
	add	esp, 4
; Line 778
	push	OFFSET $SG7293
	push	778					; 0000030aH
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 779
	mov	al, 1
	jmp	SHORT $LN19@New_Profil
$LN15@New_Profil:
; Line 782
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [edx+96], 0
	jne	SHORT $LN1@New_Profil
; Line 783
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+96], edx
$LN1@New_Profil:
; Line 785
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _aState$[ebp]
	mov	DWORD PTR [eax+100], ecx
; Line 786
	mov	edx, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [edx+86], 1
; Line 787
	mov	eax, DWORD PTR _worker$[ebp]
	mov	BYTE PTR [eax+87], 0
; Line 789
	xor	al, al
$LN19@New_Profil:
; Line 790
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_New_Profile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -4						; size = 4
_worker$ = 8						; size = 4
_High$ = 12						; size = 4
_Set_High_Precision PROC
; File d:\mozilla\modules\freetype2\src\raster\ftraster.c
; Line 673
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 696
	cmp	DWORD PTR _High$[ebp], 0
	je	SHORT $LN6@Set_High_P
; Line 698
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 699
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+16], 256			; 00000100H
; Line 700
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+20], 30			; 0000001eH
; Line 702
	jmp	SHORT $LN4@Set_High_P
$LN6@Set_High_P:
; Line 704
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax], 6
; Line 705
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+16], 32			; 00000020H
; Line 706
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+20], 2
$LN4@Set_High_P:
; Line 709
	mov	eax, 4
	imul	ecx, eax, 11
	cmp	DWORD PTR _ft_trace_levels[ecx], 6
	jl	SHORT $LN3@Set_High_P
	cmp	DWORD PTR _High$[ebp], 0
	je	SHORT $LN9@Set_High_P
	mov	DWORD PTR tv75[ebp], OFFSET $SG7253
	jmp	SHORT $LN10@Set_High_P
$LN9@Set_High_P:
	mov	DWORD PTR tv75[ebp], OFFSET $SG7254
$LN10@Set_High_P:
	mov	edx, DWORD PTR tv75[ebp]
	push	edx
	push	OFFSET $SG7255
	call	_FT_Message
	add	esp, 8
$LN3@Set_High_P:
	xor	eax, eax
	jne	SHORT $LN4@Set_High_P
; Line 711
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx]
	shl	edx, cl
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 712
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 713
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 6
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 714
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Set_High_Precision ENDP
_TEXT	ENDS
END
