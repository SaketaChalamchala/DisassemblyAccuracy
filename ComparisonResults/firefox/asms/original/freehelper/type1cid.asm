; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\cid\type1cid.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_t1cid_driver_class
CONST	SEGMENT
_t1cid_driver_class DD 0501H
	DD	01cH
	DD	FLAT:$SG9435
	DD	010000H
	DD	020000H
	DD	00H
	DD	FLAT:_cid_driver_init
	DD	FLAT:_cid_driver_done
	DD	FLAT:_cid_get_interface
	DD	014cH
	DD	030H
	DD	0acH
	DD	FLAT:_cid_face_init
	DD	FLAT:_cid_face_done
	DD	FLAT:_cid_size_init
	DD	FLAT:_cid_size_done
	DD	FLAT:_cid_slot_init
	DD	FLAT:_cid_slot_done
	DD	FLAT:_cid_slot_load_glyph
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_cid_size_request
	DD	00H
_cid_service_ps_name DD FLAT:_cid_get_postscript_name
_cid_service_ps_info DD FLAT:_cid_ps_get_font_info
	DD	FLAT:_cid_ps_get_font_extra
	DD	00H
	DD	00H
	DD	00H
_cid_service_cid_info DD FLAT:_cid_get_ros
	DD	FLAT:_cid_get_is_cid
	DD	FLAT:_cid_get_cid_from_glyph_index
_cid_services DD FLAT:$SG9420
	DD	FLAT:$SG9421
	DD	FLAT:$SG9422
	DD	FLAT:_cid_service_ps_name
	DD	FLAT:$SG9423
	DD	FLAT:_cid_service_ps_info
	DD	FLAT:$SG9424
	DD	FLAT:_cid_service_cid_info
	DD	00H
	DD	00H
	ORG $+4
_cid_field_records DD FLAT:$SG8707
	DD	00H
	DD	06H
	DD	00H
	DD	00H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8708
	DD	00H
	DD	03H
	DD	00H
	DD	04H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8709
	DD	00H
	DD	02H
	DD	00H
	DD	08H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8710
	DD	00H
	DD	05H
	DD	00H
	DD	0cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8711
	DD	00H
	DD	05H
	DD	00H
	DD	010H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8712
	DD	00H
	DD	02H
	DD	00H
	DD	014H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8713
	DD	00H
	DD	02H
	DD	00H
	DD	048H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8714
	DD	00H
	DD	02H
	DD	00H
	DD	090H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8715
	DD	00H
	DD	02H
	DD	00H
	DD	094H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8716
	DD	00H
	DD	02H
	DD	00H
	DD	098H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8717
	DD	00H
	DD	02H
	DD	00H
	DD	09cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8718
	DD	03H
	DD	05H
	DD	00H
	DD	00H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8719
	DD	03H
	DD	05H
	DD	00H
	DD	04H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8720
	DD	03H
	DD	05H
	DD	00H
	DD	08H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8721
	DD	03H
	DD	05H
	DD	00H
	DD	0cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8722
	DD	03H
	DD	05H
	DD	00H
	DD	010H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8723
	DD	03H
	DD	02H
	DD	00H
	DD	014H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8724
	DD	03H
	DD	01H
	DD	00H
	DD	018H
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8725
	DD	03H
	DD	02H
	DD	00H
	DD	01aH
	DB	02H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8726
	DD	03H
	DD	02H
	DD	00H
	DD	01cH
	DB	02H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8727
	DD	02H
	DD	02H
	DD	00H
	DD	00H
	DB	02H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8728
	DD	01H
	DD	02H
	DD	00H
	DD	0d4H
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8729
	DD	01H
	DD	02H
	DD	00H
	DD	0d5H
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8730
	DD	01H
	DD	02H
	DD	00H
	DD	0f4H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8731
	DD	01H
	DD	02H
	DD	00H
	DD	0f8H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8732
	DD	01H
	DD	02H
	DD	00H
	DD	0f0H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8733
	DD	01H
	DD	02H
	DD	00H
	DD	0c4H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8734
	DD	01H
	DD	03H
	DD	00H
	DD	0c8H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8735
	DD	01H
	DD	03H
	DD	00H
	DD	0ccH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8736
	DD	04H
	DD	02H
	DD	00H
	DD	00H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8737
	DD	04H
	DD	02H
	DD	00H
	DD	04H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8738
	DD	04H
	DD	02H
	DD	00H
	DD	0b8H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8739
	DD	04H
	DD	02H
	DD	00H
	DD	0bcH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8740
	DD	04H
	DD	04H
	DD	00H
	DD	06cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8741
	DD	04H
	DD	02H
	DD	00H
	DD	070H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8742
	DD	04H
	DD	02H
	DD	00H
	DD	074H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8743
	DD	04H
	DD	09H
	DD	00H
	DD	0cH
	DB	02H
	ORG $+3
	DD	0eH
	DD	08H
	DD	00H
	DD	FLAT:$SG8744
	DD	04H
	DD	09H
	DD	00H
	DD	028H
	DB	02H
	ORG $+3
	DD	0aH
	DD	09H
	DD	00H
	DD	FLAT:$SG8745
	DD	04H
	DD	09H
	DD	00H
	DD	03cH
	DB	02H
	ORG $+3
	DD	0eH
	DD	0aH
	DD	00H
	DD	FLAT:$SG8746
	DD	04H
	DD	09H
	DD	00H
	DD	058H
	DB	02H
	ORG $+3
	DD	0aH
	DD	0bH
	DD	00H
	DD	FLAT:$SG8747
	DD	04H
	DD	09H
	DD	00H
	DD	078H
	DB	02H
	ORG $+3
	DD	01H
	DD	00H
	DD	00H
	DD	FLAT:$SG8748
	DD	04H
	DD	09H
	DD	00H
	DD	07aH
	DB	02H
	ORG $+3
	DD	01H
	DD	00H
	DD	00H
	DD	FLAT:$SG8749
	DD	04H
	DD	09H
	DD	00H
	DD	0c0H
	DB	02H
	ORG $+3
	DD	02H
	DD	00H
	DD	00H
	DD	FLAT:$SG8750
	DD	04H
	DD	09H
	DD	00H
	DD	080H
	DB	02H
	ORG $+3
	DD	0cH
	DD	07cH
	DD	00H
	DD	FLAT:$SG8751
	DD	04H
	DD	09H
	DD	00H
	DD	09aH
	DB	02H
	ORG $+3
	DD	0cH
	DD	07dH
	DD	00H
	DD	FLAT:$SG8752
	DD	04H
	DD	01H
	DD	00H
	DD	07eH
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8753
	DD	05H
	DD	07H
	DD	00H
	DD	00H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8754
	DD	05H
	DD	0bH
	DD	FLAT:_parse_fd_array
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8755
	DD	05H
	DD	0bH
	DD	FLAT:_cid_parse_font_matrix
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG8756
	DD	05H
	DD	0bH
	DD	FLAT:_parse_expansion_factor
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
_DATA	SEGMENT
$SG9216	DB	'pshinter', 00H
	ORG $+3
$SG9221	DB	'CID driver', 0aH, 00H
$SG9227	DB	'cid_face_init: invalid face index', 0aH, 00H
	ORG $+1
$SG9228	DB	'd:\mozilla\modules\freetype2\src\cid\cidobjs.c', 00H
	ORG $+1
$SG8204	DB	'cid_parser_new: no `StartData'' keyword found', 0aH, 00H
	ORG $+2
$SG8205	DB	'd:\mozilla\modules\freetype2\src\cid\cidparse.c', 00H
$SG9233	DB	'Regular', 00H
$SG8215	DB	'StartData', 00H
	ORG $+2
$SG8221	DB	'/sfnts', 00H
	ORG $+1
$SG9256	DB	'Bold', 00H
	ORG $+3
$SG9257	DB	'Black', 00H
	ORG $+2
$SG8234	DB	'StartData', 00H
	ORG $+2
$SG8237	DB	'(Hex)', 00H
	ORG $+2
$SG8242	DB	'/sfnts', 00H
	ORG $+1
$SG8247	DB	'cid_parser_new: cannot handle Type 11 fonts', 0aH, 00H
	ORG $+3
$SG8248	DB	'd:\mozilla\modules\freetype2\src\cid\cidparse.c', 00H
$SG8385	DB	'cid_load_keyword: invalid use of `%s''', 0aH, 00H
	ORG $+1
$SG8386	DB	'd:\mozilla\modules\freetype2\src\cid\cidload.c', 00H
	ORG $+1
$SG9420	DB	'xf86-driver-name', 00H
	ORG $+3
$SG9421	DB	'CID Type 1', 00H
	ORG $+1
$SG9422	DB	'postscript-font-name', 00H
	ORG $+3
$SG9423	DB	'postscript-info', 00H
$SG9424	DB	'CID', 00H
$SG9435	DB	't1cid', 00H
	ORG $+2
$SG8414	DB	'd:\mozilla\modules\freetype2\src\cid\cidload.c', 00H
	ORG $+1
$SG8416	DB	'cid_parse_font_matrix: invalid font matrix', 0aH, 00H
$SG8417	DB	'd:\mozilla\modules\freetype2\src\cid\cidload.c', 00H
	ORG $+1
$SG9615	DB	'cid_load_glyph: glyph index %d', 0aH, 00H
$SG9643	DB	'd:\mozilla\modules\freetype2\src\cid\cidgload.c', 00H
$SG9687	DB	'd:\mozilla\modules\freetype2\src\cid\cidgload.c', 00H
$SG8707	DB	'CIDFontName', 00H
$SG8708	DB	'CIDFontVersion', 00H
	ORG $+1
$SG8709	DB	'CIDFontType', 00H
$SG8710	DB	'Registry', 00H
	ORG $+3
$SG8711	DB	'Ordering', 00H
	ORG $+3
$SG8712	DB	'Supplement', 00H
	ORG $+1
$SG8713	DB	'UIDBase', 00H
$SG8714	DB	'CIDMapOffset', 00H
	ORG $+3
$SG8715	DB	'FDBytes', 00H
$SG8716	DB	'GDBytes', 00H
$SG8717	DB	'CIDCount', 00H
	ORG $+3
$SG8718	DB	'version', 00H
$SG8719	DB	'Notice', 00H
	ORG $+1
$SG8720	DB	'FullName', 00H
	ORG $+3
$SG8721	DB	'FamilyName', 00H
	ORG $+1
$SG8722	DB	'Weight', 00H
	ORG $+1
$SG8723	DB	'ItalicAngle', 00H
$SG8724	DB	'isFixedPitch', 00H
	ORG $+3
$SG8725	DB	'UnderlinePosition', 00H
	ORG $+2
$SG8726	DB	'UnderlineThickness', 00H
	ORG $+1
$SG8727	DB	'FSType', 00H
	ORG $+1
$SG8728	DB	'PaintType', 00H
	ORG $+2
$SG8729	DB	'FontType', 00H
	ORG $+3
$SG8730	DB	'SubrMapOffset', 00H
	ORG $+2
$SG8731	DB	'SDBytes', 00H
$SG8732	DB	'SubrCount', 00H
	ORG $+2
$SG8733	DB	'lenBuildCharArray', 00H
	ORG $+2
$SG8734	DB	'ForceBoldThreshold', 00H
	ORG $+1
$SG8735	DB	'StrokeWidth', 00H
$SG8736	DB	'UniqueID', 00H
	ORG $+3
$SG8737	DB	'lenIV', 00H
	ORG $+2
$SG8738	DB	'LanguageGroup', 00H
	ORG $+2
$SG8739	DB	'password', 00H
	ORG $+3
$SG8740	DB	'BlueScale', 00H
	ORG $+2
$SG8741	DB	'BlueShift', 00H
	ORG $+2
$SG8742	DB	'BlueFuzz', 00H
	ORG $+3
$SG8743	DB	'BlueValues', 00H
	ORG $+1
$SG8744	DB	'OtherBlues', 00H
	ORG $+1
$SG8745	DB	'FamilyBlues', 00H
$SG8746	DB	'FamilyOtherBlues', 00H
	ORG $+3
$SG8747	DB	'StdHW', 00H
	ORG $+2
$SG8748	DB	'StdVW', 00H
	ORG $+2
$SG8749	DB	'MinFeature', 00H
	ORG $+1
$SG8750	DB	'StemSnapH', 00H
	ORG $+2
$SG8751	DB	'StemSnapV', 00H
	ORG $+2
$SG8752	DB	'ForceBold', 00H
	ORG $+2
$SG8753	DB	'FontBBox', 00H
	ORG $+3
$SG8754	DB	'FDArray', 00H
$SG8755	DB	'FontMatrix', 00H
	ORG $+1
$SG8756	DB	'ExpansionFactor', 00H
$SG8781	DB	'%ADOBeginFontDict', 00H
	ORG $+2
$SG8835	DB	'd:\mozilla\modules\freetype2\src\cid\cidload.c', 00H
	ORG $+1
$SG8840	DB	'd:\mozilla\modules\freetype2\src\cid\cidload.c', 00H
	ORG $+1
$SG8938	DB	'd:\mozilla\modules\freetype2\src\cid\cidload.c', 00H
	ORG $+1
$SG8957	DB	'd:\mozilla\modules\freetype2\src\cid\cidload.c', 00H
	ORG $+1
$SG9067	DB	'pshinter', 00H
	ORG $+3
$SG9080	DB	'pshinter', 00H
	ORG $+3
$SG9207	DB	'psaux', 00H
	ORG $+2
$SG8183	DB	'%!PS-Adobe-3.0 Resource-CIDFont', 00H
$SG9209	DB	'cid_face_init: cannot access `psaux'' module', 0aH, 00H
	ORG $+3
$SG9210	DB	'd:\mozilla\modules\freetype2\src\cid\cidobjs.c', 00H
	ORG $+1
$SG8188	DB	'  not a CID-keyed font', 0aH, 00H
$SG8189	DB	'd:\mozilla\modules\freetype2\src\cid\cidparse.c', 00H
_DATA	ENDS
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__memmove:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp__atol:PROC
EXTRN	_FT_DivFix:PROC
EXTRN	_FT_RoundFix:PROC
EXTRN	_FT_Vector_Transform:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_FT_Get_Module:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_ft_service_list_lookup:PROC
EXTRN	_FT_Get_Module_Interface:PROC
EXTRN	_FT_Request_Metrics:PROC
EXTRN	_ft_synthesize_vertical_metrics:PROC
EXTRN	_FT_Stream_OpenMemory:PROC
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Pos:PROC
EXTRN	_FT_Stream_Read:PROC
EXTRN	_FT_Stream_ReadAt:PROC
EXTRN	_FT_Stream_EnterFrame:PROC
EXTRN	_FT_Stream_ExitFrame:PROC
EXTRN	_FT_Stream_ExtractFrame:PROC
EXTRN	_FT_Stream_ReleaseFrame:PROC
EXTRN	_FT_Outline_Get_CBox:PROC
EXTRN	_FT_Outline_Translate:PROC
EXTRN	_FT_Outline_Transform:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv218 = -128						; size = 4
_metrics$1 = -120					; size = 16
_cs_offset$2 = -100					; size = 4
_cid_subrs$3 = -96					; size = 4
_dict$4 = -92						; size = 4
_off1$5 = -88						; size = 4
_entry_len$6 = -84					; size = 4
_glyph_data$7 = -76					; size = 8
_inc$ = -64						; size = 4
_psaux$ = -60						; size = 4
_glyph_length$ = -56					; size = 4
_memory$ = -52						; size = 4
_charstring$ = -48					; size = 4
_error$ = -40						; size = 4
_stream$ = -32						; size = 4
_fd_select$ = -28					; size = 4
_p$ = -20						; size = 4
_cid$ = -12						; size = 4
_face$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_decoder$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_cid_load_glyph PROC
; File d:\mozilla\modules\freetype2\src\cid\cidgload.c
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 44
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$[ebp], ecx
; Line 45
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 140				; 0000008cH
	mov	DWORD PTR _cid$[ebp], edx
; Line 48
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 49
	mov	DWORD PTR _error$[ebp], 0
; Line 50
	mov	DWORD PTR _charstring$[ebp], 0
; Line 51
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$[ebp], eax
; Line 52
	mov	DWORD PTR _glyph_length$[ebp], 0
; Line 53
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR _psaux$[ebp], edx
; Line 57
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _inc$[ebp], edx
$LN21@cid_load_g:
; Line 61
	mov	eax, 4
	imul	ecx, eax, 57
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN20@cid_load_g
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	push	OFFSET $SG9615
	call	_FT_Message
	add	esp, 8
$LN20@cid_load_g:
	xor	eax, eax
	jne	SHORT $LN21@cid_load_g
; Line 67
	cmp	DWORD PTR _inc$[ebp], 0
	je	$LN17@cid_load_g
; Line 73
	mov	esi, esp
	lea	ecx, DWORD PTR _glyph_data$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _inc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _inc$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 74
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@cid_load_g
; Line 75
	jmp	$Exit$32
$LN16@cid_load_g:
; Line 77
	mov	edx, DWORD PTR _glyph_data$7[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 78
	mov	eax, DWORD PTR _cid$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_cid_get_offset
	add	esp, 8
	mov	DWORD PTR _fd_select$[ebp], eax
; Line 80
	cmp	DWORD PTR _glyph_data$7[ebp+4], 0
	je	SHORT $LN15@cid_load_g
; Line 82
	mov	eax, DWORD PTR _cid$[ebp]
	mov	ecx, DWORD PTR _glyph_data$7[ebp+4]
	sub	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR _glyph_length$[ebp], ecx
; Line 83
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _charstring$[ebp], eax
; Line 84
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN15@cid_load_g
; Line 86
	mov	edx, DWORD PTR _glyph_length$[ebp]
	push	edx
	mov	eax, DWORD PTR _cid$[ebp]
	mov	ecx, DWORD PTR _glyph_data$7[ebp]
	add	ecx, DWORD PTR [eax+148]
	push	ecx
	mov	edx, DWORD PTR _charstring$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN15@cid_load_g:
; Line 89
	mov	esi, esp
	lea	eax, DWORD PTR _glyph_data$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _inc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _inc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 91
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@cid_load_g
; Line 92
	jmp	$Exit$32
$LN13@cid_load_g:
; Line 95
	jmp	$LN12@cid_load_g
$LN17@cid_load_g:
; Line 102
	mov	eax, DWORD PTR _cid$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	edx, DWORD PTR _cid$[ebp]
	add	ecx, DWORD PTR [edx+152]
	mov	DWORD PTR _entry_len$6[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _cid$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	edx, DWORD PTR _cid$[ebp]
	add	ecx, DWORD PTR [edx+144]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	imul	eax, DWORD PTR _entry_len$6[ebp]
	add	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN10@cid_load_g
	mov	edx, DWORD PTR _entry_len$6[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@cid_load_g
$LN10@cid_load_g:
; Line 109
	jmp	$Exit$32
$LN11@cid_load_g:
; Line 111
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _p$[ebp], edx
; Line 112
	mov	eax, DWORD PTR _cid$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_cid_get_offset
	add	esp, 8
	mov	DWORD PTR _fd_select$[ebp], eax
; Line 113
	mov	eax, DWORD PTR _cid$[ebp]
	movzx	ecx, BYTE PTR [eax+152]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_cid_get_offset
	add	esp, 8
	mov	DWORD PTR _off1$5[ebp], eax
; Line 114
	mov	eax, DWORD PTR _cid$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR _p$[ebp], ecx
; Line 115
	mov	edx, DWORD PTR _cid$[ebp]
	movzx	eax, BYTE PTR [edx+152]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_cid_get_offset
	add	esp, 8
	sub	eax, DWORD PTR _off1$5[ebp]
	mov	DWORD PTR _glyph_length$[ebp], eax
; Line 116
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 118
	mov	eax, DWORD PTR _cid$[ebp]
	mov	ecx, DWORD PTR _fd_select$[ebp]
	cmp	ecx, DWORD PTR [eax+160]
	jb	SHORT $LN9@cid_load_g
; Line 120
	push	OFFSET $SG9643
	push	120					; 00000078H
	push	9
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 9
	mov	DWORD PTR _error$[ebp], eax
; Line 121
	jmp	$Exit$32
$LN9@cid_load_g:
; Line 123
	cmp	DWORD PTR _glyph_length$[ebp], 0
	jne	SHORT $LN8@cid_load_g
; Line 124
	jmp	$Exit$32
$LN8@cid_load_g:
; Line 125
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _charstring$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@cid_load_g
; Line 126
	jmp	$Exit$32
$LN7@cid_load_g:
; Line 128
	mov	edx, DWORD PTR _glyph_length$[ebp]
	push	edx
	mov	eax, DWORD PTR _charstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cid$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	add	edx, DWORD PTR _off1$5[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadAt
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@cid_load_g
; Line 129
	jmp	$Exit$32
$LN12@cid_load_g:
; Line 135
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+316]
	mov	eax, DWORD PTR _fd_select$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _cid_subrs$3[ebp], ecx
; Line 140
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _cid_subrs$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+1364], ecx
; Line 141
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _cid_subrs$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+1368], ecx
; Line 142
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+1372], 0
; Line 145
	imul	eax, DWORD PTR _fd_select$[ebp], 252
	mov	ecx, DWORD PTR _cid$[ebp]
	add	eax, DWORD PTR [ecx+164]
	mov	DWORD PTR _dict$4[ebp], eax
; Line 147
	mov	edx, DWORD PTR _dict$4[ebp]
	add	edx, 216				; 000000d8H
	mov	eax, DWORD PTR _decoder$[ebp]
	add	eax, 1376				; 00000560H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 148
	mov	eax, DWORD PTR _dict$4[ebp]
	mov	ecx, DWORD PTR [eax+232]
	mov	edx, DWORD PTR [eax+236]
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax+1392], ecx
	mov	DWORD PTR [eax+1396], edx
; Line 149
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _dict$4[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+1360], eax
; Line 154
	mov	ecx, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [ecx+1360], 0
	jl	SHORT $LN24@cid_load_g
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+1360]
	mov	DWORD PTR tv218[ebp], eax
	jmp	SHORT $LN25@cid_load_g
$LN24@cid_load_g:
	mov	DWORD PTR tv218[ebp], 0
$LN25@cid_load_g:
	mov	ecx, DWORD PTR tv218[ebp]
	mov	DWORD PTR _cs_offset$2[ebp], ecx
; Line 157
	mov	edx, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [edx+1360], 0
	jl	SHORT $LN5@cid_load_g
; Line 158
	mov	esi, esp
	push	4330					; 000010eaH
	mov	eax, DWORD PTR _glyph_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _charstring$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@cid_load_g:
; Line 162
	mov	ecx, DWORD PTR _glyph_length$[ebp]
	sub	ecx, DWORD PTR _cs_offset$2[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _charstring$[ebp]
	add	edx, DWORD PTR _cs_offset$2[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+1484]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN4@cid_load_g:
; Line 165
	mov	eax, DWORD PTR _charstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _charstring$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN4@cid_load_g
; Line 170
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$32
	cmp	DWORD PTR _inc$[ebp], 0
	je	$Exit$32
	mov	eax, DWORD PTR _inc$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+8], 0
	je	$Exit$32
; Line 175
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _metrics$1[ebp], eax
; Line 176
	mov	DWORD PTR _metrics$1[ebp+4], 0
; Line 177
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _metrics$1[ebp+8], eax
; Line 178
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _metrics$1[ebp+12], eax
; Line 181
	mov	esi, esp
	lea	edx, DWORD PTR _metrics$1[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _inc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 183
	mov	eax, DWORD PTR _metrics$1[ebp]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 184
	mov	edx, DWORD PTR _metrics$1[ebp+8]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 185
	mov	ecx, DWORD PTR _metrics$1[ebp+12]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+44], ecx
$Exit$32:
; Line 191
	mov	eax, DWORD PTR _error$[ebp]
; Line 192
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@cid_load_g
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 128				; 00000080H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN31@cid_load_g:
	DD	4
	DD	$LN30@cid_load_g
$LN30@cid_load_g:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN26@cid_load_g
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN27@cid_load_g
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN28@cid_load_g
	DD	-120					; ffffff88H
	DD	16					; 00000010H
	DD	$LN29@cid_load_g
$LN29@cid_load_g:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
$LN28@cid_load_g:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN27@cid_load_g:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN26@cid_load_g:
	DB	112					; 00000070H
	DB	0
_cid_load_glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_MulFix_i386 PROC
; File d:\mozilla\modules\freetype2\include\internal\ftcalc.h
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 159
	mov	eax, DWORD PTR _a$[ebp]
; Line 160
	mov	edx, DWORD PTR _b$[ebp]
; Line 161
	imul	edx
; Line 162
	mov	ecx, edx
; Line 163
	sar	ecx, 31					; 0000001fH
; Line 164
	add	ecx, 32768				; 00008000H
; Line 165
	add	eax, ecx
; Line 166
	adc	edx, 0
; Line 167
	shr	eax, 16					; 00000010H
; Line 168
	shl	edx, 16					; 00000010H
; Line 169
	add	eax, edx
; Line 170
	mov	DWORD PTR _result$[ebp], eax
; Line 172
	mov	eax, DWORD PTR _result$[ebp]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_MulFix_i386 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_cid_interface$ = 12					; size = 4
_cid_get_interface PROC
; File d:\mozilla\modules\freetype2\src\cid\cidriver.c
; Line 182
	push	ebp
	mov	ebp, esp
; Line 183
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 185
	mov	ecx, DWORD PTR _cid_interface$[ebp]
	push	ecx
	push	OFFSET _cid_services
	call	_ft_service_list_lookup
	add	esp, 8
; Line 186
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cid_get_interface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_cid$ = 16						; size = 4
_cid_get_cid_from_glyph_index PROC
; File d:\mozilla\modules\freetype2\src\cid\cidriver.c
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 145
	mov	DWORD PTR _error$[ebp], 0
; Line 146
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 149
	cmp	DWORD PTR _cid$[ebp], 0
	je	SHORT $LN1@cid_get_ci
; Line 150
	mov	ecx, DWORD PTR _cid$[ebp]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@cid_get_ci:
; Line 152
	mov	eax, DWORD PTR _error$[ebp]
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_get_cid_from_glyph_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_is_cid$ = 12						; size = 4
_cid_get_is_cid PROC
; File d:\mozilla\modules\freetype2\src\cid\cidriver.c
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 129
	mov	DWORD PTR _error$[ebp], 0
; Line 130
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 133
	cmp	DWORD PTR _is_cid$[ebp], 0
	je	SHORT $LN1@cid_get_is
; Line 134
	mov	ecx, DWORD PTR _is_cid$[ebp]
	mov	BYTE PTR [ecx], 1
$LN1@cid_get_is:
; Line 136
	mov	eax, DWORD PTR _error$[ebp]
; Line 137
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_get_is_cid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cid$ = -4						; size = 4
_face$ = 8						; size = 4
_registry$ = 12						; size = 4
_ordering$ = 16						; size = 4
_supplement$ = 20					; size = 4
_cid_get_ros PROC
; File d:\mozilla\modules\freetype2\src\cid\cidriver.c
; Line 108
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 109
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 140				; 0000008cH
	mov	DWORD PTR _cid$[ebp], eax
; Line 112
	cmp	DWORD PTR _registry$[ebp], 0
	je	SHORT $LN3@cid_get_ro
; Line 113
	mov	ecx, DWORD PTR _registry$[ebp]
	mov	edx, DWORD PTR _cid$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx], eax
$LN3@cid_get_ro:
; Line 115
	cmp	DWORD PTR _ordering$[ebp], 0
	je	SHORT $LN2@cid_get_ro
; Line 116
	mov	ecx, DWORD PTR _ordering$[ebp]
	mov	edx, DWORD PTR _cid$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx], eax
$LN2@cid_get_ro:
; Line 118
	cmp	DWORD PTR _supplement$[ebp], 0
	je	SHORT $LN1@cid_get_ro
; Line 119
	mov	ecx, DWORD PTR _supplement$[ebp]
	mov	edx, DWORD PTR _cid$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx], eax
$LN1@cid_get_ro:
; Line 121
	xor	eax, eax
; Line 122
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_get_ros ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_afont_extra$ = 12					; size = 4
_cid_ps_get_font_extra PROC
; File d:\mozilla\modules\freetype2\src\cid\cidriver.c
; Line 83
	push	ebp
	mov	ebp, esp
; Line 84
	mov	eax, DWORD PTR _face$[ebp]
	mov	cx, WORD PTR [eax+312]
	mov	edx, DWORD PTR _afont_extra$[ebp]
	mov	WORD PTR [edx], cx
; Line 86
	xor	eax, eax
; Line 87
	pop	ebp
	ret	0
_cid_ps_get_font_extra ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_afont_info$ = 12					; size = 4
_cid_ps_get_font_info PROC
; File d:\mozilla\modules\freetype2\src\cid\cidriver.c
; Line 74
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 75
	mov	esi, DWORD PTR _face$[ebp]
	add	esi, 164				; 000000a4H
	mov	ecx, 8
	mov	edi, DWORD PTR _afont_info$[ebp]
	rep movsd
; Line 77
	xor	eax, eax
; Line 78
	pop	edi
	pop	esi
	pop	ebp
	ret	0
_cid_ps_get_font_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_cid_get_postscript_name PROC
; File d:\mozilla\modules\freetype2\src\cid\cidriver.c
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 50
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _result$[ebp], ecx
; Line 53
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN1@cid_get_po
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _result$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 47					; 0000002fH
	jne	SHORT $LN1@cid_get_po
; Line 54
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 1
	mov	DWORD PTR _result$[ebp], eax
$LN1@cid_get_po:
; Line 56
	mov	eax, DWORD PTR _result$[ebp]
; Line 57
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_get_postscript_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -16						; size = 4
_module$ = -12						; size = 4
_pshinter$ = -8						; size = 4
_face$ = -4						; size = 4
_size$ = 8						; size = 4
_cid_size_get_globals_funcs PROC
; File d:\mozilla\modules\freetype2\src\cid\cidobjs.c
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 97
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 98
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+320]
	mov	DWORD PTR _pshinter$[ebp], eax
; Line 103
	push	OFFSET $SG9080
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _module$[ebp], eax
; Line 106
	cmp	DWORD PTR _module$[ebp], 0
	je	SHORT $LN3@cid_size_g
	cmp	DWORD PTR _pshinter$[ebp], 0
	je	SHORT $LN3@cid_size_g
	mov	edx, DWORD PTR _pshinter$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@cid_size_g
	mov	esi, esp
	mov	eax, DWORD PTR _module$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pshinter$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@cid_size_g
$LN3@cid_size_g:
	mov	DWORD PTR tv79[ebp], 0
$LN4@cid_size_g:
	mov	eax, DWORD PTR tv79[ebp]
; Line 107
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_size_get_globals_funcs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv138 = -1642						; size = 1
tv86 = -1641						; size = 1
_y_scale$1 = -1640					; size = 4
_x_scale$2 = -1636					; size = 4
_vec$3 = -1632						; size = 4
_cur$4 = -1628						; size = 4
_n$5 = -1624						; size = 4
_advance$6 = -1616					; size = 8
_metrics$7 = -1604					; size = 4
_cbox$8 = -1596						; size = 16
_internal$9 = -1576					; size = 4
_font_offset$ = -1568					; size = 8
_font_matrix$ = -1552					; size = 16
_psaux$ = -1532						; size = 4
_hinting$ = -1525					; size = 1
_face$ = -1524						; size = 4
_decoder$ = -1516					; size = 1500
_error$ = -12						; size = 4
_glyph$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cidglyph$ = 8						; size = 4
_cidsize$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_cid_slot_load_glyph PROC
; File d:\mozilla\modules\freetype2\src\cid\cidgload.c
; Line 273
	push	ebp
	mov	ebp, esp
	sub	esp, 1644				; 0000066cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1644]
	mov	ecx, 411				; 0000019bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 274
	mov	eax, DWORD PTR _cidglyph$[ebp]
	mov	DWORD PTR _glyph$[ebp], eax
; Line 277
	mov	ecx, DWORD PTR _cidglyph$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _face$[ebp], edx
; Line 280
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR _psaux$[ebp], ecx
; Line 285
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jb	SHORT $LN14@cid_slot_l
; Line 287
	push	OFFSET $SG9687
	push	287					; 0000011fH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 288
	jmp	$Exit$28
$LN14@cid_slot_l:
; Line 291
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN13@cid_slot_l
; Line 292
	mov	edx, DWORD PTR _load_flags$[ebp]
	or	edx, 3
	mov	DWORD PTR _load_flags$[ebp], edx
$LN13@cid_slot_l:
; Line 294
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR _cidsize$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+164], edx
; Line 295
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR _cidsize$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+168], edx
; Line 297
	xor	eax, eax
	mov	ecx, DWORD PTR _cidglyph$[ebp]
	mov	WORD PTR [ecx+110], ax
; Line 298
	xor	edx, edx
	mov	eax, DWORD PTR _cidglyph$[ebp]
	mov	WORD PTR [eax+108], dx
; Line 301
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 1
	jne	SHORT $LN17@cid_slot_l
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 2
	jne	SHORT $LN17@cid_slot_l
	mov	BYTE PTR tv86[ebp], 1
	jmp	SHORT $LN18@cid_slot_l
$LN17@cid_slot_l:
	mov	BYTE PTR tv86[ebp], 0
$LN18@cid_slot_l:
	mov	al, BYTE PTR tv86[ebp]
	mov	BYTE PTR _hinting$[ebp], al
; Line 303
	mov	ecx, DWORD PTR _cidglyph$[ebp]
	mov	DWORD PTR [ecx+72], 1869968492		; 6f75746cH
; Line 313
	mov	esi, esp
	push	OFFSET _cid_load_glyph
	mov	edx, DWORD PTR _load_flags$[ebp]
	sar	edx, 16					; 00000010H
	and	edx, 15					; 0000000fH
	push	edx
	movzx	eax, BYTE PTR _hinting$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _cidglyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cidsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _cidglyph$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _decoder$[ebp]
	push	edx
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 36					; 00000024H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 314
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@cid_slot_l
; Line 315
	jmp	$Exit$28
$LN12@cid_slot_l:
; Line 322
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 1024				; 00000400H
	je	SHORT $LN19@cid_slot_l
	mov	BYTE PTR tv138[ebp], 1
	jmp	SHORT $LN20@cid_slot_l
$LN19@cid_slot_l:
	mov	BYTE PTR tv138[ebp], 0
$LN20@cid_slot_l:
	mov	cl, BYTE PTR tv138[ebp]
	mov	BYTE PTR _decoder$[ebp+69], cl
; Line 324
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	lea	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cid_load_glyph
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 325
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@cid_slot_l
; Line 326
	jmp	$Exit$28
$LN11@cid_slot_l:
; Line 328
	mov	ecx, DWORD PTR _decoder$[ebp+1376]
	mov	DWORD PTR _font_matrix$[ebp], ecx
	mov	edx, DWORD PTR _decoder$[ebp+1380]
	mov	DWORD PTR _font_matrix$[ebp+4], edx
	mov	eax, DWORD PTR _decoder$[ebp+1384]
	mov	DWORD PTR _font_matrix$[ebp+8], eax
	mov	ecx, DWORD PTR _decoder$[ebp+1388]
	mov	DWORD PTR _font_matrix$[ebp+12], ecx
; Line 329
	mov	edx, DWORD PTR _decoder$[ebp+1392]
	mov	DWORD PTR _font_offset$[ebp], edx
	mov	eax, DWORD PTR _decoder$[ebp+1396]
	mov	DWORD PTR _font_offset$[ebp+4], eax
; Line 332
	mov	esi, esp
	lea	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 337
	mov	edx, DWORD PTR _cidglyph$[ebp]
	mov	eax, DWORD PTR [edx+124]
	and	eax, 1
	mov	ecx, DWORD PTR _cidglyph$[ebp]
	mov	DWORD PTR [ecx+124], eax
; Line 338
	mov	edx, DWORD PTR _cidglyph$[ebp]
	mov	eax, DWORD PTR [edx+124]
	or	eax, 4
	mov	ecx, DWORD PTR _cidglyph$[ebp]
	mov	DWORD PTR [ecx+124], eax
; Line 342
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 1024				; 00000400H
	je	$LN10@cid_slot_l
; Line 344
	mov	eax, DWORD PTR _cidglyph$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR _internal$9[ebp], ecx
; Line 348
	mov	edx, DWORD PTR _decoder$[ebp+32]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _cidglyph$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 350
	mov	edx, DWORD PTR _decoder$[ebp+40]
	push	edx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _cidglyph$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 352
	mov	edx, DWORD PTR _internal$9[ebp]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _font_matrix$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _font_matrix$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _font_matrix$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _font_matrix$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
; Line 353
	mov	edx, DWORD PTR _internal$9[ebp]
	mov	eax, DWORD PTR _font_offset$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _font_offset$[ebp+4]
	mov	DWORD PTR [edx+32], ecx
; Line 354
	mov	edx, DWORD PTR _internal$9[ebp]
	mov	BYTE PTR [edx+8], 1
; Line 356
	jmp	$Exit$28
$LN10@cid_slot_l:
; Line 359
	mov	eax, DWORD PTR _cidglyph$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _metrics$7[ebp], eax
; Line 365
	mov	ecx, DWORD PTR _decoder$[ebp+40]
	push	ecx
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 367
	mov	eax, DWORD PTR _decoder$[ebp+40]
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _cidglyph$[ebp]
	mov	DWORD PTR [ecx+56], eax
; Line 368
	mov	edx, DWORD PTR _cidglyph$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	BYTE PTR [eax+8], 0
; Line 372
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [ecx+208]
	sub	eax, DWORD PTR [edx+200]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 373
	mov	edx, DWORD PTR _cidglyph$[ebp]
	mov	eax, DWORD PTR _metrics$7[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+60], ecx
; Line 375
	mov	edx, DWORD PTR _cidglyph$[ebp]
	mov	DWORD PTR [edx+72], 1869968492		; 6f75746cH
; Line 377
	mov	eax, DWORD PTR _cidsize$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cmp	ecx, 24					; 00000018H
	jge	SHORT $LN8@cid_slot_l
; Line 378
	mov	edx, DWORD PTR _cidglyph$[ebp]
	mov	eax, DWORD PTR [edx+124]
	or	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _cidglyph$[ebp]
	mov	DWORD PTR [ecx+124], eax
$LN8@cid_slot_l:
; Line 381
	lea	edx, DWORD PTR _font_matrix$[ebp]
	push	edx
	mov	eax, DWORD PTR _cidglyph$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_Outline_Transform
	add	esp, 8
; Line 385
	mov	ecx, DWORD PTR _font_offset$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _font_offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _cidglyph$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
; Line 387
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _advance$6[ebp], edx
; Line 388
	mov	DWORD PTR _advance$6[ebp+4], 0
; Line 389
	lea	eax, DWORD PTR _font_matrix$[ebp]
	push	eax
	lea	ecx, DWORD PTR _advance$6[ebp]
	push	ecx
	call	_FT_Vector_Transform
	add	esp, 8
; Line 390
	mov	edx, DWORD PTR _advance$6[ebp]
	add	edx, DWORD PTR _font_offset$[ebp]
	mov	eax, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 392
	mov	DWORD PTR _advance$6[ebp], 0
; Line 393
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _advance$6[ebp+4], edx
; Line 394
	lea	eax, DWORD PTR _font_matrix$[ebp]
	push	eax
	lea	ecx, DWORD PTR _advance$6[ebp]
	push	ecx
	call	_FT_Vector_Transform
	add	esp, 8
; Line 395
	mov	edx, DWORD PTR _advance$6[ebp+4]
	add	edx, DWORD PTR _font_offset$[ebp+4]
	mov	eax, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 397
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 1
	jne	$LN7@cid_slot_l
; Line 401
	mov	edx, DWORD PTR _decoder$[ebp+16]
	mov	DWORD PTR _cur$4[ebp], edx
; Line 402
	mov	eax, DWORD PTR _cur$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vec$3[ebp], ecx
; Line 403
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	DWORD PTR _x_scale$2[ebp], eax
; Line 404
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR _y_scale$1[ebp], edx
; Line 408
	movzx	eax, BYTE PTR _hinting$[ebp]
	test	eax, eax
	je	SHORT $LN5@cid_slot_l
	cmp	DWORD PTR _decoder$[ebp+72], 0
	jne	SHORT $LN6@cid_slot_l
$LN5@cid_slot_l:
; Line 409
	mov	ecx, DWORD PTR _cur$4[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR _n$5[ebp], edx
	jmp	SHORT $LN4@cid_slot_l
$LN3@cid_slot_l:
	mov	eax, DWORD PTR _n$5[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$5[ebp], eax
	mov	ecx, DWORD PTR _vec$3[ebp]
	add	ecx, 8
	mov	DWORD PTR _vec$3[ebp], ecx
$LN4@cid_slot_l:
	cmp	DWORD PTR _n$5[ebp], 0
	jle	SHORT $LN6@cid_slot_l
; Line 411
	mov	edx, DWORD PTR _x_scale$2[ebp]
	push	edx
	mov	eax, DWORD PTR _vec$3[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _vec$3[ebp]
	mov	DWORD PTR [edx], eax
; Line 412
	mov	eax, DWORD PTR _y_scale$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _vec$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _vec$3[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 413
	jmp	SHORT $LN3@cid_slot_l
$LN6@cid_slot_l:
; Line 416
	mov	edx, DWORD PTR _x_scale$2[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$7[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 417
	mov	eax, DWORD PTR _y_scale$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN7@cid_slot_l:
; Line 421
	lea	edx, DWORD PTR _cbox$8[ebp]
	push	edx
	mov	eax, DWORD PTR _cidglyph$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_Outline_Get_CBox
	add	esp, 8
; Line 423
	mov	ecx, DWORD PTR _cbox$8[ebp+8]
	sub	ecx, DWORD PTR _cbox$8[ebp]
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [edx], ecx
; Line 424
	mov	eax, DWORD PTR _cbox$8[ebp+12]
	sub	eax, DWORD PTR _cbox$8[ebp+4]
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 426
	mov	edx, DWORD PTR _metrics$7[ebp]
	mov	eax, DWORD PTR _cbox$8[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 427
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	edx, DWORD PTR _cbox$8[ebp+12]
	mov	DWORD PTR [ecx+12], edx
; Line 429
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $Exit$28
; Line 433
	mov	ecx, DWORD PTR _metrics$7[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _metrics$7[ebp]
	push	eax
	call	_ft_synthesize_vertical_metrics
	add	esp, 8
$Exit$28:
; Line 438
	mov	eax, DWORD PTR _error$[ebp]
; Line 439
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@cid_slot_l
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1644				; 0000066cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN27@cid_slot_l:
	DD	5
	DD	$LN26@cid_slot_l
$LN26@cid_slot_l:
	DD	-1516					; fffffa14H
	DD	1500					; 000005dcH
	DD	$LN21@cid_slot_l
	DD	-1552					; fffff9f0H
	DD	16					; 00000010H
	DD	$LN22@cid_slot_l
	DD	-1568					; fffff9e0H
	DD	8
	DD	$LN23@cid_slot_l
	DD	-1596					; fffff9c4H
	DD	16					; 00000010H
	DD	$LN24@cid_slot_l
	DD	-1616					; fffff9b0H
	DD	8
	DD	$LN25@cid_slot_l
$LN25@cid_slot_l:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN24@cid_slot_l:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
$LN23@cid_slot_l:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN22@cid_slot_l:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN21@cid_slot_l:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_cid_slot_load_glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_driver$ = 8						; size = 4
_cid_driver_done PROC
; File d:\mozilla\modules\freetype2\src\cid\cidobjs.c
; Line 487
	push	ebp
	mov	ebp, esp
; Line 488
	mov	eax, DWORD PTR _driver$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 489
	pop	ebp
	ret	0
_cid_driver_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_driver$ = 8						; size = 4
_cid_driver_init PROC
; File d:\mozilla\modules\freetype2\src\cid\cidobjs.c
; Line 467
	push	ebp
	mov	ebp, esp
; Line 468
	mov	eax, DWORD PTR _driver$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 470
	xor	eax, eax
; Line 471
	pop	ebp
	ret	0
_cid_driver_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_subr$1 = -24						; size = 4
_n$2 = -20						; size = 4
_info$ = -16						; size = 4
_cid$ = -12						; size = 4
_memory$ = -8						; size = 4
_face$ = -4						; size = 4
_cidface$ = 8						; size = 4
_cid_face_done PROC
; File d:\mozilla\modules\freetype2\src\cid\cidobjs.c
; Line 195
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 196
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 202
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN48@cid_face_d
; Line 203
	jmp	$LN49@cid_face_d
$LN48@cid_face_d:
; Line 205
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 140				; 0000008cH
	mov	DWORD PTR _cid$[ebp], ecx
; Line 206
	mov	edx, DWORD PTR _cid$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _info$[ebp], edx
; Line 207
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 210
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+316], 0
	je	$LN33@cid_face_d
; Line 215
	mov	DWORD PTR _n$2[ebp], 0
	jmp	SHORT $LN46@cid_face_d
$LN45@cid_face_d:
	mov	eax, DWORD PTR _n$2[ebp]
	add	eax, 1
	mov	DWORD PTR _n$2[ebp], eax
$LN46@cid_face_d:
	mov	ecx, DWORD PTR _cid$[ebp]
	mov	edx, DWORD PTR _n$2[ebp]
	cmp	edx, DWORD PTR [ecx+160]
	jge	SHORT $LN36@cid_face_d
; Line 217
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, DWORD PTR _n$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _subr$1[ebp], eax
; Line 220
	mov	ecx, DWORD PTR _subr$1[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN43@cid_face_d
$LN42@cid_face_d:
; Line 222
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _subr$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _subr$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+edx], 0
	xor	eax, eax
	jne	SHORT $LN42@cid_face_d
$LN39@cid_face_d:
; Line 223
	mov	ecx, DWORD PTR _subr$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _subr$1[ebp]
	mov	DWORD PTR [ecx+4], 0
	xor	edx, edx
	jne	SHORT $LN39@cid_face_d
$LN43@cid_face_d:
; Line 225
	jmp	$LN45@cid_face_d
$LN36@cid_face_d:
; Line 227
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+316], 0
	xor	ecx, ecx
	jne	SHORT $LN36@cid_face_d
$LN33@cid_face_d:
; Line 231
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx], 0
	xor	eax, eax
	jne	SHORT $LN33@cid_face_d
$LN30@cid_face_d:
; Line 232
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+4], 0
	xor	edx, edx
	jne	SHORT $LN30@cid_face_d
$LN27@cid_face_d:
; Line 233
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _info$[ebp]
	mov	DWORD PTR [eax+8], 0
	xor	ecx, ecx
	jne	SHORT $LN27@cid_face_d
$LN24@cid_face_d:
; Line 234
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+12], 0
	xor	eax, eax
	jne	SHORT $LN24@cid_face_d
$LN21@cid_face_d:
; Line 235
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+16], 0
	xor	edx, edx
	jne	SHORT $LN21@cid_face_d
$LN18@cid_face_d:
; Line 238
	mov	eax, DWORD PTR _cid$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _cid$[ebp]
	mov	DWORD PTR [eax+164], 0
	xor	ecx, ecx
	jne	SHORT $LN18@cid_face_d
; Line 239
	mov	edx, DWORD PTR _cid$[ebp]
	mov	DWORD PTR [edx+160], 0
$LN15@cid_face_d:
; Line 242
	mov	eax, DWORD PTR _cid$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _cid$[ebp]
	mov	DWORD PTR [eax], 0
	xor	ecx, ecx
	jne	SHORT $LN15@cid_face_d
$LN12@cid_face_d:
; Line 243
	mov	edx, DWORD PTR _cid$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _cid$[ebp]
	mov	DWORD PTR [edx+12], 0
	xor	eax, eax
	jne	SHORT $LN12@cid_face_d
$LN9@cid_face_d:
; Line 244
	mov	ecx, DWORD PTR _cid$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _cid$[ebp]
	mov	DWORD PTR [ecx+16], 0
	xor	edx, edx
	jne	SHORT $LN9@cid_face_d
; Line 246
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 247
	mov	ecx, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [ecx+24], 0
$LN6@cid_face_d:
; Line 249
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+324]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+324], 0
	xor	eax, eax
	jne	SHORT $LN6@cid_face_d
$LN3@cid_face_d:
; Line 250
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+328]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+328], 0
	xor	edx, edx
	jne	SHORT $LN3@cid_face_d
$LN49@cid_face_d:
; Line 251
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_face_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_family$1 = -32						; size = 4
_full$2 = -28						; size = 4
_info$3 = -24						; size = 4
_cid$4 = -20						; size = 4
_pshinter$ = -16					; size = 4
_psaux$ = -12						; size = 4
_error$ = -8						; size = 4
_face$ = -4						; size = 4
_stream$ = 8						; size = 4
_cidface$ = 12						; size = 4
_face_index$ = 16					; size = 4
_num_params$ = 20					; size = 4
_params$ = 24						; size = 4
_cid_face_init PROC
; File d:\mozilla\modules\freetype2\src\cid\cidobjs.c
; Line 283
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 284
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 289
	mov	ecx, DWORD PTR _num_params$[ebp]
	mov	DWORD PTR _num_params$[ebp], ecx
; Line 290
	mov	edx, DWORD PTR _params$[ebp]
	mov	DWORD PTR _params$[ebp], edx
; Line 291
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _stream$[ebp], eax
; Line 294
	mov	ecx, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 296
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	DWORD PTR _psaux$[ebp], eax
; Line 297
	cmp	DWORD PTR _psaux$[ebp], 0
	jne	SHORT $LN33@cid_face_i
; Line 300
	push	OFFSET $SG9207
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_Get_Module_Interface
	add	esp, 8
	mov	DWORD PTR _psaux$[ebp], eax
; Line 302
	cmp	DWORD PTR _psaux$[ebp], 0
	jne	SHORT $LN32@cid_face_i
; Line 304
	push	OFFSET $SG9209
	call	_FT_Message
	add	esp, 4
; Line 305
	push	OFFSET $SG9210
	push	305					; 00000131H
	push	11					; 0000000bH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 11					; 0000000bH
	mov	DWORD PTR _error$[ebp], eax
; Line 306
	jmp	$Exit$36
$LN32@cid_face_i:
; Line 309
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _psaux$[ebp]
	mov	DWORD PTR [ecx+136], edx
$LN33@cid_face_i:
; Line 312
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+320]
	mov	DWORD PTR _pshinter$[ebp], ecx
; Line 313
	cmp	DWORD PTR _pshinter$[ebp], 0
	jne	SHORT $LN30@cid_face_i
; Line 316
	push	OFFSET $SG9216
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_Get_Module_Interface
	add	esp, 8
	mov	DWORD PTR _pshinter$[ebp], eax
; Line 318
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _pshinter$[ebp]
	mov	DWORD PTR [edx+320], eax
$LN30@cid_face_i:
; Line 321
	mov	ecx, 4
	imul	edx, ecx, 59
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN29@cid_face_i
	push	OFFSET $SG9221
	call	_FT_Message
	add	esp, 4
$LN29@cid_face_i:
	xor	eax, eax
	jne	SHORT $LN30@cid_face_i
; Line 324
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN26@cid_face_i
; Line 325
	jmp	$Exit$36
$LN26@cid_face_i:
; Line 327
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_cid_face_open
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 328
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN25@cid_face_i
; Line 329
	jmp	$Exit$36
$LN25@cid_face_i:
; Line 332
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN24@cid_face_i
; Line 333
	jmp	$Exit$36
$LN24@cid_face_i:
; Line 337
	cmp	DWORD PTR _face_index$[ebp], 0
	je	SHORT $LN23@cid_face_i
; Line 339
	push	OFFSET $SG9227
	call	_FT_Message
	add	esp, 4
; Line 340
	push	OFFSET $SG9228
	push	340					; 00000154H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 341
	jmp	$Exit$36
$LN23@cid_face_i:
; Line 350
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 140				; 0000008cH
	mov	DWORD PTR _cid$4[ebp], ecx
; Line 351
	mov	edx, DWORD PTR _cid$4[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _info$3[ebp], edx
; Line 354
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	ecx, DWORD PTR _cid$4[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR [eax+16], edx
; Line 355
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 357
	mov	ecx, DWORD PTR _cidface$[ebp]
	mov	edx, DWORD PTR _face_index$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 361
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 2065				; 00000811H
	mov	edx, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 363
	mov	eax, DWORD PTR _info$3[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN22@cid_face_i
; Line 364
	mov	edx, DWORD PTR _cidface$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 4
	mov	ecx, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN22@cid_face_i:
; Line 370
	mov	edx, DWORD PTR _cidface$[ebp]
	mov	eax, DWORD PTR _info$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+20], ecx
; Line 372
	mov	edx, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG9233
; Line 373
	mov	eax, DWORD PTR _cidface$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN21@cid_face_i
; Line 375
	mov	ecx, DWORD PTR _info$3[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _full$2[ebp], edx
; Line 376
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _family$1[ebp], ecx
; Line 379
	cmp	DWORD PTR _full$2[ebp], 0
	je	$LN20@cid_face_i
$LN19@cid_face_i:
; Line 381
	mov	edx, DWORD PTR _full$2[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN20@cid_face_i
; Line 383
	mov	ecx, DWORD PTR _full$2[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _family$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN17@cid_face_i
; Line 385
	mov	edx, DWORD PTR _family$1[ebp]
	add	edx, 1
	mov	DWORD PTR _family$1[ebp], edx
; Line 386
	mov	eax, DWORD PTR _full$2[ebp]
	add	eax, 1
	mov	DWORD PTR _full$2[ebp], eax
; Line 388
	jmp	SHORT $LN16@cid_face_i
$LN17@cid_face_i:
; Line 390
	mov	ecx, DWORD PTR _full$2[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN14@cid_face_i
	mov	eax, DWORD PTR _full$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN15@cid_face_i
$LN14@cid_face_i:
; Line 391
	mov	edx, DWORD PTR _full$2[ebp]
	add	edx, 1
	mov	DWORD PTR _full$2[ebp], edx
	jmp	SHORT $LN16@cid_face_i
$LN15@cid_face_i:
; Line 392
	mov	eax, DWORD PTR _family$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN11@cid_face_i
	mov	edx, DWORD PTR _family$1[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN12@cid_face_i
$LN11@cid_face_i:
; Line 393
	mov	ecx, DWORD PTR _family$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _family$1[ebp], ecx
; Line 394
	jmp	SHORT $LN16@cid_face_i
$LN12@cid_face_i:
; Line 396
	mov	edx, DWORD PTR _family$1[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN9@cid_face_i
; Line 397
	mov	ecx, DWORD PTR _cidface$[ebp]
	mov	edx, DWORD PTR _full$2[ebp]
	mov	DWORD PTR [ecx+24], edx
$LN9@cid_face_i:
; Line 398
	jmp	SHORT $LN20@cid_face_i
$LN16@cid_face_i:
; Line 401
	jmp	$LN19@cid_face_i
$LN20@cid_face_i:
; Line 404
	jmp	SHORT $LN8@cid_face_i
$LN21@cid_face_i:
; Line 407
	mov	eax, DWORD PTR _cid$4[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN8@cid_face_i
; Line 408
	mov	ecx, DWORD PTR _cidface$[ebp]
	mov	edx, DWORD PTR _cid$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+20], eax
$LN8@cid_face_i:
; Line 412
	mov	ecx, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 413
	mov	edx, DWORD PTR _info$3[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN6@cid_face_i
; Line 414
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 1
	mov	edx, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN6@cid_face_i:
; Line 415
	mov	eax, DWORD PTR _info$3[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN5@cid_face_i
; Line 418
	push	OFFSET $SG9256
	mov	ecx, DWORD PTR _info$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@cid_face_i
	push	OFFSET $SG9257
	mov	eax, DWORD PTR _info$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@cid_face_i
$LN3@cid_face_i:
; Line 419
	mov	edx, DWORD PTR _cidface$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 2
	mov	ecx, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN5@cid_face_i:
; Line 423
	mov	edx, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 424
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 426
	mov	ecx, DWORD PTR _cid$4[ebp]
	mov	edx, DWORD PTR [ecx+56]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [eax+52], edx
; Line 427
	mov	ecx, DWORD PTR _cid$4[ebp]
	mov	edx, DWORD PTR [ecx+60]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [eax+56], edx
; Line 429
	mov	ecx, DWORD PTR _cid$4[ebp]
	mov	edx, DWORD PTR [ecx+64]
	add	edx, 65535				; 0000ffffH
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [eax+60], edx
; Line 430
	mov	ecx, DWORD PTR _cid$4[ebp]
	mov	edx, DWORD PTR [ecx+68]
	add	edx, 65535				; 0000ffffH
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	DWORD PTR [eax+64], edx
; Line 432
	mov	ecx, DWORD PTR _cidface$[ebp]
	movzx	edx, WORD PTR [ecx+68]
	test	edx, edx
	jne	SHORT $LN2@cid_face_i
; Line 433
	mov	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR _cidface$[ebp]
	mov	WORD PTR [ecx+68], ax
$LN2@cid_face_i:
; Line 435
	mov	edx, DWORD PTR _cidface$[ebp]
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	cx, WORD PTR [eax+64]
	mov	WORD PTR [edx+70], cx
; Line 436
	mov	edx, DWORD PTR _cidface$[ebp]
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	cx, WORD PTR [eax+56]
	mov	WORD PTR [edx+72], cx
; Line 438
	mov	edx, DWORD PTR _cidface$[ebp]
	movzx	eax, WORD PTR [edx+68]
	imul	eax, eax, 12
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	edx, DWORD PTR _cidface$[ebp]
	mov	WORD PTR [edx+74], ax
; Line 439
	mov	eax, DWORD PTR _cidface$[ebp]
	movsx	ecx, WORD PTR [eax+74]
	mov	edx, DWORD PTR _cidface$[ebp]
	movsx	eax, WORD PTR [edx+70]
	mov	edx, DWORD PTR _cidface$[ebp]
	movsx	edx, WORD PTR [edx+72]
	sub	eax, edx
	cmp	ecx, eax
	jge	SHORT $LN1@cid_face_i
; Line 440
	mov	eax, DWORD PTR _cidface$[ebp]
	movsx	ecx, WORD PTR [eax+70]
	mov	edx, DWORD PTR _cidface$[ebp]
	movsx	eax, WORD PTR [edx+72]
	sub	ecx, eax
	mov	edx, DWORD PTR _cidface$[ebp]
	mov	WORD PTR [edx+74], cx
$LN1@cid_face_i:
; Line 442
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	ecx, DWORD PTR _info$3[ebp]
	mov	dx, WORD PTR [ecx+26]
	mov	WORD PTR [eax+80], dx
; Line 443
	mov	eax, DWORD PTR _cidface$[ebp]
	mov	ecx, DWORD PTR _info$3[ebp]
	mov	dx, WORD PTR [ecx+28]
	mov	WORD PTR [eax+82], dx
$Exit$36:
; Line 447
	mov	eax, DWORD PTR _error$[ebp]
; Line 448
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_face_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_funcs$ = -4						; size = 4
_size$ = 8						; size = 4
_req$ = 12						; size = 4
_cid_size_request PROC
; File d:\mozilla\modules\freetype2\src\cid\cidobjs.c
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 162
	mov	eax, DWORD PTR _req$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_Request_Metrics
	add	esp, 8
; Line 164
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_cid_size_get_globals_funcs
	add	esp, 4
	mov	DWORD PTR _funcs$[ebp], eax
; Line 166
	cmp	DWORD PTR _funcs$[ebp], 0
	je	SHORT $LN1@cid_size_r
; Line 170
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _funcs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@cid_size_r:
; Line 172
	xor	eax, eax
; Line 173
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_size_request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_priv$1 = -36						; size = 4
_dict$2 = -32						; size = 4
_face$3 = -28						; size = 4
_globals$4 = -20					; size = 4
_funcs$ = -12						; size = 4
_error$ = -8						; size = 4
_size$ = -4						; size = 4
_cidsize$ = 8						; size = 4
_cid_size_init PROC
; File d:\mozilla\modules\freetype2\src\cid\cidobjs.c
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 133
	mov	eax, DWORD PTR _cidsize$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 134
	mov	DWORD PTR _error$[ebp], 0
; Line 135
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_cid_size_get_globals_funcs
	add	esp, 4
	mov	DWORD PTR _funcs$[ebp], eax
; Line 138
	cmp	DWORD PTR _funcs$[ebp], 0
	je	SHORT $LN2@cid_size_i
; Line 141
	mov	edx, DWORD PTR _cidsize$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _face$3[ebp], eax
; Line 142
	mov	ecx, DWORD PTR _face$3[ebp]
	imul	edx, DWORD PTR [ecx+4], 252
	mov	eax, DWORD PTR _face$3[ebp]
	add	edx, DWORD PTR [eax+304]
	mov	DWORD PTR _dict$2[ebp], edx
; Line 143
	mov	ecx, DWORD PTR _dict$2[ebp]
	mov	DWORD PTR _priv$1[ebp], ecx
; Line 146
	mov	esi, esp
	lea	edx, DWORD PTR _globals$4[ebp]
	push	edx
	mov	eax, DWORD PTR _priv$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _cidsize$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+100]
	push	eax
	mov	ecx, DWORD PTR _funcs$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 147
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@cid_size_i
; Line 148
	mov	eax, DWORD PTR _cidsize$[ebp]
	mov	ecx, DWORD PTR _globals$4[ebp]
	mov	DWORD PTR [eax+40], ecx
$LN2@cid_size_i:
; Line 151
	mov	eax, DWORD PTR _error$[ebp]
; Line 152
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@cid_size_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@cid_size_i:
	DD	1
	DD	$LN6@cid_size_i
$LN6@cid_size_i:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@cid_size_i
$LN5@cid_size_i:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
_cid_size_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_funcs$1 = -8						; size = 4
_size$ = -4						; size = 4
_cidsize$ = 8						; size = 4
_cid_size_done PROC
; File d:\mozilla\modules\freetype2\src\cid\cidobjs.c
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 113
	mov	eax, DWORD PTR _cidsize$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 116
	mov	ecx, DWORD PTR _cidsize$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN3@cid_size_d
; Line 121
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	_cid_size_get_globals_funcs
	add	esp, 4
	mov	DWORD PTR _funcs$1[ebp], eax
; Line 122
	cmp	DWORD PTR _funcs$1[ebp], 0
	je	SHORT $LN1@cid_size_d
; Line 123
	mov	esi, esp
	mov	eax, DWORD PTR _cidsize$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _funcs$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@cid_size_d:
; Line 125
	mov	ecx, DWORD PTR _cidsize$[ebp]
	mov	DWORD PTR [ecx+40], 0
$LN3@cid_size_d:
; Line 127
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_size_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_funcs$1 = -16						; size = 4
_module$2 = -12						; size = 4
_pshinter$ = -8						; size = 4
_face$ = -4						; size = 4
_slot$ = 8						; size = 4
_cid_slot_init PROC
; File d:\mozilla\modules\freetype2\src\cid\cidobjs.c
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 63
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$[ebp], ecx
; Line 64
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+320]
	mov	DWORD PTR _pshinter$[ebp], eax
; Line 66
	cmp	DWORD PTR _pshinter$[ebp], 0
	je	SHORT $LN2@cid_slot_i
; Line 72
	push	OFFSET $SG9067
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _module$2[ebp], eax
; Line 73
	cmp	DWORD PTR _module$2[ebp], 0
	je	SHORT $LN2@cid_slot_i
; Line 78
	mov	esi, esp
	mov	edx, DWORD PTR _module$2[ebp]
	push	edx
	mov	eax, DWORD PTR _pshinter$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _funcs$1[ebp], eax
; Line 79
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR _funcs$1[ebp]
	mov	DWORD PTR [eax+36], ecx
$LN2@cid_slot_i:
; Line 83
	xor	eax, eax
; Line 84
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_slot_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_slot$ = 8						; size = 4
_cid_slot_done PROC
; File d:\mozilla\modules\freetype2\src\cid\cidobjs.c
; Line 51
	push	ebp
	mov	ebp, esp
; Line 52
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR [ecx+36], 0
; Line 53
	pop	ebp
	ret	0
_cid_slot_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv84 = -308						; size = 4
_size$1 = -304						; size = 4
_oldpos$2 = -300					; size = 4
_done$ = -295						; size = 1
_upper_nibble$ = -294					; size = 1
_val$ = -293						; size = 1
_dlimit$ = -292						; size = 4
_d$ = -288						; size = 4
_plimit$ = -284						; size = 4
_p$ = -280						; size = 4
_buffer$ = -272						; size = 256
_error$ = -12						; size = 4
_stream$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
_data_len$ = 12						; size = 4
_offset$ = 16						; size = 4
_face$ = 20						; size = 4
_cid_hex_to_binary PROC
; File d:\mozilla\modules\freetype2\src\cid\cidload.c
; Line 552
	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 553
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 564
	mov	edx, DWORD PTR _offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@cid_hex_to
; Line 565
	jmp	$Exit$29
$LN20@cid_hex_to:
; Line 567
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 568
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _data_len$[ebp]
	mov	DWORD PTR _dlimit$[ebp], edx
; Line 569
	lea	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 570
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _plimit$[ebp], ecx
; Line 572
	mov	BYTE PTR _upper_nibble$[ebp], 1
; Line 573
	mov	BYTE PTR _done$[ebp], 0
$LN19@cid_hex_to:
; Line 575
	mov	edx, DWORD PTR _d$[ebp]
	cmp	edx, DWORD PTR _dlimit$[ebp]
	jae	$LN18@cid_hex_to
; Line 577
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _plimit$[ebp]
	jb	$LN17@cid_hex_to
; Line 579
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _oldpos$2[ebp], eax
; Line 580
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR _oldpos$2[ebp]
	mov	DWORD PTR _size$1[ebp], eax
; Line 583
	jne	SHORT $LN16@cid_hex_to
; Line 585
	push	OFFSET $SG8938
	push	585					; 00000249H
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
	mov	DWORD PTR _error$[ebp], eax
; Line 586
	jmp	$Exit$29
$LN16@cid_hex_to:
; Line 589
	cmp	DWORD PTR _size$1[ebp], 256		; 00000100H
	jae	SHORT $LN23@cid_hex_to
	mov	ecx, DWORD PTR _size$1[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN24@cid_hex_to
$LN23@cid_hex_to:
	mov	DWORD PTR tv84[ebp], 256		; 00000100H
$LN24@cid_hex_to:
	mov	edx, DWORD PTR tv84[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@cid_hex_to
; Line 590
	jmp	$Exit$29
$LN15@cid_hex_to:
; Line 591
	lea	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 592
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Pos
	add	esp, 4
	add	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _oldpos$2[ebp]
	mov	DWORD PTR _plimit$[ebp], eax
$LN17@cid_hex_to:
; Line 595
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sub	edx, 48					; 00000030H
	cmp	edx, 10					; 0000000aH
	jae	SHORT $LN14@cid_hex_to
; Line 596
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	mov	BYTE PTR _val$[ebp], cl
	jmp	$LN13@cid_hex_to
$LN14@cid_hex_to:
; Line 597
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN12@cid_hex_to
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 102				; 00000066H
	jg	SHORT $LN12@cid_hex_to
; Line 598
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 97					; 00000061H
	mov	BYTE PTR _val$[ebp], cl
	jmp	$LN13@cid_hex_to
$LN12@cid_hex_to:
; Line 599
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN10@cid_hex_to
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 70					; 00000046H
	jg	SHORT $LN10@cid_hex_to
; Line 600
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 55					; 00000037H
	mov	BYTE PTR _val$[ebp], cl
; Line 601
	jmp	$LN13@cid_hex_to
$LN10@cid_hex_to:
; Line 606
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN7@cid_hex_to
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	je	SHORT $LN7@cid_hex_to
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN7@cid_hex_to
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN7@cid_hex_to
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 12					; 0000000cH
	je	SHORT $LN7@cid_hex_to
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN8@cid_hex_to
$LN7@cid_hex_to:
; Line 608
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 609
	jmp	$LN19@cid_hex_to
	jmp	SHORT $LN13@cid_hex_to
$LN8@cid_hex_to:
; Line 611
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	jne	SHORT $LN5@cid_hex_to
; Line 613
	mov	BYTE PTR _val$[ebp], 0
; Line 614
	mov	BYTE PTR _done$[ebp], 1
; Line 616
	jmp	SHORT $LN13@cid_hex_to
$LN5@cid_hex_to:
; Line 618
	push	OFFSET $SG8957
	push	618					; 0000026aH
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
	mov	DWORD PTR _error$[ebp], eax
; Line 619
	jmp	$Exit$29
$LN13@cid_hex_to:
; Line 622
	movzx	edx, BYTE PTR _upper_nibble$[ebp]
	test	edx, edx
	je	SHORT $LN3@cid_hex_to
; Line 623
	movzx	eax, BYTE PTR _val$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _d$[ebp]
	mov	BYTE PTR [ecx], al
; Line 624
	jmp	SHORT $LN2@cid_hex_to
$LN3@cid_hex_to:
; Line 626
	mov	edx, DWORD PTR _d$[ebp]
	movzx	eax, BYTE PTR [edx]
	movzx	ecx, BYTE PTR _val$[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _d$[ebp]
	mov	BYTE PTR [edx], al
; Line 627
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, 1
	mov	DWORD PTR _d$[ebp], eax
$LN2@cid_hex_to:
; Line 630
	movzx	ecx, BYTE PTR _upper_nibble$[ebp]
	mov	edx, 1
	sub	edx, ecx
	mov	BYTE PTR _upper_nibble$[ebp], dl
; Line 632
	movzx	eax, BYTE PTR _done$[ebp]
	test	eax, eax
	je	SHORT $LN1@cid_hex_to
; Line 633
	jmp	SHORT $LN18@cid_hex_to
$LN1@cid_hex_to:
; Line 635
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 636
	jmp	$LN19@cid_hex_to
$LN18@cid_hex_to:
; Line 638
	mov	DWORD PTR _error$[ebp], 0
$Exit$29:
; Line 641
	mov	eax, DWORD PTR _error$[ebp]
; Line 642
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@cid_hex_to
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN28@cid_hex_to:
	DD	1
	DD	$LN27@cid_hex_to
$LN27@cid_hex_to:
	DD	-272					; fffffef0H
	DD	256					; 00000100H
	DD	$LN26@cid_hex_to
$LN26@cid_hex_to:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_cid_hex_to_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = -4						; size = 4
_loader$ = 8						; size = 4
_cid_done_loader PROC
; File d:\mozilla\modules\freetype2\src\cid\cidload.c
; Line 538
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 539
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 543
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_cid_parser_done
	add	esp, 4
; Line 544
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_done_loader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_loader$ = 8						; size = 4
_face$ = 12						; size = 4
_cid_init_loader PROC
; File d:\mozilla\modules\freetype2\src\cid\cidload.c
; Line 529
	push	ebp
	mov	ebp, esp
; Line 530
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 532
	push	104					; 00000068H
	push	0
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 533
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cid_init_loader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$1 = -88						; size = 4
_len$2 = -84						; size = 4
_new_max$3 = -80					; size = 4
_p$4 = -72						; size = 4
_data_len$5 = -64					; size = 4
_num_subrs$6 = -60					; size = 4
_count$7 = -56						; size = 4
_lenIV$8 = -52						; size = 4
_dict$9 = -48						; size = 4
_psaux$ = -44						; size = 4
_offsets$ = -40						; size = 4
_max_offsets$ = -36					; size = 4
_subr$ = -32						; size = 4
_n$ = -28						; size = 4
_error$ = -20						; size = 4
_stream$ = -12						; size = 4
_memory$ = -8						; size = 4
_cid$ = -4						; size = 4
_face$ = 8						; size = 4
_cid_read_subrs PROC
; File d:\mozilla\modules\freetype2\src\cid\cidload.c
; Line 402
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 403
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 140				; 0000008cH
	mov	DWORD PTR _cid$[ebp], eax
; Line 404
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 405
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 409
	mov	DWORD PTR _max_offsets$[ebp], 0
; Line 410
	mov	DWORD PTR _offsets$[ebp], 0
; Line 411
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	DWORD PTR _psaux$[ebp], eax
; Line 414
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _cid$[ebp]
	mov	eax, DWORD PTR [edx+160]
	push	eax
	push	0
	push	8
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+316], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN45@cid_read_s
; Line 415
	jmp	$Exit$52
$LN45@cid_read_s:
; Line 417
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	DWORD PTR _subr$[ebp], ecx
; Line 418
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN44@cid_read_s
$LN43@cid_read_s:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
	mov	eax, DWORD PTR _subr$[ebp]
	add	eax, 8
	mov	DWORD PTR _subr$[ebp], eax
$LN44@cid_read_s:
	mov	ecx, DWORD PTR _cid$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR [ecx+160]
	jge	$Exit$52
; Line 420
	imul	eax, DWORD PTR _n$[ebp], 252
	mov	ecx, DWORD PTR _cid$[ebp]
	add	eax, DWORD PTR [ecx+164]
	mov	DWORD PTR _dict$9[ebp], eax
; Line 421
	mov	edx, DWORD PTR _dict$9[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _lenIV$8[ebp], eax
; Line 422
	mov	ecx, DWORD PTR _dict$9[ebp]
	mov	edx, DWORD PTR [ecx+240]
	mov	DWORD PTR _num_subrs$6[ebp], edx
; Line 428
	cmp	DWORD PTR _num_subrs$6[ebp], -1
	jne	SHORT $LN41@cid_read_s
; Line 430
	push	OFFSET $SG8835
	push	430					; 000001aeH
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
	mov	DWORD PTR _error$[ebp], eax
; Line 431
	jmp	$Fail$53
$LN41@cid_read_s:
; Line 435
	mov	eax, DWORD PTR _num_subrs$6[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _max_offsets$[ebp]
	jbe	SHORT $LN40@cid_read_s
; Line 437
	mov	ecx, DWORD PTR _num_subrs$6[ebp]
	add	ecx, 4
	and	ecx, -4					; fffffffcH
	mov	DWORD PTR _new_max$3[ebp], ecx
; Line 440
	mov	edx, DWORD PTR _new_max$3[ebp]
	cmp	edx, DWORD PTR _max_offsets$[ebp]
	ja	SHORT $LN39@cid_read_s
; Line 442
	push	OFFSET $SG8840
	push	442					; 000001baH
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
	mov	DWORD PTR _error$[ebp], eax
; Line 443
	jmp	$Fail$53
$LN39@cid_read_s:
; Line 446
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _new_max$3[ebp]
	push	edx
	mov	eax, DWORD PTR _max_offsets$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _offsets$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN38@cid_read_s
; Line 447
	jmp	$Fail$53
$LN38@cid_read_s:
; Line 449
	mov	edx, DWORD PTR _new_max$3[ebp]
	mov	DWORD PTR _max_offsets$[ebp], edx
$LN40@cid_read_s:
; Line 454
	mov	eax, DWORD PTR _cid$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	edx, DWORD PTR _dict$9[ebp]
	add	ecx, DWORD PTR [edx+244]
	push	ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN36@cid_read_s
	mov	ecx, DWORD PTR _num_subrs$6[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _dict$9[ebp]
	imul	ecx, DWORD PTR [edx+248]
	push	ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN37@cid_read_s
$LN36@cid_read_s:
; Line 455
	jmp	$Fail$53
$LN37@cid_read_s:
; Line 457
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _p$4[ebp], edx
; Line 458
	mov	DWORD PTR _count$7[ebp], 0
	jmp	SHORT $LN35@cid_read_s
$LN34@cid_read_s:
	mov	eax, DWORD PTR _count$7[ebp]
	add	eax, 1
	mov	DWORD PTR _count$7[ebp], eax
$LN35@cid_read_s:
	mov	ecx, DWORD PTR _count$7[ebp]
	cmp	ecx, DWORD PTR _num_subrs$6[ebp]
	ja	SHORT $LN33@cid_read_s
; Line 459
	mov	edx, DWORD PTR _dict$9[ebp]
	movzx	eax, BYTE PTR [edx+248]
	push	eax
	lea	ecx, DWORD PTR _p$4[ebp]
	push	ecx
	call	_cid_get_offset
	add	esp, 8
	mov	edx, DWORD PTR _count$7[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN34@cid_read_s
$LN33@cid_read_s:
; Line 461
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 464
	mov	DWORD PTR _count$7[ebp], 1
	jmp	SHORT $LN32@cid_read_s
$LN31@cid_read_s:
	mov	eax, DWORD PTR _count$7[ebp]
	add	eax, 1
	mov	DWORD PTR _count$7[ebp], eax
$LN32@cid_read_s:
	mov	ecx, DWORD PTR _count$7[ebp]
	cmp	ecx, DWORD PTR _num_subrs$6[ebp]
	ja	SHORT $LN30@cid_read_s
; Line 465
	mov	edx, DWORD PTR _count$7[ebp]
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _count$7[ebp]
	mov	esi, DWORD PTR _offsets$[ebp]
	mov	edx, DWORD PTR [eax+edx*4-4]
	cmp	edx, DWORD PTR [esi+ecx*4]
	jbe	SHORT $LN29@cid_read_s
; Line 466
	jmp	$Fail$53
$LN29@cid_read_s:
; Line 470
	jmp	SHORT $LN31@cid_read_s
$LN30@cid_read_s:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _num_subrs$6[ebp]
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	esi, DWORD PTR _offsets$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	sub	edx, DWORD PTR [esi+ecx]
	mov	DWORD PTR _data_len$5[ebp], edx
; Line 473
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _num_subrs$6[ebp]
	add	ecx, 1
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _subr$[ebp]
	mov	DWORD PTR [ecx+4], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN27@cid_read_s
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _data_len$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _subr$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+edx], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@cid_read_s
$LN27@cid_read_s:
; Line 474
	jmp	$Fail$53
$LN28@cid_read_s:
; Line 477
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cid$[ebp]
	mov	eax, DWORD PTR [edx+168]
	mov	edx, DWORD PTR _offsets$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN25@cid_read_s
	mov	ecx, DWORD PTR _data_len$5[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _subr$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN26@cid_read_s
$LN25@cid_read_s:
; Line 478
	jmp	$Fail$53
$LN26@cid_read_s:
; Line 481
	mov	DWORD PTR _count$7[ebp], 1
	jmp	SHORT $LN24@cid_read_s
$LN23@cid_read_s:
	mov	edx, DWORD PTR _count$7[ebp]
	add	edx, 1
	mov	DWORD PTR _count$7[ebp], edx
$LN24@cid_read_s:
	mov	eax, DWORD PTR _count$7[ebp]
	cmp	eax, DWORD PTR _num_subrs$6[ebp]
	ja	SHORT $LN22@cid_read_s
; Line 486
	mov	ecx, DWORD PTR _count$7[ebp]
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	eax, DWORD PTR _count$7[ebp]
	mov	esi, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	sub	ecx, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR _len$2[ebp], ecx
; Line 487
	mov	edx, DWORD PTR _subr$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _count$7[ebp]
	mov	edx, DWORD PTR [eax+ecx*4-4]
	add	edx, DWORD PTR _len$2[ebp]
	mov	eax, DWORD PTR _subr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _count$7[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 488
	jmp	SHORT $LN23@cid_read_s
$LN22@cid_read_s:
; Line 491
	cmp	DWORD PTR _lenIV$8[ebp], 0
	jl	SHORT $LN21@cid_read_s
; Line 493
	mov	DWORD PTR _count$7[ebp], 0
	jmp	SHORT $LN20@cid_read_s
$LN19@cid_read_s:
	mov	ecx, DWORD PTR _count$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$7[ebp], ecx
$LN20@cid_read_s:
	mov	edx, DWORD PTR _count$7[ebp]
	cmp	edx, DWORD PTR _num_subrs$6[ebp]
	jae	SHORT $LN21@cid_read_s
; Line 498
	mov	eax, DWORD PTR _count$7[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	edx, DWORD PTR _count$7[ebp]
	mov	esi, DWORD PTR _offsets$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+4]
	sub	eax, DWORD PTR [esi+edx*4]
	mov	DWORD PTR _len$1[ebp], eax
; Line 499
	mov	esi, esp
	push	4330					; 000010eaH
	mov	ecx, DWORD PTR _len$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _subr$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _count$7[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 500
	jmp	SHORT $LN19@cid_read_s
$LN21@cid_read_s:
; Line 503
	mov	edx, DWORD PTR _subr$[ebp]
	mov	eax, DWORD PTR _num_subrs$6[ebp]
	mov	DWORD PTR [edx], eax
; Line 504
	jmp	$LN43@cid_read_s
$Exit$52:
; Line 507
	mov	ecx, DWORD PTR _offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _offsets$[ebp], 0
	xor	eax, eax
	jne	SHORT $Exit$52
; Line 508
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN46@cid_read_s
$Fail$53:
; Line 511
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+316], 0
	je	$LN14@cid_read_s
; Line 513
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN13@cid_read_s
$LN12@cid_read_s:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN13@cid_read_s:
	mov	eax, DWORD PTR _cid$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+160]
	jge	$LN3@cid_read_s
; Line 515
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+316]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [eax+ecx*8+4], 0
	je	SHORT $LN6@cid_read_s
$LN9@cid_read_s:
; Line 516
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+316]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR [eax+ecx], 0
	xor	edx, edx
	jne	SHORT $LN9@cid_read_s
$LN6@cid_read_s:
; Line 518
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+316]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+ecx*8+4], 0
	xor	edx, edx
	jne	SHORT $LN6@cid_read_s
; Line 519
	jmp	$LN12@cid_read_s
$LN3@cid_read_s:
; Line 520
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+316], 0
	xor	ecx, ecx
	jne	SHORT $LN3@cid_read_s
$LN14@cid_read_s:
; Line 522
	jmp	$Exit$52
$LN46@cid_read_s:
; Line 523
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN51@cid_read_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN51@cid_read_s:
	DD	2
	DD	$LN50@cid_read_s
$LN50@cid_read_s:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN48@cid_read_s
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN49@cid_read_s
$LN49@cid_read_s:
	DB	112					; 00000070H
	DB	0
$LN48@cid_read_s:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cid_read_subrs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$1 = -32						; size = 4
_name$2 = -28						; size = 4
_keyword$3 = -24					; size = 4
_len$4 = -20						; size = 4
_newlimit$5 = -16					; size = 4
_limit$6 = -12						; size = 4
_cur$7 = -8						; size = 4
_parser$ = -4						; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_base$ = 16						; size = 4
_size$ = 20						; size = 4
_cid_parse_dict PROC
; File d:\mozilla\modules\freetype2\src\cid\cidload.c
; Line 294
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 295
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 298
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 299
	mov	eax, DWORD PTR _base$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 300
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 303
	mov	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR _cur$7[ebp], eax
; Line 304
	mov	ecx, DWORD PTR _cur$7[ebp]
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _limit$6[ebp], ecx
$LN24@cid_parse_:
; Line 312
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _cur$7[ebp]
	mov	DWORD PTR [edx], eax
; Line 313
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 315
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _limit$6[ebp]
	jb	SHORT $LN22@cid_parse_
; Line 316
	mov	eax, DWORD PTR _limit$6[ebp]
	sub	eax, 18					; 00000012H
	mov	DWORD PTR _newlimit$5[ebp], eax
; Line 317
	jmp	SHORT $LN21@cid_parse_
$LN22@cid_parse_:
; Line 318
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 17					; 00000011H
	mov	DWORD PTR _newlimit$5[ebp], edx
$LN21@cid_parse_:
; Line 321
	jmp	SHORT $LN20@cid_parse_
$LN19@cid_parse_:
	mov	eax, DWORD PTR _cur$7[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$7[ebp], eax
$LN20@cid_parse_:
	mov	ecx, DWORD PTR _cur$7[ebp]
	cmp	ecx, DWORD PTR _newlimit$5[ebp]
	jae	SHORT $LN18@cid_parse_
; Line 324
	mov	edx, DWORD PTR _cur$7[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN17@cid_parse_
	mov	esi, esp
	push	17					; 00000011H
	push	OFFSET $SG8781
	mov	ecx, DWORD PTR _cur$7[ebp]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN17@cid_parse_
; Line 328
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+300], 0
	jle	SHORT $LN17@cid_parse_
; Line 329
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	add	ecx, 1
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+96], ecx
$LN17@cid_parse_:
; Line 331
	jmp	SHORT $LN19@cid_parse_
$LN18@cid_parse_:
; Line 333
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$7[ebp], ecx
; Line 335
	mov	edx, DWORD PTR _cur$7[ebp]
	cmp	edx, DWORD PTR _limit$6[ebp]
	jb	SHORT $LN15@cid_parse_
; Line 336
	jmp	$LN23@cid_parse_
$LN15@cid_parse_:
; Line 338
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 339
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _limit$6[ebp]
	jae	SHORT $LN13@cid_parse_
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN14@cid_parse_
$LN13@cid_parse_:
; Line 340
	jmp	$LN23@cid_parse_
$LN14@cid_parse_:
; Line 343
	mov	eax, DWORD PTR _cur$7[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	$LN12@cid_parse_
	mov	edx, DWORD PTR _cur$7[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _limit$6[ebp]
	jae	$LN12@cid_parse_
; Line 348
	mov	eax, DWORD PTR _cur$7[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$7[ebp], eax
; Line 349
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _cur$7[ebp]
	mov	DWORD PTR _len$4[ebp], edx
; Line 351
	cmp	DWORD PTR _len$4[ebp], 0
	jle	$LN12@cid_parse_
	cmp	DWORD PTR _len$4[ebp], 22		; 00000016H
	jge	$LN12@cid_parse_
; Line 354
	mov	DWORD PTR _keyword$3[ebp], OFFSET _cid_field_records
$LN10@cid_parse_:
; Line 362
	mov	eax, DWORD PTR _keyword$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _name$2[ebp], ecx
; Line 363
	cmp	DWORD PTR _name$2[ebp], 0
	jne	SHORT $LN8@cid_parse_
; Line 364
	jmp	$LN12@cid_parse_
$LN8@cid_parse_:
; Line 367
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$7[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _name$2[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	edx, ecx
	jne	SHORT $LN7@cid_parse_
	mov	edx, DWORD PTR _name$2[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	cmp	DWORD PTR _len$4[ebp], eax
	jne	SHORT $LN7@cid_parse_
; Line 372
	mov	DWORD PTR _n$1[ebp], 1
	jmp	SHORT $LN6@cid_parse_
$LN5@cid_parse_:
	mov	eax, DWORD PTR _n$1[ebp]
	add	eax, 1
	mov	DWORD PTR _n$1[ebp], eax
$LN6@cid_parse_:
	mov	ecx, DWORD PTR _n$1[ebp]
	cmp	ecx, DWORD PTR _len$4[ebp]
	jge	SHORT $LN4@cid_parse_
; Line 373
	mov	edx, DWORD PTR _cur$7[ebp]
	add	edx, DWORD PTR _n$1[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _name$2[ebp]
	add	ecx, DWORD PTR _n$1[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN3@cid_parse_
; Line 374
	jmp	SHORT $LN4@cid_parse_
$LN3@cid_parse_:
; Line 376
	jmp	SHORT $LN5@cid_parse_
$LN4@cid_parse_:
	mov	eax, DWORD PTR _n$1[ebp]
	cmp	eax, DWORD PTR _len$4[ebp]
	jl	SHORT $LN7@cid_parse_
; Line 381
	mov	ecx, DWORD PTR _keyword$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_cid_load_keyword
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 382
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN1@cid_parse_
; Line 383
	mov	eax, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [eax+12]
	jmp	SHORT $LN25@cid_parse_
$LN1@cid_parse_:
; Line 384
	jmp	SHORT $LN12@cid_parse_
$LN7@cid_parse_:
; Line 387
	mov	ecx, DWORD PTR _keyword$3[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR _keyword$3[ebp], ecx
; Line 388
	jmp	$LN10@cid_parse_
$LN12@cid_parse_:
; Line 392
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$7[ebp], eax
; Line 393
	jmp	$LN24@cid_parse_
$LN23@cid_parse_:
; Line 395
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [ecx+12]
$LN25@cid_parse_:
; Line 396
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_parse_dict ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dict$ = -4						; size = 4
_face$ = 8						; size = 4
_parser$ = 12						; size = 4
_parse_expansion_factor PROC
; File d:\mozilla\modules\freetype2\src\cid\cidload.c
; Line 259
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 263
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jl	SHORT $LN1@parse_expa
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [ecx+96]
	cmp	eax, DWORD PTR [edx+300]
	jge	SHORT $LN1@parse_expa
; Line 265
	mov	ecx, DWORD PTR _parser$[ebp]
	imul	edx, DWORD PTR [ecx+96], 252
	mov	eax, DWORD PTR _face$[ebp]
	add	edx, DWORD PTR [eax+304]
	mov	DWORD PTR _dict$[ebp], edx
; Line 267
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _dict$[ebp]
	mov	DWORD PTR [ecx+208], eax
; Line 268
	mov	edx, DWORD PTR _dict$[ebp]
	mov	eax, DWORD PTR _dict$[ebp]
	mov	ecx, DWORD PTR [eax+208]
	mov	DWORD PTR [edx+180], ecx
$LN1@parse_expa:
; Line 271
	xor	eax, eax
; Line 272
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_parse_expansion_factor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dict$1 = -32						; size = 4
_n$2 = -28						; size = 4
_num_dicts$ = -24					; size = 4
_error$ = -16						; size = 4
_memory$ = -8						; size = 4
_cid$ = -4						; size = 4
_face$ = 8						; size = 4
_parser$ = 12						; size = 4
_parse_fd_array PROC
; File d:\mozilla\modules\freetype2\src\cid\cidload.c
; Line 217
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 218
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 140				; 0000008cH
	mov	DWORD PTR _cid$[ebp], eax
; Line 219
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 220
	mov	DWORD PTR _error$[ebp], 0
; Line 224
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _num_dicts$[ebp], eax
; Line 226
	mov	eax, DWORD PTR _cid$[ebp]
	cmp	DWORD PTR [eax+164], 0
	jne	SHORT $Exit$11
; Line 231
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _num_dicts$[ebp]
	push	edx
	push	0
	push	252					; 000000fcH
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _cid$[ebp]
	mov	DWORD PTR [ecx+164], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@parse_fd_a
; Line 232
	jmp	SHORT $Exit$11
$LN4@parse_fd_a:
; Line 234
	mov	edx, DWORD PTR _cid$[ebp]
	mov	eax, DWORD PTR _num_dicts$[ebp]
	mov	DWORD PTR [edx+160], eax
; Line 237
	mov	DWORD PTR _n$2[ebp], 0
	jmp	SHORT $LN3@parse_fd_a
$LN2@parse_fd_a:
	mov	ecx, DWORD PTR _n$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$2[ebp], ecx
$LN3@parse_fd_a:
	mov	edx, DWORD PTR _cid$[ebp]
	mov	eax, DWORD PTR _n$2[ebp]
	cmp	eax, DWORD PTR [edx+160]
	jge	SHORT $Exit$11
; Line 239
	imul	ecx, DWORD PTR _n$2[ebp], 252
	mov	edx, DWORD PTR _cid$[ebp]
	add	ecx, DWORD PTR [edx+164]
	mov	DWORD PTR _dict$1[ebp], ecx
; Line 243
	mov	eax, DWORD PTR _dict$1[ebp]
	mov	DWORD PTR [eax+4], 4
; Line 244
	jmp	SHORT $LN2@parse_fd_a
$Exit$11:
; Line 248
	mov	eax, DWORD PTR _error$[ebp]
; Line 249
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@parse_fd_a
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@parse_fd_a:
	DD	1
	DD	$LN9@parse_fd_a
$LN9@parse_fd_a:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN8@parse_fd_a
$LN8@parse_fd_a:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_parse_fd_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv183 = -68						; size = 4
tv129 = -64						; size = 4
_result$1 = -60						; size = 4
_offset$2 = -56						; size = 4
_matrix$3 = -52						; size = 4
_temp_scale$ = -48					; size = 4
_temp$ = -40						; size = 24
_root$ = -12						; size = 4
_dict$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_parser$ = 12						; size = 4
_cid_parse_font_matrix PROC
; File d:\mozilla\modules\freetype2\src\cid\cidload.c
; Line 152
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 154
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _root$[ebp], eax
; Line 159
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+96], 0
	jl	$LN4@cid_parse_
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	cmp	ecx, DWORD PTR [eax+300]
	jge	$LN4@cid_parse_
; Line 166
	mov	edx, DWORD PTR _parser$[ebp]
	imul	eax, DWORD PTR [edx+96], 252
	mov	ecx, DWORD PTR _face$[ebp]
	add	eax, DWORD PTR [ecx+304]
	mov	DWORD PTR _dict$[ebp], eax
; Line 167
	mov	edx, DWORD PTR _dict$[ebp]
	add	edx, 216				; 000000d8H
	mov	DWORD PTR _matrix$3[ebp], edx
; Line 168
	mov	eax, DWORD PTR _dict$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR _offset$2[ebp], eax
; Line 170
	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	push	6
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$1[ebp], eax
; Line 172
	cmp	DWORD PTR _result$1[ebp], 6
	jge	SHORT $LN3@cid_parse_
; Line 173
	push	OFFSET $SG8414
	push	173					; 000000adH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN5@cid_parse_
$LN3@cid_parse_:
; Line 175
	mov	edx, 4
	imul	eax, edx, 3
	cmp	DWORD PTR _temp$[ebp+eax], 0
	jge	SHORT $LN7@cid_parse_
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _temp$[ebp+edx]
	neg	eax
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN8@cid_parse_
$LN7@cid_parse_:
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _temp$[ebp+edx]
	mov	DWORD PTR tv129[ebp], eax
$LN8@cid_parse_:
	mov	ecx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _temp_scale$[ebp], ecx
; Line 177
	cmp	DWORD PTR _temp_scale$[ebp], 0
	jne	SHORT $LN2@cid_parse_
; Line 179
	push	OFFSET $SG8416
	call	_FT_Message
	add	esp, 4
; Line 180
	push	OFFSET $SG8417
	push	180					; 000000b4H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN5@cid_parse_
$LN2@cid_parse_:
; Line 187
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	push	1000					; 000003e8H
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _root$[ebp]
	mov	WORD PTR [ecx+68], ax
; Line 190
	cmp	DWORD PTR _temp_scale$[ebp], 65536	; 00010000H
	je	$LN1@cid_parse_
; Line 192
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _temp$[ebp+edx], eax
; Line 193
	mov	eax, DWORD PTR _temp_scale$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _temp$[ebp+ecx], eax
; Line 194
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _temp$[ebp+eax]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR _temp$[ebp+edx], eax
; Line 195
	mov	eax, DWORD PTR _temp_scale$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	DWORD PTR _temp$[ebp+ecx], eax
; Line 196
	mov	edx, DWORD PTR _temp_scale$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	DWORD PTR _temp$[ebp+edx], eax
; Line 197
	mov	eax, 4
	imul	ecx, eax, 3
	cmp	DWORD PTR _temp$[ebp+ecx], 0
	jge	SHORT $LN9@cid_parse_
	mov	DWORD PTR tv183[ebp], -65536		; ffff0000H
	jmp	SHORT $LN10@cid_parse_
$LN9@cid_parse_:
	mov	DWORD PTR tv183[ebp], 65536		; 00010000H
$LN10@cid_parse_:
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR tv183[ebp]
	mov	DWORD PTR _temp$[ebp+eax], ecx
$LN1@cid_parse_:
; Line 200
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _matrix$3[ebp]
	mov	edx, DWORD PTR _temp$[ebp+eax]
	mov	DWORD PTR [ecx], edx
; Line 201
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _matrix$3[ebp]
	mov	edx, DWORD PTR _temp$[ebp+eax]
	mov	DWORD PTR [ecx+8], edx
; Line 202
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _matrix$3[ebp]
	mov	edx, DWORD PTR _temp$[ebp+eax]
	mov	DWORD PTR [ecx+4], edx
; Line 203
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _matrix$3[ebp]
	mov	eax, DWORD PTR _temp$[ebp+ecx]
	mov	DWORD PTR [edx+12], eax
; Line 206
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _temp$[ebp+ecx]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _offset$2[ebp]
	mov	DWORD PTR [eax], edx
; Line 207
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _temp$[ebp+edx]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _offset$2[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN4@cid_parse_:
; Line 210
	xor	eax, eax
$LN5@cid_parse_:
; Line 211
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@cid_parse_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@cid_parse_:
	DD	1
	DD	$LN12@cid_parse_
$LN12@cid_parse_:
	DD	-40					; ffffffd8H
	DD	24					; 00000018H
	DD	$LN11@cid_parse_
$LN11@cid_parse_:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_cid_parse_font_matrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv95 = -40						; size = 4
tv73 = -36						; size = 4
_dict$1 = -32						; size = 4
_cid$ = -28						; size = 4
_dummy_object$ = -20					; size = 4
_object$ = -12						; size = 4
_parser$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_loader$ = 12						; size = 4
_keyword$ = 16						; size = 4
_cid_load_keyword PROC
; File d:\mozilla\modules\freetype2\src\cid\cidload.c
; Line 73
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 75
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], eax
; Line 78
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 140				; 0000008cH
	mov	DWORD PTR _cid$[ebp], ecx
; Line 82
	mov	edx, DWORD PTR _keyword$[ebp]
	cmp	DWORD PTR [edx+8], 11			; 0000000bH
	jne	SHORT $LN17@cid_load_k
; Line 84
	mov	esi, esp
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _keyword$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 85
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _error$[ebp], edx
; Line 86
	jmp	$Exit$24
$LN17@cid_load_k:
; Line 90
	mov	eax, DWORD PTR _keyword$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv73[ebp], ecx
	cmp	DWORD PTR tv73[ebp], 5
	ja	SHORT $LN10@cid_load_k
	mov	edx, DWORD PTR tv73[ebp]
	jmp	DWORD PTR $LN23@cid_load_k[edx*4]
$LN14@cid_load_k:
; Line 93
	mov	eax, DWORD PTR _cid$[ebp]
	mov	DWORD PTR _object$[ebp], eax
; Line 94
	jmp	$LN15@cid_load_k
$LN13@cid_load_k:
; Line 97
	mov	ecx, DWORD PTR _cid$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _object$[ebp], ecx
; Line 98
	jmp	$LN15@cid_load_k
$LN12@cid_load_k:
; Line 101
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 312				; 00000138H
	mov	DWORD PTR _object$[ebp], edx
; Line 102
	jmp	$LN15@cid_load_k
$LN11@cid_load_k:
; Line 105
	mov	eax, DWORD PTR _cid$[ebp]
	add	eax, 56					; 00000038H
	mov	DWORD PTR _object$[ebp], eax
; Line 106
	jmp	$LN15@cid_load_k
$LN10@cid_load_k:
; Line 113
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+96], 0
	jl	SHORT $LN8@cid_load_k
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _cid$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	cmp	ecx, DWORD PTR [eax+160]
	jl	SHORT $LN9@cid_load_k
$LN8@cid_load_k:
; Line 116
	mov	edx, DWORD PTR _keyword$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG8385
	call	_FT_Message
	add	esp, 8
; Line 117
	push	OFFSET $SG8386
	push	117					; 00000075H
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
	mov	DWORD PTR _error$[ebp], eax
; Line 118
	jmp	$Exit$24
$LN9@cid_load_k:
; Line 121
	mov	ecx, DWORD PTR _parser$[ebp]
	imul	edx, DWORD PTR [ecx+96], 252
	mov	eax, DWORD PTR _cid$[ebp]
	add	edx, DWORD PTR [eax+164]
	mov	DWORD PTR _dict$1[ebp], edx
; Line 122
	mov	ecx, DWORD PTR _keyword$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv95[ebp], edx
	cmp	DWORD PTR tv95[ebp], 4
	je	SHORT $LN5@cid_load_k
	jmp	SHORT $LN4@cid_load_k
$LN5@cid_load_k:
; Line 125
	mov	eax, DWORD PTR _dict$1[ebp]
	mov	DWORD PTR _object$[ebp], eax
; Line 126
	jmp	SHORT $LN15@cid_load_k
$LN4@cid_load_k:
; Line 129
	mov	ecx, DWORD PTR _dict$1[ebp]
	mov	DWORD PTR _object$[ebp], ecx
$LN15@cid_load_k:
; Line 134
	mov	edx, DWORD PTR _object$[ebp]
	mov	DWORD PTR _dummy_object$[ebp], edx
; Line 138
	mov	eax, DWORD PTR _keyword$[ebp]
	cmp	DWORD PTR [eax+8], 9
	je	SHORT $LN2@cid_load_k
	mov	ecx, DWORD PTR _keyword$[ebp]
	cmp	DWORD PTR [ecx+8], 10			; 0000000aH
	jne	SHORT $LN3@cid_load_k
$LN2@cid_load_k:
; Line 140
	mov	esi, esp
	push	0
	push	0
	lea	edx, DWORD PTR _dummy_object$[ebp]
	push	edx
	mov	eax, DWORD PTR _keyword$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 141
	jmp	SHORT $Exit$24
$LN3@cid_load_k:
; Line 143
	mov	esi, esp
	push	0
	push	0
	lea	ecx, DWORD PTR _dummy_object$[ebp]
	push	ecx
	mov	edx, DWORD PTR _keyword$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$Exit$24:
; Line 145
	mov	eax, DWORD PTR _error$[ebp]
; Line 146
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@cid_load_k
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@cid_load_k:
	DD	1
	DD	$LN21@cid_load_k
$LN21@cid_load_k:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN20@cid_load_k
$LN20@cid_load_k:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
	npad	3
$LN23@cid_load_k:
	DD	$LN14@cid_load_k
	DD	$LN10@cid_load_k
	DD	$LN12@cid_load_k
	DD	$LN13@cid_load_k
	DD	$LN10@cid_load_k
	DD	$LN11@cid_load_k
_cid_load_keyword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -128						; size = 4
_memory$ = -120						; size = 4
_parser$ = -116						; size = 4
_loader$ = -108						; size = 104
_face$ = 8						; size = 4
_face_index$ = 12					; size = 4
_cid_face_open PROC
; File d:\mozilla\modules\freetype2\src\cid\cidload.c
; Line 648
	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-132]
	mov	ecx, 33					; 00000021H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 651
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 655
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	lea	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_cid_init_loader
	add	esp, 8
; Line 657
	lea	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 659
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_cid_parser_new
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 660
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@cid_face_o
; Line 661
	jmp	$Exit$15
$LN8@cid_face_o:
; Line 665
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	lea	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_cid_parse_dict
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 666
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@cid_face_o
; Line 667
	jmp	$Exit$15
$LN7@cid_face_o:
; Line 669
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN6@cid_face_o
; Line 670
	jmp	$Exit$15
$LN6@cid_face_o:
; Line 672
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	40					; 00000028H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+328], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@cid_face_o
; Line 673
	jmp	$Exit$15
$LN5@cid_face_o:
; Line 675
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+88], 0
	je	$LN4@cid_face_o
; Line 680
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+324], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@cid_face_o
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+324]
	push	eax
	call	_cid_hex_to_binary
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN3@cid_face_o
$LN2@cid_face_o:
; Line 681
	jmp	SHORT $Exit$15
$LN3@cid_face_o:
; Line 684
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+324]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+328]
	push	eax
	call	_FT_Stream_OpenMemory
	add	esp, 12					; 0000000cH
; Line 685
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+308], 0
; Line 687
	jmp	SHORT $LN1@cid_face_o
$LN4@cid_face_o:
; Line 689
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, 10					; 0000000aH
	mov	esi, DWORD PTR [edx+104]
	mov	edi, DWORD PTR [eax+328]
	rep movsd
; Line 690
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _loader$[ebp+84]
	mov	DWORD PTR [ecx+308], edx
$LN1@cid_face_o:
; Line 693
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_cid_read_subrs
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
$Exit$15:
; Line 696
	lea	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_cid_done_loader
	add	esp, 4
; Line 697
	mov	eax, DWORD PTR _error$[ebp]
; Line 698
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@cid_face_o
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 132				; 00000084H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@cid_face_o:
	DD	2
	DD	$LN13@cid_face_o
$LN13@cid_face_o:
	DD	-108					; ffffff94H
	DD	104					; 00000068H
	DD	$LN11@cid_face_o
	DD	-128					; ffffff80H
	DD	4
	DD	$LN12@cid_face_o
$LN12@cid_face_o:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN11@cid_face_o:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_cid_face_open ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -8						; size = 4
_result$ = -4						; size = 4
_start$ = 8						; size = 4
_offsize$ = 12						; size = 1
_cid_get_offset PROC
; File d:\mozilla\modules\freetype2\src\cid\cidload.c
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 46
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
; Line 49
	mov	DWORD PTR _result$[ebp], 0
	jmp	SHORT $LN3@cid_get_of
$LN2@cid_get_of:
	mov	dl, BYTE PTR _offsize$[ebp]
	sub	dl, 1
	mov	BYTE PTR _offsize$[ebp], dl
$LN3@cid_get_of:
	movzx	eax, BYTE PTR _offsize$[ebp]
	test	eax, eax
	jle	SHORT $LN1@cid_get_of
; Line 51
	mov	ecx, DWORD PTR _result$[ebp]
	shl	ecx, 8
	mov	DWORD PTR _result$[ebp], ecx
; Line 52
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	or	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 53
	jmp	SHORT $LN2@cid_get_of
$LN1@cid_get_of:
; Line 55
	mov	edx, DWORD PTR _start$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 56
	mov	eax, DWORD PTR _result$[ebp]
; Line 57
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_get_offset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$1 = -4						; size = 4
_parser$ = 8						; size = 4
_cid_parser_done PROC
; File d:\mozilla\modules\freetype2\src\cid\cidparse.c
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 212
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN1@cid_parser
; Line 214
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR _stream$1[ebp], edx
; Line 217
	mov	eax, DWORD PTR _parser$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _stream$1[ebp]
	push	ecx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
$LN1@cid_parser:
; Line 219
	mov	edx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 220
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cid_parser_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv150 = -328						; size = 4
_stream_len$1 = -324					; size = 4
_p$2 = -320						; size = 4
_read_len$3 = -316					; size = 4
_buffer$4 = -308					; size = 266
_arg2$ = -36						; size = 4
_arg1$ = -32						; size = 4
_limit$ = -28						; size = 4
_cur$ = -24						; size = 4
_ps_len$ = -20						; size = 4
_offset$ = -16						; size = 4
_base_offset$ = -12					; size = 4
_error$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_parser$ = 8						; size = 4
_stream$ = 12						; size = 4
_memory$ = 16						; size = 4
_psaux$ = 20						; size = 4
_cid_parser_new PROC
; File d:\mozilla\modules\freetype2\src\cid\cidparse.c
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 62
	push	100					; 00000064H
	push	0
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 63
	mov	esi, esp
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _parser$[ebp]
	push	edx
	mov	eax, DWORD PTR _psaux$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 65
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+72], ecx
; Line 67
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _base_offset$[ebp], eax
; Line 70
	push	31					; 0000001fH
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN37@cid_parser
; Line 71
	jmp	$Exit$45
$LN37@cid_parser:
; Line 74
	mov	esi, esp
	push	31					; 0000001fH
	push	OFFSET $SG8183
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN36@cid_parser
$LN35@cid_parser:
; Line 76
	mov	eax, 4
	imul	ecx, eax, 60
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN34@cid_parser
	push	OFFSET $SG8188
	call	_FT_Message
	add	esp, 4
$LN34@cid_parser:
	xor	edx, edx
	jne	SHORT $LN35@cid_parser
; Line 77
	push	OFFSET $SG8189
	push	77					; 0000004dH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
$LN36@cid_parser:
; Line 80
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 81
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $Again$46
; Line 82
	jmp	$Exit$45
$Again$46:
; Line 89
	mov	DWORD PTR _read_len$3[ebp], 266		; 0000010aH
; Line 90
	lea	ecx, DWORD PTR _buffer$4[ebp]
	mov	DWORD PTR _p$2[ebp], ecx
; Line 93
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _offset$[ebp], eax
	jmp	SHORT $LN30@cid_parser
$LN29@cid_parser:
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, 256				; 00000100H
	mov	DWORD PTR _offset$[ebp], eax
$LN30@cid_parser:
; Line 98
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, eax
	mov	DWORD PTR _stream_len$1[ebp], ecx
; Line 99
	jne	SHORT $LN27@cid_parser
$LN26@cid_parser:
; Line 101
	mov	edx, 4
	imul	eax, edx, 60
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN25@cid_parser
	push	OFFSET $SG8204
	call	_FT_Message
	add	esp, 4
$LN25@cid_parser:
	xor	ecx, ecx
	jne	SHORT $LN26@cid_parser
; Line 102
	push	OFFSET $SG8205
	push	102					; 00000066H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 103
	jmp	$Exit$45
$LN27@cid_parser:
; Line 106
	mov	edx, DWORD PTR _read_len$3[ebp]
	cmp	edx, DWORD PTR _stream_len$1[ebp]
	jge	SHORT $LN40@cid_parser
	mov	eax, DWORD PTR _read_len$3[ebp]
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN41@cid_parser
$LN40@cid_parser:
	mov	ecx, DWORD PTR _stream_len$1[ebp]
	mov	DWORD PTR tv150[ebp], ecx
$LN41@cid_parser:
	mov	edx, DWORD PTR tv150[ebp]
	mov	DWORD PTR _read_len$3[ebp], edx
; Line 107
	mov	eax, DWORD PTR _read_len$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN22@cid_parser
; Line 108
	jmp	$Exit$45
$LN22@cid_parser:
; Line 110
	cmp	DWORD PTR _read_len$3[ebp], 256		; 00000100H
	jge	SHORT $LN21@cid_parser
; Line 111
	mov	eax, DWORD PTR _p$2[ebp]
	add	eax, DWORD PTR _read_len$3[ebp]
	mov	BYTE PTR [eax], 0
$LN21@cid_parser:
; Line 113
	mov	ecx, DWORD PTR _read_len$3[ebp]
	mov	edx, DWORD PTR _p$2[ebp]
	lea	eax, DWORD PTR [edx+ecx-10]
	mov	DWORD PTR _limit$[ebp], eax
; Line 115
	lea	ecx, DWORD PTR _buffer$4[ebp]
	mov	DWORD PTR _p$2[ebp], ecx
	jmp	SHORT $LN20@cid_parser
$LN19@cid_parser:
	mov	edx, DWORD PTR _p$2[ebp]
	add	edx, 1
	mov	DWORD PTR _p$2[ebp], edx
$LN20@cid_parser:
	mov	eax, DWORD PTR _p$2[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN18@cid_parser
; Line 117
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$2[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 83					; 00000053H
	jne	SHORT $LN17@cid_parser
	mov	esi, esp
	push	9
	push	OFFSET $SG8215
	mov	edx, DWORD PTR _p$2[ebp]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN17@cid_parser
; Line 120
	mov	eax, DWORD PTR _p$2[ebp]
	lea	ecx, DWORD PTR _buffer$4[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [edx+eax+10]
	mov	DWORD PTR _offset$[ebp], eax
; Line 121
	jmp	$Found$47
	jmp	SHORT $LN16@cid_parser
$LN17@cid_parser:
; Line 123
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$2[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 115				; 00000073H
	jne	SHORT $LN16@cid_parser
	mov	esi, esp
	push	6
	push	OFFSET $SG8221
	mov	ecx, DWORD PTR _p$2[ebp]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN16@cid_parser
; Line 125
	mov	edx, DWORD PTR _p$2[ebp]
	lea	eax, DWORD PTR _buffer$4[ebp]
	sub	edx, eax
	mov	ecx, DWORD PTR _offset$[ebp]
	lea	edx, DWORD PTR [ecx+edx+7]
	mov	DWORD PTR _offset$[ebp], edx
; Line 126
	jmp	SHORT $Found$47
$LN16@cid_parser:
; Line 128
	jmp	$LN19@cid_parser
$LN18@cid_parser:
; Line 130
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR _p$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$4[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 131
	mov	DWORD PTR _read_len$3[ebp], 256		; 00000100H
; Line 132
	lea	edx, DWORD PTR _buffer$4[ebp+10]
	mov	DWORD PTR _p$2[ebp], edx
; Line 133
	jmp	$LN29@cid_parser
$Found$47:
; Line 141
	mov	eax, DWORD PTR _offset$[ebp]
	sub	eax, DWORD PTR _base_offset$[ebp]
	mov	DWORD PTR _ps_len$[ebp], eax
; Line 143
	mov	ecx, DWORD PTR _base_offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN13@cid_parser
	mov	eax, DWORD PTR _parser$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _ps_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@cid_parser
$LN13@cid_parser:
; Line 144
	jmp	$Exit$45
$LN14@cid_parser:
; Line 146
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax+84], ecx
; Line 147
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _ps_len$[ebp]
	mov	DWORD PTR [edx+80], eax
; Line 148
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx+4], eax
; Line 149
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx], eax
; Line 150
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _ps_len$[ebp]
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 151
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+96], -1
; Line 158
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _arg1$[ebp], eax
; Line 159
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 160
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 161
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _arg2$[ebp], edx
; Line 162
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 163
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 165
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 166
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
$LN12@cid_parser:
; Line 168
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	$LN11@cid_parser
; Line 170
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN10@cid_parser
; Line 172
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _error$[ebp], ecx
; Line 173
	jmp	$Exit$45
$LN10@cid_parser:
; Line 176
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 83					; 00000053H
	jne	SHORT $LN9@cid_parser
	mov	esi, esp
	push	9
	push	OFFSET $SG8234
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN9@cid_parser
; Line 178
	mov	esi, esp
	push	5
	push	OFFSET $SG8237
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN8@cid_parser
; Line 179
	mov	esi, esp
	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	call	DWORD PTR __imp__atol
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+88], eax
$LN8@cid_parser:
; Line 181
	jmp	$Exit$45
	jmp	SHORT $LN7@cid_parser
$LN9@cid_parser:
; Line 183
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 115				; 00000073H
	jne	SHORT $LN7@cid_parser
	mov	esi, esp
	push	6
	push	OFFSET $SG8242
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN7@cid_parser
$LN5@cid_parser:
; Line 185
	mov	eax, 4
	imul	ecx, eax, 60
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN4@cid_parser
	push	OFFSET $SG8247
	call	_FT_Message
	add	esp, 4
$LN4@cid_parser:
	xor	edx, edx
	jne	SHORT $LN5@cid_parser
; Line 186
	push	OFFSET $SG8248
	push	186					; 000000baH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 187
	jmp	SHORT $Exit$45
$LN7@cid_parser:
; Line 190
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 191
	mov	eax, DWORD PTR _parser$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 192
	mov	eax, DWORD PTR _arg2$[ebp]
	mov	DWORD PTR _arg1$[ebp], eax
; Line 193
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _arg2$[ebp], ecx
; Line 194
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 195
	jmp	$LN12@cid_parser
$LN11@cid_parser:
; Line 199
	mov	ecx, DWORD PTR _parser$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
; Line 200
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $Exit$45
; Line 201
	jmp	$Again$46
$Exit$45:
; Line 204
	mov	eax, DWORD PTR _error$[ebp]
; Line 205
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@cid_parser
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN44@cid_parser:
	DD	1
	DD	$LN43@cid_parser
$LN43@cid_parser:
	DD	-308					; fffffeccH
	DD	266					; 0000010aH
	DD	$LN42@cid_parser
$LN42@cid_parser:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_cid_parser_new ENDP
_TEXT	ENDS
END
