; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\gzip\ftgzip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

CONST	SEGMENT
_cplens	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0dH
	DD	0fH
	DD	011H
	DD	013H
	DD	017H
	DD	01bH
	DD	01fH
	DD	023H
	DD	02bH
	DD	033H
	DD	03bH
	DD	043H
	DD	053H
	DD	063H
	DD	073H
	DD	083H
	DD	0a3H
	DD	0c3H
	DD	0e3H
	DD	0102H
	DD	00H
	DD	00H
_fixed_bl DD	09H
_cplext	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	DD	070H
	DD	070H
_fixed_bd DD	05H
_cpdist	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	07H
	DD	09H
	DD	0dH
	DD	011H
	DD	019H
	DD	021H
	DD	031H
	DD	041H
	DD	061H
	DD	081H
	DD	0c1H
	DD	0101H
	DD	0181H
	DD	0201H
	DD	0301H
	DD	0401H
	DD	0601H
	DD	0801H
	DD	0c01H
	DD	01001H
	DD	01801H
	DD	02001H
	DD	03001H
	DD	04001H
	DD	06001H
_cpdext	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_fixed_tl DB	060H
	DB	07H
	ORG $+2
	DD	0100H
	DB	00H
	DB	08H
	ORG $+2
	DD	050H
	DB	00H
	DB	08H
	ORG $+2
	DD	010H
	DB	054H
	DB	08H
	ORG $+2
	DD	073H
	DB	052H
	DB	07H
	ORG $+2
	DD	01fH
	DB	00H
	DB	08H
	ORG $+2
	DD	070H
	DB	00H
	DB	08H
	ORG $+2
	DD	030H
	DB	00H
	DB	09H
	ORG $+2
	DD	0c0H
	DB	050H
	DB	07H
	ORG $+2
	DD	0aH
	DB	00H
	DB	08H
	ORG $+2
	DD	060H
	DB	00H
	DB	08H
	ORG $+2
	DD	020H
	DB	00H
	DB	09H
	ORG $+2
	DD	0a0H
	DB	00H
	DB	08H
	ORG $+2
	DD	00H
	DB	00H
	DB	08H
	ORG $+2
	DD	080H
	DB	00H
	DB	08H
	ORG $+2
	DD	040H
	DB	00H
	DB	09H
	ORG $+2
	DD	0e0H
	DB	050H
	DB	07H
	ORG $+2
	DD	06H
	DB	00H
	DB	08H
	ORG $+2
	DD	058H
	DB	00H
	DB	08H
	ORG $+2
	DD	018H
	DB	00H
	DB	09H
	ORG $+2
	DD	090H
	DB	053H
	DB	07H
	ORG $+2
	DD	03bH
	DB	00H
	DB	08H
	ORG $+2
	DD	078H
	DB	00H
	DB	08H
	ORG $+2
	DD	038H
	DB	00H
	DB	09H
	ORG $+2
	DD	0d0H
	DB	051H
	DB	07H
	ORG $+2
	DD	011H
	DB	00H
	DB	08H
	ORG $+2
	DD	068H
	DB	00H
	DB	08H
	ORG $+2
	DD	028H
	DB	00H
	DB	09H
	ORG $+2
	DD	0b0H
	DB	00H
	DB	08H
	ORG $+2
	DD	08H
	DB	00H
	DB	08H
	ORG $+2
	DD	088H
	DB	00H
	DB	08H
	ORG $+2
	DD	048H
	DB	00H
	DB	09H
	ORG $+2
	DD	0f0H
	DB	050H
	DB	07H
	ORG $+2
	DD	04H
	DB	00H
	DB	08H
	ORG $+2
	DD	054H
	DB	00H
	DB	08H
	ORG $+2
	DD	014H
	DB	055H
	DB	08H
	ORG $+2
	DD	0e3H
	DB	053H
	DB	07H
	ORG $+2
	DD	02bH
	DB	00H
	DB	08H
	ORG $+2
	DD	074H
	DB	00H
	DB	08H
	ORG $+2
	DD	034H
	DB	00H
	DB	09H
	ORG $+2
	DD	0c8H
	DB	051H
	DB	07H
	ORG $+2
	DD	0dH
	DB	00H
	DB	08H
	ORG $+2
	DD	064H
	DB	00H
	DB	08H
	ORG $+2
	DD	024H
	DB	00H
	DB	09H
	ORG $+2
	DD	0a8H
	DB	00H
	DB	08H
	ORG $+2
	DD	04H
	DB	00H
	DB	08H
	ORG $+2
	DD	084H
	DB	00H
	DB	08H
	ORG $+2
	DD	044H
	DB	00H
	DB	09H
	ORG $+2
	DD	0e8H
	DB	050H
	DB	07H
	ORG $+2
	DD	08H
	DB	00H
	DB	08H
	ORG $+2
	DD	05cH
	DB	00H
	DB	08H
	ORG $+2
	DD	01cH
	DB	00H
	DB	09H
	ORG $+2
	DD	098H
	DB	054H
	DB	07H
	ORG $+2
	DD	053H
	DB	00H
	DB	08H
	ORG $+2
	DD	07cH
	DB	00H
	DB	08H
	ORG $+2
	DD	03cH
	DB	00H
	DB	09H
	ORG $+2
	DD	0d8H
	DB	052H
	DB	07H
	ORG $+2
	DD	017H
	DB	00H
	DB	08H
	ORG $+2
	DD	06cH
	DB	00H
	DB	08H
	ORG $+2
	DD	02cH
	DB	00H
	DB	09H
	ORG $+2
	DD	0b8H
	DB	00H
	DB	08H
	ORG $+2
	DD	0cH
	DB	00H
	DB	08H
	ORG $+2
	DD	08cH
	DB	00H
	DB	08H
	ORG $+2
	DD	04cH
	DB	00H
	DB	09H
	ORG $+2
	DD	0f8H
	DB	050H
	DB	07H
	ORG $+2
	DD	03H
	DB	00H
	DB	08H
	ORG $+2
	DD	052H
	DB	00H
	DB	08H
	ORG $+2
	DD	012H
	DB	055H
	DB	08H
	ORG $+2
	DD	0a3H
	DB	053H
	DB	07H
	ORG $+2
	DD	023H
	DB	00H
	DB	08H
	ORG $+2
	DD	072H
	DB	00H
	DB	08H
	ORG $+2
	DD	032H
	DB	00H
	DB	09H
	ORG $+2
	DD	0c4H
	DB	051H
	DB	07H
	ORG $+2
	DD	0bH
	DB	00H
	DB	08H
	ORG $+2
	DD	062H
	DB	00H
	DB	08H
	ORG $+2
	DD	022H
	DB	00H
	DB	09H
	ORG $+2
	DD	0a4H
	DB	00H
	DB	08H
	ORG $+2
	DD	02H
	DB	00H
	DB	08H
	ORG $+2
	DD	082H
	DB	00H
	DB	08H
	ORG $+2
	DD	042H
	DB	00H
	DB	09H
	ORG $+2
	DD	0e4H
	DB	050H
	DB	07H
	ORG $+2
	DD	07H
	DB	00H
	DB	08H
	ORG $+2
	DD	05aH
	DB	00H
	DB	08H
	ORG $+2
	DD	01aH
	DB	00H
	DB	09H
	ORG $+2
	DD	094H
	DB	054H
	DB	07H
	ORG $+2
	DD	043H
	DB	00H
	DB	08H
	ORG $+2
	DD	07aH
	DB	00H
	DB	08H
	ORG $+2
	DD	03aH
	DB	00H
	DB	09H
	ORG $+2
	DD	0d4H
	DB	052H
	DB	07H
	ORG $+2
	DD	013H
	DB	00H
	DB	08H
	ORG $+2
	DD	06aH
	DB	00H
	DB	08H
	ORG $+2
	DD	02aH
	DB	00H
	DB	09H
	ORG $+2
	DD	0b4H
	DB	00H
	DB	08H
	ORG $+2
	DD	0aH
	DB	00H
	DB	08H
	ORG $+2
	DD	08aH
	DB	00H
	DB	08H
	ORG $+2
	DD	04aH
	DB	00H
	DB	09H
	ORG $+2
	DD	0f4H
	DB	050H
	DB	07H
	ORG $+2
	DD	05H
	DB	00H
	DB	08H
	ORG $+2
	DD	056H
	DB	00H
	DB	08H
	ORG $+2
	DD	016H
	DB	0c0H
	DB	08H
	ORG $+2
	DD	00H
	DB	053H
	DB	07H
	ORG $+2
	DD	033H
	DB	00H
	DB	08H
	ORG $+2
	DD	076H
	DB	00H
	DB	08H
	ORG $+2
	DD	036H
	DB	00H
	DB	09H
	ORG $+2
	DD	0ccH
	DB	051H
	DB	07H
	ORG $+2
	DD	0fH
	DB	00H
	DB	08H
	ORG $+2
	DD	066H
	DB	00H
	DB	08H
	ORG $+2
	DD	026H
	DB	00H
	DB	09H
	ORG $+2
	DD	0acH
	DB	00H
	DB	08H
	ORG $+2
	DD	06H
	DB	00H
	DB	08H
	ORG $+2
	DD	086H
	DB	00H
	DB	08H
	ORG $+2
	DD	046H
	DB	00H
	DB	09H
	ORG $+2
	DD	0ecH
	DB	050H
	DB	07H
	ORG $+2
	DD	09H
	DB	00H
	DB	08H
	ORG $+2
	DD	05eH
	DB	00H
	DB	08H
	ORG $+2
	DD	01eH
	DB	00H
	DB	09H
	ORG $+2
	DD	09cH
	DB	054H
	DB	07H
	ORG $+2
	DD	063H
	DB	00H
	DB	08H
	ORG $+2
	DD	07eH
	DB	00H
	DB	08H
	ORG $+2
	DD	03eH
	DB	00H
	DB	09H
	ORG $+2
	DD	0dcH
	DB	052H
	DB	07H
	ORG $+2
	DD	01bH
	DB	00H
	DB	08H
	ORG $+2
	DD	06eH
	DB	00H
	DB	08H
	ORG $+2
	DD	02eH
	DB	00H
	DB	09H
	ORG $+2
	DD	0bcH
	DB	00H
	DB	08H
	ORG $+2
	DD	0eH
	DB	00H
	DB	08H
	ORG $+2
	DD	08eH
	DB	00H
	DB	08H
	ORG $+2
	DD	04eH
	DB	00H
	DB	09H
	ORG $+2
	DD	0fcH
	DB	060H
	DB	07H
	ORG $+2
	DD	0100H
	DB	00H
	DB	08H
	ORG $+2
	DD	051H
	DB	00H
	DB	08H
	ORG $+2
	DD	011H
	DB	055H
	DB	08H
	ORG $+2
	DD	083H
	DB	052H
	DB	07H
	ORG $+2
	DD	01fH
	DB	00H
	DB	08H
	ORG $+2
	DD	071H
	DB	00H
	DB	08H
	ORG $+2
	DD	031H
	DB	00H
	DB	09H
	ORG $+2
	DD	0c2H
	DB	050H
	DB	07H
	ORG $+2
	DD	0aH
	DB	00H
	DB	08H
	ORG $+2
	DD	061H
	DB	00H
	DB	08H
	ORG $+2
	DD	021H
	DB	00H
	DB	09H
	ORG $+2
	DD	0a2H
	DB	00H
	DB	08H
	ORG $+2
	DD	01H
	DB	00H
	DB	08H
	ORG $+2
	DD	081H
	DB	00H
	DB	08H
	ORG $+2
	DD	041H
	DB	00H
	DB	09H
	ORG $+2
	DD	0e2H
	DB	050H
	DB	07H
	ORG $+2
	DD	06H
	DB	00H
	DB	08H
	ORG $+2
	DD	059H
	DB	00H
	DB	08H
	ORG $+2
	DD	019H
	DB	00H
	DB	09H
	ORG $+2
	DD	092H
	DB	053H
	DB	07H
	ORG $+2
	DD	03bH
	DB	00H
	DB	08H
	ORG $+2
	DD	079H
	DB	00H
	DB	08H
	ORG $+2
	DD	039H
	DB	00H
	DB	09H
	ORG $+2
	DD	0d2H
	DB	051H
	DB	07H
	ORG $+2
	DD	011H
	DB	00H
	DB	08H
	ORG $+2
	DD	069H
	DB	00H
	DB	08H
	ORG $+2
	DD	029H
	DB	00H
	DB	09H
	ORG $+2
	DD	0b2H
	DB	00H
	DB	08H
	ORG $+2
	DD	09H
	DB	00H
	DB	08H
	ORG $+2
	DD	089H
	DB	00H
	DB	08H
	ORG $+2
	DD	049H
	DB	00H
	DB	09H
	ORG $+2
	DD	0f2H
	DB	050H
	DB	07H
	ORG $+2
	DD	04H
	DB	00H
	DB	08H
	ORG $+2
	DD	055H
	DB	00H
	DB	08H
	ORG $+2
	DD	015H
	DB	050H
	DB	08H
	ORG $+2
	DD	0102H
	DB	053H
	DB	07H
	ORG $+2
	DD	02bH
	DB	00H
	DB	08H
	ORG $+2
	DD	075H
	DB	00H
	DB	08H
	ORG $+2
	DD	035H
	DB	00H
	DB	09H
	ORG $+2
	DD	0caH
	DB	051H
	DB	07H
	ORG $+2
	DD	0dH
	DB	00H
	DB	08H
	ORG $+2
	DD	065H
	DB	00H
	DB	08H
	ORG $+2
	DD	025H
	DB	00H
	DB	09H
	ORG $+2
	DD	0aaH
	DB	00H
	DB	08H
	ORG $+2
	DD	05H
	DB	00H
	DB	08H
	ORG $+2
	DD	085H
	DB	00H
	DB	08H
	ORG $+2
	DD	045H
	DB	00H
	DB	09H
	ORG $+2
	DD	0eaH
	DB	050H
	DB	07H
	ORG $+2
	DD	08H
	DB	00H
	DB	08H
	ORG $+2
	DD	05dH
	DB	00H
	DB	08H
	ORG $+2
	DD	01dH
	DB	00H
	DB	09H
	ORG $+2
	DD	09aH
	DB	054H
	DB	07H
	ORG $+2
	DD	053H
	DB	00H
	DB	08H
	ORG $+2
	DD	07dH
	DB	00H
	DB	08H
	ORG $+2
	DD	03dH
	DB	00H
	DB	09H
	ORG $+2
	DD	0daH
	DB	052H
	DB	07H
	ORG $+2
	DD	017H
	DB	00H
	DB	08H
	ORG $+2
	DD	06dH
	DB	00H
	DB	08H
	ORG $+2
	DD	02dH
	DB	00H
	DB	09H
	ORG $+2
	DD	0baH
	DB	00H
	DB	08H
	ORG $+2
	DD	0dH
	DB	00H
	DB	08H
	ORG $+2
	DD	08dH
	DB	00H
	DB	08H
	ORG $+2
	DD	04dH
	DB	00H
	DB	09H
	ORG $+2
	DD	0faH
	DB	050H
	DB	07H
	ORG $+2
	DD	03H
	DB	00H
	DB	08H
	ORG $+2
	DD	053H
	DB	00H
	DB	08H
	ORG $+2
	DD	013H
	DB	055H
	DB	08H
	ORG $+2
	DD	0c3H
	DB	053H
	DB	07H
	ORG $+2
	DD	023H
	DB	00H
	DB	08H
	ORG $+2
	DD	073H
	DB	00H
	DB	08H
	ORG $+2
	DD	033H
	DB	00H
	DB	09H
	ORG $+2
	DD	0c6H
	DB	051H
	DB	07H
	ORG $+2
	DD	0bH
	DB	00H
	DB	08H
	ORG $+2
	DD	063H
	DB	00H
	DB	08H
	ORG $+2
	DD	023H
	DB	00H
	DB	09H
	ORG $+2
	DD	0a6H
	DB	00H
	DB	08H
	ORG $+2
	DD	03H
	DB	00H
	DB	08H
	ORG $+2
	DD	083H
	DB	00H
	DB	08H
	ORG $+2
	DD	043H
	DB	00H
	DB	09H
	ORG $+2
	DD	0e6H
	DB	050H
	DB	07H
	ORG $+2
	DD	07H
	DB	00H
	DB	08H
	ORG $+2
	DD	05bH
	DB	00H
	DB	08H
	ORG $+2
	DD	01bH
	DB	00H
	DB	09H
	ORG $+2
	DD	096H
	DB	054H
	DB	07H
	ORG $+2
	DD	043H
	DB	00H
	DB	08H
	ORG $+2
	DD	07bH
	DB	00H
	DB	08H
	ORG $+2
	DD	03bH
	DB	00H
	DB	09H
	ORG $+2
	DD	0d6H
	DB	052H
	DB	07H
	ORG $+2
	DD	013H
	DB	00H
	DB	08H
	ORG $+2
	DD	06bH
	DB	00H
	DB	08H
	ORG $+2
	DD	02bH
	DB	00H
	DB	09H
	ORG $+2
	DD	0b6H
	DB	00H
	DB	08H
	ORG $+2
	DD	0bH
	DB	00H
	DB	08H
	ORG $+2
	DD	08bH
	DB	00H
	DB	08H
	ORG $+2
	DD	04bH
	DB	00H
	DB	09H
	ORG $+2
	DD	0f6H
	DB	050H
	DB	07H
	ORG $+2
	DD	05H
	DB	00H
	DB	08H
	ORG $+2
	DD	057H
	DB	00H
	DB	08H
	ORG $+2
	DD	017H
	DB	0c0H
	DB	08H
	ORG $+2
	DD	00H
	DB	053H
	DB	07H
	ORG $+2
	DD	033H
	DB	00H
	DB	08H
	ORG $+2
	DD	077H
	DB	00H
	DB	08H
	ORG $+2
	DD	037H
	DB	00H
	DB	09H
	ORG $+2
	DD	0ceH
	DB	051H
	DB	07H
	ORG $+2
	DD	0fH
	DB	00H
	DB	08H
	ORG $+2
	DD	067H
	DB	00H
	DB	08H
	ORG $+2
	DD	027H
	DB	00H
	DB	09H
	ORG $+2
	DD	0aeH
	DB	00H
	DB	08H
	ORG $+2
	DD	07H
	DB	00H
	DB	08H
	ORG $+2
	DD	087H
	DB	00H
	DB	08H
	ORG $+2
	DD	047H
	DB	00H
	DB	09H
	ORG $+2
	DD	0eeH
	DB	050H
	DB	07H
	ORG $+2
	DD	09H
	DB	00H
	DB	08H
	ORG $+2
	DD	05fH
	DB	00H
	DB	08H
	ORG $+2
	DD	01fH
	DB	00H
	DB	09H
	ORG $+2
	DD	09eH
	DB	054H
	DB	07H
	ORG $+2
	DD	063H
	DB	00H
	DB	08H
	ORG $+2
	DD	07fH
	DB	00H
	DB	08H
	ORG $+2
	DD	03fH
	DB	00H
	DB	09H
	ORG $+2
	DD	0deH
	DB	052H
	DB	07H
	ORG $+2
	DD	01bH
	DB	00H
	DB	08H
	ORG $+2
	DD	06fH
	DB	00H
	DB	08H
	ORG $+2
	DD	02fH
	DB	00H
	DB	09H
	ORG $+2
	DD	0beH
	DB	00H
	DB	08H
	ORG $+2
	DD	0fH
	DB	00H
	DB	08H
	ORG $+2
	DD	08fH
	DB	00H
	DB	08H
	ORG $+2
	DD	04fH
	DB	00H
	DB	09H
	ORG $+2
	DD	0feH
	DB	060H
	DB	07H
	ORG $+2
	DD	0100H
	DB	00H
	DB	08H
	ORG $+2
	DD	050H
	DB	00H
	DB	08H
	ORG $+2
	DD	010H
	DB	054H
	DB	08H
	ORG $+2
	DD	073H
	DB	052H
	DB	07H
	ORG $+2
	DD	01fH
	DB	00H
	DB	08H
	ORG $+2
	DD	070H
	DB	00H
	DB	08H
	ORG $+2
	DD	030H
	DB	00H
	DB	09H
	ORG $+2
	DD	0c1H
	DB	050H
	DB	07H
	ORG $+2
	DD	0aH
	DB	00H
	DB	08H
	ORG $+2
	DD	060H
	DB	00H
	DB	08H
	ORG $+2
	DD	020H
	DB	00H
	DB	09H
	ORG $+2
	DD	0a1H
	DB	00H
	DB	08H
	ORG $+2
	DD	00H
	DB	00H
	DB	08H
	ORG $+2
	DD	080H
	DB	00H
	DB	08H
	ORG $+2
	DD	040H
	DB	00H
	DB	09H
	ORG $+2
	DD	0e1H
	DB	050H
	DB	07H
	ORG $+2
	DD	06H
	DB	00H
	DB	08H
	ORG $+2
	DD	058H
	DB	00H
	DB	08H
	ORG $+2
	DD	018H
	DB	00H
	DB	09H
	ORG $+2
	DD	091H
	DB	053H
	DB	07H
	ORG $+2
	DD	03bH
	DB	00H
	DB	08H
	ORG $+2
	DD	078H
	DB	00H
	DB	08H
	ORG $+2
	DD	038H
	DB	00H
	DB	09H
	ORG $+2
	DD	0d1H
	DB	051H
	DB	07H
	ORG $+2
	DD	011H
	DB	00H
	DB	08H
	ORG $+2
	DD	068H
	DB	00H
	DB	08H
	ORG $+2
	DD	028H
	DB	00H
	DB	09H
	ORG $+2
	DD	0b1H
	DB	00H
	DB	08H
	ORG $+2
	DD	08H
	DB	00H
	DB	08H
	ORG $+2
	DD	088H
	DB	00H
	DB	08H
	ORG $+2
	DD	048H
	DB	00H
	DB	09H
	ORG $+2
	DD	0f1H
	DB	050H
	DB	07H
	ORG $+2
	DD	04H
	DB	00H
	DB	08H
	ORG $+2
	DD	054H
	DB	00H
	DB	08H
	ORG $+2
	DD	014H
	DB	055H
	DB	08H
	ORG $+2
	DD	0e3H
	DB	053H
	DB	07H
	ORG $+2
	DD	02bH
	DB	00H
	DB	08H
	ORG $+2
	DD	074H
	DB	00H
	DB	08H
	ORG $+2
	DD	034H
	DB	00H
	DB	09H
	ORG $+2
	DD	0c9H
	DB	051H
	DB	07H
	ORG $+2
	DD	0dH
	DB	00H
	DB	08H
	ORG $+2
	DD	064H
	DB	00H
	DB	08H
	ORG $+2
	DD	024H
	DB	00H
	DB	09H
	ORG $+2
	DD	0a9H
	DB	00H
	DB	08H
	ORG $+2
	DD	04H
	DB	00H
	DB	08H
	ORG $+2
	DD	084H
	DB	00H
	DB	08H
	ORG $+2
	DD	044H
	DB	00H
	DB	09H
	ORG $+2
	DD	0e9H
	DB	050H
	DB	07H
	ORG $+2
	DD	08H
	DB	00H
	DB	08H
	ORG $+2
	DD	05cH
	DB	00H
	DB	08H
	ORG $+2
	DD	01cH
	DB	00H
	DB	09H
	ORG $+2
	DD	099H
	DB	054H
	DB	07H
	ORG $+2
	DD	053H
	DB	00H
	DB	08H
	ORG $+2
	DD	07cH
	DB	00H
	DB	08H
	ORG $+2
	DD	03cH
	DB	00H
	DB	09H
	ORG $+2
	DD	0d9H
	DB	052H
	DB	07H
	ORG $+2
	DD	017H
	DB	00H
	DB	08H
	ORG $+2
	DD	06cH
	DB	00H
	DB	08H
	ORG $+2
	DD	02cH
	DB	00H
	DB	09H
	ORG $+2
	DD	0b9H
	DB	00H
	DB	08H
	ORG $+2
	DD	0cH
	DB	00H
	DB	08H
	ORG $+2
	DD	08cH
	DB	00H
	DB	08H
	ORG $+2
	DD	04cH
	DB	00H
	DB	09H
	ORG $+2
	DD	0f9H
	DB	050H
	DB	07H
	ORG $+2
	DD	03H
	DB	00H
	DB	08H
	ORG $+2
	DD	052H
	DB	00H
	DB	08H
	ORG $+2
	DD	012H
	DB	055H
	DB	08H
	ORG $+2
	DD	0a3H
	DB	053H
	DB	07H
	ORG $+2
	DD	023H
	DB	00H
	DB	08H
	ORG $+2
	DD	072H
	DB	00H
	DB	08H
	ORG $+2
	DD	032H
	DB	00H
	DB	09H
	ORG $+2
	DD	0c5H
	DB	051H
	DB	07H
	ORG $+2
	DD	0bH
	DB	00H
	DB	08H
	ORG $+2
	DD	062H
	DB	00H
	DB	08H
	ORG $+2
	DD	022H
	DB	00H
	DB	09H
	ORG $+2
	DD	0a5H
	DB	00H
	DB	08H
	ORG $+2
	DD	02H
	DB	00H
	DB	08H
	ORG $+2
	DD	082H
	DB	00H
	DB	08H
	ORG $+2
	DD	042H
	DB	00H
	DB	09H
	ORG $+2
	DD	0e5H
	DB	050H
	DB	07H
	ORG $+2
	DD	07H
	DB	00H
	DB	08H
	ORG $+2
	DD	05aH
	DB	00H
	DB	08H
	ORG $+2
	DD	01aH
	DB	00H
	DB	09H
	ORG $+2
	DD	095H
	DB	054H
	DB	07H
	ORG $+2
	DD	043H
	DB	00H
	DB	08H
	ORG $+2
	DD	07aH
	DB	00H
	DB	08H
	ORG $+2
	DD	03aH
	DB	00H
	DB	09H
	ORG $+2
	DD	0d5H
	DB	052H
	DB	07H
	ORG $+2
	DD	013H
	DB	00H
	DB	08H
	ORG $+2
	DD	06aH
	DB	00H
	DB	08H
	ORG $+2
	DD	02aH
	DB	00H
	DB	09H
	ORG $+2
	DD	0b5H
	DB	00H
	DB	08H
	ORG $+2
	DD	0aH
	DB	00H
	DB	08H
	ORG $+2
	DD	08aH
	DB	00H
	DB	08H
	ORG $+2
	DD	04aH
	DB	00H
	DB	09H
	ORG $+2
	DD	0f5H
	DB	050H
	DB	07H
	ORG $+2
	DD	05H
	DB	00H
	DB	08H
	ORG $+2
	DD	056H
	DB	00H
	DB	08H
	ORG $+2
	DD	016H
	DB	0c0H
	DB	08H
	ORG $+2
	DD	00H
	DB	053H
	DB	07H
	ORG $+2
	DD	033H
	DB	00H
	DB	08H
	ORG $+2
	DD	076H
	DB	00H
	DB	08H
	ORG $+2
	DD	036H
	DB	00H
	DB	09H
	ORG $+2
	DD	0cdH
	DB	051H
	DB	07H
	ORG $+2
	DD	0fH
	DB	00H
	DB	08H
	ORG $+2
	DD	066H
	DB	00H
	DB	08H
	ORG $+2
	DD	026H
	DB	00H
	DB	09H
	ORG $+2
	DD	0adH
	DB	00H
	DB	08H
	ORG $+2
	DD	06H
	DB	00H
	DB	08H
	ORG $+2
	DD	086H
	DB	00H
	DB	08H
	ORG $+2
	DD	046H
	DB	00H
	DB	09H
	ORG $+2
	DD	0edH
	DB	050H
	DB	07H
	ORG $+2
	DD	09H
	DB	00H
	DB	08H
	ORG $+2
	DD	05eH
	DB	00H
	DB	08H
	ORG $+2
	DD	01eH
	DB	00H
	DB	09H
	ORG $+2
	DD	09dH
	DB	054H
	DB	07H
	ORG $+2
	DD	063H
	DB	00H
	DB	08H
	ORG $+2
	DD	07eH
	DB	00H
	DB	08H
	ORG $+2
	DD	03eH
	DB	00H
	DB	09H
	ORG $+2
	DD	0ddH
	DB	052H
	DB	07H
	ORG $+2
	DD	01bH
	DB	00H
	DB	08H
	ORG $+2
	DD	06eH
	DB	00H
	DB	08H
	ORG $+2
	DD	02eH
	DB	00H
	DB	09H
	ORG $+2
	DD	0bdH
	DB	00H
	DB	08H
	ORG $+2
	DD	0eH
	DB	00H
	DB	08H
	ORG $+2
	DD	08eH
	DB	00H
	DB	08H
	ORG $+2
	DD	04eH
	DB	00H
	DB	09H
	ORG $+2
	DD	0fdH
	DB	060H
	DB	07H
	ORG $+2
	DD	0100H
	DB	00H
	DB	08H
	ORG $+2
	DD	051H
	DB	00H
	DB	08H
	ORG $+2
	DD	011H
	DB	055H
	DB	08H
	ORG $+2
	DD	083H
	DB	052H
	DB	07H
	ORG $+2
	DD	01fH
	DB	00H
	DB	08H
	ORG $+2
	DD	071H
	DB	00H
	DB	08H
	ORG $+2
	DD	031H
	DB	00H
	DB	09H
	ORG $+2
	DD	0c3H
	DB	050H
	DB	07H
	ORG $+2
	DD	0aH
	DB	00H
	DB	08H
	ORG $+2
	DD	061H
	DB	00H
	DB	08H
	ORG $+2
	DD	021H
	DB	00H
	DB	09H
	ORG $+2
	DD	0a3H
	DB	00H
	DB	08H
	ORG $+2
	DD	01H
	DB	00H
	DB	08H
	ORG $+2
	DD	081H
	DB	00H
	DB	08H
	ORG $+2
	DD	041H
	DB	00H
	DB	09H
	ORG $+2
	DD	0e3H
	DB	050H
	DB	07H
	ORG $+2
	DD	06H
	DB	00H
	DB	08H
	ORG $+2
	DD	059H
	DB	00H
	DB	08H
	ORG $+2
	DD	019H
	DB	00H
	DB	09H
	ORG $+2
	DD	093H
	DB	053H
	DB	07H
	ORG $+2
	DD	03bH
	DB	00H
	DB	08H
	ORG $+2
	DD	079H
	DB	00H
	DB	08H
	ORG $+2
	DD	039H
	DB	00H
	DB	09H
	ORG $+2
	DD	0d3H
	DB	051H
	DB	07H
	ORG $+2
	DD	011H
	DB	00H
	DB	08H
	ORG $+2
	DD	069H
	DB	00H
	DB	08H
	ORG $+2
	DD	029H
	DB	00H
	DB	09H
	ORG $+2
	DD	0b3H
	DB	00H
	DB	08H
	ORG $+2
	DD	09H
	DB	00H
	DB	08H
	ORG $+2
	DD	089H
	DB	00H
	DB	08H
	ORG $+2
	DD	049H
	DB	00H
	DB	09H
	ORG $+2
	DD	0f3H
	DB	050H
	DB	07H
	ORG $+2
	DD	04H
	DB	00H
	DB	08H
	ORG $+2
	DD	055H
	DB	00H
	DB	08H
	ORG $+2
	DD	015H
	DB	050H
	DB	08H
	ORG $+2
	DD	0102H
	DB	053H
	DB	07H
	ORG $+2
	DD	02bH
	DB	00H
	DB	08H
	ORG $+2
	DD	075H
	DB	00H
	DB	08H
	ORG $+2
	DD	035H
	DB	00H
	DB	09H
	ORG $+2
	DD	0cbH
	DB	051H
	DB	07H
	ORG $+2
	DD	0dH
	DB	00H
	DB	08H
	ORG $+2
	DD	065H
	DB	00H
	DB	08H
	ORG $+2
	DD	025H
	DB	00H
	DB	09H
	ORG $+2
	DD	0abH
	DB	00H
	DB	08H
	ORG $+2
	DD	05H
	DB	00H
	DB	08H
	ORG $+2
	DD	085H
	DB	00H
	DB	08H
	ORG $+2
	DD	045H
	DB	00H
	DB	09H
	ORG $+2
	DD	0ebH
	DB	050H
	DB	07H
	ORG $+2
	DD	08H
	DB	00H
	DB	08H
	ORG $+2
	DD	05dH
	DB	00H
	DB	08H
	ORG $+2
	DD	01dH
	DB	00H
	DB	09H
	ORG $+2
	DD	09bH
	DB	054H
	DB	07H
	ORG $+2
	DD	053H
	DB	00H
	DB	08H
	ORG $+2
	DD	07dH
	DB	00H
	DB	08H
	ORG $+2
	DD	03dH
	DB	00H
	DB	09H
	ORG $+2
	DD	0dbH
	DB	052H
	DB	07H
	ORG $+2
	DD	017H
	DB	00H
	DB	08H
	ORG $+2
	DD	06dH
	DB	00H
	DB	08H
	ORG $+2
	DD	02dH
	DB	00H
	DB	09H
	ORG $+2
	DD	0bbH
	DB	00H
	DB	08H
	ORG $+2
	DD	0dH
	DB	00H
	DB	08H
	ORG $+2
	DD	08dH
	DB	00H
	DB	08H
	ORG $+2
	DD	04dH
	DB	00H
	DB	09H
	ORG $+2
	DD	0fbH
	DB	050H
	DB	07H
	ORG $+2
	DD	03H
	DB	00H
	DB	08H
	ORG $+2
	DD	053H
	DB	00H
	DB	08H
	ORG $+2
	DD	013H
	DB	055H
	DB	08H
	ORG $+2
	DD	0c3H
	DB	053H
	DB	07H
	ORG $+2
	DD	023H
	DB	00H
	DB	08H
	ORG $+2
	DD	073H
	DB	00H
	DB	08H
	ORG $+2
	DD	033H
	DB	00H
	DB	09H
	ORG $+2
	DD	0c7H
	DB	051H
	DB	07H
	ORG $+2
	DD	0bH
	DB	00H
	DB	08H
	ORG $+2
	DD	063H
	DB	00H
	DB	08H
	ORG $+2
	DD	023H
	DB	00H
	DB	09H
	ORG $+2
	DD	0a7H
	DB	00H
	DB	08H
	ORG $+2
	DD	03H
	DB	00H
	DB	08H
	ORG $+2
	DD	083H
	DB	00H
	DB	08H
	ORG $+2
	DD	043H
	DB	00H
	DB	09H
	ORG $+2
	DD	0e7H
	DB	050H
	DB	07H
	ORG $+2
	DD	07H
	DB	00H
	DB	08H
	ORG $+2
	DD	05bH
	DB	00H
	DB	08H
	ORG $+2
	DD	01bH
	DB	00H
	DB	09H
	ORG $+2
	DD	097H
	DB	054H
	DB	07H
	ORG $+2
	DD	043H
	DB	00H
	DB	08H
	ORG $+2
	DD	07bH
	DB	00H
	DB	08H
	ORG $+2
	DD	03bH
	DB	00H
	DB	09H
	ORG $+2
	DD	0d7H
	DB	052H
	DB	07H
	ORG $+2
	DD	013H
	DB	00H
	DB	08H
	ORG $+2
	DD	06bH
	DB	00H
	DB	08H
	ORG $+2
	DD	02bH
	DB	00H
	DB	09H
	ORG $+2
	DD	0b7H
	DB	00H
	DB	08H
	ORG $+2
	DD	0bH
	DB	00H
	DB	08H
	ORG $+2
	DD	08bH
	DB	00H
	DB	08H
	ORG $+2
	DD	04bH
	DB	00H
	DB	09H
	ORG $+2
	DD	0f7H
	DB	050H
	DB	07H
	ORG $+2
	DD	05H
	DB	00H
	DB	08H
	ORG $+2
	DD	057H
	DB	00H
	DB	08H
	ORG $+2
	DD	017H
	DB	0c0H
	DB	08H
	ORG $+2
	DD	00H
	DB	053H
	DB	07H
	ORG $+2
	DD	033H
	DB	00H
	DB	08H
	ORG $+2
	DD	077H
	DB	00H
	DB	08H
	ORG $+2
	DD	037H
	DB	00H
	DB	09H
	ORG $+2
	DD	0cfH
	DB	051H
	DB	07H
	ORG $+2
	DD	0fH
	DB	00H
	DB	08H
	ORG $+2
	DD	067H
	DB	00H
	DB	08H
	ORG $+2
	DD	027H
	DB	00H
	DB	09H
	ORG $+2
	DD	0afH
	DB	00H
	DB	08H
	ORG $+2
	DD	07H
	DB	00H
	DB	08H
	ORG $+2
	DD	087H
	DB	00H
	DB	08H
	ORG $+2
	DD	047H
	DB	00H
	DB	09H
	ORG $+2
	DD	0efH
	DB	050H
	DB	07H
	ORG $+2
	DD	09H
	DB	00H
	DB	08H
	ORG $+2
	DD	05fH
	DB	00H
	DB	08H
	ORG $+2
	DD	01fH
	DB	00H
	DB	09H
	ORG $+2
	DD	09fH
	DB	054H
	DB	07H
	ORG $+2
	DD	063H
	DB	00H
	DB	08H
	ORG $+2
	DD	07fH
	DB	00H
	DB	08H
	ORG $+2
	DD	03fH
	DB	00H
	DB	09H
	ORG $+2
	DD	0dfH
	DB	052H
	DB	07H
	ORG $+2
	DD	01bH
	DB	00H
	DB	08H
	ORG $+2
	DD	06fH
	DB	00H
	DB	08H
	ORG $+2
	DD	02fH
	DB	00H
	DB	09H
	ORG $+2
	DD	0bfH
	DB	00H
	DB	08H
	ORG $+2
	DD	0fH
	DB	00H
	DB	08H
	ORG $+2
	DD	08fH
	DB	00H
	DB	08H
	ORG $+2
	DD	04fH
	DB	00H
	DB	09H
	ORG $+2
	DD	0ffH
_fixed_td DB	050H
	DB	05H
	ORG $+2
	DD	01H
	DB	057H
	DB	05H
	ORG $+2
	DD	0101H
	DB	053H
	DB	05H
	ORG $+2
	DD	011H
	DB	05bH
	DB	05H
	ORG $+2
	DD	01001H
	DB	051H
	DB	05H
	ORG $+2
	DD	05H
	DB	059H
	DB	05H
	ORG $+2
	DD	0401H
	DB	055H
	DB	05H
	ORG $+2
	DD	041H
	DB	05dH
	DB	05H
	ORG $+2
	DD	04001H
	DB	050H
	DB	05H
	ORG $+2
	DD	03H
	DB	058H
	DB	05H
	ORG $+2
	DD	0201H
	DB	054H
	DB	05H
	ORG $+2
	DD	021H
	DB	05cH
	DB	05H
	ORG $+2
	DD	02001H
	DB	052H
	DB	05H
	ORG $+2
	DD	09H
	DB	05aH
	DB	05H
	ORG $+2
	DD	0801H
	DB	056H
	DB	05H
	ORG $+2
	DD	081H
	DB	0c0H
	DB	05H
	ORG $+2
	DD	06001H
	DB	050H
	DB	05H
	ORG $+2
	DD	02H
	DB	057H
	DB	05H
	ORG $+2
	DD	0181H
	DB	053H
	DB	05H
	ORG $+2
	DD	019H
	DB	05bH
	DB	05H
	ORG $+2
	DD	01801H
	DB	051H
	DB	05H
	ORG $+2
	DD	07H
	DB	059H
	DB	05H
	ORG $+2
	DD	0601H
	DB	055H
	DB	05H
	ORG $+2
	DD	061H
	DB	05dH
	DB	05H
	ORG $+2
	DD	06001H
	DB	050H
	DB	05H
	ORG $+2
	DD	04H
	DB	058H
	DB	05H
	ORG $+2
	DD	0301H
	DB	054H
	DB	05H
	ORG $+2
	DD	031H
	DB	05cH
	DB	05H
	ORG $+2
	DD	03001H
	DB	052H
	DB	05H
	ORG $+2
	DD	0dH
	DB	05aH
	DB	05H
	ORG $+2
	DD	0c01H
	DB	056H
	DB	05H
	ORG $+2
	DD	0c1H
	DB	0c0H
	DB	05H
	ORG $+2
	DD	06001H
_inflate_mask DD 00H
	DD	01H
	DD	03H
	DD	07H
	DD	0fH
	DD	01fH
	DD	03fH
	DD	07fH
	DD	0ffH
	DD	01ffH
	DD	03ffH
	DD	07ffH
	DD	0fffH
	DD	01fffH
	DD	03fffH
	DD	07fffH
	DD	0ffffH
	ORG $+4
_border	DD	010H
	DD	011H
	DD	012H
	DD	00H
	DD	08H
	DD	07H
	DD	09H
	DD	06H
	DD	0aH
	DD	05H
	DD	0bH
	DD	04H
	DD	0cH
	DD	03H
	DD	0dH
	DD	02H
	DD	0eH
	DD	01H
	DD	0fH
CONST	ENDS
_DATA	SEGMENT
$SG8280	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG8326	DB	'1.1.4', 00H
	ORG $+2
$SG8327	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG8359	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG8363	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG8378	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG8381	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG8470	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG8514	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG8521	DB	'1.1.4', 00H
	ORG $+2
$SG8523	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG8528	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG8530	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG8532	DB	'..\..\..\src\gzip\ftgzip.c', 00H
	ORG $+1
$SG7591	DB	'oversubscribed dynamic bit lengths tree', 00H
$SG7596	DB	'incomplete dynamic bit lengths tree', 00H
$SG7627	DB	'oversubscribed literal/length tree', 00H
	ORG $+1
$SG7631	DB	'incomplete literal/length tree', 00H
	ORG $+1
$SG7637	DB	'oversubscribed distance tree', 00H
	ORG $+3
$SG7641	DB	'incomplete distance tree', 00H
	ORG $+3
$SG7645	DB	'empty distance tree with lengths', 00H
	ORG $+3
$SG7775	DB	'invalid literal/length code', 00H
$SG7796	DB	'invalid distance code', 00H
	ORG $+2
$SG7934	DB	'invalid block type', 00H
	ORG $+1
$SG7944	DB	'invalid stored block lengths', 00H
	ORG $+3
$SG7973	DB	'too many length or distance symbols', 00H
$SG8022	DB	'invalid bit length repeat', 00H
	ORG $+2
$SG8110	DB	'1.1.4', 00H
	ORG $+2
$SG8144	DB	'unknown compression method', 00H
	ORG $+1
$SG8147	DB	'invalid window size', 00H
$SG8152	DB	'incorrect header check', 00H
	ORG $+1
$SG8168	DB	'need dictionary', 00H
$SG8188	DB	'incorrect data check', 00H
_DATA	ENDS
PUBLIC	_FT_Stream_OpenGzip
PUBLIC	_FT_Gzip_Uncompress
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_qalloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Skip:PROC
EXTRN	_FT_Stream_Pos:PROC
EXTRN	_FT_Stream_Read:PROC
EXTRN	_FT_Stream_ReadChar:PROC
EXTRN	_FT_Stream_ReadULong:PROC
EXTRN	_FT_Stream_ReadUShortLE:PROC
EXTRN	_FT_Throw:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -20						; size = 4
_old_pos$ = -16						; size = 4
_error$ = -8						; size = 4
_stream$ = 8						; size = 4
_ft_gzip_get_uncompressed_size PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 579
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 582
	mov	DWORD PTR _result$[ebp], 0
; Line 585
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _old_pos$[ebp], ecx
; Line 586
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 4
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@ft_gzip_ge
; Line 588
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
; Line 589
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ft_gzip_ge
; Line 590
	mov	DWORD PTR _result$[ebp], 0
$LN1@ft_gzip_ge:
; Line 592
	mov	ecx, DWORD PTR _old_pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
$LN2@ft_gzip_ge:
; Line 595
	mov	eax, DWORD PTR _result$[ebp]
; Line 596
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ft_gzip_ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@ft_gzip_ge:
	DD	1
	DD	$LN6@ft_gzip_ge
$LN6@ft_gzip_ge:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@ft_gzip_ge
$LN5@ft_gzip_ge:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_gzip_get_uncompressed_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_zip$ = -4						; size = 4
_stream$ = 8						; size = 4
_pos$ = 12						; size = 4
_buffer$ = 16						; size = 4
_count$ = 20						; size = 4
_ft_gzip_stream_io PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 569
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 570
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _zip$[ebp], ecx
; Line 573
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _zip$[ebp]
	push	edx
	call	_ft_gzip_file_io
	add	esp, 16					; 00000010H
; Line 574
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_gzip_stream_io ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_zip$ = -4						; size = 4
_stream$ = 8						; size = 4
_ft_gzip_stream_close PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 547
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 548
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _zip$[ebp], ecx
; Line 549
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _memory$[ebp], eax
; Line 552
	cmp	DWORD PTR _zip$[ebp], 0
	je	SHORT $LN5@ft_gzip_st
; Line 555
	mov	ecx, DWORD PTR _zip$[ebp]
	push	ecx
	call	_ft_gzip_file_done
	add	esp, 4
$LN3@ft_gzip_st:
; Line 557
	mov	edx, DWORD PTR _zip$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _zip$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@ft_gzip_st
; Line 559
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN5@ft_gzip_st:
; Line 561
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_gzip_stream_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_delta$1 = -12						; size = 4
_error$ = -8						; size = 4
_result$ = -4						; size = 4
_zip$ = 8						; size = 4
_pos$ = 12						; size = 4
_buffer$ = 16						; size = 4
_count$ = 20						; size = 4
_ft_gzip_file_io PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 483
	mov	DWORD PTR _result$[ebp], 0
; Line 489
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax+8264]
	jae	SHORT $LN10@ft_gzip_fi
; Line 491
	mov	edx, DWORD PTR _zip$[ebp]
	push	edx
	call	_ft_gzip_file_reset
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 492
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@ft_gzip_fi
; Line 493
	jmp	$Exit$13
$LN10@ft_gzip_fi:
; Line 497
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax+8264]
	jbe	SHORT $LN8@ft_gzip_fi
; Line 499
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, DWORD PTR [edx+8264]
	push	eax
	mov	ecx, DWORD PTR _zip$[ebp]
	push	ecx
	call	_ft_gzip_file_skip_output
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 500
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@ft_gzip_fi
; Line 501
	jmp	$Exit$13
$LN8@ft_gzip_fi:
; Line 504
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN5@ft_gzip_fi
; Line 505
	jmp	$Exit$13
$LN5@ft_gzip_fi:
; Line 513
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR [edx+8272]
	sub	ecx, DWORD PTR [eax+8268]
	mov	DWORD PTR _delta$1[ebp], ecx
; Line 514
	mov	edx, DWORD PTR _delta$1[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jb	SHORT $LN3@ft_gzip_fi
; Line 515
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _delta$1[ebp], eax
$LN3@ft_gzip_fi:
; Line 517
	mov	ecx, DWORD PTR _delta$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+8268]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 518
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, DWORD PTR _delta$1[ebp]
	mov	DWORD PTR _buffer$[ebp], edx
; Line 519
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, DWORD PTR _delta$1[ebp]
	mov	DWORD PTR _result$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR [ecx+8268]
	add	edx, DWORD PTR _delta$1[ebp]
	mov	eax, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [eax+8268], edx
; Line 521
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR [ecx+8264]
	add	edx, DWORD PTR _delta$1[ebp]
	mov	eax, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [eax+8264], edx
; Line 523
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, DWORD PTR _delta$1[ebp]
	mov	DWORD PTR _count$[ebp], ecx
; Line 524
	jne	SHORT $LN2@ft_gzip_fi
; Line 525
	jmp	SHORT $Exit$13
$LN2@ft_gzip_fi:
; Line 527
	mov	edx, DWORD PTR _zip$[ebp]
	push	edx
	call	_ft_gzip_file_fill_output
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 528
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ft_gzip_fi
; Line 529
	jmp	SHORT $Exit$13
$LN1@ft_gzip_fi:
; Line 530
	jmp	$LN5@ft_gzip_fi
$Exit$13:
; Line 533
	mov	eax, DWORD PTR _result$[ebp]
; Line 534
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_gzip_file_io ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_delta$ = -8						; size = 4
_error$ = -4						; size = 4
_zip$ = 8						; size = 4
_count$ = 12						; size = 4
_ft_gzip_file_skip_output PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 450
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 451
	mov	DWORD PTR _error$[ebp], 0
$LN5@ft_gzip_fi:
; Line 457
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR [eax+8272]
	sub	edx, DWORD PTR [ecx+8268]
	mov	DWORD PTR _delta$[ebp], edx
; Line 458
	mov	eax, DWORD PTR _delta$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jb	SHORT $LN3@ft_gzip_fi
; Line 459
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _delta$[ebp], ecx
$LN3@ft_gzip_fi:
; Line 461
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+8268]
	add	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+8268], eax
; Line 462
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+8264]
	add	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+8264], eax
; Line 464
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _count$[ebp], edx
; Line 465
	jne	SHORT $LN2@ft_gzip_fi
; Line 466
	jmp	SHORT $LN4@ft_gzip_fi
$LN2@ft_gzip_fi:
; Line 468
	mov	eax, DWORD PTR _zip$[ebp]
	push	eax
	call	_ft_gzip_file_fill_output
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 469
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ft_gzip_fi
; Line 470
	jmp	SHORT $LN4@ft_gzip_fi
$LN1@ft_gzip_fi:
; Line 471
	jmp	SHORT $LN5@ft_gzip_fi
$LN4@ft_gzip_fi:
; Line 473
	mov	eax, DWORD PTR _error$[ebp]
; Line 474
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_gzip_file_skip_output ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_err$1 = -12						; size = 4
_error$ = -8						; size = 4
_zstream$ = -4						; size = 4
_zip$ = 8						; size = 4
_ft_gzip_file_fill_output PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 405
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 406
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _zstream$[ebp], eax
; Line 407
	mov	DWORD PTR _error$[ebp], 0
; Line 410
	mov	ecx, DWORD PTR _zip$[ebp]
	add	ecx, 4168				; 00001048H
	mov	edx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [edx+8268], ecx
; Line 411
	mov	eax, DWORD PTR _zstream$[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR [ecx+8268]
	mov	DWORD PTR [eax+12], edx
; Line 412
	mov	eax, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [eax+16], 4096		; 00001000H
$LN8@ft_gzip_fi:
; Line 414
	mov	ecx, DWORD PTR _zstream$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jbe	$LN7@ft_gzip_fi
; Line 419
	mov	edx, DWORD PTR _zstream$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN6@ft_gzip_fi
; Line 421
	mov	eax, DWORD PTR _zip$[ebp]
	push	eax
	call	_ft_gzip_file_fill_input
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 422
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@ft_gzip_fi
; Line 423
	jmp	SHORT $LN7@ft_gzip_fi
$LN6@ft_gzip_fi:
; Line 426
	push	0
	mov	ecx, DWORD PTR _zstream$[ebp]
	push	ecx
	call	_inflate
	add	esp, 8
	mov	DWORD PTR _err$1[ebp], eax
; Line 428
	cmp	DWORD PTR _err$1[ebp], 1
	jne	SHORT $LN4@ft_gzip_fi
; Line 430
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR _zstream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+8272], ecx
; Line 431
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR [edx+8272]
	cmp	ecx, DWORD PTR [eax+8268]
	jne	SHORT $LN3@ft_gzip_fi
; Line 432
	push	OFFSET $SG8378
	push	432					; 000001b0H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	DWORD PTR _error$[ebp], eax
$LN3@ft_gzip_fi:
; Line 433
	jmp	SHORT $LN7@ft_gzip_fi
	jmp	SHORT $LN2@ft_gzip_fi
$LN4@ft_gzip_fi:
; Line 435
	cmp	DWORD PTR _err$1[ebp], 0
	je	SHORT $LN2@ft_gzip_fi
; Line 437
	push	OFFSET $SG8381
	push	437					; 000001b5H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	DWORD PTR _error$[ebp], eax
; Line 438
	jmp	SHORT $LN7@ft_gzip_fi
$LN2@ft_gzip_fi:
; Line 440
	jmp	$LN8@ft_gzip_fi
$LN7@ft_gzip_fi:
; Line 442
	mov	eax, DWORD PTR _error$[ebp]
; Line 443
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_gzip_file_fill_output ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -12						; size = 4
_stream$ = -8						; size = 4
_zstream$ = -4						; size = 4
_zip$ = 8						; size = 4
_ft_gzip_file_fill_input PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 370
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 371
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _zstream$[ebp], eax
; Line 372
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _stream$[ebp], edx
; Line 376
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN5@ft_gzip_fi
; Line 379
	mov	esi, esp
	push	4096					; 00001000H
	mov	ecx, DWORD PTR _zip$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _size$[ebp], eax
; Line 380
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN4@ft_gzip_fi
; Line 381
	push	OFFSET $SG8359
	push	381					; 0000017dH
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	jmp	$LN6@ft_gzip_fi
$LN4@ft_gzip_fi:
; Line 383
	jmp	SHORT $LN3@ft_gzip_fi
$LN5@ft_gzip_fi:
; Line 385
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _size$[ebp], eax
; Line 386
	cmp	DWORD PTR _size$[ebp], 4096		; 00001000H
	jbe	SHORT $LN2@ft_gzip_fi
; Line 387
	mov	DWORD PTR _size$[ebp], 4096		; 00001000H
$LN2@ft_gzip_fi:
; Line 389
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN1@ft_gzip_fi
; Line 390
	push	OFFSET $SG8363
	push	390					; 00000186H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	jmp	SHORT $LN6@ft_gzip_fi
$LN1@ft_gzip_fi:
; Line 392
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _zip$[ebp]
	add	edx, 72					; 00000048H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@ft_gzip_fi:
; Line 394
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 396
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 72					; 00000048H
	mov	ecx, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 397
	mov	edx, DWORD PTR _zstream$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 399
	xor	eax, eax
$LN6@ft_gzip_fi:
; Line 400
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_gzip_file_fill_input ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_zstream$1 = -12					; size = 4
_error$ = -8						; size = 4
_stream$ = -4						; size = 4
_zip$ = 8						; size = 4
_ft_gzip_file_reset PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 342
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 343
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 347
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ft_gzip_fi
; Line 349
	mov	edx, DWORD PTR _zip$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _zstream$1[ebp], edx
; Line 352
	mov	eax, DWORD PTR _zstream$1[ebp]
	push	eax
	call	_inflateReset
	add	esp, 4
; Line 354
	mov	ecx, DWORD PTR _zstream$1[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 355
	mov	edx, DWORD PTR _zip$[ebp]
	add	edx, 72					; 00000048H
	mov	eax, DWORD PTR _zstream$1[ebp]
	mov	DWORD PTR [eax], edx
; Line 356
	mov	ecx, DWORD PTR _zstream$1[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 357
	mov	edx, DWORD PTR _zip$[ebp]
	add	edx, 4168				; 00001048H
	mov	eax, DWORD PTR _zstream$1[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 359
	mov	ecx, DWORD PTR _zip$[ebp]
	add	ecx, 8264				; 00002048H
	mov	edx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [edx+8272], ecx
; Line 360
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR [ecx+8272]
	mov	DWORD PTR [eax+8268], edx
; Line 361
	mov	eax, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [eax+8264], 0
$LN1@ft_gzip_fi:
; Line 364
	mov	eax, DWORD PTR _error$[ebp]
; Line 365
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_gzip_file_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_zstream$ = -4						; size = 4
_zip$ = 8						; size = 4
_ft_gzip_file_done PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 319
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 320
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _zstream$[ebp], eax
; Line 323
	mov	ecx, DWORD PTR _zstream$[ebp]
	push	ecx
	call	_inflateEnd
	add	esp, 4
; Line 326
	mov	edx, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 327
	mov	eax, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 328
	mov	ecx, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [ecx+40], 0
; Line 329
	mov	edx, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [edx], 0
; Line 330
	mov	eax, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 331
	mov	ecx, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 332
	mov	edx, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 334
	mov	eax, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 335
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 336
	mov	edx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 337
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_gzip_file_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -8						; size = 4
_zstream$ = -4						; size = 4
_zip$ = 8						; size = 4
_stream$ = 12						; size = 4
_source$ = 16						; size = 4
_ft_gzip_file_init PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 276
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 277
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _zstream$[ebp], eax
; Line 278
	mov	DWORD PTR _error$[ebp], 0
; Line 281
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 282
	mov	eax, DWORD PTR _zip$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 283
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+8], ecx
; Line 285
	mov	edx, DWORD PTR _zip$[ebp]
	add	edx, 8264				; 00002048H
	mov	eax, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [eax+8272], edx
; Line 286
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	edx, DWORD PTR _zip$[ebp]
	mov	eax, DWORD PTR [edx+8272]
	mov	DWORD PTR [ecx+8268], eax
; Line 287
	mov	ecx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [ecx+8264], 0
; Line 291
	mov	edx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _stream$[ebp], edx
; Line 293
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_ft_gzip_check_header
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 294
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@ft_gzip_fi
; Line 295
	jmp	$Exit$6
$LN3@ft_gzip_fi:
; Line 297
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	edx, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [edx+68], eax
; Line 301
	mov	eax, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _ft_gzip_alloc
; Line 302
	mov	ecx, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [ecx+36], OFFSET _ft_gzip_free
; Line 303
	mov	edx, DWORD PTR _zstream$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+40], ecx
; Line 305
	mov	edx, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 306
	mov	eax, DWORD PTR _zip$[ebp]
	add	eax, 4168				; 00001048H
	mov	ecx, DWORD PTR _zstream$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 309
	push	56					; 00000038H
	push	OFFSET $SG8326
	push	-15					; fffffff1H
	mov	edx, DWORD PTR _zstream$[ebp]
	push	edx
	call	_inflateInit2_
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN1@ft_gzip_fi
	mov	eax, DWORD PTR _zstream$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $Exit$6
$LN1@ft_gzip_fi:
; Line 310
	push	OFFSET $SG8327
	push	310					; 00000136H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$Exit$6:
; Line 313
	mov	eax, DWORD PTR _error$[ebp]
; Line 314
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_gzip_file_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$1 = -36						; size = 4
_c$2 = -32						; size = 4
_len$3 = -28						; size = 4
_head$ = -20						; size = 4
_error$ = -8						; size = 4
_stream$ = 8						; size = 4
_ft_gzip_check_header PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 200
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 206
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN18@ft_gzip_ch
	push	4
	lea	ecx, DWORD PTR _head$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@ft_gzip_ch
$LN18@ft_gzip_ch:
; Line 207
	jmp	$Exit$26
$LN19@ft_gzip_ch:
; Line 214
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR _head$[ebp+ecx]
	cmp	edx, 31					; 0000001fH
	jne	SHORT $LN16@ft_gzip_ch
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR _head$[ebp+eax]
	cmp	ecx, 139				; 0000008bH
	jne	SHORT $LN16@ft_gzip_ch
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR _head$[ebp+edx]
	cmp	eax, 8
	jne	SHORT $LN16@ft_gzip_ch
	mov	ecx, 1
	imul	edx, ecx, 3
	movzx	eax, BYTE PTR _head$[ebp+edx]
	and	eax, 224				; 000000e0H
	je	SHORT $LN17@ft_gzip_ch
$LN16@ft_gzip_ch:
; Line 216
	push	OFFSET $SG8280
	push	216					; 000000d8H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 217
	jmp	$Exit$26
$LN17@ft_gzip_ch:
; Line 221
	push	6
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 224
	mov	edx, 1
	imul	eax, edx, 3
	movzx	ecx, BYTE PTR _head$[ebp+eax]
	and	ecx, 4
	je	SHORT $LN15@ft_gzip_ch
; Line 230
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShortLE
	add	esp, 8
	movzx	ecx, ax
	mov	DWORD PTR _len$3[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN13@ft_gzip_ch
	mov	edx, DWORD PTR _len$3[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@ft_gzip_ch
$LN13@ft_gzip_ch:
; Line 231
	jmp	$Exit$26
$LN15@ft_gzip_ch:
; Line 235
	mov	ecx, 1
	imul	edx, ecx, 3
	movzx	eax, BYTE PTR _head$[ebp+edx]
	and	eax, 8
	je	SHORT $LN12@ft_gzip_ch
$LN11@ft_gzip_ch:
; Line 241
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadChar
	add	esp, 8
	movzx	eax, al
	mov	DWORD PTR _c$2[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@ft_gzip_ch
; Line 242
	jmp	SHORT $Exit$26
$LN9@ft_gzip_ch:
; Line 244
	cmp	DWORD PTR _c$2[ebp], 0
	jne	SHORT $LN8@ft_gzip_ch
; Line 245
	jmp	SHORT $LN12@ft_gzip_ch
$LN8@ft_gzip_ch:
; Line 246
	jmp	SHORT $LN11@ft_gzip_ch
$LN12@ft_gzip_ch:
; Line 249
	mov	ecx, 1
	imul	edx, ecx, 3
	movzx	eax, BYTE PTR _head$[ebp+edx]
	and	eax, 16					; 00000010H
	je	SHORT $LN7@ft_gzip_ch
$LN6@ft_gzip_ch:
; Line 255
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadChar
	add	esp, 8
	movzx	eax, al
	mov	DWORD PTR _c$1[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@ft_gzip_ch
; Line 256
	jmp	SHORT $Exit$26
$LN4@ft_gzip_ch:
; Line 258
	cmp	DWORD PTR _c$1[ebp], 0
	jne	SHORT $LN3@ft_gzip_ch
; Line 259
	jmp	SHORT $LN7@ft_gzip_ch
$LN3@ft_gzip_ch:
; Line 260
	jmp	SHORT $LN6@ft_gzip_ch
$LN7@ft_gzip_ch:
; Line 263
	mov	ecx, 1
	imul	edx, ecx, 3
	movzx	eax, BYTE PTR _head$[ebp+edx]
	and	eax, 2
	je	SHORT $Exit$26
; Line 264
	push	2
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$Exit$26:
; Line 268
	mov	eax, DWORD PTR _error$[ebp]
; Line 269
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@ft_gzip_ch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@ft_gzip_ch:
	DD	2
	DD	$LN24@ft_gzip_ch
$LN24@ft_gzip_ch:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN22@ft_gzip_ch
	DD	-20					; ffffffecH
	DD	4
	DD	$LN23@ft_gzip_ch
$LN23@ft_gzip_ch:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN22@ft_gzip_ch:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_gzip_check_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = 8						; size = 4
_address$ = 12						; size = 4
_ft_gzip_free PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 135
	push	ebp
	mov	ebp, esp
$LN3@ft_gzip_fr:
; Line 136
	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _address$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@ft_gzip_fr
; Line 137
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_gzip_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -20						; size = 4
_error$ = -12						; size = 4
_sz$ = -4						; size = 4
_memory$ = 8						; size = 4
_items$ = 12						; size = 4
_size$ = 16						; size = 4
_ft_gzip_alloc PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 122
	mov	eax, DWORD PTR _size$[ebp]
	imul	eax, DWORD PTR _items$[ebp]
	mov	DWORD PTR _sz$[ebp], eax
; Line 124
	mov	DWORD PTR _p$[ebp], 0
; Line 127
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sz$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax
; Line 128
	mov	eax, DWORD PTR _p$[ebp]
; Line 129
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ft_gzip_al
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@ft_gzip_al:
	DD	1
	DD	$LN4@ft_gzip_al
$LN4@ft_gzip_al:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@ft_gzip_al
$LN3@ft_gzip_al:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_gzip_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv317 = -316						; size = 4
tv246 = -312						; size = 4
tv199 = -308						; size = 4
tv191 = -304						; size = 4
tv166 = -300						; size = 4
tv165 = -296						; size = 4
_z$ = -292						; size = 4
_y$ = -288						; size = 4
_xp$ = -284						; size = 4
_x$ = -276						; size = 64
_w$ = -208						; size = 4
_u$ = -200						; size = 60
_r$ = -132						; size = 8
_q$ = -120						; size = 4
_p$ = -116						; size = 4
_mask$ = -112						; size = 4
_l$ = -108						; size = 4
_k$ = -104						; size = 4
_j$ = -100						; size = 4
_i$ = -96						; size = 4
_h$ = -92						; size = 4
_g$ = -88						; size = 4
_f$ = -84						; size = 4
_c$ = -76						; size = 64
_a$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_b$ = 8							; size = 4
_n$ = 12						; size = 4
_s$ = 16						; size = 4
_d$ = 20						; size = 4
_e$ = 24						; size = 4
_t$ = 28						; size = 4
_m$ = 32						; size = 4
_hp$ = 36						; size = 4
_hn$ = 40						; size = 4
_v$ = 44						; size = 4
_huft_build PROC
; File d:\mozilla\modules\freetype2\src\gzip\inftrees.c
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 135
	mov	DWORD PTR _r$[ebp+4], 0
; Line 138
	lea	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 142
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 143
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN52@huft_build:
; Line 145
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _c$[ebp+eax*4]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _c$[ebp+eax*4], ecx
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 146
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jne	SHORT $LN52@huft_build
; Line 147
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _c$[ebp+ecx]
	cmp	edx, DWORD PTR _n$[ebp]
	jne	SHORT $LN49@huft_build
; Line 149
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax], 0
; Line 150
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 151
	xor	eax, eax
	jmp	$LN53@huft_build
$LN49@huft_build:
; Line 156
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _l$[ebp], eax
; Line 157
	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN48@huft_build
$LN47@huft_build:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN48@huft_build:
	cmp	DWORD PTR _j$[ebp], 15			; 0000000fH
	ja	SHORT $LN46@huft_build
; Line 158
	mov	edx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _c$[ebp+edx*4], 0
	je	SHORT $LN45@huft_build
; Line 159
	jmp	SHORT $LN46@huft_build
$LN45@huft_build:
; Line 160
	jmp	SHORT $LN47@huft_build
$LN46@huft_build:
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _k$[ebp], eax
; Line 161
	mov	ecx, DWORD PTR _l$[ebp]
	cmp	ecx, DWORD PTR _j$[ebp]
	jae	SHORT $LN44@huft_build
; Line 162
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _l$[ebp], edx
$LN44@huft_build:
; Line 163
	mov	DWORD PTR _i$[ebp], 15			; 0000000fH
	jmp	SHORT $LN43@huft_build
$LN42@huft_build:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN43@huft_build:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN41@huft_build
; Line 164
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _c$[ebp+ecx*4], 0
	je	SHORT $LN40@huft_build
; Line 165
	jmp	SHORT $LN41@huft_build
$LN40@huft_build:
; Line 166
	jmp	SHORT $LN42@huft_build
$LN41@huft_build:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _g$[ebp], edx
; Line 167
	mov	eax, DWORD PTR _l$[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	jbe	SHORT $LN39@huft_build
; Line 168
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _l$[ebp], ecx
$LN39@huft_build:
; Line 169
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR [edx], eax
; Line 173
	mov	edx, 1
	mov	ecx, DWORD PTR _j$[ebp]
	shl	edx, cl
	mov	DWORD PTR _y$[ebp], edx
	jmp	SHORT $LN38@huft_build
$LN37@huft_build:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _y$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
$LN38@huft_build:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _i$[ebp]
	jae	SHORT $LN36@huft_build
; Line 174
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, DWORD PTR _c$[ebp+eax*4]
	mov	DWORD PTR _y$[ebp], ecx
	jns	SHORT $LN35@huft_build
; Line 175
	mov	eax, -3					; fffffffdH
	jmp	$LN53@huft_build
$LN35@huft_build:
; Line 176
	jmp	SHORT $LN37@huft_build
$LN36@huft_build:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _c$[ebp+edx*4]
	mov	DWORD PTR _y$[ebp], eax
	jns	SHORT $LN34@huft_build
; Line 177
	mov	eax, -3					; fffffffdH
	jmp	$LN53@huft_build
$LN34@huft_build:
; Line 178
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _c$[ebp+ecx*4]
	add	edx, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _c$[ebp+eax*4], edx
; Line 182
	mov	DWORD PTR _j$[ebp], 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _x$[ebp+ecx], edx
; Line 183
	lea	eax, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR _p$[ebp], eax
	lea	ecx, DWORD PTR _x$[ebp+8]
	mov	DWORD PTR _xp$[ebp], ecx
$LN33@huft_build:
; Line 184
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	je	SHORT $LN32@huft_build
; Line 185
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _j$[ebp], ecx
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _xp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _xp$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 186
	jmp	SHORT $LN33@huft_build
$LN32@huft_build:
; Line 190
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	mov	DWORD PTR _i$[ebp], 0
$LN31@huft_build:
; Line 192
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR tv165[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	cmp	DWORD PTR tv165[ebp], 0
	je	SHORT $LN55@huft_build
	mov	DWORD PTR tv166[ebp], 1
	jmp	SHORT $LN56@huft_build
$LN55@huft_build:
	mov	DWORD PTR tv166[ebp], 0
$LN56@huft_build:
	cmp	DWORD PTR tv166[ebp], 0
	je	SHORT $LN30@huft_build
; Line 193
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _x$[ebp+edx*4]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _x$[ebp+eax*4]
	add	ecx, 1
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _x$[ebp+edx*4], ecx
$LN30@huft_build:
; Line 194
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _n$[ebp]
	jb	SHORT $LN31@huft_build
; Line 195
	mov	edx, DWORD PTR _g$[ebp]
	mov	eax, DWORD PTR _x$[ebp+edx*4]
	mov	DWORD PTR _n$[ebp], eax
; Line 199
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _x$[ebp+edx], eax
; Line 200
	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 201
	mov	DWORD PTR _h$[ebp], -1
; Line 202
	mov	edx, DWORD PTR _l$[ebp]
	neg	edx
	mov	DWORD PTR _w$[ebp], edx
; Line 203
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _u$[ebp+ecx], 0
; Line 204
	mov	DWORD PTR _q$[ebp], 0
; Line 205
	mov	DWORD PTR _z$[ebp], 0
; Line 208
	jmp	SHORT $LN27@huft_build
$LN26@huft_build:
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
$LN27@huft_build:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _g$[ebp]
	jg	$LN25@huft_build
; Line 210
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _c$[ebp+ecx*4]
	mov	DWORD PTR _a$[ebp], edx
$LN24@huft_build:
; Line 211
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv191[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _a$[ebp], ecx
	cmp	DWORD PTR tv191[ebp], 0
	je	$LN23@huft_build
$LN22@huft_build:
; Line 215
	mov	edx, DWORD PTR _w$[ebp]
	add	edx, DWORD PTR _l$[ebp]
	cmp	DWORD PTR _k$[ebp], edx
	jle	$LN21@huft_build
; Line 217
	mov	eax, DWORD PTR _h$[ebp]
	add	eax, 1
	mov	DWORD PTR _h$[ebp], eax
; Line 218
	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, DWORD PTR _l$[ebp]
	mov	DWORD PTR _w$[ebp], ecx
; Line 221
	mov	edx, DWORD PTR _g$[ebp]
	sub	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _z$[ebp], edx
; Line 222
	mov	eax, DWORD PTR _z$[ebp]
	cmp	eax, DWORD PTR _l$[ebp]
	jbe	SHORT $LN57@huft_build
	mov	ecx, DWORD PTR _l$[ebp]
	mov	DWORD PTR tv199[ebp], ecx
	jmp	SHORT $LN58@huft_build
$LN57@huft_build:
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR tv199[ebp], edx
$LN58@huft_build:
	mov	eax, DWORD PTR tv199[ebp]
	mov	DWORD PTR _z$[ebp], eax
; Line 223
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _j$[ebp], ecx
	mov	edx, 1
	mov	ecx, DWORD PTR _j$[ebp]
	shl	edx, cl
	mov	DWORD PTR _f$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 1
	cmp	DWORD PTR _f$[ebp], eax
	jbe	SHORT $LN20@huft_build
; Line 225
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _f$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _f$[ebp], edx
; Line 226
	mov	eax, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR _c$[ebp+eax*4]
	mov	DWORD PTR _xp$[ebp], ecx
; Line 227
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _z$[ebp]
	jae	SHORT $LN20@huft_build
$LN18@huft_build:
; Line 228
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _z$[ebp]
	jae	SHORT $LN20@huft_build
; Line 230
	mov	edx, DWORD PTR _f$[ebp]
	shl	edx, 1
	mov	DWORD PTR _f$[ebp], edx
	mov	eax, DWORD PTR _xp$[ebp]
	add	eax, 4
	mov	DWORD PTR _xp$[ebp], eax
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	cmp	edx, DWORD PTR [ecx]
	ja	SHORT $LN16@huft_build
; Line 231
	jmp	SHORT $LN20@huft_build
$LN16@huft_build:
; Line 232
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _f$[ebp], ecx
; Line 233
	jmp	SHORT $LN18@huft_build
$LN20@huft_build:
; Line 235
	mov	edx, 1
	mov	ecx, DWORD PTR _j$[ebp]
	shl	edx, cl
	mov	DWORD PTR _z$[ebp], edx
; Line 238
	mov	eax, DWORD PTR _hn$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _z$[ebp]
	cmp	ecx, 1440				; 000005a0H
	jbe	SHORT $LN15@huft_build
; Line 239
	mov	eax, -3					; fffffffdH
	jmp	$LN53@huft_build
$LN15@huft_build:
; Line 240
	mov	edx, DWORD PTR _hn$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _hp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _q$[ebp], edx
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR _u$[ebp+eax*4], ecx
; Line 241
	mov	edx, DWORD PTR _hn$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _hn$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 244
	cmp	DWORD PTR _h$[ebp], 0
	je	SHORT $LN14@huft_build
; Line 246
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _x$[ebp+edx*4], eax
; Line 247
	mov	cl, BYTE PTR _l$[ebp]
	mov	BYTE PTR _r$[ebp+1], cl
; Line 248
	mov	dl, BYTE PTR _j$[ebp]
	mov	BYTE PTR _r$[ebp], dl
; Line 249
	mov	ecx, DWORD PTR _w$[ebp]
	sub	ecx, DWORD PTR _l$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	shr	eax, cl
	mov	DWORD PTR _j$[ebp], eax
; Line 250
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	sub	edx, DWORD PTR _u$[ebp+ecx*4-4]
	sar	edx, 3
	sub	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _r$[ebp+4], edx
; Line 251
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _u$[ebp+eax*4-4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx+edx*8], eax
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+edx*8+4], eax
; Line 253
	jmp	SHORT $LN13@huft_build
$LN14@huft_build:
; Line 254
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx], edx
$LN13@huft_build:
; Line 255
	jmp	$LN22@huft_build
$LN21@huft_build:
; Line 258
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, DWORD PTR _w$[ebp]
	mov	BYTE PTR _r$[ebp+1], al
; Line 259
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	cmp	DWORD PTR _p$[ebp], eax
	jb	SHORT $LN12@huft_build
; Line 260
	mov	BYTE PTR _r$[ebp], 192			; 000000c0H
	jmp	SHORT $LN11@huft_build
$LN12@huft_build:
; Line 261
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _s$[ebp]
	jae	SHORT $LN10@huft_build
; Line 263
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 256			; 00000100H
	jae	SHORT $LN59@huft_build
	mov	DWORD PTR tv246[ebp], 0
	jmp	SHORT $LN60@huft_build
$LN59@huft_build:
	mov	DWORD PTR tv246[ebp], 96		; 00000060H
$LN60@huft_build:
	mov	cl, BYTE PTR tv246[ebp]
	mov	BYTE PTR _r$[ebp], cl
; Line 264
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _r$[ebp+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 266
	jmp	SHORT $LN11@huft_build
$LN10@huft_build:
; Line 268
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, 80					; 00000050H
	mov	BYTE PTR _r$[ebp], dl
; Line 269
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _r$[ebp+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
$LN11@huft_build:
; Line 273
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, DWORD PTR _w$[ebp]
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _f$[ebp], edx
; Line 274
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	shr	eax, cl
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN8@huft_build
$LN7@huft_build:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _j$[ebp], ecx
$LN8@huft_build:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _z$[ebp]
	jae	SHORT $LN6@huft_build
; Line 275
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx+eax*8], edx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+eax*8+4], edx
	jmp	SHORT $LN7@huft_build
$LN6@huft_build:
; Line 278
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN5@huft_build
$LN4@huft_build:
	mov	ecx, DWORD PTR _j$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN5@huft_build:
	mov	edx, DWORD PTR _i$[ebp]
	and	edx, DWORD PTR _j$[ebp]
	je	SHORT $LN3@huft_build
; Line 279
	mov	eax, DWORD PTR _i$[ebp]
	xor	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN4@huft_build
$LN3@huft_build:
; Line 280
	mov	ecx, DWORD PTR _i$[ebp]
	xor	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
; Line 283
	mov	edx, 1
	mov	ecx, DWORD PTR _w$[ebp]
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR _mask$[ebp], edx
$LN2@huft_build:
; Line 284
	mov	eax, DWORD PTR _i$[ebp]
	and	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	cmp	eax, DWORD PTR _x$[ebp+ecx*4]
	je	SHORT $LN1@huft_build
; Line 286
	mov	edx, DWORD PTR _h$[ebp]
	sub	edx, 1
	mov	DWORD PTR _h$[ebp], edx
; Line 287
	mov	eax, DWORD PTR _w$[ebp]
	sub	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR _w$[ebp], eax
; Line 288
	mov	edx, 1
	mov	ecx, DWORD PTR _w$[ebp]
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR _mask$[ebp], edx
; Line 289
	jmp	SHORT $LN2@huft_build
$LN1@huft_build:
; Line 290
	jmp	$LN24@huft_build
$LN23@huft_build:
; Line 291
	jmp	$LN26@huft_build
$LN25@huft_build:
; Line 295
	cmp	DWORD PTR _y$[ebp], 0
	je	SHORT $LN61@huft_build
	cmp	DWORD PTR _g$[ebp], 1
	je	SHORT $LN61@huft_build
	mov	DWORD PTR tv317[ebp], -5		; fffffffbH
	jmp	SHORT $LN62@huft_build
$LN61@huft_build:
	mov	DWORD PTR tv317[ebp], 0
$LN62@huft_build:
	mov	eax, DWORD PTR tv317[ebp]
$LN53@huft_build:
; Line 296
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN68@huft_build
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN68@huft_build:
	DD	4
	DD	$LN67@huft_build
$LN67@huft_build:
	DD	-76					; ffffffb4H
	DD	64					; 00000040H
	DD	$LN63@huft_build
	DD	-132					; ffffff7cH
	DD	8
	DD	$LN64@huft_build
	DD	-200					; ffffff38H
	DD	60					; 0000003cH
	DD	$LN65@huft_build
	DD	-276					; fffffeecH
	DD	64					; 00000040H
	DD	$LN66@huft_build
$LN66@huft_build:
	DB	120					; 00000078H
	DB	0
$LN65@huft_build:
	DB	117					; 00000075H
	DB	0
$LN64@huft_build:
	DB	114					; 00000072H
	DB	0
$LN63@huft_build:
	DB	99					; 00000063H
	DB	0
_huft_build ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv156 = -24						; size = 4
tv88 = -20						; size = 4
tv70 = -16						; size = 4
_q$ = -12						; size = 4
_p$ = -8						; size = 4
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_z$ = 12						; size = 4
_r$ = 16						; size = 4
_inflate_flush PROC
; File d:\mozilla\modules\freetype2\src\gzip\infutil.c
; Line 26
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 32
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _p$[ebp], ecx
; Line 33
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _q$[ebp], eax
; Line 36
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	cmp	edx, DWORD PTR [ecx+52]
	ja	SHORT $LN11@inflate_fl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR tv70[ebp], ecx
	jmp	SHORT $LN12@inflate_fl
$LN11@inflate_fl:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR tv70[ebp], eax
$LN12@inflate_fl:
	mov	ecx, DWORD PTR tv70[ebp]
	sub	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR _n$[ebp], ecx
; Line 37
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN8@inflate_fl
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _n$[ebp], edx
$LN8@inflate_fl:
; Line 38
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN7@inflate_fl
	cmp	DWORD PTR _r$[ebp], -5			; fffffffbH
	jne	SHORT $LN7@inflate_fl
	mov	DWORD PTR _r$[ebp], 0
$LN7@inflate_fl:
; Line 41
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 42
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 45
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN6@inflate_fl
; Line 46
	mov	esi, esp
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv88[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR [ecx+60], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR [eax+48], ecx
$LN6@inflate_fl:
; Line 49
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 50
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 51
	mov	eax, DWORD PTR _q$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _q$[ebp], eax
; Line 54
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jne	$LN5@inflate_fl
; Line 57
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _q$[ebp], ecx
; Line 58
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	cmp	ecx, DWORD PTR [eax+44]
	jne	SHORT $LN4@inflate_fl
; Line 59
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+52], ecx
$LN4@inflate_fl:
; Line 62
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+52]
	sub	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR _n$[ebp], eax
; Line 63
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jbe	SHORT $LN3@inflate_fl
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _n$[ebp], ecx
$LN3@inflate_fl:
; Line 64
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN2@inflate_fl
	cmp	DWORD PTR _r$[ebp], -5			; fffffffbH
	jne	SHORT $LN2@inflate_fl
	mov	DWORD PTR _r$[ebp], 0
$LN2@inflate_fl:
; Line 67
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 68
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 71
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN1@inflate_fl
; Line 72
	mov	esi, esp
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv156[ebp], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv156[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv156[ebp]
	mov	DWORD PTR [edx+48], eax
$LN1@inflate_fl:
; Line 75
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 76
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 77
	mov	edx, DWORD PTR _q$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _q$[ebp], edx
$LN5@inflate_fl:
; Line 81
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 82
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+48], eax
; Line 85
	mov	eax, DWORD PTR _r$[ebp]
; Line 86
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_inflate_flush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = 8							; size = 4
_z$ = 12						; size = 4
_inflate_codes_free PROC
; File d:\mozilla\modules\freetype2\src\gzip\infcodes.c
; Line 247
	push	ebp
	mov	ebp, esp
	push	esi
; Line 248
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 250
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_inflate_codes_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv489 = -80						; size = 4
tv452 = -76						; size = 4
tv438 = -72						; size = 4
tv423 = -68						; size = 4
tv382 = -64						; size = 4
tv368 = -60						; size = 4
tv353 = -56						; size = 4
tv80 = -52						; size = 4
tv77 = -48						; size = 4
_c$ = -44						; size = 4
_f$ = -40						; size = 4
_m$ = -36						; size = 4
_q$ = -32						; size = 4
_n$ = -28						; size = 4
_p$ = -24						; size = 4
_k$ = -20						; size = 4
_b$ = -16						; size = 4
_e$ = -12						; size = 4
_t$ = -8						; size = 4
_j$ = -4						; size = 4
_s$ = 8							; size = 4
_z$ = 12						; size = 4
_r$ = 16						; size = 4
_inflate_codes PROC
; File d:\mozilla\modules\freetype2\src\gzip\infcodes.c
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 95
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _c$[ebp], ecx
; Line 98
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _n$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _k$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _q$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jae	SHORT $LN57@inflate_co
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+48]
	sub	eax, DWORD PTR _q$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN58@inflate_co
$LN57@inflate_co:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv77[ebp], edx
$LN58@inflate_co:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR _m$[ebp], eax
$LN54@inflate_co:
; Line 101
	mov	ecx, 1
	test	ecx, ecx
	je	$LN55@inflate_co
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv80[ebp], eax
	cmp	DWORD PTR tv80[ebp], 9
	ja	$LN1@inflate_co
	mov	ecx, DWORD PTR tv80[ebp]
	jmp	DWORD PTR $LN73@inflate_co[ecx*4]
$LN50@inflate_co:
; Line 117
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 118
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+8], ecx
; Line 119
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx], 1
$LN49@inflate_co:
; Line 121
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _j$[ebp], ecx
$LN48@inflate_co:
; Line 122
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR _j$[ebp]
	jae	$LN47@inflate_co
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN46@inflate_co
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN45@inflate_co
$LN46@inflate_co:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN55@inflate_co
$LN45@inflate_co:
	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 8
	mov	DWORD PTR _k$[ebp], ecx
	jmp	$LN48@inflate_co
$LN47@inflate_co:
; Line 123
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _inflate_mask[edx*4]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _t$[ebp], eax
; Line 124
	mov	ecx, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [ecx+1]
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, cl
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _k$[ebp], edx
; Line 125
	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _e$[ebp], ecx
; Line 126
	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN44@inflate_co
; Line 128
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
; Line 132
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx], 6
; Line 133
	jmp	$LN51@inflate_co
$LN44@inflate_co:
; Line 135
	mov	eax, DWORD PTR _e$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN43@inflate_co
; Line 137
	mov	ecx, DWORD PTR _e$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 138
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 139
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax], 2
; Line 140
	jmp	$LN51@inflate_co
$LN43@inflate_co:
; Line 142
	mov	ecx, DWORD PTR _e$[ebp]
	and	ecx, 64					; 00000040H
	jne	SHORT $LN42@inflate_co
; Line 144
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 145
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _t$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 146
	jmp	$LN51@inflate_co
$LN42@inflate_co:
; Line 148
	mov	eax, DWORD PTR _e$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN41@inflate_co
; Line 151
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx], 7
; Line 152
	jmp	$LN51@inflate_co
$LN41@inflate_co:
; Line 154
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx], 9
; Line 155
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG7775
; Line 156
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
; Line 157
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN55@inflate_co
$LN40@inflate_co:
; Line 159
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _j$[ebp], ecx
$LN39@inflate_co:
; Line 160
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR _j$[ebp]
	jae	$LN38@inflate_co
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN37@inflate_co
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN36@inflate_co
$LN37@inflate_co:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN55@inflate_co
$LN36@inflate_co:
	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 8
	mov	DWORD PTR _k$[ebp], ecx
	jmp	$LN39@inflate_co
$LN38@inflate_co:
; Line 161
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _inflate_mask[edx*4]
	mov	ecx, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 162
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	shr	eax, cl
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _k$[ebp], ecx
; Line 163
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 164
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+8], ecx
; Line 166
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx], 3
$LN35@inflate_co:
; Line 168
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _j$[ebp], ecx
$LN34@inflate_co:
; Line 169
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR _j$[ebp]
	jae	$LN33@inflate_co
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN32@inflate_co
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN31@inflate_co
$LN32@inflate_co:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN55@inflate_co
$LN31@inflate_co:
	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 8
	mov	DWORD PTR _k$[ebp], ecx
	jmp	$LN34@inflate_co
$LN33@inflate_co:
; Line 170
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _inflate_mask[edx*4]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _t$[ebp], eax
; Line 171
	mov	ecx, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [ecx+1]
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, cl
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _k$[ebp], edx
; Line 172
	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _e$[ebp], ecx
; Line 173
	mov	edx, DWORD PTR _e$[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN30@inflate_co
; Line 175
	mov	eax, DWORD PTR _e$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 176
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+12], ecx
; Line 177
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx], 4
; Line 178
	jmp	$LN51@inflate_co
$LN30@inflate_co:
; Line 180
	mov	eax, DWORD PTR _e$[ebp]
	and	eax, 64					; 00000040H
	jne	SHORT $LN29@inflate_co
; Line 182
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 183
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _t$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 184
	jmp	$LN51@inflate_co
$LN29@inflate_co:
; Line 186
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx], 9
; Line 187
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG7796
; Line 188
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
; Line 189
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN55@inflate_co
$LN28@inflate_co:
; Line 191
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _j$[ebp], ecx
$LN27@inflate_co:
; Line 192
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR _j$[ebp]
	jae	$LN26@inflate_co
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN25@inflate_co
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN24@inflate_co
$LN25@inflate_co:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN55@inflate_co
$LN24@inflate_co:
	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 8
	mov	DWORD PTR _k$[ebp], ecx
	jmp	$LN27@inflate_co
$LN26@inflate_co:
; Line 193
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _inflate_mask[edx*4]
	mov	ecx, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 194
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	shr	eax, cl
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _k$[ebp], ecx
; Line 196
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx], 5
$LN23@inflate_co:
; Line 198
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	sub	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _f$[ebp], ecx
$LN22@inflate_co:
; Line 199
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _f$[ebp]
	cmp	eax, DWORD PTR [edx+40]
	jae	SHORT $LN20@inflate_co
; Line 200
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [edx+40]
	add	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _f$[ebp], eax
	jmp	SHORT $LN22@inflate_co
$LN20@inflate_co:
; Line 201
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	$LN19@inflate_co
; Line 203
	cmp	DWORD PTR _m$[ebp], 0
	jne	$LN18@inflate_co
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR [edx+44]
	jne	SHORT $LN17@inflate_co
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	cmp	eax, DWORD PTR [edx+40]
	je	SHORT $LN17@inflate_co
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _q$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jae	SHORT $LN59@inflate_co
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+48]
	sub	eax, DWORD PTR _q$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv353[ebp], eax
	jmp	SHORT $LN60@inflate_co
$LN59@inflate_co:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv353[ebp], edx
$LN60@inflate_co:
	mov	eax, DWORD PTR tv353[ebp]
	mov	DWORD PTR _m$[ebp], eax
$LN17@inflate_co:
	cmp	DWORD PTR _m$[ebp], 0
	jne	$LN18@inflate_co
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _q$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR [edx+48]
	jae	SHORT $LN61@inflate_co
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, DWORD PTR _q$[ebp]
	sub	edx, 1
	mov	DWORD PTR tv368[ebp], edx
	jmp	SHORT $LN62@inflate_co
$LN61@inflate_co:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv368[ebp], ecx
$LN62@inflate_co:
	mov	edx, DWORD PTR tv368[ebp]
	mov	DWORD PTR _m$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jne	SHORT $LN15@inflate_co
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	cmp	ecx, DWORD PTR [eax+40]
	je	SHORT $LN15@inflate_co
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _q$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jae	SHORT $LN63@inflate_co
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, DWORD PTR _q$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv382[ebp], ecx
	jmp	SHORT $LN64@inflate_co
$LN63@inflate_co:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv382[ebp], eax
$LN64@inflate_co:
	mov	ecx, DWORD PTR tv382[ebp]
	mov	DWORD PTR _m$[ebp], ecx
$LN15@inflate_co:
	cmp	DWORD PTR _m$[ebp], 0
	jne	SHORT $LN18@inflate_co
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _z$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN55@inflate_co
$LN18@inflate_co:
	mov	DWORD PTR _r$[ebp], 0
; Line 204
	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _q$[ebp]
	add	ecx, 1
	mov	DWORD PTR _q$[ebp], ecx
	mov	edx, DWORD PTR _f$[ebp]
	add	edx, 1
	mov	DWORD PTR _f$[ebp], edx
	mov	eax, DWORD PTR _m$[ebp]
	sub	eax, 1
	mov	DWORD PTR _m$[ebp], eax
; Line 205
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jne	SHORT $LN13@inflate_co
; Line 206
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _f$[ebp], ecx
$LN13@inflate_co:
; Line 207
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 208
	jmp	$LN20@inflate_co
$LN19@inflate_co:
; Line 209
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx], 0
; Line 210
	jmp	$LN51@inflate_co
$LN12@inflate_co:
; Line 212
	cmp	DWORD PTR _m$[ebp], 0
	jne	$LN11@inflate_co
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jne	SHORT $LN10@inflate_co
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	cmp	ecx, DWORD PTR [eax+40]
	je	SHORT $LN10@inflate_co
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _q$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jae	SHORT $LN65@inflate_co
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, DWORD PTR _q$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv423[ebp], ecx
	jmp	SHORT $LN66@inflate_co
$LN65@inflate_co:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv423[ebp], eax
$LN66@inflate_co:
	mov	ecx, DWORD PTR tv423[ebp]
	mov	DWORD PTR _m$[ebp], ecx
$LN10@inflate_co:
	cmp	DWORD PTR _m$[ebp], 0
	jne	$LN11@inflate_co
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _q$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jae	SHORT $LN67@inflate_co
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+48]
	sub	eax, DWORD PTR _q$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv438[ebp], eax
	jmp	SHORT $LN68@inflate_co
$LN67@inflate_co:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv438[ebp], edx
$LN68@inflate_co:
	mov	eax, DWORD PTR tv438[ebp]
	mov	DWORD PTR _m$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jne	SHORT $LN8@inflate_co
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+48]
	cmp	edx, DWORD PTR [ecx+40]
	je	SHORT $LN8@inflate_co
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _q$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR [edx+48]
	jae	SHORT $LN69@inflate_co
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, DWORD PTR _q$[ebp]
	sub	edx, 1
	mov	DWORD PTR tv452[ebp], edx
	jmp	SHORT $LN70@inflate_co
$LN69@inflate_co:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv452[ebp], ecx
$LN70@inflate_co:
	mov	edx, DWORD PTR tv452[ebp]
	mov	DWORD PTR _m$[ebp], edx
$LN8@inflate_co:
	cmp	DWORD PTR _m$[ebp], 0
	jne	SHORT $LN11@inflate_co
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN55@inflate_co
$LN11@inflate_co:
	mov	DWORD PTR _r$[ebp], 0
; Line 213
	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _q$[ebp]
	add	edx, 1
	mov	DWORD PTR _q$[ebp], edx
	mov	eax, DWORD PTR _m$[ebp]
	sub	eax, 1
	mov	DWORD PTR _m$[ebp], eax
; Line 214
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 215
	jmp	$LN51@inflate_co
$LN6@inflate_co:
; Line 217
	cmp	DWORD PTR _k$[ebp], 7
	jbe	SHORT $LN5@inflate_co
; Line 220
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 8
	mov	DWORD PTR _k$[ebp], edx
; Line 221
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 222
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN5@inflate_co:
; Line 224
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _q$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jae	SHORT $LN71@inflate_co
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+48]
	sub	eax, DWORD PTR _q$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv489[ebp], eax
	jmp	SHORT $LN72@inflate_co
$LN71@inflate_co:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv489[ebp], edx
$LN72@inflate_co:
	mov	eax, DWORD PTR tv489[ebp]
	mov	DWORD PTR _m$[ebp], eax
; Line 225
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	cmp	eax, DWORD PTR [edx+52]
	je	SHORT $LN4@inflate_co
; Line 226
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN55@inflate_co
$LN4@inflate_co:
; Line 227
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax], 8
$LN3@inflate_co:
; Line 229
	mov	DWORD PTR _r$[ebp], 1
; Line 230
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN55@inflate_co
$LN2@inflate_co:
; Line 232
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
; Line 233
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN55@inflate_co
$LN1@inflate_co:
; Line 235
	mov	DWORD PTR _r$[ebp], -2			; fffffffeH
; Line 236
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _z$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN55@inflate_co
$LN51@inflate_co:
; Line 237
	jmp	$LN54@inflate_co
$LN55@inflate_co:
; Line 241
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN73@inflate_co:
	DD	$LN50@inflate_co
	DD	$LN49@inflate_co
	DD	$LN40@inflate_co
	DD	$LN35@inflate_co
	DD	$LN28@inflate_co
	DD	$LN23@inflate_co
	DD	$LN12@inflate_co
	DD	$LN6@inflate_co
	DD	$LN3@inflate_co
	DD	$LN2@inflate_co
_inflate_codes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -4						; size = 4
_bl$ = 8						; size = 4
_bd$ = 12						; size = 4
_tl$ = 16						; size = 4
_td$ = 20						; size = 4
_z$ = 24						; size = 4
_inflate_codes_new PROC
; File d:\mozilla\modules\freetype2\src\gzip\infcodes.c
; Line 63
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 67
	mov	esi, esp
	push	28					; 0000001cH
	push	1
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _c$[ebp], eax
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN1@inflate_co
; Line 69
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 70
	mov	edx, DWORD PTR _c$[ebp]
	mov	al, BYTE PTR _bl$[ebp]
	mov	BYTE PTR [edx+16], al
; Line 71
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR _bd$[ebp]
	mov	BYTE PTR [ecx+17], dl
; Line 72
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _tl$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 73
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _td$[ebp]
	mov	DWORD PTR [edx+24], eax
$LN1@inflate_co:
; Line 76
	mov	eax, DWORD PTR _c$[ebp]
; Line 77
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_inflate_codes_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = 8							; size = 4
_z$ = 12						; size = 4
_inflate_blocks_free PROC
; File d:\mozilla\modules\freetype2\src\gzip\infblock.c
; Line 378
	push	ebp
	mov	ebp, esp
	push	esi
; Line 379
	push	0
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_blocks_reset
	add	esp, 12					; 0000000cH
; Line 380
	mov	esi, esp
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 381
	mov	esi, esp
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 382
	mov	esi, esp
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 384
	xor	eax, eax
; Line 385
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_inflate_blocks_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv92 = -4						; size = 4
_s$ = 8							; size = 4
_z$ = 12						; size = 4
_c$ = 16						; size = 4
_inflate_blocks_reset PROC
; File d:\mozilla\modules\freetype2\src\gzip\infblock.c
; Line 71
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 72
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN5@inflate_bl
; Line 73
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax], edx
$LN5@inflate_bl:
; Line 74
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax], 4
	je	SHORT $LN3@inflate_bl
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx], 5
	jne	SHORT $LN4@inflate_bl
$LN3@inflate_bl:
; Line 75
	mov	esi, esp
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@inflate_bl:
; Line 76
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx], 6
	jne	SHORT $LN2@inflate_bl
; Line 77
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_inflate_codes_free
	add	esp, 8
$LN2@inflate_bl:
; Line 78
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], 0
; Line 79
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 80
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 81
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+52], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+48], edx
; Line 82
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN6@inflate_bl
; Line 83
	mov	esi, esp
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv92[ebp], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR tv92[ebp]
	mov	DWORD PTR [edx+48], eax
$LN6@inflate_bl:
; Line 85
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_inflate_blocks_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv755 = -208						; size = 4
tv737 = -204						; size = 4
tv626 = -200						; size = 4
tv557 = -196						; size = 4
tv555 = -192						; size = 4
tv394 = -188						; size = 4
tv341 = -184						; size = 4
tv336 = -180						; size = 4
tv308 = -176						; size = 4
tv294 = -172						; size = 4
tv279 = -168						; size = 4
tv247 = -164						; size = 4
tv249 = -160						; size = 4
tv138 = -156						; size = 4
tv79 = -152						; size = 4
tv76 = -148						; size = 4
_c$1 = -144						; size = 4
_td$2 = -136						; size = 4
_tl$3 = -124						; size = 4
_bd$4 = -112						; size = 4
_bl$5 = -100						; size = 4
_c$6 = -92						; size = 4
_j$7 = -88						; size = 4
_i$8 = -84						; size = 4
_h$9 = -80						; size = 4
_td$10 = -72						; size = 4
_tl$11 = -60						; size = 4
_bd$12 = -48						; size = 4
_bl$13 = -36						; size = 4
_m$ = -28						; size = 4
_q$ = -24						; size = 4
_n$ = -20						; size = 4
_p$ = -16						; size = 4
_k$ = -12						; size = 4
_b$ = -8						; size = 4
_t$ = -4						; size = 4
_s$ = 8							; size = 4
_z$ = 12						; size = 4
_r$ = 16						; size = 4
_inflate_blocks PROC
; File d:\mozilla\modules\freetype2\src\gzip\infblock.c
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 133
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _n$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _k$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _q$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jae	SHORT $LN83@inflate_bl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, DWORD PTR _q$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN84@inflate_bl
$LN83@inflate_bl:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv76[ebp], eax
$LN84@inflate_bl:
	mov	ecx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _m$[ebp], ecx
$LN80@inflate_bl:
; Line 136
	mov	edx, 1
	test	edx, edx
	je	$LN81@inflate_bl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv79[ebp], ecx
	cmp	DWORD PTR tv79[ebp], 9
	ja	$LN1@inflate_bl
	mov	edx, DWORD PTR tv79[ebp]
	jmp	DWORD PTR $LN117@inflate_bl[edx*4]
$LN75@inflate_bl:
; Line 139
	cmp	DWORD PTR _k$[ebp], 3
	jae	$LN74@inflate_bl
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN73@inflate_bl
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN72@inflate_bl
$LN73@inflate_bl:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN72@inflate_bl:
	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 8
	mov	DWORD PTR _k$[ebp], ecx
	jmp	$LN75@inflate_bl
$LN74@inflate_bl:
; Line 140
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, 7
	mov	DWORD PTR _t$[ebp], edx
; Line 141
	mov	eax, DWORD PTR _t$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 142
	mov	edx, DWORD PTR _t$[ebp]
	shr	edx, 1
	mov	DWORD PTR tv138[ebp], edx
	cmp	DWORD PTR tv138[ebp], 3
	ja	$LN70@inflate_bl
	mov	eax, DWORD PTR tv138[ebp]
	jmp	DWORD PTR $LN118@inflate_bl[eax*4]
$LN69@inflate_bl:
; Line 147
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 3
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _k$[ebp]
	sub	edx, 3
	mov	DWORD PTR _k$[ebp], edx
; Line 148
	mov	eax, DWORD PTR _k$[ebp]
	and	eax, 7
	mov	DWORD PTR _t$[ebp], eax
; Line 149
	mov	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	shr	edx, cl
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _k$[ebp], eax
; Line 150
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 151
	jmp	$LN70@inflate_bl
$LN68@inflate_bl:
; Line 160
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	lea	eax, DWORD PTR _td$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _tl$11[ebp]
	push	ecx
	lea	edx, DWORD PTR _bd$12[ebp]
	push	edx
	lea	eax, DWORD PTR _bl$13[ebp]
	push	eax
	call	_inflate_trees_fixed
	add	esp, 20					; 00000014H
; Line 161
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _td$10[ebp]
	push	edx
	mov	eax, DWORD PTR _tl$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _bd$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _bl$13[ebp]
	push	edx
	call	_inflate_codes_new
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 162
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN67@inflate_bl
; Line 164
	mov	DWORD PTR _r$[ebp], -4			; fffffffcH
; Line 165
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN67@inflate_bl:
; Line 168
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 3
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 3
	mov	DWORD PTR _k$[ebp], eax
; Line 169
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], 6
; Line 170
	jmp	$LN70@inflate_bl
$LN66@inflate_bl:
; Line 174
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 3
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 3
	mov	DWORD PTR _k$[ebp], eax
; Line 175
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], 3
; Line 176
	jmp	$LN70@inflate_bl
$LN65@inflate_bl:
; Line 178
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 3
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 3
	mov	DWORD PTR _k$[ebp], eax
; Line 179
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], 9
; Line 180
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG7934
; Line 181
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
; Line 182
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN70@inflate_bl:
; Line 184
	jmp	$LN77@inflate_bl
$LN63@inflate_bl:
; Line 186
	cmp	DWORD PTR _k$[ebp], 32			; 00000020H
	jae	$LN62@inflate_bl
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN61@inflate_bl
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN60@inflate_bl
$LN61@inflate_bl:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _z$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN60@inflate_bl:
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 8
	mov	DWORD PTR _k$[ebp], edx
	jmp	$LN63@inflate_bl
$LN62@inflate_bl:
; Line 187
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, 65535				; 0000ffffH
	cmp	eax, ecx
	je	SHORT $LN59@inflate_bl
; Line 189
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], 9
; Line 190
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG7944
; Line 191
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
; Line 192
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN59@inflate_bl:
; Line 194
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 195
	mov	DWORD PTR _k$[ebp], 0
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 197
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN87@inflate_bl
	mov	DWORD PTR tv249[ebp], 2
	jmp	SHORT $LN88@inflate_bl
$LN87@inflate_bl:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN85@inflate_bl
	mov	DWORD PTR tv247[ebp], 7
	jmp	SHORT $LN86@inflate_bl
$LN85@inflate_bl:
	mov	DWORD PTR tv247[ebp], 0
$LN86@inflate_bl:
	mov	edx, DWORD PTR tv247[ebp]
	mov	DWORD PTR tv249[ebp], edx
$LN88@inflate_bl:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv249[ebp]
	mov	DWORD PTR [eax], ecx
; Line 198
	jmp	$LN77@inflate_bl
$LN58@inflate_bl:
; Line 200
	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN57@inflate_bl
; Line 201
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _z$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN57@inflate_bl:
; Line 202
	cmp	DWORD PTR _m$[ebp], 0
	jne	$LN56@inflate_bl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jne	SHORT $LN55@inflate_bl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+48]
	cmp	edx, DWORD PTR [ecx+40]
	je	SHORT $LN55@inflate_bl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _q$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR [edx+48]
	jae	SHORT $LN89@inflate_bl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, DWORD PTR _q$[ebp]
	sub	edx, 1
	mov	DWORD PTR tv279[ebp], edx
	jmp	SHORT $LN90@inflate_bl
$LN89@inflate_bl:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv279[ebp], ecx
$LN90@inflate_bl:
	mov	edx, DWORD PTR tv279[ebp]
	mov	DWORD PTR _m$[ebp], edx
$LN55@inflate_bl:
	cmp	DWORD PTR _m$[ebp], 0
	jne	$LN56@inflate_bl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _q$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jae	SHORT $LN91@inflate_bl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, DWORD PTR _q$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv294[ebp], ecx
	jmp	SHORT $LN92@inflate_bl
$LN91@inflate_bl:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv294[ebp], eax
$LN92@inflate_bl:
	mov	ecx, DWORD PTR tv294[ebp]
	mov	DWORD PTR _m$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR [edx+44]
	jne	SHORT $LN53@inflate_bl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	cmp	eax, DWORD PTR [edx+40]
	je	SHORT $LN53@inflate_bl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _q$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jae	SHORT $LN93@inflate_bl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+48]
	sub	eax, DWORD PTR _q$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv308[ebp], eax
	jmp	SHORT $LN94@inflate_bl
$LN93@inflate_bl:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv308[ebp], edx
$LN94@inflate_bl:
	mov	eax, DWORD PTR tv308[ebp]
	mov	DWORD PTR _m$[ebp], eax
$LN53@inflate_bl:
	cmp	DWORD PTR _m$[ebp], 0
	jne	SHORT $LN56@inflate_bl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN56@inflate_bl:
	mov	DWORD PTR _r$[ebp], 0
; Line 203
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _t$[ebp], ecx
; Line 204
	mov	edx, DWORD PTR _t$[ebp]
	cmp	edx, DWORD PTR _n$[ebp]
	jbe	SHORT $LN51@inflate_bl
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _t$[ebp], eax
$LN51@inflate_bl:
; Line 205
	mov	ecx, DWORD PTR _t$[ebp]
	cmp	ecx, DWORD PTR _m$[ebp]
	jbe	SHORT $LN50@inflate_bl
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR _t$[ebp], edx
$LN50@inflate_bl:
; Line 206
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 207
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR _n$[ebp], ecx
; Line 208
	mov	edx, DWORD PTR _q$[ebp]
	add	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR _q$[ebp], edx
	mov	eax, DWORD PTR _m$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _m$[ebp], eax
; Line 209
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR tv336[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv336[ebp]
	mov	DWORD PTR [eax+4], ecx
	cmp	DWORD PTR tv336[ebp], 0
	je	SHORT $LN49@inflate_bl
; Line 210
	jmp	$LN77@inflate_bl
$LN49@inflate_bl:
; Line 214
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN95@inflate_bl
	mov	DWORD PTR tv341[ebp], 7
	jmp	SHORT $LN96@inflate_bl
$LN95@inflate_bl:
	mov	DWORD PTR tv341[ebp], 0
$LN96@inflate_bl:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv341[ebp]
	mov	DWORD PTR [eax], ecx
; Line 215
	jmp	$LN77@inflate_bl
$LN47@inflate_bl:
; Line 217
	cmp	DWORD PTR _k$[ebp], 14			; 0000000eH
	jae	$LN46@inflate_bl
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN45@inflate_bl
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN44@inflate_bl
$LN45@inflate_bl:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _z$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN44@inflate_bl:
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 8
	mov	DWORD PTR _k$[ebp], edx
	jmp	$LN47@inflate_bl
$LN46@inflate_bl:
; Line 218
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR _t$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 220
	mov	eax, DWORD PTR _t$[ebp]
	and	eax, 31					; 0000001fH
	cmp	eax, 29					; 0000001dH
	ja	SHORT $LN42@inflate_bl
	mov	ecx, DWORD PTR _t$[ebp]
	shr	ecx, 5
	and	ecx, 31					; 0000001fH
	cmp	ecx, 29					; 0000001dH
	jbe	SHORT $LN43@inflate_bl
$LN42@inflate_bl:
; Line 222
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], 9
; Line 223
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG7973
; Line 224
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
; Line 225
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN43@inflate_bl:
; Line 228
	mov	eax, DWORD PTR _t$[ebp]
	and	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _t$[ebp]
	shr	ecx, 5
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [eax+ecx+258]
	mov	DWORD PTR _t$[ebp], edx
; Line 229
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv394[ebp], eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv394[ebp]
	mov	DWORD PTR [edx+12], eax
	cmp	DWORD PTR tv394[ebp], 0
	jne	SHORT $LN41@inflate_bl
; Line 231
	mov	DWORD PTR _r$[ebp], -4			; fffffffcH
; Line 232
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN41@inflate_bl:
; Line 234
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 14					; 0000000eH
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 14					; 0000000eH
	mov	DWORD PTR _k$[ebp], ecx
; Line 235
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 237
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], 4
$LN39@inflate_bl:
; Line 239
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 10					; 0000000aH
	add	edx, 4
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+8], edx
	jae	$LN33@inflate_bl
$LN37@inflate_bl:
; Line 241
	cmp	DWORD PTR _k$[ebp], 3
	jae	$LN36@inflate_bl
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN35@inflate_bl
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN34@inflate_bl
$LN35@inflate_bl:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN34@inflate_bl:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 8
	mov	DWORD PTR _k$[ebp], ecx
	jmp	$LN37@inflate_bl
$LN36@inflate_bl:
; Line 242
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, 7
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _border[ecx*4]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 243
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 3
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 3
	mov	DWORD PTR _k$[ebp], eax
; Line 244
	jmp	$LN39@inflate_bl
$LN33@inflate_bl:
; Line 245
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+8], 19			; 00000013H
	jae	SHORT $LN32@inflate_bl
; Line 246
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _border[eax*4]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+ecx*4], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+8], edx
	jmp	SHORT $LN33@inflate_bl
$LN32@inflate_bl:
; Line 247
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+16], 7
; Line 249
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_inflate_trees_bits
	add	esp, 20					; 00000014H
	mov	DWORD PTR _t$[ebp], eax
; Line 250
	cmp	DWORD PTR _t$[ebp], 0
	je	$LN31@inflate_bl
; Line 252
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 253
	cmp	DWORD PTR _r$[ebp], -3			; fffffffdH
	jne	SHORT $LN30@inflate_bl
; Line 255
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 256
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], 9
$LN30@inflate_bl:
; Line 258
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _z$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN31@inflate_bl:
; Line 260
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 262
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], 5
$LN28@inflate_bl:
; Line 265
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _t$[ebp], ecx
	mov	edx, DWORD PTR _t$[ebp]
	and	edx, 31					; 0000001fH
	mov	eax, DWORD PTR _t$[ebp]
	shr	eax, 5
	and	eax, 31					; 0000001fH
	lea	ecx, DWORD PTR [edx+eax+258]
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+8], ecx
	jae	$LN27@inflate_bl
; Line 270
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _t$[ebp], ecx
$LN26@inflate_bl:
; Line 271
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR _t$[ebp]
	jae	$LN25@inflate_bl
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN24@inflate_bl
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN23@inflate_bl
$LN24@inflate_bl:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN23@inflate_bl:
	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 8
	mov	DWORD PTR _k$[ebp], ecx
	jmp	$LN26@inflate_bl
$LN25@inflate_bl:
; Line 272
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _inflate_mask[edx*4]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _h$9[ebp], eax
; Line 273
	mov	ecx, DWORD PTR _h$9[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	DWORD PTR _t$[ebp], edx
; Line 274
	mov	eax, DWORD PTR _h$9[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _c$6[ebp], ecx
; Line 275
	cmp	DWORD PTR _c$6[ebp], 16			; 00000010H
	jae	SHORT $LN22@inflate_bl
; Line 277
	mov	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	shr	edx, cl
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _k$[ebp], eax
; Line 278
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _c$6[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 280
	jmp	$LN21@inflate_bl
$LN22@inflate_bl:
; Line 282
	cmp	DWORD PTR _c$6[ebp], 18			; 00000012H
	jne	SHORT $LN97@inflate_bl
	mov	DWORD PTR tv555[ebp], 7
	jmp	SHORT $LN98@inflate_bl
$LN97@inflate_bl:
	mov	ecx, DWORD PTR _c$6[ebp]
	sub	ecx, 14					; 0000000eH
	mov	DWORD PTR tv555[ebp], ecx
$LN98@inflate_bl:
	mov	edx, DWORD PTR tv555[ebp]
	mov	DWORD PTR _i$8[ebp], edx
; Line 283
	cmp	DWORD PTR _c$6[ebp], 18			; 00000012H
	jne	SHORT $LN99@inflate_bl
	mov	DWORD PTR tv557[ebp], 11		; 0000000bH
	jmp	SHORT $LN100@inflate_bl
$LN99@inflate_bl:
	mov	DWORD PTR tv557[ebp], 3
$LN100@inflate_bl:
	mov	eax, DWORD PTR tv557[ebp]
	mov	DWORD PTR _j$7[ebp], eax
$LN20@inflate_bl:
; Line 284
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, DWORD PTR _i$8[ebp]
	cmp	DWORD PTR _k$[ebp], ecx
	jae	$LN19@inflate_bl
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN18@inflate_bl
	mov	DWORD PTR _r$[ebp], 0
	jmp	SHORT $LN17@inflate_bl
$LN18@inflate_bl:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _z$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN17@inflate_bl:
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 8
	mov	DWORD PTR _k$[ebp], edx
	jmp	$LN20@inflate_bl
$LN19@inflate_bl:
; Line 285
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	shr	eax, cl
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR _k$[ebp], ecx
; Line 286
	mov	edx, DWORD PTR _i$8[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _inflate_mask[edx*4]
	add	eax, DWORD PTR _j$7[ebp]
	mov	DWORD PTR _j$7[ebp], eax
; Line 287
	mov	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _i$8[ebp]
	shr	edx, cl
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, DWORD PTR _i$8[ebp]
	mov	DWORD PTR _k$[ebp], eax
; Line 288
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _i$8[ebp], edx
; Line 289
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _t$[ebp], ecx
; Line 291
	mov	edx, DWORD PTR _i$8[ebp]
	add	edx, DWORD PTR _j$7[ebp]
	mov	eax, DWORD PTR _t$[ebp]
	and	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _t$[ebp]
	shr	ecx, 5
	and	ecx, 31					; 0000001fH
	lea	eax, DWORD PTR [eax+ecx+258]
	cmp	edx, eax
	ja	SHORT $LN15@inflate_bl
	cmp	DWORD PTR _c$6[ebp], 16			; 00000010H
	jne	$LN16@inflate_bl
	cmp	DWORD PTR _i$8[ebp], 1
	jae	$LN16@inflate_bl
$LN15@inflate_bl:
; Line 293
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 294
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], 9
; Line 295
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG8022
; Line 296
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
; Line 297
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN16@inflate_bl:
; Line 299
	cmp	DWORD PTR _c$6[ebp], 16			; 00000010H
	jne	SHORT $LN101@inflate_bl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR [eax+ecx*4-4]
	mov	DWORD PTR tv626[ebp], edx
	jmp	SHORT $LN102@inflate_bl
$LN101@inflate_bl:
	mov	DWORD PTR tv626[ebp], 0
$LN102@inflate_bl:
	mov	eax, DWORD PTR tv626[ebp]
	mov	DWORD PTR _c$6[ebp], eax
$LN14@inflate_bl:
; Line 301
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _c$6[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _i$8[ebp]
	add	edx, 1
	mov	DWORD PTR _i$8[ebp], edx
; Line 302
	mov	eax, DWORD PTR _j$7[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$7[ebp], eax
	jne	SHORT $LN14@inflate_bl
; Line 303
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _i$8[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN21@inflate_bl:
; Line 305
	jmp	$LN28@inflate_bl
$LN27@inflate_bl:
; Line 306
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 312
	mov	DWORD PTR _bl$5[ebp], 9
; Line 313
	mov	DWORD PTR _bd$4[ebp], 6
; Line 314
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _t$[ebp], edx
; Line 317
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	lea	eax, DWORD PTR _td$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _tl$3[ebp]
	push	ecx
	lea	edx, DWORD PTR _bd$4[ebp]
	push	edx
	lea	eax, DWORD PTR _bl$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	shr	eax, 5
	and	eax, 31					; 0000001fH
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	and	ecx, 31					; 0000001fH
	add	ecx, 257				; 00000101H
	push	ecx
	call	_inflate_trees_dynamic
	add	esp, 36					; 00000024H
	mov	DWORD PTR _t$[ebp], eax
; Line 318
	cmp	DWORD PTR _t$[ebp], 0
	je	$LN11@inflate_bl
; Line 320
	cmp	DWORD PTR _t$[ebp], -3			; fffffffdH
	jne	SHORT $LN10@inflate_bl
; Line 322
	mov	esi, esp
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 323
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], 9
$LN10@inflate_bl:
; Line 325
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 326
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN11@inflate_bl:
; Line 329
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _td$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _tl$3[ebp]
	push	edx
	mov	eax, DWORD PTR _bd$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _bl$5[ebp]
	push	ecx
	call	_inflate_codes_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$1[ebp], eax
	cmp	DWORD PTR _c$1[ebp], 0
	jne	SHORT $LN9@inflate_bl
; Line 331
	mov	DWORD PTR _r$[ebp], -4			; fffffffcH
; Line 332
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _z$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN9@inflate_bl:
; Line 334
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _c$1[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 336
	mov	esi, esp
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 337
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], 6
$LN8@inflate_bl:
; Line 339
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
; Line 340
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_codes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
	cmp	DWORD PTR _r$[ebp], 1
	je	SHORT $LN7@inflate_bl
; Line 341
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN7@inflate_bl:
; Line 342
	mov	DWORD PTR _r$[ebp], 0
; Line 343
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_inflate_codes_free
	add	esp, 8
; Line 344
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _n$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _k$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _q$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jae	SHORT $LN103@inflate_bl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, DWORD PTR _q$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv737[ebp], ecx
	jmp	SHORT $LN104@inflate_bl
$LN103@inflate_bl:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv737[ebp], eax
$LN104@inflate_bl:
	mov	ecx, DWORD PTR tv737[ebp]
	mov	DWORD PTR _m$[ebp], ecx
; Line 348
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN6@inflate_bl
; Line 350
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], 0
; Line 351
	jmp	$LN77@inflate_bl
$LN6@inflate_bl:
; Line 353
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], 7
$LN5@inflate_bl:
; Line 355
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _q$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jae	SHORT $LN105@inflate_bl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+48]
	sub	eax, DWORD PTR _q$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv755[ebp], eax
	jmp	SHORT $LN106@inflate_bl
$LN105@inflate_bl:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv755[ebp], edx
$LN106@inflate_bl:
	mov	eax, DWORD PTR tv755[ebp]
	mov	DWORD PTR _m$[ebp], eax
; Line 356
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	cmp	eax, DWORD PTR [edx+52]
	je	SHORT $LN4@inflate_bl
; Line 357
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN4@inflate_bl:
; Line 358
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], 8
$LN3@inflate_bl:
; Line 360
	mov	DWORD PTR _r$[ebp], 1
; Line 361
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	$LN81@inflate_bl
$LN2@inflate_bl:
; Line 363
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
; Line 364
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN81@inflate_bl
$LN1@inflate_bl:
; Line 366
	mov	DWORD PTR _r$[ebp], -2			; fffffffeH
; Line 367
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _z$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_inflate_flush
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN81@inflate_bl
$LN77@inflate_bl:
; Line 368
	jmp	$LN80@inflate_bl
$LN81@inflate_bl:
; Line 372
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN116@inflate_bl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN116@inflate_bl:
	DD	8
	DD	$LN115@inflate_bl
$LN115@inflate_bl:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN107@inflate_bl
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN108@inflate_bl
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN109@inflate_bl
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN110@inflate_bl
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN111@inflate_bl
	DD	-112					; ffffff90H
	DD	4
	DD	$LN112@inflate_bl
	DD	-124					; ffffff84H
	DD	4
	DD	$LN113@inflate_bl
	DD	-136					; ffffff78H
	DD	4
	DD	$LN114@inflate_bl
$LN114@inflate_bl:
	DB	116					; 00000074H
	DB	100					; 00000064H
	DB	0
$LN113@inflate_bl:
	DB	116					; 00000074H
	DB	108					; 0000006cH
	DB	0
$LN112@inflate_bl:
	DB	98					; 00000062H
	DB	100					; 00000064H
	DB	0
$LN111@inflate_bl:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	0
$LN110@inflate_bl:
	DB	116					; 00000074H
	DB	100					; 00000064H
	DB	0
$LN109@inflate_bl:
	DB	116					; 00000074H
	DB	108					; 0000006cH
	DB	0
$LN108@inflate_bl:
	DB	98					; 00000062H
	DB	100					; 00000064H
	DB	0
$LN107@inflate_bl:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	0
$LN117@inflate_bl:
	DD	$LN75@inflate_bl
	DD	$LN63@inflate_bl
	DD	$LN58@inflate_bl
	DD	$LN47@inflate_bl
	DD	$LN39@inflate_bl
	DD	$LN28@inflate_bl
	DD	$LN8@inflate_bl
	DD	$LN5@inflate_bl
	DD	$LN3@inflate_bl
	DD	$LN2@inflate_bl
$LN118@inflate_bl:
	DD	$LN69@inflate_bl
	DD	$LN68@inflate_bl
	DD	$LN66@inflate_bl
	DD	$LN65@inflate_bl
_inflate_blocks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv85 = -12						; size = 4
tv73 = -8						; size = 4
_s$ = -4						; size = 4
_z$ = 8							; size = 4
_c$ = 12						; size = 4
_w$ = 16						; size = 4
_inflate_blocks_new PROC
; File d:\mozilla\modules\freetype2\src\gzip\infblock.c
; Line 92
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 96
	mov	esi, esp
	push	64					; 00000040H
	push	1
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$[ebp], eax
	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN3@inflate_bl
; Line 97
	mov	eax, DWORD PTR _s$[ebp]
	jmp	$LN4@inflate_bl
$LN3@inflate_bl:
; Line 99
	mov	esi, esp
	push	1440					; 000005a0H
	push	8
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv73[ebp], eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR [edx+36], eax
	cmp	DWORD PTR tv73[ebp], 0
	jne	SHORT $LN2@inflate_bl
; Line 101
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 102
	xor	eax, eax
	jmp	$LN4@inflate_bl
$LN2@inflate_bl:
; Line 104
	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv85[ebp], eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR [edx+40], eax
	cmp	DWORD PTR tv85[ebp], 0
	jne	SHORT $LN1@inflate_bl
; Line 106
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 107
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 108
	xor	eax, eax
	jmp	SHORT $LN4@inflate_bl
$LN1@inflate_bl:
; Line 110
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 111
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 112
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], 0
; Line 114
	push	0
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_inflate_blocks_reset
	add	esp, 12					; 0000000cH
; Line 115
	mov	eax, DWORD PTR _s$[ebp]
$LN4@inflate_bl:
; Line 116
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_inflate_blocks_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bl$ = 8						; size = 4
_bd$ = 12						; size = 4
_tl$ = 16						; size = 4
_td$ = 20						; size = 4
_z$ = 24						; size = 4
_inflate_trees_fixed PROC
; File d:\mozilla\modules\freetype2\src\gzip\inftrees.c
; Line 416
	push	ebp
	mov	ebp, esp
; Line 461
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR _z$[ebp], eax
; Line 463
	mov	ecx, DWORD PTR _bl$[ebp]
	mov	edx, DWORD PTR _fixed_bl
	mov	DWORD PTR [ecx], edx
; Line 464
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR _fixed_bd
	mov	DWORD PTR [eax], ecx
; Line 465
	mov	edx, DWORD PTR _tl$[ebp]
	mov	DWORD PTR [edx], OFFSET _fixed_tl
; Line 466
	mov	eax, DWORD PTR _td$[ebp]
	mov	DWORD PTR [eax], OFFSET _fixed_td
; Line 467
	xor	eax, eax
; Line 468
	pop	ebp
	ret	0
_inflate_trees_fixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$ = -20						; size = 4
_hn$ = -12						; size = 4
_r$ = -4						; size = 4
_nl$ = 8						; size = 4
_nd$ = 12						; size = 4
_c$ = 16						; size = 4
_bl$ = 20						; size = 4
_bd$ = 24						; size = 4
_tl$ = 28						; size = 4
_td$ = 32						; size = 4
_hp$ = 36						; size = 4
_z$ = 40						; size = 4
_inflate_trees_dynamic PROC
; File d:\mozilla\modules\freetype2\src\gzip\inftrees.c
; Line 338
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 340
	mov	DWORD PTR _hn$[ebp], 0
; Line 344
	mov	esi, esp
	push	4
	push	288					; 00000120H
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v$[ebp], eax
	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN13@inflate_tr
; Line 345
	mov	eax, -4					; fffffffcH
	jmp	$LN14@inflate_tr
$LN13@inflate_tr:
; Line 348
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hn$[ebp]
	push	edx
	mov	eax, DWORD PTR _hp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tl$[ebp]
	push	edx
	push	OFFSET _cplext
	push	OFFSET _cplens
	push	257					; 00000101H
	mov	eax, DWORD PTR _nl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_huft_build
	add	esp, 40					; 00000028H
	mov	DWORD PTR _r$[ebp], eax
; Line 349
	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN11@inflate_tr
	mov	edx, DWORD PTR _bl$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN12@inflate_tr
$LN11@inflate_tr:
; Line 351
	cmp	DWORD PTR _r$[ebp], -3			; fffffffdH
	jne	SHORT $LN10@inflate_tr
; Line 352
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG7627
	jmp	SHORT $LN9@inflate_tr
$LN10@inflate_tr:
; Line 353
	cmp	DWORD PTR _r$[ebp], -4			; fffffffcH
	je	SHORT $LN9@inflate_tr
; Line 355
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG7631
; Line 356
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
$LN9@inflate_tr:
; Line 358
	mov	esi, esp
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 359
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN14@inflate_tr
$LN12@inflate_tr:
; Line 363
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hn$[ebp]
	push	edx
	mov	eax, DWORD PTR _hp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _td$[ebp]
	push	edx
	push	OFFSET _cpdext
	push	OFFSET _cpdist
	push	0
	mov	eax, DWORD PTR _nd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nl$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_huft_build
	add	esp, 40					; 00000028H
	mov	DWORD PTR _r$[ebp], eax
; Line 364
	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN6@inflate_tr
	mov	ecx, DWORD PTR _bd$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN7@inflate_tr
	cmp	DWORD PTR _nl$[ebp], 257		; 00000101H
	jbe	SHORT $LN7@inflate_tr
$LN6@inflate_tr:
; Line 366
	cmp	DWORD PTR _r$[ebp], -3			; fffffffdH
	jne	SHORT $LN5@inflate_tr
; Line 367
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG7637
	jmp	SHORT $LN4@inflate_tr
$LN5@inflate_tr:
; Line 368
	cmp	DWORD PTR _r$[ebp], -5			; fffffffbH
	jne	SHORT $LN3@inflate_tr
; Line 376
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG7641
; Line 377
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
	jmp	SHORT $LN4@inflate_tr
$LN3@inflate_tr:
; Line 379
	cmp	DWORD PTR _r$[ebp], -4			; fffffffcH
	je	SHORT $LN4@inflate_tr
; Line 381
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG7645
; Line 382
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
$LN4@inflate_tr:
; Line 384
	mov	esi, esp
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 385
	mov	eax, DWORD PTR _r$[ebp]
	jmp	SHORT $LN14@inflate_tr
$LN7@inflate_tr:
; Line 390
	mov	esi, esp
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 391
	xor	eax, eax
$LN14@inflate_tr:
; Line 392
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@inflate_tr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@inflate_tr:
	DD	1
	DD	$LN17@inflate_tr
$LN17@inflate_tr:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@inflate_tr
$LN16@inflate_tr:
	DB	104					; 00000068H
	DB	110					; 0000006eH
	DB	0
_inflate_trees_dynamic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$ = -20						; size = 4
_hn$ = -12						; size = 4
_r$ = -4						; size = 4
_c$ = 8							; size = 4
_bb$ = 12						; size = 4
_tb$ = 16						; size = 4
_hp$ = 20						; size = 4
_z$ = 24						; size = 4
_inflate_trees_bits PROC
; File d:\mozilla\modules\freetype2\src\gzip\inftrees.c
; Line 306
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 308
	mov	DWORD PTR _hn$[ebp], 0
; Line 311
	mov	esi, esp
	push	4
	push	19					; 00000013H
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v$[ebp], eax
	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN5@inflate_tr
; Line 312
	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN6@inflate_tr
$LN5@inflate_tr:
; Line 314
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hn$[ebp]
	push	edx
	mov	eax, DWORD PTR _hp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tb$[ebp]
	push	edx
	push	0
	push	0
	push	19					; 00000013H
	push	19					; 00000013H
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_huft_build
	add	esp, 40					; 00000028H
	mov	DWORD PTR _r$[ebp], eax
; Line 315
	cmp	DWORD PTR _r$[ebp], -3			; fffffffdH
	jne	SHORT $LN4@inflate_tr
; Line 316
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG7591
	jmp	SHORT $LN3@inflate_tr
$LN4@inflate_tr:
; Line 317
	cmp	DWORD PTR _r$[ebp], -5			; fffffffbH
	je	SHORT $LN1@inflate_tr
	mov	edx, DWORD PTR _bb$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN3@inflate_tr
$LN1@inflate_tr:
; Line 319
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG7596
; Line 320
	mov	DWORD PTR _r$[ebp], -3			; fffffffdH
$LN3@inflate_tr:
; Line 322
	mov	esi, esp
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 323
	mov	eax, DWORD PTR _r$[ebp]
$LN6@inflate_tr:
; Line 324
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@inflate_tr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@inflate_tr:
	DD	1
	DD	$LN9@inflate_tr
$LN9@inflate_tr:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@inflate_tr
$LN8@inflate_tr:
	DB	104					; 00000068H
	DB	110					; 0000006eH
	DB	0
_inflate_trees_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_ptr$ = 12						; size = 4
_zcfree	PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 153
	push	ebp
	mov	ebp, esp
; Line 154
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _opaque$[ebp]
	push	ecx
	call	_ft_gzip_free
	add	esp, 8
; Line 155
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_zcfree	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_items$ = 12						; size = 4
_size$ = 16						; size = 4
_zcalloc PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 146
	push	ebp
	mov	ebp, esp
; Line 147
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _items$[ebp]
	push	ecx
	mov	edx, DWORD PTR _opaque$[ebp]
	push	edx
	call	_ft_gzip_alloc
	add	esp, 12					; 0000000cH
; Line 148
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_zcalloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv137 = -12						; size = 4
tv143 = -8						; size = 4
tv84 = -4						; size = 4
_z$ = 8							; size = 4
_w$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_inflateInit2_ PROC
; File d:\mozilla\modules\freetype2\src\gzip\inflate.c
; Line 87
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 89
	cmp	DWORD PTR _version$[ebp], 0
	je	SHORT $LN9@inflateIni
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _version$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	ecx, BYTE PTR $SG8110[edx]
	cmp	eax, ecx
	jne	SHORT $LN9@inflateIni
	cmp	DWORD PTR _stream_size$[ebp], 56	; 00000038H
	je	SHORT $LN10@inflateIni
$LN9@inflateIni:
; Line 90
	mov	eax, -6					; fffffffaH
	jmp	$LN11@inflateIni
$LN10@inflateIni:
; Line 93
	cmp	DWORD PTR _z$[ebp], 0
	jne	SHORT $LN8@inflateIni
; Line 94
	mov	eax, -2					; fffffffeH
	jmp	$LN11@inflateIni
$LN8@inflateIni:
; Line 95
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 96
	mov	eax, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN7@inflateIni
; Line 98
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+32], OFFSET _zcalloc
; Line 99
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+40], 0
$LN7@inflateIni:
; Line 101
	mov	eax, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN6@inflateIni
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+36], OFFSET _zcfree
$LN6@inflateIni:
; Line 103
	mov	esi, esp
	push	24					; 00000018H
	push	1
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv84[ebp], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR tv84[ebp]
	mov	DWORD PTR [eax+28], ecx
	cmp	DWORD PTR tv84[ebp], 0
	jne	SHORT $LN5@inflateIni
; Line 104
	mov	eax, -4					; fffffffcH
	jmp	$LN11@inflateIni
$LN5@inflateIni:
; Line 105
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+20], 0
; Line 108
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+12], 0
; Line 109
	cmp	DWORD PTR _w$[ebp], 0
	jge	SHORT $LN4@inflateIni
; Line 111
	mov	eax, DWORD PTR _w$[ebp]
	neg	eax
	mov	DWORD PTR _w$[ebp], eax
; Line 112
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+12], 1
$LN4@inflateIni:
; Line 116
	cmp	DWORD PTR _w$[ebp], 8
	jl	SHORT $LN2@inflateIni
	cmp	DWORD PTR _w$[ebp], 15			; 0000000fH
	jle	SHORT $LN3@inflateIni
$LN2@inflateIni:
; Line 118
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	call	_inflateEnd
	add	esp, 4
; Line 119
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN11@inflateIni
$LN3@inflateIni:
; Line 121
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 126
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN13@inflateIni
	mov	DWORD PTR tv143[ebp], 0
	jmp	SHORT $LN14@inflateIni
$LN13@inflateIni:
	mov	DWORD PTR tv143[ebp], OFFSET _adler32
$LN14@inflateIni:
	mov	eax, 1
	mov	ecx, DWORD PTR _w$[ebp]
	shl	eax, cl
	push	eax
	mov	ecx, DWORD PTR tv143[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	call	_inflate_blocks_new
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR tv137[ebp]
	mov	DWORD PTR [ecx+20], edx
	cmp	DWORD PTR tv137[ebp], 0
	jne	SHORT $LN1@inflateIni
; Line 128
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	call	_inflateEnd
	add	esp, 4
; Line 129
	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN11@inflateIni
$LN1@inflateIni:
; Line 134
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	call	_inflateReset
	add	esp, 4
; Line 135
	xor	eax, eax
$LN11@inflateIni:
; Line 136
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_inflateInit2_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -16						; size = 4
_k$ = -12						; size = 4
_s2$ = -8						; size = 4
_s1$ = -4						; size = 4
_adler$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_adler32 PROC
; File d:\mozilla\modules\freetype2\src\gzip\adler32.c
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 26
	mov	eax, DWORD PTR _adler$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _s1$[ebp], eax
; Line 27
	mov	ecx, DWORD PTR _adler$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _s2$[ebp], ecx
; Line 30
	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN8@adler32
	mov	eax, 1
	jmp	$LN10@adler32
$LN8@adler32:
; Line 32
	cmp	DWORD PTR _len$[ebp], 0
	jbe	$LN7@adler32
; Line 33
	cmp	DWORD PTR _len$[ebp], 5552		; 000015b0H
	jae	SHORT $LN12@adler32
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN13@adler32
$LN12@adler32:
	mov	DWORD PTR tv70[ebp], 5552		; 000015b0H
$LN13@adler32:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _k$[ebp], eax
; Line 34
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _len$[ebp], ecx
$LN6@adler32:
; Line 35
	cmp	DWORD PTR _k$[ebp], 16			; 00000010H
	jl	$LN5@adler32
; Line 36
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _buf$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], edx
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _buf$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
	mov	ecx, DWORD PTR _s2$[ebp]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], ecx
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], ecx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _buf$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
	mov	ecx, DWORD PTR _s2$[ebp]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], ecx
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], ecx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _buf$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
	mov	ecx, DWORD PTR _s2$[ebp]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _buf$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], edx
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], ecx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], edx
	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _buf$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], edx
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], ecx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _buf$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
	mov	ecx, DWORD PTR _s2$[ebp]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 11
	mov	ecx, DWORD PTR _buf$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], edx
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 12
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], ecx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _buf$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
	mov	ecx, DWORD PTR _s2$[ebp]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 14
	mov	ecx, DWORD PTR _buf$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], edx
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 15
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	add	ecx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], ecx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], edx
; Line 37
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _buf$[ebp], eax
; Line 38
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], ecx
; Line 39
	jmp	$LN6@adler32
$LN5@adler32:
; Line 40
	cmp	DWORD PTR _k$[ebp], 0
	je	SHORT $LN4@adler32
$LN3@adler32:
; Line 41
	mov	edx, DWORD PTR _buf$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 1
	mov	DWORD PTR _buf$[ebp], ecx
; Line 42
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _s2$[ebp], edx
; Line 43
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jne	SHORT $LN3@adler32
$LN4@adler32:
; Line 44
	mov	eax, DWORD PTR _s1$[ebp]
	xor	edx, edx
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	DWORD PTR _s1$[ebp], edx
; Line 45
	mov	eax, DWORD PTR _s2$[ebp]
	xor	edx, edx
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	DWORD PTR _s2$[ebp], edx
; Line 46
	jmp	$LN8@adler32
$LN7@adler32:
; Line 47
	mov	eax, DWORD PTR _s2$[ebp]
	shl	eax, 16					; 00000010H
	or	eax, DWORD PTR _s1$[ebp]
$LN10@adler32:
; Line 48
	mov	esp, ebp
	pop	ebp
	ret	0
_adler32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -4						; size = 4
_z$ = 8							; size = 4
_inflateReset PROC
; File d:\mozilla\modules\freetype2\src\gzip\inflate.c
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 57
	cmp	DWORD PTR _z$[ebp], 0
	je	SHORT $LN1@inflateRes
	mov	eax, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@inflateRes
$LN1@inflateRes:
; Line 58
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN3@inflateRes
$LN2@inflateRes:
; Line 59
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 60
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 61
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@inflateRes
	mov	DWORD PTR tv75[ebp], 7
	jmp	SHORT $LN6@inflateRes
$LN5@inflateRes:
	mov	DWORD PTR tv75[ebp], 0
$LN6@inflateRes:
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [ecx], edx
; Line 62
	push	0
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_inflate_blocks_reset
	add	esp, 12					; 0000000cH
; Line 64
	xor	eax, eax
$LN3@inflateRes:
; Line 65
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_inflateReset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_z$ = 8							; size = 4
_inflateEnd PROC
; File d:\mozilla\modules\freetype2\src\gzip\inflate.c
; Line 70
	push	ebp
	mov	ebp, esp
	push	esi
; Line 71
	cmp	DWORD PTR _z$[ebp], 0
	je	SHORT $LN2@inflateEnd
	mov	eax, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@inflateEnd
	mov	ecx, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN3@inflateEnd
$LN2@inflateEnd:
; Line 72
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN4@inflateEnd
$LN3@inflateEnd:
; Line 73
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN1@inflateEnd
; Line 74
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_inflate_blocks_free
	add	esp, 8
$LN1@inflateEnd:
; Line 75
	mov	esi, esp
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 76
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 78
	xor	eax, eax
$LN4@inflateEnd:
; Line 79
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_inflateEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv128 = -28						; size = 4
tv95 = -24						; size = 4
tv92 = -20						; size = 4
tv74 = -16						; size = 4
tv70 = -12						; size = 4
_b$ = -8						; size = 4
_r$ = -4						; size = 4
_z$ = 8							; size = 4
_f$ = 12						; size = 4
_inflate PROC
; File d:\mozilla\modules\freetype2\src\gzip\inflate.c
; Line 150
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 154
	cmp	DWORD PTR _z$[ebp], 0
	je	SHORT $LN39@inflate
	mov	eax, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN39@inflate
	mov	ecx, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN40@inflate
$LN39@inflate:
; Line 155
	mov	eax, -2					; fffffffeH
	jmp	$LN41@inflate
$LN40@inflate:
; Line 156
	cmp	DWORD PTR _f$[ebp], 4
	jne	SHORT $LN43@inflate
	mov	DWORD PTR tv70[ebp], -5			; fffffffbH
	jmp	SHORT $LN44@inflate
$LN43@inflate:
	mov	DWORD PTR tv70[ebp], 0
$LN44@inflate:
	mov	edx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _f$[ebp], edx
; Line 157
	mov	DWORD PTR _r$[ebp], -5			; fffffffbH
$LN38@inflate:
; Line 158
	mov	eax, 1
	test	eax, eax
	je	$LN41@inflate
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv74[ebp], eax
	cmp	DWORD PTR tv74[ebp], 13			; 0000000dH
	ja	$LN1@inflate
	mov	ecx, DWORD PTR tv74[ebp]
	jmp	DWORD PTR $LN47@inflate[ecx*4]
$LN34@inflate:
; Line 161
	mov	edx, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN33@inflate
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN41@inflate
$LN33@inflate:
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 162
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR tv92[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR tv92[ebp]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR tv95[ebp], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx], eax
	cmp	DWORD PTR tv95[ebp], 8
	je	SHORT $LN45@inflate
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN46@inflate
$LN45@inflate:
	mov	DWORD PTR tv128[ebp], 0
$LN46@inflate:
	cmp	DWORD PTR tv128[ebp], 0
	je	SHORT $LN32@inflate
; Line 164
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax], 13			; 0000000dH
; Line 165
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG8144
; Line 166
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+4], 5
; Line 167
	jmp	$LN35@inflate
$LN32@inflate:
; Line 169
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 4
	add	eax, 8
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN31@inflate
; Line 171
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx], 13			; 0000000dH
; Line 172
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG8147
; Line 173
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+4], 5
; Line 174
	jmp	$LN35@inflate
$LN31@inflate:
; Line 176
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax], 1
$LN30@inflate:
; Line 178
	mov	ecx, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN29@inflate
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN41@inflate
$LN29@inflate:
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], edx
; Line 179
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 180
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [ecx+4]
	shl	eax, 8
	add	eax, DWORD PTR _b$[ebp]
	xor	edx, edx
	mov	ecx, 31					; 0000001fH
	div	ecx
	test	edx, edx
	je	SHORT $LN28@inflate
; Line 182
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax], 13			; 0000000dH
; Line 183
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG8152
; Line 184
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+4], 5
; Line 185
	jmp	$LN35@inflate
$LN28@inflate:
; Line 188
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN27@inflate
; Line 190
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax], 7
; Line 191
	jmp	$LN35@inflate
$LN27@inflate:
; Line 193
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx], 2
$LN26@inflate:
; Line 195
	mov	eax, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN25@inflate
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN41@inflate
$LN25@inflate:
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], ecx
; Line 196
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax], edx
; Line 197
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx], 3
$LN24@inflate:
; Line 199
	mov	eax, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN23@inflate
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN41@inflate
$LN23@inflate:
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], ecx
; Line 200
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, BYTE PTR [edx]
	shl	ecx, 16					; 00000010H
	add	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax], edx
; Line 201
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx], 4
$LN22@inflate:
; Line 203
	mov	eax, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN21@inflate
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN41@inflate
$LN21@inflate:
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], ecx
; Line 204
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, BYTE PTR [edx]
	shl	ecx, 8
	add	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax], edx
; Line 205
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx], 5
$LN20@inflate:
; Line 207
	mov	eax, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN19@inflate
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN41@inflate
$LN19@inflate:
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], ecx
; Line 208
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, BYTE PTR [edx]
	add	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax], edx
; Line 209
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+48], ecx
; Line 210
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax], 6
; Line 211
	mov	eax, 2
	jmp	$LN41@inflate
$LN18@inflate:
; Line 213
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx], 13			; 0000000dH
; Line 214
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG8168
; Line 215
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+4], 0
; Line 216
	mov	eax, -2					; fffffffeH
	jmp	$LN41@inflate
$LN17@inflate:
; Line 218
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_inflate_blocks
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
; Line 219
	cmp	DWORD PTR _r$[ebp], -3			; fffffffdH
	jne	SHORT $LN16@inflate
; Line 221
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax], 13			; 0000000dH
; Line 222
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+4], 0
; Line 223
	jmp	$LN35@inflate
$LN16@inflate:
; Line 225
	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN15@inflate
; Line 226
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], eax
$LN15@inflate:
; Line 227
	cmp	DWORD PTR _r$[ebp], 1
	je	SHORT $LN14@inflate
; Line 228
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN41@inflate
$LN14@inflate:
; Line 229
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], ecx
; Line 230
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_inflate_blocks_reset
	add	esp, 12					; 0000000cH
; Line 231
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN13@inflate
; Line 233
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx], 12			; 0000000cH
; Line 234
	jmp	$LN35@inflate
$LN13@inflate:
; Line 236
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx], 8
$LN12@inflate:
; Line 238
	mov	edx, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN11@inflate
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN41@inflate
$LN11@inflate:
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 239
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 240
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx], 9
$LN10@inflate:
; Line 242
	mov	edx, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN9@inflate
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN41@inflate
$LN9@inflate:
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 243
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	eax, BYTE PTR [ecx]
	shl	eax, 16					; 00000010H
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 244
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx], 10			; 0000000aH
$LN8@inflate:
; Line 246
	mov	edx, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN7@inflate
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN41@inflate
$LN7@inflate:
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 247
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	eax, BYTE PTR [ecx]
	shl	eax, 8
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 248
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx], 11			; 0000000bH
$LN6@inflate:
; Line 250
	mov	edx, DWORD PTR _z$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN5@inflate
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN41@inflate
$LN5@inflate:
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 251
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _z$[ebp]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	eax, BYTE PTR [ecx]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 253
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN4@inflate
; Line 255
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax], 13			; 0000000dH
; Line 256
	mov	ecx, DWORD PTR _z$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG8188
; Line 257
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+4], 5
; Line 258
	jmp	SHORT $LN35@inflate
$LN4@inflate:
; Line 261
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx], 12			; 0000000cH
$LN3@inflate:
; Line 263
	mov	eax, 1
	jmp	SHORT $LN41@inflate
$LN2@inflate:
; Line 265
	mov	eax, -3					; fffffffdH
	jmp	SHORT $LN41@inflate
$LN1@inflate:
; Line 267
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN41@inflate
$LN35@inflate:
; Line 268
	jmp	$LN38@inflate
$LN41@inflate:
; Line 272
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN47@inflate:
	DD	$LN34@inflate
	DD	$LN30@inflate
	DD	$LN26@inflate
	DD	$LN24@inflate
	DD	$LN22@inflate
	DD	$LN20@inflate
	DD	$LN18@inflate
	DD	$LN17@inflate
	DD	$LN12@inflate
	DD	$LN10@inflate
	DD	$LN8@inflate
	DD	$LN6@inflate
	DD	$LN3@inflate
	DD	$LN2@inflate
_inflate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_err$ = -68						; size = 4
_stream$ = -60						; size = 56
_memory$ = 8						; size = 4
_output$ = 12						; size = 4
_output_len$ = 16					; size = 4
_input$ = 20						; size = 4
_input_len$ = 24					; size = 4
_FT_Gzip_Uncompress PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 706
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 713
	cmp	DWORD PTR _memory$[ebp], 0
	je	SHORT $LN8@FT_Gzip_Un
	cmp	DWORD PTR _output_len$[ebp], 0
	je	SHORT $LN8@FT_Gzip_Un
	cmp	DWORD PTR _output$[ebp], 0
	jne	SHORT $LN9@FT_Gzip_Un
$LN8@FT_Gzip_Un:
; Line 714
	push	OFFSET $SG8514
	push	714					; 000002caH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN10@FT_Gzip_Un
$LN9@FT_Gzip_Un:
; Line 718
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR _stream$[ebp], eax
; Line 719
	mov	ecx, DWORD PTR _input_len$[ebp]
	mov	DWORD PTR _stream$[ebp+4], ecx
; Line 721
	mov	edx, DWORD PTR _output$[ebp]
	mov	DWORD PTR _stream$[ebp+12], edx
; Line 722
	mov	eax, DWORD PTR _output_len$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _stream$[ebp+16], ecx
; Line 724
	mov	DWORD PTR _stream$[ebp+32], OFFSET _ft_gzip_alloc
; Line 725
	mov	DWORD PTR _stream$[ebp+36], OFFSET _ft_gzip_free
; Line 726
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR _stream$[ebp+40], edx
; Line 728
	push	56					; 00000038H
	push	OFFSET $SG8521
	push	15					; 0000000fH
	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_inflateInit2_
	add	esp, 16					; 00000010H
	mov	DWORD PTR _err$[ebp], eax
; Line 729
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN7@FT_Gzip_Un
; Line 730
	push	OFFSET $SG8523
	push	730					; 000002daH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN10@FT_Gzip_Un
$LN7@FT_Gzip_Un:
; Line 732
	push	4
	lea	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_inflate
	add	esp, 8
	mov	DWORD PTR _err$[ebp], eax
; Line 733
	cmp	DWORD PTR _err$[ebp], 1
	je	SHORT $LN6@FT_Gzip_Un
; Line 735
	lea	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_inflateEnd
	add	esp, 4
; Line 736
	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN5@FT_Gzip_Un
; Line 737
	mov	DWORD PTR _err$[ebp], -5		; fffffffbH
$LN5@FT_Gzip_Un:
; Line 739
	jmp	SHORT $LN4@FT_Gzip_Un
$LN6@FT_Gzip_Un:
; Line 741
	mov	eax, DWORD PTR _output_len$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp+20]
	mov	DWORD PTR [eax], ecx
; Line 743
	lea	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_inflateEnd
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
$LN4@FT_Gzip_Un:
; Line 746
	cmp	DWORD PTR _err$[ebp], -4		; fffffffcH
	jne	SHORT $LN3@FT_Gzip_Un
; Line 747
	push	OFFSET $SG8528
	push	747					; 000002ebH
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	jmp	SHORT $LN10@FT_Gzip_Un
$LN3@FT_Gzip_Un:
; Line 749
	cmp	DWORD PTR _err$[ebp], -5		; fffffffbH
	jne	SHORT $LN2@FT_Gzip_Un
; Line 750
	push	OFFSET $SG8530
	push	750					; 000002eeH
	push	10					; 0000000aH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 10					; 0000000aH
	jmp	SHORT $LN10@FT_Gzip_Un
$LN2@FT_Gzip_Un:
; Line 752
	cmp	DWORD PTR _err$[ebp], -3		; fffffffdH
	jne	SHORT $LN1@FT_Gzip_Un
; Line 753
	push	OFFSET $SG8532
	push	753					; 000002f1H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	jmp	SHORT $LN10@FT_Gzip_Un
$LN1@FT_Gzip_Un:
; Line 755
	xor	eax, eax
$LN10@FT_Gzip_Un:
; Line 756
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@FT_Gzip_Un
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@FT_Gzip_Un:
	DD	1
	DD	$LN13@FT_Gzip_Un
$LN13@FT_Gzip_Un:
	DD	-60					; ffffffc4H
	DD	56					; 00000038H
	DD	$LN12@FT_Gzip_Un
$LN12@FT_Gzip_Un:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_FT_Gzip_Uncompress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_count$1 = -32						; size = 4
_zip_buff$2 = -28					; size = 4
_zip_size$3 = -24					; size = 4
_zip$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_stream$ = 8						; size = 4
_source$ = 12						; size = 4
_FT_Stream_OpenGzip PROC
; File d:\mozilla\modules\freetype2\src\gzip\ftgzip.c
; Line 604
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 607
	mov	DWORD PTR _zip$[ebp], 0
; Line 610
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN16@FT_Stream_
	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN17@FT_Stream_
$LN16@FT_Stream_:
; Line 612
	push	OFFSET $SG8470
	push	612					; 00000264H
	push	40					; 00000028H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 40					; 00000028H
	mov	DWORD PTR _error$[ebp], eax
; Line 613
	jmp	$Exit$23
$LN17@FT_Stream_:
; Line 616
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 622
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	_ft_gzip_check_header
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 623
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@FT_Stream_
; Line 624
	jmp	$Exit$23
$LN15@FT_Stream_:
; Line 626
	push	40					; 00000028H
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 627
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 629
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	8276					; 00002054H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_qalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _zip$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN14@FT_Stream_
; Line 631
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zip$[ebp]
	push	ecx
	call	_ft_gzip_file_init
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 632
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@FT_Stream_
$LN12@FT_Stream_:
; Line 634
	mov	edx, DWORD PTR _zip$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _zip$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN12@FT_Stream_
; Line 635
	jmp	$Exit$23
$LN13@FT_Stream_:
; Line 638
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _zip$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN14@FT_Stream_:
; Line 650
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	call	_ft_gzip_get_uncompressed_size
	add	esp, 4
	mov	DWORD PTR _zip_size$3[ebp], eax
; Line 653
	cmp	DWORD PTR _zip_size$3[ebp], 0
	je	$LN9@FT_Stream_
	cmp	DWORD PTR _zip_size$3[ebp], 40960	; 0000a000H
	jae	$LN9@FT_Stream_
; Line 655
	mov	DWORD PTR _zip_buff$2[ebp], 0
; Line 658
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _zip_size$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _zip_buff$2[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN8@FT_Stream_
; Line 663
	mov	edx, DWORD PTR _zip_size$3[ebp]
	push	edx
	mov	eax, DWORD PTR _zip_buff$2[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _zip$[ebp]
	push	ecx
	call	_ft_gzip_file_io
	add	esp, 16					; 00000010H
	mov	DWORD PTR _count$1[ebp], eax
; Line 664
	mov	edx, DWORD PTR _count$1[ebp]
	cmp	edx, DWORD PTR _zip_size$3[ebp]
	jne	SHORT $LN7@FT_Stream_
; Line 666
	mov	eax, DWORD PTR _zip$[ebp]
	push	eax
	call	_ft_gzip_file_done
	add	esp, 4
$LN6@FT_Stream_:
; Line 667
	mov	ecx, DWORD PTR _zip$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _zip$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN6@FT_Stream_
; Line 669
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 671
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _zip_size$3[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 672
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 673
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _zip_buff$2[ebp]
	mov	DWORD PTR [edx], eax
; Line 674
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 675
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+24], OFFSET _ft_gzip_stream_close
; Line 677
	jmp	SHORT $Exit$23
$LN7@FT_Stream_:
; Line 680
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _zip$[ebp]
	push	eax
	call	_ft_gzip_file_io
	add	esp, 16					; 00000010H
$LN3@FT_Stream_:
; Line 681
	mov	ecx, DWORD PTR _zip_buff$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _zip_buff$2[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@FT_Stream_
$LN8@FT_Stream_:
; Line 683
	mov	DWORD PTR _error$[ebp], 0
$LN9@FT_Stream_:
; Line 687
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], 2147483647		; 7fffffffH
; Line 688
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 689
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 690
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+20], OFFSET _ft_gzip_stream_io
; Line 691
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+24], OFFSET _ft_gzip_stream_close
$Exit$23:
; Line 694
	mov	eax, DWORD PTR _error$[ebp]
; Line 695
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@FT_Stream_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@FT_Stream_:
	DD	1
	DD	$LN21@FT_Stream_
$LN21@FT_Stream_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN20@FT_Stream_
$LN20@FT_Stream_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_Stream_OpenGzip ENDP
_TEXT	ENDS
END
