; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\smooth\smooth.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_ft_smooth_renderer_class
PUBLIC	_ft_smooth_lcd_renderer_class
PUBLIC	_ft_grays_raster
PUBLIC	_ft_smooth_lcdv_renderer_class
CONST	SEGMENT
_func_interface DD FLAT:_gray_move_to
	DD	FLAT:_gray_line_to
	DD	FLAT:_gray_conic_to
	DD	FLAT:_gray_cubic_to
	DD	00H
	DD	00H
_ft_smooth_renderer_class DD 02H
	DD	040H
	DD	FLAT:$SG8109
	DD	010000H
	DD	020000H
	DD	00H
	DD	FLAT:_ft_smooth_init
	DD	00H
	DD	00H
	DD	06f75746cH
	DD	FLAT:_ft_smooth_render
	DD	FLAT:_ft_smooth_transform
	DD	FLAT:_ft_smooth_get_cbox
	DD	FLAT:_ft_smooth_set_mode
	DD	FLAT:_ft_grays_raster
_ft_smooth_lcd_renderer_class DD 02H
	DD	040H
	DD	FLAT:$SG8119
	DD	010000H
	DD	020000H
	DD	00H
	DD	FLAT:_ft_smooth_init
	DD	00H
	DD	00H
	DD	06f75746cH
	DD	FLAT:_ft_smooth_render_lcd
	DD	FLAT:_ft_smooth_transform
	DD	FLAT:_ft_smooth_get_cbox
	DD	FLAT:_ft_smooth_set_mode
	DD	FLAT:_ft_grays_raster
_ft_grays_raster DD 06f75746cH
	DD	FLAT:_gray_raster_new
	DD	FLAT:_gray_raster_reset
	DD	FLAT:_gray_raster_set_mode
	DD	FLAT:_gray_raster_render
	DD	FLAT:_gray_raster_done
_ft_smooth_lcdv_renderer_class DD 02H
	DD	040H
	DD	FLAT:$SG8130
	DD	010000H
	DD	020000H
	DD	00H
	DD	FLAT:_ft_smooth_init
	DD	00H
	DD	00H
	DD	06f75746cH
	DD	FLAT:_ft_smooth_render_lcd_v
	DD	FLAT:_ft_smooth_transform
	DD	FLAT:_ft_smooth_get_cbox
	DD	FLAT:_ft_smooth_set_mode
	DD	FLAT:_ft_grays_raster
CONST	ENDS
_DATA	SEGMENT
$SG7653	DB	'y = %3d ', 00H
	ORG $+3
$SG7661	DB	'[%d..%d]:%02x ', 00H
	ORG $+1
$SG7666	DB	0aH, 00H
	ORG $+2
$SG7681	DB	'%3d:', 00H
	ORG $+3
$SG7686	DB	' (%3ld, c:%4ld, a:%6d)', 00H
	ORG $+1
$SG7687	DB	0aH, 00H
	ORG $+2
$SG7700	DB	'gray_sweep: start', 0aH, 00H
	ORG $+1
$SG7723	DB	'y = %3d ', 00H
	ORG $+3
$SG7731	DB	'[%d..%d]:%02x ', 00H
	ORG $+1
$SG7736	DB	0aH, 00H
	ORG $+2
$SG7741	DB	'gray_sweep: end', 0aH, 00H
	ORG $+3
$SG7760	DB	'd:\mozilla\modules\freetype2\src\smooth\ftgrays.c', 00H
	ORG $+2
$SG7824	DB	'gray_convert_glyph: rotten glyph', 0aH, 00H
	ORG $+2
$SG7839	DB	'd:\mozilla\modules\freetype2\src\smooth\ftgrays.c', 00H
	ORG $+2
$SG7841	DB	'd:\mozilla\modules\freetype2\src\smooth\ftgrays.c', 00H
	ORG $+2
$SG7846	DB	'd:\mozilla\modules\freetype2\src\smooth\ftgrays.c', 00H
	ORG $+2
$SG7848	DB	'd:\mozilla\modules\freetype2\src\smooth\ftgrays.c', 00H
	ORG $+2
$SG7851	DB	'd:\mozilla\modules\freetype2\src\smooth\ftgrays.c', 00H
	ORG $+2
$SG7855	DB	'd:\mozilla\modules\freetype2\src\smooth\ftgrays.c', 00H
	ORG $+2
$SG7857	DB	'd:\mozilla\modules\freetype2\src\smooth\ftgrays.c', 00H
	ORG $+2
$SG7962	DB	'd:\mozilla\modules\freetype2\src\smooth\ftsmooth.c', 00H
	ORG $+1
$SG8007	DB	'd:\mozilla\modules\freetype2\src\smooth\ftsmooth.c', 00H
	ORG $+1
$SG8010	DB	'd:\mozilla\modules\freetype2\src\smooth\ftsmooth.c', 00H
	ORG $+1
$SG8018	DB	'd:\mozilla\modules\freetype2\src\smooth\ftsmooth.c', 00H
	ORG $+1
$SG8021	DB	'ft_smooth_render_generic: glyph too large: %u x %u', 0aH
	DB	00H
$SG8022	DB	'd:\mozilla\modules\freetype2\src\smooth\ftsmooth.c', 00H
	ORG $+1
$SG8109	DB	'smooth', 00H
	ORG $+1
$SG8119	DB	'smooth-lcd', 00H
	ORG $+1
$SG8130	DB	'smooth-lcdv', 00H
_DATA	ENDS
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__longjmp:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_FT_Outline_Decompose:PROC
EXTRN	_FT_Outline_Get_CBox:PROC
EXTRN	_FT_Outline_Translate:PROC
EXTRN	_FT_Outline_Transform:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__setjmp3:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_render$ = 8						; size = 4
_slot$ = 12						; size = 4
_mode$ = 16						; size = 4
_origin$ = 20						; size = 4
_ft_smooth_render_lcd_v PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftsmooth.c
; Line 419
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 423
	push	4
	mov	eax, DWORD PTR _origin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	mov	eax, DWORD PTR _render$[ebp]
	push	eax
	call	_ft_smooth_render_generic
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 424
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ft_smooth_
; Line 425
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	BYTE PTR [ecx+94], 6
$LN1@ft_smooth_:
; Line 427
	mov	eax, DWORD PTR _error$[ebp]
; Line 428
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_smooth_render_lcd_v ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_render$ = 8						; size = 4
_slot$ = 12						; size = 4
_mode$ = 16						; size = 4
_origin$ = 20						; size = 4
_ft_smooth_render_lcd PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftsmooth.c
; Line 401
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 405
	push	3
	mov	eax, DWORD PTR _origin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	mov	eax, DWORD PTR _render$[ebp]
	push	eax
	call	_ft_smooth_render_generic
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 406
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ft_smooth_
; Line 407
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	BYTE PTR [ecx+94], 5
$LN1@ft_smooth_:
; Line 409
	mov	eax, DWORD PTR _error$[ebp]
; Line 410
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_smooth_render_lcd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_render$ = 8						; size = 4
_slot$ = 12						; size = 4
_mode$ = 16						; size = 4
_origin$ = 20						; size = 4
_ft_smooth_render PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftsmooth.c
; Line 386
	push	ebp
	mov	ebp, esp
; Line 387
	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN1@ft_smooth_
; Line 388
	mov	DWORD PTR _mode$[ebp], 0
$LN1@ft_smooth_:
; Line 391
	push	0
	mov	eax, DWORD PTR _origin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	mov	eax, DWORD PTR _render$[ebp]
	push	eax
	call	_ft_smooth_render_generic
	add	esp, 20					; 00000014H
; Line 392
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_smooth_render ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -196						; size = 4
tv68 = -192						; size = 4
_hh$1 = -188						; size = 4
_write$2 = -184						; size = 4
_read$3 = -180						; size = 4
_pixel$4 = -176						; size = 4
_end$5 = -172						; size = 4
_xx$6 = -168						; size = 4
_hh$7 = -164						; size = 4
_line$8 = -160						; size = 4
_have_buffer$ = -154					; size = 1
_have_outline_shifted$ = -153				; size = 1
_params$ = -148						; size = 48
_vmul$ = -96						; size = 4
_hmul$ = -92						; size = 4
_width_org$ = -88					; size = 4
_height_org$ = -84					; size = 4
_pitch$ = -80						; size = 4
_height$ = -76						; size = 4
_width$ = -72						; size = 4
_y_top$ = -68						; size = 4
_x_left$ = -64						; size = 4
_y_shift$ = -60						; size = 4
_x_shift$ = -56						; size = 4
_cbox$ = -48						; size = 16
_memory$ = -28						; size = 4
_bitmap$ = -24						; size = 4
_outline$ = -20						; size = 4
_error$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_render$ = 8						; size = 4
_slot$ = 12						; size = 4
_mode$ = 16						; size = 4
_origin$ = 20						; size = 4
_required_mode$ = 24					; size = 4
_ft_smooth_render_generic PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftsmooth.c
; Line 104
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 106
	mov	eax, DWORD PTR _slot$[ebp]
	add	eax, 108				; 0000006cH
	mov	DWORD PTR _outline$[ebp], eax
; Line 107
	mov	ecx, DWORD PTR _slot$[ebp]
	add	ecx, 76					; 0000004cH
	mov	DWORD PTR _bitmap$[ebp], ecx
; Line 108
	mov	edx, DWORD PTR _render$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _memory$[ebp], eax
; Line 110
	mov	DWORD PTR _x_shift$[ebp], 0
; Line 111
	mov	DWORD PTR _y_shift$[ebp], 0
; Line 117
	cmp	DWORD PTR _mode$[ebp], 3
	jne	SHORT $LN37@ft_smooth_
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN38@ft_smooth_
$LN37@ft_smooth_:
	mov	DWORD PTR tv68[ebp], 0
$LN38@ft_smooth_:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _hmul$[ebp], ecx
; Line 118
	cmp	DWORD PTR _mode$[ebp], 4
	jne	SHORT $LN39@ft_smooth_
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN40@ft_smooth_
$LN39@ft_smooth_:
	mov	DWORD PTR tv70[ebp], 0
$LN40@ft_smooth_:
	mov	edx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _vmul$[ebp], edx
; Line 122
	mov	BYTE PTR _have_outline_shifted$[ebp], 0
; Line 123
	mov	BYTE PTR _have_buffer$[ebp], 0
; Line 127
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR _render$[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN34@ft_smooth_
; Line 129
	push	OFFSET $SG8007
	push	129					; 00000081H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 130
	jmp	$Exit$46
$LN34@ft_smooth_:
; Line 134
	mov	eax, DWORD PTR _mode$[ebp]
	cmp	eax, DWORD PTR _required_mode$[ebp]
	je	SHORT $LN33@ft_smooth_
; Line 136
	push	OFFSET $SG8010
	push	136					; 00000088H
	push	19					; 00000013H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 19					; 00000013H
	mov	DWORD PTR _error$[ebp], eax
; Line 137
	jmp	$Exit$46
$LN33@ft_smooth_:
; Line 140
	cmp	DWORD PTR _origin$[ebp], 0
	je	SHORT $LN32@ft_smooth_
; Line 142
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _x_shift$[ebp], edx
; Line 143
	mov	eax, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _y_shift$[ebp], ecx
$LN32@ft_smooth_:
; Line 148
	lea	edx, DWORD PTR _cbox$[ebp]
	push	edx
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	call	_FT_Outline_Get_CBox
	add	esp, 8
; Line 150
	mov	ecx, DWORD PTR _cbox$[ebp]
	add	ecx, DWORD PTR _x_shift$[ebp]
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _cbox$[ebp], ecx
; Line 151
	mov	edx, DWORD PTR _cbox$[ebp+4]
	add	edx, DWORD PTR _y_shift$[ebp]
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _cbox$[ebp+4], edx
; Line 152
	mov	eax, DWORD PTR _x_shift$[ebp]
	mov	ecx, DWORD PTR _cbox$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax+63]
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _cbox$[ebp+8], edx
; Line 153
	mov	eax, DWORD PTR _y_shift$[ebp]
	mov	ecx, DWORD PTR _cbox$[ebp+12]
	lea	edx, DWORD PTR [ecx+eax+63]
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _cbox$[ebp+12], edx
; Line 155
	mov	eax, DWORD PTR _x_shift$[ebp]
	sub	eax, DWORD PTR _cbox$[ebp]
	mov	DWORD PTR _x_shift$[ebp], eax
; Line 156
	mov	ecx, DWORD PTR _y_shift$[ebp]
	sub	ecx, DWORD PTR _cbox$[ebp+4]
	mov	DWORD PTR _y_shift$[ebp], ecx
; Line 158
	mov	edx, DWORD PTR _cbox$[ebp]
	sar	edx, 6
	mov	DWORD PTR _x_left$[ebp], edx
; Line 159
	mov	eax, DWORD PTR _cbox$[ebp+12]
	sar	eax, 6
	mov	DWORD PTR _y_top$[ebp], eax
; Line 161
	mov	ecx, DWORD PTR _cbox$[ebp+8]
	sub	ecx, DWORD PTR _cbox$[ebp]
	shr	ecx, 6
	mov	DWORD PTR _width$[ebp], ecx
; Line 162
	mov	edx, DWORD PTR _cbox$[ebp+12]
	sub	edx, DWORD PTR _cbox$[ebp+4]
	shr	edx, 6
	mov	DWORD PTR _height$[ebp], edx
; Line 165
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR _width_org$[ebp], eax
; Line 166
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _height_org$[ebp], ecx
; Line 169
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _pitch$[ebp], edx
; Line 170
	cmp	DWORD PTR _hmul$[ebp], 0
	je	SHORT $LN31@ft_smooth_
; Line 172
	imul	eax, DWORD PTR _width$[ebp], 3
	mov	DWORD PTR _width$[ebp], eax
; Line 173
	mov	ecx, DWORD PTR _width$[ebp]
	add	ecx, 3
	and	ecx, -4					; fffffffcH
	mov	DWORD PTR _pitch$[ebp], ecx
$LN31@ft_smooth_:
; Line 176
	cmp	DWORD PTR _vmul$[ebp], 0
	je	SHORT $LN30@ft_smooth_
; Line 177
	imul	edx, DWORD PTR _height$[ebp], 3
	mov	DWORD PTR _height$[ebp], edx
$LN30@ft_smooth_:
; Line 209
	cmp	DWORD PTR _x_left$[ebp], 2147483647	; 7fffffffH
	jg	SHORT $LN28@ft_smooth_
	cmp	DWORD PTR _y_top$[ebp], 2147483647	; 7fffffffH
	jg	SHORT $LN28@ft_smooth_
	cmp	DWORD PTR _x_left$[ebp], -2147483648	; 80000000H
	jl	SHORT $LN28@ft_smooth_
	cmp	DWORD PTR _y_top$[ebp], -2147483648	; 80000000H
	jge	SHORT $LN29@ft_smooth_
$LN28@ft_smooth_:
; Line 211
	push	OFFSET $SG8018
	push	211					; 000000d3H
	push	23					; 00000017H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 23					; 00000017H
	mov	DWORD PTR _error$[ebp], eax
; Line 212
	jmp	$Exit$46
$LN29@ft_smooth_:
; Line 217
	cmp	DWORD PTR _width$[ebp], 32767		; 00007fffH
	jg	SHORT $LN26@ft_smooth_
	cmp	DWORD PTR _height$[ebp], 32767		; 00007fffH
	jle	SHORT $LN27@ft_smooth_
$LN26@ft_smooth_:
; Line 220
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	push	OFFSET $SG8021
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 221
	push	OFFSET $SG8022
	push	221					; 000000ddH
	push	98					; 00000062H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 98					; 00000062H
	mov	DWORD PTR _error$[ebp], eax
; Line 222
	jmp	$Exit$46
$LN27@ft_smooth_:
; Line 226
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 1
	je	SHORT $LN25@ft_smooth_
$LN24@ft_smooth_:
; Line 228
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [edx+12], 0
	xor	eax, eax
	jne	SHORT $LN24@ft_smooth_
; Line 229
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR [edx+4]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR [edx+4], eax
$LN25@ft_smooth_:
; Line 233
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitch$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@ft_smooth_
; Line 234
	jmp	$Exit$46
; Line 235
	jmp	SHORT $LN20@ft_smooth_
$LN21@ft_smooth_:
; Line 236
	mov	BYTE PTR _have_buffer$[ebp], 1
$LN20@ft_smooth_:
; Line 238
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 1
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	DWORD PTR [eax+4], ecx
; Line 240
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+72], 1651078259		; 62697473H
; Line 241
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR _x_left$[ebp]
	mov	DWORD PTR [edx+100], eax
; Line 242
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR _y_top$[ebp]
	mov	DWORD PTR [ecx+104], edx
; Line 244
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	BYTE PTR [eax+18], 2
; Line 245
	mov	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	WORD PTR [edx+16], cx
; Line 246
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 247
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR [edx], eax
; Line 248
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 251
	cmp	DWORD PTR _x_shift$[ebp], 0
	jne	SHORT $LN18@ft_smooth_
	cmp	DWORD PTR _y_shift$[ebp], 0
	je	SHORT $LN19@ft_smooth_
$LN18@ft_smooth_:
; Line 253
	mov	eax, DWORD PTR _y_shift$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_shift$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outline$[ebp]
	push	edx
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
; Line 254
	mov	BYTE PTR _have_outline_shifted$[ebp], 1
$LN19@ft_smooth_:
; Line 258
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR _params$[ebp], eax
; Line 259
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	DWORD PTR _params$[ebp+4], ecx
; Line 260
	mov	DWORD PTR _params$[ebp+8], 1
; Line 308
	mov	esi, esp
	lea	edx, DWORD PTR _params$[ebp]
	push	edx
	mov	eax, DWORD PTR _render$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _render$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 309
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@ft_smooth_
; Line 310
	jmp	$Exit$46
$LN17@ft_smooth_:
; Line 313
	cmp	DWORD PTR _hmul$[ebp], 0
	je	$LN16@ft_smooth_
; Line 315
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _line$8[ebp], edx
; Line 319
	mov	eax, DWORD PTR _height_org$[ebp]
	mov	DWORD PTR _hh$7[ebp], eax
	jmp	SHORT $LN15@ft_smooth_
$LN14@ft_smooth_:
	mov	ecx, DWORD PTR _hh$7[ebp]
	sub	ecx, 1
	mov	DWORD PTR _hh$7[ebp], ecx
	mov	edx, DWORD PTR _line$8[ebp]
	add	edx, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR _line$8[ebp], edx
$LN15@ft_smooth_:
	cmp	DWORD PTR _hh$7[ebp], 0
	jbe	$LN16@ft_smooth_
; Line 322
	mov	eax, DWORD PTR _line$8[ebp]
	add	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR _end$5[ebp], eax
; Line 325
	mov	ecx, DWORD PTR _width_org$[ebp]
	mov	DWORD PTR _xx$6[ebp], ecx
	jmp	SHORT $LN12@ft_smooth_
$LN11@ft_smooth_:
	mov	edx, DWORD PTR _xx$6[ebp]
	sub	edx, 1
	mov	DWORD PTR _xx$6[ebp], edx
$LN12@ft_smooth_:
	cmp	DWORD PTR _xx$6[ebp], 0
	jbe	SHORT $LN10@ft_smooth_
; Line 327
	mov	eax, DWORD PTR _line$8[ebp]
	add	eax, DWORD PTR _xx$6[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	mov	DWORD PTR _pixel$4[ebp], ecx
; Line 330
	mov	edx, 1
	imul	eax, edx, -3
	mov	ecx, DWORD PTR _end$5[ebp]
	mov	dl, BYTE PTR _pixel$4[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 331
	mov	eax, 1
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _end$5[ebp]
	mov	al, BYTE PTR _pixel$4[ebp]
	mov	BYTE PTR [edx+ecx], al
; Line 332
	mov	ecx, 1
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _end$5[ebp]
	mov	cl, BYTE PTR _pixel$4[ebp]
	mov	BYTE PTR [eax+edx], cl
; Line 333
	mov	edx, DWORD PTR _end$5[ebp]
	sub	edx, 3
	mov	DWORD PTR _end$5[ebp], edx
; Line 334
	jmp	$LN11@ft_smooth_
$LN10@ft_smooth_:
; Line 335
	jmp	$LN14@ft_smooth_
$LN16@ft_smooth_:
; Line 339
	cmp	DWORD PTR _vmul$[ebp], 0
	je	$LN9@ft_smooth_
; Line 341
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, DWORD PTR _height_org$[ebp]
	imul	eax, DWORD PTR _pitch$[ebp]
	mov	ecx, DWORD PTR _bitmap$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _read$3[ebp], eax
; Line 342
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _write$2[ebp], eax
; Line 346
	mov	ecx, DWORD PTR _height_org$[ebp]
	mov	DWORD PTR _hh$1[ebp], ecx
	jmp	SHORT $LN8@ft_smooth_
$LN7@ft_smooth_:
	mov	edx, DWORD PTR _hh$1[ebp]
	sub	edx, 1
	mov	DWORD PTR _hh$1[ebp], edx
$LN8@ft_smooth_:
	cmp	DWORD PTR _hh$1[ebp], 0
	jbe	$LN9@ft_smooth_
; Line 348
	mov	eax, DWORD PTR _pitch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _read$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _write$2[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 349
	mov	eax, DWORD PTR _write$2[ebp]
	add	eax, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR _write$2[ebp], eax
; Line 351
	mov	ecx, DWORD PTR _pitch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _read$3[ebp]
	push	edx
	mov	eax, DWORD PTR _write$2[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 352
	mov	ecx, DWORD PTR _write$2[ebp]
	add	ecx, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR _write$2[ebp], ecx
; Line 354
	mov	edx, DWORD PTR _pitch$[ebp]
	push	edx
	mov	eax, DWORD PTR _read$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _write$2[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 355
	mov	edx, DWORD PTR _write$2[ebp]
	add	edx, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR _write$2[ebp], edx
; Line 356
	mov	eax, DWORD PTR _read$3[ebp]
	add	eax, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR _read$3[ebp], eax
; Line 357
	jmp	$LN7@ft_smooth_
$LN9@ft_smooth_:
; Line 363
	mov	BYTE PTR _have_buffer$[ebp], 0
; Line 365
	mov	DWORD PTR _error$[ebp], 0
$Exit$46:
; Line 368
	movzx	ecx, BYTE PTR _have_outline_shifted$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@ft_smooth_
; Line 369
	mov	edx, DWORD PTR _y_shift$[ebp]
	neg	edx
	push	edx
	mov	eax, DWORD PTR _x_shift$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _outline$[ebp]
	push	ecx
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
$LN5@ft_smooth_:
; Line 370
	movzx	edx, BYTE PTR _have_buffer$[ebp]
	test	edx, edx
	je	SHORT $LN4@ft_smooth_
$LN3@ft_smooth_:
; Line 372
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [eax+12], 0
	xor	ecx, ecx
	jne	SHORT $LN3@ft_smooth_
; Line 373
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	DWORD PTR [eax+4], ecx
$LN4@ft_smooth_:
; Line 376
	mov	eax, DWORD PTR _error$[ebp]
; Line 377
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@ft_smooth_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN45@ft_smooth_:
	DD	3
	DD	$LN44@ft_smooth_
$LN44@ft_smooth_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN41@ft_smooth_
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN42@ft_smooth_
	DD	-148					; ffffff6cH
	DD	48					; 00000030H
	DD	$LN43@ft_smooth_
$LN43@ft_smooth_:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN42@ft_smooth_:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
$LN41@ft_smooth_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_smooth_render_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_render$ = 8						; size = 4
_slot$ = 12						; size = 4
_cbox$ = 16						; size = 4
_ft_smooth_get_cbox PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftsmooth.c
; Line 89
	push	ebp
	mov	ebp, esp
; Line 90
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _cbox$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 92
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR _render$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	cmp	eax, DWORD PTR [edx+16]
	jne	SHORT $LN2@ft_smooth_
; Line 93
	mov	ecx, DWORD PTR _cbox$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_FT_Outline_Get_CBox
	add	esp, 8
$LN2@ft_smooth_:
; Line 94
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_smooth_get_cbox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_render$ = 8						; size = 4
_slot$ = 12						; size = 4
_matrix$ = 16						; size = 4
_delta$ = 20						; size = 4
_ft_smooth_transform PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftsmooth.c
; Line 63
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 64
	mov	DWORD PTR _error$[ebp], 0
; Line 67
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR _render$[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN3@ft_smooth_
; Line 69
	push	OFFSET $SG7962
	push	69					; 00000045H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 70
	jmp	SHORT $Exit$6
$LN3@ft_smooth_:
; Line 73
	cmp	DWORD PTR _matrix$[ebp], 0
	je	SHORT $LN2@ft_smooth_
; Line 74
	mov	eax, DWORD PTR _matrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_FT_Outline_Transform
	add	esp, 8
$LN2@ft_smooth_:
; Line 76
	cmp	DWORD PTR _delta$[ebp], 0
	je	SHORT $Exit$6
; Line 77
	mov	edx, DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
$Exit$6:
; Line 80
	mov	eax, DWORD PTR _error$[ebp]
; Line 81
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_smooth_transform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_render$ = 8						; size = 4
_mode_tag$ = 12						; size = 4
_data$ = 16						; size = 4
_ft_smooth_set_mode PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftsmooth.c
; Line 50
	push	ebp
	mov	ebp, esp
	push	esi
; Line 54
	mov	esi, esp
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode_tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _render$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _render$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 55
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_smooth_set_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = -4						; size = 4
_render$ = 8						; size = 4
_ft_smooth_init PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftsmooth.c
; Line 33
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 34
	mov	eax, DWORD PTR _render$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _library$[ebp], ecx
; Line 39
	mov	esi, esp
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx+168]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	mov	eax, DWORD PTR _render$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _render$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 41
	xor	eax, eax
; Line 42
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_smooth_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_raster$ = 8						; size = 4
_mode$ = 12						; size = 4
_args$ = 16						; size = 4
_gray_raster_set_mode PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 2107
	push	ebp
	mov	ebp, esp
; Line 2108
	mov	eax, DWORD PTR _raster$[ebp]
	mov	DWORD PTR _raster$[ebp], eax
; Line 2109
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR _mode$[ebp], ecx
; Line 2110
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR _args$[ebp], edx
; Line 2113
	xor	eax, eax
; Line 2114
	pop	ebp
	ret	0
_gray_raster_set_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_worker$1 = -8						; size = 4
_rast$ = -4						; size = 4
_raster$ = 8						; size = 4
_pool_base$ = 12					; size = 4
_pool_size$ = 16					; size = 4
_gray_raster_reset PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 2071
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2072
	mov	eax, DWORD PTR _raster$[ebp]
	mov	DWORD PTR _rast$[ebp], eax
; Line 2075
	cmp	DWORD PTR _raster$[ebp], 0
	je	SHORT $LN4@gray_raste
; Line 2077
	cmp	DWORD PTR _pool_base$[ebp], 0
	je	SHORT $LN2@gray_raste
	cmp	DWORD PTR _pool_size$[ebp], 3384	; 00000d38H
	jl	SHORT $LN2@gray_raste
; Line 2079
	mov	ecx, DWORD PTR _pool_base$[ebp]
	mov	DWORD PTR _worker$1[ebp], ecx
; Line 2082
	mov	edx, DWORD PTR _rast$[ebp]
	mov	eax, DWORD PTR _worker$1[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 2086
	mov	ecx, DWORD PTR _pool_base$[ebp]
	add	ecx, 1344				; 00000540H
	mov	edx, DWORD PTR _rast$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 2089
	mov	eax, DWORD PTR _pool_base$[ebp]
	add	eax, DWORD PTR _pool_size$[ebp]
	mov	ecx, DWORD PTR _rast$[ebp]
	sub	eax, DWORD PTR [ecx]
	and	eax, -16				; fffffff0H
	mov	edx, DWORD PTR _rast$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 2091
	mov	eax, DWORD PTR _rast$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shr	ecx, 7
	mov	edx, DWORD PTR _rast$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 2093
	jmp	SHORT $LN4@gray_raste
$LN2@gray_raste:
; Line 2095
	mov	eax, DWORD PTR _rast$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2096
	mov	ecx, DWORD PTR _rast$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 2097
	mov	edx, DWORD PTR _rast$[ebp]
	mov	DWORD PTR [edx+16], 0
$LN4@gray_raste:
; Line 2100
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_raster_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_raster$ = 8						; size = 4
_gray_raster_done PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 2057
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2058
	mov	eax, DWORD PTR _raster$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _memory$[ebp], ecx
$LN3@gray_raste:
; Line 2061
	mov	edx, DWORD PTR _raster$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _raster$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@gray_raste
; Line 2062
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_raster_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_raster$ = -16						; size = 4
_error$ = -8						; size = 4
_memory$ = 8						; size = 4
_araster$ = 12						; size = 4
_gray_raster_new PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 2039
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2041
	mov	DWORD PTR _raster$[ebp], 0
; Line 2044
	mov	eax, DWORD PTR _araster$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2045
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	20					; 00000014H
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _raster$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@gray_raste
; Line 2047
	mov	eax, DWORD PTR _raster$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 2048
	mov	edx, DWORD PTR _araster$[ebp]
	mov	eax, DWORD PTR _raster$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@gray_raste:
; Line 2051
	mov	eax, DWORD PTR _error$[ebp]
; Line 2052
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@gray_raste
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@gray_raste:
	DD	1
	DD	$LN5@gray_raste
$LN5@gray_raste:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@gray_raste
$LN4@gray_raste:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_gray_raster_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_worker$ = -12						; size = 4
_target_map$ = -8					; size = 4
_outline$ = -4						; size = 4
_raster$ = 8						; size = 4
_params$ = 12						; size = 4
_gray_raster_render PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1920
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1921
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _outline$[ebp], ecx
; Line 1922
	mov	edx, DWORD PTR _params$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _target_map$[ebp], eax
; Line 1926
	cmp	DWORD PTR _raster$[ebp], 0
	je	SHORT $LN19@gray_raste
	mov	ecx, DWORD PTR _raster$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN19@gray_raste
	mov	edx, DWORD PTR _raster$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN20@gray_raste
$LN19@gray_raste:
; Line 1927
	push	OFFSET $SG7839
	push	1927					; 00000787H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN21@gray_raste
$LN20@gray_raste:
; Line 1929
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN18@gray_raste
; Line 1930
	push	OFFSET $SG7841
	push	1930					; 0000078aH
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN21@gray_raste
$LN18@gray_raste:
; Line 1933
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN16@gray_raste
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	test	eax, eax
	jg	SHORT $LN17@gray_raste
$LN16@gray_raste:
; Line 1934
	xor	eax, eax
	jmp	$LN21@gray_raste
$LN17@gray_raste:
; Line 1936
	mov	ecx, DWORD PTR _outline$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN14@gray_raste
	mov	edx, DWORD PTR _outline$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN15@gray_raste
$LN14@gray_raste:
; Line 1937
	push	OFFSET $SG7846
	push	1937					; 00000791H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN21@gray_raste
$LN15@gray_raste:
; Line 1940
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [edx+12]
	movsx	eax, WORD PTR [edx+eax*2-2]
	add	eax, 1
	cmp	ecx, eax
	je	SHORT $LN13@gray_raste
; Line 1941
	push	OFFSET $SG7848
	push	1941					; 00000795H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN21@gray_raste
$LN13@gray_raste:
; Line 1943
	mov	ecx, DWORD PTR _raster$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _worker$[ebp], edx
; Line 1946
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	jne	SHORT $LN12@gray_raste
; Line 1948
	cmp	DWORD PTR _target_map$[ebp], 0
	jne	SHORT $LN11@gray_raste
; Line 1949
	push	OFFSET $SG7851
	push	1949					; 0000079dH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN21@gray_raste
$LN11@gray_raste:
; Line 1952
	mov	edx, DWORD PTR _target_map$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN9@gray_raste
	mov	eax, DWORD PTR _target_map$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@gray_raste
$LN9@gray_raste:
; Line 1953
	xor	eax, eax
	jmp	$LN21@gray_raste
$LN10@gray_raste:
; Line 1955
	mov	ecx, DWORD PTR _target_map$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN12@gray_raste
; Line 1956
	push	OFFSET $SG7855
	push	1956					; 000007a4H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN21@gray_raste
$LN12@gray_raste:
; Line 1960
	mov	edx, DWORD PTR _params$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	jne	SHORT $LN7@gray_raste
; Line 1961
	push	OFFSET $SG7857
	push	1961					; 000007a9H
	push	19					; 00000013H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 19					; 00000013H
	jmp	$LN21@gray_raste
$LN7@gray_raste:
; Line 1964
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 2
	jne	SHORT $LN6@gray_raste
; Line 1967
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+1088], 0
; Line 1968
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+1092], 0
; Line 1969
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _target_map$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+1096], ecx
; Line 1970
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _target_map$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+1100], ecx
	jmp	SHORT $LN5@gray_raste
$LN6@gray_raste:
; Line 1972
	mov	edx, DWORD PTR _params$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 4
	je	SHORT $LN4@gray_raste
; Line 1973
	mov	ecx, DWORD PTR _params$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _worker$[ebp]
	add	edx, 1088				; 00000440H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 1974
	jmp	SHORT $LN5@gray_raste
$LN4@gray_raste:
; Line 1976
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+1088], -32768		; ffff8000H
; Line 1977
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+1092], -32768		; ffff8000H
; Line 1978
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+1096], 32767		; 00007fffH
; Line 1979
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+1100], 32767		; 00007fffH
$LN5@gray_raste:
; Line 1982
	mov	eax, DWORD PTR _raster$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _raster$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_gray_init_cells
	add	esp, 12					; 0000000cH
; Line 1984
	mov	edx, DWORD PTR _worker$[ebp]
	add	edx, 1044				; 00000414H
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax
; Line 1985
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+116], 0
; Line 1986
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+104], 1
; Line 1987
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _raster$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+1312], edx
; Line 1988
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+1296], 0
; Line 1990
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 2
	je	SHORT $LN2@gray_raste
; Line 1992
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+1300], edx
; Line 1993
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+1304], edx
; Line 1995
	jmp	SHORT $LN1@gray_raste
$LN2@gray_raste:
; Line 1997
	mov	eax, DWORD PTR _worker$[ebp]
	add	eax, 1064				; 00000428H
	mov	ecx, DWORD PTR _target_map$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
; Line 1998
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+1300], OFFSET _gray_render_span
; Line 1999
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+1304], ecx
$LN1@gray_raste:
; Line 2002
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_convert_glyph
	add	esp, 4
$LN21@gray_raste:
; Line 2003
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_raster_render ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cell_mod$1 = -396					; size = 4
_cell_end$2 = -392					; size = 4
_cell_start$3 = -388					; size = 4
_yindex$4 = -384					; size = 4
_cells_max$5 = -380					; size = 4
_error$6 = -376						; size = 4
_middle$7 = -372					; size = 4
_top$8 = -368						; size = 4
_bottom$9 = -364					; size = 4
_clip$ = -360						; size = 4
_max_y$ = -356						; size = 4
_max$ = -352						; size = 4
_min$ = -348						; size = 4
_num_bands$ = -344					; size = 4
_n$ = -340						; size = 4
_band$ = -336						; size = 4
_bands$ = -328						; size = 320
__$ArrayPad$ = -4					; size = 4
_worker$ = 8						; size = 4
_gray_convert_glyph PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1782
	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	edi
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1791
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_gray_compute_cbox
	add	esp, 4
; Line 1794
	mov	ecx, DWORD PTR _worker$[ebp]
	add	ecx, 1088				; 00000440H
	mov	DWORD PTR _clip$[ebp], ecx
; Line 1797
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN30@gray_conve
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN30@gray_conve
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [edx+84]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN30@gray_conve
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [edx+80]
	cmp	ecx, DWORD PTR [eax+12]
	jl	SHORT $LN31@gray_conve
$LN30@gray_conve:
; Line 1798
	xor	eax, eax
	jmp	$LN32@gray_conve
$LN31@gray_conve:
; Line 1800
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN29@gray_conve
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+72], ecx
$LN29@gray_conve:
; Line 1801
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [edx+80]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN28@gray_conve
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+80], ecx
$LN28@gray_conve:
; Line 1803
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN27@gray_conve
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+76], ecx
$LN27@gray_conve:
; Line 1804
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [edx+84]
	cmp	ecx, DWORD PTR [eax+12]
	jle	SHORT $LN26@gray_conve
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+84], ecx
$LN26@gray_conve:
; Line 1806
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	sub	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+88], ecx
; Line 1807
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+84]
	sub	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+92], edx
; Line 1810
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [ecx+84]
	sub	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR _worker$[ebp]
	cdq
	idiv	DWORD PTR [ecx+1312]
	mov	DWORD PTR _num_bands$[ebp], eax
; Line 1811
	cmp	DWORD PTR _num_bands$[ebp], 0
	jne	SHORT $LN25@gray_conve
; Line 1812
	mov	DWORD PTR _num_bands$[ebp], 1
$LN25@gray_conve:
; Line 1813
	cmp	DWORD PTR _num_bands$[ebp], 39		; 00000027H
	jl	SHORT $LN24@gray_conve
; Line 1814
	mov	DWORD PTR _num_bands$[ebp], 39		; 00000027H
$LN24@gray_conve:
; Line 1816
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+1316], 0
; Line 1818
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _min$[ebp], ecx
; Line 1819
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR _max_y$[ebp], eax
; Line 1821
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN23@gray_conve
$LN22@gray_conve:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	mov	edx, DWORD PTR _max$[ebp]
	mov	DWORD PTR _min$[ebp], edx
$LN23@gray_conve:
	mov	eax, DWORD PTR _num_bands$[ebp]
	cmp	DWORD PTR _n$[ebp], eax
	jge	$LN21@gray_conve
; Line 1823
	mov	ecx, DWORD PTR _min$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	add	ecx, DWORD PTR [edx+1312]
	mov	DWORD PTR _max$[ebp], ecx
; Line 1824
	mov	eax, DWORD PTR _num_bands$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _n$[ebp], eax
	je	SHORT $LN19@gray_conve
	mov	ecx, DWORD PTR _max_y$[ebp]
	cmp	DWORD PTR _max$[ebp], ecx
	jle	SHORT $LN20@gray_conve
$LN19@gray_conve:
; Line 1825
	mov	edx, DWORD PTR _max_y$[ebp]
	mov	DWORD PTR _max$[ebp], edx
$LN20@gray_conve:
; Line 1827
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _min$[ebp]
	mov	DWORD PTR _bands$[ebp+ecx], edx
; Line 1828
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _max$[ebp]
	mov	DWORD PTR _bands$[ebp+ecx+4], edx
; Line 1829
	lea	eax, DWORD PTR _bands$[ebp]
	mov	DWORD PTR _band$[ebp], eax
$LN18@gray_conve:
; Line 1831
	lea	ecx, DWORD PTR _bands$[ebp]
	cmp	DWORD PTR _band$[ebp], ecx
	jb	$LN17@gray_conve
; Line 1842
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1320]
	mov	DWORD PTR [edx+1328], ecx
; Line 1843
	mov	edx, DWORD PTR _band$[ebp]
	mov	eax, DWORD PTR _band$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+1332], ecx
; Line 1845
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1332]
	shl	ecx, 2
	mov	DWORD PTR _cell_start$3[ebp], ecx
; Line 1846
	mov	eax, DWORD PTR _cell_start$3[ebp]
	xor	edx, edx
	mov	ecx, 16					; 00000010H
	div	ecx
	mov	DWORD PTR _cell_mod$1[ebp], edx
; Line 1847
	cmp	DWORD PTR _cell_mod$1[ebp], 0
	jle	SHORT $LN16@gray_conve
; Line 1848
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR _cell_mod$1[ebp]
	add	edx, DWORD PTR _cell_start$3[ebp]
	mov	DWORD PTR _cell_start$3[ebp], edx
$LN16@gray_conve:
; Line 1850
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1324]
	mov	DWORD PTR _cell_end$2[ebp], ecx
; Line 1851
	mov	eax, DWORD PTR _cell_end$2[ebp]
	xor	edx, edx
	mov	ecx, 16					; 00000010H
	div	ecx
	mov	eax, DWORD PTR _cell_end$2[ebp]
	sub	eax, edx
	mov	DWORD PTR _cell_end$2[ebp], eax
; Line 1853
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+1320]
	add	edx, DWORD PTR _cell_end$2[ebp]
	mov	DWORD PTR _cells_max$5[ebp], edx
; Line 1854
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1320]
	add	ecx, DWORD PTR _cell_start$3[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+108], ecx
; Line 1855
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	cmp	ecx, DWORD PTR _cells_max$5[ebp]
	jb	SHORT $LN15@gray_conve
; Line 1856
	jmp	$ReduceBands$38
$LN15@gray_conve:
; Line 1858
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _cells_max$5[ebp]
	sub	eax, DWORD PTR [edx+108]
	sar	eax, 4
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+112], eax
; Line 1859
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [edx+112], 2
	jge	SHORT $LN14@gray_conve
; Line 1860
	jmp	$ReduceBands$38
$LN14@gray_conve:
; Line 1862
	mov	DWORD PTR _yindex$4[ebp], 0
	jmp	SHORT $LN13@gray_conve
$LN12@gray_conve:
	mov	eax, DWORD PTR _yindex$4[ebp]
	add	eax, 1
	mov	DWORD PTR _yindex$4[ebp], eax
$LN13@gray_conve:
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _yindex$4[ebp]
	cmp	edx, DWORD PTR [ecx+1332]
	jge	SHORT $LN11@gray_conve
; Line 1863
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1328]
	mov	edx, DWORD PTR _yindex$4[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
	jmp	SHORT $LN12@gray_conve
$LN11@gray_conve:
; Line 1866
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+116], 0
; Line 1867
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+104], 1
; Line 1868
	mov	edx, DWORD PTR _band$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+80], ecx
; Line 1869
	mov	edx, DWORD PTR _band$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+84], ecx
; Line 1870
	mov	edx, DWORD PTR _band$[ebp]
	mov	eax, DWORD PTR _band$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+92], ecx
; Line 1872
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_gray_convert_glyph_inner
	add	esp, 4
	mov	DWORD PTR _error$6[ebp], eax
; Line 1874
	cmp	DWORD PTR _error$6[ebp], 0
	jne	SHORT $LN10@gray_conve
; Line 1876
	mov	ecx, DWORD PTR _worker$[ebp]
	add	ecx, 1064				; 00000428H
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_sweep
	add	esp, 8
; Line 1877
	mov	eax, DWORD PTR _band$[ebp]
	sub	eax, 8
	mov	DWORD PTR _band$[ebp], eax
; Line 1878
	jmp	$LN18@gray_conve
	jmp	SHORT $ReduceBands$38
$LN10@gray_conve:
; Line 1880
	cmp	DWORD PTR _error$6[ebp], 64		; 00000040H
	je	SHORT $ReduceBands$38
; Line 1881
	mov	eax, 1
	jmp	$LN32@gray_conve
$ReduceBands$38:
; Line 1885
	mov	ecx, DWORD PTR _band$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _bottom$9[ebp], edx
; Line 1886
	mov	eax, DWORD PTR _band$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _top$8[ebp], ecx
; Line 1887
	mov	edx, DWORD PTR _top$8[ebp]
	sub	edx, DWORD PTR _bottom$9[ebp]
	sar	edx, 1
	add	edx, DWORD PTR _bottom$9[ebp]
	mov	DWORD PTR _middle$7[ebp], edx
; Line 1891
	mov	eax, DWORD PTR _middle$7[ebp]
	cmp	eax, DWORD PTR _bottom$9[ebp]
	jne	SHORT $LN7@gray_conve
$LN6@gray_conve:
; Line 1894
	mov	ecx, 4
	imul	edx, ecx, 12
	cmp	DWORD PTR _ft_trace_levels[edx], 7
	jl	SHORT $LN5@gray_conve
	push	OFFSET $SG7824
	call	_FT_Message
	add	esp, 4
$LN5@gray_conve:
	xor	eax, eax
	jne	SHORT $LN6@gray_conve
; Line 1896
	mov	eax, 1
	jmp	$LN32@gray_conve
$LN7@gray_conve:
; Line 1899
	mov	ecx, DWORD PTR _bottom$9[ebp]
	sub	ecx, DWORD PTR _top$8[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	ecx, DWORD PTR [edx+1312]
	jl	SHORT $LN2@gray_conve
; Line 1900
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1316]
	add	ecx, 1
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+1316], ecx
$LN2@gray_conve:
; Line 1902
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _band$[ebp]
	mov	edx, DWORD PTR _bottom$9[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 1903
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _band$[ebp]
	mov	edx, DWORD PTR _middle$7[ebp]
	mov	DWORD PTR [ecx+eax+4], edx
; Line 1904
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _band$[ebp]
	mov	eax, DWORD PTR _middle$7[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 1905
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _band$[ebp]
	mov	ecx, DWORD PTR _top$8[ebp]
	mov	DWORD PTR [eax+edx+4], ecx
; Line 1906
	mov	edx, DWORD PTR _band$[ebp]
	add	edx, 8
	mov	DWORD PTR _band$[ebp], edx
; Line 1907
	jmp	$LN18@gray_conve
$LN17@gray_conve:
; Line 1908
	jmp	$LN22@gray_conve
$LN21@gray_conve:
; Line 1910
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+1316], 8
	jle	SHORT $LN1@gray_conve
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [ecx+1312], 16		; 00000010H
	jle	SHORT $LN1@gray_conve
; Line 1911
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+1312]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+1312], eax
$LN1@gray_conve:
; Line 1913
	xor	eax, eax
$LN32@gray_conve:
; Line 1914
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@gray_conve
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@gray_conve:
	DD	1
	DD	$LN36@gray_conve
$LN36@gray_conve:
	DD	-328					; fffffeb8H
	DD	320					; 00000140H
	DD	$LN35@gray_conve
$LN35@gray_conve:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_gray_convert_glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_worker$ = 8						; size = 4
_gray_convert_glyph_inner PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1758
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1760
	mov	DWORD PTR _error$[ebp], 0
; Line 1767
	mov	eax, DWORD PTR _worker$[ebp]
	push	0
	push	eax
	call	__setjmp3
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@gray_conve
; Line 1769
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	push	OFFSET _func_interface
	mov	edx, DWORD PTR _worker$[ebp]
	add	edx, 1044				; 00000414H
	push	edx
	call	_FT_Outline_Decompose
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1770
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jne	SHORT $LN2@gray_conve
; Line 1771
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_gray_record_cell
	add	esp, 4
$LN2@gray_conve:
; Line 1773
	jmp	SHORT $LN1@gray_conve
$LN3@gray_conve:
; Line 1774
	push	OFFSET $SG7760
	push	1774					; 000006eeH
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	mov	DWORD PTR _error$[ebp], eax
$LN1@gray_conve:
; Line 1776
	mov	eax, DWORD PTR _error$[ebp]
; Line 1777
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_convert_glyph_inner ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$1 = -28						; size = 4
_span$2 = -24						; size = 4
_area$3 = -20						; size = 4
_x$4 = -16						; size = 4
_cover$5 = -12						; size = 4
_cell$6 = -8						; size = 4
_yindex$ = -4						; size = 4
_worker$ = 8						; size = 4
_target$ = 12						; size = 4
_gray_sweep PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1386
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1389
	mov	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _target$[ebp], eax
; Line 1392
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [ecx+116], 0
	jne	SHORT $LN35@gray_sweep
; Line 1393
	jmp	$LN36@gray_sweep
$LN35@gray_sweep:
; Line 1395
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+1296], 0
$LN34@gray_sweep:
; Line 1397
	mov	eax, 4
	imul	ecx, eax, 12
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN33@gray_sweep
	push	OFFSET $SG7700
	call	_FT_Message
	add	esp, 4
$LN33@gray_sweep:
	xor	edx, edx
	jne	SHORT $LN34@gray_sweep
; Line 1399
	mov	DWORD PTR _yindex$[ebp], 0
	jmp	SHORT $LN30@gray_sweep
$LN29@gray_sweep:
	mov	eax, DWORD PTR _yindex$[ebp]
	add	eax, 1
	mov	DWORD PTR _yindex$[ebp], eax
$LN30@gray_sweep:
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _yindex$[ebp]
	cmp	edx, DWORD PTR [ecx+1332]
	jge	$LN28@gray_sweep
; Line 1401
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1328]
	mov	edx, DWORD PTR _yindex$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _cell$6[ebp], eax
; Line 1402
	mov	DWORD PTR _cover$5[ebp], 0
; Line 1403
	mov	DWORD PTR _x$4[ebp], 0
; Line 1406
	jmp	SHORT $LN27@gray_sweep
$LN26@gray_sweep:
	mov	ecx, DWORD PTR _cell$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cell$6[ebp], edx
$LN27@gray_sweep:
	cmp	DWORD PTR _cell$6[ebp], 0
	je	$LN25@gray_sweep
; Line 1411
	mov	eax, DWORD PTR _cell$6[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _x$4[ebp]
	jle	SHORT $LN24@gray_sweep
	cmp	DWORD PTR _cover$5[ebp], 0
	je	SHORT $LN24@gray_sweep
; Line 1413
	mov	edx, DWORD PTR _cell$6[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _x$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _cover$5[ebp]
	shl	ecx, 9
	push	ecx
	mov	edx, DWORD PTR _yindex$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_gray_hline
	add	esp, 20					; 00000014H
$LN24@gray_sweep:
; Line 1415
	mov	edx, DWORD PTR _cell$6[ebp]
	mov	eax, DWORD PTR _cover$5[ebp]
	add	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _cover$5[ebp], eax
; Line 1416
	mov	ecx, DWORD PTR _cover$5[ebp]
	shl	ecx, 9
	mov	edx, DWORD PTR _cell$6[ebp]
	sub	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _area$3[ebp], ecx
; Line 1418
	je	SHORT $LN23@gray_sweep
	mov	eax, DWORD PTR _cell$6[ebp]
	cmp	DWORD PTR [eax], 0
	jl	SHORT $LN23@gray_sweep
; Line 1419
	push	1
	mov	ecx, DWORD PTR _area$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _yindex$[ebp]
	push	edx
	mov	eax, DWORD PTR _cell$6[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_hline
	add	esp, 20					; 00000014H
$LN23@gray_sweep:
; Line 1421
	mov	eax, DWORD PTR _cell$6[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR _x$4[ebp], ecx
; Line 1422
	jmp	$LN26@gray_sweep
$LN25@gray_sweep:
; Line 1424
	cmp	DWORD PTR _cover$5[ebp], 0
	je	SHORT $LN22@gray_sweep
; Line 1426
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	sub	eax, DWORD PTR _x$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _cover$5[ebp]
	shl	ecx, 9
	push	ecx
	mov	edx, DWORD PTR _yindex$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_gray_hline
	add	esp, 20					; 00000014H
$LN22@gray_sweep:
; Line 1427
	jmp	$LN29@gray_sweep
$LN28@gray_sweep:
; Line 1429
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [edx+1300], 0
	je	SHORT $LN21@gray_sweep
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+1296], 0
	jle	SHORT $LN21@gray_sweep
; Line 1431
	mov	esi, esp
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+1304]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	add	eax, 1104				; 00000450H
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1308]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+1300]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN21@gray_sweep:
; Line 1435
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [ecx+1296], 0
	jle	$LN4@gray_sweep
$LN19@gray_sweep:
; Line 1441
	mov	edx, 4
	imul	eax, edx, 12
	cmp	DWORD PTR _ft_trace_levels[eax], 7
	jl	SHORT $LN18@gray_sweep
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+1308]
	push	edx
	push	OFFSET $SG7723
	call	_FT_Message
	add	esp, 8
$LN18@gray_sweep:
	xor	eax, eax
	jne	SHORT $LN19@gray_sweep
; Line 1442
	mov	ecx, DWORD PTR _worker$[ebp]
	add	ecx, 1104				; 00000450H
	mov	DWORD PTR _span$2[ebp], ecx
; Line 1443
	mov	DWORD PTR _n$1[ebp], 0
	jmp	SHORT $LN15@gray_sweep
$LN14@gray_sweep:
	mov	edx, DWORD PTR _n$1[ebp]
	add	edx, 1
	mov	DWORD PTR _n$1[ebp], edx
	mov	eax, DWORD PTR _span$2[ebp]
	add	eax, 6
	mov	DWORD PTR _span$2[ebp], eax
$LN15@gray_sweep:
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _n$1[ebp]
	cmp	edx, DWORD PTR [ecx+1296]
	jge	SHORT $LN8@gray_sweep
$LN12@gray_sweep:
; Line 1445
	mov	eax, 4
	imul	ecx, eax, 12
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN11@gray_sweep
	mov	edx, DWORD PTR _span$2[ebp]
	movzx	eax, BYTE PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _span$2[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _span$2[ebp]
	movzx	ecx, WORD PTR [eax+2]
	lea	edx, DWORD PTR [edx+ecx-1]
	push	edx
	mov	eax, DWORD PTR _span$2[ebp]
	movsx	ecx, WORD PTR [eax]
	push	ecx
	push	OFFSET $SG7731
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN11@gray_sweep:
	xor	edx, edx
	jne	SHORT $LN12@gray_sweep
	jmp	SHORT $LN14@gray_sweep
$LN8@gray_sweep:
; Line 1446
	mov	eax, 4
	imul	ecx, eax, 12
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN7@gray_sweep
	push	OFFSET $SG7736
	call	_FT_Message
	add	esp, 4
$LN7@gray_sweep:
	xor	edx, edx
	jne	SHORT $LN8@gray_sweep
$LN4@gray_sweep:
; Line 1449
	mov	eax, 4
	imul	ecx, eax, 12
	cmp	DWORD PTR _ft_trace_levels[ecx], 7
	jl	SHORT $LN3@gray_sweep
	push	OFFSET $SG7741
	call	_FT_Message
	add	esp, 4
$LN3@gray_sweep:
	xor	edx, edx
	jne	SHORT $LN4@gray_sweep
$LN36@gray_sweep:
; Line 1453
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_sweep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$1 = -16						; size = 4
_count$2 = -12						; size = 4
_span$3 = -8						; size = 4
_coverage$ = -4						; size = 4
_worker$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_area$ = 20						; size = 4
_acount$ = 24						; size = 4
_gray_hline PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1258
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1267
	mov	eax, DWORD PTR _area$[ebp]
	sar	eax, 9
	mov	DWORD PTR _coverage$[ebp], eax
; Line 1269
	cmp	DWORD PTR _coverage$[ebp], 0
	jge	SHORT $LN31@gray_hline
; Line 1270
	mov	ecx, DWORD PTR _coverage$[ebp]
	neg	ecx
	mov	DWORD PTR _coverage$[ebp], ecx
$LN31@gray_hline:
; Line 1272
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+1060]
	and	eax, 2
	je	SHORT $LN30@gray_hline
; Line 1274
	mov	ecx, DWORD PTR _coverage$[ebp]
	and	ecx, 511				; 000001ffH
	mov	DWORD PTR _coverage$[ebp], ecx
; Line 1276
	cmp	DWORD PTR _coverage$[ebp], 256		; 00000100H
	jle	SHORT $LN29@gray_hline
; Line 1277
	mov	edx, 512				; 00000200H
	sub	edx, DWORD PTR _coverage$[ebp]
	mov	DWORD PTR _coverage$[ebp], edx
	jmp	SHORT $LN28@gray_hline
$LN29@gray_hline:
; Line 1278
	cmp	DWORD PTR _coverage$[ebp], 256		; 00000100H
	jne	SHORT $LN28@gray_hline
; Line 1279
	mov	DWORD PTR _coverage$[ebp], 255		; 000000ffH
$LN28@gray_hline:
; Line 1281
	jmp	SHORT $LN26@gray_hline
$LN30@gray_hline:
; Line 1284
	cmp	DWORD PTR _coverage$[ebp], 256		; 00000100H
	jl	SHORT $LN26@gray_hline
; Line 1285
	mov	DWORD PTR _coverage$[ebp], 255		; 000000ffH
$LN26@gray_hline:
; Line 1288
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _y$[ebp], ecx
; Line 1289
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR [edx+72]
	mov	DWORD PTR _x$[ebp], eax
; Line 1292
	cmp	DWORD PTR _x$[ebp], 32767		; 00007fffH
	jl	SHORT $LN24@gray_hline
; Line 1293
	mov	DWORD PTR _x$[ebp], 32767		; 00007fffH
$LN24@gray_hline:
; Line 1296
	cmp	DWORD PTR _y$[ebp], 2147483647		; 7fffffffH
	jl	SHORT $LN23@gray_hline
; Line 1297
	mov	DWORD PTR _y$[ebp], 2147483647		; 7fffffffH
$LN23@gray_hline:
; Line 1299
	cmp	DWORD PTR _coverage$[ebp], 0
	je	$LN32@gray_hline
; Line 1306
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	DWORD PTR _count$2[ebp], edx
; Line 1307
	imul	eax, DWORD PTR _count$2[ebp], 6
	mov	ecx, DWORD PTR _worker$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1098]
	mov	DWORD PTR _span$3[ebp], edx
; Line 1311
	cmp	DWORD PTR _count$2[ebp], 0
	jle	SHORT $LN21@gray_hline
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1308]
	cmp	ecx, DWORD PTR _y$[ebp]
	jne	SHORT $LN21@gray_hline
	mov	edx, DWORD PTR _span$3[ebp]
	movsx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _span$3[ebp]
	movzx	edx, WORD PTR [ecx+2]
	add	eax, edx
	cmp	eax, DWORD PTR _x$[ebp]
	jne	SHORT $LN21@gray_hline
	mov	eax, DWORD PTR _span$3[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	cmp	ecx, DWORD PTR _coverage$[ebp]
	jne	SHORT $LN21@gray_hline
; Line 1313
	mov	edx, DWORD PTR _span$3[ebp]
	movzx	eax, WORD PTR [edx+2]
	add	eax, DWORD PTR _acount$[ebp]
	mov	ecx, DWORD PTR _span$3[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 1314
	jmp	$LN32@gray_hline
$LN21@gray_hline:
; Line 1317
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+1308]
	cmp	eax, DWORD PTR _y$[ebp]
	jne	SHORT $LN19@gray_hline
	cmp	DWORD PTR _count$2[ebp], 32		; 00000020H
	jl	$LN20@gray_hline
$LN19@gray_hline:
; Line 1319
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [ecx+1300], 0
	je	SHORT $LN18@gray_hline
	cmp	DWORD PTR _count$2[ebp], 0
	jle	SHORT $LN18@gray_hline
; Line 1321
	mov	esi, esp
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+1304]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	add	ecx, 1104				; 00000450H
	push	ecx
	mov	edx, DWORD PTR _count$2[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1308]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+1300]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@gray_hline:
; Line 1325
	cmp	DWORD PTR _count$2[ebp], 0
	jle	$LN17@gray_hline
$LN16@gray_hline:
; Line 1330
	mov	ecx, 4
	imul	edx, ecx, 12
	cmp	DWORD PTR _ft_trace_levels[edx], 7
	jl	SHORT $LN15@gray_hline
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1308]
	push	ecx
	push	OFFSET $SG7653
	call	_FT_Message
	add	esp, 8
$LN15@gray_hline:
	xor	edx, edx
	jne	SHORT $LN16@gray_hline
; Line 1331
	mov	eax, DWORD PTR _worker$[ebp]
	add	eax, 1104				; 00000450H
	mov	DWORD PTR _span$3[ebp], eax
; Line 1332
	mov	DWORD PTR _n$1[ebp], 0
	jmp	SHORT $LN12@gray_hline
$LN11@gray_hline:
	mov	ecx, DWORD PTR _n$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$1[ebp], ecx
	mov	edx, DWORD PTR _span$3[ebp]
	add	edx, 6
	mov	DWORD PTR _span$3[ebp], edx
$LN12@gray_hline:
	mov	eax, DWORD PTR _n$1[ebp]
	cmp	eax, DWORD PTR _count$2[ebp]
	jge	SHORT $LN5@gray_hline
$LN9@gray_hline:
; Line 1334
	mov	ecx, 4
	imul	edx, ecx, 12
	cmp	DWORD PTR _ft_trace_levels[edx], 7
	jl	SHORT $LN8@gray_hline
	mov	eax, DWORD PTR _span$3[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _span$3[ebp]
	movsx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _span$3[ebp]
	movzx	edx, WORD PTR [ecx+2]
	lea	eax, DWORD PTR [eax+edx-1]
	push	eax
	mov	ecx, DWORD PTR _span$3[ebp]
	movsx	edx, WORD PTR [ecx]
	push	edx
	push	OFFSET $SG7661
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN8@gray_hline:
	xor	eax, eax
	jne	SHORT $LN9@gray_hline
	jmp	SHORT $LN11@gray_hline
$LN5@gray_hline:
; Line 1335
	mov	ecx, 4
	imul	edx, ecx, 12
	cmp	DWORD PTR _ft_trace_levels[edx], 7
	jl	SHORT $LN4@gray_hline
	push	OFFSET $SG7666
	call	_FT_Message
	add	esp, 4
$LN4@gray_hline:
	xor	eax, eax
	jne	SHORT $LN5@gray_hline
$LN17@gray_hline:
; Line 1340
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+1296], 0
; Line 1341
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+1308], eax
; Line 1343
	mov	ecx, DWORD PTR _worker$[ebp]
	add	ecx, 1104				; 00000450H
	mov	DWORD PTR _span$3[ebp], ecx
; Line 1345
	jmp	SHORT $LN1@gray_hline
$LN20@gray_hline:
; Line 1346
	mov	edx, DWORD PTR _span$3[ebp]
	add	edx, 6
	mov	DWORD PTR _span$3[ebp], edx
$LN1@gray_hline:
; Line 1349
	mov	eax, DWORD PTR _span$3[ebp]
	mov	cx, WORD PTR _x$[ebp]
	mov	WORD PTR [eax], cx
; Line 1350
	mov	edx, DWORD PTR _span$3[ebp]
	mov	ax, WORD PTR _acount$[ebp]
	mov	WORD PTR [edx+2], ax
; Line 1351
	mov	ecx, DWORD PTR _span$3[ebp]
	mov	dl, BYTE PTR _coverage$[ebp]
	mov	BYTE PTR [ecx+4], dl
; Line 1353
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	add	ecx, 1
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+1296], ecx
$LN32@gray_hline:
; Line 1355
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_hline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv131 = -20						; size = 4
_q$1 = -16						; size = 4
_coverage$2 = -9					; size = 1
_map$ = -8						; size = 4
_p$ = -4						; size = 4
_y$ = 8							; size = 4
_count$ = 12						; size = 4
_spans$ = 16						; size = 4
_worker$ = 20						; size = 4
_gray_render_span PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1207
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1209
	mov	eax, DWORD PTR _worker$[ebp]
	add	eax, 1064				; 00000428H
	mov	DWORD PTR _map$[ebp], eax
; Line 1213
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _map$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, edx
	mov	DWORD PTR _p$[ebp], ecx
; Line 1214
	mov	edx, DWORD PTR _map$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jl	SHORT $LN17@gray_rende
; Line 1215
	mov	eax, DWORD PTR _map$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _map$[ebp]
	imul	ecx, DWORD PTR [edx+8]
	add	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
$LN17@gray_rende:
; Line 1217
	jmp	SHORT $LN16@gray_rende
$LN15@gray_rende:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _spans$[ebp]
	add	ecx, 6
	mov	DWORD PTR _spans$[ebp], ecx
$LN16@gray_rende:
	cmp	DWORD PTR _count$[ebp], 0
	jle	$LN18@gray_rende
; Line 1219
	mov	edx, DWORD PTR _spans$[ebp]
	mov	al, BYTE PTR [edx+4]
	mov	BYTE PTR _coverage$2[ebp], al
; Line 1222
	movzx	ecx, BYTE PTR _coverage$2[ebp]
	test	ecx, ecx
	je	$LN13@gray_rende
; Line 1228
	mov	edx, DWORD PTR _spans$[ebp]
	movzx	eax, WORD PTR [edx+2]
	cmp	eax, 8
	jl	SHORT $LN12@gray_rende
; Line 1229
	mov	ecx, DWORD PTR _spans$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	push	edx
	movzx	eax, BYTE PTR _coverage$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _spans$[ebp]
	movsx	edx, WORD PTR [ecx]
	add	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1230
	jmp	$LN13@gray_rende
$LN12@gray_rende:
; Line 1232
	mov	eax, DWORD PTR _spans$[ebp]
	movsx	ecx, WORD PTR [eax]
	add	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$1[ebp], ecx
; Line 1235
	mov	edx, DWORD PTR _spans$[ebp]
	movzx	eax, WORD PTR [edx+2]
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR tv131[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv131[ebp], ecx
	cmp	DWORD PTR tv131[ebp], 6
	ja	SHORT $LN13@gray_rende
	mov	edx, DWORD PTR tv131[ebp]
	jmp	DWORD PTR $LN20@gray_rende[edx*4]
$LN8@gray_rende:
; Line 1237
	mov	eax, DWORD PTR _q$1[ebp]
	mov	cl, BYTE PTR _coverage$2[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _q$1[ebp]
	add	edx, 1
	mov	DWORD PTR _q$1[ebp], edx
$LN7@gray_rende:
; Line 1238
	mov	eax, DWORD PTR _q$1[ebp]
	mov	cl, BYTE PTR _coverage$2[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _q$1[ebp]
	add	edx, 1
	mov	DWORD PTR _q$1[ebp], edx
$LN6@gray_rende:
; Line 1239
	mov	eax, DWORD PTR _q$1[ebp]
	mov	cl, BYTE PTR _coverage$2[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _q$1[ebp]
	add	edx, 1
	mov	DWORD PTR _q$1[ebp], edx
$LN5@gray_rende:
; Line 1240
	mov	eax, DWORD PTR _q$1[ebp]
	mov	cl, BYTE PTR _coverage$2[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _q$1[ebp]
	add	edx, 1
	mov	DWORD PTR _q$1[ebp], edx
$LN4@gray_rende:
; Line 1241
	mov	eax, DWORD PTR _q$1[ebp]
	mov	cl, BYTE PTR _coverage$2[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _q$1[ebp]
	add	edx, 1
	mov	DWORD PTR _q$1[ebp], edx
$LN3@gray_rende:
; Line 1242
	mov	eax, DWORD PTR _q$1[ebp]
	mov	cl, BYTE PTR _coverage$2[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _q$1[ebp]
	add	edx, 1
	mov	DWORD PTR _q$1[ebp], edx
$LN2@gray_rende:
; Line 1243
	mov	eax, DWORD PTR _q$1[ebp]
	mov	cl, BYTE PTR _coverage$2[ebp]
	mov	BYTE PTR [eax], cl
$LN13@gray_rende:
; Line 1249
	jmp	$LN15@gray_rende
$LN18@gray_rende:
; Line 1250
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@gray_rende:
	DD	$LN2@gray_rende
	DD	$LN3@gray_rende
	DD	$LN4@gray_rende
	DD	$LN5@gray_rende
	DD	$LN6@gray_rende
	DD	$LN7@gray_rende
	DD	$LN8@gray_rende
_gray_render_span ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_control1$ = 8						; size = 4
_control2$ = 12						; size = 4
_to$ = 16						; size = 4
_worker$ = 20						; size = 4
_gray_cubic_to PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1196
	push	ebp
	mov	ebp, esp
; Line 1197
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _control2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _control1$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_gray_render_cubic
	add	esp, 16					; 00000010H
; Line 1198
	xor	eax, eax
; Line 1199
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_gray_cubic_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_control$ = 8						; size = 4
_to$ = 12						; size = 4
_worker$ = 16						; size = 4
_gray_conic_to PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1185
	push	ebp
	mov	ebp, esp
; Line 1186
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _control$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_render_conic
	add	esp, 12					; 0000000cH
; Line 1187
	xor	eax, eax
; Line 1188
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_gray_conic_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_to$ = 8						; size = 4
_worker$ = 12						; size = 4
_gray_line_to PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1175
	push	ebp
	mov	ebp, esp
; Line 1176
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_gray_render_line
	add	esp, 12					; 0000000cH
; Line 1177
	xor	eax, eax
; Line 1178
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_gray_line_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_to$ = 8						; size = 4
_worker$ = 12						; size = 4
_gray_move_to PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1157
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jne	SHORT $LN1@gray_move_
; Line 1158
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_gray_record_cell
	add	esp, 4
$LN1@gray_move_:
; Line 1161
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 2
	mov	DWORD PTR _x$[ebp], eax
; Line 1162
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 2
	mov	DWORD PTR _y$[ebp], edx
; Line 1164
	mov	eax, DWORD PTR _y$[ebp]
	sar	eax, 8
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sar	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_start_cell
	add	esp, 12					; 0000000cH
; Line 1166
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+128], ecx
; Line 1167
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+132], eax
; Line 1168
	xor	eax, eax
; Line 1169
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_move_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv241 = -80						; size = 4
tv214 = -76						; size = 4
tv186 = -72						; size = 4
tv178 = -68						; size = 4
tv175 = -64						; size = 4
_s_limit$1 = -60					; size = 4
_s$2 = -56						; size = 4
_L$3 = -52						; size = 4
_dy2$4 = -48						; size = 4
_dx2$5 = -44						; size = 4
_dy1$6 = -40						; size = 4
_dx1$7 = -36						; size = 4
_dy_$8 = -32						; size = 4
_dx_$9 = -28						; size = 4
_dy$10 = -24						; size = 4
_dx$11 = -20						; size = 4
_y$ = -16						; size = 4
_max$ = -12						; size = 4
_min$ = -8						; size = 4
_arc$ = -4						; size = 4
_worker$ = 8						; size = 4
_control1$ = 12						; size = 4
_control2$ = 16						; size = 4
_to$ = 20						; size = 4
_gray_render_cubic PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1041
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1046
	mov	eax, DWORD PTR _worker$[ebp]
	add	eax, 140				; 0000008cH
	mov	DWORD PTR _arc$[ebp], eax
; Line 1047
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 2
	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [eax+ecx], edx
; Line 1048
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 2
	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [eax+ecx+4], edx
; Line 1049
	mov	ecx, DWORD PTR _control2$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 2
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 1050
	mov	edx, DWORD PTR _control2$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 1051
	mov	eax, DWORD PTR _control1$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 2
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 1052
	mov	ecx, DWORD PTR _control1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 2
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [ecx+eax+4], edx
; Line 1053
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [edx+128]
	mov	DWORD PTR [ecx+eax], edx
; Line 1054
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [eax+132]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 1057
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _max$[ebp], ecx
	mov	edx, DWORD PTR _max$[ebp]
	mov	DWORD PTR _min$[ebp], edx
; Line 1059
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _y$[ebp], edx
; Line 1060
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _min$[ebp]
	jge	SHORT $LN16@gray_rende
; Line 1061
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _min$[ebp], ecx
$LN16@gray_rende:
; Line 1062
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _max$[ebp]
	jle	SHORT $LN15@gray_rende
; Line 1063
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _max$[ebp], eax
$LN15@gray_rende:
; Line 1065
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _y$[ebp], eax
; Line 1066
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _min$[ebp]
	jge	SHORT $LN14@gray_rende
; Line 1067
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _min$[ebp], edx
$LN14@gray_rende:
; Line 1068
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _max$[ebp]
	jle	SHORT $LN13@gray_rende
; Line 1069
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _max$[ebp], ecx
$LN13@gray_rende:
; Line 1071
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _y$[ebp], edx
; Line 1072
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _min$[ebp]
	jge	SHORT $LN12@gray_rende
; Line 1073
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _min$[ebp], ecx
$LN12@gray_rende:
; Line 1074
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _max$[ebp]
	jle	SHORT $LN11@gray_rende
; Line 1075
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _max$[ebp], eax
$LN11@gray_rende:
; Line 1077
	mov	ecx, DWORD PTR _min$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _worker$[ebp]
	cmp	ecx, DWORD PTR [edx+84]
	jge	SHORT $LN9@gray_rende
	mov	eax, DWORD PTR _max$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	eax, DWORD PTR [ecx+80]
	jge	SHORT $LN8@gray_rende
$LN9@gray_rende:
; Line 1078
	jmp	$Draw$29
$LN8@gray_rende:
; Line 1094
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	esi, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [esi+edx]
	mov	DWORD PTR _dx_$9[ebp], eax
	mov	ecx, DWORD PTR _dx_$9[ebp]
	mov	DWORD PTR _dx$11[ebp], ecx
; Line 1095
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	esi, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [ecx+eax+4]
	sub	eax, DWORD PTR [esi+edx+4]
	mov	DWORD PTR _dy_$8[ebp], eax
	mov	ecx, DWORD PTR _dy_$8[ebp]
	mov	DWORD PTR _dy$10[ebp], ecx
; Line 1097
	cmp	DWORD PTR _dx_$9[ebp], 0
	jge	SHORT $LN19@gray_rende
	mov	edx, DWORD PTR _dx_$9[ebp]
	neg	edx
	mov	DWORD PTR tv175[ebp], edx
	jmp	SHORT $LN20@gray_rende
$LN19@gray_rende:
	mov	eax, DWORD PTR _dx_$9[ebp]
	mov	DWORD PTR tv175[ebp], eax
$LN20@gray_rende:
	mov	ecx, DWORD PTR tv175[ebp]
	mov	DWORD PTR _dx_$9[ebp], ecx
	cmp	DWORD PTR _dy_$8[ebp], 0
	jge	SHORT $LN21@gray_rende
	mov	edx, DWORD PTR _dy_$8[ebp]
	neg	edx
	mov	DWORD PTR tv178[ebp], edx
	jmp	SHORT $LN22@gray_rende
$LN21@gray_rende:
	mov	eax, DWORD PTR _dy_$8[ebp]
	mov	DWORD PTR tv178[ebp], eax
$LN22@gray_rende:
	mov	ecx, DWORD PTR tv178[ebp]
	mov	DWORD PTR _dy_$8[ebp], ecx
	mov	edx, DWORD PTR _dx_$9[ebp]
	cmp	edx, DWORD PTR _dy_$8[ebp]
	jle	SHORT $LN23@gray_rende
	imul	eax, DWORD PTR _dy_$8[ebp], 3
	sar	eax, 3
	add	eax, DWORD PTR _dx_$9[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN24@gray_rende
$LN23@gray_rende:
	imul	ecx, DWORD PTR _dx_$9[ebp], 3
	sar	ecx, 3
	add	ecx, DWORD PTR _dy_$8[ebp]
	mov	DWORD PTR tv186[ebp], ecx
$LN24@gray_rende:
	mov	edx, DWORD PTR tv186[ebp]
	mov	DWORD PTR _L$3[ebp], edx
; Line 1100
	cmp	DWORD PTR _L$3[ebp], 32767		; 00007fffH
	jle	SHORT $LN6@gray_rende
; Line 1101
	jmp	$Split$30
$LN6@gray_rende:
; Line 1104
	imul	eax, DWORD PTR _L$3[ebp], 42
	mov	DWORD PTR _s_limit$1[ebp], eax
; Line 1107
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 8
	imul	eax, edx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	esi, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	sub	ecx, DWORD PTR [esi+eax]
	mov	DWORD PTR _dx1$7[ebp], ecx
; Line 1108
	mov	edx, 8
	shl	edx, 0
	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	esi, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [eax+edx+4]
	sub	edx, DWORD PTR [esi+ecx+4]
	mov	DWORD PTR _dy1$6[ebp], edx
; Line 1109
	mov	eax, DWORD PTR _dy$10[ebp]
	imul	eax, DWORD PTR _dx1$7[ebp]
	mov	ecx, DWORD PTR _dx$11[ebp]
	imul	ecx, DWORD PTR _dy1$6[ebp]
	sub	eax, ecx
	jns	SHORT $LN25@gray_rende
	mov	edx, DWORD PTR _dy$10[ebp]
	imul	edx, DWORD PTR _dx1$7[ebp]
	mov	eax, DWORD PTR _dx$11[ebp]
	imul	eax, DWORD PTR _dy1$6[ebp]
	sub	edx, eax
	neg	edx
	mov	DWORD PTR tv214[ebp], edx
	jmp	SHORT $LN26@gray_rende
$LN25@gray_rende:
	mov	ecx, DWORD PTR _dy$10[ebp]
	imul	ecx, DWORD PTR _dx1$7[ebp]
	mov	edx, DWORD PTR _dx$11[ebp]
	imul	edx, DWORD PTR _dy1$6[ebp]
	sub	ecx, edx
	mov	DWORD PTR tv214[ebp], ecx
$LN26@gray_rende:
	mov	eax, DWORD PTR tv214[ebp]
	mov	DWORD PTR _s$2[ebp], eax
; Line 1111
	mov	ecx, DWORD PTR _s$2[ebp]
	cmp	ecx, DWORD PTR _s_limit$1[ebp]
	jle	SHORT $LN5@gray_rende
; Line 1112
	jmp	$Split$30
$LN5@gray_rende:
; Line 1115
	mov	edx, 8
	shl	edx, 1
	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	esi, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	sub	edx, DWORD PTR [esi+ecx]
	mov	DWORD PTR _dx2$5[ebp], edx
; Line 1116
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	esi, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [ecx+eax+4]
	sub	eax, DWORD PTR [esi+edx+4]
	mov	DWORD PTR _dy2$4[ebp], eax
; Line 1117
	mov	ecx, DWORD PTR _dy$10[ebp]
	imul	ecx, DWORD PTR _dx2$5[ebp]
	mov	edx, DWORD PTR _dx$11[ebp]
	imul	edx, DWORD PTR _dy2$4[ebp]
	sub	ecx, edx
	jns	SHORT $LN27@gray_rende
	mov	eax, DWORD PTR _dy$10[ebp]
	imul	eax, DWORD PTR _dx2$5[ebp]
	mov	ecx, DWORD PTR _dx$11[ebp]
	imul	ecx, DWORD PTR _dy2$4[ebp]
	sub	eax, ecx
	neg	eax
	mov	DWORD PTR tv241[ebp], eax
	jmp	SHORT $LN28@gray_rende
$LN27@gray_rende:
	mov	edx, DWORD PTR _dy$10[ebp]
	imul	edx, DWORD PTR _dx2$5[ebp]
	mov	eax, DWORD PTR _dx$11[ebp]
	imul	eax, DWORD PTR _dy2$4[ebp]
	sub	edx, eax
	mov	DWORD PTR tv241[ebp], edx
$LN28@gray_rende:
	mov	ecx, DWORD PTR tv241[ebp]
	mov	DWORD PTR _s$2[ebp], ecx
; Line 1119
	mov	edx, DWORD PTR _s$2[ebp]
	cmp	edx, DWORD PTR _s_limit$1[ebp]
	jle	SHORT $LN4@gray_rende
; Line 1120
	jmp	SHORT $Split$30
$LN4@gray_rende:
; Line 1126
	mov	eax, DWORD PTR _dx1$7[ebp]
	sub	eax, DWORD PTR _dx$11[ebp]
	imul	eax, DWORD PTR _dx1$7[ebp]
	mov	ecx, DWORD PTR _dy1$6[ebp]
	sub	ecx, DWORD PTR _dy$10[ebp]
	imul	ecx, DWORD PTR _dy1$6[ebp]
	add	eax, ecx
	test	eax, eax
	jg	SHORT $LN2@gray_rende
	mov	edx, DWORD PTR _dx2$5[ebp]
	sub	edx, DWORD PTR _dx$11[ebp]
	imul	edx, DWORD PTR _dx2$5[ebp]
	mov	eax, DWORD PTR _dy2$4[ebp]
	sub	eax, DWORD PTR _dy$10[ebp]
	imul	eax, DWORD PTR _dy2$4[ebp]
	add	edx, eax
	test	edx, edx
	jle	SHORT $LN3@gray_rende
$LN2@gray_rende:
; Line 1127
	jmp	SHORT $Split$30
$LN3@gray_rende:
; Line 1130
	jmp	SHORT $Draw$29
$Split$30:
; Line 1134
	mov	ecx, DWORD PTR _arc$[ebp]
	push	ecx
	call	_gray_split_cubic
	add	esp, 4
; Line 1135
	mov	edx, DWORD PTR _arc$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _arc$[ebp], edx
; Line 1136
	jmp	$LN8@gray_rende
$Draw$29:
; Line 1139
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	push	eax
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_render_line
	add	esp, 12					; 0000000cH
; Line 1141
	mov	eax, DWORD PTR _worker$[ebp]
	add	eax, 140				; 0000008cH
	cmp	DWORD PTR _arc$[ebp], eax
	jne	SHORT $LN1@gray_rende
; Line 1142
	jmp	SHORT $LN17@gray_rende
$LN1@gray_rende:
; Line 1144
	mov	ecx, DWORD PTR _arc$[ebp]
	sub	ecx, 24					; 00000018H
	mov	DWORD PTR _arc$[ebp], ecx
; Line 1145
	jmp	$LN8@gray_rende
$LN17@gray_rende:
; Line 1146
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_render_cubic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_d$ = -16						; size = 4
_c$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_base$ = 8						; size = 4
_gray_split_cubic PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 1011
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1015
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, 8
	imul	eax, edx, 6
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
; Line 1016
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _c$[ebp], ecx
; Line 1017
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _d$[ebp], ecx
; Line 1018
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 1019
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR _d$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, 8
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 1020
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 1021
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 1022
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, 8
	shl	eax, 2
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 1023
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 1025
	mov	edx, 8
	imul	eax, edx, 3
	mov	ecx, 8
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [esi+eax+4]
	mov	DWORD PTR [ecx+edx+4], eax
; Line 1026
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _c$[ebp], eax
; Line 1027
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _d$[ebp], eax
; Line 1028
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [eax+edx+4]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 1029
	mov	ecx, 8
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [eax+edx+4]
	add	eax, DWORD PTR _d$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, 8
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+edx+4], ecx
; Line 1030
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 1031
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+edx+4], ecx
; Line 1032
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, 8
	shl	edx, 2
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+edx+4], ecx
; Line 1033
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 8
	imul	ecx, edx, 3
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 1034
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_split_cubic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv241 = -48						; size = 4
tv203 = -44						; size = 4
tv164 = -40						; size = 4
_arc$ = -36						; size = 4
_levels$ = -32						; size = 4
_level$ = -28						; size = 4
_top$ = -24						; size = 4
_y$ = -20						; size = 4
_max$ = -16						; size = 4
_min$ = -12						; size = 4
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_worker$ = 8						; size = 4
_control$ = 12						; size = 4
_to$ = 16						; size = 4
_gray_render_conic PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 938
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 946
	mov	eax, DWORD PTR _worker$[ebp]
	add	eax, 916				; 00000394H
	mov	DWORD PTR _levels$[ebp], eax
; Line 948
	mov	ecx, DWORD PTR _worker$[ebp]
	add	ecx, 140				; 0000008cH
	mov	DWORD PTR _arc$[ebp], ecx
; Line 949
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 2
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 950
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [ecx+edx+4], eax
; Line 951
	mov	edx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 2
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 952
	mov	eax, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [eax+edx+4], ecx
; Line 953
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [eax+128]
	mov	DWORD PTR [edx+ecx], eax
; Line 954
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [eax+132]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 955
	mov	DWORD PTR _top$[ebp], 0
; Line 957
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 8
	imul	eax, edx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _arc$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 8
	shl	eax, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	shl	eax, 1
	sub	ecx, eax
	jns	SHORT $LN18@gray_rende
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 8
	imul	eax, edx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _arc$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 8
	shl	eax, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	shl	eax, 1
	sub	ecx, eax
	neg	ecx
	mov	DWORD PTR tv164[ebp], ecx
	jmp	SHORT $LN19@gray_rende
$LN18@gray_rende:
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 8
	imul	eax, edx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _arc$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 8
	shl	eax, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	shl	eax, 1
	sub	ecx, eax
	mov	DWORD PTR tv164[ebp], ecx
$LN19@gray_rende:
	mov	ecx, DWORD PTR tv164[ebp]
	mov	DWORD PTR _dx$[ebp], ecx
; Line 958
	mov	edx, 8
	shl	edx, 1
	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	eax, DWORD PTR _arc$[ebp]
	add	edx, DWORD PTR [eax+ecx+4]
	mov	ecx, 8
	shl	ecx, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+4]
	shl	ecx, 1
	sub	edx, ecx
	jns	SHORT $LN20@gray_rende
	mov	edx, 8
	shl	edx, 1
	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	eax, DWORD PTR _arc$[ebp]
	add	edx, DWORD PTR [eax+ecx+4]
	mov	ecx, 8
	shl	ecx, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+4]
	shl	ecx, 1
	sub	edx, ecx
	neg	edx
	mov	DWORD PTR tv203[ebp], edx
	jmp	SHORT $LN21@gray_rende
$LN20@gray_rende:
	mov	edx, 8
	shl	edx, 1
	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	eax, DWORD PTR _arc$[ebp]
	add	edx, DWORD PTR [eax+ecx+4]
	mov	ecx, 8
	shl	ecx, 0
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+4]
	shl	ecx, 1
	sub	edx, ecx
	mov	DWORD PTR tv203[ebp], edx
$LN21@gray_rende:
	mov	edx, DWORD PTR tv203[ebp]
	mov	DWORD PTR _dy$[ebp], edx
; Line 959
	mov	eax, DWORD PTR _dx$[ebp]
	cmp	eax, DWORD PTR _dy$[ebp]
	jge	SHORT $LN15@gray_rende
; Line 960
	mov	ecx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _dx$[ebp], ecx
$LN15@gray_rende:
; Line 962
	cmp	DWORD PTR _dx$[ebp], 64			; 00000040H
	jge	SHORT $LN14@gray_rende
; Line 963
	jmp	$Draw$22
$LN14@gray_rende:
; Line 966
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _max$[ebp], edx
	mov	eax, DWORD PTR _max$[ebp]
	mov	DWORD PTR _min$[ebp], eax
; Line 968
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _y$[ebp], eax
; Line 969
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _min$[ebp]
	jge	SHORT $LN13@gray_rende
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _min$[ebp], edx
$LN13@gray_rende:
; Line 970
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _max$[ebp]
	jle	SHORT $LN12@gray_rende
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _max$[ebp], ecx
$LN12@gray_rende:
; Line 972
	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _y$[ebp], ecx
; Line 973
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _min$[ebp]
	jge	SHORT $LN11@gray_rende
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _min$[ebp], eax
$LN11@gray_rende:
; Line 974
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _max$[ebp]
	jle	SHORT $LN10@gray_rende
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _max$[ebp], edx
$LN10@gray_rende:
; Line 976
	mov	eax, DWORD PTR _min$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _worker$[ebp]
	cmp	eax, DWORD PTR [ecx+84]
	jge	SHORT $LN8@gray_rende
	mov	edx, DWORD PTR _max$[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	edx, DWORD PTR [eax+80]
	jge	SHORT $LN9@gray_rende
$LN8@gray_rende:
; Line 977
	jmp	$Draw$22
$LN9@gray_rende:
; Line 979
	mov	DWORD PTR _level$[ebp], 0
$LN7@gray_rende:
; Line 982
	mov	ecx, DWORD PTR _dx$[ebp]
	sar	ecx, 2
	mov	DWORD PTR _dx$[ebp], ecx
; Line 983
	mov	edx, DWORD PTR _level$[ebp]
	add	edx, 1
	mov	DWORD PTR _level$[ebp], edx
; Line 984
	cmp	DWORD PTR _dx$[ebp], 64			; 00000040H
	jg	SHORT $LN7@gray_rende
; Line 986
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _levels$[ebp]
	mov	eax, DWORD PTR _level$[ebp]
	mov	DWORD PTR [edx+ecx], eax
$LN4@gray_rende:
; Line 990
	mov	ecx, DWORD PTR _top$[ebp]
	mov	edx, DWORD PTR _levels$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _level$[ebp], eax
; Line 991
	cmp	DWORD PTR _level$[ebp], 0
	jle	SHORT $Draw$22
; Line 993
	mov	ecx, DWORD PTR _arc$[ebp]
	push	ecx
	call	_gray_split_conic
	add	esp, 4
; Line 994
	mov	edx, DWORD PTR _arc$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _arc$[ebp], edx
; Line 995
	mov	eax, DWORD PTR _top$[ebp]
	add	eax, 1
	mov	DWORD PTR _top$[ebp], eax
; Line 996
	mov	ecx, DWORD PTR _level$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv241[ebp], ecx
	mov	edx, DWORD PTR _top$[ebp]
	mov	eax, DWORD PTR _levels$[ebp]
	mov	ecx, DWORD PTR tv241[ebp]
	mov	DWORD PTR [eax+edx*4-4], ecx
	mov	edx, DWORD PTR _top$[ebp]
	mov	eax, DWORD PTR _levels$[ebp]
	mov	ecx, DWORD PTR tv241[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 997
	jmp	SHORT $LN3@gray_rende
$Draw$22:
; Line 1001
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	push	edx
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_gray_render_line
	add	esp, 12					; 0000000cH
; Line 1002
	mov	edx, DWORD PTR _top$[ebp]
	sub	edx, 1
	mov	DWORD PTR _top$[ebp], edx
; Line 1003
	mov	eax, DWORD PTR _arc$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _arc$[ebp], eax
$LN3@gray_rende:
; Line 1005
	cmp	DWORD PTR _top$[ebp], 0
	jge	$LN4@gray_rende
; Line 1006
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_render_conic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv150 = -24						; size = 4
tv142 = -20						; size = 4
tv88 = -16						; size = 4
tv80 = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_base$ = 8						; size = 4
_gray_split_conic PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 917
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 921
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	shl	ecx, 2
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax
; Line 922
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _b$[ebp], eax
; Line 923
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv80[ebp], eax
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 924
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv88[ebp], eax
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 925
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+ecx], eax
; Line 927
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	shl	ecx, 2
	mov	edx, DWORD PTR _base$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [esi+eax+4]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 928
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _b$[ebp], eax
; Line 929
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 930
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [ecx+eax+4]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv150[ebp], eax
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	mov	DWORD PTR [eax+edx+4], ecx
	mov	edx, DWORD PTR tv150[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 931
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 932
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_split_conic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_area$1 = -80						; size = 4
_two_fx$2 = -76						; size = 4
_ex$3 = -72						; size = 4
_max$4 = -68						; size = 4
_min$5 = -64						; size = 4
_incr$ = -60						; size = 4
_lift$ = -56						; size = 4
_rem$ = -52						; size = 4
_delta$ = -48						; size = 4
_first$ = -44						; size = 4
_p$ = -40						; size = 4
_x2$ = -36						; size = 4
_x$ = -32						; size = 4
_dy$ = -28						; size = 4
_dx$ = -24						; size = 4
_mod$ = -20						; size = 4
_fy2$ = -16						; size = 4
_fy1$ = -12						; size = 4
_ey2$ = -8						; size = 4
_ey1$ = -4						; size = 4
_worker$ = 8						; size = 4
_to_x$ = 12						; size = 4
_to_y$ = 16						; size = 4
_gray_render_line PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 776
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 783
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	sar	ecx, 8
	mov	DWORD PTR _ey1$[ebp], ecx
; Line 784
	mov	edx, DWORD PTR _to_y$[ebp]
	sar	edx, 8
	mov	DWORD PTR _ey2$[ebp], edx
; Line 785
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+132]
	sub	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR _fy1$[ebp], edx
; Line 786
	mov	eax, DWORD PTR _ey2$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _to_y$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _fy2$[ebp], ecx
; Line 788
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _to_x$[ebp]
	sub	eax, DWORD PTR [edx+128]
	mov	DWORD PTR _dx$[ebp], eax
; Line 789
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _to_y$[ebp]
	sub	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR _dy$[ebp], edx
; Line 796
	mov	eax, DWORD PTR _ey1$[ebp]
	mov	DWORD PTR _min$5[ebp], eax
; Line 797
	mov	ecx, DWORD PTR _ey2$[ebp]
	mov	DWORD PTR _max$4[ebp], ecx
; Line 798
	mov	edx, DWORD PTR _ey1$[ebp]
	cmp	edx, DWORD PTR _ey2$[ebp]
	jle	SHORT $LN21@gray_rende
; Line 800
	mov	eax, DWORD PTR _ey2$[ebp]
	mov	DWORD PTR _min$5[ebp], eax
; Line 801
	mov	ecx, DWORD PTR _ey1$[ebp]
	mov	DWORD PTR _max$4[ebp], ecx
$LN21@gray_rende:
; Line 803
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _min$5[ebp]
	cmp	eax, DWORD PTR [edx+84]
	jge	SHORT $LN19@gray_rende
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _max$4[ebp]
	cmp	edx, DWORD PTR [ecx+80]
	jge	SHORT $LN20@gray_rende
$LN19@gray_rende:
; Line 804
	jmp	$End$24
$LN20@gray_rende:
; Line 808
	mov	eax, DWORD PTR _ey1$[ebp]
	cmp	eax, DWORD PTR _ey2$[ebp]
	jne	SHORT $LN18@gray_rende
; Line 810
	mov	ecx, DWORD PTR _fy2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _to_x$[ebp]
	push	edx
	mov	eax, DWORD PTR _fy1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	push	edx
	mov	eax, DWORD PTR _ey1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_gray_render_scanline
	add	esp, 24					; 00000018H
; Line 811
	jmp	$End$24
$LN18@gray_rende:
; Line 815
	mov	DWORD PTR _incr$[ebp], 1
; Line 817
	cmp	DWORD PTR _dx$[ebp], 0
	jne	$LN17@gray_rende
; Line 819
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+128]
	sar	eax, 8
	mov	DWORD PTR _ex$3[ebp], eax
; Line 820
	mov	ecx, DWORD PTR _ex$3[ebp]
	shl	ecx, 8
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+128]
	sub	eax, ecx
	shl	eax, 1
	mov	DWORD PTR _two_fx$2[ebp], eax
; Line 824
	mov	DWORD PTR _first$[ebp], 256		; 00000100H
; Line 825
	cmp	DWORD PTR _dy$[ebp], 0
	jge	SHORT $LN16@gray_rende
; Line 827
	mov	DWORD PTR _first$[ebp], 0
; Line 828
	mov	DWORD PTR _incr$[ebp], -1
$LN16@gray_rende:
; Line 831
	mov	ecx, DWORD PTR _first$[ebp]
	sub	ecx, DWORD PTR _fy1$[ebp]
	mov	DWORD PTR _delta$[ebp], ecx
; Line 832
	mov	edx, DWORD PTR _two_fx$2[ebp]
	imul	edx, DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	add	edx, DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+96], edx
; Line 833
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+100]
	add	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+100], eax
; Line 834
	mov	edx, DWORD PTR _ey1$[ebp]
	add	edx, DWORD PTR _incr$[ebp]
	mov	DWORD PTR _ey1$[ebp], edx
; Line 836
	mov	eax, DWORD PTR _ey1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ex$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_set_cell
	add	esp, 12					; 0000000cH
; Line 838
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR _first$[ebp]
	lea	edx, DWORD PTR [ecx+eax-256]
	mov	DWORD PTR _delta$[ebp], edx
; Line 839
	mov	eax, DWORD PTR _two_fx$2[ebp]
	imul	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _area$1[ebp], eax
$LN15@gray_rende:
; Line 840
	mov	ecx, DWORD PTR _ey1$[ebp]
	cmp	ecx, DWORD PTR _ey2$[ebp]
	je	SHORT $LN14@gray_rende
; Line 842
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+96]
	add	eax, DWORD PTR _area$1[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+96], eax
; Line 843
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+100]
	add	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+100], eax
; Line 844
	mov	edx, DWORD PTR _ey1$[ebp]
	add	edx, DWORD PTR _incr$[ebp]
	mov	DWORD PTR _ey1$[ebp], edx
; Line 846
	mov	eax, DWORD PTR _ey1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ex$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_set_cell
	add	esp, 12					; 0000000cH
; Line 847
	jmp	SHORT $LN15@gray_rende
$LN14@gray_rende:
; Line 849
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR _fy2$[ebp]
	lea	edx, DWORD PTR [ecx+eax-256]
	mov	DWORD PTR _delta$[ebp], edx
; Line 850
	mov	eax, DWORD PTR _two_fx$2[ebp]
	imul	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [ecx+96]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+96], eax
; Line 851
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	add	ecx, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+100], ecx
; Line 853
	jmp	$End$24
$LN17@gray_rende:
; Line 857
	mov	eax, 256				; 00000100H
	sub	eax, DWORD PTR _fy1$[ebp]
	imul	eax, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 858
	mov	DWORD PTR _first$[ebp], 256		; 00000100H
; Line 859
	mov	DWORD PTR _incr$[ebp], 1
; Line 861
	cmp	DWORD PTR _dy$[ebp], 0
	jge	SHORT $LN12@gray_rende
; Line 863
	mov	ecx, DWORD PTR _fy1$[ebp]
	imul	ecx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 864
	mov	DWORD PTR _first$[ebp], 0
; Line 865
	mov	DWORD PTR _incr$[ebp], -1
; Line 866
	mov	edx, DWORD PTR _dy$[ebp]
	neg	edx
	mov	DWORD PTR _dy$[ebp], edx
$LN12@gray_rende:
; Line 869
	mov	eax, DWORD PTR _p$[ebp]
	cdq
	idiv	DWORD PTR _dy$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
	mov	eax, DWORD PTR _p$[ebp]
	cdq
	idiv	DWORD PTR _dy$[ebp]
	mov	DWORD PTR _mod$[ebp], edx
	cmp	DWORD PTR _mod$[ebp], 0
	jge	SHORT $LN11@gray_rende
	mov	eax, DWORD PTR _delta$[ebp]
	sub	eax, 1
	mov	DWORD PTR _delta$[ebp], eax
	mov	ecx, DWORD PTR _mod$[ebp]
	add	ecx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _mod$[ebp], ecx
$LN11@gray_rende:
	xor	edx, edx
	jne	SHORT $LN12@gray_rende
; Line 871
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	add	ecx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _x$[ebp], ecx
; Line 872
	mov	edx, DWORD PTR _first$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fy1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+128]
	push	eax
	mov	ecx, DWORD PTR _ey1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_render_scanline
	add	esp, 24					; 00000018H
; Line 874
	mov	eax, DWORD PTR _ey1$[ebp]
	add	eax, DWORD PTR _incr$[ebp]
	mov	DWORD PTR _ey1$[ebp], eax
; Line 875
	mov	ecx, DWORD PTR _ey1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	sar	edx, 8
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_gray_set_cell
	add	esp, 12					; 0000000cH
; Line 877
	mov	ecx, DWORD PTR _ey1$[ebp]
	cmp	ecx, DWORD PTR _ey2$[ebp]
	je	$LN8@gray_rende
; Line 879
	mov	edx, DWORD PTR _dx$[ebp]
	shl	edx, 8
	mov	DWORD PTR _p$[ebp], edx
$LN7@gray_rende:
; Line 880
	mov	eax, DWORD PTR _p$[ebp]
	cdq
	idiv	DWORD PTR _dy$[ebp]
	mov	DWORD PTR _lift$[ebp], eax
	mov	eax, DWORD PTR _p$[ebp]
	cdq
	idiv	DWORD PTR _dy$[ebp]
	mov	DWORD PTR _rem$[ebp], edx
	cmp	DWORD PTR _rem$[ebp], 0
	jge	SHORT $LN6@gray_rende
	mov	eax, DWORD PTR _lift$[ebp]
	sub	eax, 1
	mov	DWORD PTR _lift$[ebp], eax
	mov	ecx, DWORD PTR _rem$[ebp]
	add	ecx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _rem$[ebp], ecx
$LN6@gray_rende:
	xor	edx, edx
	jne	SHORT $LN7@gray_rende
; Line 881
	mov	eax, DWORD PTR _mod$[ebp]
	sub	eax, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _mod$[ebp], eax
$LN3@gray_rende:
; Line 883
	mov	ecx, DWORD PTR _ey1$[ebp]
	cmp	ecx, DWORD PTR _ey2$[ebp]
	je	SHORT $LN8@gray_rende
; Line 885
	mov	edx, DWORD PTR _lift$[ebp]
	mov	DWORD PTR _delta$[ebp], edx
; Line 886
	mov	eax, DWORD PTR _mod$[ebp]
	add	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR _mod$[ebp], eax
; Line 887
	js	SHORT $LN1@gray_rende
; Line 889
	mov	ecx, DWORD PTR _mod$[ebp]
	sub	ecx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _mod$[ebp], ecx
; Line 890
	mov	edx, DWORD PTR _delta$[ebp]
	add	edx, 1
	mov	DWORD PTR _delta$[ebp], edx
$LN1@gray_rende:
; Line 893
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _x2$[ebp], eax
; Line 896
	mov	ecx, DWORD PTR _first$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$[ebp]
	push	edx
	mov	eax, 256				; 00000100H
	sub	eax, DWORD PTR _first$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ey1$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_gray_render_scanline
	add	esp, 24					; 00000018H
; Line 897
	mov	ecx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR _x$[ebp], ecx
; Line 899
	mov	edx, DWORD PTR _ey1$[ebp]
	add	edx, DWORD PTR _incr$[ebp]
	mov	DWORD PTR _ey1$[ebp], edx
; Line 900
	mov	eax, DWORD PTR _ey1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sar	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_set_cell
	add	esp, 12					; 0000000cH
; Line 901
	jmp	$LN3@gray_rende
$LN8@gray_rende:
; Line 906
	mov	eax, DWORD PTR _fy2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _to_x$[ebp]
	push	ecx
	mov	edx, 256				; 00000100H
	sub	edx, DWORD PTR _first$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ey1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_render_scanline
	add	esp, 24					; 00000018H
$End$24:
; Line 909
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _to_x$[ebp]
	mov	DWORD PTR [eax+128], ecx
; Line 910
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _to_y$[ebp]
	mov	DWORD PTR [edx+132], eax
; Line 911
	mov	ecx, DWORD PTR _ey2$[ebp]
	shl	ecx, 8
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+136], ecx
; Line 912
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_render_line ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rem$1 = -48						; size = 4
_lift$2 = -44						; size = 4
_incr$ = -40						; size = 4
_dx$ = -36						; size = 4
_first$ = -32						; size = 4
_p$ = -28						; size = 4
_mod$ = -24						; size = 4
_delta$ = -20						; size = 4
_fx2$ = -16						; size = 4
_fx1$ = -12						; size = 4
_ex2$ = -8						; size = 4
_ex1$ = -4						; size = 4
_worker$ = 8						; size = 4
_ey$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
_gray_render_scanline PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 681
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 687
	mov	eax, DWORD PTR _x2$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _dx$[ebp], eax
; Line 689
	mov	ecx, DWORD PTR _x1$[ebp]
	sar	ecx, 8
	mov	DWORD PTR _ex1$[ebp], ecx
; Line 690
	mov	edx, DWORD PTR _x2$[ebp]
	sar	edx, 8
	mov	DWORD PTR _ex2$[ebp], edx
; Line 691
	mov	eax, DWORD PTR _ex1$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _x1$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _fx1$[ebp], ecx
; Line 692
	mov	edx, DWORD PTR _ex2$[ebp]
	shl	edx, 8
	mov	eax, DWORD PTR _x2$[ebp]
	sub	eax, edx
	mov	DWORD PTR _fx2$[ebp], eax
; Line 695
	mov	ecx, DWORD PTR _y1$[ebp]
	cmp	ecx, DWORD PTR _y2$[ebp]
	jne	SHORT $LN15@gray_rende
; Line 697
	mov	edx, DWORD PTR _ey$[ebp]
	push	edx
	mov	eax, DWORD PTR _ex2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_gray_set_cell
	add	esp, 12					; 0000000cH
; Line 698
	jmp	$LN16@gray_rende
$LN15@gray_rende:
; Line 703
	mov	edx, DWORD PTR _ex1$[ebp]
	cmp	edx, DWORD PTR _ex2$[ebp]
	jne	SHORT $LN14@gray_rende
; Line 705
	mov	eax, DWORD PTR _y2$[ebp]
	sub	eax, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
; Line 706
	mov	ecx, DWORD PTR _fx1$[ebp]
	add	ecx, DWORD PTR _fx2$[ebp]
	imul	ecx, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	add	ecx, DWORD PTR [edx+96]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+96], ecx
; Line 707
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	add	edx, DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+100], edx
; Line 708
	jmp	$LN16@gray_rende
$LN14@gray_rende:
; Line 714
	mov	ecx, 256				; 00000100H
	sub	ecx, DWORD PTR _fx1$[ebp]
	mov	edx, DWORD PTR _y2$[ebp]
	sub	edx, DWORD PTR _y1$[ebp]
	imul	ecx, edx
	mov	DWORD PTR _p$[ebp], ecx
; Line 715
	mov	DWORD PTR _first$[ebp], 256		; 00000100H
; Line 716
	mov	DWORD PTR _incr$[ebp], 1
; Line 718
	cmp	DWORD PTR _dx$[ebp], 0
	jge	SHORT $LN12@gray_rende
; Line 720
	mov	eax, DWORD PTR _y2$[ebp]
	sub	eax, DWORD PTR _y1$[ebp]
	imul	eax, DWORD PTR _fx1$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 721
	mov	DWORD PTR _first$[ebp], 0
; Line 722
	mov	DWORD PTR _incr$[ebp], -1
; Line 723
	mov	ecx, DWORD PTR _dx$[ebp]
	neg	ecx
	mov	DWORD PTR _dx$[ebp], ecx
$LN12@gray_rende:
; Line 726
	mov	eax, DWORD PTR _p$[ebp]
	cdq
	idiv	DWORD PTR _dx$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
	mov	eax, DWORD PTR _p$[ebp]
	cdq
	idiv	DWORD PTR _dx$[ebp]
	mov	DWORD PTR _mod$[ebp], edx
	cmp	DWORD PTR _mod$[ebp], 0
	jge	SHORT $LN11@gray_rende
	mov	edx, DWORD PTR _delta$[ebp]
	sub	edx, 1
	mov	DWORD PTR _delta$[ebp], edx
	mov	eax, DWORD PTR _mod$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _mod$[ebp], eax
$LN11@gray_rende:
	xor	ecx, ecx
	jne	SHORT $LN12@gray_rende
; Line 728
	mov	edx, DWORD PTR _fx1$[ebp]
	add	edx, DWORD PTR _first$[ebp]
	imul	edx, DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR _worker$[ebp]
	add	edx, DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+96], edx
; Line 729
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+100]
	add	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+100], eax
; Line 731
	mov	edx, DWORD PTR _ex1$[ebp]
	add	edx, DWORD PTR _incr$[ebp]
	mov	DWORD PTR _ex1$[ebp], edx
; Line 732
	mov	eax, DWORD PTR _ey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ex1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worker$[ebp]
	push	edx
	call	_gray_set_cell
	add	esp, 12					; 0000000cH
; Line 733
	mov	eax, DWORD PTR _y1$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _y1$[ebp], eax
; Line 735
	mov	ecx, DWORD PTR _ex1$[ebp]
	cmp	ecx, DWORD PTR _ex2$[ebp]
	je	$LN8@gray_rende
; Line 740
	mov	edx, DWORD PTR _y2$[ebp]
	sub	edx, DWORD PTR _y1$[ebp]
	add	edx, DWORD PTR _delta$[ebp]
	shl	edx, 8
	mov	DWORD PTR _p$[ebp], edx
$LN7@gray_rende:
; Line 741
	mov	eax, DWORD PTR _p$[ebp]
	cdq
	idiv	DWORD PTR _dx$[ebp]
	mov	DWORD PTR _lift$2[ebp], eax
	mov	eax, DWORD PTR _p$[ebp]
	cdq
	idiv	DWORD PTR _dx$[ebp]
	mov	DWORD PTR _rem$1[ebp], edx
	cmp	DWORD PTR _rem$1[ebp], 0
	jge	SHORT $LN6@gray_rende
	mov	eax, DWORD PTR _lift$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _lift$2[ebp], eax
	mov	ecx, DWORD PTR _rem$1[ebp]
	add	ecx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _rem$1[ebp], ecx
$LN6@gray_rende:
	xor	edx, edx
	jne	SHORT $LN7@gray_rende
; Line 743
	mov	eax, DWORD PTR _mod$[ebp]
	sub	eax, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _mod$[ebp], eax
$LN3@gray_rende:
; Line 745
	mov	ecx, DWORD PTR _ex1$[ebp]
	cmp	ecx, DWORD PTR _ex2$[ebp]
	je	SHORT $LN8@gray_rende
; Line 747
	mov	edx, DWORD PTR _lift$2[ebp]
	mov	DWORD PTR _delta$[ebp], edx
; Line 748
	mov	eax, DWORD PTR _mod$[ebp]
	add	eax, DWORD PTR _rem$1[ebp]
	mov	DWORD PTR _mod$[ebp], eax
; Line 749
	js	SHORT $LN1@gray_rende
; Line 751
	mov	ecx, DWORD PTR _mod$[ebp]
	sub	ecx, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _mod$[ebp], ecx
; Line 752
	mov	edx, DWORD PTR _delta$[ebp]
	add	edx, 1
	mov	DWORD PTR _delta$[ebp], edx
$LN1@gray_rende:
; Line 755
	mov	eax, DWORD PTR _delta$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [ecx+96]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+96], eax
; Line 756
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	add	ecx, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+100], ecx
; Line 757
	mov	eax, DWORD PTR _y1$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _y1$[ebp], eax
; Line 758
	mov	ecx, DWORD PTR _ex1$[ebp]
	add	ecx, DWORD PTR _incr$[ebp]
	mov	DWORD PTR _ex1$[ebp], ecx
; Line 759
	mov	edx, DWORD PTR _ey$[ebp]
	push	edx
	mov	eax, DWORD PTR _ex1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_gray_set_cell
	add	esp, 12					; 0000000cH
; Line 760
	jmp	SHORT $LN3@gray_rende
$LN8@gray_rende:
; Line 763
	mov	edx, DWORD PTR _y2$[ebp]
	sub	edx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _delta$[ebp], edx
; Line 764
	mov	eax, DWORD PTR _fx2$[ebp]
	add	eax, 256				; 00000100H
	sub	eax, DWORD PTR _first$[ebp]
	imul	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [ecx+96]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+96], eax
; Line 765
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	add	ecx, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+100], ecx
$LN16@gray_rende:
; Line 766
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_render_scanline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_worker$ = 8						; size = 4
_ex$ = 12						; size = 4
_ey$ = 16						; size = 4
_gray_start_cell PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 653
	push	ebp
	mov	ebp, esp
; Line 654
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _ex$[ebp]
	cmp	ecx, DWORD PTR [eax+76]
	jle	SHORT $LN2@gray_start
; Line 655
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR _ex$[ebp], eax
$LN2@gray_start:
; Line 657
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _ex$[ebp]
	cmp	edx, DWORD PTR [ecx+72]
	jge	SHORT $LN1@gray_start
; Line 658
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	sub	ecx, 1
	mov	DWORD PTR _ex$[ebp], ecx
$LN1@gray_start:
; Line 660
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+96], 0
; Line 661
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+100], 0
; Line 662
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _ex$[ebp]
	sub	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+64], edx
; Line 663
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _ey$[ebp]
	sub	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+68], edx
; Line 664
	mov	ecx, DWORD PTR _ey$[ebp]
	shl	ecx, 8
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+136], ecx
; Line 665
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+104], 0
; Line 667
	mov	ecx, DWORD PTR _ey$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ex$[ebp]
	push	edx
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_gray_set_cell
	add	esp, 12					; 0000000cH
; Line 668
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_gray_start_cell ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv88 = -4						; size = 4
_worker$ = 8						; size = 4
_ex$ = 12						; size = 4
_ey$ = 16						; size = 4
_gray_set_cell PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 606
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 619
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _ey$[ebp]
	sub	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _ey$[ebp], ecx
; Line 621
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _ex$[ebp]
	cmp	eax, DWORD PTR [edx+76]
	jle	SHORT $LN5@gray_set_c
; Line 622
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR _ex$[ebp], edx
$LN5@gray_set_c:
; Line 624
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _ex$[ebp]
	sub	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _ex$[ebp], ecx
; Line 625
	jns	SHORT $LN4@gray_set_c
; Line 626
	mov	DWORD PTR _ex$[ebp], -1
$LN4@gray_set_c:
; Line 629
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _ex$[ebp]
	cmp	eax, DWORD PTR [edx+64]
	jne	SHORT $LN2@gray_set_c
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _ey$[ebp]
	cmp	edx, DWORD PTR [ecx+68]
	je	SHORT $LN3@gray_set_c
$LN2@gray_set_c:
; Line 632
	mov	eax, DWORD PTR _worker$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jne	SHORT $LN1@gray_set_c
; Line 633
	mov	ecx, DWORD PTR _worker$[ebp]
	push	ecx
	call	_gray_record_cell
	add	esp, 4
$LN1@gray_set_c:
; Line 635
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+96], 0
; Line 636
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+100], 0
; Line 637
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [ecx+64], edx
; Line 638
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _ey$[ebp]
	mov	DWORD PTR [eax+68], ecx
$LN3@gray_set_c:
; Line 642
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _ey$[ebp]
	cmp	eax, DWORD PTR [edx+92]
	jae	SHORT $LN8@gray_set_c
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _ex$[ebp]
	cmp	edx, DWORD PTR [ecx+88]
	jge	SHORT $LN8@gray_set_c
	mov	DWORD PTR tv88[ebp], 0
	jmp	SHORT $LN9@gray_set_c
$LN8@gray_set_c:
	mov	DWORD PTR tv88[ebp], 1
$LN9@gray_set_c:
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR [eax+104], ecx
; Line 643
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_set_cell ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cell$1 = -4						; size = 4
_worker$ = 8						; size = 4
_gray_record_cell PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 587
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 588
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+96]
	or	edx, DWORD PTR [ecx+100]
	je	SHORT $LN2@gray_recor
; Line 590
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	_gray_find_cell
	add	esp, 4
	mov	DWORD PTR _cell$1[ebp], eax
; Line 593
	mov	ecx, DWORD PTR _cell$1[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _worker$[ebp]
	add	edx, DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _cell$1[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 594
	mov	edx, DWORD PTR _cell$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _worker$[ebp]
	add	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _cell$1[ebp]
	mov	DWORD PTR [edx+4], eax
$LN2@gray_recor:
; Line 596
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_record_cell ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_x$ = -12						; size = 4
_cell$ = -8						; size = 4
_pcell$ = -4						; size = 4
_worker$ = 8						; size = 4
_gray_find_cell PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 548
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 550
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _x$[ebp], ecx
; Line 553
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR [edx+88]
	jle	SHORT $LN7@gray_find_
; Line 554
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR _x$[ebp], edx
$LN7@gray_find_:
; Line 556
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+1328]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _pcell$[ebp], ecx
$LN6@gray_find_:
; Line 559
	mov	edx, DWORD PTR _pcell$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cell$[ebp], eax
; Line 560
	cmp	DWORD PTR _cell$[ebp], 0
	je	SHORT $LN3@gray_find_
	mov	ecx, DWORD PTR _cell$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _x$[ebp]
	jle	SHORT $LN4@gray_find_
$LN3@gray_find_:
; Line 561
	jmp	SHORT $LN5@gray_find_
$LN4@gray_find_:
; Line 563
	mov	eax, DWORD PTR _cell$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _x$[ebp]
	jne	SHORT $LN2@gray_find_
; Line 564
	jmp	SHORT $Exit$10
$LN2@gray_find_:
; Line 566
	mov	edx, DWORD PTR _cell$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pcell$[ebp], edx
; Line 567
	jmp	SHORT $LN6@gray_find_
$LN5@gray_find_:
; Line 569
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [eax+116]
	cmp	edx, DWORD PTR [ecx+112]
	jl	SHORT $LN1@gray_find_
; Line 570
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _worker$[ebp]
	push	eax
	call	DWORD PTR __imp__longjmp
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@gray_find_:
; Line 572
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	shl	edx, 4
	mov	eax, DWORD PTR _worker$[ebp]
	add	edx, DWORD PTR [eax+108]
	mov	DWORD PTR _cell$[ebp], edx
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	add	edx, 1
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+116], edx
; Line 573
	mov	ecx, DWORD PTR _cell$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 574
	mov	eax, DWORD PTR _cell$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 575
	mov	ecx, DWORD PTR _cell$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 577
	mov	edx, DWORD PTR _cell$[ebp]
	mov	eax, DWORD PTR _pcell$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+12], ecx
; Line 578
	mov	edx, DWORD PTR _pcell$[ebp]
	mov	eax, DWORD PTR _cell$[ebp]
	mov	DWORD PTR [edx], eax
$Exit$10:
; Line 581
	mov	eax, DWORD PTR _cell$[ebp]
$LN9@gray_find_:
; Line 582
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_find_cell ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_y$1 = -20						; size = 4
_x$2 = -16						; size = 4
_limit$ = -12						; size = 4
_vec$ = -8						; size = 4
_outline$ = -4						; size = 4
_worker$ = 8						; size = 4
_gray_compute_cbox PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 504
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 505
	mov	eax, DWORD PTR _worker$[ebp]
	add	eax, 1044				; 00000414H
	mov	DWORD PTR _outline$[ebp], eax
; Line 506
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _vec$[ebp], edx
; Line 507
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _vec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _limit$[ebp], eax
; Line 510
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	test	edx, edx
	jg	SHORT $LN8@gray_compu
; Line 512
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+76], 0
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+72], 0
; Line 513
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+84], 0
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 514
	jmp	$LN9@gray_compu
$LN8@gray_compu:
; Line 517
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+76], eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx+72], eax
; Line 518
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+84], eax
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR [ecx+80], eax
; Line 520
	mov	ecx, DWORD PTR _vec$[ebp]
	add	ecx, 8
	mov	DWORD PTR _vec$[ebp], ecx
; Line 522
	jmp	SHORT $LN7@gray_compu
$LN6@gray_compu:
	mov	edx, DWORD PTR _vec$[ebp]
	add	edx, 8
	mov	DWORD PTR _vec$[ebp], edx
$LN7@gray_compu:
	mov	eax, DWORD PTR _vec$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN5@gray_compu
; Line 524
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _x$2[ebp], edx
; Line 525
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _y$1[ebp], ecx
; Line 528
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _x$2[ebp]
	cmp	eax, DWORD PTR [edx+72]
	jge	SHORT $LN4@gray_compu
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _x$2[ebp]
	mov	DWORD PTR [ecx+72], edx
$LN4@gray_compu:
; Line 529
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _x$2[ebp]
	cmp	ecx, DWORD PTR [eax+76]
	jle	SHORT $LN3@gray_compu
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _x$2[ebp]
	mov	DWORD PTR [edx+76], eax
$LN3@gray_compu:
; Line 530
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _y$1[ebp]
	cmp	edx, DWORD PTR [ecx+80]
	jge	SHORT $LN2@gray_compu
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _y$1[ebp]
	mov	DWORD PTR [eax+80], ecx
$LN2@gray_compu:
; Line 531
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _y$1[ebp]
	cmp	eax, DWORD PTR [edx+84]
	jle	SHORT $LN1@gray_compu
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _y$1[ebp]
	mov	DWORD PTR [ecx+84], edx
$LN1@gray_compu:
; Line 532
	jmp	SHORT $LN6@gray_compu
$LN5@gray_compu:
; Line 535
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	sar	ecx, 6
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+72], ecx
; Line 536
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sar	ecx, 6
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+80], ecx
; Line 537
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 63					; 0000003fH
	sar	ecx, 6
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+76], ecx
; Line 538
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 63					; 0000003fH
	sar	ecx, 6
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+84], ecx
$LN9@gray_compu:
; Line 539
	mov	esp, ebp
	pop	ebp
	ret	0
_gray_compute_cbox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_worker$ = 8						; size = 4
_buffer$ = 12						; size = 4
_byte_size$ = 16					; size = 4
_gray_init_cells PROC
; File d:\mozilla\modules\freetype2\src\smooth\ftgrays.c
; Line 484
	push	ebp
	mov	ebp, esp
; Line 485
	mov	eax, DWORD PTR _worker$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+1320], ecx
; Line 486
	mov	edx, DWORD PTR _worker$[ebp]
	mov	eax, DWORD PTR _byte_size$[ebp]
	mov	DWORD PTR [edx+1324], eax
; Line 488
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [ecx+1328], edx
; Line 489
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+108], 0
; Line 490
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+112], 0
; Line 491
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+116], 0
; Line 492
	mov	eax, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [eax+96], 0
; Line 493
	mov	ecx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [ecx+100], 0
; Line 494
	mov	edx, DWORD PTR _worker$[ebp]
	mov	DWORD PTR [edx+104], 1
; Line 495
	pop	ebp
	ret	0
_gray_init_cells ENDP
_TEXT	ENDS
END
