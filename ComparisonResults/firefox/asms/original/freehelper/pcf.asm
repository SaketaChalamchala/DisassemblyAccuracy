; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\pcf\pcf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_pcf_driver_class
CONST	SEGMENT
_tableNames DD	FLAT:$SG7367
	DD	FLAT:$SG7368
	DD	FLAT:$SG7369
	DD	FLAT:$SG7370
	DD	FLAT:$SG7371
	DD	FLAT:$SG7372
	DD	FLAT:$SG7373
	DD	FLAT:$SG7374
	DD	FLAT:$SG7375
_pcf_toc_header DB 04H
	DB	00H
	DW	08H
	DB	012H
	DB	04H
	DW	00H
	DB	012H
	DB	04H
	DW	04H
	DB	00H
	DB	00H
	DW	00H
_pcf_compressed_metric_header DB 04H
	DB	00H
	DW	05H
	DB	08H
	DB	01H
	DW	00H
	DB	08H
	DB	01H
	DW	01H
	DB	08H
	DB	01H
	DW	02H
	DB	08H
	DB	01H
	DW	03H
	DB	08H
	DB	01H
	DW	04H
	DB	00H
	DB	00H
	DW	00H
_pcf_driver_class DD 0201H
	DD	01cH
	DD	FLAT:$SG8773
	DD	010000H
	DD	020000H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_pcf_driver_requester
	DD	0148H
	DD	02cH
	DD	0a0H
	DD	FLAT:_PCF_Face_Init
	DD	FLAT:_PCF_Face_Done
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_PCF_Glyph_Load
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_PCF_Size_Request
	DD	FLAT:_PCF_Size_Select
_pcf_table_header DB 04H
	DB	00H
	DW	010H
	DB	012H
	DB	04H
	DW	00H
	DB	012H
	DB	04H
	DW	04H
	DB	012H
	DB	04H
	DW	08H
	DB	012H
	DB	04H
	DW	0cH
	DB	00H
	DB	00H
	DW	00H
_pcf_cmap_class DD 018H
	DD	FLAT:_pcf_cmap_init
	DD	FLAT:_pcf_cmap_done
	DD	FLAT:_pcf_cmap_char_index
	DD	FLAT:_pcf_cmap_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_pcf_metric_header DB 04H
	DB	00H
	DW	0cH
	DB	0fH
	DB	02H
	DW	00H
	DB	0fH
	DB	02H
	DW	02H
	DB	0fH
	DB	02H
	DW	04H
	DB	0fH
	DB	02H
	DW	06H
	DB	0fH
	DB	02H
	DW	08H
	DB	0fH
	DB	02H
	DW	0aH
	DB	00H
	DB	00H
	DW	00H
_pcf_metric_msb_header DB 04H
	DB	00H
	DW	0cH
	DB	0dH
	DB	02H
	DW	00H
	DB	0dH
	DB	02H
	DW	02H
	DB	0dH
	DB	02H
	DW	04H
	DB	0dH
	DB	02H
	DW	06H
	DB	0dH
	DB	02H
	DW	08H
	DB	0dH
	DB	02H
	DW	0aH
	DB	00H
	DB	00H
	DW	00H
_pcf_property_header DB 04H
	DB	00H
	DW	09H
	DB	013H
	DB	04H
	DW	00H
	DB	08H
	DB	01H
	DW	04H
	DB	013H
	DB	04H
	DW	08H
	DB	00H
	DB	00H
	DW	00H
_pcf_property_msb_header DB 04H
	DB	00H
	DW	09H
	DB	011H
	DB	04H
	DW	00H
	DB	08H
	DB	01H
	DW	04H
	DB	011H
	DB	04H
	DW	08H
	DB	00H
	DB	00H
	DW	00H
_pcf_service_bdf DD FLAT:_pcf_get_charset_id
	DD	FLAT:_pcf_get_bdf_property
_pcf_services DD FLAT:$SG8760
	DD	FLAT:_pcf_service_bdf
	DD	FLAT:$SG8761
	DD	FLAT:$SG8762
	DD	00H
	DD	00H
_pcf_accel_header DB 04H
	DB	00H
	DW	014H
	DB	08H
	DB	01H
	DW	00H
	DB	08H
	DB	01H
	DW	01H
	DB	08H
	DB	01H
	DW	02H
	DB	08H
	DB	01H
	DW	03H
	DB	08H
	DB	01H
	DW	04H
	DB	08H
	DB	01H
	DW	05H
	DB	08H
	DB	01H
	DW	06H
	DB	019H
	DB	01H
	DW	00H
	DB	013H
	DB	04H
	DW	08H
	DB	013H
	DB	04H
	DW	0cH
	DB	013H
	DB	04H
	DW	010H
	DB	00H
	DB	00H
	DW	00H
_pcf_accel_msb_header DB 04H
	DB	00H
	DW	014H
	DB	08H
	DB	01H
	DW	00H
	DB	08H
	DB	01H
	DW	01H
	DB	08H
	DB	01H
	DW	02H
	DB	08H
	DB	01H
	DW	03H
	DB	08H
	DB	01H
	DW	04H
	DB	08H
	DB	01H
	DW	05H
	DB	08H
	DB	01H
	DW	06H
	DB	019H
	DB	01H
	DW	00H
	DB	011H
	DB	04H
	DW	08H
	DB	011H
	DB	04H
	DW	0cH
	DB	011H
	DB	04H
	DW	010H
	DB	00H
	DB	00H
	DW	00H
CONST	ENDS
_DATA	SEGMENT
$SG8224	DB	'SLANT', 00H
	ORG $+2
$SG8229	DB	'Oblique', 00H
$SG8230	DB	'Italic', 00H
	ORG $+1
$SG8231	DB	'WEIGHT_NAME', 00H
$SG8235	DB	'Bold', 00H
	ORG $+3
$SG8236	DB	'SETWIDTH_NAME', 00H
	ORG $+2
$SG8239	DB	'ADD_STYLE_NAME', 00H
	ORG $+1
$SG8248	DB	'Regular', 00H
$SG8290	DB	'FAMILY_NAME', 00H
$SG8305	DB	'AVERAGE_WIDTH', 00H
	ORG $+2
$SG8310	DB	'POINT_SIZE', 00H
	ORG $+1
$SG8313	DB	'PIXEL_SIZE', 00H
	ORG $+1
$SG8316	DB	'RESOLUTION_X', 00H
	ORG $+3
$SG8319	DB	'RESOLUTION_Y', 00H
	ORG $+3
$SG8328	DB	'CHARSET_REGISTRY', 00H
	ORG $+3
$SG8329	DB	'CHARSET_ENCODING', 00H
	ORG $+3
$SG8338	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7367	DB	'prop', 00H
	ORG $+3
$SG7368	DB	'accl', 00H
	ORG $+3
$SG7369	DB	'mtrcs', 00H
	ORG $+2
$SG7370	DB	'bmps', 00H
	ORG $+3
$SG7371	DB	'imtrcs', 00H
	ORG $+1
$SG7372	DB	'enc', 00H
$SG7373	DB	'swidth', 00H
	ORG $+1
$SG7374	DB	'names', 00H
	ORG $+2
$SG7375	DB	'accel', 00H
	ORG $+2
$SG7424	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7427	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7431	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7449	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7456	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7458	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7463	DB	'?', 00H
	ORG $+2
$SG7468	DB	'pcf_read_TOC:', 0aH, 00H
	ORG $+1
$SG8496	DB	'pcf_cmap_char_next: charcode 0x%x > 32bit API', 00H
	ORG $+2
$SG7473	DB	'  number of tables: %ld', 0aH, 00H
	ORG $+3
$SG8587	DB	'PCF driver', 0aH, 00H
$SG7486	DB	'  %d: type=%s, format=0x%X, size=%ld (0x%lX), offset=%ld'
	DB	' (0x%lX)', 0aH, 00H
	ORG $+2
$SG8598	DB	'PCF_Face_Init: invalid face index', 0aH, 00H
	ORG $+1
$SG8599	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c', 00H
$SG8611	DB	'10646', 00H
	ORG $+2
$SG8612	DB	'8859', 00H
	ORG $+3
$SG8613	DB	'1', 00H
	ORG $+2
$SG8624	DB	'  not a PCF file', 0aH, 00H
	ORG $+2
$SG8625	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c', 00H
$SG7621	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7625	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG8655	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c', 00H
$SG8680	DB	'PCF_Glyph_Load: glyph index %d', 0aH, 00H
$SG8682	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c', 00H
$SG8686	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c', 00H
$SG8692	DB	'BIT_ORDER %d ; BYTE_ORDER %d ; GLYPH_PAD %d', 0aH, 00H
	ORG $+3
$SG8702	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c', 00H
$SG7712	DB	'pcf_get_properties:', 0aH, 00H
	ORG $+3
$SG8738	DB	'pcf_get_bdf_property: ', 00H
	ORG $+1
$SG7717	DB	'  format = %ld', 0aH, 00H
$SG8743	DB	'too large integer 0x%x is truncated', 0aH, 00H
	ORG $+3
$SG8745	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c', 00H
$SG7732	DB	'  nprop = %d (truncate %d props)', 0aH, 00H
	ORG $+2
$SG7735	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG8760	DB	'bdf', 00H
$SG8761	DB	'xf86-driver-name', 00H
	ORG $+3
$SG8762	DB	'PCF', 00H
$SG8773	DB	'pcf', 00H
$SG7750	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7762	DB	'  string_size = %ld', 0aH, 00H
	ORG $+3
$SG7764	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7780	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7788	DB	'  %s:', 00H
	ORG $+2
$SG7794	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7802	DB	' `%s''', 0aH, 00H
	ORG $+1
$SG7808	DB	' %d', 0aH, 00H
	ORG $+3
$SG7836	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7852	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7854	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7859	DB	'pcf_get_metrics:', 0aH, 00H
	ORG $+2
$SG7864	DB	'  number of metrics: %d', 0aH, 00H
	ORG $+3
$SG7867	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7870	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7874	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7926	DB	'pcf_get_bitmaps:', 0aH, 00H
	ORG $+2
$SG7882	DB	'  idx %d: width=%d, lsb=%d, rsb=%d, ascent=%d, descent=%'
	DB	'd, swidth=%d', 0aH, 00H
	ORG $+2
$SG7890	DB	'pcf_get_metrics: invalid metrics for glyph %d', 0aH, 00H
	ORG $+1
$SG7921	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7931	DB	'  number of bitmaps: %d', 0aH, 00H
	ORG $+3
$SG7935	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG7952	DB	'  bitmap %d: offset %ld (0x%lX)', 0aH, 00H
	ORG $+3
$SG7969	DB	'  padding %d implies a size of %ld', 0aH, 00H
$SG7974	DB	'  %d bitmaps, padding index %ld', 0aH, 00H
	ORG $+3
$SG7979	DB	'  bitmap size = %d', 0aH, 00H
$SG7990	DB	'pcf_get_bitmaps: invalid offset to bitmap data of glyph '
	DB	'%d', 0aH, 00H
$SG8034	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG8037	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG8042	DB	'pdf_get_encodings:', 0aH, 00H
$SG8047	DB	'  firstCol %d, lastCol %d, firstRow %d, lastRow %d', 0aH
	DB	00H
$SG8051	DB	'd:\mozilla\modules\freetype2\src\pcf\pcfread.c', 00H
	ORG $+1
$SG8070	DB	'  code %d (0x%04X): idx %d', 0aH, 00H
_DATA	ENDS
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_ft_mem_strdup:PROC
EXTRN	_ft_service_list_lookup:PROC
EXTRN	_FT_CMap_New:PROC
EXTRN	_FT_Select_Metrics:PROC
EXTRN	_ft_synthesize_vertical_metrics:PROC
EXTRN	_ft_glyphslot_alloc_bitmap:PROC
EXTRN	_FT_Stream_Close:PROC
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Skip:PROC
EXTRN	_FT_Stream_Read:PROC
EXTRN	_FT_Stream_EnterFrame:PROC
EXTRN	_FT_Stream_ExitFrame:PROC
EXTRN	_FT_Stream_GetUShort:PROC
EXTRN	_FT_Stream_GetULong:PROC
EXTRN	_FT_Stream_GetUShortLE:PROC
EXTRN	_FT_Stream_GetULongLE:PROC
EXTRN	_FT_Stream_ReadUShort:PROC
EXTRN	_FT_Stream_ReadULong:PROC
EXTRN	_FT_Stream_ReadUShortLE:PROC
EXTRN	_FT_Stream_ReadULongLE:PROC
EXTRN	_FT_Stream_ReadFields:PROC
EXTRN	_FT_Stream_OpenGzip:PROC
EXTRN	_FT_Stream_OpenLZW:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_name$ = 12						; size = 4
_pcf_driver_requester PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 679
	push	ebp
	mov	ebp, esp
; Line 680
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 682
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET _pcf_services
	call	_ft_service_list_lookup
	add	esp, 8
; Line 683
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pcf_driver_requester ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_acharset_encoding$ = 12				; size = 4
_acharset_registry$ = 16				; size = 4
_pcf_get_charset_id PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 647
	push	ebp
	mov	ebp, esp
; Line 648
	mov	eax, DWORD PTR _acharset_encoding$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	DWORD PTR [eax], edx
; Line 649
	mov	eax, DWORD PTR _acharset_registry$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+180]
	mov	DWORD PTR [eax], edx
; Line 651
	xor	eax, eax
; Line 652
	pop	ebp
	ret	0
_pcf_get_charset_id ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_prop$ = -4						; size = 4
_face$ = 8						; size = 4
_prop_name$ = 12					; size = 4
_aproperty$ = 16					; size = 4
_pcf_get_bdf_property PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 610
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 614
	mov	eax, DWORD PTR _prop_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _prop$[ebp], eax
; Line 615
	cmp	DWORD PTR _prop$[ebp], 0
	je	$LN13@pcf_get_bd
; Line 617
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	test	eax, eax
	je	SHORT $LN12@pcf_get_bd
; Line 619
	mov	ecx, DWORD PTR _aproperty$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 620
	mov	edx, DWORD PTR _aproperty$[ebp]
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+4], ecx
; Line 622
	jmp	SHORT $LN11@pcf_get_bd
$LN12@pcf_get_bd:
; Line 624
	mov	edx, DWORD PTR _prop$[ebp]
	cmp	DWORD PTR [edx+8], 2147483647		; 7fffffffH
	jg	SHORT $LN8@pcf_get_bd
	mov	eax, DWORD PTR _prop$[ebp]
	cmp	DWORD PTR [eax+8], -2147483648		; 80000000H
	jge	SHORT $LN10@pcf_get_bd
$LN8@pcf_get_bd:
; Line 626
	mov	ecx, 4
	imul	edx, ecx, 62
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN7@pcf_get_bd
	push	OFFSET $SG8738
	call	_FT_Message
	add	esp, 4
$LN7@pcf_get_bd:
	xor	eax, eax
	jne	SHORT $LN8@pcf_get_bd
$LN4@pcf_get_bd:
; Line 627
	mov	ecx, 4
	imul	edx, ecx, 62
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN3@pcf_get_bd
	push	OFFSET $SG8743
	call	_FT_Message
	add	esp, 4
$LN3@pcf_get_bd:
	xor	eax, eax
	jne	SHORT $LN4@pcf_get_bd
$LN10@pcf_get_bd:
; Line 633
	mov	ecx, DWORD PTR _aproperty$[ebp]
	mov	DWORD PTR [ecx], 2
; Line 634
	mov	edx, DWORD PTR _aproperty$[ebp]
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+4], ecx
$LN11@pcf_get_bd:
; Line 636
	xor	eax, eax
	jmp	SHORT $LN14@pcf_get_bd
$LN13@pcf_get_bd:
; Line 639
	push	OFFSET $SG8745
	push	639					; 0000027fH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
$LN14@pcf_get_bd:
; Line 640
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pcf_get_bdf_property ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv225 = -52						; size = 4
tv219 = -48						; size = 4
tv215 = -44						; size = 4
tv207 = -40						; size = 4
tv159 = -36						; size = 4
tv152 = -32						; size = 4
tv147 = -28						; size = 4
_bytes$ = -24						; size = 4
_metric$ = -20						; size = 4
_bitmap$ = -16						; size = 4
_error$ = -12						; size = 4
_stream$ = -8						; size = 4
_face$ = -4						; size = 4
_slot$ = 8						; size = 4
_size$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_PCF_Glyph_Load PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 484
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 485
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 487
	mov	DWORD PTR _error$[ebp], 0
; Line 488
	mov	edx, DWORD PTR _slot$[ebp]
	add	edx, 76					; 0000004cH
	mov	DWORD PTR _bitmap$[ebp], edx
; Line 492
	mov	eax, DWORD PTR _load_flags$[ebp]
	mov	DWORD PTR _load_flags$[ebp], eax
$LN28@PCF_Glyph_:
; Line 495
	mov	ecx, 4
	imul	edx, ecx, 62
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN27@PCF_Glyph_
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	push	OFFSET $SG8680
	call	_FT_Message
	add	esp, 8
$LN27@PCF_Glyph_:
	xor	ecx, ecx
	jne	SHORT $LN28@PCF_Glyph_
; Line 497
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN24@PCF_Glyph_
; Line 499
	push	OFFSET $SG8682
	push	499					; 000001f3H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	mov	DWORD PTR _error$[ebp], eax
; Line 500
	jmp	$Exit$42
$LN24@PCF_Glyph_:
; Line 503
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jb	SHORT $LN23@PCF_Glyph_
; Line 505
	push	OFFSET $SG8686
	push	505					; 000001f9H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 506
	jmp	$Exit$42
$LN23@PCF_Glyph_:
; Line 509
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR _stream$[ebp], edx
; Line 511
	cmp	DWORD PTR _glyph_index$[ebp], 0
	jbe	SHORT $LN22@PCF_Glyph_
; Line 512
	mov	eax, DWORD PTR _glyph_index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _glyph_index$[ebp], eax
$LN22@PCF_Glyph_:
; Line 514
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _face$[ebp]
	add	ecx, DWORD PTR [edx+292]
	mov	DWORD PTR _metric$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _metric$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _metric$[ebp]
	movsx	eax, WORD PTR [edx+8]
	add	ecx, eax
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 517
	mov	eax, DWORD PTR _metric$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _metric$[ebp]
	movsx	eax, WORD PTR [edx]
	sub	ecx, eax
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 518
	mov	eax, 1
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	WORD PTR [ecx+16], ax
; Line 519
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	BYTE PTR [edx+18], 1
$LN21@PCF_Glyph_:
; Line 524
	mov	eax, 4
	imul	ecx, eax, 62
	cmp	DWORD PTR _ft_trace_levels[ecx], 6
	jl	SHORT $LN20@PCF_Glyph_
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+308]
	and	eax, 4
	je	SHORT $LN31@PCF_Glyph_
	mov	DWORD PTR tv147[ebp], 1
	jmp	SHORT $LN32@PCF_Glyph_
$LN31@PCF_Glyph_:
	mov	DWORD PTR tv147[ebp], 0
$LN32@PCF_Glyph_:
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+308]
	and	edx, 8
	je	SHORT $LN33@PCF_Glyph_
	mov	DWORD PTR tv152[ebp], 1
	jmp	SHORT $LN34@PCF_Glyph_
$LN33@PCF_Glyph_:
	mov	DWORD PTR tv152[ebp], 0
$LN34@PCF_Glyph_:
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	and	ecx, 3
	mov	edx, 1
	shl	edx, cl
	push	edx
	mov	eax, DWORD PTR tv147[ebp]
	push	eax
	mov	ecx, DWORD PTR tv152[ebp]
	push	ecx
	push	OFFSET $SG8692
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN20@PCF_Glyph_:
	xor	edx, edx
	jne	SHORT $LN21@PCF_Glyph_
; Line 526
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	and	ecx, 3
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR tv159[ebp], edx
	mov	eax, DWORD PTR tv159[ebp]
	sub	eax, 1
	mov	DWORD PTR tv159[ebp], eax
	cmp	DWORD PTR tv159[ebp], 7
	ja	SHORT $LN11@PCF_Glyph_
	mov	ecx, DWORD PTR tv159[ebp]
	jmp	DWORD PTR $LN41@PCF_Glyph_[ecx*4]
$LN15@PCF_Glyph_:
; Line 529
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 7
	shr	eax, 3
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 530
	jmp	SHORT $LN16@PCF_Glyph_
$LN14@PCF_Glyph_:
; Line 533
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 15					; 0000000fH
	shr	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 534
	jmp	SHORT $LN16@PCF_Glyph_
$LN13@PCF_Glyph_:
; Line 537
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 31					; 0000001fH
	shr	eax, 5
	shl	eax, 2
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 538
	jmp	SHORT $LN16@PCF_Glyph_
$LN12@PCF_Glyph_:
; Line 541
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 63					; 0000003fH
	shr	eax, 6
	shl	eax, 3
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 542
	jmp	SHORT $LN16@PCF_Glyph_
$LN11@PCF_Glyph_:
; Line 545
	push	OFFSET $SG8702
	push	545					; 00000221H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN29@PCF_Glyph_
$LN16@PCF_Glyph_:
; Line 549
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	imul	ecx, DWORD PTR [eax]
	mov	DWORD PTR _bytes$[ebp], ecx
; Line 551
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	call	_ft_glyphslot_alloc_bitmap
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 552
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@PCF_Glyph_
; Line 553
	jmp	$Exit$42
$LN10@PCF_Glyph_:
; Line 556
	mov	ecx, DWORD PTR _metric$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN8@PCF_Glyph_
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@PCF_Glyph_
$LN8@PCF_Glyph_:
; Line 557
	jmp	$Exit$42
$LN9@PCF_Glyph_:
; Line 559
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+308]
	and	eax, 8
	je	SHORT $LN35@PCF_Glyph_
	mov	DWORD PTR tv207[ebp], 1
	jmp	SHORT $LN36@PCF_Glyph_
$LN35@PCF_Glyph_:
	mov	DWORD PTR tv207[ebp], 0
$LN36@PCF_Glyph_:
	cmp	DWORD PTR tv207[ebp], 1
	je	SHORT $LN7@PCF_Glyph_
; Line 560
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_BitOrderInvert
	add	esp, 8
$LN7@PCF_Glyph_:
; Line 563
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+308]
	and	edx, 4
	je	SHORT $LN37@PCF_Glyph_
	mov	DWORD PTR tv215[ebp], 1
	jmp	SHORT $LN38@PCF_Glyph_
$LN37@PCF_Glyph_:
	mov	DWORD PTR tv215[ebp], 0
$LN38@PCF_Glyph_:
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	and	ecx, 8
	je	SHORT $LN39@PCF_Glyph_
	mov	DWORD PTR tv219[ebp], 1
	jmp	SHORT $LN40@PCF_Glyph_
$LN39@PCF_Glyph_:
	mov	DWORD PTR tv219[ebp], 0
$LN40@PCF_Glyph_:
	mov	edx, DWORD PTR tv215[ebp]
	cmp	edx, DWORD PTR tv219[ebp]
	je	SHORT $LN6@PCF_Glyph_
; Line 565
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	and	ecx, 48					; 00000030H
	shr	ecx, 4
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR tv225[ebp], edx
	cmp	DWORD PTR tv225[ebp], 2
	je	SHORT $LN2@PCF_Glyph_
	cmp	DWORD PTR tv225[ebp], 4
	je	SHORT $LN1@PCF_Glyph_
	jmp	SHORT $LN6@PCF_Glyph_
; Line 568
	jmp	SHORT $LN6@PCF_Glyph_
$LN2@PCF_Glyph_:
; Line 571
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_TwoByteSwap
	add	esp, 8
; Line 572
	jmp	SHORT $LN6@PCF_Glyph_
$LN1@PCF_Glyph_:
; Line 575
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FourByteSwap
	add	esp, 8
$LN6@PCF_Glyph_:
; Line 580
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+72], 1651078259		; 62697473H
; Line 581
	mov	ecx, DWORD PTR _metric$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+100], edx
; Line 582
	mov	ecx, DWORD PTR _metric$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+104], edx
; Line 584
	mov	ecx, DWORD PTR _metric$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	shl	edx, 6
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 585
	mov	ecx, DWORD PTR _metric$[ebp]
	movsx	edx, WORD PTR [ecx]
	shl	edx, 6
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 586
	mov	ecx, DWORD PTR _metric$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	shl	edx, 6
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+36], edx
; Line 588
	mov	ecx, DWORD PTR _metric$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _metric$[ebp]
	movsx	ecx, WORD PTR [eax]
	sub	edx, ecx
	shl	edx, 6
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+24], edx
; Line 589
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 6
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 593
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _face$[ebp]
	add	edx, DWORD PTR [eax+208]
	shl	edx, 6
	push	edx
	mov	ecx, DWORD PTR _slot$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_ft_synthesize_vertical_metrics
	add	esp, 8
$Exit$42:
; Line 596
	mov	eax, DWORD PTR _error$[ebp]
$LN29@PCF_Glyph_:
; Line 597
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN41@PCF_Glyph_:
	DD	$LN15@PCF_Glyph_
	DD	$LN14@PCF_Glyph_
	DD	$LN11@PCF_Glyph_
	DD	$LN13@PCF_Glyph_
	DD	$LN11@PCF_Glyph_
	DD	$LN11@PCF_Glyph_
	DD	$LN11@PCF_Glyph_
	DD	$LN12@PCF_Glyph_
_PCF_Glyph_Load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -24						; size = 4
tv75 = -20						; size = 4
_height$ = -16						; size = 4
_error$ = -12						; size = 4
_bsize$ = -8						; size = 4
_face$ = -4						; size = 4
_size$ = 8						; size = 4
_req$ = 12						; size = 4
_PCF_Size_Request PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 444
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 445
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 446
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _bsize$[ebp], ecx
; Line 447
	mov	DWORD PTR _error$[ebp], 23		; 00000017H
; Line 451
	mov	edx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN12@PCF_Size_R
	mov	eax, DWORD PTR _req$[ebp]
	mov	ecx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR [eax+8]
	imul	eax, DWORD PTR [ecx+16]
	add	eax, 36					; 00000024H
	cdq
	mov	ecx, 72					; 00000048H
	idiv	ecx
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN13@PCF_Size_R
$LN12@PCF_Size_R:
	mov	edx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv75[ebp], eax
$LN13@PCF_Size_R:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _height$[ebp], ecx
; Line 452
	mov	edx, DWORD PTR _height$[ebp]
	add	edx, 32					; 00000020H
	sar	edx, 6
	mov	DWORD PTR _height$[ebp], edx
; Line 454
	mov	eax, DWORD PTR _req$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv79[ebp], ecx
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN7@PCF_Size_R
	cmp	DWORD PTR tv79[ebp], 1
	je	SHORT $LN5@PCF_Size_R
	jmp	SHORT $LN3@PCF_Size_R
$LN7@PCF_Size_R:
; Line 457
	mov	edx, DWORD PTR _bsize$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 32					; 00000020H
	sar	eax, 6
	cmp	DWORD PTR _height$[ebp], eax
	jne	SHORT $LN6@PCF_Size_R
; Line 458
	mov	DWORD PTR _error$[ebp], 0
$LN6@PCF_Size_R:
; Line 459
	jmp	SHORT $LN8@PCF_Size_R
$LN5@PCF_Size_R:
; Line 463
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _face$[ebp]
	add	edx, DWORD PTR [eax+208]
	cmp	DWORD PTR _height$[ebp], edx
	jne	SHORT $LN4@PCF_Size_R
; Line 464
	mov	DWORD PTR _error$[ebp], 0
$LN4@PCF_Size_R:
; Line 465
	jmp	SHORT $LN8@PCF_Size_R
$LN3@PCF_Size_R:
; Line 468
	push	OFFSET $SG8655
	push	468					; 000001d4H
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	mov	DWORD PTR _error$[ebp], eax
$LN8@PCF_Size_R:
; Line 472
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@PCF_Size_R
; Line 473
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN10@PCF_Size_R
; Line 474
	jmp	SHORT $LN10@PCF_Size_R
$LN2@PCF_Size_R:
; Line 475
	push	0
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_PCF_Size_Select
	add	esp, 8
$LN10@PCF_Size_R:
; Line 476
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_PCF_Size_Request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_accel$ = -4						; size = 4
_size$ = 8						; size = 4
_strike_index$ = 12					; size = 4
_PCF_Size_Select PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 427
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 428
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 196				; 000000c4H
	mov	DWORD PTR _accel$[ebp], ecx
; Line 431
	mov	edx, DWORD PTR _strike_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_Select_Metrics
	add	esp, 8
; Line 433
	mov	edx, DWORD PTR _accel$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shl	eax, 6
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 434
	mov	edx, DWORD PTR _accel$[ebp]
	mov	eax, DWORD PTR [edx+12]
	neg	eax
	shl	eax, 6
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 435
	mov	edx, DWORD PTR _accel$[ebp]
	movsx	eax, WORD PTR [edx+40]
	shl	eax, 6
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 437
	xor	eax, eax
; Line 438
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_PCF_Size_Select ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_charmap$1 = -48					; size = 12
_s$2 = -32						; size = 4
_unicode_charmap$3 = -25				; size = 1
_charset_encoding$4 = -24				; size = 4
_charset_registry$5 = -20				; size = 4
_error3$6 = -16						; size = 4
_error2$7 = -12						; size = 4
_error$ = -8						; size = 4
_face$ = -4						; size = 4
_stream$ = 8						; size = 4
_pcfface$ = 12						; size = 4
_face_index$ = 16					; size = 4
_num_params$ = 20					; size = 4
_params$ = 24						; size = 4
_PCF_Face_Init PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 264
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 265
	mov	eax, DWORD PTR _pcfface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 268
	mov	ecx, DWORD PTR _num_params$[ebp]
	mov	DWORD PTR _num_params$[ebp], ecx
; Line 269
	mov	edx, DWORD PTR _params$[ebp]
	mov	DWORD PTR _params$[ebp], edx
$LN23@PCF_Face_I:
; Line 272
	mov	eax, 4
	imul	ecx, eax, 62
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN22@PCF_Face_I
	push	OFFSET $SG8587
	call	_FT_Message
	add	esp, 4
$LN22@PCF_Face_I:
	xor	edx, edx
	jne	SHORT $LN23@PCF_Face_I
; Line 274
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_pcf_load_font
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 275
	cmp	DWORD PTR _error$[ebp], 0
	je	$LN19@PCF_Face_I
; Line 277
	mov	edx, DWORD PTR _pcfface$[ebp]
	push	edx
	call	_PCF_Face_Done
	add	esp, 4
; Line 289
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 132				; 00000084H
	push	ecx
	call	_FT_Stream_OpenGzip
	add	esp, 8
	mov	DWORD PTR _error2$7[ebp], eax
; Line 290
	mov	edx, DWORD PTR _error2$7[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 7
	jne	SHORT $LN18@PCF_Face_I
; Line 291
	jmp	$Fail$29
$LN18@PCF_Face_I:
; Line 293
	mov	eax, DWORD PTR _error2$7[ebp]
	mov	DWORD PTR _error$[ebp], eax
; Line 298
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@PCF_Face_I
; Line 304
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 132				; 00000084H
	push	edx
	call	_FT_Stream_OpenLZW
	add	esp, 8
	mov	DWORD PTR _error3$6[ebp], eax
; Line 305
	mov	eax, DWORD PTR _error3$6[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 7
	jne	SHORT $LN16@PCF_Face_I
; Line 306
	jmp	$Fail$29
$LN16@PCF_Face_I:
; Line 308
	mov	ecx, DWORD PTR _error3$6[ebp]
	mov	DWORD PTR _error$[ebp], ecx
$LN17@PCF_Face_I:
; Line 327
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@PCF_Face_I
; Line 328
	jmp	$Fail$29
$LN15@PCF_Face_I:
; Line 330
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+172], eax
; Line 331
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 132				; 00000084H
	mov	edx, DWORD PTR _pcfface$[ebp]
	mov	DWORD PTR [edx+104], ecx
; Line 333
	mov	eax, DWORD PTR _pcfface$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 335
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_pcf_load_font
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 336
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@PCF_Face_I
; Line 337
	jmp	$Fail$29
$LN19@PCF_Face_I:
; Line 354
	cmp	DWORD PTR _face_index$[ebp], 0
	jle	SHORT $LN13@PCF_Face_I
; Line 355
	push	OFFSET $SG8598
	call	_FT_Message
	add	esp, 4
; Line 356
	mov	ecx, DWORD PTR _pcfface$[ebp]
	push	ecx
	call	_PCF_Face_Done
	add	esp, 4
; Line 357
	push	OFFSET $SG8599
	push	357					; 00000165H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN24@PCF_Face_I
$LN13@PCF_Face_I:
; Line 362
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+180]
	mov	DWORD PTR _charset_registry$5[ebp], eax
; Line 363
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	DWORD PTR _charset_encoding$4[ebp], edx
; Line 364
	mov	BYTE PTR _unicode_charmap$3[ebp], 0
; Line 367
	cmp	DWORD PTR _charset_registry$5[ebp], 0
	je	$LN12@PCF_Face_I
	cmp	DWORD PTR _charset_encoding$4[ebp], 0
	je	$LN12@PCF_Face_I
; Line 369
	mov	eax, DWORD PTR _charset_registry$5[ebp]
	mov	DWORD PTR _s$2[ebp], eax
; Line 376
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _s$2[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 105				; 00000069H
	je	SHORT $LN10@PCF_Face_I
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _s$2[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 73					; 00000049H
	jne	$LN12@PCF_Face_I
$LN10@PCF_Face_I:
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _s$2[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 115				; 00000073H
	je	SHORT $LN9@PCF_Face_I
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _s$2[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 83					; 00000053H
	jne	SHORT $LN12@PCF_Face_I
$LN9@PCF_Face_I:
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _s$2[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 111				; 0000006fH
	je	SHORT $LN8@PCF_Face_I
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _s$2[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 79					; 0000004fH
	jne	SHORT $LN12@PCF_Face_I
$LN8@PCF_Face_I:
; Line 378
	mov	eax, DWORD PTR _s$2[ebp]
	add	eax, 3
	mov	DWORD PTR _s$2[ebp], eax
; Line 381
	push	OFFSET $SG8611
	mov	ecx, DWORD PTR _s$2[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@PCF_Face_I
	push	OFFSET $SG8612
	mov	edx, DWORD PTR _s$2[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@PCF_Face_I
	push	OFFSET $SG8613
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@PCF_Face_I
$LN6@PCF_Face_I:
; Line 382
	mov	BYTE PTR _unicode_charmap$3[ebp], 1
$LN12@PCF_Face_I:
; Line 390
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR _charmap$1[ebp], edx
; Line 391
	mov	DWORD PTR _charmap$1[ebp+4], 0
; Line 393
	xor	eax, eax
	mov	WORD PTR _charmap$1[ebp+8], ax
; Line 394
	xor	ecx, ecx
	mov	WORD PTR _charmap$1[ebp+10], cx
; Line 396
	movzx	edx, BYTE PTR _unicode_charmap$3[ebp]
	test	edx, edx
	je	SHORT $LN5@PCF_Face_I
; Line 398
	mov	DWORD PTR _charmap$1[ebp+4], 1970170211	; 756e6963H
; Line 399
	mov	eax, 3
	mov	WORD PTR _charmap$1[ebp+8], ax
; Line 400
	mov	ecx, 1
	mov	WORD PTR _charmap$1[ebp+10], cx
$LN5@PCF_Face_I:
; Line 403
	push	0
	lea	edx, DWORD PTR _charmap$1[ebp]
	push	edx
	push	0
	push	OFFSET _pcf_cmap_class
	call	_FT_CMap_New
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$Exit$30:
; Line 414
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN24@PCF_Face_I
$Fail$29:
; Line 417
	mov	eax, 4
	imul	ecx, eax, 62
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN3@PCF_Face_I
	push	OFFSET $SG8624
	call	_FT_Message
	add	esp, 4
$LN3@PCF_Face_I:
	xor	edx, edx
	jne	SHORT $Fail$29
; Line 418
	mov	eax, DWORD PTR _pcfface$[ebp]
	push	eax
	call	_PCF_Face_Done
	add	esp, 4
; Line 419
	push	OFFSET $SG8625
	push	419					; 000001a3H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 420
	jmp	SHORT $Exit$30
$LN24@PCF_Face_I:
; Line 421
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@PCF_Face_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN28@PCF_Face_I:
	DD	1
	DD	$LN27@PCF_Face_I
$LN27@PCF_Face_I:
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN26@PCF_Face_I
$LN26@PCF_Face_I:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
_PCF_Face_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_prop$1 = -16						; size = 4
_i$2 = -12						; size = 4
_memory$ = -8						; size = 4
_face$ = -4						; size = 4
_pcfface$ = 8						; size = 4
_PCF_Face_Done PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 207
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 208
	mov	eax, DWORD PTR _pcfface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 212
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN41@PCF_Face_D
; Line 213
	jmp	$LN42@PCF_Face_D
$LN41@PCF_Face_D:
; Line 215
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
$LN40@PCF_Face_D:
; Line 217
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+300], 0
	xor	ecx, ecx
	jne	SHORT $LN40@PCF_Face_D
$LN37@PCF_Face_D:
; Line 218
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+292]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+292], 0
	xor	eax, eax
	jne	SHORT $LN37@PCF_Face_D
; Line 221
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+284], 0
	je	$LN19@PCF_Face_D
; Line 226
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN33@PCF_Face_D
$LN32@PCF_Face_D:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN33@PCF_Face_D:
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR [eax+280]
	jge	SHORT $LN22@PCF_Face_D
; Line 228
	imul	edx, DWORD PTR _i$2[ebp], 12
	mov	eax, DWORD PTR _face$[ebp]
	add	edx, DWORD PTR [eax+284]
	mov	DWORD PTR _prop$1[ebp], edx
; Line 231
	je	SHORT $LN30@PCF_Face_D
$LN29@PCF_Face_D:
; Line 233
	mov	ecx, DWORD PTR _prop$1[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _prop$1[ebp]
	mov	DWORD PTR [ecx], 0
	xor	edx, edx
	jne	SHORT $LN29@PCF_Face_D
; Line 234
	mov	eax, DWORD PTR _prop$1[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN30@PCF_Face_D
$LN25@PCF_Face_D:
; Line 235
	mov	edx, DWORD PTR _prop$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _prop$1[ebp]
	mov	DWORD PTR [edx+8], 0
	xor	eax, eax
	jne	SHORT $LN25@PCF_Face_D
$LN30@PCF_Face_D:
; Line 237
	jmp	SHORT $LN32@PCF_Face_D
$LN22@PCF_Face_D:
; Line 239
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+284], 0
	xor	edx, edx
	jne	SHORT $LN22@PCF_Face_D
$LN19@PCF_Face_D:
; Line 242
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+192], 0
	xor	ecx, ecx
	jne	SHORT $LN19@PCF_Face_D
$LN16@PCF_Face_D:
; Line 243
	mov	edx, DWORD PTR _pcfface$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _pcfface$[ebp]
	mov	DWORD PTR [edx+20], 0
	xor	eax, eax
	jne	SHORT $LN16@PCF_Face_D
$LN13@PCF_Face_D:
; Line 244
	mov	ecx, DWORD PTR _pcfface$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _pcfface$[ebp]
	mov	DWORD PTR [ecx+24], 0
	xor	edx, edx
	jne	SHORT $LN13@PCF_Face_D
$LN10@PCF_Face_D:
; Line 245
	mov	eax, DWORD PTR _pcfface$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _pcfface$[ebp]
	mov	DWORD PTR [eax+32], 0
	xor	ecx, ecx
	jne	SHORT $LN10@PCF_Face_D
$LN7@PCF_Face_D:
; Line 246
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+176]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+176], 0
	xor	eax, eax
	jne	SHORT $LN7@PCF_Face_D
$LN4@PCF_Face_D:
; Line 247
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+180]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+180], 0
	xor	edx, edx
	jne	SHORT $LN4@PCF_Face_D
; Line 250
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 132				; 00000084H
	mov	ecx, DWORD PTR _pcfface$[ebp]
	cmp	DWORD PTR [ecx+104], eax
	jne	SHORT $LN42@PCF_Face_D
; Line 252
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 132				; 00000084H
	push	edx
	call	_FT_Stream_Close
	add	esp, 4
; Line 253
	mov	eax, DWORD PTR _pcfface$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	DWORD PTR [eax+104], edx
$LN42@PCF_Face_D:
; Line 255
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_PCF_Face_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_code$1 = -32						; size = 4
_result$ = -28						; size = 4
_charcode$ = -24					; size = 4
_mid$ = -20						; size = 4
_max$ = -16						; size = 4
_min$ = -12						; size = 4
_encodings$ = -8					; size = 4
_cmap$ = -4						; size = 4
_pcfcmap$ = 8						; size = 4
_acharcode$ = 12					; size = 4
_pcf_cmap_char_next PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 142
	mov	eax, DWORD PTR _pcfcmap$[ebp]
	mov	DWORD PTR _cmap$[ebp], eax
; Line 143
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _encodings$[ebp], edx
; Line 145
	mov	eax, DWORD PTR _acharcode$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR _charcode$[ebp], ecx
; Line 146
	mov	DWORD PTR _result$[ebp], 0
; Line 149
	mov	DWORD PTR _min$[ebp], 0
; Line 150
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _max$[ebp], eax
$LN12@pcf_cmap_c:
; Line 152
	mov	ecx, DWORD PTR _min$[ebp]
	cmp	ecx, DWORD PTR _max$[ebp]
	jae	SHORT $LN11@pcf_cmap_c
; Line 157
	mov	edx, DWORD PTR _min$[ebp]
	add	edx, DWORD PTR _max$[ebp]
	shr	edx, 1
	mov	DWORD PTR _mid$[ebp], edx
; Line 158
	mov	eax, DWORD PTR _mid$[ebp]
	mov	ecx, DWORD PTR _encodings$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _code$1[ebp], edx
; Line 160
	mov	eax, DWORD PTR _charcode$[ebp]
	cmp	eax, DWORD PTR _code$1[ebp]
	jne	SHORT $LN10@pcf_cmap_c
; Line 162
	mov	ecx, DWORD PTR _mid$[ebp]
	mov	edx, DWORD PTR _encodings$[ebp]
	movzx	eax, WORD PTR [edx+ecx*8+4]
	add	eax, 1
	mov	DWORD PTR _result$[ebp], eax
; Line 163
	jmp	SHORT $Exit$15
$LN10@pcf_cmap_c:
; Line 166
	mov	ecx, DWORD PTR _charcode$[ebp]
	cmp	ecx, DWORD PTR _code$1[ebp]
	jae	SHORT $LN9@pcf_cmap_c
; Line 167
	mov	edx, DWORD PTR _mid$[ebp]
	mov	DWORD PTR _max$[ebp], edx
; Line 168
	jmp	SHORT $LN8@pcf_cmap_c
$LN9@pcf_cmap_c:
; Line 169
	mov	eax, DWORD PTR _mid$[ebp]
	add	eax, 1
	mov	DWORD PTR _min$[ebp], eax
$LN8@pcf_cmap_c:
; Line 170
	jmp	SHORT $LN12@pcf_cmap_c
$LN11@pcf_cmap_c:
; Line 172
	mov	DWORD PTR _charcode$[ebp], 0
; Line 173
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _min$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $Exit$15
; Line 175
	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _encodings$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _charcode$[ebp], edx
; Line 176
	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _encodings$[ebp]
	movzx	edx, WORD PTR [ecx+eax*8+4]
	add	edx, 1
	mov	DWORD PTR _result$[ebp], edx
$Exit$15:
; Line 180
	cmp	DWORD PTR _charcode$[ebp], -1
	jbe	SHORT $LN6@pcf_cmap_c
$LN5@pcf_cmap_c:
; Line 182
	mov	eax, 4
	imul	ecx, eax, 62
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN4@pcf_cmap_c
	push	OFFSET $SG8496
	call	_FT_Message
	add	esp, 4
$LN4@pcf_cmap_c:
	xor	edx, edx
	jne	SHORT $LN5@pcf_cmap_c
; Line 183
	mov	eax, DWORD PTR _acharcode$[ebp]
	mov	DWORD PTR [eax], 0
; Line 186
	jmp	SHORT $LN1@pcf_cmap_c
$LN6@pcf_cmap_c:
; Line 187
	mov	ecx, DWORD PTR _acharcode$[ebp]
	mov	edx, DWORD PTR _charcode$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@pcf_cmap_c:
; Line 188
	mov	eax, DWORD PTR _result$[ebp]
; Line 189
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pcf_cmap_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_code$1 = -28						; size = 4
_result$ = -24						; size = 4
_mid$ = -20						; size = 4
_max$ = -16						; size = 4
_min$ = -12						; size = 4
_encodings$ = -8					; size = 4
_cmap$ = -4						; size = 4
_pcfcmap$ = 8						; size = 4
_charcode$ = 12						; size = 4
_pcf_cmap_char_index PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 104
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 105
	mov	eax, DWORD PTR _pcfcmap$[ebp]
	mov	DWORD PTR _cmap$[ebp], eax
; Line 106
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _encodings$[ebp], edx
; Line 108
	mov	DWORD PTR _result$[ebp], 0
; Line 111
	mov	DWORD PTR _min$[ebp], 0
; Line 112
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _max$[ebp], ecx
$LN5@pcf_cmap_c:
; Line 114
	mov	edx, DWORD PTR _min$[ebp]
	cmp	edx, DWORD PTR _max$[ebp]
	jae	SHORT $LN4@pcf_cmap_c
; Line 119
	mov	eax, DWORD PTR _min$[ebp]
	add	eax, DWORD PTR _max$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mid$[ebp], eax
; Line 120
	mov	ecx, DWORD PTR _mid$[ebp]
	mov	edx, DWORD PTR _encodings$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _code$1[ebp], eax
; Line 122
	mov	ecx, DWORD PTR _charcode$[ebp]
	cmp	ecx, DWORD PTR _code$1[ebp]
	jne	SHORT $LN3@pcf_cmap_c
; Line 124
	mov	edx, DWORD PTR _mid$[ebp]
	mov	eax, DWORD PTR _encodings$[ebp]
	movzx	ecx, WORD PTR [eax+edx*8+4]
	add	ecx, 1
	mov	DWORD PTR _result$[ebp], ecx
; Line 125
	jmp	SHORT $LN4@pcf_cmap_c
$LN3@pcf_cmap_c:
; Line 128
	mov	edx, DWORD PTR _charcode$[ebp]
	cmp	edx, DWORD PTR _code$1[ebp]
	jae	SHORT $LN2@pcf_cmap_c
; Line 129
	mov	eax, DWORD PTR _mid$[ebp]
	mov	DWORD PTR _max$[ebp], eax
; Line 130
	jmp	SHORT $LN1@pcf_cmap_c
$LN2@pcf_cmap_c:
; Line 131
	mov	ecx, DWORD PTR _mid$[ebp]
	add	ecx, 1
	mov	DWORD PTR _min$[ebp], ecx
$LN1@pcf_cmap_c:
; Line 132
	jmp	SHORT $LN5@pcf_cmap_c
$LN4@pcf_cmap_c:
; Line 134
	mov	eax, DWORD PTR _result$[ebp]
; Line 135
	mov	esp, ebp
	pop	ebp
	ret	0
_pcf_cmap_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = -4						; size = 4
_pcfcmap$ = 8						; size = 4
_pcf_cmap_done PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 92
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 93
	mov	eax, DWORD PTR _pcfcmap$[ebp]
	mov	DWORD PTR _cmap$[ebp], eax
; Line 96
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 97
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 98
	mov	esp, ebp
	pop	ebp
	ret	0
_pcf_cmap_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = -8						; size = 4
_cmap$ = -4						; size = 4
_pcfcmap$ = 8						; size = 4
_init_data$ = 12					; size = 4
_pcf_cmap_init PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfdrivr.c
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 77
	mov	eax, DWORD PTR _pcfcmap$[ebp]
	mov	DWORD PTR _cmap$[ebp], eax
; Line 78
	mov	ecx, DWORD PTR _pcfcmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 80
	mov	eax, DWORD PTR _init_data$[ebp]
	mov	DWORD PTR _init_data$[ebp], eax
; Line 83
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+296]
	mov	DWORD PTR [ecx+16], eax
; Line 84
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+300]
	mov	DWORD PTR [ecx+20], eax
; Line 86
	xor	eax, eax
; Line 87
	mov	esp, ebp
	pop	ebp
	ret	0
_pcf_cmap_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv134 = -100						; size = 4
_mm$1 = -96						; size = 4
_src$2 = -92						; size = 4
_s$3 = -88						; size = 4
_lengths$ = -80						; size = 16
_strings$ = -56						; size = 16
_len$ = -36						; size = 4
_nn$ = -32						; size = 4
_prop$ = -28						; size = 4
_memory$ = -24						; size = 4
_face$ = -20						; size = 4
_error$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pcf$ = 8						; size = 4
_pcf_interpret_style PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 1063
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1064
	mov	DWORD PTR _error$[ebp], 0
; Line 1065
	mov	eax, DWORD PTR _pcf$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 1066
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 1071
	mov	DWORD PTR _strings$[ebp], 0
	mov	DWORD PTR _strings$[ebp+4], 0
	mov	DWORD PTR _strings$[ebp+8], 0
	mov	DWORD PTR _strings$[ebp+12], 0
; Line 1075
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 1077
	push	OFFSET $SG8224
	mov	ecx, DWORD PTR _pcf$[ebp]
	push	ecx
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _prop$[ebp], eax
; Line 1080
	cmp	DWORD PTR _prop$[ebp], 0
	je	$LN23@pcf_interp
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	test	eax, eax
	je	$LN23@pcf_interp
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 79					; 0000004fH
	je	SHORT $LN22@pcf_interp
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 111				; 0000006fH
	je	SHORT $LN22@pcf_interp
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 73					; 00000049H
	je	SHORT $LN22@pcf_interp
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 105				; 00000069H
	jne	SHORT $LN23@pcf_interp
$LN22@pcf_interp:
; Line 1082
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 1
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1085
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 79					; 0000004fH
	je	SHORT $LN26@pcf_interp
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 111				; 0000006fH
	je	SHORT $LN26@pcf_interp
	mov	DWORD PTR tv134[ebp], OFFSET $SG8230
	jmp	SHORT $LN27@pcf_interp
$LN26@pcf_interp:
	mov	DWORD PTR tv134[ebp], OFFSET $SG8229
$LN27@pcf_interp:
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _strings$[ebp+ecx], edx
$LN23@pcf_interp:
; Line 1088
	push	OFFSET $SG8231
	mov	eax, DWORD PTR _pcf$[ebp]
	push	eax
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _prop$[ebp], eax
; Line 1090
	cmp	DWORD PTR _prop$[ebp], 0
	je	SHORT $LN21@pcf_interp
	mov	ecx, DWORD PTR _prop$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	test	edx, edx
	je	SHORT $LN21@pcf_interp
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 66					; 00000042H
	je	SHORT $LN20@pcf_interp
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 98					; 00000062H
	jne	SHORT $LN21@pcf_interp
$LN20@pcf_interp:
; Line 1092
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 2
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 1093
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _strings$[ebp+eax], OFFSET $SG8235
$LN21@pcf_interp:
; Line 1096
	push	OFFSET $SG8236
	mov	ecx, DWORD PTR _pcf$[ebp]
	push	ecx
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _prop$[ebp], eax
; Line 1099
	cmp	DWORD PTR _prop$[ebp], 0
	je	SHORT $LN19@pcf_interp
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	test	eax, eax
	je	SHORT $LN19@pcf_interp
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN19@pcf_interp
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 78					; 0000004eH
	je	SHORT $LN19@pcf_interp
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 110				; 0000006eH
	je	SHORT $LN19@pcf_interp
; Line 1100
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _strings$[ebp+edx], ecx
$LN19@pcf_interp:
; Line 1102
	push	OFFSET $SG8239
	mov	edx, DWORD PTR _pcf$[ebp]
	push	edx
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _prop$[ebp], eax
; Line 1105
	cmp	DWORD PTR _prop$[ebp], 0
	je	SHORT $LN18@pcf_interp
	mov	eax, DWORD PTR _prop$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN18@pcf_interp
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN18@pcf_interp
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 78					; 0000004eH
	je	SHORT $LN18@pcf_interp
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 110				; 0000006eH
	je	SHORT $LN18@pcf_interp
; Line 1106
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _strings$[ebp+eax], edx
$LN18@pcf_interp:
; Line 1108
	mov	DWORD PTR _len$[ebp], 0
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN17@pcf_interp
$LN16@pcf_interp:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN17@pcf_interp:
	cmp	DWORD PTR _nn$[ebp], 4
	jae	SHORT $LN15@pcf_interp
; Line 1110
	mov	ecx, DWORD PTR _nn$[ebp]
	mov	DWORD PTR _lengths$[ebp+ecx*4], 0
; Line 1111
	mov	edx, DWORD PTR _nn$[ebp]
	cmp	DWORD PTR _strings$[ebp+edx*4], 0
	je	SHORT $LN14@pcf_interp
; Line 1113
	mov	eax, DWORD PTR _nn$[ebp]
	mov	ecx, DWORD PTR _strings$[ebp+eax*4]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _nn$[ebp]
	mov	DWORD PTR _lengths$[ebp+edx*4], eax
; Line 1114
	mov	eax, DWORD PTR _nn$[ebp]
	mov	ecx, DWORD PTR _lengths$[ebp+eax*4]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	mov	DWORD PTR _len$[ebp], eax
$LN14@pcf_interp:
; Line 1116
	jmp	SHORT $LN16@pcf_interp
$LN15@pcf_interp:
; Line 1118
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN13@pcf_interp
; Line 1120
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _strings$[ebp+edx], OFFSET $SG8248
; Line 1121
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _strings$[ebp+ecx]
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _lengths$[ebp+edx], eax
; Line 1122
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _lengths$[ebp+ecx]
	add	edx, 1
	mov	DWORD PTR _len$[ebp], edx
$LN13@pcf_interp:
; Line 1129
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+24], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@pcf_interp
; Line 1130
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN24@pcf_interp
$LN12@pcf_interp:
; Line 1132
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _s$3[ebp], eax
; Line 1134
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN11@pcf_interp
$LN10@pcf_interp:
	mov	ecx, DWORD PTR _nn$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$[ebp], ecx
$LN11@pcf_interp:
	cmp	DWORD PTR _nn$[ebp], 4
	jae	$LN9@pcf_interp
; Line 1136
	mov	edx, DWORD PTR _nn$[ebp]
	mov	eax, DWORD PTR _strings$[ebp+edx*4]
	mov	DWORD PTR _src$2[ebp], eax
; Line 1139
	mov	ecx, DWORD PTR _nn$[ebp]
	mov	edx, DWORD PTR _lengths$[ebp+ecx*4]
	mov	DWORD PTR _len$[ebp], edx
; Line 1141
	cmp	DWORD PTR _src$2[ebp], 0
	jne	SHORT $LN8@pcf_interp
; Line 1142
	jmp	SHORT $LN10@pcf_interp
$LN8@pcf_interp:
; Line 1145
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _s$3[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	je	SHORT $LN7@pcf_interp
; Line 1146
	mov	edx, DWORD PTR _s$3[ebp]
	mov	BYTE PTR [edx], 32			; 00000020H
	mov	eax, DWORD PTR _s$3[ebp]
	add	eax, 1
	mov	DWORD PTR _s$3[ebp], eax
$LN7@pcf_interp:
; Line 1148
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$2[ebp]
	push	edx
	mov	eax, DWORD PTR _s$3[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1152
	cmp	DWORD PTR _nn$[ebp], 0
	je	SHORT $LN5@pcf_interp
	cmp	DWORD PTR _nn$[ebp], 3
	jne	SHORT $LN6@pcf_interp
$LN5@pcf_interp:
; Line 1157
	mov	DWORD PTR _mm$1[ebp], 0
	jmp	SHORT $LN4@pcf_interp
$LN3@pcf_interp:
	mov	ecx, DWORD PTR _mm$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _mm$1[ebp], ecx
$LN4@pcf_interp:
	mov	edx, DWORD PTR _mm$1[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jae	SHORT $LN6@pcf_interp
; Line 1158
	mov	eax, DWORD PTR _s$3[ebp]
	add	eax, DWORD PTR _mm$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN1@pcf_interp
; Line 1159
	mov	edx, DWORD PTR _s$3[ebp]
	add	edx, DWORD PTR _mm$1[ebp]
	mov	BYTE PTR [edx], 45			; 0000002dH
$LN1@pcf_interp:
; Line 1160
	jmp	SHORT $LN3@pcf_interp
$LN6@pcf_interp:
; Line 1162
	mov	eax, DWORD PTR _s$3[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _s$3[ebp], eax
; Line 1163
	jmp	$LN10@pcf_interp
$LN9@pcf_interp:
; Line 1164
	mov	ecx, DWORD PTR _s$3[ebp]
	mov	BYTE PTR [ecx], 0
; Line 1167
	mov	eax, DWORD PTR _error$[ebp]
$LN24@pcf_interp:
; Line 1168
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@pcf_interp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@pcf_interp:
	DD	3
	DD	$LN31@pcf_interp
$LN31@pcf_interp:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN28@pcf_interp
	DD	-56					; ffffffc8H
	DD	16					; 00000010H
	DD	$LN29@pcf_interp
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN30@pcf_interp
$LN30@pcf_interp:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN29@pcf_interp:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN28@pcf_interp:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pcf_interpret_style ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv85 = -44						; size = 4
_accel$ = -40						; size = 4
_error$ = -32						; size = 4
_size$ = -20						; size = 4
_format$ = -8						; size = 4
_stream$ = 8						; size = 4
_face$ = 12						; size = 4
_type$ = 16						; size = 4
_pcf_get_accel PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 991
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 994
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 196				; 000000c4H
	mov	DWORD PTR _accel$[ebp], eax
; Line 1002
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_pcf_seek_to_table_type
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 1003
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@pcf_get_ac
; Line 1004
	jmp	$Bail$23
$LN13@pcf_get_ac:
; Line 1006
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadULongLE
	add	esp, 8
	mov	DWORD PTR _format$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@pcf_get_ac
; Line 1007
	jmp	$Bail$23
$LN12@pcf_get_ac:
; Line 1010
	mov	edx, DWORD PTR _format$[ebp]
	and	edx, -256				; ffffff00H
	je	SHORT $LN11@pcf_get_ac
	mov	eax, DWORD PTR _format$[ebp]
	and	eax, -256				; ffffff00H
	cmp	eax, 256				; 00000100H
	je	SHORT $LN11@pcf_get_ac
; Line 1011
	jmp	$Bail$23
$LN11@pcf_get_ac:
; Line 1013
	mov	ecx, DWORD PTR _format$[ebp]
	and	ecx, 4
	je	SHORT $LN16@pcf_get_ac
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN17@pcf_get_ac
$LN16@pcf_get_ac:
	mov	DWORD PTR tv85[ebp], 0
$LN17@pcf_get_ac:
	cmp	DWORD PTR tv85[ebp], 1
	jne	SHORT $LN10@pcf_get_ac
; Line 1015
	mov	edx, DWORD PTR _accel$[ebp]
	push	edx
	push	OFFSET _pcf_accel_msb_header
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@pcf_get_ac
; Line 1016
	jmp	$Bail$23
$LN9@pcf_get_ac:
; Line 1018
	jmp	SHORT $LN8@pcf_get_ac
$LN10@pcf_get_ac:
; Line 1020
	mov	ecx, DWORD PTR _accel$[ebp]
	push	ecx
	push	OFFSET _pcf_accel_header
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@pcf_get_ac
; Line 1021
	jmp	$Bail$23
$LN8@pcf_get_ac:
; Line 1026
	mov	eax, DWORD PTR _accel$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_pcf_get_metric
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1027
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@pcf_get_ac
; Line 1028
	jmp	$Bail$23
$LN6@pcf_get_ac:
; Line 1032
	mov	eax, DWORD PTR _accel$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_pcf_get_metric
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1033
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@pcf_get_ac
; Line 1034
	jmp	$Bail$23
$LN5@pcf_get_ac:
; Line 1036
	mov	eax, DWORD PTR _format$[ebp]
	and	eax, -256				; ffffff00H
	cmp	eax, 256				; 00000100H
	jne	SHORT $LN4@pcf_get_ac
; Line 1040
	mov	ecx, DWORD PTR _accel$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	mov	edx, DWORD PTR _format$[ebp]
	and	edx, 255				; 000000ffH
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_pcf_get_metric
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1041
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@pcf_get_ac
; Line 1042
	jmp	SHORT $Bail$23
$LN3@pcf_get_ac:
; Line 1046
	mov	ecx, DWORD PTR _accel$[ebp]
	add	ecx, 68					; 00000044H
	push	ecx
	mov	edx, DWORD PTR _format$[ebp]
	and	edx, 255				; 000000ffH
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_pcf_get_metric
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1047
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@pcf_get_ac
; Line 1048
	jmp	SHORT $Bail$23
$LN2@pcf_get_ac:
; Line 1050
	jmp	SHORT $Bail$23
$LN4@pcf_get_ac:
; Line 1052
	mov	ecx, DWORD PTR _accel$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _accel$[ebp]
	add	edx, 52					; 00000034H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 1053
	mov	edx, DWORD PTR _accel$[ebp]
	add	edx, 36					; 00000024H
	mov	eax, DWORD PTR _accel$[ebp]
	add	eax, 68					; 00000044H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
$Bail$23:
; Line 1057
	mov	eax, DWORD PTR _error$[ebp]
; Line 1058
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@pcf_get_ac
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@pcf_get_ac:
	DD	3
	DD	$LN21@pcf_get_ac
$LN21@pcf_get_ac:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@pcf_get_ac
	DD	-20					; ffffffecH
	DD	4
	DD	$LN19@pcf_get_ac
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN20@pcf_get_ac
$LN20@pcf_get_ac:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN19@pcf_get_ac:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN18@pcf_get_ac:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
_pcf_get_accel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv209 = -88						; size = 4
tv83 = -84						; size = 4
_encoding$ = -80					; size = 4
_k$ = -76						; size = 4
_j$ = -72						; size = 4
_i$ = -68						; size = 4
_encodingOffset$ = -64					; size = 4
_nencoding$ = -60					; size = 4
_lastRow$ = -56						; size = 4
_firstRow$ = -52					; size = 4
_lastCol$ = -48						; size = 4
_firstCol$ = -44					; size = 4
_size$ = -36						; size = 4
_format$ = -24						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_stream$ = 8						; size = 4
_face$ = 12						; size = 4
_pcf_get_encodings PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 834
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 836
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 842
	mov	DWORD PTR _encoding$[ebp], 0
; Line 850
	lea	edx, DWORD PTR _size$[ebp]
	push	edx
	lea	eax, DWORD PTR _format$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_pcf_seek_to_table_type
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 851
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN34@pcf_get_en
; Line 852
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN35@pcf_get_en
$LN34@pcf_get_en:
; Line 854
	push	14					; 0000000eH
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 855
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN33@pcf_get_en
; Line 856
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN35@pcf_get_en
$LN33@pcf_get_en:
; Line 858
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetULongLE
	add	esp, 4
	mov	DWORD PTR _format$[ebp], eax
; Line 860
	mov	edx, DWORD PTR _format$[ebp]
	and	edx, 4
	je	SHORT $LN37@pcf_get_en
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN38@pcf_get_en
$LN37@pcf_get_en:
	mov	DWORD PTR tv83[ebp], 0
$LN38@pcf_get_en:
	cmp	DWORD PTR tv83[ebp], 1
	jne	SHORT $LN32@pcf_get_en
; Line 862
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	ecx, ax
	mov	DWORD PTR _firstCol$[ebp], ecx
; Line 863
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	cwde
	mov	DWORD PTR _lastCol$[ebp], eax
; Line 864
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	edx, ax
	mov	DWORD PTR _firstRow$[ebp], edx
; Line 865
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	ecx, ax
	mov	DWORD PTR _lastRow$[ebp], ecx
; Line 866
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	ecx, DWORD PTR _face$[ebp]
	mov	WORD PTR [ecx+304], ax
; Line 868
	jmp	SHORT $LN31@pcf_get_en
$LN32@pcf_get_en:
; Line 870
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShortLE
	add	esp, 4
	cwde
	mov	DWORD PTR _firstCol$[ebp], eax
; Line 871
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShortLE
	add	esp, 4
	movsx	edx, ax
	mov	DWORD PTR _lastCol$[ebp], edx
; Line 872
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShortLE
	add	esp, 4
	movsx	ecx, ax
	mov	DWORD PTR _firstRow$[ebp], ecx
; Line 873
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShortLE
	add	esp, 4
	cwde
	mov	DWORD PTR _lastRow$[ebp], eax
; Line 874
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShortLE
	add	esp, 4
	mov	edx, DWORD PTR _face$[ebp]
	mov	WORD PTR [edx+304], ax
$LN31@pcf_get_en:
; Line 877
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 879
	mov	ecx, DWORD PTR _format$[ebp]
	and	ecx, -256				; ffffff00H
	je	SHORT $LN30@pcf_get_en
; Line 880
	push	OFFSET $SG8034
	push	880					; 00000370H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN35@pcf_get_en
$LN30@pcf_get_en:
; Line 888
	cmp	DWORD PTR _firstCol$[ebp], 0
	jl	SHORT $LN28@pcf_get_en
	mov	edx, DWORD PTR _firstCol$[ebp]
	cmp	edx, DWORD PTR _lastCol$[ebp]
	jg	SHORT $LN28@pcf_get_en
	cmp	DWORD PTR _lastCol$[ebp], 255		; 000000ffH
	jg	SHORT $LN28@pcf_get_en
	cmp	DWORD PTR _firstRow$[ebp], 0
	jl	SHORT $LN28@pcf_get_en
	mov	eax, DWORD PTR _firstRow$[ebp]
	cmp	eax, DWORD PTR _lastRow$[ebp]
	jg	SHORT $LN28@pcf_get_en
	cmp	DWORD PTR _lastRow$[ebp], 255		; 000000ffH
	jle	SHORT $LN27@pcf_get_en
$LN28@pcf_get_en:
; Line 889
	push	OFFSET $SG8037
	push	889					; 00000379H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	jmp	$LN35@pcf_get_en
$LN27@pcf_get_en:
; Line 891
	mov	ecx, 4
	imul	edx, ecx, 63
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN26@pcf_get_en
	push	OFFSET $SG8042
	call	_FT_Message
	add	esp, 4
$LN26@pcf_get_en:
	xor	eax, eax
	jne	SHORT $LN27@pcf_get_en
$LN23@pcf_get_en:
; Line 894
	mov	ecx, 4
	imul	edx, ecx, 63
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN22@pcf_get_en
	mov	eax, DWORD PTR _lastRow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _firstRow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lastCol$[ebp]
	push	edx
	mov	eax, DWORD PTR _firstCol$[ebp]
	push	eax
	push	OFFSET $SG8047
	call	_FT_Message
	add	esp, 20					; 00000014H
$LN22@pcf_get_en:
	xor	ecx, ecx
	jne	SHORT $LN23@pcf_get_en
; Line 896
	mov	edx, DWORD PTR _lastCol$[ebp]
	sub	edx, DWORD PTR _firstCol$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _lastRow$[ebp]
	sub	eax, DWORD PTR _firstRow$[ebp]
	add	eax, 1
	imul	edx, eax
	mov	DWORD PTR _nencoding$[ebp], edx
; Line 898
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _nencoding$[ebp]
	push	edx
	push	0
	push	8
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _encoding$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@pcf_get_en
; Line 899
	push	OFFSET $SG8051
	push	899					; 00000383H
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	jmp	$LN35@pcf_get_en
$LN19@pcf_get_en:
; Line 901
	mov	ecx, DWORD PTR _nencoding$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 902
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@pcf_get_en
; Line 903
	jmp	$Bail$46
$LN18@pcf_get_en:
; Line 905
	mov	DWORD PTR _k$[ebp], 0
; Line 906
	mov	eax, DWORD PTR _firstRow$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN17@pcf_get_en
$LN16@pcf_get_en:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN17@pcf_get_en:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _lastRow$[ebp]
	jg	$LN15@pcf_get_en
; Line 908
	mov	eax, DWORD PTR _firstCol$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN14@pcf_get_en
$LN13@pcf_get_en:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN14@pcf_get_en:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _lastCol$[ebp]
	jg	$LN12@pcf_get_en
; Line 910
	mov	eax, DWORD PTR _format$[ebp]
	and	eax, 4
	je	SHORT $LN39@pcf_get_en
	mov	DWORD PTR tv209[ebp], 1
	jmp	SHORT $LN40@pcf_get_en
$LN39@pcf_get_en:
	mov	DWORD PTR tv209[ebp], 0
$LN40@pcf_get_en:
	cmp	DWORD PTR tv209[ebp], 1
	jne	SHORT $LN11@pcf_get_en
; Line 911
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	movsx	edx, ax
	mov	DWORD PTR _encodingOffset$[ebp], edx
; Line 912
	jmp	SHORT $LN10@pcf_get_en
$LN11@pcf_get_en:
; Line 913
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShortLE
	add	esp, 4
	movsx	ecx, ax
	mov	DWORD PTR _encodingOffset$[ebp], ecx
$LN10@pcf_get_en:
; Line 915
	cmp	DWORD PTR _encodingOffset$[ebp], -1
	je	SHORT $LN9@pcf_get_en
; Line 917
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 8
	add	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [ecx+eax*8], edx
; Line 918
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _encoding$[ebp]
	mov	cx, WORD PTR _encodingOffset$[ebp]
	mov	WORD PTR [eax+edx*8+4], cx
$LN8@pcf_get_en:
; Line 921
	mov	edx, 4
	imul	eax, edx, 63
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN7@pcf_get_en
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _encoding$[ebp]
	movzx	eax, WORD PTR [edx+ecx*8+4]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	push	eax
	push	OFFSET $SG8070
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN7@pcf_get_en:
	xor	ecx, ecx
	jne	SHORT $LN8@pcf_get_en
; Line 923
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
$LN9@pcf_get_en:
; Line 925
	jmp	$LN13@pcf_get_en
$LN12@pcf_get_en:
; Line 926
	jmp	$LN16@pcf_get_en
$LN15@pcf_get_en:
; Line 927
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 929
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoding$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nencoding$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _encoding$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@pcf_get_en
; Line 930
	jmp	SHORT $Bail$46
$LN4@pcf_get_en:
; Line 932
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+296], ecx
; Line 933
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [edx+300], eax
; Line 935
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN35@pcf_get_en
$Bail$46:
; Line 938
	mov	ecx, DWORD PTR _encoding$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _encoding$[ebp], 0
	xor	eax, eax
	jne	SHORT $Bail$46
; Line 939
	mov	eax, DWORD PTR _error$[ebp]
$LN35@pcf_get_en:
; Line 940
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@pcf_get_en
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN45@pcf_get_en:
	DD	3
	DD	$LN44@pcf_get_en
$LN44@pcf_get_en:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN41@pcf_get_en
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN42@pcf_get_en
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN43@pcf_get_en
$LN43@pcf_get_en:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN42@pcf_get_en:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN41@pcf_get_en:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pcf_get_encodings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv190 = -96						; size = 4
tv161 = -92						; size = 4
tv83 = -88						; size = 4
_sizebitmaps$ = -84					; size = 4
_i$ = -80						; size = 4
_nbitmaps$ = -76					; size = 4
_size$ = -68						; size = 4
_format$ = -56						; size = 4
_bitmapSizes$ = -44					; size = 16
_offsets$ = -24						; size = 4
_memory$ = -20						; size = 4
_error$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_stream$ = 8						; size = 4
_face$ = 12						; size = 4
_pcf_get_bitmaps PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 732
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 734
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 735
	mov	DWORD PTR _offsets$[ebp], 0
; Line 738
	mov	DWORD PTR _sizebitmaps$[ebp], 0
; Line 746
	lea	edx, DWORD PTR _size$[ebp]
	push	edx
	lea	eax, DWORD PTR _format$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_pcf_seek_to_table_type
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 747
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN57@pcf_get_bi
; Line 748
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN58@pcf_get_bi
$LN57@pcf_get_bi:
; Line 750
	push	8
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 751
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN56@pcf_get_bi
; Line 752
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN58@pcf_get_bi
$LN56@pcf_get_bi:
; Line 754
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetULongLE
	add	esp, 4
	mov	DWORD PTR _format$[ebp], eax
; Line 755
	mov	edx, DWORD PTR _format$[ebp]
	and	edx, 4
	je	SHORT $LN60@pcf_get_bi
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN61@pcf_get_bi
$LN60@pcf_get_bi:
	mov	DWORD PTR tv83[ebp], 0
$LN61@pcf_get_bi:
	cmp	DWORD PTR tv83[ebp], 1
	jne	SHORT $LN55@pcf_get_bi
; Line 756
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetULong
	add	esp, 4
	mov	DWORD PTR _nbitmaps$[ebp], eax
; Line 757
	jmp	SHORT $LN54@pcf_get_bi
$LN55@pcf_get_bi:
; Line 758
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetULongLE
	add	esp, 4
	mov	DWORD PTR _nbitmaps$[ebp], eax
$LN54@pcf_get_bi:
; Line 760
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 762
	mov	eax, DWORD PTR _format$[ebp]
	and	eax, -256				; ffffff00H
	je	SHORT $LN52@pcf_get_bi
; Line 763
	push	OFFSET $SG7921
	push	763					; 000002fbH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN58@pcf_get_bi
$LN52@pcf_get_bi:
; Line 765
	mov	ecx, 4
	imul	edx, ecx, 63
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN51@pcf_get_bi
	push	OFFSET $SG7926
	call	_FT_Message
	add	esp, 4
$LN51@pcf_get_bi:
	xor	eax, eax
	jne	SHORT $LN52@pcf_get_bi
$LN48@pcf_get_bi:
; Line 767
	mov	ecx, 4
	imul	edx, ecx, 63
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN47@pcf_get_bi
	mov	eax, DWORD PTR _nbitmaps$[ebp]
	push	eax
	push	OFFSET $SG7931
	call	_FT_Message
	add	esp, 8
$LN47@pcf_get_bi:
	xor	ecx, ecx
	jne	SHORT $LN48@pcf_get_bi
; Line 770
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+288], 0
	jl	SHORT $LN43@pcf_get_bi
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _nbitmaps$[ebp]
	cmp	ecx, DWORD PTR [eax+288]
	je	SHORT $LN44@pcf_get_bi
$LN43@pcf_get_bi:
; Line 771
	push	OFFSET $SG7935
	push	771					; 00000303H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN58@pcf_get_bi
$LN44@pcf_get_bi:
; Line 773
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _nbitmaps$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _offsets$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN42@pcf_get_bi
; Line 774
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN58@pcf_get_bi
$LN42@pcf_get_bi:
; Line 776
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN41@pcf_get_bi
$LN40@pcf_get_bi:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN41@pcf_get_bi:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nbitmaps$[ebp]
	jae	$LN39@pcf_get_bi
; Line 778
	mov	ecx, DWORD PTR _format$[ebp]
	and	ecx, 4
	je	SHORT $LN62@pcf_get_bi
	mov	DWORD PTR tv161[ebp], 1
	jmp	SHORT $LN63@pcf_get_bi
$LN62@pcf_get_bi:
	mov	DWORD PTR tv161[ebp], 0
$LN63@pcf_get_bi:
	cmp	DWORD PTR tv161[ebp], 1
	jne	SHORT $LN38@pcf_get_bi
; Line 779
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 780
	jmp	SHORT $LN36@pcf_get_bi
$LN38@pcf_get_bi:
; Line 781
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadULongLE
	add	esp, 8
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
$LN36@pcf_get_bi:
; Line 784
	mov	edx, 4
	imul	eax, edx, 63
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN35@pcf_get_bi
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG7952
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN35@pcf_get_bi:
	xor	edx, edx
	jne	SHORT $LN36@pcf_get_bi
; Line 785
	jmp	$LN40@pcf_get_bi
$LN39@pcf_get_bi:
; Line 786
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN32@pcf_get_bi
; Line 787
	jmp	$Bail$72
$LN32@pcf_get_bi:
; Line 789
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@pcf_get_bi
$LN30@pcf_get_bi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN31@pcf_get_bi:
	cmp	DWORD PTR _i$[ebp], 4
	jae	$LN21@pcf_get_bi
; Line 791
	mov	ecx, DWORD PTR _format$[ebp]
	and	ecx, 4
	je	SHORT $LN64@pcf_get_bi
	mov	DWORD PTR tv190[ebp], 1
	jmp	SHORT $LN65@pcf_get_bi
$LN64@pcf_get_bi:
	mov	DWORD PTR tv190[ebp], 0
$LN65@pcf_get_bi:
	cmp	DWORD PTR tv190[ebp], 1
	jne	SHORT $LN28@pcf_get_bi
; Line 792
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _bitmapSizes$[ebp+ecx*4], eax
; Line 793
	jmp	SHORT $LN27@pcf_get_bi
$LN28@pcf_get_bi:
; Line 794
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULongLE
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _bitmapSizes$[ebp+ecx*4], eax
$LN27@pcf_get_bi:
; Line 795
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN26@pcf_get_bi
; Line 796
	jmp	$Bail$72
$LN26@pcf_get_bi:
; Line 798
	mov	edx, DWORD PTR _format$[ebp]
	and	edx, 3
	mov	eax, DWORD PTR _bitmapSizes$[ebp+edx*4]
	mov	DWORD PTR _sizebitmaps$[ebp], eax
$LN25@pcf_get_bi:
; Line 800
	mov	ecx, 4
	imul	edx, ecx, 63
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN24@pcf_get_bi
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bitmapSizes$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET $SG7969
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN24@pcf_get_bi:
	xor	eax, eax
	jne	SHORT $LN25@pcf_get_bi
; Line 801
	jmp	$LN30@pcf_get_bi
$LN21@pcf_get_bi:
; Line 805
	mov	ecx, 4
	imul	edx, ecx, 63
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN20@pcf_get_bi
	mov	eax, DWORD PTR _format$[ebp]
	and	eax, 3
	push	eax
	mov	ecx, DWORD PTR _nbitmaps$[ebp]
	push	ecx
	push	OFFSET $SG7974
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN20@pcf_get_bi:
	xor	edx, edx
	jne	SHORT $LN21@pcf_get_bi
$LN17@pcf_get_bi:
; Line 806
	mov	eax, 4
	imul	ecx, eax, 63
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN16@pcf_get_bi
	mov	edx, DWORD PTR _sizebitmaps$[ebp]
	push	edx
	push	OFFSET $SG7979
	call	_FT_Message
	add	esp, 8
$LN16@pcf_get_bi:
	xor	eax, eax
	jne	SHORT $LN17@pcf_get_bi
; Line 808
	mov	ecx, DWORD PTR _sizebitmaps$[ebp]
	mov	DWORD PTR _sizebitmaps$[ebp], ecx
; Line 810
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@pcf_get_bi
$LN12@pcf_get_bi:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@pcf_get_bi:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nbitmaps$[ebp]
	jae	SHORT $LN11@pcf_get_bi
; Line 814
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _offsets$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jl	SHORT $LN8@pcf_get_bi
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN10@pcf_get_bi
$LN8@pcf_get_bi:
; Line 817
	mov	eax, 4
	imul	ecx, eax, 63
	cmp	DWORD PTR _ft_trace_levels[ecx], 0
	jl	SHORT $LN7@pcf_get_bi
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET $SG7990
	call	_FT_Message
	add	esp, 8
$LN7@pcf_get_bi:
	xor	eax, eax
	jne	SHORT $LN8@pcf_get_bi
; Line 819
	jmp	SHORT $LN4@pcf_get_bi
$LN10@pcf_get_bi:
; Line 820
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	mov	DWORD PTR [ecx+eax+12], edx
$LN4@pcf_get_bi:
; Line 821
	jmp	SHORT $LN12@pcf_get_bi
$LN11@pcf_get_bi:
; Line 823
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _format$[ebp]
	mov	DWORD PTR [edx+308], eax
$Bail$72:
; Line 826
	mov	ecx, DWORD PTR _offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _offsets$[ebp], 0
	xor	eax, eax
	jne	SHORT $Bail$72
; Line 827
	mov	eax, DWORD PTR _error$[ebp]
$LN58@pcf_get_bi:
; Line 828
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN71@pcf_get_bi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN71@pcf_get_bi:
	DD	4
	DD	$LN70@pcf_get_bi
$LN70@pcf_get_bi:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN66@pcf_get_bi
	DD	-44					; ffffffd4H
	DD	16					; 00000010H
	DD	$LN67@pcf_get_bi
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN68@pcf_get_bi
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN69@pcf_get_bi
$LN69@pcf_get_bi:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN68@pcf_get_bi:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN67@pcf_get_bi:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN66@pcf_get_bi:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pcf_get_bitmaps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv134 = -60						; size = 4
tv92 = -56						; size = 4
_i$ = -52						; size = 4
_nmetrics$ = -48					; size = 4
_metrics$ = -44						; size = 4
_size$ = -36						; size = 4
_format$ = -24						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_stream$ = 8						; size = 4
_face$ = 12						; size = 4
_pcf_get_metrics PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 619
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 621
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 623
	mov	DWORD PTR _metrics$[ebp], 0
; Line 632
	lea	edx, DWORD PTR _size$[ebp]
	push	edx
	lea	eax, DWORD PTR _format$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_pcf_seek_to_table_type
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 633
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN42@pcf_get_me
; Line 634
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN43@pcf_get_me
$LN42@pcf_get_me:
; Line 636
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadULongLE
	add	esp, 8
	mov	DWORD PTR _format$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN41@pcf_get_me
; Line 637
	jmp	$Bail$54
$LN41@pcf_get_me:
; Line 640
	mov	edx, DWORD PTR _format$[ebp]
	and	edx, -256				; ffffff00H
	je	SHORT $LN40@pcf_get_me
	mov	eax, DWORD PTR _format$[ebp]
	and	eax, -256				; ffffff00H
	cmp	eax, 256				; 00000100H
	je	SHORT $LN40@pcf_get_me
; Line 641
	push	OFFSET $SG7836
	push	641					; 00000281H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN43@pcf_get_me
$LN40@pcf_get_me:
; Line 643
	mov	ecx, DWORD PTR _format$[ebp]
	and	ecx, -256				; ffffff00H
	jne	SHORT $LN39@pcf_get_me
; Line 645
	mov	edx, DWORD PTR _format$[ebp]
	and	edx, 4
	je	SHORT $LN45@pcf_get_me
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN46@pcf_get_me
$LN45@pcf_get_me:
	mov	DWORD PTR tv92[ebp], 0
$LN46@pcf_get_me:
	cmp	DWORD PTR tv92[ebp], 1
	jne	SHORT $LN38@pcf_get_me
; Line 646
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _nmetrics$[ebp], eax
; Line 647
	jmp	SHORT $LN37@pcf_get_me
$LN38@pcf_get_me:
; Line 648
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULongLE
	add	esp, 8
	mov	DWORD PTR _nmetrics$[ebp], eax
$LN37@pcf_get_me:
; Line 650
	jmp	SHORT $LN36@pcf_get_me
$LN39@pcf_get_me:
; Line 652
	mov	ecx, DWORD PTR _format$[ebp]
	and	ecx, 4
	je	SHORT $LN47@pcf_get_me
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN48@pcf_get_me
$LN47@pcf_get_me:
	mov	DWORD PTR tv134[ebp], 0
$LN48@pcf_get_me:
	cmp	DWORD PTR tv134[ebp], 1
	jne	SHORT $LN35@pcf_get_me
; Line 653
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	ecx, ax
	mov	DWORD PTR _nmetrics$[ebp], ecx
; Line 654
	jmp	SHORT $LN36@pcf_get_me
$LN35@pcf_get_me:
; Line 655
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShortLE
	add	esp, 8
	movzx	ecx, ax
	mov	DWORD PTR _nmetrics$[ebp], ecx
$LN36@pcf_get_me:
; Line 657
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN33@pcf_get_me
; Line 658
	push	OFFSET $SG7852
	push	658					; 00000292H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN43@pcf_get_me
$LN33@pcf_get_me:
; Line 660
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _nmetrics$[ebp]
	mov	DWORD PTR [edx+288], eax
; Line 662
	cmp	DWORD PTR _nmetrics$[ebp], 0
	jne	SHORT $LN31@pcf_get_me
; Line 663
	push	OFFSET $SG7854
	push	663					; 00000297H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	jmp	$LN43@pcf_get_me
$LN31@pcf_get_me:
; Line 665
	mov	ecx, 4
	imul	edx, ecx, 63
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN30@pcf_get_me
	push	OFFSET $SG7859
	call	_FT_Message
	add	esp, 4
$LN30@pcf_get_me:
	xor	eax, eax
	jne	SHORT $LN31@pcf_get_me
$LN27@pcf_get_me:
; Line 667
	mov	ecx, 4
	imul	edx, ecx, 63
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN26@pcf_get_me
	mov	eax, DWORD PTR _nmetrics$[ebp]
	push	eax
	push	OFFSET $SG7864
	call	_FT_Message
	add	esp, 8
$LN26@pcf_get_me:
	xor	ecx, ecx
	jne	SHORT $LN27@pcf_get_me
; Line 670
	mov	edx, DWORD PTR _format$[ebp]
	and	edx, -256				; ffffff00H
	jne	SHORT $LN23@pcf_get_me
; Line 672
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 12					; 0000000cH
	div	ecx
	cmp	DWORD PTR _nmetrics$[ebp], eax
	jbe	SHORT $LN22@pcf_get_me
; Line 673
	push	OFFSET $SG7867
	push	673					; 000002a1H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	jmp	$LN43@pcf_get_me
$LN22@pcf_get_me:
; Line 675
	jmp	SHORT $LN21@pcf_get_me
$LN23@pcf_get_me:
; Line 677
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 5
	div	ecx
	cmp	DWORD PTR _nmetrics$[ebp], eax
	jbe	SHORT $LN21@pcf_get_me
; Line 678
	push	OFFSET $SG7870
	push	678					; 000002a6H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	jmp	$LN43@pcf_get_me
$LN21@pcf_get_me:
; Line 681
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _nmetrics$[ebp]
	push	eax
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+292], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@pcf_get_me
; Line 682
	push	OFFSET $SG7874
	push	682					; 000002aaH
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	jmp	$LN43@pcf_get_me
$LN19@pcf_get_me:
; Line 684
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	DWORD PTR _metrics$[ebp], ecx
; Line 685
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@pcf_get_me
$LN17@pcf_get_me:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _metrics$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _metrics$[ebp], eax
$LN18@pcf_get_me:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nmetrics$[ebp]
	jae	$LN16@pcf_get_me
; Line 687
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	mov	eax, DWORD PTR _format$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_pcf_get_metric
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 689
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN15@pcf_get_me:
; Line 699
	mov	eax, 4
	imul	ecx, eax, 63
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN14@pcf_get_me
	mov	edx, DWORD PTR _metrics$[ebp]
	movsx	eax, WORD PTR [edx+10]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	movsx	edx, WORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	push	ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	movsx	eax, WORD PTR [edx+2]
	push	eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	movsx	edx, WORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _metrics$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET $SG7882
	call	_FT_Message
	add	esp, 32					; 00000020H
$LN14@pcf_get_me:
	xor	eax, eax
	jne	SHORT $LN15@pcf_get_me
; Line 701
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@pcf_get_me
; Line 702
	jmp	SHORT $LN16@pcf_get_me
$LN11@pcf_get_me:
; Line 708
	mov	ecx, DWORD PTR _metrics$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _metrics$[ebp]
	movsx	ecx, WORD PTR [eax]
	cmp	edx, ecx
	jl	SHORT $LN9@pcf_get_me
	mov	edx, DWORD PTR _metrics$[ebp]
	movsx	eax, WORD PTR [edx+6]
	mov	ecx, DWORD PTR _metrics$[ebp]
	movsx	edx, WORD PTR [ecx+8]
	add	eax, edx
	jns	SHORT $LN10@pcf_get_me
$LN9@pcf_get_me:
; Line 710
	xor	eax, eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 711
	xor	edx, edx
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [eax], dx
; Line 712
	xor	ecx, ecx
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [edx+2], cx
; Line 713
	xor	eax, eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [ecx+6], ax
; Line 714
	xor	edx, edx
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [eax+8], dx
$LN8@pcf_get_me:
; Line 717
	mov	ecx, 4
	imul	edx, ecx, 63
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN7@pcf_get_me
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET $SG7890
	call	_FT_Message
	add	esp, 8
$LN7@pcf_get_me:
	xor	ecx, ecx
	jne	SHORT $LN8@pcf_get_me
$LN10@pcf_get_me:
; Line 719
	jmp	$LN17@pcf_get_me
$LN16@pcf_get_me:
; Line 721
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $Bail$54
$LN3@pcf_get_me:
; Line 722
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+292]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+292], 0
	xor	eax, eax
	jne	SHORT $LN3@pcf_get_me
$Bail$54:
; Line 725
	mov	eax, DWORD PTR _error$[ebp]
$LN43@pcf_get_me:
; Line 726
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN53@pcf_get_me
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN53@pcf_get_me:
	DD	3
	DD	$LN52@pcf_get_me
$LN52@pcf_get_me:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN49@pcf_get_me
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN50@pcf_get_me
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN51@pcf_get_me
$LN51@pcf_get_me:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN50@pcf_get_me:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN49@pcf_get_me:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pcf_get_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv194 = -84						; size = 4
tv163 = -80						; size = 4
tv94 = -76						; size = 4
_value_offset$1 = -72					; size = 4
_name_offset$2 = -68					; size = 4
_strings$ = -64						; size = 4
_string_size$ = -60					; size = 4
_memory$ = -56						; size = 4
_error$ = -48						; size = 4
_size$ = -36						; size = 4
_format$ = -24						; size = 4
_i$ = -16						; size = 4
_nprops$ = -12						; size = 4
_properties$ = -8					; size = 4
_props$ = -4						; size = 4
_stream$ = 8						; size = 4
_face$ = 12						; size = 4
_pcf_get_properties PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 450
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 451
	mov	DWORD PTR _props$[ebp], 0
; Line 452
	mov	DWORD PTR _properties$[ebp], 0
; Line 456
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 458
	mov	DWORD PTR _strings$[ebp], 0
; Line 466
	lea	edx, DWORD PTR _size$[ebp]
	push	edx
	lea	eax, DWORD PTR _format$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_pcf_seek_to_table_type
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 467
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN69@pcf_get_pr
; Line 468
	jmp	$Bail$83
$LN69@pcf_get_pr:
; Line 470
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadULongLE
	add	esp, 8
	mov	DWORD PTR _format$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN67@pcf_get_pr
; Line 471
	jmp	$Bail$83
$LN67@pcf_get_pr:
; Line 473
	mov	edx, 4
	imul	eax, edx, 63
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN66@pcf_get_pr
	push	OFFSET $SG7712
	call	_FT_Message
	add	esp, 4
$LN66@pcf_get_pr:
	xor	ecx, ecx
	jne	SHORT $LN67@pcf_get_pr
$LN63@pcf_get_pr:
; Line 475
	mov	edx, 4
	imul	eax, edx, 63
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN62@pcf_get_pr
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	OFFSET $SG7717
	call	_FT_Message
	add	esp, 8
$LN62@pcf_get_pr:
	xor	edx, edx
	jne	SHORT $LN63@pcf_get_pr
; Line 477
	mov	eax, DWORD PTR _format$[ebp]
	and	eax, -256				; ffffff00H
	je	SHORT $LN59@pcf_get_pr
; Line 478
	jmp	$Bail$83
$LN59@pcf_get_pr:
; Line 480
	mov	ecx, DWORD PTR _format$[ebp]
	and	ecx, 4
	je	SHORT $LN72@pcf_get_pr
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN73@pcf_get_pr
$LN72@pcf_get_pr:
	mov	DWORD PTR tv94[ebp], 0
$LN73@pcf_get_pr:
	cmp	DWORD PTR tv94[ebp], 1
	jne	SHORT $LN58@pcf_get_pr
; Line 481
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _nprops$[ebp], eax
; Line 482
	jmp	SHORT $LN57@pcf_get_pr
$LN58@pcf_get_pr:
; Line 483
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadULongLE
	add	esp, 8
	mov	DWORD PTR _nprops$[ebp], eax
$LN57@pcf_get_pr:
; Line 484
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN55@pcf_get_pr
; Line 485
	jmp	$Bail$83
$LN55@pcf_get_pr:
; Line 488
	mov	eax, 4
	imul	ecx, eax, 63
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN54@pcf_get_pr
	mov	edx, DWORD PTR _nprops$[ebp]
	sub	edx, DWORD PTR _nprops$[ebp]
	push	edx
	mov	eax, DWORD PTR _nprops$[ebp]
	push	eax
	push	OFFSET $SG7732
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN54@pcf_get_pr:
	xor	ecx, ecx
	jne	SHORT $LN55@pcf_get_pr
; Line 490
	mov	edx, DWORD PTR _nprops$[ebp]
	mov	DWORD PTR _nprops$[ebp], edx
; Line 493
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 9
	div	ecx
	cmp	DWORD PTR _nprops$[ebp], eax
	jbe	SHORT $LN51@pcf_get_pr
; Line 495
	push	OFFSET $SG7735
	push	495					; 000001efH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 496
	jmp	$Bail$83
$LN51@pcf_get_pr:
; Line 499
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _nprops$[ebp]
	mov	DWORD PTR [edx+280], eax
; Line 501
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _nprops$[ebp]
	push	edx
	push	0
	push	12					; 0000000cH
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _props$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN50@pcf_get_pr
; Line 502
	jmp	$Bail$83
$LN50@pcf_get_pr:
; Line 504
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN49@pcf_get_pr
$LN48@pcf_get_pr:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN49@pcf_get_pr:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nprops$[ebp]
	jae	SHORT $LN47@pcf_get_pr
; Line 506
	mov	eax, DWORD PTR _format$[ebp]
	and	eax, 4
	je	SHORT $LN74@pcf_get_pr
	mov	DWORD PTR tv163[ebp], 1
	jmp	SHORT $LN75@pcf_get_pr
$LN74@pcf_get_pr:
	mov	DWORD PTR tv163[ebp], 0
$LN75@pcf_get_pr:
	cmp	DWORD PTR tv163[ebp], 1
	jne	SHORT $LN46@pcf_get_pr
; Line 508
	imul	ecx, DWORD PTR _i$[ebp], 12
	add	ecx, DWORD PTR _props$[ebp]
	push	ecx
	push	OFFSET _pcf_property_msb_header
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN45@pcf_get_pr
; Line 509
	jmp	$Bail$83
$LN45@pcf_get_pr:
; Line 511
	jmp	SHORT $LN44@pcf_get_pr
$LN46@pcf_get_pr:
; Line 513
	imul	eax, DWORD PTR _i$[ebp], 12
	add	eax, DWORD PTR _props$[ebp]
	push	eax
	push	OFFSET _pcf_property_header
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN44@pcf_get_pr
; Line 514
	jmp	$Bail$83
$LN44@pcf_get_pr:
; Line 516
	jmp	$LN48@pcf_get_pr
$LN47@pcf_get_pr:
; Line 523
	mov	edx, DWORD PTR _nprops$[ebp]
	and	edx, 3
	je	SHORT $LN42@pcf_get_pr
; Line 525
	mov	eax, DWORD PTR _nprops$[ebp]
	and	eax, 3
	mov	ecx, 4
	sub	ecx, eax
	mov	DWORD PTR _i$[ebp], ecx
; Line 526
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN42@pcf_get_pr
; Line 528
	push	OFFSET $SG7750
	push	528					; 00000210H
	push	83					; 00000053H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 83					; 00000053H
	mov	DWORD PTR _error$[ebp], eax
; Line 529
	jmp	$Bail$83
$LN42@pcf_get_pr:
; Line 533
	mov	ecx, DWORD PTR _format$[ebp]
	and	ecx, 4
	je	SHORT $LN76@pcf_get_pr
	mov	DWORD PTR tv194[ebp], 1
	jmp	SHORT $LN77@pcf_get_pr
$LN76@pcf_get_pr:
	mov	DWORD PTR tv194[ebp], 0
$LN77@pcf_get_pr:
	cmp	DWORD PTR tv194[ebp], 1
	jne	SHORT $LN40@pcf_get_pr
; Line 534
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _string_size$[ebp], eax
; Line 535
	jmp	SHORT $LN39@pcf_get_pr
$LN40@pcf_get_pr:
; Line 536
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadULongLE
	add	esp, 8
	mov	DWORD PTR _string_size$[ebp], eax
$LN39@pcf_get_pr:
; Line 537
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN37@pcf_get_pr
; Line 538
	jmp	$Bail$83
$LN37@pcf_get_pr:
; Line 540
	mov	eax, 4
	imul	ecx, eax, 63
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN36@pcf_get_pr
	mov	edx, DWORD PTR _string_size$[ebp]
	push	edx
	push	OFFSET $SG7762
	call	_FT_Message
	add	esp, 8
$LN36@pcf_get_pr:
	xor	eax, eax
	jne	SHORT $LN37@pcf_get_pr
; Line 543
	imul	ecx, DWORD PTR _nprops$[ebp], 9
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, ecx
	cmp	DWORD PTR _string_size$[ebp], edx
	jbe	SHORT $LN33@pcf_get_pr
; Line 545
	push	OFFSET $SG7764
	push	545					; 00000221H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 546
	jmp	$Bail$83
$LN33@pcf_get_pr:
; Line 550
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _string_size$[ebp]
	add	ecx, 1
	push	ecx
	push	0
	push	1
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _strings$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN32@pcf_get_pr
; Line 551
	jmp	$Bail$83
$LN32@pcf_get_pr:
; Line 553
	mov	eax, DWORD PTR _string_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strings$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 554
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@pcf_get_pr
; Line 555
	jmp	$Bail$83
$LN31@pcf_get_pr:
; Line 557
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _nprops$[ebp]
	push	ecx
	push	0
	push	12					; 0000000cH
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _properties$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN30@pcf_get_pr
; Line 558
	jmp	$Bail$83
$LN30@pcf_get_pr:
; Line 560
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _properties$[ebp]
	mov	DWORD PTR [eax+284], ecx
; Line 562
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN29@pcf_get_pr
$LN28@pcf_get_pr:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN29@pcf_get_pr:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nprops$[ebp]
	jae	$LN27@pcf_get_pr
; Line 564
	imul	ecx, DWORD PTR _i$[ebp], 12
	mov	edx, DWORD PTR _props$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _name_offset$2[ebp], eax
; Line 568
	cmp	DWORD PTR _name_offset$2[ebp], 0
	jl	SHORT $LN25@pcf_get_pr
	mov	ecx, DWORD PTR _name_offset$2[ebp]
	cmp	ecx, DWORD PTR _string_size$[ebp]
	jbe	SHORT $LN26@pcf_get_pr
$LN25@pcf_get_pr:
; Line 570
	push	OFFSET $SG7780
	push	570					; 0000023aH
	push	9
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 9
	mov	DWORD PTR _error$[ebp], eax
; Line 571
	jmp	$Bail$83
$LN26@pcf_get_pr:
; Line 574
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _strings$[ebp]
	add	eax, DWORD PTR _name_offset$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_strdup
	add	esp, 12					; 0000000cH
	imul	edx, DWORD PTR _i$[ebp], 12
	mov	ecx, DWORD PTR _properties$[ebp]
	mov	DWORD PTR [ecx+edx], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN23@pcf_get_pr
; Line 575
	jmp	$Bail$83
$LN23@pcf_get_pr:
; Line 577
	mov	edx, 4
	imul	eax, edx, 63
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN22@pcf_get_pr
	imul	ecx, DWORD PTR _i$[ebp], 12
	mov	edx, DWORD PTR _properties$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	push	OFFSET $SG7788
	call	_FT_Message
	add	esp, 8
$LN22@pcf_get_pr:
	xor	ecx, ecx
	jne	SHORT $LN23@pcf_get_pr
; Line 579
	imul	edx, DWORD PTR _i$[ebp], 12
	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, DWORD PTR _properties$[ebp]
	mov	esi, DWORD PTR _props$[ebp]
	mov	dl, BYTE PTR [esi+edx+4]
	mov	BYTE PTR [ecx+eax+4], dl
; Line 581
	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, DWORD PTR _props$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+4]
	test	edx, edx
	je	$LN19@pcf_get_pr
; Line 583
	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, DWORD PTR _props$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _value_offset$1[ebp], edx
; Line 587
	cmp	DWORD PTR _value_offset$1[ebp], 0
	jl	SHORT $LN17@pcf_get_pr
	mov	eax, DWORD PTR _value_offset$1[ebp]
	cmp	eax, DWORD PTR _string_size$[ebp]
	jbe	SHORT $LN18@pcf_get_pr
$LN17@pcf_get_pr:
; Line 589
	push	OFFSET $SG7794
	push	589					; 0000024dH
	push	9
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 9
	mov	DWORD PTR _error$[ebp], eax
; Line 590
	jmp	$Bail$83
$LN18@pcf_get_pr:
; Line 593
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strings$[ebp]
	add	edx, DWORD PTR _value_offset$1[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_strdup
	add	esp, 12					; 0000000cH
	imul	ecx, DWORD PTR _i$[ebp], 12
	mov	edx, DWORD PTR _properties$[ebp]
	mov	DWORD PTR [edx+ecx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@pcf_get_pr
; Line 594
	jmp	$Bail$83
$LN15@pcf_get_pr:
; Line 596
	mov	eax, 4
	imul	ecx, eax, 63
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN14@pcf_get_pr
	imul	edx, DWORD PTR _i$[ebp], 12
	mov	eax, DWORD PTR _properties$[ebp]
	mov	ecx, DWORD PTR [eax+edx+8]
	push	ecx
	push	OFFSET $SG7802
	call	_FT_Message
	add	esp, 8
$LN14@pcf_get_pr:
	xor	edx, edx
	jne	SHORT $LN15@pcf_get_pr
; Line 598
	jmp	SHORT $LN11@pcf_get_pr
$LN19@pcf_get_pr:
; Line 600
	imul	eax, DWORD PTR _i$[ebp], 12
	imul	ecx, DWORD PTR _i$[ebp], 12
	mov	edx, DWORD PTR _properties$[ebp]
	mov	esi, DWORD PTR _props$[ebp]
	mov	eax, DWORD PTR [esi+eax+8]
	mov	DWORD PTR [edx+ecx+8], eax
$LN10@pcf_get_pr:
; Line 602
	mov	ecx, 4
	imul	edx, ecx, 63
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN9@pcf_get_pr
	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, DWORD PTR _properties$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	push	edx
	push	OFFSET $SG7808
	call	_FT_Message
	add	esp, 8
$LN9@pcf_get_pr:
	xor	eax, eax
	jne	SHORT $LN10@pcf_get_pr
$LN11@pcf_get_pr:
; Line 604
	jmp	$LN28@pcf_get_pr
$LN27@pcf_get_pr:
; Line 606
	mov	DWORD PTR _error$[ebp], 0
$Bail$83:
; Line 609
	mov	ecx, DWORD PTR _props$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _props$[ebp], 0
	xor	eax, eax
	jne	SHORT $Bail$83
$LN3@pcf_get_pr:
; Line 610
	mov	ecx, DWORD PTR _strings$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _strings$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@pcf_get_pr
; Line 612
	mov	eax, DWORD PTR _error$[ebp]
; Line 613
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN82@pcf_get_pr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN82@pcf_get_pr:
	DD	3
	DD	$LN81@pcf_get_pr
$LN81@pcf_get_pr:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN78@pcf_get_pr
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN79@pcf_get_pr
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN80@pcf_get_pr
$LN80@pcf_get_pr:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN79@pcf_get_pr:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN78@pcf_get_pr:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
_pcf_get_properties ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_tables$ = 8						; size = 4
_ntables$ = 12						; size = 4
_type$ = 16						; size = 4
_pcf_has_table_type PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 383
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 387
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@pcf_has_ta
$LN3@pcf_has_ta:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@pcf_has_ta:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ntables$[ebp]
	jae	SHORT $LN2@pcf_has_ta
; Line 388
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _tables$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	cmp	ecx, DWORD PTR _type$[ebp]
	jne	SHORT $LN1@pcf_has_ta
; Line 389
	mov	al, 1
	jmp	SHORT $LN5@pcf_has_ta
$LN1@pcf_has_ta:
; Line 391
	jmp	SHORT $LN3@pcf_has_ta
$LN2@pcf_has_ta:
	xor	al, al
$LN5@pcf_has_ta:
; Line 392
	mov	esp, ebp
	pop	ebp
	ret	0
_pcf_has_table_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -8						; size = 4
_error$ = -4						; size = 4
_stream$ = 8						; size = 4
_tables$ = 12						; size = 4
_ntables$ = 16						; size = 4
_type$ = 20						; size = 4
_aformat$ = 24						; size = 4
_asize$ = 28						; size = 4
_pcf_seek_to_table_type PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 347
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 348
	mov	DWORD PTR _error$[ebp], 3
; Line 352
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@pcf_seek_t
$LN5@pcf_seek_t:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@pcf_seek_t:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ntables$[ebp]
	jae	$Fail$9
; Line 353
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _tables$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	cmp	ecx, DWORD PTR _type$[ebp]
	jne	$LN3@pcf_seek_t
; Line 355
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _tables$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, DWORD PTR [ecx+edx+12]
	jbe	SHORT $LN2@pcf_seek_t
; Line 357
	push	OFFSET $SG7621
	push	357					; 00000165H
	push	83					; 00000053H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 83					; 00000053H
	mov	DWORD PTR _error$[ebp], eax
; Line 358
	jmp	SHORT $Fail$9
$LN2@pcf_seek_t:
; Line 361
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _tables$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+12]
	sub	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@pcf_seek_t
; Line 363
	push	OFFSET $SG7625
	push	363					; 0000016bH
	push	83					; 00000053H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 83					; 00000053H
	mov	DWORD PTR _error$[ebp], eax
; Line 364
	jmp	SHORT $Fail$9
$LN1@pcf_seek_t:
; Line 367
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _asize$[ebp]
	mov	edx, DWORD PTR _tables$[ebp]
	mov	eax, DWORD PTR [edx+eax+8]
	mov	DWORD PTR [ecx], eax
; Line 368
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _aformat$[ebp]
	mov	eax, DWORD PTR _tables$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR [edx], ecx
; Line 370
	xor	eax, eax
	jmp	SHORT $LN7@pcf_seek_t
$LN3@pcf_seek_t:
; Line 373
	jmp	$LN5@pcf_seek_t
$Fail$9:
; Line 374
	mov	edx, DWORD PTR _asize$[ebp]
	mov	DWORD PTR [edx], 0
; Line 375
	mov	eax, DWORD PTR _error$[ebp]
$LN7@pcf_seek_t:
; Line 376
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pcf_seek_to_table_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -32						; size = 4
tv68 = -28						; size = 4
_compr$1 = -20						; size = 5
_fields$2 = -8						; size = 4
_error$ = -4						; size = 4
_stream$ = 8						; size = 4
_format$ = 12						; size = 4
_metric$ = 16						; size = 4
_pcf_get_metric PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 302
	mov	DWORD PTR _error$[ebp], 0
; Line 305
	mov	eax, DWORD PTR _format$[ebp]
	and	eax, -256				; ffffff00H
	jne	SHORT $LN3@pcf_get_me
; Line 313
	mov	ecx, DWORD PTR _format$[ebp]
	and	ecx, 4
	je	SHORT $LN6@pcf_get_me
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN7@pcf_get_me
$LN6@pcf_get_me:
	mov	DWORD PTR tv68[ebp], 0
$LN7@pcf_get_me:
	cmp	DWORD PTR tv68[ebp], 1
	jne	SHORT $LN8@pcf_get_me
	mov	DWORD PTR tv70[ebp], OFFSET _pcf_metric_msb_header
	jmp	SHORT $LN9@pcf_get_me
$LN8@pcf_get_me:
	mov	DWORD PTR tv70[ebp], OFFSET _pcf_metric_header
$LN9@pcf_get_me:
	mov	edx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _fields$2[ebp], edx
; Line 316
	mov	eax, DWORD PTR _metric$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fields$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 318
	jmp	SHORT $Exit$13
$LN3@pcf_get_me:
; Line 324
	lea	eax, DWORD PTR _compr$1[ebp]
	push	eax
	push	OFFSET _pcf_compressed_metric_header
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@pcf_get_me
; Line 325
	jmp	SHORT $Exit$13
$LN1@pcf_get_me:
; Line 327
	movzx	edx, BYTE PTR _compr$1[ebp]
	sub	edx, 128				; 00000080H
	mov	eax, DWORD PTR _metric$[ebp]
	mov	WORD PTR [eax], dx
; Line 328
	movzx	ecx, BYTE PTR _compr$1[ebp+1]
	sub	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _metric$[ebp]
	mov	WORD PTR [edx+2], cx
; Line 329
	movzx	eax, BYTE PTR _compr$1[ebp+2]
	sub	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _metric$[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 330
	movzx	edx, BYTE PTR _compr$1[ebp+3]
	sub	edx, 128				; 00000080H
	mov	eax, DWORD PTR _metric$[ebp]
	mov	WORD PTR [eax+6], dx
; Line 331
	movzx	ecx, BYTE PTR _compr$1[ebp+4]
	sub	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _metric$[ebp]
	mov	WORD PTR [edx+8], cx
; Line 332
	xor	eax, eax
	mov	ecx, DWORD PTR _metric$[ebp]
	mov	WORD PTR [ecx+10], ax
$Exit$13:
; Line 336
	mov	eax, DWORD PTR _error$[ebp]
; Line 337
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@pcf_get_me
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@pcf_get_me:
	DD	1
	DD	$LN11@pcf_get_me
$LN11@pcf_get_me:
	DD	-20					; ffffffecH
	DD	5
	DD	$LN10@pcf_get_me
$LN10@pcf_get_me:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	0
_pcf_get_metric ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_name$1 = -80						; size = 4
_j$2 = -76						; size = 4
_i$3 = -72						; size = 4
_tmp$4 = -64						; size = 16
_have_change$5 = -44					; size = 4
_i$6 = -40						; size = 4
_size$ = -36						; size = 4
_n$ = -32						; size = 4
_memory$ = -28						; size = 4
_tables$ = -24						; size = 4
_toc$ = -20						; size = 4
_error$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_stream$ = 8						; size = 4
_face$ = 12						; size = 4
_pcf_read_TOC PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 92
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 184				; 000000b8H
	mov	DWORD PTR _toc$[ebp], eax
; Line 95
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 102
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN47@pcf_read_T
	mov	ecx, DWORD PTR _toc$[ebp]
	push	ecx
	push	OFFSET _pcf_toc_header
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN48@pcf_read_T
$LN47@pcf_read_T:
; Line 103
	push	OFFSET $SG7424
	push	103					; 00000067H
	push	1
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 1
	jmp	$LN49@pcf_read_T
$LN48@pcf_read_T:
; Line 107
	mov	eax, DWORD PTR _toc$[ebp]
	cmp	DWORD PTR [eax], 1885562369		; 70636601H
	jne	SHORT $LN45@pcf_read_T
	mov	ecx, DWORD PTR _toc$[ebp]
	cmp	DWORD PTR [ecx+4], 134217727		; 07ffffffH
	ja	SHORT $LN45@pcf_read_T
	mov	edx, DWORD PTR _toc$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN46@pcf_read_T
$LN45@pcf_read_T:
; Line 108
	push	OFFSET $SG7427
	push	108					; 0000006cH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	jmp	$LN49@pcf_read_T
$LN46@pcf_read_T:
; Line 110
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _toc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	0
	push	16					; 00000010H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+192], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN44@pcf_read_T
; Line 111
	push	OFFSET $SG7431
	push	111					; 0000006fH
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	jmp	$LN49@pcf_read_T
$LN44@pcf_read_T:
; Line 113
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	DWORD PTR _tables$[ebp], eax
; Line 114
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN43@pcf_read_T
$LN42@pcf_read_T:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN43@pcf_read_T:
	mov	edx, DWORD PTR _toc$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN41@pcf_read_T
; Line 116
	mov	ecx, DWORD PTR _tables$[ebp]
	push	ecx
	push	OFFSET _pcf_table_header
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN40@pcf_read_T
; Line 117
	jmp	$Exit$55
$LN40@pcf_read_T:
; Line 118
	mov	eax, DWORD PTR _tables$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _tables$[ebp], eax
; Line 119
	jmp	SHORT $LN42@pcf_read_T
$LN41@pcf_read_T:
; Line 124
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	mov	DWORD PTR _tables$[ebp], edx
; Line 126
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN39@pcf_read_T
$LN38@pcf_read_T:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN39@pcf_read_T:
	mov	ecx, DWORD PTR _toc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	cmp	DWORD PTR _n$[ebp], edx
	jae	$LN37@pcf_read_T
; Line 131
	mov	DWORD PTR _have_change$5[ebp], 0
; Line 133
	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN36@pcf_read_T
$LN35@pcf_read_T:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN36@pcf_read_T:
	mov	ecx, DWORD PTR _toc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	sub	edx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR _i$6[ebp], edx
	jae	$LN34@pcf_read_T
; Line 138
	mov	eax, DWORD PTR _i$6[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$6[ebp]
	add	ecx, 1
	shl	ecx, 4
	mov	edx, DWORD PTR _tables$[ebp]
	mov	esi, DWORD PTR _tables$[ebp]
	mov	eax, DWORD PTR [edx+eax+12]
	cmp	eax, DWORD PTR [esi+ecx+12]
	jbe	SHORT $LN33@pcf_read_T
; Line 140
	mov	ecx, DWORD PTR _i$6[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _tables$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tmp$4[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _tmp$4[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _tmp$4[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _tmp$4[ebp+12], eax
; Line 141
	mov	ecx, DWORD PTR _i$6[ebp]
	add	ecx, 1
	shl	ecx, 4
	add	ecx, DWORD PTR _tables$[ebp]
	mov	edx, DWORD PTR _i$6[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _tables$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 142
	mov	edx, DWORD PTR _i$6[ebp]
	add	edx, 1
	shl	edx, 4
	add	edx, DWORD PTR _tables$[ebp]
	mov	eax, DWORD PTR _tmp$4[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _tmp$4[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _tmp$4[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _tmp$4[ebp+12]
	mov	DWORD PTR [edx+12], ecx
; Line 144
	mov	DWORD PTR _have_change$5[ebp], 1
$LN33@pcf_read_T:
; Line 148
	mov	edx, DWORD PTR _i$6[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR _tables$[ebp]
	mov	esi, DWORD PTR _tables$[ebp]
	mov	edx, DWORD PTR [ecx+edx+8]
	cmp	edx, DWORD PTR [esi+eax+12]
	ja	SHORT $LN31@pcf_read_T
	mov	eax, DWORD PTR _i$6[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$6[ebp]
	add	ecx, 1
	shl	ecx, 4
	mov	edx, DWORD PTR _i$6[ebp]
	shl	edx, 4
	mov	esi, DWORD PTR _tables$[ebp]
	mov	edi, DWORD PTR _tables$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+12]
	sub	ecx, DWORD PTR [edi+edx+8]
	mov	edx, DWORD PTR _tables$[ebp]
	cmp	DWORD PTR [edx+eax+12], ecx
	jbe	SHORT $LN32@pcf_read_T
$LN31@pcf_read_T:
; Line 150
	push	OFFSET $SG7449
	push	150					; 00000096H
	push	9
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 9
	mov	DWORD PTR _error$[ebp], eax
; Line 151
	jmp	$Exit$55
$LN32@pcf_read_T:
; Line 153
	jmp	$LN35@pcf_read_T
$LN34@pcf_read_T:
; Line 155
	cmp	DWORD PTR _have_change$5[ebp], 0
	jne	SHORT $LN30@pcf_read_T
; Line 156
	jmp	SHORT $LN37@pcf_read_T
$LN30@pcf_read_T:
; Line 157
	jmp	$LN38@pcf_read_T
$LN37@pcf_read_T:
; Line 180
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	mov	DWORD PTR _tables$[ebp], ecx
; Line 181
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _size$[ebp], eax
; Line 183
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN29@pcf_read_T
$LN28@pcf_read_T:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN29@pcf_read_T:
	mov	edx, DWORD PTR _toc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	cmp	DWORD PTR _n$[ebp], eax
	jae	SHORT $LN27@pcf_read_T
; Line 187
	mov	ecx, DWORD PTR _tables$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR _size$[ebp]
	ja	SHORT $LN25@pcf_read_T
	mov	eax, DWORD PTR _tables$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _tables$[ebp]
	cmp	DWORD PTR [edx+12], ecx
	jbe	SHORT $LN26@pcf_read_T
$LN25@pcf_read_T:
; Line 189
	push	OFFSET $SG7456
	push	189					; 000000bdH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 190
	jmp	$Exit$55
$LN26@pcf_read_T:
; Line 192
	mov	eax, DWORD PTR _tables$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _tables$[ebp], eax
; Line 193
	jmp	SHORT $LN28@pcf_read_T
$LN27@pcf_read_T:
; Line 196
	mov	ecx, DWORD PTR _tables$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN24@pcf_read_T
; Line 198
	push	OFFSET $SG7458
	push	198					; 000000c6H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 199
	jmp	$Exit$55
$LN24@pcf_read_T:
; Line 202
	mov	eax, DWORD PTR _tables$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _tables$[ebp]
	cmp	DWORD PTR [edx+8], ecx
	jbe	SHORT $LN23@pcf_read_T
; Line 203
	mov	eax, DWORD PTR _tables$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _tables$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN23@pcf_read_T:
; Line 209
	mov	DWORD PTR _name$1[ebp], OFFSET $SG7463
$LN22@pcf_read_T:
; Line 212
	mov	eax, 4
	imul	ecx, eax, 63
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN21@pcf_read_T
	push	OFFSET $SG7468
	call	_FT_Message
	add	esp, 4
$LN21@pcf_read_T:
	xor	edx, edx
	jne	SHORT $LN22@pcf_read_T
$LN18@pcf_read_T:
; Line 214
	mov	eax, 4
	imul	ecx, eax, 63
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN17@pcf_read_T
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+188]
	push	eax
	push	OFFSET $SG7473
	call	_FT_Message
	add	esp, 8
$LN17@pcf_read_T:
	xor	ecx, ecx
	jne	SHORT $LN18@pcf_read_T
; Line 216
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	DWORD PTR _tables$[ebp], eax
; Line 217
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN14@pcf_read_T
$LN13@pcf_read_T:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN14@pcf_read_T:
	mov	edx, DWORD PTR _toc$[ebp]
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	$LN12@pcf_read_T
; Line 220
	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN11@pcf_read_T
$LN10@pcf_read_T:
	mov	ecx, DWORD PTR _j$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$2[ebp], ecx
$LN11@pcf_read_T:
	cmp	DWORD PTR _j$2[ebp], 9
	jae	SHORT $LN7@pcf_read_T
; Line 221
	mov	edx, DWORD PTR _i$3[ebp]
	shl	edx, 4
	mov	eax, 1
	mov	ecx, DWORD PTR _j$2[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _tables$[ebp]
	cmp	DWORD PTR [ecx+edx], eax
	jne	SHORT $LN8@pcf_read_T
; Line 222
	mov	edx, DWORD PTR _j$2[ebp]
	mov	eax, DWORD PTR _tableNames[edx*4]
	mov	DWORD PTR _name$1[ebp], eax
$LN8@pcf_read_T:
; Line 229
	jmp	SHORT $LN10@pcf_read_T
$LN7@pcf_read_T:
	mov	ecx, 4
	imul	edx, ecx, 63
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN6@pcf_read_T
	mov	eax, DWORD PTR _i$3[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _tables$[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	push	edx
	mov	eax, DWORD PTR _i$3[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _tables$[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	push	edx
	mov	eax, DWORD PTR _i$3[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _tables$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	push	edx
	mov	eax, DWORD PTR _i$3[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _tables$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	push	edx
	mov	eax, DWORD PTR _i$3[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _tables$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	push	edx
	mov	eax, DWORD PTR _name$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	push	OFFSET $SG7486
	call	_FT_Message
	add	esp, 32					; 00000020H
$LN6@pcf_read_T:
	xor	edx, edx
	jne	SHORT $LN7@pcf_read_T
; Line 230
	jmp	$LN13@pcf_read_T
$LN12@pcf_read_T:
; Line 235
	xor	eax, eax
	jmp	SHORT $LN49@pcf_read_T
$Exit$55:
; Line 238
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+192], 0
	xor	ecx, ecx
	jne	SHORT $Exit$55
; Line 239
	mov	eax, DWORD PTR _error$[ebp]
$LN49@pcf_read_T:
; Line 240
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN54@pcf_read_T
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN54@pcf_read_T:
	DD	2
	DD	$LN53@pcf_read_T
$LN53@pcf_read_T:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN51@pcf_read_T
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN52@pcf_read_T
$LN52@pcf_read_T:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN51@pcf_read_T:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pcf_read_TOC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_found$ = -5						; size = 1
_properties$ = -4					; size = 4
_face$ = 8						; size = 4
_prop$ = 12						; size = 4
_pcf_find_property PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 428
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 429
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	mov	DWORD PTR _properties$[ebp], ecx
; Line 430
	mov	BYTE PTR _found$[ebp], 0
; Line 434
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@pcf_find_p
$LN5@pcf_find_p:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@pcf_find_p:
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+280]
	jge	SHORT $LN4@pcf_find_p
	movzx	edx, BYTE PTR _found$[ebp]
	test	edx, edx
	jne	SHORT $LN4@pcf_find_p
; Line 436
	mov	eax, DWORD PTR _prop$[ebp]
	push	eax
	imul	ecx, DWORD PTR _i$[ebp], 12
	mov	edx, DWORD PTR _properties$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@pcf_find_p
; Line 437
	mov	BYTE PTR _found$[ebp], 1
$LN3@pcf_find_p:
; Line 438
	jmp	SHORT $LN5@pcf_find_p
$LN4@pcf_find_p:
; Line 440
	movzx	ecx, BYTE PTR _found$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@pcf_find_p
; Line 441
	imul	edx, DWORD PTR _i$[ebp], 12
	mov	eax, DWORD PTR _properties$[ebp]
	lea	eax, DWORD PTR [eax+edx-12]
	jmp	SHORT $LN7@pcf_find_p
; Line 442
	jmp	SHORT $LN7@pcf_find_p
$LN2@pcf_find_p:
; Line 443
	xor	eax, eax
$LN7@pcf_find_p:
; Line 444
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pcf_find_property ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_charset_encoding$1 = -48				; size = 4
_charset_registry$2 = -44				; size = 4
_resolution_y$3 = -40					; size = 2
_resolution_x$4 = -36					; size = 2
_bsize$5 = -32						; size = 4
_prop$6 = -28						; size = 4
_root$7 = -24						; size = 4
_hasBDFAccelerators$ = -17				; size = 1
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_stream$ = 8						; size = 4
_face$ = 12						; size = 4
_pcf_load_font PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfread.c
; Line 1174
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1176
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1180
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_pcf_read_TOC
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1181
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN29@pcf_load_f
; Line 1182
	jmp	$Exit$35
$LN29@pcf_load_f:
; Line 1184
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_pcf_get_properties
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1185
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@pcf_load_f
; Line 1186
	jmp	$Exit$35
$LN28@pcf_load_f:
; Line 1191
	push	256					; 00000100H
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+192]
	push	eax
	call	_pcf_has_table_type
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _hasBDFAccelerators$[ebp], al
; Line 1192
	movzx	ecx, BYTE PTR _hasBDFAccelerators$[ebp]
	test	ecx, ecx
	jne	SHORT $LN27@pcf_load_f
; Line 1194
	push	2
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_pcf_get_accel
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1195
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN27@pcf_load_f
; Line 1196
	jmp	$Exit$35
$LN27@pcf_load_f:
; Line 1200
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_pcf_get_metrics
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1201
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN25@pcf_load_f
; Line 1202
	jmp	$Exit$35
$LN25@pcf_load_f:
; Line 1205
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_pcf_get_bitmaps
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1206
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN24@pcf_load_f
; Line 1207
	jmp	$Exit$35
$LN24@pcf_load_f:
; Line 1210
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_pcf_get_encodings
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1211
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN23@pcf_load_f
; Line 1212
	jmp	$Exit$35
$LN23@pcf_load_f:
; Line 1215
	movzx	ecx, BYTE PTR _hasBDFAccelerators$[ebp]
	test	ecx, ecx
	je	SHORT $LN22@pcf_load_f
; Line 1217
	push	256					; 00000100H
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_pcf_get_accel
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1218
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN22@pcf_load_f
; Line 1219
	jmp	$Exit$35
$LN22@pcf_load_f:
; Line 1226
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR _root$7[ebp], ecx
; Line 1230
	mov	edx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [edx], 1
; Line 1231
	mov	eax, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1235
	mov	ecx, DWORD PTR _root$7[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 146				; 00000092H
	mov	eax, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 1237
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, BYTE PTR [ecx+199]
	test	edx, edx
	je	SHORT $LN20@pcf_load_f
; Line 1238
	mov	eax, DWORD PTR _root$7[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 4
	mov	edx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN20@pcf_load_f:
; Line 1240
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_pcf_interpret_style
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@pcf_load_f
; Line 1241
	jmp	$Exit$35
$LN19@pcf_load_f:
; Line 1243
	push	OFFSET $SG8290
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _prop$6[ebp], eax
; Line 1244
	cmp	DWORD PTR _prop$6[ebp], 0
	je	SHORT $LN18@pcf_load_f
	mov	edx, DWORD PTR _prop$6[ebp]
	movzx	eax, BYTE PTR [edx+4]
	test	eax, eax
	je	SHORT $LN18@pcf_load_f
; Line 1246
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$6[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_strdup
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [edx+20], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN17@pcf_load_f
; Line 1247
	jmp	$Exit$35
$LN17@pcf_load_f:
; Line 1249
	jmp	SHORT $LN16@pcf_load_f
$LN18@pcf_load_f:
; Line 1250
	mov	eax, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [eax+20], 0
$LN16@pcf_load_f:
; Line 1259
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	add	edx, 1
	mov	eax, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 1261
	mov	ecx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [ecx+28], 1
; Line 1262
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	push	1
	push	0
	push	16					; 00000010H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [ecx+32], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@pcf_load_f
; Line 1263
	jmp	$Exit$35
$LN15@pcf_load_f:
; Line 1266
	mov	edx, DWORD PTR _root$7[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _bsize$5[ebp], eax
; Line 1267
	xor	ecx, ecx
	mov	WORD PTR _resolution_x$4[ebp], cx
	xor	edx, edx
	mov	WORD PTR _resolution_y$3[ebp], dx
; Line 1270
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _bsize$5[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1276
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _face$[ebp]
	add	edx, DWORD PTR [eax+208]
	mov	ecx, DWORD PTR _bsize$5[ebp]
	mov	WORD PTR [ecx], dx
; Line 1278
	push	OFFSET $SG8305
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _prop$6[ebp], eax
; Line 1279
	cmp	DWORD PTR _prop$6[ebp], 0
	je	SHORT $LN14@pcf_load_f
; Line 1280
	mov	eax, DWORD PTR _prop$6[ebp]
	mov	eax, DWORD PTR [eax+8]
	add	eax, 5
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	edx, DWORD PTR _bsize$5[ebp]
	mov	WORD PTR [edx+2], ax
; Line 1281
	jmp	SHORT $LN13@pcf_load_f
$LN14@pcf_load_f:
; Line 1282
	mov	eax, DWORD PTR _bsize$5[ebp]
	movsx	eax, WORD PTR [eax]
	shl	eax, 1
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	edx, DWORD PTR _bsize$5[ebp]
	mov	WORD PTR [edx+2], ax
$LN13@pcf_load_f:
; Line 1284
	push	OFFSET $SG8310
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _prop$6[ebp], eax
; Line 1285
	cmp	DWORD PTR _prop$6[ebp], 0
	je	SHORT $LN12@pcf_load_f
; Line 1288
	mov	ecx, DWORD PTR _prop$6[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 6
	imul	eax, edx, 7200
	add	eax, 36135				; 00008d27H
	cdq
	mov	ecx, 72270				; 00011a4eH
	idiv	ecx
	mov	edx, DWORD PTR _bsize$5[ebp]
	mov	DWORD PTR [edx+4], eax
$LN12@pcf_load_f:
; Line 1290
	push	OFFSET $SG8313
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _prop$6[ebp], eax
; Line 1291
	cmp	DWORD PTR _prop$6[ebp], 0
	je	SHORT $LN11@pcf_load_f
; Line 1292
	mov	ecx, DWORD PTR _prop$6[ebp]
	movsx	edx, WORD PTR [ecx+8]
	shl	edx, 6
	mov	eax, DWORD PTR _bsize$5[ebp]
	mov	DWORD PTR [eax+12], edx
$LN11@pcf_load_f:
; Line 1294
	push	OFFSET $SG8316
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _prop$6[ebp], eax
; Line 1295
	cmp	DWORD PTR _prop$6[ebp], 0
	je	SHORT $LN10@pcf_load_f
; Line 1296
	mov	edx, DWORD PTR _prop$6[ebp]
	mov	ax, WORD PTR [edx+8]
	mov	WORD PTR _resolution_x$4[ebp], ax
$LN10@pcf_load_f:
; Line 1298
	push	OFFSET $SG8319
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _prop$6[ebp], eax
; Line 1299
	cmp	DWORD PTR _prop$6[ebp], 0
	je	SHORT $LN9@pcf_load_f
; Line 1300
	mov	edx, DWORD PTR _prop$6[ebp]
	mov	ax, WORD PTR [edx+8]
	mov	WORD PTR _resolution_y$3[ebp], ax
$LN9@pcf_load_f:
; Line 1302
	mov	ecx, DWORD PTR _bsize$5[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN8@pcf_load_f
; Line 1304
	mov	edx, DWORD PTR _bsize$5[ebp]
	mov	eax, DWORD PTR _bsize$5[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+12], ecx
; Line 1305
	movsx	edx, WORD PTR _resolution_y$3[ebp]
	test	edx, edx
	je	SHORT $LN8@pcf_load_f
; Line 1306
	movsx	eax, WORD PTR _resolution_y$3[ebp]
	mov	ecx, DWORD PTR _bsize$5[ebp]
	imul	eax, DWORD PTR [ecx+12]
	cdq
	mov	ecx, 72					; 00000048H
	idiv	ecx
	mov	edx, DWORD PTR _bsize$5[ebp]
	mov	DWORD PTR [edx+12], eax
$LN8@pcf_load_f:
; Line 1308
	movsx	eax, WORD PTR _resolution_x$4[ebp]
	test	eax, eax
	je	SHORT $LN6@pcf_load_f
	movsx	ecx, WORD PTR _resolution_y$3[ebp]
	test	ecx, ecx
	je	SHORT $LN6@pcf_load_f
; Line 1309
	movsx	edx, WORD PTR _resolution_x$4[ebp]
	mov	eax, DWORD PTR _bsize$5[ebp]
	mov	ecx, edx
	imul	ecx, DWORD PTR [eax+12]
	movsx	esi, WORD PTR _resolution_y$3[ebp]
	mov	eax, ecx
	cdq
	idiv	esi
	mov	edx, DWORD PTR _bsize$5[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 1310
	jmp	SHORT $LN5@pcf_load_f
$LN6@pcf_load_f:
; Line 1311
	mov	eax, DWORD PTR _bsize$5[ebp]
	mov	ecx, DWORD PTR _bsize$5[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
$LN5@pcf_load_f:
; Line 1316
	mov	DWORD PTR _charset_registry$2[ebp], 0
	mov	DWORD PTR _charset_encoding$1[ebp], 0
; Line 1319
	push	OFFSET $SG8328
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _charset_registry$2[ebp], eax
; Line 1320
	push	OFFSET $SG8329
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_pcf_find_property
	add	esp, 8
	mov	DWORD PTR _charset_encoding$1[ebp], eax
; Line 1323
	cmp	DWORD PTR _charset_registry$2[ebp], 0
	je	SHORT $Exit$35
	mov	edx, DWORD PTR _charset_registry$2[ebp]
	movzx	eax, BYTE PTR [edx+4]
	test	eax, eax
	je	SHORT $Exit$35
	cmp	DWORD PTR _charset_encoding$1[ebp], 0
	je	SHORT $Exit$35
	mov	ecx, DWORD PTR _charset_encoding$1[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	test	edx, edx
	je	SHORT $Exit$35
; Line 1328
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _charset_encoding$1[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_strdup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+176], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $Exit$35
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _charset_registry$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_strdup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+180], eax
$Exit$35:
; Line 1335
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@pcf_load_f
; Line 1339
	push	OFFSET $SG8338
	push	1339					; 0000053bH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$LN1@pcf_load_f:
; Line 1342
	mov	eax, DWORD PTR _error$[ebp]
; Line 1343
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@pcf_load_f
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN34@pcf_load_f:
	DD	1
	DD	$LN33@pcf_load_f
$LN33@pcf_load_f:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN32@pcf_load_f
$LN32@pcf_load_f:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_pcf_load_font ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$1 = -1						; size = 1
_buf$ = 8						; size = 4
_nbytes$ = 12						; size = 4
_FourByteSwap PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfutil.c
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 88
	jmp	SHORT $LN3@FourByteSw
$LN2@FourByteSw:
	mov	eax, DWORD PTR _nbytes$[ebp]
	sub	eax, 4
	mov	DWORD PTR _nbytes$[ebp], eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 4
	mov	DWORD PTR _buf$[ebp], ecx
$LN3@FourByteSw:
	cmp	DWORD PTR _nbytes$[ebp], 4
	jb	SHORT $LN4@FourByteSw
; Line 93
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _c$1[ebp], dl
; Line 94
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _buf$[ebp]
	mov	esi, DWORD PTR _buf$[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [edx+eax], cl
; Line 95
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	dl, BYTE PTR _c$1[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 97
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _c$1[ebp], dl
; Line 98
	mov	eax, 1
	shl	eax, 1
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _buf$[ebp]
	mov	esi, DWORD PTR _buf$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [edx+ecx], al
; Line 99
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _buf$[ebp]
	mov	al, BYTE PTR _c$1[ebp]
	mov	BYTE PTR [edx+ecx], al
; Line 100
	jmp	$LN2@FourByteSw
$LN4@FourByteSw:
; Line 101
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_FourByteSwap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$1 = -1						; size = 1
_buf$ = 8						; size = 4
_nbytes$ = 12						; size = 4
_TwoByteSwap PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfutil.c
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 69
	jmp	SHORT $LN3@TwoByteSwa
$LN2@TwoByteSwa:
	mov	eax, DWORD PTR _nbytes$[ebp]
	sub	eax, 2
	mov	DWORD PTR _nbytes$[ebp], eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 2
	mov	DWORD PTR _buf$[ebp], ecx
$LN3@TwoByteSwa:
	cmp	DWORD PTR _nbytes$[ebp], 2
	jb	SHORT $LN4@TwoByteSwa
; Line 74
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _c$1[ebp], dl
; Line 75
	mov	eax, 1
	shl	eax, 0
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	esi, DWORD PTR _buf$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [ecx+edx], al
; Line 76
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _buf$[ebp]
	mov	al, BYTE PTR _c$1[ebp]
	mov	BYTE PTR [edx+ecx], al
; Line 77
	jmp	SHORT $LN2@TwoByteSwa
$LN4@TwoByteSwa:
; Line 78
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TwoByteSwap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$1 = -4						; size = 4
_buf$ = 8						; size = 4
_nbytes$ = 12						; size = 4
_BitOrderInvert PROC
; File d:\mozilla\modules\freetype2\src\pcf\pcfutil.c
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 47
	jmp	SHORT $LN3@BitOrderIn
$LN2@BitOrderIn:
	mov	eax, DWORD PTR _nbytes$[ebp]
	sub	eax, 1
	mov	DWORD PTR _nbytes$[ebp], eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 1
	mov	DWORD PTR _buf$[ebp], ecx
$LN3@BitOrderIn:
	cmp	DWORD PTR _nbytes$[ebp], 0
	jbe	SHORT $LN4@BitOrderIn
; Line 49
	mov	edx, DWORD PTR _buf$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _val$1[ebp], eax
; Line 52
	mov	ecx, DWORD PTR _val$1[ebp]
	shr	ecx, 1
	and	ecx, 85					; 00000055H
	mov	edx, DWORD PTR _val$1[ebp]
	shl	edx, 1
	and	edx, 170				; 000000aaH
	or	ecx, edx
	mov	DWORD PTR _val$1[ebp], ecx
; Line 53
	mov	eax, DWORD PTR _val$1[ebp]
	shr	eax, 2
	and	eax, 51					; 00000033H
	mov	ecx, DWORD PTR _val$1[ebp]
	shl	ecx, 2
	and	ecx, 204				; 000000ccH
	or	eax, ecx
	mov	DWORD PTR _val$1[ebp], eax
; Line 54
	mov	edx, DWORD PTR _val$1[ebp]
	shr	edx, 4
	and	edx, 15					; 0000000fH
	mov	eax, DWORD PTR _val$1[ebp]
	shl	eax, 4
	and	eax, 240				; 000000f0H
	or	edx, eax
	mov	DWORD PTR _val$1[ebp], edx
; Line 56
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	dl, BYTE PTR _val$1[ebp]
	mov	BYTE PTR [ecx], dl
; Line 57
	jmp	SHORT $LN2@BitOrderIn
$LN4@BitOrderIn:
; Line 58
	mov	esp, ebp
	pop	ebp
	ret	0
_BitOrderInvert ENDP
_TEXT	ENDS
END
