; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\cff\cff.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_cff_driver_class
PUBLIC	_cff_cmap_encoding_class_rec
PUBLIC	_cff_cmap_unicode_class_rec
CONST	SEGMENT
_cff_service_ps_info DD FLAT:_cff_ps_get_font_info
	DD	00H
	DD	FLAT:_cff_ps_has_glyph_names
	DD	00H
	DD	00H
_cff_service_ps_name DD FLAT:_cff_get_ps_name
_cff_service_get_cmap_info DD FLAT:_cff_get_cmap_info
_cff_service_cid_info DD FLAT:_cff_get_ros
	DD	FLAT:_cff_get_is_cid
	DD	FLAT:_cff_get_cid_from_glyph_index
_cff_service_properties DD FLAT:_cff_property_set
	DD	FLAT:_cff_property_get
_cff_services DD FLAT:$SG9425
	DD	FLAT:$SG9426
	DD	FLAT:$SG9427
	DD	FLAT:_cff_service_ps_info
	DD	FLAT:$SG9428
	DD	FLAT:_cff_service_ps_name
	DD	FLAT:$SG9429
	DD	FLAT:_cff_service_glyph_dict
	DD	FLAT:$SG9430
	DD	FLAT:_cff_service_get_cmap_info
	DD	FLAT:$SG9431
	DD	FLAT:_cff_service_cid_info
	DD	FLAT:$SG9432
	DD	FLAT:_cff_service_properties
	DD	00H
	DD	00H
_power_tens DD	01H
	DD	0aH
	DD	064H
	DD	03e8H
	DD	02710H
	DD	0186a0H
	DD	0f4240H
	DD	0989680H
	DD	05f5e100H
	DD	03b9aca00H
_cff_field_handlers DD 04H
	DD	01000H
	DD	00H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10015
	DD	04H
	DD	01001H
	DD	04H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10016
	DD	04H
	DD	01100H
	DD	08H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10017
	DD	04H
	DD	01002H
	DD	0cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10018
	DD	04H
	DD	01003H
	DD	010H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10019
	DD	04H
	DD	01004H
	DD	014H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10020
	DD	05H
	DD	01101H
	DD	018H
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10021
	DD	02H
	DD	01102H
	DD	01cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10022
	DD	02H
	DD	01103H
	DD	020H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10023
	DD	02H
	DD	01104H
	DD	024H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10024
	DD	01H
	DD	01105H
	DD	028H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10025
	DD	01H
	DD	01106H
	DD	02cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10026
	DD	07H
	DD	01107H
	DD	00H
	DB	00H
	ORG $+3
	DD	FLAT:_cff_parse_font_matrix
	DD	00H
	DD	00H
	DD	FLAT:$SG10027
	DD	01H
	DD	0100dH
	DD	050H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10028
	DD	07H
	DD	01005H
	DD	00H
	DB	00H
	ORG $+3
	DD	FLAT:_cff_parse_font_bbox
	DD	00H
	DD	00H
	DD	FLAT:$SG10029
	DD	01H
	DD	01108H
	DD	064H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10030
	DD	01H
	DD	0100fH
	DD	068H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10031
	DD	01H
	DD	01010H
	DD	06cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10032
	DD	01H
	DD	01011H
	DD	070H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10033
	DD	07H
	DD	01012H
	DD	00H
	DB	00H
	ORG $+3
	DD	FLAT:_cff_parse_private_dict
	DD	00H
	DD	00H
	DD	FLAT:$SG10034
	DD	01H
	DD	01114H
	DD	07cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10035
	DD	04H
	DD	01115H
	DD	080H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10036
	DD	07H
	DD	0111eH
	DD	00H
	DB	00H
	ORG $+3
	DD	FLAT:_cff_parse_cid_ros
	DD	00H
	DD	00H
	DD	FLAT:$SG10037
	DD	01H
	DD	0111fH
	DD	090H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10038
	DD	01H
	DD	01120H
	DD	094H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10039
	DD	01H
	DD	01121H
	DD	098H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10040
	DD	01H
	DD	01122H
	DD	09cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10041
	DD	01H
	DD	01123H
	DD	0a0H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10042
	DD	01H
	DD	01124H
	DD	0a4H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10043
	DD	01H
	DD	01125H
	DD	0a8H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10044
	DD	04H
	DD	01126H
	DD	0acH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10045
	DD	06H
	DD	02006H
	DD	04H
	DB	04H
	ORG $+3
	DD	00H
	DD	0eH
	DD	00H
	DD	FLAT:$SG10046
	DD	06H
	DD	02007H
	DD	03cH
	DB	04H
	ORG $+3
	DD	00H
	DD	0aH
	DD	01H
	DD	FLAT:$SG10047
	DD	06H
	DD	02008H
	DD	064H
	DB	04H
	ORG $+3
	DD	00H
	DD	0eH
	DD	02H
	DD	FLAT:$SG10048
	DD	06H
	DD	02009H
	DD	09cH
	DB	04H
	ORG $+3
	DD	00H
	DD	0aH
	DD	03H
	DD	FLAT:$SG10049
	DD	03H
	DD	02109H
	DD	0c4H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10050
	DD	01H
	DD	0210aH
	DD	0c8H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10051
	DD	01H
	DD	0210bH
	DD	0ccH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10052
	DD	01H
	DD	0200aH
	DD	0d0H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10053
	DD	01H
	DD	0200bH
	DD	0d4H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10054
	DD	06H
	DD	0210cH
	DD	0dcH
	DB	04H
	ORG $+3
	DD	00H
	DD	0dH
	DD	0d8H
	DD	FLAT:$SG10055
	DD	06H
	DD	0210dH
	DD	0110H
	DB	04H
	ORG $+3
	DD	00H
	DD	0dH
	DD	0d9H
	DD	FLAT:$SG10056
	DD	05H
	DD	0210eH
	DD	0144H
	DB	01H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10057
	DD	02H
	DD	0210fH
	DD	0148H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10058
	DD	01H
	DD	02110H
	DD	014cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10059
	DD	01H
	DD	02111H
	DD	0150H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10060
	DD	02H
	DD	02112H
	DD	0154H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10061
	DD	01H
	DD	02113H
	DD	0158H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10062
	DD	01H
	DD	02013H
	DD	015cH
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10063
	DD	01H
	DD	02014H
	DD	0160H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10064
	DD	01H
	DD	02015H
	DD	0164H
	DB	04H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG10065
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_cff_driver_class DD 0501H
	DD	044H
	DD	FLAT:$SG9453
	DD	010000H
	DD	020000H
	DD	00H
	DD	FLAT:_cff_driver_init
	DD	FLAT:_cff_driver_done
	DD	FLAT:_cff_get_interface
	DD	0318H
	DD	030H
	DD	0acH
	DD	FLAT:_cff_face_init
	DD	FLAT:_cff_face_done
	DD	FLAT:_cff_size_init
	DD	FLAT:_cff_size_done
	DD	FLAT:_cff_slot_init
	DD	FLAT:_cff_slot_done
	DD	FLAT:_cff_glyph_load
	DD	FLAT:_cff_get_kerning
	DD	00H
	DD	FLAT:_cff_get_advances
	DD	FLAT:_cff_size_request
	DD	FLAT:_cff_size_select
?cff_header_fields@?1??cff_font_load@@9@9 DB 04H	; `cff_font_load'::`2'::cff_header_fields
	DB	00H
	DW	04H
	DB	08H
	DB	01H
	DW	010H
	DB	08H
	DB	01H
	DW	011H
	DB	08H
	DB	01H
	DW	012H
	DB	08H
	DB	01H
	DW	013H
	DB	00H
	DB	00H
	DW	00H
?readFromStack@?FB@??cf2_interpT2CharString@@9@9 DB 01H	; `cf2_interpT2CharString'::`81'::readFromStack
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
?readFromStack@?FD@??cf2_interpT2CharString@@9@9 DB 01H	; `cf2_interpT2CharString'::`83'::readFromStack
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?readFromStack@?FF@??cf2_interpT2CharString@@9@9 DB 01H	; `cf2_interpT2CharString'::`85'::readFromStack
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
?readFromStack@?FH@??cf2_interpT2CharString@@9@9 DB 01H	; `cf2_interpT2CharString'::`87'::readFromStack
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
_cff_cmap_encoding_class_rec DD 014H
	DD	FLAT:_cff_cmap_encoding_init
	DD	FLAT:_cff_cmap_encoding_done
	DD	FLAT:_cff_cmap_encoding_char_index
	DD	FLAT:_cff_cmap_encoding_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_cff_cmap_unicode_class_rec DD 018H
	DD	FLAT:_cff_cmap_unicode_init
	DD	FLAT:_cff_cmap_unicode_done
	DD	FLAT:_cff_cmap_unicode_char_index
	DD	FLAT:_cff_cmap_unicode_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_cff_service_glyph_dict DD FLAT:_cff_get_glyph_name
	DD	FLAT:_cff_get_name_index
_cff_isoadobe_charset DW 00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	024H
	DW	025H
	DW	026H
	DW	027H
	DW	028H
	DW	029H
	DW	02aH
	DW	02bH
	DW	02cH
	DW	02dH
	DW	02eH
	DW	02fH
	DW	030H
	DW	031H
	DW	032H
	DW	033H
	DW	034H
	DW	035H
	DW	036H
	DW	037H
	DW	038H
	DW	039H
	DW	03aH
	DW	03bH
	DW	03cH
	DW	03dH
	DW	03eH
	DW	03fH
	DW	040H
	DW	041H
	DW	042H
	DW	043H
	DW	044H
	DW	045H
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	04cH
	DW	04dH
	DW	04eH
	DW	04fH
	DW	050H
	DW	051H
	DW	052H
	DW	053H
	DW	054H
	DW	055H
	DW	056H
	DW	057H
	DW	058H
	DW	059H
	DW	05aH
	DW	05bH
	DW	05cH
	DW	05dH
	DW	05eH
	DW	05fH
	DW	060H
	DW	061H
	DW	062H
	DW	063H
	DW	064H
	DW	065H
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	06cH
	DW	06dH
	DW	06eH
	DW	06fH
	DW	070H
	DW	071H
	DW	072H
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	079H
	DW	07aH
	DW	07bH
	DW	07cH
	DW	07dH
	DW	07eH
	DW	07fH
	DW	080H
	DW	081H
	DW	082H
	DW	083H
	DW	084H
	DW	085H
	DW	086H
	DW	087H
	DW	088H
	DW	089H
	DW	08aH
	DW	08bH
	DW	08cH
	DW	08dH
	DW	08eH
	DW	08fH
	DW	090H
	DW	091H
	DW	092H
	DW	093H
	DW	094H
	DW	095H
	DW	096H
	DW	097H
	DW	098H
	DW	099H
	DW	09aH
	DW	09bH
	DW	09cH
	DW	09dH
	DW	09eH
	DW	09fH
	DW	0a0H
	DW	0a1H
	DW	0a2H
	DW	0a3H
	DW	0a4H
	DW	0a5H
	DW	0a6H
	DW	0a7H
	DW	0a8H
	DW	0a9H
	DW	0aaH
	DW	0abH
	DW	0acH
	DW	0adH
	DW	0aeH
	DW	0afH
	DW	0b0H
	DW	0b1H
	DW	0b2H
	DW	0b3H
	DW	0b4H
	DW	0b5H
	DW	0b6H
	DW	0b7H
	DW	0b8H
	DW	0b9H
	DW	0baH
	DW	0bbH
	DW	0bcH
	DW	0bdH
	DW	0beH
	DW	0bfH
	DW	0c0H
	DW	0c1H
	DW	0c2H
	DW	0c3H
	DW	0c4H
	DW	0c5H
	DW	0c6H
	DW	0c7H
	DW	0c8H
	DW	0c9H
	DW	0caH
	DW	0cbH
	DW	0ccH
	DW	0cdH
	DW	0ceH
	DW	0cfH
	DW	0d0H
	DW	0d1H
	DW	0d2H
	DW	0d3H
	DW	0d4H
	DW	0d5H
	DW	0d6H
	DW	0d7H
	DW	0d8H
	DW	0d9H
	DW	0daH
	DW	0dbH
	DW	0dcH
	DW	0ddH
	DW	0deH
	DW	0dfH
	DW	0e0H
	DW	0e1H
	DW	0e2H
	DW	0e3H
	DW	0e4H
	ORG $+6
_cff_expert_charset DW 00H
	DW	01H
	DW	0e5H
	DW	0e6H
	DW	0e7H
	DW	0e8H
	DW	0e9H
	DW	0eaH
	DW	0ebH
	DW	0ecH
	DW	0edH
	DW	0eeH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	063H
	DW	0efH
	DW	0f0H
	DW	0f1H
	DW	0f2H
	DW	0f3H
	DW	0f4H
	DW	0f5H
	DW	0f6H
	DW	0f7H
	DW	0f8H
	DW	01bH
	DW	01cH
	DW	0f9H
	DW	0faH
	DW	0fbH
	DW	0fcH
	DW	0fdH
	DW	0feH
	DW	0ffH
	DW	0100H
	DW	0101H
	DW	0102H
	DW	0103H
	DW	0104H
	DW	0105H
	DW	0106H
	DW	0107H
	DW	0108H
	DW	0109H
	DW	010aH
	DW	06dH
	DW	06eH
	DW	010bH
	DW	010cH
	DW	010dH
	DW	010eH
	DW	010fH
	DW	0110H
	DW	0111H
	DW	0112H
	DW	0113H
	DW	0114H
	DW	0115H
	DW	0116H
	DW	0117H
	DW	0118H
	DW	0119H
	DW	011aH
	DW	011bH
	DW	011cH
	DW	011dH
	DW	011eH
	DW	011fH
	DW	0120H
	DW	0121H
	DW	0122H
	DW	0123H
	DW	0124H
	DW	0125H
	DW	0126H
	DW	0127H
	DW	0128H
	DW	0129H
	DW	012aH
	DW	012bH
	DW	012cH
	DW	012dH
	DW	012eH
	DW	012fH
	DW	0130H
	DW	0131H
	DW	0132H
	DW	0133H
	DW	0134H
	DW	0135H
	DW	0136H
	DW	0137H
	DW	0138H
	DW	0139H
	DW	013aH
	DW	013bH
	DW	013cH
	DW	013dH
	DW	013eH
	DW	09eH
	DW	09bH
	DW	0a3H
	DW	013fH
	DW	0140H
	DW	0141H
	DW	0142H
	DW	0143H
	DW	0144H
	DW	0145H
	DW	0146H
	DW	096H
	DW	0a4H
	DW	0a9H
	DW	0147H
	DW	0148H
	DW	0149H
	DW	014aH
	DW	014bH
	DW	014cH
	DW	014dH
	DW	014eH
	DW	014fH
	DW	0150H
	DW	0151H
	DW	0152H
	DW	0153H
	DW	0154H
	DW	0155H
	DW	0156H
	DW	0157H
	DW	0158H
	DW	0159H
	DW	015aH
	DW	015bH
	DW	015cH
	DW	015dH
	DW	015eH
	DW	015fH
	DW	0160H
	DW	0161H
	DW	0162H
	DW	0163H
	DW	0164H
	DW	0165H
	DW	0166H
	DW	0167H
	DW	0168H
	DW	0169H
	DW	016aH
	DW	016bH
	DW	016cH
	DW	016dH
	DW	016eH
	DW	016fH
	DW	0170H
	DW	0171H
	DW	0172H
	DW	0173H
	DW	0174H
	DW	0175H
	DW	0176H
	DW	0177H
	DW	0178H
	DW	0179H
	DW	017aH
	ORG $+4
_cff_expertsubset_charset DW 00H
	DW	01H
	DW	0e7H
	DW	0e8H
	DW	0ebH
	DW	0ecH
	DW	0edH
	DW	0eeH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	063H
	DW	0efH
	DW	0f0H
	DW	0f1H
	DW	0f2H
	DW	0f3H
	DW	0f4H
	DW	0f5H
	DW	0f6H
	DW	0f7H
	DW	0f8H
	DW	01bH
	DW	01cH
	DW	0f9H
	DW	0faH
	DW	0fbH
	DW	0fdH
	DW	0feH
	DW	0ffH
	DW	0100H
	DW	0101H
	DW	0102H
	DW	0103H
	DW	0104H
	DW	0105H
	DW	0106H
	DW	0107H
	DW	0108H
	DW	0109H
	DW	010aH
	DW	06dH
	DW	06eH
	DW	010bH
	DW	010cH
	DW	010dH
	DW	010eH
	DW	0110H
	DW	012cH
	DW	012dH
	DW	012eH
	DW	0131H
	DW	013aH
	DW	013bH
	DW	09eH
	DW	09bH
	DW	0a3H
	DW	0140H
	DW	0141H
	DW	0142H
	DW	0143H
	DW	0144H
	DW	0145H
	DW	0146H
	DW	096H
	DW	0a4H
	DW	0a9H
	DW	0147H
	DW	0148H
	DW	0149H
	DW	014aH
	DW	014bH
	DW	014cH
	DW	014dH
	DW	014eH
	DW	014fH
	DW	0150H
	DW	0151H
	DW	0152H
	DW	0153H
	DW	0154H
	DW	0155H
	DW	0156H
	DW	0157H
	DW	0158H
	DW	0159H
	DW	015aH
	ORG $+2
_cff_standard_encoding DW 00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	024H
	DW	025H
	DW	026H
	DW	027H
	DW	028H
	DW	029H
	DW	02aH
	DW	02bH
	DW	02cH
	DW	02dH
	DW	02eH
	DW	02fH
	DW	030H
	DW	031H
	DW	032H
	DW	033H
	DW	034H
	DW	035H
	DW	036H
	DW	037H
	DW	038H
	DW	039H
	DW	03aH
	DW	03bH
	DW	03cH
	DW	03dH
	DW	03eH
	DW	03fH
	DW	040H
	DW	041H
	DW	042H
	DW	043H
	DW	044H
	DW	045H
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	04cH
	DW	04dH
	DW	04eH
	DW	04fH
	DW	050H
	DW	051H
	DW	052H
	DW	053H
	DW	054H
	DW	055H
	DW	056H
	DW	057H
	DW	058H
	DW	059H
	DW	05aH
	DW	05bH
	DW	05cH
	DW	05dH
	DW	05eH
	DW	05fH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	060H
	DW	061H
	DW	062H
	DW	063H
	DW	064H
	DW	065H
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	06cH
	DW	06dH
	DW	06eH
	DW	00H
	DW	06fH
	DW	070H
	DW	071H
	DW	072H
	DW	00H
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	079H
	DW	07aH
	DW	00H
	DW	07bH
	DW	00H
	DW	07cH
	DW	07dH
	DW	07eH
	DW	07fH
	DW	080H
	DW	081H
	DW	082H
	DW	083H
	DW	00H
	DW	084H
	DW	085H
	DW	00H
	DW	086H
	DW	087H
	DW	088H
	DW	089H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	08aH
	DW	00H
	DW	08bH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	08cH
	DW	08dH
	DW	08eH
	DW	08fH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	090H
	DW	00H
	DW	00H
	DW	00H
	DW	091H
	DW	00H
	DW	00H
	DW	092H
	DW	093H
	DW	094H
	DW	095H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
_cff_expert_encoding DW 00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01H
	DW	0e5H
	DW	0e6H
	DW	00H
	DW	0e7H
	DW	0e8H
	DW	0e9H
	DW	0eaH
	DW	0ebH
	DW	0ecH
	DW	0edH
	DW	0eeH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	063H
	DW	0efH
	DW	0f0H
	DW	0f1H
	DW	0f2H
	DW	0f3H
	DW	0f4H
	DW	0f5H
	DW	0f6H
	DW	0f7H
	DW	0f8H
	DW	01bH
	DW	01cH
	DW	0f9H
	DW	0faH
	DW	0fbH
	DW	0fcH
	DW	00H
	DW	0fdH
	DW	0feH
	DW	0ffH
	DW	0100H
	DW	0101H
	DW	00H
	DW	00H
	DW	00H
	DW	0102H
	DW	00H
	DW	00H
	DW	0103H
	DW	0104H
	DW	0105H
	DW	0106H
	DW	00H
	DW	00H
	DW	0107H
	DW	0108H
	DW	0109H
	DW	00H
	DW	010aH
	DW	06dH
	DW	06eH
	DW	010bH
	DW	010cH
	DW	010dH
	DW	00H
	DW	010eH
	DW	010fH
	DW	0110H
	DW	0111H
	DW	0112H
	DW	0113H
	DW	0114H
	DW	0115H
	DW	0116H
	DW	0117H
	DW	0118H
	DW	0119H
	DW	011aH
	DW	011bH
	DW	011cH
	DW	011dH
	DW	011eH
	DW	011fH
	DW	0120H
	DW	0121H
	DW	0122H
	DW	0123H
	DW	0124H
	DW	0125H
	DW	0126H
	DW	0127H
	DW	0128H
	DW	0129H
	DW	012aH
	DW	012bH
	DW	012cH
	DW	012dH
	DW	012eH
	DW	012fH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0130H
	DW	0131H
	DW	0132H
	DW	00H
	DW	00H
	DW	0133H
	DW	0134H
	DW	0135H
	DW	0136H
	DW	0137H
	DW	00H
	DW	0138H
	DW	00H
	DW	00H
	DW	0138H
	DW	00H
	DW	00H
	DW	013aH
	DW	013bH
	DW	00H
	DW	00H
	DW	013cH
	DW	013dH
	DW	013eH
	DW	00H
	DW	00H
	DW	00H
	DW	09eH
	DW	09bH
	DW	0a3H
	DW	013fH
	DW	0140H
	DW	0141H
	DW	0142H
	DW	0143H
	DW	0144H
	DW	0145H
	DW	00H
	DW	00H
	DW	0146H
	DW	096H
	DW	0a4H
	DW	0a9H
	DW	0147H
	DW	0148H
	DW	0149H
	DW	014aH
	DW	014bH
	DW	014cH
	DW	014dH
	DW	014eH
	DW	014fH
	DW	0150H
	DW	0151H
	DW	0152H
	DW	0153H
	DW	0154H
	DW	0155H
	DW	0156H
	DW	0157H
	DW	0158H
	DW	0159H
	DW	015aH
	DW	015bH
	DW	015cH
	DW	015dH
	DW	015eH
	DW	015fH
	DW	0160H
	DW	0161H
	DW	0162H
	DW	0163H
	DW	0164H
	DW	0165H
	DW	0166H
	DW	0167H
	DW	0168H
	DW	0169H
	DW	016aH
	DW	016bH
	DW	016cH
	DW	016dH
	DW	016eH
	DW	016fH
	DW	0170H
	DW	0171H
	DW	0172H
	DW	0173H
	DW	0174H
	DW	0175H
	DW	0176H
	DW	0177H
	DW	0178H
	DW	0179H
	DW	017aH
CONST	ENDS
_DATA	SEGMENT
$SG13312 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13313 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG15370 DB	'd:\mozilla\modules\freetype2\src\cff\cf2stack.c', 00H
$SG15377 DB	'd:\mozilla\modules\freetype2\src\cff\cf2stack.c', 00H
$SG15382 DB	'd:\mozilla\modules\freetype2\src\cff\cf2stack.c', 00H
$SG15384 DB	'd:\mozilla\modules\freetype2\src\cff\cf2stack.c', 00H
$SG14364 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG13340 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG15389 DB	'd:\mozilla\modules\freetype2\src\cff\cf2stack.c', 00H
$SG14365 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13341 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11296 DB	'pshinter', 00H
	ORG $+3
$SG13346 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13347 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10275 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG10281 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG9265	DB	'sfnt', 00H
	ORG $+3
$SG15410 DB	'd:\mozilla\modules\freetype2\src\cff\cf2stack.c', 00H
$SG15411 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13363 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13364 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9268	DB	'tt-cmaps', 00H
	ORG $+3
$SG15413 DB	'd:\mozilla\modules\freetype2\src\cff\cf2stack.c', 00H
$SG13369 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13370 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14396 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG14397 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9288	DB	'd:\mozilla\modules\freetype2\src\cff\cffdrivr.c', 00H
$SG13391 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13392 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13397 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13398 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9303	DB	'cff_get_ros: too large supplement %d is truncated', 0aH, 00H
	ORG $+1
$SG11376 DB	'sfnt', 00H
	ORG $+3
$SG11378 DB	'cff_face_init: cannot access `sfnt'' module', 0aH, 00H
$SG11379 DB	'd:\mozilla\modules\freetype2\src\cff\cffobjs.c', 00H
	ORG $+1
$SG9332	DB	'd:\mozilla\modules\freetype2\src\cff\cffdrivr.c', 00H
$SG13430 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13431 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9335	DB	'd:\mozilla\modules\freetype2\src\cff\cffdrivr.c', 00H
$SG11388 DB	'postscript-cmaps', 00H
	ORG $+3
$SG11390 DB	'pshinter', 00H
	ORG $+3
$SG13443 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG12419 DB	'd:\mozilla\modules\freetype2\src\cff\cffcmap.c', 00H
	ORG $+1
$SG11395 DB	'CFF driver', 0aH, 00H
$SG13444 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13449 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG9353	DB	'darkening-parameters', 00H
	ORG $+3
$SG13450 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11409 DB	'  not an OpenType/CFF font', 0aH, 00H
$SG14482 DB	'd:\mozilla\modules\freetype2\src\cff\cf2intrp.c', 00H
$SG11410 DB	'd:\mozilla\modules\freetype2\src\cff\cffobjs.c', 00H
	ORG $+1
$SG9366	DB	'd:\mozilla\modules\freetype2\src\cff\cffdrivr.c', 00H
$SG9369	DB	'hinting-engine', 00H
	ORG $+1
$SG13466 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13467 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9376	DB	'no-stem-darkening', 00H
	ORG $+2
$SG14497 DB	'd:\mozilla\modules\freetype2\src\cff\cf2intrp.c', 00H
$SG14498 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13475 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG14503 DB	' (maskbytes:', 00H
	ORG $+3
$SG9383	DB	'cff_property_set: missing property `%s''', 0aH, 00H
	ORG $+3
$SG9384	DB	'd:\mozilla\modules\freetype2\src\cff\cffdrivr.c', 00H
$SG10409 DB	'cff_index_get_pointers: invalid first offset value %d se'
	DB	't to zero', 0aH, 00H
	ORG $+1
$SG14512 DB	' 0x%02X', 00H
$SG14517 DB	')', 0aH, 00H
	ORG $+1
$SG11440 DB	'cff_face_init: cannot open CFF & CEF fonts', 0aH, '     '
	DB	'          without the `PSNames'' module', 0aH, 00H
$SG11441 DB	'd:\mozilla\modules\freetype2\src\cff\cffobjs.c', 00H
	ORG $+1
$SG13491 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13492 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9397	DB	'darkening-parameters', 00H
	ORG $+3
$SG11448 DB	'SIDs', 0aH, 00H
	ORG $+2
$SG9403	DB	'hinting-engine', 00H
	ORG $+1
$SG11457 DB	'  %5d %s', 0aH, 00H
	ORG $+2
$SG9409	DB	'no-stem-darkening', 00H
	ORG $+2
$SG14531 DB	'd:\mozilla\modules\freetype2\src\cff\cf2intrp.c', 00H
$SG13507 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG14532 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13508 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12487 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG12488 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14537 DB	'd:\mozilla\modules\freetype2\src\cff\cf2intrp.c', 00H
$SG9417	DB	'cff_property_get: missing property `%s''', 0aH, 00H
	ORG $+3
$SG14538 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9418	DB	'd:\mozilla\modules\freetype2\src\cff\cffdrivr.c', 00H
$SG13517 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13518 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9425	DB	'xf86-driver-name', 00H
	ORG $+3
$SG9426	DB	'CFF', 00H
$SG12499 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG9427	DB	'postscript-info', 00H
$SG12500 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9428	DB	'postscript-font-name', 00H
	ORG $+3
$SG9429	DB	'glyph-dict', 00H
	ORG $+1
$SG9430	DB	'tt-cmaps', 00H
	ORG $+3
$SG9431	DB	'CID', 00H
$SG10456 DB	'cff_index_access_element: offset to next entry (%d) exce'
	DB	'eds the end of stream (%d)', 0aH, 00H
$SG9432	DB	'properties', 00H
	ORG $+1
$SG13529 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13530 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10467 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG12516 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG13541 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG12517 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13542 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9448	DB	'sfnt', 00H
	ORG $+3
$SG9453	DB	'cff', 00H
$SG12528 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG12529 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12534 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG13559 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG12535 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG13560 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11517 DB	'Regular', 00H
$SG12546 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG12547 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11525 DB	'Bold', 00H
	ORG $+3
$SG11526 DB	'Black', 00H
	ORG $+2
$SG11530 DB	'Bold', 00H
	ORG $+3
$SG13579 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG11531 DB	'Black', 00H
	ORG $+2
$SG13580 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12558 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG12559 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12568 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG12569 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13594 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG9498	DB	'!!!END OF DATA:!!!', 00H
	ORG $+1
$SG13595 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12578 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG12579 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13609 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13610 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12591 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG12592 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12594 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG10549 DB	'CFF_Load_FD_Select: empty FDSelect array', 0aH, 00H
	ORG $+2
$SG10550 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG13624 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13625 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10555 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG12606 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG12607 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13635 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13636 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12615 DB	'd:\mozilla\modules\freetype2\src\cff\cf2arrst.c', 00H
$SG12616 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13648 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13649 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13655 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13656 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13672 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13673 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13675 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13681 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13682 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG13692 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13693 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9597	DB	'!!!OVERFLOW:!!!', 00H
$SG14720 DB	'd:\mozilla\modules\freetype2\src\cff\cf2intrp.c', 00H
$SG9602	DB	'!!!UNDERFLOW:!!!', 00H
	ORG $+3
$SG9607	DB	'!!!END OF DATA:!!!', 00H
	ORG $+1
$SG13707 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13708 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14734 DB	'd:\mozilla\modules\freetype2\src\cff\cf2intrp.c', 00H
$SG13714 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13715 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14744 DB	' unknown op (%d)', 0aH, 00H
	ORG $+2
$SG13724 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13725 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14750 DB	' hstemhm', 0aH, 00H
	ORG $+2
$SG14751 DB	' hstem', 0aH, 00H
$SG9634	DB	'!!!OVERFLOW:!!!', 00H
$SG14757 DB	'cf2_interpT2CharString: invalid horizontal hint mask', 0aH
	DB	00H
	ORG $+2
$SG13736 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13737 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14764 DB	' vstemhm', 0aH, 00H
	ORG $+2
$SG14765 DB	' vstem', 0aH, 00H
$SG14771 DB	'cf2_interpT2CharString: invalid vertical hint mask', 0aH
	DB	00H
$SG13748 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13749 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9655	DB	'd:\mozilla\modules\freetype2\src\cff\cffparse.c', 00H
$SG9656	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14778 DB	' vmoveto', 0aH, 00H
	ORG $+2
$SG13758 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13759 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14788 DB	' rlineto', 0aH, 00H
	ORG $+2
$SG10701 DB	'cff_charset_load: invalid SID range trimmed nleft=%d -> '
	DB	'%d', 0aH, 00H
$SG14800 DB	' hlineto', 0aH, 00H
	ORG $+2
$SG14801 DB	' vlineto', 0aH, 00H
	ORG $+2
$SG10707 DB	'cff_charset_load: invalid table format', 0aH, 00H
$SG10708 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG9690	DB	'cff_parse_font_matrix: strange scaling value for xx elem'
	DB	'ent (%d),', 0aH, '                       using default matrix'
	DB	0aH, 00H
	ORG $+1
$SG10717 DB	'cff_charset_load: implicit charset larger than', 0aH, 'p'
	DB	'redefined charset (Adobe ISO-Latin)', 0aH, 00H
	ORG $+3
$SG10718 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG14815 DB	' rcurveline', 0aH, 00H
	ORG $+3
$SG14816 DB	' rrcurveto', 0aH, 00H
$SG14833 DB	' callgsubr', 00H
	ORG $+1
$SG10724 DB	'cff_charset_load: implicit charset larger than', 0aH, 'p'
	DB	'redefined charset (Adobe Expert)', 0aH, 00H
	ORG $+2
$SG10725 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG9702	DB	' [%f %f %f %f %f %f]', 0aH, 00H
	ORG $+2
$SG10732 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG14834 DB	' callsubr', 00H
	ORG $+2
$SG10731 DB	'cff_charset_load: implicit charset larger than', 0aH, 'p'
	DB	'redefined charset (Adobe Expert Subset)', 0aH, 00H
	ORG $+3
$SG10737 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG14836 DB	'd:\mozilla\modules\freetype2\src\cff\cf2intrp.c', 00H
$SG9717	DB	' [%d %d %d %d]', 0aH, 00H
$SG14847 DB	'(%d)', 0aH, 00H
	ORG $+2
$SG14849 DB	'd:\mozilla\modules\freetype2\src\cff\cf2intrp.c', 00H
$SG9731	DB	' %lu %lu', 0aH, 00H
	ORG $+2
$SG14855 DB	'(%d)', 0aH, 00H
	ORG $+2
$SG14857 DB	'd:\mozilla\modules\freetype2\src\cff\cf2intrp.c', 00H
$SG14863 DB	' return', 0aH, 00H
	ORG $+3
$SG14865 DB	'd:\mozilla\modules\freetype2\src\cff\cf2intrp.c', 00H
$SG10772 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG9748	DB	'cff_parse_cid_ros: real supplement is rounded', 0aH, 00H
	ORG $+1
$SG9754	DB	'cff_parse_cid_ros: negative supplement %d is found', 0aH
	DB	00H
$SG14879 DB	' dotsection', 0aH, 00H
	ORG $+3
$SG9759	DB	' %d %d %d', 0aH, 00H
	ORG $+1
$SG14885 DB	' and', 0aH, 00H
	ORG $+2
$SG14890 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG14896 DB	' or', 0aH, 00H
	ORG $+3
$SG14901 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG14907 DB	' not', 0aH, 00H
	ORG $+2
$SG14912 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG10817 DB	'cff_encoding_load: invalid table format', 0aH, 00H
	ORG $+3
$SG13890 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG10818 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG13891 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14918 DB	' abs', 0aH, 00H
	ORG $+2
$SG14923 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG14929 DB	' add', 0aH, 00H
	ORG $+2
$SG14934 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG14940 DB	' sub', 0aH, 00H
	ORG $+2
$SG13918 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG13919 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14945 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG13924 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG13925 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14951 DB	' div', 0aH, 00H
	ORG $+2
$SG10855 DB	'cff_encoding_load: invalid table format', 0aH, 00H
	ORG $+3
$SG10856 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG13930 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG13931 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14956 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG13936 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG13937 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG14962 DB	' neg', 0aH, 00H
	ORG $+2
$SG14967 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG12923 DB	'cf2_blues_init: ignoring negative zone height', 0aH, 00H
	ORG $+1
$SG14973 DB	' eq', 0aH, 00H
	ORG $+3
$SG14978 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG10883 DB	' top dictionary:', 0aH, 00H
	ORG $+2
$SG14984 DB	' drop', 0aH, 00H
	ORG $+1
$SG12940 DB	'cf2_blues_init: ignoring negative zone height', 0aH, 00H
	ORG $+1
$SG14989 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG10898 DB	' private dictionary:', 0aH, 00H
	ORG $+2
$SG14995 DB	' put', 0aH, 00H
	ORG $+2
$SG15000 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG13976 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG13977 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG15006 DB	' get', 0aH, 00H
	ORG $+2
$SG13982 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG13983 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG15011 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG15017 DB	' ifelse', 0aH, 00H
	ORG $+3
$SG13997 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG15022 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG13998 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG15028 DB	' random', 0aH, 00H
	ORG $+3
$SG14006 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG14007 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG15033 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG15039 DB	' mul', 0aH, 00H
	ORG $+2
$SG15044 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG14024 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG14025 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG15050 DB	' sqrt', 0aH, 00H
	ORG $+1
$SG15055 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG14033 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG14034 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG15061 DB	' dup', 0aH, 00H
	ORG $+2
$SG13013 DB	'd:\mozilla\modules\freetype2\src\cff\cf2blues.c', 00H
$SG13014 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10966 DB	'  not a CFF font header', 0aH, 00H
	ORG $+3
$SG10967 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG15066 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG10975 DB	'cff_font_load: invalid subfont index for pure CFF font ('
	DB	'%d)', 0aH, 00H
	ORG $+3
$SG15072 DB	' exch', 0aH, 00H
	ORG $+1
$SG10976 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG10986 DB	'parsing top-level', 0aH, 00H
	ORG $+1
$SG10979 DB	'cff_font_load: invalid CFF font with multiple subfonts', 0aH
	DB	'               in SFNT wrapper', 0aH, 00H
	ORG $+1
$SG10980 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG15077 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG15083 DB	' index', 0aH, 00H
$SG15088 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG14065 DB	'cf2_hintmap_insertHint: too many hintmaps', 0aH, 00H
	ORG $+1
$SG15094 DB	' roll', 0aH, 00H
	ORG $+1
$SG15099 DB	'cf2_interpT2CharString: operator not implemented yet', 0aH
	DB	00H
	ORG $+2
$SG11004 DB	'cff_font_load: FD array too large in CID font', 0aH, 00H
	ORG $+1
$SG15107 DB	' hflex', 0aH, 00H
$SG15115 DB	' flex', 0aH, 00H
	ORG $+1
$SG11019 DB	'parsing subfont %u', 0aH, 00H
$SG11024 DB	'cff_font_load: no charstrings offset', 0aH, 00H
	ORG $+2
$SG11025 DB	'd:\mozilla\modules\freetype2\src\cff\cffload.c', 00H
	ORG $+1
$SG15123 DB	' hflex1', 0aH, 00H
	ORG $+3
$SG15131 DB	' flex1', 0aH, 00H
$SG10015 DB	'Version', 00H
$SG10016 DB	'Notice', 00H
	ORG $+1
$SG15137 DB	' unknown op (12, %d)', 0aH, 00H
	ORG $+2
$SG10017 DB	'Copyright', 00H
	ORG $+2
$SG10018 DB	'FullName', 00H
	ORG $+3
$SG10019 DB	'FamilyName', 00H
	ORG $+1
$SG10020 DB	'Weight', 00H
	ORG $+1
$SG10021 DB	'isFixedPitch', 00H
	ORG $+3
$SG10022 DB	'ItalicAngle', 00H
$SG15143 DB	' endchar', 0aH, 00H
	ORG $+2
$SG10023 DB	'UnderlinePosition', 00H
	ORG $+2
$SG10024 DB	'UnderlineThickness', 00H
	ORG $+1
$SG10025 DB	'PaintType', 00H
	ORG $+2
$SG10026 DB	'CharstringType', 00H
	ORG $+1
$SG10027 DB	'FontMatrix', 00H
	ORG $+1
$SG12076 DB	'cff_decoder_prepare: invalid CID subfont index', 0aH, 00H
$SG10028 DB	'UniqueID', 00H
	ORG $+3
$SG12077 DB	'd:\mozilla\modules\freetype2\src\cff\cffgload.c', 00H
$SG10029 DB	'FontBBox', 00H
	ORG $+3
$SG10030 DB	'StrokeWidth', 00H
$SG10031 DB	'charset', 00H
$SG10032 DB	'Encoding', 00H
	ORG $+3
$SG10033 DB	'CharStrings', 00H
$SG10034 DB	'Private', 00H
$SG15155 DB	'd:\mozilla\modules\freetype2\src\cff\cf2intrp.c', 00H
$SG12083 DB	'  in subfont %d:', 0aH, 00H
	ORG $+2
$SG10035 DB	'SyntheticBase', 00H
	ORG $+2
$SG10036 DB	'PostScript', 00H
	ORG $+1
$SG10037 DB	'ROS', 00H
$SG10038 DB	'CIDFontVersion', 00H
	ORG $+1
$SG10039 DB	'CIDFontRevision', 00H
$SG10040 DB	'CIDFontType', 00H
$SG10041 DB	'CIDCount', 00H
	ORG $+3
$SG10042 DB	'UIDBase', 00H
$SG15163 DB	' cntrmask', 00H
	ORG $+2
$SG10043 DB	'FDArray', 00H
$SG15164 DB	' hintmask', 00H
	ORG $+2
$SG10044 DB	'FDSelect', 00H
	ORG $+3
$SG10045 DB	'FontName', 00H
	ORG $+3
$SG10046 DB	'BlueValues', 00H
	ORG $+1
$SG10047 DB	'OtherBlues', 00H
	ORG $+1
$SG10048 DB	'FamilyBlues', 00H
$SG10049 DB	'FamilyOtherBlues', 00H
	ORG $+3
$SG15170 DB	'cf2_interpT2CharString: invalid hint mask', 0aH, 00H
	ORG $+1
$SG10050 DB	'BlueScale', 00H
	ORG $+2
$SG10051 DB	'BlueShift', 00H
	ORG $+2
$SG10052 DB	'BlueFuzz', 00H
	ORG $+3
$SG10053 DB	'StdHW', 00H
	ORG $+2
$SG10054 DB	'StdVW', 00H
	ORG $+2
$SG10055 DB	'StemSnapH', 00H
	ORG $+2
$SG10056 DB	'StemSnapV', 00H
	ORG $+2
$SG10057 DB	'ForceBold', 00H
	ORG $+2
$SG10058 DB	'ForceBoldThreshold', 00H
	ORG $+1
$SG10059 DB	'lenIV', 00H
	ORG $+2
$SG10060 DB	'LanguageGroup', 00H
	ORG $+2
$SG15181 DB	' rmoveto', 0aH, 00H
	ORG $+2
$SG10061 DB	'ExpansionFactor', 00H
$SG10062 DB	'initialRandomSeed', 00H
	ORG $+2
$SG10063 DB	'Subrs', 00H
	ORG $+2
$SG10064 DB	'defaultWidthX', 00H
	ORG $+2
$SG10065 DB	'nominalWidthX', 00H
	ORG $+2
$SG15189 DB	' hmoveto', 0aH, 00H
	ORG $+2
$SG15199 DB	' rlinecurve', 0aH, 00H
	ORG $+3
$SG15219 DB	' vvcurveto', 0aH, 00H
$SG11139 DB	'pshinter', 00H
	ORG $+3
$SG10117 DB	'  %s', 00H
	ORG $+3
$SG15238 DB	' hhcurveto', 0aH, 00H
$SG15258 DB	' hvcurveto', 0aH, 00H
$SG15259 DB	' vhcurveto', 0aH, 00H
$SG14238 DB	'd:\mozilla\modules\freetype2\src\cff\cf2hints.c', 00H
$SG14239 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9119	DB	'd:\mozilla\modules\freetype2\src\cff\cffdrivr.c', 00H
$SG9124	DB	'cff_glyph_load: glyph index %d', 0aH, 00H
$SG10152 DB	'true', 00H
	ORG $+3
$SG10153 DB	'false', 00H
	ORG $+2
$SG10154 DB	' %s', 0aH, 00H
	ORG $+3
$SG9130	DB	'd:\mozilla\modules\freetype2\src\cff\cffdrivr.c', 00H
$SG10160 DB	' %ld (SID)', 0aH, 00H
$SG15282 DB	' %d', 00H
$SG10166 DB	' %ld', 0aH, 00H
	ORG $+2
$SG15290 DB	' %d', 00H
$SG10173 DB	' %f', 0aH, 00H
	ORG $+3
$SG12224 DB	'd:\mozilla\modules\freetype2\src\cff\cffgload.c', 00H
$SG15298 DB	' %d', 00H
$SG12227 DB	'd:\mozilla\modules\freetype2\src\cff\cffgload.c', 00H
$SG10180 DB	' %f', 0aH, 00H
	ORG $+3
$SG15306 DB	' %d', 00H
$SG10191 DB	' [', 00H
	ORG $+1
$SG9167	DB	'cff_get_glyph_name: cannot get glyph name from CFF & CEF'
	DB	' fonts', 0aH, '                    without the `PSNames'' mod'
	DB	'ule', 0aH, 00H
	ORG $+3
$SG9168	DB	'd:\mozilla\modules\freetype2\src\cff\cffdrivr.c', 00H
$SG15318 DB	' %.2f', 00H
	ORG $+2
$SG13273 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13274 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG15323 DB	'cf2_interpT2CharString:  charstring ends without ENDCHAR'
	DB	0aH, 00H
	ORG $+2
$SG13277 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG15328 DB	0aH, 00H
	ORG $+2
$SG13283 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG13284 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG15335 DB	'd:\mozilla\modules\freetype2\src\cff\cf2read.c', 00H
	ORG $+1
$SG10215 DB	' %ld', 00H
	ORG $+3
$SG12265 DB	'd:\mozilla\modules\freetype2\src\cff\cffgload.c', 00H
$SG13290 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG9194	DB	'postscript-cmaps', 00H
	ORG $+3
$SG13291 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10220 DB	']', 0aH, 00H
	ORG $+1
$SG13293 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
	ORG $+3
$SG10224 DB	'd:\mozilla\modules\freetype2\src\cff\cffparse.c', 00H
$SG10225 DB	'd:\mozilla\modules\freetype2\src\cff\cffparse.c', 00H
$SG10226 DB	'd:\mozilla\modules\freetype2\src\cff\cffparse.c', 00H
$SG13300 DB	'd:\mozilla\modules\freetype2\src\cff\cf2ft.c', 00H
_DATA	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	__real@40f0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	_FT_MulDiv:PROC
EXTRN	_FT_DivFix:PROC
EXTRN	_FT_RoundFix:PROC
EXTRN	_FT_Vector_Transform:PROC
EXTRN	_FT_Get_Module:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_qalloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_ft_mem_strdup:PROC
EXTRN	_ft_mem_strcpyn:PROC
EXTRN	_FT_GlyphLoader_Rewind:PROC
EXTRN	_FT_GlyphLoader_CheckPoints:PROC
EXTRN	_FT_GlyphLoader_Add:PROC
EXTRN	_ft_service_list_lookup:PROC
EXTRN	_FT_CMap_New:PROC
EXTRN	_FT_Get_Module_Interface:PROC
EXTRN	_ft_module_get_service:PROC
EXTRN	_FT_Select_Metrics:PROC
EXTRN	_FT_Request_Metrics:PROC
EXTRN	_ft_synthesize_vertical_metrics:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Panic:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Skip:PROC
EXTRN	_FT_Stream_Pos:PROC
EXTRN	_FT_Stream_Read:PROC
EXTRN	_FT_Stream_EnterFrame:PROC
EXTRN	_FT_Stream_ExitFrame:PROC
EXTRN	_FT_Stream_ExtractFrame:PROC
EXTRN	_FT_Stream_ReleaseFrame:PROC
EXTRN	_FT_Stream_GetUShort:PROC
EXTRN	_FT_Stream_ReadChar:PROC
EXTRN	_FT_Stream_ReadUShort:PROC
EXTRN	_FT_Stream_ReadFields:PROC
EXTRN	_FT_Matrix_Multiply_Scaled:PROC
EXTRN	_FT_Vector_Transform_Scaled:PROC
EXTRN	_FT_MSB:PROC
EXTRN	_FT_Outline_Get_CBox:PROC
EXTRN	_FT_Outline_Translate:PROC
EXTRN	_FT_Outline_Transform:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@40f0000000000000
CONST	SEGMENT
__real@40f0000000000000 DQ 040f0000000000000r	; 65536
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv193 = -124						; size = 4
tv163 = -117						; size = 1
tv161 = -116						; size = 4
tv149 = -112						; size = 4
tv93 = -108						; size = 4
tv76 = -104						; size = 4
tv72 = -100						; size = 4
_lastVal$1 = -96					; size = 4
_lastIsX$2 = -89					; size = 1
_j$ = -88						; size = 4
_i$ = -84						; size = 4
_top$ = -80						; size = 4
_isHFlex$ = -73						; size = 1
_index$ = -72						; size = 4
_vals$ = -64						; size = 56
__$ArrayPad$ = -4					; size = 4
_opStack$ = 8						; size = 4
_curX$ = 12						; size = 4
_curY$ = 16						; size = 4
_glyphPath$ = 20					; size = 4
_readFromStack$ = 24					; size = 4
_doConditionalLastRead$ = 28				; size = 1
_cf2_doFlex PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2intrp.c
; Line 335
	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 31					; 0000001fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 342
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _curX$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _vals$[ebp+ecx], eax
; Line 343
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _curY$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _vals$[ebp+ecx], eax
; Line 344
	mov	DWORD PTR _index$[ebp], 0
; Line 345
	mov	ecx, 1
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _readFromStack$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN19@cf2_doFlex
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN20@cf2_doFlex
$LN19@cf2_doFlex:
	mov	DWORD PTR tv72[ebp], 0
$LN20@cf2_doFlex:
	mov	dl, BYTE PTR tv72[ebp]
	mov	BYTE PTR _isHFlex$[ebp], dl
; Line 346
	movzx	eax, BYTE PTR _isHFlex$[ebp]
	test	eax, eax
	je	SHORT $LN21@cf2_doFlex
	mov	DWORD PTR tv76[ebp], 9
	jmp	SHORT $LN22@cf2_doFlex
$LN21@cf2_doFlex:
	mov	DWORD PTR tv76[ebp], 10			; 0000000aH
$LN22@cf2_doFlex:
	mov	ecx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _top$[ebp], ecx
; Line 348
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@cf2_doFlex
$LN15@cf2_doFlex:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN16@cf2_doFlex:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _top$[ebp]
	jge	SHORT $LN14@cf2_doFlex
; Line 350
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _vals$[ebp+edx*4]
	mov	DWORD PTR _vals$[ebp+ecx*4+8], eax
; Line 351
	mov	ecx, DWORD PTR _readFromStack$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN13@cf2_doFlex
; Line 352
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx
	mov	edx, DWORD PTR tv93[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _vals$[ebp+ecx*4+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _vals$[ebp+edx*4+8], eax
$LN13@cf2_doFlex:
; Line 353
	jmp	SHORT $LN15@cf2_doFlex
$LN14@cf2_doFlex:
; Line 355
	movzx	eax, BYTE PTR _isHFlex$[ebp]
	test	eax, eax
	je	SHORT $LN12@cf2_doFlex
; Line 356
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _curY$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vals$[ebp+edx], ecx
$LN12@cf2_doFlex:
; Line 358
	movzx	edx, BYTE PTR _doConditionalLastRead$[ebp]
	test	edx, edx
	je	$LN11@cf2_doFlex
; Line 361
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _curX$[ebp]
	mov	eax, DWORD PTR _vals$[ebp+ecx]
	sub	eax, DWORD PTR [edx]
	jns	SHORT $LN23@cf2_doFlex
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _curX$[ebp]
	mov	ecx, DWORD PTR _vals$[ebp+edx]
	sub	ecx, DWORD PTR [eax]
	neg	ecx
	mov	DWORD PTR tv149[ebp], ecx
	jmp	SHORT $LN24@cf2_doFlex
$LN23@cf2_doFlex:
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _curX$[ebp]
	mov	edx, DWORD PTR _vals$[ebp+eax]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv149[ebp], edx
$LN24@cf2_doFlex:
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _curY$[ebp]
	mov	eax, DWORD PTR _vals$[ebp+ecx]
	sub	eax, DWORD PTR [edx]
	jns	SHORT $LN25@cf2_doFlex
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _curY$[ebp]
	mov	ecx, DWORD PTR _vals$[ebp+edx]
	sub	ecx, DWORD PTR [eax]
	neg	ecx
	mov	DWORD PTR tv161[ebp], ecx
	jmp	SHORT $LN26@cf2_doFlex
$LN25@cf2_doFlex:
	mov	edx, 4
	imul	eax, edx, 11
	mov	ecx, DWORD PTR _curY$[ebp]
	mov	edx, DWORD PTR _vals$[ebp+eax]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv161[ebp], edx
$LN26@cf2_doFlex:
	mov	eax, DWORD PTR tv149[ebp]
	cmp	eax, DWORD PTR tv161[ebp]
	jle	SHORT $LN27@cf2_doFlex
	mov	BYTE PTR tv163[ebp], 1
	jmp	SHORT $LN28@cf2_doFlex
$LN27@cf2_doFlex:
	mov	BYTE PTR tv163[ebp], 0
$LN28@cf2_doFlex:
	mov	cl, BYTE PTR tv163[ebp]
	mov	BYTE PTR _lastIsX$2[ebp], cl
; Line 362
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	mov	DWORD PTR _lastVal$1[ebp], eax
; Line 365
	movzx	ecx, BYTE PTR _lastIsX$2[ebp]
	test	ecx, ecx
	je	SHORT $LN10@cf2_doFlex
; Line 367
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _vals$[ebp+eax]
	add	ecx, DWORD PTR _lastVal$1[ebp]
	mov	edx, 4
	imul	eax, edx, 12
	mov	DWORD PTR _vals$[ebp+eax], ecx
; Line 368
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _curY$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vals$[ebp+edx], ecx
; Line 370
	jmp	SHORT $LN9@cf2_doFlex
$LN10@cf2_doFlex:
; Line 372
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _curX$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _vals$[ebp+eax], edx
; Line 373
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _vals$[ebp+ecx]
	add	edx, DWORD PTR _lastVal$1[ebp]
	mov	eax, 4
	imul	ecx, eax, 13
	mov	DWORD PTR _vals$[ebp+ecx], edx
$LN9@cf2_doFlex:
; Line 376
	jmp	$LN8@cf2_doFlex
$LN11@cf2_doFlex:
; Line 378
	mov	edx, 1
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _readFromStack$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN7@cf2_doFlex
; Line 379
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv193[ebp], eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx
	mov	edx, DWORD PTR tv193[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 10
	add	eax, DWORD PTR _vals$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	DWORD PTR _vals$[ebp+edx], eax
; Line 380
	jmp	SHORT $LN6@cf2_doFlex
$LN7@cf2_doFlex:
; Line 381
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _curX$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _vals$[ebp+ecx], eax
$LN6@cf2_doFlex:
; Line 383
	mov	ecx, 1
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _readFromStack$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	je	SHORT $LN5@cf2_doFlex
; Line 384
	mov	edx, 4
	imul	esi, edx, 11
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _vals$[ebp+esi]
	mov	edx, 4
	imul	ecx, edx, 13
	mov	DWORD PTR _vals$[ebp+ecx], eax
; Line 385
	jmp	SHORT $LN8@cf2_doFlex
$LN5@cf2_doFlex:
; Line 386
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _curY$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _vals$[ebp+eax], edx
$LN8@cf2_doFlex:
; Line 389
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@cf2_doFlex
$LN2@cf2_doFlex:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@cf2_doFlex:
	cmp	DWORD PTR _j$[ebp], 2
	jge	SHORT $LN1@cf2_doFlex
; Line 395
	imul	ecx, DWORD PTR _j$[ebp], 6
	mov	edx, DWORD PTR _vals$[ebp+ecx*4+28]
	push	edx
	imul	eax, DWORD PTR _j$[ebp], 6
	mov	ecx, DWORD PTR _vals$[ebp+eax*4+24]
	push	ecx
	imul	edx, DWORD PTR _j$[ebp], 6
	mov	eax, DWORD PTR _vals$[ebp+edx*4+20]
	push	eax
	imul	ecx, DWORD PTR _j$[ebp], 6
	mov	edx, DWORD PTR _vals$[ebp+ecx*4+16]
	push	edx
	imul	eax, DWORD PTR _j$[ebp], 6
	mov	ecx, DWORD PTR _vals$[ebp+eax*4+12]
	push	ecx
	imul	edx, DWORD PTR _j$[ebp], 6
	mov	eax, DWORD PTR _vals$[ebp+edx*4+8]
	push	eax
	mov	ecx, DWORD PTR _glyphPath$[ebp]
	push	ecx
	call	_cf2_glyphpath_curveTo
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN2@cf2_doFlex
$LN1@cf2_doFlex:
; Line 397
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_clear
	add	esp, 4
; Line 399
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _curX$[ebp]
	mov	eax, DWORD PTR _vals$[ebp+ecx]
	mov	DWORD PTR [edx], eax
; Line 400
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _curY$[ebp]
	mov	ecx, DWORD PTR _vals$[ebp+edx]
	mov	DWORD PTR [eax], ecx
; Line 401
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@cf2_doFlex
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN31@cf2_doFlex:
	DD	1
	DD	$LN30@cf2_doFlex
$LN30@cf2_doFlex:
	DD	-64					; ffffffc0H
	DD	56					; 00000038H
	DD	$LN29@cf2_doFlex
$LN29@cf2_doFlex:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
_cf2_doFlex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv85 = -52						; size = 4
_stemhint$1 = -44					; size = 20
_position$ = -20					; size = 4
_hasWidthArg$ = -13					; size = 1
_count$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_font$ = 8						; size = 4
_opStack$ = 12						; size = 4
_stemHintArray$ = 16					; size = 4
_width$ = 20						; size = 4
_haveWidth$ = 24					; size = 4
_hintOffset$ = 28					; size = 4
_cf2_doStems PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2intrp.c
; Line 287
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 289
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_count
	add	esp, 4
	mov	DWORD PTR _count$[ebp], eax
; Line 290
	mov	ecx, DWORD PTR _count$[ebp]
	and	ecx, 1
	mov	BYTE PTR _hasWidthArg$[ebp], cl
; Line 293
	mov	edx, DWORD PTR _hintOffset$[ebp]
	mov	DWORD PTR _position$[ebp], edx
; Line 295
	movzx	eax, BYTE PTR _hasWidthArg$[ebp]
	test	eax, eax
	je	SHORT $LN5@cf2_doStem
	mov	ecx, DWORD PTR _haveWidth$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN5@cf2_doStem
; Line 297
	push	0
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	mov	esi, eax
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	push	edx
	call	_cf2_getNominalWidthX
	add	esp, 4
	add	esi, eax
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax], esi
$LN5@cf2_doStem:
; Line 299
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	movzx	eax, BYTE PTR [edx+753]
	test	eax, eax
	je	SHORT $LN4@cf2_doStem
; Line 300
	jmp	$exit$13
$LN4@cf2_doStem:
; Line 302
	movzx	ecx, BYTE PTR _hasWidthArg$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@cf2_doStem
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN9@cf2_doStem
$LN8@cf2_doStem:
	mov	DWORD PTR tv85[ebp], 0
$LN9@cf2_doStem:
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN3@cf2_doStem
$LN2@cf2_doStem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	mov	DWORD PTR _i$[ebp], eax
$LN3@cf2_doStem:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	SHORT $LN1@cf2_doStem
; Line 309
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _position$[ebp]
	mov	DWORD PTR _position$[ebp], eax
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR _stemhint$1[ebp+4], ecx
; Line 311
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _position$[ebp]
	mov	DWORD PTR _position$[ebp], eax
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR _stemhint$1[ebp+8], ecx
; Line 313
	mov	BYTE PTR _stemhint$1[ebp], 0
; Line 315
	mov	DWORD PTR _stemhint$1[ebp+12], 0
	mov	edx, DWORD PTR _stemhint$1[ebp+12]
	mov	DWORD PTR _stemhint$1[ebp+16], edx
; Line 317
	lea	eax, DWORD PTR _stemhint$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _stemHintArray$[ebp]
	push	ecx
	call	_cf2_arrstack_push
	add	esp, 8
; Line 318
	jmp	SHORT $LN2@cf2_doStem
$LN1@cf2_doStem:
; Line 320
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_clear
	add	esp, 4
$exit$13:
; Line 324
	mov	eax, DWORD PTR _haveWidth$[ebp]
	mov	BYTE PTR [eax], 1
; Line 325
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@cf2_doStem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@cf2_doStem:
	DD	1
	DD	$LN11@cf2_doStem
$LN11@cf2_doStem:
	DD	-44					; ffffffd4H
	DD	20					; 00000014H
	DD	$LN10@cf2_doStem
$LN10@cf2_doStem:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_cf2_doStems ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_hintmask$ = 8						; size = 4
_charstring$ = 12					; size = 4
_bitCount$ = 16						; size = 4
_cf2_hintmask_read PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2intrp.c
; Line 135
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 147
	mov	eax, DWORD PTR _bitCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hintmask$[ebp]
	push	ecx
	call	_cf2_hintmask_setCounts
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@cf2_hintma
; Line 148
	jmp	$LN21@cf2_hintma
$LN19@cf2_hintma:
; Line 150
	mov	edx, DWORD PTR _hintmask$[ebp]
	cmp	DWORD PTR [edx+12], 0
	ja	SHORT $LN18@cf2_hintma
	push	OFFSET $SG14497
	push	150					; 00000096H
	push	OFFSET $SG14498
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN18@cf2_hintma:
	xor	eax, eax
	jne	SHORT $LN19@cf2_hintma
$LN15@cf2_hintma:
; Line 152
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN14@cf2_hintma
	push	OFFSET $SG14503
	call	_FT_Message
	add	esp, 4
$LN14@cf2_hintma:
	xor	eax, eax
	jne	SHORT $LN15@cf2_hintma
; Line 155
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@cf2_hintma
$LN10@cf2_hintma:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@cf2_hintma:
	mov	edx, DWORD PTR _hintmask$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jae	SHORT $LN4@cf2_hintma
; Line 157
	mov	ecx, DWORD PTR _charstring$[ebp]
	push	ecx
	call	_cf2_buf_readByte
	add	esp, 4
	mov	edx, DWORD PTR _hintmask$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+16], al
$LN8@cf2_hintma:
; Line 158
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN7@cf2_hintma
	mov	edx, DWORD PTR _hintmask$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	push	eax
	push	OFFSET $SG14512
	call	_FT_Message
	add	esp, 8
$LN7@cf2_hintma:
	xor	ecx, ecx
	jne	SHORT $LN8@cf2_hintma
; Line 159
	jmp	SHORT $LN10@cf2_hintma
$LN4@cf2_hintma:
; Line 161
	mov	edx, 4
	imul	eax, edx, 53
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN3@cf2_hintma
	push	OFFSET $SG14517
	call	_FT_Message
	add	esp, 4
$LN3@cf2_hintma:
	xor	ecx, ecx
	jne	SHORT $LN4@cf2_hintma
$LN21@cf2_hintma:
; Line 170
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hintmask_read ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hintmask$ = 8						; size = 4
_bitCount$ = 12						; size = 4
_cf2_hintmask_setCounts PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2intrp.c
; Line 111
	push	ebp
	mov	ebp, esp
; Line 112
	cmp	DWORD PTR _bitCount$[ebp], 96		; 00000060H
	jbe	SHORT $LN1@cf2_hintma
; Line 115
	push	OFFSET $SG14482
	push	115					; 00000073H
	push	18					; 00000012H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 18					; 00000012H
	push	eax
	mov	eax, DWORD PTR _hintmask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_cf2_setError
	add	esp, 8
; Line 116
	xor	eax, eax
	jmp	SHORT $LN2@cf2_hintma
$LN1@cf2_hintma:
; Line 119
	mov	edx, DWORD PTR _hintmask$[ebp]
	mov	eax, DWORD PTR _bitCount$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 120
	mov	ecx, DWORD PTR _hintmask$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 7
	shr	edx, 3
	mov	eax, DWORD PTR _hintmask$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 122
	mov	ecx, DWORD PTR _hintmask$[ebp]
	mov	BYTE PTR [ecx+4], 1
; Line 123
	mov	edx, DWORD PTR _hintmask$[ebp]
	mov	BYTE PTR [edx+5], 1
; Line 125
	mov	eax, DWORD PTR _bitCount$[ebp]
$LN2@cf2_hintma:
; Line 126
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_hintmask_setCounts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_cf2_stack_clear PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2stack.c
; Line 200
	push	ebp
	mov	ebp, esp
; Line 201
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [ecx+392], eax
; Line 202
	pop	ebp
	ret	0
_cf2_stack_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv143 = -8						; size = 4
tv86 = -4						; size = 4
_stack$ = 8						; size = 4
_idx$ = 12						; size = 4
_cf2_stack_getReal PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2stack.c
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN10@cf2_stack_:
; Line 178
	mov	eax, DWORD PTR _stack$[ebp]
	push	eax
	call	_cf2_stack_count
	add	esp, 4
	cmp	eax, 48					; 00000030H
	jbe	SHORT $LN9@cf2_stack_
	push	OFFSET $SG15410
	push	178					; 000000b2H
	push	OFFSET $SG15411
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@cf2_stack_:
	xor	ecx, ecx
	jne	SHORT $LN10@cf2_stack_
; Line 180
	mov	edx, DWORD PTR _stack$[ebp]
	push	edx
	call	_cf2_stack_count
	add	esp, 4
	cmp	DWORD PTR _idx$[ebp], eax
	jb	SHORT $LN6@cf2_stack_
; Line 182
	push	OFFSET $SG15413
	push	182					; 000000b6H
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	push	eax
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_cf2_setError
	add	esp, 8
; Line 183
	xor	eax, eax
	jmp	SHORT $LN11@cf2_stack_
$LN6@cf2_stack_:
; Line 186
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+12]
	mov	DWORD PTR tv86[ebp], ecx
	cmp	DWORD PTR tv86[ebp], 1
	je	SHORT $LN2@cf2_stack_
	cmp	DWORD PTR tv86[ebp], 2
	je	SHORT $LN3@cf2_stack_
	jmp	SHORT $LN1@cf2_stack_
$LN3@cf2_stack_:
; Line 189
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [eax+edx*8+8]
	shl	eax, 16					; 00000010H
	jmp	SHORT $LN11@cf2_stack_
$LN2@cf2_stack_:
; Line 191
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _stack$[ebp]
	cmp	DWORD PTR [edx+ecx*8+8], 0
	jge	SHORT $LN13@cf2_stack_
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+8]
	neg	edx
	add	edx, 8192				; 00002000H
	sar	edx, 14					; 0000000eH
	neg	edx
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN14@cf2_stack_
$LN13@cf2_stack_:
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+8]
	add	edx, 8192				; 00002000H
	sar	edx, 14					; 0000000eH
	mov	DWORD PTR tv143[ebp], edx
$LN14@cf2_stack_:
	mov	eax, DWORD PTR tv143[ebp]
	jmp	SHORT $LN11@cf2_stack_
$LN1@cf2_stack_:
; Line 193
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+8]
$LN11@cf2_stack_:
; Line 195
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_stack_getReal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv131 = -8						; size = 4
tv82 = -4						; size = 4
_stack$ = 8						; size = 4
_cf2_stack_popFixed PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2stack.c
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 152
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR _stack$[ebp]
	cmp	DWORD PTR [ecx+392], eax
	jne	SHORT $LN6@cf2_stack_
; Line 154
	push	OFFSET $SG15389
	push	154					; 0000009aH
	push	161					; 000000a1H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 161				; 000000a1H
	push	eax
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_cf2_setError
	add	esp, 8
; Line 155
	xor	eax, eax
	jmp	$LN7@cf2_stack_
$LN6@cf2_stack_:
; Line 158
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	sub	edx, 8
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax+392], edx
; Line 160
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 1
	je	SHORT $LN2@cf2_stack_
	cmp	DWORD PTR tv82[ebp], 2
	je	SHORT $LN3@cf2_stack_
	jmp	SHORT $LN1@cf2_stack_
$LN3@cf2_stack_:
; Line 163
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	mov	eax, DWORD PTR [edx]
	shl	eax, 16					; 00000010H
	jmp	SHORT $LN7@cf2_stack_
$LN2@cf2_stack_:
; Line 165
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	cmp	DWORD PTR [ecx], 0
	jge	SHORT $LN9@cf2_stack_
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx+392]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	add	ecx, 8192				; 00002000H
	sar	ecx, 14					; 0000000eH
	neg	ecx
	mov	DWORD PTR tv131[ebp], ecx
	jmp	SHORT $LN10@cf2_stack_
$LN9@cf2_stack_:
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx+392]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8192				; 00002000H
	sar	ecx, 14					; 0000000eH
	mov	DWORD PTR tv131[ebp], ecx
$LN10@cf2_stack_:
	mov	eax, DWORD PTR tv131[ebp]
	jmp	SHORT $LN7@cf2_stack_
$LN1@cf2_stack_:
; Line 167
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx+392]
	mov	eax, DWORD PTR [eax]
$LN7@cf2_stack_:
; Line 169
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_stack_popFixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_cf2_stack_popInt PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2stack.c
; Line 129
	push	ebp
	mov	ebp, esp
; Line 130
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR _stack$[ebp]
	cmp	DWORD PTR [ecx+392], eax
	jne	SHORT $LN2@cf2_stack_
; Line 132
	push	OFFSET $SG15382
	push	132					; 00000084H
	push	161					; 000000a1H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 161				; 000000a1H
	push	eax
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_cf2_setError
	add	esp, 8
; Line 133
	xor	eax, eax
	jmp	SHORT $LN3@cf2_stack_
$LN2@cf2_stack_:
; Line 135
	mov	ecx, 8
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	cmp	DWORD PTR [ecx+edx+4], 2
	je	SHORT $LN1@cf2_stack_
; Line 137
	push	OFFSET $SG15384
	push	137					; 00000089H
	push	160					; 000000a0H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 160				; 000000a0H
	push	eax
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_cf2_setError
	add	esp, 8
; Line 138
	xor	eax, eax
	jmp	SHORT $LN3@cf2_stack_
$LN1@cf2_stack_:
; Line 141
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	sub	edx, 8
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax+392], edx
; Line 143
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	mov	eax, DWORD PTR [edx]
$LN3@cf2_stack_:
; Line 144
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_stack_popInt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_val$ = 12						; size = 4
_cf2_stack_pushFixed PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2stack.c
; Line 113
	push	ebp
	mov	ebp, esp
; Line 114
	mov	eax, 8
	imul	ecx, eax, 48
	mov	edx, DWORD PTR _stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR _stack$[ebp]
	cmp	DWORD PTR [ecx+392], eax
	jne	SHORT $LN1@cf2_stack_
; Line 116
	push	OFFSET $SG15377
	push	116					; 00000074H
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	push	eax
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_cf2_setError
	add	esp, 8
; Line 117
	jmp	SHORT $LN2@cf2_stack_
$LN1@cf2_stack_:
; Line 120
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR [edx], eax
; Line 121
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	mov	DWORD PTR [edx+4], 0
; Line 122
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	add	ecx, 8
	mov	edx, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [edx+392], ecx
$LN2@cf2_stack_:
; Line 123
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_stack_pushFixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_val$ = 12						; size = 4
_cf2_stack_pushInt PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2stack.c
; Line 97
	push	ebp
	mov	ebp, esp
; Line 98
	mov	eax, 8
	imul	ecx, eax, 48
	mov	edx, DWORD PTR _stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR _stack$[ebp]
	cmp	DWORD PTR [ecx+392], eax
	jne	SHORT $LN1@cf2_stack_
; Line 100
	push	OFFSET $SG15370
	push	100					; 00000064H
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	push	eax
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_cf2_setError
	add	esp, 8
; Line 101
	jmp	SHORT $LN2@cf2_stack_
$LN1@cf2_stack_:
; Line 104
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR [edx], eax
; Line 105
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	mov	DWORD PTR [edx+4], 2
; Line 106
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	add	ecx, 8
	mov	edx, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [edx+392], ecx
$LN2@cf2_stack_:
; Line 107
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_stack_pushInt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_cf2_stack_count PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2stack.c
; Line 89
	push	ebp
	mov	ebp, esp
; Line 90
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	sub	edx, eax
	sar	edx, 3
	mov	eax, edx
; Line 91
	pop	ebp
	ret	0
_cf2_stack_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -4						; size = 4
_stack$ = 8						; size = 4
_cf2_stack_free PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2stack.c
; Line 75
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 76
	cmp	DWORD PTR _stack$[ebp], 0
	je	SHORT $LN5@cf2_stack_
; Line 78
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$1[ebp], ecx
$LN3@cf2_stack_:
; Line 82
	mov	edx, DWORD PTR _stack$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _stack$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@cf2_stack_
$LN5@cf2_stack_:
; Line 84
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_stack_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stack$ = -16						; size = 4
_error$ = -8						; size = 4
_memory$ = 8						; size = 4
_e$ = 12						; size = 4
_cf2_stack_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2stack.c
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 56
	mov	DWORD PTR _error$[ebp], 0
; Line 58
	mov	DWORD PTR _stack$[ebp], 0
; Line 61
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	396					; 0000018cH
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_qalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _stack$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@cf2_stack_
; Line 64
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [edx], eax
; Line 65
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 66
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _stack$[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [ecx+392], eax
$LN1@cf2_stack_:
; Line 69
	mov	eax, DWORD PTR _stack$[ebp]
; Line 70
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@cf2_stack_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@cf2_stack_:
	DD	1
	DD	$LN5@cf2_stack_
$LN5@cf2_stack_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@cf2_stack_
$LN4@cf2_stack_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cf2_stack_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_glyphpath$ = 8						; size = 4
_x1$ = 12						; size = 4
_y1$ = 16						; size = 4
_x2$ = 20						; size = 4
_y2$ = 24						; size = 4
_x$ = 28						; size = 4
_y$ = 32						; size = 4
_cf2_glyphpath_computeOffset PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 1447
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1448
	mov	eax, DWORD PTR _x2$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _dx$[ebp], eax
; Line 1449
	mov	ecx, DWORD PTR _y2$[ebp]
	sub	ecx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR _dy$[ebp], ecx
; Line 1454
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+192]
	test	ecx, ecx
	je	SHORT $LN24@cf2_glyphp
; Line 1456
	mov	edx, DWORD PTR _dx$[ebp]
	neg	edx
	mov	DWORD PTR _dx$[ebp], edx
; Line 1457
	mov	eax, DWORD PTR _dy$[ebp]
	neg	eax
	mov	DWORD PTR _dy$[ebp], eax
$LN24@cf2_glyphp:
; Line 1460
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx], 0
; Line 1462
	mov	eax, DWORD PTR _glyphpath$[ebp]
	movzx	ecx, BYTE PTR [eax+11666]
	test	ecx, ecx
	jne	SHORT $LN23@cf2_glyphp
; Line 1463
	jmp	$LN25@cf2_glyphp
$LN23@cf2_glyphp:
; Line 1467
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	esi, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _y2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y1$[ebp]
	push	edx
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	call	_cf2_getWindingMomentum
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+16], eax
; Line 1470
	cmp	DWORD PTR _dx$[ebp], 0
	jl	$LN22@cf2_glyphp
; Line 1472
	cmp	DWORD PTR _dy$[ebp], 0
	jl	$LN21@cf2_glyphp
; Line 1476
	mov	eax, DWORD PTR _dy$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _dx$[ebp], eax
	jle	SHORT $LN20@cf2_glyphp
; Line 1479
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 1480
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx], 0
	jmp	SHORT $LN19@cf2_glyphp
$LN20@cf2_glyphp:
; Line 1482
	mov	eax, DWORD PTR _dx$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _dy$[ebp], eax
	jle	SHORT $LN18@cf2_glyphp
; Line 1485
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11688]
	mov	DWORD PTR [ecx], eax
; Line 1486
	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11692]
	mov	DWORD PTR [ecx], eax
; Line 1488
	jmp	SHORT $LN19@cf2_glyphp
$LN18@cf2_glyphp:
; Line 1492
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11688]
	push	edx
	push	45875					; 0000b333H
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1494
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11692]
	push	eax
	push	19661					; 00004ccdH
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx], eax
$LN19@cf2_glyphp:
; Line 1497
	jmp	$LN16@cf2_glyphp
$LN21@cf2_glyphp:
; Line 1501
	imul	edx, DWORD PTR _dy$[ebp], -2
	cmp	DWORD PTR _dx$[ebp], edx
	jle	SHORT $LN15@cf2_glyphp
; Line 1504
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1505
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN16@cf2_glyphp
$LN15@cf2_glyphp:
; Line 1507
	mov	edx, DWORD PTR _dy$[ebp]
	neg	edx
	mov	eax, DWORD PTR _dx$[ebp]
	shl	eax, 1
	cmp	edx, eax
	jle	SHORT $LN13@cf2_glyphp
; Line 1510
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11688]
	neg	edx
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1511
	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11692]
	mov	DWORD PTR [ecx], eax
; Line 1513
	jmp	SHORT $LN16@cf2_glyphp
$LN13@cf2_glyphp:
; Line 1517
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11688]
	push	edx
	push	-45874					; ffff4cceH
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1519
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11692]
	push	eax
	push	19661					; 00004ccdH
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx], eax
$LN16@cf2_glyphp:
; Line 1523
	jmp	$LN25@cf2_glyphp
$LN22@cf2_glyphp:
; Line 1525
	cmp	DWORD PTR _dy$[ebp], 0
	jl	$LN10@cf2_glyphp
; Line 1529
	mov	edx, DWORD PTR _dx$[ebp]
	neg	edx
	mov	eax, DWORD PTR _dy$[ebp]
	shl	eax, 1
	cmp	edx, eax
	jle	SHORT $LN9@cf2_glyphp
; Line 1532
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 1533
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11692]
	shl	eax, 1
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN8@cf2_glyphp
$LN9@cf2_glyphp:
; Line 1535
	imul	edx, DWORD PTR _dx$[ebp], -2
	cmp	DWORD PTR _dy$[ebp], edx
	jle	SHORT $LN7@cf2_glyphp
; Line 1538
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11688]
	mov	DWORD PTR [eax], edx
; Line 1539
	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11692]
	mov	DWORD PTR [eax], edx
; Line 1541
	jmp	SHORT $LN8@cf2_glyphp
$LN7@cf2_glyphp:
; Line 1545
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11688]
	push	ecx
	push	45875					; 0000b333H
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1547
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11692]
	push	ecx
	push	111411					; 0001b333H
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx], eax
$LN8@cf2_glyphp:
; Line 1550
	jmp	$LN25@cf2_glyphp
$LN10@cf2_glyphp:
; Line 1554
	mov	eax, DWORD PTR _dx$[ebp]
	neg	eax
	imul	ecx, DWORD PTR _dy$[ebp], -2
	cmp	eax, ecx
	jle	SHORT $LN4@cf2_glyphp
; Line 1557
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx], 0
; Line 1558
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11692]
	shl	ecx, 1
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN25@cf2_glyphp
$LN4@cf2_glyphp:
; Line 1560
	mov	eax, DWORD PTR _dy$[ebp]
	neg	eax
	imul	ecx, DWORD PTR _dx$[ebp], -2
	cmp	eax, ecx
	jle	SHORT $LN2@cf2_glyphp
; Line 1563
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11688]
	neg	eax
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1564
	mov	edx, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11692]
	mov	DWORD PTR [edx], ecx
; Line 1566
	jmp	SHORT $LN25@cf2_glyphp
$LN2@cf2_glyphp:
; Line 1570
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11688]
	push	eax
	push	-45874					; ffff4cceH
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1572
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11692]
	push	eax
	push	111411					; 0001b333H
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx], eax
$LN25@cf2_glyphp:
; Line 1576
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_glyphpath_computeOffset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_params$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
_glyphpath$ = 8						; size = 4
_start$ = 12						; size = 8
_cf2_glyphpath_pushMove PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 1397
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1401
	mov	DWORD PTR _params$[ebp+32], 1
; Line 1402
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11728]
	mov	edx, DWORD PTR [eax+11732]
	mov	DWORD PTR _params$[ebp], ecx
	mov	DWORD PTR _params$[ebp+4], edx
; Line 1406
	mov	eax, DWORD PTR _glyphpath$[ebp]
	add	eax, 8
	push	eax
	call	_cf2_hintmap_isValid
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@cf2_glyphp
; Line 1412
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11740]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11736]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	push	eax
	call	_cf2_glyphpath_moveTo
	add	esp, 12					; 0000000cH
$LN1@cf2_glyphp:
; Line 1419
	mov	ecx, DWORD PTR _start$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	lea	eax, DWORD PTR _params$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	push	edx
	call	_cf2_glyphpath_hintPoint
	add	esp, 20					; 00000014H
; Line 1422
	mov	esi, esp
	lea	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1424
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _params$[ebp+8]
	mov	DWORD PTR [eax+11728], ecx
	mov	edx, DWORD PTR _params$[ebp+12]
	mov	DWORD PTR [eax+11732], edx
; Line 1425
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+11704], ecx
	mov	edx, DWORD PTR _start$[ebp+4]
	mov	DWORD PTR [eax+11708], edx
; Line 1426
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@cf2_glyphp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@cf2_glyphp:
	DD	1
	DD	$LN5@cf2_glyphp
$LN5@cf2_glyphp:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN4@cf2_glyphp
$LN4@cf2_glyphp:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_cf2_glyphpath_pushMove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv128 = -80						; size = 4
_useIntersection$ = -73					; size = 1
_intersection$ = -68					; size = 8
_prevP1$ = -56						; size = 4
_prevP0$ = -52						; size = 4
_params$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
_glyphpath$ = 8						; size = 4
_hintmap$ = 12						; size = 4
_nextP0$ = 16						; size = 4
_nextP1$ = 20						; size = 8
_close$ = 28						; size = 1
_cf2_glyphpath_pushPrevElem PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 1236
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1242
	mov	DWORD PTR _intersection$[ebp], 0
	mov	DWORD PTR _intersection$[ebp+4], 0
; Line 1243
	mov	BYTE PTR _useIntersection$[ebp], 0
$LN24@cf2_glyphp:
; Line 1247
	mov	eax, DWORD PTR _glyphpath$[ebp]
	cmp	DWORD PTR [eax+11748], 2
	je	SHORT $LN23@cf2_glyphp
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	cmp	DWORD PTR [ecx+11748], 4
	je	SHORT $LN23@cf2_glyphp
	push	OFFSET $SG14238
	push	1247					; 000004dfH
	push	OFFSET $SG14239
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN23@cf2_glyphp:
	xor	edx, edx
	jne	SHORT $LN24@cf2_glyphp
; Line 1249
	mov	eax, DWORD PTR _glyphpath$[ebp]
	cmp	DWORD PTR [eax+11748], 2
	jne	SHORT $LN20@cf2_glyphp
; Line 1251
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	add	ecx, 11752				; 00002de8H
	mov	DWORD PTR _prevP0$[ebp], ecx
; Line 1252
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	edx, 11760				; 00002df0H
	mov	DWORD PTR _prevP1$[ebp], edx
; Line 1254
	jmp	SHORT $LN19@cf2_glyphp
$LN20@cf2_glyphp:
; Line 1256
	mov	eax, DWORD PTR _glyphpath$[ebp]
	add	eax, 11768				; 00002df8H
	mov	DWORD PTR _prevP0$[ebp], eax
; Line 1257
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	add	ecx, 11776				; 00002e00H
	mov	DWORD PTR _prevP1$[ebp], ecx
$LN19@cf2_glyphp:
; Line 1263
	mov	edx, DWORD PTR _prevP1$[ebp]
	mov	eax, DWORD PTR _nextP0$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN17@cf2_glyphp
	mov	edx, DWORD PTR _prevP1$[ebp]
	mov	eax, DWORD PTR _nextP0$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN18@cf2_glyphp
$LN17@cf2_glyphp:
; Line 1272
	lea	edx, DWORD PTR _intersection$[ebp]
	push	edx
	lea	eax, DWORD PTR _nextP1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nextP0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prevP1$[ebp]
	push	edx
	mov	eax, DWORD PTR _prevP0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	push	ecx
	call	_cf2_glyphpath_computeIntersection
	add	esp, 24					; 00000018H
	mov	BYTE PTR _useIntersection$[ebp], al
; Line 1273
	movzx	edx, BYTE PTR _useIntersection$[ebp]
	test	edx, edx
	je	SHORT $LN18@cf2_glyphp
; Line 1277
	mov	eax, DWORD PTR _prevP1$[ebp]
	mov	ecx, DWORD PTR _intersection$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _intersection$[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN18@cf2_glyphp:
; Line 1281
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11728]
	mov	edx, DWORD PTR [eax+11732]
	mov	DWORD PTR _params$[ebp], ecx
	mov	DWORD PTR _params$[ebp+4], edx
; Line 1283
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11748]
	mov	DWORD PTR tv128[ebp], ecx
	cmp	DWORD PTR tv128[ebp], 2
	je	SHORT $LN13@cf2_glyphp
	cmp	DWORD PTR tv128[ebp], 4
	je	$LN8@cf2_glyphp
	jmp	$LN14@cf2_glyphp
$LN13@cf2_glyphp:
; Line 1286
	mov	DWORD PTR _params$[ebp+32], 2
; Line 1290
	movzx	edx, BYTE PTR _close$[ebp]
	test	edx, edx
	je	SHORT $LN12@cf2_glyphp
; Line 1297
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11764]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11760]
	push	eax
	lea	ecx, DWORD PTR _params$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	edx, 3876				; 00000f24H
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	push	eax
	call	_cf2_glyphpath_hintPoint
	add	esp, 20					; 00000014H
; Line 1299
	jmp	SHORT $LN11@cf2_glyphp
$LN12@cf2_glyphp:
; Line 1305
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11764]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11760]
	push	ecx
	lea	edx, DWORD PTR _params$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _hintmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	push	ecx
	call	_cf2_glyphpath_hintPoint
	add	esp, 20					; 00000014H
$LN11@cf2_glyphp:
; Line 1309
	mov	edx, DWORD PTR _params$[ebp]
	cmp	edx, DWORD PTR _params$[ebp+8]
	jne	SHORT $LN9@cf2_glyphp
	mov	eax, DWORD PTR _params$[ebp+4]
	cmp	eax, DWORD PTR _params$[ebp+12]
	je	SHORT $LN10@cf2_glyphp
$LN9@cf2_glyphp:
; Line 1311
	mov	esi, esp
	lea	ecx, DWORD PTR _params$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1313
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR _params$[ebp+8]
	mov	DWORD PTR [ecx+11728], edx
	mov	eax, DWORD PTR _params$[ebp+12]
	mov	DWORD PTR [ecx+11732], eax
$LN10@cf2_glyphp:
; Line 1315
	jmp	$LN14@cf2_glyphp
$LN8@cf2_glyphp:
; Line 1318
	mov	DWORD PTR _params$[ebp+32], 4
; Line 1325
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11764]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11760]
	push	ecx
	lea	edx, DWORD PTR _params$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _hintmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	push	ecx
	call	_cf2_glyphpath_hintPoint
	add	esp, 20					; 00000014H
; Line 1330
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11772]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11768]
	push	edx
	lea	eax, DWORD PTR _params$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _hintmap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	push	edx
	call	_cf2_glyphpath_hintPoint
	add	esp, 20					; 00000014H
; Line 1335
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11780]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11776]
	push	eax
	lea	ecx, DWORD PTR _params$[ebp+24]
	push	ecx
	mov	edx, DWORD PTR _hintmap$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	push	eax
	call	_cf2_glyphpath_hintPoint
	add	esp, 20					; 00000014H
; Line 1337
	mov	esi, esp
	lea	ecx, DWORD PTR _params$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1339
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR _params$[ebp+24]
	mov	DWORD PTR [ecx+11728], edx
	mov	eax, DWORD PTR _params$[ebp+28]
	mov	DWORD PTR [ecx+11732], eax
$LN14@cf2_glyphp:
; Line 1344
	movzx	ecx, BYTE PTR _useIntersection$[ebp]
	test	ecx, ecx
	je	SHORT $LN6@cf2_glyphp
	movzx	edx, BYTE PTR _close$[ebp]
	test	edx, edx
	je	$LN7@cf2_glyphp
$LN6@cf2_glyphp:
; Line 1351
	movzx	eax, BYTE PTR _close$[ebp]
	test	eax, eax
	je	SHORT $LN5@cf2_glyphp
; Line 1359
	mov	ecx, DWORD PTR _nextP0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _nextP0$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _params$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	add	eax, 3876				; 00000f24H
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	push	ecx
	call	_cf2_glyphpath_hintPoint
	add	esp, 20					; 00000014H
; Line 1361
	jmp	SHORT $LN4@cf2_glyphp
$LN5@cf2_glyphp:
; Line 1367
	mov	edx, DWORD PTR _nextP0$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _nextP0$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _params$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _hintmap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	push	edx
	call	_cf2_glyphpath_hintPoint
	add	esp, 20					; 00000014H
$LN4@cf2_glyphp:
; Line 1371
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _params$[ebp+8]
	cmp	ecx, DWORD PTR [eax+11728]
	jne	SHORT $LN2@cf2_glyphp
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR _params$[ebp+12]
	cmp	eax, DWORD PTR [edx+11732]
	je	SHORT $LN7@cf2_glyphp
$LN2@cf2_glyphp:
; Line 1374
	mov	DWORD PTR _params$[ebp+32], 2
; Line 1375
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11728]
	mov	eax, DWORD PTR [ecx+11732]
	mov	DWORD PTR _params$[ebp], edx
	mov	DWORD PTR _params$[ebp+4], eax
; Line 1378
	mov	esi, esp
	lea	ecx, DWORD PTR _params$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1380
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR _params$[ebp+8]
	mov	DWORD PTR [ecx+11728], edx
	mov	eax, DWORD PTR _params$[ebp+12]
	mov	DWORD PTR [ecx+11732], eax
$LN7@cf2_glyphp:
; Line 1384
	movzx	ecx, BYTE PTR _useIntersection$[ebp]
	test	ecx, ecx
	je	SHORT $LN25@cf2_glyphp
; Line 1387
	mov	edx, DWORD PTR _nextP0$[ebp]
	mov	eax, DWORD PTR _intersection$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _intersection$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN25@cf2_glyphp:
; Line 1389
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@cf2_glyphp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN30@cf2_glyphp:
	DD	2
	DD	$LN29@cf2_glyphp
$LN29@cf2_glyphp:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN27@cf2_glyphp
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN28@cf2_glyphp
$LN28@cf2_glyphp:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN27@cf2_glyphp:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_cf2_glyphpath_pushPrevElem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv281 = -80						; size = 4
tv258 = -76						; size = 4
tv233 = -72						; size = 4
tv214 = -68						; size = 4
tv195 = -64						; size = 4
tv176 = -60						; size = 4
_s$ = -56						; size = 4
_denominator$ = -52					; size = 4
_w$ = -44						; size = 8
_v$ = -28						; size = 8
_u$ = -12						; size = 8
_glyphpath$ = 8						; size = 4
_u1$ = 12						; size = 4
_u2$ = 16						; size = 4
_v1$ = 20						; size = 4
_v2$ = 24						; size = 4
_intersection$ = 28					; size = 4
_cf2_glyphpath_computeIntersection PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 1124
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1156
	mov	eax, DWORD PTR _u2$[ebp]
	mov	ecx, DWORD PTR _u1$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	add	edx, 16					; 00000010H
	sar	edx, 5
	mov	DWORD PTR _u$[ebp], edx
; Line 1157
	mov	eax, DWORD PTR _u2$[ebp]
	mov	ecx, DWORD PTR _u1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	sar	edx, 5
	mov	DWORD PTR _u$[ebp+4], edx
; Line 1158
	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	add	edx, 16					; 00000010H
	sar	edx, 5
	mov	DWORD PTR _v$[ebp], edx
; Line 1159
	mov	eax, DWORD PTR _v2$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	sar	edx, 5
	mov	DWORD PTR _v$[ebp+4], edx
; Line 1160
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _u1$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	add	edx, 16					; 00000010H
	sar	edx, 5
	mov	DWORD PTR _w$[ebp], edx
; Line 1161
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _u1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	sar	edx, 5
	mov	DWORD PTR _w$[ebp+4], edx
; Line 1163
	mov	eax, DWORD PTR _v$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	esi, eax
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp+4]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	sub	esi, eax
	mov	DWORD PTR _denominator$[ebp], esi
; Line 1165
	jne	SHORT $LN7@cf2_glyphp
; Line 1166
	xor	al, al
	jmp	$LN8@cf2_glyphp
$LN7@cf2_glyphp:
; Line 1168
	mov	ecx, DWORD PTR _denominator$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp+4]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	sub	esi, eax
	push	esi
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 1170
	mov	eax, DWORD PTR _u2$[ebp]
	mov	ecx, DWORD PTR _u1$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _u1$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1171
	mov	eax, DWORD PTR _u2$[ebp]
	mov	ecx, DWORD PTR _u1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _u1$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1183
	mov	eax, DWORD PTR _u1$[ebp]
	mov	ecx, DWORD PTR _u2$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN6@cf2_glyphp
	mov	eax, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR _u1$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	jns	SHORT $LN10@cf2_glyphp
	mov	eax, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR _u1$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	neg	edx
	mov	DWORD PTR tv176[ebp], edx
	jmp	SHORT $LN11@cf2_glyphp
$LN10@cf2_glyphp:
	mov	eax, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR _u1$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv176[ebp], edx
$LN11@cf2_glyphp:
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR tv176[ebp]
	cmp	ecx, DWORD PTR [eax+11700]
	jge	SHORT $LN6@cf2_glyphp
; Line 1184
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	eax, DWORD PTR _u1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
$LN6@cf2_glyphp:
; Line 1186
	mov	edx, DWORD PTR _u1$[ebp]
	mov	eax, DWORD PTR _u2$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN5@cf2_glyphp
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	eax, DWORD PTR _u1$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	jns	SHORT $LN12@cf2_glyphp
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	eax, DWORD PTR _u1$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	neg	ecx
	mov	DWORD PTR tv195[ebp], ecx
	jmp	SHORT $LN13@cf2_glyphp
$LN12@cf2_glyphp:
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	eax, DWORD PTR _u1$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv195[ebp], ecx
$LN13@cf2_glyphp:
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR tv195[ebp]
	cmp	eax, DWORD PTR [edx+11700]
	jge	SHORT $LN5@cf2_glyphp
; Line 1187
	mov	ecx, DWORD PTR _intersection$[ebp]
	mov	edx, DWORD PTR _u1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
$LN5@cf2_glyphp:
; Line 1190
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN4@cf2_glyphp
	mov	ecx, DWORD PTR _intersection$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	jns	SHORT $LN14@cf2_glyphp
	mov	ecx, DWORD PTR _intersection$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	neg	eax
	mov	DWORD PTR tv214[ebp], eax
	jmp	SHORT $LN15@cf2_glyphp
$LN14@cf2_glyphp:
	mov	ecx, DWORD PTR _intersection$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR tv214[ebp], eax
$LN15@cf2_glyphp:
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR tv214[ebp]
	cmp	edx, DWORD PTR [ecx+11700]
	jge	SHORT $LN4@cf2_glyphp
; Line 1191
	mov	eax, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN4@cf2_glyphp:
; Line 1193
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@cf2_glyphp
	mov	eax, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	jns	SHORT $LN16@cf2_glyphp
	mov	eax, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	neg	edx
	mov	DWORD PTR tv233[ebp], edx
	jmp	SHORT $LN17@cf2_glyphp
$LN16@cf2_glyphp:
	mov	eax, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv233[ebp], edx
$LN17@cf2_glyphp:
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR tv233[ebp]
	cmp	ecx, DWORD PTR [eax+11700]
	jge	SHORT $LN3@cf2_glyphp
; Line 1194
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
$LN3@cf2_glyphp:
; Line 1200
	mov	edx, DWORD PTR _u2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _v1$[ebp]
	add	eax, DWORD PTR [ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, eax
	jns	SHORT $LN18@cf2_glyphp
	mov	edx, DWORD PTR _u2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _v1$[ebp]
	add	eax, DWORD PTR [ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, eax
	neg	ecx
	mov	DWORD PTR tv258[ebp], ecx
	jmp	SHORT $LN19@cf2_glyphp
$LN18@cf2_glyphp:
	mov	edx, DWORD PTR _u2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _v1$[ebp]
	add	eax, DWORD PTR [ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR tv258[ebp], ecx
$LN19@cf2_glyphp:
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR tv258[ebp]
	cmp	eax, DWORD PTR [edx+11696]
	jg	SHORT $LN1@cf2_glyphp
	mov	ecx, DWORD PTR _u2$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _v1$[ebp]
	add	eax, DWORD PTR [edx+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _intersection$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, eax
	jns	SHORT $LN20@cf2_glyphp
	mov	eax, DWORD PTR _u2$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _v1$[ebp]
	add	eax, DWORD PTR [ecx+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, eax
	neg	ecx
	mov	DWORD PTR tv281[ebp], ecx
	jmp	SHORT $LN21@cf2_glyphp
$LN20@cf2_glyphp:
	mov	edx, DWORD PTR _u2$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _v1$[ebp]
	add	eax, DWORD PTR [ecx+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _intersection$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, eax
	mov	DWORD PTR tv281[ebp], ecx
$LN21@cf2_glyphp:
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR tv281[ebp]
	cmp	eax, DWORD PTR [edx+11696]
	jle	SHORT $LN2@cf2_glyphp
$LN1@cf2_glyphp:
; Line 1201
	xor	al, al
	jmp	SHORT $LN8@cf2_glyphp
$LN2@cf2_glyphp:
; Line 1203
	mov	al, 1
$LN8@cf2_glyphp:
; Line 1204
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@cf2_glyphp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN26@cf2_glyphp:
	DD	3
	DD	$LN25@cf2_glyphp
$LN25@cf2_glyphp:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN22@cf2_glyphp
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN23@cf2_glyphp
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN24@cf2_glyphp
$LN24@cf2_glyphp:
	DB	119					; 00000077H
	DB	0
$LN23@cf2_glyphp:
	DB	118					; 00000076H
	DB	0
$LN22@cf2_glyphp:
	DB	117					; 00000075H
	DB	0
_cf2_glyphpath_computeIntersection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pt$ = -12						; size = 8
_glyphpath$ = 8						; size = 4
_hintmap$ = 12						; size = 4
_ppt$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_cf2_glyphpath_hintPoint PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 1093
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1098
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11644]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	esi, eax
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11648]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	esi, eax
	mov	DWORD PTR _pt$[ebp], esi
; Line 1099
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hintmap$[ebp]
	push	ecx
	call	_cf2_hintmap_map
	add	esp, 8
	mov	DWORD PTR _pt$[ebp+4], eax
; Line 1103
	mov	edx, DWORD PTR _pt$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	esi, eax
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	add	esi, eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	add	esi, DWORD PTR [ecx+11656]
	mov	edx, DWORD PTR _ppt$[ebp]
	mov	DWORD PTR [edx], esi
; Line 1106
	mov	eax, DWORD PTR _pt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	esi, eax
	mov	ecx, DWORD PTR _pt$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	add	esi, eax
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	esi, DWORD PTR [edx+11660]
	mov	eax, DWORD PTR _ppt$[ebp]
	mov	DWORD PTR [eax+4], esi
; Line 1107
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@cf2_glyphp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@cf2_glyphp:
	DD	1
	DD	$LN4@cf2_glyphp
$LN4@cf2_glyphp:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@cf2_glyphp
$LN3@cf2_glyphp:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	0
_cf2_glyphpath_hintPoint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv235 = -44						; size = 4
tv225 = -40						; size = 4
_count$1 = -36						; size = 4
_iDst$2 = -32						; size = 4
_iSrc$3 = -28						; size = 4
_halfWidth$4 = -24					; size = 4
_midpoint$5 = -20					; size = 4
_secondHintEdge$ = -16					; size = 4
_firstHintEdge$ = -12					; size = 4
_isPair$ = -5						; size = 1
_indexInsert$ = -4					; size = 4
_hintmap$ = 8						; size = 4
_bottomHintEdge$ = 12					; size = 4
_topHintEdge$ = 16					; size = 4
_cf2_hintmap_insertHint PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 562
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 566
	mov	BYTE PTR _isPair$[ebp], 1
; Line 567
	mov	eax, DWORD PTR _bottomHintEdge$[ebp]
	mov	DWORD PTR _firstHintEdge$[ebp], eax
; Line 568
	mov	ecx, DWORD PTR _topHintEdge$[ebp]
	mov	DWORD PTR _secondHintEdge$[ebp], ecx
$LN37@cf2_hintma:
; Line 574
	mov	edx, DWORD PTR _bottomHintEdge$[ebp]
	push	edx
	call	_cf2_hint_isValid
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN36@cf2_hintma
	mov	ecx, DWORD PTR _topHintEdge$[ebp]
	push	ecx
	call	_cf2_hint_isValid
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN36@cf2_hintma
	push	OFFSET $SG14024
	push	574					; 0000023eH
	push	OFFSET $SG14025
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN36@cf2_hintma:
	xor	eax, eax
	jne	SHORT $LN37@cf2_hintma
; Line 577
	mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
	push	ecx
	call	_cf2_hint_isValid
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN33@cf2_hintma
; Line 580
	mov	eax, DWORD PTR _topHintEdge$[ebp]
	mov	DWORD PTR _firstHintEdge$[ebp], eax
; Line 581
	mov	BYTE PTR _isPair$[ebp], 0
	jmp	SHORT $LN30@cf2_hintma
$LN33@cf2_hintma:
; Line 583
	mov	ecx, DWORD PTR _topHintEdge$[ebp]
	push	ecx
	call	_cf2_hint_isValid
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN30@cf2_hintma
; Line 586
	mov	BYTE PTR _isPair$[ebp], 0
$LN30@cf2_hintma:
; Line 591
	movzx	eax, BYTE PTR _isPair$[ebp]
	test	eax, eax
	je	SHORT $LN29@cf2_hintma
	mov	ecx, DWORD PTR _topHintEdge$[ebp]
	mov	edx, DWORD PTR _bottomHintEdge$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jge	SHORT $LN29@cf2_hintma
	push	OFFSET $SG14033
	push	591					; 0000024fH
	push	OFFSET $SG14034
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN29@cf2_hintma:
	xor	ecx, ecx
	jne	SHORT $LN30@cf2_hintma
; Line 594
	mov	DWORD PTR _indexInsert$[ebp], 0
; Line 595
	jmp	SHORT $LN26@cf2_hintma
$LN25@cf2_hintma:
	mov	edx, DWORD PTR _indexInsert$[ebp]
	add	edx, 1
	mov	DWORD PTR _indexInsert$[ebp], edx
$LN26@cf2_hintma:
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR _indexInsert$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN24@cf2_hintma
; Line 597
	imul	edx, DWORD PTR _indexInsert$[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR _firstHintEdge$[ebp]
	mov	edx, DWORD PTR [eax+edx+36]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN23@cf2_hintma
; Line 598
	jmp	SHORT $LN24@cf2_hintma
$LN23@cf2_hintma:
; Line 599
	jmp	SHORT $LN25@cf2_hintma
$LN24@cf2_hintma:
; Line 612
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR _indexInsert$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN22@cf2_hintma
; Line 616
	imul	edx, DWORD PTR _indexInsert$[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR _firstHintEdge$[ebp]
	mov	edx, DWORD PTR [eax+edx+36]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN21@cf2_hintma
; Line 617
	jmp	$LN38@cf2_hintma
$LN21@cf2_hintma:
; Line 621
	movzx	eax, BYTE PTR _isPair$[ebp]
	test	eax, eax
	je	SHORT $LN20@cf2_hintma
	imul	ecx, DWORD PTR _indexInsert$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR _secondHintEdge$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+36]
	cmp	ecx, DWORD PTR [eax+8]
	jg	SHORT $LN20@cf2_hintma
; Line 622
	jmp	$LN38@cf2_hintma
$LN20@cf2_hintma:
; Line 625
	imul	edx, DWORD PTR _indexInsert$[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	lea	ecx, DWORD PTR [eax+edx+28]
	push	ecx
	call	_cf2_hint_isPairTop
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN22@cf2_hintma
; Line 626
	jmp	$LN38@cf2_hintma
$LN22@cf2_hintma:
; Line 631
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_cf2_hintmap_isValid
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	$LN18@cf2_hintma
	mov	eax, DWORD PTR _firstHintEdge$[ebp]
	push	eax
	call	_cf2_hint_isLocked
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN18@cf2_hintma
; Line 633
	movzx	edx, BYTE PTR _isPair$[ebp]
	test	edx, edx
	je	SHORT $LN17@cf2_hintma
; Line 640
	mov	eax, DWORD PTR _secondHintEdge$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _firstHintEdge$[ebp]
	add	eax, DWORD PTR [ecx+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_cf2_hintmap_map
	add	esp, 8
	mov	DWORD PTR _midpoint$5[ebp], eax
; Line 644
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _secondHintEdge$[ebp]
	mov	ecx, DWORD PTR _firstHintEdge$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _halfWidth$4[ebp], eax
; Line 647
	mov	edx, DWORD PTR _midpoint$5[ebp]
	sub	edx, DWORD PTR _halfWidth$4[ebp]
	mov	eax, DWORD PTR _firstHintEdge$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 648
	mov	ecx, DWORD PTR _midpoint$5[ebp]
	add	ecx, DWORD PTR _halfWidth$4[ebp]
	mov	edx, DWORD PTR _secondHintEdge$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 650
	jmp	SHORT $LN18@cf2_hintma
$LN17@cf2_hintma:
; Line 652
	mov	eax, DWORD PTR _firstHintEdge$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_cf2_hintmap_map
	add	esp, 8
	mov	ecx, DWORD PTR _firstHintEdge$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN18@cf2_hintma:
; Line 676
	cmp	DWORD PTR _indexInsert$[ebp], 0
	jbe	SHORT $LN15@cf2_hintma
; Line 679
	mov	edx, DWORD PTR _indexInsert$[ebp]
	sub	edx, 1
	imul	eax, edx, 20
	mov	ecx, DWORD PTR _firstHintEdge$[ebp]
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	cmp	ecx, DWORD PTR [edx+eax+40]
	jge	SHORT $LN15@cf2_hintma
; Line 680
	jmp	$LN38@cf2_hintma
$LN15@cf2_hintma:
; Line 683
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR _indexInsert$[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN13@cf2_hintma
; Line 686
	movzx	ecx, BYTE PTR _isPair$[ebp]
	test	ecx, ecx
	je	SHORT $LN12@cf2_hintma
; Line 688
	imul	edx, DWORD PTR _indexInsert$[ebp], 20
	mov	eax, DWORD PTR _secondHintEdge$[ebp]
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [eax+12]
	cmp	eax, DWORD PTR [ecx+edx+40]
	jle	SHORT $LN11@cf2_hintma
; Line 689
	jmp	$LN38@cf2_hintma
$LN11@cf2_hintma:
; Line 691
	jmp	SHORT $LN13@cf2_hintma
$LN12@cf2_hintma:
; Line 693
	imul	ecx, DWORD PTR _indexInsert$[ebp], 20
	mov	edx, DWORD PTR _firstHintEdge$[ebp]
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [edx+12]
	cmp	edx, DWORD PTR [eax+ecx+40]
	jle	SHORT $LN13@cf2_hintma
; Line 694
	jmp	$LN38@cf2_hintma
$LN13@cf2_hintma:
; Line 700
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	DWORD PTR _iSrc$3[ebp], ecx
; Line 701
	movzx	edx, BYTE PTR _isPair$[ebp]
	test	edx, edx
	je	SHORT $LN40@cf2_hintma
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	DWORD PTR tv225[ebp], ecx
	jmp	SHORT $LN41@cf2_hintma
$LN40@cf2_hintma:
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR tv225[ebp], eax
$LN41@cf2_hintma:
	mov	ecx, DWORD PTR tv225[ebp]
	mov	DWORD PTR _iDst$2[ebp], ecx
; Line 703
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _indexInsert$[ebp]
	mov	DWORD PTR _count$1[ebp], eax
; Line 706
	cmp	DWORD PTR _iDst$2[ebp], 192		; 000000c0H
	jl	SHORT $LN3@cf2_hintma
$LN7@cf2_hintma:
; Line 708
	mov	ecx, 4
	imul	edx, ecx, 52
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN6@cf2_hintma
	push	OFFSET $SG14065
	call	_FT_Message
	add	esp, 4
$LN6@cf2_hintma:
	xor	eax, eax
	jne	SHORT $LN7@cf2_hintma
; Line 709
	jmp	$LN38@cf2_hintma
$LN3@cf2_hintma:
; Line 712
	mov	ecx, DWORD PTR _count$1[ebp]
	mov	DWORD PTR tv235[ebp], ecx
	mov	edx, DWORD PTR _count$1[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$1[ebp], edx
	cmp	DWORD PTR tv235[ebp], 0
	je	SHORT $LN2@cf2_hintma
; Line 713
	imul	eax, DWORD PTR _iSrc$3[ebp], 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28]
	imul	eax, DWORD PTR _iDst$2[ebp], 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	lea	eax, DWORD PTR [ecx+eax+28]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _iDst$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _iDst$2[ebp], eax
	mov	ecx, DWORD PTR _iSrc$3[ebp]
	sub	ecx, 1
	mov	DWORD PTR _iSrc$3[ebp], ecx
	jmp	SHORT $LN3@cf2_hintma
$LN2@cf2_hintma:
; Line 716
	imul	edx, DWORD PTR _indexInsert$[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	lea	ecx, DWORD PTR [eax+edx+28]
	mov	edx, DWORD PTR _firstHintEdge$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], edx
; Line 717
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 719
	movzx	eax, BYTE PTR _isPair$[ebp]
	test	eax, eax
	je	SHORT $LN38@cf2_hintma
; Line 722
	mov	ecx, DWORD PTR _indexInsert$[ebp]
	add	ecx, 1
	imul	edx, ecx, 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	lea	ecx, DWORD PTR [eax+edx+28]
	mov	edx, DWORD PTR _secondHintEdge$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], edx
; Line 723
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN38@cf2_hintma:
; Line 728
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hintmap_insertHint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv240 = -105						; size = 1
tv224 = -104						; size = 4
tv193 = -100						; size = 4
tv191 = -96						; size = 4
tv189 = -92						; size = 4
tv186 = -88						; size = 4
tv77 = -84						; size = 4
_hintMove$1 = -80					; size = 4
_savedMove$2 = -72					; size = 8
_saveEdge$3 = -57					; size = 1
_upMinCounter$4 = -56					; size = 4
_downMinCounter$5 = -52					; size = 4
_move$6 = -48						; size = 4
_moveDown$7 = -44					; size = 4
_moveUp$8 = -40						; size = 4
_upMoveUp$9 = -36					; size = 4
_downMoveUp$10 = -32					; size = 4
_upMoveDown$11 = -28					; size = 4
_downMoveDown$12 = -24					; size = 4
_fracUp$13 = -20					; size = 4
_fracDown$14 = -16					; size = 4
_isPair$15 = -9						; size = 1
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_hintmap$ = 8						; size = 4
_cf2_hintmap_adjustHints PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 367
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 371
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_cf2_arrstack_clear
	add	esp, 4
; Line 381
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN56@cf2_hintma
$LN55@cf2_hintma:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN56@cf2_hintma:
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	$LN54@cf2_hintma
; Line 383
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	lea	ecx, DWORD PTR [eax+edx+28]
	push	ecx
	call	_cf2_hint_isPair
	add	esp, 4
	mov	BYTE PTR _isPair$15[ebp], al
; Line 387
	movzx	edx, BYTE PTR _isPair$15[ebp]
	test	edx, edx
	je	SHORT $LN59@cf2_hintma
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN60@cf2_hintma
$LN59@cf2_hintma:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
$LN60@cf2_hintma:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _j$[ebp], edx
$LN53@cf2_hintma:
; Line 389
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jb	SHORT $LN52@cf2_hintma
	push	OFFSET $SG13918
	push	389					; 00000185H
	push	OFFSET $SG13919
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN52@cf2_hintma:
	xor	edx, edx
	jne	SHORT $LN53@cf2_hintma
$LN49@cf2_hintma:
; Line 390
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28]
	push	edx
	call	_cf2_hint_isValid
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN48@cf2_hintma
	push	OFFSET $SG13924
	push	390					; 00000186H
	push	OFFSET $SG13925
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN48@cf2_hintma:
	xor	ecx, ecx
	jne	SHORT $LN49@cf2_hintma
$LN45@cf2_hintma:
; Line 391
	imul	edx, DWORD PTR _j$[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	lea	ecx, DWORD PTR [eax+edx+28]
	push	ecx
	call	_cf2_hint_isValid
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN44@cf2_hintma
	push	OFFSET $SG13930
	push	391					; 00000187H
	push	OFFSET $SG13931
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN44@cf2_hintma:
	xor	eax, eax
	jne	SHORT $LN45@cf2_hintma
$LN41@cf2_hintma:
; Line 393
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	lea	eax, DWORD PTR [edx+ecx+28]
	push	eax
	call	_cf2_hint_isLocked
	add	esp, 4
	movzx	esi, al
	imul	ecx, DWORD PTR _j$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	lea	eax, DWORD PTR [edx+ecx+28]
	push	eax
	call	_cf2_hint_isLocked
	add	esp, 4
	movzx	ecx, al
	cmp	esi, ecx
	je	SHORT $LN40@cf2_hintma
	push	OFFSET $SG13936
	push	393					; 00000189H
	push	OFFSET $SG13937
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN40@cf2_hintma:
	xor	edx, edx
	jne	SHORT $LN41@cf2_hintma
; Line 395
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28]
	push	edx
	call	_cf2_hint_isLocked
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	$LN25@cf2_hintma
; Line 398
	imul	ecx, DWORD PTR _i$[ebp], 20
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [eax+edx+40]
	and	edx, -65536				; ffff0000H
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+40]
	sub	ecx, edx
	mov	DWORD PTR _fracDown$14[ebp], ecx
; Line 399
	imul	edx, DWORD PTR _j$[ebp], 20
	imul	eax, DWORD PTR _j$[ebp], 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [ecx+eax+40]
	and	eax, -65536				; ffff0000H
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [ecx+edx+40]
	sub	edx, eax
	mov	DWORD PTR _fracUp$13[ebp], edx
; Line 402
	xor	eax, eax
	sub	eax, DWORD PTR _fracDown$14[ebp]
	mov	DWORD PTR _downMoveDown$12[ebp], eax
; Line 403
	xor	ecx, ecx
	sub	ecx, DWORD PTR _fracUp$13[ebp]
	mov	DWORD PTR _upMoveDown$11[ebp], ecx
; Line 406
	cmp	DWORD PTR _fracDown$14[ebp], 0
	jne	SHORT $LN61@cf2_hintma
	mov	DWORD PTR tv186[ebp], 0
	jmp	SHORT $LN62@cf2_hintma
$LN61@cf2_hintma:
	mov	edx, 65536				; 00010000H
	sub	edx, DWORD PTR _fracDown$14[ebp]
	mov	DWORD PTR tv186[ebp], edx
$LN62@cf2_hintma:
	mov	eax, DWORD PTR tv186[ebp]
	mov	DWORD PTR _downMoveUp$10[ebp], eax
; Line 409
	cmp	DWORD PTR _fracUp$13[ebp], 0
	jne	SHORT $LN63@cf2_hintma
	mov	DWORD PTR tv189[ebp], 0
	jmp	SHORT $LN64@cf2_hintma
$LN63@cf2_hintma:
	mov	ecx, 65536				; 00010000H
	sub	ecx, DWORD PTR _fracUp$13[ebp]
	mov	DWORD PTR tv189[ebp], ecx
$LN64@cf2_hintma:
	mov	edx, DWORD PTR tv189[ebp]
	mov	DWORD PTR _upMoveUp$9[ebp], edx
; Line 412
	mov	eax, DWORD PTR _downMoveUp$10[ebp]
	cmp	eax, DWORD PTR _upMoveUp$9[ebp]
	jge	SHORT $LN65@cf2_hintma
	mov	ecx, DWORD PTR _downMoveUp$10[ebp]
	mov	DWORD PTR tv191[ebp], ecx
	jmp	SHORT $LN66@cf2_hintma
$LN65@cf2_hintma:
	mov	edx, DWORD PTR _upMoveUp$9[ebp]
	mov	DWORD PTR tv191[ebp], edx
$LN66@cf2_hintma:
	mov	eax, DWORD PTR tv191[ebp]
	mov	DWORD PTR _moveUp$8[ebp], eax
; Line 414
	mov	ecx, DWORD PTR _downMoveDown$12[ebp]
	cmp	ecx, DWORD PTR _upMoveDown$11[ebp]
	jle	SHORT $LN67@cf2_hintma
	mov	edx, DWORD PTR _downMoveDown$12[ebp]
	mov	DWORD PTR tv193[ebp], edx
	jmp	SHORT $LN68@cf2_hintma
$LN67@cf2_hintma:
	mov	eax, DWORD PTR _upMoveDown$11[ebp]
	mov	DWORD PTR tv193[ebp], eax
$LN68@cf2_hintma:
	mov	ecx, DWORD PTR tv193[ebp]
	mov	DWORD PTR _moveDown$7[ebp], ecx
; Line 419
	mov	DWORD PTR _downMinCounter$5[ebp], 32768	; 00008000H
; Line 420
	mov	DWORD PTR _upMinCounter$4[ebp], 32768	; 00008000H
; Line 421
	mov	BYTE PTR _saveEdge$3[ebp], 0
; Line 442
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	jae	SHORT $LN35@cf2_hintma
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	imul	edx, ecx, 20
	imul	eax, DWORD PTR _j$[ebp], 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [ecx+eax+40]
	add	eax, DWORD PTR _moveUp$8[ebp]
	add	eax, DWORD PTR _upMinCounter$4[ebp]
	mov	ecx, DWORD PTR _hintmap$[ebp]
	cmp	DWORD PTR [ecx+edx+40], eax
	jl	SHORT $LN36@cf2_hintma
$LN35@cf2_hintma:
; Line 447
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN33@cf2_hintma
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	imul	eax, edx, 20
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+40]
	add	ecx, DWORD PTR _moveDown$7[ebp]
	sub	ecx, DWORD PTR _downMinCounter$5[ebp]
	mov	edx, DWORD PTR _hintmap$[ebp]
	cmp	DWORD PTR [edx+eax+40], ecx
	jg	SHORT $LN34@cf2_hintma
$LN33@cf2_hintma:
; Line 450
	mov	eax, DWORD PTR _moveDown$7[ebp]
	neg	eax
	cmp	eax, DWORD PTR _moveUp$8[ebp]
	jge	SHORT $LN69@cf2_hintma
	mov	ecx, DWORD PTR _moveDown$7[ebp]
	mov	DWORD PTR tv224[ebp], ecx
	jmp	SHORT $LN70@cf2_hintma
$LN69@cf2_hintma:
	mov	edx, DWORD PTR _moveUp$8[ebp]
	mov	DWORD PTR tv224[ebp], edx
$LN70@cf2_hintma:
	mov	eax, DWORD PTR tv224[ebp]
	mov	DWORD PTR _move$6[ebp], eax
; Line 452
	jmp	SHORT $LN32@cf2_hintma
$LN34@cf2_hintma:
; Line 453
	mov	ecx, DWORD PTR _moveUp$8[ebp]
	mov	DWORD PTR _move$6[ebp], ecx
$LN32@cf2_hintma:
; Line 455
	jmp	SHORT $LN31@cf2_hintma
$LN36@cf2_hintma:
; Line 460
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN29@cf2_hintma
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	imul	eax, edx, 20
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+40]
	add	ecx, DWORD PTR _moveDown$7[ebp]
	sub	ecx, DWORD PTR _downMinCounter$5[ebp]
	mov	edx, DWORD PTR _hintmap$[ebp]
	cmp	DWORD PTR [edx+eax+40], ecx
	jg	SHORT $LN30@cf2_hintma
$LN29@cf2_hintma:
; Line 462
	mov	eax, DWORD PTR _moveDown$7[ebp]
	mov	DWORD PTR _move$6[ebp], eax
; Line 464
	mov	ecx, DWORD PTR _moveDown$7[ebp]
	neg	ecx
	cmp	DWORD PTR _moveUp$8[ebp], ecx
	jge	SHORT $LN71@cf2_hintma
	mov	BYTE PTR tv240[ebp], 1
	jmp	SHORT $LN72@cf2_hintma
$LN71@cf2_hintma:
	mov	BYTE PTR tv240[ebp], 0
$LN72@cf2_hintma:
	mov	dl, BYTE PTR tv240[ebp]
	mov	BYTE PTR _saveEdge$3[ebp], dl
; Line 466
	jmp	SHORT $LN31@cf2_hintma
$LN30@cf2_hintma:
; Line 470
	mov	DWORD PTR _move$6[ebp], 0
; Line 471
	mov	BYTE PTR _saveEdge$3[ebp], 1
$LN31@cf2_hintma:
; Line 481
	movzx	eax, BYTE PTR _saveEdge$3[ebp]
	test	eax, eax
	je	SHORT $LN27@cf2_hintma
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 1
	cmp	DWORD PTR _j$[ebp], edx
	jae	SHORT $LN27@cf2_hintma
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	lea	eax, DWORD PTR [edx+ecx+28]
	push	eax
	call	_cf2_hint_isLocked
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN27@cf2_hintma
; Line 486
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _savedMove$2[ebp], edx
; Line 488
	mov	eax, DWORD PTR _moveUp$8[ebp]
	sub	eax, DWORD PTR _move$6[ebp]
	mov	DWORD PTR _savedMove$2[ebp+4], eax
; Line 490
	lea	ecx, DWORD PTR _savedMove$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_cf2_arrstack_push
	add	esp, 8
$LN27@cf2_hintma:
; Line 494
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [edx+ecx+40]
	add	eax, DWORD PTR _move$6[ebp]
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	DWORD PTR [edx+ecx+40], eax
; Line 495
	movzx	eax, BYTE PTR _isPair$15[ebp]
	test	eax, eax
	je	SHORT $LN25@cf2_hintma
; Line 496
	imul	ecx, DWORD PTR _j$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [edx+ecx+40]
	add	eax, DWORD PTR _move$6[ebp]
	imul	ecx, DWORD PTR _j$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	DWORD PTR [edx+ecx+40], eax
$LN25@cf2_hintma:
; Line 501
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN24@cf2_hintma
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	imul	ecx, eax, 20
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	esi, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+40]
	cmp	ecx, DWORD PTR [esi+edx+40]
	jle	SHORT $LN24@cf2_hintma
	push	OFFSET $SG13976
	push	501					; 000001f5H
	push	OFFSET $SG13977
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN24@cf2_hintma:
	xor	edx, edx
	jne	SHORT $LN25@cf2_hintma
$LN21@cf2_hintma:
; Line 503
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	jb	SHORT $LN20@cf2_hintma
	imul	ecx, DWORD PTR _i$[ebp], 20
	imul	edx, DWORD PTR _j$[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	esi, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+40]
	cmp	ecx, DWORD PTR [esi+edx+40]
	jle	SHORT $LN20@cf2_hintma
	push	OFFSET $SG13982
	push	503					; 000001f7H
	push	OFFSET $SG13983
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN20@cf2_hintma:
	xor	edx, edx
	jne	SHORT $LN21@cf2_hintma
; Line 506
	cmp	DWORD PTR _i$[ebp], 0
	jbe	SHORT $LN17@cf2_hintma
; Line 508
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	imul	edx, ecx, 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	esi, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [ecx+eax+36]
	cmp	eax, DWORD PTR [esi+edx+36]
	je	SHORT $LN17@cf2_hintma
; Line 512
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	imul	eax, edx, 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	esi, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+36]
	sub	ecx, DWORD PTR [esi+eax+36]
	push	ecx
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	imul	ecx, eax, 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	esi, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [eax+edx+40]
	sub	edx, DWORD PTR [esi+ecx+40]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	imul	edx, ecx, 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	DWORD PTR [ecx+edx+44], eax
$LN17@cf2_hintma:
; Line 515
	movzx	edx, BYTE PTR _isPair$15[ebp]
	test	edx, edx
	je	SHORT $LN15@cf2_hintma
; Line 517
	imul	eax, DWORD PTR _j$[ebp], 20
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	imul	edx, ecx, 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	esi, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [ecx+eax+36]
	cmp	eax, DWORD PTR [esi+edx+36]
	je	SHORT $LN14@cf2_hintma
; Line 521
	imul	ecx, DWORD PTR _j$[ebp], 20
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	imul	eax, edx, 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	esi, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+36]
	sub	ecx, DWORD PTR [esi+eax+36]
	push	ecx
	imul	edx, DWORD PTR _j$[ebp], 20
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	imul	ecx, eax, 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	esi, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [eax+edx+40]
	sub	edx, DWORD PTR [esi+ecx+40]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	imul	edx, ecx, 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	DWORD PTR [ecx+edx+44], eax
$LN14@cf2_hintma:
; Line 523
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN15@cf2_hintma:
; Line 525
	jmp	$LN55@cf2_hintma
$LN54@cf2_hintma:
; Line 529
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_cf2_arrstack_size
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN13@cf2_hintma
$LN12@cf2_hintma:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@cf2_hintma:
	cmp	DWORD PTR _i$[ebp], 0
	jbe	$LN57@cf2_hintma
; Line 532
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_cf2_arrstack_getPointer
	add	esp, 8
	mov	DWORD PTR _hintMove$1[ebp], eax
; Line 535
	mov	eax, DWORD PTR _hintMove$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _j$[ebp], ecx
$LN10@cf2_hintma:
; Line 538
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	jb	SHORT $LN9@cf2_hintma
	push	OFFSET $SG13997
	push	538					; 0000021aH
	push	OFFSET $SG13998
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@cf2_hintma:
	xor	ecx, ecx
	jne	SHORT $LN10@cf2_hintma
; Line 542
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	imul	eax, edx, 20
	imul	ecx, DWORD PTR _j$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+40]
	mov	edx, DWORD PTR _hintMove$1[ebp]
	mov	edx, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [ecx+edx+32768]
	mov	edx, DWORD PTR _hintmap$[ebp]
	cmp	DWORD PTR [edx+eax+40], ecx
	jl	SHORT $LN6@cf2_hintma
; Line 545
	imul	eax, DWORD PTR _j$[ebp], 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [ecx+eax+40]
	mov	eax, DWORD PTR _hintMove$1[ebp]
	add	edx, DWORD PTR [eax+4]
	imul	ecx, DWORD PTR _j$[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	DWORD PTR [eax+ecx+40], edx
; Line 547
	imul	ecx, DWORD PTR _j$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	lea	eax, DWORD PTR [edx+ecx+28]
	push	eax
	call	_cf2_hint_isPair
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@cf2_hintma
$LN4@cf2_hintma:
; Line 549
	cmp	DWORD PTR _j$[ebp], 0
	ja	SHORT $LN3@cf2_hintma
	push	OFFSET $SG14006
	push	549					; 00000225H
	push	OFFSET $SG14007
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_hintma:
	xor	edx, edx
	jne	SHORT $LN4@cf2_hintma
; Line 550
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR [edx+ecx+40]
	mov	ecx, DWORD PTR _hintMove$1[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	imul	ecx, edx, 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	DWORD PTR [edx+ecx+40], eax
$LN6@cf2_hintma:
; Line 553
	jmp	$LN12@cf2_hintma
$LN57@cf2_hintma:
; Line 554
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN75@cf2_hintma
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN75@cf2_hintma:
	DD	1
	DD	$LN74@cf2_hintma
$LN74@cf2_hintma:
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN73@cf2_hintma
$LN73@cf2_hintma:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
_cf2_hintmap_adjustHints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_hintmap$ = 8						; size = 4
_csCoord$ = 12						; size = 4
_cf2_hintmap_map PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 306
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 307
	mov	eax, DWORD PTR _hintmap$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN12@cf2_hintma
	mov	ecx, DWORD PTR _hintmap$[ebp]
	movzx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN13@cf2_hintma
$LN12@cf2_hintma:
; Line 310
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _csCoord$[ebp]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	jmp	$LN14@cf2_hintma
; Line 312
	jmp	$LN14@cf2_hintma
$LN13@cf2_hintma:
; Line 315
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _i$1[ebp], ecx
$LN10@cf2_hintma:
; Line 317
	mov	edx, DWORD PTR _hintmap$[ebp]
	cmp	DWORD PTR [edx+24], 192			; 000000c0H
	jb	SHORT $LN9@cf2_hintma
	push	OFFSET $SG13890
	push	317					; 0000013dH
	push	OFFSET $SG13891
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@cf2_hintma:
	xor	eax, eax
	jne	SHORT $LN10@cf2_hintma
$LN6@cf2_hintma:
; Line 321
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 1
	cmp	DWORD PTR _i$1[ebp], edx
	jae	SHORT $LN4@cf2_hintma
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR _csCoord$[ebp]
	cmp	eax, DWORD PTR [edx+ecx+36]
	jl	SHORT $LN4@cf2_hintma
; Line 322
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
	jmp	SHORT $LN6@cf2_hintma
$LN4@cf2_hintma:
; Line 325
	cmp	DWORD PTR _i$1[ebp], 0
	jbe	SHORT $LN3@cf2_hintma
	imul	edx, DWORD PTR _i$1[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR _csCoord$[ebp]
	cmp	ecx, DWORD PTR [eax+edx+36]
	jge	SHORT $LN3@cf2_hintma
; Line 326
	mov	edx, DWORD PTR _i$1[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
	jmp	SHORT $LN4@cf2_hintma
$LN3@cf2_hintma:
; Line 328
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 330
	cmp	DWORD PTR _i$1[ebp], 0
	jne	SHORT $LN2@cf2_hintma
	mov	edx, 20					; 00000014H
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR _csCoord$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+36]
	jge	SHORT $LN2@cf2_hintma
; Line 335
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, 20					; 00000014H
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR _csCoord$[ebp]
	sub	edx, DWORD PTR [ecx+eax+36]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, 20					; 00000014H
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _hintmap$[ebp]
	add	eax, DWORD PTR [ecx+edx+40]
	jmp	SHORT $LN14@cf2_hintma
; Line 337
	jmp	SHORT $LN14@cf2_hintma
$LN2@cf2_hintma:
; Line 345
	imul	edx, DWORD PTR _i$1[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+edx+44]
	push	ecx
	imul	edx, DWORD PTR _i$1[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR _csCoord$[ebp]
	sub	ecx, DWORD PTR [eax+edx+36]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	imul	edx, DWORD PTR _i$1[ebp], 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	add	eax, DWORD PTR [ecx+edx+40]
$LN14@cf2_hintma:
; Line 348
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hintmap_map ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hintmap$ = 8						; size = 4
_cf2_hintmap_isValid PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 297
	push	ebp
	mov	ebp, esp
; Line 298
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	al, BYTE PTR [eax+12]
; Line 299
	pop	ebp
	ret	0
_cf2_hintmap_isValid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -1						; size = 1
_hint$ = 8						; size = 4
_cf2_hint_isSynthetic PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 264
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 265
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@cf2_hint_i
	mov	BYTE PTR tv67[ebp], 1
	jmp	SHORT $LN4@cf2_hint_i
$LN3@cf2_hint_i:
	mov	BYTE PTR tv67[ebp], 0
$LN4@cf2_hint_i:
	mov	al, BYTE PTR tv67[ebp]
; Line 266
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hint_isSynthetic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -1						; size = 1
_hint$ = 8						; size = 4
_cf2_hint_isLocked PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 257
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 258
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@cf2_hint_i
	mov	BYTE PTR tv67[ebp], 1
	jmp	SHORT $LN4@cf2_hint_i
$LN3@cf2_hint_i:
	mov	BYTE PTR tv67[ebp], 0
$LN4@cf2_hint_i:
	mov	al, BYTE PTR tv67[ebp]
; Line 259
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hint_isLocked ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -1						; size = 1
_hint$ = 8						; size = 4
_cf2_hint_isPairTop PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 235
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 8
	je	SHORT $LN3@cf2_hint_i
	mov	BYTE PTR tv67[ebp], 1
	jmp	SHORT $LN4@cf2_hint_i
$LN3@cf2_hint_i:
	mov	BYTE PTR tv67[ebp], 0
$LN4@cf2_hint_i:
	mov	al, BYTE PTR tv67[ebp]
; Line 236
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hint_isPairTop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -1						; size = 1
_hint$ = 8						; size = 4
_cf2_hint_isPair PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 226
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 228
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 12					; 0000000cH
	je	SHORT $LN3@cf2_hint_i
	mov	BYTE PTR tv67[ebp], 1
	jmp	SHORT $LN4@cf2_hint_i
$LN3@cf2_hint_i:
	mov	BYTE PTR tv67[ebp], 0
$LN4@cf2_hint_i:
	mov	al, BYTE PTR tv67[ebp]
; Line 229
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hint_isPair ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hint$ = 8						; size = 4
_cf2_hint_initZero PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 212
	push	ebp
	mov	ebp, esp
; Line 213
	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _hint$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 214
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_hint_initZero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stemHint$ = -8						; size = 4
_width$ = -4						; size = 4
_hint$ = 8						; size = 4
_stemHintArray$ = 12					; size = 4
_indexStemHint$ = 16					; size = 4
_font$ = 20						; size = 4
_hintOrigin$ = 24					; size = 4
_scale$ = 28						; size = 4
_bottom$ = 32						; size = 1
_cf2_hint_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 102
	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _hint$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 106
	mov	ecx, DWORD PTR _indexStemHint$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stemHintArray$[ebp]
	push	edx
	call	_cf2_arrstack_getPointer
	add	esp, 8
	mov	DWORD PTR _stemHint$[ebp], eax
; Line 108
	mov	eax, DWORD PTR _stemHint$[ebp]
	mov	ecx, DWORD PTR _stemHint$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _width$[ebp], edx
; Line 110
	cmp	DWORD PTR _width$[ebp], -1376256	; ffeb0000H
	jne	SHORT $LN19@cf2_hint_i
; Line 114
	movzx	eax, BYTE PTR _bottom$[ebp]
	test	eax, eax
	je	SHORT $LN18@cf2_hint_i
; Line 116
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR _stemHint$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
; Line 117
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 119
	jmp	SHORT $LN17@cf2_hint_i
$LN18@cf2_hint_i:
; Line 120
	mov	edx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx], 0
$LN17@cf2_hint_i:
; Line 123
	jmp	$LN16@cf2_hint_i
$LN19@cf2_hint_i:
	cmp	DWORD PTR _width$[ebp], -1310720	; ffec0000H
	jne	SHORT $LN15@cf2_hint_i
; Line 127
	movzx	eax, BYTE PTR _bottom$[ebp]
	test	eax, eax
	je	SHORT $LN14@cf2_hint_i
; Line 128
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 129
	jmp	SHORT $LN13@cf2_hint_i
$LN14@cf2_hint_i:
; Line 131
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _stemHint$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
; Line 132
	mov	edx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx], 2
$LN13@cf2_hint_i:
; Line 133
	jmp	SHORT $LN16@cf2_hint_i
$LN15@cf2_hint_i:
; Line 136
	cmp	DWORD PTR _width$[ebp], 0
	jge	SHORT $LN11@cf2_hint_i
; Line 156
	movzx	eax, BYTE PTR _bottom$[ebp]
	test	eax, eax
	je	SHORT $LN10@cf2_hint_i
; Line 158
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR _stemHint$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
; Line 159
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx], 4
; Line 161
	jmp	SHORT $LN9@cf2_hint_i
$LN10@cf2_hint_i:
; Line 163
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _stemHint$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
; Line 164
	mov	edx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx], 8
$LN9@cf2_hint_i:
; Line 168
	jmp	SHORT $LN16@cf2_hint_i
$LN11@cf2_hint_i:
; Line 172
	movzx	eax, BYTE PTR _bottom$[ebp]
	test	eax, eax
	je	SHORT $LN7@cf2_hint_i
; Line 174
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR _stemHint$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+8], eax
; Line 175
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx], 4
; Line 177
	jmp	SHORT $LN16@cf2_hint_i
$LN7@cf2_hint_i:
; Line 179
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _stemHint$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
; Line 180
	mov	edx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx], 8
$LN16@cf2_hint_i:
; Line 187
	mov	eax, DWORD PTR _hint$[ebp]
	push	eax
	call	_cf2_hint_isTop
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@cf2_hint_i
; Line 188
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+188]
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN5@cf2_hint_i:
; Line 190
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _hintOrigin$[ebp]
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 191
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 192
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR _indexStemHint$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 195
	mov	eax, DWORD PTR _hint$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@cf2_hint_i
	mov	ecx, DWORD PTR _stemHint$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN4@cf2_hint_i
; Line 197
	mov	eax, DWORD PTR _hint$[ebp]
	push	eax
	call	_cf2_hint_isTop
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@cf2_hint_i
; Line 198
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _stemHint$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+12], ecx
; Line 199
	jmp	SHORT $LN2@cf2_hint_i
$LN3@cf2_hint_i:
; Line 200
	mov	edx, DWORD PTR _hint$[ebp]
	mov	eax, DWORD PTR _stemHint$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
$LN2@cf2_hint_i:
; Line 202
	mov	edx, DWORD PTR _hint$[ebp]
	push	edx
	call	_cf2_hint_lock
	add	esp, 4
; Line 204
	jmp	SHORT $LN20@cf2_hint_i
$LN4@cf2_hint_i:
; Line 205
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN20@cf2_hint_i:
; Line 206
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hint_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_cf2_getWindingMomentum PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 73
	push	ebp
	mov	ebp, esp
; Line 78
	mov	eax, DWORD PTR _x1$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _y2$[ebp]
	sub	ecx, DWORD PTR _y1$[ebp]
	sar	ecx, 16					; 00000010H
	imul	eax, ecx
	mov	edx, DWORD PTR _y1$[ebp]
	sar	edx, 16					; 00000010H
	mov	ecx, DWORD PTR _x2$[ebp]
	sub	ecx, DWORD PTR _x1$[ebp]
	sar	ecx, 16					; 00000010H
	imul	edx, ecx
	sub	eax, edx
; Line 79
	pop	ebp
	ret	0
_cf2_getWindingMomentum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_cf2_getUnitsPerEm PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 287
	push	ebp
	mov	ebp, esp
$LN9@cf2_getUni:
; Line 288
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN5@cf2_getUni
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@cf2_getUni
$LN5@cf2_getUni:
	push	OFFSET $SG13443
	push	288					; 00000120H
	push	OFFSET $SG13444
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN8@cf2_getUni:
	xor	ecx, ecx
	jne	SHORT $LN9@cf2_getUni
$LN4@cf2_getUni:
; Line 289
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movzx	ecx, WORD PTR [eax+68]
	test	ecx, ecx
	jne	SHORT $LN3@cf2_getUni
	push	OFFSET $SG13449
	push	289					; 00000121H
	push	OFFSET $SG13450
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_getUni:
	xor	edx, edx
	jne	SHORT $LN4@cf2_getUni
; Line 291
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ax, WORD PTR [ecx+68]
; Line 292
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getUnitsPerEm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_x_scale$ = 12						; size = 4
_y_scale$ = 16						; size = 4
_hinted$ = 20						; size = 4
_scaled$ = 24						; size = 4
_cf2_getScaleAndHintFlag PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 260
	push	ebp
	mov	ebp, esp
$LN7@cf2_getSca:
; Line 261
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN3@cf2_getSca
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN6@cf2_getSca
$LN3@cf2_getSca:
	push	OFFSET $SG13430
	push	261					; 00000105H
	push	OFFSET $SG13431
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN6@cf2_getSca:
	xor	ecx, ecx
	jne	SHORT $LN7@cf2_getSca
; Line 264
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _hinted$[ebp]
	mov	dl, BYTE PTR [eax+160]
	mov	BYTE PTR [ecx], dl
; Line 265
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _scaled$[ebp]
	mov	al, BYTE PTR [ecx+161]
	mov	BYTE PTR [edx], al
; Line 267
	mov	ecx, DWORD PTR _hinted$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN2@cf2_getSca
; Line 269
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+164]
	add	eax, 32					; 00000020H
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	mov	edx, DWORD PTR _x_scale$[ebp]
	mov	DWORD PTR [edx], eax
; Line 270
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+168]
	add	eax, 32					; 00000020H
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	mov	edx, DWORD PTR _y_scale$[ebp]
	mov	DWORD PTR [edx], eax
; Line 272
	jmp	SHORT $LN8@cf2_getSca
$LN2@cf2_getSca:
; Line 277
	mov	eax, DWORD PTR _x_scale$[ebp]
	mov	DWORD PTR [eax], 1024			; 00000400H
; Line 278
	mov	ecx, DWORD PTR _y_scale$[ebp]
	mov	DWORD PTR [ecx], 1024			; 00000400H
$LN8@cf2_getSca:
; Line 280
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getScaleAndHintFlag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_outline$ = 8						; size = 4
_memory$ = 12						; size = 4
_error$ = 16						; size = 4
_cf2_outline_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 241
	push	ebp
	mov	ebp, esp
; Line 242
	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 244
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 245
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 247
	mov	edx, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [edx], OFFSET _cf2_builder_moveTo
; Line 248
	mov	eax, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [eax+4], OFFSET _cf2_builder_lineTo
; Line 249
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [ecx+12], OFFSET _cf2_builder_cubeTo
; Line 250
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_outline_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_builder$ = -12						; size = 4
_outline$ = -8						; size = 4
_error$ = -4						; size = 4
_callbacks$ = 8						; size = 4
_params$ = 12						; size = 4
_cf2_builder_cubeTo PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 192
	mov	eax, DWORD PTR _callbacks$[ebp]
	mov	DWORD PTR _outline$[ebp], eax
$LN14@cf2_builde:
; Line 196
	cmp	DWORD PTR _outline$[ebp], 0
	je	SHORT $LN10@cf2_builde
	mov	ecx, DWORD PTR _outline$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	jne	SHORT $LN13@cf2_builde
$LN10@cf2_builde:
	push	OFFSET $SG13391
	push	196					; 000000c4H
	push	OFFSET $SG13392
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN13@cf2_builde:
	xor	edx, edx
	jne	SHORT $LN14@cf2_builde
$LN9@cf2_builde:
; Line 197
	mov	eax, DWORD PTR _params$[ebp]
	cmp	DWORD PTR [eax+32], 4
	je	SHORT $LN8@cf2_builde
	push	OFFSET $SG13397
	push	197					; 000000c5H
	push	OFFSET $SG13398
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN8@cf2_builde:
	xor	ecx, ecx
	jne	SHORT $LN9@cf2_builde
; Line 199
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _builder$[ebp], eax
; Line 201
	mov	ecx, DWORD PTR _builder$[ebp]
	movzx	edx, BYTE PTR [ecx+64]
	test	edx, edx
	jne	SHORT $LN5@cf2_builde
; Line 207
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _params$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_cff_builder_start_point
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 208
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@cf2_builde
; Line 210
	mov	edx, DWORD PTR _callbacks$[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@cf2_builde
; Line 211
	mov	ecx, DWORD PTR _callbacks$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
$LN3@cf2_builde:
; Line 212
	jmp	$LN15@cf2_builde
$LN5@cf2_builde:
; Line 217
	push	3
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_cff_check_points
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 218
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@cf2_builde
; Line 220
	mov	edx, DWORD PTR _callbacks$[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@cf2_builde
; Line 221
	mov	ecx, DWORD PTR _callbacks$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@cf2_builde:
; Line 222
	jmp	SHORT $LN15@cf2_builde
$LN2@cf2_builde:
; Line 227
	push	0
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_cff_builder_add_point
	add	esp, 16					; 00000010H
; Line 230
	push	0
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _params$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_cff_builder_add_point
	add	esp, 16					; 00000010H
; Line 233
	push	1
	mov	edx, DWORD PTR _params$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_cff_builder_add_point
	add	esp, 16					; 00000010H
$LN15@cf2_builde:
; Line 234
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_builder_cubeTo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_builder$ = -12						; size = 4
_outline$ = -8						; size = 4
_error$ = -4						; size = 4
_callbacks$ = 8						; size = 4
_params$ = 12						; size = 4
_cf2_builder_lineTo PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 148
	mov	eax, DWORD PTR _callbacks$[ebp]
	mov	DWORD PTR _outline$[ebp], eax
$LN14@cf2_builde:
; Line 152
	cmp	DWORD PTR _outline$[ebp], 0
	je	SHORT $LN10@cf2_builde
	mov	ecx, DWORD PTR _outline$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	jne	SHORT $LN13@cf2_builde
$LN10@cf2_builde:
	push	OFFSET $SG13363
	push	152					; 00000098H
	push	OFFSET $SG13364
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN13@cf2_builde:
	xor	edx, edx
	jne	SHORT $LN14@cf2_builde
$LN9@cf2_builde:
; Line 153
	mov	eax, DWORD PTR _params$[ebp]
	cmp	DWORD PTR [eax+32], 2
	je	SHORT $LN8@cf2_builde
	push	OFFSET $SG13369
	push	153					; 00000099H
	push	OFFSET $SG13370
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN8@cf2_builde:
	xor	ecx, ecx
	jne	SHORT $LN9@cf2_builde
; Line 155
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _builder$[ebp], eax
; Line 157
	mov	ecx, DWORD PTR _builder$[ebp]
	movzx	edx, BYTE PTR [ecx+64]
	test	edx, edx
	jne	SHORT $LN5@cf2_builde
; Line 163
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _params$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_cff_builder_start_point
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 164
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@cf2_builde
; Line 166
	mov	edx, DWORD PTR _callbacks$[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@cf2_builde
; Line 167
	mov	ecx, DWORD PTR _callbacks$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
$LN3@cf2_builde:
; Line 168
	jmp	SHORT $LN15@cf2_builde
$LN5@cf2_builde:
; Line 175
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	push	edx
	call	_cff_builder_add_point1
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 176
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@cf2_builde
; Line 178
	mov	eax, DWORD PTR _callbacks$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN15@cf2_builde
; Line 179
	mov	edx, DWORD PTR _callbacks$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], ecx
$LN15@cf2_builde:
; Line 182
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_builder_lineTo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_builder$ = -8						; size = 4
_outline$ = -4						; size = 4
_callbacks$ = 8						; size = 4
_params$ = 12						; size = 4
_cf2_builder_moveTo PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 122
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 124
	mov	eax, DWORD PTR _callbacks$[ebp]
	mov	DWORD PTR _outline$[ebp], eax
$LN9@cf2_builde:
; Line 130
	cmp	DWORD PTR _outline$[ebp], 0
	je	SHORT $LN5@cf2_builde
	mov	ecx, DWORD PTR _outline$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	jne	SHORT $LN8@cf2_builde
$LN5@cf2_builde:
	push	OFFSET $SG13340
	push	130					; 00000082H
	push	OFFSET $SG13341
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN8@cf2_builde:
	xor	edx, edx
	jne	SHORT $LN9@cf2_builde
$LN4@cf2_builde:
; Line 131
	mov	eax, DWORD PTR _params$[ebp]
	cmp	DWORD PTR [eax+32], 1
	je	SHORT $LN3@cf2_builde
	push	OFFSET $SG13346
	push	131					; 00000083H
	push	OFFSET $SG13347
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_builde:
	xor	ecx, ecx
	jne	SHORT $LN4@cf2_builde
; Line 133
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _builder$[ebp], eax
; Line 136
	mov	ecx, DWORD PTR _builder$[ebp]
	push	ecx
	call	_cff_builder_close_contour
	add	esp, 4
; Line 137
	mov	edx, DWORD PTR _builder$[ebp]
	mov	BYTE PTR [edx+64], 0
; Line 138
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_builder_moveTo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -8						; size = 4
_font$ = -4						; size = 4
_ptr$ = 8						; size = 4
_cf2_free_instance PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 98
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 99
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _font$[ebp], eax
; Line 102
	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN2@cf2_free_i
; Line 104
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$1[ebp], edx
$LN2@cf2_free_i:
; Line 109
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_free_instance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = -4						; size = 4
_outline$ = 8						; size = 4
_width$ = 12						; size = 4
_cf2_setGlyphWidth PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 85
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 86
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _decoder$[ebp], ecx
$LN4@cf2_setGly:
; Line 89
	cmp	DWORD PTR _decoder$[ebp], 0
	jne	SHORT $LN3@cf2_setGly
	push	OFFSET $SG13312
	push	89					; 00000059H
	push	OFFSET $SG13313
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_setGly:
	xor	edx, edx
	jne	SHORT $LN4@cf2_setGly
; Line 91
	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 32768				; 00008000H
	shr	eax, 16					; 00000010H
	movsx	ecx, ax
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+744], ecx
; Line 92
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_setGlyphWidth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_maxScale$ = -4						; size = 4
_transform$ = 8						; size = 4
_unitsPerEm$ = 12					; size = 4
_cf2_checkTransform PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN19@cf2_checkT:
; Line 62
	cmp	DWORD PTR _unitsPerEm$[ebp], 0
	jg	SHORT $LN18@cf2_checkT
	push	OFFSET $SG13273
	push	62					; 0000003eH
	push	OFFSET $SG13274
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN18@cf2_checkT:
	xor	eax, eax
	jne	SHORT $LN19@cf2_checkT
; Line 64
	mov	ecx, DWORD PTR _transform$[ebp]
	cmp	DWORD PTR [ecx], 0
	jle	SHORT $LN14@cf2_checkT
	mov	edx, DWORD PTR _transform$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jg	SHORT $LN13@cf2_checkT
$LN14@cf2_checkT:
; Line 65
	push	OFFSET $SG13277
	push	65					; 00000041H
	push	36					; 00000024H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 36					; 00000024H
	jmp	$LN20@cf2_checkT
$LN13@cf2_checkT:
; Line 67
	mov	eax, DWORD PTR _transform$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@cf2_checkT
	mov	ecx, DWORD PTR _transform$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN12@cf2_checkT
$LN9@cf2_checkT:
	push	OFFSET $SG13283
	push	67					; 00000043H
	push	OFFSET $SG13284
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN12@cf2_checkT:
	xor	edx, edx
	jne	SHORT $LN13@cf2_checkT
$LN8@cf2_checkT:
; Line 68
	mov	eax, DWORD PTR _transform$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@cf2_checkT
	mov	ecx, DWORD PTR _transform$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN7@cf2_checkT
$LN4@cf2_checkT:
	push	OFFSET $SG13290
	push	68					; 00000044H
	push	OFFSET $SG13291
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN7@cf2_checkT:
	xor	edx, edx
	jne	SHORT $LN8@cf2_checkT
; Line 70
	cmp	DWORD PTR _unitsPerEm$[ebp], 32767	; 00007fffH
	jle	SHORT $LN3@cf2_checkT
; Line 71
	push	OFFSET $SG13293
	push	71					; 00000047H
	push	164					; 000000a4H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 164				; 000000a4H
	jmp	SHORT $LN20@cf2_checkT
$LN3@cf2_checkT:
; Line 73
	mov	eax, DWORD PTR _unitsPerEm$[ebp]
	shl	eax, 16					; 00000010H
	push	eax
	push	131072000				; 07d00000H
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _maxScale$[ebp], eax
; Line 75
	mov	ecx, DWORD PTR _transform$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _maxScale$[ebp]
	jg	SHORT $LN1@cf2_checkT
	mov	eax, DWORD PTR _transform$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _maxScale$[ebp]
	jle	SHORT $LN2@cf2_checkT
$LN1@cf2_checkT:
; Line 76
	push	OFFSET $SG13300
	push	76					; 0000004cH
	push	164					; 000000a4H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 164				; 000000a4H
	jmp	SHORT $LN20@cf2_checkT
$LN2@cf2_checkT:
; Line 78
	xor	eax, eax
$LN20@cf2_checkT:
; Line 79
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_checkTransform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv167 = -44						; size = 4
tv146 = -40						; size = 4
_unitsPerEm$1 = -36					; size = 4
_stdHW$2 = -32						; size = 4
_emRatio$3 = -28					; size = 4
_ppem$ = -24						; size = 4
_subFont$ = -20						; size = 4
_boldenY$ = -16						; size = 4
_boldenX$ = -12						; size = 4
_needExtraSetup$ = -5					; size = 1
_decoder$ = -4						; size = 4
_font$ = 8						; size = 4
_transform$ = 12					; size = 4
_cf2_font_setup PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2font.c
; Line 243
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 245
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _decoder$[ebp], ecx
; Line 247
	mov	BYTE PTR _needExtraSetup$[ebp], 0
; Line 250
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	DWORD PTR _boldenX$[ebp], eax
; Line 251
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _boldenY$[ebp], edx
; Line 258
	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 262
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_cf2_getSubfont
	add	esp, 4
	mov	DWORD PTR _subFont$[ebp], eax
; Line 263
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+136]
	cmp	eax, DWORD PTR _subFont$[ebp]
	je	SHORT $LN14@cf2_font_s
; Line 265
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR _subFont$[ebp]
	mov	DWORD PTR [ecx+136], edx
; Line 266
	mov	BYTE PTR _needExtraSetup$[ebp], 1
$LN14@cf2_font_s:
; Line 272
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cf2_getPpemY
	add	esp, 4
	mov	DWORD PTR _ppem$[ebp], eax
; Line 273
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	cmp	edx, DWORD PTR _ppem$[ebp]
	je	SHORT $LN13@cf2_font_s
; Line 275
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _ppem$[ebp]
	mov	DWORD PTR [eax+84], ecx
; Line 276
	mov	BYTE PTR _needExtraSetup$[ebp], 1
$LN13@cf2_font_s:
; Line 280
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	mov	ecx, DWORD PTR _font$[ebp]
	mov	BYTE PTR [ecx+140], al
; Line 286
	push	16					; 00000010H
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _transform$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN12@cf2_font_s
; Line 290
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _transform$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], edx
; Line 292
	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 296
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 36					; 00000024H
	mov	eax, DWORD PTR _transform$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
; Line 298
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [ecx+72], 65536		; 00010000H
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+60], 65536		; 00010000H
; Line 300
	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+68], 0
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [ecx+64], 0
; Line 302
	mov	BYTE PTR _needExtraSetup$[ebp], 1
$LN12@cf2_font_s:
; Line 312
	mov	edx, DWORD PTR _font$[ebp]
	movzx	eax, BYTE PTR [edx+142]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 2
	cmp	eax, edx
	je	SHORT $LN11@cf2_font_s
; Line 315
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	mov	edx, DWORD PTR _font$[ebp]
	mov	BYTE PTR [edx+142], cl
; Line 318
	mov	BYTE PTR _needExtraSetup$[ebp], 1
$LN11@cf2_font_s:
; Line 323
	movzx	eax, BYTE PTR _needExtraSetup$[ebp]
	test	eax, eax
	je	$LN15@cf2_font_s
; Line 336
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR _unitsPerEm$1[ebp], edx
; Line 339
	cmp	DWORD PTR _unitsPerEm$1[ebp], 0
	jne	SHORT $LN9@cf2_font_s
; Line 340
	mov	DWORD PTR _unitsPerEm$1[ebp], 1000	; 000003e8H
$LN9@cf2_font_s:
; Line 343
	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+84], 262144		; 00040000H
	jge	SHORT $LN17@cf2_font_s
	mov	DWORD PTR tv146[ebp], 262144		; 00040000H
	jmp	SHORT $LN18@cf2_font_s
$LN17@cf2_font_s:
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR tv146[ebp], edx
$LN18@cf2_font_s:
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR _ppem$[ebp], eax
; Line 354
	mov	eax, 65536000				; 03e80000H
	cdq
	idiv	DWORD PTR _unitsPerEm$1[ebp]
	mov	DWORD PTR _emRatio$3[ebp], eax
; Line 355
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_cf2_getStdVW
	add	esp, 4
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+176], eax
; Line 357
	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+176], 0
	jg	SHORT $LN8@cf2_font_s
; Line 358
	mov	ecx, DWORD PTR _emRatio$3[ebp]
	push	ecx
	push	4915200					; 004b0000H
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+176], eax
$LN8@cf2_font_s:
; Line 360
	cmp	DWORD PTR _boldenX$[ebp], 0
	jle	SHORT $LN7@cf2_font_s
; Line 365
	mov	eax, DWORD PTR _ppem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unitsPerEm$1[ebp]
	shl	ecx, 16					; 00000010H
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	cmp	DWORD PTR _boldenX$[ebp], eax
	jle	SHORT $LN19@cf2_font_s
	mov	edx, DWORD PTR _boldenX$[ebp]
	mov	DWORD PTR tv167[ebp], edx
	jmp	SHORT $LN20@cf2_font_s
$LN19@cf2_font_s:
	mov	eax, DWORD PTR _ppem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unitsPerEm$1[ebp]
	shl	ecx, 16					; 00000010H
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR tv167[ebp], eax
$LN20@cf2_font_s:
	mov	edx, DWORD PTR tv167[ebp]
	mov	DWORD PTR _boldenX$[ebp], edx
; Line 378
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 144				; 00000090H
	push	eax
	push	0
	mov	ecx, DWORD PTR _boldenX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 184				; 000000b8H
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	mov	edx, DWORD PTR _ppem$[ebp]
	push	edx
	mov	eax, DWORD PTR _emRatio$3[ebp]
	push	eax
	call	_cf2_computeDarkening
	add	esp, 28					; 0000001cH
; Line 380
	jmp	SHORT $LN6@cf2_font_s
$LN7@cf2_font_s:
; Line 387
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 144				; 00000090H
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	movzx	eax, BYTE PTR [edx+142]
	push	eax
	push	0
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 184				; 000000b8H
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+176]
	push	eax
	mov	ecx, DWORD PTR _ppem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _emRatio$3[ebp]
	push	edx
	call	_cf2_computeDarkening
	add	esp, 28					; 0000001cH
$LN6@cf2_font_s:
; Line 399
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cf2_getStdHW
	add	esp, 4
	mov	DWORD PTR _stdHW$2[ebp], eax
; Line 401
	cmp	DWORD PTR _stdHW$2[ebp], 0
	jle	SHORT $LN5@cf2_font_s
	mov	ecx, DWORD PTR _stdHW$2[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [edx+176], ecx
	jle	SHORT $LN5@cf2_font_s
; Line 402
	mov	eax, DWORD PTR _emRatio$3[ebp]
	push	eax
	push	4915200					; 004b0000H
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [ecx+180], eax
; Line 403
	jmp	SHORT $LN4@cf2_font_s
$LN5@cf2_font_s:
; Line 406
	mov	edx, DWORD PTR _emRatio$3[ebp]
	push	edx
	push	7208960					; 006e0000H
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [ecx+180], eax
$LN4@cf2_font_s:
; Line 415
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 144				; 00000090H
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	movzx	ecx, BYTE PTR [eax+142]
	push	ecx
	mov	edx, DWORD PTR _boldenY$[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 188				; 000000bcH
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+180]
	push	edx
	mov	eax, DWORD PTR _ppem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _emRatio$3[ebp]
	push	ecx
	call	_cf2_computeDarkening
	add	esp, 28					; 0000001cH
; Line 417
	mov	edx, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [edx+184], 0
	jne	SHORT $LN2@cf2_font_s
	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+188], 0
	je	SHORT $LN3@cf2_font_s
$LN2@cf2_font_s:
; Line 418
	mov	ecx, DWORD PTR _font$[ebp]
	mov	BYTE PTR [ecx+141], 1
; Line 419
	jmp	SHORT $LN1@cf2_font_s
$LN3@cf2_font_s:
; Line 420
	mov	edx, DWORD PTR _font$[ebp]
	mov	BYTE PTR [edx+141], 0
$LN1@cf2_font_s:
; Line 422
	mov	eax, DWORD PTR _font$[ebp]
	mov	BYTE PTR [eax+192], 0
; Line 425
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 196				; 000000c4H
	push	edx
	call	_cf2_blues_init
	add	esp, 8
$LN15@cf2_font_s:
; Line 427
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_font_setup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_x$1 = -80						; size = 4
_ydelta$2 = -76						; size = 4
_xdelta$3 = -72						; size = 4
_x$4 = -68						; size = 4
_ydelta$5 = -64						; size = 4
_xdelta$6 = -60						; size = 4
_x$7 = -56						; size = 4
_ydelta$8 = -52						; size = 4
_xdelta$9 = -48						; size = 4
_y4$10 = -44						; size = 4
_x4$11 = -40						; size = 4
_y3$12 = -36						; size = 4
_x3$13 = -32						; size = 4
_y2$14 = -28						; size = 4
_x2$15 = -24						; size = 4
_y1$16 = -20						; size = 4
_x1$17 = -16						; size = 4
_logBase2$ = -12					; size = 4
_scaledStem$ = -8					; size = 4
_stemWidthPer1000$ = -4					; size = 4
_emRatio$ = 8						; size = 4
_ppem$ = 12						; size = 4
_stemWidth$ = 16					; size = 4
_darkenAmount$ = 20					; size = 4
_boldenAmount$ = 24					; size = 4
_stemDarkened$ = 28					; size = 1
_darkenParams$ = 32					; size = 4
_cf2_computeDarkening PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2font.c
; Line 59
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 114
	mov	eax, DWORD PTR _darkenAmount$[ebp]
	mov	DWORD PTR [eax], 0
; Line 116
	cmp	DWORD PTR _boldenAmount$[ebp], 0
	jne	SHORT $LN16@cf2_comput
	movzx	ecx, BYTE PTR _stemDarkened$[ebp]
	test	ecx, ecx
	jne	SHORT $LN16@cf2_comput
; Line 117
	jmp	$LN17@cf2_comput
$LN16@cf2_comput:
; Line 120
	cmp	DWORD PTR _emRatio$[ebp], 655		; 0000028fH
	jge	SHORT $LN15@cf2_comput
; Line 121
	jmp	$LN17@cf2_comput
$LN15@cf2_comput:
; Line 123
	movzx	edx, BYTE PTR _stemDarkened$[ebp]
	test	edx, edx
	je	$LN14@cf2_comput
; Line 125
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _darkenParams$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _x1$17[ebp], eax
; Line 126
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _darkenParams$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _y1$16[ebp], eax
; Line 127
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _darkenParams$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _x2$15[ebp], eax
; Line 128
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _darkenParams$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _y2$14[ebp], ecx
; Line 129
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _darkenParams$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _x3$13[ebp], ecx
; Line 130
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _darkenParams$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _y3$12[ebp], edx
; Line 131
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _darkenParams$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _x4$11[ebp], eax
; Line 132
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _darkenParams$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _y4$10[ebp], ecx
; Line 140
	mov	edx, DWORD PTR _emRatio$[ebp]
	push	edx
	mov	eax, DWORD PTR _stemWidth$[ebp]
	add	eax, DWORD PTR _boldenAmount$[ebp]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _stemWidthPer1000$[ebp], eax
; Line 157
	mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
	push	ecx
	call	_FT_MSB
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _ppem$[ebp]
	push	edx
	call	_FT_MSB
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _logBase2$[ebp], esi
; Line 159
	cmp	DWORD PTR _logBase2$[ebp], 46		; 0000002eH
	jl	SHORT $LN13@cf2_comput
; Line 161
	mov	eax, DWORD PTR _x4$11[ebp]
	shl	eax, 16					; 00000010H
	mov	DWORD PTR _scaledStem$[ebp], eax
; Line 162
	jmp	SHORT $LN12@cf2_comput
$LN13@cf2_comput:
; Line 163
	mov	ecx, DWORD PTR _ppem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stemWidthPer1000$[ebp]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	DWORD PTR _scaledStem$[ebp], eax
$LN12@cf2_comput:
; Line 167
	mov	eax, DWORD PTR _x1$17[ebp]
	shl	eax, 16					; 00000010H
	cmp	DWORD PTR _scaledStem$[ebp], eax
	jge	SHORT $LN11@cf2_comput
; Line 168
	mov	ecx, DWORD PTR _ppem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y1$16[ebp]
	shl	edx, 16					; 00000010H
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _darkenAmount$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	$LN10@cf2_comput
$LN11@cf2_comput:
; Line 170
	mov	edx, DWORD PTR _x2$15[ebp]
	shl	edx, 16					; 00000010H
	cmp	DWORD PTR _scaledStem$[ebp], edx
	jge	SHORT $LN9@cf2_comput
; Line 172
	mov	eax, DWORD PTR _x2$15[ebp]
	sub	eax, DWORD PTR _x1$17[ebp]
	mov	DWORD PTR _xdelta$9[ebp], eax
; Line 173
	mov	ecx, DWORD PTR _y2$14[ebp]
	sub	ecx, DWORD PTR _y1$16[ebp]
	mov	DWORD PTR _ydelta$8[ebp], ecx
; Line 175
	mov	edx, DWORD PTR _ppem$[ebp]
	push	edx
	mov	eax, DWORD PTR _x1$17[ebp]
	shl	eax, 16					; 00000010H
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _x$7[ebp], ecx
; Line 178
	cmp	DWORD PTR _xdelta$9[ebp], 0
	jne	SHORT $LN8@cf2_comput
; Line 179
	jmp	SHORT $Try_x3$19
$LN8@cf2_comput:
; Line 182
	mov	edx, DWORD PTR _xdelta$9[ebp]
	push	edx
	mov	eax, DWORD PTR _ydelta$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$7[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	edx, DWORD PTR _ppem$[ebp]
	push	edx
	mov	eax, DWORD PTR _y1$16[ebp]
	shl	eax, 16					; 00000010H
	push	eax
	call	_FT_DivFix
	add	esp, 8
	add	esi, eax
	mov	ecx, DWORD PTR _darkenAmount$[ebp]
	mov	DWORD PTR [ecx], esi
	jmp	$LN10@cf2_comput
$LN9@cf2_comput:
; Line 185
	mov	edx, DWORD PTR _x3$13[ebp]
	shl	edx, 16					; 00000010H
	cmp	DWORD PTR _scaledStem$[ebp], edx
	jge	SHORT $LN6@cf2_comput
$Try_x3$19:
; Line 189
	mov	eax, DWORD PTR _x3$13[ebp]
	sub	eax, DWORD PTR _x2$15[ebp]
	mov	DWORD PTR _xdelta$6[ebp], eax
; Line 190
	mov	ecx, DWORD PTR _y3$12[ebp]
	sub	ecx, DWORD PTR _y2$14[ebp]
	mov	DWORD PTR _ydelta$5[ebp], ecx
; Line 192
	mov	edx, DWORD PTR _ppem$[ebp]
	push	edx
	mov	eax, DWORD PTR _x2$15[ebp]
	shl	eax, 16					; 00000010H
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _x$4[ebp], ecx
; Line 195
	cmp	DWORD PTR _xdelta$6[ebp], 0
	jne	SHORT $LN5@cf2_comput
; Line 196
	jmp	SHORT $Try_x4$20
$LN5@cf2_comput:
; Line 199
	mov	edx, DWORD PTR _xdelta$6[ebp]
	push	edx
	mov	eax, DWORD PTR _ydelta$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$4[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	edx, DWORD PTR _ppem$[ebp]
	push	edx
	mov	eax, DWORD PTR _y2$14[ebp]
	shl	eax, 16					; 00000010H
	push	eax
	call	_FT_DivFix
	add	esp, 8
	add	esi, eax
	mov	ecx, DWORD PTR _darkenAmount$[ebp]
	mov	DWORD PTR [ecx], esi
	jmp	$LN10@cf2_comput
$LN6@cf2_comput:
; Line 203
	mov	edx, DWORD PTR _x4$11[ebp]
	shl	edx, 16					; 00000010H
	cmp	DWORD PTR _scaledStem$[ebp], edx
	jge	SHORT $Use_y4$21
$Try_x4$20:
; Line 207
	mov	eax, DWORD PTR _x4$11[ebp]
	sub	eax, DWORD PTR _x3$13[ebp]
	mov	DWORD PTR _xdelta$3[ebp], eax
; Line 208
	mov	ecx, DWORD PTR _y4$10[ebp]
	sub	ecx, DWORD PTR _y3$12[ebp]
	mov	DWORD PTR _ydelta$2[ebp], ecx
; Line 210
	mov	edx, DWORD PTR _ppem$[ebp]
	push	edx
	mov	eax, DWORD PTR _x3$13[ebp]
	shl	eax, 16					; 00000010H
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _x$1[ebp], ecx
; Line 213
	cmp	DWORD PTR _xdelta$3[ebp], 0
	jne	SHORT $LN2@cf2_comput
; Line 214
	jmp	SHORT $Use_y4$21
$LN2@cf2_comput:
; Line 217
	mov	edx, DWORD PTR _xdelta$3[ebp]
	push	edx
	mov	eax, DWORD PTR _ydelta$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$1[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	edx, DWORD PTR _ppem$[ebp]
	push	edx
	mov	eax, DWORD PTR _y3$12[ebp]
	shl	eax, 16					; 00000010H
	push	eax
	call	_FT_DivFix
	add	esp, 8
	add	esi, eax
	mov	ecx, DWORD PTR _darkenAmount$[ebp]
	mov	DWORD PTR [ecx], esi
; Line 221
	jmp	SHORT $LN10@cf2_comput
$Use_y4$21:
; Line 224
	mov	edx, DWORD PTR _ppem$[ebp]
	push	edx
	mov	eax, DWORD PTR _y4$10[ebp]
	shl	eax, 16					; 00000010H
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _darkenAmount$[ebp]
	mov	DWORD PTR [ecx], eax
$LN10@cf2_comput:
; Line 229
	mov	edx, DWORD PTR _emRatio$[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _darkenAmount$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _darkenAmount$[ebp]
	mov	DWORD PTR [edx], eax
$LN14@cf2_comput:
; Line 233
	mov	eax, DWORD PTR _boldenAmount$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _darkenAmount$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _darkenAmount$[ebp]
	mov	DWORD PTR [edx], eax
$LN17@cf2_comput:
; Line 234
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_computeDarkening ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv1174 = -16240						; size = 4
tv1167 = -16236						; size = 4
tv875 = -16232						; size = 4
tv478 = -16228						; size = 4
tv418 = -16224						; size = 4
tv402 = -16220						; size = 4
tv340 = -16216						; size = 4
tv327 = -16212						; size = 4
tv281 = -16208						; size = 4
tv274 = -16204						; size = 4
tv202 = -16200						; size = 4
tv175 = -16196						; size = 4
tv162 = -16192						; size = 4
_v$1 = -16188						; size = 4
_v$2 = -16184						; size = 4
_v$3 = -16180						; size = 4
_v$4 = -16176						; size = 4
_v$5 = -16172						; size = 4
_y3$6 = -16168						; size = 4
_y2$7 = -16164						; size = 4
_y1$8 = -16160						; size = 4
_x3$9 = -16156						; size = 4
_x2$10 = -16152						; size = 4
_x1$11 = -16148						; size = 4
_alternate$12 = -16141					; size = 1
_index$13 = -16140					; size = 4
_count$14 = -16136					; size = 4
_y3$15 = -16132						; size = 4
_x3$16 = -16128						; size = 4
_y2$17 = -16124						; size = 4
_x2$18 = -16120						; size = 4
_y1$19 = -16116						; size = 4
_x1$20 = -16112						; size = 4
_index$21 = -16108					; size = 4
_count$22 = -16104					; size = 4
_y3$23 = -16100						; size = 4
_x3$24 = -16096						; size = 4
_y2$25 = -16092						; size = 4
_x2$26 = -16088						; size = 4
_y1$27 = -16084						; size = 4
_x1$28 = -16080						; size = 4
_index$29 = -16076					; size = 4
_count$30 = -16072					; size = 4
_y3$31 = -16068						; size = 4
_x3$32 = -16064						; size = 4
_y2$33 = -16060						; size = 4
_x2$34 = -16056						; size = 4
_y1$35 = -16052						; size = 4
_x1$36 = -16048						; size = 4
_index$37 = -16044					; size = 4
_count$38 = -16040					; size = 4
_counterMask$39 = -16032				; size = 28
_counterHintMap$40 = -15996				; size = 3868
_error2$41 = -12124					; size = 4
_dummyWidth$42 = -12116					; size = 4
_component$43 = -12104					; size = 16
_bchar$44 = -12084					; size = 4
_achar$45 = -12080					; size = 4
_op2$46 = -12073					; size = 1
_subrIndex$47 = -12072					; size = 4
_y3$48 = -12068						; size = 4
_x3$49 = -12064						; size = 4
_y2$50 = -12060						; size = 4
_x2$51 = -12056						; size = 4
_y1$52 = -12052						; size = 4
_x1$53 = -12048						; size = 4
_index$54 = -12044					; size = 4
_count$55 = -12040					; size = 4
_v$56 = -12036						; size = 4
_isX$57 = -12029					; size = 1
_count$58 = -12028					; size = 4
_index$59 = -12024					; size = 4
_count$60 = -12020					; size = 4
_index$61 = -12016					; size = 4
_glyphPath$ = -12008					; size = 11784
_hintMask$ = -216					; size = 28
_vStemHintArray$ = -180					; size = 32
_hStemHintArray$ = -140					; size = 32
_charstringIndex$ = -104				; size = 4
_charstring$ = -100					; size = 4
_haveWidth$ = -89					; size = 1
_subrStack$ = -80					; size = 32
_instructionLimit$ = -44				; size = 4
_op1$ = -37						; size = 1
_opStack$ = -36						; size = 4
_hintOriginY$ = -32					; size = 4
_nominalWidthX$ = -28					; size = 4
_scaleY$ = -24						; size = 4
_memory$ = -20						; size = 4
_error$ = -16						; size = 4
_decoder$ = -12						; size = 4
_lastError$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_font$ = 8						; size = 4
_buf$ = 12						; size = 4
_callbacks$ = 16					; size = 4
_translation$ = 20					; size = 4
_doingSeac$ = 24					; size = 1
_curX$ = 28						; size = 4
_curY$ = 32						; size = 4
_width$ = 36						; size = 4
_cf2_interpT2CharString PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2intrp.c
; Line 429
	push	ebp
	mov	ebp, esp
	mov	eax, 16240				; 00003f70H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-16240]
	mov	ecx, 4060				; 00000fdcH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 431
	mov	DWORD PTR _lastError$[ebp], 0
; Line 434
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _decoder$[ebp], ecx
; Line 436
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 4
	mov	DWORD PTR _error$[ebp], edx
; Line 437
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 439
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _scaleY$[ebp], eax
; Line 440
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_cf2_getNominalWidthX
	add	esp, 4
	mov	DWORD PTR _nominalWidthX$[ebp], eax
; Line 443
	mov	edx, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _hintOriginY$[ebp], edx
; Line 445
	mov	DWORD PTR _opStack$[ebp], 0
; Line 449
	mov	DWORD PTR _instructionLimit$[ebp], 20000000 ; 01312d00H
; Line 454
	mov	DWORD PTR _charstring$[ebp], 0
; Line 456
	mov	DWORD PTR _charstringIndex$[ebp], -1
; Line 472
	push	16					; 00000010H
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	lea	edx, DWORD PTR _subrStack$[ebp]
	push	edx
	call	_cf2_arrstack_init
	add	esp, 16					; 00000010H
; Line 476
	push	20					; 00000014H
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hStemHintArray$[ebp]
	push	edx
	call	_cf2_arrstack_init
	add	esp, 16					; 00000010H
; Line 480
	push	20					; 00000014H
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vStemHintArray$[ebp]
	push	edx
	call	_cf2_arrstack_init
	add	esp, 16					; 00000010H
; Line 483
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hintMask$[ebp]
	push	ecx
	call	_cf2_hintmask_init
	add	esp, 8
; Line 500
	mov	edx, DWORD PTR _translation$[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 196				; 000000c4H
	push	eax
	mov	ecx, DWORD PTR _hintOriginY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hintMask$[ebp]
	push	edx
	lea	eax, DWORD PTR _vStemHintArray$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hStemHintArray$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scaleY$[ebp]
	push	edx
	mov	eax, DWORD PTR _callbacks$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyphPath$[ebp]
	push	edx
	call	_cf2_glyphpath_init
	add	esp, 40					; 00000028H
; Line 518
	mov	BYTE PTR _haveWidth$[ebp], 0
; Line 519
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cf2_getDefaultWidthX
	add	esp, 4
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 529
	mov	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_cf2_stack_init
	add	esp, 8
	mov	DWORD PTR _opStack$[ebp], eax
; Line 530
	cmp	DWORD PTR _opStack$[ebp], 0
	jne	SHORT $LN427@cf2_interp
; Line 532
	push	OFFSET $SG14720
	push	532					; 00000214H
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	mov	DWORD PTR _lastError$[ebp], eax
; Line 533
	jmp	$exit$480
$LN427@cf2_interp:
; Line 540
	push	11					; 0000000bH
	lea	ecx, DWORD PTR _subrStack$[ebp]
	push	ecx
	call	_cf2_arrstack_setCount
	add	esp, 8
; Line 542
	lea	edx, DWORD PTR _subrStack$[ebp]
	push	edx
	call	_cf2_arrstack_getBuffer
	add	esp, 4
	mov	DWORD PTR _charstring$[ebp], eax
; Line 543
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _charstring$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 545
	mov	DWORD PTR _charstringIndex$[ebp], 0
; Line 548
	mov	ecx, DWORD PTR _error$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN426@cf2_interp
; Line 549
	jmp	$exit$480
$LN426@cf2_interp:
; Line 552
	mov	edx, 1
	test	edx, edx
	je	$LN424@cf2_interp
; Line 554
	mov	eax, DWORD PTR _charstring$[ebp]
	push	eax
	call	_cf2_buf_isEnd
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN423@cf2_interp
; Line 558
	cmp	DWORD PTR _charstringIndex$[ebp], 0
	je	SHORT $LN422@cf2_interp
; Line 559
	mov	BYTE PTR _op1$[ebp], 11			; 0000000bH
; Line 560
	jmp	SHORT $LN421@cf2_interp
$LN422@cf2_interp:
; Line 561
	mov	BYTE PTR _op1$[ebp], 14			; 0000000eH
$LN421@cf2_interp:
; Line 563
	jmp	SHORT $LN420@cf2_interp
$LN423@cf2_interp:
; Line 564
	mov	edx, DWORD PTR _charstring$[ebp]
	push	edx
	call	_cf2_buf_readByte
	add	esp, 4
	mov	BYTE PTR _op1$[ebp], al
$LN420@cf2_interp:
; Line 567
	mov	eax, DWORD PTR _error$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN419@cf2_interp
; Line 568
	jmp	$exit$480
$LN419@cf2_interp:
; Line 570
	mov	ecx, DWORD PTR _instructionLimit$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _instructionLimit$[ebp], ecx
; Line 571
	jne	SHORT $LN418@cf2_interp
; Line 573
	push	OFFSET $SG14734
	push	573					; 0000023dH
	push	18					; 00000012H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 18					; 00000012H
	mov	DWORD PTR _lastError$[ebp], eax
; Line 574
	jmp	$exit$480
$LN418@cf2_interp:
; Line 577
	movzx	edx, BYTE PTR _op1$[ebp]
	mov	DWORD PTR tv162[ebp], edx
	cmp	DWORD PTR tv162[ebp], 31		; 0000001fH
	ja	$LN31@cf2_interp
	mov	eax, DWORD PTR tv162[ebp]
	movzx	ecx, BYTE PTR $LN464@cf2_interp[eax]
	jmp	DWORD PTR $LN478@cf2_interp[ecx*4]
$LN415@cf2_interp:
; Line 587
	mov	edx, 4
	imul	eax, edx, 53
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN411@cf2_interp
	movzx	ecx, BYTE PTR _op1$[ebp]
	push	ecx
	push	OFFSET $SG14744
	call	_FT_Message
	add	esp, 8
$LN411@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN415@cf2_interp
; Line 588
	jmp	$LN416@cf2_interp
$LN410@cf2_interp:
; Line 592
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN406@cf2_interp
	movzx	edx, BYTE PTR _op1$[ebp]
	cmp	edx, 18					; 00000012H
	jne	SHORT $LN430@cf2_interp
	mov	DWORD PTR tv175[ebp], OFFSET $SG14750
	jmp	SHORT $LN431@cf2_interp
$LN430@cf2_interp:
	mov	DWORD PTR tv175[ebp], OFFSET $SG14751
$LN431@cf2_interp:
	mov	eax, DWORD PTR tv175[ebp]
	push	eax
	call	_FT_Message
	add	esp, 4
$LN406@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN410@cf2_interp
; Line 595
	lea	edx, DWORD PTR _hintMask$[ebp]
	push	edx
	call	_cf2_hintmask_isValid
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN405@cf2_interp
$LN404@cf2_interp:
; Line 598
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN401@cf2_interp
	push	OFFSET $SG14757
	call	_FT_Message
	add	esp, 4
$LN401@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN404@cf2_interp
; Line 599
	jmp	$LN416@cf2_interp
$LN405@cf2_interp:
; Line 607
	push	0
	lea	ecx, DWORD PTR _haveWidth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	lea	eax, DWORD PTR _hStemHintArray$[ebp]
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	call	_cf2_doStems
	add	esp, 24					; 00000018H
; Line 609
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	movzx	edx, BYTE PTR [ecx+753]
	test	edx, edx
	je	SHORT $LN400@cf2_interp
; Line 610
	jmp	$exit$480
$LN400@cf2_interp:
; Line 612
	jmp	$LN416@cf2_interp
$LN399@cf2_interp:
; Line 616
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN395@cf2_interp
	movzx	edx, BYTE PTR _op1$[ebp]
	cmp	edx, 23					; 00000017H
	jne	SHORT $LN432@cf2_interp
	mov	DWORD PTR tv202[ebp], OFFSET $SG14764
	jmp	SHORT $LN433@cf2_interp
$LN432@cf2_interp:
	mov	DWORD PTR tv202[ebp], OFFSET $SG14765
$LN433@cf2_interp:
	mov	eax, DWORD PTR tv202[ebp]
	push	eax
	call	_FT_Message
	add	esp, 4
$LN395@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN399@cf2_interp
; Line 619
	lea	edx, DWORD PTR _hintMask$[ebp]
	push	edx
	call	_cf2_hintmask_isValid
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN394@cf2_interp
$LN393@cf2_interp:
; Line 622
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN390@cf2_interp
	push	OFFSET $SG14771
	call	_FT_Message
	add	esp, 4
$LN390@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN393@cf2_interp
; Line 623
	jmp	$LN416@cf2_interp
$LN394@cf2_interp:
; Line 631
	push	0
	lea	ecx, DWORD PTR _haveWidth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	lea	eax, DWORD PTR _vStemHintArray$[ebp]
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	call	_cf2_doStems
	add	esp, 24					; 00000018H
; Line 633
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	movzx	edx, BYTE PTR [ecx+753]
	test	edx, edx
	je	SHORT $LN389@cf2_interp
; Line 634
	jmp	$exit$480
$LN389@cf2_interp:
; Line 636
	jmp	$LN416@cf2_interp
$LN388@cf2_interp:
; Line 639
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN384@cf2_interp
	push	OFFSET $SG14778
	call	_FT_Message
	add	esp, 4
$LN384@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN388@cf2_interp
; Line 641
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_count
	add	esp, 4
	cmp	eax, 1
	jbe	SHORT $LN383@cf2_interp
	movzx	ecx, BYTE PTR _haveWidth$[ebp]
	test	ecx, ecx
	jne	SHORT $LN383@cf2_interp
; Line 642
	push	0
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _nominalWidthX$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx], eax
$LN383@cf2_interp:
; Line 645
	mov	BYTE PTR _haveWidth$[ebp], 1
; Line 647
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+132]
	movzx	ecx, BYTE PTR [eax+753]
	test	ecx, ecx
	je	SHORT $LN382@cf2_interp
; Line 648
	jmp	$exit$480
$LN382@cf2_interp:
; Line 650
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_popFixed
	add	esp, 4
	add	eax, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _curY$[ebp], eax
; Line 652
	mov	eax, DWORD PTR _curY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curX$[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyphPath$[ebp]
	push	edx
	call	_cf2_glyphpath_moveTo
	add	esp, 12					; 0000000cH
; Line 654
	jmp	$LN416@cf2_interp
$LN381@cf2_interp:
; Line 659
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_count
	add	esp, 4
	mov	DWORD PTR _count$60[ebp], eax
$LN380@cf2_interp:
; Line 662
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN377@cf2_interp
	push	OFFSET $SG14788
	call	_FT_Message
	add	esp, 4
$LN377@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN380@cf2_interp
; Line 664
	mov	DWORD PTR _index$61[ebp], 0
	jmp	SHORT $LN376@cf2_interp
$LN375@cf2_interp:
	mov	ecx, DWORD PTR _index$61[ebp]
	add	ecx, 2
	mov	DWORD PTR _index$61[ebp], ecx
$LN376@cf2_interp:
	mov	edx, DWORD PTR _index$61[ebp]
	cmp	edx, DWORD PTR _count$60[ebp]
	jae	SHORT $LN374@cf2_interp
; Line 666
	mov	eax, DWORD PTR _index$61[ebp]
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _curX$[ebp], eax
; Line 667
	mov	edx, DWORD PTR _index$61[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _curY$[ebp], eax
; Line 669
	mov	ecx, DWORD PTR _curY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curX$[ebp]
	push	edx
	lea	eax, DWORD PTR _glyphPath$[ebp]
	push	eax
	call	_cf2_glyphpath_lineTo
	add	esp, 12					; 0000000cH
; Line 670
	jmp	SHORT $LN375@cf2_interp
$LN374@cf2_interp:
; Line 672
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_clear
	add	esp, 4
; Line 674
	jmp	$LN426@cf2_interp
$LN373@cf2_interp:
; Line 680
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_count
	add	esp, 4
	mov	DWORD PTR _count$58[ebp], eax
; Line 682
	movzx	eax, BYTE PTR _op1$[ebp]
	cmp	eax, 6
	jne	SHORT $LN434@cf2_interp
	mov	DWORD PTR tv274[ebp], 1
	jmp	SHORT $LN435@cf2_interp
$LN434@cf2_interp:
	mov	DWORD PTR tv274[ebp], 0
$LN435@cf2_interp:
	mov	cl, BYTE PTR tv274[ebp]
	mov	BYTE PTR _isX$57[ebp], cl
$LN372@cf2_interp:
; Line 685
	mov	edx, 4
	imul	eax, edx, 53
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN369@cf2_interp
	movzx	ecx, BYTE PTR _isX$57[ebp]
	test	ecx, ecx
	je	SHORT $LN436@cf2_interp
	mov	DWORD PTR tv281[ebp], OFFSET $SG14800
	jmp	SHORT $LN437@cf2_interp
$LN436@cf2_interp:
	mov	DWORD PTR tv281[ebp], OFFSET $SG14801
$LN437@cf2_interp:
	mov	edx, DWORD PTR tv281[ebp]
	push	edx
	call	_FT_Message
	add	esp, 4
$LN369@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN372@cf2_interp
; Line 687
	mov	DWORD PTR _index$59[ebp], 0
	jmp	SHORT $LN368@cf2_interp
$LN367@cf2_interp:
	mov	ecx, DWORD PTR _index$59[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$59[ebp], ecx
$LN368@cf2_interp:
	mov	edx, DWORD PTR _index$59[ebp]
	cmp	edx, DWORD PTR _count$58[ebp]
	jae	$LN366@cf2_interp
; Line 689
	mov	eax, DWORD PTR _index$59[ebp]
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	mov	DWORD PTR _v$56[ebp], eax
; Line 692
	movzx	edx, BYTE PTR _isX$57[ebp]
	test	edx, edx
	je	SHORT $LN365@cf2_interp
; Line 693
	mov	eax, DWORD PTR _curX$[ebp]
	add	eax, DWORD PTR _v$56[ebp]
	mov	DWORD PTR _curX$[ebp], eax
; Line 694
	jmp	SHORT $LN364@cf2_interp
$LN365@cf2_interp:
; Line 695
	mov	ecx, DWORD PTR _curY$[ebp]
	add	ecx, DWORD PTR _v$56[ebp]
	mov	DWORD PTR _curY$[ebp], ecx
$LN364@cf2_interp:
; Line 697
	movzx	edx, BYTE PTR _isX$57[ebp]
	test	edx, edx
	jne	SHORT $LN438@cf2_interp
	mov	DWORD PTR tv327[ebp], 1
	jmp	SHORT $LN439@cf2_interp
$LN438@cf2_interp:
	mov	DWORD PTR tv327[ebp], 0
$LN439@cf2_interp:
	mov	al, BYTE PTR tv327[ebp]
	mov	BYTE PTR _isX$57[ebp], al
; Line 699
	mov	ecx, DWORD PTR _curY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curX$[ebp]
	push	edx
	lea	eax, DWORD PTR _glyphPath$[ebp]
	push	eax
	call	_cf2_glyphpath_lineTo
	add	esp, 12					; 0000000cH
; Line 700
	jmp	$LN367@cf2_interp
$LN366@cf2_interp:
; Line 702
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_clear
	add	esp, 4
; Line 704
	jmp	$LN426@cf2_interp
$LN363@cf2_interp:
; Line 709
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_count
	add	esp, 4
	mov	DWORD PTR _count$55[ebp], eax
; Line 710
	mov	DWORD PTR _index$54[ebp], 0
$LN362@cf2_interp:
; Line 714
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN359@cf2_interp
	movzx	edx, BYTE PTR _op1$[ebp]
	cmp	edx, 24					; 00000018H
	jne	SHORT $LN440@cf2_interp
	mov	DWORD PTR tv340[ebp], OFFSET $SG14815
	jmp	SHORT $LN441@cf2_interp
$LN440@cf2_interp:
	mov	DWORD PTR tv340[ebp], OFFSET $SG14816
$LN441@cf2_interp:
	mov	eax, DWORD PTR tv340[ebp]
	push	eax
	call	_FT_Message
	add	esp, 4
$LN359@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN362@cf2_interp
$LN360@cf2_interp:
; Line 716
	mov	edx, DWORD PTR _index$54[ebp]
	add	edx, 6
	cmp	edx, DWORD PTR _count$55[ebp]
	ja	$LN357@cf2_interp
; Line 718
	mov	eax, DWORD PTR _index$54[ebp]
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _x1$53[ebp], eax
; Line 719
	mov	edx, DWORD PTR _index$54[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _y1$52[ebp], eax
; Line 720
	mov	ecx, DWORD PTR _index$54[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _x1$53[ebp]
	mov	DWORD PTR _x2$51[ebp], eax
; Line 721
	mov	eax, DWORD PTR _index$54[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _y1$52[ebp]
	mov	DWORD PTR _y2$50[ebp], eax
; Line 722
	mov	edx, DWORD PTR _index$54[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _x2$51[ebp]
	mov	DWORD PTR _x3$49[ebp], eax
; Line 723
	mov	ecx, DWORD PTR _index$54[ebp]
	add	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _y2$50[ebp]
	mov	DWORD PTR _y3$48[ebp], eax
; Line 726
	mov	eax, DWORD PTR _y3$48[ebp]
	push	eax
	mov	ecx, DWORD PTR _x3$49[ebp]
	push	ecx
	mov	edx, DWORD PTR _y2$50[ebp]
	push	edx
	mov	eax, DWORD PTR _x2$51[ebp]
	push	eax
	mov	ecx, DWORD PTR _y1$52[ebp]
	push	ecx
	mov	edx, DWORD PTR _x1$53[ebp]
	push	edx
	lea	eax, DWORD PTR _glyphPath$[ebp]
	push	eax
	call	_cf2_glyphpath_curveTo
	add	esp, 28					; 0000001cH
; Line 728
	mov	ecx, DWORD PTR _x3$49[ebp]
	mov	DWORD PTR _curX$[ebp], ecx
; Line 729
	mov	edx, DWORD PTR _y3$48[ebp]
	mov	DWORD PTR _curY$[ebp], edx
; Line 730
	mov	eax, DWORD PTR _index$54[ebp]
	add	eax, 6
	mov	DWORD PTR _index$54[ebp], eax
; Line 731
	jmp	$LN360@cf2_interp
$LN357@cf2_interp:
; Line 733
	movzx	ecx, BYTE PTR _op1$[ebp]
	cmp	ecx, 24					; 00000018H
	jne	SHORT $LN356@cf2_interp
; Line 735
	mov	edx, DWORD PTR _index$54[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _curX$[ebp], eax
; Line 736
	mov	ecx, DWORD PTR _index$54[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _curY$[ebp], eax
; Line 738
	mov	eax, DWORD PTR _curY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curX$[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyphPath$[ebp]
	push	edx
	call	_cf2_glyphpath_lineTo
	add	esp, 12					; 0000000cH
$LN356@cf2_interp:
; Line 741
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_clear
	add	esp, 4
; Line 743
	jmp	$LN426@cf2_interp
$LN355@cf2_interp:
; Line 752
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN351@cf2_interp
	movzx	eax, BYTE PTR _op1$[ebp]
	cmp	eax, 29					; 0000001dH
	jne	SHORT $LN442@cf2_interp
	mov	DWORD PTR tv402[ebp], OFFSET $SG14833
	jmp	SHORT $LN443@cf2_interp
$LN442@cf2_interp:
	mov	DWORD PTR tv402[ebp], OFFSET $SG14834
$LN443@cf2_interp:
	mov	ecx, DWORD PTR tv402[ebp]
	push	ecx
	call	_FT_Message
	add	esp, 4
$LN351@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN355@cf2_interp
; Line 754
	cmp	DWORD PTR _charstringIndex$[ebp], 10	; 0000000aH
	jle	SHORT $LN350@cf2_interp
; Line 757
	push	OFFSET $SG14836
	push	757					; 000002f5H
	push	18					; 00000012H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 18					; 00000012H
	mov	DWORD PTR _lastError$[ebp], eax
; Line 758
	jmp	$exit$480
$LN350@cf2_interp:
; Line 764
	mov	eax, DWORD PTR _charstringIndex$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _subrStack$[ebp]
	push	ecx
	call	_cf2_arrstack_getPointer
	add	esp, 8
	mov	DWORD PTR _charstring$[ebp], eax
; Line 767
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_popInt
	add	esp, 4
	mov	DWORD PTR _subrIndex$47[ebp], eax
; Line 769
	mov	al, BYTE PTR _op1$[ebp]
	mov	BYTE PTR tv418[ebp], al
	cmp	BYTE PTR tv418[ebp], 29			; 0000001dH
	je	SHORT $LN347@cf2_interp
	jmp	SHORT $LN341@cf2_interp
$LN347@cf2_interp:
; Line 772
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN343@cf2_interp
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _subrIndex$47[ebp]
	add	ecx, DWORD PTR [eax+900]
	push	ecx
	push	OFFSET $SG14847
	call	_FT_Message
	add	esp, 8
$LN343@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN347@cf2_interp
; Line 776
	mov	eax, DWORD PTR _charstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _subrIndex$47[ebp]
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_cf2_initGlobalRegionBuffer
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN342@cf2_interp
; Line 778
	push	OFFSET $SG14849
	push	778					; 0000030aH
	push	18					; 00000012H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 18					; 00000012H
	mov	DWORD PTR _lastError$[ebp], eax
; Line 779
	jmp	$exit$480
$LN342@cf2_interp:
; Line 781
	jmp	SHORT $LN348@cf2_interp
$LN341@cf2_interp:
; Line 785
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN337@cf2_interp
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _subrIndex$47[ebp]
	add	eax, DWORD PTR [edx+896]
	push	eax
	push	OFFSET $SG14855
	call	_FT_Message
	add	esp, 8
$LN337@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN341@cf2_interp
; Line 789
	mov	edx, DWORD PTR _charstring$[ebp]
	push	edx
	mov	eax, DWORD PTR _subrIndex$47[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_cf2_initLocalRegionBuffer
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN336@cf2_interp
; Line 791
	push	OFFSET $SG14857
	push	791					; 00000317H
	push	18					; 00000012H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 18					; 00000012H
	mov	DWORD PTR _lastError$[ebp], eax
; Line 792
	jmp	$exit$480
$LN336@cf2_interp:
$LN348@cf2_interp:
; Line 796
	mov	edx, DWORD PTR _charstringIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _charstringIndex$[ebp], edx
; Line 798
	jmp	$LN426@cf2_interp
$LN335@cf2_interp:
; Line 801
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN331@cf2_interp
	push	OFFSET $SG14863
	call	_FT_Message
	add	esp, 4
$LN331@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN335@cf2_interp
; Line 803
	cmp	DWORD PTR _charstringIndex$[ebp], 1
	jge	SHORT $LN330@cf2_interp
; Line 806
	push	OFFSET $SG14865
	push	806					; 00000326H
	push	18					; 00000012H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 18					; 00000012H
	mov	DWORD PTR _lastError$[ebp], eax
; Line 807
	jmp	$exit$480
$LN330@cf2_interp:
; Line 813
	mov	eax, DWORD PTR _charstringIndex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _charstringIndex$[ebp], eax
	mov	ecx, DWORD PTR _charstringIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _subrStack$[ebp]
	push	edx
	call	_cf2_arrstack_getPointer
	add	esp, 8
	mov	DWORD PTR _charstring$[ebp], eax
; Line 814
	jmp	$LN426@cf2_interp
$LN329@cf2_interp:
; Line 818
	mov	eax, DWORD PTR _charstring$[ebp]
	push	eax
	call	_cf2_buf_readByte
	add	esp, 4
	mov	BYTE PTR _op2$46[ebp], al
; Line 821
	movzx	ecx, BYTE PTR _op2$46[ebp]
	mov	DWORD PTR tv478[ebp], ecx
	cmp	DWORD PTR tv478[ebp], 37		; 00000025H
	ja	$LN121@cf2_interp
	mov	edx, DWORD PTR tv478[ebp]
	movzx	eax, BYTE PTR $LN465@cf2_interp[edx]
	jmp	DWORD PTR $LN479@cf2_interp[eax*4]
$LN326@cf2_interp:
; Line 825
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN322@cf2_interp
	push	OFFSET $SG14879
	call	_FT_Message
	add	esp, 4
$LN322@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN326@cf2_interp
; Line 827
	jmp	$LN327@cf2_interp
$LN321@cf2_interp:
; Line 831
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN317@cf2_interp
	push	OFFSET $SG14885
	call	_FT_Message
	add	esp, 4
$LN317@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN321@cf2_interp
$LN318@cf2_interp:
; Line 833
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN313@cf2_interp
	push	OFFSET $SG14890
	call	_FT_Message
	add	esp, 4
$LN313@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN318@cf2_interp
; Line 834
	jmp	$LN327@cf2_interp
$LN312@cf2_interp:
; Line 837
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN308@cf2_interp
	push	OFFSET $SG14896
	call	_FT_Message
	add	esp, 4
$LN308@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN312@cf2_interp
$LN309@cf2_interp:
; Line 839
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN304@cf2_interp
	push	OFFSET $SG14901
	call	_FT_Message
	add	esp, 4
$LN304@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN309@cf2_interp
; Line 840
	jmp	$LN327@cf2_interp
$LN303@cf2_interp:
; Line 843
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN299@cf2_interp
	push	OFFSET $SG14907
	call	_FT_Message
	add	esp, 4
$LN299@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN303@cf2_interp
$LN300@cf2_interp:
; Line 845
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN295@cf2_interp
	push	OFFSET $SG14912
	call	_FT_Message
	add	esp, 4
$LN295@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN300@cf2_interp
; Line 846
	jmp	$LN327@cf2_interp
$LN294@cf2_interp:
; Line 849
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN290@cf2_interp
	push	OFFSET $SG14918
	call	_FT_Message
	add	esp, 4
$LN290@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN294@cf2_interp
$LN291@cf2_interp:
; Line 851
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN286@cf2_interp
	push	OFFSET $SG14923
	call	_FT_Message
	add	esp, 4
$LN286@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN291@cf2_interp
; Line 852
	jmp	$LN327@cf2_interp
$LN285@cf2_interp:
; Line 855
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN281@cf2_interp
	push	OFFSET $SG14929
	call	_FT_Message
	add	esp, 4
$LN281@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN285@cf2_interp
$LN282@cf2_interp:
; Line 857
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN277@cf2_interp
	push	OFFSET $SG14934
	call	_FT_Message
	add	esp, 4
$LN277@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN282@cf2_interp
; Line 858
	jmp	$LN327@cf2_interp
$LN276@cf2_interp:
; Line 861
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN272@cf2_interp
	push	OFFSET $SG14940
	call	_FT_Message
	add	esp, 4
$LN272@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN276@cf2_interp
$LN273@cf2_interp:
; Line 863
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN268@cf2_interp
	push	OFFSET $SG14945
	call	_FT_Message
	add	esp, 4
$LN268@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN273@cf2_interp
; Line 864
	jmp	$LN327@cf2_interp
$LN267@cf2_interp:
; Line 867
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN263@cf2_interp
	push	OFFSET $SG14951
	call	_FT_Message
	add	esp, 4
$LN263@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN267@cf2_interp
$LN264@cf2_interp:
; Line 869
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN259@cf2_interp
	push	OFFSET $SG14956
	call	_FT_Message
	add	esp, 4
$LN259@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN264@cf2_interp
; Line 870
	jmp	$LN327@cf2_interp
$LN258@cf2_interp:
; Line 873
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN254@cf2_interp
	push	OFFSET $SG14962
	call	_FT_Message
	add	esp, 4
$LN254@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN258@cf2_interp
$LN255@cf2_interp:
; Line 875
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN250@cf2_interp
	push	OFFSET $SG14967
	call	_FT_Message
	add	esp, 4
$LN250@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN255@cf2_interp
; Line 876
	jmp	$LN327@cf2_interp
$LN249@cf2_interp:
; Line 879
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN245@cf2_interp
	push	OFFSET $SG14973
	call	_FT_Message
	add	esp, 4
$LN245@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN249@cf2_interp
$LN246@cf2_interp:
; Line 881
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN241@cf2_interp
	push	OFFSET $SG14978
	call	_FT_Message
	add	esp, 4
$LN241@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN246@cf2_interp
; Line 882
	jmp	$LN327@cf2_interp
$LN240@cf2_interp:
; Line 885
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN236@cf2_interp
	push	OFFSET $SG14984
	call	_FT_Message
	add	esp, 4
$LN236@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN240@cf2_interp
$LN237@cf2_interp:
; Line 887
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN232@cf2_interp
	push	OFFSET $SG14989
	call	_FT_Message
	add	esp, 4
$LN232@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN237@cf2_interp
; Line 888
	jmp	$LN327@cf2_interp
$LN231@cf2_interp:
; Line 891
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN227@cf2_interp
	push	OFFSET $SG14995
	call	_FT_Message
	add	esp, 4
$LN227@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN231@cf2_interp
$LN228@cf2_interp:
; Line 893
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN223@cf2_interp
	push	OFFSET $SG15000
	call	_FT_Message
	add	esp, 4
$LN223@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN228@cf2_interp
; Line 894
	jmp	$LN327@cf2_interp
$LN222@cf2_interp:
; Line 897
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN218@cf2_interp
	push	OFFSET $SG15006
	call	_FT_Message
	add	esp, 4
$LN218@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN222@cf2_interp
$LN219@cf2_interp:
; Line 899
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN214@cf2_interp
	push	OFFSET $SG15011
	call	_FT_Message
	add	esp, 4
$LN214@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN219@cf2_interp
; Line 900
	jmp	$LN327@cf2_interp
$LN213@cf2_interp:
; Line 903
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN209@cf2_interp
	push	OFFSET $SG15017
	call	_FT_Message
	add	esp, 4
$LN209@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN213@cf2_interp
$LN210@cf2_interp:
; Line 905
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN205@cf2_interp
	push	OFFSET $SG15022
	call	_FT_Message
	add	esp, 4
$LN205@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN210@cf2_interp
; Line 906
	jmp	$LN327@cf2_interp
$LN204@cf2_interp:
; Line 909
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN200@cf2_interp
	push	OFFSET $SG15028
	call	_FT_Message
	add	esp, 4
$LN200@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN204@cf2_interp
$LN201@cf2_interp:
; Line 911
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN196@cf2_interp
	push	OFFSET $SG15033
	call	_FT_Message
	add	esp, 4
$LN196@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN201@cf2_interp
; Line 912
	jmp	$LN327@cf2_interp
$LN195@cf2_interp:
; Line 915
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN191@cf2_interp
	push	OFFSET $SG15039
	call	_FT_Message
	add	esp, 4
$LN191@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN195@cf2_interp
$LN192@cf2_interp:
; Line 917
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN187@cf2_interp
	push	OFFSET $SG15044
	call	_FT_Message
	add	esp, 4
$LN187@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN192@cf2_interp
; Line 918
	jmp	$LN327@cf2_interp
$LN186@cf2_interp:
; Line 921
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN182@cf2_interp
	push	OFFSET $SG15050
	call	_FT_Message
	add	esp, 4
$LN182@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN186@cf2_interp
$LN183@cf2_interp:
; Line 923
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN178@cf2_interp
	push	OFFSET $SG15055
	call	_FT_Message
	add	esp, 4
$LN178@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN183@cf2_interp
; Line 924
	jmp	$LN327@cf2_interp
$LN177@cf2_interp:
; Line 927
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN173@cf2_interp
	push	OFFSET $SG15061
	call	_FT_Message
	add	esp, 4
$LN173@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN177@cf2_interp
$LN174@cf2_interp:
; Line 929
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN169@cf2_interp
	push	OFFSET $SG15066
	call	_FT_Message
	add	esp, 4
$LN169@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN174@cf2_interp
; Line 930
	jmp	$LN327@cf2_interp
$LN168@cf2_interp:
; Line 933
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN164@cf2_interp
	push	OFFSET $SG15072
	call	_FT_Message
	add	esp, 4
$LN164@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN168@cf2_interp
$LN165@cf2_interp:
; Line 935
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN160@cf2_interp
	push	OFFSET $SG15077
	call	_FT_Message
	add	esp, 4
$LN160@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN165@cf2_interp
; Line 936
	jmp	$LN327@cf2_interp
$LN159@cf2_interp:
; Line 939
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN155@cf2_interp
	push	OFFSET $SG15083
	call	_FT_Message
	add	esp, 4
$LN155@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN159@cf2_interp
$LN156@cf2_interp:
; Line 941
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN151@cf2_interp
	push	OFFSET $SG15088
	call	_FT_Message
	add	esp, 4
$LN151@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN156@cf2_interp
; Line 942
	jmp	$LN327@cf2_interp
$LN150@cf2_interp:
; Line 945
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN146@cf2_interp
	push	OFFSET $SG15094
	call	_FT_Message
	add	esp, 4
$LN146@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN150@cf2_interp
$LN147@cf2_interp:
; Line 947
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN142@cf2_interp
	push	OFFSET $SG15099
	call	_FT_Message
	add	esp, 4
$LN142@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN147@cf2_interp
; Line 948
	jmp	$LN327@cf2_interp
$LN141@cf2_interp:
; Line 963
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN137@cf2_interp
	push	OFFSET $SG15107
	call	_FT_Message
	add	esp, 4
$LN137@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN141@cf2_interp
; Line 970
	push	0
	push	OFFSET ?readFromStack@?FB@??cf2_interpT2CharString@@9@9
	lea	ecx, DWORD PTR _glyphPath$[ebp]
	push	ecx
	lea	edx, DWORD PTR _curY$[ebp]
	push	edx
	lea	eax, DWORD PTR _curX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_doFlex
	add	esp, 24					; 00000018H
; Line 972
	jmp	$LN426@cf2_interp
$LN136@cf2_interp:
; Line 987
	mov	edx, 4
	imul	eax, edx, 53
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN132@cf2_interp
	push	OFFSET $SG15115
	call	_FT_Message
	add	esp, 4
$LN132@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN136@cf2_interp
; Line 994
	push	0
	push	OFFSET ?readFromStack@?FD@??cf2_interpT2CharString@@9@9
	lea	edx, DWORD PTR _glyphPath$[ebp]
	push	edx
	lea	eax, DWORD PTR _curY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _curX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_doFlex
	add	esp, 24					; 00000018H
; Line 996
	jmp	$LN327@cf2_interp
$LN131@cf2_interp:
; Line 1011
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN127@cf2_interp
	push	OFFSET $SG15123
	call	_FT_Message
	add	esp, 4
$LN127@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN131@cf2_interp
; Line 1018
	push	0
	push	OFFSET ?readFromStack@?FF@??cf2_interpT2CharString@@9@9
	lea	eax, DWORD PTR _glyphPath$[ebp]
	push	eax
	lea	ecx, DWORD PTR _curY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _curX$[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_doFlex
	add	esp, 24					; 00000018H
; Line 1020
	jmp	$LN426@cf2_interp
$LN126@cf2_interp:
; Line 1035
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN122@cf2_interp
	push	OFFSET $SG15131
	call	_FT_Message
	add	esp, 4
$LN122@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN126@cf2_interp
; Line 1042
	push	1
	push	OFFSET ?readFromStack@?FH@??cf2_interpT2CharString@@9@9
	lea	ecx, DWORD PTR _glyphPath$[ebp]
	push	ecx
	lea	edx, DWORD PTR _curY$[ebp]
	push	edx
	lea	eax, DWORD PTR _curX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_doFlex
	add	esp, 24					; 00000018H
; Line 1044
	jmp	$LN426@cf2_interp
$LN121@cf2_interp:
; Line 1060
	mov	edx, 4
	imul	eax, edx, 53
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN117@cf2_interp
	movzx	ecx, BYTE PTR _op2$46[ebp]
	push	ecx
	push	OFFSET $SG15137
	call	_FT_Message
	add	esp, 8
$LN117@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN121@cf2_interp
$LN327@cf2_interp:
; Line 1065
	jmp	$LN416@cf2_interp
$LN116@cf2_interp:
; Line 1068
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN112@cf2_interp
	push	OFFSET $SG15143
	call	_FT_Message
	add	esp, 4
$LN112@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN116@cf2_interp
; Line 1071
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_count
	add	esp, 4
	cmp	eax, 1
	je	SHORT $LN110@cf2_interp
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_count
	add	esp, 4
	cmp	eax, 5
	jne	SHORT $LN109@cf2_interp
$LN110@cf2_interp:
; Line 1073
	movzx	edx, BYTE PTR _haveWidth$[ebp]
	test	edx, edx
	jne	SHORT $LN109@cf2_interp
; Line 1074
	push	0
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _nominalWidthX$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx], eax
$LN109@cf2_interp:
; Line 1078
	mov	BYTE PTR _haveWidth$[ebp], 1
; Line 1080
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+132]
	movzx	ecx, BYTE PTR [eax+753]
	test	ecx, ecx
	je	SHORT $LN108@cf2_interp
; Line 1081
	jmp	$exit$480
$LN108@cf2_interp:
; Line 1084
	lea	edx, DWORD PTR _glyphPath$[ebp]
	push	edx
	call	_cf2_glyphpath_closeOpenPath
	add	esp, 4
; Line 1086
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_count
	add	esp, 4
	cmp	eax, 1
	jbe	$LN107@cf2_interp
; Line 1098
	movzx	ecx, BYTE PTR _doingSeac$[ebp]
	test	ecx, ecx
	je	SHORT $LN106@cf2_interp
; Line 1100
	push	OFFSET $SG15155
	push	1100					; 0000044cH
	push	18					; 00000012H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 18					; 00000012H
	mov	DWORD PTR _lastError$[ebp], eax
; Line 1101
	jmp	$exit$480
$LN106@cf2_interp:
; Line 1104
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_popInt
	add	esp, 4
	mov	DWORD PTR _achar$45[ebp], eax
; Line 1105
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_popInt
	add	esp, 4
	mov	DWORD PTR _bchar$44[ebp], eax
; Line 1107
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_popFixed
	add	esp, 4
	mov	DWORD PTR _curY$[ebp], eax
; Line 1108
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_popFixed
	add	esp, 4
	mov	DWORD PTR _curX$[ebp], eax
; Line 1110
	lea	eax, DWORD PTR _component$43[ebp]
	push	eax
	mov	ecx, DWORD PTR _achar$45[ebp]
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_cf2_getSeacComponent
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error2$41[ebp], eax
; Line 1111
	cmp	DWORD PTR _error2$41[ebp], 0
	je	SHORT $LN105@cf2_interp
; Line 1113
	mov	eax, DWORD PTR _error2$41[ebp]
	mov	DWORD PTR _lastError$[ebp], eax
; Line 1114
	jmp	$exit$480
$LN105@cf2_interp:
; Line 1123
	lea	ecx, DWORD PTR _dummyWidth$42[ebp]
	push	ecx
	mov	edx, DWORD PTR _curY$[ebp]
	push	edx
	mov	eax, DWORD PTR _curX$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _translation$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callbacks$[ebp]
	push	edx
	lea	eax, DWORD PTR _component$43[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	call	_cf2_interpT2CharString
	add	esp, 32					; 00000020H
; Line 1124
	lea	edx, DWORD PTR _component$43[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cf2_freeSeacComponent
	add	esp, 8
; Line 1126
	lea	ecx, DWORD PTR _component$43[ebp]
	push	ecx
	mov	edx, DWORD PTR _bchar$44[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cf2_getSeacComponent
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error2$41[ebp], eax
; Line 1127
	cmp	DWORD PTR _error2$41[ebp], 0
	je	SHORT $LN104@cf2_interp
; Line 1129
	mov	ecx, DWORD PTR _error2$41[ebp]
	mov	DWORD PTR _lastError$[ebp], ecx
; Line 1130
	jmp	$exit$480
$LN104@cf2_interp:
; Line 1139
	lea	edx, DWORD PTR _dummyWidth$42[ebp]
	push	edx
	push	0
	push	0
	push	1
	mov	eax, DWORD PTR _translation$[ebp]
	push	eax
	mov	ecx, DWORD PTR _callbacks$[ebp]
	push	ecx
	lea	edx, DWORD PTR _component$43[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	call	_cf2_interpT2CharString
	add	esp, 32					; 00000020H
; Line 1140
	lea	ecx, DWORD PTR _component$43[ebp]
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_cf2_freeSeacComponent
	add	esp, 8
$LN107@cf2_interp:
; Line 1142
	jmp	$exit$480
$LN103@cf2_interp:
; Line 1148
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN99@cf2_interp
	movzx	edx, BYTE PTR _op1$[ebp]
	cmp	edx, 20					; 00000014H
	jne	SHORT $LN444@cf2_interp
	mov	DWORD PTR tv875[ebp], OFFSET $SG15163
	jmp	SHORT $LN445@cf2_interp
$LN444@cf2_interp:
	mov	DWORD PTR tv875[ebp], OFFSET $SG15164
$LN445@cf2_interp:
	mov	eax, DWORD PTR tv875[ebp]
	push	eax
	call	_FT_Message
	add	esp, 4
$LN99@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN103@cf2_interp
; Line 1152
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_count
	add	esp, 4
	cmp	eax, 1
	jbe	SHORT $LN98@cf2_interp
	lea	eax, DWORD PTR _hintMask$[ebp]
	push	eax
	call	_cf2_hintmask_isValid
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN98@cf2_interp
$LN97@cf2_interp:
; Line 1154
	mov	edx, 4
	imul	eax, edx, 53
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN94@cf2_interp
	push	OFFSET $SG15170
	call	_FT_Message
	add	esp, 4
$LN94@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN97@cf2_interp
; Line 1155
	jmp	$LN416@cf2_interp
$LN98@cf2_interp:
; Line 1165
	push	0
	lea	edx, DWORD PTR _haveWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vStemHintArray$[ebp]
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	call	_cf2_doStems
	add	esp, 24					; 00000018H
; Line 1167
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	movzx	eax, BYTE PTR [edx+753]
	test	eax, eax
	je	SHORT $LN93@cf2_interp
; Line 1168
	jmp	$exit$480
$LN93@cf2_interp:
; Line 1170
	movzx	ecx, BYTE PTR _op1$[ebp]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN92@cf2_interp
; Line 1176
	lea	edx, DWORD PTR _hStemHintArray$[ebp]
	push	edx
	call	_cf2_arrstack_size
	add	esp, 4
	mov	esi, eax
	lea	eax, DWORD PTR _vStemHintArray$[ebp]
	push	eax
	call	_cf2_arrstack_size
	add	esp, 4
	add	esi, eax
	push	esi
	mov	ecx, DWORD PTR _charstring$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hintMask$[ebp]
	push	edx
	call	_cf2_hintmask_read
	add	esp, 12					; 0000000cH
; Line 1178
	jmp	$LN91@cf2_interp
$LN92@cf2_interp:
; Line 1201
	mov	eax, DWORD PTR _scaleY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _glyphPath$[ebp+11612]
	push	ecx
	lea	edx, DWORD PTR _glyphPath$[ebp+7744]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	lea	ecx, DWORD PTR _counterHintMap$40[ebp]
	push	ecx
	call	_cf2_hintmap_init
	add	esp, 20					; 00000014H
; Line 1202
	mov	edx, DWORD PTR _error$[ebp]
	push	edx
	lea	eax, DWORD PTR _counterMask$39[ebp]
	push	eax
	call	_cf2_hintmask_init
	add	esp, 8
; Line 1207
	lea	ecx, DWORD PTR _hStemHintArray$[ebp]
	push	ecx
	call	_cf2_arrstack_size
	add	esp, 4
	mov	esi, eax
	lea	edx, DWORD PTR _vStemHintArray$[ebp]
	push	edx
	call	_cf2_arrstack_size
	add	esp, 4
	add	esi, eax
	push	esi
	mov	eax, DWORD PTR _charstring$[ebp]
	push	eax
	lea	ecx, DWORD PTR _counterMask$39[ebp]
	push	ecx
	call	_cf2_hintmask_read
	add	esp, 12					; 0000000cH
; Line 1213
	push	0
	push	0
	lea	edx, DWORD PTR _counterMask$39[ebp]
	push	edx
	lea	eax, DWORD PTR _vStemHintArray$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hStemHintArray$[ebp]
	push	ecx
	lea	edx, DWORD PTR _counterHintMap$40[ebp]
	push	edx
	call	_cf2_hintmap_build
	add	esp, 24					; 00000018H
$LN91@cf2_interp:
; Line 1215
	jmp	$LN416@cf2_interp
$LN90@cf2_interp:
; Line 1218
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN86@cf2_interp
	push	OFFSET $SG15181
	call	_FT_Message
	add	esp, 4
$LN86@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN90@cf2_interp
; Line 1220
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_count
	add	esp, 4
	cmp	eax, 2
	jbe	SHORT $LN85@cf2_interp
	movzx	ecx, BYTE PTR _haveWidth$[ebp]
	test	ecx, ecx
	jne	SHORT $LN85@cf2_interp
; Line 1221
	push	0
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _nominalWidthX$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx], eax
$LN85@cf2_interp:
; Line 1224
	mov	BYTE PTR _haveWidth$[ebp], 1
; Line 1226
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+132]
	movzx	ecx, BYTE PTR [eax+753]
	test	ecx, ecx
	je	SHORT $LN84@cf2_interp
; Line 1227
	jmp	$exit$480
$LN84@cf2_interp:
; Line 1229
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_popFixed
	add	esp, 4
	add	eax, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _curY$[ebp], eax
; Line 1230
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_popFixed
	add	esp, 4
	add	eax, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _curX$[ebp], eax
; Line 1232
	mov	ecx, DWORD PTR _curY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curX$[ebp]
	push	edx
	lea	eax, DWORD PTR _glyphPath$[ebp]
	push	eax
	call	_cf2_glyphpath_moveTo
	add	esp, 12					; 0000000cH
; Line 1234
	jmp	$LN416@cf2_interp
$LN83@cf2_interp:
; Line 1237
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN79@cf2_interp
	push	OFFSET $SG15189
	call	_FT_Message
	add	esp, 4
$LN79@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN83@cf2_interp
; Line 1239
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_count
	add	esp, 4
	cmp	eax, 1
	jbe	SHORT $LN78@cf2_interp
	movzx	edx, BYTE PTR _haveWidth$[ebp]
	test	edx, edx
	jne	SHORT $LN78@cf2_interp
; Line 1240
	push	0
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _nominalWidthX$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx], eax
$LN78@cf2_interp:
; Line 1243
	mov	BYTE PTR _haveWidth$[ebp], 1
; Line 1245
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+132]
	movzx	ecx, BYTE PTR [eax+753]
	test	ecx, ecx
	je	SHORT $LN77@cf2_interp
; Line 1246
	jmp	$exit$480
$LN77@cf2_interp:
; Line 1248
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_popFixed
	add	esp, 4
	add	eax, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _curX$[ebp], eax
; Line 1250
	mov	eax, DWORD PTR _curY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curX$[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyphPath$[ebp]
	push	edx
	call	_cf2_glyphpath_moveTo
	add	esp, 12					; 0000000cH
; Line 1252
	jmp	$LN416@cf2_interp
$LN76@cf2_interp:
; Line 1256
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_count
	add	esp, 4
	mov	DWORD PTR _count$38[ebp], eax
; Line 1257
	mov	DWORD PTR _index$37[ebp], 0
$LN75@cf2_interp:
; Line 1260
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN72@cf2_interp
	push	OFFSET $SG15199
	call	_FT_Message
	add	esp, 4
$LN72@cf2_interp:
	xor	eax, eax
	jne	SHORT $LN75@cf2_interp
$LN73@cf2_interp:
; Line 1262
	mov	ecx, DWORD PTR _index$37[ebp]
	add	ecx, 6
	cmp	ecx, DWORD PTR _count$38[ebp]
	jae	SHORT $LN70@cf2_interp
; Line 1264
	mov	edx, DWORD PTR _index$37[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _curX$[ebp], eax
; Line 1265
	mov	ecx, DWORD PTR _index$37[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _curY$[ebp], eax
; Line 1267
	mov	eax, DWORD PTR _curY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curX$[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyphPath$[ebp]
	push	edx
	call	_cf2_glyphpath_lineTo
	add	esp, 12					; 0000000cH
; Line 1268
	mov	eax, DWORD PTR _index$37[ebp]
	add	eax, 2
	mov	DWORD PTR _index$37[ebp], eax
; Line 1269
	jmp	SHORT $LN73@cf2_interp
$LN70@cf2_interp:
; Line 1271
	mov	ecx, DWORD PTR _index$37[ebp]
	cmp	ecx, DWORD PTR _count$38[ebp]
	jae	$LN68@cf2_interp
; Line 1273
	mov	edx, DWORD PTR _index$37[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _x1$36[ebp], eax
; Line 1274
	mov	ecx, DWORD PTR _index$37[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _y1$35[ebp], eax
; Line 1275
	mov	eax, DWORD PTR _index$37[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _x1$36[ebp]
	mov	DWORD PTR _x2$34[ebp], eax
; Line 1276
	mov	edx, DWORD PTR _index$37[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _y1$35[ebp]
	mov	DWORD PTR _y2$33[ebp], eax
; Line 1277
	mov	ecx, DWORD PTR _index$37[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _x2$34[ebp]
	mov	DWORD PTR _x3$32[ebp], eax
; Line 1278
	mov	eax, DWORD PTR _index$37[ebp]
	add	eax, 5
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _y2$33[ebp]
	mov	DWORD PTR _y3$31[ebp], eax
; Line 1281
	mov	edx, DWORD PTR _y3$31[ebp]
	push	edx
	mov	eax, DWORD PTR _x3$32[ebp]
	push	eax
	mov	ecx, DWORD PTR _y2$33[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$34[ebp]
	push	edx
	mov	eax, DWORD PTR _y1$35[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$36[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyphPath$[ebp]
	push	edx
	call	_cf2_glyphpath_curveTo
	add	esp, 28					; 0000001cH
; Line 1283
	mov	eax, DWORD PTR _x3$32[ebp]
	mov	DWORD PTR _curX$[ebp], eax
; Line 1284
	mov	ecx, DWORD PTR _y3$31[ebp]
	mov	DWORD PTR _curY$[ebp], ecx
; Line 1285
	mov	edx, DWORD PTR _index$37[ebp]
	add	edx, 6
	mov	DWORD PTR _index$37[ebp], edx
; Line 1286
	jmp	$LN70@cf2_interp
$LN68@cf2_interp:
; Line 1288
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_clear
	add	esp, 4
; Line 1290
	jmp	$LN426@cf2_interp
$LN67@cf2_interp:
; Line 1294
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_count
	add	esp, 4
	mov	DWORD PTR _count$30[ebp], eax
; Line 1295
	mov	DWORD PTR _index$29[ebp], 0
$LN66@cf2_interp:
; Line 1298
	mov	edx, 4
	imul	eax, edx, 53
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN63@cf2_interp
	push	OFFSET $SG15219
	call	_FT_Message
	add	esp, 4
$LN63@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN66@cf2_interp
$LN64@cf2_interp:
; Line 1300
	mov	edx, DWORD PTR _index$29[ebp]
	cmp	edx, DWORD PTR _count$30[ebp]
	jae	$LN61@cf2_interp
; Line 1305
	mov	eax, DWORD PTR _count$30[ebp]
	sub	eax, DWORD PTR _index$29[ebp]
	and	eax, 1
	je	SHORT $LN60@cf2_interp
; Line 1307
	mov	ecx, DWORD PTR _index$29[ebp]
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _x1$28[ebp], eax
; Line 1309
	mov	eax, DWORD PTR _index$29[ebp]
	add	eax, 1
	mov	DWORD PTR _index$29[ebp], eax
; Line 1311
	jmp	SHORT $LN59@cf2_interp
$LN60@cf2_interp:
; Line 1312
	mov	ecx, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _x1$28[ebp], ecx
$LN59@cf2_interp:
; Line 1314
	mov	edx, DWORD PTR _index$29[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _y1$27[ebp], eax
; Line 1315
	mov	ecx, DWORD PTR _index$29[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _x1$28[ebp]
	mov	DWORD PTR _x2$26[ebp], eax
; Line 1316
	mov	eax, DWORD PTR _index$29[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _y1$27[ebp]
	mov	DWORD PTR _y2$25[ebp], eax
; Line 1317
	mov	edx, DWORD PTR _x2$26[ebp]
	mov	DWORD PTR _x3$24[ebp], edx
; Line 1318
	mov	eax, DWORD PTR _index$29[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _y2$25[ebp]
	mov	DWORD PTR _y3$23[ebp], eax
; Line 1320
	mov	edx, DWORD PTR _y3$23[ebp]
	push	edx
	mov	eax, DWORD PTR _x3$24[ebp]
	push	eax
	mov	ecx, DWORD PTR _y2$25[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$26[ebp]
	push	edx
	mov	eax, DWORD PTR _y1$27[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$28[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyphPath$[ebp]
	push	edx
	call	_cf2_glyphpath_curveTo
	add	esp, 28					; 0000001cH
; Line 1322
	mov	eax, DWORD PTR _x3$24[ebp]
	mov	DWORD PTR _curX$[ebp], eax
; Line 1323
	mov	ecx, DWORD PTR _y3$23[ebp]
	mov	DWORD PTR _curY$[ebp], ecx
; Line 1324
	mov	edx, DWORD PTR _index$29[ebp]
	add	edx, 4
	mov	DWORD PTR _index$29[ebp], edx
; Line 1325
	jmp	$LN64@cf2_interp
$LN61@cf2_interp:
; Line 1327
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_clear
	add	esp, 4
; Line 1329
	jmp	$LN426@cf2_interp
$LN58@cf2_interp:
; Line 1333
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_count
	add	esp, 4
	mov	DWORD PTR _count$22[ebp], eax
; Line 1334
	mov	DWORD PTR _index$21[ebp], 0
$LN57@cf2_interp:
; Line 1337
	mov	edx, 4
	imul	eax, edx, 53
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN54@cf2_interp
	push	OFFSET $SG15238
	call	_FT_Message
	add	esp, 4
$LN54@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN57@cf2_interp
$LN55@cf2_interp:
; Line 1339
	mov	edx, DWORD PTR _index$21[ebp]
	cmp	edx, DWORD PTR _count$22[ebp]
	jae	$LN52@cf2_interp
; Line 1344
	mov	eax, DWORD PTR _count$22[ebp]
	sub	eax, DWORD PTR _index$21[ebp]
	and	eax, 1
	je	SHORT $LN51@cf2_interp
; Line 1346
	mov	ecx, DWORD PTR _index$21[ebp]
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _y1$19[ebp], eax
; Line 1348
	mov	eax, DWORD PTR _index$21[ebp]
	add	eax, 1
	mov	DWORD PTR _index$21[ebp], eax
; Line 1350
	jmp	SHORT $LN50@cf2_interp
$LN51@cf2_interp:
; Line 1351
	mov	ecx, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _y1$19[ebp], ecx
$LN50@cf2_interp:
; Line 1353
	mov	edx, DWORD PTR _index$21[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _x1$20[ebp], eax
; Line 1354
	mov	ecx, DWORD PTR _index$21[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _x1$20[ebp]
	mov	DWORD PTR _x2$18[ebp], eax
; Line 1355
	mov	eax, DWORD PTR _index$21[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _y1$19[ebp]
	mov	DWORD PTR _y2$17[ebp], eax
; Line 1356
	mov	edx, DWORD PTR _index$21[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _x2$18[ebp]
	mov	DWORD PTR _x3$16[ebp], eax
; Line 1357
	mov	ecx, DWORD PTR _y2$17[ebp]
	mov	DWORD PTR _y3$15[ebp], ecx
; Line 1359
	mov	edx, DWORD PTR _y3$15[ebp]
	push	edx
	mov	eax, DWORD PTR _x3$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _y2$17[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$18[ebp]
	push	edx
	mov	eax, DWORD PTR _y1$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _x1$20[ebp]
	push	ecx
	lea	edx, DWORD PTR _glyphPath$[ebp]
	push	edx
	call	_cf2_glyphpath_curveTo
	add	esp, 28					; 0000001cH
; Line 1361
	mov	eax, DWORD PTR _x3$16[ebp]
	mov	DWORD PTR _curX$[ebp], eax
; Line 1362
	mov	ecx, DWORD PTR _y3$15[ebp]
	mov	DWORD PTR _curY$[ebp], ecx
; Line 1363
	mov	edx, DWORD PTR _index$21[ebp]
	add	edx, 4
	mov	DWORD PTR _index$21[ebp], edx
; Line 1364
	jmp	$LN55@cf2_interp
$LN52@cf2_interp:
; Line 1366
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_clear
	add	esp, 4
; Line 1368
	jmp	$LN426@cf2_interp
$LN49@cf2_interp:
; Line 1373
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_count
	add	esp, 4
	mov	DWORD PTR _count$14[ebp], eax
; Line 1374
	mov	DWORD PTR _index$13[ebp], 0
; Line 1376
	movzx	edx, BYTE PTR _op1$[ebp]
	cmp	edx, 31					; 0000001fH
	jne	SHORT $LN446@cf2_interp
	mov	DWORD PTR tv1167[ebp], 1
	jmp	SHORT $LN447@cf2_interp
$LN446@cf2_interp:
	mov	DWORD PTR tv1167[ebp], 0
$LN447@cf2_interp:
	mov	al, BYTE PTR tv1167[ebp]
	mov	BYTE PTR _alternate$12[ebp], al
$LN48@cf2_interp:
; Line 1379
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN45@cf2_interp
	movzx	eax, BYTE PTR _alternate$12[ebp]
	test	eax, eax
	je	SHORT $LN448@cf2_interp
	mov	DWORD PTR tv1174[ebp], OFFSET $SG15258
	jmp	SHORT $LN449@cf2_interp
$LN448@cf2_interp:
	mov	DWORD PTR tv1174[ebp], OFFSET $SG15259
$LN449@cf2_interp:
	mov	ecx, DWORD PTR tv1174[ebp]
	push	ecx
	call	_FT_Message
	add	esp, 4
$LN45@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN48@cf2_interp
$LN46@cf2_interp:
; Line 1381
	mov	eax, DWORD PTR _index$13[ebp]
	cmp	eax, DWORD PTR _count$14[ebp]
	jae	$LN43@cf2_interp
; Line 1386
	movzx	ecx, BYTE PTR _alternate$12[ebp]
	test	ecx, ecx
	je	$LN42@cf2_interp
; Line 1388
	mov	edx, DWORD PTR _index$13[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _x1$11[ebp], eax
; Line 1389
	mov	ecx, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _y1$8[ebp], ecx
; Line 1390
	mov	edx, DWORD PTR _index$13[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _x1$11[ebp]
	mov	DWORD PTR _x2$10[ebp], eax
; Line 1391
	mov	ecx, DWORD PTR _index$13[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _y1$8[ebp]
	mov	DWORD PTR _y2$7[ebp], eax
; Line 1392
	mov	eax, DWORD PTR _index$13[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _y2$7[ebp]
	mov	DWORD PTR _y3$6[ebp], eax
; Line 1394
	mov	edx, DWORD PTR _count$14[ebp]
	sub	edx, DWORD PTR _index$13[ebp]
	cmp	edx, 5
	jne	SHORT $LN41@cf2_interp
; Line 1396
	mov	eax, DWORD PTR _index$13[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _x2$10[ebp]
	mov	DWORD PTR _x3$9[ebp], eax
; Line 1398
	mov	edx, DWORD PTR _index$13[ebp]
	add	edx, 1
	mov	DWORD PTR _index$13[ebp], edx
; Line 1400
	jmp	SHORT $LN40@cf2_interp
$LN41@cf2_interp:
; Line 1401
	mov	eax, DWORD PTR _x2$10[ebp]
	mov	DWORD PTR _x3$9[ebp], eax
$LN40@cf2_interp:
; Line 1403
	mov	BYTE PTR _alternate$12[ebp], 0
; Line 1405
	jmp	$LN39@cf2_interp
$LN42@cf2_interp:
; Line 1407
	mov	ecx, DWORD PTR _curX$[ebp]
	mov	DWORD PTR _x1$11[ebp], ecx
; Line 1408
	mov	edx, DWORD PTR _index$13[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _curY$[ebp]
	mov	DWORD PTR _y1$8[ebp], eax
; Line 1409
	mov	ecx, DWORD PTR _index$13[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _x1$11[ebp]
	mov	DWORD PTR _x2$10[ebp], eax
; Line 1410
	mov	eax, DWORD PTR _index$13[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _y1$8[ebp]
	mov	DWORD PTR _y2$7[ebp], eax
; Line 1411
	mov	edx, DWORD PTR _index$13[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _x2$10[ebp]
	mov	DWORD PTR _x3$9[ebp], eax
; Line 1413
	mov	ecx, DWORD PTR _count$14[ebp]
	sub	ecx, DWORD PTR _index$13[ebp]
	cmp	ecx, 5
	jne	SHORT $LN38@cf2_interp
; Line 1415
	mov	edx, DWORD PTR _index$13[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_getReal
	add	esp, 8
	add	eax, DWORD PTR _y2$7[ebp]
	mov	DWORD PTR _y3$6[ebp], eax
; Line 1417
	mov	ecx, DWORD PTR _index$13[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$13[ebp], ecx
; Line 1419
	jmp	SHORT $LN37@cf2_interp
$LN38@cf2_interp:
; Line 1420
	mov	edx, DWORD PTR _y2$7[ebp]
	mov	DWORD PTR _y3$6[ebp], edx
$LN37@cf2_interp:
; Line 1422
	mov	BYTE PTR _alternate$12[ebp], 1
$LN39@cf2_interp:
; Line 1425
	mov	eax, DWORD PTR _y3$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _x3$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _y2$7[ebp]
	push	edx
	mov	eax, DWORD PTR _x2$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _y1$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _x1$11[ebp]
	push	edx
	lea	eax, DWORD PTR _glyphPath$[ebp]
	push	eax
	call	_cf2_glyphpath_curveTo
	add	esp, 28					; 0000001cH
; Line 1427
	mov	ecx, DWORD PTR _x3$9[ebp]
	mov	DWORD PTR _curX$[ebp], ecx
; Line 1428
	mov	edx, DWORD PTR _y3$6[ebp]
	mov	DWORD PTR _curY$[ebp], edx
; Line 1429
	mov	eax, DWORD PTR _index$13[ebp]
	add	eax, 4
	mov	DWORD PTR _index$13[ebp], eax
; Line 1430
	jmp	$LN46@cf2_interp
$LN43@cf2_interp:
; Line 1432
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_clear
	add	esp, 4
; Line 1434
	jmp	$LN426@cf2_interp
$LN36@cf2_interp:
; Line 1442
	mov	edx, DWORD PTR _charstring$[ebp]
	push	edx
	call	_cf2_buf_readByte
	add	esp, 4
	mov	esi, eax
	shl	esi, 8
	mov	eax, DWORD PTR _charstring$[ebp]
	push	eax
	call	_cf2_buf_readByte
	add	esp, 4
	or	esi, eax
	movsx	ecx, si
	mov	DWORD PTR _v$5[ebp], ecx
$LN35@cf2_interp:
; Line 1444
	mov	edx, 4
	imul	eax, edx, 53
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN32@cf2_interp
	mov	ecx, DWORD PTR _v$5[ebp]
	push	ecx
	push	OFFSET $SG15282
	call	_FT_Message
	add	esp, 8
$LN32@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN35@cf2_interp
; Line 1446
	mov	eax, DWORD PTR _v$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_pushInt
	add	esp, 8
; Line 1448
	jmp	$LN426@cf2_interp
$LN31@cf2_interp:
; Line 1453
	movzx	edx, BYTE PTR _op1$[ebp]
	cmp	edx, 246				; 000000f6H
	jg	SHORT $LN30@cf2_interp
; Line 1458
	movzx	eax, BYTE PTR _op1$[ebp]
	sub	eax, 139				; 0000008bH
	mov	DWORD PTR _v$4[ebp], eax
$LN29@cf2_interp:
; Line 1460
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN26@cf2_interp
	mov	eax, DWORD PTR _v$4[ebp]
	push	eax
	push	OFFSET $SG15290
	call	_FT_Message
	add	esp, 8
$LN26@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN29@cf2_interp
; Line 1463
	mov	edx, DWORD PTR _v$4[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_pushInt
	add	esp, 8
	jmp	$LN13@cf2_interp
$LN30@cf2_interp:
; Line 1466
	movzx	ecx, BYTE PTR _op1$[ebp]
	cmp	ecx, 250				; 000000faH
	jg	$LN24@cf2_interp
; Line 1471
	movzx	edx, BYTE PTR _op1$[ebp]
	mov	DWORD PTR _v$3[ebp], edx
; Line 1472
	mov	eax, DWORD PTR _v$3[ebp]
	sub	eax, 247				; 000000f7H
	mov	DWORD PTR _v$3[ebp], eax
; Line 1473
	mov	ecx, DWORD PTR _v$3[ebp]
	shl	ecx, 8
	mov	DWORD PTR _v$3[ebp], ecx
; Line 1474
	mov	edx, DWORD PTR _charstring$[ebp]
	push	edx
	call	_cf2_buf_readByte
	add	esp, 4
	add	eax, DWORD PTR _v$3[ebp]
	mov	DWORD PTR _v$3[ebp], eax
; Line 1475
	mov	eax, DWORD PTR _v$3[ebp]
	add	eax, 108				; 0000006cH
	mov	DWORD PTR _v$3[ebp], eax
$LN23@cf2_interp:
; Line 1477
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN20@cf2_interp
	mov	eax, DWORD PTR _v$3[ebp]
	push	eax
	push	OFFSET $SG15298
	call	_FT_Message
	add	esp, 8
$LN20@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN23@cf2_interp
; Line 1480
	mov	edx, DWORD PTR _v$3[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_pushInt
	add	esp, 8
	jmp	$LN13@cf2_interp
$LN24@cf2_interp:
; Line 1483
	movzx	ecx, BYTE PTR _op1$[ebp]
	cmp	ecx, 254				; 000000feH
	jg	$LN18@cf2_interp
; Line 1488
	movzx	edx, BYTE PTR _op1$[ebp]
	mov	DWORD PTR _v$2[ebp], edx
; Line 1489
	mov	eax, DWORD PTR _v$2[ebp]
	sub	eax, 251				; 000000fbH
	mov	DWORD PTR _v$2[ebp], eax
; Line 1490
	mov	ecx, DWORD PTR _v$2[ebp]
	shl	ecx, 8
	mov	DWORD PTR _v$2[ebp], ecx
; Line 1491
	mov	edx, DWORD PTR _charstring$[ebp]
	push	edx
	call	_cf2_buf_readByte
	add	esp, 4
	add	eax, DWORD PTR _v$2[ebp]
	mov	DWORD PTR _v$2[ebp], eax
; Line 1492
	mov	eax, DWORD PTR _v$2[ebp]
	neg	eax
	sub	eax, 108				; 0000006cH
	mov	DWORD PTR _v$2[ebp], eax
$LN17@cf2_interp:
; Line 1494
	mov	ecx, 4
	imul	edx, ecx, 53
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN14@cf2_interp
	mov	eax, DWORD PTR _v$2[ebp]
	push	eax
	push	OFFSET $SG15306
	call	_FT_Message
	add	esp, 8
$LN14@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN17@cf2_interp
; Line 1497
	mov	edx, DWORD PTR _v$2[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_pushInt
	add	esp, 8
; Line 1500
	jmp	$LN13@cf2_interp
$LN18@cf2_interp:
; Line 1509
	mov	ecx, DWORD PTR _charstring$[ebp]
	push	ecx
	call	_cf2_buf_readByte
	add	esp, 4
	mov	esi, eax
	shl	esi, 24					; 00000018H
	mov	edx, DWORD PTR _charstring$[ebp]
	push	edx
	call	_cf2_buf_readByte
	add	esp, 4
	shl	eax, 16					; 00000010H
	or	esi, eax
	mov	eax, DWORD PTR _charstring$[ebp]
	push	eax
	call	_cf2_buf_readByte
	add	esp, 4
	shl	eax, 8
	or	esi, eax
	mov	ecx, DWORD PTR _charstring$[ebp]
	push	ecx
	call	_cf2_buf_readByte
	add	esp, 4
	or	esi, eax
	mov	DWORD PTR _v$1[ebp], esi
$LN12@cf2_interp:
; Line 1511
	mov	edx, 4
	imul	eax, edx, 53
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN9@cf2_interp
	cvtsi2sd xmm0, DWORD PTR _v$1[ebp]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG15318
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN9@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN12@cf2_interp
; Line 1513
	mov	edx, DWORD PTR _v$1[ebp]
	push	edx
	mov	eax, DWORD PTR _opStack$[ebp]
	push	eax
	call	_cf2_stack_pushFixed
	add	esp, 8
$LN13@cf2_interp:
; Line 1516
	jmp	$LN426@cf2_interp
$LN416@cf2_interp:
; Line 1520
	mov	ecx, DWORD PTR _opStack$[ebp]
	push	ecx
	call	_cf2_stack_clear
	add	esp, 4
; Line 1522
	jmp	$LN426@cf2_interp
$LN424@cf2_interp:
; Line 1526
	mov	edx, 4
	imul	eax, edx, 53
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN5@cf2_interp
	push	OFFSET $SG15323
	call	_FT_Message
	add	esp, 4
$LN5@cf2_interp:
	xor	ecx, ecx
	jne	SHORT $LN424@cf2_interp
$exit$480:
; Line 1530
	mov	edx, DWORD PTR _lastError$[ebp]
	push	edx
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	call	_cf2_setError
	add	esp, 8
; Line 1533
	lea	ecx, DWORD PTR _glyphPath$[ebp]
	push	ecx
	call	_cf2_glyphpath_finalize
	add	esp, 4
; Line 1534
	lea	edx, DWORD PTR _vStemHintArray$[ebp]
	push	edx
	call	_cf2_arrstack_finalize
	add	esp, 4
; Line 1535
	lea	eax, DWORD PTR _hStemHintArray$[ebp]
	push	eax
	call	_cf2_arrstack_finalize
	add	esp, 4
; Line 1536
	lea	ecx, DWORD PTR _subrStack$[ebp]
	push	ecx
	call	_cf2_arrstack_finalize
	add	esp, 4
; Line 1537
	mov	edx, DWORD PTR _opStack$[ebp]
	push	edx
	call	_cf2_stack_free
	add	esp, 4
$LN4@cf2_interp:
; Line 1539
	mov	eax, 4
	imul	ecx, eax, 53
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN1@cf2_interp
	push	OFFSET $SG15328
	call	_FT_Message
	add	esp, 4
$LN1@cf2_interp:
	xor	edx, edx
	jne	SHORT $LN4@cf2_interp
; Line 1542
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN477@cf2_interp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 16240				; 00003f70H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN477@cf2_interp:
	DD	10					; 0000000aH
	DD	$LN476@cf2_interp
$LN476@cf2_interp:
	DD	-80					; ffffffb0H
	DD	32					; 00000020H
	DD	$LN466@cf2_interp
	DD	-89					; ffffffa7H
	DD	1
	DD	$LN467@cf2_interp
	DD	-140					; ffffff74H
	DD	32					; 00000020H
	DD	$LN468@cf2_interp
	DD	-180					; ffffff4cH
	DD	32					; 00000020H
	DD	$LN469@cf2_interp
	DD	-216					; ffffff28H
	DD	28					; 0000001cH
	DD	$LN470@cf2_interp
	DD	-12008					; ffffd118H
	DD	11784					; 00002e08H
	DD	$LN471@cf2_interp
	DD	-12104					; ffffd0b8H
	DD	16					; 00000010H
	DD	$LN472@cf2_interp
	DD	-12116					; ffffd0acH
	DD	4
	DD	$LN473@cf2_interp
	DD	-15996					; ffffc184H
	DD	3868					; 00000f1cH
	DD	$LN474@cf2_interp
	DD	-16032					; ffffc160H
	DD	28					; 0000001cH
	DD	$LN475@cf2_interp
$LN475@cf2_interp:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
$LN474@cf2_interp:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	72					; 00000048H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN473@cf2_interp:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN472@cf2_interp:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN471@cf2_interp:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN470@cf2_interp:
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
$LN469@cf2_interp:
	DB	118					; 00000076H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	72					; 00000048H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
$LN468@cf2_interp:
	DB	104					; 00000068H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	72					; 00000048H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
$LN467@cf2_interp:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN466@cf2_interp:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
	npad	3
$LN478@cf2_interp:
	DD	$LN415@cf2_interp
	DD	$LN410@cf2_interp
	DD	$LN399@cf2_interp
	DD	$LN388@cf2_interp
	DD	$LN381@cf2_interp
	DD	$LN373@cf2_interp
	DD	$LN363@cf2_interp
	DD	$LN355@cf2_interp
	DD	$LN335@cf2_interp
	DD	$LN329@cf2_interp
	DD	$LN116@cf2_interp
	DD	$LN103@cf2_interp
	DD	$LN90@cf2_interp
	DD	$LN83@cf2_interp
	DD	$LN76@cf2_interp
	DD	$LN67@cf2_interp
	DD	$LN58@cf2_interp
	DD	$LN36@cf2_interp
	DD	$LN49@cf2_interp
$LN464@cf2_interp:
	DB	0
	DB	1
	DB	0
	DB	2
	DB	3
	DB	4
	DB	5
	DB	5
	DB	6
	DB	0
	DB	7
	DB	8
	DB	9
	DB	0
	DB	10					; 0000000aH
	DB	0
	DB	0
	DB	0
	DB	1
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	2
	DB	6
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	7
	DB	18					; 00000012H
	DB	18					; 00000012H
$LN479@cf2_interp:
	DD	$LN326@cf2_interp
	DD	$LN321@cf2_interp
	DD	$LN312@cf2_interp
	DD	$LN303@cf2_interp
	DD	$LN294@cf2_interp
	DD	$LN285@cf2_interp
	DD	$LN276@cf2_interp
	DD	$LN267@cf2_interp
	DD	$LN258@cf2_interp
	DD	$LN249@cf2_interp
	DD	$LN240@cf2_interp
	DD	$LN231@cf2_interp
	DD	$LN222@cf2_interp
	DD	$LN213@cf2_interp
	DD	$LN204@cf2_interp
	DD	$LN195@cf2_interp
	DD	$LN186@cf2_interp
	DD	$LN177@cf2_interp
	DD	$LN168@cf2_interp
	DD	$LN159@cf2_interp
	DD	$LN150@cf2_interp
	DD	$LN141@cf2_interp
	DD	$LN136@cf2_interp
	DD	$LN131@cf2_interp
	DD	$LN126@cf2_interp
	DD	$LN121@cf2_interp
$LN465@cf2_interp:
	DB	0
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	1
	DB	2
	DB	3
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	4
	DB	5
	DB	6
	DB	7
	DB	25					; 00000019H
	DB	8
	DB	9
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	10					; 0000000aH
	DB	25					; 00000019H
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	25					; 00000019H
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
_cf2_interpT2CharString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mask$ = -8						; size = 4
_i$ = -4						; size = 4
_hintmask$ = 8						; size = 4
_bitCount$ = 12						; size = 4
_cf2_hintmask_setAll PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2intrp.c
; Line 176
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 178
	mov	ecx, DWORD PTR _bitCount$[ebp]
	neg	ecx
	and	ecx, 7
	mov	eax, 1
	shl	eax, cl
	sub	eax, 1
	mov	DWORD PTR _mask$[ebp], eax
; Line 182
	mov	ecx, DWORD PTR _bitCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hintmask$[ebp]
	push	edx
	call	_cf2_hintmask_setCounts
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@cf2_hintma
; Line 183
	jmp	$LN13@cf2_hintma
$LN11@cf2_hintma:
; Line 185
	mov	eax, DWORD PTR _hintmask$[ebp]
	cmp	DWORD PTR [eax+12], 0
	ja	SHORT $LN10@cf2_hintma
	push	OFFSET $SG14531
	push	185					; 000000b9H
	push	OFFSET $SG14532
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN10@cf2_hintma:
	xor	ecx, ecx
	jne	SHORT $LN11@cf2_hintma
$LN7@cf2_hintma:
; Line 187
	mov	edx, DWORD PTR _hintmask$[ebp]
	cmp	DWORD PTR [edx+12], 12			; 0000000cH
	jb	SHORT $LN6@cf2_hintma
	push	OFFSET $SG14537
	push	187					; 000000bbH
	push	OFFSET $SG14538
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN6@cf2_hintma:
	xor	eax, eax
	jne	SHORT $LN7@cf2_hintma
; Line 190
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@cf2_hintma
$LN2@cf2_hintma:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@cf2_hintma:
	mov	edx, DWORD PTR _hintmask$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jae	SHORT $LN1@cf2_hintma
; Line 191
	mov	ecx, DWORD PTR _hintmask$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+16], 255			; 000000ffH
	jmp	SHORT $LN2@cf2_hintma
$LN1@cf2_hintma:
; Line 195
	mov	edx, DWORD PTR _hintmask$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _mask$[ebp]
	not	ecx
	mov	edx, DWORD PTR _hintmask$[ebp]
	movzx	eax, BYTE PTR [edx+eax+15]
	and	eax, ecx
	mov	ecx, DWORD PTR _hintmask$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _hintmask$[ebp]
	mov	BYTE PTR [ecx+edx+15], al
$LN13@cf2_hintma:
; Line 196
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hintmask_setAll ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hintmask$ = 8						; size = 4
_cf2_hintmask_getMaskPtr PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2intrp.c
; Line 103
	push	ebp
	mov	ebp, esp
; Line 104
	mov	eax, DWORD PTR _hintmask$[ebp]
	add	eax, 16					; 00000010H
; Line 105
	pop	ebp
	ret	0
_cf2_hintmask_getMaskPtr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hintmask$ = 8						; size = 4
_val$ = 12						; size = 1
_cf2_hintmask_setNew PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2intrp.c
; Line 93
	push	ebp
	mov	ebp, esp
; Line 94
	mov	eax, DWORD PTR _hintmask$[ebp]
	mov	cl, BYTE PTR _val$[ebp]
	mov	BYTE PTR [eax+5], cl
; Line 95
	pop	ebp
	ret	0
_cf2_hintmask_setNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hintmask$ = 8						; size = 4
_cf2_hintmask_isNew PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2intrp.c
; Line 85
	push	ebp
	mov	ebp, esp
; Line 86
	mov	eax, DWORD PTR _hintmask$[ebp]
	mov	al, BYTE PTR [eax+5]
; Line 87
	pop	ebp
	ret	0
_cf2_hintmask_isNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hintmask$ = 8						; size = 4
_cf2_hintmask_isValid PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2intrp.c
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR _hintmask$[ebp]
	mov	al, BYTE PTR [eax+4]
; Line 80
	pop	ebp
	ret	0
_cf2_hintmask_isValid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hintmask$ = 8						; size = 4
_error$ = 12						; size = 4
_cf2_hintmask_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2intrp.c
; Line 69
	push	ebp
	mov	ebp, esp
; Line 70
	push	28					; 0000001cH
	push	0
	mov	eax, DWORD PTR _hintmask$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 72
	mov	ecx, DWORD PTR _hintmask$[ebp]
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 73
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_hintmask_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_needWinding$ = -33					; size = 1
_advWidth$ = -28					; size = 4
_translation$ = -16					; size = 8
_lastError$ = -4					; size = 4
_font$ = 8						; size = 4
_charstring$ = 12					; size = 4
_transform$ = 16					; size = 4
_glyphWidth$ = 20					; size = 4
_cf2_getGlyphOutline PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2font.c
; Line 436
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 437
	mov	DWORD PTR _lastError$[ebp], 0
; Line 445
	mov	DWORD PTR _advWidth$[ebp], 0
; Line 452
	mov	eax, DWORD PTR _transform$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _translation$[ebp], ecx
; Line 453
	mov	edx, DWORD PTR _transform$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _translation$[ebp+4], eax
; Line 456
	mov	ecx, DWORD PTR _transform$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	call	_cf2_font_setup
	add	esp, 8
; Line 457
	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN6@cf2_getGly
; Line 458
	jmp	$exit$13
$LN6@cf2_getGly:
; Line 461
	mov	ecx, DWORD PTR _font$[ebp]
	mov	BYTE PTR [ecx+192], 0
; Line 464
	mov	edx, DWORD PTR _font$[ebp]
	mov	al, BYTE PTR [edx+141]
	mov	BYTE PTR _needWinding$[ebp], al
$LN5@cf2_getGly:
; Line 466
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN4@cf2_getGly
; Line 469
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_cf2_outline_reset
	add	esp, 4
; Line 479
	lea	eax, DWORD PTR _advWidth$[ebp]
	push	eax
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _translation$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _charstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	call	_cf2_interpT2CharString
	add	esp, 32					; 00000020H
; Line 481
	mov	edx, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN3@cf2_getGly
; Line 482
	jmp	SHORT $exit$13
$LN3@cf2_getGly:
; Line 484
	movzx	eax, BYTE PTR _needWinding$[ebp]
	test	eax, eax
	jne	SHORT $LN2@cf2_getGly
; Line 485
	jmp	SHORT $LN4@cf2_getGly
$LN2@cf2_getGly:
; Line 488
	mov	ecx, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [ecx+116], 0
	jl	SHORT $LN1@cf2_getGly
; Line 489
	jmp	SHORT $LN4@cf2_getGly
$LN1@cf2_getGly:
; Line 493
	mov	edx, DWORD PTR _font$[ebp]
	mov	BYTE PTR [edx+192], 1
; Line 495
	mov	BYTE PTR _needWinding$[ebp], 0
; Line 496
	jmp	SHORT $LN5@cf2_getGly
$LN4@cf2_getGly:
; Line 499
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_cf2_outline_close
	add	esp, 4
$exit$13:
; Line 503
	mov	ecx, DWORD PTR _glyphWidth$[ebp]
	mov	edx, DWORD PTR _advWidth$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 506
	mov	eax, DWORD PTR _lastError$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 4
	push	ecx
	call	_cf2_setError
	add	esp, 8
; Line 508
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+4]
; Line 509
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@cf2_getGly
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@cf2_getGly:
	DD	2
	DD	$LN11@cf2_getGly
$LN11@cf2_getGly:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN9@cf2_getGly
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN10@cf2_getGly
$LN10@cf2_getGly:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN9@cf2_getGly:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
_cf2_getGlyphOutline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyphpath$ = 8						; size = 4
_cf2_glyphpath_closeOpenPath PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 1816
	push	ebp
	mov	ebp, esp
; Line 1817
	mov	eax, DWORD PTR _glyphpath$[ebp]
	movzx	ecx, BYTE PTR [eax+11664]
	test	ecx, ecx
	je	$LN3@cf2_glyphp
; Line 1824
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [edx+11665], 1
; Line 1828
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11740]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11736]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	push	ecx
	call	_cf2_glyphpath_lineTo
	add	esp, 12					; 0000000cH
; Line 1831
	mov	edx, DWORD PTR _glyphpath$[ebp]
	movzx	eax, BYTE PTR [edx+11744]
	test	eax, eax
	je	SHORT $LN1@cf2_glyphp
; Line 1836
	push	1
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11716]
	push	edx
	mov	eax, DWORD PTR [ecx+11712]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	add	ecx, 11704				; 00002db8H
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	push	eax
	call	_cf2_glyphpath_pushPrevElem
	add	esp, 24					; 00000018H
$LN1@cf2_glyphp:
; Line 1839
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [ecx+11667], 1
; Line 1840
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [edx+11664], 0
; Line 1841
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [eax+11665], 0
; Line 1842
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [ecx+11744], 0
$LN3@cf2_glyphp:
; Line 1844
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_glyphpath_closeOpenPath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_P3$ = -108						; size = 8
_P2$ = -92						; size = 8
_P1$ = -76						; size = 8
_P0$ = -60						; size = 8
_yOffset3$ = -44					; size = 4
_xOffset3$ = -32					; size = 4
_yOffset1$ = -20					; size = 4
_xOffset1$ = -8						; size = 4
_glyphpath$ = 8						; size = 4
_x1$ = 12						; size = 4
_y1$ = 16						; size = 4
_x2$ = 20						; size = 4
_y2$ = 24						; size = 4
_x3$ = 28						; size = 4
_y3$ = 32						; size = 4
_cf2_glyphpath_curveTo PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 1733
	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1745
	lea	eax, DWORD PTR _yOffset1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xOffset1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y1$[ebp]
	push	edx
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11724]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11720]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	push	edx
	call	_cf2_glyphpath_computeOffset
	add	esp, 28					; 0000001cH
; Line 1752
	lea	eax, DWORD PTR _yOffset3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xOffset3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y3$[ebp]
	push	edx
	mov	eax, DWORD PTR _x3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	push	eax
	call	_cf2_glyphpath_computeOffset
	add	esp, 28					; 0000001cH
; Line 1756
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	esi, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _y2$[ebp]
	push	edx
	mov	eax, DWORD PTR _x2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x1$[ebp]
	push	edx
	call	_cf2_getWindingMomentum
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+16], eax
; Line 1759
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11720]
	add	ecx, DWORD PTR _xOffset1$[ebp]
	mov	DWORD PTR _P0$[ebp], ecx
; Line 1760
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11724]
	add	eax, DWORD PTR _yOffset1$[ebp]
	mov	DWORD PTR _P0$[ebp+4], eax
; Line 1761
	mov	ecx, DWORD PTR _x1$[ebp]
	add	ecx, DWORD PTR _xOffset1$[ebp]
	mov	DWORD PTR _P1$[ebp], ecx
; Line 1762
	mov	edx, DWORD PTR _y1$[ebp]
	add	edx, DWORD PTR _yOffset1$[ebp]
	mov	DWORD PTR _P1$[ebp+4], edx
; Line 1764
	mov	eax, DWORD PTR _x2$[ebp]
	add	eax, DWORD PTR _xOffset3$[ebp]
	mov	DWORD PTR _P2$[ebp], eax
; Line 1765
	mov	ecx, DWORD PTR _y2$[ebp]
	add	ecx, DWORD PTR _yOffset3$[ebp]
	mov	DWORD PTR _P2$[ebp+4], ecx
; Line 1766
	mov	edx, DWORD PTR _x3$[ebp]
	add	edx, DWORD PTR _xOffset3$[ebp]
	mov	DWORD PTR _P3$[ebp], edx
; Line 1767
	mov	eax, DWORD PTR _y3$[ebp]
	add	eax, DWORD PTR _yOffset3$[ebp]
	mov	DWORD PTR _P3$[ebp+4], eax
; Line 1769
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	movzx	edx, BYTE PTR [ecx+11667]
	test	edx, edx
	je	SHORT $LN7@cf2_glyphp
; Line 1772
	mov	eax, DWORD PTR _P0$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _P0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	push	edx
	call	_cf2_glyphpath_pushMove
	add	esp, 12					; 0000000cH
; Line 1774
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [eax+11667], 0
; Line 1775
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [ecx+11664], 1
; Line 1777
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR _P1$[ebp]
	mov	DWORD PTR [edx+11712], eax
	mov	ecx, DWORD PTR _P1$[ebp+4]
	mov	DWORD PTR [edx+11716], ecx
$LN7@cf2_glyphp:
; Line 1780
	mov	edx, DWORD PTR _glyphpath$[ebp]
	movzx	eax, BYTE PTR [edx+11744]
	test	eax, eax
	je	SHORT $LN6@cf2_glyphp
$LN5@cf2_glyphp:
; Line 1783
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	add	ecx, 8
	push	ecx
	call	_cf2_hintmap_isValid
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@cf2_glyphp
	mov	eax, DWORD PTR _glyphpath$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN4@cf2_glyphp
	push	OFFSET $SG14396
	push	1783					; 000006f7H
	push	OFFSET $SG14397
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_glyphp:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_glyphp
; Line 1789
	push	0
	mov	edx, DWORD PTR _P1$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _P1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _P0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	push	eax
	call	_cf2_glyphpath_pushPrevElem
	add	esp, 24					; 00000018H
$LN6@cf2_glyphp:
; Line 1793
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [ecx+11744], 1
; Line 1794
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	DWORD PTR [edx+11748], 4
; Line 1795
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _P0$[ebp]
	mov	DWORD PTR [eax+11752], ecx
	mov	edx, DWORD PTR _P0$[ebp+4]
	mov	DWORD PTR [eax+11756], edx
; Line 1796
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _P1$[ebp]
	mov	DWORD PTR [eax+11760], ecx
	mov	edx, DWORD PTR _P1$[ebp+4]
	mov	DWORD PTR [eax+11764], edx
; Line 1797
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _P2$[ebp]
	mov	DWORD PTR [eax+11768], ecx
	mov	edx, DWORD PTR _P2$[ebp+4]
	mov	DWORD PTR [eax+11772], edx
; Line 1798
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _P3$[ebp]
	mov	DWORD PTR [eax+11776], ecx
	mov	edx, DWORD PTR _P3$[ebp+4]
	mov	DWORD PTR [eax+11780], edx
; Line 1801
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11676]
	push	ecx
	call	_cf2_hintmask_isNew
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@cf2_glyphp
; Line 1807
	push	0
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11680]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11676]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11672]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11668]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	edx, 8
	push	edx
	call	_cf2_hintmap_build
	add	esp, 24					; 00000018H
$LN1@cf2_glyphp:
; Line 1809
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _x3$[ebp]
	mov	DWORD PTR [eax+11720], ecx
; Line 1810
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR _y3$[ebp]
	mov	DWORD PTR [edx+11724], eax
; Line 1811
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@cf2_glyphp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@cf2_glyphp:
	DD	8
	DD	$LN18@cf2_glyphp
$LN18@cf2_glyphp:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@cf2_glyphp
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@cf2_glyphp
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN12@cf2_glyphp
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN13@cf2_glyphp
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN14@cf2_glyphp
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN15@cf2_glyphp
	DD	-92					; ffffffa4H
	DD	8
	DD	$LN16@cf2_glyphp
	DD	-108					; ffffff94H
	DD	8
	DD	$LN17@cf2_glyphp
$LN17@cf2_glyphp:
	DB	80					; 00000050H
	DB	51					; 00000033H
	DB	0
$LN16@cf2_glyphp:
	DB	80					; 00000050H
	DB	50					; 00000032H
	DB	0
$LN15@cf2_glyphp:
	DB	80					; 00000050H
	DB	49					; 00000031H
	DB	0
$LN14@cf2_glyphp:
	DB	80					; 00000050H
	DB	48					; 00000030H
	DB	0
$LN13@cf2_glyphp:
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	51					; 00000033H
	DB	0
$LN12@cf2_glyphp:
	DB	120					; 00000078H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	51					; 00000033H
	DB	0
$LN11@cf2_glyphp:
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	49					; 00000031H
	DB	0
$LN10@cf2_glyphp:
	DB	120					; 00000078H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	49					; 00000031H
	DB	0
_cf2_glyphpath_curveTo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -64						; size = 4
_newHintMap$ = -57					; size = 1
_P1$ = -52						; size = 8
_P0$ = -36						; size = 8
_yOffset$ = -20						; size = 4
_xOffset$ = -8						; size = 4
_glyphpath$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_cf2_glyphpath_lineTo PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 1623
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1637
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11676]
	push	ecx
	call	_cf2_hintmask_isNew
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@cf2_glyphp
	mov	eax, DWORD PTR _glyphpath$[ebp]
	movzx	ecx, BYTE PTR [eax+11665]
	test	ecx, ecx
	jne	SHORT $LN11@cf2_glyphp
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN12@cf2_glyphp
$LN11@cf2_glyphp:
	mov	DWORD PTR tv72[ebp], 0
$LN12@cf2_glyphp:
	mov	dl, BYTE PTR tv72[ebp]
	mov	BYTE PTR _newHintMap$[ebp], dl
; Line 1658
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11720]
	cmp	ecx, DWORD PTR _x$[ebp]
	jne	SHORT $LN8@cf2_glyphp
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11724]
	cmp	eax, DWORD PTR _y$[ebp]
	jne	SHORT $LN8@cf2_glyphp
	movzx	ecx, BYTE PTR _newHintMap$[ebp]
	test	ecx, ecx
	jne	SHORT $LN8@cf2_glyphp
; Line 1666
	jmp	$LN9@cf2_glyphp
$LN8@cf2_glyphp:
; Line 1674
	lea	edx, DWORD PTR _yOffset$[ebp]
	push	edx
	lea	eax, DWORD PTR _xOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11724]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11720]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	push	ecx
	call	_cf2_glyphpath_computeOffset
	add	esp, 28					; 0000001cH
; Line 1677
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11720]
	add	eax, DWORD PTR _xOffset$[ebp]
	mov	DWORD PTR _P0$[ebp], eax
; Line 1678
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11724]
	add	edx, DWORD PTR _yOffset$[ebp]
	mov	DWORD PTR _P0$[ebp+4], edx
; Line 1679
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _xOffset$[ebp]
	mov	DWORD PTR _P1$[ebp], eax
; Line 1680
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _yOffset$[ebp]
	mov	DWORD PTR _P1$[ebp+4], ecx
; Line 1682
	mov	edx, DWORD PTR _glyphpath$[ebp]
	movzx	eax, BYTE PTR [edx+11667]
	test	eax, eax
	je	SHORT $LN7@cf2_glyphp
; Line 1685
	mov	ecx, DWORD PTR _P0$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _P0$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	push	eax
	call	_cf2_glyphpath_pushMove
	add	esp, 12					; 0000000cH
; Line 1687
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [ecx+11667], 0
; Line 1688
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [edx+11664], 1
; Line 1690
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _P1$[ebp]
	mov	DWORD PTR [eax+11712], ecx
	mov	edx, DWORD PTR _P1$[ebp+4]
	mov	DWORD PTR [eax+11716], edx
$LN7@cf2_glyphp:
; Line 1693
	mov	eax, DWORD PTR _glyphpath$[ebp]
	movzx	ecx, BYTE PTR [eax+11744]
	test	ecx, ecx
	je	SHORT $LN6@cf2_glyphp
$LN5@cf2_glyphp:
; Line 1696
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	edx, 8
	push	edx
	call	_cf2_hintmap_isValid
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@cf2_glyphp
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN4@cf2_glyphp
	push	OFFSET $SG14364
	push	1696					; 000006a0H
	push	OFFSET $SG14365
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_glyphp:
	xor	edx, edx
	jne	SHORT $LN5@cf2_glyphp
; Line 1702
	push	0
	mov	eax, DWORD PTR _P1$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _P1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _P0$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	push	ecx
	call	_cf2_glyphpath_pushPrevElem
	add	esp, 24					; 00000018H
$LN6@cf2_glyphp:
; Line 1706
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [edx+11744], 1
; Line 1707
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	DWORD PTR [eax+11748], 2
; Line 1708
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR _P0$[ebp]
	mov	DWORD PTR [ecx+11752], edx
	mov	eax, DWORD PTR _P0$[ebp+4]
	mov	DWORD PTR [ecx+11756], eax
; Line 1709
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR _P1$[ebp]
	mov	DWORD PTR [ecx+11760], edx
	mov	eax, DWORD PTR _P1$[ebp+4]
	mov	DWORD PTR [ecx+11764], eax
; Line 1712
	movzx	ecx, BYTE PTR _newHintMap$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@cf2_glyphp
; Line 1718
	push	0
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11680]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11676]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11672]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11668]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	add	ecx, 8
	push	ecx
	call	_cf2_hintmap_build
	add	esp, 24					; 00000018H
$LN1@cf2_glyphp:
; Line 1720
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+11720], eax
; Line 1721
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx+11724], edx
$LN9@cf2_glyphp:
; Line 1722
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@cf2_glyphp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@cf2_glyphp:
	DD	4
	DD	$LN17@cf2_glyphp
$LN17@cf2_glyphp:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@cf2_glyphp
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@cf2_glyphp
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN15@cf2_glyphp
	DD	-52					; ffffffccH
	DD	8
	DD	$LN16@cf2_glyphp
$LN16@cf2_glyphp:
	DB	80					; 00000050H
	DB	49					; 00000031H
	DB	0
$LN15@cf2_glyphp:
	DB	80					; 00000050H
	DB	48					; 00000030H
	DB	0
$LN14@cf2_glyphp:
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN13@cf2_glyphp:
	DB	120					; 00000078H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_cf2_glyphpath_lineTo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyphpath$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_cf2_glyphpath_moveTo PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 1593
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 1594
	mov	eax, DWORD PTR _glyphpath$[ebp]
	push	eax
	call	_cf2_glyphpath_closeOpenPath
	add	esp, 4
; Line 1599
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx+11736], edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+11720], ecx
; Line 1600
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+11740], eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx+11724], edx
; Line 1602
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [eax+11667], 1
; Line 1606
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	add	ecx, 8
	push	ecx
	call	_cf2_hintmap_isValid
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@cf2_glyphp
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11676]
	push	ecx
	call	_cf2_hintmask_isNew
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@cf2_glyphp
$LN1@cf2_glyphp:
; Line 1612
	push	0
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11680]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11676]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11672]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11668]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	edx, 8
	push	edx
	call	_cf2_hintmap_build
	add	esp, 24					; 00000018H
$LN2@cf2_glyphp:
; Line 1615
	mov	esi, DWORD PTR _glyphpath$[ebp]
	add	esi, 8
	mov	edi, DWORD PTR _glyphpath$[ebp]
	add	edi, 3876				; 00000f24H
	mov	ecx, 967				; 000003c7H
	rep movsd
; Line 1616
	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_glyphpath_moveTo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyphpath$ = 8						; size = 4
_cf2_glyphpath_finalize PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 1076
	push	ebp
	mov	ebp, esp
; Line 1077
	mov	eax, DWORD PTR _glyphpath$[ebp]
	add	eax, 11612				; 00002d5cH
	push	eax
	call	_cf2_arrstack_finalize
	add	esp, 4
; Line 1078
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_glyphpath_finalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv176 = -20						; size = 4
tv177 = -16						; size = 4
tv170 = -12						; size = 4
tv163 = -8						; size = 4
tv157 = -4						; size = 4
_glyphpath$ = 8						; size = 4
_font$ = 12						; size = 4
_callbacks$ = 16					; size = 4
_scaleY$ = 20						; size = 4
_hStemHintArray$ = 24					; size = 4
_vStemHintArray$ = 28					; size = 4
_hintMask$ = 32						; size = 4
_hintOriginY$ = 36					; size = 4
_blues$ = 40						; size = 4
_fractionalTranslation$ = 44				; size = 4
_cf2_glyphpath_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 1015
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1016
	push	11784					; 00002e08H
	push	0
	mov	eax, DWORD PTR _glyphpath$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1018
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1019
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _callbacks$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1024
	push	8
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	edx, 11612				; 00002d5cH
	push	edx
	call	_cf2_arrstack_init
	add	esp, 16					; 00000010H
; Line 1030
	mov	eax, DWORD PTR _scaleY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	add	ecx, 11612				; 00002d5cH
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	edx, 7744				; 00001e40H
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	add	ecx, 7744				; 00001e40H
	push	ecx
	call	_cf2_hintmap_init
	add	esp, 20					; 00000014H
; Line 1035
	mov	edx, DWORD PTR _scaleY$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	add	eax, 11612				; 00002d5cH
	push	eax
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	add	ecx, 7744				; 00001e40H
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	add	eax, 3876				; 00000f24H
	push	eax
	call	_cf2_hintmap_init
	add	esp, 20					; 00000014H
; Line 1040
	mov	ecx, DWORD PTR _scaleY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	edx, 11612				; 00002d5cH
	push	edx
	mov	eax, DWORD PTR _glyphpath$[ebp]
	add	eax, 7744				; 00001e40H
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyphpath$[ebp]
	add	edx, 8
	push	edx
	call	_cf2_hintmap_init
	add	esp, 20					; 00000014H
; Line 1042
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+11644], edx
; Line 1043
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+11648], edx
; Line 1044
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+11652], edx
; Line 1046
	mov	eax, DWORD PTR _fractionalTranslation$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	DWORD PTR [eax+11656], ecx
	mov	DWORD PTR [eax+11660], edx
; Line 1052
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR _hStemHintArray$[ebp]
	mov	DWORD PTR [ecx+11668], edx
; Line 1053
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _vStemHintArray$[ebp]
	mov	DWORD PTR [eax+11672], ecx
; Line 1054
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR _hintMask$[ebp]
	mov	DWORD PTR [edx+11676], eax
; Line 1055
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR _hintOriginY$[ebp]
	mov	DWORD PTR [ecx+11680], edx
; Line 1056
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [eax+11684], ecx
; Line 1057
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR _font$[ebp]
	mov	cl, BYTE PTR [eax+141]
	mov	BYTE PTR [edx+11666], cl
; Line 1058
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	DWORD PTR [edx+11688], ecx
; Line 1059
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	DWORD PTR [edx+11692], ecx
; Line 1062
	mov	edx, DWORD PTR _glyphpath$[ebp]
	cmp	DWORD PTR [edx+11688], 0
	jge	SHORT $LN3@cf2_glyphp
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	ecx, DWORD PTR [eax+11688]
	neg	ecx
	mov	DWORD PTR tv157[ebp], ecx
	jmp	SHORT $LN4@cf2_glyphp
$LN3@cf2_glyphp:
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11688]
	mov	DWORD PTR tv157[ebp], eax
$LN4@cf2_glyphp:
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	cmp	DWORD PTR [ecx+11692], 0
	jge	SHORT $LN5@cf2_glyphp
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11692]
	neg	eax
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN6@cf2_glyphp
$LN5@cf2_glyphp:
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11692]
	mov	DWORD PTR tv163[ebp], edx
$LN6@cf2_glyphp:
	mov	eax, DWORD PTR tv157[ebp]
	cmp	eax, DWORD PTR tv163[ebp]
	jle	SHORT $LN11@cf2_glyphp
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	cmp	DWORD PTR [ecx+11688], 0
	jge	SHORT $LN7@cf2_glyphp
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11688]
	neg	eax
	mov	DWORD PTR tv170[ebp], eax
	jmp	SHORT $LN8@cf2_glyphp
$LN7@cf2_glyphp:
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11688]
	mov	DWORD PTR tv170[ebp], edx
$LN8@cf2_glyphp:
	mov	eax, DWORD PTR tv170[ebp]
	mov	DWORD PTR tv177[ebp], eax
	jmp	SHORT $LN12@cf2_glyphp
$LN11@cf2_glyphp:
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	cmp	DWORD PTR [ecx+11692], 0
	jge	SHORT $LN9@cf2_glyphp
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	eax, DWORD PTR [edx+11692]
	neg	eax
	mov	DWORD PTR tv176[ebp], eax
	jmp	SHORT $LN10@cf2_glyphp
$LN9@cf2_glyphp:
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	edx, DWORD PTR [ecx+11692]
	mov	DWORD PTR tv176[ebp], edx
$LN10@cf2_glyphp:
	mov	eax, DWORD PTR tv176[ebp]
	mov	DWORD PTR tv177[ebp], eax
$LN12@cf2_glyphp:
	mov	ecx, DWORD PTR tv177[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	DWORD PTR [edx+11696], ecx
; Line 1065
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	DWORD PTR [eax+11700], 6554		; 0000199aH
; Line 1067
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [ecx+11667], 1
; Line 1068
	mov	edx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [edx+11664], 0
; Line 1069
	mov	eax, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [eax+11665], 0
; Line 1070
	mov	ecx, DWORD PTR _glyphpath$[ebp]
	mov	BYTE PTR [ecx+11744], 0
; Line 1071
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_glyphpath_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stemhint$1 = -260					; size = 4
_topHintEdge$2 = -252					; size = 20
_bottomHintEdge$3 = -224				; size = 20
_invalid$4 = -196					; size = 20
_edge$5 = -168						; size = 20
_topHintEdge$6 = -140					; size = 20
_bottomHintEdge$7 = -112				; size = 20
_dummy$8 = -84						; size = 20
_maskByte$ = -57					; size = 1
_i$ = -56						; size = 4
_bitCount$ = -52					; size = 4
_tempHintMask$ = -44					; size = 28
_font$ = -12						; size = 4
_maskPtr$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hintmap$ = 8						; size = 4
_hStemHintArray$ = 12					; size = 4
_vStemHintArray$ = 16					; size = 4
_hintMask$ = 20						; size = 4
_hintOrigin$ = 24					; size = 4
_initialMap$ = 28					; size = 1
_cf2_hintmap_build PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 752
	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 755
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _font$[ebp], ecx
; Line 763
	movzx	edx, BYTE PTR _initialMap$[ebp]
	test	edx, edx
	jne	SHORT $LN30@cf2_hintma
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_cf2_hintmap_isValid
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN30@cf2_hintma
; Line 767
	mov	eax, DWORD PTR _hintMask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _tempHintMask$[ebp]
	push	edx
	call	_cf2_hintmask_init
	add	esp, 8
; Line 773
	push	1
	mov	eax, DWORD PTR _hintOrigin$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempHintMask$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vStemHintArray$[ebp]
	push	edx
	mov	eax, DWORD PTR _hStemHintArray$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_cf2_hintmap_build
	add	esp, 24					; 00000018H
$LN30@cf2_hintma:
; Line 776
	mov	eax, DWORD PTR _hintMask$[ebp]
	push	eax
	call	_cf2_hintmask_isValid
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN29@cf2_hintma
; Line 781
	mov	edx, DWORD PTR _hStemHintArray$[ebp]
	push	edx
	call	_cf2_arrstack_size
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _vStemHintArray$[ebp]
	push	eax
	call	_cf2_arrstack_size
	add	esp, 4
	add	esi, eax
	push	esi
	mov	ecx, DWORD PTR _hintMask$[ebp]
	push	ecx
	call	_cf2_hintmask_setAll
	add	esp, 8
; Line 782
	mov	edx, DWORD PTR _hintMask$[ebp]
	push	edx
	call	_cf2_hintmask_isValid
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN29@cf2_hintma
; Line 783
	jmp	$LN31@cf2_hintma
$LN29@cf2_hintma:
; Line 787
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 788
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 791
	mov	ecx, 7
	mov	esi, DWORD PTR _hintMask$[ebp]
	lea	edi, DWORD PTR _tempHintMask$[ebp]
	rep movsd
; Line 792
	lea	eax, DWORD PTR _tempHintMask$[ebp]
	push	eax
	call	_cf2_hintmask_getMaskPtr
	add	esp, 4
	mov	DWORD PTR _maskPtr$[ebp], eax
; Line 795
	mov	ecx, DWORD PTR _hStemHintArray$[ebp]
	push	ecx
	call	_cf2_arrstack_size
	add	esp, 4
	mov	DWORD PTR _bitCount$[ebp], eax
; Line 798
	mov	edx, DWORD PTR _hintMask$[ebp]
	mov	eax, DWORD PTR _bitCount$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jbe	SHORT $LN27@cf2_hintma
; Line 799
	jmp	$LN31@cf2_hintma
$LN27@cf2_hintma:
; Line 802
	mov	ecx, DWORD PTR _font$[ebp]
	movzx	edx, BYTE PTR [ecx+205]
	test	edx, edx
	je	SHORT $LN26@cf2_hintma
; Line 807
	lea	eax, DWORD PTR _dummy$8[ebp]
	push	eax
	call	_cf2_hint_initZero
	add	esp, 4
; Line 812
	lea	ecx, DWORD PTR _dummy$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 244				; 000000f4H
	push	edx
	mov	eax, DWORD PTR _hintmap$[ebp]
	push	eax
	call	_cf2_hintmap_insertHint
	add	esp, 12					; 0000000cH
; Line 816
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 224				; 000000e0H
	push	ecx
	lea	edx, DWORD PTR _dummy$8[ebp]
	push	edx
	mov	eax, DWORD PTR _hintmap$[ebp]
	push	eax
	call	_cf2_hintmap_insertHint
	add	esp, 12					; 0000000cH
$LN26@cf2_hintma:
; Line 821
	mov	DWORD PTR _i$[ebp], 0
	mov	BYTE PTR _maskByte$[ebp], 128		; 00000080H
	jmp	SHORT $LN25@cf2_hintma
$LN24@cf2_hintma:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN25@cf2_hintma:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _bitCount$[ebp]
	jae	$LN23@cf2_hintma
; Line 823
	movzx	eax, BYTE PTR _maskByte$[ebp]
	mov	ecx, DWORD PTR _maskPtr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	eax, edx
	je	$LN22@cf2_hintma
; Line 835
	push	1
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _hintOrigin$[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hStemHintArray$[ebp]
	push	edx
	lea	eax, DWORD PTR _bottomHintEdge$7[ebp]
	push	eax
	call	_cf2_hint_init
	add	esp, 28					; 0000001cH
; Line 842
	push	0
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _hintOrigin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _hStemHintArray$[ebp]
	push	eax
	lea	ecx, DWORD PTR _topHintEdge$6[ebp]
	push	ecx
	call	_cf2_hint_init
	add	esp, 28					; 0000001cH
; Line 848
	lea	edx, DWORD PTR _bottomHintEdge$7[ebp]
	push	edx
	call	_cf2_hint_isLocked
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN20@cf2_hintma
	lea	ecx, DWORD PTR _topHintEdge$6[ebp]
	push	ecx
	call	_cf2_hint_isLocked
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN20@cf2_hintma
	lea	eax, DWORD PTR _topHintEdge$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _bottomHintEdge$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 196				; 000000c4H
	push	edx
	call	_cf2_blues_capture
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN22@cf2_hintma
$LN20@cf2_hintma:
; Line 851
	lea	ecx, DWORD PTR _topHintEdge$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _bottomHintEdge$7[ebp]
	push	edx
	mov	eax, DWORD PTR _hintmap$[ebp]
	push	eax
	call	_cf2_hintmap_insertHint
	add	esp, 12					; 0000000cH
; Line 853
	movzx	ecx, BYTE PTR _maskByte$[ebp]
	not	ecx
	mov	edx, DWORD PTR _maskPtr$[ebp]
	movzx	eax, BYTE PTR [edx]
	and	eax, ecx
	mov	ecx, DWORD PTR _maskPtr$[ebp]
	mov	BYTE PTR [ecx], al
$LN22@cf2_hintma:
; Line 857
	mov	edx, DWORD PTR _i$[ebp]
	and	edx, 7
	cmp	edx, 7
	jne	SHORT $LN19@cf2_hintma
; Line 860
	mov	eax, DWORD PTR _maskPtr$[ebp]
	add	eax, 1
	mov	DWORD PTR _maskPtr$[ebp], eax
; Line 861
	mov	BYTE PTR _maskByte$[ebp], 128		; 00000080H
; Line 863
	jmp	SHORT $LN18@cf2_hintma
$LN19@cf2_hintma:
; Line 864
	mov	cl, BYTE PTR _maskByte$[ebp]
	shr	cl, 1
	mov	BYTE PTR _maskByte$[ebp], cl
$LN18@cf2_hintma:
; Line 865
	jmp	$LN24@cf2_hintma
$LN23@cf2_hintma:
; Line 889
	movzx	edx, BYTE PTR _initialMap$[ebp]
	test	edx, edx
	je	$LN17@cf2_hintma
; Line 897
	mov	eax, DWORD PTR _hintmap$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN15@cf2_hintma
	mov	ecx, 20					; 00000014H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _hintmap$[ebp]
	cmp	DWORD PTR [eax+edx+36], 0
	jg	SHORT $LN15@cf2_hintma
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 1
	imul	eax, edx, 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	cmp	DWORD PTR [ecx+eax+36], 0
	jge	SHORT $LN16@cf2_hintma
$LN15@cf2_hintma:
; Line 905
	lea	edx, DWORD PTR _edge$5[ebp]
	push	edx
	call	_cf2_hint_initZero
	add	esp, 4
; Line 909
	mov	DWORD PTR _edge$5[ebp], 49		; 00000031H
; Line 910
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _edge$5[ebp+16], ecx
; Line 912
	lea	edx, DWORD PTR _invalid$4[ebp]
	push	edx
	call	_cf2_hint_initZero
	add	esp, 4
; Line 913
	lea	eax, DWORD PTR _invalid$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _edge$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _hintmap$[ebp]
	push	edx
	call	_cf2_hintmap_insertHint
	add	esp, 12					; 0000000cH
$LN16@cf2_hintma:
; Line 916
	jmp	$LN14@cf2_hintma
$LN17@cf2_hintma:
; Line 920
	lea	eax, DWORD PTR _tempHintMask$[ebp]
	push	eax
	call	_cf2_hintmask_getMaskPtr
	add	esp, 4
	mov	DWORD PTR _maskPtr$[ebp], eax
; Line 922
	mov	DWORD PTR _i$[ebp], 0
	mov	BYTE PTR _maskByte$[ebp], 128		; 00000080H
	jmp	SHORT $LN13@cf2_hintma
$LN12@cf2_hintma:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@cf2_hintma:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _bitCount$[ebp]
	jae	$LN14@cf2_hintma
; Line 924
	movzx	eax, BYTE PTR _maskByte$[ebp]
	mov	ecx, DWORD PTR _maskPtr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	eax, edx
	je	SHORT $LN10@cf2_hintma
; Line 935
	push	1
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _hintOrigin$[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hStemHintArray$[ebp]
	push	edx
	lea	eax, DWORD PTR _bottomHintEdge$3[ebp]
	push	eax
	call	_cf2_hint_init
	add	esp, 28					; 0000001cH
; Line 942
	push	0
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _hintOrigin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _hStemHintArray$[ebp]
	push	eax
	lea	ecx, DWORD PTR _topHintEdge$2[ebp]
	push	ecx
	call	_cf2_hint_init
	add	esp, 28					; 0000001cH
; Line 944
	lea	edx, DWORD PTR _topHintEdge$2[ebp]
	push	edx
	lea	eax, DWORD PTR _bottomHintEdge$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _hintmap$[ebp]
	push	ecx
	call	_cf2_hintmap_insertHint
	add	esp, 12					; 0000000cH
$LN10@cf2_hintma:
; Line 947
	mov	edx, DWORD PTR _i$[ebp]
	and	edx, 7
	cmp	edx, 7
	jne	SHORT $LN9@cf2_hintma
; Line 950
	mov	eax, DWORD PTR _maskPtr$[ebp]
	add	eax, 1
	mov	DWORD PTR _maskPtr$[ebp], eax
; Line 951
	mov	BYTE PTR _maskByte$[ebp], 128		; 00000080H
; Line 953
	jmp	SHORT $LN8@cf2_hintma
$LN9@cf2_hintma:
; Line 954
	mov	cl, BYTE PTR _maskByte$[ebp]
	shr	cl, 1
	mov	BYTE PTR _maskByte$[ebp], cl
$LN8@cf2_hintma:
; Line 955
	jmp	$LN12@cf2_hintma
$LN14@cf2_hintma:
; Line 968
	mov	edx, DWORD PTR _hintmap$[ebp]
	push	edx
	call	_cf2_hintmap_adjustHints
	add	esp, 4
; Line 972
	movzx	eax, BYTE PTR _initialMap$[ebp]
	test	eax, eax
	jne	$LN7@cf2_hintma
; Line 974
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@cf2_hintma
$LN5@cf2_hintma:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@cf2_hintma:
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	$LN7@cf2_hintma
; Line 976
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _hintmap$[ebp]
	lea	eax, DWORD PTR [edx+ecx+28]
	push	eax
	call	_cf2_hint_isSynthetic
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@cf2_hintma
; Line 982
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+edx+32]
	push	ecx
	mov	edx, DWORD PTR _hStemHintArray$[ebp]
	push	edx
	call	_cf2_arrstack_getPointer
	add	esp, 8
	mov	DWORD PTR _stemhint$1[ebp], eax
; Line 985
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _hintmap$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28]
	push	edx
	call	_cf2_hint_isTop
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@cf2_hintma
; Line 986
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _stemhint$1[ebp]
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+40]
	mov	DWORD PTR [edx+16], ecx
; Line 987
	jmp	SHORT $LN1@cf2_hintma
$LN2@cf2_hintma:
; Line 988
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	eax, DWORD PTR _stemhint$1[ebp]
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR [ecx+edx+40]
	mov	DWORD PTR [eax+12], edx
$LN1@cf2_hintma:
; Line 990
	mov	eax, DWORD PTR _stemhint$1[ebp]
	mov	BYTE PTR [eax], 1
$LN3@cf2_hintma:
; Line 992
	jmp	$LN5@cf2_hintma
$LN7@cf2_hintma:
; Line 996
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	BYTE PTR [ecx+12], 1
; Line 999
	push	0
	mov	edx, DWORD PTR _hintMask$[ebp]
	push	edx
	call	_cf2_hintmask_setNew
	add	esp, 8
$LN31@cf2_hintma:
; Line 1000
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN42@cf2_hintma
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN42@cf2_hintma:
	DD	8
	DD	$LN41@cf2_hintma
$LN41@cf2_hintma:
	DD	-44					; ffffffd4H
	DD	28					; 0000001cH
	DD	$LN33@cf2_hintma
	DD	-84					; ffffffacH
	DD	20					; 00000014H
	DD	$LN34@cf2_hintma
	DD	-112					; ffffff90H
	DD	20					; 00000014H
	DD	$LN35@cf2_hintma
	DD	-140					; ffffff74H
	DD	20					; 00000014H
	DD	$LN36@cf2_hintma
	DD	-168					; ffffff58H
	DD	20					; 00000014H
	DD	$LN37@cf2_hintma
	DD	-196					; ffffff3cH
	DD	20					; 00000014H
	DD	$LN38@cf2_hintma
	DD	-224					; ffffff20H
	DD	20					; 00000014H
	DD	$LN39@cf2_hintma
	DD	-252					; ffffff04H
	DD	20					; 00000014H
	DD	$LN40@cf2_hintma
$LN40@cf2_hintma:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	72					; 00000048H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN39@cf2_hintma:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	72					; 00000048H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN38@cf2_hintma:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN37@cf2_hintma:
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN36@cf2_hintma:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	72					; 00000048H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN35@cf2_hintma:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	72					; 00000048H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN34@cf2_hintma:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN33@cf2_hintma:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	72					; 00000048H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
_cf2_hintmap_build ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hintmap$ = 8						; size = 4
_font$ = 12						; size = 4
_initialMap$ = 16					; size = 4
_hintMoves$ = 20					; size = 4
_scale$ = 24						; size = 4
_cf2_hintmap_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 282
	push	ebp
	mov	ebp, esp
; Line 283
	push	3868					; 00000f1cH
	push	0
	mov	eax, DWORD PTR _hintmap$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 286
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR _font$[ebp]
	mov	al, BYTE PTR [edx+140]
	mov	BYTE PTR [ecx+13], al
; Line 287
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 288
	mov	eax, DWORD PTR _hintmap$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 289
	mov	edx, DWORD PTR _hintmap$[ebp]
	mov	eax, DWORD PTR _initialMap$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 291
	mov	ecx, DWORD PTR _hintmap$[ebp]
	mov	edx, DWORD PTR _hintMoves$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 292
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_hintmap_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hint$ = 8						; size = 4
_cf2_hint_lock PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 271
	push	ebp
	mov	ebp, esp
; Line 272
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _hint$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 273
	pop	ebp
	ret	0
_cf2_hint_lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -1						; size = 1
_hint$ = 8						; size = 4
_cf2_hint_isBottom PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 249
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 251
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 5
	je	SHORT $LN3@cf2_hint_i
	mov	BYTE PTR tv67[ebp], 1
	jmp	SHORT $LN4@cf2_hint_i
$LN3@cf2_hint_i:
	mov	BYTE PTR tv67[ebp], 0
$LN4@cf2_hint_i:
	mov	al, BYTE PTR tv67[ebp]
; Line 252
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hint_isBottom ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -1						; size = 1
_hint$ = 8						; size = 4
_cf2_hint_isTop PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 241
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 243
	mov	eax, DWORD PTR _hint$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 10					; 0000000aH
	je	SHORT $LN3@cf2_hint_i
	mov	BYTE PTR tv67[ebp], 1
	jmp	SHORT $LN4@cf2_hint_i
$LN3@cf2_hint_i:
	mov	BYTE PTR tv67[ebp], 0
$LN4@cf2_hint_i:
	mov	al, BYTE PTR tv67[ebp]
; Line 244
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hint_isTop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -1						; size = 1
_hint$ = 8						; size = 4
_cf2_hint_isValid PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2hints.c
; Line 219
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 220
	mov	eax, DWORD PTR _hint$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@cf2_hint_i
	mov	BYTE PTR tv66[ebp], 1
	jmp	SHORT $LN4@cf2_hint_i
$LN3@cf2_hint_i:
	mov	BYTE PTR tv66[ebp], 0
$LN4@cf2_hint_i:
	mov	al, BYTE PTR tv66[ebp]
; Line 221
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_hint_isValid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv230 = -28						; size = 4
tv168 = -24						; size = 4
_i$ = -20						; size = 4
_captured$ = -13					; size = 1
_dsMove$ = -12						; size = 4
_dsNew$ = -8						; size = 4
_csFuzz$ = -4						; size = 4
_blues$ = 8						; size = 4
_bottomHintEdge$ = 12					; size = 4
_topHintEdge$ = 16					; size = 4
_cf2_blues_capture PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2blues.c
; Line 468
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 470
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _csFuzz$[ebp], ecx
; Line 476
	mov	DWORD PTR _dsMove$[ebp], 0
; Line 478
	mov	BYTE PTR _captured$[ebp], 0
$LN23@cf2_blues_:
; Line 484
	mov	edx, DWORD PTR _bottomHintEdge$[ebp]
	push	edx
	call	_cf2_hint_isTop
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN19@cf2_blues_
	mov	ecx, DWORD PTR _topHintEdge$[ebp]
	push	ecx
	call	_cf2_hint_isBottom
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN22@cf2_blues_
$LN19@cf2_blues_:
	push	OFFSET $SG13013
	push	484					; 000001e4H
	push	OFFSET $SG13014
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN22@cf2_blues_:
	xor	eax, eax
	jne	SHORT $LN23@cf2_blues_
; Line 487
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@cf2_blues_
$LN17@cf2_blues_:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN18@cf2_blues_:
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	$LN16@cf2_blues_
; Line 490
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _blues$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+84]
	test	eax, eax
	je	$LN15@cf2_blues_
	mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
	push	ecx
	call	_cf2_hint_isBottom
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	$LN15@cf2_blues_
; Line 495
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [ecx+eax+68]
	sub	edx, DWORD PTR _csFuzz$[ebp]
	mov	eax, DWORD PTR _bottomHintEdge$[ebp]
	cmp	edx, DWORD PTR [eax+8]
	jg	$LN15@cf2_blues_
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx+ecx+72]
	add	eax, DWORD PTR _csFuzz$[ebp]
	mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jg	$LN15@cf2_blues_
; Line 499
	mov	edx, DWORD PTR _blues$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	test	eax, eax
	je	SHORT $LN13@cf2_blues_
; Line 500
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx+ecx+80]
	mov	DWORD PTR _dsNew$[ebp], eax
; Line 502
	jmp	$LN12@cf2_blues_
$LN13@cf2_blues_:
; Line 503
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR _bottomHintEdge$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+72]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _blues$[ebp]
	cmp	ecx, DWORD PTR [edx+16]
	jl	SHORT $LN11@cf2_blues_
; Line 508
	mov	eax, DWORD PTR _bottomHintEdge$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 32768				; 00008000H
	and	ecx, -65536				; ffff0000H
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	eax, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [eax+edx+80]
	sub	edx, 65536				; 00010000H
	cmp	ecx, edx
	jge	SHORT $LN26@cf2_blues_
	mov	eax, DWORD PTR _bottomHintEdge$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 32768				; 00008000H
	and	ecx, -65536				; ffff0000H
	mov	DWORD PTR tv168[ebp], ecx
	jmp	SHORT $LN27@cf2_blues_
$LN26@cf2_blues_:
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [eax+edx+80]
	sub	ecx, 65536				; 00010000H
	mov	DWORD PTR tv168[ebp], ecx
$LN27@cf2_blues_:
	mov	edx, DWORD PTR tv168[ebp]
	mov	DWORD PTR _dsNew$[ebp], edx
; Line 511
	jmp	SHORT $LN12@cf2_blues_
$LN11@cf2_blues_:
; Line 514
	mov	eax, DWORD PTR _bottomHintEdge$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 32768				; 00008000H
	and	ecx, -65536				; ffff0000H
	mov	DWORD PTR _dsNew$[ebp], ecx
$LN12@cf2_blues_:
; Line 517
	mov	edx, DWORD PTR _bottomHintEdge$[ebp]
	mov	eax, DWORD PTR _dsNew$[ebp]
	sub	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _dsMove$[ebp], eax
; Line 518
	mov	BYTE PTR _captured$[ebp], 1
; Line 520
	jmp	$LN16@cf2_blues_
$LN15@cf2_blues_:
; Line 524
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _blues$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+84]
	test	eax, eax
	jne	$LN9@cf2_blues_
	mov	ecx, DWORD PTR _topHintEdge$[ebp]
	push	ecx
	call	_cf2_hint_isTop
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	$LN9@cf2_blues_
; Line 529
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [ecx+eax+68]
	sub	edx, DWORD PTR _csFuzz$[ebp]
	mov	eax, DWORD PTR _topHintEdge$[ebp]
	cmp	edx, DWORD PTR [eax+8]
	jg	$LN9@cf2_blues_
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx+ecx+72]
	add	eax, DWORD PTR _csFuzz$[ebp]
	mov	ecx, DWORD PTR _topHintEdge$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jg	$LN9@cf2_blues_
; Line 533
	mov	edx, DWORD PTR _blues$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	test	eax, eax
	je	SHORT $LN7@cf2_blues_
; Line 534
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx+ecx+80]
	mov	DWORD PTR _dsNew$[ebp], eax
; Line 536
	jmp	$LN6@cf2_blues_
$LN7@cf2_blues_:
; Line 537
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _topHintEdge$[ebp]
	mov	eax, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [edx+8]
	sub	edx, DWORD PTR [eax+ecx+68]
	mov	eax, DWORD PTR _blues$[ebp]
	cmp	edx, DWORD PTR [eax+16]
	jl	SHORT $LN5@cf2_blues_
; Line 542
	mov	ecx, DWORD PTR _topHintEdge$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 32768				; 00008000H
	and	edx, -65536				; ffff0000H
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [ecx+eax+80]
	add	eax, 65536				; 00010000H
	cmp	edx, eax
	jle	SHORT $LN28@cf2_blues_
	mov	ecx, DWORD PTR _topHintEdge$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 32768				; 00008000H
	and	edx, -65536				; ffff0000H
	mov	DWORD PTR tv230[ebp], edx
	jmp	SHORT $LN29@cf2_blues_
$LN28@cf2_blues_:
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [ecx+eax+80]
	add	edx, 65536				; 00010000H
	mov	DWORD PTR tv230[ebp], edx
$LN29@cf2_blues_:
	mov	eax, DWORD PTR tv230[ebp]
	mov	DWORD PTR _dsNew$[ebp], eax
; Line 545
	jmp	SHORT $LN6@cf2_blues_
$LN5@cf2_blues_:
; Line 548
	mov	ecx, DWORD PTR _topHintEdge$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 32768				; 00008000H
	and	edx, -65536				; ffff0000H
	mov	DWORD PTR _dsNew$[ebp], edx
$LN6@cf2_blues_:
; Line 551
	mov	eax, DWORD PTR _topHintEdge$[ebp]
	mov	ecx, DWORD PTR _dsNew$[ebp]
	sub	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _dsMove$[ebp], ecx
; Line 552
	mov	BYTE PTR _captured$[ebp], 1
; Line 554
	jmp	SHORT $LN16@cf2_blues_
$LN9@cf2_blues_:
; Line 557
	jmp	$LN17@cf2_blues_
$LN16@cf2_blues_:
; Line 559
	movzx	edx, BYTE PTR _captured$[ebp]
	test	edx, edx
	je	SHORT $LN3@cf2_blues_
; Line 562
	mov	eax, DWORD PTR _bottomHintEdge$[ebp]
	push	eax
	call	_cf2_hint_isValid
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@cf2_blues_
; Line 564
	mov	edx, DWORD PTR _bottomHintEdge$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _dsMove$[ebp]
	mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 565
	mov	edx, DWORD PTR _bottomHintEdge$[ebp]
	push	edx
	call	_cf2_hint_lock
	add	esp, 4
$LN2@cf2_blues_:
; Line 568
	mov	eax, DWORD PTR _topHintEdge$[ebp]
	push	eax
	call	_cf2_hint_isValid
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@cf2_blues_
; Line 570
	mov	edx, DWORD PTR _topHintEdge$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _dsMove$[ebp]
	mov	ecx, DWORD PTR _topHintEdge$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 571
	mov	edx, DWORD PTR _topHintEdge$[ebp]
	push	edx
	call	_cf2_hint_lock
	add	esp, 4
$LN3@cf2_blues_:
; Line 575
	mov	al, BYTE PTR _captured$[ebp]
; Line 576
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_blues_capture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv392 = -156						; size = 4
tv372 = -152						; size = 4
tv355 = -148						; size = 4
_flatEdge$1 = -144					; size = 4
_diff$2 = -140						; size = 4
_flatFamilyEdge$3 = -136				; size = 4
_minDiff$4 = -132					; size = 4
_j$5 = -128						; size = 4
_emBoxTop$ = -124					; size = 4
_emBoxBottom$ = -120					; size = 4
_i$ = -116						; size = 4
_familyOtherBlues$ = -108				; size = 4
_familyBlues$ = -96					; size = 4
_otherBlues$ = -84					; size = 4
_blueValues$ = -72					; size = 4
_numFamilyOtherBlues$ = -60				; size = 4
_numFamilyBlues$ = -48					; size = 4
_numOtherBlues$ = -36					; size = 4
_numBlueValues$ = -24					; size = 4
_csUnitsPerPixel$ = -16					; size = 4
_maxZoneHeight$ = -12					; size = 4
_zoneHeight$ = -8					; size = 4
_decoder$ = -4						; size = 4
_blues$ = 8						; size = 4
_font$ = 12						; size = 4
_cf2_blues_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2blues.c
; Line 68
	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-156]
	mov	ecx, 39					; 00000027H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 70
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _decoder$[ebp], ecx
; Line 73
	mov	DWORD PTR _maxZoneHeight$[ebp], 0
; Line 97
	push	308					; 00000134H
	push	0
	mov	edx, DWORD PTR _blues$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 98
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax], edx
; Line 103
	mov	eax, DWORD PTR _blues$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _blues$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _blues$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cf2_getBlueMetrics
	add	esp, 16					; 00000010H
; Line 105
	lea	ecx, DWORD PTR _blueValues$[ebp]
	push	ecx
	lea	edx, DWORD PTR _numBlueValues$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cf2_getBlueValues
	add	esp, 12					; 0000000cH
; Line 106
	lea	ecx, DWORD PTR _otherBlues$[ebp]
	push	ecx
	lea	edx, DWORD PTR _numOtherBlues$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cf2_getOtherBlues
	add	esp, 12					; 0000000cH
; Line 107
	lea	ecx, DWORD PTR _familyBlues$[ebp]
	push	ecx
	lea	edx, DWORD PTR _numFamilyBlues$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cf2_getFamilyBlues
	add	esp, 12					; 0000000cH
; Line 108
	lea	ecx, DWORD PTR _familyOtherBlues$[ebp]
	push	ecx
	lea	edx, DWORD PTR _numFamilyOtherBlues$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cf2_getFamilyOtherBlues
	add	esp, 12					; 0000000cH
; Line 137
	mov	DWORD PTR _emBoxBottom$[ebp], -7864320	; ff880000H
; Line 138
	mov	DWORD PTR _emBoxTop$[ebp], 57671680	; 03700000H
; Line 147
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_cf2_getLanguageGroup
	add	esp, 4
	cmp	eax, 1
	jne	$LN50@cf2_blues_
	cmp	DWORD PTR _numBlueValues$[ebp], 0
	je	SHORT $LN49@cf2_blues_
	cmp	DWORD PTR _numBlueValues$[ebp], 4
	jne	$LN50@cf2_blues_
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _blueValues$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 16					; 00000010H
	cmp	edx, DWORD PTR _emBoxBottom$[ebp]
	jge	$LN50@cf2_blues_
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _blueValues$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 16					; 00000010H
	cmp	edx, DWORD PTR _emBoxBottom$[ebp]
	jge	$LN50@cf2_blues_
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _blueValues$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 16					; 00000010H
	cmp	edx, DWORD PTR _emBoxTop$[ebp]
	jle	$LN50@cf2_blues_
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _blueValues$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 16					; 00000010H
	cmp	eax, DWORD PTR _emBoxTop$[ebp]
	jle	$LN50@cf2_blues_
$LN49@cf2_blues_:
; Line 160
	mov	ecx, DWORD PTR _emBoxBottom$[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [edx+56], ecx
; Line 165
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, 32768				; 00008000H
	and	eax, -65536				; ffff0000H
	sub	eax, 32768				; 00008000H
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [ecx+60], eax
; Line 166
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+64], ecx
; Line 169
	mov	edx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [edx+48], 49			; 00000031H
; Line 172
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	edx, DWORD PTR _emBoxTop$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+1]
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 177
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	add	eax, 32768				; 00008000H
	and	eax, -65536				; ffff0000H
	add	eax, 32768				; 00008000H
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 178
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+44], ecx
; Line 181
	mov	edx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [edx+28], 50			; 00000032H
; Line 183
	mov	eax, DWORD PTR _blues$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 185
	jmp	$LN51@cf2_blues_
$LN50@cf2_blues_:
; Line 190
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN48@cf2_blues_
$LN47@cf2_blues_:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 2
	mov	DWORD PTR _i$[ebp], ecx
$LN48@cf2_blues_:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numBlueValues$[ebp]
	jae	$LN46@cf2_blues_
; Line 193
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _blueValues$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _blues$[ebp]
	imul	ecx, DWORD PTR [eax+4], 20
	mov	eax, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [eax+ecx+68], edx
; Line 195
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _blueValues$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _blues$[ebp]
	imul	edx, DWORD PTR [ecx+4], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [ecx+edx+72], eax
; Line 198
	mov	edx, DWORD PTR _blues$[ebp]
	imul	eax, DWORD PTR [edx+4], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	imul	edx, DWORD PTR [ecx+4], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	esi, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [ecx+eax+72]
	sub	eax, DWORD PTR [esi+edx+68]
	mov	DWORD PTR _zoneHeight$[ebp], eax
; Line 200
	jns	SHORT $LN45@cf2_blues_
$LN44@cf2_blues_:
; Line 202
	mov	ecx, 4
	imul	edx, ecx, 51
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN43@cf2_blues_
	push	OFFSET $SG12923
	call	_FT_Message
	add	esp, 4
$LN43@cf2_blues_:
	xor	eax, eax
	jne	SHORT $LN44@cf2_blues_
; Line 203
	jmp	$LN47@cf2_blues_
$LN45@cf2_blues_:
; Line 206
	mov	ecx, DWORD PTR _zoneHeight$[ebp]
	cmp	ecx, DWORD PTR _maxZoneHeight$[ebp]
	jle	SHORT $LN40@cf2_blues_
; Line 210
	mov	edx, DWORD PTR _zoneHeight$[ebp]
	mov	DWORD PTR _maxZoneHeight$[ebp], edx
$LN40@cf2_blues_:
; Line 214
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN39@cf2_blues_
; Line 216
	mov	eax, DWORD PTR _blues$[ebp]
	imul	ecx, DWORD PTR [eax+4], 20
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+188]
	mov	edx, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+72]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _blues$[ebp]
	imul	ecx, DWORD PTR [eax+4], 20
	mov	eax, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [eax+ecx+72], edx
; Line 217
	mov	ecx, DWORD PTR _blues$[ebp]
	imul	edx, DWORD PTR [ecx+4], 20
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	eax, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [eax+edx+68]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _blues$[ebp]
	imul	edx, DWORD PTR [ecx+4], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [ecx+edx+68], eax
$LN39@cf2_blues_:
; Line 221
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN38@cf2_blues_
; Line 224
	mov	edx, DWORD PTR _blues$[ebp]
	imul	eax, DWORD PTR [edx+4], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	BYTE PTR [ecx+eax+84], 1
; Line 226
	mov	edx, DWORD PTR _blues$[ebp]
	imul	eax, DWORD PTR [edx+4], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	imul	edx, DWORD PTR [ecx+4], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	esi, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [esi+eax+72]
	mov	DWORD PTR [ecx+edx+76], eax
; Line 228
	jmp	SHORT $LN37@cf2_blues_
$LN38@cf2_blues_:
; Line 231
	mov	ecx, DWORD PTR _blues$[ebp]
	imul	edx, DWORD PTR [ecx+4], 20
	mov	eax, DWORD PTR _blues$[ebp]
	mov	BYTE PTR [eax+edx+84], 0
; Line 233
	mov	ecx, DWORD PTR _blues$[ebp]
	imul	edx, DWORD PTR [ecx+4], 20
	mov	eax, DWORD PTR _blues$[ebp]
	imul	ecx, DWORD PTR [eax+4], 20
	mov	eax, DWORD PTR _blues$[ebp]
	mov	esi, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [esi+edx+68]
	mov	DWORD PTR [eax+ecx+76], edx
$LN37@cf2_blues_:
; Line 236
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 237
	jmp	$LN47@cf2_blues_
$LN46@cf2_blues_:
; Line 239
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN36@cf2_blues_
$LN35@cf2_blues_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	mov	DWORD PTR _i$[ebp], eax
$LN36@cf2_blues_:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numOtherBlues$[ebp]
	jae	$LN34@cf2_blues_
; Line 242
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _otherBlues$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _blues$[ebp]
	imul	eax, DWORD PTR [edx+4], 20
	mov	edx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [edx+eax+68], ecx
; Line 244
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _otherBlues$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _blues$[ebp]
	imul	ecx, DWORD PTR [eax+4], 20
	mov	eax, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [eax+ecx+72], edx
; Line 247
	mov	ecx, DWORD PTR _blues$[ebp]
	imul	edx, DWORD PTR [ecx+4], 20
	mov	eax, DWORD PTR _blues$[ebp]
	imul	ecx, DWORD PTR [eax+4], 20
	mov	eax, DWORD PTR _blues$[ebp]
	mov	esi, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [eax+edx+72]
	sub	edx, DWORD PTR [esi+ecx+68]
	mov	DWORD PTR _zoneHeight$[ebp], edx
; Line 249
	jns	SHORT $LN33@cf2_blues_
$LN32@cf2_blues_:
; Line 251
	mov	eax, 4
	imul	ecx, eax, 51
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN31@cf2_blues_
	push	OFFSET $SG12940
	call	_FT_Message
	add	esp, 4
$LN31@cf2_blues_:
	xor	edx, edx
	jne	SHORT $LN32@cf2_blues_
; Line 252
	jmp	$LN35@cf2_blues_
$LN33@cf2_blues_:
; Line 255
	mov	eax, DWORD PTR _zoneHeight$[ebp]
	cmp	eax, DWORD PTR _maxZoneHeight$[ebp]
	jle	SHORT $LN28@cf2_blues_
; Line 259
	mov	ecx, DWORD PTR _zoneHeight$[ebp]
	mov	DWORD PTR _maxZoneHeight$[ebp], ecx
$LN28@cf2_blues_:
; Line 266
	mov	edx, DWORD PTR _blues$[ebp]
	imul	eax, DWORD PTR [edx+4], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	BYTE PTR [ecx+eax+84], 1
; Line 268
	mov	edx, DWORD PTR _blues$[ebp]
	imul	eax, DWORD PTR [edx+4], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	imul	edx, DWORD PTR [ecx+4], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	esi, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [esi+eax+72]
	mov	DWORD PTR [ecx+edx+76], eax
; Line 270
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 271
	jmp	$LN35@cf2_blues_
$LN34@cf2_blues_:
; Line 279
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	65536					; 00010000H
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _csUnitsPerPixel$[ebp], eax
; Line 282
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN27@cf2_blues_
$LN26@cf2_blues_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN27@cf2_blues_:
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	$LN25@cf2_blues_
; Line 288
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [ecx+eax+76]
	mov	DWORD PTR _flatEdge$1[ebp], edx
; Line 291
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+84]
	test	edx, edx
	je	$LN24@cf2_blues_
; Line 297
	mov	DWORD PTR _minDiff$4[ebp], 2147483647	; 7fffffffH
; Line 299
	mov	DWORD PTR _j$5[ebp], 0
	jmp	SHORT $LN23@cf2_blues_
$LN22@cf2_blues_:
	mov	eax, DWORD PTR _j$5[ebp]
	add	eax, 2
	mov	DWORD PTR _j$5[ebp], eax
$LN23@cf2_blues_:
	mov	ecx, DWORD PTR _j$5[ebp]
	cmp	ecx, DWORD PTR _numFamilyOtherBlues$[ebp]
	jae	$LN21@cf2_blues_
; Line 302
	mov	edx, DWORD PTR _j$5[ebp]
	mov	eax, DWORD PTR _familyOtherBlues$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	shl	ecx, 16					; 00000010H
	mov	DWORD PTR _flatFamilyEdge$3[ebp], ecx
; Line 304
	mov	edx, DWORD PTR _flatEdge$1[ebp]
	sub	edx, DWORD PTR _flatFamilyEdge$3[ebp]
	jns	SHORT $LN53@cf2_blues_
	mov	eax, DWORD PTR _flatEdge$1[ebp]
	sub	eax, DWORD PTR _flatFamilyEdge$3[ebp]
	neg	eax
	mov	DWORD PTR tv355[ebp], eax
	jmp	SHORT $LN54@cf2_blues_
$LN53@cf2_blues_:
	mov	ecx, DWORD PTR _flatEdge$1[ebp]
	sub	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
	mov	DWORD PTR tv355[ebp], ecx
$LN54@cf2_blues_:
	mov	edx, DWORD PTR tv355[ebp]
	mov	DWORD PTR _diff$2[ebp], edx
; Line 306
	mov	eax, DWORD PTR _diff$2[ebp]
	cmp	eax, DWORD PTR _minDiff$4[ebp]
	jge	SHORT $LN20@cf2_blues_
	mov	ecx, DWORD PTR _diff$2[ebp]
	cmp	ecx, DWORD PTR _csUnitsPerPixel$[ebp]
	jge	SHORT $LN20@cf2_blues_
; Line 308
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
	mov	DWORD PTR [eax+edx+76], ecx
; Line 309
	mov	edx, DWORD PTR _diff$2[ebp]
	mov	DWORD PTR _minDiff$4[ebp], edx
; Line 311
	cmp	DWORD PTR _diff$2[ebp], 0
	jne	SHORT $LN20@cf2_blues_
; Line 312
	jmp	SHORT $LN21@cf2_blues_
$LN20@cf2_blues_:
; Line 314
	jmp	$LN22@cf2_blues_
$LN21@cf2_blues_:
; Line 317
	cmp	DWORD PTR _numFamilyBlues$[ebp], 2
	jb	$LN18@cf2_blues_
; Line 320
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _familyBlues$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 16					; 00000010H
	mov	DWORD PTR _flatFamilyEdge$3[ebp], edx
; Line 322
	mov	eax, DWORD PTR _flatEdge$1[ebp]
	sub	eax, DWORD PTR _flatFamilyEdge$3[ebp]
	jns	SHORT $LN55@cf2_blues_
	mov	ecx, DWORD PTR _flatEdge$1[ebp]
	sub	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
	neg	ecx
	mov	DWORD PTR tv372[ebp], ecx
	jmp	SHORT $LN56@cf2_blues_
$LN55@cf2_blues_:
	mov	edx, DWORD PTR _flatEdge$1[ebp]
	sub	edx, DWORD PTR _flatFamilyEdge$3[ebp]
	mov	DWORD PTR tv372[ebp], edx
$LN56@cf2_blues_:
	mov	eax, DWORD PTR tv372[ebp]
	mov	DWORD PTR _diff$2[ebp], eax
; Line 324
	mov	ecx, DWORD PTR _diff$2[ebp]
	cmp	ecx, DWORD PTR _minDiff$4[ebp]
	jge	SHORT $LN18@cf2_blues_
	mov	edx, DWORD PTR _diff$2[ebp]
	cmp	edx, DWORD PTR _csUnitsPerPixel$[ebp]
	jge	SHORT $LN18@cf2_blues_
; Line 325
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR _flatFamilyEdge$3[ebp]
	mov	DWORD PTR [ecx+eax+76], edx
$LN18@cf2_blues_:
; Line 328
	jmp	$LN16@cf2_blues_
$LN24@cf2_blues_:
; Line 335
	mov	DWORD PTR _minDiff$4[ebp], 2147483647	; 7fffffffH
; Line 337
	mov	DWORD PTR _j$5[ebp], 2
	jmp	SHORT $LN15@cf2_blues_
$LN14@cf2_blues_:
	mov	eax, DWORD PTR _j$5[ebp]
	add	eax, 2
	mov	DWORD PTR _j$5[ebp], eax
$LN15@cf2_blues_:
	mov	ecx, DWORD PTR _j$5[ebp]
	cmp	ecx, DWORD PTR _numFamilyBlues$[ebp]
	jae	$LN16@cf2_blues_
; Line 340
	mov	edx, DWORD PTR _j$5[ebp]
	mov	eax, DWORD PTR _familyBlues$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	shl	ecx, 16					; 00000010H
	mov	DWORD PTR _flatFamilyEdge$3[ebp], ecx
; Line 343
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+188]
	mov	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _flatFamilyEdge$3[ebp], edx
; Line 345
	mov	eax, DWORD PTR _flatEdge$1[ebp]
	sub	eax, DWORD PTR _flatFamilyEdge$3[ebp]
	jns	SHORT $LN57@cf2_blues_
	mov	ecx, DWORD PTR _flatEdge$1[ebp]
	sub	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
	neg	ecx
	mov	DWORD PTR tv392[ebp], ecx
	jmp	SHORT $LN58@cf2_blues_
$LN57@cf2_blues_:
	mov	edx, DWORD PTR _flatEdge$1[ebp]
	sub	edx, DWORD PTR _flatFamilyEdge$3[ebp]
	mov	DWORD PTR tv392[ebp], edx
$LN58@cf2_blues_:
	mov	eax, DWORD PTR tv392[ebp]
	mov	DWORD PTR _diff$2[ebp], eax
; Line 347
	mov	ecx, DWORD PTR _diff$2[ebp]
	cmp	ecx, DWORD PTR _minDiff$4[ebp]
	jge	SHORT $LN12@cf2_blues_
	mov	edx, DWORD PTR _diff$2[ebp]
	cmp	edx, DWORD PTR _csUnitsPerPixel$[ebp]
	jge	SHORT $LN12@cf2_blues_
; Line 349
	imul	eax, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR _flatFamilyEdge$3[ebp]
	mov	DWORD PTR [ecx+eax+76], edx
; Line 350
	mov	eax, DWORD PTR _diff$2[ebp]
	mov	DWORD PTR _minDiff$4[ebp], eax
; Line 352
	cmp	DWORD PTR _diff$2[ebp], 0
	jne	SHORT $LN12@cf2_blues_
; Line 353
	jmp	SHORT $LN16@cf2_blues_
$LN12@cf2_blues_:
; Line 355
	jmp	$LN14@cf2_blues_
$LN16@cf2_blues_:
; Line 357
	jmp	$LN26@cf2_blues_
$LN25@cf2_blues_:
; Line 364
	cmp	DWORD PTR _maxZoneHeight$[ebp], 0
	jle	SHORT $LN10@cf2_blues_
; Line 367
	mov	ecx, DWORD PTR _maxZoneHeight$[ebp]
	push	ecx
	push	65536					; 00010000H
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _blues$[ebp]
	cmp	DWORD PTR [edx+12], eax
	jle	SHORT $LN10@cf2_blues_
; Line 371
	mov	eax, DWORD PTR _maxZoneHeight$[ebp]
	push	eax
	push	65536					; 00010000H
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN10@cf2_blues_:
; Line 403
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN8@cf2_blues_
; Line 405
	mov	edx, DWORD PTR _blues$[ebp]
	mov	BYTE PTR [edx+8], 1
; Line 414
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	39322					; 0000999aH
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, 39322				; 0000999aH
	sub	ecx, eax
	mov	edx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 415
	mov	eax, DWORD PTR _blues$[ebp]
	cmp	DWORD PTR [eax+24], 32767		; 00007fffH
	jle	SHORT $LN8@cf2_blues_
; Line 418
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [ecx+24], 32767		; 00007fffH
$LN8@cf2_blues_:
; Line 423
	mov	edx, DWORD PTR _font$[ebp]
	movzx	eax, BYTE PTR [edx+142]
	test	eax, eax
	je	SHORT $LN6@cf2_blues_
; Line 424
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [ecx+24], 0
$LN6@cf2_blues_:
; Line 429
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@cf2_blues_
$LN4@cf2_blues_:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@cf2_blues_:
	mov	eax, DWORD PTR _blues$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	$LN51@cf2_blues_
; Line 431
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	eax, DWORD PTR _blues$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+84]
	test	ecx, ecx
	je	SHORT $LN2@cf2_blues_
; Line 436
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx+ecx+76]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _blues$[ebp]
	sub	eax, DWORD PTR [ecx+24]
	add	eax, 32768				; 00008000H
	and	eax, -65536				; ffff0000H
	imul	edx, DWORD PTR _i$[ebp], 20
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [ecx+edx+80], eax
; Line 437
	jmp	SHORT $LN1@cf2_blues_
$LN2@cf2_blues_:
; Line 442
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _blues$[ebp]
	mov	eax, DWORD PTR [edx+ecx+76]
	push	eax
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _blues$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	lea	eax, DWORD PTR [eax+edx+32768]
	and	eax, -65536				; ffff0000H
	imul	ecx, DWORD PTR _i$[ebp], 20
	mov	edx, DWORD PTR _blues$[ebp]
	mov	DWORD PTR [edx+ecx+80], eax
$LN1@cf2_blues_:
; Line 443
	jmp	$LN4@cf2_blues_
$LN51@cf2_blues_:
; Line 444
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN68@cf2_blues_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 156				; 0000009cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN68@cf2_blues_:
	DD	8
	DD	$LN67@cf2_blues_
$LN67@cf2_blues_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN59@cf2_blues_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN60@cf2_blues_
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN61@cf2_blues_
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN62@cf2_blues_
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN63@cf2_blues_
	DD	-84					; ffffffacH
	DD	4
	DD	$LN64@cf2_blues_
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN65@cf2_blues_
	DD	-108					; ffffff94H
	DD	4
	DD	$LN66@cf2_blues_
$LN66@cf2_blues_:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN65@cf2_blues_:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN64@cf2_blues_:
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN63@cf2_blues_:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN62@cf2_blues_:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	70					; 00000046H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN61@cf2_blues_:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	70					; 00000046H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN60@cf2_blues_:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN59@cf2_blues_:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_cf2_blues_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_newSize$1 = -20					; size = 4
_memory$2 = -16						; size = 4
_error$3 = -8						; size = 4
_arrstack$ = 8						; size = 4
_numElements$ = 12					; size = 4
_cf2_arrstack_setNumElements PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2arrst.c
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN11@cf2_arrsta:
; Line 98
	cmp	DWORD PTR _arrstack$[ebp], 0
	jne	SHORT $LN10@cf2_arrsta
	push	OFFSET $SG12516
	push	98					; 00000062H
	push	OFFSET $SG12517
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN10@cf2_arrsta:
	xor	eax, eax
	jne	SHORT $LN11@cf2_arrsta
; Line 101
	mov	DWORD PTR _error$3[ebp], 0
; Line 102
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$2[ebp], edx
; Line 104
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	ecx, DWORD PTR _numElements$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _newSize$1[ebp], ecx
; Line 107
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	eax, 2147483647				; 7fffffffH
	xor	edx, edx
	div	DWORD PTR [ecx+8]
	cmp	DWORD PTR _numElements$[ebp], eax
	jbe	SHORT $LN6@cf2_arrsta
; Line 108
	jmp	$exit$17
$LN6@cf2_arrsta:
; Line 111
	cmp	DWORD PTR _newSize$1[ebp], 0
	jg	SHORT $LN5@cf2_arrsta
	push	OFFSET $SG12528
	push	111					; 0000006fH
	push	OFFSET $SG12529
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN5@cf2_arrsta:
	xor	edx, edx
	jne	SHORT $LN6@cf2_arrsta
; Line 113
	lea	eax, DWORD PTR _error$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _newSize$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	push	1
	mov	eax, DWORD PTR _memory$2[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [ecx+28], eax
	cmp	DWORD PTR _error$3[ebp], 0
	jne	SHORT $exit$17
; Line 115
	mov	edx, DWORD PTR _arrstack$[ebp]
	mov	eax, DWORD PTR _numElements$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 116
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR _newSize$1[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 118
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _numElements$[ebp]
	jbe	SHORT $LN1@cf2_arrsta
; Line 121
	push	OFFSET $SG12534
	push	121					; 00000079H
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	push	eax
	mov	edx, DWORD PTR _arrstack$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_cf2_setError
	add	esp, 8
; Line 122
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR _numElements$[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 123
	xor	al, al
	jmp	SHORT $LN12@cf2_arrsta
$LN1@cf2_arrsta:
; Line 126
	mov	al, 1
	jmp	SHORT $LN12@cf2_arrsta
$exit$17:
; Line 132
	push	OFFSET $SG12535
	push	132					; 00000084H
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_cf2_setError
	add	esp, 8
; Line 134
	xor	al, al
$LN12@cf2_arrsta:
; Line 135
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@cf2_arrsta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@cf2_arrsta:
	DD	1
	DD	$LN15@cf2_arrsta
$LN15@cf2_arrsta:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN14@cf2_arrsta
$LN14@cf2_arrsta:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cf2_arrstack_setNumElements ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_psnames$ = -12						; size = 4
_cff$ = -8						; size = 4
_face$ = -4						; size = 4
_unicodes$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_cff_cmap_unicode_char_next PROC
; File d:\mozilla\modules\freetype2\src\cff\cffcmap.c
; Line 195
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 196
	mov	eax, DWORD PTR _unicodes$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 197
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	DWORD PTR _cff$[ebp], eax
; Line 198
	mov	ecx, DWORD PTR _cff$[ebp]
	mov	edx, DWORD PTR [ecx+2956]
	mov	DWORD PTR _psnames$[ebp], edx
; Line 201
	mov	esi, esp
	mov	eax, DWORD PTR _pchar_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unicodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psnames$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 202
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_cmap_unicode_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_psnames$ = -12						; size = 4
_cff$ = -8						; size = 4
_face$ = -4						; size = 4
_unicodes$ = 8						; size = 4
_char_code$ = 12					; size = 4
_cff_cmap_unicode_char_index PROC
; File d:\mozilla\modules\freetype2\src\cff\cffcmap.c
; Line 182
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 183
	mov	eax, DWORD PTR _unicodes$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 184
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	DWORD PTR _cff$[ebp], eax
; Line 185
	mov	ecx, DWORD PTR _cff$[ebp]
	mov	edx, DWORD PTR [ecx+2956]
	mov	DWORD PTR _psnames$[ebp], edx
; Line 188
	mov	esi, esp
	mov	eax, DWORD PTR _char_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unicodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psnames$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 189
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_cmap_unicode_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_face$ = -4						; size = 4
_unicodes$ = 8						; size = 4
_cff_cmap_unicode_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffcmap.c
; Line 169
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 170
	mov	eax, DWORD PTR _unicodes$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 171
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$[ebp], eax
$LN3@cff_cmap_u:
; Line 174
	mov	ecx, DWORD PTR _unicodes$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _unicodes$[ebp]
	mov	DWORD PTR [ecx+20], 0
	xor	edx, edx
	jne	SHORT $LN3@cff_cmap_u
; Line 175
	mov	eax, DWORD PTR _unicodes$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 176
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_cmap_unicode_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_psnames$ = -20						; size = 4
_charset$ = -16						; size = 4
_cff$ = -12						; size = 4
_memory$ = -8						; size = 4
_face$ = -4						; size = 4
_unicodes$ = 8						; size = 4
_pointer$ = 12						; size = 4
_cff_cmap_unicode_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cffcmap.c
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 144
	mov	eax, DWORD PTR _unicodes$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 145
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$[ebp], eax
; Line 146
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+656]
	mov	DWORD PTR _cff$[ebp], edx
; Line 147
	mov	eax, DWORD PTR _cff$[ebp]
	add	eax, 1152				; 00000480H
	mov	DWORD PTR _charset$[ebp], eax
; Line 148
	mov	ecx, DWORD PTR _cff$[ebp]
	mov	edx, DWORD PTR [ecx+2956]
	mov	DWORD PTR _psnames$[ebp], edx
; Line 150
	mov	eax, DWORD PTR _pointer$[ebp]
	mov	DWORD PTR _pointer$[ebp], eax
; Line 155
	mov	ecx, DWORD PTR _charset$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN1@cff_cmap_u
; Line 156
	push	OFFSET $SG12419
	push	156					; 0000009cH
	push	163					; 000000a3H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 163				; 000000a3H
	jmp	SHORT $LN2@cff_cmap_u
$LN1@cff_cmap_u:
; Line 163
	mov	esi, esp
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	push	0
	push	OFFSET _cff_sid_to_glyph_name
	mov	eax, DWORD PTR _cff$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _unicodes$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psnames$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@cff_cmap_u:
; Line 164
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_cmap_unicode_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sid$ = -12						; size = 4
_charset$ = -8						; size = 4
_cff$ = -4						; size = 4
_face$ = 8						; size = 4
_idx$ = 12						; size = 4
_cff_sid_to_glyph_name PROC
; File d:\mozilla\modules\freetype2\src\cff\cffcmap.c
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 131
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _cff$[ebp], ecx
; Line 132
	mov	edx, DWORD PTR _cff$[ebp]
	add	edx, 1152				; 00000480H
	mov	DWORD PTR _charset$[ebp], edx
; Line 133
	mov	eax, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _idx$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _sid$[ebp], eax
; Line 136
	mov	ecx, DWORD PTR _sid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cff$[ebp]
	push	edx
	call	_cff_index_get_sid_string
	add	esp, 8
; Line 137
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_sid_to_glyph_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_code$1 = -12						; size = 4
_char_code$ = -8					; size = 4
_result$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_cff_cmap_encoding_char_next PROC
; File d:\mozilla\modules\freetype2\src\cff\cffcmap.c
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 77
	mov	DWORD PTR _result$[ebp], 0
; Line 78
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _char_code$[ebp], ecx
; Line 81
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	DWORD PTR [edx], 0
; Line 83
	cmp	DWORD PTR _char_code$[ebp], 255		; 000000ffH
	jae	SHORT $LN5@cff_cmap_e
; Line 85
	mov	eax, DWORD PTR _char_code$[ebp]
	add	eax, 1
	mov	DWORD PTR _code$1[ebp], eax
$LN4@cff_cmap_e:
; Line 90
	cmp	DWORD PTR _code$1[ebp], 256		; 00000100H
	jb	SHORT $LN2@cff_cmap_e
; Line 91
	jmp	SHORT $LN5@cff_cmap_e
$LN2@cff_cmap_e:
; Line 93
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _code$1[ebp]
	movzx	ecx, WORD PTR [edx+eax*2]
	mov	DWORD PTR _result$[ebp], ecx
; Line 94
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN1@cff_cmap_e
; Line 96
	mov	edx, DWORD PTR _pchar_code$[ebp]
	mov	eax, DWORD PTR _code$1[ebp]
	mov	DWORD PTR [edx], eax
; Line 97
	jmp	SHORT $LN5@cff_cmap_e
$LN1@cff_cmap_e:
; Line 100
	mov	ecx, DWORD PTR _code$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _code$1[ebp], ecx
; Line 101
	jmp	SHORT $LN4@cff_cmap_e
$LN5@cff_cmap_e:
; Line 103
	mov	eax, DWORD PTR _result$[ebp]
; Line 104
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_cmap_encoding_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_cff_cmap_encoding_char_index PROC
; File d:\mozilla\modules\freetype2\src\cff\cffcmap.c
; Line 62
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 63
	mov	DWORD PTR _result$[ebp], 0
; Line 66
	cmp	DWORD PTR _char_code$[ebp], 256		; 00000100H
	jae	SHORT $LN1@cff_cmap_e
; Line 67
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _char_code$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _result$[ebp], eax
$LN1@cff_cmap_e:
; Line 69
	mov	eax, DWORD PTR _result$[ebp]
; Line 70
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_cmap_encoding_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = 8						; size = 4
_cff_cmap_encoding_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffcmap.c
; Line 54
	push	ebp
	mov	ebp, esp
; Line 55
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 56
	pop	ebp
	ret	0
_cff_cmap_encoding_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_encoding$ = -12					; size = 4
_cff$ = -8						; size = 4
_face$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pointer$ = 12						; size = 4
_cff_cmap_encoding_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cffcmap.c
; Line 38
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 39
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 40
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	DWORD PTR _cff$[ebp], eax
; Line 41
	mov	ecx, DWORD PTR _cff$[ebp]
	add	ecx, 116				; 00000074H
	mov	DWORD PTR _encoding$[ebp], ecx
; Line 43
	mov	edx, DWORD PTR _pointer$[ebp]
	mov	DWORD PTR _pointer$[ebp], edx
; Line 46
	mov	eax, DWORD PTR _encoding$[ebp]
	add	eax, 524				; 0000020cH
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 48
	xor	eax, eax
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_cmap_encoding_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv90 = -12						; size = 4
_error$ = -8						; size = 4
_outline$ = -4						; size = 4
_builder$ = 8						; size = 4
_cff_builder_add_contour PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 534
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 535
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _outline$[ebp], ecx
; Line 539
	mov	edx, DWORD PTR _builder$[ebp]
	movzx	eax, BYTE PTR [edx+65]
	test	eax, eax
	jne	SHORT $LN3@cff_builde
; Line 541
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	dx, WORD PTR [ecx]
	add	dx, 1
	mov	eax, DWORD PTR _outline$[ebp]
	mov	WORD PTR [eax], dx
; Line 542
	xor	eax, eax
	jmp	$LN4@cff_builde
$LN3@cff_builde:
; Line 545
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN7@cff_builde
	xor	edx, edx
	jne	SHORT $LN6@cff_builde
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	edx, WORD PTR [ecx+20]
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	eax, WORD PTR [ecx+56]
	lea	ecx, DWORD PTR [edx+eax+1]
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax+8]
	ja	SHORT $LN7@cff_builde
$LN6@cff_builde:
	mov	DWORD PTR tv90[ebp], 0
	jmp	SHORT $LN8@cff_builde
$LN7@cff_builde:
	push	1
	push	0
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv90[ebp], eax
$LN8@cff_builde:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR _error$[ebp], eax
; Line 546
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@cff_builde
; Line 548
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	test	edx, edx
	jle	SHORT $LN1@cff_builde
; Line 550
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	ecx, 1
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [edx+12]
	mov	WORD PTR [edx+eax*2-2], cx
$LN1@cff_builde:
; Line 552
	mov	eax, DWORD PTR _outline$[ebp]
	mov	cx, WORD PTR [eax]
	add	cx, 1
	mov	edx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [edx], cx
$LN2@cff_builde:
; Line 555
	mov	eax, DWORD PTR _error$[ebp]
$LN4@cff_builde:
; Line 556
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_builder_add_contour ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_in_charstring_type$ = 8				; size = 4
_num_subrs$ = 12					; size = 4
_cff_compute_bias PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 343
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 347
	cmp	DWORD PTR _in_charstring_type$[ebp], 1
	jne	SHORT $LN6@cff_comput
; Line 348
	mov	DWORD PTR _result$[ebp], 0
	jmp	SHORT $LN5@cff_comput
$LN6@cff_comput:
; Line 349
	cmp	DWORD PTR _num_subrs$[ebp], 1240	; 000004d8H
	jae	SHORT $LN4@cff_comput
; Line 350
	mov	DWORD PTR _result$[ebp], 107		; 0000006bH
	jmp	SHORT $LN5@cff_comput
$LN4@cff_comput:
; Line 351
	cmp	DWORD PTR _num_subrs$[ebp], 33900	; 0000846cH
	jae	SHORT $LN2@cff_comput
; Line 352
	mov	DWORD PTR _result$[ebp], 1131		; 0000046bH
; Line 353
	jmp	SHORT $LN5@cff_comput
$LN2@cff_comput:
; Line 354
	mov	DWORD PTR _result$[ebp], 32768		; 00008000H
$LN5@cff_comput:
; Line 356
	mov	eax, DWORD PTR _result$[ebp]
; Line 357
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_compute_bias ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyph$ = -4						; size = 4
_builder$ = 8						; size = 4
_cff_builder_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 314
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 315
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _glyph$[ebp], ecx
; Line 318
	cmp	DWORD PTR _glyph$[ebp], 0
	je	SHORT $LN2@cff_builde
; Line 319
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR _glyph$[ebp]
	add	eax, 108				; 0000006cH
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
$LN2@cff_builde:
; Line 320
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_builder_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_internal$1 = -8					; size = 4
_loader$2 = -4						; size = 4
_builder$ = 8						; size = 4
_face$ = 12						; size = 4
_size$ = 16						; size = 4
_glyph$ = 20						; size = 4
_hinting$ = 24						; size = 1
_cff_builder_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 258
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 259
	mov	eax, DWORD PTR _builder$[ebp]
	mov	BYTE PTR [eax+64], 0
; Line 260
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	BYTE PTR [ecx+65], 1
; Line 262
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 263
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 264
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR [eax], edx
; Line 266
	cmp	DWORD PTR _glyph$[ebp], 0
	je	$LN2@cff_builde
; Line 268
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _loader$2[ebp], edx
; Line 271
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR _loader$2[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 272
	mov	edx, DWORD PTR _loader$2[ebp]
	add	edx, 20					; 00000014H
	mov	eax, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 273
	mov	ecx, DWORD PTR _loader$2[ebp]
	add	ecx, 56					; 00000038H
	mov	edx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 274
	mov	eax, DWORD PTR _loader$2[ebp]
	push	eax
	call	_FT_GlyphLoader_Rewind
	add	esp, 4
; Line 276
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+72], 0
; Line 277
	mov	edx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [edx+68], 0
; Line 279
	movzx	eax, BYTE PTR _hinting$[ebp]
	test	eax, eax
	je	SHORT $LN2@cff_builde
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@cff_builde
; Line 281
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _internal$1[ebp], edx
; Line 284
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR _internal$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+72], edx
; Line 285
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR [edx+68], eax
$LN2@cff_builde:
; Line 289
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 290
	mov	edx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 292
	mov	eax, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 293
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [ecx+36], 0
; Line 294
	mov	edx, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 295
	mov	eax, DWORD PTR _builder$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 296
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_builder_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = -4						; size = 4
_outline$ = 8						; size = 4
_cf2_outline_close PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 679
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 680
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _decoder$[ebp], ecx
$LN4@cf2_outlin:
; Line 683
	cmp	DWORD PTR _decoder$[ebp], 0
	jne	SHORT $LN3@cf2_outlin
	push	OFFSET $SG13758
	push	683					; 000002abH
	push	OFFSET $SG13759
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_outlin:
	xor	edx, edx
	jne	SHORT $LN4@cf2_outlin
; Line 685
	mov	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cff_builder_close_contour
	add	esp, 4
; Line 687
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_GlyphLoader_Add
	add	esp, 4
; Line 688
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_outline_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = -4						; size = 4
_outline$ = 8						; size = 4
_cf2_outline_reset PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 665
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 666
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _decoder$[ebp], ecx
$LN4@cf2_outlin:
; Line 669
	cmp	DWORD PTR _decoder$[ebp], 0
	jne	SHORT $LN3@cf2_outlin
	push	OFFSET $SG13748
	push	669					; 0000029dH
	push	OFFSET $SG13749
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_outlin:
	xor	edx, edx
	jne	SHORT $LN4@cf2_outlin
; Line 671
	mov	eax, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 673
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_GlyphLoader_Rewind
	add	esp, 4
; Line 674
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_outline_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_cf2_getNominalWidthX PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 655
	push	ebp
	mov	ebp, esp
$LN5@cf2_getNom:
; Line 656
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getNom
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@cf2_getNom
$LN1@cf2_getNom:
	push	OFFSET $SG13736
	push	656					; 00000290H
	push	OFFSET $SG13737
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getNom:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_getNom
; Line 659
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+928]
	mov	eax, DWORD PTR [eax+532]
	shl	eax, 16					; 00000010H
; Line 660
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getNominalWidthX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_cf2_getDefaultWidthX PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 645
	push	ebp
	mov	ebp, esp
$LN5@cf2_getDef:
; Line 646
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getDef
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@cf2_getDef
$LN1@cf2_getDef:
	push	OFFSET $SG13724
	push	646					; 00000286H
	push	OFFSET $SG13725
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getDef:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_getDef
; Line 649
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+928]
	mov	eax, DWORD PTR [eax+528]
	shl	eax, 16					; 00000010H
; Line 650
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getDefaultWidthX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_idx$ = 12						; size = 4
_buf$ = 16						; size = 4
_cf2_initLocalRegionBuffer PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 624
	push	ebp
	mov	ebp, esp
$LN9@cf2_initLo:
; Line 625
	cmp	DWORD PTR _decoder$[ebp], 0
	jne	SHORT $LN8@cf2_initLo
	push	OFFSET $SG13707
	push	625					; 00000271H
	push	OFFSET $SG13708
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN8@cf2_initLo:
	xor	eax, eax
	jne	SHORT $LN9@cf2_initLo
; Line 627
	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 629
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, DWORD PTR [edx+896]
	mov	DWORD PTR _idx$[ebp], eax
; Line 630
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	edx, DWORD PTR [ecx+888]
	jb	SHORT $LN4@cf2_initLo
; Line 631
	mov	eax, 1
	jmp	SHORT $LN10@cf2_initLo
$LN4@cf2_initLo:
; Line 633
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+904], 0
	jne	SHORT $LN3@cf2_initLo
	push	OFFSET $SG13714
	push	633					; 00000279H
	push	OFFSET $SG13715
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_initLo:
	xor	ecx, ecx
	jne	SHORT $LN4@cf2_initLo
; Line 636
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+904]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+4], eax
; Line 637
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+904]
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR [eax+8], edx
; Line 639
	xor	eax, eax
$LN10@cf2_initLo:
; Line 640
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_initLocalRegionBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_buf$ = 12						; size = 4
_cf2_freeSeacComponent PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 611
	push	ebp
	mov	ebp, esp
$LN4@cf2_freeSe:
; Line 612
	cmp	DWORD PTR _decoder$[ebp], 0
	jne	SHORT $LN3@cf2_freeSe
	push	OFFSET $SG13692
	push	612					; 00000264H
	push	OFFSET $SG13693
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_freeSe:
	xor	eax, eax
	jne	SHORT $LN4@cf2_freeSe
; Line 616
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_cff_free_glyph_data
	add	esp, 12					; 0000000cH
; Line 617
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_freeSeacComponent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -32						; size = 4
_len$ = -24						; size = 4
_charstring$ = -12					; size = 4
_gid$ = -4						; size = 4
_decoder$ = 8						; size = 4
_code$ = 12						; size = 4
_buf$ = 16						; size = 4
_cf2_getSeacComponent PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 574
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN10@cf2_getSea:
; Line 581
	cmp	DWORD PTR _decoder$[ebp], 0
	jne	SHORT $LN9@cf2_getSea
	push	OFFSET $SG13672
	push	581					; 00000245H
	push	OFFSET $SG13673
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@cf2_getSea:
	xor	eax, eax
	jne	SHORT $LN10@cf2_getSea
; Line 583
	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 585
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	_cff_lookup_glyph_by_stdcharcode
	add	esp, 8
	mov	DWORD PTR _gid$[ebp], eax
; Line 586
	cmp	DWORD PTR _gid$[ebp], 0
	jge	SHORT $LN6@cf2_getSea
; Line 587
	push	OFFSET $SG13675
	push	587					; 0000024bH
	push	18					; 00000012H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 18					; 00000012H
	jmp	SHORT $LN11@cf2_getSea
$LN6@cf2_getSea:
; Line 592
	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _charstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _gid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_cff_get_glyph_data
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 594
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@cf2_getSea
; Line 595
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN11@cf2_getSea
$LN4@cf2_getSea:
; Line 598
	mov	ecx, DWORD PTR _charstring$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _charstring$[ebp]
	jae	SHORT $LN3@cf2_getSea
	push	OFFSET $SG13681
	push	598					; 00000256H
	push	OFFSET $SG13682
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_getSea:
	xor	edx, edx
	jne	SHORT $LN4@cf2_getSea
; Line 600
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _charstring$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 601
	mov	edx, DWORD PTR _charstring$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 602
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+12], eax
; Line 604
	xor	eax, eax
$LN11@cf2_getSea:
; Line 605
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@cf2_getSea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@cf2_getSea:
	DD	2
	DD	$LN15@cf2_getSea
$LN15@cf2_getSea:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@cf2_getSea
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@cf2_getSea
$LN14@cf2_getSea:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN13@cf2_getSea:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_cf2_getSeacComponent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_idx$ = 12						; size = 4
_buf$ = 16						; size = 4
_cf2_initGlobalRegionBuffer PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 549
	push	ebp
	mov	ebp, esp
$LN9@cf2_initGl:
; Line 550
	cmp	DWORD PTR _decoder$[ebp], 0
	jne	SHORT $LN8@cf2_initGl
	push	OFFSET $SG13648
	push	550					; 00000226H
	push	OFFSET $SG13649
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN8@cf2_initGl:
	xor	eax, eax
	jne	SHORT $LN9@cf2_initGl
; Line 552
	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 554
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, DWORD PTR [edx+900]
	mov	DWORD PTR _idx$[ebp], eax
; Line 555
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	edx, DWORD PTR [ecx+892]
	jb	SHORT $LN4@cf2_initGl
; Line 556
	mov	eax, 1
	jmp	SHORT $LN10@cf2_initGl
$LN4@cf2_initGl:
; Line 558
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+908], 0
	jne	SHORT $LN3@cf2_initGl
	push	OFFSET $SG13655
	push	558					; 0000022eH
	push	OFFSET $SG13656
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_initGl:
	xor	ecx, ecx
	jne	SHORT $LN4@cf2_initGl
; Line 561
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+908]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+4], eax
; Line 562
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+908]
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR [eax+8], edx
; Line 564
	xor	eax, eax
$LN10@cf2_initGl:
; Line 565
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_initGlobalRegionBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_cf2_getLanguageGroup PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 536
	push	ebp
	mov	ebp, esp
$LN5@cf2_getLan:
; Line 537
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getLan
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@cf2_getLan
$LN1@cf2_getLan:
	push	OFFSET $SG13635
	push	537					; 00000219H
	push	OFFSET $SG13636
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getLan:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_getLan
; Line 539
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+928]
	mov	eax, DWORD PTR [eax+512]
; Line 540
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getLanguageGroup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_count$ = 12						; size = 4
_data$ = 16						; size = 4
_cf2_getFamilyOtherBlues PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 525
	push	ebp
	mov	ebp, esp
$LN5@cf2_getFam:
; Line 526
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getFam
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@cf2_getFam
$LN1@cf2_getFam:
	push	OFFSET $SG13624
	push	526					; 0000020eH
	push	OFFSET $SG13625
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getFam:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_getFam
; Line 528
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+928]
	movzx	ecx, BYTE PTR [eax+179]
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 530
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	add	ecx, 332				; 0000014cH
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 531
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getFamilyOtherBlues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_count$ = 12						; size = 4
_data$ = 16						; size = 4
_cf2_getFamilyBlues PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 512
	push	ebp
	mov	ebp, esp
$LN5@cf2_getFam:
; Line 513
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getFam
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@cf2_getFam
$LN1@cf2_getFam:
	push	OFFSET $SG13609
	push	513					; 00000201H
	push	OFFSET $SG13610
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getFam:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_getFam
; Line 515
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+928]
	movzx	ecx, BYTE PTR [eax+178]
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 517
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	add	ecx, 276				; 00000114H
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 518
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getFamilyBlues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_count$ = 12						; size = 4
_data$ = 16						; size = 4
_cf2_getOtherBlues PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 499
	push	ebp
	mov	ebp, esp
$LN5@cf2_getOth:
; Line 500
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getOth
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@cf2_getOth
$LN1@cf2_getOth:
	push	OFFSET $SG13594
	push	500					; 000001f4H
	push	OFFSET $SG13595
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getOth:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_getOth
; Line 502
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+928]
	movzx	ecx, BYTE PTR [eax+177]
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 504
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	add	ecx, 236				; 000000ecH
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 505
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getOtherBlues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_count$ = 12						; size = 4
_data$ = 16						; size = 4
_cf2_getBlueValues PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 486
	push	ebp
	mov	ebp, esp
$LN5@cf2_getBlu:
; Line 487
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getBlu
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@cf2_getBlu
$LN1@cf2_getBlu:
	push	OFFSET $SG13579
	push	487					; 000001e7H
	push	OFFSET $SG13580
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getBlu:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_getBlu
; Line 489
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+928]
	movzx	ecx, BYTE PTR [eax+176]
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 491
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	add	ecx, 180				; 000000b4H
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 492
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getBlueValues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_blueScale$ = 12					; size = 4
_blueShift$ = 16					; size = 4
_blueFuzz$ = 20						; size = 4
_cf2_getBlueMetrics PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 467
	push	ebp
	mov	ebp, esp
$LN5@cf2_getBlu:
; Line 468
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getBlu
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@cf2_getBlu
$LN1@cf2_getBlu:
	push	OFFSET $SG13559
	push	468					; 000001d4H
	push	OFFSET $SG13560
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getBlu:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_getBlu
; Line 472
	push	65536000				; 03e80000H
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+928]
	mov	ecx, DWORD PTR [eax+372]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _blueScale$[ebp]
	mov	DWORD PTR [edx], eax
; Line 474
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	mov	edx, DWORD PTR [ecx+376]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _blueShift$[ebp]
	mov	DWORD PTR [eax], edx
; Line 476
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+928]
	mov	eax, DWORD PTR [edx+380]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _blueFuzz$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 477
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getBlueMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_cf2_getStdHW PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 453
	push	ebp
	mov	ebp, esp
$LN5@cf2_getStd:
; Line 454
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getStd
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@cf2_getStd
$LN1@cf2_getStd:
	push	OFFSET $SG13541
	push	454					; 000001c6H
	push	OFFSET $SG13542
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getStd:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_getStd
; Line 457
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+928]
	mov	eax, DWORD PTR [eax+384]
	shl	eax, 16					; 00000010H
; Line 458
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getStdHW ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_cf2_getStdVW PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 443
	push	ebp
	mov	ebp, esp
$LN5@cf2_getStd:
; Line 444
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getStd
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@cf2_getStd
$LN1@cf2_getStd:
	push	OFFSET $SG13529
	push	444					; 000001bcH
	push	OFFSET $SG13530
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getStd:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_getStd
; Line 447
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+928]
	mov	eax, DWORD PTR [eax+388]
	shl	eax, 16					; 00000010H
; Line 448
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getStdVW ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_cf2_getPpemY PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 419
	push	ebp
	mov	ebp, esp
$LN5@cf2_getPpe:
; Line 422
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getPpe
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@cf2_getPpe
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+88], 0
	jne	SHORT $LN4@cf2_getPpe
$LN1@cf2_getPpe:
	push	OFFSET $SG13517
	push	422					; 000001a6H
	push	OFFSET $SG13518
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getPpe:
	xor	eax, eax
	jne	SHORT $LN5@cf2_getPpe
; Line 434
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+88]
	movzx	eax, WORD PTR [eax+14]
	shl	eax, 16					; 00000010H
; Line 435
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getPpemY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_decoder$ = 8						; size = 4
_cf2_getSubfont PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 409
	push	ebp
	mov	ebp, esp
$LN5@cf2_getSub:
; Line 410
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN1@cf2_getSub
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@cf2_getSub
$LN1@cf2_getSub:
	push	OFFSET $SG13507
	push	410					; 0000019aH
	push	OFFSET $SG13508
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_getSub:
	xor	ecx, ecx
	jne	SHORT $LN5@cf2_getSub
; Line 412
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+928]
; Line 413
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_getSubfont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_scaled$1 = -121					; size = 1
_hinted$2 = -109					; size = 1
_glyphWidth$3 = -100					; size = 4
_transform$4 = -88					; size = 24
_buf$5 = -56						; size = 16
_error2$6 = -36						; size = 4
_driver$7 = -32						; size = 4
_builder$8 = -28					; size = 4
_font$ = -24						; size = 4
_error$ = -16						; size = 4
_memory$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_decoder$ = 8						; size = 4
_charstring_base$ = 12					; size = 4
_charstring_len$ = 16					; size = 4
_cf2_decoder_parse_charstrings PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2ft.c
; Line 300
	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 302
	mov	DWORD PTR _error$[ebp], 0
$LN16@cf2_decode:
; Line 306
	cmp	DWORD PTR _decoder$[ebp], 0
	je	SHORT $LN12@cf2_decode
	mov	eax, DWORD PTR _decoder$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jne	SHORT $LN15@cf2_decode
$LN12@cf2_decode:
	push	OFFSET $SG13466
	push	306					; 00000132H
	push	OFFSET $SG13467
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN15@cf2_decode:
	xor	ecx, ecx
	jne	SHORT $LN16@cf2_decode
; Line 308
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$[ebp], eax
; Line 311
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR [edx+2972]
	mov	DWORD PTR _font$[ebp], eax
; Line 314
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	cmp	DWORD PTR [edx+2972], 0
	jne	$LN11@cf2_decode
; Line 317
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR [ecx+2976], OFFSET _cf2_free_instance
; Line 320
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	504					; 000001f8H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [edx+2972], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@cf2_decode
; Line 321
	push	OFFSET $SG13475
	push	321					; 00000141H
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	jmp	$LN17@cf2_decode
$LN10@cf2_decode:
; Line 323
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+2972]
	mov	DWORD PTR _font$[ebp], edx
; Line 325
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 328
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_cf2_outline_init
	add	esp, 12					; 0000000cH
$LN11@cf2_decode:
; Line 333
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [eax+132], ecx
; Line 334
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+128], eax
; Line 339
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR _builder$8[ebp], ecx
; Line 340
	mov	edx, DWORD PTR _builder$8[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _driver$7[ebp], ecx
; Line 343
	mov	DWORD PTR _error2$6[ebp], 0
$LN9@cf2_decode:
; Line 354
	mov	edx, DWORD PTR _charstring_base$[ebp]
	add	edx, DWORD PTR _charstring_len$[ebp]
	cmp	edx, DWORD PTR _charstring_base$[ebp]
	jae	SHORT $LN8@cf2_decode
	push	OFFSET $SG13491
	push	354					; 00000162H
	push	OFFSET $SG13492
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN8@cf2_decode:
	xor	eax, eax
	jne	SHORT $LN9@cf2_decode
; Line 356
	push	16					; 00000010H
	push	0
	lea	ecx, DWORD PTR _buf$5[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 358
	mov	edx, DWORD PTR _charstring_base$[ebp]
	mov	DWORD PTR _buf$5[ebp+12], edx
	mov	eax, DWORD PTR _buf$5[ebp+12]
	mov	DWORD PTR _buf$5[ebp+4], eax
; Line 359
	mov	ecx, DWORD PTR _charstring_base$[ebp]
	add	ecx, DWORD PTR _charstring_len$[ebp]
	mov	DWORD PTR _buf$5[ebp+8], ecx
; Line 361
	push	24					; 00000018H
	push	0
	lea	edx, DWORD PTR _transform$4[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 367
	lea	eax, DWORD PTR _scaled$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _hinted$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _transform$4[ebp+12]
	push	edx
	lea	eax, DWORD PTR _transform$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_cf2_getScaleAndHintFlag
	add	esp, 20					; 00000014H
; Line 369
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 370
	movzx	eax, BYTE PTR _hinted$2[ebp]
	test	eax, eax
	je	SHORT $LN5@cf2_decode
; Line 371
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 1
	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN5@cf2_decode:
; Line 372
	movzx	ecx, BYTE PTR _scaled$1[ebp]
	test	ecx, ecx
	je	SHORT $LN4@cf2_decode
	mov	edx, DWORD PTR _driver$7[ebp]
	movzx	eax, BYTE PTR [edx+32]
	test	eax, eax
	jne	SHORT $LN4@cf2_decode
; Line 373
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 2
	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN4@cf2_decode:
; Line 375
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _font$[ebp]
	mov	esi, DWORD PTR _driver$7[ebp]
	mov	edx, DWORD PTR [esi+edx+36]
	mov	DWORD PTR [eax+ecx+144], edx
; Line 376
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _font$[ebp]
	mov	esi, DWORD PTR _driver$7[ebp]
	mov	eax, DWORD PTR [esi+eax+36]
	mov	DWORD PTR [edx+ecx+144], eax
; Line 377
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _font$[ebp]
	mov	esi, DWORD PTR _driver$7[ebp]
	mov	ecx, DWORD PTR [esi+ecx+36]
	mov	DWORD PTR [eax+edx+144], ecx
; Line 378
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _font$[ebp]
	mov	esi, DWORD PTR _driver$7[ebp]
	mov	eax, DWORD PTR [esi+eax+36]
	mov	DWORD PTR [ecx+edx+144], eax
; Line 379
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _font$[ebp]
	mov	esi, DWORD PTR _driver$7[ebp]
	mov	ecx, DWORD PTR [esi+ecx+36]
	mov	DWORD PTR [eax+edx+144], ecx
; Line 380
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _font$[ebp]
	mov	esi, DWORD PTR _driver$7[ebp]
	mov	eax, DWORD PTR [esi+eax+36]
	mov	DWORD PTR [ecx+edx+144], eax
; Line 381
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, 4
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _font$[ebp]
	mov	esi, DWORD PTR _driver$7[ebp]
	mov	edx, DWORD PTR [esi+edx+36]
	mov	DWORD PTR [eax+ecx+144], edx
; Line 382
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _font$[ebp]
	mov	esi, DWORD PTR _driver$7[ebp]
	mov	ecx, DWORD PTR [esi+ecx+36]
	mov	DWORD PTR [edx+eax+144], ecx
; Line 386
	mov	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_cf2_getUnitsPerEm
	add	esp, 4
	movzx	eax, ax
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [ecx+88], eax
; Line 388
	movzx	edx, BYTE PTR _scaled$1[ebp]
	test	edx, edx
	je	SHORT $LN3@cf2_decode
; Line 390
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	lea	edx, DWORD PTR _transform$4[ebp]
	push	edx
	call	_cf2_checkTransform
	add	esp, 8
	mov	DWORD PTR _error2$6[ebp], eax
; Line 391
	cmp	DWORD PTR _error2$6[ebp], 0
	je	SHORT $LN3@cf2_decode
; Line 392
	mov	eax, DWORD PTR _error2$6[ebp]
	jmp	SHORT $LN17@cf2_decode
$LN3@cf2_decode:
; Line 395
	lea	eax, DWORD PTR _glyphWidth$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _transform$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$5[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	call	_cf2_getGlyphOutline
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error2$6[ebp], eax
; Line 396
	cmp	DWORD PTR _error2$6[ebp], 0
	je	SHORT $LN1@cf2_decode
; Line 397
	mov	eax, 3
	jmp	SHORT $LN17@cf2_decode
$LN1@cf2_decode:
; Line 399
	mov	ecx, DWORD PTR _glyphWidth$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_cf2_setGlyphWidth
	add	esp, 8
; Line 401
	xor	eax, eax
$LN17@cf2_decode:
; Line 403
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@cf2_decode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 128				; 00000080H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN26@cf2_decode:
	DD	6
	DD	$LN25@cf2_decode
$LN25@cf2_decode:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN19@cf2_decode
	DD	-56					; ffffffc8H
	DD	16					; 00000010H
	DD	$LN20@cf2_decode
	DD	-88					; ffffffa8H
	DD	24					; 00000018H
	DD	$LN21@cf2_decode
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN22@cf2_decode
	DD	-109					; ffffff93H
	DD	1
	DD	$LN23@cf2_decode
	DD	-121					; ffffff87H
	DD	1
	DD	$LN24@cf2_decode
$LN24@cf2_decode:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN23@cf2_decode:
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN22@cf2_decode:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN21@cf2_decode:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN20@cf2_decode:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN19@cf2_decode:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cf2_decoder_parse_charstrings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -1						; size = 1
_buf$ = 8						; size = 4
_cf2_buf_isEnd PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2read.c
; Line 107
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 108
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+8]
	jb	SHORT $LN3@cf2_buf_is
	mov	BYTE PTR tv67[ebp], 1
	jmp	SHORT $LN4@cf2_buf_is
$LN3@cf2_buf_is:
	mov	BYTE PTR tv67[ebp], 0
$LN4@cf2_buf_is:
	mov	al, BYTE PTR tv67[ebp]
; Line 109
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_buf_isEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -1						; size = 1
_buf$ = 8						; size = 4
_cf2_buf_readByte PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2read.c
; Line 81
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 82
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN2@cf2_buf_re
; Line 93
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv72[ebp], dl
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [edx+12], ecx
	movzx	eax, BYTE PTR tv72[ebp]
	jmp	SHORT $LN3@cf2_buf_re
; Line 96
	jmp	SHORT $LN3@cf2_buf_re
$LN2@cf2_buf_re:
; Line 98
	push	OFFSET $SG15335
	push	98					; 00000062H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	push	eax
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_cf2_setError
	add	esp, 8
; Line 99
	xor	eax, eax
$LN3@cf2_buf_re:
; Line 101
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_buf_readByte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_newPtr$1 = -8						; size = 4
_offset$2 = -4						; size = 4
_arrstack$ = 8						; size = 4
_ptr$ = 12						; size = 4
_cf2_arrstack_push PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2arrst.c
; Line 214
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN10@cf2_arrsta:
; Line 215
	cmp	DWORD PTR _arrstack$[ebp], 0
	jne	SHORT $LN9@cf2_arrsta
	push	OFFSET $SG12606
	push	215					; 000000d7H
	push	OFFSET $SG12607
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@cf2_arrsta:
	xor	eax, eax
	jne	SHORT $LN10@cf2_arrsta
; Line 217
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR _arrstack$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+12]
	jne	SHORT $LN4@cf2_arrsta
; Line 221
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _arrstack$[ebp]
	add	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR _arrstack$[ebp]
	push	ecx
	call	_cf2_arrstack_setNumElements
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@cf2_arrsta
; Line 224
	jmp	SHORT $LN11@cf2_arrsta
$LN4@cf2_arrsta:
; Line 228
	cmp	DWORD PTR _ptr$[ebp], 0
	jne	SHORT $LN3@cf2_arrsta
	push	OFFSET $SG12615
	push	228					; 000000e4H
	push	OFFSET $SG12616
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_arrsta:
	xor	eax, eax
	jne	SHORT $LN4@cf2_arrsta
; Line 231
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR _arrstack$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	imul	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _offset$2[ebp], eax
; Line 232
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, DWORD PTR _offset$2[ebp]
	mov	DWORD PTR _newPtr$1[ebp], edx
; Line 235
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _newPtr$1[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 236
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN11@cf2_arrsta:
; Line 238
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_arrstack_push ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_newPtr$ = -4						; size = 4
_arrstack$ = 8						; size = 4
_idx$ = 12						; size = 4
_cf2_arrstack_getPointer PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2arrst.c
; Line 189
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN5@cf2_arrsta:
; Line 193
	cmp	DWORD PTR _arrstack$[ebp], 0
	jne	SHORT $LN4@cf2_arrsta
	push	OFFSET $SG12591
	push	193					; 000000c1H
	push	OFFSET $SG12592
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@cf2_arrsta:
	xor	eax, eax
	jne	SHORT $LN5@cf2_arrsta
; Line 195
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	jb	SHORT $LN1@cf2_arrsta
; Line 198
	push	OFFSET $SG12594
	push	198					; 000000c6H
	push	130					; 00000082H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 130				; 00000082H
	push	eax
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_cf2_setError
	add	esp, 8
; Line 199
	mov	DWORD PTR _idx$[ebp], 0
$LN1@cf2_arrsta:
; Line 202
	mov	edx, DWORD PTR _arrstack$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	imul	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _arrstack$[ebp]
	add	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _newPtr$[ebp], eax
; Line 204
	mov	eax, DWORD PTR _newPtr$[ebp]
; Line 205
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_arrstack_getPointer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_arrstack$ = 8						; size = 4
_cf2_arrstack_getBuffer PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2arrst.c
; Line 178
	push	ebp
	mov	ebp, esp
$LN4@cf2_arrsta:
; Line 179
	cmp	DWORD PTR _arrstack$[ebp], 0
	jne	SHORT $LN3@cf2_arrsta
	push	OFFSET $SG12578
	push	179					; 000000b3H
	push	OFFSET $SG12579
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_arrsta:
	xor	eax, eax
	jne	SHORT $LN4@cf2_arrsta
; Line 181
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	eax, DWORD PTR [ecx+28]
; Line 182
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_arrstack_getBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_arrstack$ = 8						; size = 4
_cf2_arrstack_size PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2arrst.c
; Line 169
	push	ebp
	mov	ebp, esp
$LN4@cf2_arrsta:
; Line 170
	cmp	DWORD PTR _arrstack$[ebp], 0
	jne	SHORT $LN3@cf2_arrsta
	push	OFFSET $SG12568
	push	170					; 000000aaH
	push	OFFSET $SG12569
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_arrsta:
	xor	eax, eax
	jne	SHORT $LN4@cf2_arrsta
; Line 172
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	eax, DWORD PTR [ecx+20]
; Line 173
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_arrstack_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_arrstack$ = 8						; size = 4
_cf2_arrstack_clear PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2arrst.c
; Line 159
	push	ebp
	mov	ebp, esp
$LN4@cf2_arrsta:
; Line 160
	cmp	DWORD PTR _arrstack$[ebp], 0
	jne	SHORT $LN3@cf2_arrsta
	push	OFFSET $SG12558
	push	160					; 000000a0H
	push	OFFSET $SG12559
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_arrsta:
	xor	eax, eax
	jne	SHORT $LN4@cf2_arrsta
; Line 162
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 163
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_arrstack_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_arrstack$ = 8						; size = 4
_numElements$ = 12					; size = 4
_cf2_arrstack_setCount PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2arrst.c
; Line 142
	push	ebp
	mov	ebp, esp
$LN6@cf2_arrsta:
; Line 143
	cmp	DWORD PTR _arrstack$[ebp], 0
	jne	SHORT $LN5@cf2_arrsta
	push	OFFSET $SG12546
	push	143					; 0000008fH
	push	OFFSET $SG12547
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN5@cf2_arrsta:
	xor	eax, eax
	jne	SHORT $LN6@cf2_arrsta
; Line 145
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR _numElements$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jbe	SHORT $LN2@cf2_arrsta
; Line 148
	mov	eax, DWORD PTR _numElements$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrstack$[ebp]
	push	ecx
	call	_cf2_arrstack_setNumElements
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@cf2_arrsta
; Line 149
	jmp	SHORT $LN7@cf2_arrsta
$LN2@cf2_arrsta:
; Line 152
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	ecx, DWORD PTR _numElements$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN7@cf2_arrsta:
; Line 153
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_arrstack_setCount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_arrstack$ = 8						; size = 4
_cf2_arrstack_finalize PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2arrst.c
; Line 77
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 78
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
$LN7@cf2_arrsta:
; Line 81
	cmp	DWORD PTR _arrstack$[ebp], 0
	jne	SHORT $LN6@cf2_arrsta
	push	OFFSET $SG12499
	push	81					; 00000051H
	push	OFFSET $SG12500
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN6@cf2_arrsta:
	xor	edx, edx
	jne	SHORT $LN7@cf2_arrsta
; Line 83
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 84
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 85
	mov	edx, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [edx+24], 0
$LN3@cf2_arrsta:
; Line 88
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [eax+28], 0
	xor	ecx, ecx
	jne	SHORT $LN3@cf2_arrsta
; Line 89
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf2_arrstack_finalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_arrstack$ = 8						; size = 4
_memory$ = 12						; size = 4
_error$ = 16						; size = 4
_sizeItem$ = 20						; size = 4
_cf2_arrstack_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2arrst.c
; Line 60
	push	ebp
	mov	ebp, esp
$LN4@cf2_arrsta:
; Line 61
	cmp	DWORD PTR _arrstack$[ebp], 0
	jne	SHORT $LN3@cf2_arrsta
	push	OFFSET $SG12487
	push	61					; 0000003dH
	push	OFFSET $SG12488
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@cf2_arrsta:
	xor	eax, eax
	jne	SHORT $LN4@cf2_arrsta
; Line 64
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 65
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 66
	mov	edx, DWORD PTR _arrstack$[ebp]
	mov	eax, DWORD PTR _sizeItem$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 67
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 68
	mov	edx, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [edx+16], 10			; 0000000aH
; Line 69
	mov	eax, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 70
	mov	ecx, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 71
	mov	edx, DWORD PTR _arrstack$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 72
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cf2_arrstack_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = 8						; size = 4
_value$ = 12						; size = 4
_cf2_setError PROC
; File d:\mozilla\modules\freetype2\src\cff\cf2error.c
; Line 46
	push	ebp
	mov	ebp, esp
; Line 47
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@cf2_setErr
	mov	eax, DWORD PTR _error$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@cf2_setErr
; Line 48
	mov	ecx, DWORD PTR _error$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], edx
$LN2@cf2_setErr:
; Line 49
	pop	ebp
	ret	0
_cf2_setError ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$1 = -12						; size = 4
_style_name_length$ = -8				; size = 4
_family_name_length$ = -4				; size = 4
_family_name$ = 8					; size = 4
_style_name$ = 12					; size = 4
_remove_style PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 441
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 445
	mov	eax, DWORD PTR _family_name$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _family_name_length$[ebp], eax
; Line 446
	mov	ecx, DWORD PTR _style_name$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _style_name_length$[ebp], eax
; Line 448
	mov	edx, DWORD PTR _family_name_length$[ebp]
	cmp	edx, DWORD PTR _style_name_length$[ebp]
	jle	$LN11@remove_sty
; Line 453
	mov	DWORD PTR _idx$1[ebp], 1
	jmp	SHORT $LN9@remove_sty
$LN8@remove_sty:
	mov	eax, DWORD PTR _idx$1[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$1[ebp], eax
$LN9@remove_sty:
	mov	ecx, DWORD PTR _idx$1[ebp]
	cmp	ecx, DWORD PTR _style_name_length$[ebp]
	jg	SHORT $LN7@remove_sty
; Line 456
	mov	edx, DWORD PTR _family_name_length$[ebp]
	sub	edx, DWORD PTR _idx$1[ebp]
	mov	eax, DWORD PTR _family_name$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _style_name_length$[ebp]
	sub	edx, DWORD PTR _idx$1[ebp]
	mov	eax, DWORD PTR _style_name$[ebp]
	movsx	edx, BYTE PTR [eax+edx]
	cmp	ecx, edx
	je	SHORT $LN6@remove_sty
; Line 457
	jmp	SHORT $LN7@remove_sty
$LN6@remove_sty:
; Line 458
	jmp	SHORT $LN8@remove_sty
$LN7@remove_sty:
; Line 460
	mov	eax, DWORD PTR _idx$1[ebp]
	cmp	eax, DWORD PTR _style_name_length$[ebp]
	jle	SHORT $LN11@remove_sty
; Line 463
	mov	ecx, DWORD PTR _family_name_length$[ebp]
	sub	ecx, DWORD PTR _style_name_length$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _idx$1[ebp], ecx
$LN4@remove_sty:
; Line 471
	cmp	DWORD PTR _idx$1[ebp], 0
	jle	SHORT $LN3@remove_sty
	mov	edx, DWORD PTR _family_name$[ebp]
	add	edx, DWORD PTR _idx$1[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN2@remove_sty
	mov	ecx, DWORD PTR _family_name$[ebp]
	add	ecx, DWORD PTR _idx$1[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN2@remove_sty
	mov	eax, DWORD PTR _family_name$[ebp]
	add	eax, DWORD PTR _idx$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 95					; 0000005fH
	je	SHORT $LN2@remove_sty
	mov	edx, DWORD PTR _family_name$[ebp]
	add	edx, DWORD PTR _idx$1[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN3@remove_sty
$LN2@remove_sty:
; Line 472
	mov	ecx, DWORD PTR _idx$1[ebp]
	sub	ecx, 1
	mov	DWORD PTR _idx$1[ebp], ecx
	jmp	SHORT $LN4@remove_sty
$LN3@remove_sty:
; Line 474
	cmp	DWORD PTR _idx$1[ebp], 0
	jle	SHORT $LN11@remove_sty
; Line 475
	mov	edx, DWORD PTR _family_name$[ebp]
	add	edx, DWORD PTR _idx$1[ebp]
	mov	BYTE PTR [edx+1], 0
$LN11@remove_sty:
; Line 478
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_remove_style ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_continue_search$ = -9					; size = 1
_length$ = -8						; size = 4
_idx$ = -4						; size = 4
_name$ = 8						; size = 4
_remove_subset_prefix PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 406
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 407
	mov	DWORD PTR _idx$[ebp], 0
; Line 408
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 409
	mov	BYTE PTR _continue_search$[ebp], 1
$LN13@remove_sub:
; Line 412
	movzx	ecx, BYTE PTR _continue_search$[ebp]
	test	ecx, ecx
	je	$LN14@remove_sub
; Line 414
	cmp	DWORD PTR _length$[ebp], 7
	jl	$LN11@remove_sub
	mov	edx, 1
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _name$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 43					; 0000002bH
	jne	SHORT $LN11@remove_sub
; Line 416
	mov	DWORD PTR _idx$[ebp], 0
	jmp	SHORT $LN10@remove_sub
$LN9@remove_sub:
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax
$LN10@remove_sub:
	cmp	DWORD PTR _idx$[ebp], 6
	jge	SHORT $LN8@remove_sub
; Line 419
	mov	ecx, DWORD PTR _name$[ebp]
	add	ecx, DWORD PTR _idx$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 65					; 00000041H
	jl	SHORT $LN6@remove_sub
	mov	eax, DWORD PTR _name$[ebp]
	add	eax, DWORD PTR _idx$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 90					; 0000005aH
	jle	SHORT $LN7@remove_sub
$LN6@remove_sub:
; Line 420
	mov	BYTE PTR _continue_search$[ebp], 0
$LN7@remove_sub:
; Line 421
	jmp	SHORT $LN9@remove_sub
$LN8@remove_sub:
; Line 423
	movzx	edx, BYTE PTR _continue_search$[ebp]
	test	edx, edx
	je	SHORT $LN5@remove_sub
; Line 425
	mov	DWORD PTR _idx$[ebp], 7
	jmp	SHORT $LN4@remove_sub
$LN3@remove_sub:
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax
$LN4@remove_sub:
	mov	ecx, DWORD PTR _idx$[ebp]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	SHORT $LN2@remove_sub
; Line 426
	mov	edx, DWORD PTR _name$[ebp]
	add	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _name$[ebp]
	add	eax, DWORD PTR _idx$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx-7], cl
	jmp	SHORT $LN3@remove_sub
$LN2@remove_sub:
; Line 427
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, 7
	mov	DWORD PTR _length$[ebp], edx
$LN5@remove_sub:
; Line 430
	jmp	SHORT $LN1@remove_sub
$LN11@remove_sub:
; Line 431
	mov	BYTE PTR _continue_search$[ebp], 0
$LN1@remove_sub:
; Line 432
	jmp	$LN13@remove_sub
$LN14@remove_sub:
; Line 433
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_remove_subset_prefix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -16						; size = 4
_error$ = -8						; size = 4
_memory$ = 8						; size = 4
_source$ = 12						; size = 4
_cff_strcpy PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 387
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 392
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_strdup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
; Line 394
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR _error$[ebp], eax
; Line 396
	mov	eax, DWORD PTR _result$[ebp]
; Line 397
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@cff_strcpy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@cff_strcpy:
	DD	1
	DD	$LN4@cff_strcpy
$LN4@cff_strcpy:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@cff_strcpy
$LN3@cff_strcpy:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_strcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_count$ = -12						; size = 4
_n$ = -8						; size = 4
_cpriv$ = -4						; size = 4
_subfont$ = 8						; size = 4
_priv$ = 12						; size = 4
_cff_make_private_dict PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 113
	mov	eax, DWORD PTR _subfont$[ebp]
	add	eax, 176				; 000000b0H
	mov	DWORD PTR _cpriv$[ebp], eax
; Line 117
	push	196					; 000000c4H
	push	0
	mov	ecx, DWORD PTR _priv$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 119
	mov	edx, DWORD PTR _priv$[ebp]
	mov	eax, DWORD PTR _cpriv$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx+8], cl
	mov	edx, DWORD PTR _priv$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	mov	DWORD PTR _count$[ebp], eax
; Line 120
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN18@cff_make_p
$LN17@cff_make_p:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN18@cff_make_p:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jae	SHORT $LN16@cff_make_p
; Line 121
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	esi, DWORD PTR _cpriv$[ebp]
	mov	dx, WORD PTR [esi+edx*4+4]
	mov	WORD PTR [ecx+eax*2+12], dx
	jmp	SHORT $LN17@cff_make_p
$LN16@cff_make_p:
; Line 123
	mov	eax, DWORD PTR _priv$[ebp]
	mov	ecx, DWORD PTR _cpriv$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+9], dl
	mov	eax, DWORD PTR _priv$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	mov	DWORD PTR _count$[ebp], ecx
; Line 124
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN15@cff_make_p
$LN14@cff_make_p:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN15@cff_make_p:
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN13@cff_make_p
; Line 125
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _priv$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	esi, DWORD PTR _cpriv$[ebp]
	mov	ax, WORD PTR [esi+eax*4+60]
	mov	WORD PTR [edx+ecx*2+40], ax
	jmp	SHORT $LN14@cff_make_p
$LN13@cff_make_p:
; Line 127
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR _cpriv$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+10], al
	mov	ecx, DWORD PTR _priv$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	mov	DWORD PTR _count$[ebp], edx
; Line 128
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN12@cff_make_p
$LN11@cff_make_p:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN12@cff_make_p:
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	SHORT $LN10@cff_make_p
; Line 129
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _priv$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	esi, DWORD PTR _cpriv$[ebp]
	mov	cx, WORD PTR [esi+ecx*4+100]
	mov	WORD PTR [eax+edx*2+60], cx
	jmp	SHORT $LN11@cff_make_p
$LN10@cff_make_p:
; Line 131
	mov	edx, DWORD PTR _priv$[ebp]
	mov	eax, DWORD PTR _cpriv$[ebp]
	mov	cl, BYTE PTR [eax+3]
	mov	BYTE PTR [edx+11], cl
	mov	edx, DWORD PTR _priv$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	mov	DWORD PTR _count$[ebp], eax
; Line 132
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN9@cff_make_p
$LN8@cff_make_p:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN9@cff_make_p:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jae	SHORT $LN7@cff_make_p
; Line 133
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	esi, DWORD PTR _cpriv$[ebp]
	mov	dx, WORD PTR [esi+edx*4+156]
	mov	WORD PTR [ecx+eax*2+88], dx
	jmp	SHORT $LN8@cff_make_p
$LN7@cff_make_p:
; Line 135
	mov	eax, DWORD PTR _priv$[ebp]
	mov	ecx, DWORD PTR _cpriv$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	mov	DWORD PTR [eax+108], edx
; Line 136
	mov	eax, DWORD PTR _priv$[ebp]
	mov	ecx, DWORD PTR _cpriv$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	DWORD PTR [eax+112], edx
; Line 137
	mov	eax, DWORD PTR _priv$[ebp]
	mov	ecx, DWORD PTR _cpriv$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR [eax+116], edx
; Line 139
	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _priv$[ebp]
	mov	eax, DWORD PTR _cpriv$[ebp]
	mov	ax, WORD PTR [eax+208]
	mov	WORD PTR [edx+ecx+120], ax
; Line 140
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _priv$[ebp]
	mov	ecx, DWORD PTR _cpriv$[ebp]
	mov	cx, WORD PTR [ecx+212]
	mov	WORD PTR [eax+edx+122], cx
; Line 142
	mov	edx, DWORD PTR _priv$[ebp]
	mov	eax, DWORD PTR _cpriv$[ebp]
	mov	cl, BYTE PTR [eax+216]
	mov	BYTE PTR [edx+124], cl
	mov	edx, DWORD PTR _priv$[ebp]
	movzx	eax, BYTE PTR [edx+124]
	mov	DWORD PTR _count$[ebp], eax
; Line 143
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@cff_make_p
$LN5@cff_make_p:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN6@cff_make_p:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jae	SHORT $LN4@cff_make_p
; Line 144
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	esi, DWORD PTR _cpriv$[ebp]
	mov	dx, WORD PTR [esi+edx*4+220]
	mov	WORD PTR [ecx+eax*2+128], dx
	jmp	SHORT $LN5@cff_make_p
$LN4@cff_make_p:
; Line 146
	mov	eax, DWORD PTR _priv$[ebp]
	mov	ecx, DWORD PTR _cpriv$[ebp]
	mov	dl, BYTE PTR [ecx+217]
	mov	BYTE PTR [eax+125], dl
	mov	eax, DWORD PTR _priv$[ebp]
	movzx	ecx, BYTE PTR [eax+125]
	mov	DWORD PTR _count$[ebp], ecx
; Line 147
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN3@cff_make_p
$LN2@cff_make_p:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN3@cff_make_p:
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN1@cff_make_p
; Line 148
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _priv$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	esi, DWORD PTR _cpriv$[ebp]
	mov	ax, WORD PTR [esi+eax*4+272]
	mov	WORD PTR [edx+ecx*2+154], ax
	jmp	SHORT $LN2@cff_make_p
$LN1@cff_make_p:
; Line 150
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR _cpriv$[ebp]
	mov	al, BYTE PTR [edx+324]
	mov	BYTE PTR [ecx+126], al
; Line 151
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR _cpriv$[ebp]
	mov	eax, DWORD PTR [edx+336]
	mov	DWORD PTR [ecx+184], eax
; Line 152
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	edx, DWORD PTR _cpriv$[ebp]
	mov	eax, DWORD PTR [edx+332]
	mov	DWORD PTR [ecx+4], eax
; Line 153
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_make_private_dict ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -20						; size = 4
_module$ = -16						; size = 4
_pshinter$ = -12					; size = 4
_font$ = -8						; size = 4
_face$ = -4						; size = 4
_size$ = 8						; size = 4
_cff_size_get_globals_funcs PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 61
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 62
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	DWORD PTR _font$[ebp], eax
; Line 63
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+2952]
	mov	DWORD PTR _pshinter$[ebp], edx
; Line 68
	push	OFFSET $SG11139
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _module$[ebp], eax
; Line 71
	cmp	DWORD PTR _module$[ebp], 0
	je	SHORT $LN3@cff_size_g
	cmp	DWORD PTR _pshinter$[ebp], 0
	je	SHORT $LN3@cff_size_g
	mov	ecx, DWORD PTR _pshinter$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@cff_size_g
	mov	esi, esp
	mov	edx, DWORD PTR _module$[ebp]
	push	edx
	mov	eax, DWORD PTR _pshinter$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@cff_size_g
$LN3@cff_size_g:
	mov	DWORD PTR tv80[ebp], 0
$LN4@cff_size_g:
	mov	eax, DWORD PTR tv80[ebp]
; Line 72
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_size_get_globals_funcs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_MulFix_i386 PROC
; File d:\mozilla\modules\freetype2\include\internal\ftcalc.h
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 159
	mov	eax, DWORD PTR _a$[ebp]
; Line 160
	mov	edx, DWORD PTR _b$[ebp]
; Line 161
	imul	edx
; Line 162
	mov	ecx, edx
; Line 163
	sar	ecx, 31					; 0000001fH
; Line 164
	add	ecx, 32768				; 00008000H
; Line 165
	add	eax, ecx
; Line 166
	adc	edx, 0
; Line 167
	shr	eax, 16					; 00000010H
; Line 168
	shl	edx, 16					; 00000010H
; Line 169
	add	eax, edx
; Line 170
	mov	DWORD PTR _result$[ebp], eax
; Line 172
	mov	eax, DWORD PTR _result$[ebp]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_MulFix_i386 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = 8						; size = 4
_subfont$ = 12						; size = 4
_cff_subfont_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 1416
	push	ebp
	mov	ebp, esp
; Line 1417
	cmp	DWORD PTR _subfont$[ebp], 0
	je	SHORT $LN5@cff_subfon
; Line 1419
	mov	eax, DWORD PTR _subfont$[ebp]
	add	eax, 536				; 00000218H
	push	eax
	call	_cff_index_done
	add	esp, 4
$LN3@cff_subfon:
; Line 1420
	mov	ecx, DWORD PTR _subfont$[ebp]
	mov	edx, DWORD PTR [ecx+568]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _subfont$[ebp]
	mov	DWORD PTR [ecx+568], 0
	xor	edx, edx
	jne	SHORT $LN3@cff_subfon
$LN5@cff_subfon:
; Line 1422
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cff_subfont_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_priv$ = -460						; size = 4
_top$ = -456						; size = 4
_dict_len$ = -448					; size = 4
_dict$ = -436						; size = 4
_parser$ = -424						; size = 416
_error$ = -4						; size = 4
_font$ = 8						; size = 4
_idx$ = 12						; size = 4
_font_index$ = 16					; size = 4
_stream$ = 20						; size = 4
_base_offset$ = 24					; size = 4
_library$ = 28						; size = 4
_cff_subfont_load PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 1310
	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	push	edi
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1313
	mov	DWORD PTR _dict$[ebp], 0
; Line 1315
	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR _top$[ebp], eax
; Line 1316
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 176				; 000000b0H
	mov	DWORD PTR _priv$[ebp], ecx
; Line 1319
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	push	4096					; 00001000H
	lea	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_cff_parser_init
	add	esp, 16					; 00000010H
; Line 1322
	push	176					; 000000b0H
	push	0
	mov	edx, DWORD PTR _top$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1324
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR [eax+32], -6553600		; ff9c0000H
; Line 1325
	mov	ecx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [ecx+36], 3276800		; 00320000H
; Line 1326
	mov	edx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [edx+44], 2
; Line 1327
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR [eax+48], 65536		; 00010000H
; Line 1328
	mov	ecx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [ecx+60], 65536		; 00010000H
; Line 1329
	mov	edx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [edx+156], 8720		; 00002210H
; Line 1333
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR [eax], 65535			; 0000ffffH
; Line 1334
	mov	ecx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [ecx+4], 65535		; 0000ffffH
; Line 1335
	mov	edx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [edx+8], 65535		; 0000ffffH
; Line 1336
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR [eax+12], 65535		; 0000ffffH
; Line 1337
	mov	ecx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [ecx+16], 65535		; 0000ffffH
; Line 1338
	mov	edx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [edx+20], 65535		; 0000ffffH
; Line 1339
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR [eax+128], 65535		; 0000ffffH
; Line 1341
	mov	ecx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [ecx+132], 65535		; 0000ffffH
; Line 1342
	mov	edx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [edx+136], 65535		; 0000ffffH
; Line 1343
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR [eax+172], 65535		; 0000ffffH
; Line 1345
	lea	ecx, DWORD PTR _dict_len$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dict$[ebp]
	push	edx
	mov	eax, DWORD PTR _font_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	call	_cff_index_access_element
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1346
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN19@cff_subfon
$LN18@cff_subfon:
; Line 1348
	mov	edx, 4
	imul	eax, edx, 48
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN17@cff_subfon
	push	OFFSET $SG10883
	call	_FT_Message
	add	esp, 4
$LN17@cff_subfon:
	xor	ecx, ecx
	jne	SHORT $LN18@cff_subfon
; Line 1349
	mov	edx, DWORD PTR _dict$[ebp]
	add	edx, DWORD PTR _dict_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _dict$[ebp]
	push	eax
	lea	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	call	_cff_parser_run
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$LN19@cff_subfon:
; Line 1352
	lea	edx, DWORD PTR _dict$[ebp]
	push	edx
	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	call	_cff_index_forget_element
	add	esp, 8
; Line 1354
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@cff_subfon
; Line 1355
	jmp	$Exit$27
$LN14@cff_subfon:
; Line 1358
	mov	ecx, DWORD PTR _top$[ebp]
	cmp	DWORD PTR [ecx+132], 65535		; 0000ffffH
	je	SHORT $LN13@cff_subfon
; Line 1359
	jmp	$Exit$27
$LN13@cff_subfon:
; Line 1362
	mov	edx, DWORD PTR _top$[ebp]
	cmp	DWORD PTR [edx+116], 0
	je	$LN12@cff_subfon
	mov	eax, DWORD PTR _top$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	$LN12@cff_subfon
; Line 1365
	push	360					; 00000168H
	push	0
	mov	ecx, DWORD PTR _priv$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1367
	mov	edx, DWORD PTR _priv$[ebp]
	mov	DWORD PTR [edx+200], 7
; Line 1368
	mov	eax, DWORD PTR _priv$[ebp]
	mov	DWORD PTR [eax+204], 1
; Line 1369
	mov	ecx, DWORD PTR _priv$[ebp]
	mov	DWORD PTR [ecx+332], -1
; Line 1370
	mov	edx, DWORD PTR _priv$[ebp]
	mov	DWORD PTR [edx+340], 3932		; 00000f5cH
; Line 1371
	mov	eax, DWORD PTR _priv$[ebp]
	mov	DWORD PTR [eax+196], 2596864		; 0027a000H
; Line 1373
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	mov	edx, DWORD PTR _priv$[ebp]
	push	edx
	push	8192					; 00002000H
	lea	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_cff_parser_init
	add	esp, 16					; 00000010H
; Line 1376
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR _base_offset$[ebp]
	add	edx, DWORD PTR [ecx+116]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN10@cff_subfon
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@cff_subfon
$LN10@cff_subfon:
; Line 1377
	jmp	$Exit$27
$LN9@cff_subfon:
; Line 1379
	mov	ecx, 4
	imul	edx, ecx, 48
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN8@cff_subfon
	push	OFFSET $SG10898
	call	_FT_Message
	add	esp, 4
$LN8@cff_subfon:
	xor	eax, eax
	jne	SHORT $LN9@cff_subfon
; Line 1382
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	edx, DWORD PTR _parser$[ebp]
	push	edx
	call	_cff_parser_run
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1383
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 1384
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@cff_subfon
; Line 1385
	jmp	$Exit$27
$LN5@cff_subfon:
; Line 1388
	mov	ecx, DWORD PTR _priv$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _priv$[ebp]
	mov	BYTE PTR [eax], dl
$LN12@cff_subfon:
; Line 1392
	mov	ecx, DWORD PTR _priv$[ebp]
	cmp	DWORD PTR [ecx+348], 0
	je	SHORT $Exit$27
; Line 1395
	mov	edx, DWORD PTR _top$[ebp]
	mov	eax, DWORD PTR _base_offset$[ebp]
	add	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _priv$[ebp]
	add	eax, DWORD PTR [ecx+348]
	push	eax
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@cff_subfon
; Line 1396
	jmp	SHORT $Exit$27
$LN3@cff_subfon:
; Line 1398
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 536				; 00000218H
	push	ecx
	call	_cff_index_init
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1399
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@cff_subfon
; Line 1400
	jmp	SHORT $Exit$27
$LN2@cff_subfon:
; Line 1403
	push	0
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 568				; 00000238H
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 536				; 00000218H
	push	eax
	call	_cff_index_get_pointers
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$Exit$27:
; Line 1409
	mov	eax, DWORD PTR _error$[ebp]
; Line 1410
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@cff_subfon
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@cff_subfon:
	DD	3
	DD	$LN25@cff_subfon
$LN25@cff_subfon:
	DD	-424					; fffffe58H
	DD	416					; 000001a0H
	DD	$LN22@cff_subfon
	DD	-436					; fffffe4cH
	DD	4
	DD	$LN23@cff_subfon
	DD	-448					; fffffe40H
	DD	4
	DD	$LN24@cff_subfon
$LN24@cff_subfon:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN23@cff_subfon:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN22@cff_subfon:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_cff_subfont_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv232 = -64						; size = 4
tv132 = -60						; size = 4
_gid$1 = -56						; size = 4
_sid$2 = -52						; size = 4
_gindex$3 = -48						; size = 4
_k$4 = -44						; size = 4
_i$5 = -40						; size = 4
_nleft$6 = -36						; size = 4
_p$7 = -32						; size = 4
_glyph_code$ = -28					; size = 4
_glyph_sid$ = -24					; size = 2
_j$ = -20						; size = 4
_count$ = -16						; size = 4
_error$ = -8						; size = 4
_encoding$ = 8						; size = 4
_charset$ = 12						; size = 4
_num_glyphs$ = 16					; size = 4
_stream$ = 20						; size = 4
_base_offset$ = 24					; size = 4
_offset$ = 28						; size = 4
_cff_encoding_load PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 1067
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1068
	mov	DWORD PTR _error$[ebp], 0
; Line 1076
	mov	eax, DWORD PTR _charset$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN52@cff_encodi
; Line 1078
	push	OFFSET $SG10772
	push	1078					; 00000436H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1079
	jmp	$Exit$58
$LN52@cff_encodi:
; Line 1083
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN51@cff_encodi
$LN50@cff_encodi:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN51@cff_encodi:
	cmp	DWORD PTR _j$[ebp], 256			; 00000100H
	jae	SHORT $LN49@cff_encodi
; Line 1085
	xor	edx, edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	WORD PTR [ecx+eax*2+12], dx
; Line 1086
	xor	edx, edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	WORD PTR [ecx+eax*2+524], dx
; Line 1087
	jmp	SHORT $LN50@cff_encodi
$LN49@cff_encodi:
; Line 1101
	cmp	DWORD PTR _offset$[ebp], 1
	jbe	$LN48@cff_encodi
; Line 1103
	mov	edx, DWORD PTR _base_offset$[ebp]
	add	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 1108
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN46@cff_encodi
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadChar
	add	esp, 8
	movzx	eax, al
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [ecx], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN46@cff_encodi
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadChar
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR _count$[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN47@cff_encodi
$LN46@cff_encodi:
; Line 1109
	jmp	$Exit$58
$LN47@cff_encodi:
; Line 1111
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 127				; 0000007fH
	mov	DWORD PTR tv132[ebp], eax
	je	SHORT $LN43@cff_encodi
	cmp	DWORD PTR tv132[ebp], 1
	je	$LN37@cff_encodi
	jmp	$LN25@cff_encodi
$LN43@cff_encodi:
; Line 1122
	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1124
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN42@cff_encodi
; Line 1125
	jmp	$Exit$58
$LN42@cff_encodi:
; Line 1127
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _p$7[ebp], eax
; Line 1129
	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN41@cff_encodi
$LN40@cff_encodi:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN41@cff_encodi:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	ja	SHORT $LN39@cff_encodi
; Line 1131
	mov	eax, DWORD PTR _p$7[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _glyph_code$[ebp], ecx
	mov	edx, DWORD PTR _p$7[ebp]
	add	edx, 1
	mov	DWORD PTR _p$7[ebp], edx
; Line 1134
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _num_glyphs$[ebp]
	jae	SHORT $LN38@cff_encodi
; Line 1137
	mov	ecx, DWORD PTR _glyph_code$[ebp]
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	ax, WORD PTR _j$[ebp]
	mov	WORD PTR [edx+ecx*2+524], ax
; Line 1140
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _glyph_code$[ebp]
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	dx, WORD PTR [edx+esi*2]
	mov	WORD PTR [ecx+eax*2+12], dx
$LN38@cff_encodi:
; Line 1142
	jmp	SHORT $LN40@cff_encodi
$LN39@cff_encodi:
; Line 1144
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 1146
	jmp	$LN44@cff_encodi
$LN37@cff_encodi:
; Line 1151
	mov	DWORD PTR _i$5[ebp], 1
; Line 1155
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 1158
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN36@cff_encodi
$LN35@cff_encodi:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, DWORD PTR _nleft$6[ebp]
	mov	DWORD PTR _i$5[ebp], eax
$LN36@cff_encodi:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	$LN34@cff_encodi
; Line 1161
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadChar
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR _glyph_code$[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN33@cff_encodi
; Line 1162
	jmp	$Exit$58
$LN33@cff_encodi:
; Line 1165
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadChar
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR _nleft$6[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN32@cff_encodi
; Line 1166
	jmp	$Exit$58
$LN32@cff_encodi:
; Line 1169
	mov	edx, DWORD PTR _nleft$6[ebp]
	add	edx, 1
	mov	DWORD PTR _nleft$6[ebp], edx
; Line 1172
	mov	eax, DWORD PTR _encoding$[ebp]
	mov	ecx, DWORD PTR _nleft$6[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN31@cff_encodi
; Line 1173
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	eax, DWORD PTR _nleft$6[ebp]
	mov	DWORD PTR [edx+8], eax
$LN31@cff_encodi:
; Line 1176
	mov	ecx, DWORD PTR _i$5[ebp]
	mov	DWORD PTR _k$4[ebp], ecx
	jmp	SHORT $LN30@cff_encodi
$LN29@cff_encodi:
	mov	edx, DWORD PTR _k$4[ebp]
	add	edx, 1
	mov	DWORD PTR _k$4[ebp], edx
	mov	eax, DWORD PTR _glyph_code$[ebp]
	add	eax, 1
	mov	DWORD PTR _glyph_code$[ebp], eax
$LN30@cff_encodi:
	mov	ecx, DWORD PTR _nleft$6[ebp]
	add	ecx, DWORD PTR _i$5[ebp]
	cmp	DWORD PTR _k$4[ebp], ecx
	jae	SHORT $LN28@cff_encodi
; Line 1179
	mov	edx, DWORD PTR _k$4[ebp]
	cmp	edx, DWORD PTR _num_glyphs$[ebp]
	jae	SHORT $LN27@cff_encodi
	cmp	DWORD PTR _glyph_code$[ebp], 256	; 00000100H
	jae	SHORT $LN27@cff_encodi
; Line 1182
	mov	eax, DWORD PTR _glyph_code$[ebp]
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	dx, WORD PTR _k$4[ebp]
	mov	WORD PTR [ecx+eax*2+524], dx
; Line 1185
	mov	eax, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _glyph_code$[ebp]
	mov	eax, DWORD PTR _encoding$[ebp]
	mov	esi, DWORD PTR _k$4[ebp]
	mov	cx, WORD PTR [ecx+esi*2]
	mov	WORD PTR [eax+edx*2+12], cx
$LN27@cff_encodi:
; Line 1187
	jmp	SHORT $LN29@cff_encodi
$LN28@cff_encodi:
; Line 1188
	jmp	$LN35@cff_encodi
$LN34@cff_encodi:
; Line 1191
	mov	edx, DWORD PTR _encoding$[ebp]
	cmp	DWORD PTR [edx+8], 256			; 00000100H
	jbe	SHORT $LN26@cff_encodi
; Line 1192
	mov	eax, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [eax+8], 256			; 00000100H
$LN26@cff_encodi:
; Line 1194
	jmp	SHORT $LN44@cff_encodi
$LN25@cff_encodi:
; Line 1197
	push	OFFSET $SG10817
	call	_FT_Message
	add	esp, 4
; Line 1198
	push	OFFSET $SG10818
	push	1198					; 000004aeH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1199
	jmp	$Exit$58
$LN44@cff_encodi:
; Line 1203
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 128				; 00000080H
	je	$LN24@cff_encodi
; Line 1209
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadChar
	add	esp, 8
	movzx	edx, al
	mov	DWORD PTR _count$[ebp], edx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN23@cff_encodi
; Line 1210
	jmp	$Exit$58
$LN23@cff_encodi:
; Line 1212
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN22@cff_encodi
$LN21@cff_encodi:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN22@cff_encodi:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	$LN24@cff_encodi
; Line 1215
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadChar
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR _glyph_code$[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@cff_encodi
; Line 1216
	jmp	$Exit$58
$LN19@cff_encodi:
; Line 1219
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	WORD PTR _glyph_sid$[ebp], ax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@cff_encodi
; Line 1220
	jmp	$Exit$58
$LN18@cff_encodi:
; Line 1223
	mov	ecx, DWORD PTR _glyph_code$[ebp]
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	ax, WORD PTR _glyph_sid$[ebp]
	mov	WORD PTR [edx+ecx*2+12], ax
; Line 1227
	mov	DWORD PTR _gindex$3[ebp], 0
	jmp	SHORT $LN17@cff_encodi
$LN16@cff_encodi:
	mov	ecx, DWORD PTR _gindex$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _gindex$3[ebp], ecx
$LN17@cff_encodi:
	mov	edx, DWORD PTR _gindex$3[ebp]
	cmp	edx, DWORD PTR _num_glyphs$[ebp]
	jae	SHORT $LN15@cff_encodi
; Line 1229
	mov	eax, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _gindex$3[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	movzx	ecx, WORD PTR _glyph_sid$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN14@cff_encodi
; Line 1231
	mov	edx, DWORD PTR _glyph_code$[ebp]
	mov	eax, DWORD PTR _encoding$[ebp]
	mov	cx, WORD PTR _gindex$3[ebp]
	mov	WORD PTR [eax+edx*2+524], cx
; Line 1232
	jmp	SHORT $LN15@cff_encodi
$LN14@cff_encodi:
; Line 1234
	jmp	SHORT $LN16@cff_encodi
$LN15@cff_encodi:
; Line 1235
	jmp	$LN21@cff_encodi
$LN24@cff_encodi:
; Line 1238
	jmp	$Exit$58
$LN48@cff_encodi:
; Line 1245
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR tv232[ebp], edx
	cmp	DWORD PTR tv232[ebp], 0
	je	SHORT $LN10@cff_encodi
	cmp	DWORD PTR tv232[ebp], 1
	je	SHORT $LN9@cff_encodi
	jmp	$LN1@cff_encodi
$LN10@cff_encodi:
; Line 1249
	push	512					; 00000200H
	push	OFFSET _cff_standard_encoding
	mov	eax, DWORD PTR _encoding$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1250
	jmp	SHORT $Populate$59
$LN9@cff_encodi:
; Line 1254
	push	512					; 00000200H
	push	OFFSET _cff_expert_encoding
	mov	ecx, DWORD PTR _encoding$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$Populate$59:
; Line 1260
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 1263
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _num_glyphs$[ebp]
	push	edx
	mov	eax, DWORD PTR _charset$[ebp]
	push	eax
	call	_cff_charset_compute_cids
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1264
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@cff_encodi
; Line 1265
	jmp	$Exit$58
$LN8@cff_encodi:
; Line 1267
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@cff_encodi
$LN6@cff_encodi:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN7@cff_encodi:
	cmp	DWORD PTR _j$[ebp], 256			; 00000100H
	jae	SHORT $LN5@cff_encodi
; Line 1269
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _encoding$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+12]
	mov	DWORD PTR _sid$2[ebp], ecx
; Line 1270
	mov	DWORD PTR _gid$1[ebp], 0
; Line 1273
	cmp	DWORD PTR _sid$2[ebp], 0
	je	SHORT $LN4@cff_encodi
; Line 1274
	mov	edx, DWORD PTR _sid$2[ebp]
	push	edx
	mov	eax, DWORD PTR _charset$[ebp]
	push	eax
	call	_cff_charset_cid_to_gindex
	add	esp, 8
	mov	DWORD PTR _gid$1[ebp], eax
$LN4@cff_encodi:
; Line 1276
	cmp	DWORD PTR _gid$1[ebp], 0
	je	SHORT $LN3@cff_encodi
; Line 1278
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	ax, WORD PTR _gid$1[ebp]
	mov	WORD PTR [edx+ecx*2+524], ax
; Line 1279
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1281
	jmp	SHORT $LN2@cff_encodi
$LN3@cff_encodi:
; Line 1283
	xor	eax, eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	WORD PTR [edx+ecx*2+524], ax
; Line 1284
	xor	eax, eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	WORD PTR [edx+ecx*2+12], ax
$LN2@cff_encodi:
; Line 1286
	jmp	$LN6@cff_encodi
$LN5@cff_encodi:
; Line 1287
	jmp	SHORT $Exit$58
$LN1@cff_encodi:
; Line 1290
	push	OFFSET $SG10855
	call	_FT_Message
	add	esp, 4
; Line 1291
	push	OFFSET $SG10856
	push	1291					; 0000050bH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$Exit$58:
; Line 1299
	mov	eax, DWORD PTR _error$[ebp]
; Line 1300
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN57@cff_encodi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN57@cff_encodi:
	DD	1
	DD	$LN56@cff_encodi
$LN56@cff_encodi:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN55@cff_encodi
$LN55@cff_encodi:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_encoding_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_encoding$ = 8						; size = 4
_cff_encoding_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 1053
	push	ebp
	mov	ebp, esp
; Line 1054
	mov	eax, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1055
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 1056
	mov	edx, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 1057
	pop	ebp
	ret	0
_cff_encoding_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv185 = -40						; size = 4
tv92 = -36						; size = 4
_i$1 = -32						; size = 4
_nleft$2 = -28						; size = 4
_j$3 = -24						; size = 4
_glyph_sid$ = -20					; size = 2
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_charset$ = 8						; size = 4
_num_glyphs$ = 12					; size = 4
_stream$ = 16						; size = 4
_base_offset$ = 20					; size = 4
_offset$ = 24						; size = 4
_invert$ = 28						; size = 1
_cff_charset_load PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 868
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 869
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 870
	mov	DWORD PTR _error$[ebp], 0
; Line 876
	cmp	DWORD PTR _offset$[ebp], 2
	jbe	$LN46@cff_charse
; Line 881
	mov	edx, DWORD PTR _base_offset$[ebp]
	add	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 885
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN44@cff_charse
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadChar
	add	esp, 8
	movzx	eax, al
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [ecx], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN45@cff_charse
$LN44@cff_charse:
; Line 886
	jmp	$Exit$52
$LN45@cff_charse:
; Line 889
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _num_glyphs$[ebp]
	push	eax
	push	0
	push	2
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN43@cff_charse
; Line 890
	jmp	$Exit$52
$LN43@cff_charse:
; Line 893
	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _charset$[ebp]
	mov	eax, DWORD PTR [edx+8]
	xor	edx, edx
	mov	WORD PTR [ecx+eax], dx
; Line 895
	mov	eax, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv92[ebp], ecx
	cmp	DWORD PTR tv92[ebp], 0
	je	SHORT $LN40@cff_charse
	cmp	DWORD PTR tv92[ebp], 0
	jbe	$LN22@cff_charse
	cmp	DWORD PTR tv92[ebp], 2
	jbe	SHORT $LN34@cff_charse
	jmp	$LN22@cff_charse
$LN40@cff_charse:
; Line 898
	cmp	DWORD PTR _num_glyphs$[ebp], 0
	jbe	SHORT $LN39@cff_charse
; Line 900
	mov	edx, DWORD PTR _num_glyphs$[ebp]
	lea	eax, DWORD PTR [edx+edx-2]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN38@cff_charse
; Line 901
	jmp	$Exit$52
$LN38@cff_charse:
; Line 903
	mov	DWORD PTR _j$3[ebp], 1
	jmp	SHORT $LN37@cff_charse
$LN36@cff_charse:
	mov	edx, DWORD PTR _j$3[ebp]
	add	edx, 1
	mov	DWORD PTR _j$3[ebp], edx
$LN37@cff_charse:
	mov	eax, DWORD PTR _j$3[ebp]
	cmp	eax, DWORD PTR _num_glyphs$[ebp]
	jae	SHORT $LN35@cff_charse
; Line 904
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShort
	add	esp, 4
	mov	edx, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _j$3[ebp]
	mov	WORD PTR [ecx+edx*2], ax
	jmp	SHORT $LN36@cff_charse
$LN35@cff_charse:
; Line 906
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
$LN39@cff_charse:
; Line 908
	jmp	$LN41@cff_charse
$LN34@cff_charse:
; Line 917
	mov	DWORD PTR _j$3[ebp], 1
$LN33@cff_charse:
; Line 919
	mov	ecx, DWORD PTR _j$3[ebp]
	cmp	ecx, DWORD PTR _num_glyphs$[ebp]
	jae	$LN32@cff_charse
; Line 922
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	WORD PTR _glyph_sid$[ebp], ax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@cff_charse
; Line 923
	jmp	$Exit$52
$LN31@cff_charse:
; Line 926
	mov	ecx, DWORD PTR _charset$[ebp]
	cmp	DWORD PTR [ecx], 2
	jne	SHORT $LN30@cff_charse
; Line 928
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	ecx, ax
	mov	DWORD PTR _nleft$2[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN29@cff_charse
; Line 929
	jmp	$Exit$52
$LN29@cff_charse:
; Line 931
	jmp	SHORT $LN28@cff_charse
$LN30@cff_charse:
; Line 933
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadChar
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR _nleft$2[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@cff_charse
; Line 934
	jmp	$Exit$52
$LN28@cff_charse:
; Line 938
	movzx	edx, WORD PTR _glyph_sid$[ebp]
	mov	eax, 65535				; 0000ffffH
	sub	eax, DWORD PTR _nleft$2[ebp]
	cmp	edx, eax
	jbe	SHORT $LN26@cff_charse
; Line 941
	movzx	ecx, WORD PTR _glyph_sid$[ebp]
	mov	edx, 65535				; 0000ffffH
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _nleft$2[ebp]
	push	eax
	push	OFFSET $SG10701
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 942
	movzx	ecx, WORD PTR _glyph_sid$[ebp]
	mov	edx, 65535				; 0000ffffH
	sub	edx, ecx
	mov	DWORD PTR _nleft$2[ebp], edx
$LN26@cff_charse:
; Line 946
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN25@cff_charse
$LN24@cff_charse:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
	mov	ecx, DWORD PTR _j$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$3[ebp], ecx
	mov	dx, WORD PTR _glyph_sid$[ebp]
	add	dx, 1
	mov	WORD PTR _glyph_sid$[ebp], dx
$LN25@cff_charse:
	mov	eax, DWORD PTR _j$3[ebp]
	cmp	eax, DWORD PTR _num_glyphs$[ebp]
	jae	SHORT $LN23@cff_charse
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _nleft$2[ebp]
	ja	SHORT $LN23@cff_charse
; Line 947
	mov	edx, DWORD PTR _charset$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _j$3[ebp]
	mov	dx, WORD PTR _glyph_sid$[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	jmp	SHORT $LN24@cff_charse
$LN23@cff_charse:
; Line 948
	jmp	$LN33@cff_charse
$LN32@cff_charse:
; Line 950
	jmp	SHORT $LN41@cff_charse
$LN22@cff_charse:
; Line 953
	push	OFFSET $SG10707
	call	_FT_Message
	add	esp, 4
; Line 954
	push	OFFSET $SG10708
	push	954					; 000003baH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 955
	jmp	$Exit$52
$LN41@cff_charse:
; Line 958
	jmp	$LN21@cff_charse
$LN46@cff_charse:
; Line 968
	mov	eax, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 970
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR tv185[ebp], edx
	cmp	DWORD PTR tv185[ebp], 0
	je	SHORT $LN18@cff_charse
	cmp	DWORD PTR tv185[ebp], 1
	je	$LN15@cff_charse
	cmp	DWORD PTR tv185[ebp], 2
	je	$LN12@cff_charse
	jmp	$LN9@cff_charse
$LN18@cff_charse:
; Line 973
	cmp	DWORD PTR _num_glyphs$[ebp], 229	; 000000e5H
	jbe	SHORT $LN17@cff_charse
; Line 976
	push	OFFSET $SG10717
	call	_FT_Message
	add	esp, 4
; Line 977
	push	OFFSET $SG10718
	push	977					; 000003d1H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 978
	jmp	$Exit$52
$LN17@cff_charse:
; Line 982
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _num_glyphs$[ebp]
	push	ecx
	push	0
	push	2
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [ecx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@cff_charse
; Line 983
	jmp	$Exit$52
$LN16@cff_charse:
; Line 986
	mov	edx, DWORD PTR _num_glyphs$[ebp]
	shl	edx, 1
	push	edx
	push	OFFSET _cff_isoadobe_charset
	mov	eax, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 988
	jmp	$LN21@cff_charse
$LN15@cff_charse:
; Line 991
	cmp	DWORD PTR _num_glyphs$[ebp], 166	; 000000a6H
	jbe	SHORT $LN14@cff_charse
; Line 994
	push	OFFSET $SG10724
	call	_FT_Message
	add	esp, 4
; Line 995
	push	OFFSET $SG10725
	push	995					; 000003e3H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 996
	jmp	$Exit$52
$LN14@cff_charse:
; Line 1000
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _num_glyphs$[ebp]
	push	eax
	push	0
	push	2
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@cff_charse
; Line 1001
	jmp	$Exit$52
$LN13@cff_charse:
; Line 1004
	mov	eax, DWORD PTR _num_glyphs$[ebp]
	shl	eax, 1
	push	eax
	push	OFFSET _cff_expert_charset
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1006
	jmp	$LN21@cff_charse
$LN12@cff_charse:
; Line 1009
	cmp	DWORD PTR _num_glyphs$[ebp], 87		; 00000057H
	jbe	SHORT $LN11@cff_charse
; Line 1012
	push	OFFSET $SG10731
	call	_FT_Message
	add	esp, 4
; Line 1013
	push	OFFSET $SG10732
	push	1013					; 000003f5H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1014
	jmp	SHORT $Exit$52
$LN11@cff_charse:
; Line 1018
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _num_glyphs$[ebp]
	push	ecx
	push	0
	push	2
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [ecx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@cff_charse
; Line 1019
	jmp	SHORT $Exit$52
$LN10@cff_charse:
; Line 1022
	mov	edx, DWORD PTR _num_glyphs$[ebp]
	shl	edx, 1
	push	edx
	push	OFFSET _cff_expertsubset_charset
	mov	eax, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1024
	jmp	SHORT $LN21@cff_charse
$LN9@cff_charse:
; Line 1027
	push	OFFSET $SG10737
	push	1027					; 00000403H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1028
	jmp	SHORT $Exit$52
$LN21@cff_charse:
; Line 1033
	movzx	edx, BYTE PTR _invert$[ebp]
	test	edx, edx
	je	SHORT $Exit$52
; Line 1034
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_glyphs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _charset$[ebp]
	push	edx
	call	_cff_charset_compute_cids
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$Exit$52:
; Line 1038
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@cff_charse
$LN6@cff_charse:
; Line 1040
	mov	eax, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [eax+8], 0
	xor	ecx, ecx
	jne	SHORT $LN6@cff_charse
$LN3@cff_charse:
; Line 1041
	mov	edx, DWORD PTR _charset$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [edx+12], 0
	xor	eax, eax
	jne	SHORT $LN3@cff_charse
; Line 1042
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 1043
	mov	edx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1044
	mov	eax, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN7@cff_charse:
; Line 1047
	mov	eax, DWORD PTR _error$[ebp]
; Line 1048
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN51@cff_charse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN51@cff_charse:
	DD	1
	DD	$LN50@cff_charse
$LN50@cff_charse:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN49@cff_charse
$LN49@cff_charse:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_charset_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_charset$ = 8						; size = 4
_stream$ = 12						; size = 4
_cff_charset_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 849
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 850
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 853
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _charset$[ebp]
	push	eax
	call	_cff_charset_free_cids
	add	esp, 8
$LN3@cff_charse:
; Line 855
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [ecx+8], 0
	xor	edx, edx
	jne	SHORT $LN3@cff_charse
; Line 856
	mov	eax, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [eax], 0
; Line 857
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 858
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_charset_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_charset$ = 8						; size = 4
_memory$ = 12						; size = 4
_cff_charset_free_cids PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 840
	push	ebp
	mov	ebp, esp
$LN3@cff_charse:
; Line 841
	mov	eax, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [eax+12], 0
	xor	ecx, ecx
	jne	SHORT $LN3@cff_charse
; Line 842
	mov	edx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 843
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cff_charset_free_cids ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_max_cid$ = -24						; size = 2
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_error$ = -8						; size = 4
_charset$ = 8						; size = 4
_num_glyphs$ = 12					; size = 4
_memory$ = 16						; size = 4
_cff_charset_compute_cids PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 790
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 791
	mov	DWORD PTR _error$[ebp], 0
; Line 794
	xor	eax, eax
	mov	WORD PTR _max_cid$[ebp], ax
; Line 797
	mov	ecx, DWORD PTR _charset$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jbe	SHORT $LN9@cff_charse
; Line 798
	jmp	$Exit$15
$LN9@cff_charse:
; Line 800
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@cff_charse
$LN7@cff_charse:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@cff_charse:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_glyphs$[ebp]
	jae	SHORT $LN6@cff_charse
; Line 802
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2]
	movzx	edx, WORD PTR _max_cid$[ebp]
	cmp	ecx, edx
	jle	SHORT $LN5@cff_charse
; Line 803
	mov	eax, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ax, WORD PTR [ecx+edx*2]
	mov	WORD PTR _max_cid$[ebp], ax
$LN5@cff_charse:
; Line 804
	jmp	SHORT $LN7@cff_charse
$LN6@cff_charse:
; Line 806
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	movzx	edx, WORD PTR _max_cid$[ebp]
	add	edx, 1
	push	edx
	push	0
	push	2
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@cff_charse
; Line 807
	jmp	SHORT $Exit$15
$LN4@cff_charse:
; Line 812
	mov	edx, DWORD PTR _num_glyphs$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	jmp	SHORT $LN3@cff_charse
$LN2@cff_charse:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@cff_charse:
	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $LN1@cff_charse
; Line 813
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _j$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2]
	mov	edx, DWORD PTR _charset$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	dx, WORD PTR _j$[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	jmp	SHORT $LN2@cff_charse
$LN1@cff_charse:
; Line 815
	movzx	eax, WORD PTR _max_cid$[ebp]
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 816
	mov	edx, DWORD PTR _charset$[ebp]
	mov	eax, DWORD PTR _num_glyphs$[ebp]
	mov	DWORD PTR [edx+20], eax
$Exit$15:
; Line 819
	mov	eax, DWORD PTR _error$[ebp]
; Line 820
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@cff_charse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@cff_charse:
	DD	1
	DD	$LN13@cff_charse
$LN13@cff_charse:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN12@cff_charse
$LN12@cff_charse:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_charset_compute_cids ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -24						; size = 4
_num_ranges$ = -20					; size = 4
_format$ = -13						; size = 1
_error$ = -8						; size = 4
_fdselect$ = 8						; size = 4
_num_glyphs$ = 12					; size = 4
_stream$ = 16						; size = 4
_offset$ = 20						; size = 4
_CFF_Load_FD_Select PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 669
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 676
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN13@CFF_Load_F
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadChar
	add	esp, 8
	mov	BYTE PTR _format$[ebp], al
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@CFF_Load_F
$LN13@CFF_Load_F:
; Line 677
	jmp	$Exit$20
$LN14@CFF_Load_F:
; Line 679
	mov	ecx, DWORD PTR _fdselect$[ebp]
	mov	dl, BYTE PTR _format$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 680
	mov	eax, DWORD PTR _fdselect$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 682
	mov	cl, BYTE PTR _format$[ebp]
	mov	BYTE PTR tv75[ebp], cl
	cmp	BYTE PTR tv75[ebp], 0
	je	SHORT $LN10@CFF_Load_F
	cmp	BYTE PTR tv75[ebp], 3
	je	SHORT $LN9@CFF_Load_F
	jmp	$LN1@CFF_Load_F
$LN10@CFF_Load_F:
; Line 685
	mov	edx, DWORD PTR _fdselect$[ebp]
	mov	eax, DWORD PTR _num_glyphs$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 686
	jmp	SHORT $Load_Data$21
$LN9@CFF_Load_F:
; Line 689
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	eax, ax
	mov	DWORD PTR _num_ranges$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@CFF_Load_F
; Line 690
	jmp	$Exit$20
$LN8@CFF_Load_F:
; Line 692
	cmp	DWORD PTR _num_ranges$[ebp], 0
	jne	SHORT $LN7@CFF_Load_F
$LN6@CFF_Load_F:
; Line 694
	mov	ecx, 4
	imul	edx, ecx, 48
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN5@CFF_Load_F
	push	OFFSET $SG10549
	call	_FT_Message
	add	esp, 4
$LN5@CFF_Load_F:
	xor	eax, eax
	jne	SHORT $LN6@CFF_Load_F
; Line 695
	push	OFFSET $SG10550
	push	695					; 000002b7H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 696
	jmp	SHORT $Exit$20
$LN7@CFF_Load_F:
; Line 699
	imul	ecx, DWORD PTR _num_ranges$[ebp], 3
	add	ecx, 2
	mov	edx, DWORD PTR _fdselect$[ebp]
	mov	DWORD PTR [edx+12], ecx
$Load_Data$21:
; Line 702
	mov	eax, DWORD PTR _fdselect$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _fdselect$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@CFF_Load_F
; Line 703
	jmp	SHORT $Exit$20
$LN2@CFF_Load_F:
; Line 704
	jmp	SHORT $Exit$20
$LN1@CFF_Load_F:
; Line 707
	push	OFFSET $SG10555
	push	707					; 000002c3H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
$Exit$20:
; Line 711
	mov	eax, DWORD PTR _error$[ebp]
; Line 712
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@CFF_Load_F
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN19@CFF_Load_F:
	DD	1
	DD	$LN18@CFF_Load_F
$LN18@CFF_Load_F:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN17@CFF_Load_F
$LN17@CFF_Load_F:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_CFF_Load_FD_Select ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fdselect$ = 8						; size = 4
_stream$ = 12						; size = 4
_CFF_Done_FD_Select PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 654
	push	ebp
	mov	ebp, esp
; Line 655
	mov	eax, DWORD PTR _fdselect$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@CFF_Done_F
; Line 656
	mov	ecx, DWORD PTR _fdselect$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
$LN1@CFF_Done_F:
; Line 658
	mov	eax, DWORD PTR _fdselect$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 659
	mov	ecx, DWORD PTR _fdselect$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 660
	mov	edx, DWORD PTR _fdselect$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 661
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_CFF_Done_FD_Select ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_next_offset$1 = -44					; size = 4
_org_bytes$2 = -40					; size = 4
_extra$3 = -36						; size = 4
_cur_offset$4 = -32					; size = 4
_n$5 = -28						; size = 4
_new_bytes$ = -24					; size = 4
_t$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_idx$ = 8						; size = 4
_table$ = 12						; size = 4
_pool$ = 16						; size = 4
_cff_index_get_pointers PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 386
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 387
	mov	DWORD PTR _error$[ebp], 0
; Line 388
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _memory$[ebp], edx
; Line 390
	mov	DWORD PTR _t$[ebp], 0
; Line 391
	mov	DWORD PTR _new_bytes$[ebp], 0
; Line 394
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax], 0
; Line 396
	mov	ecx, DWORD PTR _idx$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN21@cff_index_
; Line 398
	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	call	_cff_index_load_offsets
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 399
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@cff_index_
; Line 400
	jmp	$Exit$27
$LN21@cff_index_:
; Line 406
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jbe	$Exit$27
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _t$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$27
	cmp	DWORD PTR _pool$[ebp], 0
	je	SHORT $LN18@cff_index_
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _idx$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _new_bytes$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$27
$LN18@cff_index_:
; Line 409
	mov	DWORD PTR _extra$3[ebp], 0
; Line 410
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _org_bytes$2[ebp], edx
; Line 414
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx]
	sub	ecx, 1
	mov	DWORD PTR _cur_offset$4[ebp], ecx
; Line 417
	je	SHORT $LN17@cff_index_
$LN16@cff_index_:
; Line 421
	mov	edx, 4
	imul	eax, edx, 48
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN15@cff_index_
	mov	ecx, DWORD PTR _cur_offset$4[ebp]
	push	ecx
	push	OFFSET $SG10409
	call	_FT_Message
	add	esp, 8
$LN15@cff_index_:
	xor	edx, edx
	jne	SHORT $LN16@cff_index_
; Line 422
	mov	DWORD PTR _cur_offset$4[ebp], 0
$LN17@cff_index_:
; Line 425
	cmp	DWORD PTR _pool$[ebp], 0
	jne	SHORT $LN12@cff_index_
; Line 426
	mov	eax, DWORD PTR _org_bytes$2[ebp]
	add	eax, DWORD PTR _cur_offset$4[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+edx], eax
; Line 427
	jmp	SHORT $LN11@cff_index_
$LN12@cff_index_:
; Line 428
	mov	edx, DWORD PTR _new_bytes$[ebp]
	add	edx, DWORD PTR _cur_offset$4[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+ecx], edx
$LN11@cff_index_:
; Line 430
	mov	DWORD PTR _n$5[ebp], 1
	jmp	SHORT $LN10@cff_index_
$LN9@cff_index_:
	mov	ecx, DWORD PTR _n$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$5[ebp], ecx
$LN10@cff_index_:
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _n$5[ebp]
	cmp	eax, DWORD PTR [edx+8]
	ja	$LN8@cff_index_
; Line 432
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _n$5[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	sub	ecx, 1
	mov	DWORD PTR _next_offset$1[ebp], ecx
; Line 436
	mov	edx, DWORD PTR _next_offset$1[ebp]
	cmp	edx, DWORD PTR _cur_offset$4[ebp]
	jae	SHORT $LN7@cff_index_
; Line 437
	mov	eax, DWORD PTR _cur_offset$4[ebp]
	mov	DWORD PTR _next_offset$1[ebp], eax
	jmp	SHORT $LN6@cff_index_
$LN7@cff_index_:
; Line 438
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _next_offset$1[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	jbe	SHORT $LN6@cff_index_
; Line 439
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _next_offset$1[ebp], ecx
$LN6@cff_index_:
; Line 441
	cmp	DWORD PTR _pool$[ebp], 0
	jne	SHORT $LN4@cff_index_
; Line 442
	mov	edx, DWORD PTR _org_bytes$2[ebp]
	add	edx, DWORD PTR _next_offset$1[ebp]
	mov	eax, DWORD PTR _n$5[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 443
	jmp	SHORT $LN3@cff_index_
$LN4@cff_index_:
; Line 445
	mov	edx, DWORD PTR _new_bytes$[ebp]
	add	edx, DWORD PTR _next_offset$1[ebp]
	add	edx, DWORD PTR _extra$3[ebp]
	mov	eax, DWORD PTR _n$5[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 447
	mov	edx, DWORD PTR _next_offset$1[ebp]
	cmp	edx, DWORD PTR _cur_offset$4[ebp]
	je	SHORT $LN3@cff_index_
; Line 449
	mov	eax, DWORD PTR _n$5[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _n$5[ebp]
	mov	esi, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	sub	eax, DWORD PTR [esi+edx*4-4]
	push	eax
	mov	ecx, DWORD PTR _org_bytes$2[ebp]
	add	ecx, DWORD PTR _cur_offset$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$5[ebp]
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4-4]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 450
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _n$5[ebp]
	mov	edx, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax+ecx], 0
; Line 451
	mov	edx, DWORD PTR _n$5[ebp]
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	add	ecx, 1
	mov	edx, DWORD PTR _n$5[ebp]
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 452
	mov	ecx, DWORD PTR _extra$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _extra$3[ebp], ecx
$LN3@cff_index_:
; Line 456
	mov	edx, DWORD PTR _next_offset$1[ebp]
	mov	DWORD PTR _cur_offset$4[ebp], edx
; Line 457
	jmp	$LN9@cff_index_
$LN8@cff_index_:
; Line 458
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 460
	cmp	DWORD PTR _pool$[ebp], 0
	je	SHORT $Exit$27
; Line 461
	mov	edx, DWORD PTR _pool$[ebp]
	mov	eax, DWORD PTR _new_bytes$[ebp]
	mov	DWORD PTR [edx], eax
$Exit$27:
; Line 465
	mov	eax, DWORD PTR _error$[ebp]
; Line 466
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@cff_index_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN26@cff_index_:
	DD	1
	DD	$LN25@cff_index_
$LN25@cff_index_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN24@cff_index_
$LN24@cff_index_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_index_get_pointers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv132 = -44						; size = 4
_poff$1 = -40						; size = 4
_p_end$2 = -36						; size = 4
_p$3 = -32						; size = 4
_data_size$4 = -28					; size = 4
_offsize$5 = -21					; size = 1
_memory$ = -20						; size = 4
_stream$ = -16						; size = 4
_error$ = -8						; size = 4
_idx$ = 8						; size = 4
_cff_index_load_offsets PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 320
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 321
	mov	DWORD PTR _error$[ebp], 0
; Line 322
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 323
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _memory$[ebp], eax
; Line 326
	mov	ecx, DWORD PTR _idx$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jbe	$Exit$31
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	$Exit$31
; Line 328
	mov	eax, DWORD PTR _idx$[ebp]
	mov	cl, BYTE PTR [eax+12]
	mov	BYTE PTR _offsize$5[ebp], cl
; Line 335
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	movzx	ecx, BYTE PTR _offsize$5[ebp]
	imul	eax, ecx
	mov	DWORD PTR _data_size$4[ebp], eax
; Line 339
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [ecx+24], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN23@cff_index_
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN23@cff_index_
	mov	edx, DWORD PTR _data_size$4[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN24@cff_index_
$LN23@cff_index_:
; Line 340
	jmp	$Exit$31
$LN24@cff_index_:
; Line 342
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _poff$1[ebp], edx
; Line 343
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _p$3[ebp], ecx
; Line 344
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, DWORD PTR _data_size$4[ebp]
	mov	DWORD PTR _p_end$2[ebp], edx
; Line 346
	mov	al, BYTE PTR _offsize$5[ebp]
	mov	BYTE PTR tv132[ebp], al
	cmp	BYTE PTR tv132[ebp], 1
	je	SHORT $LN20@cff_index_
	cmp	BYTE PTR tv132[ebp], 2
	je	SHORT $LN16@cff_index_
	cmp	BYTE PTR tv132[ebp], 3
	je	$LN12@cff_index_
	jmp	$LN8@cff_index_
$LN20@cff_index_:
; Line 349
	jmp	SHORT $LN19@cff_index_
$LN18@cff_index_:
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$3[ebp], ecx
	mov	edx, DWORD PTR _poff$1[ebp]
	add	edx, 4
	mov	DWORD PTR _poff$1[ebp], edx
$LN19@cff_index_:
	mov	eax, DWORD PTR _p$3[ebp]
	cmp	eax, DWORD PTR _p_end$2[ebp]
	jae	SHORT $LN17@cff_index_
; Line 350
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	mov	eax, DWORD PTR _poff$1[ebp]
	mov	DWORD PTR [eax+ecx], edx
	jmp	SHORT $LN18@cff_index_
$LN17@cff_index_:
; Line 351
	jmp	$LN21@cff_index_
$LN16@cff_index_:
; Line 354
	jmp	SHORT $LN15@cff_index_
$LN14@cff_index_:
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$3[ebp], ecx
	mov	edx, DWORD PTR _poff$1[ebp]
	add	edx, 4
	mov	DWORD PTR _poff$1[ebp], edx
$LN15@cff_index_:
	mov	eax, DWORD PTR _p$3[ebp]
	cmp	eax, DWORD PTR _p_end$2[ebp]
	jae	SHORT $LN13@cff_index_
; Line 355
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	or	ecx, edx
	mov	eax, 4
	imul	edx, eax, 0
	movzx	eax, cx
	mov	ecx, DWORD PTR _poff$1[ebp]
	mov	DWORD PTR [ecx+edx], eax
	jmp	SHORT $LN14@cff_index_
$LN13@cff_index_:
; Line 356
	jmp	$LN21@cff_index_
$LN12@cff_index_:
; Line 359
	jmp	SHORT $LN11@cff_index_
$LN10@cff_index_:
	mov	edx, DWORD PTR _p$3[ebp]
	add	edx, 3
	mov	DWORD PTR _p$3[ebp], edx
	mov	eax, DWORD PTR _poff$1[ebp]
	add	eax, 4
	mov	DWORD PTR _poff$1[ebp], eax
$LN11@cff_index_:
	mov	ecx, DWORD PTR _p$3[ebp]
	cmp	ecx, DWORD PTR _p_end$2[ebp]
	jae	SHORT $LN9@cff_index_
; Line 360
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	or	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _poff$1[ebp]
	mov	DWORD PTR [eax+ecx], edx
	jmp	SHORT $LN10@cff_index_
$LN9@cff_index_:
; Line 361
	jmp	SHORT $LN21@cff_index_
$LN8@cff_index_:
; Line 364
	jmp	SHORT $LN7@cff_index_
$LN6@cff_index_:
	mov	ecx, DWORD PTR _p$3[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$3[ebp], ecx
	mov	edx, DWORD PTR _poff$1[ebp]
	add	edx, 4
	mov	DWORD PTR _poff$1[ebp], edx
$LN7@cff_index_:
	mov	eax, DWORD PTR _p$3[ebp]
	cmp	eax, DWORD PTR _p_end$2[ebp]
	jae	SHORT $LN21@cff_index_
; Line 365
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	or	ecx, eax
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _poff$1[ebp]
	mov	DWORD PTR [edx+eax], ecx
	jmp	SHORT $LN6@cff_index_
$LN21@cff_index_:
; Line 368
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
$Exit$31:
; Line 372
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@cff_index_
$LN3@cff_index_:
; Line 373
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [ecx+24], 0
	xor	edx, edx
	jne	SHORT $LN3@cff_index_
$LN4@cff_index_:
; Line 375
	mov	eax, DWORD PTR _error$[ebp]
; Line 376
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@cff_index_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@cff_index_:
	DD	1
	DD	$LN29@cff_index_
$LN29@cff_index_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN28@cff_index_
$LN28@cff_index_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_index_load_offsets ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -8						; size = 4
_stream$2 = -4						; size = 4
_idx$ = 8						; size = 4
_cff_index_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 302
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 303
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@cff_index_
; Line 305
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _stream$2[ebp], edx
; Line 306
	mov	eax, DWORD PTR _stream$2[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$1[ebp], ecx
; Line 309
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN3@cff_index_
; Line 310
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _stream$2[ebp]
	push	ecx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
$LN3@cff_index_:
; Line 312
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _memory$1[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [edx+24], 0
	xor	eax, eax
	jne	SHORT $LN3@cff_index_
; Line 313
	push	32					; 00000020H
	push	0
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN6@cff_index_:
; Line 315
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_index_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$1 = -28						; size = 4
_offsize$2 = -21					; size = 1
_count$ = -20						; size = 2
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_idx$ = 8						; size = 4
_stream$ = 12						; size = 4
_load$ = 16						; size = 1
_cff_index_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 229
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 231
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 235
	push	32					; 00000020H
	push	0
	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 237
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 238
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 240
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	WORD PTR _count$[ebp], ax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$21
	movzx	ecx, WORD PTR _count$[ebp]
	test	ecx, ecx
	jle	$Exit$21
; Line 248
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadChar
	add	esp, 8
	mov	BYTE PTR _offsize$2[ebp], al
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@cff_index_
; Line 249
	jmp	$Exit$21
$LN14@cff_index_:
; Line 251
	movzx	ecx, BYTE PTR _offsize$2[ebp]
	cmp	ecx, 1
	jl	SHORT $LN12@cff_index_
	movzx	edx, BYTE PTR _offsize$2[ebp]
	cmp	edx, 4
	jle	SHORT $LN13@cff_index_
$LN12@cff_index_:
; Line 253
	push	OFFSET $SG10275
	push	253					; 000000fdH
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 254
	jmp	$Exit$21
$LN13@cff_index_:
; Line 257
	movzx	eax, WORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 258
	mov	edx, DWORD PTR _idx$[ebp]
	mov	al, BYTE PTR _offsize$2[ebp]
	mov	BYTE PTR [edx+12], al
; Line 259
	movzx	ecx, WORD PTR _count$[ebp]
	add	ecx, 1
	movzx	edx, BYTE PTR _offsize$2[ebp]
	imul	ecx, edx
	mov	DWORD PTR _size$1[ebp], ecx
; Line 261
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _size$1[ebp]
	lea	eax, DWORD PTR [ecx+edx+3]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 263
	movzx	edx, BYTE PTR _offsize$2[ebp]
	mov	eax, DWORD PTR _size$1[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@cff_index_
; Line 264
	jmp	$Exit$21
$LN11@cff_index_:
; Line 266
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	call	_cff_index_read_offset
	add	esp, 8
	mov	DWORD PTR _size$1[ebp], eax
; Line 267
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@cff_index_
; Line 268
	jmp	SHORT $Exit$21
$LN10@cff_index_:
; Line 270
	cmp	DWORD PTR _size$1[ebp], 0
	jne	SHORT $LN9@cff_index_
; Line 272
	push	OFFSET $SG10281
	push	272					; 00000110H
	push	8
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 273
	jmp	SHORT $Exit$21
$LN9@cff_index_:
; Line 276
	mov	ecx, DWORD PTR _size$1[ebp]
	sub	ecx, 1
	mov	DWORD PTR _size$1[ebp], ecx
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _size$1[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 278
	movzx	ecx, BYTE PTR _load$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@cff_index_
; Line 281
	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	mov	eax, DWORD PTR _size$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@cff_index_
; Line 282
	jmp	SHORT $Exit$21
$LN7@cff_index_:
; Line 284
	jmp	SHORT $Exit$21
$LN8@cff_index_:
; Line 287
	mov	edx, DWORD PTR _size$1[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$Exit$21:
; Line 293
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@cff_index_
$LN3@cff_index_:
; Line 294
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [ecx+24], 0
	xor	edx, edx
	jne	SHORT $LN3@cff_index_
$LN4@cff_index_:
; Line 296
	mov	eax, DWORD PTR _error$[ebp]
; Line 297
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@cff_index_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@cff_index_:
	DD	1
	DD	$LN19@cff_index_
$LN19@cff_index_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@cff_index_
$LN18@cff_index_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_index_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nn$1 = -28						; size = 4
_result$ = -24						; size = 4
_tmp$ = -16						; size = 4
_stream$ = -8						; size = 4
_error$ = -4						; size = 4
_idx$ = 8						; size = 4
_errorp$ = 12						; size = 4
_cff_index_read_offset PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 204
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 206
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 208
	mov	DWORD PTR _result$[ebp], 0
; Line 211
	mov	edx, DWORD PTR _idx$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN4@cff_index_
; Line 216
	mov	DWORD PTR _nn$1[ebp], 0
	jmp	SHORT $LN3@cff_index_
$LN2@cff_index_:
	mov	eax, DWORD PTR _nn$1[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$1[ebp], eax
$LN3@cff_index_:
	mov	ecx, DWORD PTR _idx$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	cmp	DWORD PTR _nn$1[ebp], edx
	jge	SHORT $LN4@cff_index_
; Line 217
	mov	eax, DWORD PTR _result$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _nn$1[ebp]
	movzx	edx, BYTE PTR _tmp$[ebp+ecx]
	or	eax, edx
	mov	DWORD PTR _result$[ebp], eax
	jmp	SHORT $LN2@cff_index_
$LN4@cff_index_:
; Line 220
	mov	eax, DWORD PTR _errorp$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 221
	mov	eax, DWORD PTR _result$[ebp]
; Line 222
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@cff_index_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@cff_index_:
	DD	1
	DD	$LN8@cff_index_
$LN8@cff_index_:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN7@cff_index_
$LN7@cff_index_:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_cff_index_read_offset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv78 = -20						; size = 4
tv73 = -16						; size = 4
_error$ = -12						; size = 4
_data$ = -8						; size = 4
_dict$ = -4						; size = 4
_parser$ = 8						; size = 4
_cff_parse_cid_ros PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 634
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 635
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	DWORD PTR _dict$[ebp], ecx
; Line 636
	mov	edx, DWORD PTR _parser$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _data$[ebp], edx
; Line 640
	mov	DWORD PTR _error$[ebp], 161		; 000000a1H
; Line 642
	mov	eax, DWORD PTR _parser$[ebp]
	add	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+404], eax
	jb	$LN15@cff_parse_
; Line 644
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_cff_parse_num
	add	esp, 4
	mov	edx, DWORD PTR _dict$[ebp]
	mov	DWORD PTR [edx+132], eax
; Line 645
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 4
	mov	DWORD PTR _data$[ebp], ecx
	mov	edx, DWORD PTR tv78[ebp]
	push	edx
	call	_cff_parse_num
	add	esp, 4
	mov	ecx, DWORD PTR _dict$[ebp]
	mov	DWORD PTR [ecx+136], eax
; Line 646
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 30					; 0000001eH
	jne	SHORT $LN14@cff_parse_
$LN13@cff_parse_:
; Line 647
	mov	edx, 4
	imul	eax, edx, 50
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN12@cff_parse_
	push	OFFSET $SG9748
	call	_FT_Message
	add	esp, 4
$LN12@cff_parse_:
	xor	ecx, ecx
	jne	SHORT $LN13@cff_parse_
$LN14@cff_parse_:
; Line 648
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_cff_parse_num
	add	esp, 4
	mov	ecx, DWORD PTR _dict$[ebp]
	mov	DWORD PTR [ecx+140], eax
; Line 649
	mov	edx, DWORD PTR _dict$[ebp]
	cmp	DWORD PTR [edx+140], 0
	jge	SHORT $LN9@cff_parse_
$LN8@cff_parse_:
; Line 651
	mov	eax, 4
	imul	ecx, eax, 50
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN7@cff_parse_
	mov	edx, DWORD PTR _dict$[ebp]
	mov	eax, DWORD PTR [edx+140]
	push	eax
	push	OFFSET $SG9754
	call	_FT_Message
	add	esp, 8
$LN7@cff_parse_:
	xor	ecx, ecx
	jne	SHORT $LN8@cff_parse_
$LN9@cff_parse_:
; Line 652
	mov	DWORD PTR _error$[ebp], 0
$LN4@cff_parse_:
; Line 657
	mov	edx, 4
	imul	eax, edx, 50
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN3@cff_parse_
	mov	ecx, DWORD PTR _dict$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	mov	eax, DWORD PTR _dict$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	mov	eax, DWORD PTR [edx+132]
	push	eax
	push	OFFSET $SG9759
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN3@cff_parse_:
	xor	ecx, ecx
	jne	SHORT $LN4@cff_parse_
$LN15@cff_parse_:
; Line 660
	mov	eax, DWORD PTR _error$[ebp]
; Line 661
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_parse_cid_ros ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -16						; size = 4
_error$ = -12						; size = 4
_data$ = -8						; size = 4
_dict$ = -4						; size = 4
_parser$ = 8						; size = 4
_cff_parse_private_dict PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 610
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 611
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	DWORD PTR _dict$[ebp], ecx
; Line 612
	mov	edx, DWORD PTR _parser$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _data$[ebp], edx
; Line 616
	mov	DWORD PTR _error$[ebp], 161		; 000000a1H
; Line 618
	mov	eax, DWORD PTR _parser$[ebp]
	add	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+404], eax
	jb	SHORT $LN5@cff_parse_
; Line 620
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv73[ebp], edx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_cff_parse_num
	add	esp, 4
	mov	edx, DWORD PTR _dict$[ebp]
	mov	DWORD PTR [edx+120], eax
; Line 621
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_cff_parse_num
	add	esp, 4
	mov	ecx, DWORD PTR _dict$[ebp]
	mov	DWORD PTR [ecx+116], eax
$LN4@cff_parse_:
; Line 623
	mov	edx, 4
	imul	eax, edx, 50
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN3@cff_parse_
	mov	ecx, DWORD PTR _dict$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	mov	eax, DWORD PTR _dict$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	push	OFFSET $SG9731
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN3@cff_parse_:
	xor	edx, edx
	jne	SHORT $LN4@cff_parse_
; Line 625
	mov	DWORD PTR _error$[ebp], 0
$LN5@cff_parse_:
; Line 628
	mov	eax, DWORD PTR _error$[ebp]
; Line 629
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_parse_private_dict ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv89 = -28						; size = 4
tv82 = -24						; size = 4
tv75 = -20						; size = 4
_error$ = -16						; size = 4
_data$ = -12						; size = 4
_bbox$ = -8						; size = 4
_dict$ = -4						; size = 4
_parser$ = 8						; size = 4
_cff_parse_font_bbox PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 580
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 581
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	DWORD PTR _dict$[ebp], ecx
; Line 582
	mov	edx, DWORD PTR _dict$[ebp]
	add	edx, 84					; 00000054H
	mov	DWORD PTR _bbox$[ebp], edx
; Line 583
	mov	eax, DWORD PTR _parser$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _data$[ebp], eax
; Line 587
	mov	DWORD PTR _error$[ebp], 161		; 000000a1H
; Line 589
	mov	ecx, DWORD PTR _parser$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [edx+404], ecx
	jb	$LN5@cff_parse_
; Line 591
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 4
	mov	DWORD PTR _data$[ebp], ecx
	mov	edx, DWORD PTR tv75[ebp]
	push	edx
	call	_cff_parse_fixed
	add	esp, 4
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	mov	ecx, DWORD PTR _bbox$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 592
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv82[ebp], edx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
	mov	ecx, DWORD PTR tv82[ebp]
	push	ecx
	call	_cff_parse_fixed
	add	esp, 4
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	mov	edx, DWORD PTR _bbox$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 593
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 4
	mov	DWORD PTR _data$[ebp], ecx
	mov	edx, DWORD PTR tv89[ebp]
	push	edx
	call	_cff_parse_fixed
	add	esp, 4
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	mov	ecx, DWORD PTR _bbox$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 594
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_cff_parse_fixed
	add	esp, 4
	push	eax
	call	_FT_RoundFix
	add	esp, 4
	mov	ecx, DWORD PTR _bbox$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 595
	mov	DWORD PTR _error$[ebp], 0
$LN4@cff_parse_:
; Line 601
	mov	edx, 4
	imul	eax, edx, 50
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN3@cff_parse_
	mov	ecx, DWORD PTR _bbox$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cdq
	and	edx, 65535				; 0000ffffH
	add	eax, edx
	sar	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _bbox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cdq
	and	edx, 65535				; 0000ffffH
	add	eax, edx
	sar	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _bbox$[ebp]
	mov	eax, DWORD PTR [eax+4]
	cdq
	and	edx, 65535				; 0000ffffH
	add	eax, edx
	sar	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _bbox$[ebp]
	mov	eax, DWORD PTR [ecx]
	cdq
	and	edx, 65535				; 0000ffffH
	add	eax, edx
	sar	eax, 16					; 00000010H
	push	eax
	push	OFFSET $SG9717
	call	_FT_Message
	add	esp, 20					; 00000014H
$LN3@cff_parse_:
	xor	edx, edx
	jne	SHORT $LN4@cff_parse_
$LN5@cff_parse_:
; Line 604
	mov	eax, DWORD PTR _error$[ebp]
; Line 605
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_parse_font_bbox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv293 = -80						; size = 4
tv286 = -76						; size = 4
tv279 = -72						; size = 4
tv272 = -68						; size = 4
tv265 = -64						; size = 4
tv258 = -60						; size = 4
tv149 = -56						; size = 4
tv143 = -52						; size = 4
tv137 = -48						; size = 4
tv131 = -44						; size = 4
tv78 = -40						; size = 4
_scaling$1 = -32					; size = 4
_error$ = -24						; size = 4
_data$ = -20						; size = 4
_upm$ = -16						; size = 4
_offset$ = -12						; size = 4
_matrix$ = -8						; size = 4
_dict$ = -4						; size = 4
_parser$ = 8						; size = 4
_cff_parse_font_matrix PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 508
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 509
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	DWORD PTR _dict$[ebp], ecx
; Line 510
	mov	edx, DWORD PTR _dict$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _matrix$[ebp], edx
; Line 511
	mov	eax, DWORD PTR _dict$[ebp]
	add	eax, 72					; 00000048H
	mov	DWORD PTR _offset$[ebp], eax
; Line 512
	mov	ecx, DWORD PTR _dict$[ebp]
	add	ecx, 68					; 00000044H
	mov	DWORD PTR _upm$[ebp], ecx
; Line 513
	mov	edx, DWORD PTR _parser$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _data$[ebp], edx
; Line 514
	mov	DWORD PTR _error$[ebp], 161		; 000000a1H
; Line 517
	mov	eax, DWORD PTR _parser$[ebp]
	add	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [ecx+404], eax
	jb	$Exit$17
; Line 522
	mov	DWORD PTR _error$[ebp], 0
; Line 524
	mov	edx, DWORD PTR _dict$[ebp]
	mov	BYTE PTR [edx+64], 1
; Line 532
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 4
	mov	DWORD PTR _data$[ebp], ecx
	lea	edx, DWORD PTR _scaling$1[ebp]
	push	edx
	mov	eax, DWORD PTR tv78[ebp]
	push	eax
	call	_cff_parse_fixed_dynamic
	add	esp, 8
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 534
	mov	edx, DWORD PTR _scaling$1[ebp]
	neg	edx
	mov	DWORD PTR _scaling$1[ebp], edx
; Line 536
	js	SHORT $LN9@cff_parse_
	cmp	DWORD PTR _scaling$1[ebp], 9
	jle	SHORT $LN10@cff_parse_
$LN9@cff_parse_:
; Line 543
	mov	eax, 4
	imul	ecx, eax, 50
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN5@cff_parse_
	mov	edx, DWORD PTR _scaling$1[ebp]
	push	edx
	push	OFFSET $SG9690
	call	_FT_Message
	add	esp, 8
$LN5@cff_parse_:
	xor	eax, eax
	jne	SHORT $LN9@cff_parse_
; Line 545
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [ecx], 65536			; 00010000H
; Line 546
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 547
	mov	eax, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 548
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [ecx+12], 65536		; 00010000H
; Line 549
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx], 0
; Line 550
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 551
	mov	ecx, DWORD PTR _upm$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 553
	jmp	$Exit$17
$LN10@cff_parse_:
; Line 556
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv131[ebp], edx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
	mov	ecx, DWORD PTR _scaling$1[ebp]
	push	ecx
	mov	edx, DWORD PTR tv131[ebp]
	push	edx
	call	_cff_parse_fixed_scaled
	add	esp, 8
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 557
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv137[ebp], edx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
	mov	ecx, DWORD PTR _scaling$1[ebp]
	push	ecx
	mov	edx, DWORD PTR tv137[ebp]
	push	edx
	call	_cff_parse_fixed_scaled
	add	esp, 8
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 558
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv143[ebp], edx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
	mov	ecx, DWORD PTR _scaling$1[ebp]
	push	ecx
	mov	edx, DWORD PTR tv143[ebp]
	push	edx
	call	_cff_parse_fixed_scaled
	add	esp, 8
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 559
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv149[ebp], edx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
	mov	ecx, DWORD PTR _scaling$1[ebp]
	push	ecx
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	call	_cff_parse_fixed_scaled
	add	esp, 8
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 560
	mov	edx, DWORD PTR _scaling$1[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_cff_parse_fixed_scaled
	add	esp, 8
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 562
	mov	edx, DWORD PTR _upm$[ebp]
	mov	eax, DWORD PTR _scaling$1[ebp]
	mov	ecx, DWORD PTR _power_tens[eax*4]
	mov	DWORD PTR [edx], ecx
$LN4@cff_parse_:
; Line 570
	mov	edx, 4
	imul	eax, edx, 50
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	$LN1@cff_parse_
	mov	ecx, DWORD PTR _offset$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _upm$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv258[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv258[ebp]
	mov	ecx, DWORD PTR tv258[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	divsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _offset$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _upm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv265[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv265[ebp]
	mov	edx, DWORD PTR tv265[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	divsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _matrix$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _upm$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv272[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv272[ebp]
	mov	eax, DWORD PTR tv272[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	divsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _matrix$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _upm$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv279[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv279[ebp]
	mov	ecx, DWORD PTR tv279[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	divsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _matrix$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _upm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv286[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv286[ebp]
	mov	edx, DWORD PTR tv286[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	divsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _matrix$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _upm$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv293[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv293[ebp]
	mov	eax, DWORD PTR tv293[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	divsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG9702
	call	_FT_Message
	add	esp, 52					; 00000034H
$LN1@cff_parse_:
	xor	ecx, ecx
	jne	$LN4@cff_parse_
$Exit$17:
; Line 574
	mov	eax, DWORD PTR _error$[ebp]
; Line 575
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@cff_parse_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@cff_parse_:
	DD	1
	DD	$LN15@cff_parse_
$LN15@cff_parse_:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN14@cff_parse_
$LN14@cff_parse_:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_cff_parse_font_matrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_integer_length$1 = -8					; size = 4
_number$2 = -4						; size = 4
_d$ = 8							; size = 4
_scaling$ = 12						; size = 4
_cff_parse_fixed_dynamic PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 467
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN14@cff_parse_:
; Line 468
	cmp	DWORD PTR _scaling$[ebp], 0
	jne	SHORT $LN13@cff_parse_
	push	OFFSET $SG9655
	push	468					; 000001d4H
	push	OFFSET $SG9656
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN13@cff_parse_:
	xor	eax, eax
	jne	SHORT $LN14@cff_parse_
; Line 470
	mov	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 30					; 0000001eH
	jne	SHORT $LN10@cff_parse_
; Line 471
	mov	ecx, DWORD PTR _scaling$[ebp]
	push	ecx
	push	0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_cff_parse_real
	add	esp, 16					; 00000010H
	jmp	$LN15@cff_parse_
; Line 472
	jmp	$LN15@cff_parse_
$LN10@cff_parse_:
; Line 478
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_cff_parse_integer
	add	esp, 8
	mov	DWORD PTR _number$2[ebp], eax
; Line 480
	cmp	DWORD PTR _number$2[ebp], 32767		; 00007fffH
	jle	$LN8@cff_parse_
; Line 482
	mov	DWORD PTR _integer_length$1[ebp], 5
	jmp	SHORT $LN7@cff_parse_
$LN6@cff_parse_:
	mov	ecx, DWORD PTR _integer_length$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _integer_length$1[ebp], ecx
$LN7@cff_parse_:
	cmp	DWORD PTR _integer_length$1[ebp], 10	; 0000000aH
	jge	SHORT $LN5@cff_parse_
; Line 483
	mov	edx, DWORD PTR _integer_length$1[ebp]
	mov	eax, DWORD PTR _number$2[ebp]
	cmp	eax, DWORD PTR _power_tens[edx*4]
	jge	SHORT $LN4@cff_parse_
; Line 484
	jmp	SHORT $LN5@cff_parse_
$LN4@cff_parse_:
; Line 486
	jmp	SHORT $LN6@cff_parse_
$LN5@cff_parse_:
	mov	ecx, DWORD PTR _integer_length$1[ebp]
	mov	eax, DWORD PTR _number$2[ebp]
	cdq
	idiv	DWORD PTR _power_tens[ecx*4-20]
	cmp	eax, 32767				; 00007fffH
	jle	SHORT $LN3@cff_parse_
; Line 488
	mov	edx, DWORD PTR _integer_length$1[ebp]
	sub	edx, 4
	mov	eax, DWORD PTR _scaling$[ebp]
	mov	DWORD PTR [eax], edx
; Line 489
	mov	ecx, DWORD PTR _integer_length$1[ebp]
	mov	edx, DWORD PTR _power_tens[ecx*4-16]
	push	edx
	mov	eax, DWORD PTR _number$2[ebp]
	push	eax
	call	_FT_DivFix
	add	esp, 8
	jmp	SHORT $LN15@cff_parse_
; Line 491
	jmp	SHORT $LN2@cff_parse_
$LN3@cff_parse_:
; Line 493
	mov	ecx, DWORD PTR _integer_length$1[ebp]
	sub	ecx, 5
	mov	edx, DWORD PTR _scaling$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 494
	mov	eax, DWORD PTR _integer_length$1[ebp]
	mov	ecx, DWORD PTR _power_tens[eax*4-20]
	push	ecx
	mov	edx, DWORD PTR _number$2[ebp]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	jmp	SHORT $LN15@cff_parse_
$LN2@cff_parse_:
; Line 497
	jmp	SHORT $LN15@cff_parse_
$LN8@cff_parse_:
; Line 499
	mov	eax, DWORD PTR _scaling$[ebp]
	mov	DWORD PTR [eax], 0
; Line 500
	mov	eax, DWORD PTR _number$2[ebp]
	shl	eax, 16					; 00000010H
$LN15@cff_parse_:
; Line 503
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_parse_fixed_dynamic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_d$ = 8							; size = 4
_scaling$ = 12						; size = 4
_cff_parse_fixed_scaled PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 456
	push	ebp
	mov	ebp, esp
; Line 457
	mov	eax, DWORD PTR _scaling$[ebp]
	push	eax
	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	call	_do_fixed
	add	esp, 8
; Line 458
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cff_parse_fixed_scaled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_d$ = 8							; size = 4
_cff_parse_fixed PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 446
	push	ebp
	mov	ebp, esp
; Line 447
	push	0
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	call	_do_fixed
	add	esp, 8
; Line 448
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cff_parse_fixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$1 = -4						; size = 4
_d$ = 8							; size = 4
_scaling$ = 12						; size = 4
_do_fixed PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 412
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 413
	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 30					; 0000001eH
	jne	SHORT $LN10@do_fixed
; Line 414
	push	0
	mov	eax, DWORD PTR _scaling$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_cff_parse_real
	add	esp, 16					; 00000010H
	jmp	$LN11@do_fixed
; Line 415
	jmp	$LN11@do_fixed
$LN10@do_fixed:
; Line 417
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_cff_parse_integer
	add	esp, 8
	mov	DWORD PTR _val$1[ebp], eax
; Line 420
	cmp	DWORD PTR _scaling$[ebp], 0
	je	SHORT $LN8@do_fixed
; Line 421
	mov	eax, DWORD PTR _scaling$[ebp]
	mov	ecx, DWORD PTR _val$1[ebp]
	imul	ecx, DWORD PTR _power_tens[eax*4]
	mov	DWORD PTR _val$1[ebp], ecx
$LN8@do_fixed:
; Line 423
	cmp	DWORD PTR _val$1[ebp], 32767		; 00007fffH
	jle	SHORT $LN7@do_fixed
; Line 425
	mov	DWORD PTR _val$1[ebp], 2147483647	; 7fffffffH
; Line 426
	jmp	SHORT $Overflow$13
	jmp	SHORT $LN6@do_fixed
$LN7@do_fixed:
; Line 428
	cmp	DWORD PTR _val$1[ebp], -32767		; ffff8001H
	jge	SHORT $LN6@do_fixed
; Line 430
	mov	DWORD PTR _val$1[ebp], -2147483647	; 80000001H
; Line 431
	jmp	SHORT $Overflow$13
$LN6@do_fixed:
; Line 434
	mov	eax, DWORD PTR _val$1[ebp]
	shl	eax, 16					; 00000010H
	jmp	SHORT $LN11@do_fixed
$Overflow$13:
; Line 437
	mov	edx, 4
	imul	eax, edx, 50
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN3@do_fixed
	push	OFFSET $SG9634
	call	_FT_Message
	add	esp, 4
$LN3@do_fixed:
	xor	ecx, ecx
	jne	SHORT $Overflow$13
; Line 438
	mov	eax, DWORD PTR _val$1[ebp]
$LN11@do_fixed:
; Line 440
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_do_fixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv84 = -4						; size = 4
_d$ = 8							; size = 4
_cff_parse_num PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 402
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 404
	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 30					; 0000001eH
	jne	SHORT $LN3@cff_parse_
	push	0
	push	0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_cff_parse_real
	add	esp, 16					; 00000010H
	sar	eax, 16					; 00000010H
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN4@cff_parse_
$LN3@cff_parse_:
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_cff_parse_integer
	add	esp, 8
	mov	DWORD PTR tv84[ebp], eax
$LN4@cff_parse_:
	mov	eax, DWORD PTR tv84[ebp]
; Line 405
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_parse_num ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv168 = -60						; size = 4
_shift$1 = -56						; size = 4
_new_fraction_length$2 = -52				; size = 4
_fraction_length$ = -48					; size = 4
_integer_length$ = -44					; size = 4
_exponent_add$ = -40					; size = 4
_have_overflow$ = -36					; size = 4
_exponent_sign$ = -32					; size = 4
_sign$ = -28						; size = 4
_exponent$ = -24					; size = 4
_number$ = -20						; size = 4
_result$ = -16						; size = 4
_phase$ = -12						; size = 4
_nib$ = -8						; size = 4
_p$ = -4						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_power_ten$ = 16					; size = 4
_scaling$ = 20						; size = 4
_cff_parse_real PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 131
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 136
	mov	DWORD PTR _sign$[ebp], 0
	mov	DWORD PTR _exponent_sign$[ebp], 0
	mov	DWORD PTR _have_overflow$[ebp], 0
; Line 140
	cmp	DWORD PTR _scaling$[ebp], 0
	je	SHORT $LN70@cff_parse_
; Line 141
	mov	ecx, DWORD PTR _scaling$[ebp]
	mov	DWORD PTR [ecx], 0
$LN70@cff_parse_:
; Line 143
	mov	DWORD PTR _result$[ebp], 0
; Line 145
	mov	DWORD PTR _number$[ebp], 0
; Line 146
	mov	DWORD PTR _exponent$[ebp], 0
; Line 148
	mov	DWORD PTR _exponent_add$[ebp], 0
; Line 149
	mov	DWORD PTR _integer_length$[ebp], 0
; Line 150
	mov	DWORD PTR _fraction_length$[ebp], 0
; Line 153
	mov	DWORD PTR _phase$[ebp], 4
$LN69@cff_parse_:
; Line 159
	cmp	DWORD PTR _phase$[ebp], 0
	je	SHORT $LN67@cff_parse_
; Line 161
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 164
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN67@cff_parse_
; Line 165
	jmp	$Bad$75
$LN67@cff_parse_:
; Line 169
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR _phase$[ebp]
	sar	edx, cl
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _nib$[ebp], edx
; Line 170
	mov	eax, 4
	sub	eax, DWORD PTR _phase$[ebp]
	mov	DWORD PTR _phase$[ebp], eax
; Line 172
	cmp	DWORD PTR _nib$[ebp], 14		; 0000000eH
	jne	SHORT $LN65@cff_parse_
; Line 173
	mov	DWORD PTR _sign$[ebp], 1
	jmp	SHORT $LN64@cff_parse_
$LN65@cff_parse_:
; Line 174
	cmp	DWORD PTR _nib$[ebp], 9
	jbe	SHORT $LN63@cff_parse_
; Line 175
	jmp	SHORT $LN68@cff_parse_
; Line 176
	jmp	SHORT $LN64@cff_parse_
$LN63@cff_parse_:
; Line 179
	cmp	DWORD PTR _number$[ebp], 214748364	; 0cccccccH
	jl	SHORT $LN61@cff_parse_
; Line 180
	mov	ecx, DWORD PTR _exponent_add$[ebp]
	add	ecx, 1
	mov	DWORD PTR _exponent_add$[ebp], ecx
	jmp	SHORT $LN64@cff_parse_
$LN61@cff_parse_:
; Line 182
	cmp	DWORD PTR _nib$[ebp], 0
	jne	SHORT $LN58@cff_parse_
	cmp	DWORD PTR _number$[ebp], 0
	je	SHORT $LN64@cff_parse_
$LN58@cff_parse_:
; Line 184
	mov	edx, DWORD PTR _integer_length$[ebp]
	add	edx, 1
	mov	DWORD PTR _integer_length$[ebp], edx
; Line 185
	imul	eax, DWORD PTR _number$[ebp], 10
	add	eax, DWORD PTR _nib$[ebp]
	mov	DWORD PTR _number$[ebp], eax
$LN64@cff_parse_:
; Line 188
	jmp	$LN69@cff_parse_
$LN68@cff_parse_:
; Line 191
	cmp	DWORD PTR _nib$[ebp], 10		; 0000000aH
	jne	$LN57@cff_parse_
$LN56@cff_parse_:
; Line 196
	cmp	DWORD PTR _phase$[ebp], 0
	je	SHORT $LN54@cff_parse_
; Line 198
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 201
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN54@cff_parse_
; Line 202
	jmp	$Bad$75
$LN54@cff_parse_:
; Line 206
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _phase$[ebp]
	sar	eax, cl
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _nib$[ebp], eax
; Line 207
	mov	ecx, 4
	sub	ecx, DWORD PTR _phase$[ebp]
	mov	DWORD PTR _phase$[ebp], ecx
; Line 208
	cmp	DWORD PTR _nib$[ebp], 10		; 0000000aH
	jb	SHORT $LN52@cff_parse_
; Line 209
	jmp	SHORT $LN57@cff_parse_
$LN52@cff_parse_:
; Line 212
	cmp	DWORD PTR _nib$[ebp], 0
	jne	SHORT $LN51@cff_parse_
	cmp	DWORD PTR _number$[ebp], 0
	jne	SHORT $LN51@cff_parse_
; Line 213
	mov	edx, DWORD PTR _exponent_add$[ebp]
	sub	edx, 1
	mov	DWORD PTR _exponent_add$[ebp], edx
	jmp	SHORT $LN50@cff_parse_
$LN51@cff_parse_:
; Line 215
	cmp	DWORD PTR _number$[ebp], 214748364	; 0cccccccH
	jge	SHORT $LN50@cff_parse_
	cmp	DWORD PTR _fraction_length$[ebp], 9
	jge	SHORT $LN50@cff_parse_
; Line 217
	mov	eax, DWORD PTR _fraction_length$[ebp]
	add	eax, 1
	mov	DWORD PTR _fraction_length$[ebp], eax
; Line 218
	imul	ecx, DWORD PTR _number$[ebp], 10
	add	ecx, DWORD PTR _nib$[ebp]
	mov	DWORD PTR _number$[ebp], ecx
$LN50@cff_parse_:
; Line 220
	jmp	$LN56@cff_parse_
$LN57@cff_parse_:
; Line 223
	cmp	DWORD PTR _nib$[ebp], 12		; 0000000cH
	jne	SHORT $LN48@cff_parse_
; Line 225
	mov	DWORD PTR _exponent_sign$[ebp], 1
; Line 226
	mov	DWORD PTR _nib$[ebp], 11		; 0000000bH
$LN48@cff_parse_:
; Line 229
	cmp	DWORD PTR _nib$[ebp], 11		; 0000000bH
	jne	SHORT $LN47@cff_parse_
$LN46@cff_parse_:
; Line 235
	cmp	DWORD PTR _phase$[ebp], 0
	je	SHORT $LN44@cff_parse_
; Line 237
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 240
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN44@cff_parse_
; Line 241
	jmp	$Bad$75
$LN44@cff_parse_:
; Line 245
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR _phase$[ebp]
	sar	edx, cl
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _nib$[ebp], edx
; Line 246
	mov	eax, 4
	sub	eax, DWORD PTR _phase$[ebp]
	mov	DWORD PTR _phase$[ebp], eax
; Line 247
	cmp	DWORD PTR _nib$[ebp], 10		; 0000000aH
	jb	SHORT $LN42@cff_parse_
; Line 248
	jmp	SHORT $LN45@cff_parse_
$LN42@cff_parse_:
; Line 251
	cmp	DWORD PTR _exponent$[ebp], 1000		; 000003e8H
	jle	SHORT $LN41@cff_parse_
; Line 252
	mov	DWORD PTR _have_overflow$[ebp], 1
; Line 253
	jmp	SHORT $LN40@cff_parse_
$LN41@cff_parse_:
; Line 254
	imul	ecx, DWORD PTR _exponent$[ebp], 10
	add	ecx, DWORD PTR _nib$[ebp]
	mov	DWORD PTR _exponent$[ebp], ecx
$LN40@cff_parse_:
; Line 255
	jmp	SHORT $LN46@cff_parse_
$LN45@cff_parse_:
; Line 257
	cmp	DWORD PTR _exponent_sign$[ebp], 0
	je	SHORT $LN47@cff_parse_
; Line 258
	mov	edx, DWORD PTR _exponent$[ebp]
	neg	edx
	mov	DWORD PTR _exponent$[ebp], edx
$LN47@cff_parse_:
; Line 261
	cmp	DWORD PTR _number$[ebp], 0
	jne	SHORT $LN38@cff_parse_
; Line 262
	jmp	$Exit$76
$LN38@cff_parse_:
; Line 264
	cmp	DWORD PTR _have_overflow$[ebp], 0
	je	SHORT $LN37@cff_parse_
; Line 266
	cmp	DWORD PTR _exponent_sign$[ebp], 0
	je	SHORT $LN36@cff_parse_
; Line 267
	jmp	$Underflow$77
; Line 268
	jmp	SHORT $LN37@cff_parse_
$LN36@cff_parse_:
; Line 269
	jmp	$Overflow$78
$LN37@cff_parse_:
; Line 273
	mov	eax, DWORD PTR _power_ten$[ebp]
	add	eax, DWORD PTR _exponent_add$[ebp]
	add	eax, DWORD PTR _exponent$[ebp]
	mov	DWORD PTR _exponent$[ebp], eax
; Line 275
	cmp	DWORD PTR _scaling$[ebp], 0
	je	$LN34@cff_parse_
; Line 278
	mov	ecx, DWORD PTR _fraction_length$[ebp]
	add	ecx, DWORD PTR _integer_length$[ebp]
	mov	DWORD PTR _fraction_length$[ebp], ecx
; Line 279
	mov	edx, DWORD PTR _exponent$[ebp]
	add	edx, DWORD PTR _integer_length$[ebp]
	mov	DWORD PTR _exponent$[ebp], edx
; Line 281
	cmp	DWORD PTR _fraction_length$[ebp], 5
	jg	$LN33@cff_parse_
; Line 283
	cmp	DWORD PTR _number$[ebp], 32767		; 00007fffH
	jle	SHORT $LN32@cff_parse_
; Line 285
	push	10					; 0000000aH
	mov	eax, DWORD PTR _number$[ebp]
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _exponent$[ebp]
	sub	ecx, DWORD PTR _fraction_length$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _scaling$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 288
	jmp	$LN31@cff_parse_
$LN32@cff_parse_:
; Line 290
	cmp	DWORD PTR _exponent$[ebp], 0
	jle	SHORT $LN30@cff_parse_
; Line 296
	cmp	DWORD PTR _exponent$[ebp], 5
	jge	SHORT $LN73@cff_parse_
	mov	eax, DWORD PTR _exponent$[ebp]
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN74@cff_parse_
$LN73@cff_parse_:
	mov	DWORD PTR tv168[ebp], 5
$LN74@cff_parse_:
	mov	ecx, DWORD PTR tv168[ebp]
	mov	DWORD PTR _new_fraction_length$2[ebp], ecx
; Line 297
	mov	edx, DWORD PTR _new_fraction_length$2[ebp]
	sub	edx, DWORD PTR _fraction_length$[ebp]
	mov	DWORD PTR _shift$1[ebp], edx
; Line 299
	cmp	DWORD PTR _shift$1[ebp], 0
	jle	SHORT $LN29@cff_parse_
; Line 301
	mov	eax, DWORD PTR _exponent$[ebp]
	sub	eax, DWORD PTR _new_fraction_length$2[ebp]
	mov	DWORD PTR _exponent$[ebp], eax
; Line 302
	mov	ecx, DWORD PTR _shift$1[ebp]
	mov	edx, DWORD PTR _number$[ebp]
	imul	edx, DWORD PTR _power_tens[ecx*4]
	mov	DWORD PTR _number$[ebp], edx
; Line 303
	cmp	DWORD PTR _number$[ebp], 32767		; 00007fffH
	jle	SHORT $LN28@cff_parse_
; Line 305
	mov	eax, DWORD PTR _number$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _number$[ebp], eax
; Line 306
	mov	edx, DWORD PTR _exponent$[ebp]
	add	edx, 1
	mov	DWORD PTR _exponent$[ebp], edx
$LN28@cff_parse_:
; Line 309
	jmp	SHORT $LN27@cff_parse_
$LN29@cff_parse_:
; Line 310
	mov	eax, DWORD PTR _exponent$[ebp]
	sub	eax, DWORD PTR _fraction_length$[ebp]
	mov	DWORD PTR _exponent$[ebp], eax
$LN27@cff_parse_:
; Line 312
	jmp	SHORT $LN26@cff_parse_
$LN30@cff_parse_:
; Line 313
	mov	ecx, DWORD PTR _exponent$[ebp]
	sub	ecx, DWORD PTR _fraction_length$[ebp]
	mov	DWORD PTR _exponent$[ebp], ecx
$LN26@cff_parse_:
; Line 315
	mov	edx, DWORD PTR _number$[ebp]
	shl	edx, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], edx
; Line 316
	mov	eax, DWORD PTR _scaling$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	mov	DWORD PTR [eax], ecx
$LN31@cff_parse_:
; Line 319
	jmp	SHORT $LN25@cff_parse_
$LN33@cff_parse_:
; Line 321
	mov	ecx, DWORD PTR _fraction_length$[ebp]
	mov	eax, DWORD PTR _number$[ebp]
	cdq
	idiv	DWORD PTR _power_tens[ecx*4-20]
	cmp	eax, 32767				; 00007fffH
	jle	SHORT $LN24@cff_parse_
; Line 323
	mov	edx, DWORD PTR _fraction_length$[ebp]
	mov	eax, DWORD PTR _power_tens[edx*4-16]
	push	eax
	mov	ecx, DWORD PTR _number$[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
; Line 324
	mov	edx, DWORD PTR _exponent$[ebp]
	sub	edx, 4
	mov	eax, DWORD PTR _scaling$[ebp]
	mov	DWORD PTR [eax], edx
; Line 326
	jmp	SHORT $LN25@cff_parse_
$LN24@cff_parse_:
; Line 328
	mov	ecx, DWORD PTR _fraction_length$[ebp]
	mov	edx, DWORD PTR _power_tens[ecx*4-20]
	push	edx
	mov	eax, DWORD PTR _number$[ebp]
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
; Line 329
	mov	ecx, DWORD PTR _exponent$[ebp]
	sub	ecx, 5
	mov	edx, DWORD PTR _scaling$[ebp]
	mov	DWORD PTR [edx], ecx
$LN25@cff_parse_:
; Line 333
	jmp	$Exit$76
$LN34@cff_parse_:
; Line 335
	mov	eax, DWORD PTR _integer_length$[ebp]
	add	eax, DWORD PTR _exponent$[ebp]
	mov	DWORD PTR _integer_length$[ebp], eax
; Line 336
	mov	ecx, DWORD PTR _fraction_length$[ebp]
	sub	ecx, DWORD PTR _exponent$[ebp]
	mov	DWORD PTR _fraction_length$[ebp], ecx
; Line 338
	cmp	DWORD PTR _integer_length$[ebp], 5
	jle	SHORT $LN21@cff_parse_
; Line 339
	jmp	$Overflow$78
$LN21@cff_parse_:
; Line 340
	cmp	DWORD PTR _integer_length$[ebp], -5	; fffffffbH
	jge	SHORT $LN20@cff_parse_
; Line 341
	jmp	$Underflow$77
$LN20@cff_parse_:
; Line 344
	cmp	DWORD PTR _integer_length$[ebp], 0
	jge	SHORT $LN19@cff_parse_
; Line 346
	mov	ecx, DWORD PTR _integer_length$[ebp]
	neg	ecx
	mov	eax, DWORD PTR _number$[ebp]
	cdq
	idiv	DWORD PTR _power_tens[ecx*4]
	mov	DWORD PTR _number$[ebp], eax
; Line 347
	mov	edx, DWORD PTR _fraction_length$[ebp]
	add	edx, DWORD PTR _integer_length$[ebp]
	mov	DWORD PTR _fraction_length$[ebp], edx
$LN19@cff_parse_:
; Line 351
	cmp	DWORD PTR _fraction_length$[ebp], 10	; 0000000aH
	jne	SHORT $LN18@cff_parse_
; Line 353
	mov	eax, DWORD PTR _number$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _number$[ebp], eax
; Line 354
	mov	edx, DWORD PTR _fraction_length$[ebp]
	sub	edx, 1
	mov	DWORD PTR _fraction_length$[ebp], edx
$LN18@cff_parse_:
; Line 358
	cmp	DWORD PTR _fraction_length$[ebp], 0
	jle	SHORT $LN17@cff_parse_
; Line 360
	mov	ecx, DWORD PTR _fraction_length$[ebp]
	mov	eax, DWORD PTR _number$[ebp]
	cdq
	idiv	DWORD PTR _power_tens[ecx*4]
	cmp	eax, 32767				; 00007fffH
	jle	SHORT $LN16@cff_parse_
; Line 361
	jmp	SHORT $Exit$76
$LN16@cff_parse_:
; Line 363
	mov	edx, DWORD PTR _fraction_length$[ebp]
	mov	eax, DWORD PTR _power_tens[edx*4]
	push	eax
	mov	ecx, DWORD PTR _number$[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
; Line 365
	jmp	SHORT $Exit$76
$LN17@cff_parse_:
; Line 367
	mov	edx, DWORD PTR _fraction_length$[ebp]
	neg	edx
	mov	eax, DWORD PTR _number$[ebp]
	imul	eax, DWORD PTR _power_tens[edx*4]
	mov	DWORD PTR _number$[ebp], eax
; Line 369
	cmp	DWORD PTR _number$[ebp], 32767		; 00007fffH
	jle	SHORT $LN14@cff_parse_
; Line 370
	jmp	SHORT $Overflow$78
$LN14@cff_parse_:
; Line 372
	mov	ecx, DWORD PTR _number$[ebp]
	shl	ecx, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], ecx
$Exit$76:
; Line 377
	cmp	DWORD PTR _sign$[ebp], 0
	je	SHORT $LN13@cff_parse_
; Line 378
	mov	edx, DWORD PTR _result$[ebp]
	neg	edx
	mov	DWORD PTR _result$[ebp], edx
$LN13@cff_parse_:
; Line 380
	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN71@cff_parse_
$Overflow$78:
; Line 383
	mov	DWORD PTR _result$[ebp], 2147483647	; 7fffffffH
$LN12@cff_parse_:
; Line 384
	mov	eax, 4
	imul	ecx, eax, 50
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN11@cff_parse_
	push	OFFSET $SG9597
	call	_FT_Message
	add	esp, 4
$LN11@cff_parse_:
	xor	edx, edx
	jne	SHORT $LN12@cff_parse_
; Line 385
	jmp	SHORT $Exit$76
$Underflow$77:
; Line 388
	mov	DWORD PTR _result$[ebp], 0
$LN8@cff_parse_:
; Line 389
	mov	eax, 4
	imul	ecx, eax, 50
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN7@cff_parse_
	push	OFFSET $SG9602
	call	_FT_Message
	add	esp, 4
$LN7@cff_parse_:
	xor	edx, edx
	jne	SHORT $LN8@cff_parse_
; Line 390
	jmp	SHORT $Exit$76
$Bad$75:
; Line 393
	mov	DWORD PTR _result$[ebp], 0
$LN4@cff_parse_:
; Line 394
	mov	eax, 4
	imul	ecx, eax, 50
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN3@cff_parse_
	push	OFFSET $SG9607
	call	_FT_Message
	add	esp, 4
$LN3@cff_parse_:
	xor	edx, edx
	jne	SHORT $LN4@cff_parse_
; Line 395
	jmp	$Exit$76
$LN71@cff_parse_:
; Line 396
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_parse_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -12						; size = 4
_v$ = -8						; size = 4
_p$ = -4						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_cff_parse_integer PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 58
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 59
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _v$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 60
	mov	DWORD PTR _val$[ebp], 0
; Line 63
	cmp	DWORD PTR _v$[ebp], 28			; 0000001cH
	jne	SHORT $LN16@cff_parse_
; Line 65
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN15@cff_parse_
; Line 66
	jmp	$Bad$19
$LN15@cff_parse_:
; Line 68
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	or	edx, eax
	movsx	ecx, dx
	mov	DWORD PTR _val$[ebp], ecx
	jmp	$Exit$20
$LN16@cff_parse_:
; Line 70
	cmp	DWORD PTR _v$[ebp], 29			; 0000001dH
	jne	SHORT $LN13@cff_parse_
; Line 72
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	cmp	edx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN12@cff_parse_
; Line 73
	jmp	$Bad$19
$LN12@cff_parse_:
; Line 78
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	eax, edx
	mov	DWORD PTR _val$[ebp], eax
	jmp	$Exit$20
$LN13@cff_parse_:
; Line 80
	cmp	DWORD PTR _v$[ebp], 247			; 000000f7H
	jge	SHORT $LN10@cff_parse_
; Line 82
	mov	eax, DWORD PTR _v$[ebp]
	sub	eax, 139				; 0000008bH
	mov	DWORD PTR _val$[ebp], eax
	jmp	SHORT $Exit$20
$LN10@cff_parse_:
; Line 84
	cmp	DWORD PTR _v$[ebp], 251			; 000000fbH
	jge	SHORT $LN8@cff_parse_
; Line 86
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN7@cff_parse_
; Line 87
	jmp	SHORT $Bad$19
$LN7@cff_parse_:
; Line 89
	mov	edx, DWORD PTR _v$[ebp]
	sub	edx, 247				; 000000f7H
	shl	edx, 8
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	lea	edx, DWORD PTR [edx+ecx+108]
	mov	DWORD PTR _val$[ebp], edx
; Line 91
	jmp	SHORT $Exit$20
$LN8@cff_parse_:
; Line 93
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN5@cff_parse_
; Line 94
	jmp	SHORT $Bad$19
$LN5@cff_parse_:
; Line 96
	mov	ecx, DWORD PTR _v$[ebp]
	sub	ecx, 251				; 000000fbH
	neg	ecx
	shl	ecx, 8
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	sub	ecx, eax
	sub	ecx, 108				; 0000006cH
	mov	DWORD PTR _val$[ebp], ecx
$Exit$20:
; Line 100
	mov	eax, DWORD PTR _val$[ebp]
	jmp	SHORT $LN17@cff_parse_
$Bad$19:
; Line 103
	mov	DWORD PTR _val$[ebp], 0
$LN4@cff_parse_:
; Line 104
	mov	ecx, 4
	imul	edx, ecx, 50
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN3@cff_parse_
	push	OFFSET $SG9498
	call	_FT_Message
	add	esp, 4
$LN3@cff_parse_:
	xor	eax, eax
	jne	SHORT $LN4@cff_parse_
; Line 105
	jmp	SHORT $Exit$20
$LN17@cff_parse_:
; Line 106
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_parse_integer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -16						; size = 4
_result$ = -12						; size = 4
_sfnt$ = -8						; size = 4
_library$ = -4						; size = 4
_driver$ = 8						; size = 4
_module_interface$ = 12					; size = 4
_cff_get_interface PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 750
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 765
	mov	eax, DWORD PTR _module_interface$[ebp]
	push	eax
	push	OFFSET _cff_services
	call	_ft_service_list_lookup
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
; Line 766
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@cff_get_in
; Line 767
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN4@cff_get_in
$LN3@cff_get_in:
; Line 771
	cmp	DWORD PTR _driver$[ebp], 0
	jne	SHORT $LN2@cff_get_in
; Line 772
	xor	eax, eax
	jmp	SHORT $LN4@cff_get_in
$LN2@cff_get_in:
; Line 773
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _library$[ebp], edx
; Line 774
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN1@cff_get_in
; Line 775
	xor	eax, eax
	jmp	SHORT $LN4@cff_get_in
$LN1@cff_get_in:
; Line 779
	push	OFFSET $SG9448
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _sfnt$[ebp], eax
; Line 781
	cmp	DWORD PTR _sfnt$[ebp], 0
	je	SHORT $LN6@cff_get_in
	mov	esi, esp
	mov	ecx, DWORD PTR _module_interface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN7@cff_get_in
$LN6@cff_get_in:
	mov	DWORD PTR tv80[ebp], 0
$LN7@cff_get_in:
	mov	eax, DWORD PTR tv80[ebp]
$LN4@cff_get_in:
; Line 782
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_get_interface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$1 = -32						; size = 4
_no_stem_darkening$2 = -25				; size = 1
_val$3 = -24						; size = 4
_hinting_engine$4 = -20					; size = 4
_val$5 = -16						; size = 4
_darken_params$6 = -12					; size = 4
_driver$ = -8						; size = 4
_error$ = -4						; size = 4
_module$ = 8						; size = 4
_property_name$ = 12					; size = 4
_value$ = 16						; size = 4
_cff_property_get PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 656
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 657
	mov	DWORD PTR _error$[ebp], 0
; Line 658
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 661
	push	OFFSET $SG9397
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN9@cff_proper
; Line 663
	mov	edx, DWORD PTR _driver$[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR _darken_params$6[ebp], edx
; Line 664
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _val$5[ebp], eax
; Line 667
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _val$5[ebp]
	mov	esi, DWORD PTR _darken_params$6[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [eax+ecx], edx
; Line 668
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _val$5[ebp]
	mov	esi, DWORD PTR _darken_params$6[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax
; Line 669
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _val$5[ebp]
	mov	esi, DWORD PTR _darken_params$6[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx
; Line 670
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _val$5[ebp]
	mov	esi, DWORD PTR _darken_params$6[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax
; Line 671
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _val$5[ebp]
	mov	esi, DWORD PTR _darken_params$6[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx
; Line 672
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _val$5[ebp]
	mov	esi, DWORD PTR _darken_params$6[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax
; Line 673
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, 4
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _val$5[ebp]
	mov	esi, DWORD PTR _darken_params$6[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [eax+ecx], edx
; Line 674
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _val$5[ebp]
	mov	esi, DWORD PTR _darken_params$6[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
; Line 676
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN10@cff_proper
	jmp	SHORT $LN4@cff_proper
$LN9@cff_proper:
; Line 678
	push	OFFSET $SG9403
	mov	edx, DWORD PTR _property_name$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@cff_proper
; Line 680
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _hinting_engine$4[ebp], ecx
; Line 681
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _val$3[ebp], edx
; Line 684
	mov	eax, DWORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR _hinting_engine$4[ebp]
	mov	DWORD PTR [eax], ecx
; Line 686
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN10@cff_proper
	jmp	SHORT $LN4@cff_proper
$LN7@cff_proper:
; Line 688
	push	OFFSET $SG9409
	mov	edx, DWORD PTR _property_name$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@cff_proper
; Line 690
	mov	eax, DWORD PTR _driver$[ebp]
	mov	cl, BYTE PTR [eax+32]
	mov	BYTE PTR _no_stem_darkening$2[ebp], cl
; Line 691
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _val$1[ebp], edx
; Line 694
	mov	eax, DWORD PTR _val$1[ebp]
	mov	cl, BYTE PTR _no_stem_darkening$2[ebp]
	mov	BYTE PTR [eax], cl
; Line 696
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN10@cff_proper
$LN4@cff_proper:
; Line 700
	mov	edx, 4
	imul	eax, edx, 46
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN3@cff_proper
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	push	OFFSET $SG9417
	call	_FT_Message
	add	esp, 8
$LN3@cff_proper:
	xor	edx, edx
	jne	SHORT $LN4@cff_proper
; Line 701
	push	OFFSET $SG9418
	push	701					; 000002bdH
	push	12					; 0000000cH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 12					; 0000000cH
$LN10@cff_proper:
; Line 702
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_property_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_no_stem_darkening$1 = -52				; size = 4
_hinting_engine$2 = -48					; size = 4
_y4$3 = -44						; size = 4
_x4$4 = -40						; size = 4
_y3$5 = -36						; size = 4
_x3$6 = -32						; size = 4
_y2$7 = -28						; size = 4
_x2$8 = -24						; size = 4
_y1$9 = -20						; size = 4
_x1$10 = -16						; size = 4
_darken_params$11 = -12					; size = 4
_driver$ = -8						; size = 4
_error$ = -4						; size = 4
_module$ = 8						; size = 4
_property_name$ = 12					; size = 4
_value$ = 16						; size = 4
_cff_property_set PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 586
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 587
	mov	DWORD PTR _error$[ebp], 0
; Line 588
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 591
	push	OFFSET $SG9353
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN13@cff_proper
; Line 593
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _darken_params$11[ebp], edx
; Line 595
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _darken_params$11[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _x1$10[ebp], eax
; Line 596
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _darken_params$11[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _y1$9[ebp], eax
; Line 597
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _darken_params$11[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _x2$8[ebp], eax
; Line 598
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _darken_params$11[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _y2$7[ebp], ecx
; Line 599
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _darken_params$11[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _x3$6[ebp], ecx
; Line 600
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _darken_params$11[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _y3$5[ebp], edx
; Line 601
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _darken_params$11[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _x4$4[ebp], eax
; Line 602
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _darken_params$11[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _y4$3[ebp], ecx
; Line 608
	cmp	DWORD PTR _x1$10[ebp], 0
	jl	SHORT $LN11@cff_proper
	cmp	DWORD PTR _x2$8[ebp], 0
	jl	SHORT $LN11@cff_proper
	cmp	DWORD PTR _x3$6[ebp], 0
	jl	SHORT $LN11@cff_proper
	cmp	DWORD PTR _x4$4[ebp], 0
	jl	SHORT $LN11@cff_proper
	cmp	DWORD PTR _y1$9[ebp], 0
	jl	SHORT $LN11@cff_proper
	cmp	DWORD PTR _y2$7[ebp], 0
	jl	SHORT $LN11@cff_proper
	cmp	DWORD PTR _y3$5[ebp], 0
	jl	SHORT $LN11@cff_proper
	cmp	DWORD PTR _y4$3[ebp], 0
	jl	SHORT $LN11@cff_proper
	mov	edx, DWORD PTR _x1$10[ebp]
	cmp	edx, DWORD PTR _x2$8[ebp]
	jg	SHORT $LN11@cff_proper
	mov	eax, DWORD PTR _x2$8[ebp]
	cmp	eax, DWORD PTR _x3$6[ebp]
	jg	SHORT $LN11@cff_proper
	mov	ecx, DWORD PTR _x3$6[ebp]
	cmp	ecx, DWORD PTR _x4$4[ebp]
	jg	SHORT $LN11@cff_proper
	cmp	DWORD PTR _y1$9[ebp], 500		; 000001f4H
	jg	SHORT $LN11@cff_proper
	cmp	DWORD PTR _y2$7[ebp], 500		; 000001f4H
	jg	SHORT $LN11@cff_proper
	cmp	DWORD PTR _y3$5[ebp], 500		; 000001f4H
	jg	SHORT $LN11@cff_proper
	cmp	DWORD PTR _y4$3[ebp], 500		; 000001f4H
	jle	SHORT $LN12@cff_proper
$LN11@cff_proper:
; Line 609
	push	OFFSET $SG9366
	push	609					; 00000261H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN14@cff_proper
$LN12@cff_proper:
; Line 611
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR _x1$10[ebp]
	mov	DWORD PTR [ecx+eax+36], edx
; Line 612
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR _y1$9[ebp]
	mov	DWORD PTR [ecx+eax+36], edx
; Line 613
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR _x2$8[ebp]
	mov	DWORD PTR [ecx+eax+36], edx
; Line 614
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR _y2$7[ebp]
	mov	DWORD PTR [edx+ecx+36], eax
; Line 615
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR _x3$6[ebp]
	mov	DWORD PTR [edx+ecx+36], eax
; Line 616
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR _y3$5[ebp]
	mov	DWORD PTR [eax+edx+36], ecx
; Line 617
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR _x4$4[ebp]
	mov	DWORD PTR [ecx+eax+36], edx
; Line 618
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR _y4$3[ebp]
	mov	DWORD PTR [edx+ecx+36], eax
; Line 620
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN14@cff_proper
	jmp	SHORT $LN4@cff_proper
$LN13@cff_proper:
; Line 622
	push	OFFSET $SG9369
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@cff_proper
; Line 624
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _hinting_engine$2[ebp], edx
; Line 628
	mov	eax, DWORD PTR _hinting_engine$2[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN8@cff_proper
; Line 629
	mov	DWORD PTR _error$[ebp], 7
; Line 630
	jmp	SHORT $LN7@cff_proper
$LN8@cff_proper:
; Line 632
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR _hinting_engine$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+28], eax
$LN7@cff_proper:
; Line 634
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN14@cff_proper
	jmp	SHORT $LN4@cff_proper
$LN9@cff_proper:
; Line 636
	push	OFFSET $SG9376
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@cff_proper
; Line 638
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _no_stem_darkening$1[ebp], edx
; Line 641
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR _no_stem_darkening$1[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+32], dl
; Line 643
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN14@cff_proper
$LN4@cff_proper:
; Line 647
	mov	eax, 4
	imul	ecx, eax, 46
	cmp	DWORD PTR _ft_trace_levels[ecx], 0
	jl	SHORT $LN3@cff_proper
	mov	edx, DWORD PTR _property_name$[ebp]
	push	edx
	push	OFFSET $SG9383
	call	_FT_Message
	add	esp, 8
$LN3@cff_proper:
	xor	eax, eax
	jne	SHORT $LN4@cff_proper
; Line 648
	push	OFFSET $SG9384
	push	648					; 00000288H
	push	12					; 0000000cH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 12					; 0000000cH
$LN14@cff_proper:
; Line 649
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_property_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dict$1 = -16						; size = 4
_c$2 = -12						; size = 4
_cff$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_cid$ = 16						; size = 4
_cff_get_cid_from_glyph_index PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 534
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 535
	mov	DWORD PTR _error$[ebp], 0
; Line 539
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _cff$[ebp], ecx
; Line 541
	cmp	DWORD PTR _cff$[ebp], 0
	je	SHORT $Fail$7
; Line 544
	mov	edx, DWORD PTR _cff$[ebp]
	add	edx, 1324				; 0000052cH
	mov	DWORD PTR _dict$1[ebp], edx
; Line 547
	mov	eax, DWORD PTR _dict$1[ebp]
	cmp	DWORD PTR [eax+132], 65535		; 0000ffffH
	jne	SHORT $LN3@cff_get_ci
; Line 549
	push	OFFSET $SG9332
	push	549					; 00000225H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 550
	jmp	SHORT $Fail$7
$LN3@cff_get_ci:
; Line 553
	mov	ecx, DWORD PTR _cff$[ebp]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jbe	SHORT $LN2@cff_get_ci
; Line 555
	push	OFFSET $SG9335
	push	555					; 0000022bH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 556
	jmp	SHORT $Fail$7
$LN2@cff_get_ci:
; Line 559
	mov	eax, DWORD PTR _cff$[ebp]
	mov	ecx, DWORD PTR [eax+1160]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _c$2[ebp], eax
; Line 561
	cmp	DWORD PTR _cid$[ebp], 0
	je	SHORT $Fail$7
; Line 562
	mov	ecx, DWORD PTR _cid$[ebp]
	mov	edx, DWORD PTR _c$2[ebp]
	mov	DWORD PTR [ecx], edx
$Fail$7:
; Line 566
	mov	eax, DWORD PTR _error$[ebp]
; Line 567
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_get_cid_from_glyph_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dict$1 = -12						; size = 4
_cff$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_is_cid$ = 12						; size = 4
_cff_get_is_cid PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 510
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 511
	mov	DWORD PTR _error$[ebp], 0
; Line 512
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _cff$[ebp], ecx
; Line 515
	mov	edx, DWORD PTR _is_cid$[ebp]
	mov	BYTE PTR [edx], 0
; Line 517
	cmp	DWORD PTR _cff$[ebp], 0
	je	SHORT $LN2@cff_get_is
; Line 519
	mov	eax, DWORD PTR _cff$[ebp]
	add	eax, 1324				; 0000052cH
	mov	DWORD PTR _dict$1[ebp], eax
; Line 522
	mov	ecx, DWORD PTR _dict$1[ebp]
	cmp	DWORD PTR [ecx+132], 65535		; 0000ffffH
	je	SHORT $LN2@cff_get_is
; Line 523
	mov	edx, DWORD PTR _is_cid$[ebp]
	mov	BYTE PTR [edx], 1
$LN2@cff_get_is:
; Line 526
	mov	eax, DWORD PTR _error$[ebp]
; Line 527
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_get_is_cid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dict$1 = -12						; size = 4
_cff$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_registry$ = 12						; size = 4
_ordering$ = 16						; size = 4
_supplement$ = 20					; size = 4
_cff_get_ros PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 455
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 456
	mov	DWORD PTR _error$[ebp], 0
; Line 457
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _cff$[ebp], ecx
; Line 460
	cmp	DWORD PTR _cff$[ebp], 0
	je	$Fail$16
; Line 462
	mov	edx, DWORD PTR _cff$[ebp]
	add	edx, 1324				; 0000052cH
	mov	DWORD PTR _dict$1[ebp], edx
; Line 465
	mov	eax, DWORD PTR _dict$1[ebp]
	cmp	DWORD PTR [eax+132], 65535		; 0000ffffH
	jne	SHORT $LN12@cff_get_ro
; Line 467
	push	OFFSET $SG9288
	push	467					; 000001d3H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 468
	jmp	$Fail$16
$LN12@cff_get_ro:
; Line 471
	cmp	DWORD PTR _registry$[ebp], 0
	je	SHORT $LN11@cff_get_ro
; Line 473
	mov	ecx, DWORD PTR _cff$[ebp]
	cmp	DWORD PTR [ecx+2964], 0
	jne	SHORT $LN10@cff_get_ro
; Line 475
	mov	edx, DWORD PTR _dict$1[ebp]
	mov	eax, DWORD PTR [edx+132]
	push	eax
	mov	ecx, DWORD PTR _cff$[ebp]
	push	ecx
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	edx, DWORD PTR _cff$[ebp]
	mov	DWORD PTR [edx+2964], eax
$LN10@cff_get_ro:
; Line 476
	mov	eax, DWORD PTR _registry$[ebp]
	mov	ecx, DWORD PTR _cff$[ebp]
	mov	edx, DWORD PTR [ecx+2964]
	mov	DWORD PTR [eax], edx
$LN11@cff_get_ro:
; Line 479
	cmp	DWORD PTR _ordering$[ebp], 0
	je	SHORT $LN9@cff_get_ro
; Line 481
	mov	eax, DWORD PTR _cff$[ebp]
	cmp	DWORD PTR [eax+2968], 0
	jne	SHORT $LN8@cff_get_ro
; Line 483
	mov	ecx, DWORD PTR _dict$1[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	mov	eax, DWORD PTR _cff$[ebp]
	push	eax
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	ecx, DWORD PTR _cff$[ebp]
	mov	DWORD PTR [ecx+2968], eax
$LN8@cff_get_ro:
; Line 484
	mov	edx, DWORD PTR _ordering$[ebp]
	mov	eax, DWORD PTR _cff$[ebp]
	mov	ecx, DWORD PTR [eax+2968]
	mov	DWORD PTR [edx], ecx
$LN9@cff_get_ro:
; Line 492
	cmp	DWORD PTR _supplement$[ebp], 0
	je	SHORT $Fail$16
; Line 495
	mov	edx, DWORD PTR _dict$1[ebp]
	cmp	DWORD PTR [edx+140], -2147483648	; 80000000H
	jl	SHORT $LN4@cff_get_ro
	mov	eax, DWORD PTR _dict$1[ebp]
	cmp	DWORD PTR [eax+140], 2147483647		; 7fffffffH
	jle	SHORT $LN6@cff_get_ro
$LN4@cff_get_ro:
; Line 497
	mov	ecx, 4
	imul	edx, ecx, 46
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN3@cff_get_ro
	mov	eax, DWORD PTR _dict$1[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	push	OFFSET $SG9303
	call	_FT_Message
	add	esp, 8
$LN3@cff_get_ro:
	xor	edx, edx
	jne	SHORT $LN4@cff_get_ro
$LN6@cff_get_ro:
; Line 498
	mov	eax, DWORD PTR _supplement$[ebp]
	mov	ecx, DWORD PTR _dict$1[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [eax], edx
$Fail$16:
; Line 503
	mov	eax, DWORD PTR _error$[ebp]
; Line 504
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_get_ros ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_service$1 = -24					; size = 4
_sfnt$2 = -20						; size = 4
_library$ = -16						; size = 4
_face$ = -12						; size = 4
_error$ = -8						; size = 4
_cmap$ = -4						; size = 4
_charmap$ = 8						; size = 4
_cmap_info$ = 12					; size = 4
_cff_get_cmap_info PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 412
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 413
	mov	eax, DWORD PTR _charmap$[ebp]
	mov	DWORD PTR _cmap$[ebp], eax
; Line 414
	mov	DWORD PTR _error$[ebp], 0
; Line 416
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 417
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _library$[ebp], edx
; Line 420
	mov	eax, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [eax], 0
; Line 421
	mov	ecx, DWORD PTR _cmap_info$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 424
	mov	edx, DWORD PTR _cmap$[ebp]
	cmp	DWORD PTR [edx+12], OFFSET _cff_cmap_encoding_class_rec
	je	SHORT $LN2@cff_get_cm
	mov	eax, DWORD PTR _cmap$[ebp]
	cmp	DWORD PTR [eax+12], OFFSET _cff_cmap_unicode_class_rec
	je	SHORT $LN2@cff_get_cm
; Line 426
	push	OFFSET $SG9265
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _sfnt$2[ebp], eax
; Line 429
	push	OFFSET $SG9268
	mov	edx, DWORD PTR _sfnt$2[ebp]
	push	edx
	call	_ft_module_get_service
	add	esp, 8
	mov	DWORD PTR _service$1[ebp], eax
; Line 432
	cmp	DWORD PTR _service$1[ebp], 0
	je	SHORT $LN2@cff_get_cm
	mov	eax, DWORD PTR _service$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@cff_get_cm
; Line 433
	mov	esi, esp
	mov	ecx, DWORD PTR _cmap_info$[ebp]
	push	ecx
	mov	edx, DWORD PTR _charmap$[ebp]
	push	edx
	mov	eax, DWORD PTR _service$1[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN2@cff_get_cm:
; Line 436
	mov	eax, DWORD PTR _error$[ebp]
; Line 437
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_get_cmap_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cff$ = -4						; size = 4
_face$ = 8						; size = 4
_cff_get_ps_name PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 385
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 386
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _cff$[ebp], ecx
; Line 389
	mov	edx, DWORD PTR _cff$[ebp]
	mov	eax, DWORD PTR [edx+1304]
; Line 390
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_get_ps_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -28						; size = 4
_font_info$2 = -24					; size = 4
_dict$3 = -20						; size = 4
_error$ = -12						; size = 4
_cff$ = -4						; size = 4
_face$ = 8						; size = 4
_afont_info$ = 12					; size = 4
_cff_ps_get_font_info PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 327
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 328
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _cff$[ebp], ecx
; Line 329
	mov	DWORD PTR _error$[ebp], 0
; Line 332
	cmp	DWORD PTR _cff$[ebp], 0
	je	$LN3@cff_ps_get
	mov	edx, DWORD PTR _cff$[ebp]
	cmp	DWORD PTR [edx+2960], 0
	jne	$LN3@cff_ps_get
; Line 334
	mov	eax, DWORD PTR _cff$[ebp]
	add	eax, 1324				; 0000052cH
	mov	DWORD PTR _dict$3[ebp], eax
; Line 335
	mov	DWORD PTR _font_info$2[ebp], 0
; Line 336
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$1[ebp], edx
; Line 339
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _memory$1[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _font_info$2[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@cff_ps_get
; Line 340
	jmp	$Fail$9
$LN2@cff_ps_get:
; Line 343
	mov	edx, DWORD PTR _dict$3[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _cff$[ebp]
	push	ecx
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	edx, DWORD PTR _font_info$2[ebp]
	mov	DWORD PTR [edx], eax
; Line 345
	mov	eax, DWORD PTR _dict$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cff$[ebp]
	push	edx
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	ecx, DWORD PTR _font_info$2[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 347
	mov	edx, DWORD PTR _dict$3[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _cff$[ebp]
	push	ecx
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	edx, DWORD PTR _font_info$2[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 349
	mov	eax, DWORD PTR _dict$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _cff$[ebp]
	push	edx
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	ecx, DWORD PTR _font_info$2[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 351
	mov	edx, DWORD PTR _dict$3[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _cff$[ebp]
	push	ecx
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	edx, DWORD PTR _font_info$2[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 352
	mov	eax, DWORD PTR _font_info$2[ebp]
	mov	ecx, DWORD PTR _dict$3[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+20], edx
; Line 353
	mov	eax, DWORD PTR _font_info$2[ebp]
	mov	ecx, DWORD PTR _dict$3[ebp]
	mov	dl, BYTE PTR [ecx+24]
	mov	BYTE PTR [eax+24], dl
; Line 354
	mov	eax, DWORD PTR _font_info$2[ebp]
	mov	ecx, DWORD PTR _dict$3[ebp]
	mov	dx, WORD PTR [ecx+32]
	mov	WORD PTR [eax+26], dx
; Line 355
	mov	eax, DWORD PTR _font_info$2[ebp]
	mov	ecx, DWORD PTR _dict$3[ebp]
	mov	dx, WORD PTR [ecx+36]
	mov	WORD PTR [eax+28], dx
; Line 357
	mov	eax, DWORD PTR _cff$[ebp]
	mov	ecx, DWORD PTR _font_info$2[ebp]
	mov	DWORD PTR [eax+2960], ecx
$LN3@cff_ps_get:
; Line 360
	cmp	DWORD PTR _cff$[ebp], 0
	je	SHORT $Fail$9
; Line 361
	mov	edx, DWORD PTR _cff$[ebp]
	mov	ecx, 8
	mov	esi, DWORD PTR [edx+2960]
	mov	edi, DWORD PTR _afont_info$[ebp]
	rep movsd
$Fail$9:
; Line 364
	mov	eax, DWORD PTR _error$[ebp]
; Line 365
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@cff_ps_get
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@cff_ps_get:
	DD	1
	DD	$LN7@cff_ps_get
$LN7@cff_ps_get:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN6@cff_ps_get
$LN6@cff_ps_get:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_ps_get_font_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -4						; size = 4
_face$ = 8						; size = 4
_cff_ps_has_glyph_names PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 319
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 320
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 512				; 00000200H
	jle	SHORT $LN3@cff_ps_has
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@cff_ps_has
$LN3@cff_ps_has:
	mov	DWORD PTR tv67[ebp], 0
$LN4@cff_ps_has:
	mov	eax, DWORD PTR tv67[ebp]
; Line 321
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_ps_has_glyph_names ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__tmp_$1 = -32						; size = 4
_module$2 = -28						; size = 4
_i$ = -24						; size = 4
_sid$ = -20						; size = 2
_name$ = -16						; size = 4
_psnames$ = -12						; size = 4
_charset$ = -8						; size = 4
_cff$ = -4						; size = 4
_face$ = 8						; size = 4
_glyph_name$ = 12					; size = 4
_cff_get_name_index PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 269
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 278
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _cff$[ebp], ecx
; Line 279
	mov	edx, DWORD PTR _cff$[ebp]
	add	edx, 1152				; 00000480H
	mov	DWORD PTR _charset$[ebp], edx
$LN11@cff_get_na:
; Line 281
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _module$2[ebp], ecx
	push	OFFSET $SG9194
	mov	edx, DWORD PTR _module$2[ebp]
	push	edx
	call	_ft_module_get_service
	add	esp, 8
	mov	DWORD PTR __tmp_$1[ebp], eax
	mov	eax, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR _psnames$[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN11@cff_get_na
; Line 282
	cmp	DWORD PTR _psnames$[ebp], 0
	jne	SHORT $LN8@cff_get_na
; Line 283
	xor	eax, eax
	jmp	$LN12@cff_get_na
$LN8@cff_get_na:
; Line 285
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@cff_get_na
$LN6@cff_get_na:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@cff_get_na:
	mov	eax, DWORD PTR _cff$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN5@cff_get_na
; Line 287
	mov	edx, DWORD PTR _charset$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _sid$[ebp], dx
; Line 289
	movzx	eax, WORD PTR _sid$[ebp]
	cmp	eax, 390				; 00000186H
	jle	SHORT $LN4@cff_get_na
; Line 290
	movzx	ecx, WORD PTR _sid$[ebp]
	sub	ecx, 391				; 00000187H
	push	ecx
	mov	edx, DWORD PTR _cff$[ebp]
	push	edx
	call	_cff_index_get_string
	add	esp, 8
	mov	DWORD PTR _name$[ebp], eax
; Line 291
	jmp	SHORT $LN3@cff_get_na
$LN4@cff_get_na:
; Line 292
	movzx	eax, WORD PTR _sid$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _psnames$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _name$[ebp], eax
$LN3@cff_get_na:
; Line 294
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN2@cff_get_na
; Line 295
	jmp	SHORT $LN6@cff_get_na
$LN2@cff_get_na:
; Line 297
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@cff_get_na
; Line 298
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN12@cff_get_na
$LN1@cff_get_na:
; Line 299
	jmp	$LN6@cff_get_na
$LN5@cff_get_na:
; Line 301
	xor	eax, eax
$LN12@cff_get_na:
; Line 302
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_get_name_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -16						; size = 4
_sid$ = -12						; size = 2
_gname$ = -8						; size = 4
_font$ = -4						; size = 4
_face$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_buffer$ = 16						; size = 4
_buffer_max$ = 20					; size = 4
_cff_get_glyph_name PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 233
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 234
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _font$[ebp], ecx
; Line 240
	mov	edx, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [edx+2956], 0
	jne	SHORT $LN2@cff_get_gl
; Line 245
	push	OFFSET $SG9167
	call	_FT_Message
	add	esp, 4
; Line 246
	push	OFFSET $SG9168
	push	246					; 000000f6H
	push	11					; 0000000bH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 11					; 0000000bH
	mov	DWORD PTR _error$[ebp], eax
; Line 247
	jmp	SHORT $Exit$5
$LN2@cff_get_gl:
; Line 251
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+1160]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	mov	ax, WORD PTR [ecx+edx*2]
	mov	WORD PTR _sid$[ebp], ax
; Line 254
	movzx	ecx, WORD PTR _sid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	DWORD PTR _gname$[ebp], eax
; Line 256
	cmp	DWORD PTR _gname$[ebp], 0
	je	SHORT $LN1@cff_get_gl
; Line 257
	mov	eax, DWORD PTR _buffer_max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _gname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_ft_mem_strcpyn
	add	esp, 12					; 0000000cH
$LN1@cff_get_gl:
; Line 259
	mov	DWORD PTR _error$[ebp], 0
$Exit$5:
; Line 262
	mov	eax, DWORD PTR _error$[ebp]
; Line 263
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_get_glyph_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -16						; size = 4
_slot$ = -12						; size = 4
_error$ = -8						; size = 4
_nn$ = -4						; size = 4
_face$ = 8						; size = 4
_start$ = 12						; size = 4
_count$ = 16						; size = 4
_flags$ = 20						; size = 4
_advances$ = 24						; size = 4
_cff_get_advances PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 200
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 202
	mov	DWORD PTR _error$[ebp], 0
; Line 203
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _slot$[ebp], ecx
; Line 206
	mov	edx, DWORD PTR _flags$[ebp]
	or	edx, 256				; 00000100H
	mov	DWORD PTR _flags$[ebp], edx
; Line 208
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN4@cff_get_ad
$LN3@cff_get_ad:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN4@cff_get_ad:
	mov	ecx, DWORD PTR _nn$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	SHORT $LN2@cff_get_ad
; Line 210
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _nn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	call	_cff_glyph_load
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 211
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@cff_get_ad
; Line 212
	jmp	SHORT $LN2@cff_get_ad
$LN1@cff_get_ad:
; Line 216
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN7@cff_get_ad
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN8@cff_get_ad
$LN7@cff_get_ad:
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR tv82[ebp], edx
$LN8@cff_get_ad:
	mov	eax, DWORD PTR _nn$[ebp]
	mov	ecx, DWORD PTR _advances$[ebp]
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 217
	jmp	SHORT $LN3@cff_get_ad
$LN2@cff_get_ad:
; Line 219
	mov	eax, DWORD PTR _error$[ebp]
; Line 220
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_get_advances ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -12						; size = 4
_slot$ = -8						; size = 4
_error$ = -4						; size = 4
_cffslot$ = 8						; size = 4
_cffsize$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_cff_glyph_load PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 160
	mov	eax, DWORD PTR _cffslot$[ebp]
	mov	DWORD PTR _slot$[ebp], eax
; Line 161
	mov	ecx, DWORD PTR _cffsize$[ebp]
	mov	DWORD PTR _size$[ebp], ecx
; Line 164
	cmp	DWORD PTR _slot$[ebp], 0
	jne	SHORT $LN8@cff_glyph_
; Line 165
	push	OFFSET $SG9119
	push	165					; 000000a5H
	push	37					; 00000025H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 37					; 00000025H
	jmp	$LN10@cff_glyph_
$LN8@cff_glyph_:
; Line 167
	mov	edx, 4
	imul	eax, edx, 46
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN7@cff_glyph_
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	push	OFFSET $SG9124
	call	_FT_Message
	add	esp, 8
$LN7@cff_glyph_:
	xor	edx, edx
	jne	SHORT $LN8@cff_glyph_
; Line 170
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN4@cff_glyph_
; Line 171
	mov	eax, DWORD PTR _load_flags$[ebp]
	or	eax, 3
	mov	DWORD PTR _load_flags$[ebp], eax
$LN4@cff_glyph_:
; Line 174
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 1
	je	SHORT $LN3@cff_glyph_
; Line 175
	mov	DWORD PTR _size$[ebp], 0
$LN3@cff_glyph_:
; Line 177
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@cff_glyph_
; Line 180
	mov	edx, DWORD PTR _cffsize$[ebp]
	mov	eax, DWORD PTR _cffslot$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN2@cff_glyph_
; Line 181
	push	OFFSET $SG9130
	push	181					; 000000b5H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	SHORT $LN10@cff_glyph_
$LN2@cff_glyph_:
; Line 185
	mov	edx, DWORD PTR _load_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	call	_cff_slot_load
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 190
	mov	eax, DWORD PTR _error$[ebp]
$LN10@cff_glyph_:
; Line 191
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_glyph_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sfnt$ = -8						; size = 4
_face$ = -4						; size = 4
_ttface$ = 8						; size = 4
_left_glyph$ = 12					; size = 4
_right_glyph$ = 16					; size = 4
_kerning$ = 20						; size = 4
_cff_get_kerning PROC
; File d:\mozilla\modules\freetype2\src\cff\cffdrivr.c
; Line 109
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 110
	mov	eax, DWORD PTR _ttface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 111
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+532]
	mov	DWORD PTR _sfnt$[ebp], edx
; Line 114
	mov	eax, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [eax], 0
; Line 115
	mov	ecx, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 117
	cmp	DWORD PTR _sfnt$[ebp], 0
	je	SHORT $LN1@cff_get_ke
; Line 118
	mov	esi, esp
	mov	edx, DWORD PTR _right_glyph$[ebp]
	push	edx
	mov	eax, DWORD PTR _left_glyph$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _kerning$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@cff_get_ke:
; Line 120
	xor	eax, eax
; Line 121
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_get_kerning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv250 = -68						; size = 4
tv245 = -64						; size = 4
tv195 = -60						; size = 4
tv190 = -56						; size = 4
tv183 = -52						; size = 4
tv170 = -48						; size = 4
_data$1 = -44						; size = 4
_qcount$2 = -40						; size = 4
_q$3 = -36						; size = 4
_val$4 = -32						; size = 4
_field$5 = -28						; size = 4
_num_args$6 = -24					; size = 4
_code$7 = -20						; size = 4
_v$8 = -16						; size = 4
_library$ = -12						; size = 4
_error$ = -8						; size = 4
_p$ = -4						; size = 4
_parser$ = 8						; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
_cff_parser_run PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 932
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 933
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 934
	mov	DWORD PTR _error$[ebp], 0
; Line 935
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _library$[ebp], edx
; Line 936
	mov	eax, DWORD PTR _library$[ebp]
	mov	DWORD PTR _library$[ebp], eax
; Line 939
	mov	ecx, DWORD PTR _parser$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+404], ecx
; Line 940
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 941
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 942
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN91@cff_parser:
; Line 944
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$Exit$98
; Line 946
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _v$8[ebp], edx
; Line 949
	cmp	DWORD PTR _v$8[ebp], 27			; 0000001bH
	jb	$LN89@cff_parser
	cmp	DWORD PTR _v$8[ebp], 31			; 0000001fH
	je	$LN89@cff_parser
; Line 952
	mov	eax, DWORD PTR _parser$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	sub	edx, eax
	sar	edx, 2
	cmp	edx, 96					; 00000060H
	jl	SHORT $LN88@cff_parser
; Line 953
	jmp	$Stack_Overflow$99
$LN88@cff_parser:
; Line 955
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	add	ecx, 4
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+404], ecx
; Line 958
	cmp	DWORD PTR _v$8[ebp], 30			; 0000001eH
	jne	SHORT $LN87@cff_parser
; Line 961
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN86@cff_parser:
; Line 966
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN84@cff_parser
; Line 967
	jmp	$Exit$98
$LN84@cff_parser:
; Line 968
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	sar	edx, 4
	mov	DWORD PTR _v$8[ebp], edx
; Line 969
	cmp	DWORD PTR _v$8[ebp], 15			; 0000000fH
	jne	SHORT $LN83@cff_parser
; Line 970
	jmp	SHORT $LN85@cff_parser
$LN83@cff_parser:
; Line 971
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _v$8[ebp], eax
; Line 972
	cmp	DWORD PTR _v$8[ebp], 15			; 0000000fH
	jne	SHORT $LN82@cff_parser
; Line 973
	jmp	SHORT $LN85@cff_parser
$LN82@cff_parser:
; Line 974
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 975
	jmp	SHORT $LN86@cff_parser
$LN85@cff_parser:
; Line 977
	jmp	SHORT $LN76@cff_parser
$LN87@cff_parser:
	cmp	DWORD PTR _v$8[ebp], 28			; 0000001cH
	jne	SHORT $LN80@cff_parser
; Line 978
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN76@cff_parser
$LN80@cff_parser:
; Line 979
	cmp	DWORD PTR _v$8[ebp], 29			; 0000001dH
	jne	SHORT $LN78@cff_parser
; Line 980
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN76@cff_parser
$LN78@cff_parser:
; Line 981
	cmp	DWORD PTR _v$8[ebp], 246		; 000000f6H
	jbe	SHORT $LN76@cff_parser
; Line 982
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN76@cff_parser:
; Line 984
	jmp	$LN75@cff_parser
$LN89@cff_parser:
; Line 991
	mov	edx, DWORD PTR _parser$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	sub	ecx, edx
	sar	ecx, 2
	mov	DWORD PTR _num_args$6[ebp], ecx
; Line 995
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+404]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 996
	mov	edx, DWORD PTR _v$8[ebp]
	mov	DWORD PTR _code$7[ebp], edx
; Line 997
	cmp	DWORD PTR _v$8[ebp], 12			; 0000000cH
	jne	SHORT $LN74@cff_parser
; Line 1000
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 1001
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jb	SHORT $LN73@cff_parser
; Line 1002
	jmp	$Syntax_Error$100
$LN73@cff_parser:
; Line 1004
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	or	edx, 256				; 00000100H
	mov	DWORD PTR _code$7[ebp], edx
$LN74@cff_parser:
; Line 1006
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _code$7[ebp]
	or	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR _code$7[ebp], ecx
; Line 1008
	mov	DWORD PTR _field$5[ebp], OFFSET _cff_field_handlers
	jmp	SHORT $LN72@cff_parser
$LN71@cff_parser:
	mov	edx, DWORD PTR _field$5[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _field$5[ebp], edx
$LN72@cff_parser:
	mov	eax, DWORD PTR _field$5[ebp]
	cmp	DWORD PTR [eax], 0
	je	$Found$101
; Line 1010
	mov	ecx, DWORD PTR _field$5[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _code$7[ebp]
	jne	$LN69@cff_parser
; Line 1014
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	edx, DWORD PTR _field$5[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _q$3[ebp], ecx
$LN68@cff_parser:
; Line 1018
	mov	eax, 4
	imul	ecx, eax, 50
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN65@cff_parser
	mov	edx, DWORD PTR _field$5[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	push	OFFSET $SG10117
	call	_FT_Message
	add	esp, 8
$LN65@cff_parser:
	xor	ecx, ecx
	jne	SHORT $LN68@cff_parser
; Line 1023
	mov	edx, DWORD PTR _field$5[ebp]
	cmp	DWORD PTR [edx], 6
	je	SHORT $LN64@cff_parser
	cmp	DWORD PTR _num_args$6[ebp], 1
	jae	SHORT $LN64@cff_parser
; Line 1024
	jmp	$Stack_Underflow$102
$LN64@cff_parser:
; Line 1026
	mov	eax, DWORD PTR _field$5[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv170[ebp], ecx
	mov	edx, DWORD PTR tv170[ebp]
	sub	edx, 1
	mov	DWORD PTR tv170[ebp], edx
	cmp	DWORD PTR tv170[ebp], 5
	ja	$LN2@cff_parser
	mov	eax, DWORD PTR tv170[ebp]
	jmp	DWORD PTR $LN96@cff_parser[eax*4]
$LN61@cff_parser:
; Line 1031
	mov	ecx, DWORD PTR _parser$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_cff_parse_num
	add	esp, 4
	mov	DWORD PTR _val$4[ebp], eax
; Line 1032
	jmp	SHORT $Store_Number$103
$LN60@cff_parser:
; Line 1035
	mov	edx, DWORD PTR _parser$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_cff_parse_fixed
	add	esp, 4
	mov	DWORD PTR _val$4[ebp], eax
; Line 1036
	jmp	SHORT $Store_Number$103
$LN59@cff_parser:
; Line 1039
	push	3
	mov	eax, DWORD PTR _parser$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_cff_parse_fixed_scaled
	add	esp, 8
	mov	DWORD PTR _val$4[ebp], eax
$Store_Number$103:
; Line 1042
	mov	ecx, DWORD PTR _field$5[ebp]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR tv183[ebp], dl
	cmp	BYTE PTR tv183[ebp], 1
	je	SHORT $LN56@cff_parser
	cmp	BYTE PTR tv183[ebp], 2
	je	SHORT $LN55@cff_parser
	cmp	BYTE PTR tv183[ebp], 4
	je	SHORT $LN54@cff_parser
	jmp	SHORT $LN53@cff_parser
$LN56@cff_parser:
; Line 1045
	mov	eax, DWORD PTR _q$3[ebp]
	mov	cl, BYTE PTR _val$4[ebp]
	mov	BYTE PTR [eax], cl
; Line 1046
	jmp	SHORT $LN57@cff_parser
$LN55@cff_parser:
; Line 1049
	mov	edx, DWORD PTR _q$3[ebp]
	mov	ax, WORD PTR _val$4[ebp]
	mov	WORD PTR [edx], ax
; Line 1050
	jmp	SHORT $LN57@cff_parser
$LN54@cff_parser:
; Line 1053
	mov	ecx, DWORD PTR _q$3[ebp]
	mov	edx, DWORD PTR _val$4[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1054
	jmp	SHORT $LN57@cff_parser
$LN53@cff_parser:
; Line 1057
	mov	eax, DWORD PTR _q$3[ebp]
	mov	ecx, DWORD PTR _val$4[ebp]
	mov	DWORD PTR [eax], ecx
$LN57@cff_parser:
; Line 1061
	mov	edx, DWORD PTR _field$5[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv190[ebp], eax
	mov	ecx, DWORD PTR tv190[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv190[ebp], ecx
	cmp	DWORD PTR tv190[ebp], 4
	ja	$LN27@cff_parser
	mov	edx, DWORD PTR tv190[ebp]
	jmp	DWORD PTR $LN97@cff_parser[edx*4]
$LN50@cff_parser:
; Line 1064
	mov	eax, 4
	imul	ecx, eax, 50
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN46@cff_parser
	cmp	DWORD PTR _val$4[ebp], 0
	je	SHORT $LN94@cff_parser
	mov	DWORD PTR tv195[ebp], OFFSET $SG10152
	jmp	SHORT $LN95@cff_parser
$LN94@cff_parser:
	mov	DWORD PTR tv195[ebp], OFFSET $SG10153
$LN95@cff_parser:
	mov	edx, DWORD PTR tv195[ebp]
	push	edx
	push	OFFSET $SG10154
	call	_FT_Message
	add	esp, 8
$LN46@cff_parser:
	xor	eax, eax
	jne	SHORT $LN50@cff_parser
; Line 1065
	jmp	$LN51@cff_parser
$LN45@cff_parser:
; Line 1068
	mov	ecx, 4
	imul	edx, ecx, 50
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN41@cff_parser
	mov	eax, DWORD PTR _val$4[ebp]
	push	eax
	push	OFFSET $SG10160
	call	_FT_Message
	add	esp, 8
$LN41@cff_parser:
	xor	ecx, ecx
	jne	SHORT $LN45@cff_parser
; Line 1069
	jmp	$LN51@cff_parser
$LN40@cff_parser:
; Line 1072
	mov	edx, 4
	imul	eax, edx, 50
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN36@cff_parser
	mov	ecx, DWORD PTR _val$4[ebp]
	push	ecx
	push	OFFSET $SG10166
	call	_FT_Message
	add	esp, 8
$LN36@cff_parser:
	xor	edx, edx
	jne	SHORT $LN40@cff_parser
; Line 1073
	jmp	SHORT $LN51@cff_parser
$LN35@cff_parser:
; Line 1076
	mov	eax, 4
	imul	ecx, eax, 50
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN31@cff_parser
	cvtsi2sd xmm0, DWORD PTR _val$4[ebp]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10173
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN31@cff_parser:
	xor	edx, edx
	jne	SHORT $LN35@cff_parser
; Line 1077
	jmp	SHORT $LN51@cff_parser
$LN30@cff_parser:
; Line 1080
	mov	eax, 4
	imul	ecx, eax, 50
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN26@cff_parser
	cvtsi2sd xmm0, DWORD PTR _val$4[ebp]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	divsd	xmm0, QWORD PTR __real@408f400000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10180
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN26@cff_parser:
	xor	edx, edx
	jne	SHORT $LN30@cff_parser
$LN27@cff_parser:
$LN51@cff_parser:
; Line 1087
	jmp	$LN62@cff_parser
$LN24@cff_parser:
; Line 1092
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	edx, DWORD PTR _field$5[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _qcount$2[ebp], ecx
; Line 1094
	mov	eax, DWORD PTR _parser$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _data$1[ebp], eax
; Line 1097
	mov	ecx, DWORD PTR _field$5[ebp]
	mov	edx, DWORD PTR _num_args$6[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	jbe	SHORT $LN23@cff_parser
; Line 1098
	mov	eax, DWORD PTR _field$5[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _num_args$6[ebp], ecx
$LN23@cff_parser:
; Line 1100
	mov	edx, 4
	imul	eax, edx, 50
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN19@cff_parser
	push	OFFSET $SG10191
	call	_FT_Message
	add	esp, 4
$LN19@cff_parser:
	xor	ecx, ecx
	jne	SHORT $LN23@cff_parser
; Line 1103
	mov	edx, DWORD PTR _qcount$2[ebp]
	mov	al, BYTE PTR _num_args$6[ebp]
	mov	BYTE PTR [edx], al
; Line 1105
	mov	DWORD PTR _val$4[ebp], 0
$LN18@cff_parser:
; Line 1106
	cmp	DWORD PTR _num_args$6[ebp], 0
	jbe	$LN17@cff_parser
; Line 1108
	mov	ecx, DWORD PTR _data$1[ebp]
	mov	DWORD PTR tv245[ebp], ecx
	mov	edx, DWORD PTR _data$1[ebp]
	add	edx, 4
	mov	DWORD PTR _data$1[ebp], edx
	mov	eax, DWORD PTR tv245[ebp]
	push	eax
	call	_cff_parse_num
	add	esp, 4
	add	eax, DWORD PTR _val$4[ebp]
	mov	DWORD PTR _val$4[ebp], eax
; Line 1109
	mov	ecx, DWORD PTR _field$5[ebp]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR tv250[ebp], dl
	cmp	BYTE PTR tv250[ebp], 1
	je	SHORT $LN14@cff_parser
	cmp	BYTE PTR tv250[ebp], 2
	je	SHORT $LN13@cff_parser
	cmp	BYTE PTR tv250[ebp], 4
	je	SHORT $LN12@cff_parser
	jmp	SHORT $LN11@cff_parser
$LN14@cff_parser:
; Line 1112
	mov	eax, DWORD PTR _q$3[ebp]
	mov	cl, BYTE PTR _val$4[ebp]
	mov	BYTE PTR [eax], cl
; Line 1113
	jmp	SHORT $LN15@cff_parser
$LN13@cff_parser:
; Line 1116
	mov	edx, DWORD PTR _q$3[ebp]
	mov	ax, WORD PTR _val$4[ebp]
	mov	WORD PTR [edx], ax
; Line 1117
	jmp	SHORT $LN15@cff_parser
$LN12@cff_parser:
; Line 1120
	mov	ecx, DWORD PTR _q$3[ebp]
	mov	edx, DWORD PTR _val$4[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1121
	jmp	SHORT $LN15@cff_parser
$LN11@cff_parser:
; Line 1124
	mov	eax, DWORD PTR _q$3[ebp]
	mov	ecx, DWORD PTR _val$4[ebp]
	mov	DWORD PTR [eax], ecx
$LN15@cff_parser:
; Line 1127
	mov	edx, 4
	imul	eax, edx, 50
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN7@cff_parser
	mov	ecx, DWORD PTR _val$4[ebp]
	push	ecx
	push	OFFSET $SG10215
	call	_FT_Message
	add	esp, 8
$LN7@cff_parser:
	xor	edx, edx
	jne	SHORT $LN15@cff_parser
; Line 1129
	mov	eax, DWORD PTR _field$5[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	add	ecx, DWORD PTR _q$3[ebp]
	mov	DWORD PTR _q$3[ebp], ecx
; Line 1130
	mov	edx, DWORD PTR _num_args$6[ebp]
	sub	edx, 1
	mov	DWORD PTR _num_args$6[ebp], edx
; Line 1131
	jmp	$LN18@cff_parser
$LN17@cff_parser:
; Line 1133
	mov	eax, 4
	imul	ecx, eax, 50
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN3@cff_parser
	push	OFFSET $SG10220
	call	_FT_Message
	add	esp, 4
$LN3@cff_parser:
	xor	edx, edx
	jne	SHORT $LN17@cff_parser
; Line 1135
	jmp	SHORT $LN62@cff_parser
$LN2@cff_parser:
; Line 1138
	mov	esi, esp
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	mov	ecx, DWORD PTR _field$5[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 1139
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@cff_parser
; Line 1140
	jmp	SHORT $Exit$98
$LN1@cff_parser:
$LN62@cff_parser:
; Line 1142
	jmp	SHORT $Found$101
$LN69@cff_parser:
; Line 1144
	jmp	$LN71@cff_parser
$Found$101:
; Line 1151
	mov	eax, DWORD PTR _parser$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx+404], eax
$LN75@cff_parser:
; Line 1153
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 1154
	jmp	$LN91@cff_parser
$Exit$98:
; Line 1157
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN92@cff_parser
$Stack_Overflow$99:
; Line 1160
	push	OFFSET $SG10224
	push	1160					; 00000488H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 1161
	jmp	SHORT $Exit$98
$Stack_Underflow$102:
; Line 1164
	push	OFFSET $SG10225
	push	1164					; 0000048cH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 1165
	jmp	SHORT $Exit$98
$Syntax_Error$100:
; Line 1168
	push	OFFSET $SG10226
	push	1168					; 00000490H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 1169
	jmp	SHORT $Exit$98
$LN92@cff_parser:
; Line 1170
	pop	edi
	pop	esi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN96@cff_parser:
	DD	$LN61@cff_parser
	DD	$LN60@cff_parser
	DD	$LN59@cff_parser
	DD	$LN61@cff_parser
	DD	$LN61@cff_parser
	DD	$LN24@cff_parser
$LN97@cff_parser:
	DD	$LN40@cff_parser
	DD	$LN35@cff_parser
	DD	$LN30@cff_parser
	DD	$LN45@cff_parser
	DD	$LN50@cff_parser
_cff_parser_run ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_code$ = 12						; size = 4
_object$ = 16						; size = 4
_library$ = 20						; size = 4
_cff_parser_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cffparse.c
; Line 43
	push	ebp
	mov	ebp, esp
; Line 44
	push	416					; 000001a0H
	push	0
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 46
	mov	ecx, DWORD PTR _parser$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+404], ecx
; Line 47
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _code$[ebp]
	mov	DWORD PTR [eax+408], ecx
; Line 48
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR [edx+412], eax
; Line 49
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 50
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cff_parser_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -28						; size = 4
_limit$1 = -24						; size = 4
_first$2 = -20						; size = 4
_fd2$3 = -13						; size = 1
_p_limit$4 = -12					; size = 4
_p$5 = -8						; size = 4
_fd$ = -1						; size = 1
_fdselect$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_cff_fd_select_get PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 718
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 719
	mov	BYTE PTR _fd$[ebp], 0
; Line 722
	mov	eax, DWORD PTR _fdselect$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv66[ebp], cl
	cmp	BYTE PTR tv66[ebp], 0
	je	SHORT $LN9@cff_fd_sel
	cmp	BYTE PTR tv66[ebp], 3
	je	SHORT $LN8@cff_fd_sel
	jmp	$LN10@cff_fd_sel
$LN9@cff_fd_sel:
; Line 725
	mov	edx, DWORD PTR _fdselect$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	mov	dl, BYTE PTR [eax+ecx]
	mov	BYTE PTR _fd$[ebp], dl
; Line 726
	jmp	$LN10@cff_fd_sel
$LN8@cff_fd_sel:
; Line 731
	mov	eax, DWORD PTR _fdselect$[ebp]
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fdselect$[ebp]
	cmp	ecx, DWORD PTR [edx+20]
	jae	SHORT $LN7@cff_fd_sel
; Line 733
	mov	eax, DWORD PTR _fdselect$[ebp]
	mov	cl, BYTE PTR [eax+24]
	mov	BYTE PTR _fd$[ebp], cl
; Line 734
	jmp	$LN10@cff_fd_sel
$LN7@cff_fd_sel:
; Line 739
	mov	edx, DWORD PTR _fdselect$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _p$5[ebp], eax
; Line 740
	mov	ecx, DWORD PTR _fdselect$[ebp]
	mov	edx, DWORD PTR _p$5[ebp]
	add	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _p_limit$4[ebp], edx
; Line 745
	mov	eax, DWORD PTR _p$5[ebp]
	add	eax, 2
	mov	DWORD PTR _p$5[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$5[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$5[ebp]
	movzx	edx, BYTE PTR [eax+edx-2]
	or	ecx, edx
	movzx	eax, cx
	mov	DWORD PTR _first$2[ebp], eax
$LN6@cff_fd_sel:
; Line 748
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	cmp	ecx, DWORD PTR _first$2[ebp]
	jae	SHORT $LN3@cff_fd_sel
; Line 749
	jmp	$LN10@cff_fd_sel
$LN3@cff_fd_sel:
; Line 751
	mov	edx, DWORD PTR _p$5[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _fd2$3[ebp], al
	mov	ecx, DWORD PTR _p$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$5[ebp], ecx
; Line 752
	mov	edx, DWORD PTR _p$5[ebp]
	add	edx, 2
	mov	DWORD PTR _p$5[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$5[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$5[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _limit$1[ebp], edx
; Line 754
	mov	eax, DWORD PTR _glyph_index$[ebp]
	cmp	eax, DWORD PTR _limit$1[ebp]
	jae	SHORT $LN2@cff_fd_sel
; Line 756
	mov	cl, BYTE PTR _fd2$3[ebp]
	mov	BYTE PTR _fd$[ebp], cl
; Line 759
	mov	edx, DWORD PTR _fdselect$[ebp]
	mov	eax, DWORD PTR _first$2[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 760
	mov	ecx, DWORD PTR _limit$1[ebp]
	sub	ecx, DWORD PTR _first$2[ebp]
	mov	edx, DWORD PTR _fdselect$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 761
	mov	eax, DWORD PTR _fdselect$[ebp]
	mov	cl, BYTE PTR _fd2$3[ebp]
	mov	BYTE PTR [eax+24], cl
; Line 762
	jmp	SHORT $LN10@cff_fd_sel
$LN2@cff_fd_sel:
; Line 764
	mov	edx, DWORD PTR _limit$1[ebp]
	mov	DWORD PTR _first$2[ebp], edx
; Line 766
	mov	eax, DWORD PTR _p$5[ebp]
	cmp	eax, DWORD PTR _p_limit$4[ebp]
	jb	$LN6@cff_fd_sel
$LN10@cff_fd_sel:
; Line 774
	mov	al, BYTE PTR _fd$[ebp]
; Line 775
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_fd_select_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$ = -8						; size = 4
_memory$ = -4						; size = 4
_font$ = 8						; size = 4
_cff_font_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 1660
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1661
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1665
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 84					; 00000054H
	push	edx
	call	_cff_index_done
	add	esp, 4
; Line 1666
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 1208				; 000004b8H
	push	eax
	call	_cff_index_done
	add	esp, 4
; Line 1667
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	call	_cff_index_done
	add	esp, 4
; Line 1668
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 1176				; 00000498H
	push	edx
	call	_cff_index_done
	add	esp, 4
; Line 1672
	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+1896], 0
	jbe	SHORT $LN26@cff_font_d
; Line 1674
	mov	DWORD PTR _idx$[ebp], 0
	jmp	SHORT $LN25@cff_font_d
$LN24@cff_font_d:
	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx
$LN25@cff_font_d:
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR [edx+1896]
	jae	SHORT $LN22@cff_font_d
; Line 1675
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+1900]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_cff_subfont_done
	add	esp, 8
	jmp	SHORT $LN24@cff_font_d
$LN22@cff_font_d:
; Line 1678
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1900]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+edx+1900], 0
	xor	ecx, ecx
	jne	SHORT $LN22@cff_font_d
$LN26@cff_font_d:
; Line 1681
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 116				; 00000074H
	push	edx
	call	_cff_encoding_done
	add	esp, 4
; Line 1682
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 1152				; 00000480H
	push	edx
	call	_cff_charset_done
	add	esp, 8
; Line 1684
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 1324				; 0000052cH
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_cff_subfont_done
	add	esp, 8
; Line 1686
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 2924				; 00000b6cH
	push	ecx
	call	_CFF_Done_FD_Select
	add	esp, 8
$LN19@cff_font_d:
; Line 1688
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+2960]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+2960], 0
	xor	eax, eax
	jne	SHORT $LN19@cff_font_d
$LN16@cff_font_d:
; Line 1690
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+1304]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [ecx+1304], 0
	xor	edx, edx
	jne	SHORT $LN16@cff_font_d
$LN13@cff_font_d:
; Line 1691
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+1308]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+1308], 0
	xor	ecx, ecx
	jne	SHORT $LN13@cff_font_d
$LN10@cff_font_d:
; Line 1692
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+1316]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+1316], 0
	xor	eax, eax
	jne	SHORT $LN10@cff_font_d
$LN7@cff_font_d:
; Line 1693
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+1320]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [ecx+1320], 0
	xor	edx, edx
	jne	SHORT $LN7@cff_font_d
; Line 1695
	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+2976], 0
	je	SHORT $LN27@cff_font_d
; Line 1697
	mov	esi, esp
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+2972]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+2976]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@cff_font_d:
; Line 1698
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+2972]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+2972], 0
	xor	eax, eax
	jne	SHORT $LN3@cff_font_d
$LN27@cff_font_d:
; Line 1700
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_font_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv308 = -118						; size = 1
_invert$1 = -117					; size = 1
_idx$2 = -116						; size = 4
_sub$3 = -112						; size = 4
_fd_index$4 = -104					; size = 32
_subfont_index$ = -68					; size = 4
_string_index$ = -60					; size = 32
_dict$ = -24						; size = 4
_base_offset$ = -20					; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_face_index$ = 16					; size = 4
_font$ = 20						; size = 4
_pure_cff$ = 24						; size = 1
_cff_font_load PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 1431
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1446
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1453
	push	2980					; 00000ba4H
	push	0
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1454
	push	32					; 00000020H
	push	0
	lea	eax, DWORD PTR _string_index$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1456
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1457
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1458
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 1324				; 0000052cH
	mov	DWORD PTR _dict$[ebp], edx
; Line 1459
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _base_offset$[ebp], eax
; Line 1462
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	push	OFFSET ?cff_header_fields@?1??cff_font_load@@9@9
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN50@cff_font_l
; Line 1463
	jmp	$Exit$60
$LN50@cff_font_l:
; Line 1468
	mov	eax, DWORD PTR _font$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	cmp	ecx, 1
	jne	SHORT $LN47@cff_font_l
	mov	edx, DWORD PTR _font$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	cmp	eax, 4
	jl	SHORT $LN47@cff_font_l
	mov	ecx, DWORD PTR _font$[ebp]
	movzx	edx, BYTE PTR [ecx+19]
	cmp	edx, 4
	jle	SHORT $LN49@cff_font_l
$LN47@cff_font_l:
; Line 1470
	mov	eax, 4
	imul	ecx, eax, 48
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN46@cff_font_l
	push	OFFSET $SG10966
	call	_FT_Message
	add	esp, 4
$LN46@cff_font_l:
	xor	edx, edx
	jne	SHORT $LN47@cff_font_l
; Line 1471
	push	OFFSET $SG10967
	push	1471					; 000005bfH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 1472
	jmp	$Exit$60
$LN49@cff_font_l:
; Line 1476
	mov	eax, DWORD PTR _font$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	sub	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN43@cff_font_l
; Line 1477
	jmp	$Exit$60
$LN43@cff_font_l:
; Line 1490
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	call	_cff_index_init
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN41@cff_font_l
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 1208				; 000004b8H
	push	eax
	call	_cff_index_init
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN41@cff_font_l
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _string_index$[ebp]
	push	edx
	call	_cff_index_init
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN41@cff_font_l
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	call	_cff_index_init
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN41@cff_font_l
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 1320				; 00000528H
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 1316				; 00000524H
	push	eax
	lea	ecx, DWORD PTR _string_index$[ebp]
	push	ecx
	call	_cff_index_get_pointers
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN42@cff_font_l
$LN41@cff_font_l:
; Line 1491
	jmp	$Exit$60
$LN42@cff_font_l:
; Line 1493
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR _string_index$[ebp+8]
	mov	DWORD PTR [edx+1312], eax
; Line 1495
	movzx	ecx, BYTE PTR _pure_cff$[ebp]
	test	ecx, ecx
	je	SHORT $LN40@cff_font_l
; Line 1498
	mov	edx, DWORD PTR _face_index$[ebp]
	mov	DWORD PTR _subfont_index$[ebp], edx
; Line 1500
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _subfont_index$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jl	SHORT $LN39@cff_font_l
; Line 1504
	mov	edx, DWORD PTR _subfont_index$[ebp]
	push	edx
	push	OFFSET $SG10975
	call	_FT_Message
	add	esp, 8
; Line 1505
	push	OFFSET $SG10976
	push	1505					; 000005e1H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 1506
	jmp	$Exit$60
$LN39@cff_font_l:
; Line 1509
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+8], edx
; Line 1511
	jmp	SHORT $LN38@cff_font_l
$LN40@cff_font_l:
; Line 1513
	mov	DWORD PTR _subfont_index$[ebp], 0
; Line 1515
	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+28], 1
	jbe	SHORT $LN38@cff_font_l
; Line 1520
	push	OFFSET $SG10979
	call	_FT_Message
	add	esp, 4
; Line 1521
	push	OFFSET $SG10980
	push	1521					; 000005f1H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1522
	jmp	$Exit$60
$LN38@cff_font_l:
; Line 1527
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN35@cff_font_l
; Line 1528
	jmp	$Exit$60
$LN35@cff_font_l:
; Line 1531
	mov	ecx, 4
	imul	edx, ecx, 48
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN34@cff_font_l
	push	OFFSET $SG10986
	call	_FT_Message
	add	esp, 4
$LN34@cff_font_l:
	xor	eax, eax
	jne	SHORT $LN35@cff_font_l
; Line 1537
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base_offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _subfont_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 1208				; 000004b8H
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 1324				; 0000052cH
	push	eax
	call	_cff_subfont_load
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 1538
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@cff_font_l
; Line 1539
	jmp	$Exit$60
$LN31@cff_font_l:
; Line 1541
	mov	ecx, DWORD PTR _dict$[ebp]
	mov	edx, DWORD PTR _base_offset$[ebp]
	add	edx, DWORD PTR [ecx+112]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN30@cff_font_l
; Line 1542
	jmp	$Exit$60
$LN30@cff_font_l:
; Line 1544
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 1176				; 00000498H
	push	edx
	call	_cff_index_init
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1545
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN29@cff_font_l
; Line 1546
	jmp	$Exit$60
$LN29@cff_font_l:
; Line 1549
	mov	eax, DWORD PTR _dict$[ebp]
	cmp	DWORD PTR [eax+132], 65535		; 0000ffffH
	je	$LN28@cff_font_l
; Line 1552
	mov	DWORD PTR _sub$3[ebp], 0
; Line 1558
	mov	ecx, DWORD PTR _dict$[ebp]
	mov	edx, DWORD PTR _base_offset$[ebp]
	add	edx, DWORD PTR [ecx+164]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN27@cff_font_l
; Line 1559
	jmp	$Exit$60
$LN27@cff_font_l:
; Line 1561
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fd_index$4[ebp]
	push	edx
	call	_cff_index_init
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1562
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN26@cff_font_l
; Line 1563
	jmp	$Exit$60
$LN26@cff_font_l:
; Line 1565
	cmp	DWORD PTR _fd_index$4[ebp+8], 256	; 00000100H
	jbe	SHORT $LN25@cff_font_l
$LN24@cff_font_l:
; Line 1567
	mov	eax, 4
	imul	ecx, eax, 48
	cmp	DWORD PTR _ft_trace_levels[ecx], 0
	jl	SHORT $LN23@cff_font_l
	push	OFFSET $SG11004
	call	_FT_Message
	add	esp, 4
$LN23@cff_font_l:
	xor	edx, edx
	jne	SHORT $LN24@cff_font_l
; Line 1568
	jmp	$Fail_CID$61
$LN25@cff_font_l:
; Line 1572
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _fd_index$4[ebp+8]
	mov	DWORD PTR [eax+1896], ecx
; Line 1573
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _fd_index$4[ebp+8]
	push	eax
	push	0
	push	572					; 0000023cH
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _sub$3[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@cff_font_l
; Line 1574
	jmp	$Fail_CID$61
$LN20@cff_font_l:
; Line 1577
	mov	DWORD PTR _idx$2[ebp], 0
	jmp	SHORT $LN19@cff_font_l
$LN18@cff_font_l:
	mov	edx, DWORD PTR _idx$2[ebp]
	add	edx, 1
	mov	DWORD PTR _idx$2[ebp], edx
$LN19@cff_font_l:
	mov	eax, DWORD PTR _idx$2[ebp]
	cmp	eax, DWORD PTR _fd_index$4[ebp+8]
	jae	SHORT $LN17@cff_font_l
; Line 1578
	imul	ecx, DWORD PTR _idx$2[ebp], 572
	add	ecx, DWORD PTR _sub$3[ebp]
	mov	edx, DWORD PTR _idx$2[ebp]
	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+edx*4+1900], ecx
	jmp	SHORT $LN18@cff_font_l
$LN17@cff_font_l:
; Line 1581
	mov	DWORD PTR _idx$2[ebp], 0
	jmp	SHORT $LN16@cff_font_l
$LN15@cff_font_l:
	mov	ecx, DWORD PTR _idx$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$2[ebp], ecx
$LN16@cff_font_l:
	mov	edx, DWORD PTR _idx$2[ebp]
	cmp	edx, DWORD PTR _fd_index$4[ebp+8]
	jae	SHORT $LN14@cff_font_l
; Line 1583
	mov	eax, DWORD PTR _idx$2[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1900]
	mov	DWORD PTR _sub$3[ebp], edx
$LN13@cff_font_l:
; Line 1584
	mov	eax, 4
	imul	ecx, eax, 48
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN12@cff_font_l
	mov	edx, DWORD PTR _idx$2[ebp]
	push	edx
	push	OFFSET $SG11019
	call	_FT_Message
	add	esp, 8
$LN12@cff_font_l:
	xor	eax, eax
	jne	SHORT $LN13@cff_font_l
; Line 1586
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base_offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _fd_index$4[ebp]
	push	edx
	mov	eax, DWORD PTR _sub$3[ebp]
	push	eax
	call	_cff_subfont_load
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 1587
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@cff_font_l
; Line 1588
	jmp	SHORT $Fail_CID$61
$LN9@cff_font_l:
; Line 1589
	jmp	SHORT $LN15@cff_font_l
$LN14@cff_font_l:
; Line 1595
	mov	ecx, DWORD PTR _dict$[ebp]
	mov	edx, DWORD PTR _base_offset$[ebp]
	add	edx, DWORD PTR [ecx+168]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+1184]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 2924				; 00000b6cH
	push	eax
	call	_CFF_Load_FD_Select
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$Fail_CID$61:
; Line 1598
	lea	ecx, DWORD PTR _fd_index$4[ebp]
	push	ecx
	call	_cff_index_done
	add	esp, 4
; Line 1600
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@cff_font_l
; Line 1601
	jmp	$Exit$60
$LN8@cff_font_l:
; Line 1603
	jmp	SHORT $LN7@cff_font_l
$LN28@cff_font_l:
; Line 1604
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+1896], 0
$LN7@cff_font_l:
; Line 1607
	mov	eax, DWORD PTR _dict$[ebp]
	cmp	DWORD PTR [eax+112], 0
	jne	SHORT $LN6@cff_font_l
; Line 1609
	push	OFFSET $SG11024
	call	_FT_Message
	add	esp, 4
; Line 1610
	push	OFFSET $SG11025
	push	1610					; 0000064aH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1611
	jmp	$Exit$60
$LN6@cff_font_l:
; Line 1614
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+1184]
	mov	DWORD PTR [ecx+12], eax
; Line 1617
	push	0
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 1308				; 0000051cH
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 84					; 00000054H
	push	edx
	call	_cff_index_get_pointers
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1619
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@cff_font_l
; Line 1620
	jmp	$Exit$60
$LN5@cff_font_l:
; Line 1623
	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jbe	$LN4@cff_font_l
; Line 1625
	mov	ecx, DWORD PTR _dict$[ebp]
	cmp	DWORD PTR [ecx+132], 65535		; 0000ffffH
	je	SHORT $LN53@cff_font_l
	movzx	edx, BYTE PTR _pure_cff$[ebp]
	test	edx, edx
	je	SHORT $LN53@cff_font_l
	mov	BYTE PTR tv308[ebp], 1
	jmp	SHORT $LN54@cff_font_l
$LN53@cff_font_l:
	mov	BYTE PTR tv308[ebp], 0
$LN54@cff_font_l:
	mov	al, BYTE PTR tv308[ebp]
	mov	BYTE PTR _invert$1[ebp], al
; Line 1629
	movzx	ecx, BYTE PTR _invert$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	mov	eax, DWORD PTR [edx+104]
	push	eax
	mov	ecx, DWORD PTR _base_offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 1152				; 00000480H
	push	edx
	call	_cff_charset_load
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 1630
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@cff_font_l
; Line 1631
	jmp	SHORT $Exit$60
$LN3@cff_font_l:
; Line 1634
	mov	eax, DWORD PTR _dict$[ebp]
	cmp	DWORD PTR [eax+132], 65535		; 0000ffffH
	jne	SHORT $LN4@cff_font_l
; Line 1641
	mov	ecx, DWORD PTR _dict$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _base_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 1152				; 00000480H
	push	ecx
	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 116				; 00000074H
	push	edx
	call	_cff_encoding_load
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 1642
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@cff_font_l
; Line 1643
	jmp	SHORT $Exit$60
$LN4@cff_font_l:
; Line 1649
	mov	eax, DWORD PTR _subfont_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	call	_cff_index_get_name
	add	esp, 8
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+1304], eax
$Exit$60:
; Line 1652
	lea	eax, DWORD PTR _string_index$[ebp]
	push	eax
	call	_cff_index_done
	add	esp, 4
; Line 1654
	mov	eax, DWORD PTR _error$[ebp]
; Line 1655
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN59@cff_font_l
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN59@cff_font_l:
	DD	3
	DD	$LN58@cff_font_l
$LN58@cff_font_l:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN55@cff_font_l
	DD	-60					; ffffffc4H
	DD	32					; 00000020H
	DD	$LN56@cff_font_l
	DD	-104					; ffffff98H
	DD	32					; 00000020H
	DD	$LN57@cff_font_l
$LN57@cff_font_l:
	DB	102					; 00000066H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN56@cff_font_l:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN55@cff_font_l:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_font_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_charset$ = 8						; size = 4
_cid$ = 12						; size = 4
_cff_charset_cid_to_gindex PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 826
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 827
	mov	DWORD PTR _result$[ebp], 0
; Line 830
	mov	eax, DWORD PTR _charset$[ebp]
	mov	ecx, DWORD PTR _cid$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	ja	SHORT $LN1@cff_charse
; Line 831
	mov	edx, DWORD PTR _charset$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _cid$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _result$[ebp], edx
$LN1@cff_charse:
; Line 833
	mov	eax, DWORD PTR _result$[ebp]
; Line 834
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_charset_cid_to_gindex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_name$ = -48						; size = 4
_error$ = -40						; size = 4
_byte_len$ = -28					; size = 4
_bytes$ = -16						; size = 4
_memory$ = -8						; size = 4
_idx$ = -4						; size = 4
_font$ = 8						; size = 4
_element$ = 12						; size = 4
_cff_index_get_name PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 585
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 586
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _idx$[ebp], eax
; Line 587
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _memory$[ebp], eax
; Line 591
	mov	DWORD PTR _name$[ebp], 0
; Line 594
	lea	ecx, DWORD PTR _byte_len$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _element$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	call	_cff_index_access_element
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 595
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@cff_index_
; Line 596
	jmp	SHORT $Exit$10
$LN2@cff_index_:
; Line 598
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _byte_len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _name$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@cff_index_
; Line 600
	mov	edx, DWORD PTR _byte_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 601
	mov	edx, DWORD PTR _name$[ebp]
	add	edx, DWORD PTR _byte_len$[ebp]
	mov	BYTE PTR [edx], 0
$LN1@cff_index_:
; Line 603
	lea	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	call	_cff_index_forget_element
	add	esp, 8
$Exit$10:
; Line 606
	mov	eax, DWORD PTR _name$[ebp]
; Line 607
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@cff_index_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@cff_index_:
	DD	3
	DD	$LN8@cff_index_
$LN8@cff_index_:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN5@cff_index_
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN6@cff_index_
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN7@cff_index_
$LN7@cff_index_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN6@cff_index_:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN5@cff_index_:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_cff_index_get_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$1 = -4						; size = 4
_idx$ = 8						; size = 4
_pbytes$ = 12						; size = 4
_cff_index_forget_element PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 570
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 571
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@cff_index_
; Line 573
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _stream$1[ebp], edx
; Line 576
	mov	eax, DWORD PTR _pbytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$1[ebp]
	push	ecx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
$LN2@cff_index_:
; Line 578
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_index_forget_element ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pos$1 = -28						; size = 4
_off2$2 = -24						; size = 4
_off1$3 = -20						; size = 4
_stream$4 = -16						; size = 4
_error$ = -8						; size = 4
_idx$ = 8						; size = 4
_element$ = 12						; size = 4
_pbytes$ = 16						; size = 4
_pbyte_len$ = 20					; size = 4
_cff_index_access_element PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 474
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 475
	mov	DWORD PTR _error$[ebp], 0
; Line 478
	cmp	DWORD PTR _idx$[ebp], 0
	je	$LN24@cff_index_
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _element$[ebp]
	jbe	$LN24@cff_index_
; Line 481
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _stream$4[ebp], eax
; Line 482
	mov	DWORD PTR _off2$2[ebp], 0
; Line 486
	mov	ecx, DWORD PTR _idx$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	$LN23@cff_index_
; Line 488
	mov	edx, DWORD PTR _idx$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	imul	eax, DWORD PTR _element$[ebp]
	mov	DWORD PTR _pos$1[ebp], eax
; Line 491
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _pos$1[ebp]
	lea	ecx, DWORD PTR [edx+eax+3]
	push	ecx
	mov	edx, DWORD PTR _stream$4[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN22@cff_index_
; Line 492
	jmp	$Exit$30
$LN22@cff_index_:
; Line 494
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	call	_cff_index_read_offset
	add	esp, 8
	mov	DWORD PTR _off1$3[ebp], eax
; Line 495
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@cff_index_
; Line 496
	jmp	$Exit$30
$LN21@cff_index_:
; Line 498
	cmp	DWORD PTR _off1$3[ebp], 0
	je	SHORT $LN20@cff_index_
$LN19@cff_index_:
; Line 502
	mov	edx, DWORD PTR _element$[ebp]
	add	edx, 1
	mov	DWORD PTR _element$[ebp], edx
; Line 503
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	call	_cff_index_read_offset
	add	esp, 8
	mov	DWORD PTR _off2$2[ebp], eax
; Line 505
	cmp	DWORD PTR _off2$2[ebp], 0
	jne	SHORT $LN20@cff_index_
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN19@cff_index_
$LN20@cff_index_:
; Line 508
	jmp	SHORT $LN15@cff_index_
$LN23@cff_index_:
; Line 510
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _off1$3[ebp], ecx
; Line 511
	cmp	DWORD PTR _off1$3[ebp], 0
	je	SHORT $LN15@cff_index_
$LN13@cff_index_:
; Line 515
	mov	edx, DWORD PTR _element$[ebp]
	add	edx, 1
	mov	DWORD PTR _element$[ebp], edx
; Line 516
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _off2$2[ebp], eax
; Line 518
	cmp	DWORD PTR _off2$2[ebp], 0
	jne	SHORT $LN15@cff_index_
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _element$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jb	SHORT $LN13@cff_index_
$LN15@cff_index_:
; Line 525
	mov	eax, DWORD PTR _stream$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	cmp	DWORD PTR _off2$2[ebp], ecx
	ja	SHORT $LN8@cff_index_
	mov	edx, DWORD PTR _stream$4[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR _off2$2[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _idx$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jbe	SHORT $LN9@cff_index_
$LN8@cff_index_:
; Line 530
	mov	edx, DWORD PTR _stream$4[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _off2$2[ebp]
	push	edx
	push	OFFSET $SG10456
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 531
	mov	eax, DWORD PTR _stream$4[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	DWORD PTR _off2$2[ebp], edx
$LN9@cff_index_:
; Line 535
	cmp	DWORD PTR _off1$3[ebp], 0
	je	SHORT $LN7@cff_index_
	mov	eax, DWORD PTR _off2$2[ebp]
	cmp	eax, DWORD PTR _off1$3[ebp]
	jbe	SHORT $LN7@cff_index_
; Line 537
	mov	ecx, DWORD PTR _off2$2[ebp]
	sub	ecx, DWORD PTR _off1$3[ebp]
	mov	edx, DWORD PTR _pbyte_len$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 539
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN6@cff_index_
; Line 542
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _off1$3[ebp]
	lea	ecx, DWORD PTR [edx+eax-1]
	mov	edx, DWORD PTR _pbytes$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 544
	jmp	SHORT $LN5@cff_index_
$LN6@cff_index_:
; Line 548
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _off1$3[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	push	eax
	mov	ecx, DWORD PTR _stream$4[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@cff_index_
	mov	edx, DWORD PTR _pbytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _off2$2[ebp]
	sub	eax, DWORD PTR _off1$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$4[ebp]
	push	ecx
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@cff_index_
$LN3@cff_index_:
; Line 549
	jmp	SHORT $Exit$30
$LN5@cff_index_:
; Line 552
	jmp	SHORT $LN2@cff_index_
$LN7@cff_index_:
; Line 555
	mov	edx, DWORD PTR _pbytes$[ebp]
	mov	DWORD PTR [edx], 0
; Line 556
	mov	eax, DWORD PTR _pbyte_len$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@cff_index_:
; Line 559
	jmp	SHORT $Exit$30
$LN24@cff_index_:
; Line 560
	push	OFFSET $SG10467
	push	560					; 00000230H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
$Exit$30:
; Line 563
	mov	eax, DWORD PTR _error$[ebp]
; Line 564
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@cff_index_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN29@cff_index_:
	DD	1
	DD	$LN28@cff_index_
$LN28@cff_index_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN27@cff_index_
$LN27@cff_index_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_index_access_element ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_font$ = 8						; size = 4
_sid$ = 12						; size = 4
_cff_index_get_sid_string PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 624
	push	ebp
	mov	ebp, esp
	push	esi
; Line 626
	cmp	DWORD PTR _sid$[ebp], 65535		; 0000ffffH
	jne	SHORT $LN3@cff_index_
; Line 627
	xor	eax, eax
	jmp	SHORT $LN4@cff_index_
$LN3@cff_index_:
; Line 630
	cmp	DWORD PTR _sid$[ebp], 390		; 00000186H
	jbe	SHORT $LN2@cff_index_
; Line 631
	mov	eax, DWORD PTR _sid$[ebp]
	sub	eax, 391				; 00000187H
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	call	_cff_index_get_string
	add	esp, 8
	jmp	SHORT $LN4@cff_index_
$LN2@cff_index_:
; Line 634
	mov	edx, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [edx+2956], 0
	jne	SHORT $LN1@cff_index_
; Line 635
	xor	eax, eax
	jmp	SHORT $LN4@cff_index_
$LN1@cff_index_:
; Line 638
	mov	esi, esp
	mov	eax, DWORD PTR _sid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+2956]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@cff_index_:
; Line 639
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cff_index_get_sid_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -4						; size = 4
_font$ = 8						; size = 4
_element$ = 12						; size = 4
_cff_index_get_string PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 614
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 617
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _element$[ebp]
	cmp	ecx, DWORD PTR [eax+1312]
	jae	SHORT $LN3@cff_index_
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+1316]
	mov	ecx, DWORD PTR _element$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@cff_index_
$LN3@cff_index_:
	mov	DWORD PTR tv69[ebp], 0
$LN4@cff_index_:
	mov	eax, DWORD PTR tv69[ebp]
; Line 618
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_index_get_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -4						; size = 4
_charcode$ = 8						; size = 4
_cff_get_standard_encoding PROC
; File d:\mozilla\modules\freetype2\src\cff\cffload.c
; Line 184
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 186
	cmp	DWORD PTR _charcode$[ebp], 256		; 00000100H
	jae	SHORT $LN3@cff_get_st
	mov	eax, DWORD PTR _charcode$[ebp]
	movzx	ecx, WORD PTR _cff_standard_encoding[eax*2]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN4@cff_get_st
$LN3@cff_get_st:
	mov	DWORD PTR tv68[ebp], 0
$LN4@cff_get_st:
	mov	ax, WORD PTR tv68[ebp]
; Line 187
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_get_standard_encoding ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv457 = -1228						; size = 1
tv324 = -1227						; size = 1
tv321 = -1226						; size = 1
tv204 = -1225						; size = 1
_y_scale$1 = -1224					; size = 4
_x_scale$2 = -1220					; size = 4
_vec$3 = -1216						; size = 4
_cur$4 = -1212						; size = 4
_n$5 = -1208						; size = 4
_vertAdvance$6 = -1200					; size = 2
_vertBearingY$7 = -1188					; size = 2
_has_vertical_info$8 = -1177				; size = 1
_advance$9 = -1172					; size = 8
_metrics$10 = -1160					; size = 4
_cbox$11 = -1152					; size = 16
_internal$12 = -1132					; size = 4
_metrics$13 = -1124					; size = 16
_csindex$14 = -1104					; size = 4
_charstring_len$15 = -1096				; size = 4
_charstring$16 = -1084					; size = 4
_fd_index$17 = -1073					; size = 1
_sub_upm$18 = -1072					; size = 4
_top_upm$19 = -1068					; size = 4
_dummy$20 = -1060					; size = 2
_advance$21 = -1048					; size = 2
_has_vertical_info$22 = -1037				; size = 1
_metrics$23 = -1032					; size = 16
_stream$24 = -1012					; size = 4
_sfnt$25 = -1008					; size = 4
_cff_face$26 = -1004					; size = 4
_font_offset$ = -996					; size = 8
_font_matrix$ = -980					; size = 16
_cff$ = -960						; size = 4
_force_scaling$ = -955					; size = 1
_scaled$ = -954						; size = 1
_hinting$ = -953					; size = 1
_face$ = -952						; size = 4
_decoder$ = -944					; size = 932
_error$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_glyph$ = 8						; size = 4
_size$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_cff_slot_load PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 2607
	push	ebp
	mov	ebp, esp
	sub	esp, 1228				; 000004ccH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1228]
	mov	ecx, 307				; 00000133H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2610
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$[ebp], ecx
; Line 2612
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	DWORD PTR _cff$[ebp], eax
; Line 2618
	mov	BYTE PTR _force_scaling$[ebp], 0
; Line 2624
	mov	ecx, DWORD PTR _cff$[ebp]
	cmp	DWORD PTR [ecx+1456], 65535		; 0000ffffH
	je	SHORT $LN53@cff_slot_l
	mov	edx, DWORD PTR _cff$[ebp]
	cmp	DWORD PTR [edx+1164], 0
	je	SHORT $LN53@cff_slot_l
; Line 2627
	cmp	DWORD PTR _glyph_index$[ebp], 0
	je	SHORT $LN52@cff_slot_l
; Line 2630
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cff$[ebp]
	add	ecx, 1152				; 00000480H
	push	ecx
	call	_cff_charset_cid_to_gindex
	add	esp, 8
	mov	DWORD PTR _glyph_index$[ebp], eax
; Line 2631
	cmp	DWORD PTR _glyph_index$[ebp], 0
	jne	SHORT $LN52@cff_slot_l
; Line 2632
	push	OFFSET $SG12224
	push	2632					; 00000a48H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN54@cff_slot_l
$LN52@cff_slot_l:
; Line 2633
	jmp	SHORT $LN50@cff_slot_l
$LN53@cff_slot_l:
; Line 2635
	mov	edx, DWORD PTR _cff$[ebp]
	mov	eax, DWORD PTR _glyph_index$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jb	SHORT $LN50@cff_slot_l
; Line 2636
	push	OFFSET $SG12227
	push	2636					; 00000a4cH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN54@cff_slot_l
$LN50@cff_slot_l:
; Line 2638
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN48@cff_slot_l
; Line 2639
	mov	edx, DWORD PTR _load_flags$[ebp]
	or	edx, 3
	mov	DWORD PTR _load_flags$[ebp], edx
$LN48@cff_slot_l:
; Line 2641
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+164], 65536		; 00010000H
; Line 2642
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+168], 65536		; 00010000H
; Line 2643
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN47@cff_slot_l
; Line 2645
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+164], ecx
; Line 2646
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+168], ecx
$LN47@cff_slot_l:
; Line 2655
	cmp	DWORD PTR _size$[ebp], 0
	je	$LN46@cff_slot_l
; Line 2657
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cff_face$26[ebp], eax
; Line 2658
	mov	ecx, DWORD PTR _cff_face$26[ebp]
	mov	edx, DWORD PTR [ecx+532]
	mov	DWORD PTR _sfnt$25[ebp], edx
; Line 2659
	mov	eax, DWORD PTR _cff_face$26[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$24[ebp], ecx
; Line 2664
	mov	edx, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [edx+44], -1
	je	$LN46@cff_slot_l
	mov	eax, DWORD PTR _sfnt$25[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	$LN46@cff_slot_l
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 8
	jne	$LN46@cff_slot_l
; Line 2675
	mov	esi, esp
	lea	edx, DWORD PTR _metrics$23[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _stream$24[ebp]
	push	ecx
	mov	edx, DWORD PTR _load_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt$25[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 2677
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN46@cff_slot_l
; Line 2684
	xor	eax, eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	WORD PTR [ecx+110], ax
; Line 2685
	xor	edx, edx
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	WORD PTR [eax+108], dx
; Line 2687
	movzx	ecx, WORD PTR _metrics$23[ebp+2]
	shl	ecx, 6
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 2688
	movzx	eax, WORD PTR _metrics$23[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 2690
	movsx	edx, WORD PTR _metrics$23[ebp+4]
	shl	edx, 6
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 2691
	movsx	ecx, WORD PTR _metrics$23[ebp+6]
	shl	ecx, 6
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 2692
	movzx	eax, WORD PTR _metrics$23[ebp+8]
	shl	eax, 6
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 2694
	movsx	edx, WORD PTR _metrics$23[ebp+10]
	shl	edx, 6
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+44], edx
; Line 2695
	movsx	ecx, WORD PTR _metrics$23[ebp+12]
	shl	ecx, 6
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+48], ecx
; Line 2696
	movzx	eax, WORD PTR _metrics$23[ebp+14]
	shl	eax, 6
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 2698
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+72], 1651078259		; 62697473H
; Line 2700
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN43@cff_slot_l
; Line 2702
	movsx	ecx, WORD PTR _metrics$23[ebp+10]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+100], ecx
; Line 2703
	movsx	eax, WORD PTR _metrics$23[ebp+12]
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+104], eax
; Line 2705
	jmp	SHORT $LN42@cff_slot_l
$LN43@cff_slot_l:
; Line 2707
	movsx	edx, WORD PTR _metrics$23[ebp+4]
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+100], edx
; Line 2708
	movsx	ecx, WORD PTR _metrics$23[ebp+6]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+104], ecx
$LN42@cff_slot_l:
; Line 2716
	mov	esi, esp
	lea	eax, DWORD PTR _advance$21[ebp]
	push	eax
	lea	ecx, DWORD PTR _dummy$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+532]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2717
	movzx	ecx, WORD PTR _advance$21[ebp]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+56], ecx
; Line 2721
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, BYTE PTR [eax+292]
	test	ecx, ecx
	je	SHORT $LN56@cff_slot_l
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+330]
	test	eax, eax
	jle	SHORT $LN56@cff_slot_l
	mov	BYTE PTR tv204[ebp], 1
	jmp	SHORT $LN57@cff_slot_l
$LN56@cff_slot_l:
	mov	BYTE PTR tv204[ebp], 0
$LN57@cff_slot_l:
	mov	cl, BYTE PTR tv204[ebp]
	mov	BYTE PTR _has_vertical_info$22[ebp], cl
; Line 2724
	movzx	edx, BYTE PTR _has_vertical_info$22[ebp]
	test	edx, edx
	je	SHORT $LN41@cff_slot_l
; Line 2729
	mov	esi, esp
	lea	eax, DWORD PTR _advance$21[ebp]
	push	eax
	lea	ecx, DWORD PTR _dummy$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+532]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2730
	movzx	ecx, WORD PTR _advance$21[ebp]
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+60], ecx
; Line 2732
	jmp	SHORT $LN40@cff_slot_l
$LN41@cff_slot_l:
; Line 2735
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+364]
	cmp	ecx, 65535				; 0000ffffH
	je	SHORT $LN39@cff_slot_l
; Line 2737
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+434]
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+436]
	sub	eax, edx
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+60], eax
; Line 2738
	jmp	SHORT $LN40@cff_slot_l
$LN39@cff_slot_l:
; Line 2740
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+220]
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+222]
	sub	eax, edx
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN40@cff_slot_l:
; Line 2743
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN54@cff_slot_l
$LN46@cff_slot_l:
; Line 2751
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 16384				; 00004000H
	je	SHORT $LN37@cff_slot_l
; Line 2752
	push	OFFSET $SG12265
	push	2752					; 00000ac0H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN54@cff_slot_l
$LN37@cff_slot_l:
; Line 2758
	mov	eax, DWORD PTR _cff$[ebp]
	cmp	DWORD PTR [eax+1896], 0
	je	$LN36@cff_slot_l
; Line 2762
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cff$[ebp]
	add	edx, 2924				; 00000b6cH
	push	edx
	call	_cff_fd_select_get
	add	esp, 8
	mov	BYTE PTR _fd_index$17[ebp], al
; Line 2765
	movzx	eax, BYTE PTR _fd_index$17[ebp]
	mov	ecx, DWORD PTR _cff$[ebp]
	cmp	eax, DWORD PTR [ecx+1896]
	jb	SHORT $LN35@cff_slot_l
; Line 2766
	mov	edx, DWORD PTR _cff$[ebp]
	mov	eax, DWORD PTR [edx+1896]
	sub	eax, 1
	mov	BYTE PTR _fd_index$17[ebp], al
$LN35@cff_slot_l:
; Line 2768
	mov	ecx, DWORD PTR _cff$[ebp]
	mov	edx, DWORD PTR [ecx+1392]
	mov	DWORD PTR _top_upm$19[ebp], edx
; Line 2769
	movzx	eax, BYTE PTR _fd_index$17[ebp]
	mov	ecx, DWORD PTR _cff$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1900]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _sub_upm$18[ebp], eax
; Line 2772
	movzx	ecx, BYTE PTR _fd_index$17[ebp]
	mov	edx, DWORD PTR _cff$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+1900]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _font_matrix$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _font_matrix$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _font_matrix$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _font_matrix$[ebp+12], edx
; Line 2773
	movzx	eax, BYTE PTR _fd_index$17[ebp]
	mov	ecx, DWORD PTR _cff$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1900]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR _font_offset$[ebp], eax
	mov	DWORD PTR _font_offset$[ebp+4], ecx
; Line 2775
	mov	edx, DWORD PTR _top_upm$19[ebp]
	cmp	edx, DWORD PTR _sub_upm$18[ebp]
	je	SHORT $LN34@cff_slot_l
; Line 2777
	mov	eax, DWORD PTR _sub_upm$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _top_upm$19[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+164], eax
; Line 2778
	mov	edx, DWORD PTR _sub_upm$18[ebp]
	push	edx
	mov	eax, DWORD PTR _top_upm$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+168], eax
; Line 2780
	mov	BYTE PTR _force_scaling$[ebp], 1
$LN34@cff_slot_l:
; Line 2783
	jmp	SHORT $LN33@cff_slot_l
$LN36@cff_slot_l:
; Line 2785
	mov	edx, DWORD PTR _cff$[ebp]
	add	edx, 1372				; 0000055cH
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _font_matrix$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _font_matrix$[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _font_matrix$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _font_matrix$[ebp+12], ecx
; Line 2786
	mov	edx, DWORD PTR _cff$[ebp]
	mov	eax, DWORD PTR [edx+1396]
	mov	ecx, DWORD PTR [edx+1400]
	mov	DWORD PTR _font_offset$[ebp], eax
	mov	DWORD PTR _font_offset$[ebp+4], ecx
$LN33@cff_slot_l:
; Line 2789
	xor	edx, edx
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	WORD PTR [eax+110], dx
; Line 2790
	xor	ecx, ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	WORD PTR [edx+108], cx
; Line 2794
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 2
	jne	SHORT $LN58@cff_slot_l
	mov	BYTE PTR tv321[ebp], 1
	jmp	SHORT $LN59@cff_slot_l
$LN58@cff_slot_l:
	mov	BYTE PTR tv321[ebp], 0
$LN59@cff_slot_l:
	mov	cl, BYTE PTR tv321[ebp]
	mov	BYTE PTR _hinting$[ebp], cl
; Line 2795
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 1
	jne	SHORT $LN60@cff_slot_l
	mov	BYTE PTR tv324[ebp], 1
	jmp	SHORT $LN61@cff_slot_l
$LN60@cff_slot_l:
	mov	BYTE PTR tv324[ebp], 0
$LN61@cff_slot_l:
	mov	al, BYTE PTR tv324[ebp]
	mov	BYTE PTR _scaled$[ebp], al
; Line 2797
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	dl, BYTE PTR _hinting$[ebp]
	mov	BYTE PTR [ecx+160], dl
; Line 2798
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	cl, BYTE PTR _scaled$[ebp]
	mov	BYTE PTR [eax+161], cl
; Line 2799
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+72], 1869968492		; 6f75746cH
; Line 2812
	mov	eax, DWORD PTR _load_flags$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 15					; 0000000fH
	push	eax
	movzx	ecx, BYTE PTR _hinting$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_cff_decoder_init
	add	esp, 24					; 00000018H
; Line 2814
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 256				; 00000100H
	je	SHORT $LN32@cff_slot_l
; Line 2815
	mov	BYTE PTR _decoder$[ebp+753], 1
$LN32@cff_slot_l:
; Line 2818
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 1024				; 00000400H
	mov	BYTE PTR _decoder$[ebp+66], cl
; Line 2822
	lea	edx, DWORD PTR _charstring_len$15[ebp]
	push	edx
	lea	eax, DWORD PTR _charstring$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_cff_get_glyph_data
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2823
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@cff_slot_l
; Line 2824
	jmp	$Glyph_Build_Finished$79
$LN31@cff_slot_l:
; Line 2826
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_cff_decoder_prepare
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2827
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN30@cff_slot_l
; Line 2828
	jmp	$Glyph_Build_Finished$79
$LN30@cff_slot_l:
; Line 2841
	mov	eax, DWORD PTR _charstring_len$15[ebp]
	push	eax
	mov	ecx, DWORD PTR _charstring$16[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_cf2_decoder_parse_charstrings
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2845
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 164				; 000000a4H
	jne	SHORT $LN29@cff_slot_l
; Line 2850
	mov	BYTE PTR _hinting$[ebp], 0
; Line 2851
	mov	BYTE PTR _force_scaling$[ebp], 1
; Line 2852
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	dl, BYTE PTR _hinting$[ebp]
	mov	BYTE PTR [ecx+160], dl
; Line 2856
	mov	eax, DWORD PTR _charstring_len$15[ebp]
	push	eax
	mov	ecx, DWORD PTR _charstring$16[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_cf2_decoder_parse_charstrings
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$LN29@cff_slot_l:
; Line 2860
	mov	eax, DWORD PTR _charstring_len$15[ebp]
	push	eax
	lea	ecx, DWORD PTR _charstring$16[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_cff_free_glyph_data
	add	esp, 12					; 0000000cH
; Line 2862
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@cff_slot_l
; Line 2863
	jmp	$Glyph_Build_Finished$79
$LN28@cff_slot_l:
; Line 2868
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN27@cff_slot_l
; Line 2870
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [edx+136], 0
; Line 2871
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+140], 0
; Line 2873
	jmp	SHORT $Glyph_Build_Finished$79
$LN27@cff_slot_l:
; Line 2880
	mov	ecx, DWORD PTR _cff$[ebp]
	add	ecx, 1176				; 00000498H
	mov	DWORD PTR _csindex$14[ebp], ecx
; Line 2883
	mov	edx, DWORD PTR _csindex$14[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $Glyph_Build_Finished$79
; Line 2886
	mov	eax, DWORD PTR _csindex$14[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _csindex$14[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _glyph_index$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+136], edx
; Line 2887
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR _charstring_len$15[ebp]
	mov	DWORD PTR [ecx+140], edx
$Glyph_Build_Finished$79:
; Line 2893
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN24@cff_slot_l
; Line 2894
	lea	eax, DWORD PTR _decoder$[ebp]
	push	eax
	call	_cff_builder_done
	add	esp, 4
$LN24@cff_slot_l:
; Line 2903
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN23@cff_slot_l
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	cmp	DWORD PTR [edx+48], 0
	je	$LN23@cff_slot_l
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+8], 0
	je	$LN23@cff_slot_l
; Line 2908
	mov	ecx, DWORD PTR _decoder$[ebp+32]
	mov	DWORD PTR _metrics$13[ebp], ecx
; Line 2909
	mov	DWORD PTR _metrics$13[ebp+4], 0
; Line 2910
	mov	edx, DWORD PTR _decoder$[ebp+40]
	mov	DWORD PTR _metrics$13[ebp+8], edx
; Line 2911
	mov	eax, DWORD PTR _decoder$[ebp+44]
	mov	DWORD PTR _metrics$13[ebp+12], eax
; Line 2915
	mov	esi, esp
	lea	ecx, DWORD PTR _metrics$13[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 2917
	mov	eax, DWORD PTR _metrics$13[ebp]
	mov	DWORD PTR _decoder$[ebp+32], eax
; Line 2918
	mov	ecx, DWORD PTR _metrics$13[ebp+8]
	mov	DWORD PTR _decoder$[ebp+40], ecx
; Line 2919
	mov	edx, DWORD PTR _metrics$13[ebp+12]
	mov	DWORD PTR _decoder$[ebp+44], edx
$LN23@cff_slot_l:
; Line 2924
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN22@cff_slot_l
; Line 2932
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 1024				; 00000400H
	je	SHORT $LN21@cff_slot_l
; Line 2934
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR _internal$12[ebp], edx
; Line 2937
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR _decoder$[ebp+32]
	mov	DWORD PTR [eax+32], ecx
; Line 2938
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR _decoder$[ebp+744]
	mov	DWORD PTR [edx+40], eax
; Line 2939
	mov	ecx, DWORD PTR _internal$12[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _font_matrix$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _font_matrix$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _font_matrix$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _font_matrix$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
; Line 2940
	mov	ecx, DWORD PTR _internal$12[ebp]
	mov	edx, DWORD PTR _font_offset$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _font_offset$[ebp+4]
	mov	DWORD PTR [ecx+32], eax
; Line 2941
	mov	ecx, DWORD PTR _internal$12[ebp]
	mov	BYTE PTR [ecx+8], 1
; Line 2943
	jmp	$LN22@cff_slot_l
$LN21@cff_slot_l:
; Line 2946
	mov	edx, DWORD PTR _glyph$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _metrics$10[ebp], edx
; Line 2952
	mov	eax, DWORD PTR _metrics$10[ebp]
	mov	ecx, DWORD PTR _decoder$[ebp+744]
	mov	DWORD PTR [eax+16], ecx
; Line 2953
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR _decoder$[ebp+744]
	mov	DWORD PTR [edx+56], eax
; Line 2954
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	BYTE PTR [edx+8], 0
; Line 2957
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, BYTE PTR [eax+292]
	test	ecx, ecx
	je	SHORT $LN62@cff_slot_l
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+330]
	test	eax, eax
	jle	SHORT $LN62@cff_slot_l
	mov	BYTE PTR tv457[ebp], 1
	jmp	SHORT $LN63@cff_slot_l
$LN62@cff_slot_l:
	mov	BYTE PTR tv457[ebp], 0
$LN63@cff_slot_l:
	mov	cl, BYTE PTR tv457[ebp]
	mov	BYTE PTR _has_vertical_info$8[ebp], cl
; Line 2960
	movzx	edx, BYTE PTR _has_vertical_info$8[ebp]
	test	edx, edx
	je	SHORT $LN19@cff_slot_l
; Line 2962
	xor	eax, eax
	mov	WORD PTR _vertBearingY$7[ebp], ax
; Line 2963
	xor	ecx, ecx
	mov	WORD PTR _vertAdvance$6[ebp], cx
; Line 2969
	mov	esi, esp
	lea	edx, DWORD PTR _vertAdvance$6[ebp]
	push	edx
	lea	eax, DWORD PTR _vertBearingY$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	edx, DWORD PTR [ecx+112]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2970
	movsx	eax, WORD PTR _vertBearingY$7[ebp]
	mov	ecx, DWORD PTR _metrics$10[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 2971
	movzx	edx, WORD PTR _vertAdvance$6[ebp]
	mov	eax, DWORD PTR _metrics$10[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 2973
	jmp	SHORT $LN18@cff_slot_l
$LN19@cff_slot_l:
; Line 2976
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+364]
	cmp	edx, 65535				; 0000ffffH
	je	SHORT $LN17@cff_slot_l
; Line 2978
	mov	eax, DWORD PTR _face$[ebp]
	movsx	ecx, WORD PTR [eax+434]
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+436]
	sub	ecx, eax
	mov	edx, DWORD PTR _metrics$10[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 2979
	jmp	SHORT $LN18@cff_slot_l
$LN17@cff_slot_l:
; Line 2981
	mov	eax, DWORD PTR _face$[ebp]
	movsx	ecx, WORD PTR [eax+220]
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+222]
	sub	ecx, eax
	mov	edx, DWORD PTR _metrics$10[ebp]
	mov	DWORD PTR [edx+28], ecx
$LN18@cff_slot_l:
; Line 2984
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	ecx, DWORD PTR _metrics$10[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+60], edx
; Line 2986
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+72], 1869968492		; 6f75746cH
; Line 2988
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [ecx+124], 0
; Line 2989
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN15@cff_slot_l
	mov	edx, DWORD PTR _size$[ebp]
	movzx	eax, WORD PTR [edx+14]
	cmp	eax, 24					; 00000018H
	jge	SHORT $LN15@cff_slot_l
; Line 2990
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	or	edx, 256				; 00000100H
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+124], edx
$LN15@cff_slot_l:
; Line 2992
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	or	edx, 4
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR [eax+124], edx
; Line 2997
	cmp	DWORD PTR _font_matrix$[ebp], 65536	; 00010000H
	jne	SHORT $LN13@cff_slot_l
	cmp	DWORD PTR _font_matrix$[ebp+12], 65536	; 00010000H
	jne	SHORT $LN13@cff_slot_l
	cmp	DWORD PTR _font_matrix$[ebp+4], 0
	jne	SHORT $LN13@cff_slot_l
	cmp	DWORD PTR _font_matrix$[ebp+8], 0
	je	SHORT $LN14@cff_slot_l
$LN13@cff_slot_l:
; Line 2998
	lea	ecx, DWORD PTR _font_matrix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_FT_Outline_Transform
	add	esp, 8
$LN14@cff_slot_l:
; Line 3001
	cmp	DWORD PTR _font_offset$[ebp], 0
	jne	SHORT $LN11@cff_slot_l
	cmp	DWORD PTR _font_offset$[ebp+4], 0
	je	SHORT $LN12@cff_slot_l
$LN11@cff_slot_l:
; Line 3003
	mov	eax, DWORD PTR _font_offset$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _font_offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
$LN12@cff_slot_l:
; Line 3005
	mov	eax, DWORD PTR _metrics$10[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _advance$9[ebp], ecx
; Line 3006
	mov	DWORD PTR _advance$9[ebp+4], 0
; Line 3007
	lea	edx, DWORD PTR _font_matrix$[ebp]
	push	edx
	lea	eax, DWORD PTR _advance$9[ebp]
	push	eax
	call	_FT_Vector_Transform
	add	esp, 8
; Line 3008
	mov	ecx, DWORD PTR _advance$9[ebp]
	add	ecx, DWORD PTR _font_offset$[ebp]
	mov	edx, DWORD PTR _metrics$10[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 3010
	mov	DWORD PTR _advance$9[ebp], 0
; Line 3011
	mov	eax, DWORD PTR _metrics$10[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _advance$9[ebp+4], ecx
; Line 3012
	lea	edx, DWORD PTR _font_matrix$[ebp]
	push	edx
	lea	eax, DWORD PTR _advance$9[ebp]
	push	eax
	call	_FT_Vector_Transform
	add	esp, 8
; Line 3013
	mov	ecx, DWORD PTR _advance$9[ebp+4]
	add	ecx, DWORD PTR _font_offset$[ebp+4]
	mov	edx, DWORD PTR _metrics$10[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 3015
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 1
	je	SHORT $LN9@cff_slot_l
	movzx	ecx, BYTE PTR _force_scaling$[ebp]
	test	ecx, ecx
	je	$LN10@cff_slot_l
$LN9@cff_slot_l:
; Line 3019
	mov	edx, DWORD PTR _glyph$[ebp]
	add	edx, 108				; 0000006cH
	mov	DWORD PTR _cur$4[ebp], edx
; Line 3020
	mov	eax, DWORD PTR _cur$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vec$3[ebp], ecx
; Line 3021
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	DWORD PTR _x_scale$2[ebp], eax
; Line 3022
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR _y_scale$1[ebp], edx
; Line 3026
	movzx	eax, BYTE PTR _hinting$[ebp]
	test	eax, eax
	je	SHORT $LN7@cff_slot_l
	cmp	DWORD PTR _decoder$[ebp+68], 0
	jne	SHORT $LN8@cff_slot_l
$LN7@cff_slot_l:
; Line 3027
	mov	ecx, DWORD PTR _cur$4[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR _n$5[ebp], edx
	jmp	SHORT $LN6@cff_slot_l
$LN5@cff_slot_l:
	mov	eax, DWORD PTR _n$5[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$5[ebp], eax
	mov	ecx, DWORD PTR _vec$3[ebp]
	add	ecx, 8
	mov	DWORD PTR _vec$3[ebp], ecx
$LN6@cff_slot_l:
	cmp	DWORD PTR _n$5[ebp], 0
	jle	SHORT $LN8@cff_slot_l
; Line 3029
	mov	edx, DWORD PTR _x_scale$2[ebp]
	push	edx
	mov	eax, DWORD PTR _vec$3[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _vec$3[ebp]
	mov	DWORD PTR [edx], eax
; Line 3030
	mov	eax, DWORD PTR _y_scale$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _vec$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _vec$3[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 3031
	jmp	SHORT $LN5@cff_slot_l
$LN8@cff_slot_l:
; Line 3034
	mov	edx, DWORD PTR _x_scale$2[ebp]
	push	edx
	mov	eax, DWORD PTR _metrics$10[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	edx, DWORD PTR _metrics$10[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 3035
	mov	eax, DWORD PTR _y_scale$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _metrics$10[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_FT_MulFix_i386
	add	esp, 8
	mov	ecx, DWORD PTR _metrics$10[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN10@cff_slot_l:
; Line 3039
	lea	edx, DWORD PTR _cbox$11[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_Outline_Get_CBox
	add	esp, 8
; Line 3041
	mov	ecx, DWORD PTR _cbox$11[ebp+8]
	sub	ecx, DWORD PTR _cbox$11[ebp]
	mov	edx, DWORD PTR _metrics$10[ebp]
	mov	DWORD PTR [edx], ecx
; Line 3042
	mov	eax, DWORD PTR _cbox$11[ebp+12]
	sub	eax, DWORD PTR _cbox$11[ebp+4]
	mov	ecx, DWORD PTR _metrics$10[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 3044
	mov	edx, DWORD PTR _metrics$10[ebp]
	mov	eax, DWORD PTR _cbox$11[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 3045
	mov	ecx, DWORD PTR _metrics$10[ebp]
	mov	edx, DWORD PTR _cbox$11[ebp+12]
	mov	DWORD PTR [ecx+12], edx
; Line 3047
	movzx	eax, BYTE PTR _has_vertical_info$8[ebp]
	test	eax, eax
	je	SHORT $LN3@cff_slot_l
; Line 3049
	mov	ecx, DWORD PTR _metrics$10[ebp]
	mov	eax, DWORD PTR [ecx+16]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _metrics$10[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, eax
	mov	edx, DWORD PTR _metrics$10[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 3050
	jmp	SHORT $LN22@cff_slot_l
$LN3@cff_slot_l:
; Line 3052
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN22@cff_slot_l
; Line 3054
	mov	ecx, DWORD PTR _metrics$10[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _metrics$10[ebp]
	push	eax
	call	_ft_synthesize_vertical_metrics
	add	esp, 8
$LN22@cff_slot_l:
; Line 3059
	mov	eax, DWORD PTR _error$[ebp]
$LN54@cff_slot_l:
; Line 3060
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN78@cff_slot_l
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1228				; 000004ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN78@cff_slot_l:
	DD	13					; 0000000dH
	DD	$LN77@cff_slot_l
$LN77@cff_slot_l:
	DD	-944					; fffffc50H
	DD	932					; 000003a4H
	DD	$LN64@cff_slot_l
	DD	-980					; fffffc2cH
	DD	16					; 00000010H
	DD	$LN65@cff_slot_l
	DD	-996					; fffffc1cH
	DD	8
	DD	$LN66@cff_slot_l
	DD	-1032					; fffffbf8H
	DD	16					; 00000010H
	DD	$LN67@cff_slot_l
	DD	-1048					; fffffbe8H
	DD	2
	DD	$LN68@cff_slot_l
	DD	-1060					; fffffbdcH
	DD	2
	DD	$LN69@cff_slot_l
	DD	-1084					; fffffbc4H
	DD	4
	DD	$LN70@cff_slot_l
	DD	-1096					; fffffbb8H
	DD	4
	DD	$LN71@cff_slot_l
	DD	-1124					; fffffb9cH
	DD	16					; 00000010H
	DD	$LN72@cff_slot_l
	DD	-1152					; fffffb80H
	DD	16					; 00000010H
	DD	$LN73@cff_slot_l
	DD	-1172					; fffffb6cH
	DD	8
	DD	$LN74@cff_slot_l
	DD	-1188					; fffffb5cH
	DD	2
	DD	$LN75@cff_slot_l
	DD	-1200					; fffffb50H
	DD	2
	DD	$LN76@cff_slot_l
$LN76@cff_slot_l:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN75@cff_slot_l:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	89					; 00000059H
	DB	0
$LN74@cff_slot_l:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN73@cff_slot_l:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
$LN72@cff_slot_l:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
$LN71@cff_slot_l:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN70@cff_slot_l:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN69@cff_slot_l:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN68@cff_slot_l:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN67@cff_slot_l:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
$LN66@cff_slot_l:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN65@cff_slot_l:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN64@cff_slot_l:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_cff_slot_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_internal$1 = -24					; size = 4
_fd_index$2 = -17					; size = 1
_error$ = -16						; size = 4
_sub$ = -12						; size = 4
_cff$ = -8						; size = 4
_builder$ = -4						; size = 4
_decoder$ = 8						; size = 4
_size$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_cff_decoder_prepare PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 417
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 418
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR _builder$[ebp], eax
; Line 419
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+656]
	mov	DWORD PTR _cff$[ebp], eax
; Line 420
	mov	ecx, DWORD PTR _cff$[ebp]
	add	ecx, 1324				; 0000052cH
	mov	DWORD PTR _sub$[ebp], ecx
; Line 421
	mov	DWORD PTR _error$[ebp], 0
; Line 425
	mov	edx, DWORD PTR _cff$[ebp]
	cmp	DWORD PTR [edx+1896], 0
	je	$LN11@cff_decode
; Line 427
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cff$[ebp]
	add	ecx, 2924				; 00000b6cH
	push	ecx
	call	_cff_fd_select_get
	add	esp, 8
	mov	BYTE PTR _fd_index$2[ebp], al
; Line 430
	movzx	edx, BYTE PTR _fd_index$2[ebp]
	mov	eax, DWORD PTR _cff$[ebp]
	cmp	edx, DWORD PTR [eax+1896]
	jb	SHORT $LN5@cff_decode
$LN9@cff_decode:
; Line 432
	mov	ecx, 4
	imul	edx, ecx, 47
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN8@cff_decode
	push	OFFSET $SG12076
	call	_FT_Message
	add	esp, 4
$LN8@cff_decode:
	xor	eax, eax
	jne	SHORT $LN9@cff_decode
; Line 433
	push	OFFSET $SG12077
	push	433					; 000001b1H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 434
	jmp	$Exit$14
$LN5@cff_decode:
; Line 437
	mov	ecx, 4
	imul	edx, ecx, 47
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN4@cff_decode
	movzx	eax, BYTE PTR _fd_index$2[ebp]
	push	eax
	push	OFFSET $SG12083
	call	_FT_Message
	add	esp, 8
$LN4@cff_decode:
	xor	ecx, ecx
	jne	SHORT $LN5@cff_decode
; Line 439
	movzx	edx, BYTE PTR _fd_index$2[ebp]
	mov	eax, DWORD PTR _cff$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1900]
	mov	DWORD PTR _sub$[ebp], ecx
; Line 441
	mov	edx, DWORD PTR _builder$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN11@cff_decode
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN11@cff_decode
; Line 443
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _internal$1[ebp], ecx
; Line 447
	movzx	edx, BYTE PTR _fd_index$2[ebp]
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR _internal$1[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+4]
	mov	DWORD PTR [eax+72], edx
$LN11@cff_decode:
; Line 451
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _sub$[ebp]
	mov	edx, DWORD PTR [ecx+544]
	mov	DWORD PTR [eax+888], edx
; Line 452
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _sub$[ebp]
	mov	edx, DWORD PTR [ecx+568]
	mov	DWORD PTR [eax+904], edx
; Line 455
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR [eax+888]
	push	ecx
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR [eax+1368]
	push	ecx
	call	_cff_compute_bias
	add	esp, 8
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+896], eax
; Line 457
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _sub$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	DWORD PTR [eax+744], edx
; Line 458
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _sub$[ebp]
	mov	edx, DWORD PTR [ecx+532]
	mov	DWORD PTR [eax+748], edx
; Line 460
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _sub$[ebp]
	mov	DWORD PTR [eax+928], ecx
$Exit$14:
; Line 463
	mov	eax, DWORD PTR _error$[ebp]
; Line 464
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_decoder_prepare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cff$ = -4						; size = 4
_decoder$ = 8						; size = 4
_face$ = 12						; size = 4
_size$ = 16						; size = 4
_slot$ = 20						; size = 4
_hinting$ = 24						; size = 1
_hint_mode$ = 28					; size = 4
_cff_decoder_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 389
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 390
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _cff$[ebp], ecx
; Line 394
	push	932					; 000003a4H
	push	0
	mov	edx, DWORD PTR _decoder$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 397
	movzx	eax, BYTE PTR _hinting$[ebp]
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoder$[ebp]
	push	ecx
	call	_cff_builder_init
	add	esp, 20					; 00000014H
; Line 400
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _cff$[ebp]
	mov	DWORD PTR [edx+76], eax
; Line 401
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _cff$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	DWORD PTR [ecx+892], eax
; Line 402
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _cff$[ebp]
	mov	eax, DWORD PTR [edx+1308]
	mov	DWORD PTR [ecx+908], eax
; Line 405
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+892]
	push	edx
	mov	eax, DWORD PTR _cff$[ebp]
	mov	ecx, DWORD PTR [eax+1368]
	push	ecx
	call	_cff_compute_bias
	add	esp, 8
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	DWORD PTR [edx+900], eax
; Line 407
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _hint_mode$[ebp]
	mov	DWORD PTR [eax+920], ecx
; Line 408
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_decoder_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cff$1 = -20						; size = 4
_data$2 = -12						; size = 8
_face$ = 8						; size = 4
_pointer$ = 12						; size = 4
_length$ = 16						; size = 4
_cff_free_glyph_data PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 696
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 704
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN2@cff_free_g
; Line 709
	mov	edx, DWORD PTR _pointer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _data$2[ebp], eax
; Line 710
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR _data$2[ebp+4], ecx
; Line 713
	mov	esi, esp
	lea	edx, DWORD PTR _data$2[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 715
	jmp	SHORT $LN3@cff_free_g
$LN2@cff_free_g:
; Line 719
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _cff$1[ebp], ecx
; Line 722
	mov	edx, DWORD PTR _pointer$[ebp]
	push	edx
	mov	eax, DWORD PTR _cff$1[ebp]
	add	eax, 1176				; 00000498H
	push	eax
	call	_cff_index_forget_element
	add	esp, 8
$LN3@cff_free_g:
; Line 724
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@cff_free_g
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@cff_free_g:
	DD	1
	DD	$LN6@cff_free_g
$LN6@cff_free_g:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN5@cff_free_g
$LN5@cff_free_g:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_cff_free_glyph_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cff$1 = -24						; size = 4
_error$2 = -20						; size = 4
_data$3 = -12						; size = 8
_face$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_pointer$ = 16						; size = 4
_length$ = 20						; size = 4
_cff_get_glyph_data PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 661
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 665
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN2@cff_get_gl
; Line 671
	mov	esi, esp
	lea	edx, DWORD PTR _data$3[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$2[ebp], eax
; Line 674
	mov	ecx, DWORD PTR _pointer$[ebp]
	mov	edx, DWORD PTR _data$3[ebp]
	mov	DWORD PTR [ecx], edx
; Line 675
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _data$3[ebp+4]
	mov	DWORD PTR [eax], ecx
; Line 677
	mov	eax, DWORD PTR _error$2[ebp]
	jmp	SHORT $LN3@cff_get_gl
; Line 679
	jmp	SHORT $LN3@cff_get_gl
$LN2@cff_get_gl:
; Line 683
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	DWORD PTR _cff$1[ebp], eax
; Line 687
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pointer$[ebp]
	push	edx
	mov	eax, DWORD PTR _glyph_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cff$1[ebp]
	add	ecx, 1176				; 00000498H
	push	ecx
	call	_cff_index_access_element
	add	esp, 16					; 00000010H
$LN3@cff_get_gl:
; Line 689
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@cff_get_gl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@cff_get_gl:
	DD	1
	DD	$LN6@cff_get_gl
$LN6@cff_get_gl:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN5@cff_get_gl
$LN5@cff_get_gl:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_cff_get_glyph_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyph_sid$ = -8					; size = 2
_n$ = -4						; size = 4
_cff$ = 8						; size = 4
_charcode$ = 12						; size = 4
_cff_lookup_glyph_by_stdcharcode PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 636
	mov	eax, DWORD PTR _cff$[ebp]
	cmp	DWORD PTR [eax+1160], 0
	jne	SHORT $LN7@cff_lookup
; Line 637
	or	eax, -1
	jmp	SHORT $LN8@cff_lookup
$LN7@cff_lookup:
; Line 640
	cmp	DWORD PTR _charcode$[ebp], 0
	jl	SHORT $LN5@cff_lookup
	cmp	DWORD PTR _charcode$[ebp], 255		; 000000ffH
	jle	SHORT $LN6@cff_lookup
$LN5@cff_lookup:
; Line 641
	or	eax, -1
	jmp	SHORT $LN8@cff_lookup
$LN6@cff_lookup:
; Line 644
	mov	ecx, DWORD PTR _charcode$[ebp]
	push	ecx
	call	_cff_get_standard_encoding
	add	esp, 4
	mov	WORD PTR _glyph_sid$[ebp], ax
; Line 646
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@cff_lookup
$LN3@cff_lookup:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN4@cff_lookup:
	mov	eax, DWORD PTR _cff$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN2@cff_lookup
; Line 648
	mov	edx, DWORD PTR _cff$[ebp]
	mov	eax, DWORD PTR [edx+1160]
	mov	ecx, DWORD PTR _n$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	movzx	eax, WORD PTR _glyph_sid$[ebp]
	cmp	edx, eax
	jne	SHORT $LN1@cff_lookup
; Line 649
	mov	eax, DWORD PTR _n$[ebp]
	jmp	SHORT $LN8@cff_lookup
$LN1@cff_lookup:
; Line 650
	jmp	SHORT $LN3@cff_lookup
$LN2@cff_lookup:
; Line 652
	or	eax, -1
$LN8@cff_lookup:
; Line 653
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_lookup_glyph_by_stdcharcode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -24						; size = 4
_control$1 = -20					; size = 4
_p2$2 = -16						; size = 4
_p1$3 = -12						; size = 4
_first$ = -8						; size = 4
_outline$ = -4						; size = 4
_builder$ = 8						; size = 4
_cff_builder_close_contour PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 584
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 585
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _outline$[ebp], ecx
; Line 589
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN7@cff_builde
; Line 590
	jmp	$LN8@cff_builde
$LN7@cff_builde:
; Line 593
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	cmp	eax, 1
	jg	SHORT $LN10@cff_builde
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN11@cff_builde
$LN10@cff_builde:
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	edx, WORD PTR [ecx+edx*2-4]
	add	edx, 1
	mov	DWORD PTR tv77[ebp], edx
$LN11@cff_builde:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR _first$[ebp], eax
; Line 597
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	cmp	edx, 1
	jle	SHORT $LN6@cff_builde
; Line 599
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _first$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _p1$3[ebp], eax
; Line 600
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*8-8]
	mov	DWORD PTR _p2$2[ebp], edx
; Line 601
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx-1]
	mov	DWORD PTR _control$1[ebp], ecx
; Line 606
	mov	edx, DWORD PTR _p1$3[ebp]
	mov	eax, DWORD PTR _p2$2[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN6@cff_builde
	mov	edx, DWORD PTR _p1$3[ebp]
	mov	eax, DWORD PTR _p2$2[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN6@cff_builde
; Line 607
	mov	edx, DWORD PTR _control$1[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 1
	jne	SHORT $LN6@cff_builde
; Line 608
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	dx, WORD PTR [ecx+2]
	sub	dx, 1
	mov	eax, DWORD PTR _outline$[ebp]
	mov	WORD PTR [eax+2], dx
$LN6@cff_builde:
; Line 611
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	test	edx, edx
	jle	SHORT $LN8@cff_builde
; Line 615
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	sub	ecx, 1
	cmp	DWORD PTR _first$[ebp], ecx
	jne	SHORT $LN2@cff_builde
; Line 617
	mov	edx, DWORD PTR _outline$[ebp]
	mov	ax, WORD PTR [edx]
	sub	ax, 1
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [ecx], ax
; Line 618
	mov	edx, DWORD PTR _outline$[ebp]
	mov	ax, WORD PTR [edx+2]
	sub	ax, 1
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 620
	jmp	SHORT $LN8@cff_builde
$LN2@cff_builde:
; Line 622
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx+2]
	sub	eax, 1
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	WORD PTR [ecx+edx*2-2], ax
$LN8@cff_builde:
; Line 624
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_builder_close_contour ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_builder$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_cff_builder_start_point PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 564
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 565
	mov	DWORD PTR _error$[ebp], 0
; Line 569
	mov	eax, DWORD PTR _builder$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	test	ecx, ecx
	jne	SHORT $LN2@cff_builde
; Line 571
	mov	edx, DWORD PTR _builder$[ebp]
	mov	BYTE PTR [edx+64], 1
; Line 572
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_cff_builder_add_contour
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 573
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@cff_builde
; Line 574
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_cff_builder_add_point1
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$LN2@cff_builde:
; Line 577
	mov	eax, DWORD PTR _error$[ebp]
; Line 578
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_builder_start_point ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_builder$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_cff_builder_add_point1 PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 519
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 523
	push	1
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_cff_check_points
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 524
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@cff_builde
; Line 525
	push	1
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _builder$[ebp]
	push	eax
	call	_cff_builder_add_point
	add	esp, 16					; 00000010H
$LN1@cff_builde:
; Line 527
	mov	eax, DWORD PTR _error$[ebp]
; Line 528
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_builder_add_point1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv83 = -16						; size = 4
_control$1 = -12					; size = 4
_point$2 = -8						; size = 4
_outline$ = -4						; size = 4
_builder$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_flag$ = 20						; size = 1
_cff_builder_add_point PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 483
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _outline$[ebp], ecx
; Line 486
	mov	edx, DWORD PTR _builder$[ebp]
	movzx	eax, BYTE PTR [edx+65]
	test	eax, eax
	je	SHORT $LN1@cff_builde
; Line 488
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _point$2[ebp], edx
; Line 489
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _outline$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _control$1[ebp], ecx
; Line 504
	mov	eax, DWORD PTR _x$[ebp]
	sar	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _point$2[ebp]
	mov	DWORD PTR [ecx], eax
; Line 505
	mov	edx, DWORD PTR _y$[ebp]
	sar	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _point$2[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 507
	movzx	ecx, BYTE PTR _flag$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@cff_builde
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN5@cff_builde
$LN4@cff_builde:
	mov	DWORD PTR tv83[ebp], 2
$LN5@cff_builde:
	mov	edx, DWORD PTR _control$1[ebp]
	mov	al, BYTE PTR tv83[ebp]
	mov	BYTE PTR [edx], al
$LN1@cff_builde:
; Line 510
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	dx, WORD PTR [ecx+2]
	add	dx, 1
	mov	eax, DWORD PTR _outline$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 511
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_builder_add_point ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -4						; size = 4
_builder$ = 8						; size = 4
_count$ = 12						; size = 4
_cff_check_points PROC
; File d:\mozilla\modules\freetype2\src\cff\cffgload.c
; Line 471
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 472
	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN3@cff_check_
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	edx, WORD PTR [ecx+22]
	mov	eax, DWORD PTR _builder$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	eax, WORD PTR [ecx+58]
	add	edx, DWORD PTR _count$[ebp]
	add	eax, edx
	mov	ecx, DWORD PTR _builder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+4]
	ja	SHORT $LN4@cff_check_
$LN3@cff_check_:
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@cff_check_
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN5@cff_check_
$LN4@cff_check_:
	push	0
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _builder$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv82[ebp], eax
$LN5@cff_check_:
	mov	eax, DWORD PTR tv82[ebp]
; Line 473
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_check_points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_cff_driver_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 1063
	push	ebp
	mov	ebp, esp
; Line 1064
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 1065
	pop	ebp
	ret	0
_cff_driver_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_driver$ = -4						; size = 4
_module$ = 8						; size = 4
_cff_driver_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 1035
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1036
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _driver$[ebp], eax
; Line 1043
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [ecx+28], 1
; Line 1046
	mov	edx, DWORD PTR _driver$[ebp]
	mov	BYTE PTR [edx+32], 0
; Line 1048
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [edx+ecx+36], 500		; 000001f4H
; Line 1049
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [ecx+eax+36], 400		; 00000190H
; Line 1050
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [eax+edx+36], 1000		; 000003e8H
; Line 1051
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [eax+edx+36], 275		; 00000113H
; Line 1052
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [edx+ecx+36], 1667		; 00000683H
; Line 1053
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [edx+ecx+36], 275		; 00000113H
; Line 1054
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [edx+ecx+36], 2333		; 0000091dH
; Line 1055
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [edx+ecx+36], 0
; Line 1057
	xor	eax, eax
; Line 1058
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_driver_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cff$1 = -16						; size = 4
_sfnt$ = -12						; size = 4
_memory$ = -8						; size = 4
_face$ = -4						; size = 4
_cffface$ = 8						; size = 4
_cff_face_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 1005
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1006
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 1011
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN6@cff_face_d
; Line 1012
	jmp	SHORT $LN7@cff_face_d
$LN6@cff_face_d:
; Line 1014
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 1015
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	DWORD PTR _sfnt$[ebp], ecx
; Line 1017
	cmp	DWORD PTR _sfnt$[ebp], 0
	je	SHORT $LN5@cff_face_d
; Line 1018
	mov	esi, esp
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@cff_face_d:
; Line 1021
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	DWORD PTR _cff$1[ebp], eax
; Line 1024
	cmp	DWORD PTR _cff$1[ebp], 0
	je	SHORT $LN7@cff_face_d
; Line 1026
	mov	ecx, DWORD PTR _cff$1[ebp]
	push	ecx
	call	_cff_font_done
	add	esp, 4
$LN3@cff_face_d:
; Line 1027
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+656]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+656], 0
	xor	eax, eax
	jne	SHORT $LN3@cff_face_d
$LN7@cff_face_d:
; Line 1030
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_face_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv342 = -196						; size = 4
tv308 = -192						; size = 4
tv243 = -188						; size = 4
tv234 = -184						; size = 4
_clazz$1 = -180						; size = 4
_encoding$2 = -176					; size = 4
_nn$3 = -172						; size = 4
_cmap$4 = -168						; size = 4
_cmaprec$5 = -160					; size = 12
_weight$6 = -144					; size = 4
_cid_font_name$7 = -140					; size = 4
_family_name$8 = -136					; size = 4
_family$9 = -132					; size = 4
_fullp$10 = -128					; size = 4
_full$11 = -124						; size = 4
_style_name$12 = -120					; size = 4
_scaling$13 = -116					; size = 4
_temp$14 = -112						; size = 4
_upm$15 = -108						; size = 4
_offset$16 = -104					; size = 4
_matrix$17 = -100					; size = 4
_top$18 = -96						; size = 4
_sub$19 = -92						; size = 4
_temp$20 = -88						; size = 4
_upm$21 = -84						; size = 4
_offset$22 = -80					; size = 4
_matrix$23 = -76					; size = 4
_s$24 = -72						; size = 4
_idx$25 = -68						; size = 4
_i$26 = -64						; size = 4
_flags$27 = -60						; size = 4
_memory$28 = -56					; size = 4
_dict$29 = -52						; size = 4
_cff$30 = -48						; size = 4
__tmp_$31 = -44						; size = 4
_module$32 = -40					; size = 4
_library$ = -36						; size = 4
_sfnt_format$ = -30					; size = 1
_pure_cff$ = -29					; size = 1
_pshinter$ = -28					; size = 4
_psnames$ = -24						; size = 4
_sfnt$ = -20						; size = 4
_error$ = -12						; size = 4
_face$ = -4						; size = 4
_stream$ = 8						; size = 4
_cffface$ = 12						; size = 4
_face_index$ = 16					; size = 4
_num_params$ = 20					; size = 4
_params$ = 24						; size = 4
_cff_face_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 487
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 488
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 493
	mov	BYTE PTR _pure_cff$[ebp], 1
; Line 494
	mov	BYTE PTR _sfnt_format$[ebp], 0
; Line 495
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _library$[ebp], eax
; Line 499
	push	OFFSET $SG11376
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Get_Module_Interface
	add	esp, 8
	mov	DWORD PTR _sfnt$[ebp], eax
; Line 500
	cmp	DWORD PTR _sfnt$[ebp], 0
	jne	SHORT $LN92@cff_face_i
; Line 502
	push	OFFSET $SG11378
	call	_FT_Message
	add	esp, 4
; Line 503
	push	OFFSET $SG11379
	push	503					; 000001f7H
	push	11					; 0000000bH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 11					; 0000000bH
	mov	DWORD PTR _error$[ebp], eax
; Line 504
	jmp	$Exit$110
$LN92@cff_face_i:
; Line 507
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _module$32[ebp], eax
	push	OFFSET $SG11388
	mov	ecx, DWORD PTR _module$32[ebp]
	push	ecx
	call	_ft_module_get_service
	add	esp, 8
	mov	DWORD PTR __tmp_$31[ebp], eax
	mov	edx, DWORD PTR __tmp_$31[ebp]
	mov	DWORD PTR _psnames$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN92@cff_face_i
; Line 510
	push	OFFSET $SG11390
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Get_Module_Interface
	add	esp, 8
	mov	DWORD PTR _pshinter$[ebp], eax
$LN89@cff_face_i:
; Line 512
	mov	edx, 4
	imul	eax, edx, 49
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN88@cff_face_i
	push	OFFSET $SG11395
	call	_FT_Message
	add	esp, 4
$LN88@cff_face_i:
	xor	ecx, ecx
	jne	SHORT $LN89@cff_face_i
; Line 515
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN85@cff_face_i
; Line 516
	jmp	$Exit$110
$LN85@cff_face_i:
; Line 519
	mov	esi, esp
	mov	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_params$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 520
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN84@cff_face_i
; Line 522
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+148], 1330926671		; 4f54544fH
	je	SHORT $LN83@cff_face_i
$LN82@cff_face_i:
; Line 524
	mov	edx, 4
	imul	eax, edx, 49
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN81@cff_face_i
	push	OFFSET $SG11409
	call	_FT_Message
	add	esp, 4
$LN81@cff_face_i:
	xor	ecx, ecx
	jne	SHORT $LN82@cff_face_i
; Line 525
	push	OFFSET $SG11410
	push	525					; 0000020dH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 526
	jmp	$Exit$110
$LN83@cff_face_i:
; Line 530
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN78@cff_face_i
; Line 531
	xor	eax, eax
	jmp	$LN94@cff_face_i
$LN78@cff_face_i:
; Line 533
	mov	BYTE PTR _sfnt_format$[ebp], 1
; Line 537
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	1751474532				; 68656164H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 538
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN77@cff_face_i
; Line 540
	mov	BYTE PTR _pure_cff$[ebp], 0
; Line 544
	mov	esi, esp
	mov	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_params$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 545
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN76@cff_face_i
; Line 546
	jmp	$Exit$110
$LN76@cff_face_i:
; Line 548
	jmp	SHORT $LN75@cff_face_i
$LN77@cff_face_i:
; Line 551
	mov	esi, esp
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 552
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN75@cff_face_i
; Line 553
	jmp	$Exit$110
$LN75@cff_face_i:
; Line 557
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	1128678944				; 43464620H
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 558
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN73@cff_face_i
; Line 559
	jmp	$Exit$110
$LN73@cff_face_i:
; Line 561
	jmp	SHORT $LN72@cff_face_i
$LN84@cff_face_i:
; Line 564
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN71@cff_face_i
; Line 565
	jmp	$Exit$110
$LN71@cff_face_i:
; Line 566
	mov	DWORD PTR _error$[ebp], 0
$LN72@cff_face_i:
; Line 571
	mov	DWORD PTR _cff$30[ebp], 0
; Line 573
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$28[ebp], edx
; Line 578
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	2980					; 00000ba4H
	mov	ecx, DWORD PTR _memory$28[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cff$30[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN70@cff_face_i
; Line 579
	jmp	$Exit$110
$LN70@cff_face_i:
; Line 581
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _cff$30[ebp]
	mov	DWORD PTR [edx+656], eax
; Line 582
	movzx	ecx, BYTE PTR _pure_cff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cff$30[ebp]
	push	edx
	mov	eax, DWORD PTR _face_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_cff_font_load
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 583
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN69@cff_face_i
; Line 584
	jmp	$Exit$110
$LN69@cff_face_i:
; Line 586
	mov	eax, DWORD PTR _cff$30[ebp]
	mov	ecx, DWORD PTR _pshinter$[ebp]
	mov	DWORD PTR [eax+2952], ecx
; Line 587
	mov	edx, DWORD PTR _cff$30[ebp]
	mov	eax, DWORD PTR _psnames$[ebp]
	mov	DWORD PTR [edx+2956], eax
; Line 589
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	edx, DWORD PTR _face_index$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 595
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	ecx, DWORD PTR _cff$30[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+16], edx
; Line 597
	mov	eax, DWORD PTR _cff$30[ebp]
	add	eax, 1324				; 0000052cH
	mov	DWORD PTR _dict$29[ebp], eax
; Line 601
	mov	ecx, DWORD PTR _dict$29[ebp]
	cmp	DWORD PTR [ecx+132], 65535		; 0000ffffH
	jne	SHORT $LN67@cff_face_i
	cmp	DWORD PTR _psnames$[ebp], 0
	jne	SHORT $LN67@cff_face_i
; Line 606
	push	OFFSET $SG11440
	call	_FT_Message
	add	esp, 4
; Line 607
	push	OFFSET $SG11441
	push	607					; 0000025fH
	push	11					; 0000000bH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 11					; 0000000bH
	mov	DWORD PTR _error$[ebp], eax
; Line 608
	jmp	$Exit$110
$LN67@cff_face_i:
; Line 617
	mov	edx, 4
	imul	eax, edx, 49
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN66@cff_face_i
	push	OFFSET $SG11448
	call	_FT_Message
	add	esp, 4
$LN66@cff_face_i:
	xor	ecx, ecx
	jne	SHORT $LN67@cff_face_i
; Line 620
	mov	DWORD PTR _idx$25[ebp], 0
	jmp	SHORT $LN63@cff_face_i
$LN62@cff_face_i:
	mov	edx, DWORD PTR _idx$25[ebp]
	add	edx, 1
	mov	DWORD PTR _idx$25[ebp], edx
$LN63@cff_face_i:
	mov	eax, DWORD PTR _cff$30[ebp]
	mov	ecx, DWORD PTR [eax+1312]
	add	ecx, 390				; 00000186H
	cmp	DWORD PTR _idx$25[ebp], ecx
	jae	SHORT $LN61@cff_face_i
; Line 622
	mov	edx, DWORD PTR _idx$25[ebp]
	push	edx
	mov	eax, DWORD PTR _cff$30[ebp]
	push	eax
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	DWORD PTR _s$24[ebp], eax
; Line 623
	cmp	DWORD PTR _s$24[ebp], 0
	je	SHORT $LN60@cff_face_i
$LN59@cff_face_i:
; Line 624
	mov	ecx, 4
	imul	edx, ecx, 49
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN58@cff_face_i
	mov	eax, DWORD PTR _s$24[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$25[ebp]
	push	ecx
	push	OFFSET $SG11457
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN58@cff_face_i:
	xor	edx, edx
	jne	SHORT $LN59@cff_face_i
$LN60@cff_face_i:
; Line 625
	jmp	SHORT $LN62@cff_face_i
$LN61@cff_face_i:
; Line 629
	mov	eax, DWORD PTR _dict$29[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	test	ecx, ecx
	jne	SHORT $LN55@cff_face_i
; Line 630
	movzx	edx, BYTE PTR _pure_cff$[ebp]
	test	edx, edx
	je	SHORT $LN96@cff_face_i
	mov	DWORD PTR tv234[ebp], 1000		; 000003e8H
	jmp	SHORT $LN97@cff_face_i
$LN96@cff_face_i:
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+68]
	mov	DWORD PTR tv234[ebp], ecx
$LN97@cff_face_i:
	mov	edx, DWORD PTR _dict$29[ebp]
	mov	eax, DWORD PTR tv234[ebp]
	mov	DWORD PTR [edx+68], eax
$LN55@cff_face_i:
; Line 641
	mov	ecx, DWORD PTR _dict$29[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _matrix$23[ebp], ecx
; Line 642
	mov	edx, DWORD PTR _dict$29[ebp]
	add	edx, 72					; 00000048H
	mov	DWORD PTR _offset$22[ebp], edx
; Line 643
	mov	eax, DWORD PTR _dict$29[ebp]
	add	eax, 68					; 00000044H
	mov	DWORD PTR _upm$21[ebp], eax
; Line 644
	mov	ecx, DWORD PTR _matrix$23[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jge	SHORT $LN98@cff_face_i
	mov	edx, DWORD PTR _matrix$23[ebp]
	mov	eax, DWORD PTR [edx+12]
	neg	eax
	mov	DWORD PTR tv243[ebp], eax
	jmp	SHORT $LN99@cff_face_i
$LN98@cff_face_i:
	mov	ecx, DWORD PTR _matrix$23[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv243[ebp], edx
$LN99@cff_face_i:
	mov	eax, DWORD PTR tv243[ebp]
	mov	DWORD PTR _temp$20[ebp], eax
; Line 647
	cmp	DWORD PTR _temp$20[ebp], 65536		; 00010000H
	je	$LN54@cff_face_i
; Line 649
	mov	ecx, DWORD PTR _temp$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _upm$21[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _upm$21[ebp]
	mov	DWORD PTR [ecx], eax
; Line 651
	mov	edx, DWORD PTR _temp$20[ebp]
	push	edx
	mov	eax, DWORD PTR _matrix$23[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _matrix$23[ebp]
	mov	DWORD PTR [edx], eax
; Line 652
	mov	eax, DWORD PTR _temp$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _matrix$23[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _matrix$23[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 653
	mov	edx, DWORD PTR _temp$20[ebp]
	push	edx
	mov	eax, DWORD PTR _matrix$23[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _matrix$23[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 654
	mov	eax, DWORD PTR _temp$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _matrix$23[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _matrix$23[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 655
	mov	edx, DWORD PTR _temp$20[ebp]
	push	edx
	mov	eax, DWORD PTR _offset$22[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _offset$22[ebp]
	mov	DWORD PTR [edx], eax
; Line 656
	mov	eax, DWORD PTR _temp$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$22[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _offset$22[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN54@cff_face_i:
; Line 659
	mov	edx, DWORD PTR _offset$22[ebp]
	mov	eax, DWORD PTR [edx]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _offset$22[ebp]
	mov	DWORD PTR [ecx], eax
; Line 660
	mov	edx, DWORD PTR _offset$22[ebp]
	mov	eax, DWORD PTR [edx+4]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _offset$22[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 663
	mov	edx, DWORD PTR _cff$30[ebp]
	mov	eax, DWORD PTR [edx+1896]
	mov	DWORD PTR _i$26[ebp], eax
	jmp	SHORT $LN53@cff_face_i
$LN52@cff_face_i:
	mov	ecx, DWORD PTR _i$26[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$26[ebp], ecx
$LN53@cff_face_i:
	cmp	DWORD PTR _i$26[ebp], 0
	jbe	$LN51@cff_face_i
; Line 665
	mov	edx, DWORD PTR _i$26[ebp]
	mov	eax, DWORD PTR _cff$30[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1896]
	mov	DWORD PTR _sub$19[ebp], ecx
; Line 666
	mov	edx, DWORD PTR _cff$30[ebp]
	add	edx, 1324				; 0000052cH
	mov	DWORD PTR _top$18[ebp], edx
; Line 674
	mov	eax, DWORD PTR _sub$19[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	test	ecx, ecx
	je	$LN50@cff_face_i
; Line 682
	mov	edx, DWORD PTR _top$18[ebp]
	movzx	eax, BYTE PTR [edx+64]
	test	eax, eax
	je	$LN49@cff_face_i
; Line 684
	mov	ecx, DWORD PTR _top$18[ebp]
	cmp	DWORD PTR [ecx+68], 1
	jbe	SHORT $LN48@cff_face_i
	mov	edx, DWORD PTR _sub$19[ebp]
	cmp	DWORD PTR [edx+68], 1
	jbe	SHORT $LN48@cff_face_i
; Line 685
	mov	eax, DWORD PTR _top$18[ebp]
	mov	ecx, DWORD PTR _sub$19[ebp]
	mov	edx, DWORD PTR [eax+68]
	cmp	edx, DWORD PTR [ecx+68]
	jae	SHORT $LN100@cff_face_i
	mov	eax, DWORD PTR _top$18[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR tv308[ebp], ecx
	jmp	SHORT $LN101@cff_face_i
$LN100@cff_face_i:
	mov	edx, DWORD PTR _sub$19[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR tv308[ebp], eax
$LN101@cff_face_i:
	mov	ecx, DWORD PTR tv308[ebp]
	mov	DWORD PTR _scaling$13[ebp], ecx
; Line 686
	jmp	SHORT $LN47@cff_face_i
$LN48@cff_face_i:
; Line 687
	mov	DWORD PTR _scaling$13[ebp], 1
$LN47@cff_face_i:
; Line 691
	mov	edx, DWORD PTR _scaling$13[ebp]
	push	edx
	mov	eax, DWORD PTR _sub$19[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _top$18[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	_FT_Matrix_Multiply_Scaled
	add	esp, 12					; 0000000cH
; Line 694
	mov	edx, DWORD PTR _scaling$13[ebp]
	push	edx
	mov	eax, DWORD PTR _top$18[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _sub$19[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	call	_FT_Vector_Transform_Scaled
	add	esp, 12					; 0000000cH
; Line 698
	mov	edx, DWORD PTR _scaling$13[ebp]
	push	edx
	mov	eax, DWORD PTR _top$18[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _sub$19[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _sub$19[ebp]
	mov	DWORD PTR [ecx+68], eax
$LN49@cff_face_i:
; Line 701
	jmp	SHORT $LN46@cff_face_i
$LN50@cff_face_i:
; Line 703
	mov	edx, DWORD PTR _top$18[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _sub$19[ebp]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 704
	mov	eax, DWORD PTR _top$18[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [eax+76]
	mov	eax, DWORD PTR _sub$19[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	DWORD PTR [eax+76], edx
; Line 706
	mov	ecx, DWORD PTR _sub$19[ebp]
	mov	edx, DWORD PTR _top$18[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+68], eax
$LN46@cff_face_i:
; Line 709
	mov	ecx, DWORD PTR _sub$19[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _matrix$17[ebp], ecx
; Line 710
	mov	edx, DWORD PTR _sub$19[ebp]
	add	edx, 72					; 00000048H
	mov	DWORD PTR _offset$16[ebp], edx
; Line 711
	mov	eax, DWORD PTR _sub$19[ebp]
	add	eax, 68					; 00000044H
	mov	DWORD PTR _upm$15[ebp], eax
; Line 712
	mov	ecx, DWORD PTR _matrix$17[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jge	SHORT $LN102@cff_face_i
	mov	edx, DWORD PTR _matrix$17[ebp]
	mov	eax, DWORD PTR [edx+12]
	neg	eax
	mov	DWORD PTR tv342[ebp], eax
	jmp	SHORT $LN103@cff_face_i
$LN102@cff_face_i:
	mov	ecx, DWORD PTR _matrix$17[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv342[ebp], edx
$LN103@cff_face_i:
	mov	eax, DWORD PTR tv342[ebp]
	mov	DWORD PTR _temp$14[ebp], eax
; Line 714
	cmp	DWORD PTR _temp$14[ebp], 65536		; 00010000H
	je	$LN45@cff_face_i
; Line 716
	mov	ecx, DWORD PTR _temp$14[ebp]
	push	ecx
	mov	edx, DWORD PTR _upm$15[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _upm$15[ebp]
	mov	DWORD PTR [ecx], eax
; Line 718
	mov	edx, DWORD PTR _temp$14[ebp]
	push	edx
	mov	eax, DWORD PTR _matrix$17[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _matrix$17[ebp]
	mov	DWORD PTR [edx], eax
; Line 719
	mov	eax, DWORD PTR _temp$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _matrix$17[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _matrix$17[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 720
	mov	edx, DWORD PTR _temp$14[ebp]
	push	edx
	mov	eax, DWORD PTR _matrix$17[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _matrix$17[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 721
	mov	eax, DWORD PTR _temp$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _matrix$17[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _matrix$17[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 722
	mov	edx, DWORD PTR _temp$14[ebp]
	push	edx
	mov	eax, DWORD PTR _offset$16[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _offset$16[ebp]
	mov	DWORD PTR [edx], eax
; Line 723
	mov	eax, DWORD PTR _temp$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$16[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _offset$16[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN45@cff_face_i:
; Line 726
	mov	edx, DWORD PTR _offset$16[ebp]
	mov	eax, DWORD PTR [edx]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _offset$16[ebp]
	mov	DWORD PTR [ecx], eax
; Line 727
	mov	edx, DWORD PTR _offset$16[ebp]
	mov	eax, DWORD PTR [edx+4]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _offset$16[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 728
	jmp	$LN52@cff_face_i
$LN51@cff_face_i:
; Line 730
	movzx	edx, BYTE PTR _pure_cff$[ebp]
	test	edx, edx
	je	$LN44@cff_face_i
; Line 732
	mov	DWORD PTR _style_name$12[ebp], 0
; Line 736
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	ecx, DWORD PTR _cff$30[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
; Line 739
	mov	eax, DWORD PTR _dict$29[ebp]
	cmp	DWORD PTR [eax+132], 65535		; 0000ffffH
	je	SHORT $LN43@cff_face_i
; Line 740
	mov	ecx, DWORD PTR _cff$30[ebp]
	mov	edx, DWORD PTR [ecx+1168]
	add	edx, 1
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 741
	jmp	SHORT $LN42@cff_face_i
$LN43@cff_face_i:
; Line 742
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	edx, DWORD PTR _cff$30[ebp]
	mov	eax, DWORD PTR [edx+1184]
	mov	DWORD PTR [ecx+16], eax
$LN42@cff_face_i:
; Line 745
	mov	ecx, DWORD PTR _dict$29[ebp]
	mov	edx, DWORD PTR [ecx+84]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR [eax+52], edx
; Line 746
	mov	ecx, DWORD PTR _dict$29[ebp]
	mov	edx, DWORD PTR [ecx+88]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR [eax+56], edx
; Line 748
	mov	ecx, DWORD PTR _dict$29[ebp]
	mov	edx, DWORD PTR [ecx+92]
	add	edx, 65535				; 0000ffffH
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR [eax+60], edx
; Line 749
	mov	ecx, DWORD PTR _dict$29[ebp]
	mov	edx, DWORD PTR [ecx+96]
	add	edx, 65535				; 0000ffffH
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR [eax+64], edx
; Line 751
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	edx, DWORD PTR _dict$29[ebp]
	mov	ax, WORD PTR [edx+68]
	mov	WORD PTR [ecx+68], ax
; Line 753
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	ax, WORD PTR [edx+64]
	mov	WORD PTR [ecx+70], ax
; Line 754
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	ax, WORD PTR [edx+56]
	mov	WORD PTR [ecx+72], ax
; Line 756
	mov	ecx, DWORD PTR _cffface$[ebp]
	movzx	edx, WORD PTR [ecx+68]
	imul	eax, edx, 12
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	WORD PTR [edx+74], ax
; Line 757
	mov	eax, DWORD PTR _cffface$[ebp]
	movsx	ecx, WORD PTR [eax+74]
	mov	edx, DWORD PTR _cffface$[ebp]
	movsx	eax, WORD PTR [edx+70]
	mov	edx, DWORD PTR _cffface$[ebp]
	movsx	edx, WORD PTR [edx+72]
	sub	eax, edx
	cmp	ecx, eax
	jge	SHORT $LN41@cff_face_i
; Line 758
	mov	eax, DWORD PTR _cffface$[ebp]
	movsx	ecx, WORD PTR [eax+70]
	mov	edx, DWORD PTR _cffface$[ebp]
	movsx	eax, WORD PTR [edx+72]
	sub	ecx, eax
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	WORD PTR [edx+74], cx
$LN41@cff_face_i:
; Line 761
	mov	eax, DWORD PTR _dict$29[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	WORD PTR [edx+80], cx
; Line 763
	mov	eax, DWORD PTR _dict$29[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	WORD PTR [edx+82], cx
; Line 766
	mov	eax, DWORD PTR _face_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cff$30[ebp]
	push	ecx
	call	_cff_index_get_name
	add	esp, 8
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 767
	mov	eax, DWORD PTR _cffface$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN40@cff_face_i
; Line 770
	mov	ecx, DWORD PTR _dict$29[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _cff$30[ebp]
	push	eax
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	DWORD PTR _full$11[ebp], eax
; Line 771
	mov	ecx, DWORD PTR _full$11[ebp]
	mov	DWORD PTR _fullp$10[ebp], ecx
; Line 772
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _family$9[ebp], eax
; Line 773
	mov	DWORD PTR _family_name$8[ebp], 0
; Line 776
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_remove_subset_prefix
	add	esp, 4
; Line 778
	mov	eax, DWORD PTR _dict$29[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN39@cff_face_i
; Line 781
	mov	ecx, DWORD PTR _dict$29[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _cff$30[ebp]
	push	eax
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	DWORD PTR _family_name$8[ebp], eax
; Line 782
	cmp	DWORD PTR _family_name$8[ebp], 0
	je	SHORT $LN39@cff_face_i
; Line 783
	mov	ecx, DWORD PTR _family_name$8[ebp]
	mov	DWORD PTR _family$9[ebp], ecx
$LN39@cff_face_i:
; Line 788
	cmp	DWORD PTR _full$11[ebp], 0
	je	$LN37@cff_face_i
	cmp	DWORD PTR _family$9[ebp], 0
	je	$LN37@cff_face_i
$LN36@cff_face_i:
; Line 790
	mov	edx, DWORD PTR _fullp$10[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN37@cff_face_i
; Line 793
	mov	ecx, DWORD PTR _fullp$10[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _family$9[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN34@cff_face_i
; Line 795
	mov	edx, DWORD PTR _family$9[ebp]
	add	edx, 1
	mov	DWORD PTR _family$9[ebp], edx
; Line 796
	mov	eax, DWORD PTR _fullp$10[ebp]
	add	eax, 1
	mov	DWORD PTR _fullp$10[ebp], eax
; Line 797
	jmp	SHORT $LN36@cff_face_i
$LN34@cff_face_i:
; Line 801
	mov	ecx, DWORD PTR _fullp$10[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN32@cff_face_i
	mov	eax, DWORD PTR _fullp$10[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN33@cff_face_i
$LN32@cff_face_i:
; Line 803
	mov	edx, DWORD PTR _fullp$10[ebp]
	add	edx, 1
	mov	DWORD PTR _fullp$10[ebp], edx
; Line 804
	jmp	SHORT $LN36@cff_face_i
$LN33@cff_face_i:
; Line 808
	mov	eax, DWORD PTR _family$9[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN30@cff_face_i
	mov	edx, DWORD PTR _family$9[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN31@cff_face_i
$LN30@cff_face_i:
; Line 810
	mov	ecx, DWORD PTR _family$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _family$9[ebp], ecx
; Line 811
	jmp	$LN36@cff_face_i
$LN31@cff_face_i:
; Line 814
	mov	edx, DWORD PTR _family$9[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN29@cff_face_i
	mov	ecx, DWORD PTR _fullp$10[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN29@cff_face_i
; Line 820
	mov	eax, DWORD PTR _fullp$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$28[ebp]
	push	ecx
	call	_cff_strcpy
	add	esp, 8
	mov	DWORD PTR _style_name$12[ebp], eax
; Line 823
	mov	edx, DWORD PTR _style_name$12[ebp]
	push	edx
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_remove_style
	add	esp, 8
$LN29@cff_face_i:
; Line 825
	jmp	SHORT $LN37@cff_face_i
; Line 826
	jmp	$LN36@cff_face_i
$LN37@cff_face_i:
; Line 829
	jmp	SHORT $LN28@cff_face_i
$LN40@cff_face_i:
; Line 833
	mov	edx, DWORD PTR _dict$29[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _cff$30[ebp]
	push	ecx
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	DWORD PTR _cid_font_name$7[ebp], eax
; Line 837
	cmp	DWORD PTR _cid_font_name$7[ebp], 0
	je	SHORT $LN28@cff_face_i
; Line 838
	mov	edx, DWORD PTR _cid_font_name$7[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$28[ebp]
	push	eax
	call	_cff_strcpy
	add	esp, 8
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN28@cff_face_i:
; Line 841
	cmp	DWORD PTR _style_name$12[ebp], 0
	je	SHORT $LN26@cff_face_i
; Line 842
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	eax, DWORD PTR _style_name$12[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 843
	jmp	SHORT $LN25@cff_face_i
$LN26@cff_face_i:
; Line 845
	push	OFFSET $SG11517
	mov	ecx, DWORD PTR _memory$28[ebp]
	push	ecx
	call	_cff_strcpy
	add	esp, 8
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR [edx+24], eax
$LN25@cff_face_i:
; Line 853
	mov	DWORD PTR _flags$27[ebp], 2065		; 00000811H
; Line 855
	movzx	eax, BYTE PTR _sfnt_format$[ebp]
	test	eax, eax
	je	SHORT $LN24@cff_face_i
; Line 856
	mov	ecx, DWORD PTR _flags$27[ebp]
	or	ecx, 8
	mov	DWORD PTR _flags$27[ebp], ecx
$LN24@cff_face_i:
; Line 859
	mov	edx, DWORD PTR _dict$29[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	SHORT $LN23@cff_face_i
; Line 860
	mov	ecx, DWORD PTR _flags$27[ebp]
	or	ecx, 4
	mov	DWORD PTR _flags$27[ebp], ecx
$LN23@cff_face_i:
; Line 869
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, DWORD PTR _flags$27[ebp]
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 875
	mov	DWORD PTR _flags$27[ebp], 0
; Line 877
	mov	edx, DWORD PTR _dict$29[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN22@cff_face_i
; Line 878
	mov	eax, DWORD PTR _flags$27[ebp]
	or	eax, 1
	mov	DWORD PTR _flags$27[ebp], eax
$LN22@cff_face_i:
; Line 882
	mov	ecx, DWORD PTR _dict$29[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _cff$30[ebp]
	push	eax
	call	_cff_index_get_sid_string
	add	esp, 8
	mov	DWORD PTR _weight$6[ebp], eax
; Line 885
	cmp	DWORD PTR _weight$6[ebp], 0
	je	SHORT $LN21@cff_face_i
; Line 887
	push	OFFSET $SG11525
	mov	ecx, DWORD PTR _weight$6[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@cff_face_i
	push	OFFSET $SG11526
	mov	edx, DWORD PTR _weight$6[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@cff_face_i
$LN19@cff_face_i:
; Line 888
	mov	eax, DWORD PTR _flags$27[ebp]
	or	eax, 2
	mov	DWORD PTR _flags$27[ebp], eax
$LN21@cff_face_i:
; Line 892
	mov	ecx, DWORD PTR _flags$27[ebp]
	and	ecx, 2
	jne	SHORT $LN18@cff_face_i
	mov	edx, DWORD PTR _cffface$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN18@cff_face_i
; Line 894
	mov	esi, esp
	push	4
	push	OFFSET $SG11530
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN16@cff_face_i
	mov	esi, esp
	push	5
	push	OFFSET $SG11531
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN18@cff_face_i
$LN16@cff_face_i:
; Line 895
	mov	ecx, DWORD PTR _flags$27[ebp]
	or	ecx, 2
	mov	DWORD PTR _flags$27[ebp], ecx
$LN18@cff_face_i:
; Line 897
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	eax, DWORD PTR _flags$27[ebp]
	mov	DWORD PTR [edx+12], eax
$LN44@cff_face_i:
; Line 904
	mov	ecx, DWORD PTR _dict$29[ebp]
	cmp	DWORD PTR [ecx+132], 65535		; 0000ffffH
	jne	SHORT $LN15@cff_face_i
; Line 905
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 512				; 00000200H
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN15@cff_face_i:
; Line 908
	mov	edx, DWORD PTR _dict$29[ebp]
	cmp	DWORD PTR [edx+132], 65535		; 0000ffffH
	je	SHORT $LN14@cff_face_i
	movzx	eax, BYTE PTR _pure_cff$[ebp]
	test	eax, eax
	je	SHORT $LN14@cff_face_i
; Line 909
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 4096				; 00001000H
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN14@cff_face_i:
; Line 924
	mov	ecx, DWORD PTR _cff$30[ebp]
	add	ecx, 116				; 00000074H
	mov	DWORD PTR _encoding$2[ebp], ecx
; Line 927
	mov	DWORD PTR _nn$3[ebp], 0
	jmp	SHORT $LN13@cff_face_i
$LN12@cff_face_i:
	mov	edx, DWORD PTR _nn$3[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$3[ebp], edx
$LN13@cff_face_i:
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	ecx, DWORD PTR _nn$3[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jae	SHORT $LN11@cff_face_i
; Line 929
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _nn$3[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _cmap$4[ebp], edx
; Line 933
	mov	eax, DWORD PTR _cmap$4[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 3
	jne	SHORT $LN10@cff_face_i
	mov	edx, DWORD PTR _cmap$4[ebp]
	movzx	eax, WORD PTR [edx+10]
	cmp	eax, 1
	jne	SHORT $LN10@cff_face_i
; Line 934
	jmp	$Skip_Unicode$111
$LN10@cff_face_i:
; Line 937
	mov	ecx, DWORD PTR _cmap$4[ebp]
	movzx	edx, WORD PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LN9@cff_face_i
; Line 938
	jmp	$Skip_Unicode$111
$LN9@cff_face_i:
; Line 939
	jmp	SHORT $LN12@cff_face_i
$LN11@cff_face_i:
; Line 943
	movzx	eax, BYTE PTR _pure_cff$[ebp]
	test	eax, eax
	je	SHORT $LN8@cff_face_i
	mov	ecx, DWORD PTR _cff$30[ebp]
	cmp	DWORD PTR [ecx+1456], 65535		; 0000ffffH
	je	SHORT $LN8@cff_face_i
; Line 944
	jmp	$Exit$110
$LN8@cff_face_i:
; Line 947
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR _cmaprec$5[ebp], edx
; Line 948
	mov	eax, 3
	mov	WORD PTR _cmaprec$5[ebp+8], ax
; Line 949
	mov	ecx, 1
	mov	WORD PTR _cmaprec$5[ebp+10], cx
; Line 950
	mov	DWORD PTR _cmaprec$5[ebp+4], 1970170211	; 756e6963H
; Line 952
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _nn$3[ebp], eax
; Line 955
	push	0
	lea	ecx, DWORD PTR _cmaprec$5[ebp]
	push	ecx
	push	0
	push	OFFSET _cff_cmap_unicode_class_rec
	call	_FT_CMap_New
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 957
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@cff_face_i
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 163				; 000000a3H
	je	SHORT $LN7@cff_face_i
; Line 958
	jmp	$Exit$110
$LN7@cff_face_i:
; Line 959
	mov	DWORD PTR _error$[ebp], 0
; Line 962
	mov	eax, DWORD PTR _cffface$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jne	SHORT $Skip_Unicode$111
	mov	ecx, DWORD PTR _cffface$[ebp]
	mov	edx, DWORD PTR _nn$3[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	je	SHORT $Skip_Unicode$111
; Line 963
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _cffface$[ebp]
	mov	eax, DWORD PTR _nn$3[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+92], ecx
$Skip_Unicode$111:
; Line 966
	mov	edx, DWORD PTR _encoding$2[ebp]
	cmp	DWORD PTR [edx+8], 0
	jbe	$Exit$110
; Line 971
	mov	eax, DWORD PTR _cffface$[ebp]
	mov	DWORD PTR _cmaprec$5[ebp], eax
; Line 972
	mov	ecx, 7
	mov	WORD PTR _cmaprec$5[ebp+8], cx
; Line 974
	mov	edx, DWORD PTR _encoding$2[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN4@cff_face_i
; Line 976
	xor	eax, eax
	mov	WORD PTR _cmaprec$5[ebp+10], ax
; Line 977
	mov	DWORD PTR _cmaprec$5[ebp+4], 1094995778	; 41444f42H
; Line 978
	mov	DWORD PTR _clazz$1[ebp], OFFSET _cff_cmap_encoding_class_rec
	jmp	SHORT $LN3@cff_face_i
$LN4@cff_face_i:
; Line 980
	mov	ecx, DWORD PTR _encoding$2[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN2@cff_face_i
; Line 982
	mov	edx, 1
	mov	WORD PTR _cmaprec$5[ebp+10], dx
; Line 983
	mov	DWORD PTR _cmaprec$5[ebp+4], 1094992453	; 41444245H
; Line 984
	mov	DWORD PTR _clazz$1[ebp], OFFSET _cff_cmap_encoding_class_rec
; Line 986
	jmp	SHORT $LN3@cff_face_i
$LN2@cff_face_i:
; Line 988
	mov	eax, 2
	mov	WORD PTR _cmaprec$5[ebp+10], ax
; Line 989
	mov	DWORD PTR _cmaprec$5[ebp+4], 1094992451	; 41444243H
; Line 990
	mov	DWORD PTR _clazz$1[ebp], OFFSET _cff_cmap_encoding_class_rec
$LN3@cff_face_i:
; Line 993
	push	0
	lea	ecx, DWORD PTR _cmaprec$5[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _clazz$1[ebp]
	push	edx
	call	_FT_CMap_New
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$Exit$110:
; Line 999
	mov	eax, DWORD PTR _error$[ebp]
$LN94@cff_face_i:
; Line 1000
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN109@cff_face_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN109@cff_face_i:
	DD	2
	DD	$LN108@cff_face_i
$LN108@cff_face_i:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN106@cff_face_i
	DD	-160					; ffffff60H
	DD	12					; 0000000cH
	DD	$LN107@cff_face_i
$LN107@cff_face_i:
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN106@cff_face_i:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_face_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_funcs$1 = -20						; size = 4
_module$2 = -16						; size = 4
_pshinter$ = -12					; size = 4
_font$ = -8						; size = 4
_face$ = -4						; size = 4
_slot$ = 8						; size = 4
_cff_slot_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 351
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 352
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$[ebp], ecx
; Line 353
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	DWORD PTR _font$[ebp], eax
; Line 354
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+2952]
	mov	DWORD PTR _pshinter$[ebp], edx
; Line 357
	cmp	DWORD PTR _pshinter$[ebp], 0
	je	SHORT $LN2@cff_slot_i
; Line 363
	push	OFFSET $SG11296
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _module$2[ebp], eax
; Line 364
	cmp	DWORD PTR _module$2[ebp], 0
	je	SHORT $LN2@cff_slot_i
; Line 369
	mov	esi, esp
	mov	ecx, DWORD PTR _module$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _pshinter$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _funcs$1[ebp], eax
; Line 370
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _funcs$1[ebp]
	mov	DWORD PTR [edx+36], eax
$LN2@cff_slot_i:
; Line 374
	xor	eax, eax
; Line 375
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_slot_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_slot$ = 8						; size = 4
_cff_slot_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 344
	push	ebp
	mov	ebp, esp
; Line 345
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR [ecx+36], 0
; Line 346
	pop	ebp
	ret	0
_cff_slot_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_y_scale$1 = -44					; size = 4
_x_scale$2 = -40					; size = 4
_sub_upm$3 = -36					; size = 4
_sub$4 = -32						; size = 4
_i$5 = -28						; size = 4
_top_upm$6 = -24					; size = 4
_internal$7 = -20					; size = 4
_font$8 = -16						; size = 4
_face$9 = -12						; size = 4
_funcs$ = -8						; size = 4
_cffsize$ = -4						; size = 4
_size$ = 8						; size = 4
_strike_index$ = 12					; size = 4
_cff_size_select PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 212
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 213
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _cffsize$[ebp], eax
; Line 217
	mov	ecx, DWORD PTR _cffsize$[ebp]
	mov	edx, DWORD PTR _strike_index$[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 219
	mov	eax, DWORD PTR _strike_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_Select_Metrics
	add	esp, 8
; Line 221
	mov	eax, DWORD PTR _cffsize$[ebp]
	push	eax
	call	_cff_size_get_globals_funcs
	add	esp, 4
	mov	DWORD PTR _funcs$[ebp], eax
; Line 223
	cmp	DWORD PTR _funcs$[ebp], 0
	je	$LN6@cff_size_s
; Line 225
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$9[ebp], edx
; Line 226
	mov	eax, DWORD PTR _face$9[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _font$8[ebp], ecx
; Line 227
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _internal$7[ebp], eax
; Line 229
	mov	ecx, DWORD PTR _font$8[ebp]
	mov	edx, DWORD PTR [ecx+1392]
	mov	DWORD PTR _top_upm$6[ebp], edx
; Line 235
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _internal$7[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _funcs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 237
	mov	edx, DWORD PTR _font$8[ebp]
	mov	eax, DWORD PTR [edx+1896]
	mov	DWORD PTR _i$5[ebp], eax
	jmp	SHORT $LN5@cff_size_s
$LN4@cff_size_s:
	mov	ecx, DWORD PTR _i$5[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$5[ebp], ecx
$LN5@cff_size_s:
	cmp	DWORD PTR _i$5[ebp], 0
	jbe	$LN6@cff_size_s
; Line 239
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR _font$8[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1896]
	mov	DWORD PTR _sub$4[ebp], ecx
; Line 240
	mov	edx, DWORD PTR _sub$4[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _sub_upm$3[ebp], eax
; Line 244
	mov	ecx, DWORD PTR _top_upm$6[ebp]
	cmp	ecx, DWORD PTR _sub_upm$3[ebp]
	je	SHORT $LN2@cff_size_s
; Line 246
	mov	edx, DWORD PTR _sub_upm$3[ebp]
	push	edx
	mov	eax, DWORD PTR _top_upm$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _x_scale$2[ebp], eax
; Line 247
	mov	eax, DWORD PTR _sub_upm$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _top_upm$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _y_scale$1[ebp], eax
; Line 249
	jmp	SHORT $LN1@cff_size_s
$LN2@cff_size_s:
; Line 251
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _x_scale$2[ebp], edx
; Line 252
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _y_scale$1[ebp], ecx
$LN1@cff_size_s:
; Line 256
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _y_scale$1[ebp]
	push	edx
	mov	eax, DWORD PTR _x_scale$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$5[ebp]
	mov	edx, DWORD PTR _internal$7[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _funcs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 257
	jmp	$LN4@cff_size_s
$LN6@cff_size_s:
; Line 260
	xor	eax, eax
; Line 261
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_size_select ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_y_scale$1 = -64					; size = 4
_x_scale$2 = -60					; size = 4
_sub_upm$3 = -56					; size = 4
_sub$4 = -52						; size = 4
_i$5 = -48						; size = 4
_top_upm$6 = -44					; size = 4
_internal$7 = -40					; size = 4
_font$8 = -36						; size = 4
_cffface$9 = -32					; size = 4
_strike_index$10 = -24					; size = 4
_sfnt$11 = -16						; size = 4
_cffface$12 = -12					; size = 4
_funcs$ = -8						; size = 4
_cffsize$ = -4						; size = 4
_size$ = 8						; size = 4
_req$ = 12						; size = 4
_cff_size_request PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 269
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 270
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _cffsize$[ebp], eax
; Line 276
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 2
	je	SHORT $LN9@cff_size_r
; Line 278
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cffface$12[ebp], edx
; Line 279
	mov	eax, DWORD PTR _cffface$12[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	DWORD PTR _sfnt$11[ebp], ecx
; Line 283
	mov	esi, esp
	lea	edx, DWORD PTR _strike_index$10[ebp]
	push	edx
	mov	eax, DWORD PTR _req$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cffface$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt$11[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN8@cff_size_r
; Line 284
	mov	ecx, DWORD PTR _cffsize$[ebp]
	mov	DWORD PTR [ecx+44], -1
; Line 285
	jmp	SHORT $LN9@cff_size_r
$LN8@cff_size_r:
; Line 286
	mov	edx, DWORD PTR _strike_index$10[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_cff_size_select
	add	esp, 8
	jmp	$LN10@cff_size_r
$LN9@cff_size_r:
; Line 291
	mov	ecx, DWORD PTR _req$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_Request_Metrics
	add	esp, 8
; Line 293
	mov	ecx, DWORD PTR _cffsize$[ebp]
	push	ecx
	call	_cff_size_get_globals_funcs
	add	esp, 4
	mov	DWORD PTR _funcs$[ebp], eax
; Line 295
	cmp	DWORD PTR _funcs$[ebp], 0
	je	$LN6@cff_size_r
; Line 297
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cffface$9[ebp], eax
; Line 298
	mov	ecx, DWORD PTR _cffface$9[ebp]
	mov	edx, DWORD PTR [ecx+656]
	mov	DWORD PTR _font$8[ebp], edx
; Line 299
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _internal$7[ebp], ecx
; Line 301
	mov	edx, DWORD PTR _font$8[ebp]
	mov	eax, DWORD PTR [edx+1392]
	mov	DWORD PTR _top_upm$6[ebp], eax
; Line 307
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _internal$7[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _funcs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 309
	mov	eax, DWORD PTR _font$8[ebp]
	mov	ecx, DWORD PTR [eax+1896]
	mov	DWORD PTR _i$5[ebp], ecx
	jmp	SHORT $LN5@cff_size_r
$LN4@cff_size_r:
	mov	edx, DWORD PTR _i$5[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$5[ebp], edx
$LN5@cff_size_r:
	cmp	DWORD PTR _i$5[ebp], 0
	jbe	$LN6@cff_size_r
; Line 311
	mov	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR _font$8[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1896]
	mov	DWORD PTR _sub$4[ebp], edx
; Line 312
	mov	eax, DWORD PTR _sub$4[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _sub_upm$3[ebp], ecx
; Line 316
	mov	edx, DWORD PTR _top_upm$6[ebp]
	cmp	edx, DWORD PTR _sub_upm$3[ebp]
	je	SHORT $LN2@cff_size_r
; Line 318
	mov	eax, DWORD PTR _sub_upm$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _top_upm$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _x_scale$2[ebp], eax
; Line 319
	mov	ecx, DWORD PTR _sub_upm$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _top_upm$6[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _y_scale$1[ebp], eax
; Line 321
	jmp	SHORT $LN1@cff_size_r
$LN2@cff_size_r:
; Line 323
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _x_scale$2[ebp], eax
; Line 324
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _y_scale$1[ebp], edx
$LN1@cff_size_r:
; Line 328
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _y_scale$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_scale$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR _internal$7[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _funcs$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 329
	jmp	$LN4@cff_size_r
$LN6@cff_size_r:
; Line 332
	xor	eax, eax
$LN10@cff_size_r:
; Line 333
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@cff_size_r
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@cff_size_r:
	DD	1
	DD	$LN13@cff_size_r
$LN13@cff_size_r:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN12@cff_size_r
$LN12@cff_size_r:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_cff_size_request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$1 = -24						; size = 4
_funcs$2 = -20						; size = 4
_internal$ = -16					; size = 4
_font$ = -12						; size = 4
_face$ = -8						; size = 4
_size$ = -4						; size = 4
_cffsize$ = 8						; size = 4
_cff_size_done PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 77
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 78
	mov	eax, DWORD PTR _cffsize$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 79
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 80
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	DWORD PTR _font$[ebp], ecx
; Line 81
	mov	edx, DWORD PTR _cffsize$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _internal$[ebp], eax
; Line 84
	cmp	DWORD PTR _internal$[ebp], 0
	je	SHORT $LN6@cff_size_d
; Line 89
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_cff_size_get_globals_funcs
	add	esp, 4
	mov	DWORD PTR _funcs$2[ebp], eax
; Line 90
	cmp	DWORD PTR _funcs$2[ebp], 0
	je	SHORT $LN6@cff_size_d
; Line 95
	mov	esi, esp
	mov	edx, DWORD PTR _internal$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _funcs$2[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 97
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+1896]
	mov	DWORD PTR _i$1[ebp], ecx
	jmp	SHORT $LN3@cff_size_d
$LN2@cff_size_d:
	mov	edx, DWORD PTR _i$1[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN3@cff_size_d:
	cmp	DWORD PTR _i$1[ebp], 0
	jbe	SHORT $LN6@cff_size_d
; Line 98
	mov	esi, esp
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _internal$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _funcs$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@cff_size_d
$LN6@cff_size_d:
; Line 103
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cff_size_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sub$1 = -252						; size = 4
_i$2 = -248						; size = 4
_memory$3 = -244					; size = 4
_priv$4 = -236						; size = 196
_internal$5 = -36					; size = 4
_font$6 = -32						; size = 4
_face$7 = -28						; size = 4
_funcs$ = -24						; size = 4
_error$ = -16						; size = 4
_size$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cffsize$ = 8						; size = 4
_cff_size_init PROC
; File d:\mozilla\modules\freetype2\src\cff\cffobjs.c
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 159
	mov	eax, DWORD PTR _cffsize$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 160
	mov	DWORD PTR _error$[ebp], 0
; Line 161
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_cff_size_get_globals_funcs
	add	esp, 4
	mov	DWORD PTR _funcs$[ebp], eax
; Line 164
	cmp	DWORD PTR _funcs$[ebp], 0
	je	$LN7@cff_size_i
; Line 166
	mov	edx, DWORD PTR _cffsize$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _face$7[ebp], eax
; Line 167
	mov	ecx, DWORD PTR _face$7[ebp]
	mov	edx, DWORD PTR [ecx+656]
	mov	DWORD PTR _font$6[ebp], edx
; Line 168
	mov	DWORD PTR _internal$5[ebp], 0
; Line 171
	mov	eax, DWORD PTR _cffsize$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$3[ebp], edx
; Line 176
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	1028					; 00000404H
	mov	ecx, DWORD PTR _memory$3[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _internal$5[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@cff_size_i
; Line 177
	jmp	$Exit$14
$LN6@cff_size_i:
; Line 179
	lea	edx, DWORD PTR _priv$4[ebp]
	push	edx
	mov	eax, DWORD PTR _font$6[ebp]
	add	eax, 1324				; 0000052cH
	push	eax
	call	_cff_make_private_dict
	add	esp, 8
; Line 181
	mov	ecx, DWORD PTR _internal$5[ebp]
	mov	esi, esp
	push	ecx
	lea	edx, DWORD PTR _priv$4[ebp]
	push	edx
	mov	eax, DWORD PTR _cffsize$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR _funcs$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 182
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@cff_size_i
; Line 183
	jmp	$Exit$14
$LN5@cff_size_i:
; Line 185
	mov	edx, DWORD PTR _font$6[ebp]
	mov	eax, DWORD PTR [edx+1896]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN4@cff_size_i
$LN3@cff_size_i:
	mov	ecx, DWORD PTR _i$2[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN4@cff_size_i:
	cmp	DWORD PTR _i$2[ebp], 0
	jbe	SHORT $LN2@cff_size_i
; Line 187
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _font$6[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1896]
	mov	DWORD PTR _sub$1[ebp], ecx
; Line 190
	lea	edx, DWORD PTR _priv$4[ebp]
	push	edx
	mov	eax, DWORD PTR _sub$1[ebp]
	push	eax
	call	_cff_make_private_dict
	add	esp, 8
; Line 192
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _internal$5[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _priv$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _cffsize$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _funcs$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 193
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@cff_size_i
; Line 194
	jmp	SHORT $Exit$14
$LN1@cff_size_i:
; Line 195
	jmp	$LN3@cff_size_i
$LN2@cff_size_i:
; Line 197
	mov	ecx, DWORD PTR _cffsize$[ebp]
	mov	edx, DWORD PTR _internal$5[ebp]
	mov	DWORD PTR [ecx+40], edx
$LN7@cff_size_i:
; Line 200
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+44], -1
$Exit$14:
; Line 203
	mov	eax, DWORD PTR _error$[ebp]
; Line 204
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@cff_size_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@cff_size_i:
	DD	2
	DD	$LN12@cff_size_i
$LN12@cff_size_i:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN10@cff_size_i
	DD	-236					; ffffff14H
	DD	196					; 000000c4H
	DD	$LN11@cff_size_i
$LN11@cff_size_i:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	0
$LN10@cff_size_i:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_cff_size_init ENDP
_TEXT	ENDS
END
