; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\winfonts\winfnt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_winfnt_driver_class
CONST	SEGMENT
_winfnt_service_rec DD FLAT:_winfnt_get_header
_winfnt_services DD FLAT:$SG8246
	DD	FLAT:$SG8247
	DD	FLAT:$SG8248
	DD	FLAT:_winfnt_service_rec
	DD	00H
	DD	00H
_winmz_header_fields DB 04H
	DB	00H
	DW	040H
	DB	0eH
	DB	02H
	DW	00H
	DB	019H
	DB	03aH
	DW	00H
	DB	012H
	DB	02H
	DW	02H
	DB	00H
	DB	00H
	DW	00H
_winfnt_driver_class DD 0201H
	DD	01cH
	DD	FLAT:$SG8259
	DD	010000H
	DD	020000H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_winfnt_get_service
	DD	098H
	DD	02cH
	DD	0a0H
	DD	FLAT:_FNT_Face_Init
	DD	FLAT:_FNT_Face_Done
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_FNT_Load_Glyph
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_FNT_Size_Request
	DD	FLAT:_FNT_Size_Select
_winne_header_fields DB 04H
	DB	00H
	DW	028H
	DB	0eH
	DB	02H
	DW	00H
	DB	019H
	DB	022H
	DW	00H
	DB	0eH
	DB	02H
	DW	02H
	DB	0eH
	DB	02H
	DW	04H
	DB	00H
	DB	00H
	DW	00H
_winpe32_header_fields DB 04H
	DB	00H
	DW	0f8H
	DB	012H
	DB	04H
	DW	00H
	DB	0eH
	DB	02H
	DW	04H
	DB	0eH
	DB	02H
	DW	06H
	DB	019H
	DB	0cH
	DW	00H
	DB	0eH
	DB	02H
	DW	08H
	DB	019H
	DB	02H
	DW	00H
	DB	0eH
	DB	02H
	DW	0aH
	DB	019H
	DB	06eH
	DW	00H
	DB	012H
	DB	04H
	DW	0cH
	DB	012H
	DB	04H
	DW	010H
	DB	019H
	DB	068H
	DW	00H
	DB	00H
	DB	00H
	DW	00H
_winpe32_section_fields DB 04H
	DB	00H
	DW	028H
	DB	018H
	DB	08H
	DW	00H
	DB	019H
	DB	04H
	DW	00H
	DB	012H
	DB	04H
	DW	08H
	DB	012H
	DB	04H
	DW	0cH
	DB	012H
	DB	04H
	DW	010H
	DB	019H
	DB	010H
	DW	00H
	DB	00H
	DB	00H
	DW	00H
_winpe_rsrc_dir_fields DB 04H
	DB	00H
	DW	010H
	DB	012H
	DB	04H
	DW	00H
	DB	012H
	DB	04H
	DW	04H
	DB	0eH
	DB	02H
	DW	08H
	DB	0eH
	DB	02H
	DW	0aH
	DB	0eH
	DB	02H
	DW	0cH
	DB	0eH
	DB	02H
	DW	0eH
	DB	00H
	DB	00H
	DW	00H
_winpe_rsrc_dir_entry_fields DB 04H
	DB	00H
	DW	08H
	DB	012H
	DB	04H
	DW	00H
	DB	012H
	DB	04H
	DW	04H
	DB	00H
	DB	00H
	DW	00H
_winpe_rsrc_data_entry_fields DB 04H
	DB	00H
	DW	010H
	DB	012H
	DB	04H
	DW	00H
	DB	012H
	DB	04H
	DW	04H
	DB	012H
	DB	04H
	DW	08H
	DB	012H
	DB	04H
	DW	0cH
	DB	00H
	DB	00H
	DW	00H
_fnt_cmap_class DD FLAT:_fnt_cmap_class_rec
_winfnt_header_fields DB 04H
	DB	00H
	DW	094H
	DB	0eH
	DB	02H
	DW	00H
	DB	012H
	DB	04H
	DW	04H
	DB	018H
	DB	03cH
	DW	08H
	DB	0eH
	DB	02H
	DW	044H
	DB	0eH
	DB	02H
	DW	046H
	DB	0eH
	DB	02H
	DW	048H
	DB	0eH
	DB	02H
	DW	04aH
	DB	0eH
	DB	02H
	DW	04cH
	DB	0eH
	DB	02H
	DW	04eH
	DB	0eH
	DB	02H
	DW	050H
	DB	08H
	DB	01H
	DW	052H
	DB	08H
	DB	01H
	DW	053H
	DB	08H
	DB	01H
	DW	054H
	DB	0eH
	DB	02H
	DW	056H
	DB	08H
	DB	01H
	DW	058H
	DB	0eH
	DB	02H
	DW	05aH
	DB	0eH
	DB	02H
	DW	05cH
	DB	08H
	DB	01H
	DW	05eH
	DB	0eH
	DB	02H
	DW	060H
	DB	0eH
	DB	02H
	DW	062H
	DB	08H
	DB	01H
	DW	064H
	DB	08H
	DB	01H
	DW	065H
	DB	08H
	DB	01H
	DW	066H
	DB	08H
	DB	01H
	DW	067H
	DB	0eH
	DB	02H
	DW	068H
	DB	012H
	DB	04H
	DW	06cH
	DB	012H
	DB	04H
	DW	070H
	DB	012H
	DB	04H
	DW	074H
	DB	012H
	DB	04H
	DW	078H
	DB	08H
	DB	01H
	DW	07cH
	DB	012H
	DB	04H
	DW	080H
	DB	0eH
	DB	02H
	DW	084H
	DB	0eH
	DB	02H
	DW	086H
	DB	0eH
	DB	02H
	DW	088H
	DB	012H
	DB	02H
	DW	08aH
	DB	018H
	DB	010H
	DW	08cH
	DB	00H
	DB	00H
	DW	00H
_fnt_cmap_class_rec DD 018H
	DD	FLAT:_fnt_cmap_init
	DD	00H
	DD	FLAT:_fnt_cmap_char_index
	DD	FLAT:_fnt_cmap_char_next
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
_DATA	SEGMENT
$SG8208	DB	'invalid FNT offset', 0aH, 00H
$SG8209	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG8220	DB	'invalid bitmap width', 0aH, 00H
	ORG $+2
$SG8221	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG8246	DB	'xf86-driver-name', 00H
	ORG $+3
$SG8247	DB	'Windows FNT', 00H
$SG8248	DB	'winfonts', 00H
	ORG $+3
$SG8259	DB	'winfonts', 00H
	ORG $+3
$SG7710	DB	'  not a Windows FNT file', 0aH, 00H
	ORG $+2
$SG7711	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7718	DB	'  not a Windows FNT file', 0aH, 00H
	ORG $+2
$SG7719	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7726	DB	'[can''t handle vector FNT fonts]', 0aH, 00H
	ORG $+3
$SG7727	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7755	DB	'MZ signature found', 0aH, 00H
$SG7768	DB	'NE signature found', 0aH, 00H
$SG7790	DB	'this file doesn''t contain any FNT resources', 0aH, 00H
	ORG $+3
$SG7791	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7797	DB	'invalid number of faces', 0aH, 00H
	ORG $+3
$SG7798	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7800	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7835	DB	'PE signature found', 0aH, 00H
$SG7843	DB	'magic %04lx, machine %02x, number_of_sections %u, size_o'
	DB	'f_optional_header %02x', 0aH, 'magic32 %02x, rsrc_virtual_add'
	DB	'ress %04lx, rsrc_size %04lx', 0aH, 00H
	ORG $+2
$SG7850	DB	'this file has an invalid PE header', 0aH, 00H
$SG7851	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7860	DB	'name %.8s, va %04lx, size %04lx, offset %04lx', 0aH, 00H
	ORG $+1
$SG7867	DB	'this file doesn''t contain any resources', 0aH, 00H
	ORG $+3
$SG7868	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7873	DB	'found resources section %.8s', 0aH, 00H
	ORG $+2
$SG7884	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7895	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7906	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7915	DB	'found font #%lu, offset %04lx, size %04lx, cp %lu', 0aH, 00H
	ORG $+1
$SG7924	DB	'font #%lu load error %d', 0aH, 00H
	ORG $+3
$SG7930	DB	'font #%lu successfully loaded', 0aH, 00H
	ORG $+1
$SG7936	DB	'this file doesn''t contain any RT_FONT resources', 0aH, 00H
	ORG $+3
$SG7937	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG7939	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG8028	DB	'Windows FNT driver', 0aH, 00H
$SG8037	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG8063	DB	'use pixel_height as the nominal height', 0aH, 00H
$SG8075	DB	'invalid number of glyphs', 0aH, 00H
	ORG $+2
$SG8076	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG8082	DB	'invalid family name offset', 0aH, 00H
$SG8083	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG8090	DB	'Regular', 00H
$SG8094	DB	'Bold Italic', 00H
$SG8097	DB	'Bold', 00H
	ORG $+3
$SG8101	DB	'Italic', 00H
	ORG $+1
$SG8133	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG8157	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG8163	DB	'..\..\..\src\winfonts\winfnt.c', 00H
	ORG $+1
$SG8168	DB	'FNT_Load_Glyph: glyph index %d', 0aH, 00H
$SG8177	DB	'invalid FNT offset', 0aH, 00H
$SG8178	DB	'..\..\..\src\winfonts\winfnt.c', 00H
_DATA	ENDS
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_FT_MulDiv:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_ft_service_list_lookup:PROC
EXTRN	_FT_CMap_New:PROC
EXTRN	_FT_Select_Metrics:PROC
EXTRN	_ft_synthesize_vertical_metrics:PROC
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Pos:PROC
EXTRN	_FT_Stream_EnterFrame:PROC
EXTRN	_FT_Stream_ExitFrame:PROC
EXTRN	_FT_Stream_ExtractFrame:PROC
EXTRN	_FT_Stream_ReleaseFrame:PROC
EXTRN	_FT_Stream_GetUShortLE:PROC
EXTRN	_FT_Stream_ReadFields:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_module$ = 8						; size = 4
_service_id$ = 12					; size = 4
_winfnt_get_service PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 1120
	push	ebp
	mov	ebp, esp
; Line 1121
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _module$[ebp], eax
; Line 1123
	mov	ecx, DWORD PTR _service_id$[ebp]
	push	ecx
	push	OFFSET _winfnt_services
	call	_ft_service_list_lookup
	add	esp, 8
; Line 1124
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_winfnt_get_service ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_font$ = -4						; size = 4
_face$ = 8						; size = 4
_aheader$ = 12						; size = 4
_winfnt_get_header PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 1089
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1090
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _font$[ebp], ecx
; Line 1093
	mov	esi, DWORD PTR _font$[ebp]
	add	esi, 4
	mov	ecx, 39					; 00000027H
	mov	edi, DWORD PTR _aheader$[ebp]
	rep movsd
; Line 1095
	xor	eax, eax
; Line 1096
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_winfnt_get_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv139 = -76						; size = 4
tv132 = -72						; size = 4
tv129 = -68						; size = 4
tv94 = -61						; size = 1
_limit$1 = -60						; size = 4
_write$2 = -56						; size = 4
_column$3 = -52						; size = 4
_pitch$4 = -48						; size = 4
_memory$5 = -44						; size = 4
_new_format$ = -37					; size = 1
_offset$ = -36						; size = 4
_bitmap$ = -32						; size = 4
_len$ = -28						; size = 4
_p$ = -24						; size = 4
_error$ = -16						; size = 4
_font$ = -8						; size = 4
_face$ = -4						; size = 4
_slot$ = 8						; size = 4
_size$ = 12						; size = 4
_glyph_index$ = 16					; size = 4
_load_flags$ = 20					; size = 4
_FNT_Load_Glyph PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 962
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 963
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 965
	mov	DWORD PTR _error$[ebp], 0
; Line 968
	mov	edx, DWORD PTR _slot$[ebp]
	add	edx, 76					; 0000004cH
	mov	DWORD PTR _bitmap$[ebp], edx
; Line 972
	mov	eax, DWORD PTR _load_flags$[ebp]
	mov	DWORD PTR _load_flags$[ebp], eax
; Line 975
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN33@FNT_Load_G
; Line 977
	push	OFFSET $SG8157
	push	977					; 000003d1H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	mov	DWORD PTR _error$[ebp], eax
; Line 978
	jmp	$Exit$47
$LN33@FNT_Load_G:
; Line 981
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR _font$[ebp], edx
; Line 984
	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN31@FNT_Load_G
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN30@FNT_Load_G
$LN31@FNT_Load_G:
; Line 986
	push	OFFSET $SG8163
	push	986					; 000003daH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 987
	jmp	$Exit$47
$LN30@FNT_Load_G:
; Line 990
	mov	edx, 4
	imul	eax, edx, 61
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN29@FNT_Load_G
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	push	OFFSET $SG8168
	call	_FT_Message
	add	esp, 8
$LN29@FNT_Load_G:
	xor	edx, edx
	jne	SHORT $LN30@FNT_Load_G
; Line 992
	cmp	DWORD PTR _glyph_index$[ebp], 0
	jbe	SHORT $LN26@FNT_Load_G
; Line 993
	mov	eax, DWORD PTR _glyph_index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _glyph_index$[ebp], eax
; Line 994
	jmp	SHORT $LN25@FNT_Load_G
$LN26@FNT_Load_G:
; Line 995
	mov	ecx, DWORD PTR _font$[ebp]
	movzx	edx, BYTE PTR [ecx+106]
	mov	DWORD PTR _glyph_index$[ebp], edx
$LN25@FNT_Load_G:
; Line 997
	mov	eax, DWORD PTR _font$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	cmp	ecx, 768				; 00000300H
	jne	SHORT $LN36@FNT_Load_G
	mov	BYTE PTR tv94[ebp], 1
	jmp	SHORT $LN37@FNT_Load_G
$LN36@FNT_Load_G:
	mov	BYTE PTR tv94[ebp], 0
$LN37@FNT_Load_G:
	mov	dl, BYTE PTR tv94[ebp]
	mov	BYTE PTR _new_format$[ebp], dl
; Line 998
	movzx	eax, BYTE PTR _new_format$[ebp]
	test	eax, eax
	je	SHORT $LN38@FNT_Load_G
	mov	DWORD PTR tv129[ebp], 6
	jmp	SHORT $LN39@FNT_Load_G
$LN38@FNT_Load_G:
	mov	DWORD PTR tv129[ebp], 4
$LN39@FNT_Load_G:
	mov	ecx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _len$[ebp], ecx
; Line 1001
	movzx	edx, BYTE PTR _new_format$[ebp]
	test	edx, edx
	je	SHORT $LN40@FNT_Load_G
	mov	DWORD PTR tv132[ebp], 148		; 00000094H
	jmp	SHORT $LN41@FNT_Load_G
$LN40@FNT_Load_G:
	mov	DWORD PTR tv132[ebp], 118		; 00000076H
$LN41@FNT_Load_G:
	mov	eax, DWORD PTR _len$[ebp]
	imul	eax, DWORD PTR _glyph_index$[ebp]
	add	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 1003
	movzx	ecx, BYTE PTR _new_format$[ebp]
	test	ecx, ecx
	je	SHORT $LN42@FNT_Load_G
	mov	DWORD PTR tv139[ebp], 4
	jmp	SHORT $LN43@FNT_Load_G
$LN42@FNT_Load_G:
	mov	DWORD PTR tv139[ebp], 2
$LN43@FNT_Load_G:
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 2
	sub	eax, DWORD PTR tv139[ebp]
	cmp	DWORD PTR _offset$[ebp], eax
	jb	SHORT $LN24@FNT_Load_G
$LN23@FNT_Load_G:
; Line 1005
	mov	ecx, 4
	imul	edx, ecx, 61
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN22@FNT_Load_G
	push	OFFSET $SG8177
	call	_FT_Message
	add	esp, 4
$LN22@FNT_Load_G:
	xor	eax, eax
	jne	SHORT $LN23@FNT_Load_G
; Line 1006
	push	OFFSET $SG8178
	push	1006					; 000003eeH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1007
	jmp	$Exit$47
$LN24@FNT_Load_G:
; Line 1010
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	add	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 1012
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-2]
	or	eax, edx
	cwde
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1015
	movzx	edx, BYTE PTR _new_format$[ebp]
	test	edx, edx
	je	SHORT $LN19@FNT_Load_G
; Line 1016
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _offset$[ebp], ecx
; Line 1017
	jmp	SHORT $LN18@FNT_Load_G
$LN19@FNT_Load_G:
; Line 1018
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-2]
	or	ecx, eax
	movzx	ecx, cx
	mov	DWORD PTR _offset$[ebp], ecx
$LN18@FNT_Load_G:
; Line 1020
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN17@FNT_Load_G
$LN16@FNT_Load_G:
; Line 1022
	mov	ecx, 4
	imul	edx, ecx, 61
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN15@FNT_Load_G
	push	OFFSET $SG8208
	call	_FT_Message
	add	esp, 4
$LN15@FNT_Load_G:
	xor	eax, eax
	jne	SHORT $LN16@FNT_Load_G
; Line 1023
	push	OFFSET $SG8209
	push	1023					; 000003ffH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1024
	jmp	$Exit$47
$LN17@FNT_Load_G:
; Line 1028
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	add	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 1032
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$5[ebp], edx
; Line 1033
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 7
	shr	ecx, 3
	mov	DWORD PTR _pitch$4[ebp], ecx
; Line 1038
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR _pitch$4[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 1039
	mov	ecx, DWORD PTR _font$[ebp]
	movzx	edx, WORD PTR [ecx+96]
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1040
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	BYTE PTR [ecx+18], 1
; Line 1042
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR _pitch$4[ebp]
	imul	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _font$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jbe	SHORT $LN12@FNT_Load_G
$LN11@FNT_Load_G:
; Line 1044
	mov	edx, 4
	imul	eax, edx, 61
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN10@FNT_Load_G
	push	OFFSET $SG8220
	call	_FT_Message
	add	esp, 4
$LN10@FNT_Load_G:
	xor	ecx, ecx
	jne	SHORT $LN11@FNT_Load_G
; Line 1045
	push	OFFSET $SG8221
	push	1045					; 00000415H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 1046
	jmp	$Exit$47
$LN12@FNT_Load_G:
; Line 1051
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pitch$4[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _memory$5[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@FNT_Load_G
; Line 1052
	jmp	$Exit$47
$LN7@FNT_Load_G:
; Line 1054
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _column$3[ebp], eax
; Line 1056
	jmp	SHORT $LN6@FNT_Load_G
$LN5@FNT_Load_G:
	mov	ecx, DWORD PTR _pitch$4[ebp]
	sub	ecx, 1
	mov	DWORD PTR _pitch$4[ebp], ecx
	mov	edx, DWORD PTR _column$3[ebp]
	add	edx, 1
	mov	DWORD PTR _column$3[ebp], edx
$LN6@FNT_Load_G:
	cmp	DWORD PTR _pitch$4[ebp], 0
	jle	SHORT $LN4@FNT_Load_G
; Line 1058
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _limit$1[ebp], ecx
; Line 1061
	mov	edx, DWORD PTR _column$3[ebp]
	mov	DWORD PTR _write$2[ebp], edx
	jmp	SHORT $LN3@FNT_Load_G
$LN2@FNT_Load_G:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR _write$2[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _write$2[ebp], edx
$LN3@FNT_Load_G:
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _limit$1[ebp]
	jae	SHORT $LN1@FNT_Load_G
; Line 1062
	mov	ecx, DWORD PTR _write$2[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	jmp	SHORT $LN2@FNT_Load_G
$LN1@FNT_Load_G:
; Line 1063
	jmp	SHORT $LN5@FNT_Load_G
$LN4@FNT_Load_G:
; Line 1066
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR [edx+4], 1
; Line 1067
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+100], 0
; Line 1068
	mov	ecx, DWORD PTR _font$[ebp]
	movzx	edx, WORD PTR [ecx+80]
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+104], edx
; Line 1069
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+72], 1651078259		; 62697473H
; Line 1072
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 6
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 1073
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 6
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 1074
	mov	edx, DWORD PTR _bitmap$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 6
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 1075
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 1076
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	shl	ecx, 6
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 1079
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 6
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	_ft_synthesize_vertical_metrics
	add	esp, 8
$Exit$47:
; Line 1082
	mov	eax, DWORD PTR _error$[ebp]
; Line 1083
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@FNT_Load_G
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN46@FNT_Load_G:
	DD	1
	DD	$LN45@FNT_Load_G
$LN45@FNT_Load_G:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN44@FNT_Load_G
$LN44@FNT_Load_G:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FNT_Load_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv81 = -28						; size = 4
tv77 = -24						; size = 4
_height$ = -20						; size = 4
_error$ = -16						; size = 4
_bsize$ = -12						; size = 4
_header$ = -8						; size = 4
_face$ = -4						; size = 4
_size$ = 8						; size = 4
_req$ = 12						; size = 4
_FNT_Size_Request PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 922
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 923
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 924
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+132]
	add	eax, 4
	mov	DWORD PTR _header$[ebp], eax
; Line 925
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _bsize$[ebp], eax
; Line 926
	mov	DWORD PTR _error$[ebp], 23		; 00000017H
; Line 930
	mov	ecx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN12@FNT_Size_R
	mov	edx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR _req$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	imul	ecx, DWORD PTR [eax+16]
	add	ecx, 36					; 00000024H
	mov	eax, ecx
	cdq
	mov	ecx, 72					; 00000048H
	idiv	ecx
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN13@FNT_Size_R
$LN12@FNT_Size_R:
	mov	edx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv77[ebp], eax
$LN13@FNT_Size_R:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _height$[ebp], ecx
; Line 931
	mov	edx, DWORD PTR _height$[ebp]
	add	edx, 32					; 00000020H
	sar	edx, 6
	mov	DWORD PTR _height$[ebp], edx
; Line 933
	mov	eax, DWORD PTR _req$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv81[ebp], ecx
	cmp	DWORD PTR tv81[ebp], 0
	je	SHORT $LN7@FNT_Size_R
	cmp	DWORD PTR tv81[ebp], 1
	je	SHORT $LN5@FNT_Size_R
	jmp	SHORT $LN3@FNT_Size_R
$LN7@FNT_Size_R:
; Line 936
	mov	edx, DWORD PTR _bsize$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 32					; 00000020H
	sar	eax, 6
	cmp	DWORD PTR _height$[ebp], eax
	jne	SHORT $LN6@FNT_Size_R
; Line 937
	mov	DWORD PTR _error$[ebp], 0
$LN6@FNT_Size_R:
; Line 938
	jmp	SHORT $LN8@FNT_Size_R
$LN5@FNT_Size_R:
; Line 941
	mov	ecx, DWORD PTR _header$[ebp]
	movzx	edx, WORD PTR [ecx+92]
	cmp	DWORD PTR _height$[ebp], edx
	jne	SHORT $LN4@FNT_Size_R
; Line 942
	mov	DWORD PTR _error$[ebp], 0
$LN4@FNT_Size_R:
; Line 943
	jmp	SHORT $LN8@FNT_Size_R
$LN3@FNT_Size_R:
; Line 946
	push	OFFSET $SG8133
	push	946					; 000003b2H
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	mov	DWORD PTR _error$[ebp], eax
$LN8@FNT_Size_R:
; Line 950
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FNT_Size_R
; Line 951
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN10@FNT_Size_R
; Line 952
	jmp	SHORT $LN10@FNT_Size_R
$LN2@FNT_Size_R:
; Line 953
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_FNT_Size_Select
	add	esp, 8
$LN10@FNT_Size_R:
; Line 954
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FNT_Size_Request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_header$ = -8						; size = 4
_face$ = -4						; size = 4
_size$ = 8						; size = 4
_strike_index$ = 12					; size = 4
_FNT_Size_Select PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 901
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 902
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 903
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+132]
	add	eax, 4
	mov	DWORD PTR _header$[ebp], eax
; Line 905
	mov	ecx, DWORD PTR _strike_index$[ebp]
	mov	DWORD PTR _strike_index$[ebp], ecx
; Line 908
	push	0
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_Select_Metrics
	add	esp, 8
; Line 910
	mov	ecx, DWORD PTR _header$[ebp]
	movzx	edx, WORD PTR [ecx+76]
	shl	edx, 6
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+24], edx
; Line 912
	mov	ecx, DWORD PTR _header$[ebp]
	movzx	edx, WORD PTR [ecx+92]
	mov	eax, DWORD PTR _header$[ebp]
	movzx	ecx, WORD PTR [eax+76]
	sub	edx, ecx
	neg	edx
	shl	edx, 6
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 913
	mov	ecx, DWORD PTR _header$[ebp]
	movzx	edx, WORD PTR [ecx+98]
	shl	edx, 6
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+36], edx
; Line 915
	xor	eax, eax
; Line 916
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FNT_Size_Select ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_charmap$1 = -64					; size = 12
_y_res$2 = -48						; size = 2
_x_res$3 = -44						; size = 2
_bsize$4 = -40						; size = 4
_family_size$5 = -36					; size = 4
_font$6 = -32						; size = 4
_root$7 = -28						; size = 4
_font$8 = -24						; size = 4
_memory$ = -20						; size = 4
_error$ = -12						; size = 4
_face$ = -4						; size = 4
_stream$ = 8						; size = 4
_fntface$ = 12						; size = 4
_face_index$ = 16					; size = 4
_num_params$ = 20					; size = 4
_params$ = 24						; size = 4
_FNT_Face_Init PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 695
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 696
	mov	eax, DWORD PTR _fntface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 698
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 700
	mov	eax, DWORD PTR _num_params$[ebp]
	mov	DWORD PTR _num_params$[ebp], eax
; Line 701
	mov	ecx, DWORD PTR _params$[ebp]
	mov	DWORD PTR _params$[ebp], ecx
$LN43@FNT_Face_I:
; Line 704
	mov	edx, 4
	imul	eax, edx, 61
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN42@FNT_Face_I
	push	OFFSET $SG8028
	call	_FT_Message
	add	esp, 4
$LN42@FNT_Face_I:
	xor	ecx, ecx
	jne	SHORT $LN43@FNT_Face_I
; Line 707
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_fnt_face_get_dll_font
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 708
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN39@FNT_Face_I
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN39@FNT_Face_I
; Line 709
	jmp	$Exit$50
$LN39@FNT_Face_I:
; Line 711
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 2
	jne	$LN38@FNT_Face_I
; Line 716
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	172					; 000000acH
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+132], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN37@FNT_Face_I
; Line 717
	jmp	$Exit$50
$LN37@FNT_Face_I:
; Line 719
	mov	edx, DWORD PTR _fntface$[ebp]
	mov	DWORD PTR [edx], 1
; Line 721
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _font$8[ebp], ecx
; Line 722
	mov	edx, DWORD PTR _font$8[ebp]
	mov	DWORD PTR [edx], 0
; Line 723
	mov	eax, DWORD PTR _font$8[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+164], edx
; Line 725
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$8[ebp]
	push	ecx
	call	_fnt_font_load
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 727
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN38@FNT_Face_I
; Line 729
	cmp	DWORD PTR _face_index$[ebp], 0
	jle	SHORT $LN35@FNT_Face_I
; Line 730
	push	OFFSET $SG8037
	push	730					; 000002daH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
	jmp	SHORT $LN38@FNT_Face_I
$LN35@FNT_Face_I:
; Line 731
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN38@FNT_Face_I
; Line 732
	jmp	$Exit$50
$LN38@FNT_Face_I:
; Line 736
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN32@FNT_Face_I
; Line 737
	jmp	$Fail$51
$LN32@FNT_Face_I:
; Line 742
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR _root$7[ebp], edx
; Line 743
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _font$6[ebp], ecx
; Line 747
	mov	edx, DWORD PTR _root$7[ebp]
	mov	eax, DWORD PTR _face_index$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 750
	mov	ecx, DWORD PTR _root$7[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 18					; 00000012H
	mov	eax, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 752
	mov	ecx, DWORD PTR _font$6[ebp]
	movzx	edx, WORD PTR [ecx+100]
	mov	eax, DWORD PTR _font$6[ebp]
	movzx	ecx, WORD PTR [eax+102]
	cmp	edx, ecx
	jne	SHORT $LN31@FNT_Face_I
; Line 753
	mov	edx, DWORD PTR _root$7[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	eax, 4
	mov	ecx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN31@FNT_Face_I:
; Line 755
	mov	edx, DWORD PTR _font$6[ebp]
	movzx	eax, BYTE PTR [edx+86]
	test	eax, eax
	je	SHORT $LN30@FNT_Face_I
; Line 756
	mov	ecx, DWORD PTR _root$7[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 1
	mov	eax, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [eax+12], edx
$LN30@FNT_Face_I:
; Line 758
	mov	ecx, DWORD PTR _font$6[ebp]
	movzx	edx, WORD PTR [ecx+90]
	cmp	edx, 800				; 00000320H
	jl	SHORT $LN29@FNT_Face_I
; Line 759
	mov	eax, DWORD PTR _root$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 2
	mov	edx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN29@FNT_Face_I:
; Line 762
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	push	1
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [edx+32], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN28@FNT_Face_I
; Line 763
	jmp	$Fail$51
$LN28@FNT_Face_I:
; Line 765
	mov	eax, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [eax+28], 1
; Line 768
	mov	ecx, DWORD PTR _root$7[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _bsize$4[ebp], edx
; Line 772
	mov	eax, DWORD PTR _bsize$4[ebp]
	mov	ecx, DWORD PTR _font$6[ebp]
	mov	dx, WORD PTR [ecx+100]
	mov	WORD PTR [eax+2], dx
; Line 774
	mov	eax, DWORD PTR _font$6[ebp]
	movzx	ecx, WORD PTR [eax+96]
	mov	edx, DWORD PTR _font$6[ebp]
	movzx	eax, WORD PTR [edx+84]
	add	ecx, eax
	mov	edx, DWORD PTR _bsize$4[ebp]
	mov	WORD PTR [edx], cx
; Line 775
	mov	eax, DWORD PTR _font$6[ebp]
	movzx	ecx, WORD PTR [eax+74]
	shl	ecx, 6
	mov	edx, DWORD PTR _bsize$4[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 777
	mov	eax, DWORD PTR _font$6[ebp]
	mov	cx, WORD PTR [eax+78]
	mov	WORD PTR _x_res$3[ebp], cx
; Line 778
	movzx	edx, WORD PTR _x_res$3[ebp]
	test	edx, edx
	jne	SHORT $LN27@FNT_Face_I
; Line 779
	mov	eax, 72					; 00000048H
	mov	WORD PTR _x_res$3[ebp], ax
$LN27@FNT_Face_I:
; Line 781
	mov	ecx, DWORD PTR _font$6[ebp]
	mov	dx, WORD PTR [ecx+76]
	mov	WORD PTR _y_res$2[ebp], dx
; Line 782
	movzx	eax, WORD PTR _y_res$2[ebp]
	test	eax, eax
	jne	SHORT $LN26@FNT_Face_I
; Line 783
	mov	ecx, 72					; 00000048H
	mov	WORD PTR _y_res$2[ebp], cx
$LN26@FNT_Face_I:
; Line 785
	push	72					; 00000048H
	movzx	edx, WORD PTR _y_res$2[ebp]
	push	edx
	mov	eax, DWORD PTR _bsize$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _bsize$4[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 786
	mov	eax, DWORD PTR _bsize$4[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _bsize$4[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 796
	mov	eax, DWORD PTR _font$6[ebp]
	movzx	ecx, WORD PTR [eax+96]
	shl	ecx, 6
	mov	edx, DWORD PTR _bsize$4[ebp]
	cmp	DWORD PTR [edx+12], ecx
	jle	SHORT $LN25@FNT_Face_I
$LN24@FNT_Face_I:
; Line 798
	mov	eax, 4
	imul	ecx, eax, 61
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN23@FNT_Face_I
	push	OFFSET $SG8063
	call	_FT_Message
	add	esp, 4
$LN23@FNT_Face_I:
	xor	edx, edx
	jne	SHORT $LN24@FNT_Face_I
; Line 800
	mov	eax, DWORD PTR _font$6[ebp]
	movzx	ecx, WORD PTR [eax+96]
	shl	ecx, 6
	mov	edx, DWORD PTR _bsize$4[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 801
	movzx	eax, WORD PTR _y_res$2[ebp]
	push	eax
	push	72					; 00000048H
	mov	ecx, DWORD PTR _bsize$4[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _bsize$4[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN25@FNT_Face_I:
; Line 804
	push	72					; 00000048H
	movzx	edx, WORD PTR _x_res$3[ebp]
	push	edx
	mov	eax, DWORD PTR _bsize$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _bsize$4[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 805
	mov	eax, DWORD PTR _bsize$4[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _bsize$4[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 812
	mov	DWORD PTR _charmap$1[ebp+4], 0
; Line 814
	xor	eax, eax
	mov	WORD PTR _charmap$1[ebp+8], ax
; Line 815
	xor	ecx, ecx
	mov	WORD PTR _charmap$1[ebp+10], cx
; Line 816
	mov	edx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR _charmap$1[ebp], edx
; Line 818
	mov	eax, DWORD PTR _font$6[ebp]
	movzx	ecx, BYTE PTR [eax+92]
	cmp	ecx, 77					; 0000004dH
	jne	SHORT $LN20@FNT_Face_I
; Line 820
	mov	DWORD PTR _charmap$1[ebp+4], 1634889070	; 61726d6eH
; Line 821
	mov	edx, 1
	mov	WORD PTR _charmap$1[ebp+8], dx
$LN20@FNT_Face_I:
; Line 828
	push	0
	lea	eax, DWORD PTR _charmap$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _fnt_cmap_class
	push	ecx
	call	_FT_CMap_New
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 829
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN19@FNT_Face_I
; Line 830
	jmp	$Fail$51
$LN19@FNT_Face_I:
; Line 833
	mov	edx, DWORD PTR _root$7[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN18@FNT_Face_I
; Line 834
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _root$7[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, DWORD PTR _root$7[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [edx+92], eax
$LN18@FNT_Face_I:
; Line 839
	mov	ecx, DWORD PTR _font$6[ebp]
	movzx	edx, BYTE PTR [ecx+105]
	mov	eax, DWORD PTR _font$6[ebp]
	movzx	ecx, BYTE PTR [eax+104]
	cmp	edx, ecx
	jge	SHORT $LN17@FNT_Face_I
$LN16@FNT_Face_I:
; Line 841
	mov	edx, 4
	imul	eax, edx, 61
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN15@FNT_Face_I
	push	OFFSET $SG8075
	call	_FT_Message
	add	esp, 4
$LN15@FNT_Face_I:
	xor	ecx, ecx
	jne	SHORT $LN16@FNT_Face_I
; Line 842
	push	OFFSET $SG8076
	push	842					; 0000034aH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 843
	jmp	$Fail$51
$LN17@FNT_Face_I:
; Line 848
	mov	edx, DWORD PTR _font$6[ebp]
	movzx	eax, BYTE PTR [edx+105]
	mov	ecx, DWORD PTR _font$6[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	sub	eax, edx
	add	eax, 2
	mov	ecx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 850
	mov	edx, DWORD PTR _font$6[ebp]
	mov	eax, DWORD PTR _font$6[ebp]
	mov	ecx, DWORD PTR [edx+116]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN12@FNT_Face_I
$LN11@FNT_Face_I:
; Line 852
	mov	edx, 4
	imul	eax, edx, 61
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN10@FNT_Face_I
	push	OFFSET $SG8082
	call	_FT_Message
	add	esp, 4
$LN10@FNT_Face_I:
	xor	ecx, ecx
	jne	SHORT $LN11@FNT_Face_I
; Line 853
	push	OFFSET $SG8083
	push	853					; 00000355H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 854
	jmp	$Fail$51
$LN12@FNT_Face_I:
; Line 856
	mov	edx, DWORD PTR _font$6[ebp]
	mov	eax, DWORD PTR _font$6[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR _family_size$5[ebp], ecx
; Line 861
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _family_size$5[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _font$6[ebp]
	mov	DWORD PTR [edx+168], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@FNT_Face_I
; Line 862
	jmp	$Fail$51
$LN7@FNT_Face_I:
; Line 866
	mov	eax, DWORD PTR _family_size$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$6[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR _font$6[ebp]
	add	edx, DWORD PTR [eax+116]
	push	edx
	mov	ecx, DWORD PTR _font$6[ebp]
	mov	edx, DWORD PTR [ecx+168]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 868
	mov	eax, DWORD PTR _font$6[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	edx, DWORD PTR _family_size$5[ebp]
	mov	BYTE PTR [ecx+edx], 0
; Line 872
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$6[ebp]
	mov	edx, DWORD PTR [ecx+168]
	push	edx
	mov	eax, DWORD PTR _font$6[ebp]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	mov	edx, DWORD PTR _family_size$5[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _font$6[ebp]
	mov	DWORD PTR [ecx+168], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@FNT_Face_I
; Line 873
	jmp	SHORT $Fail$51
$LN6@FNT_Face_I:
; Line 875
	mov	edx, DWORD PTR _root$7[ebp]
	mov	eax, DWORD PTR _font$6[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR [edx+20], ecx
; Line 876
	mov	edx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG8090
; Line 878
	mov	eax, DWORD PTR _root$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 2
	je	SHORT $LN5@FNT_Face_I
; Line 880
	mov	edx, DWORD PTR _root$7[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 1
	je	SHORT $LN4@FNT_Face_I
; Line 881
	mov	ecx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG8094
; Line 882
	jmp	SHORT $LN3@FNT_Face_I
$LN4@FNT_Face_I:
; Line 883
	mov	edx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG8097
$LN3@FNT_Face_I:
; Line 885
	jmp	SHORT $LN2@FNT_Face_I
$LN5@FNT_Face_I:
	mov	eax, DWORD PTR _root$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1
	je	SHORT $LN2@FNT_Face_I
; Line 886
	mov	edx, DWORD PTR _root$7[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG8101
$LN2@FNT_Face_I:
; Line 888
	jmp	SHORT $Exit$50
$Fail$51:
; Line 891
	mov	eax, DWORD PTR _fntface$[ebp]
	push	eax
	call	_FNT_Face_Done
	add	esp, 4
$Exit$50:
; Line 894
	mov	eax, DWORD PTR _error$[ebp]
; Line 895
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN49@FNT_Face_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN49@FNT_Face_I:
	DD	2
	DD	$LN48@FNT_Face_I
$LN48@FNT_Face_I:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN46@FNT_Face_I
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$LN47@FNT_Face_I
$LN47@FNT_Face_I:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN46@FNT_Face_I:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FNT_Face_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_face$ = -4						; size = 4
_fntface$ = 8						; size = 4
_FNT_Face_Done PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 673
	mov	eax, DWORD PTR _fntface$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 677
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN4@FNT_Face_D
; Line 678
	jmp	SHORT $LN5@FNT_Face_D
$LN4@FNT_Face_D:
; Line 680
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 682
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_fnt_font_done
	add	esp, 4
$LN3@FNT_Face_D:
; Line 684
	mov	ecx, DWORD PTR _fntface$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _fntface$[ebp]
	mov	DWORD PTR [ecx+32], 0
	xor	edx, edx
	jne	SHORT $LN3@FNT_Face_D
; Line 685
	mov	eax, DWORD PTR _fntface$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN5@FNT_Face_D:
; Line 686
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FNT_Face_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_char_code$ = -12					; size = 4
_result$ = -8						; size = 4
_gindex$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pchar_code$ = 12					; size = 4
_fnt_cmap_char_next PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 629
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 630
	mov	DWORD PTR _gindex$[ebp], 0
; Line 631
	mov	DWORD PTR _result$[ebp], 0
; Line 632
	mov	eax, DWORD PTR _pchar_code$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR _char_code$[ebp], ecx
; Line 635
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _char_code$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	ja	SHORT $LN3@fnt_cmap_c
; Line 637
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _result$[ebp], edx
; Line 638
	mov	DWORD PTR _gindex$[ebp], 1
; Line 640
	jmp	SHORT $LN2@fnt_cmap_c
$LN3@fnt_cmap_c:
; Line 642
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _char_code$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _char_code$[ebp], ecx
; Line 643
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _char_code$[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN2@fnt_cmap_c
; Line 645
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR _result$[ebp], edx
; Line 646
	mov	eax, DWORD PTR _char_code$[ebp]
	add	eax, 1
	mov	DWORD PTR _gindex$[ebp], eax
$LN2@fnt_cmap_c:
; Line 650
	mov	ecx, DWORD PTR _pchar_code$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 651
	mov	eax, DWORD PTR _gindex$[ebp]
; Line 652
	mov	esp, ebp
	pop	ebp
	ret	0
_fnt_cmap_char_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gindex$ = -4						; size = 4
_cmap$ = 8						; size = 4
_char_code$ = 12					; size = 4
_fnt_cmap_char_index PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 613
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 614
	mov	DWORD PTR _gindex$[ebp], 0
; Line 617
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR _char_code$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _char_code$[ebp], ecx
; Line 618
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR _char_code$[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN1@fnt_cmap_c
; Line 621
	mov	ecx, DWORD PTR _char_code$[ebp]
	add	ecx, 1
	mov	DWORD PTR _gindex$[ebp], ecx
$LN1@fnt_cmap_c:
; Line 622
	mov	eax, DWORD PTR _gindex$[ebp]
; Line 623
	mov	esp, ebp
	pop	ebp
	ret	0
_fnt_cmap_char_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_font$ = -8						; size = 4
_face$ = -4						; size = 4
_cmap$ = 8						; size = 4
_pointer$ = 12						; size = 4
_fnt_cmap_init PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 596
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 597
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 598
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	DWORD PTR _font$[ebp], eax
; Line 600
	mov	ecx, DWORD PTR _pointer$[ebp]
	mov	DWORD PTR _pointer$[ebp], ecx
; Line 603
	mov	edx, DWORD PTR _font$[ebp]
	movzx	eax, BYTE PTR [edx+104]
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 604
	mov	edx, DWORD PTR _font$[ebp]
	movzx	eax, BYTE PTR [edx+105]
	mov	ecx, DWORD PTR _cmap$[ebp]
	sub	eax, DWORD PTR [ecx+16]
	add	eax, 1
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 606
	xor	eax, eax
; Line 607
	mov	esp, ebp
	pop	ebp
	ret	0
_fnt_cmap_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_k$1 = -300						; size = 2
_j$2 = -296						; size = 2
_i$3 = -292						; size = 2
_lang_dir_offset$4 = -288				; size = 4
_name_dir_offset$5 = -284				; size = 4
_root_dir_offset$6 = -280				; size = 4
_data_entry$7 = -272					; size = 16
_dir_entry3$8 = -248					; size = 8
_dir_entry2$9 = -232					; size = 8
_dir_entry1$10 = -216					; size = 8
_lang_dir$11 = -200					; size = 16
_name_dir$12 = -176					; size = 16
_root_dir$13 = -152					; size = 16
_pe32_section$14 = -128					; size = 20
_pe32_header$15 = -100					; size = 20
_count$16 = -76						; size = 2
_type_id$17 = -72					; size = 2
_font_offset$18 = -68					; size = 4
_font_count$19 = -64					; size = 2
_size_shift$20 = -60					; size = 2
_res_offset$21 = -56					; size = 4
_ne_header$22 = -48					; size = 6
_mz_header$ = -32					; size = 4
_memory$ = -24						; size = 4
_stream$ = -20						; size = 4
_error$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_face_index$ = 12					; size = 4
_fnt_face_get_dll_font PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 273
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 275
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 276
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$[ebp], eax
; Line 280
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+132], 0
; Line 284
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN121@fnt_face_g
	lea	eax, DWORD PTR _mz_header$[ebp]
	push	eax
	push	OFFSET _winmz_header_fields
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN122@fnt_face_g
$LN121@fnt_face_g:
; Line 285
	jmp	$Exit$139
$LN122@fnt_face_g:
; Line 287
	mov	DWORD PTR _error$[ebp], 2
; Line 288
	movzx	edx, WORD PTR _mz_header$[ebp]
	cmp	edx, 23117				; 00005a4dH
	jne	$Fail$140
$LN119@fnt_face_g:
; Line 294
	mov	eax, 4
	imul	ecx, eax, 61
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN118@fnt_face_g
	push	OFFSET $SG7755
	call	_FT_Message
	add	esp, 4
$LN118@fnt_face_g:
	xor	edx, edx
	jne	SHORT $LN119@fnt_face_g
; Line 297
	movzx	eax, WORD PTR _mz_header$[ebp+2]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN114@fnt_face_g
	lea	edx, DWORD PTR _ne_header$22[ebp]
	push	edx
	push	OFFSET _winne_header_fields
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN115@fnt_face_g
$LN114@fnt_face_g:
; Line 298
	jmp	$Exit$139
$LN115@fnt_face_g:
; Line 300
	mov	DWORD PTR _error$[ebp], 2
; Line 301
	movzx	ecx, WORD PTR _ne_header$22[ebp]
	cmp	ecx, 17742				; 0000454eH
	jne	$LN113@fnt_face_g
; Line 305
	movzx	edx, WORD PTR _mz_header$[ebp+2]
	movzx	eax, WORD PTR _ne_header$22[ebp+2]
	add	edx, eax
	mov	DWORD PTR _res_offset$21[ebp], edx
; Line 307
	xor	ecx, ecx
	mov	WORD PTR _font_count$19[ebp], cx
; Line 308
	mov	DWORD PTR _font_offset$18[ebp], 0
$LN112@fnt_face_g:
; Line 311
	mov	edx, 4
	imul	eax, edx, 61
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN111@fnt_face_g
	push	OFFSET $SG7768
	call	_FT_Message
	add	esp, 4
$LN111@fnt_face_g:
	xor	ecx, ecx
	jne	SHORT $LN112@fnt_face_g
; Line 315
	mov	edx, DWORD PTR _res_offset$21[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN107@fnt_face_g
	movzx	ecx, WORD PTR _ne_header$22[ebp+4]
	movzx	edx, WORD PTR _ne_header$22[ebp+2]
	sub	ecx, edx
	push	ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN108@fnt_face_g
$LN107@fnt_face_g:
; Line 316
	jmp	$Exit$139
$LN108@fnt_face_g:
; Line 318
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShortLE
	add	esp, 4
	mov	WORD PTR _size_shift$20[ebp], ax
$LN106@fnt_face_g:
; Line 325
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShortLE
	add	esp, 4
	mov	WORD PTR _type_id$17[ebp], ax
; Line 326
	movzx	eax, WORD PTR _type_id$17[ebp]
	test	eax, eax
	jne	SHORT $LN104@fnt_face_g
; Line 327
	jmp	SHORT $LN105@fnt_face_g
$LN104@fnt_face_g:
; Line 329
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_GetUShortLE
	add	esp, 4
	mov	WORD PTR _count$16[ebp], ax
; Line 331
	movzx	edx, WORD PTR _type_id$17[ebp]
	cmp	edx, 32776				; 00008008H
	jne	SHORT $LN103@fnt_face_g
; Line 333
	mov	ax, WORD PTR _count$16[ebp]
	mov	WORD PTR _font_count$19[ebp], ax
; Line 335
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [edx+32]
	sub	edx, DWORD PTR [ecx+36]
	lea	eax, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _font_offset$18[ebp], eax
; Line 336
	jmp	SHORT $LN105@fnt_face_g
$LN103@fnt_face_g:
; Line 339
	movzx	ecx, WORD PTR _count$16[ebp]
	imul	edx, ecx, 12
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	lea	edx, DWORD PTR [edx+ecx+4]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 340
	jmp	SHORT $LN106@fnt_face_g
$LN105@fnt_face_g:
; Line 342
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 344
	movzx	edx, WORD PTR _font_count$19[ebp]
	test	edx, edx
	je	SHORT $LN100@fnt_face_g
	cmp	DWORD PTR _font_offset$18[ebp], 0
	jne	SHORT $LN102@fnt_face_g
$LN100@fnt_face_g:
; Line 346
	mov	eax, 4
	imul	ecx, eax, 61
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN99@fnt_face_g
	push	OFFSET $SG7790
	call	_FT_Message
	add	esp, 4
$LN99@fnt_face_g:
	xor	edx, edx
	jne	SHORT $LN100@fnt_face_g
; Line 347
	push	OFFSET $SG7791
	push	347					; 0000015bH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 348
	jmp	$Exit$139
$LN102@fnt_face_g:
; Line 353
	movzx	eax, WORD PTR _font_count$19[ebp]
	imul	ecx, eax, 118
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	jbe	SHORT $LN96@fnt_face_g
$LN95@fnt_face_g:
; Line 355
	mov	eax, 4
	imul	ecx, eax, 61
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN94@fnt_face_g
	push	OFFSET $SG7797
	call	_FT_Message
	add	esp, 4
$LN94@fnt_face_g:
	xor	edx, edx
	jne	SHORT $LN95@fnt_face_g
; Line 356
	push	OFFSET $SG7798
	push	356					; 00000164H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 357
	jmp	$Exit$139
$LN96@fnt_face_g:
; Line 360
	movzx	eax, WORD PTR _font_count$19[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 362
	movzx	edx, WORD PTR _font_count$19[ebp]
	cmp	DWORD PTR _face_index$[ebp], edx
	jl	SHORT $LN91@fnt_face_g
; Line 364
	push	OFFSET $SG7800
	push	364					; 0000016cH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 365
	jmp	$Exit$139
	jmp	SHORT $LN90@fnt_face_g
$LN91@fnt_face_g:
; Line 367
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN90@fnt_face_g
; Line 368
	jmp	$Exit$139
$LN90@fnt_face_g:
; Line 370
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	172					; 000000acH
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+132], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN88@fnt_face_g
; Line 371
	jmp	$Exit$139
$LN88@fnt_face_g:
; Line 374
	imul	eax, DWORD PTR _face_index$[ebp], 12
	add	eax, DWORD PTR _font_offset$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN86@fnt_face_g
	push	12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN87@fnt_face_g
$LN86@fnt_face_g:
; Line 375
	jmp	$Fail$140
$LN87@fnt_face_g:
; Line 377
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_GetUShortLE
	add	esp, 4
	movzx	edx, ax
	movzx	ecx, WORD PTR _size_shift$20[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR [ecx], edx
; Line 378
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_GetUShortLE
	add	esp, 4
	movzx	eax, ax
	movzx	ecx, WORD PTR _size_shift$20[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [edx+164], eax
; Line 380
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 8
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+32], ecx
; Line 382
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 384
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+132]
	push	eax
	call	_fnt_font_load
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	jmp	$LN85@fnt_face_g
$LN113@fnt_face_g:
; Line 386
	movzx	ecx, WORD PTR _ne_header$22[ebp]
	cmp	ecx, 17744				; 00004550H
	jne	$LN85@fnt_face_g
$LN83@fnt_face_g:
; Line 398
	mov	edx, 4
	imul	eax, edx, 61
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN82@fnt_face_g
	push	OFFSET $SG7835
	call	_FT_Message
	add	esp, 4
$LN82@fnt_face_g:
	xor	ecx, ecx
	jne	SHORT $LN83@fnt_face_g
; Line 401
	movzx	edx, WORD PTR _mz_header$[ebp+2]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN78@fnt_face_g
	lea	ecx, DWORD PTR _pe32_header$15[ebp]
	push	ecx
	push	OFFSET _winpe32_header_fields
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN77@fnt_face_g
$LN78@fnt_face_g:
; Line 402
	jmp	$Exit$139
$LN77@fnt_face_g:
; Line 412
	mov	eax, 4
	imul	ecx, eax, 61
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN76@fnt_face_g
	mov	edx, DWORD PTR _pe32_header$15[ebp+16]
	push	edx
	mov	eax, DWORD PTR _pe32_header$15[ebp+12]
	push	eax
	movzx	ecx, WORD PTR _pe32_header$15[ebp+10]
	push	ecx
	movzx	edx, WORD PTR _pe32_header$15[ebp+8]
	push	edx
	movzx	eax, WORD PTR _pe32_header$15[ebp+6]
	push	eax
	movzx	ecx, WORD PTR _pe32_header$15[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _pe32_header$15[ebp]
	push	edx
	push	OFFSET $SG7843
	call	_FT_Message
	add	esp, 32					; 00000020H
$LN76@fnt_face_g:
	xor	eax, eax
	jne	SHORT $LN77@fnt_face_g
; Line 417
	cmp	DWORD PTR _pe32_header$15[ebp], 17744	; 00004550H
	jne	SHORT $LN71@fnt_face_g
	movzx	ecx, WORD PTR _pe32_header$15[ebp+4]
	cmp	ecx, 332				; 0000014cH
	jne	SHORT $LN71@fnt_face_g
	movzx	edx, WORD PTR _pe32_header$15[ebp+8]
	cmp	edx, 224				; 000000e0H
	jne	SHORT $LN71@fnt_face_g
	movzx	eax, WORD PTR _pe32_header$15[ebp+10]
	cmp	eax, 267				; 0000010bH
	je	SHORT $LN73@fnt_face_g
$LN71@fnt_face_g:
; Line 419
	mov	ecx, 4
	imul	edx, ecx, 61
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN70@fnt_face_g
	push	OFFSET $SG7850
	call	_FT_Message
	add	esp, 4
$LN70@fnt_face_g:
	xor	eax, eax
	jne	SHORT $LN71@fnt_face_g
; Line 420
	push	OFFSET $SG7851
	push	420					; 000001a4H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 421
	jmp	$Exit$139
$LN73@fnt_face_g:
; Line 424
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 426
	xor	edx, edx
	mov	WORD PTR _i$3[ebp], dx
	jmp	SHORT $LN67@fnt_face_g
$LN66@fnt_face_g:
	mov	ax, WORD PTR _i$3[ebp]
	add	ax, 1
	mov	WORD PTR _i$3[ebp], ax
$LN67@fnt_face_g:
	movzx	ecx, WORD PTR _i$3[ebp]
	movzx	edx, WORD PTR _pe32_header$15[ebp+6]
	cmp	ecx, edx
	jge	SHORT $LN58@fnt_face_g
; Line 429
	lea	eax, DWORD PTR _pe32_section$14[ebp]
	push	eax
	push	OFFSET _winpe32_section_fields
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN63@fnt_face_g
; Line 430
	jmp	$Exit$139
$LN63@fnt_face_g:
; Line 435
	mov	edx, 4
	imul	eax, edx, 61
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN62@fnt_face_g
	mov	ecx, DWORD PTR _pe32_section$14[ebp+16]
	push	ecx
	mov	edx, DWORD PTR _pe32_section$14[ebp+12]
	push	edx
	mov	eax, DWORD PTR _pe32_section$14[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _pe32_section$14[ebp]
	push	ecx
	push	OFFSET $SG7860
	call	_FT_Message
	add	esp, 20					; 00000014H
$LN62@fnt_face_g:
	xor	edx, edx
	jne	SHORT $LN63@fnt_face_g
; Line 438
	mov	eax, DWORD PTR _pe32_header$15[ebp+12]
	cmp	eax, DWORD PTR _pe32_section$14[ebp+8]
	jne	SHORT $LN59@fnt_face_g
; Line 439
	jmp	SHORT $Found_rsrc_section$141
$LN59@fnt_face_g:
; Line 440
	jmp	$LN66@fnt_face_g
$LN58@fnt_face_g:
; Line 442
	mov	ecx, 4
	imul	edx, ecx, 61
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN57@fnt_face_g
	push	OFFSET $SG7867
	call	_FT_Message
	add	esp, 4
$LN57@fnt_face_g:
	xor	eax, eax
	jne	SHORT $LN58@fnt_face_g
; Line 443
	push	OFFSET $SG7868
	push	443					; 000001bbH
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 444
	jmp	$Exit$139
$Found_rsrc_section$141:
; Line 447
	mov	ecx, 4
	imul	edx, ecx, 61
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN53@fnt_face_g
	lea	eax, DWORD PTR _pe32_section$14[ebp]
	push	eax
	push	OFFSET $SG7873
	call	_FT_Message
	add	esp, 8
$LN53@fnt_face_g:
	xor	ecx, ecx
	jne	SHORT $Found_rsrc_section$141
; Line 450
	mov	edx, DWORD PTR _pe32_section$14[ebp+16]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN49@fnt_face_g
	lea	ecx, DWORD PTR _root_dir$13[ebp]
	push	ecx
	push	OFFSET _winpe_rsrc_dir_fields
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN50@fnt_face_g
$LN49@fnt_face_g:
; Line 451
	jmp	$Exit$139
$LN50@fnt_face_g:
; Line 453
	mov	eax, DWORD PTR _pe32_section$14[ebp+16]
	mov	DWORD PTR _root_dir_offset$6[ebp], eax
; Line 456
	xor	ecx, ecx
	mov	WORD PTR _i$3[ebp], cx
	jmp	SHORT $LN48@fnt_face_g
$LN47@fnt_face_g:
	mov	dx, WORD PTR _i$3[ebp]
	add	dx, 1
	mov	WORD PTR _i$3[ebp], dx
$LN48@fnt_face_g:
	movzx	eax, WORD PTR _i$3[ebp]
	movzx	ecx, WORD PTR _root_dir$13[ebp+12]
	movzx	edx, WORD PTR _root_dir$13[ebp+14]
	add	ecx, edx
	cmp	eax, ecx
	jge	$LN85@fnt_face_g
; Line 460
	movzx	eax, WORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _root_dir_offset$6[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+16]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN44@fnt_face_g
	lea	ecx, DWORD PTR _dir_entry1$10[ebp]
	push	ecx
	push	OFFSET _winpe_rsrc_dir_entry_fields
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN45@fnt_face_g
$LN44@fnt_face_g:
; Line 461
	jmp	$Exit$139
$LN45@fnt_face_g:
; Line 463
	mov	eax, DWORD PTR _dir_entry1$10[ebp+4]
	and	eax, -2147483648			; 80000000H
	jne	SHORT $LN43@fnt_face_g
; Line 465
	push	OFFSET $SG7884
	push	465					; 000001d1H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 466
	jmp	$Exit$139
$LN43@fnt_face_g:
; Line 469
	mov	ecx, DWORD PTR _dir_entry1$10[ebp+4]
	and	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR _dir_entry1$10[ebp+4], ecx
; Line 472
	mov	edx, DWORD PTR _pe32_section$14[ebp+16]
	add	edx, DWORD PTR _dir_entry1$10[ebp+4]
	mov	DWORD PTR _name_dir_offset$5[ebp], edx
; Line 476
	mov	eax, DWORD PTR _pe32_section$14[ebp+16]
	add	eax, DWORD PTR _dir_entry1$10[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN41@fnt_face_g
	lea	edx, DWORD PTR _name_dir$12[ebp]
	push	edx
	push	OFFSET _winpe_rsrc_dir_fields
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN42@fnt_face_g
$LN41@fnt_face_g:
; Line 477
	jmp	$Exit$139
$LN42@fnt_face_g:
; Line 480
	xor	ecx, ecx
	mov	WORD PTR _j$2[ebp], cx
	jmp	SHORT $LN40@fnt_face_g
$LN39@fnt_face_g:
	mov	dx, WORD PTR _j$2[ebp]
	add	dx, 1
	mov	WORD PTR _j$2[ebp], dx
$LN40@fnt_face_g:
	movzx	eax, WORD PTR _j$2[ebp]
	movzx	ecx, WORD PTR _name_dir$12[ebp+12]
	movzx	edx, WORD PTR _name_dir$12[ebp+14]
	add	ecx, edx
	cmp	eax, ecx
	jge	$LN38@fnt_face_g
; Line 484
	movzx	eax, WORD PTR _j$2[ebp]
	mov	ecx, DWORD PTR _name_dir_offset$5[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+16]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN36@fnt_face_g
	lea	ecx, DWORD PTR _dir_entry2$9[ebp]
	push	ecx
	push	OFFSET _winpe_rsrc_dir_entry_fields
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN37@fnt_face_g
$LN36@fnt_face_g:
; Line 485
	jmp	$Exit$139
$LN37@fnt_face_g:
; Line 487
	mov	eax, DWORD PTR _dir_entry2$9[ebp+4]
	and	eax, -2147483648			; 80000000H
	jne	SHORT $LN35@fnt_face_g
; Line 489
	push	OFFSET $SG7895
	push	489					; 000001e9H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 490
	jmp	$Exit$139
$LN35@fnt_face_g:
; Line 493
	mov	ecx, DWORD PTR _dir_entry2$9[ebp+4]
	and	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR _dir_entry2$9[ebp+4], ecx
; Line 496
	mov	edx, DWORD PTR _pe32_section$14[ebp+16]
	add	edx, DWORD PTR _dir_entry2$9[ebp+4]
	mov	DWORD PTR _lang_dir_offset$4[ebp], edx
; Line 500
	mov	eax, DWORD PTR _pe32_section$14[ebp+16]
	add	eax, DWORD PTR _dir_entry2$9[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN33@fnt_face_g
	lea	edx, DWORD PTR _lang_dir$11[ebp]
	push	edx
	push	OFFSET _winpe_rsrc_dir_fields
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN34@fnt_face_g
$LN33@fnt_face_g:
; Line 501
	jmp	$Exit$139
$LN34@fnt_face_g:
; Line 504
	xor	ecx, ecx
	mov	WORD PTR _k$1[ebp], cx
	jmp	SHORT $LN32@fnt_face_g
$LN31@fnt_face_g:
	mov	dx, WORD PTR _k$1[ebp]
	add	dx, 1
	mov	WORD PTR _k$1[ebp], dx
$LN32@fnt_face_g:
	movzx	eax, WORD PTR _k$1[ebp]
	movzx	ecx, WORD PTR _lang_dir$11[ebp+12]
	movzx	edx, WORD PTR _lang_dir$11[ebp+14]
	add	ecx, edx
	cmp	eax, ecx
	jge	$LN30@fnt_face_g
; Line 508
	movzx	eax, WORD PTR _k$1[ebp]
	mov	ecx, DWORD PTR _lang_dir_offset$4[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+16]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN28@fnt_face_g
	lea	ecx, DWORD PTR _dir_entry3$8[ebp]
	push	ecx
	push	OFFSET _winpe_rsrc_dir_entry_fields
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN29@fnt_face_g
$LN28@fnt_face_g:
; Line 509
	jmp	$Exit$139
$LN29@fnt_face_g:
; Line 511
	mov	eax, DWORD PTR _dir_entry2$9[ebp+4]
	and	eax, -2147483648			; 80000000H
	je	SHORT $LN27@fnt_face_g
; Line 513
	push	OFFSET $SG7906
	push	513					; 00000201H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 514
	jmp	$Exit$139
$LN27@fnt_face_g:
; Line 517
	cmp	DWORD PTR _dir_entry1$10[ebp], 8
	jne	$LN26@fnt_face_g
; Line 521
	mov	ecx, DWORD PTR _root_dir_offset$6[ebp]
	add	ecx, DWORD PTR _dir_entry3$8[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN24@fnt_face_g
	lea	eax, DWORD PTR _data_entry$7[ebp]
	push	eax
	push	OFFSET _winpe_rsrc_data_entry_fields
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN23@fnt_face_g
$LN24@fnt_face_g:
; Line 522
	jmp	$Exit$139
$LN23@fnt_face_g:
; Line 530
	mov	edx, 4
	imul	eax, edx, 61
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN22@fnt_face_g
	mov	ecx, DWORD PTR _data_entry$7[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _data_entry$7[ebp+4]
	push	edx
	mov	eax, DWORD PTR _pe32_section$14[ebp+16]
	add	eax, DWORD PTR _data_entry$7[ebp]
	sub	eax, DWORD PTR _pe32_section$14[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _dir_entry2$9[ebp]
	push	ecx
	push	OFFSET $SG7915
	call	_FT_Message
	add	esp, 20					; 00000014H
$LN22@fnt_face_g:
	xor	edx, edx
	jne	SHORT $LN23@fnt_face_g
; Line 532
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _face_index$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN19@fnt_face_g
; Line 534
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	172					; 000000acH
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+132], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@fnt_face_g
; Line 535
	jmp	$Exit$139
$LN18@fnt_face_g:
; Line 539
	mov	edx, DWORD PTR _pe32_section$14[ebp+16]
	add	edx, DWORD PTR _data_entry$7[ebp]
	sub	edx, DWORD PTR _pe32_section$14[ebp+8]
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR [ecx], edx
; Line 540
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR _data_entry$7[ebp+4]
	mov	DWORD PTR [eax+164], ecx
; Line 542
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	_fnt_font_load
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 543
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@fnt_face_g
$LN16@fnt_face_g:
; Line 546
	mov	edx, 4
	imul	eax, edx, 61
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN15@fnt_face_g
	mov	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dir_entry2$9[ebp]
	push	edx
	push	OFFSET $SG7924
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN15@fnt_face_g:
	xor	eax, eax
	jne	SHORT $LN16@fnt_face_g
; Line 547
	jmp	$Fail$140
; Line 549
	jmp	SHORT $LN19@fnt_face_g
$LN11@fnt_face_g:
; Line 551
	mov	ecx, 4
	imul	edx, ecx, 61
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN10@fnt_face_g
	mov	eax, DWORD PTR _dir_entry2$9[ebp]
	push	eax
	push	OFFSET $SG7930
	call	_FT_Message
	add	esp, 8
$LN10@fnt_face_g:
	xor	ecx, ecx
	jne	SHORT $LN11@fnt_face_g
$LN19@fnt_face_g:
; Line 554
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx], eax
$LN26@fnt_face_g:
; Line 556
	jmp	$LN31@fnt_face_g
$LN30@fnt_face_g:
; Line 557
	jmp	$LN39@fnt_face_g
$LN38@fnt_face_g:
; Line 558
	jmp	$LN47@fnt_face_g
$LN85@fnt_face_g:
; Line 561
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN7@fnt_face_g
$LN6@fnt_face_g:
; Line 563
	mov	eax, 4
	imul	ecx, eax, 61
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN5@fnt_face_g
	push	OFFSET $SG7936
	call	_FT_Message
	add	esp, 4
$LN5@fnt_face_g:
	xor	edx, edx
	jne	SHORT $LN6@fnt_face_g
; Line 564
	push	OFFSET $SG7937
	push	564					; 00000234H
	push	3
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 3
	mov	DWORD PTR _error$[ebp], eax
; Line 565
	jmp	SHORT $Exit$139
$LN7@fnt_face_g:
; Line 568
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _face_index$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $Fail$140
; Line 570
	push	OFFSET $SG7939
	push	570					; 0000023aH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 571
	jmp	SHORT $Exit$139
$Fail$140:
; Line 576
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $Exit$139
; Line 577
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_fnt_font_done
	add	esp, 4
$Exit$139:
; Line 580
	mov	eax, DWORD PTR _error$[ebp]
; Line 581
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN138@fnt_face_g
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN138@fnt_face_g:
	DD	12					; 0000000cH
	DD	$LN137@fnt_face_g
$LN137@fnt_face_g:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN125@fnt_face_g
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN126@fnt_face_g
	DD	-48					; ffffffd0H
	DD	6
	DD	$LN127@fnt_face_g
	DD	-100					; ffffff9cH
	DD	20					; 00000014H
	DD	$LN128@fnt_face_g
	DD	-128					; ffffff80H
	DD	20					; 00000014H
	DD	$LN129@fnt_face_g
	DD	-152					; ffffff68H
	DD	16					; 00000010H
	DD	$LN130@fnt_face_g
	DD	-176					; ffffff50H
	DD	16					; 00000010H
	DD	$LN131@fnt_face_g
	DD	-200					; ffffff38H
	DD	16					; 00000010H
	DD	$LN132@fnt_face_g
	DD	-216					; ffffff28H
	DD	8
	DD	$LN133@fnt_face_g
	DD	-232					; ffffff18H
	DD	8
	DD	$LN134@fnt_face_g
	DD	-248					; ffffff08H
	DD	8
	DD	$LN135@fnt_face_g
	DD	-272					; fffffef0H
	DD	16					; 00000010H
	DD	$LN136@fnt_face_g
$LN136@fnt_face_g:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
$LN135@fnt_face_g:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	51					; 00000033H
	DB	0
$LN134@fnt_face_g:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	50					; 00000032H
	DB	0
$LN133@fnt_face_g:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	0
$LN132@fnt_face_g:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN131@fnt_face_g:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN130@fnt_face_g:
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN129@fnt_face_g:
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	51					; 00000033H
	DB	50					; 00000032H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN128@fnt_face_g:
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	51					; 00000033H
	DB	50					; 00000032H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN127@fnt_face_g:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN126@fnt_face_g:
	DB	109					; 0000006dH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN125@fnt_face_g:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_fnt_face_get_dll_font ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv129 = -24						; size = 4
tv94 = -17						; size = 1
_size$ = -16						; size = 4
_new_format$ = -9					; size = 1
_header$ = -8						; size = 4
_error$ = -4						; size = 4
_font$ = 8						; size = 4
_stream$ = 12						; size = 4
_fnt_font_load PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 213
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 4
	mov	DWORD PTR _header$[ebp], eax
; Line 220
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN19@fnt_font_l
	mov	ecx, DWORD PTR _header$[ebp]
	push	ecx
	push	OFFSET _winfnt_header_fields
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadFields
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@fnt_font_l
$LN19@fnt_font_l:
; Line 221
	jmp	$Exit$27
$LN20@fnt_font_l:
; Line 225
	mov	eax, DWORD PTR _header$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 512				; 00000200H
	je	SHORT $LN18@fnt_font_l
	mov	edx, DWORD PTR _header$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 768				; 00000300H
	je	SHORT $LN18@fnt_font_l
$LN17@fnt_font_l:
; Line 227
	mov	ecx, 4
	imul	edx, ecx, 61
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN16@fnt_font_l
	push	OFFSET $SG7710
	call	_FT_Message
	add	esp, 4
$LN16@fnt_font_l:
	xor	eax, eax
	jne	SHORT $LN17@fnt_font_l
; Line 228
	push	OFFSET $SG7711
	push	228					; 000000e4H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 229
	jmp	$Exit$27
$LN18@fnt_font_l:
; Line 232
	mov	ecx, DWORD PTR _font$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	cmp	edx, 768				; 00000300H
	jne	SHORT $LN23@fnt_font_l
	mov	BYTE PTR tv94[ebp], 1
	jmp	SHORT $LN24@fnt_font_l
$LN23@fnt_font_l:
	mov	BYTE PTR tv94[ebp], 0
$LN24@fnt_font_l:
	mov	al, BYTE PTR tv94[ebp]
	mov	BYTE PTR _new_format$[ebp], al
; Line 233
	movzx	ecx, BYTE PTR _new_format$[ebp]
	test	ecx, ecx
	je	SHORT $LN25@fnt_font_l
	mov	DWORD PTR tv129[ebp], 148		; 00000094H
	jmp	SHORT $LN26@fnt_font_l
$LN25@fnt_font_l:
	mov	DWORD PTR tv129[ebp], 118		; 00000076H
$LN26@fnt_font_l:
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _size$[ebp], edx
; Line 235
	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN13@fnt_font_l
$LN12@fnt_font_l:
; Line 237
	mov	edx, 4
	imul	eax, edx, 61
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN11@fnt_font_l
	push	OFFSET $SG7718
	call	_FT_Message
	add	esp, 4
$LN11@fnt_font_l:
	xor	ecx, ecx
	jne	SHORT $LN12@fnt_font_l
; Line 238
	push	OFFSET $SG7719
	push	238					; 000000eeH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 239
	jmp	$Exit$27
$LN13@fnt_font_l:
; Line 243
	mov	edx, DWORD PTR _header$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 512				; 00000200H
	jne	SHORT $LN8@fnt_font_l
; Line 245
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [ecx+128], 0
; Line 246
	xor	edx, edx
	mov	eax, DWORD PTR _header$[ebp]
	mov	WORD PTR [eax+132], dx
; Line 247
	xor	ecx, ecx
	mov	edx, DWORD PTR _header$[ebp]
	mov	WORD PTR [edx+134], cx
; Line 248
	xor	eax, eax
	mov	ecx, DWORD PTR _header$[ebp]
	mov	WORD PTR [ecx+136], ax
; Line 250
	xor	edx, edx
	mov	eax, DWORD PTR _header$[ebp]
	mov	WORD PTR [eax+138], dx
$LN8@fnt_font_l:
; Line 253
	mov	ecx, DWORD PTR _header$[ebp]
	movzx	edx, WORD PTR [ecx+68]
	and	edx, 1
	je	SHORT $LN7@fnt_font_l
$LN6@fnt_font_l:
; Line 255
	mov	eax, 4
	imul	ecx, eax, 61
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN5@fnt_font_l
	push	OFFSET $SG7726
	call	_FT_Message
	add	esp, 4
$LN5@fnt_font_l:
	xor	edx, edx
	jne	SHORT $LN6@fnt_font_l
; Line 256
	push	OFFSET $SG7727
	push	256					; 00000100H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
; Line 257
	jmp	SHORT $Exit$27
$LN7@fnt_font_l:
; Line 262
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $Exit$27
	mov	eax, DWORD PTR _font$[ebp]
	add	eax, 160				; 000000a0H
	push	eax
	mov	ecx, DWORD PTR _header$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExtractFrame
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$Exit$27:
; Line 266
	mov	eax, DWORD PTR _error$[ebp]
; Line 267
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fnt_font_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_font$ = -12						; size = 4
_stream$ = -8						; size = 4
_memory$ = -4						; size = 4
_face$ = 8						; size = 4
_fnt_font_done PROC
; File d:\mozilla\modules\freetype2\src\winfonts\winfnt.c
; Line 190
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 191
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 192
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR _stream$[ebp], eax
; Line 193
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR _font$[ebp], edx
; Line 196
	cmp	DWORD PTR _font$[ebp], 0
	jne	SHORT $LN8@fnt_font_d
; Line 197
	jmp	SHORT $LN9@fnt_font_d
$LN8@fnt_font_d:
; Line 199
	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN6@fnt_font_d
; Line 200
	mov	ecx, DWORD PTR _font$[ebp]
	add	ecx, 160				; 000000a0H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReleaseFrame
	add	esp, 8
$LN6@fnt_font_d:
; Line 201
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+168], 0
	xor	ecx, ecx
	jne	SHORT $LN6@fnt_font_d
$LN3@fnt_font_d:
; Line 203
	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _font$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@fnt_font_d
; Line 204
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+132], 0
$LN9@fnt_font_d:
; Line 205
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fnt_font_done ENDP
_TEXT	ENDS
END
