; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\base\ftbase.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_ft_raccess_guess_table
CONST	SEGMENT
_ft_trig_arctan_table DD 01a90a7H
	DD	0e0947H
	DD	072001H
	DD	03938bH
	DD	01ca38H
	DD	0e52aH
	DD	07297H
	DD	0394cH
	DD	01ca6H
	DD	0e53H
	DD	0729H
	DD	0395H
	DD	01caH
	DD	0e5H
	DD	073H
	DD	039H
	DD	01dH
	DD	0eH
	DD	07H
	DD	04H
	DD	02H
	DD	01H
_ft_raccess_guess_table DD FLAT:_raccess_guess_apple_double
	DD	00H
	DD	FLAT:_raccess_guess_apple_single
	DD	01H
	DD	FLAT:_raccess_guess_darwin_ufs_export
	DD	02H
	DD	FLAT:_raccess_guess_darwin_newvfs
	DD	03H
	DD	FLAT:_raccess_guess_darwin_hfsplus
	DD	04H
	DD	FLAT:_raccess_guess_vfat
	DD	05H
	DD	FLAT:_raccess_guess_linux_cap
	DD	06H
	DD	FLAT:_raccess_guess_linux_double
	DD	07H
	DD	FLAT:_raccess_guess_linux_netatalk
	DD	08H
_null_outline DW 00H
	DW	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
_DATA	SEGMENT
$SG13319 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13320 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11273 DB	'FT_Get_Char_Index: too large variantSelector', 00H
	ORG $+3
$SG11278 DB	' 0x%x is truncated', 0aH, 00H
$SG10266 DB	'Skip rule %d: darwin vfs resource fork is already checke'
	DB	'd and no font is found', 0aH, 00H
$SG13340 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13341 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10272 DB	'Error[%d] has occurred in rule %d', 0aH, 00H
	ORG $+1
$SG10277 DB	'Try rule %d: %s (offset=%d) ...', 00H
$SG10284 DB	'failed', 0aH, 00H
$SG11309 DB	'glyph-dict', 00H
	ORG $+1
$SG10289 DB	'failed', 00H
	ORG $+1
$SG10290 DB	'successful', 00H
	ORG $+1
$SG13363 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG10291 DB	'%s', 0aH, 00H
$SG13364 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12344 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG12346 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG12348 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG11328 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11331 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11335 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11337 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13386 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13387 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12365 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG13394 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG10322 DB	'Try as dfont: %s ...', 00H
	ORG $+3
$SG13395 DB	'FT_Stream_ReadChar: invalid i/o; pos = 0x%lx, size = 0x%'
	DB	'lx', 0aH, 00H
$SG10327 DB	'failed', 00H
	ORG $+1
$SG10328 DB	'successful', 00H
	ORG $+1
$SG10329 DB	'%s', 0aH, 00H
$SG11359 DB	'glyph-dict', 00H
	ORG $+1
$SG13408 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13409 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11367 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13423 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13424 DB	'FT_Stream_ReadUShort: invalid i/o; pos = 0x%lx, size = 0'
	DB	'x%lx', 0aH, 00H
	ORG $+2
$SG10358 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12411 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG9339	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13437 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG9341	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13438 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12415 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG10372 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11398 DB	'postscript-font-name', 00H
	ORG $+3
$SG13452 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG9356	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13453 DB	'FT_Stream_ReadUShortLE: invalid i/o; pos = 0x%lx, size ='
	DB	' 0x%lx', 0aH, 00H
$SG10386 DB	'truetype', 00H
	ORG $+3
$SG13466 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG10394 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13467 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11423 DB	'sfnt-table', 00H
	ORG $+1
$SG10399 DB	'FT_Open_Face: New face object, adding to list', 0aH, 00H
	ORG $+1
$SG10406 DB	'FT_Open_Face: Creating glyph slot', 0aH, 00H
	ORG $+1
$SG13483 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13484 DB	'FT_Stream_ReadUOffset: invalid i/o; pos = 0x%lx, size = '
	DB	'0x%lx', 0aH, 00H
	ORG $+1
$SG10415 DB	'FT_Open_Face: Creating size object', 0aH, 00H
$SG11440 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG7351	DB	'd:\mozilla\modules\freetype2\src\base\ftcalc.c', 00H
	ORG $+1
$SG13497 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG7353	DB	'd:\mozilla\modules\freetype2\src\base\ftcalc.c', 00H
	ORG $+1
$SG13498 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11450 DB	'sfnt-table', 00H
	ORG $+1
$SG11453 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG9412	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG9413	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11467 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13516 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG10444 DB	'FT_Open_Face: Return %d', 0aH, 00H
	ORG $+3
$SG13517 DB	'FT_Stream_ReadULong: invalid i/o; pos = 0x%lx, size = 0x'
	DB	'%lx', 0aH, 00H
	ORG $+3
$SG12499 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG10452 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11477 DB	'sfnt-table', 00H
	ORG $+1
$SG11480 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13530 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13531 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12510 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG10465 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10467 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12516 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG11498 DB	'tt-cmaps', 00H
	ORG $+3
$SG10476 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13549 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13550 DB	'FT_Stream_ReadULongLE: invalid i/o; pos = 0x%lx, size = '
	DB	'0x%lx', 0aH, 00H
	ORG $+1
$SG9461	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG9463	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13562 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13564 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG9468	DB	'FT_New_GlyphSlot: Creating new slot object', 0aH, 00H
$SG11519 DB	'tt-cmaps', 00H
	ORG $+3
$SG11528 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10504 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10506 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11531 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10508 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG9484	DB	'FT_New_GlyphSlot: Return %d', 0aH, 00H
	ORG $+3
$SG13581 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG12562 DB	0aH, 00H
	ORG $+2
$SG12582 DB	'Resource tags: %c%c%c%c', 0aH, 00H
	ORG $+3
$SG10534 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10536 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10538 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12587 DB	'             : subcount=%d, suboffset=0x%04x', 0aH, 00H
	ORG $+2
$SG10548 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12609 DB	'             [%d]: resource_id=0x%04x, offset=0x%08x', 0aH
	DB	00H
	ORG $+2
$SG10562 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10564 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12619 DB	'             -- sort resources by their ids --', 0aH, 00H
$SG9552	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12627 DB	'             [%d]: resource_id=0x%04x, offset=0x%08x', 0aH
	DB	00H
	ORG $+2
$SG10581 DB	'FT_Match_Size: bitmap strike %d matches', 0aH, 00H
	ORG $+3
$SG10584 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12638 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG7524	DB	'd:\mozilla\modules\freetype2\src\base\ftgloadr.c', 00H
	ORG $+3
$SG11624 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11627 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11629 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11631 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG7538	DB	'd:\mozilla\modules\freetype2\src\base\ftgloadr.c', 00H
	ORG $+3
$SG10617 DB	'FT_Select_Metrics:', 0aH, 00H
$SG10622 DB	'  x scale: %d (%f)', 0aH, 00H
$SG9601	DB	'  x advance: %d', 0aH, 00H
	ORG $+3
$SG10627 DB	'  y scale: %d (%f)', 0aH, 00H
$SG9606	DB	'  y advance: %d', 0aH, 00H
	ORG $+3
$SG10632 DB	'  ascender: %f', 0aH, 00H
$SG9611	DB	'  linear x advance: %d', 0aH, 00H
$SG10637 DB	'  descender: %f', 0aH, 00H
	ORG $+3
$SG9616	DB	'  linear y advance: %d', 0aH, 00H
$SG10642 DB	'  height: %f', 0aH, 00H
	ORG $+2
$SG10647 DB	'  max advance: %f', 0aH, 00H
	ORG $+1
$SG11675 DB	'MD5 checksum for %dx%d bitmap:', 0aH, '  ', 00H
	ORG $+2
$SG10652 DB	'  x ppem: %d', 0aH, 00H
	ORG $+2
$SG9630	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10657 DB	'  y ppem: %d', 0aH, 00H
	ORG $+2
$SG11683 DB	'%02X', 00H
	ORG $+3
$SG11688 DB	0aH, 00H
	ORG $+2
$SG11697 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11727 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10704 DB	'FT_Request_Metrics:', 0aH, 00H
	ORG $+3
$SG11729 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11732 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10709 DB	'  x scale: %d (%f)', 0aH, 00H
$SG11738 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10714 DB	'  y scale: %d (%f)', 0aH, 00H
$SG11740 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10719 DB	'  ascender: %f', 0aH, 00H
$SG10724 DB	'  descender: %f', 0aH, 00H
	ORG $+3
$SG10729 DB	'  height: %f', 0aH, 00H
	ORG $+2
$SG10734 DB	'  max advance: %f', 0aH, 00H
	ORG $+1
$SG9714	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10739 DB	'  x ppem: %d', 0aH, 00H
	ORG $+2
$SG9715	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9717	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10744 DB	'  y ppem: %d', 0aH, 00H
	ORG $+2
$SG10753 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG9729	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10756 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10765 DB	'FT_Select_Size (font driver''s `select_size''):', 0aH, 00H
	ORG $+1
$SG9741	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG9742	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10770 DB	'  x scale: %d (%f)', 0aH, 00H
$SG12819 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG10775 DB	'  y scale: %d (%f)', 0aH, 00H
$SG13848 DB	'd:\mozilla\modules\freetype2\src\base\ftutil.c', 00H
	ORG $+1
$SG13851 DB	'd:\mozilla\modules\freetype2\src\base\ftutil.c', 00H
	ORG $+1
$SG10780 DB	'  ascender: %f', 0aH, 00H
$SG10785 DB	'  descender: %f', 0aH, 00H
	ORG $+3
$SG11810 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12835 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG11811 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10790 DB	'  height: %f', 0aH, 00H
	ORG $+2
$SG10795 DB	'  max advance: %f', 0aH, 00H
	ORG $+1
$SG10800 DB	'  x ppem: %d', 0aH, 00H
	ORG $+2
$SG12850 DB	'._', 00H
	ORG $+1
$SG11826 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11827 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12852 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG10805 DB	'  y ppem: %d', 0aH, 00H
	ORG $+2
$SG13884 DB	'd:\mozilla\modules\freetype2\src\base\ftutil.c', 00H
	ORG $+1
$SG11837 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10815 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10818 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13891 DB	'd:\mozilla\modules\freetype2\src\base\ftutil.c', 00H
	ORG $+1
$SG11848 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10826 DB	'FT_Request_Size (font driver''s `request_size''):', 0aH, 00H
	ORG $+3
$SG13899 DB	'd:\mozilla\modules\freetype2\src\base\ftutil.c', 00H
	ORG $+1
$SG13900 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12877 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG10831 DB	'  x scale: %d (%f)', 0aH, 00H
$SG12880 DB	'/rsrc', 00H
	ORG $+2
$SG13907 DB	'd:\mozilla\modules\freetype2\src\base\ftutil.c', 00H
	ORG $+1
$SG10836 DB	'  y scale: %d (%f)', 0aH, 00H
$SG9816	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10841 DB	'  ascender: %f', 0aH, 00H
$SG11866 DB	'FT_Property_Set', 00H
$SG11868 DB	'FT_Property_Get', 00H
$SG10846 DB	'  descender: %f', 0aH, 00H
	ORG $+3
$SG11872 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12899 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG11875 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10851 DB	'  height: %f', 0aH, 00H
	ORG $+2
$SG12902 DB	'/..namedfork/rsrc', 00H
	ORG $+2
$SG10856 DB	'  max advance: %f', 0aH, 00H
	ORG $+1
$SG9832	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11881 DB	'%s: can''t find module `%s''', 0aH, 00H
$SG11882 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11884 DB	'%s: module `%s'' doesn''t support properties', 0aH, 00H
$SG11885 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10861 DB	'  x ppem: %d', 0aH, 00H
	ORG $+2
$SG11886 DB	'properties', 00H
	ORG $+1
$SG11888 DB	'%s: module `%s'' doesn''t support properties', 0aH, 00H
$SG11889 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10866 DB	'  y ppem: %d', 0aH, 00H
	ORG $+2
$SG12916 DB	'resource.frk/', 00H
	ORG $+2
$SG12918 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG11896 DB	'%s: property service of module `%s'' is broken', 0aH, 00H
	ORG $+1
$SG11897 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12932 DB	'.resource/', 00H
	ORG $+1
$SG9860	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12934 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG9862	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11921 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12949 DB	'%', 00H
	ORG $+2
$SG12951 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG11932 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10921 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10923 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12972 DB	'.AppleDouble/', 00H
	ORG $+2
$SG12974 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG11963 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10942 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG14016 DB	'd:\mozilla\modules\freetype2\src\base\ftutil.c', 00H
	ORG $+1
$SG10944 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG9921	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11970 DB	'type42', 00H
	ORG $+1
$SG11971 DB	'type42', 00H
	ORG $+1
$SG10954 DB	'kerning', 00H
$SG13004 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG10956 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13011 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG11987 DB	'FT_Done_Library: close faces for %s', 0aH, 00H
	ORG $+3
$SG10965 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10967 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10970 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11998 DB	'FT_Done_Library: failed to free some faces', 0aH, 00H
$SG10975 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG9951	DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13024 DB	'd:\mozilla\modules\freetype2\src\base\ftrfork.c', 00H
$SG10984 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10987 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10989 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10994 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12025 DB	'truetype', 00H
	ORG $+3
$SG12029 DB	'truetype-engine', 00H
$SG9981	DB	'cid', 00H
$SG9982	DB	'type1', 00H
	ORG $+2
$SG11009 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG11010 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12071 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG12073 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG10026 DB	'                 POST fragment #%d: length=0x%08x', 0aH, 00H
	ORG $+1
$SG10033 DB	'             too long fragment length makes pfb_len conf'
	DB	'used: temp=0x%08x', 0aH, 00H
	ORG $+1
$SG12082 DB	'FT_Outline_Decompose: Outline %d', 0aH, 00H
	ORG $+2
$SG10034 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10039 DB	'             total buffer size to concatenate %d POST fr'
	DB	'agments: 0x%08x', 0aH, 00H
	ORG $+3
$SG12093 DB	'  move to (%.2f, %.2f)', 0aH, 00H
$SG11069 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13131 DB	'FT_Stream_Seek: invalid i/o; pos = 0x%lx, size = 0x%lx', 0aH
	DB	00H
$SG13132 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG10045 DB	'             too long fragment length makes pfb_len conf'
	DB	'used: pfb_len=0x%08x', 0aH, 00H
	ORG $+2
$SG10046 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG10058 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG12109 DB	'  line to (%.2f, %.2f)', 0aH, 00H
$SG13135 DB	'FT_Stream_Seek: invalid i/o; pos = 0x%lx, size = 0x%lx', 0aH
	DB	00H
$SG13136 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG10065 DB	'POST fragment[%d]: offsets=0x%08x, rlen=0x%08x, flags=0x'
	DB	'%04x', 0aH, 00H
	ORG $+2
$SG10071 DB	'    Skip POST fragment #%d because it is a comment', 0aH
	DB	00H
$SG13144 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG12121 DB	'  conic to (%.2f, %.2f) with control (%.2f, %.2f)', 0aH, 00H
	ORG $+1
$SG11097 DB	'FT_Get_Char_Index: too large charcode', 00H
	ORG $+2
$SG7003	DB	'd:\mozilla\modules\freetype2\src\base\ftadvanc.c', 00H
	ORG $+3
$SG11102 DB	' 0x%x is truncated', 0aH, 00H
$SG12128 DB	'  conic to (%.2f, %.2f) with control (%.2f, %.2f)', 0aH, 00H
	ORG $+1
$SG12134 DB	'  conic to (%.2f, %.2f) with control (%.2f, %.2f)', 0aH, 00H
	ORG $+1
$SG10080 DB	'    Write POST fragment #%d header (4-byte) to buffer 0x'
	DB	'%p + 0x%08x', 0aH, 00H
	ORG $+3
$SG10091 DB	'    Write POST fragment #%d header (6-byte) to buffer 0x'
	DB	'%p + 0x%08x', 0aH, 00H
	ORG $+3
$SG7020	DB	'd:\mozilla\modules\freetype2\src\base\ftadvanc.c', 00H
	ORG $+3
$SG7022	DB	'd:\mozilla\modules\freetype2\src\base\ftadvanc.c', 00H
	ORG $+3
$SG13168 DB	'FT_Stream_ReadAt: invalid i/o; pos = 0x%lx, size = 0x%lx'
	DB	0aH, 00H
	ORG $+2
$SG13169 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG7025	DB	'd:\mozilla\modules\freetype2\src\base\ftadvanc.c', 00H
	ORG $+3
$SG10100 DB	'    Load POST fragment #%d (%d byte) to buffer 0x%p + 0x'
	DB	'%08x', 0aH, 00H
	ORG $+2
$SG13175 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG12147 DB	'  cubic to (%.2f, %.2f) with controls (%.2f, %.2f) and ('
	DB	'%.2f, %.2f)', 0aH, 00H
	ORG $+3
$SG13174 DB	'FT_Stream_ReadAt: invalid read; expected %lu bytes, got '
	DB	'%lu', 0aH, 00H
	ORG $+3
$SG12153 DB	'  cubic to (%.2f, %.2f) with controls (%.2f, %.2f) and ('
	DB	'%.2f, %.2f)', 0aH, 00H
	ORG $+3
$SG10109 DB	'type1', 00H
	ORG $+2
$SG12158 DB	'  line to (%.2f, %.2f)', 0aH, 00H
$SG10115 DB	'  Abort due to too-short buffer to store all POST fragme'
	DB	'nts', 0aH, 00H
	ORG $+3
$SG12164 DB	'FT_Outline_Decompose: Done', 0aH, 00H
$SG12169 DB	'FT_Outline_Decompose: Error %d', 0aH, 00H
$SG7049	DB	'd:\mozilla\modules\freetype2\src\base\ftadvanc.c', 00H
	ORG $+3
$SG12170 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG10122 DB	'  Abort due to invalid offset in a POST fragment', 0aH, 00H
	ORG $+2
$SG7051	DB	'd:\mozilla\modules\freetype2\src\base\ftadvanc.c', 00H
	ORG $+3
$SG7055	DB	'd:\mozilla\modules\freetype2\src\base\ftadvanc.c', 00H
	ORG $+3
$SG11156 DB	'FT_Get_Char_Index: too large charcode', 00H
	ORG $+2
$SG12183 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG7063	DB	'd:\mozilla\modules\freetype2\src\base\ftadvanc.c', 00H
	ORG $+3
$SG11161 DB	' 0x%x is truncated', 0aH, 00H
$SG12187 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG12189 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG11167 DB	'FT_Get_Char_Index: too large variantSelector', 00H
	ORG $+3
$SG11172 DB	' 0x%x is truncated', 0aH, 00H
$SG13222 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13223 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10152 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13228 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13227 DB	'FT_Stream_EnterFrame: frame size (%lu) larger than strea'
	DB	'm size (%lu)', 0aH, 00H
	ORG $+2
$SG10158 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13233 DB	'FT_Stream_EnterFrame: invalid read; expected %lu bytes, '
	DB	'got %lu', 0aH, 00H
	ORG $+3
$SG12211 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG13238 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG10167 DB	'OTTO', 00H
	ORG $+3
$SG10168 DB	'cff', 00H
$SG10169 DB	'truetype', 00H
	ORG $+3
$SG13242 DB	'FT_Stream_EnterFrame: invalid i/o; pos = 0x%lx, count = '
	DB	'%lu, size = 0x%lx', 0aH, 00H
	ORG $+1
$SG11194 DB	'FT_Get_Char_Index: too large charcode', 00H
	ORG $+2
$SG13243 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG11199 DB	' 0x%x is truncated', 0aH, 00H
$SG13251 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13252 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11205 DB	'FT_Get_Char_Index: too large variantSelector', 00H
	ORG $+3
$SG12231 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG11210 DB	' 0x%x is truncated', 0aH, 00H
$SG12240 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG12243 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG13268 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13269 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG12251 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG12253 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG13281 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG13282 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG11246 DB	'FT_Get_Char_Index: too large charcode', 00H
	ORG $+2
$SG12273 DB	'd:\mozilla\modules\freetype2\src\base\ftoutln.c', 00H
$SG11251 DB	' 0x%x is truncated', 0aH, 00H
$SG13300 DB	'd:\mozilla\modules\freetype2\src\base\ftstream.c', 00H
	ORG $+3
$SG10228 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
	ORG $+1
$SG13301 DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG10235 DB	'd:\mozilla\modules\freetype2\src\base\ftobjs.c', 00H
_DATA	ENDS
PUBLIC	_FT_New_Face
PUBLIC	_FT_New_Memory_Face
PUBLIC	_FT_Open_Face
PUBLIC	_FT_Attach_File
PUBLIC	_FT_Attach_Stream
PUBLIC	_FT_Reference_Face
PUBLIC	_FT_Done_Face
PUBLIC	_FT_Select_Size
PUBLIC	_FT_Request_Size
PUBLIC	_FT_Set_Char_Size
PUBLIC	_FT_Set_Pixel_Sizes
PUBLIC	_FT_Load_Glyph
PUBLIC	_FT_Load_Char
PUBLIC	_FT_Set_Transform
PUBLIC	_FT_Render_Glyph
PUBLIC	_FT_Get_Kerning
PUBLIC	_FT_Get_Track_Kerning
PUBLIC	_FT_Get_Glyph_Name
PUBLIC	_FT_Get_Postscript_Name
PUBLIC	_FT_Select_Charmap
PUBLIC	_FT_Set_Charmap
PUBLIC	_FT_Get_Charmap_Index
PUBLIC	_FT_Get_Char_Index
PUBLIC	_FT_Get_First_Char
PUBLIC	_FT_Get_Next_Char
PUBLIC	_FT_Get_Name_Index
PUBLIC	_FT_Get_SubGlyph_Info
PUBLIC	_FT_Face_GetCharVariantIndex
PUBLIC	_FT_Face_GetCharVariantIsDefault
PUBLIC	_FT_Face_GetVariantSelectors
PUBLIC	_FT_Face_GetVariantsOfChar
PUBLIC	_FT_Face_GetCharsOfVariant
PUBLIC	_FT_MulDiv
PUBLIC	_FT_MulFix
PUBLIC	_FT_DivFix
PUBLIC	_FT_RoundFix
PUBLIC	_FT_CeilFix
PUBLIC	_FT_FloorFix
PUBLIC	_FT_Vector_Transform
PUBLIC	_FT_Library_Version
PUBLIC	_FT_Add_Module
PUBLIC	_FT_Get_Module
PUBLIC	_FT_Remove_Module
PUBLIC	_FT_Property_Set
PUBLIC	_FT_Property_Get
PUBLIC	_FT_Reference_Library
PUBLIC	_FT_New_Library
PUBLIC	_FT_Done_Library
PUBLIC	_FT_Set_Debug_Hook
PUBLIC	_FT_Get_TrueType_Engine_Type
PUBLIC	_FT_Matrix_Multiply
PUBLIC	_FT_Matrix_Invert
PUBLIC	_FT_Get_Renderer
PUBLIC	_FT_Set_Renderer
PUBLIC	_FT_New_Size
PUBLIC	_FT_Done_Size
PUBLIC	_FT_Activate_Size
PUBLIC	_ft_mem_alloc
PUBLIC	_ft_mem_qalloc
PUBLIC	_ft_mem_realloc
PUBLIC	_ft_mem_qrealloc
PUBLIC	_ft_mem_free
PUBLIC	_ft_mem_strdup
PUBLIC	_ft_mem_dup
PUBLIC	_ft_mem_strcpyn
PUBLIC	_FT_GlyphLoader_New
PUBLIC	_FT_GlyphLoader_CreateExtra
PUBLIC	_FT_GlyphLoader_Done
PUBLIC	_FT_GlyphLoader_Reset
PUBLIC	_FT_GlyphLoader_Rewind
PUBLIC	_FT_GlyphLoader_CheckPoints
PUBLIC	_FT_GlyphLoader_CheckSubGlyphs
PUBLIC	_FT_GlyphLoader_Prepare
PUBLIC	_FT_GlyphLoader_Add
PUBLIC	_FT_GlyphLoader_CopyPoints
PUBLIC	_ft_service_list_lookup
PUBLIC	_FT_CMap_New
PUBLIC	_FT_CMap_Done
PUBLIC	_FT_Get_Module_Interface
PUBLIC	_ft_module_get_service
PUBLIC	_FT_New_GlyphSlot
PUBLIC	_FT_Done_GlyphSlot
PUBLIC	_FT_Select_Metrics
PUBLIC	_FT_Request_Metrics
PUBLIC	_FT_Match_Size
PUBLIC	_ft_synthesize_vertical_metrics
PUBLIC	_ft_glyphslot_free_bitmap
PUBLIC	_ft_glyphslot_alloc_bitmap
PUBLIC	_ft_glyphslot_set_bitmap
PUBLIC	_FT_Lookup_Renderer
PUBLIC	_FT_Render_Glyph_Internal
PUBLIC	_FT_Get_Advance
PUBLIC	_FT_Get_Advances
PUBLIC	_FT_Sin
PUBLIC	_FT_Cos
PUBLIC	_FT_Tan
PUBLIC	_FT_Atan2
PUBLIC	_FT_Angle_Diff
PUBLIC	_FT_Vector_Unit
PUBLIC	_FT_Vector_Rotate
PUBLIC	_FT_Vector_Length
PUBLIC	_FT_Vector_Polarize
PUBLIC	_FT_Vector_From_Polar
PUBLIC	_FT_MulDiv_No_Round
PUBLIC	_FT_Matrix_Multiply_Scaled
PUBLIC	_FT_Vector_Transform_Scaled
PUBLIC	_ft_corner_orientation
PUBLIC	_ft_corner_is_flat
PUBLIC	_FT_MSB
PUBLIC	_FT_Hypot
PUBLIC	_FT_List_Find
PUBLIC	_FT_List_Add
PUBLIC	_FT_List_Insert
PUBLIC	_FT_List_Remove
PUBLIC	_FT_List_Up
PUBLIC	_FT_List_Iterate
PUBLIC	_FT_List_Finalize
PUBLIC	_FT_Outline_Decompose
PUBLIC	_FT_Outline_New
PUBLIC	_FT_Outline_New_Internal
PUBLIC	_FT_Outline_Done
PUBLIC	_FT_Outline_Done_Internal
PUBLIC	_FT_Outline_Check
PUBLIC	_FT_Outline_Get_CBox
PUBLIC	_FT_Outline_Translate
PUBLIC	_FT_Outline_Copy
PUBLIC	_FT_Outline_Transform
PUBLIC	_FT_Outline_Embolden
PUBLIC	_FT_Outline_EmboldenXY
PUBLIC	_FT_Outline_Reverse
PUBLIC	_FT_Outline_Get_Bitmap
PUBLIC	_FT_Outline_Render
PUBLIC	_FT_Outline_Get_Orientation
PUBLIC	_ft_validator_init
PUBLIC	_ft_validator_run
PUBLIC	_ft_validator_error
PUBLIC	_FT_Raccess_Guess
PUBLIC	_FT_Raccess_Get_HeaderInfo
PUBLIC	_FT_Raccess_Get_DataOffsets
PUBLIC	_FT_Stream_New
PUBLIC	_FT_Stream_Free
PUBLIC	_FT_Stream_OpenMemory
PUBLIC	_FT_Stream_Close
PUBLIC	_FT_Stream_Seek
PUBLIC	_FT_Stream_Skip
PUBLIC	_FT_Stream_Pos
PUBLIC	_FT_Stream_Read
PUBLIC	_FT_Stream_ReadAt
PUBLIC	_FT_Stream_TryRead
PUBLIC	_FT_Stream_EnterFrame
PUBLIC	_FT_Stream_ExitFrame
PUBLIC	_FT_Stream_ExtractFrame
PUBLIC	_FT_Stream_ReleaseFrame
PUBLIC	_FT_Stream_GetChar
PUBLIC	_FT_Stream_GetUShort
PUBLIC	_FT_Stream_GetUOffset
PUBLIC	_FT_Stream_GetULong
PUBLIC	_FT_Stream_GetUShortLE
PUBLIC	_FT_Stream_GetULongLE
PUBLIC	_FT_Stream_ReadChar
PUBLIC	_FT_Stream_ReadUShort
PUBLIC	_FT_Stream_ReadUOffset
PUBLIC	_FT_Stream_ReadULong
PUBLIC	_FT_Stream_ReadUShortLE
PUBLIC	_FT_Stream_ReadULongLE
PUBLIC	_FT_Stream_ReadFields
PUBLIC	_FT_Get_Sfnt_Table
PUBLIC	_FT_Load_Sfnt_Table
PUBLIC	_FT_Sfnt_Table_Info
PUBLIC	_FT_Get_CMap_Language_ID
PUBLIC	_FT_Get_CMap_Format
PUBLIC	_MD5_Init
PUBLIC	_MD5_Update
PUBLIC	_MD5_Final
PUBLIC	_FT_Get_Sfnt_Name_Count
PUBLIC	_FT_Get_Sfnt_Name
PUBLIC	__real@4050000000000000
PUBLIC	__real@40f0000000000000
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__memmove:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	__imp__strrchr:PROC
EXTRN	__imp__qsort:PROC
EXTRN	__imp__longjmp:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Panic:PROC
EXTRN	_FT_Throw:PROC
EXTRN	_ft_debug_init:PROC
EXTRN	_FT_Stream_Open:PROC
EXTRN	_FT_Bitmap_New:PROC
EXTRN	_FT_Bitmap_Convert:PROC
EXTRN	_FT_Bitmap_Done:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@40f0000000000000
CONST	SEGMENT
__real@40f0000000000000 DQ 040f0000000000000r	; 65536
CONST	ENDS
;	COMDAT __real@4050000000000000
CONST	SEGMENT
__real@4050000000000000 DQ 04050000000000000r	; 64
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -32						; size = 4
_arctanptr$ = -28					; size = 4
_b$ = -24						; size = 4
_xtemp$ = -20						; size = 4
_y$ = -16						; size = 4
_x$ = -12						; size = 4
_i$ = -8						; size = 4
_theta$ = -4						; size = 4
_vec$ = 8						; size = 4
_ft_trig_pseudo_polarize PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 219
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 226
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$[ebp], ecx
; Line 227
	mov	edx, DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _y$[ebp], eax
; Line 230
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _x$[ebp]
	jle	SHORT $LN13@ft_trig_ps
; Line 232
	mov	edx, DWORD PTR _x$[ebp]
	neg	edx
	cmp	DWORD PTR _y$[ebp], edx
	jle	SHORT $LN12@ft_trig_ps
; Line 234
	mov	DWORD PTR _theta$[ebp], 5898240		; 005a0000H
; Line 235
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _xtemp$[ebp], eax
; Line 236
	mov	ecx, DWORD PTR _x$[ebp]
	neg	ecx
	mov	DWORD PTR _y$[ebp], ecx
; Line 237
	mov	edx, DWORD PTR _xtemp$[ebp]
	mov	DWORD PTR _x$[ebp], edx
; Line 239
	jmp	SHORT $LN11@ft_trig_ps
$LN12@ft_trig_ps:
; Line 241
	cmp	DWORD PTR _y$[ebp], 0
	jle	SHORT $LN16@ft_trig_ps
	mov	DWORD PTR tv71[ebp], 11796480		; 00b40000H
	jmp	SHORT $LN17@ft_trig_ps
$LN16@ft_trig_ps:
	mov	DWORD PTR tv71[ebp], -11796480		; ff4c0000H
$LN17@ft_trig_ps:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _theta$[ebp], eax
; Line 242
	mov	ecx, DWORD PTR _x$[ebp]
	neg	ecx
	mov	DWORD PTR _x$[ebp], ecx
; Line 243
	mov	edx, DWORD PTR _y$[ebp]
	neg	edx
	mov	DWORD PTR _y$[ebp], edx
$LN11@ft_trig_ps:
; Line 246
	jmp	SHORT $LN10@ft_trig_ps
$LN13@ft_trig_ps:
; Line 248
	mov	eax, DWORD PTR _x$[ebp]
	neg	eax
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN9@ft_trig_ps
; Line 250
	mov	DWORD PTR _theta$[ebp], -5898240	; ffa60000H
; Line 251
	mov	ecx, DWORD PTR _y$[ebp]
	neg	ecx
	mov	DWORD PTR _xtemp$[ebp], ecx
; Line 252
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _y$[ebp], edx
; Line 253
	mov	eax, DWORD PTR _xtemp$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 255
	jmp	SHORT $LN10@ft_trig_ps
$LN9@ft_trig_ps:
; Line 257
	mov	DWORD PTR _theta$[ebp], 0
$LN10@ft_trig_ps:
; Line 261
	mov	DWORD PTR _arctanptr$[ebp], OFFSET _ft_trig_arctan_table
; Line 264
	mov	DWORD PTR _i$[ebp], 1
	mov	DWORD PTR _b$[ebp], 1
	jmp	SHORT $LN7@ft_trig_ps
$LN6@ft_trig_ps:
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@ft_trig_ps:
	cmp	DWORD PTR _i$[ebp], 23			; 00000017H
	jge	$LN5@ft_trig_ps
; Line 266
	cmp	DWORD PTR _y$[ebp], 0
	jle	SHORT $LN4@ft_trig_ps
; Line 268
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	sar	eax, cl
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xtemp$[ebp], eax
; Line 269
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, edx
	mov	DWORD PTR _y$[ebp], eax
; Line 270
	mov	ecx, DWORD PTR _xtemp$[ebp]
	mov	DWORD PTR _x$[ebp], ecx
; Line 271
	mov	edx, DWORD PTR _arctanptr$[ebp]
	mov	eax, DWORD PTR _theta$[ebp]
	add	eax, DWORD PTR [edx]
	mov	DWORD PTR _theta$[ebp], eax
	mov	ecx, DWORD PTR _arctanptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _arctanptr$[ebp], ecx
; Line 273
	jmp	SHORT $LN3@ft_trig_ps
$LN4@ft_trig_ps:
; Line 275
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, edx
	mov	DWORD PTR _xtemp$[ebp], eax
; Line 276
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	sar	edx, cl
	add	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y$[ebp], edx
; Line 277
	mov	eax, DWORD PTR _xtemp$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 278
	mov	ecx, DWORD PTR _arctanptr$[ebp]
	mov	edx, DWORD PTR _theta$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _theta$[ebp], edx
	mov	eax, DWORD PTR _arctanptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _arctanptr$[ebp], eax
$LN3@ft_trig_ps:
; Line 280
	jmp	$LN6@ft_trig_ps
$LN5@ft_trig_ps:
; Line 284
	cmp	DWORD PTR _theta$[ebp], 0
	jl	SHORT $LN2@ft_trig_ps
; Line 285
	mov	ecx, DWORD PTR _theta$[ebp]
	add	ecx, 8
	and	ecx, -16				; fffffff0H
	mov	DWORD PTR _theta$[ebp], ecx
; Line 286
	jmp	SHORT $LN1@ft_trig_ps
$LN2@ft_trig_ps:
; Line 287
	mov	edx, DWORD PTR _theta$[ebp]
	neg	edx
	add	edx, 8
	and	edx, -16				; fffffff0H
	neg	edx
	mov	DWORD PTR _theta$[ebp], edx
$LN1@ft_trig_ps:
; Line 289
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 290
	mov	edx, DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _theta$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 291
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_trig_pseudo_polarize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_arctanptr$ = -24					; size = 4
_b$ = -20						; size = 4
_xtemp$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_i$ = -4						; size = 4
_vec$ = 8						; size = 4
_theta$ = 12						; size = 4
_ft_trig_pseudo_rotate PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 165
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 171
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$[ebp], ecx
; Line 172
	mov	edx, DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _y$[ebp], eax
$LN9@ft_trig_ps:
; Line 175
	cmp	DWORD PTR _theta$[ebp], -2949120	; ffd30000H
	jge	SHORT $LN7@ft_trig_ps
; Line 177
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _xtemp$[ebp], ecx
; Line 178
	mov	edx, DWORD PTR _x$[ebp]
	neg	edx
	mov	DWORD PTR _y$[ebp], edx
; Line 179
	mov	eax, DWORD PTR _xtemp$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 180
	mov	ecx, DWORD PTR _theta$[ebp]
	add	ecx, 5898240				; 005a0000H
	mov	DWORD PTR _theta$[ebp], ecx
; Line 181
	jmp	SHORT $LN9@ft_trig_ps
$LN7@ft_trig_ps:
; Line 183
	cmp	DWORD PTR _theta$[ebp], 2949120		; 002d0000H
	jle	SHORT $LN6@ft_trig_ps
; Line 185
	mov	edx, DWORD PTR _y$[ebp]
	neg	edx
	mov	DWORD PTR _xtemp$[ebp], edx
; Line 186
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _y$[ebp], eax
; Line 187
	mov	ecx, DWORD PTR _xtemp$[ebp]
	mov	DWORD PTR _x$[ebp], ecx
; Line 188
	mov	edx, DWORD PTR _theta$[ebp]
	sub	edx, 5898240				; 005a0000H
	mov	DWORD PTR _theta$[ebp], edx
; Line 189
	jmp	SHORT $LN7@ft_trig_ps
$LN6@ft_trig_ps:
; Line 191
	mov	DWORD PTR _arctanptr$[ebp], OFFSET _ft_trig_arctan_table
; Line 194
	mov	DWORD PTR _i$[ebp], 1
	mov	DWORD PTR _b$[ebp], 1
	jmp	SHORT $LN5@ft_trig_ps
$LN4@ft_trig_ps:
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 1
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@ft_trig_ps:
	cmp	DWORD PTR _i$[ebp], 23			; 00000017H
	jge	$LN3@ft_trig_ps
; Line 196
	cmp	DWORD PTR _theta$[ebp], 0
	jge	SHORT $LN2@ft_trig_ps
; Line 198
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	sar	edx, cl
	add	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xtemp$[ebp], edx
; Line 199
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	sar	eax, cl
	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _y$[ebp], ecx
; Line 200
	mov	edx, DWORD PTR _xtemp$[ebp]
	mov	DWORD PTR _x$[ebp], edx
; Line 201
	mov	eax, DWORD PTR _arctanptr$[ebp]
	mov	ecx, DWORD PTR _theta$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _theta$[ebp], ecx
	mov	edx, DWORD PTR _arctanptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _arctanptr$[ebp], edx
; Line 203
	jmp	SHORT $LN1@ft_trig_ps
$LN2@ft_trig_ps:
; Line 205
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	sar	eax, cl
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _xtemp$[ebp], ecx
; Line 206
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	sar	edx, cl
	add	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y$[ebp], edx
; Line 207
	mov	eax, DWORD PTR _xtemp$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 208
	mov	ecx, DWORD PTR _arctanptr$[ebp]
	mov	edx, DWORD PTR _theta$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _theta$[ebp], edx
	mov	eax, DWORD PTR _arctanptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _arctanptr$[ebp], eax
$LN1@ft_trig_ps:
; Line 210
	jmp	$LN4@ft_trig_ps
$LN3@ft_trig_ps:
; Line 212
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 213
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 214
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_trig_pseudo_rotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -20						; size = 4
tv69 = -16						; size = 4
_shift$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_vec$ = 8						; size = 4
_ft_trig_prenorm PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 134
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 139
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$[ebp], ecx
; Line 140
	mov	edx, DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _y$[ebp], eax
; Line 142
	cmp	DWORD PTR _x$[ebp], 0
	jge	SHORT $LN5@ft_trig_pr
	mov	ecx, DWORD PTR _x$[ebp]
	neg	ecx
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN6@ft_trig_pr
$LN5@ft_trig_pr:
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv69[ebp], edx
$LN6@ft_trig_pr:
	cmp	DWORD PTR _y$[ebp], 0
	jge	SHORT $LN7@ft_trig_pr
	mov	eax, DWORD PTR _y$[ebp]
	neg	eax
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN8@ft_trig_pr
$LN7@ft_trig_pr:
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv72[ebp], ecx
$LN8@ft_trig_pr:
	mov	edx, DWORD PTR tv69[ebp]
	or	edx, DWORD PTR tv72[ebp]
	push	edx
	call	_FT_MSB
	add	esp, 4
	mov	DWORD PTR _shift$[ebp], eax
; Line 144
	cmp	DWORD PTR _shift$[ebp], 29		; 0000001dH
	jg	SHORT $LN2@ft_trig_pr
; Line 146
	mov	eax, 29					; 0000001dH
	sub	eax, DWORD PTR _shift$[ebp]
	mov	DWORD PTR _shift$[ebp], eax
; Line 147
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax], edx
; Line 148
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 150
	jmp	SHORT $LN1@ft_trig_pr
$LN2@ft_trig_pr:
; Line 152
	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 29					; 0000001dH
	mov	DWORD PTR _shift$[ebp], ecx
; Line 153
	mov	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax], edx
; Line 154
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 155
	mov	ecx, DWORD PTR _shift$[ebp]
	neg	ecx
	mov	DWORD PTR _shift$[ebp], ecx
$LN1@ft_trig_pr:
; Line 158
	mov	eax, DWORD PTR _shift$[ebp]
; Line 159
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_trig_prenorm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv90 = -52						; size = 4
tv86 = -48						; size = 4
tv82 = -44						; size = 4
tv74 = -40						; size = 4
_i2$ = -36						; size = 4
_i1$ = -32						; size = 4
_hi$ = -28						; size = 4
_lo$ = -24						; size = 4
_hi2$ = -20						; size = 4
_lo2$ = -16						; size = 4
_hi1$ = -12						; size = 4
_lo1$ = -8						; size = 4
_s$ = -4						; size = 4
_val$ = 8						; size = 4
_ft_trig_downscale PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 85
	mov	DWORD PTR _s$[ebp], 1
; Line 89
	cmp	DWORD PTR _val$[ebp], 0
	jge	SHORT $LN1@ft_trig_do
; Line 91
	mov	eax, DWORD PTR _val$[ebp]
	neg	eax
	mov	DWORD PTR _val$[ebp], eax
; Line 92
	mov	DWORD PTR _s$[ebp], -1
$LN1@ft_trig_do:
; Line 95
	mov	ecx, DWORD PTR _val$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _lo1$[ebp], ecx
; Line 96
	mov	edx, DWORD PTR _val$[ebp]
	sar	edx, 16					; 00000010H
	mov	DWORD PTR _hi1$[ebp], edx
; Line 97
	mov	DWORD PTR _lo2$[ebp], 23318		; 00005b16H
; Line 98
	mov	DWORD PTR _hi2$[ebp], 56281		; 0000dbd9H
; Line 100
	mov	eax, DWORD PTR _lo1$[ebp]
	imul	eax, DWORD PTR _lo2$[ebp]
	mov	DWORD PTR _lo$[ebp], eax
; Line 101
	mov	ecx, DWORD PTR _lo1$[ebp]
	imul	ecx, DWORD PTR _hi2$[ebp]
	mov	DWORD PTR _i1$[ebp], ecx
; Line 102
	mov	edx, DWORD PTR _lo2$[ebp]
	imul	edx, DWORD PTR _hi1$[ebp]
	mov	DWORD PTR _i2$[ebp], edx
; Line 103
	mov	eax, DWORD PTR _hi1$[ebp]
	imul	eax, DWORD PTR _hi2$[ebp]
	mov	DWORD PTR _hi$[ebp], eax
; Line 106
	mov	ecx, DWORD PTR _i1$[ebp]
	add	ecx, DWORD PTR _i2$[ebp]
	mov	DWORD PTR _i1$[ebp], ecx
; Line 107
	mov	edx, DWORD PTR _i1$[ebp]
	cmp	edx, DWORD PTR _i2$[ebp]
	jae	SHORT $LN4@ft_trig_do
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN5@ft_trig_do
$LN4@ft_trig_do:
	mov	DWORD PTR tv74[ebp], 0
$LN5@ft_trig_do:
	mov	eax, DWORD PTR tv74[ebp]
	shl	eax, 16					; 00000010H
	add	eax, DWORD PTR _hi$[ebp]
	mov	DWORD PTR _hi$[ebp], eax
; Line 109
	mov	ecx, DWORD PTR _i1$[ebp]
	shr	ecx, 16					; 00000010H
	add	ecx, DWORD PTR _hi$[ebp]
	mov	DWORD PTR _hi$[ebp], ecx
; Line 110
	mov	edx, DWORD PTR _i1$[ebp]
	shl	edx, 16					; 00000010H
	mov	DWORD PTR _i1$[ebp], edx
; Line 113
	mov	eax, DWORD PTR _lo$[ebp]
	add	eax, DWORD PTR _i1$[ebp]
	mov	DWORD PTR _lo$[ebp], eax
; Line 114
	mov	ecx, DWORD PTR _lo$[ebp]
	cmp	ecx, DWORD PTR _i1$[ebp]
	jae	SHORT $LN6@ft_trig_do
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN7@ft_trig_do
$LN6@ft_trig_do:
	mov	DWORD PTR tv82[ebp], 0
$LN7@ft_trig_do:
	mov	edx, DWORD PTR _hi$[ebp]
	add	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _hi$[ebp], edx
; Line 120
	mov	eax, DWORD PTR _lo$[ebp]
	add	eax, 1073741824				; 40000000H
	mov	DWORD PTR _lo$[ebp], eax
; Line 121
	cmp	DWORD PTR _lo$[ebp], 1073741824		; 40000000H
	jae	SHORT $LN8@ft_trig_do
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN9@ft_trig_do
$LN8@ft_trig_do:
	mov	DWORD PTR tv86[ebp], 0
$LN9@ft_trig_do:
	mov	ecx, DWORD PTR _hi$[ebp]
	add	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _hi$[ebp], ecx
; Line 123
	mov	edx, DWORD PTR _hi$[ebp]
	mov	DWORD PTR _val$[ebp], edx
; Line 125
	cmp	DWORD PTR _s$[ebp], 0
	jge	SHORT $LN10@ft_trig_do
	mov	eax, DWORD PTR _val$[ebp]
	neg	eax
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN11@ft_trig_do
$LN10@ft_trig_do:
	mov	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR tv90[ebp], ecx
$LN11@ft_trig_do:
	mov	eax, DWORD PTR tv90[ebp]
; Line 126
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_trig_downscale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$1 = -28						; size = 4
_memory$2 = -24						; size = 4
_entry$3 = -20						; size = 4
_ttface$4 = -16						; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_idx$ = 12						; size = 4
_aname$ = 16						; size = 4
_FT_Get_Sfnt_Name PROC
; File d:\mozilla\modules\freetype2\src\base\ftsnames.c
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 47
	mov	DWORD PTR _error$[ebp], 6
; Line 50
	cmp	DWORD PTR _aname$[ebp], 0
	je	$LN8@FT_Get_Sfn
	cmp	DWORD PTR _face$[ebp], 0
	je	$LN8@FT_Get_Sfn
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	je	$LN8@FT_Get_Sfn
; Line 52
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR _ttface$4[ebp], edx
; Line 55
	mov	eax, DWORD PTR _ttface$4[ebp]
	movzx	ecx, WORD PTR [eax+340]
	cmp	DWORD PTR _idx$[ebp], ecx
	jae	$LN8@FT_Get_Sfn
; Line 57
	imul	edx, DWORD PTR _idx$[ebp], 20
	mov	eax, DWORD PTR _ttface$4[ebp]
	add	edx, DWORD PTR [eax+356]
	mov	DWORD PTR _entry$3[ebp], edx
; Line 61
	mov	ecx, DWORD PTR _entry$3[ebp]
	movzx	edx, WORD PTR [ecx+8]
	test	edx, edx
	jle	$LN6@FT_Get_Sfn
	mov	eax, DWORD PTR _entry$3[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	$LN6@FT_Get_Sfn
; Line 63
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$2[ebp], edx
; Line 64
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$1[ebp], ecx
; Line 69
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _entry$3[ebp]
	movzx	ecx, WORD PTR [eax+8]
	push	ecx
	push	0
	push	1
	mov	edx, DWORD PTR _memory$2[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _entry$3[ebp]
	mov	DWORD PTR [ecx+16], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@FT_Get_Sfn
	mov	edx, DWORD PTR _entry$3[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _stream$1[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@FT_Get_Sfn
	mov	edx, DWORD PTR _entry$3[ebp]
	movzx	eax, WORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _entry$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _stream$1[ebp]
	push	eax
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@FT_Get_Sfn
$LN3@FT_Get_Sfn:
; Line 71
	mov	ecx, DWORD PTR _entry$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _memory$2[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _entry$3[ebp]
	mov	DWORD PTR [ecx+16], 0
	xor	edx, edx
	jne	SHORT $LN3@FT_Get_Sfn
; Line 72
	xor	eax, eax
	mov	ecx, DWORD PTR _entry$3[ebp]
	mov	WORD PTR [ecx+8], ax
$LN6@FT_Get_Sfn:
; Line 76
	mov	edx, DWORD PTR _aname$[ebp]
	mov	eax, DWORD PTR _entry$3[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR [edx], cx
; Line 77
	mov	edx, DWORD PTR _aname$[ebp]
	mov	eax, DWORD PTR _entry$3[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR [edx+2], cx
; Line 78
	mov	edx, DWORD PTR _aname$[ebp]
	mov	eax, DWORD PTR _entry$3[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	WORD PTR [edx+4], cx
; Line 79
	mov	edx, DWORD PTR _aname$[ebp]
	mov	eax, DWORD PTR _entry$3[ebp]
	mov	cx, WORD PTR [eax+6]
	mov	WORD PTR [edx+6], cx
; Line 80
	mov	edx, DWORD PTR _aname$[ebp]
	mov	eax, DWORD PTR _entry$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+8], ecx
; Line 81
	mov	edx, DWORD PTR _entry$3[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	ecx, DWORD PTR _aname$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 83
	mov	DWORD PTR _error$[ebp], 0
$LN8@FT_Get_Sfn:
; Line 87
	mov	eax, DWORD PTR _error$[ebp]
; Line 88
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FT_Get_Sfn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@FT_Get_Sfn:
	DD	1
	DD	$LN12@FT_Get_Sfn
$LN12@FT_Get_Sfn:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN11@FT_Get_Sfn
$LN11@FT_Get_Sfn:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_Get_Sfnt_Name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -4						; size = 4
_face$ = 8						; size = 4
_FT_Get_Sfnt_Name_Count PROC
; File d:\mozilla\modules\freetype2\src\base\ftsnames.c
; Line 35
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 36
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN3@FT_Get_Sfn
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	je	SHORT $LN3@FT_Get_Sfn
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+340]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN4@FT_Get_Sfn
$LN3@FT_Get_Sfn:
	mov	DWORD PTR tv70[ebp], 0
$LN4@FT_Get_Sfn:
	mov	eax, DWORD PTR tv70[ebp]
; Line 37
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Sfnt_Name_Count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = 8						; size = 4
_rule_index$ = 12					; size = 4
_raccess_get_rule_type_from_rule_index PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 411
	push	ebp
	mov	ebp, esp
; Line 412
	mov	eax, DWORD PTR _library$[ebp]
	mov	DWORD PTR _library$[ebp], eax
; Line 414
	cmp	DWORD PTR _rule_index$[ebp], 9
	jb	SHORT $LN1@raccess_ge
; Line 415
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN2@raccess_ge
$LN1@raccess_ge:
; Line 417
	mov	ecx, DWORD PTR _rule_index$[ebp]
	mov	eax, DWORD PTR _ft_raccess_guess_table[ecx*8+4]
$LN2@raccess_ge:
; Line 418
	pop	ebp
	ret	0
_raccess_get_rule_type_from_rule_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -24						; size = 4
_new_length$ = -16					; size = 4
_slash$ = -12						; size = 4
_tmp$ = -8						; size = 4
_new_name$ = -4						; size = 4
_memory$ = 8						; size = 4
_original_name$ = 12					; size = 4
_insertion$ = 16					; size = 4
_raccess_make_file_name PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 799
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 800
	mov	DWORD PTR _new_name$[ebp], 0
; Line 804
	mov	DWORD PTR _error$[ebp], 0
; Line 806
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR _error$[ebp], eax
; Line 809
	mov	ecx, DWORD PTR _original_name$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _insertion$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _new_length$[ebp], esi
; Line 810
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_length$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _new_name$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@raccess_ma
; Line 811
	xor	eax, eax
	jmp	$LN4@raccess_ma
$LN3@raccess_ma:
; Line 813
	mov	esi, esp
	push	47					; 0000002fH
	mov	eax, DWORD PTR _original_name$[ebp]
	push	eax
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$[ebp], eax
; Line 814
	cmp	DWORD PTR _tmp$[ebp], 0
	je	SHORT $LN2@raccess_ma
; Line 816
	mov	ecx, DWORD PTR _tmp$[ebp]
	sub	ecx, DWORD PTR _original_name$[ebp]
	add	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _original_name$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_name$[ebp]
	push	eax
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 817
	mov	ecx, DWORD PTR _tmp$[ebp]
	sub	ecx, DWORD PTR _original_name$[ebp]
	mov	edx, DWORD PTR _new_name$[ebp]
	mov	BYTE PTR [edx+ecx+1], 0
; Line 818
	mov	eax, DWORD PTR _tmp$[ebp]
	add	eax, 1
	mov	DWORD PTR _slash$[ebp], eax
; Line 820
	jmp	SHORT $LN1@raccess_ma
$LN2@raccess_ma:
; Line 822
	mov	ecx, DWORD PTR _original_name$[ebp]
	mov	DWORD PTR _slash$[ebp], ecx
; Line 823
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _new_name$[ebp]
	mov	BYTE PTR [ecx+eax], 0
$LN1@raccess_ma:
; Line 826
	mov	edx, DWORD PTR _insertion$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_name$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 827
	mov	ecx, DWORD PTR _slash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _new_name$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
; Line 829
	mov	eax, DWORD PTR _new_name$[ebp]
$LN4@raccess_ma:
; Line 830
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@raccess_ma
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@raccess_ma:
	DD	1
	DD	$LN7@raccess_ma
$LN7@raccess_ma:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@raccess_ma
$LN6@raccess_ma:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_raccess_make_file_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -68						; size = 4
_nouse$ = -60						; size = 4
_stream2$ = -48						; size = 4
_args2$ = -36						; size = 32
_library$ = 8						; size = 4
_file_name$ = 12					; size = 4
_result_offset$ = 16					; size = 4
_raccess_guess_linux_double_from_file_name PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 773
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 776
	mov	DWORD PTR _nouse$[ebp], 0
; Line 780
	mov	DWORD PTR _args2$[ebp], 4
; Line 781
	mov	eax, DWORD PTR _file_name$[ebp]
	mov	DWORD PTR _args2$[ebp+12], eax
; Line 782
	lea	ecx, DWORD PTR _stream2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _args2$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_FT_Stream_New
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 783
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@raccess_gu
; Line 784
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN2@raccess_gu
$LN1@raccess_gu:
; Line 787
	mov	ecx, DWORD PTR _result_offset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nouse$[ebp]
	push	edx
	mov	eax, DWORD PTR _file_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_raccess_guess_apple_double
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 789
	push	0
	mov	eax, DWORD PTR _stream2$[ebp]
	push	eax
	call	_FT_Stream_Free
	add	esp, 8
; Line 791
	mov	eax, DWORD PTR _error$[ebp]
$LN2@raccess_gu:
; Line 792
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@raccess_gu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@raccess_gu:
	DD	3
	DD	$LN7@raccess_gu
$LN7@raccess_gu:
	DD	-36					; ffffffdcH
	DD	32					; 00000020H
	DD	$LN4@raccess_gu
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN5@raccess_gu
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN6@raccess_gu
$LN6@raccess_gu:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN5@raccess_gu:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN4@raccess_gu:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
_raccess_guess_linux_double_from_file_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_resource_fork_entry_id$ = -44				; size = 4
_entry_length$ = -40					; size = 4
_entry_offset$ = -36					; size = 4
_entry_id$ = -32					; size = 4
_i$ = -28						; size = 4
_n_of_entries$ = -24					; size = 2
_version_number$ = -20					; size = 4
_error$ = -12						; size = 4
_magic_from_stream$ = -4				; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_base_file_name$ = 16					; size = 4
_magic$ = 20						; size = 4
_result_offset$ = 24					; size = 4
_raccess_guess_apple_generic PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 709
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 712
	mov	DWORD PTR _version_number$[ebp], 0
; Line 716
	mov	DWORD PTR _entry_length$[ebp], 0
; Line 718
	mov	DWORD PTR _resource_fork_entry_id$[ebp], 2
; Line 720
	mov	eax, DWORD PTR _library$[ebp]
	mov	DWORD PTR _library$[ebp], eax
; Line 721
	mov	ecx, DWORD PTR _base_file_name$[ebp]
	mov	DWORD PTR _base_file_name$[ebp], ecx
; Line 722
	mov	edx, DWORD PTR _version_number$[ebp]
	mov	DWORD PTR _version_number$[ebp], edx
; Line 723
	mov	eax, DWORD PTR _entry_length$[ebp]
	mov	DWORD PTR _entry_length$[ebp], eax
; Line 726
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _magic_from_stream$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@raccess_gu
; Line 727
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@raccess_gu
$LN15@raccess_gu:
; Line 728
	mov	eax, DWORD PTR _magic_from_stream$[ebp]
	cmp	eax, DWORD PTR _magic$[ebp]
	je	SHORT $LN14@raccess_gu
; Line 729
	push	OFFSET $SG13004
	push	729					; 000002d9H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	jmp	$LN16@raccess_gu
$LN14@raccess_gu:
; Line 731
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _version_number$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@raccess_gu
; Line 732
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@raccess_gu
$LN13@raccess_gu:
; Line 735
	push	16					; 00000010H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 736
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@raccess_gu
; Line 737
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@raccess_gu
$LN12@raccess_gu:
; Line 739
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	WORD PTR _n_of_entries$[ebp], ax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@raccess_gu
; Line 740
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@raccess_gu
$LN11@raccess_gu:
; Line 741
	movzx	eax, WORD PTR _n_of_entries$[ebp]
	test	eax, eax
	jne	SHORT $LN10@raccess_gu
; Line 742
	push	OFFSET $SG13011
	push	742					; 000002e6H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	jmp	$LN16@raccess_gu
$LN10@raccess_gu:
; Line 744
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@raccess_gu
$LN8@raccess_gu:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@raccess_gu:
	movzx	edx, WORD PTR _n_of_entries$[ebp]
	cmp	DWORD PTR _i$[ebp], edx
	jge	$LN7@raccess_gu
; Line 746
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _entry_id$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@raccess_gu
; Line 747
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@raccess_gu
$LN6@raccess_gu:
; Line 748
	mov	edx, DWORD PTR _entry_id$[ebp]
	cmp	edx, DWORD PTR _resource_fork_entry_id$[ebp]
	jne	SHORT $LN5@raccess_gu
; Line 751
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _entry_offset$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@raccess_gu
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _entry_length$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@raccess_gu
$LN3@raccess_gu:
; Line 752
	jmp	SHORT $LN8@raccess_gu
$LN4@raccess_gu:
; Line 753
	mov	ecx, DWORD PTR _result_offset$[ebp]
	mov	edx, DWORD PTR _entry_offset$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 755
	xor	eax, eax
	jmp	SHORT $LN16@raccess_gu
; Line 757
	jmp	SHORT $LN2@raccess_gu
$LN5@raccess_gu:
; Line 759
	push	8
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 760
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@raccess_gu
; Line 761
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN16@raccess_gu
$LN2@raccess_gu:
; Line 763
	jmp	$LN8@raccess_gu
$LN7@raccess_gu:
; Line 765
	push	OFFSET $SG13024
	push	765					; 000002fdH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
$LN16@raccess_gu:
; Line 766
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@raccess_gu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@raccess_gu:
	DD	1
	DD	$LN19@raccess_gu
$LN19@raccess_gu:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN18@raccess_gu
$LN18@raccess_gu:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_raccess_guess_apple_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -12						; size = 4
_error$ = -8						; size = 4
_newpath$ = -4						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_base_file_name$ = 16					; size = 4
_result_file_name$ = 20					; size = 4
_result_offset$ = 24					; size = 4
_raccess_guess_linux_netatalk PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 677
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 682
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _stream$[ebp], eax
; Line 685
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$[ebp], edx
; Line 688
	push	OFFSET $SG12972
	mov	eax, DWORD PTR _base_file_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_raccess_make_file_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newpath$[ebp], eax
; Line 689
	cmp	DWORD PTR _newpath$[ebp], 0
	jne	SHORT $LN6@raccess_gu
; Line 690
	push	OFFSET $SG12974
	push	690					; 000002b2H
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	jmp	SHORT $LN7@raccess_gu
$LN6@raccess_gu:
; Line 693
	mov	edx, DWORD PTR _result_offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _newpath$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_raccess_guess_linux_double_from_file_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 694
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@raccess_gu
; Line 695
	mov	edx, DWORD PTR _result_file_name$[ebp]
	mov	eax, DWORD PTR _newpath$[ebp]
	mov	DWORD PTR [edx], eax
; Line 696
	jmp	SHORT $LN4@raccess_gu
$LN3@raccess_gu:
; Line 697
	mov	ecx, DWORD PTR _newpath$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _newpath$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@raccess_gu
$LN4@raccess_gu:
; Line 699
	mov	eax, DWORD PTR _error$[ebp]
$LN7@raccess_gu:
; Line 700
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raccess_guess_linux_netatalk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -12						; size = 4
_error$ = -8						; size = 4
_newpath$ = -4						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_base_file_name$ = 16					; size = 4
_result_file_name$ = 20					; size = 4
_result_offset$ = 24					; size = 4
_raccess_guess_linux_double PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 646
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 651
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _stream$[ebp], eax
; Line 654
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$[ebp], edx
; Line 656
	push	OFFSET $SG12949
	mov	eax, DWORD PTR _base_file_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_raccess_make_file_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newpath$[ebp], eax
; Line 657
	cmp	DWORD PTR _newpath$[ebp], 0
	jne	SHORT $LN6@raccess_gu
; Line 658
	push	OFFSET $SG12951
	push	658					; 00000292H
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	jmp	SHORT $LN7@raccess_gu
$LN6@raccess_gu:
; Line 661
	mov	edx, DWORD PTR _result_offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _newpath$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_raccess_guess_linux_double_from_file_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 662
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@raccess_gu
; Line 663
	mov	edx, DWORD PTR _result_file_name$[ebp]
	mov	eax, DWORD PTR _newpath$[ebp]
	mov	DWORD PTR [edx], eax
; Line 664
	jmp	SHORT $LN4@raccess_gu
$LN3@raccess_gu:
; Line 665
	mov	ecx, DWORD PTR _newpath$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _newpath$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@raccess_gu
$LN4@raccess_gu:
; Line 667
	mov	eax, DWORD PTR _error$[ebp]
$LN7@raccess_gu:
; Line 668
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raccess_guess_linux_double ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_newpath$ = -4						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_base_file_name$ = 16					; size = 4
_result_file_name$ = 20					; size = 4
_result_offset$ = 24					; size = 4
_raccess_guess_linux_cap PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 620
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 624
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _stream$[ebp], eax
; Line 627
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$[ebp], edx
; Line 629
	push	OFFSET $SG12932
	mov	eax, DWORD PTR _base_file_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_raccess_make_file_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newpath$[ebp], eax
; Line 630
	cmp	DWORD PTR _newpath$[ebp], 0
	jne	SHORT $LN1@raccess_gu
; Line 631
	push	OFFSET $SG12934
	push	631					; 00000277H
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	jmp	SHORT $LN2@raccess_gu
$LN1@raccess_gu:
; Line 633
	mov	edx, DWORD PTR _result_file_name$[ebp]
	mov	eax, DWORD PTR _newpath$[ebp]
	mov	DWORD PTR [edx], eax
; Line 634
	mov	ecx, DWORD PTR _result_offset$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 636
	xor	eax, eax
$LN2@raccess_gu:
; Line 637
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raccess_guess_linux_cap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_newpath$ = -4						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_base_file_name$ = 16					; size = 4
_result_file_name$ = 20					; size = 4
_result_offset$ = 24					; size = 4
_raccess_guess_vfat PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 593
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 597
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _stream$[ebp], eax
; Line 600
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$[ebp], edx
; Line 603
	push	OFFSET $SG12916
	mov	eax, DWORD PTR _base_file_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_raccess_make_file_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newpath$[ebp], eax
; Line 604
	cmp	DWORD PTR _newpath$[ebp], 0
	jne	SHORT $LN1@raccess_gu
; Line 605
	push	OFFSET $SG12918
	push	605					; 0000025dH
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	jmp	SHORT $LN2@raccess_gu
$LN1@raccess_gu:
; Line 607
	mov	edx, DWORD PTR _result_file_name$[ebp]
	mov	eax, DWORD PTR _newpath$[ebp]
	mov	DWORD PTR [edx], eax
; Line 608
	mov	ecx, DWORD PTR _result_offset$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 610
	xor	eax, eax
$LN2@raccess_gu:
; Line 611
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raccess_guess_vfat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_base_file_len$ = -24					; size = 4
_memory$ = -20						; size = 4
_newpath$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_base_file_name$ = 16					; size = 4
_result_file_name$ = 20					; size = 4
_result_offset$ = 24					; size = 4
_raccess_guess_darwin_hfsplus PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 526
	mov	DWORD PTR _newpath$[ebp], 0
; Line 528
	mov	eax, DWORD PTR _base_file_name$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _base_file_len$[ebp], eax
; Line 530
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 533
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$[ebp], eax
; Line 535
	mov	ecx, DWORD PTR _base_file_len$[ebp]
	add	ecx, 6
	cmp	ecx, 2147483647				; 7fffffffH
	jle	SHORT $LN2@raccess_gu
; Line 536
	push	OFFSET $SG12877
	push	536					; 00000218H
	push	10					; 0000000aH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 10					; 0000000aH
	jmp	SHORT $LN3@raccess_gu
$LN2@raccess_gu:
; Line 538
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _base_file_len$[ebp]
	add	eax, 6
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newpath$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@raccess_gu
; Line 539
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN3@raccess_gu
$LN1@raccess_gu:
; Line 541
	mov	edx, DWORD PTR _base_file_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _base_file_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newpath$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 542
	push	6
	push	OFFSET $SG12880
	mov	edx, DWORD PTR _newpath$[ebp]
	add	edx, DWORD PTR _base_file_len$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 544
	mov	eax, DWORD PTR _result_file_name$[ebp]
	mov	ecx, DWORD PTR _newpath$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 545
	mov	edx, DWORD PTR _result_offset$[ebp]
	mov	DWORD PTR [edx], 0
; Line 547
	xor	eax, eax
$LN3@raccess_gu:
; Line 548
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@raccess_gu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@raccess_gu:
	DD	1
	DD	$LN6@raccess_gu
$LN6@raccess_gu:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@raccess_gu
$LN5@raccess_gu:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_raccess_guess_darwin_hfsplus ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_base_file_len$ = -24					; size = 4
_memory$ = -20						; size = 4
_newpath$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_base_file_name$ = 16					; size = 4
_result_file_name$ = 20					; size = 4
_result_offset$ = 24					; size = 4
_raccess_guess_darwin_newvfs PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 557
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 562
	mov	DWORD PTR _newpath$[ebp], 0
; Line 564
	mov	eax, DWORD PTR _base_file_name$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _base_file_len$[ebp], eax
; Line 566
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 569
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$[ebp], eax
; Line 571
	mov	ecx, DWORD PTR _base_file_len$[ebp]
	add	ecx, 18					; 00000012H
	cmp	ecx, 2147483647				; 7fffffffH
	jle	SHORT $LN2@raccess_gu
; Line 572
	push	OFFSET $SG12899
	push	572					; 0000023cH
	push	10					; 0000000aH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 10					; 0000000aH
	jmp	SHORT $LN3@raccess_gu
$LN2@raccess_gu:
; Line 574
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _base_file_len$[ebp]
	add	eax, 18					; 00000012H
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newpath$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@raccess_gu
; Line 575
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN3@raccess_gu
$LN1@raccess_gu:
; Line 577
	mov	edx, DWORD PTR _base_file_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _base_file_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newpath$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 578
	push	18					; 00000012H
	push	OFFSET $SG12902
	mov	edx, DWORD PTR _newpath$[ebp]
	add	edx, DWORD PTR _base_file_len$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 580
	mov	eax, DWORD PTR _result_file_name$[ebp]
	mov	ecx, DWORD PTR _newpath$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 581
	mov	edx, DWORD PTR _result_offset$[ebp]
	mov	DWORD PTR [edx], 0
; Line 583
	xor	eax, eax
$LN3@raccess_gu:
; Line 584
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@raccess_gu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@raccess_gu:
	DD	1
	DD	$LN6@raccess_gu
$LN6@raccess_gu:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@raccess_gu
$LN5@raccess_gu:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_raccess_guess_darwin_newvfs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -12						; size = 4
_error$ = -8						; size = 4
_newpath$ = -4						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_base_file_name$ = 16					; size = 4
_result_file_name$ = 20					; size = 4
_result_offset$ = 24					; size = 4
_raccess_guess_darwin_ufs_export PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 491
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 496
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _stream$[ebp], eax
; Line 499
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$[ebp], edx
; Line 500
	push	OFFSET $SG12850
	mov	eax, DWORD PTR _base_file_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_raccess_make_file_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newpath$[ebp], eax
; Line 501
	cmp	DWORD PTR _newpath$[ebp], 0
	jne	SHORT $LN6@raccess_gu
; Line 502
	push	OFFSET $SG12852
	push	502					; 000001f6H
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	jmp	SHORT $LN7@raccess_gu
$LN6@raccess_gu:
; Line 505
	mov	edx, DWORD PTR _result_offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _newpath$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_raccess_guess_linux_double_from_file_name
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 506
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@raccess_gu
; Line 507
	mov	edx, DWORD PTR _result_file_name$[ebp]
	mov	eax, DWORD PTR _newpath$[ebp]
	mov	DWORD PTR [edx], eax
; Line 508
	jmp	SHORT $LN4@raccess_gu
$LN3@raccess_gu:
; Line 509
	mov	ecx, DWORD PTR _newpath$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _newpath$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@raccess_gu
$LN4@raccess_gu:
; Line 511
	mov	eax, DWORD PTR _error$[ebp]
$LN7@raccess_gu:
; Line 512
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raccess_guess_darwin_ufs_export ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_magic$ = -4						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_base_file_name$ = 16					; size = 4
_result_file_name$ = 20					; size = 4
_result_offset$ = 24					; size = 4
_raccess_guess_apple_single PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 473
	mov	DWORD PTR _magic$[ebp], 333312		; 00051600H
; Line 476
	mov	eax, DWORD PTR _result_file_name$[ebp]
	mov	DWORD PTR [eax], 0
; Line 477
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@raccess_gu
; Line 478
	push	OFFSET $SG12835
	push	478					; 000001deH
	push	81					; 00000051H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 81					; 00000051H
	jmp	SHORT $LN2@raccess_gu
$LN1@raccess_gu:
; Line 481
	mov	ecx, DWORD PTR _result_offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _magic$[ebp]
	push	edx
	mov	eax, DWORD PTR _base_file_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_raccess_guess_apple_generic
	add	esp, 20					; 00000014H
$LN2@raccess_gu:
; Line 482
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raccess_guess_apple_single ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_magic$ = -4						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_base_file_name$ = 16					; size = 4
_result_file_name$ = 20					; size = 4
_result_offset$ = 24					; size = 4
_raccess_guess_apple_double PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 447
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 451
	mov	DWORD PTR _magic$[ebp], 333319		; 00051607H
; Line 454
	mov	eax, DWORD PTR _result_file_name$[ebp]
	mov	DWORD PTR [eax], 0
; Line 455
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@raccess_gu
; Line 456
	push	OFFSET $SG12819
	push	456					; 000001c8H
	push	81					; 00000051H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 81					; 00000051H
	jmp	SHORT $LN2@raccess_gu
$LN1@raccess_gu:
; Line 459
	mov	ecx, DWORD PTR _result_offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _magic$[ebp]
	push	edx
	mov	eax, DWORD PTR _base_file_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_raccess_guess_apple_generic
	add	esp, 20					; 00000014H
$LN2@raccess_gu:
; Line 460
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raccess_guess_apple_double ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_ft_raccess_sort_ref_by_id PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 139
	push	ebp
	mov	ebp, esp
; Line 140
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _b$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	ecx, eax
	jge	SHORT $LN4@ft_raccess
; Line 141
	or	eax, -1
	jmp	SHORT $LN5@ft_raccess
	jmp	SHORT $LN5@ft_raccess
$LN4@ft_raccess:
; Line 142
	mov	ecx, DWORD PTR _a$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	edx, ecx
	jle	SHORT $LN2@ft_raccess
; Line 143
	mov	eax, 1
	jmp	SHORT $LN5@ft_raccess
; Line 144
	jmp	SHORT $LN5@ft_raccess
$LN2@ft_raccess:
; Line 145
	xor	eax, eax
$LN5@ft_raccess:
; Line 146
	pop	ebp
	ret	0
_ft_raccess_sort_ref_by_id ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv201 = -44						; size = 4
tv174 = -38						; size = 1
tv171 = -37						; size = 1
tv66 = -36						; size = 4
_missing_func$ = -29					; size = 1
_func_name$ = -28					; size = 4
_get_name$ = -24					; size = 4
_set_name$ = -20					; size = 4
_service$ = -16						; size = 4
_interface$ = -12					; size = 4
_limit$ = -8						; size = 4
_cur$ = -4						; size = 4
_library$ = 8						; size = 4
_module_name$ = 12					; size = 4
_property_name$ = 16					; size = 4
_value$ = 20						; size = 4
_set$ = 24						; size = 1
_ft_property_do PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4516
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 4524
	mov	DWORD PTR _set_name$[ebp], OFFSET $SG11866
; Line 4525
	mov	DWORD PTR _get_name$[ebp], OFFSET $SG11868
; Line 4526
	movzx	eax, BYTE PTR _set$[ebp]
	test	eax, eax
	je	SHORT $LN16@ft_propert
	mov	ecx, DWORD PTR _set_name$[ebp]
	mov	DWORD PTR tv66[ebp], ecx
	jmp	SHORT $LN17@ft_propert
$LN16@ft_propert:
	mov	edx, DWORD PTR _get_name$[ebp]
	mov	DWORD PTR tv66[ebp], edx
$LN17@ft_propert:
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR _func_name$[ebp], eax
; Line 4532
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN13@ft_propert
; Line 4533
	push	OFFSET $SG11872
	push	4533					; 000011b5H
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	$LN14@ft_propert
$LN13@ft_propert:
; Line 4535
	cmp	DWORD PTR _module_name$[ebp], 0
	je	SHORT $LN11@ft_propert
	cmp	DWORD PTR _property_name$[ebp], 0
	je	SHORT $LN11@ft_propert
	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN12@ft_propert
$LN11@ft_propert:
; Line 4536
	push	OFFSET $SG11875
	push	4536					; 000011b8H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN14@ft_propert
$LN12@ft_propert:
; Line 4538
	mov	ecx, DWORD PTR _library$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _cur$[ebp], ecx
; Line 4539
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _cur$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _limit$[ebp], edx
; Line 4542
	jmp	SHORT $LN10@ft_propert
$LN9@ft_propert:
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 4
	mov	DWORD PTR _cur$[ebp], eax
$LN10@ft_propert:
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN8@ft_propert
; Line 4543
	mov	edx, DWORD PTR _module_name$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@ft_propert
; Line 4544
	jmp	SHORT $LN8@ft_propert
$LN7@ft_propert:
; Line 4546
	jmp	SHORT $LN9@ft_propert
$LN8@ft_propert:
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jne	SHORT $LN6@ft_propert
; Line 4549
	mov	ecx, DWORD PTR _module_name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _func_name$[ebp]
	push	edx
	push	OFFSET $SG11881
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 4550
	push	OFFSET $SG11882
	push	4550					; 000011c6H
	push	11					; 0000000bH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 11					; 0000000bH
	jmp	$LN14@ft_propert
$LN6@ft_propert:
; Line 4554
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+32], 0
	jne	SHORT $LN5@ft_propert
; Line 4557
	mov	edx, DWORD PTR _module_name$[ebp]
	push	edx
	mov	eax, DWORD PTR _func_name$[ebp]
	push	eax
	push	OFFSET $SG11884
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 4558
	push	OFFSET $SG11885
	push	4558					; 000011ceH
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	jmp	$LN14@ft_propert
$LN5@ft_propert:
; Line 4563
	mov	esi, esp
	push	OFFSET $SG11886
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _interface$[ebp], eax
; Line 4564
	cmp	DWORD PTR _interface$[ebp], 0
	jne	SHORT $LN4@ft_propert
; Line 4567
	mov	edx, DWORD PTR _module_name$[ebp]
	push	edx
	mov	eax, DWORD PTR _func_name$[ebp]
	push	eax
	push	OFFSET $SG11888
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 4568
	push	OFFSET $SG11889
	push	4568					; 000011d8H
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	jmp	$LN14@ft_propert
$LN4@ft_propert:
; Line 4571
	mov	ecx, DWORD PTR _interface$[ebp]
	mov	DWORD PTR _service$[ebp], ecx
; Line 4573
	movzx	edx, BYTE PTR _set$[ebp]
	test	edx, edx
	je	SHORT $LN3@ft_propert
; Line 4574
	mov	eax, DWORD PTR _service$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN18@ft_propert
	mov	BYTE PTR tv171[ebp], 1
	jmp	SHORT $LN19@ft_propert
$LN18@ft_propert:
	mov	BYTE PTR tv171[ebp], 0
$LN19@ft_propert:
	mov	cl, BYTE PTR tv171[ebp]
	mov	BYTE PTR _missing_func$[ebp], cl
; Line 4575
	jmp	SHORT $LN2@ft_propert
$LN3@ft_propert:
; Line 4576
	mov	edx, DWORD PTR _service$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN20@ft_propert
	mov	BYTE PTR tv174[ebp], 1
	jmp	SHORT $LN21@ft_propert
$LN20@ft_propert:
	mov	BYTE PTR tv174[ebp], 0
$LN21@ft_propert:
	mov	al, BYTE PTR tv174[ebp]
	mov	BYTE PTR _missing_func$[ebp], al
$LN2@ft_propert:
; Line 4578
	movzx	ecx, BYTE PTR _missing_func$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@ft_propert
; Line 4581
	mov	edx, DWORD PTR _module_name$[ebp]
	push	edx
	mov	eax, DWORD PTR _func_name$[ebp]
	push	eax
	push	OFFSET $SG11896
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 4582
	push	OFFSET $SG11897
	push	4582					; 000011e6H
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	jmp	SHORT $LN14@ft_propert
$LN1@ft_propert:
; Line 4586
	movzx	ecx, BYTE PTR _set$[ebp]
	test	ecx, ecx
	je	SHORT $LN22@ft_propert
	mov	esi, esp
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _property_name$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _service$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv201[ebp], eax
	jmp	SHORT $LN23@ft_propert
$LN22@ft_propert:
	mov	esi, esp
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _property_name$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _service$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv201[ebp], eax
$LN23@ft_propert:
	mov	eax, DWORD PTR tv201[ebp]
$LN14@ft_propert:
; Line 4587
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_property_do ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = -12						; size = 4
_clazz$ = -8						; size = 4
_memory$ = -4						; size = 4
_module$ = 8						; size = 4
_Destroy_Module PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4224
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4225
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 4226
	mov	edx, DWORD PTR _module$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _clazz$[ebp], eax
; Line 4227
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _library$[ebp], edx
; Line 4230
	cmp	DWORD PTR _library$[ebp], 0
	je	SHORT $LN7@Destroy_Mo
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	cmp	ecx, DWORD PTR _module$[ebp]
	jne	SHORT $LN7@Destroy_Mo
; Line 4231
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [edx+160], 0
$LN7@Destroy_Mo:
; Line 4234
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	and	edx, 2
	je	SHORT $LN6@Destroy_Mo
; Line 4235
	mov	eax, DWORD PTR _module$[ebp]
	push	eax
	call	_ft_remove_renderer
	add	esp, 4
$LN6@Destroy_Mo:
; Line 4238
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	and	eax, 1
	je	SHORT $LN5@Destroy_Mo
; Line 4239
	mov	ecx, DWORD PTR _module$[ebp]
	push	ecx
	call	_Destroy_Driver
	add	esp, 4
$LN5@Destroy_Mo:
; Line 4242
	mov	edx, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN3@Destroy_Mo
; Line 4243
	mov	esi, esp
	mov	eax, DWORD PTR _module$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clazz$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Destroy_Mo:
; Line 4246
	mov	eax, DWORD PTR _module$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _module$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@Destroy_Mo
; Line 4247
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Destroy_Module ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_render$1 = -16						; size = 4
_node$ = -12						; size = 4
_memory$ = -8						; size = 4
_library$ = -4						; size = 4
_module$ = 8						; size = 4
_ft_remove_renderer PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3967
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3973
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _library$[ebp], ecx
; Line 3974
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN6@ft_remove_
; Line 3975
	jmp	$LN7@ft_remove_
$LN6@ft_remove_:
; Line 3977
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$[ebp], eax
; Line 3979
	mov	ecx, DWORD PTR _module$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	call	_FT_List_Find
	add	esp, 8
	mov	DWORD PTR _node$[ebp], eax
; Line 3980
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN7@ft_remove_
; Line 3982
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _render$1[ebp], eax
; Line 3987
	mov	ecx, DWORD PTR _render$1[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+36], 1869968492		; 6f75746cH
	jne	SHORT $LN4@ft_remove_
	mov	eax, DWORD PTR _render$1[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN4@ft_remove_
; Line 3988
	mov	esi, esp
	mov	ecx, DWORD PTR _render$1[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _render$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@ft_remove_:
; Line 3991
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	call	_FT_List_Remove
	add	esp, 8
$LN3@ft_remove_:
; Line 3992
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _node$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@ft_remove_
; Line 3994
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_ft_set_current_renderer
	add	esp, 4
$LN7@ft_remove_:
; Line 3996
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_remove_renderer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_clazz$1 = -32						; size = 4
_render$2 = -28						; size = 4
_node$ = -24						; size = 4
_error$ = -16						; size = 4
_memory$ = -8						; size = 4
_library$ = -4						; size = 4
_module$ = 8						; size = 4
_ft_add_renderer PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3919
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3920
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _library$[ebp], ecx
; Line 3921
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _memory$[ebp], eax
; Line 3923
	mov	DWORD PTR _node$[ebp], 0
; Line 3926
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _node$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@ft_add_ren
; Line 3927
	jmp	$Exit$13
$LN7@ft_add_ren:
; Line 3930
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _render$2[ebp], eax
; Line 3931
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _clazz$1[ebp], edx
; Line 3934
	mov	eax, DWORD PTR _render$2[ebp]
	mov	ecx, DWORD PTR _clazz$1[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 3935
	mov	edx, DWORD PTR _render$2[ebp]
	mov	eax, DWORD PTR _clazz$1[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+16], ecx
; Line 3939
	mov	edx, DWORD PTR _clazz$1[ebp]
	cmp	DWORD PTR [edx+36], 1869968492		; 6f75746cH
	jne	SHORT $LN6@ft_add_ren
	mov	eax, DWORD PTR _clazz$1[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN6@ft_add_ren
; Line 3941
	mov	edx, DWORD PTR _render$2[ebp]
	add	edx, 52					; 00000034H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clazz$1[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 3942
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@ft_add_ren
; Line 3943
	jmp	SHORT $Fail$14
$LN5@ft_add_ren:
; Line 3945
	mov	ecx, DWORD PTR _clazz$1[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _render$2[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+56], ecx
; Line 3946
	mov	edx, DWORD PTR _render$2[ebp]
	mov	eax, DWORD PTR _clazz$1[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+60], ecx
$LN6@ft_add_ren:
; Line 3950
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 3951
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	call	_FT_List_Add
	add	esp, 8
; Line 3953
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_ft_set_current_renderer
	add	esp, 4
$Fail$14:
; Line 3957
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $Exit$13
$LN3@ft_add_ren:
; Line 3958
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _node$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@ft_add_ren
$Exit$13:
; Line 3961
	mov	eax, DWORD PTR _error$[ebp]
; Line 3962
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ft_add_ren
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@ft_add_ren:
	DD	1
	DD	$LN11@ft_add_ren
$LN11@ft_add_ren:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN10@ft_add_ren
$LN10@ft_add_ren:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_add_renderer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_renderer$ = -4						; size = 4
_library$ = 8						; size = 4
_ft_set_current_renderer PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3908
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3912
	push	0
	push	1869968492				; 6f75746cH
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_FT_Lookup_Renderer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _renderer$[ebp], eax
; Line 3913
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR _renderer$[ebp]
	mov	DWORD PTR [ecx+156], edx
; Line 3914
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_set_current_renderer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_metrics$ = 12						; size = 4
_ft_recompute_scaled_metrics PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2633
	push	ebp
	mov	ebp, esp
; Line 2638
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+70]
	push	eax
	call	_FT_MulFix
	add	esp, 8
	add	eax, 63					; 0000003fH
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2641
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+72]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 2644
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+74]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 2647
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+76]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 2661
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_recompute_scaled_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv88 = -8						; size = 4
_error$ = -4						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_face_index$ = 16					; size = 4
_aface$ = 20						; size = 4
_args$ = 24						; size = 4
_load_mac_face PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2027
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2029
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR _args$[ebp], eax
; Line 2032
	mov	ecx, DWORD PTR _aface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_IsMacBinary
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 2033
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 2
	jne	$LN11@load_mac_f
$LN10@load_mac_f:
; Line 2039
	mov	eax, 4
	imul	ecx, eax, 14
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN9@load_mac_f
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG10322
	call	_FT_Message
	add	esp, 8
$LN9@load_mac_f:
	xor	ecx, ecx
	jne	SHORT $LN10@load_mac_f
; Line 2041
	mov	edx, DWORD PTR _aface$[ebp]
	push	edx
	mov	eax, DWORD PTR _face_index$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_IsMacResource
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
$LN6@load_mac_f:
; Line 2043
	mov	eax, 4
	imul	ecx, eax, 14
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN5@load_mac_f
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@load_mac_f
	mov	DWORD PTR tv88[ebp], OFFSET $SG10327
	jmp	SHORT $LN15@load_mac_f
$LN14@load_mac_f:
	mov	DWORD PTR tv88[ebp], OFFSET $SG10328
$LN15@load_mac_f:
	mov	edx, DWORD PTR tv88[ebp]
	push	edx
	push	OFFSET $SG10329
	call	_FT_Message
	add	esp, 8
$LN5@load_mac_f:
	xor	eax, eax
	jne	SHORT $LN6@load_mac_f
$LN11@load_mac_f:
; Line 2052
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 2
	je	SHORT $LN1@load_mac_f
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 85					; 00000055H
	jne	SHORT $LN2@load_mac_f
$LN1@load_mac_f:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 4
	je	SHORT $LN2@load_mac_f
; Line 2054
	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _aface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_load_face_in_embedded_rfork
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
$LN2@load_mac_f:
; Line 2055
	mov	eax, DWORD PTR _error$[ebp]
; Line 2056
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_load_mac_face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv176 = -212						; size = 4
tv137 = -208						; size = 4
_stream2$ = -200					; size = 4
_args2$ = -188						; size = 32
_vfs_rfork_has_no_font$ = -150				; size = 1
_is_darwin_vfs$ = -149					; size = 1
_errors$ = -144						; size = 36
_offsets$ = -100					; size = 36
_file_names$ = -56					; size = 36
_i$ = -16						; size = 4
_error$ = -12						; size = 4
_memory$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_face_index$ = 16					; size = 4
_aface$ = 20						; size = 4
_args$ = 24						; size = 4
_load_face_in_embedded_rfork PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1930
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1935
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1936
	mov	DWORD PTR _error$[ebp], 2
; Line 1942
	mov	BYTE PTR _vfs_rfork_has_no_font$[ebp], 0
; Line 1945
	mov	DWORD PTR _stream2$[ebp], 0
; Line 1949
	lea	edx, DWORD PTR _errors$[ebp]
	push	edx
	lea	eax, DWORD PTR _offsets$[ebp]
	push	eax
	lea	ecx, DWORD PTR _file_names$[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_FT_Raccess_Guess
	add	esp, 24					; 00000018H
; Line 1951
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN38@load_face_
$LN37@load_face_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN38@load_face_:
	cmp	DWORD PTR _i$[ebp], 9
	jge	$LN36@load_face_
; Line 1953
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_ft_raccess_rule_by_darwin_vfs
	add	esp, 8
	mov	BYTE PTR _is_darwin_vfs$[ebp], al
; Line 1954
	movzx	eax, BYTE PTR _is_darwin_vfs$[ebp]
	test	eax, eax
	je	SHORT $LN35@load_face_
	movzx	ecx, BYTE PTR _vfs_rfork_has_no_font$[ebp]
	test	ecx, ecx
	je	SHORT $LN35@load_face_
$LN34@load_face_:
; Line 1958
	mov	edx, 4
	imul	eax, edx, 14
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN33@load_face_
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG10266
	call	_FT_Message
	add	esp, 8
$LN33@load_face_:
	xor	edx, edx
	jne	SHORT $LN34@load_face_
; Line 1959
	jmp	SHORT $LN37@load_face_
$LN35@load_face_:
; Line 1962
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _errors$[ebp+eax*4], 0
	je	SHORT $LN30@load_face_
$LN29@load_face_:
; Line 1964
	mov	ecx, 4
	imul	edx, ecx, 14
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN28@load_face_
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _errors$[ebp+ecx*4]
	push	edx
	push	OFFSET $SG10272
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN28@load_face_:
	xor	eax, eax
	jne	SHORT $LN29@load_face_
; Line 1965
	jmp	$LN37@load_face_
$LN30@load_face_:
; Line 1968
	mov	DWORD PTR _args2$[ebp], 4
; Line 1969
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _file_names$[ebp+ecx*4], 0
	je	SHORT $LN41@load_face_
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _file_names$[ebp+edx*4]
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN42@load_face_
$LN41@load_face_:
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv137[ebp], edx
$LN42@load_face_:
	mov	eax, DWORD PTR tv137[ebp]
	mov	DWORD PTR _args2$[ebp+12], eax
$LN25@load_face_:
; Line 1972
	mov	ecx, 4
	imul	edx, ecx, 14
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN24@load_face_
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _args2$[ebp+12]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET $SG10277
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN24@load_face_:
	xor	ecx, ecx
	jne	SHORT $LN25@load_face_
; Line 1974
	lea	edx, DWORD PTR _stream2$[ebp]
	push	edx
	lea	eax, DWORD PTR _args2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Stream_New
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1975
	movzx	edx, BYTE PTR _is_darwin_vfs$[ebp]
	test	edx, edx
	je	SHORT $LN21@load_face_
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 81					; 00000051H
	jne	SHORT $LN21@load_face_
; Line 1976
	mov	BYTE PTR _vfs_rfork_has_no_font$[ebp], 1
$LN21@load_face_:
; Line 1978
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@load_face_
$LN19@load_face_:
; Line 1980
	mov	ecx, 4
	imul	edx, ecx, 14
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN18@load_face_
	push	OFFSET $SG10284
	call	_FT_Message
	add	esp, 4
$LN18@load_face_:
	xor	eax, eax
	jne	SHORT $LN19@load_face_
; Line 1981
	jmp	$LN37@load_face_
$LN20@load_face_:
; Line 1985
	mov	ecx, DWORD PTR _aface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _stream2$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_IsMacResource
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 1986
	push	0
	mov	ecx, DWORD PTR _stream2$[ebp]
	push	ecx
	call	_FT_Stream_Free
	add	esp, 8
$LN15@load_face_:
; Line 1988
	mov	edx, 4
	imul	eax, edx, 14
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN14@load_face_
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN43@load_face_
	mov	DWORD PTR tv176[ebp], OFFSET $SG10289
	jmp	SHORT $LN44@load_face_
$LN43@load_face_:
	mov	DWORD PTR tv176[ebp], OFFSET $SG10290
$LN44@load_face_:
	mov	ecx, DWORD PTR tv176[ebp]
	push	ecx
	push	OFFSET $SG10291
	call	_FT_Message
	add	esp, 8
$LN14@load_face_:
	xor	edx, edx
	jne	SHORT $LN15@load_face_
; Line 1990
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN11@load_face_
; Line 1991
	jmp	SHORT $LN36@load_face_
	jmp	SHORT $LN10@load_face_
$LN11@load_face_:
; Line 1992
	movzx	eax, BYTE PTR _is_darwin_vfs$[ebp]
	test	eax, eax
	je	SHORT $LN10@load_face_
; Line 1993
	mov	BYTE PTR _vfs_rfork_has_no_font$[ebp], 1
$LN10@load_face_:
; Line 1994
	jmp	$LN37@load_face_
$LN36@load_face_:
; Line 1996
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@load_face_
$LN7@load_face_:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@load_face_:
	cmp	DWORD PTR _i$[ebp], 9
	jge	SHORT $LN6@load_face_
; Line 1998
	mov	edx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _file_names$[ebp+edx*4], 0
	je	SHORT $LN5@load_face_
$LN4@load_face_:
; Line 1999
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _file_names$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _file_names$[ebp+eax*4], 0
	xor	ecx, ecx
	jne	SHORT $LN4@load_face_
$LN5@load_face_:
; Line 2000
	jmp	SHORT $LN7@load_face_
$LN6@load_face_:
; Line 2003
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@load_face_
; Line 2004
	mov	DWORD PTR _error$[ebp], 2
$LN1@load_face_:
; Line 2006
	mov	eax, DWORD PTR _error$[ebp]
; Line 2011
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN51@load_face_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN51@load_face_:
	DD	5
	DD	$LN50@load_face_
$LN50@load_face_:
	DD	-56					; ffffffc8H
	DD	36					; 00000024H
	DD	$LN45@load_face_
	DD	-100					; ffffff9cH
	DD	36					; 00000024H
	DD	$LN46@load_face_
	DD	-144					; ffffff70H
	DD	36					; 00000024H
	DD	$LN47@load_face_
	DD	-188					; ffffff44H
	DD	32					; 00000020H
	DD	$LN48@load_face_
	DD	-200					; ffffff38H
	DD	4
	DD	$LN49@load_face_
$LN49@load_face_:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN48@load_face_:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN47@load_face_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN46@load_face_:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN45@load_face_:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_load_face_in_embedded_rfork ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_offset$ = -152						; size = 4
_dlen$ = -148						; size = 4
_error$ = -144						; size = 4
_header$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_face_index$ = 16					; size = 4
_aface$ = 20						; size = 4
_IsMacBinary PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1879
	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	edi
	lea	edi, DWORD PTR [ebp-152]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1885
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN5@IsMacBinar
; Line 1886
	push	OFFSET $SG10228
	push	1886					; 0000075eH
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	jmp	$LN6@IsMacBinar
$LN5@IsMacBinar:
; Line 1888
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1889
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@IsMacBinar
; Line 1890
	jmp	$Exit$11
$LN4@IsMacBinar:
; Line 1892
	push	128					; 00000080H
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1893
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@IsMacBinar
; Line 1894
	jmp	$Exit$11
$LN3@IsMacBinar:
; Line 1902
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR _header$[ebp+ecx]
	test	edx, edx
	jne	$LN1@IsMacBinar
	mov	eax, 1
	imul	ecx, eax, 74
	movzx	edx, BYTE PTR _header$[ebp+ecx]
	test	edx, edx
	jne	SHORT $LN1@IsMacBinar
	mov	eax, 1
	imul	ecx, eax, 82
	movzx	edx, BYTE PTR _header$[ebp+ecx]
	test	edx, edx
	jne	SHORT $LN1@IsMacBinar
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR _header$[ebp+eax]
	test	ecx, ecx
	je	SHORT $LN1@IsMacBinar
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR _header$[ebp+edx]
	cmp	eax, 33					; 00000021H
	jg	SHORT $LN1@IsMacBinar
	mov	ecx, 1
	imul	edx, ecx, 63
	movzx	eax, BYTE PTR _header$[ebp+edx]
	test	eax, eax
	jne	SHORT $LN1@IsMacBinar
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR _header$[ebp+ecx]
	movzx	eax, BYTE PTR _header$[ebp+edx+2]
	test	eax, eax
	je	SHORT $LN2@IsMacBinar
$LN1@IsMacBinar:
; Line 1903
	push	OFFSET $SG10235
	push	1903					; 0000076fH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	jmp	$LN6@IsMacBinar
$LN2@IsMacBinar:
; Line 1908
	mov	ecx, 1
	imul	edx, ecx, 83
	movzx	eax, BYTE PTR _header$[ebp+edx]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	imul	edx, ecx, 84
	movzx	ecx, BYTE PTR _header$[ebp+edx]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	imul	ecx, edx, 85
	movzx	edx, BYTE PTR _header$[ebp+ecx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 86
	movzx	ecx, BYTE PTR _header$[ebp+edx]
	or	eax, ecx
	mov	DWORD PTR _dlen$[ebp], eax
; Line 1915
	mov	edx, DWORD PTR _dlen$[ebp]
	add	edx, 127				; 0000007fH
	and	edx, -128				; ffffff80H
	add	edx, 128				; 00000080H
	mov	DWORD PTR _offset$[ebp], edx
; Line 1917
	mov	eax, DWORD PTR _aface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_IsMacResource
	add	esp, 20					; 00000014H
	jmp	SHORT $LN6@IsMacBinar
$Exit$11:
; Line 1920
	mov	eax, DWORD PTR _error$[ebp]
$LN6@IsMacBinar:
; Line 1921
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@IsMacBinar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 152				; 00000098H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@IsMacBinar:
	DD	1
	DD	$LN9@IsMacBinar
$LN9@IsMacBinar:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN8@IsMacBinar
$LN8@IsMacBinar:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_IsMacBinary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face_index_internal$1 = -60				; size = 4
_count$ = -52						; size = 4
_data_offsets$ = -40					; size = 4
_rdara_pos$ = -28					; size = 4
_map_offset$ = -16					; size = 4
_error$ = -8						; size = 4
_memory$ = -4						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_resource_offset$ = 16					; size = 4
_face_index$ = 20					; size = 4
_aface$ = 24						; size = 4
_IsMacResource PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1820
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1821
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1829
	lea	edx, DWORD PTR _rdara_pos$[ebp]
	push	edx
	lea	eax, DWORD PTR _map_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _resource_offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_FT_Raccess_Get_HeaderInfo
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 1830
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@IsMacResou
; Line 1831
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN12@IsMacResou
$LN11@IsMacResou:
; Line 1837
	lea	ecx, DWORD PTR _count$[ebp]
	push	ecx
	lea	edx, DWORD PTR _data_offsets$[ebp]
	push	edx
	push	1
	push	1347375956				; 504f5354H
	mov	eax, DWORD PTR _rdara_pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _map_offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_FT_Raccess_Get_DataOffsets
	add	esp, 32					; 00000020H
	mov	DWORD PTR _error$[ebp], eax
; Line 1838
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN10@IsMacResou
; Line 1841
	mov	ecx, DWORD PTR _aface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data_offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_Mac_Read_POST_Resource
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
$LN9@IsMacResou:
; Line 1842
	mov	ecx, DWORD PTR _data_offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _data_offsets$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN9@IsMacResou
; Line 1844
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN6@IsMacResou
; Line 1845
	mov	ecx, DWORD PTR _aface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], 1
$LN6@IsMacResou:
; Line 1846
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN12@IsMacResou
$LN10@IsMacResou:
; Line 1854
	lea	eax, DWORD PTR _count$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data_offsets$[ebp]
	push	ecx
	push	0
	push	1936092788				; 73666e74H
	mov	edx, DWORD PTR _rdara_pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _map_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_FT_Raccess_Get_DataOffsets
	add	esp, 32					; 00000020H
	mov	DWORD PTR _error$[ebp], eax
; Line 1855
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@IsMacResou
; Line 1857
	mov	eax, DWORD PTR _face_index$[ebp]
	cdq
	idiv	DWORD PTR _count$[ebp]
	mov	DWORD PTR _face_index_internal$1[ebp], edx
; Line 1861
	mov	eax, DWORD PTR _aface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face_index_internal$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _data_offsets$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_Mac_Read_sfnt_Resource
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
$LN4@IsMacResou:
; Line 1862
	mov	eax, DWORD PTR _data_offsets$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _data_offsets$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN4@IsMacResou
; Line 1863
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@IsMacResou
; Line 1864
	mov	eax, DWORD PTR _aface$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@IsMacResou:
; Line 1867
	mov	eax, DWORD PTR _error$[ebp]
$LN12@IsMacResou:
; Line 1868
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@IsMacResou
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN19@IsMacResou:
	DD	4
	DD	$LN18@IsMacResou
$LN18@IsMacResou:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN14@IsMacResou
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN15@IsMacResou
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN16@IsMacResou
	DD	-52					; ffffffccH
	DD	4
	DD	$LN17@IsMacResou
$LN17@IsMacResou:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN16@IsMacResou:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN15@IsMacResou:
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN14@IsMacResou:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_IsMacResource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv153 = -44						; size = 4
tv149 = -40						; size = 4
_face_index_in_resource$ = -36				; size = 4
_is_cff$ = -32						; size = 4
_rlen$ = -28						; size = 4
_flag_offset$ = -24					; size = 4
_error$ = -16						; size = 4
_sfnt_data$ = -8					; size = 4
_memory$ = -4						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_offsets$ = 16						; size = 4
_resource_cnt$ = 20					; size = 4
_face_index$ = 24					; size = 4
_aface$ = 28						; size = 4
_Mac_Read_sfnt_Resource PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1753
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1754
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1755
	mov	DWORD PTR _sfnt_data$[ebp], 0
; Line 1760
	mov	DWORD PTR _face_index_in_resource$[ebp], 0
; Line 1763
	cmp	DWORD PTR _face_index$[ebp], -1
	jne	SHORT $LN9@Mac_Read_s
; Line 1764
	mov	DWORD PTR _face_index$[ebp], 0
$LN9@Mac_Read_s:
; Line 1765
	mov	edx, DWORD PTR _face_index$[ebp]
	cmp	edx, DWORD PTR _resource_cnt$[ebp]
	jl	SHORT $LN8@Mac_Read_s
; Line 1766
	push	OFFSET $SG10152
	push	1766					; 000006e6H
	push	1
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 1
	jmp	$LN10@Mac_Read_s
$LN8@Mac_Read_s:
; Line 1768
	mov	eax, DWORD PTR _face_index$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _flag_offset$[ebp], edx
; Line 1769
	mov	eax, DWORD PTR _flag_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1770
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@Mac_Read_s
; Line 1771
	jmp	$Exit$19
$LN7@Mac_Read_s:
; Line 1773
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _rlen$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@Mac_Read_s
; Line 1774
	jmp	$Exit$19
$LN6@Mac_Read_s:
; Line 1775
	cmp	DWORD PTR _rlen$[ebp], -1
	jne	SHORT $LN5@Mac_Read_s
; Line 1776
	push	OFFSET $SG10158
	push	1776					; 000006f0H
	push	1
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 1
	jmp	$LN10@Mac_Read_s
$LN5@Mac_Read_s:
; Line 1782
	mov	ecx, DWORD PTR _aface$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_open_face_PS_from_sfnt_stream
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 1783
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN4@Mac_Read_s
; Line 1784
	jmp	$Exit$19
$LN4@Mac_Read_s:
; Line 1787
	mov	edx, DWORD PTR _flag_offset$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@Mac_Read_s
; Line 1788
	jmp	$Exit$19
$LN3@Mac_Read_s:
; Line 1790
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _sfnt_data$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@Mac_Read_s
; Line 1791
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN10@Mac_Read_s
$LN2@Mac_Read_s:
; Line 1792
	mov	ecx, DWORD PTR _rlen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfnt_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1793
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@Mac_Read_s
; Line 1794
	jmp	SHORT $Exit$19
$LN1@Mac_Read_s:
; Line 1796
	cmp	DWORD PTR _rlen$[ebp], 4
	jle	SHORT $LN12@Mac_Read_s
	push	4
	push	OFFSET $SG10167
	mov	ecx, DWORD PTR _sfnt_data$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@Mac_Read_s
	mov	DWORD PTR tv149[ebp], 1
	jmp	SHORT $LN13@Mac_Read_s
$LN12@Mac_Read_s:
	mov	DWORD PTR tv149[ebp], 0
$LN13@Mac_Read_s:
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR _is_cff$[ebp], edx
; Line 1802
	cmp	DWORD PTR _is_cff$[ebp], 0
	je	SHORT $LN14@Mac_Read_s
	mov	DWORD PTR tv153[ebp], OFFSET $SG10168
	jmp	SHORT $LN15@Mac_Read_s
$LN14@Mac_Read_s:
	mov	DWORD PTR tv153[ebp], OFFSET $SG10169
$LN15@Mac_Read_s:
	mov	eax, DWORD PTR _aface$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv153[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index_in_resource$[ebp]
	push	edx
	mov	eax, DWORD PTR _rlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_open_face_from_buffer
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
$Exit$19:
; Line 1805
	mov	eax, DWORD PTR _error$[ebp]
$LN10@Mac_Read_s:
; Line 1806
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Mac_Read_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@Mac_Read_s:
	DD	1
	DD	$LN17@Mac_Read_s
$LN17@Mac_Read_s:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN16@Mac_Read_s
$LN16@Mac_Read_s:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_Mac_Read_sfnt_Resource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_temp$ = -56						; size = 4
_rlen$ = -52						; size = 4
_pfb_lenpos$ = -48					; size = 4
_pfb_pos$ = -44						; size = 4
_pfb_len$ = -40						; size = 4
_len$ = -36						; size = 4
_flags$ = -32						; size = 4
_type$ = -28						; size = 4
_i$ = -24						; size = 4
_pfb_data$ = -20					; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_offsets$ = 16						; size = 4
_resource_cnt$ = 20					; size = 4
_face_index$ = 24					; size = 4
_aface$ = 28						; size = 4
_Mac_Read_POST_Resource PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1560
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1561
	mov	DWORD PTR _error$[ebp], 1
; Line 1562
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1563
	mov	DWORD PTR _pfb_data$[ebp], 0
; Line 1570
	cmp	DWORD PTR _face_index$[ebp], -1
	jne	SHORT $LN82@Mac_Read_P
; Line 1571
	mov	DWORD PTR _face_index$[ebp], 0
$LN82@Mac_Read_P:
; Line 1572
	cmp	DWORD PTR _face_index$[ebp], 0
	je	SHORT $LN81@Mac_Read_P
; Line 1573
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN83@Mac_Read_P
$LN81@Mac_Read_P:
; Line 1577
	mov	DWORD PTR _pfb_len$[ebp], 0
; Line 1578
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN80@Mac_Read_P
$LN79@Mac_Read_P:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN80@Mac_Read_P:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _resource_cnt$[ebp]
	jge	$LN65@Mac_Read_P
; Line 1580
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1581
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN77@Mac_Read_P
; Line 1582
	jmp	$Exit$88
$LN77@Mac_Read_P:
; Line 1583
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _temp$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN75@Mac_Read_P
; Line 1584
	jmp	$Exit$88
$LN75@Mac_Read_P:
; Line 1590
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN74@Mac_Read_P
	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG10026
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN74@Mac_Read_P:
	xor	edx, edx
	jne	SHORT $LN75@Mac_Read_P
; Line 1591
	cmp	DWORD PTR _temp$[ebp], 2147483647	; 7fffffffH
	ja	SHORT $LN69@Mac_Read_P
	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR _pfb_len$[ebp]
	lea	edx, DWORD PTR [ecx+eax+6]
	cmp	edx, DWORD PTR _pfb_len$[ebp]
	jae	SHORT $LN71@Mac_Read_P
$LN69@Mac_Read_P:
; Line 1594
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN68@Mac_Read_P
	mov	edx, DWORD PTR _temp$[ebp]
	push	edx
	push	OFFSET $SG10033
	call	_FT_Message
	add	esp, 8
$LN68@Mac_Read_P:
	xor	eax, eax
	jne	SHORT $LN69@Mac_Read_P
; Line 1595
	push	OFFSET $SG10034
	push	1595					; 0000063bH
	push	9
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 9
	mov	DWORD PTR _error$[ebp], eax
; Line 1596
	jmp	$Exit$88
$LN71@Mac_Read_P:
; Line 1599
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	edx, DWORD PTR _pfb_len$[ebp]
	lea	eax, DWORD PTR [edx+ecx+6]
	mov	DWORD PTR _pfb_len$[ebp], eax
; Line 1600
	jmp	$LN79@Mac_Read_P
$LN65@Mac_Read_P:
; Line 1604
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN64@Mac_Read_P
	mov	eax, DWORD PTR _pfb_len$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _resource_cnt$[ebp]
	push	ecx
	push	OFFSET $SG10039
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN64@Mac_Read_P:
	xor	edx, edx
	jne	SHORT $LN65@Mac_Read_P
; Line 1605
	mov	eax, DWORD PTR _pfb_len$[ebp]
	add	eax, 2
	cmp	eax, 6
	jae	SHORT $LN61@Mac_Read_P
$LN60@Mac_Read_P:
; Line 1607
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 2
	jl	SHORT $LN59@Mac_Read_P
	mov	eax, DWORD PTR _pfb_len$[ebp]
	push	eax
	push	OFFSET $SG10045
	call	_FT_Message
	add	esp, 8
$LN59@Mac_Read_P:
	xor	ecx, ecx
	jne	SHORT $LN60@Mac_Read_P
; Line 1608
	push	OFFSET $SG10046
	push	1608					; 00000648H
	push	10					; 0000000aH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 10					; 0000000aH
	mov	DWORD PTR _error$[ebp], eax
; Line 1609
	jmp	$Exit$88
$LN61@Mac_Read_P:
; Line 1611
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfb_len$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pfb_data$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN56@Mac_Read_P
; Line 1612
	jmp	$Exit$88
$LN56@Mac_Read_P:
; Line 1614
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pfb_data$[ebp]
	mov	BYTE PTR [ecx+eax], 128			; 00000080H
; Line 1615
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _pfb_data$[ebp]
	mov	BYTE PTR [eax+edx], 1
; Line 1616
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _pfb_data$[ebp]
	mov	BYTE PTR [edx+ecx], 0
; Line 1617
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pfb_data$[ebp]
	mov	BYTE PTR [edx+ecx], 0
; Line 1618
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _pfb_data$[ebp]
	mov	BYTE PTR [ecx+eax], 0
; Line 1619
	mov	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _pfb_data$[ebp]
	mov	BYTE PTR [ecx+eax], 0
; Line 1620
	mov	DWORD PTR _pfb_pos$[ebp], 6
; Line 1621
	mov	DWORD PTR _pfb_lenpos$[ebp], 2
; Line 1623
	mov	DWORD PTR _len$[ebp], 0
; Line 1624
	mov	DWORD PTR _type$[ebp], 1
; Line 1625
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN55@Mac_Read_P
$LN54@Mac_Read_P:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN55@Mac_Read_P:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _resource_cnt$[ebp]
	jge	$LN53@Mac_Read_P
; Line 1627
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 1628
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN52@Mac_Read_P
; Line 1629
	jmp	$Exit2$89
$LN52@Mac_Read_P:
; Line 1630
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _rlen$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN51@Mac_Read_P
; Line 1631
	jmp	$Exit2$89
$LN51@Mac_Read_P:
; Line 1636
	cmp	DWORD PTR _rlen$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN50@Mac_Read_P
; Line 1638
	push	OFFSET $SG10058
	push	1638					; 00000666H
	push	9
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 9
	mov	DWORD PTR _error$[ebp], eax
; Line 1639
	jmp	$Exit2$89
$LN50@Mac_Read_P:
; Line 1642
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	eax, ax
	mov	DWORD PTR _flags$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN48@Mac_Read_P
; Line 1643
	jmp	$Exit2$89
$LN48@Mac_Read_P:
; Line 1645
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN47@Mac_Read_P
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rlen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET $SG10065
	call	_FT_Message
	add	esp, 20					; 00000014H
$LN47@Mac_Read_P:
	xor	eax, eax
	jne	SHORT $LN48@Mac_Read_P
; Line 1647
	mov	DWORD PTR _error$[ebp], 10		; 0000000aH
; Line 1649
	mov	ecx, DWORD PTR _flags$[ebp]
	sar	ecx, 8
	test	ecx, ecx
	jne	SHORT $LN44@Mac_Read_P
$LN43@Mac_Read_P:
; Line 1651
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN42@Mac_Read_P
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG10071
	call	_FT_Message
	add	esp, 8
$LN42@Mac_Read_P:
	xor	edx, edx
	jne	SHORT $LN43@Mac_Read_P
; Line 1652
	jmp	$LN54@Mac_Read_P
$LN44@Mac_Read_P:
; Line 1657
	cmp	DWORD PTR _rlen$[ebp], 2
	jbe	SHORT $LN39@Mac_Read_P
; Line 1658
	mov	eax, DWORD PTR _rlen$[ebp]
	sub	eax, 2
	mov	DWORD PTR _rlen$[ebp], eax
; Line 1659
	jmp	SHORT $LN38@Mac_Read_P
$LN39@Mac_Read_P:
; Line 1660
	mov	DWORD PTR _rlen$[ebp], 0
$LN38@Mac_Read_P:
; Line 1662
	mov	ecx, DWORD PTR _flags$[ebp]
	sar	ecx, 8
	cmp	ecx, DWORD PTR _type$[ebp]
	jne	SHORT $LN35@Mac_Read_P
; Line 1663
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, DWORD PTR _rlen$[ebp]
	mov	DWORD PTR _len$[ebp], edx
; Line 1664
	jmp	$LN36@Mac_Read_P
$LN35@Mac_Read_P:
; Line 1667
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN34@Mac_Read_P
	mov	edx, DWORD PTR _pfb_lenpos$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfb_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG10080
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN34@Mac_Read_P:
	xor	edx, edx
	jne	SHORT $LN35@Mac_Read_P
; Line 1668
	mov	eax, DWORD PTR _pfb_lenpos$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _pfb_len$[ebp]
	add	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN31@Mac_Read_P
; Line 1669
	jmp	$Exit2$89
$LN31@Mac_Read_P:
; Line 1670
	mov	edx, DWORD PTR _pfb_data$[ebp]
	add	edx, DWORD PTR _pfb_lenpos$[ebp]
	mov	al, BYTE PTR _len$[ebp]
	mov	BYTE PTR [edx], al
; Line 1671
	mov	ecx, DWORD PTR _len$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _pfb_data$[ebp]
	add	edx, DWORD PTR _pfb_lenpos$[ebp]
	mov	BYTE PTR [edx+1], cl
; Line 1672
	mov	eax, DWORD PTR _len$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pfb_data$[ebp]
	add	ecx, DWORD PTR _pfb_lenpos$[ebp]
	mov	BYTE PTR [ecx+2], al
; Line 1673
	mov	edx, DWORD PTR _len$[ebp]
	shr	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pfb_data$[ebp]
	add	eax, DWORD PTR _pfb_lenpos$[ebp]
	mov	BYTE PTR [eax+3], dl
; Line 1675
	mov	ecx, DWORD PTR _flags$[ebp]
	sar	ecx, 8
	cmp	ecx, 5
	jne	SHORT $LN29@Mac_Read_P
; Line 1676
	jmp	$LN53@Mac_Read_P
$LN29@Mac_Read_P:
; Line 1679
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN28@Mac_Read_P
	mov	ecx, DWORD PTR _pfb_pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pfb_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET $SG10091
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN28@Mac_Read_P:
	xor	ecx, ecx
	jne	SHORT $LN29@Mac_Read_P
; Line 1680
	mov	edx, DWORD PTR _pfb_pos$[ebp]
	add	edx, 6
	mov	eax, DWORD PTR _pfb_len$[ebp]
	add	eax, 2
	cmp	edx, eax
	jbe	SHORT $LN25@Mac_Read_P
; Line 1681
	jmp	$Exit2$89
$LN25@Mac_Read_P:
; Line 1682
	mov	ecx, DWORD PTR _pfb_data$[ebp]
	add	ecx, DWORD PTR _pfb_pos$[ebp]
	mov	BYTE PTR [ecx], 128			; 00000080H
	mov	edx, DWORD PTR _pfb_pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pfb_pos$[ebp], edx
; Line 1684
	mov	eax, DWORD PTR _flags$[ebp]
	sar	eax, 8
	mov	DWORD PTR _type$[ebp], eax
; Line 1685
	mov	ecx, DWORD PTR _rlen$[ebp]
	mov	DWORD PTR _len$[ebp], ecx
; Line 1687
	mov	edx, DWORD PTR _pfb_data$[ebp]
	add	edx, DWORD PTR _pfb_pos$[ebp]
	mov	al, BYTE PTR _type$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _pfb_pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pfb_pos$[ebp], ecx
; Line 1688
	mov	edx, DWORD PTR _pfb_pos$[ebp]
	mov	DWORD PTR _pfb_lenpos$[ebp], edx
; Line 1689
	mov	eax, DWORD PTR _pfb_data$[ebp]
	add	eax, DWORD PTR _pfb_pos$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _pfb_pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pfb_pos$[ebp], ecx
; Line 1690
	mov	edx, DWORD PTR _pfb_data$[ebp]
	add	edx, DWORD PTR _pfb_pos$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _pfb_pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pfb_pos$[ebp], eax
; Line 1691
	mov	ecx, DWORD PTR _pfb_data$[ebp]
	add	ecx, DWORD PTR _pfb_pos$[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _pfb_pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pfb_pos$[ebp], edx
; Line 1692
	mov	eax, DWORD PTR _pfb_data$[ebp]
	add	eax, DWORD PTR _pfb_pos$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _pfb_pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pfb_pos$[ebp], ecx
$LN36@Mac_Read_P:
; Line 1695
	mov	edx, DWORD PTR _pfb_pos$[ebp]
	cmp	edx, DWORD PTR _pfb_len$[ebp]
	ja	SHORT $LN23@Mac_Read_P
	mov	eax, DWORD PTR _pfb_pos$[ebp]
	add	eax, DWORD PTR _rlen$[ebp]
	cmp	eax, DWORD PTR _pfb_len$[ebp]
	jbe	SHORT $LN22@Mac_Read_P
$LN23@Mac_Read_P:
; Line 1696
	jmp	$Exit2$89
$LN22@Mac_Read_P:
; Line 1699
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN21@Mac_Read_P
	mov	eax, DWORD PTR _pfb_pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfb_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET $SG10100
	call	_FT_Message
	add	esp, 20					; 00000014H
$LN21@Mac_Read_P:
	xor	ecx, ecx
	jne	SHORT $LN22@Mac_Read_P
; Line 1700
	mov	edx, DWORD PTR _rlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfb_data$[ebp]
	add	eax, DWORD PTR _pfb_pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1701
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@Mac_Read_P
; Line 1702
	jmp	$Exit2$89
$LN18@Mac_Read_P:
; Line 1703
	mov	edx, DWORD PTR _pfb_pos$[ebp]
	add	edx, DWORD PTR _rlen$[ebp]
	mov	DWORD PTR _pfb_pos$[ebp], edx
; Line 1704
	jmp	$LN54@Mac_Read_P
$LN53@Mac_Read_P:
; Line 1706
	mov	DWORD PTR _error$[ebp], 10		; 0000000aH
; Line 1707
	mov	eax, DWORD PTR _pfb_pos$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _pfb_len$[ebp]
	add	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN17@Mac_Read_P
; Line 1708
	jmp	$Exit2$89
$LN17@Mac_Read_P:
; Line 1709
	mov	edx, DWORD PTR _pfb_data$[ebp]
	add	edx, DWORD PTR _pfb_pos$[ebp]
	mov	BYTE PTR [edx], 128			; 00000080H
	mov	eax, DWORD PTR _pfb_pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pfb_pos$[ebp], eax
; Line 1710
	mov	ecx, DWORD PTR _pfb_data$[ebp]
	add	ecx, DWORD PTR _pfb_pos$[ebp]
	mov	BYTE PTR [ecx], 3
	mov	edx, DWORD PTR _pfb_pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pfb_pos$[ebp], edx
; Line 1712
	mov	eax, DWORD PTR _pfb_lenpos$[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _pfb_len$[ebp]
	add	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN16@Mac_Read_P
; Line 1713
	jmp	SHORT $Exit2$89
$LN16@Mac_Read_P:
; Line 1714
	mov	edx, DWORD PTR _pfb_data$[ebp]
	add	edx, DWORD PTR _pfb_lenpos$[ebp]
	mov	al, BYTE PTR _len$[ebp]
	mov	BYTE PTR [edx], al
; Line 1715
	mov	ecx, DWORD PTR _len$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _pfb_data$[ebp]
	add	edx, DWORD PTR _pfb_lenpos$[ebp]
	mov	BYTE PTR [edx+1], cl
; Line 1716
	mov	eax, DWORD PTR _len$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pfb_data$[ebp]
	add	ecx, DWORD PTR _pfb_lenpos$[ebp]
	mov	BYTE PTR [ecx+2], al
; Line 1717
	mov	edx, DWORD PTR _len$[ebp]
	shr	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pfb_data$[ebp]
	add	eax, DWORD PTR _pfb_lenpos$[ebp]
	mov	BYTE PTR [eax+3], dl
; Line 1724
	mov	ecx, DWORD PTR _aface$[ebp]
	push	ecx
	push	OFFSET $SG10109
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfb_pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfb_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_open_face_from_buffer
	add	esp, 24					; 00000018H
	jmp	SHORT $LN83@Mac_Read_P
$Exit2$89:
; Line 1727
	cmp	DWORD PTR _error$[ebp], 10		; 0000000aH
	jne	SHORT $LN15@Mac_Read_P
$LN14@Mac_Read_P:
; Line 1729
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN13@Mac_Read_P
	push	OFFSET $SG10115
	call	_FT_Message
	add	esp, 4
$LN13@Mac_Read_P:
	xor	edx, edx
	jne	SHORT $LN14@Mac_Read_P
; Line 1730
	jmp	SHORT $LN10@Mac_Read_P
$LN15@Mac_Read_P:
	cmp	DWORD PTR _error$[ebp], 9
	jne	SHORT $LN10@Mac_Read_P
$LN8@Mac_Read_P:
; Line 1731
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN7@Mac_Read_P
	push	OFFSET $SG10122
	call	_FT_Message
	add	esp, 4
$LN7@Mac_Read_P:
	xor	edx, edx
	jne	SHORT $LN8@Mac_Read_P
$LN10@Mac_Read_P:
; Line 1732
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@Mac_Read_P
; Line 1733
	mov	DWORD PTR _error$[ebp], 1
$LN3@Mac_Read_P:
; Line 1734
	mov	eax, DWORD PTR _pfb_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _pfb_data$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@Mac_Read_P
$Exit$88:
; Line 1737
	mov	eax, DWORD PTR _error$[ebp]
$LN83@Mac_Read_P:
; Line 1738
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN87@Mac_Read_P
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN87@Mac_Read_P:
	DD	1
	DD	$LN86@Mac_Read_P
$LN86@Mac_Read_P:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN85@Mac_Read_P
$LN85@Mac_Read_P:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_Mac_Read_POST_Resource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -28						; size = 4
_tag$ = -24						; size = 4
_pstable_index$ = -20					; size = 4
_numTables$ = -16					; size = 2
_error$ = -8						; size = 4
_stream$ = 8						; size = 4
_face_index$ = 12					; size = 4
_offset$ = 16						; size = 4
_length$ = 20						; size = 4
_is_sfnt_cid$ = 24					; size = 4
_ft_lookup_PS_in_sfnt_stream PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1424
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1432
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1433
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 1434
	mov	edx, DWORD PTR _is_sfnt_cid$[ebp]
	mov	BYTE PTR [edx], 0
; Line 1439
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _tag$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@ft_lookup_
; Line 1440
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@ft_lookup_
$LN15@ft_lookup_:
; Line 1441
	cmp	DWORD PTR _tag$[ebp], 1954115633	; 74797031H
	je	SHORT $LN14@ft_lookup_
; Line 1442
	push	OFFSET $SG9921
	push	1442					; 000005a2H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	jmp	$LN16@ft_lookup_
$LN14@ft_lookup_:
; Line 1444
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	WORD PTR _numTables$[ebp], ax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@ft_lookup_
; Line 1445
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@ft_lookup_
$LN13@ft_lookup_:
; Line 1446
	push	6
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@ft_lookup_
; Line 1447
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@ft_lookup_
$LN12@ft_lookup_:
; Line 1449
	mov	DWORD PTR _pstable_index$[ebp], -1
; Line 1450
	mov	edx, DWORD PTR _is_sfnt_cid$[ebp]
	mov	BYTE PTR [edx], 0
; Line 1452
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@ft_lookup_
$LN10@ft_lookup_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@ft_lookup_:
	movzx	ecx, WORD PTR _numTables$[ebp]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN9@ft_lookup_
; Line 1455
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _tag$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN7@ft_lookup_
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN7@ft_lookup_
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN7@ft_lookup_
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [ecx], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@ft_lookup_
$LN7@ft_lookup_:
; Line 1456
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@ft_lookup_
$LN8@ft_lookup_:
; Line 1458
	cmp	DWORD PTR _tag$[ebp], 1128875040	; 43494420H
	jne	SHORT $LN6@ft_lookup_
; Line 1460
	mov	edx, DWORD PTR _pstable_index$[ebp]
	add	edx, 1
	mov	DWORD PTR _pstable_index$[ebp], edx
; Line 1461
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1462
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1463
	mov	eax, DWORD PTR _is_sfnt_cid$[ebp]
	mov	BYTE PTR [eax], 1
; Line 1464
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN5@ft_lookup_
; Line 1465
	xor	eax, eax
	jmp	SHORT $LN16@ft_lookup_
$LN5@ft_lookup_:
; Line 1467
	jmp	SHORT $LN4@ft_lookup_
$LN6@ft_lookup_:
	cmp	DWORD PTR _tag$[ebp], 1415139377	; 54595031H
	jne	SHORT $LN4@ft_lookup_
; Line 1469
	mov	ecx, DWORD PTR _pstable_index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pstable_index$[ebp], ecx
; Line 1470
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1471
	mov	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1472
	mov	edx, DWORD PTR _is_sfnt_cid$[ebp]
	mov	BYTE PTR [edx], 0
; Line 1473
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN4@ft_lookup_
; Line 1474
	xor	eax, eax
	jmp	SHORT $LN16@ft_lookup_
$LN4@ft_lookup_:
; Line 1476
	cmp	DWORD PTR _face_index$[ebp], 0
	jl	SHORT $LN1@ft_lookup_
	mov	eax, DWORD PTR _pstable_index$[ebp]
	cmp	eax, DWORD PTR _face_index$[ebp]
	jne	SHORT $LN1@ft_lookup_
; Line 1477
	xor	eax, eax
	jmp	SHORT $LN16@ft_lookup_
$LN1@ft_lookup_:
; Line 1478
	jmp	$LN10@ft_lookup_
$LN9@ft_lookup_:
; Line 1479
	push	OFFSET $SG9951
	push	1479					; 000005c7H
	push	142					; 0000008eH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 142				; 0000008eH
$LN16@ft_lookup_:
; Line 1480
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@ft_lookup_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@ft_lookup_:
	DD	1
	DD	$LN19@ft_lookup_
$LN19@ft_lookup_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@ft_lookup_
$LN18@ft_lookup_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_lookup_PS_in_sfnt_stream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_base$ = 12						; size = 4
_size$ = 16						; size = 4
_close$ = 20						; size = 4
_astream$ = 24						; size = 4
_new_memory_stream PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1318
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1321
	mov	DWORD PTR _stream$[ebp], 0
; Line 1324
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN3@new_memory
; Line 1325
	push	OFFSET $SG9860
	push	1325					; 0000052dH
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	SHORT $LN4@new_memory
$LN3@new_memory:
; Line 1327
	cmp	DWORD PTR _base$[ebp], 0
	jne	SHORT $LN2@new_memory
; Line 1328
	push	OFFSET $SG9862
	push	1328					; 00000530H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN4@new_memory
$LN2@new_memory:
; Line 1330
	mov	eax, DWORD PTR _astream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1331
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$[ebp], edx
; Line 1332
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	40					; 00000028H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _stream$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@new_memory
; Line 1333
	jmp	SHORT $Exit$9
$LN1@new_memory:
; Line 1335
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_OpenMemory
	add	esp, 12					; 0000000cH
; Line 1337
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _close$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 1339
	mov	ecx, DWORD PTR _astream$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], edx
$Exit$9:
; Line 1342
	mov	eax, DWORD PTR _error$[ebp]
$LN4@new_memory:
; Line 1343
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@new_memory
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@new_memory:
	DD	1
	DD	$LN7@new_memory
$LN7@new_memory:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@new_memory
$LN6@new_memory:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_new_memory_stream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_stream$ = 8						; size = 4
_memory_stream_close PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1298
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1299
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$[ebp], ecx
$LN3@memory_str:
; Line 1302
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], 0
	xor	eax, eax
	jne	SHORT $LN3@memory_str
; Line 1304
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 1305
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], 0
; Line 1306
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 1307
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_memory_stream_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$1 = -36						; size = 4
_error2$ = -32						; size = 4
_error$ = -24						; size = 4
_internal$ = -16					; size = 4
_face$ = -12						; size = 4
_clazz$ = -8						; size = 4
_memory$ = -4						; size = 4
_driver$ = 8						; size = 4
_astream$ = 12						; size = 4
_external_stream$ = 16					; size = 1
_face_index$ = 20					; size = 4
_num_params$ = 24					; size = 4
_params$ = 28						; size = 4
_aface$ = 32						; size = 4
_open_face PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1126
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1129
	mov	DWORD PTR _face$[ebp], 0
; Line 1130
	mov	DWORD PTR _internal$[ebp], 0
; Line 1135
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _clazz$[ebp], ecx
; Line 1136
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _memory$[ebp], eax
; Line 1139
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _clazz$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _face$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@open_face
; Line 1140
	jmp	$Fail$24
$LN18@open_face:
; Line 1142
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _driver$[ebp]
	mov	DWORD PTR [edx+96], eax
; Line 1143
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [ecx+100], edx
; Line 1144
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _astream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+104], edx
; Line 1147
	movzx	eax, BYTE PTR _external_stream$[ebp]
	test	eax, eax
	je	SHORT $LN17@open_face
; Line 1148
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 1024				; 00000400H
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN17@open_face:
; Line 1150
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	60					; 0000003cH
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _internal$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@open_face
; Line 1151
	jmp	$Fail$24
$LN16@open_face:
; Line 1153
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [eax+128], ecx
; Line 1160
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR [eax+48], 0
; Line 1162
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN15@open_face
$LN14@open_face:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN15@open_face:
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR _num_params$[ebp]
	jge	SHORT $LN13@open_face
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN13@open_face
; Line 1163
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _params$[ebp]
	cmp	DWORD PTR [eax+edx*8], 1768842098	; 696e6372H
	jne	SHORT $LN12@open_face
; Line 1165
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR [edx+48], eax
$LN12@open_face:
; Line 1166
	jmp	SHORT $LN14@open_face
$LN13@open_face:
; Line 1169
	mov	ecx, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN11@open_face
; Line 1174
	mov	esi, esp
	mov	edx, DWORD PTR _params$[ebp]
	push	edx
	mov	eax, DWORD PTR _num_params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _astream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _clazz$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN11@open_face:
; Line 1175
	mov	ecx, DWORD PTR _astream$[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR [ecx], eax
; Line 1176
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@open_face
; Line 1177
	jmp	SHORT $Fail$24
$LN10@open_face:
; Line 1180
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_find_unicode_charmap
	add	esp, 4
	mov	DWORD PTR _error2$[ebp], eax
; Line 1186
	cmp	DWORD PTR _error2$[ebp], 0
	je	SHORT $LN9@open_face
	mov	edx, DWORD PTR _error2$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 38					; 00000026H
	je	SHORT $LN9@open_face
; Line 1188
	mov	eax, DWORD PTR _error2$[ebp]
	mov	DWORD PTR _error$[ebp], eax
; Line 1189
	jmp	SHORT $Fail$24
$LN9@open_face:
; Line 1192
	mov	ecx, DWORD PTR _aface$[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx], edx
$Fail$24:
; Line 1195
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@open_face
; Line 1197
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_destroy_charmaps
	add	esp, 8
; Line 1198
	mov	edx, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN6@open_face
; Line 1199
	mov	esi, esp
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clazz$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@open_face:
; Line 1200
	mov	eax, DWORD PTR _internal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _internal$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN6@open_face
$LN3@open_face:
; Line 1201
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _face$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@open_face
; Line 1202
	mov	eax, DWORD PTR _aface$[ebp]
	mov	DWORD PTR [eax], 0
$LN8@open_face:
; Line 1205
	mov	eax, DWORD PTR _error$[ebp]
; Line 1206
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@open_face
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@open_face:
	DD	1
	DD	$LN22@open_face
$LN22@open_face:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN21@open_face
$LN21@open_face:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_open_face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cur$ = -12						; size = 4
_end$ = -8						; size = 4
_first$ = -4						; size = 4
_face$ = 8						; size = 4
_find_variant_selector_charmap PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1082
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN9@find_varia:
; Line 1089
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN8@find_varia
	push	OFFSET $SG9741
	push	1089					; 00000441H
	push	OFFSET $SG9742
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN8@find_varia:
	xor	eax, eax
	jne	SHORT $LN9@find_varia
; Line 1091
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _first$[ebp], edx
; Line 1093
	cmp	DWORD PTR _first$[ebp], 0
	jne	SHORT $LN5@find_varia
; Line 1094
	xor	eax, eax
	jmp	$LN10@find_varia
$LN5@find_varia:
; Line 1096
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _first$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _end$[ebp], eax
; Line 1098
	mov	ecx, DWORD PTR _first$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN4@find_varia
$LN3@find_varia:
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 4
	mov	DWORD PTR _cur$[ebp], edx
$LN4@find_varia:
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jae	SHORT $LN2@find_varia
; Line 1102
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	movzx	edx, WORD PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LN1@find_varia
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	movzx	ecx, WORD PTR [eax+10]
	cmp	ecx, 5
	jne	SHORT $LN1@find_varia
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_FT_Get_CMap_Format
	add	esp, 4
	cmp	eax, 14					; 0000000eH
	jne	SHORT $LN1@find_varia
; Line 1103
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	jmp	SHORT $LN10@find_varia
$LN1@find_varia:
; Line 1104
	jmp	SHORT $LN3@find_varia
$LN2@find_varia:
; Line 1106
	xor	eax, eax
$LN10@find_varia:
; Line 1107
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_find_variant_selector_charmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_first$ = -4						; size = 4
_face$ = 8						; size = 4
_find_unicode_charmap PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 994
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN14@find_unico:
; Line 1000
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN13@find_unico
	push	OFFSET $SG9714
	push	1000					; 000003e8H
	push	OFFSET $SG9715
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN13@find_unico:
	xor	eax, eax
	jne	SHORT $LN14@find_unico
; Line 1002
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _first$[ebp], edx
; Line 1004
	cmp	DWORD PTR _first$[ebp], 0
	jne	SHORT $LN10@find_unico
; Line 1005
	push	OFFSET $SG9717
	push	1005					; 000003edH
	push	38					; 00000026H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 38					; 00000026H
	jmp	$LN15@find_unico
$LN10@find_unico:
; Line 1035
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _first$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _cur$[ebp], eax
$LN9@find_unico:
; Line 1037
	mov	ecx, DWORD PTR _cur$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _cur$[ebp], ecx
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _first$[ebp]
	jb	$LN8@find_unico
; Line 1039
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	cmp	DWORD PTR [eax+4], 1970170211		; 756e6963H
	jne	SHORT $LN7@find_unico
; Line 1046
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	movzx	edx, WORD PTR [ecx+8]
	cmp	edx, 3
	jne	SHORT $LN4@find_unico
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	movzx	ecx, WORD PTR [eax+10]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN5@find_unico
$LN4@find_unico:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	movzx	eax, WORD PTR [edx+8]
	test	eax, eax
	jne	SHORT $LN7@find_unico
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	movzx	edx, WORD PTR [ecx+10]
	cmp	edx, 4
	jne	SHORT $LN7@find_unico
$LN5@find_unico:
; Line 1048
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+92], ecx
; Line 1049
	xor	eax, eax
	jmp	SHORT $LN15@find_unico
$LN7@find_unico:
; Line 1052
	jmp	$LN9@find_unico
$LN8@find_unico:
; Line 1056
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _first$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cur$[ebp], edx
$LN3@find_unico:
; Line 1058
	mov	eax, DWORD PTR _cur$[ebp]
	sub	eax, 4
	mov	DWORD PTR _cur$[ebp], eax
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _first$[ebp]
	jb	SHORT $LN2@find_unico
; Line 1060
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	cmp	DWORD PTR [edx+4], 1970170211		; 756e6963H
	jne	SHORT $LN1@find_unico
; Line 1062
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+92], ecx
; Line 1063
	xor	eax, eax
	jmp	SHORT $LN15@find_unico
$LN1@find_unico:
; Line 1065
	jmp	SHORT $LN3@find_unico
$LN2@find_unico:
; Line 1067
	push	OFFSET $SG9729
	push	1067					; 0000042bH
	push	38					; 00000026H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 38					; 00000026H
$LN15@find_unico:
; Line 1068
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_find_unicode_charmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_driver$ = 8						; size = 4
_Destroy_Driver PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 966
	push	ebp
	mov	ebp, esp
; Line 970
	mov	eax, DWORD PTR _driver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _destroy_face
	mov	eax, DWORD PTR _driver$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_FT_List_Finalize
	add	esp, 16					; 00000010H
; Line 973
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	and	eax, 512				; 00000200H
	jne	SHORT $LN2@Destroy_Dr
; Line 974
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_FT_GlyphLoader_Done
	add	esp, 4
$LN2@Destroy_Dr:
; Line 975
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Destroy_Driver ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv93 = -8						; size = 4
_clazz$ = -4						; size = 4
_memory$ = 8						; size = 4
_face$ = 12						; size = 4
_driver$ = 16						; size = 4
_destroy_face PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 917
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 918
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _clazz$[ebp], ecx
; Line 922
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+120], 0
	je	SHORT $LN11@destroy_fa
; Line 923
	mov	esi, esp
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@destroy_fa:
; Line 927
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+84], 0
	je	SHORT $LN10@destroy_fa
; Line 928
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	_FT_Done_GlyphSlot
	add	esp, 4
	jmp	SHORT $LN11@destroy_fa
$LN10@destroy_fa:
; Line 934
	mov	ecx, DWORD PTR _driver$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	push	OFFSET _destroy_size
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_List_Finalize
	add	esp, 16					; 00000010H
; Line 935
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+88], 0
; Line 938
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN9@destroy_fa
; Line 939
	mov	esi, esp
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@destroy_fa:
; Line 942
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_destroy_charmaps
	add	esp, 8
; Line 945
	mov	edx, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN8@destroy_fa
; Line 946
	mov	esi, esp
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clazz$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@destroy_fa:
; Line 951
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN15@destroy_fa
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN16@destroy_fa
$LN15@destroy_fa:
	mov	DWORD PTR tv93[ebp], 0
$LN16@destroy_fa:
	mov	edx, DWORD PTR tv93[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	call	_FT_Stream_Free
	add	esp, 8
; Line 953
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+104], 0
; Line 956
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+128], 0
	je	SHORT $LN3@destroy_fa
$LN6@destroy_fa:
; Line 958
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+128], 0
	xor	edx, edx
	jne	SHORT $LN6@destroy_fa
$LN3@destroy_fa:
; Line 960
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _face$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@destroy_fa
; Line 961
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_destroy_face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$1 = -8						; size = 4
_n$ = -4						; size = 4
_face$ = 8						; size = 4
_memory$ = 12						; size = 4
_destroy_charmaps PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 890
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 894
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN7@destroy_ch
; Line 895
	jmp	SHORT $LN8@destroy_ch
$LN7@destroy_ch:
; Line 897
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@destroy_ch
$LN5@destroy_ch:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN6@destroy_ch:
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jge	SHORT $LN3@destroy_ch
; Line 899
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _cmap$1[ebp], eax
; Line 902
	mov	ecx, DWORD PTR _cmap$1[ebp]
	push	ecx
	call	_ft_cmap_done_internal
	add	esp, 4
; Line 904
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+ecx*4], 0
; Line 905
	jmp	SHORT $LN5@destroy_ch
$LN3@destroy_ch:
; Line 907
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+40], 0
	xor	eax, eax
	jne	SHORT $LN3@destroy_ch
; Line 908
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+36], 0
$LN8@destroy_ch:
; Line 909
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_destroy_charmaps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -12						; size = 4
_face$ = -8						; size = 4
_clazz$ = -4						; size = 4
_cmap$ = 8						; size = 4
_ft_cmap_done_internal PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3227
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3228
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _clazz$[ebp], ecx
; Line 3229
	mov	edx, DWORD PTR _cmap$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _face$[ebp], eax
; Line 3230
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 3233
	mov	eax, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@ft_cmap_do
; Line 3234
	mov	esi, esp
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _clazz$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@ft_cmap_do:
; Line 3236
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _cmap$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@ft_cmap_do
; Line 3237
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_cmap_done_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = 8						; size = 4
_size$ = 12						; size = 4
_driver$ = 16						; size = 4
_destroy_size PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 869
	push	ebp
	mov	ebp, esp
	push	esi
; Line 871
	mov	eax, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN8@destroy_si
; Line 872
	mov	esi, esp
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@destroy_si:
; Line 875
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN6@destroy_si
; Line 876
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@destroy_si:
; Line 878
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+40], 0
	xor	edx, edx
	jne	SHORT $LN6@destroy_si
$LN3@destroy_si:
; Line 879
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _size$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@destroy_si
; Line 880
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_destroy_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bottom$ = -12						; size = 4
_right$ = -8						; size = 4
_metrics$ = -4						; size = 4
_slot$ = 8						; size = 4
_vertical$ = 12						; size = 1
_ft_glyphslot_grid_fit_metrics PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 550
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 551
	mov	eax, DWORD PTR _slot$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _metrics$[ebp], eax
; Line 555
	movzx	ecx, BYTE PTR _vertical$[ebp]
	test	ecx, ecx
	je	$LN2@ft_glyphsl
; Line 557
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 558
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 63					; 0000003fH
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 560
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx+63]
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _right$[ebp], eax
; Line 561
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [edx+ecx+63]
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _bottom$[ebp], edx
; Line 563
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 564
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 566
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	sub	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 567
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _bottom$[ebp]
	sub	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 569
	jmp	$LN1@ft_glyphsl
$LN2@ft_glyphsl:
; Line 571
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 572
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, -64				; ffffffc0H
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 574
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax+63]
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _right$[ebp], ecx
; Line 575
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _bottom$[ebp], ecx
; Line 577
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 578
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 63					; 0000003fH
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 580
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR _right$[ebp]
	sub	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 581
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _bottom$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@ft_glyphsl:
; Line 584
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 585
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+28]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 586
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_glyphslot_grid_fit_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -12						; size = 4
_library$ = -8						; size = 4
_face$ = -4						; size = 4
_slot$ = 8						; size = 4
_ft_lookup_glyph_renderer PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3893
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3894
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _face$[ebp], ecx
; Line 3895
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _library$[ebp], ecx
; Line 3896
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	DWORD PTR _result$[ebp], eax
; Line 3899
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN1@ft_lookup_
	mov	ecx, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [edx+72]
	je	SHORT $LN2@ft_lookup_
$LN1@ft_lookup_:
; Line 3900
	push	0
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_FT_Lookup_Renderer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
$LN2@ft_lookup_:
; Line 3902
	mov	eax, DWORD PTR _result$[ebp]
; Line 3903
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_lookup_glyph_renderer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -12						; size = 4
_clazz$ = -8						; size = 4
_driver$ = -4						; size = 4
_slot$ = 8						; size = 4
_ft_glyphslot_done PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 371
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 372
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _driver$[ebp], edx
; Line 373
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _clazz$[ebp], ecx
; Line 374
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _memory$[ebp], eax
; Line 377
	mov	ecx, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN6@ft_glyphsl
; Line 378
	mov	esi, esp
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	mov	eax, DWORD PTR _clazz$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@ft_glyphsl:
; Line 381
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	call	_ft_glyphslot_free_bitmap
	add	esp, 4
; Line 384
	mov	eax, DWORD PTR _slot$[ebp]
	cmp	DWORD PTR [eax+156], 0
	je	SHORT $LN7@ft_glyphsl
; Line 387
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	and	eax, 512				; 00000200H
	jne	SHORT $LN3@ft_glyphsl
; Line 389
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_GlyphLoader_Done
	add	esp, 4
; Line 390
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR [edx], 0
$LN3@ft_glyphsl:
; Line 393
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+156], 0
	xor	ecx, ecx
	jne	SHORT $LN3@ft_glyphsl
$LN7@ft_glyphsl:
; Line 395
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_glyphslot_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_slot$ = 8						; size = 4
_ft_glyphslot_clear PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 339
	push	ebp
	mov	ebp, esp
; Line 341
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	call	_ft_glyphslot_free_bitmap
	add	esp, 4
; Line 344
	push	32					; 00000020H
	push	0
	mov	ecx, DWORD PTR _slot$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 345
	push	20					; 00000014H
	push	0
	mov	edx, DWORD PTR _slot$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 347
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 348
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+76], 0
; Line 349
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+84], 0
; Line 350
	mov	eax, DWORD PTR _slot$[ebp]
	mov	BYTE PTR [eax+94], 0
; Line 353
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+100], 0
; Line 354
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+104], 0
; Line 355
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+128], 0
; Line 356
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+132], 0
; Line 357
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+136], 0
; Line 358
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+140], 0
; Line 359
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+152], 0
; Line 360
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+72], 0
; Line 362
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 363
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+60], 0
; Line 364
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+144], 0
; Line 365
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+148], 0
; Line 366
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_glyphslot_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_internal$ = -28					; size = 4
_error$ = -20						; size = 4
_memory$ = -12						; size = 4
_clazz$ = -8						; size = 4
_driver$ = -4						; size = 4
_slot$ = 8						; size = 4
_ft_glyphslot_init PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 261
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 262
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _driver$[ebp], edx
; Line 263
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _clazz$[ebp], ecx
; Line 264
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _memory$[ebp], eax
; Line 265
	mov	DWORD PTR _error$[ebp], 0
; Line 266
	mov	DWORD PTR _internal$[ebp], 0
; Line 269
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax
; Line 271
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	40					; 00000028H
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _internal$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@ft_glyphsl
; Line 272
	jmp	SHORT $Exit$9
$LN3@ft_glyphsl:
; Line 274
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [eax+156], ecx
; Line 276
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 512				; 00000200H
	jne	SHORT $LN2@ft_glyphsl
; Line 277
	mov	edx, DWORD PTR _internal$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_FT_GlyphLoader_New
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$LN2@ft_glyphsl:
; Line 279
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $Exit$9
	mov	ecx, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $Exit$9
; Line 280
	mov	esi, esp
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	mov	eax, DWORD PTR _clazz$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$Exit$9:
; Line 283
	mov	eax, DWORD PTR _error$[ebp]
; Line 284
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@ft_glyphsl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@ft_glyphsl:
	DD	1
	DD	$LN7@ft_glyphsl
$LN7@ft_glyphsl:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@ft_glyphsl
$LN6@ft_glyphsl:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_glyphslot_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv588 = -100						; size = 4
tv557 = -96						; size = 4
tv526 = -92						; size = 4
tv495 = -88						; size = 4
tv464 = -84						; size = 4
tv433 = -80						; size = 4
tv402 = -76						; size = 4
tv371 = -72						; size = 4
tv340 = -68						; size = 4
tv309 = -64						; size = 4
tv278 = -60						; size = 4
tv247 = -56						; size = 4
tv216 = -52						; size = 4
tv185 = -48						; size = 4
tv154 = -44						; size = 4
tv91 = -40						; size = 4
_saved_d$ = -36						; size = 4
_saved_c$ = -32						; size = 4
_saved_b$ = -28						; size = 4
_saved_a$ = -24						; size = 4
_d$ = -20						; size = 4
_c$ = -16						; size = 4
_b$ = -12						; size = 4
_a$ = -8						; size = 4
_ptr$ = -4						; size = 4
_ctx$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_body	PROC
; File d:\mozilla\modules\freetype2\src\base\md5.c
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 99
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 101
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _a$[ebp], edx
; Line 102
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _b$[ebp], ecx
; Line 103
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _c$[ebp], eax
; Line 104
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _d$[ebp], edx
$LN3@body:
; Line 107
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _saved_a$[ebp], eax
; Line 108
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _saved_b$[ebp], ecx
; Line 109
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _saved_c$[ebp], edx
; Line 110
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _saved_d$[ebp], eax
; Line 113
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	DWORD PTR tv91[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [eax+edx+88], ecx
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR tv91[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+edx-680876936]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 25					; 00000019H
	or	edx, eax
	mov	DWORD PTR _a$[ebp], edx
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 114
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, 1
	imul	eax, edx, 5
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 6
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 7
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	DWORD PTR tv154[ebp], ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR tv154[ebp]
	mov	DWORD PTR [edx+ecx+88], eax
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR tv154[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+ecx-389564586]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 20					; 00000014H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 115
	mov	ecx, 1
	shl	ecx, 3
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	DWORD PTR tv185[ebp], eax
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR tv185[ebp]
	mov	DWORD PTR [ecx+eax+88], edx
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR tv185[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax+606105819]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 15					; 0000000fH
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 116
	mov	eax, 1
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	DWORD PTR tv216[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR tv216[ebp]
	mov	DWORD PTR [edx+ecx+88], eax
	mov	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR tv216[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1044525330]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 10					; 0000000aH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 117
	mov	ecx, 1
	shl	ecx, 4
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 17
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 18
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 19
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	DWORD PTR tv247[ebp], eax
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR tv247[ebp]
	mov	DWORD PTR [ecx+eax+88], edx
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv247[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-176418897]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 25					; 00000019H
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 118
	mov	eax, 1
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 21
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 22
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 23
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	DWORD PTR tv278[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR tv278[ebp]
	mov	DWORD PTR [edx+ecx+88], eax
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR tv278[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1200080426]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 20					; 00000014H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 119
	mov	ecx, 1
	imul	edx, ecx, 24
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, 1
	imul	eax, edx, 25
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 26
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 27
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	DWORD PTR tv309[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR tv309[ebp]
	mov	DWORD PTR [eax+edx+88], ecx
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR tv309[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1473231341]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 17					; 00000011H
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 15					; 0000000fH
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 120
	mov	edx, 1
	imul	eax, edx, 28
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 29
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 30
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 31
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 24					; 00000018H
	or	edx, ecx
	mov	DWORD PTR tv340[ebp], edx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR tv340[ebp]
	mov	DWORD PTR [ecx+eax+88], edx
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv340[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-45705983]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 22					; 00000016H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 10					; 0000000aH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 121
	mov	eax, 1
	shl	eax, 5
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 33
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 34
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 35
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 24					; 00000018H
	or	edx, ecx
	mov	DWORD PTR tv371[ebp], edx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR tv371[ebp]
	mov	DWORD PTR [eax+edx+88], ecx
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR tv371[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1770035416]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 25					; 00000019H
	or	edx, eax
	mov	DWORD PTR _a$[ebp], edx
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 122
	mov	edx, 1
	imul	eax, edx, 36
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 37
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 38
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 39
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 24					; 00000018H
	or	edx, ecx
	mov	DWORD PTR tv402[ebp], edx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR tv402[ebp]
	mov	DWORD PTR [ecx+eax+88], edx
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR tv402[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1958414417]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 20					; 00000014H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx
; Line 123
	mov	eax, 1
	imul	ecx, eax, 40
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 41
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 42
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 43
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	DWORD PTR tv433[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR tv433[ebp]
	mov	DWORD PTR [edx+ecx+88], eax
	mov	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR tv433[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+ecx-42063]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 17					; 00000011H
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 15					; 0000000fH
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 124
	mov	ecx, 1
	imul	edx, ecx, 44
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, 1
	imul	eax, edx, 45
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 46
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 47
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	DWORD PTR tv464[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR tv464[ebp]
	mov	DWORD PTR [eax+edx+88], ecx
	mov	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR tv464[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1990404162]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 22					; 00000016H
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 10					; 0000000aH
	or	edx, eax
	mov	DWORD PTR _b$[ebp], edx
	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 125
	mov	edx, 1
	imul	eax, edx, 48
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 49
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 50
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 51
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 24					; 00000018H
	or	edx, ecx
	mov	DWORD PTR tv495[ebp], edx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR tv495[ebp]
	mov	DWORD PTR [ecx+eax+88], edx
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv495[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1804603682]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 25					; 00000019H
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 126
	mov	eax, 1
	imul	ecx, eax, 52
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 53
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 54
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 55
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 24					; 00000018H
	or	eax, edx
	mov	DWORD PTR tv526[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR tv526[ebp]
	mov	DWORD PTR [edx+ecx+88], eax
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR tv526[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+ecx-40341101]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 20					; 00000014H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 127
	mov	ecx, 1
	imul	edx, ecx, 56
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, 1
	imul	eax, edx, 57
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 58
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 59
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	shl	eax, 24					; 00000018H
	or	ecx, eax
	mov	DWORD PTR tv557[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR tv557[ebp]
	mov	DWORD PTR [eax+edx+88], ecx
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR tv557[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1502002290]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 17					; 00000011H
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 15					; 0000000fH
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 128
	mov	edx, 1
	imul	eax, edx, 60
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 61
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 62
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 63
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 24					; 00000018H
	or	edx, ecx
	mov	DWORD PTR tv588[ebp], edx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR tv588[ebp]
	mov	DWORD PTR [ecx+eax+88], edx
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv588[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1236535329]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 22					; 00000016H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 10					; 0000000aH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 131
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [edx+ecx+88]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-165796510]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 132
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-1069501632]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 9
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 23					; 00000017H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 133
	mov	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+643717713]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 14					; 0000000eH
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 18					; 00000012H
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 134
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+edx-373897302]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 12					; 0000000cH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 135
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-701558691]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 27					; 0000001bH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 136
	mov	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+38016083]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 23					; 00000017H
	or	edx, eax
	mov	DWORD PTR _d$[ebp], edx
	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 137
	mov	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	mov	eax, 4
	imul	ecx, eax, 15
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+edx-660478335]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 14					; 0000000eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 18					; 00000012H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 138
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [edx+ecx+88]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-405537848]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 12					; 0000000cH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 139
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax+568446438]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 27					; 0000001bH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 140
	mov	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [eax+ecx-1019803690]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 23					; 00000017H
	or	edx, eax
	mov	DWORD PTR _d$[ebp], edx
	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 141
	mov	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+edx-187363961]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 14					; 0000000eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 18					; 00000012H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 142
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [edx+ecx+88]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1163531501]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 12					; 0000000cH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 143
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-1444681467]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 27					; 0000001bH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 144
	mov	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [eax+edx+88]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+ecx-51403784]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 9
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 23					; 00000017H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 145
	mov	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+1735328473]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 14					; 0000000eH
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 18					; 00000012H
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 146
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	mov	eax, 4
	imul	ecx, eax, 12
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+edx-1926607734]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 12					; 0000000cH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 149
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-378558]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 28					; 0000001cH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 150
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [eax+edx+88]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+ecx-2022574463]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 21					; 00000015H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 151
	mov	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+1839030562]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 16					; 00000010H
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 152
	mov	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	mov	eax, 4
	imul	ecx, eax, 14
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+edx-35309556]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 9
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 153
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [edx+ecx+88]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1530992060]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 28					; 0000001cH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 154
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [edx+ecx+88]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1272893353]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 21					; 00000015H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx
; Line 155
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-155497632]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 16					; 00000010H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 156
	mov	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [eax+ecx-1094730640]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 23					; 00000017H
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 9
	or	edx, eax
	mov	DWORD PTR _b$[ebp], edx
	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 157
	mov	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	mov	eax, 4
	imul	ecx, eax, 13
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+edx+681279174]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 28					; 0000001cH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 158
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-358537222]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 21					; 00000015H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 159
	mov	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [eax+ecx-722521979]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 16					; 00000010H
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 160
	mov	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	mov	eax, 4
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+edx+76029189]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 9
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 161
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-640364487]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 28					; 0000001cH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 162
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [eax+ecx-421815835]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 11					; 0000000bH
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 21					; 00000015H
	or	edx, eax
	mov	DWORD PTR _d$[ebp], edx
	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 163
	mov	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	mov	eax, 4
	imul	ecx, eax, 15
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+edx+530742520]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 164
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [edx+ecx+88]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-995338651]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 9
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 167
	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-198630844]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 26					; 0000001aH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 168
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	or	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+1126891415]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 22					; 00000016H
	or	edx, eax
	mov	DWORD PTR _d$[ebp], edx
	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 169
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	or	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	mov	eax, 4
	imul	ecx, eax, 14
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+edx-1416354905]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 17					; 00000011H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 170
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-57434055]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 21					; 00000015H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 11					; 0000000bH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 171
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	or	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+1700485571]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 26					; 0000001aH
	or	edx, eax
	mov	DWORD PTR _a$[ebp], edx
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 172
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	or	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+edx-1894986606]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 22					; 00000016H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx
; Line 173
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	or	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-1051523]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 17					; 00000011H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 174
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	or	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [eax+edx+88]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+ecx-2054922799]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 21					; 00000015H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 11					; 0000000bH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 175
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	or	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [eax+edx+88]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1873313359]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 26					; 0000001aH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 176
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	or	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [eax+ecx-30611744]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 22					; 00000016H
	or	edx, eax
	mov	DWORD PTR _d$[ebp], edx
	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 177
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	or	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	mov	eax, 4
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+edx-1560198380]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 17					; 00000011H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 178
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+edx+88]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax+1309151649]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 21					; 00000015H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 11					; 0000000bH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 179
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	or	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [eax+edx+88]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+ecx-145523070]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 26					; 0000001aH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 180
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	or	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+88]
	mov	eax, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [eax+ecx-1120210379]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 22					; 00000016H
	or	edx, eax
	mov	DWORD PTR _d$[ebp], edx
	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 181
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	or	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [ecx+eax+88]
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [eax+edx+718787259]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 15					; 0000000fH
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 17					; 00000011H
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 182
	mov	edx, DWORD PTR _a$[ebp]
	not	edx
	or	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	mov	eax, 4
	imul	ecx, eax, 9
	mov	eax, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR [eax+ecx+88]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+edx-343485551]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 21					; 00000015H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 11					; 0000000bH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 184
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _saved_a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 185
	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR _saved_b$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 186
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _saved_c$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 187
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _saved_d$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 189
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _ptr$[ebp], ecx
; Line 190
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 64					; 00000040H
	mov	DWORD PTR _size$[ebp], edx
	jne	$LN3@body
; Line 192
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 193
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 194
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 195
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 197
	mov	eax, DWORD PTR _ptr$[ebp]
; Line 198
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_body	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_available$ = -8					; size = 4
_used$ = -4						; size = 4
_result$ = 8						; size = 4
_ctx$ = 12						; size = 4
_MD5_Final PROC
; File d:\mozilla\modules\freetype2\src\base\md5.c
; Line 246
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 249
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _used$[ebp], ecx
; Line 251
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, DWORD PTR _used$[ebp]
	mov	BYTE PTR [edx+24], 128			; 00000080H
	mov	eax, DWORD PTR _used$[ebp]
	add	eax, 1
	mov	DWORD PTR _used$[ebp], eax
; Line 253
	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR _used$[ebp]
	mov	DWORD PTR _available$[ebp], ecx
; Line 255
	cmp	DWORD PTR _available$[ebp], 8
	jae	SHORT $LN1@MD5_Final
; Line 256
	mov	edx, DWORD PTR _available$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _used$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	lea	edx, DWORD PTR [ecx+eax+24]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 257
	push	64					; 00000040H
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_body
	add	esp, 12					; 0000000cH
; Line 258
	mov	DWORD PTR _used$[ebp], 0
; Line 259
	mov	DWORD PTR _available$[ebp], 64		; 00000040H
$LN1@MD5_Final:
; Line 262
	mov	edx, DWORD PTR _available$[ebp]
	sub	edx, 8
	push	edx
	push	0
	mov	eax, DWORD PTR _used$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	lea	edx, DWORD PTR [ecx+eax+24]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 264
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 3
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 265
	mov	eax, 1
	imul	ecx, eax, 56
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx+24], al
; Line 266
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 8
	mov	eax, 1
	imul	ecx, eax, 57
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [eax+ecx+24], dl
; Line 267
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 16					; 00000010H
	mov	eax, 1
	imul	ecx, eax, 58
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [eax+ecx+24], dl
; Line 268
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 24					; 00000018H
	mov	eax, 1
	imul	ecx, eax, 59
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [eax+ecx+24], dl
; Line 269
	mov	ecx, 1
	imul	edx, ecx, 60
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	cl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+edx+24], cl
; Line 270
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 8
	mov	ecx, 1
	imul	edx, ecx, 61
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [ecx+edx+24], al
; Line 271
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 16					; 00000010H
	mov	ecx, 1
	imul	edx, ecx, 62
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [ecx+edx+24], al
; Line 272
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 24					; 00000018H
	mov	ecx, 1
	imul	edx, ecx, 63
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [ecx+edx+24], al
; Line 274
	push	64					; 00000040H
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_body
	add	esp, 12					; 0000000cH
; Line 276
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	cl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax+edx], cl
; Line 277
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _result$[ebp]
	mov	BYTE PTR [edx+ecx], al
; Line 278
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _result$[ebp]
	mov	BYTE PTR [eax+edx], cl
; Line 279
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shr	edx, 24					; 00000018H
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _result$[ebp]
	mov	BYTE PTR [eax+ecx], dl
; Line 280
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	al, BYTE PTR [eax+12]
	mov	BYTE PTR [edx+ecx], al
; Line 281
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shr	edx, 8
	mov	eax, 1
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _result$[ebp]
	mov	BYTE PTR [eax+ecx], dl
; Line 282
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shr	edx, 16					; 00000010H
	mov	eax, 1
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _result$[ebp]
	mov	BYTE PTR [eax+ecx], dl
; Line 283
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shr	edx, 24					; 00000018H
	mov	eax, 1
	imul	ecx, eax, 7
	mov	eax, DWORD PTR _result$[ebp]
	mov	BYTE PTR [eax+ecx], dl
; Line 284
	mov	ecx, 1
	shl	ecx, 3
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	al, BYTE PTR [eax+16]
	mov	BYTE PTR [edx+ecx], al
; Line 285
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 8
	mov	eax, 1
	imul	ecx, eax, 9
	mov	eax, DWORD PTR _result$[ebp]
	mov	BYTE PTR [eax+ecx], dl
; Line 286
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 16					; 00000010H
	mov	eax, 1
	imul	ecx, eax, 10
	mov	eax, DWORD PTR _result$[ebp]
	mov	BYTE PTR [eax+ecx], dl
; Line 287
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 24					; 00000018H
	mov	eax, 1
	imul	ecx, eax, 11
	mov	eax, DWORD PTR _result$[ebp]
	mov	BYTE PTR [eax+ecx], dl
; Line 288
	mov	ecx, 1
	imul	edx, ecx, 12
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	cl, BYTE PTR [ecx+20]
	mov	BYTE PTR [eax+edx], cl
; Line 289
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 8
	mov	ecx, 1
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _result$[ebp]
	mov	BYTE PTR [ecx+edx], al
; Line 290
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 16					; 00000010H
	mov	ecx, 1
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _result$[ebp]
	mov	BYTE PTR [ecx+edx], al
; Line 291
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 24					; 00000018H
	mov	ecx, 1
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _result$[ebp]
	mov	BYTE PTR [ecx+edx], al
; Line 293
	push	152					; 00000098H
	push	0
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 294
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MD5_Final ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -16						; size = 4
_available$ = -12					; size = 4
_used$ = -8						; size = 4
_saved_lo$ = -4						; size = 4
_ctx$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_MD5_Update PROC
; File d:\mozilla\modules\freetype2\src\base\md5.c
; Line 212
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 216
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _saved_lo$[ebp], ecx
; Line 217
	mov	edx, DWORD PTR _saved_lo$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	and	edx, 536870911				; 1fffffffH
	mov	DWORD PTR tv67[ebp], edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR tv67[ebp]
	cmp	edx, DWORD PTR _saved_lo$[ebp]
	jae	SHORT $LN4@MD5_Update
; Line 218
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN4@MD5_Update:
; Line 219
	mov	eax, DWORD PTR _size$[ebp]
	shr	eax, 29					; 0000001dH
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 221
	mov	eax, DWORD PTR _saved_lo$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _used$[ebp], eax
; Line 223
	je	SHORT $LN3@MD5_Update
; Line 224
	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR _used$[ebp]
	mov	DWORD PTR _available$[ebp], ecx
; Line 226
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR _available$[ebp]
	jae	SHORT $LN2@MD5_Update
; Line 227
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _used$[ebp]
	mov	eax, DWORD PTR _ctx$[ebp]
	lea	ecx, DWORD PTR [eax+edx+24]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 228
	jmp	$LN5@MD5_Update
$LN2@MD5_Update:
; Line 231
	mov	edx, DWORD PTR _available$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _used$[ebp]
	mov	edx, DWORD PTR _ctx$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 232
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _available$[ebp]
	mov	DWORD PTR _data$[ebp], ecx
; Line 233
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, DWORD PTR _available$[ebp]
	mov	DWORD PTR _size$[ebp], edx
; Line 234
	push	64					; 00000040H
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_body
	add	esp, 12					; 0000000cH
$LN3@MD5_Update:
; Line 237
	cmp	DWORD PTR _size$[ebp], 64		; 00000040H
	jb	SHORT $LN1@MD5_Update
; Line 238
	mov	edx, DWORD PTR _size$[ebp]
	and	edx, -64				; ffffffc0H
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_body
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _data$[ebp], eax
; Line 239
	mov	edx, DWORD PTR _size$[ebp]
	and	edx, 63					; 0000003fH
	mov	DWORD PTR _size$[ebp], edx
$LN1@MD5_Update:
; Line 242
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN5@MD5_Update:
; Line 243
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MD5_Update ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_MD5_Init PROC
; File d:\mozilla\modules\freetype2\src\base\md5.c
; Line 201
	push	ebp
	mov	ebp, esp
; Line 202
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+8], 1732584193		; 67452301H
; Line 203
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+12], -271733879		; efcdab89H
; Line 204
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+16], -1732584194		; 98badcfeH
; Line 205
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+20], 271733878		; 10325476H
; Line 207
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 208
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 209
	pop	ebp
	ret	0
_MD5_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -4						; size = 4
_library$ = 8						; size = 4
_rule_index$ = 12					; size = 4
_ft_raccess_rule_by_darwin_vfs PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 427
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 428
	mov	eax, DWORD PTR _rule_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_raccess_get_rule_type_from_rule_index
	add	esp, 8
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 3
	jl	SHORT $LN1@ft_raccess
	cmp	DWORD PTR tv67[ebp], 4
	jle	SHORT $LN2@ft_raccess
	jmp	SHORT $LN1@ft_raccess
$LN2@ft_raccess:
; Line 432
	mov	al, 1
	jmp	SHORT $LN5@ft_raccess
$LN1@ft_raccess:
; Line 435
	xor	al, al
$LN5@ft_raccess:
; Line 437
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_raccess_rule_by_darwin_vfs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -60						; size = 4
_stream$ = -52						; size = 4
_error$ = -44						; size = 4
_args$ = -36						; size = 32
_library$ = 8						; size = 4
_base$ = 12						; size = 4
_size$ = 16						; size = 4
_face_index$ = 20					; size = 4
_driver_name$ = 24					; size = 4
_aface$ = 28						; size = 4
_open_face_from_buffer PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1355
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1358
	mov	DWORD PTR _stream$[ebp], 0
; Line 1359
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1366
	lea	edx, DWORD PTR _stream$[ebp]
	push	edx
	push	OFFSET _memory_stream_close
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_new_memory_stream
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 1367
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@open_face_
$LN9@open_face_:
; Line 1369
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _base$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN9@open_face_
; Line 1370
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN11@open_face_
$LN10@open_face_:
; Line 1373
	mov	DWORD PTR _args$[ebp], 2
; Line 1374
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _args$[ebp+16], eax
; Line 1375
	cmp	DWORD PTR _driver_name$[ebp], 0
	je	SHORT $LN6@open_face_
; Line 1377
	mov	ecx, DWORD PTR _args$[ebp]
	or	ecx, 8
	mov	DWORD PTR _args$[ebp], ecx
; Line 1378
	mov	edx, DWORD PTR _driver_name$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _args$[ebp+20], eax
$LN6@open_face_:
; Line 1391
	mov	ecx, DWORD PTR _aface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	lea	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Open_Face
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 1393
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN5@open_face_
; Line 1394
	mov	edx, DWORD PTR _aface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -1025				; fffffbffH
	mov	edx, DWORD PTR _aface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+8], ecx
; Line 1395
	jmp	SHORT $LN4@open_face_
$LN5@open_face_:
; Line 1400
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Close
	add	esp, 4
$LN3@open_face_:
; Line 1401
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _stream$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@open_face_
$LN4@open_face_:
; Line 1405
	mov	eax, DWORD PTR _error$[ebp]
$LN11@open_face_:
; Line 1406
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@open_face_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@open_face_:
	DD	2
	DD	$LN15@open_face_
$LN15@open_face_:
	DD	-36					; ffffffdcH
	DD	32					; 00000020H
	DD	$LN13@open_face_
	DD	-52					; ffffffccH
	DD	4
	DD	$LN14@open_face_
$LN14@open_face_:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN13@open_face_:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
_open_face_from_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv128 = -72						; size = 4
tv93 = -68						; size = 4
_error1$1 = -64						; size = 4
_sfnt_ps$ = -60						; size = 4
_is_sfnt_cid$ = -49					; size = 1
_pos$ = -44						; size = 4
_length$ = -36						; size = 4
_offset$ = -24						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_face_index$ = 16					; size = 4
_num_params$ = 20					; size = 4
_params$ = 24						; size = 4
_aface$ = 28						; size = 4
_open_face_PS_from_sfnt_stream PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1490
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1492
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 1496
	mov	DWORD PTR _sfnt_ps$[ebp], 0
; Line 1498
	mov	edx, DWORD PTR _num_params$[ebp]
	mov	DWORD PTR _num_params$[ebp], edx
; Line 1499
	mov	eax, DWORD PTR _params$[ebp]
	mov	DWORD PTR _params$[ebp], eax
; Line 1502
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Pos
	add	esp, 4
	mov	DWORD PTR _pos$[ebp], eax
; Line 1508
	lea	edx, DWORD PTR _is_sfnt_cid$[ebp]
	push	edx
	lea	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_ft_lookup_PS_in_sfnt_stream
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 1509
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@open_face_
; Line 1510
	jmp	$Exit$19
$LN6@open_face_:
; Line 1512
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@open_face_
; Line 1513
	jmp	$Exit$19
$LN5@open_face_:
; Line 1515
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _sfnt_ps$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@open_face_
; Line 1516
	jmp	SHORT $Exit$19
$LN4@open_face_:
; Line 1518
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfnt_ps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 1519
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@open_face_
; Line 1520
	jmp	SHORT $Exit$19
$LN3@open_face_:
; Line 1527
	movzx	eax, BYTE PTR _is_sfnt_cid$[ebp]
	test	eax, eax
	je	SHORT $LN9@open_face_
	mov	DWORD PTR tv93[ebp], OFFSET $SG9981
	jmp	SHORT $LN10@open_face_
$LN9@open_face_:
	mov	DWORD PTR tv93[ebp], OFFSET $SG9982
$LN10@open_face_:
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN11@open_face_
	mov	ecx, DWORD PTR _face_index$[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	jmp	SHORT $LN12@open_face_
$LN11@open_face_:
	mov	DWORD PTR tv128[ebp], 0
$LN12@open_face_:
	mov	edx, DWORD PTR _aface$[ebp]
	push	edx
	mov	eax, DWORD PTR tv93[ebp]
	push	eax
	mov	ecx, DWORD PTR tv128[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _sfnt_ps$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_open_face_from_buffer
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
$Exit$19:
; Line 1533
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 2
	jne	SHORT $LN2@open_face_
; Line 1535
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error1$1[ebp], eax
; Line 1536
	cmp	DWORD PTR _error1$1[ebp], 0
	je	SHORT $LN2@open_face_
; Line 1537
	mov	eax, DWORD PTR _error1$1[ebp]
	jmp	SHORT $LN7@open_face_
$LN2@open_face_:
; Line 1540
	mov	eax, DWORD PTR _error$[ebp]
$LN7@open_face_:
; Line 1542
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@open_face_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@open_face_:
	DD	4
	DD	$LN17@open_face_
$LN17@open_face_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@open_face_
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@open_face_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN15@open_face_
	DD	-49					; ffffffcfH
	DD	1
	DD	$LN16@open_face_
$LN16@open_face_:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN15@open_face_:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN14@open_face_:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN13@open_face_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_open_face_PS_from_sfnt_stream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__tmp_$1 = -32						; size = 4
_module$2 = -28						; size = 4
_cmap_info$ = -20					; size = 8
_face$ = -8						; size = 4
_service$ = -4						; size = 4
_charmap$ = 8						; size = 4
_FT_Get_CMap_Format PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3793
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3799
	cmp	DWORD PTR _charmap$[ebp], 0
	je	SHORT $LN7@FT_Get_CMa
	mov	eax, DWORD PTR _charmap$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@FT_Get_CMa
$LN7@FT_Get_CMa:
; Line 3800
	or	eax, -1
	jmp	$LN9@FT_Get_CMa
$LN8@FT_Get_CMa:
; Line 3802
	mov	ecx, DWORD PTR _charmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
$LN6@FT_Get_CMa:
; Line 3803
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _module$2[ebp], ecx
	mov	DWORD PTR __tmp_$1[ebp], 0
	mov	edx, DWORD PTR _module$2[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@FT_Get_CMa
	mov	esi, esp
	push	OFFSET $SG11519
	mov	ecx, DWORD PTR _module$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _module$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$1[ebp], eax
$LN3@FT_Get_CMa:
	mov	edx, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR _service$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN6@FT_Get_CMa
; Line 3804
	cmp	DWORD PTR _service$[ebp], 0
	jne	SHORT $LN2@FT_Get_CMa
; Line 3805
	or	eax, -1
	jmp	SHORT $LN9@FT_Get_CMa
$LN2@FT_Get_CMa:
; Line 3806
	mov	esi, esp
	lea	ecx, DWORD PTR _cmap_info$[ebp]
	push	ecx
	mov	edx, DWORD PTR _charmap$[ebp]
	push	edx
	mov	eax, DWORD PTR _service$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@FT_Get_CMa
; Line 3807
	or	eax, -1
	jmp	SHORT $LN9@FT_Get_CMa
$LN1@FT_Get_CMa:
; Line 3809
	mov	eax, DWORD PTR _cmap_info$[ebp+4]
$LN9@FT_Get_CMa:
; Line 3810
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FT_Get_CMa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@FT_Get_CMa:
	DD	1
	DD	$LN12@FT_Get_CMa
$LN12@FT_Get_CMa:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN11@FT_Get_CMa
$LN11@FT_Get_CMa:
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
_FT_Get_CMap_Format ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__tmp_$1 = -32						; size = 4
_module$2 = -28						; size = 4
_cmap_info$ = -20					; size = 8
_face$ = -8						; size = 4
_service$ = -4						; size = 4
_charmap$ = 8						; size = 4
_FT_Get_CMap_Language_ID PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3769
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3775
	cmp	DWORD PTR _charmap$[ebp], 0
	je	SHORT $LN7@FT_Get_CMa
	mov	eax, DWORD PTR _charmap$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@FT_Get_CMa
$LN7@FT_Get_CMa:
; Line 3776
	xor	eax, eax
	jmp	SHORT $LN9@FT_Get_CMa
$LN8@FT_Get_CMa:
; Line 3778
	mov	ecx, DWORD PTR _charmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
$LN6@FT_Get_CMa:
; Line 3779
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _module$2[ebp], ecx
	mov	DWORD PTR __tmp_$1[ebp], 0
	mov	edx, DWORD PTR _module$2[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@FT_Get_CMa
	mov	esi, esp
	push	OFFSET $SG11498
	mov	ecx, DWORD PTR _module$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _module$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$1[ebp], eax
$LN3@FT_Get_CMa:
	mov	edx, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR _service$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN6@FT_Get_CMa
; Line 3780
	cmp	DWORD PTR _service$[ebp], 0
	jne	SHORT $LN2@FT_Get_CMa
; Line 3781
	xor	eax, eax
	jmp	SHORT $LN9@FT_Get_CMa
$LN2@FT_Get_CMa:
; Line 3782
	mov	esi, esp
	lea	ecx, DWORD PTR _cmap_info$[ebp]
	push	ecx
	mov	edx, DWORD PTR _charmap$[ebp]
	push	edx
	mov	eax, DWORD PTR _service$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@FT_Get_CMa
; Line 3783
	xor	eax, eax
	jmp	SHORT $LN9@FT_Get_CMa
$LN1@FT_Get_CMa:
; Line 3785
	mov	eax, DWORD PTR _cmap_info$[ebp]
$LN9@FT_Get_CMa:
; Line 3786
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FT_Get_CMa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@FT_Get_CMa:
	DD	1
	DD	$LN12@FT_Get_CMa
$LN12@FT_Get_CMa:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN11@FT_Get_CMa
$LN11@FT_Get_CMa:
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
_FT_Get_CMap_Language_ID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__tmp_$1 = -24						; size = 4
_module$2 = -20						; size = 4
_offset$ = -12						; size = 4
_service$ = -4						; size = 4
_face$ = 8						; size = 4
_table_index$ = 12					; size = 4
_tag$ = 16						; size = 4
_length$ = 20						; size = 4
_FT_Sfnt_Table_Info PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3747
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3754
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN6@FT_Sfnt_Ta
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	jne	SHORT $LN5@FT_Sfnt_Ta
$LN6@FT_Sfnt_Ta:
; Line 3755
	push	OFFSET $SG11467
	push	3755					; 00000eabH
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN8@FT_Sfnt_Ta
$LN5@FT_Sfnt_Ta:
; Line 3757
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _module$2[ebp], eax
	mov	DWORD PTR __tmp_$1[ebp], 0
	mov	ecx, DWORD PTR _module$2[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN2@FT_Sfnt_Ta
	mov	esi, esp
	push	OFFSET $SG11477
	mov	eax, DWORD PTR _module$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _module$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$1[ebp], eax
$LN2@FT_Sfnt_Ta:
	mov	ecx, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR _service$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN5@FT_Sfnt_Ta
; Line 3758
	cmp	DWORD PTR _service$[ebp], 0
	jne	SHORT $LN1@FT_Sfnt_Ta
; Line 3759
	push	OFFSET $SG11480
	push	3759					; 00000eafH
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	jmp	SHORT $LN8@FT_Sfnt_Ta
$LN1@FT_Sfnt_Ta:
; Line 3761
	mov	esi, esp
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _table_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _service$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@FT_Sfnt_Ta:
; Line 3762
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@FT_Sfnt_Ta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@FT_Sfnt_Ta:
	DD	1
	DD	$LN11@FT_Sfnt_Ta
$LN11@FT_Sfnt_Ta:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN10@FT_Sfnt_Ta
$LN10@FT_Sfnt_Ta:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_FT_Sfnt_Table_Info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__tmp_$1 = -12						; size = 4
_module$2 = -8						; size = 4
_service$ = -4						; size = 4
_face$ = 8						; size = 4
_tag$ = 12						; size = 4
_offset$ = 16						; size = 4
_buffer$ = 20						; size = 4
_length$ = 24						; size = 4
_FT_Load_Sfnt_Table PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3725
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3729
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN6@FT_Load_Sf
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	jne	SHORT $LN5@FT_Load_Sf
$LN6@FT_Load_Sf:
; Line 3730
	push	OFFSET $SG11440
	push	3730					; 00000e92H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN8@FT_Load_Sf
$LN5@FT_Load_Sf:
; Line 3732
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _module$2[ebp], eax
	mov	DWORD PTR __tmp_$1[ebp], 0
	mov	ecx, DWORD PTR _module$2[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN2@FT_Load_Sf
	mov	esi, esp
	push	OFFSET $SG11450
	mov	eax, DWORD PTR _module$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _module$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$1[ebp], eax
$LN2@FT_Load_Sf:
	mov	ecx, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR _service$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN5@FT_Load_Sf
; Line 3733
	cmp	DWORD PTR _service$[ebp], 0
	jne	SHORT $LN1@FT_Load_Sf
; Line 3734
	push	OFFSET $SG11453
	push	3734					; 00000e96H
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	jmp	SHORT $LN8@FT_Load_Sf
$LN1@FT_Load_Sf:
; Line 3736
	mov	esi, esp
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _service$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@FT_Load_Sf:
; Line 3737
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Load_Sfnt_Table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__tmp_$1 = -16						; size = 4
_module$2 = -12						; size = 4
_service$ = -8						; size = 4
_table$ = -4						; size = 4
_face$ = 8						; size = 4
_tag$ = 12						; size = 4
_FT_Get_Sfnt_Table PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3701
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3702
	mov	DWORD PTR _table$[ebp], 0
; Line 3706
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN6@FT_Get_Sfn
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	je	SHORT $LN6@FT_Get_Sfn
$LN5@FT_Get_Sfn:
; Line 3708
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _module$2[ebp], eax
	mov	DWORD PTR __tmp_$1[ebp], 0
	mov	ecx, DWORD PTR _module$2[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN2@FT_Get_Sfn
	mov	esi, esp
	push	OFFSET $SG11423
	mov	eax, DWORD PTR _module$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _module$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$1[ebp], eax
$LN2@FT_Get_Sfn:
	mov	ecx, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR _service$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN5@FT_Get_Sfn
; Line 3709
	cmp	DWORD PTR _service$[ebp], 0
	je	SHORT $LN6@FT_Get_Sfn
; Line 3710
	mov	esi, esp
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _service$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _table$[ebp], eax
$LN6@FT_Get_Sfn:
; Line 3713
	mov	eax, DWORD PTR _table$[ebp]
; Line 3714
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Sfnt_Table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv263 = -36						; size = 4
tv79 = -32						; size = 4
_len$1 = -28						; size = 4
_p$2 = -24						; size = 4
_sign_shift$3 = -20					; size = 4
_value$4 = -16						; size = 4
_cursor$ = -12						; size = 4
_frame_accessed$ = -5					; size = 1
_error$ = -4						; size = 4
_stream$ = 8						; size = 4
_fields$ = 12						; size = 4
_structure$ = 16					; size = 4
_FT_Stream_ReadFields PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 725
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 727
	mov	BYTE PTR _frame_accessed$[ebp], 0
; Line 731
	cmp	DWORD PTR _fields$[ebp], 0
	jne	SHORT $LN28@FT_Stream_
; Line 732
	push	OFFSET $SG13562
	push	732					; 000002dcH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN29@FT_Stream_
$LN28@FT_Stream_:
; Line 734
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN27@FT_Stream_
; Line 735
	push	OFFSET $SG13564
	push	735					; 000002dfH
	push	40					; 00000028H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 40					; 00000028H
	jmp	$LN29@FT_Stream_
$LN27@FT_Stream_:
; Line 737
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _cursor$[ebp], ecx
; Line 739
	mov	DWORD PTR _error$[ebp], 0
$LN26@FT_Stream_:
; Line 747
	mov	edx, DWORD PTR _fields$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, 4
	mov	DWORD PTR tv79[ebp], ecx
	cmp	DWORD PTR tv79[ebp], 21			; 00000015H
	ja	$LN9@FT_Stream_
	mov	edx, DWORD PTR tv79[ebp]
	movzx	eax, BYTE PTR $LN31@FT_Stream_[edx]
	jmp	DWORD PTR $LN32@FT_Stream_[eax*4]
$LN21@FT_Stream_:
; Line 750
	mov	ecx, DWORD PTR _fields$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 751
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@FT_Stream_
; Line 752
	jmp	$Exit$33
$LN20@FT_Stream_:
; Line 754
	mov	BYTE PTR _frame_accessed$[ebp], 1
; Line 755
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _cursor$[ebp], edx
; Line 756
	mov	eax, DWORD PTR _fields$[ebp]
	add	eax, 4
	mov	DWORD PTR _fields$[ebp], eax
; Line 757
	jmp	$LN25@FT_Stream_
$LN19@FT_Stream_:
; Line 762
	mov	ecx, DWORD PTR _fields$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	DWORD PTR _len$1[ebp], edx
; Line 765
	mov	eax, DWORD PTR _cursor$[ebp]
	add	eax, DWORD PTR _len$1[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	cmp	eax, DWORD PTR [ecx+36]
	jbe	SHORT $LN18@FT_Stream_
; Line 767
	push	OFFSET $SG13581
	push	767					; 000002ffH
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	DWORD PTR _error$[ebp], eax
; Line 768
	jmp	$Exit$33
$LN18@FT_Stream_:
; Line 771
	mov	edx, DWORD PTR _fields$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 24					; 00000018H
	jne	SHORT $LN17@FT_Stream_
; Line 773
	mov	ecx, DWORD PTR _fields$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	add	edx, DWORD PTR _structure$[ebp]
	mov	DWORD PTR _p$2[ebp], edx
; Line 774
	mov	eax, DWORD PTR _len$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _cursor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$2[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN17@FT_Stream_:
; Line 776
	mov	eax, DWORD PTR _cursor$[ebp]
	add	eax, DWORD PTR _len$1[ebp]
	mov	DWORD PTR _cursor$[ebp], eax
; Line 777
	mov	ecx, DWORD PTR _fields$[ebp]
	add	ecx, 4
	mov	DWORD PTR _fields$[ebp], ecx
; Line 778
	jmp	$LN25@FT_Stream_
$LN16@FT_Stream_:
; Line 783
	mov	edx, DWORD PTR _cursor$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _value$4[ebp], eax
	mov	ecx, DWORD PTR _cursor$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cursor$[ebp], ecx
; Line 784
	mov	DWORD PTR _sign_shift$3[ebp], 24	; 00000018H
; Line 785
	jmp	$LN22@FT_Stream_
$LN15@FT_Stream_:
; Line 789
	mov	edx, DWORD PTR _cursor$[ebp]
	add	edx, 2
	mov	DWORD PTR _cursor$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cursor$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cursor$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	movzx	edx, ax
	mov	DWORD PTR _value$4[ebp], edx
; Line 790
	mov	DWORD PTR _sign_shift$3[ebp], 16	; 00000010H
; Line 791
	jmp	$LN22@FT_Stream_
$LN14@FT_Stream_:
; Line 795
	mov	eax, DWORD PTR _cursor$[ebp]
	add	eax, 2
	mov	DWORD PTR _cursor$[ebp], eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cursor$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _cursor$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-2]
	or	eax, edx
	movzx	eax, ax
	mov	DWORD PTR _value$4[ebp], eax
; Line 796
	mov	DWORD PTR _sign_shift$3[ebp], 16	; 00000010H
; Line 797
	jmp	$LN22@FT_Stream_
$LN13@FT_Stream_:
; Line 801
	mov	ecx, DWORD PTR _cursor$[ebp]
	add	ecx, 4
	mov	DWORD PTR _cursor$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cursor$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _cursor$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _cursor$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _cursor$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _value$4[ebp], edx
; Line 802
	mov	DWORD PTR _sign_shift$3[ebp], 0
; Line 803
	jmp	$LN22@FT_Stream_
$LN12@FT_Stream_:
; Line 807
	mov	edx, DWORD PTR _cursor$[ebp]
	add	edx, 4
	mov	DWORD PTR _cursor$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cursor$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-4]
	shl	eax, 24					; 00000018H
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cursor$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-4]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _cursor$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	shl	edx, 8
	or	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _cursor$[ebp]
	movzx	edx, BYTE PTR [ecx+edx-4]
	or	eax, edx
	mov	DWORD PTR _value$4[ebp], eax
; Line 808
	mov	DWORD PTR _sign_shift$3[ebp], 0
; Line 809
	jmp	$LN22@FT_Stream_
$LN11@FT_Stream_:
; Line 813
	mov	eax, DWORD PTR _cursor$[ebp]
	add	eax, 3
	mov	DWORD PTR _cursor$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cursor$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _cursor$[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _cursor$[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	DWORD PTR _value$4[ebp], ecx
; Line 814
	mov	DWORD PTR _sign_shift$3[ebp], 8
; Line 815
	jmp	SHORT $LN22@FT_Stream_
$LN10@FT_Stream_:
; Line 819
	mov	ecx, DWORD PTR _cursor$[ebp]
	add	ecx, 3
	mov	DWORD PTR _cursor$[ebp], ecx
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _cursor$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _cursor$[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	imul	edx, eax, 0
	mov	eax, DWORD PTR _cursor$[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	or	ecx, edx
	mov	DWORD PTR _value$4[ebp], ecx
; Line 820
	mov	DWORD PTR _sign_shift$3[ebp], 8
; Line 821
	jmp	SHORT $LN22@FT_Stream_
$LN9@FT_Stream_:
; Line 825
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _cursor$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 826
	jmp	$Exit$33
$LN22@FT_Stream_:
; Line 830
	mov	edx, DWORD PTR _fields$[ebp]
	movzx	eax, BYTE PTR [edx]
	and	eax, 1
	je	SHORT $LN8@FT_Stream_
; Line 831
	mov	edx, DWORD PTR _value$4[ebp]
	mov	ecx, DWORD PTR _sign_shift$3[ebp]
	shl	edx, cl
	mov	ecx, DWORD PTR _sign_shift$3[ebp]
	sar	edx, cl
	mov	DWORD PTR _value$4[ebp], edx
$LN8@FT_Stream_:
; Line 835
	mov	eax, DWORD PTR _fields$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, DWORD PTR _structure$[ebp]
	mov	DWORD PTR _p$2[ebp], ecx
; Line 836
	mov	edx, DWORD PTR _fields$[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv263[ebp], al
	cmp	BYTE PTR tv263[ebp], 1
	je	SHORT $LN5@FT_Stream_
	cmp	BYTE PTR tv263[ebp], 2
	je	SHORT $LN4@FT_Stream_
	cmp	BYTE PTR tv263[ebp], 4
	je	SHORT $LN3@FT_Stream_
	jmp	SHORT $LN2@FT_Stream_
$LN5@FT_Stream_:
; Line 839
	mov	ecx, DWORD PTR _p$2[ebp]
	mov	dl, BYTE PTR _value$4[ebp]
	mov	BYTE PTR [ecx], dl
; Line 840
	jmp	SHORT $LN6@FT_Stream_
$LN4@FT_Stream_:
; Line 843
	mov	eax, DWORD PTR _p$2[ebp]
	mov	cx, WORD PTR _value$4[ebp]
	mov	WORD PTR [eax], cx
; Line 844
	jmp	SHORT $LN6@FT_Stream_
$LN3@FT_Stream_:
; Line 847
	mov	edx, DWORD PTR _p$2[ebp]
	mov	eax, DWORD PTR _value$4[ebp]
	mov	DWORD PTR [edx], eax
; Line 848
	jmp	SHORT $LN6@FT_Stream_
$LN2@FT_Stream_:
; Line 851
	mov	ecx, DWORD PTR _p$2[ebp]
	mov	edx, DWORD PTR _value$4[ebp]
	mov	DWORD PTR [ecx], edx
$LN6@FT_Stream_:
; Line 855
	mov	eax, DWORD PTR _fields$[ebp]
	add	eax, 4
	mov	DWORD PTR _fields$[ebp], eax
$LN25@FT_Stream_:
; Line 857
	mov	ecx, 1
	test	ecx, ecx
	jne	$LN26@FT_Stream_
$Exit$33:
; Line 861
	movzx	edx, BYTE PTR _frame_accessed$[ebp]
	test	edx, edx
	je	SHORT $LN1@FT_Stream_
; Line 862
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
$LN1@FT_Stream_:
; Line 864
	mov	eax, DWORD PTR _error$[ebp]
$LN29@FT_Stream_:
; Line 865
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN32@FT_Stream_:
	DD	$LN21@FT_Stream_
	DD	$LN16@FT_Stream_
	DD	$LN15@FT_Stream_
	DD	$LN14@FT_Stream_
	DD	$LN13@FT_Stream_
	DD	$LN12@FT_Stream_
	DD	$LN11@FT_Stream_
	DD	$LN10@FT_Stream_
	DD	$LN19@FT_Stream_
	DD	$LN9@FT_Stream_
$LN31@FT_Stream_:
	DB	0
	DB	9
	DB	9
	DB	9
	DB	1
	DB	1
	DB	9
	DB	9
	DB	2
	DB	2
	DB	3
	DB	3
	DB	4
	DB	4
	DB	5
	DB	5
	DB	6
	DB	6
	DB	7
	DB	7
	DB	8
	DB	8
_FT_Stream_ReadFields ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -20						; size = 4
_p$ = -16						; size = 4
_reads$ = -8						; size = 4
_stream$ = 8						; size = 4
_error$ = 12						; size = 4
_FT_Stream_ReadULongLE PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 677
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 679
	mov	DWORD PTR _p$[ebp], 0
; Line 680
	mov	DWORD PTR _result$[ebp], 0
$LN10@FT_Stream_:
; Line 683
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN9@FT_Stream_
	push	OFFSET $SG13530
	push	683					; 000002abH
	push	OFFSET $SG13531
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@FT_Stream_:
	xor	eax, eax
	jne	SHORT $LN10@FT_Stream_
; Line 685
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 687
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 3
	mov	ecx, DWORD PTR _stream$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	$LN6@FT_Stream_
; Line 689
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN5@FT_Stream_
; Line 691
	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _reads$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 4
	je	SHORT $LN4@FT_Stream_
; Line 692
	jmp	$Fail$16
$LN4@FT_Stream_:
; Line 694
	lea	eax, DWORD PTR _reads$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 696
	jmp	SHORT $LN3@FT_Stream_
$LN5@FT_Stream_:
; Line 698
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _stream$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _p$[ebp], edx
$LN3@FT_Stream_:
; Line 701
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@FT_Stream_
; Line 702
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _result$[ebp], edx
$LN2@FT_Stream_:
; Line 704
	jmp	SHORT $LN1@FT_Stream_
$LN6@FT_Stream_:
; Line 705
	jmp	SHORT $Fail$16
$LN1@FT_Stream_:
; Line 707
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 709
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN11@FT_Stream_
$Fail$16:
; Line 712
	push	OFFSET $SG13549
	push	712					; 000002c8H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
; Line 715
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET $SG13550
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 717
	xor	eax, eax
$LN11@FT_Stream_:
; Line 718
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@FT_Stream_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@FT_Stream_:
	DD	1
	DD	$LN14@FT_Stream_
$LN14@FT_Stream_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@FT_Stream_
$LN13@FT_Stream_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_FT_Stream_ReadULongLE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -20						; size = 2
_p$ = -16						; size = 4
_reads$ = -8						; size = 2
_stream$ = 8						; size = 4
_error$ = 12						; size = 4
_FT_Stream_ReadUShortLE PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 536
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 538
	mov	DWORD PTR _p$[ebp], 0
; Line 539
	xor	eax, eax
	mov	WORD PTR _result$[ebp], ax
$LN10@FT_Stream_:
; Line 542
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN9@FT_Stream_
	push	OFFSET $SG13437
	push	542					; 0000021eH
	push	OFFSET $SG13438
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@FT_Stream_:
	xor	ecx, ecx
	jne	SHORT $LN10@FT_Stream_
; Line 544
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], 0
; Line 546
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	jae	$LN6@FT_Stream_
; Line 548
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN5@FT_Stream_
; Line 550
	mov	esi, esp
	push	2
	lea	ecx, DWORD PTR _reads$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	SHORT $LN4@FT_Stream_
; Line 551
	jmp	SHORT $Fail$16
$LN4@FT_Stream_:
; Line 553
	lea	ecx, DWORD PTR _reads$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 555
	jmp	SHORT $LN3@FT_Stream_
$LN5@FT_Stream_:
; Line 557
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _p$[ebp], eax
$LN3@FT_Stream_:
; Line 560
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@FT_Stream_
; Line 561
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-2]
	or	edx, ecx
	mov	WORD PTR _result$[ebp], dx
$LN2@FT_Stream_:
; Line 563
	jmp	SHORT $LN1@FT_Stream_
$LN6@FT_Stream_:
; Line 564
	jmp	SHORT $Fail$16
$LN1@FT_Stream_:
; Line 566
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 2
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 568
	mov	ax, WORD PTR _result$[ebp]
	jmp	SHORT $LN11@FT_Stream_
$Fail$16:
; Line 571
	push	OFFSET $SG13452
	push	571					; 0000023bH
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
; Line 574
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET $SG13453
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 576
	xor	eax, eax
$LN11@FT_Stream_:
; Line 577
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@FT_Stream_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@FT_Stream_:
	DD	1
	DD	$LN14@FT_Stream_
$LN14@FT_Stream_:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN13@FT_Stream_
$LN13@FT_Stream_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_FT_Stream_ReadUShortLE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -20						; size = 4
_p$ = -16						; size = 4
_reads$ = -8						; size = 4
_stream$ = 8						; size = 4
_error$ = 12						; size = 4
_FT_Stream_ReadULong PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 632
	mov	DWORD PTR _p$[ebp], 0
; Line 633
	mov	DWORD PTR _result$[ebp], 0
$LN10@FT_Stream_:
; Line 636
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN9@FT_Stream_
	push	OFFSET $SG13497
	push	636					; 0000027cH
	push	OFFSET $SG13498
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@FT_Stream_:
	xor	eax, eax
	jne	SHORT $LN10@FT_Stream_
; Line 638
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 640
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 3
	mov	ecx, DWORD PTR _stream$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	$LN6@FT_Stream_
; Line 642
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN5@FT_Stream_
; Line 644
	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _reads$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 4
	je	SHORT $LN4@FT_Stream_
; Line 645
	jmp	$Fail$16
$LN4@FT_Stream_:
; Line 647
	lea	eax, DWORD PTR _reads$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 649
	jmp	SHORT $LN3@FT_Stream_
$LN5@FT_Stream_:
; Line 651
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _stream$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _p$[ebp], edx
$LN3@FT_Stream_:
; Line 654
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@FT_Stream_
; Line 655
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-4]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-4]
	or	edx, ecx
	mov	DWORD PTR _result$[ebp], edx
$LN2@FT_Stream_:
; Line 657
	jmp	SHORT $LN1@FT_Stream_
$LN6@FT_Stream_:
; Line 658
	jmp	SHORT $Fail$16
$LN1@FT_Stream_:
; Line 660
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 662
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN11@FT_Stream_
$Fail$16:
; Line 665
	push	OFFSET $SG13516
	push	665					; 00000299H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
; Line 668
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET $SG13517
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 670
	xor	eax, eax
$LN11@FT_Stream_:
; Line 671
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@FT_Stream_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@FT_Stream_:
	DD	1
	DD	$LN14@FT_Stream_
$LN14@FT_Stream_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@FT_Stream_
$LN13@FT_Stream_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_FT_Stream_ReadULong ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -20						; size = 4
_p$ = -16						; size = 4
_reads$ = -8						; size = 3
_stream$ = 8						; size = 4
_error$ = 12						; size = 4
_FT_Stream_ReadUOffset PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 583
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 585
	mov	DWORD PTR _p$[ebp], 0
; Line 586
	mov	DWORD PTR _result$[ebp], 0
$LN10@FT_Stream_:
; Line 589
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN9@FT_Stream_
	push	OFFSET $SG13466
	push	589					; 0000024dH
	push	OFFSET $SG13467
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@FT_Stream_:
	xor	eax, eax
	jne	SHORT $LN10@FT_Stream_
; Line 591
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 593
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 2
	mov	ecx, DWORD PTR _stream$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	$LN6@FT_Stream_
; Line 595
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN5@FT_Stream_
; Line 597
	mov	esi, esp
	push	3
	lea	eax, DWORD PTR _reads$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 3
	je	SHORT $LN4@FT_Stream_
; Line 598
	jmp	SHORT $Fail$16
$LN4@FT_Stream_:
; Line 600
	lea	eax, DWORD PTR _reads$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 602
	jmp	SHORT $LN3@FT_Stream_
$LN5@FT_Stream_:
; Line 604
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _stream$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _p$[ebp], edx
$LN3@FT_Stream_:
; Line 607
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@FT_Stream_
; Line 608
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-3]
	shl	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-3]
	shl	eax, 8
	or	edx, eax
	mov	ecx, 1
	shl	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx-3]
	or	edx, ecx
	mov	DWORD PTR _result$[ebp], edx
$LN2@FT_Stream_:
; Line 610
	jmp	SHORT $LN1@FT_Stream_
$LN6@FT_Stream_:
; Line 611
	jmp	SHORT $Fail$16
$LN1@FT_Stream_:
; Line 613
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 3
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 615
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN11@FT_Stream_
$Fail$16:
; Line 618
	push	OFFSET $SG13483
	push	618					; 0000026aH
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
; Line 621
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET $SG13484
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 623
	xor	eax, eax
$LN11@FT_Stream_:
; Line 624
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@FT_Stream_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@FT_Stream_:
	DD	1
	DD	$LN14@FT_Stream_
$LN14@FT_Stream_:
	DD	-8					; fffffff8H
	DD	3
	DD	$LN13@FT_Stream_
$LN13@FT_Stream_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_FT_Stream_ReadUOffset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -20						; size = 2
_p$ = -16						; size = 4
_reads$ = -8						; size = 2
_stream$ = 8						; size = 4
_error$ = 12						; size = 4
_FT_Stream_ReadUShort PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 489
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 491
	mov	DWORD PTR _p$[ebp], 0
; Line 492
	xor	eax, eax
	mov	WORD PTR _result$[ebp], ax
$LN10@FT_Stream_:
; Line 495
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN9@FT_Stream_
	push	OFFSET $SG13408
	push	495					; 000001efH
	push	OFFSET $SG13409
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@FT_Stream_:
	xor	ecx, ecx
	jne	SHORT $LN10@FT_Stream_
; Line 497
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], 0
; Line 499
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	jae	$LN6@FT_Stream_
; Line 501
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN5@FT_Stream_
; Line 503
	mov	esi, esp
	push	2
	lea	ecx, DWORD PTR _reads$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	SHORT $LN4@FT_Stream_
; Line 504
	jmp	SHORT $Fail$16
$LN4@FT_Stream_:
; Line 506
	lea	ecx, DWORD PTR _reads$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 508
	jmp	SHORT $LN3@FT_Stream_
$LN5@FT_Stream_:
; Line 510
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _p$[ebp], eax
$LN3@FT_Stream_:
; Line 513
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@FT_Stream_
; Line 514
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx-2]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx-2]
	or	eax, ecx
	mov	WORD PTR _result$[ebp], ax
$LN2@FT_Stream_:
; Line 516
	jmp	SHORT $LN1@FT_Stream_
$LN6@FT_Stream_:
; Line 517
	jmp	SHORT $Fail$16
$LN1@FT_Stream_:
; Line 519
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 2
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 521
	mov	ax, WORD PTR _result$[ebp]
	jmp	SHORT $LN11@FT_Stream_
$Fail$16:
; Line 524
	push	OFFSET $SG13423
	push	524					; 0000020cH
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
; Line 527
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET $SG13424
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 529
	xor	eax, eax
$LN11@FT_Stream_:
; Line 530
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@FT_Stream_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@FT_Stream_:
	DD	1
	DD	$LN14@FT_Stream_
$LN14@FT_Stream_:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN13@FT_Stream_
$LN13@FT_Stream_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_FT_Stream_ReadUShort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -5						; size = 1
_stream$ = 8						; size = 4
_error$ = 12						; size = 4
_FT_Stream_ReadChar PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 452
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 453
	mov	BYTE PTR _result$[ebp], 0
$LN9@FT_Stream_:
; Line 456
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN8@FT_Stream_
	push	OFFSET $SG13386
	push	456					; 000001c8H
	push	OFFSET $SG13387
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN8@FT_Stream_:
	xor	eax, eax
	jne	SHORT $LN9@FT_Stream_
; Line 458
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 460
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN5@FT_Stream_
; Line 462
	mov	esi, esp
	push	1
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	je	SHORT $LN4@FT_Stream_
; Line 463
	jmp	SHORT $Fail$15
$LN4@FT_Stream_:
; Line 465
	jmp	SHORT $LN3@FT_Stream_
$LN5@FT_Stream_:
; Line 467
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN2@FT_Stream_
; Line 468
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	cl, BYTE PTR [eax+ecx]
	mov	BYTE PTR _result$[ebp], cl
; Line 469
	jmp	SHORT $LN3@FT_Stream_
$LN2@FT_Stream_:
; Line 470
	jmp	SHORT $Fail$15
$LN3@FT_Stream_:
; Line 472
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 474
	mov	al, BYTE PTR _result$[ebp]
	jmp	SHORT $LN10@FT_Stream_
$Fail$15:
; Line 477
	push	OFFSET $SG13394
	push	477					; 000001ddH
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
; Line 480
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET $SG13395
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 482
	xor	al, al
$LN10@FT_Stream_:
; Line 483
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@FT_Stream_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@FT_Stream_:
	DD	1
	DD	$LN13@FT_Stream_
$LN13@FT_Stream_:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN12@FT_Stream_
$LN12@FT_Stream_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_FT_Stream_ReadChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -8						; size = 4
_p$ = -4						; size = 4
_stream$ = 8						; size = 4
_FT_Stream_GetULongLE PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 433
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN6@FT_Stream_:
; Line 438
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN2@FT_Stream_
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@FT_Stream_
$LN2@FT_Stream_:
	push	OFFSET $SG13363
	push	438					; 000001b6H
	push	OFFSET $SG13364
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN5@FT_Stream_:
	xor	ecx, ecx
	jne	SHORT $LN6@FT_Stream_
; Line 440
	mov	DWORD PTR _result$[ebp], 0
; Line 441
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _p$[ebp], eax
; Line 442
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	ecx, DWORD PTR [edx+36]
	jae	SHORT $LN1@FT_Stream_
; Line 443
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _result$[ebp], ecx
$LN1@FT_Stream_:
; Line 444
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 445
	mov	eax, DWORD PTR _result$[ebp]
; Line 446
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_GetULongLE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -8						; size = 2
_p$ = -4						; size = 4
_stream$ = 8						; size = 4
_FT_Stream_GetUShortLE PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 378
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN6@FT_Stream_:
; Line 383
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN2@FT_Stream_
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@FT_Stream_
$LN2@FT_Stream_:
	push	OFFSET $SG13300
	push	383					; 0000017fH
	push	OFFSET $SG13301
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN5@FT_Stream_:
	xor	ecx, ecx
	jne	SHORT $LN6@FT_Stream_
; Line 385
	xor	edx, edx
	mov	WORD PTR _result$[ebp], dx
; Line 386
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _p$[ebp], ecx
; Line 387
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	edx, DWORD PTR [eax+36]
	jae	SHORT $LN1@FT_Stream_
; Line 388
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-2]
	shl	ecx, 8
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-2]
	or	ecx, eax
	mov	WORD PTR _result$[ebp], cx
$LN1@FT_Stream_:
; Line 389
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 391
	mov	ax, WORD PTR _result$[ebp]
; Line 392
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_GetUShortLE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -8						; size = 4
_p$ = -4						; size = 4
_stream$ = 8						; size = 4
_FT_Stream_GetULong PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 415
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN6@FT_Stream_:
; Line 420
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN2@FT_Stream_
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@FT_Stream_
$LN2@FT_Stream_:
	push	OFFSET $SG13340
	push	420					; 000001a4H
	push	OFFSET $SG13341
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN5@FT_Stream_:
	xor	ecx, ecx
	jne	SHORT $LN6@FT_Stream_
; Line 422
	mov	DWORD PTR _result$[ebp], 0
; Line 423
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _p$[ebp], eax
; Line 424
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 3
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	ecx, DWORD PTR [edx+36]
	jae	SHORT $LN1@FT_Stream_
; Line 425
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-4]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-4]
	or	ecx, eax
	mov	DWORD PTR _result$[ebp], ecx
$LN1@FT_Stream_:
; Line 426
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 427
	mov	eax, DWORD PTR _result$[ebp]
; Line 428
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_GetULong ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -8						; size = 4
_p$ = -4						; size = 4
_stream$ = 8						; size = 4
_FT_Stream_GetUOffset PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 397
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN6@FT_Stream_:
; Line 402
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN2@FT_Stream_
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@FT_Stream_
$LN2@FT_Stream_:
	push	OFFSET $SG13319
	push	402					; 00000192H
	push	OFFSET $SG13320
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN5@FT_Stream_:
	xor	ecx, ecx
	jne	SHORT $LN6@FT_Stream_
; Line 404
	mov	DWORD PTR _result$[ebp], 0
; Line 405
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _p$[ebp], eax
; Line 406
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	ecx, DWORD PTR [edx+36]
	jae	SHORT $LN1@FT_Stream_
; Line 407
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx-3]
	shl	ecx, 16					; 00000010H
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx-3]
	shl	edx, 8
	or	ecx, edx
	mov	eax, 1
	shl	eax, 1
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+eax-3]
	or	ecx, eax
	mov	DWORD PTR _result$[ebp], ecx
$LN1@FT_Stream_:
; Line 408
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 409
	mov	eax, DWORD PTR _result$[ebp]
; Line 410
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_GetUOffset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -8						; size = 2
_p$ = -4						; size = 4
_stream$ = 8						; size = 4
_FT_Stream_GetUShort PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 359
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN6@FT_Stream_:
; Line 364
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN2@FT_Stream_
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@FT_Stream_
$LN2@FT_Stream_:
	push	OFFSET $SG13281
	push	364					; 0000016cH
	push	OFFSET $SG13282
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN5@FT_Stream_:
	xor	ecx, ecx
	jne	SHORT $LN6@FT_Stream_
; Line 366
	xor	edx, edx
	mov	WORD PTR _result$[ebp], dx
; Line 367
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _p$[ebp], ecx
; Line 368
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	edx, DWORD PTR [eax+36]
	jae	SHORT $LN1@FT_Stream_
; Line 369
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax-2]
	shl	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-2]
	or	edx, eax
	mov	WORD PTR _result$[ebp], dx
$LN1@FT_Stream_:
; Line 370
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 372
	mov	ax, WORD PTR _result$[ebp]
; Line 373
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_GetUShort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -1						; size = 1
_stream$ = 8						; size = 4
_FT_Stream_GetChar PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 343
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN6@FT_Stream_:
; Line 347
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN2@FT_Stream_
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@FT_Stream_
$LN2@FT_Stream_:
	push	OFFSET $SG13268
	push	347					; 0000015bH
	push	OFFSET $SG13269
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN5@FT_Stream_:
	xor	ecx, ecx
	jne	SHORT $LN6@FT_Stream_
; Line 349
	mov	BYTE PTR _result$[ebp], 0
; Line 350
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+36]
	jae	SHORT $LN1@FT_Stream_
; Line 351
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _result$[ebp], cl
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+32]
	add	eax, 1
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+32], eax
$LN1@FT_Stream_:
; Line 353
	mov	al, BYTE PTR _result$[ebp]
; Line 354
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_GetChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -4						; size = 4
_stream$ = 8						; size = 4
_pbytes$ = 12						; size = 4
_FT_Stream_ReleaseFrame PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 217
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 218
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN4@FT_Stream_
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@FT_Stream_
; Line 220
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _memory$1[ebp], edx
$LN3@FT_Stream_:
; Line 226
	mov	eax, DWORD PTR _pbytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _memory$1[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _pbytes$[ebp]
	mov	DWORD PTR [eax], 0
	xor	ecx, ecx
	jne	SHORT $LN3@FT_Stream_
$LN4@FT_Stream_:
; Line 229
	mov	edx, DWORD PTR _pbytes$[ebp]
	mov	DWORD PTR [edx], 0
; Line 230
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_ReleaseFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_stream$ = 8						; size = 4
_count$ = 12						; size = 4
_pbytes$ = 16						; size = 4
_FT_Stream_ExtractFrame PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 196
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 200
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 201
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@FT_Stream_
; Line 203
	mov	edx, DWORD PTR _pbytes$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx], ecx
; Line 206
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 207
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN1@FT_Stream_:
; Line 210
	mov	eax, DWORD PTR _error$[ebp]
; Line 211
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_ExtractFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -4						; size = 4
_stream$ = 8						; size = 4
_FT_Stream_ExitFrame PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 313
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN8@FT_Stream_:
; Line 323
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN7@FT_Stream_
	push	OFFSET $SG13251
	push	323					; 00000143H
	push	OFFSET $SG13252
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN7@FT_Stream_:
	xor	eax, eax
	jne	SHORT $LN8@FT_Stream_
; Line 325
	mov	ecx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN4@FT_Stream_
; Line 327
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _memory$1[ebp], eax
$LN3@FT_Stream_:
; Line 333
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	edx, edx
	jne	SHORT $LN3@FT_Stream_
$LN4@FT_Stream_:
; Line 336
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 337
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+36], 0
; Line 338
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_ExitFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -20						; size = 4
_read_bytes$ = -16					; size = 4
_error$ = -8						; size = 4
_stream$ = 8						; size = 4
_count$ = 12						; size = 4
_FT_Stream_EnterFrame PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 236
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 237
	mov	DWORD PTR _error$[ebp], 0
$LN15@FT_Stream_:
; Line 242
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN11@FT_Stream_
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN14@FT_Stream_
$LN11@FT_Stream_:
	push	OFFSET $SG13222
	push	242					; 000000f2H
	push	OFFSET $SG13223
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN14@FT_Stream_:
	xor	ecx, ecx
	jne	SHORT $LN15@FT_Stream_
; Line 244
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	$LN10@FT_Stream_
; Line 247
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$1[ebp], ecx
; Line 251
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jbe	SHORT $LN9@FT_Stream_
; Line 255
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	OFFSET $SG13227
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 257
	push	OFFSET $SG13228
	push	257					; 00000101H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	DWORD PTR _error$[ebp], eax
; Line 258
	jmp	$Exit$21
$LN9@FT_Stream_:
; Line 267
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	call	_ft_mem_qalloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@FT_Stream_
; Line 268
	jmp	$Exit$21
$LN8@FT_Stream_:
; Line 272
	mov	esi, esp
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _read_bytes$[ebp], eax
; Line 273
	mov	ecx, DWORD PTR _read_bytes$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	SHORT $LN7@FT_Stream_
; Line 277
	mov	edx, DWORD PTR _read_bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	OFFSET $SG13233
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN6@FT_Stream_:
; Line 279
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	edx, edx
	jne	SHORT $LN6@FT_Stream_
; Line 280
	push	OFFSET $SG13238
	push	280					; 00000118H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	DWORD PTR _error$[ebp], eax
$LN7@FT_Stream_:
; Line 282
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+32], edx
; Line 283
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 284
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _read_bytes$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 286
	jmp	$Exit$21
$LN10@FT_Stream_:
; Line 290
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN1@FT_Stream_
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR _count$[ebp]
	jae	SHORT $LN2@FT_Stream_
$LN1@FT_Stream_:
; Line 294
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG13242
	call	_FT_Message
	add	esp, 16					; 00000010H
; Line 296
	push	OFFSET $SG13243
	push	296					; 00000128H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	DWORD PTR _error$[ebp], eax
; Line 297
	jmp	SHORT $Exit$21
$LN2@FT_Stream_:
; Line 301
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 302
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 303
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+8], ecx
$Exit$21:
; Line 307
	mov	eax, DWORD PTR _error$[ebp]
; Line 308
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@FT_Stream_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@FT_Stream_:
	DD	1
	DD	$LN19@FT_Stream_
$LN19@FT_Stream_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@FT_Stream_
$LN18@FT_Stream_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_Stream_EnterFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_read_bytes$ = -4					; size = 4
_stream$ = 8						; size = 4
_buffer$ = 12						; size = 4
_count$ = 16						; size = 4
_FT_Stream_TryRead PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 168
	mov	DWORD PTR _read_bytes$[ebp], 0
; Line 171
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN4@FT_Stream_
; Line 172
	jmp	SHORT $Exit$7
$LN4@FT_Stream_:
; Line 174
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@FT_Stream_
; Line 175
	mov	esi, esp
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _read_bytes$[ebp], eax
; Line 176
	jmp	SHORT $LN2@FT_Stream_
$LN3@FT_Stream_:
; Line 178
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _read_bytes$[ebp], ecx
; Line 179
	mov	edx, DWORD PTR _read_bytes$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jbe	SHORT $LN1@FT_Stream_
; Line 180
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _read_bytes$[ebp], eax
$LN1@FT_Stream_:
; Line 182
	mov	ecx, DWORD PTR _read_bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@FT_Stream_:
; Line 185
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _read_bytes$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+8], ecx
$Exit$7:
; Line 188
	mov	eax, DWORD PTR _read_bytes$[ebp]
; Line 189
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_TryRead ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_read_bytes$ = -8					; size = 4
_error$ = -4						; size = 4
_stream$ = 8						; size = 4
_pos$ = 12						; size = 4
_buffer$ = 16						; size = 4
_count$ = 20						; size = 4
_FT_Stream_ReadAt PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 124
	mov	DWORD PTR _error$[ebp], 0
; Line 128
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN5@FT_Stream_
; Line 132
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	OFFSET $SG13168
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 134
	push	OFFSET $SG13169
	push	134					; 00000086H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	jmp	$LN6@FT_Stream_
$LN5@FT_Stream_:
; Line 137
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN4@FT_Stream_
; Line 138
	mov	esi, esp
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _read_bytes$[ebp], eax
; Line 139
	jmp	SHORT $LN3@FT_Stream_
$LN4@FT_Stream_:
; Line 141
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _read_bytes$[ebp], ecx
; Line 142
	mov	edx, DWORD PTR _read_bytes$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jbe	SHORT $LN2@FT_Stream_
; Line 143
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _read_bytes$[ebp], eax
$LN2@FT_Stream_:
; Line 145
	mov	ecx, DWORD PTR _read_bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@FT_Stream_:
; Line 148
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR _read_bytes$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 150
	mov	ecx, DWORD PTR _read_bytes$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	SHORT $LN1@FT_Stream_
; Line 154
	mov	edx, DWORD PTR _read_bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	OFFSET $SG13174
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 156
	push	OFFSET $SG13175
	push	156					; 0000009cH
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	DWORD PTR _error$[ebp], eax
$LN1@FT_Stream_:
; Line 159
	mov	eax, DWORD PTR _error$[ebp]
$LN6@FT_Stream_:
; Line 160
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_ReadAt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_buffer$ = 12						; size = 4
_count$ = 16						; size = 4
_FT_Stream_Read PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 113
	push	ebp
	mov	ebp, esp
; Line 114
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadAt
	add	esp, 16					; 00000010H
; Line 115
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Stream_Read ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_FT_Stream_Pos PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 104
	push	ebp
	mov	ebp, esp
; Line 105
	mov	eax, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 106
	pop	ebp
	ret	0
_FT_Stream_Pos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_distance$ = 12						; size = 4
_FT_Stream_Skip PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 94
	push	ebp
	mov	ebp, esp
; Line 95
	cmp	DWORD PTR _distance$[ebp], 0
	jge	SHORT $LN1@FT_Stream_
; Line 96
	push	OFFSET $SG13144
	push	96					; 00000060H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	jmp	SHORT $LN2@FT_Stream_
$LN1@FT_Stream_:
; Line 98
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _distance$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
$LN2@FT_Stream_:
; Line 99
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Stream_Skip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -4						; size = 4
_stream$ = 8						; size = 4
_pos$ = 12						; size = 4
_FT_Stream_Seek PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 60
	mov	DWORD PTR _error$[ebp], 0
; Line 63
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN5@FT_Stream_
; Line 65
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@FT_Stream_
; Line 69
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	OFFSET $SG13131
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 71
	push	OFFSET $SG13132
	push	71					; 00000047H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	DWORD PTR _error$[ebp], eax
$LN4@FT_Stream_:
; Line 72
	jmp	SHORT $LN3@FT_Stream_
$LN5@FT_Stream_:
; Line 75
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jbe	SHORT $LN3@FT_Stream_
; Line 79
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	OFFSET $SG13135
	call	_FT_Message
	add	esp, 12					; 0000000cH
; Line 81
	push	OFFSET $SG13136
	push	81					; 00000051H
	push	85					; 00000055H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 85					; 00000055H
	mov	DWORD PTR _error$[ebp], eax
$LN3@FT_Stream_:
; Line 84
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@FT_Stream_
; Line 85
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN1@FT_Stream_:
; Line 87
	mov	eax, DWORD PTR _error$[ebp]
; Line 88
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_Seek ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_FT_Stream_Close PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 50
	push	ebp
	mov	ebp, esp
	push	esi
; Line 51
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN2@FT_Stream_
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN2@FT_Stream_
; Line 52
	mov	esi, esp
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@FT_Stream_:
; Line 53
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Stream_Close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_base$ = 12						; size = 4
_size$ = 16						; size = 4
_FT_Stream_OpenMemory PROC
; File d:\mozilla\modules\freetype2\src\base\ftstream.c
; Line 38
	push	ebp
	mov	ebp, esp
; Line 39
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 40
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 41
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 42
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 43
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 44
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 45
	pop	ebp
	ret	0
_FT_Stream_OpenMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -4						; size = 4
_stream$ = 8						; size = 4
_external$ = 12						; size = 4
_FT_Stream_Free PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 222
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 223
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN6@FT_Stream_
; Line 225
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _memory$1[ebp], ecx
; Line 228
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Close
	add	esp, 4
; Line 230
	cmp	DWORD PTR _external$[ebp], 0
	jne	SHORT $LN6@FT_Stream_
$LN3@FT_Stream_:
; Line 231
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$1[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _stream$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@FT_Stream_
$LN6@FT_Stream_:
; Line 233
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Stream_Free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_args$ = 12						; size = 4
_astream$ = 16						; size = 4
_FT_Stream_New PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 158
	mov	DWORD PTR _stream$[ebp], 0
; Line 161
	mov	eax, DWORD PTR _astream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 163
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN17@FT_Stream_
; Line 164
	push	OFFSET $SG9339
	push	164					; 000000a4H
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	$LN18@FT_Stream_
$LN17@FT_Stream_:
; Line 166
	cmp	DWORD PTR _args$[ebp], 0
	jne	SHORT $LN16@FT_Stream_
; Line 167
	push	OFFSET $SG9341
	push	167					; 000000a7H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN18@FT_Stream_
$LN16@FT_Stream_:
; Line 169
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$[ebp], edx
; Line 171
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	40					; 00000028H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _stream$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@FT_Stream_
; Line 172
	jmp	$Exit$23
$LN15@FT_Stream_:
; Line 174
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 176
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	SHORT $LN14@FT_Stream_
; Line 181
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_OpenMemory
	add	esp, 12					; 0000000cH
	jmp	$LN13@FT_Stream_
$LN14@FT_Stream_:
; Line 186
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 4
	je	SHORT $LN12@FT_Stream_
; Line 189
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Open
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 190
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+16], eax
	jmp	SHORT $LN13@FT_Stream_
$LN12@FT_Stream_:
; Line 192
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 2
	je	SHORT $LN10@FT_Stream_
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN10@FT_Stream_
$LN9@FT_Stream_:
; Line 198
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _stream$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN9@FT_Stream_
; Line 199
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _stream$[ebp], edx
; Line 204
	jmp	SHORT $LN13@FT_Stream_
$LN10@FT_Stream_:
; Line 205
	push	OFFSET $SG9356
	push	205					; 000000cdH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
$LN13@FT_Stream_:
; Line 207
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@FT_Stream_
$LN4@FT_Stream_:
; Line 208
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _stream$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN4@FT_Stream_
; Line 209
	jmp	SHORT $LN1@FT_Stream_
$LN5@FT_Stream_:
; Line 210
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [eax+28], ecx
$LN1@FT_Stream_:
; Line 212
	mov	edx, DWORD PTR _astream$[ebp]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], eax
$Exit$23:
; Line 215
	mov	eax, DWORD PTR _error$[ebp]
$LN18@FT_Stream_:
; Line 216
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@FT_Stream_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@FT_Stream_:
	DD	1
	DD	$LN21@FT_Stream_
$LN21@FT_Stream_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN20@FT_Stream_
$LN20@FT_Stream_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_Stream_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ref$ = -52						; size = 4
_offsets_internal$ = -48				; size = 4
_temp$ = -44						; size = 4
_memory$ = -40						; size = 4
_rpos$ = -36						; size = 4
_tag_internal$ = -32					; size = 4
_subcnt$ = -28						; size = 4
_cnt$ = -24						; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_map_offset$ = 16					; size = 4
_rdata_pos$ = 20					; size = 4
_tag$ = 24						; size = 4
_sort_by_res_id$ = 28					; size = 1
_offsets$ = 32						; size = 4
_count$ = 36						; size = 4
_FT_Raccess_Get_DataOffsets PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 162
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 164
	mov	DWORD PTR _offsets_internal$[ebp], 0
; Line 165
	mov	DWORD PTR _ref$[ebp], 0
$LN52@FT_Raccess:
; Line 168
	mov	edx, 4
	imul	eax, edx, 14
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN51@FT_Raccess
	push	OFFSET $SG12562
	call	_FT_Message
	add	esp, 4
$LN51@FT_Raccess:
	xor	ecx, ecx
	jne	SHORT $LN52@FT_Raccess
; Line 169
	mov	edx, DWORD PTR _map_offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 170
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN48@FT_Raccess
; Line 171
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN53@FT_Raccess
$LN48@FT_Raccess:
; Line 173
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	eax, ax
	mov	DWORD PTR _cnt$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN47@FT_Raccess
; Line 174
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN53@FT_Raccess
$LN47@FT_Raccess:
; Line 175
	mov	ecx, DWORD PTR _cnt$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cnt$[ebp], ecx
; Line 177
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN46@FT_Raccess
$LN45@FT_Raccess:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN46@FT_Raccess:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cnt$[ebp]
	jge	$LN44@FT_Raccess
; Line 181
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _tag_internal$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN42@FT_Raccess
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	edx, ax
	mov	DWORD PTR _subcnt$[ebp], edx
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN42@FT_Raccess
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	edx, ax
	mov	DWORD PTR _rpos$[ebp], edx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN41@FT_Raccess
$LN42@FT_Raccess:
; Line 182
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN53@FT_Raccess
$LN41@FT_Raccess:
; Line 188
	mov	eax, 4
	imul	ecx, eax, 14
	cmp	DWORD PTR _ft_trace_levels[ecx], 2
	jl	SHORT $LN40@FT_Raccess
	mov	edx, DWORD PTR _tag_internal$[ebp]
	and	edx, 255				; 000000ffH
	movsx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _tag_internal$[ebp]
	sar	ecx, 8
	and	ecx, 255				; 000000ffH
	movsx	edx, cl
	push	edx
	mov	eax, DWORD PTR _tag_internal$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	movsx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _tag_internal$[ebp]
	sar	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	movsx	eax, dl
	push	eax
	push	OFFSET $SG12582
	call	_FT_Message
	add	esp, 20					; 00000014H
$LN40@FT_Raccess:
	xor	ecx, ecx
	jne	SHORT $LN41@FT_Raccess
$LN37@FT_Raccess:
; Line 190
	mov	edx, 4
	imul	eax, edx, 14
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN36@FT_Raccess
	mov	ecx, DWORD PTR _rpos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _subcnt$[ebp]
	push	edx
	push	OFFSET $SG12587
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN36@FT_Raccess:
	xor	eax, eax
	jne	SHORT $LN37@FT_Raccess
; Line 192
	mov	ecx, DWORD PTR _tag_internal$[ebp]
	cmp	ecx, DWORD PTR _tag$[ebp]
	jne	$LN33@FT_Raccess
; Line 194
	mov	edx, DWORD PTR _subcnt$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax], edx
; Line 195
	mov	ecx, DWORD PTR _rpos$[ebp]
	add	ecx, DWORD PTR _map_offset$[ebp]
	mov	DWORD PTR _rpos$[ebp], ecx
; Line 197
	mov	edx, DWORD PTR _rpos$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 198
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN32@FT_Raccess
; Line 199
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN53@FT_Raccess
$LN32@FT_Raccess:
; Line 201
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	push	8
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ref$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@FT_Raccess
; Line 202
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN53@FT_Raccess
$LN31@FT_Raccess:
; Line 204
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN30@FT_Raccess
$LN29@FT_Raccess:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN30@FT_Raccess:
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN28@FT_Raccess
; Line 206
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _ref$[ebp]
	mov	WORD PTR [edx+ecx*8], ax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN27@FT_Raccess
; Line 207
	jmp	$Exit$58
$LN27@FT_Raccess:
; Line 208
	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN26@FT_Raccess
; Line 209
	jmp	$Exit$58
$LN26@FT_Raccess:
; Line 210
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadULong
	add	esp, 8
	mov	DWORD PTR _temp$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN25@FT_Raccess
; Line 211
	jmp	$Exit$58
$LN25@FT_Raccess:
; Line 212
	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN24@FT_Raccess
; Line 213
	jmp	$Exit$58
$LN24@FT_Raccess:
; Line 215
	mov	ecx, DWORD PTR _temp$[ebp]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _ref$[ebp]
	mov	DWORD PTR [eax+edx*8+4], ecx
$LN23@FT_Raccess:
; Line 218
	mov	ecx, 4
	imul	edx, ecx, 14
	cmp	DWORD PTR _ft_trace_levels[edx], 3
	jl	SHORT $LN22@FT_Raccess
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _ref$[ebp]
	movzx	edx, WORD PTR [ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	push	OFFSET $SG12609
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN22@FT_Raccess:
	xor	ecx, ecx
	jne	SHORT $LN23@FT_Raccess
; Line 219
	jmp	$LN29@FT_Raccess
$LN28@FT_Raccess:
; Line 221
	movzx	edx, BYTE PTR _sort_by_res_id$[ebp]
	test	edx, edx
	je	$LN19@FT_Raccess
; Line 225
	mov	esi, esp
	push	OFFSET _ft_raccess_sort_ref_by_id
	push	8
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ref$[ebp]
	push	edx
	call	DWORD PTR __imp__qsort
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@FT_Raccess:
; Line 227
	mov	eax, 4
	imul	ecx, eax, 14
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN17@FT_Raccess
	push	OFFSET $SG12619
	call	_FT_Message
	add	esp, 4
$LN17@FT_Raccess:
	xor	edx, edx
	jne	SHORT $LN18@FT_Raccess
; Line 228
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN14@FT_Raccess
$LN13@FT_Raccess:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN14@FT_Raccess:
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN19@FT_Raccess
$LN11@FT_Raccess:
; Line 231
	mov	eax, 4
	imul	ecx, eax, 14
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN10@FT_Raccess
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+4]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _ref$[ebp]
	movzx	ecx, WORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	push	OFFSET $SG12627
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN10@FT_Raccess:
	xor	eax, eax
	jne	SHORT $LN11@FT_Raccess
; Line 232
	jmp	SHORT $LN13@FT_Raccess
$LN19@FT_Raccess:
; Line 235
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _offsets_internal$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@FT_Raccess
; Line 236
	jmp	SHORT $Exit$58
$LN7@FT_Raccess:
; Line 242
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN6@FT_Raccess
$LN5@FT_Raccess:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN6@FT_Raccess:
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN4@FT_Raccess
; Line 243
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR _rdata_pos$[ebp]
	add	ecx, DWORD PTR [eax+edx*8+4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _offsets_internal$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN5@FT_Raccess
$LN4@FT_Raccess:
; Line 245
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	edx, DWORD PTR _offsets_internal$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 246
	mov	DWORD PTR _error$[ebp], 0
$Exit$58:
; Line 249
	mov	eax, DWORD PTR _ref$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _ref$[ebp], 0
	xor	edx, edx
	jne	SHORT $Exit$58
; Line 250
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN53@FT_Raccess
$LN33@FT_Raccess:
; Line 252
	jmp	$LN45@FT_Raccess
$LN44@FT_Raccess:
; Line 254
	push	OFFSET $SG12638
	push	254					; 000000feH
	push	1
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 1
$LN53@FT_Raccess:
; Line 255
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN57@FT_Raccess
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN57@FT_Raccess:
	DD	1
	DD	$LN56@FT_Raccess
$LN56@FT_Raccess:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN55@FT_Raccess
$LN55@FT_Raccess:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_Raccess_Get_DataOffsets ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_type_list$ = -88					; size = 4
_i$ = -84						; size = 4
_allmatch$ = -80					; size = 4
_allzeros$ = -76					; size = 4
_rdata_len$ = -72					; size = 4
_map_pos$ = -68						; size = 4
_head2$ = -60						; size = 16
_head$ = -36						; size = 16
_error$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_rfork_offset$ = 16					; size = 4
_map_offset$ = 20					; size = 4
_rdata_pos$ = 24					; size = 4
_FT_Raccess_Get_HeaderInfo PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 63
	mov	eax, DWORD PTR _library$[ebp]
	mov	DWORD PTR _library$[ebp], eax
; Line 66
	mov	ecx, DWORD PTR _rfork_offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 67
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@FT_Raccess
; Line 68
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@FT_Raccess
$LN15@FT_Raccess:
; Line 70
	push	16					; 00000010H
	lea	eax, DWORD PTR _head$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 71
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@FT_Raccess
; Line 72
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@FT_Raccess
$LN14@FT_Raccess:
; Line 77
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR _head$[ebp+eax]
	shl	ecx, 24					; 00000018H
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR _head$[ebp+edx]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR _head$[ebp+edx]
	shl	eax, 8
	or	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	movzx	edx, BYTE PTR _head$[ebp+eax]
	or	ecx, edx
	add	ecx, DWORD PTR _rfork_offset$[ebp]
	mov	eax, DWORD PTR _rdata_pos$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 81
	mov	ecx, 1
	shl	ecx, 2
	movzx	edx, BYTE PTR _head$[ebp+ecx]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	imul	ecx, eax, 5
	movzx	eax, BYTE PTR _head$[ebp+ecx]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	imul	eax, ecx, 6
	movzx	ecx, BYTE PTR _head$[ebp+eax]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 7
	movzx	eax, BYTE PTR _head$[ebp+ecx]
	or	edx, eax
	add	edx, DWORD PTR _rfork_offset$[ebp]
	mov	DWORD PTR _map_pos$[ebp], edx
; Line 85
	mov	ecx, 1
	shl	ecx, 3
	movzx	edx, BYTE PTR _head$[ebp+ecx]
	shl	edx, 24					; 00000018H
	mov	eax, 1
	imul	ecx, eax, 9
	movzx	eax, BYTE PTR _head$[ebp+ecx]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, 1
	imul	eax, ecx, 10
	movzx	ecx, BYTE PTR _head$[ebp+eax]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 11
	movzx	eax, BYTE PTR _head$[ebp+ecx]
	or	edx, eax
	mov	DWORD PTR _rdata_len$[ebp], edx
; Line 89
	mov	ecx, DWORD PTR _rdata_pos$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _rdata_len$[ebp]
	cmp	edx, DWORD PTR _map_pos$[ebp]
	jne	SHORT $LN12@FT_Raccess
	mov	eax, DWORD PTR _map_pos$[ebp]
	cmp	eax, DWORD PTR _rfork_offset$[ebp]
	jne	SHORT $LN13@FT_Raccess
$LN12@FT_Raccess:
; Line 90
	push	OFFSET $SG12499
	push	90					; 0000005aH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	jmp	$LN16@FT_Raccess
$LN13@FT_Raccess:
; Line 92
	mov	ecx, DWORD PTR _map_pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 93
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@FT_Raccess
; Line 94
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@FT_Raccess
$LN11@FT_Raccess:
; Line 96
	mov	eax, 1
	imul	ecx, eax, 15
	movzx	edx, BYTE PTR _head$[ebp+ecx]
	add	edx, 1
	mov	eax, 1
	imul	ecx, eax, 15
	mov	BYTE PTR _head2$[ebp+ecx], dl
; Line 98
	push	16					; 00000010H
	lea	edx, DWORD PTR _head2$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 99
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@FT_Raccess
; Line 100
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN16@FT_Raccess
$LN10@FT_Raccess:
; Line 102
	mov	DWORD PTR _allzeros$[ebp], 1
; Line 103
	mov	DWORD PTR _allmatch$[ebp], 1
; Line 104
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@FT_Raccess
$LN8@FT_Raccess:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@FT_Raccess:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN7@FT_Raccess
; Line 106
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _head2$[ebp+edx]
	test	eax, eax
	je	SHORT $LN6@FT_Raccess
; Line 107
	mov	DWORD PTR _allzeros$[ebp], 0
$LN6@FT_Raccess:
; Line 108
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _head2$[ebp+ecx]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _head$[ebp+eax]
	cmp	edx, ecx
	je	SHORT $LN5@FT_Raccess
; Line 109
	mov	DWORD PTR _allmatch$[ebp], 0
$LN5@FT_Raccess:
; Line 110
	jmp	SHORT $LN8@FT_Raccess
$LN7@FT_Raccess:
; Line 111
	cmp	DWORD PTR _allzeros$[ebp], 0
	jne	SHORT $LN4@FT_Raccess
	cmp	DWORD PTR _allmatch$[ebp], 0
	jne	SHORT $LN4@FT_Raccess
; Line 112
	push	OFFSET $SG12510
	push	112					; 00000070H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	jmp	SHORT $LN16@FT_Raccess
$LN4@FT_Raccess:
; Line 120
	push	8
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 122
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	edx, ax
	mov	DWORD PTR _type_list$[ebp], edx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@FT_Raccess
; Line 123
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN16@FT_Raccess
$LN3@FT_Raccess:
; Line 124
	cmp	DWORD PTR _type_list$[ebp], -1
	jne	SHORT $LN2@FT_Raccess
; Line 125
	push	OFFSET $SG12516
	push	125					; 0000007dH
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	jmp	SHORT $LN16@FT_Raccess
$LN2@FT_Raccess:
; Line 127
	mov	eax, DWORD PTR _map_pos$[ebp]
	add	eax, DWORD PTR _type_list$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 128
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@FT_Raccess
; Line 129
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN16@FT_Raccess
$LN1@FT_Raccess:
; Line 131
	mov	edx, DWORD PTR _map_pos$[ebp]
	add	edx, DWORD PTR _type_list$[ebp]
	mov	eax, DWORD PTR _map_offset$[ebp]
	mov	DWORD PTR [eax], edx
; Line 132
	xor	eax, eax
$LN16@FT_Raccess:
; Line 133
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@FT_Raccess
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@FT_Raccess:
	DD	3
	DD	$LN21@FT_Raccess
$LN21@FT_Raccess:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN18@FT_Raccess
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN19@FT_Raccess
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN20@FT_Raccess
$LN20@FT_Raccess:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	50					; 00000032H
	DB	0
$LN19@FT_Raccess:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN18@FT_Raccess:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_Raccess_Get_HeaderInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_library$ = 8						; size = 4
_stream$ = 12						; size = 4
_base_name$ = 16					; size = 4
_new_names$ = 20					; size = 4
_offsets$ = 24						; size = 4
_errors$ = 28						; size = 4
_FT_Raccess_Guess PROC
; File d:\mozilla\modules\freetype2\src\base\ftrfork.c
; Line 382
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 386
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@FT_Raccess
$LN5@FT_Raccess:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@FT_Raccess:
	cmp	DWORD PTR _i$[ebp], 9
	jge	$LN7@FT_Raccess
; Line 388
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _new_names$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
; Line 389
	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN3@FT_Raccess
; Line 390
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _errors$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 391
	jmp	SHORT $LN2@FT_Raccess
$LN3@FT_Raccess:
; Line 392
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _errors$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
$LN2@FT_Raccess:
; Line 394
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _errors$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	je	SHORT $LN1@FT_Raccess
; Line 395
	jmp	SHORT $LN5@FT_Raccess
$LN1@FT_Raccess:
; Line 400
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _offsets$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _new_names$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _base_name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _ft_raccess_guess_table[ecx*8]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _errors$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 401
	jmp	$LN5@FT_Raccess
$LN7@FT_Raccess:
; Line 404
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Raccess_Guess ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_jump_buffer$ = -4					; size = 4
_valid$ = 8						; size = 4
_error$ = 12						; size = 4
_ft_validator_error PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 121
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 125
	mov	eax, DWORD PTR _valid$[ebp]
	mov	DWORD PTR _jump_buffer$[ebp], eax
; Line 128
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx+76], edx
; Line 132
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _jump_buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__longjmp
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@ft_validat:
; Line 133
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_validator_error ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_valid$ = 8						; size = 4
_ft_validator_run PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 110
	push	ebp
	mov	ebp, esp
; Line 112
	mov	eax, DWORD PTR _valid$[ebp]
	mov	DWORD PTR _valid$[ebp], eax
; Line 114
	or	eax, -1
; Line 115
	pop	ebp
	ret	0
_ft_validator_run ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_valid$ = 8						; size = 4
_base$ = 12						; size = 4
_limit$ = 16						; size = 4
_level$ = 20						; size = 4
_ft_validator_init PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 100
	push	ebp
	mov	ebp, esp
; Line 101
	mov	eax, DWORD PTR _valid$[ebp]
	mov	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 102
	mov	edx, DWORD PTR _valid$[ebp]
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [edx+68], eax
; Line 103
	mov	ecx, DWORD PTR _valid$[ebp]
	mov	edx, DWORD PTR _level$[ebp]
	mov	DWORD PTR [ecx+72], edx
; Line 104
	mov	eax, DWORD PTR _valid$[ebp]
	mov	DWORD PTR [eax+76], 0
; Line 105
	pop	ebp
	ret	0
_ft_validator_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv89 = -108						; size = 4
tv83 = -104						; size = 4
tv78 = -100						; size = 4
tv75 = -96						; size = 4
_last$1 = -92						; size = 4
_area$ = -88						; size = 4
_first$ = -84						; size = 4
_n$ = -80						; size = 4
_c$ = -76						; size = 4
_v_cur$ = -68						; size = 8
_v_prev$ = -52						; size = 8
_points$ = -40						; size = 4
_yshift$ = -36						; size = 4
_xshift$ = -32						; size = 4
_cbox$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_outline$ = 8						; size = 4
_FT_Outline_Get_Orientation PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 1038
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1044
	mov	DWORD PTR _area$[ebp], 0
; Line 1047
	cmp	DWORD PTR _outline$[ebp], 0
	je	SHORT $LN13@FT_Outline
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	jg	SHORT $LN14@FT_Outline
$LN13@FT_Outline:
; Line 1048
	xor	eax, eax
	jmp	$LN15@FT_Outline
$LN14@FT_Outline:
; Line 1055
	lea	edx, DWORD PTR _cbox$[ebp]
	push	edx
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	call	_FT_Outline_Get_CBox
	add	esp, 8
; Line 1058
	mov	ecx, DWORD PTR _cbox$[ebp]
	cmp	ecx, DWORD PTR _cbox$[ebp+8]
	je	SHORT $LN11@FT_Outline
	mov	edx, DWORD PTR _cbox$[ebp+4]
	cmp	edx, DWORD PTR _cbox$[ebp+12]
	jne	SHORT $LN12@FT_Outline
$LN11@FT_Outline:
; Line 1059
	mov	eax, 2
	jmp	$LN15@FT_Outline
$LN12@FT_Outline:
; Line 1061
	cmp	DWORD PTR _cbox$[ebp+8], 0
	jge	SHORT $LN17@FT_Outline
	mov	eax, DWORD PTR _cbox$[ebp+8]
	neg	eax
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN18@FT_Outline
$LN17@FT_Outline:
	mov	ecx, DWORD PTR _cbox$[ebp+8]
	mov	DWORD PTR tv75[ebp], ecx
$LN18@FT_Outline:
	cmp	DWORD PTR _cbox$[ebp], 0
	jge	SHORT $LN19@FT_Outline
	mov	edx, DWORD PTR _cbox$[ebp]
	neg	edx
	mov	DWORD PTR tv78[ebp], edx
	jmp	SHORT $LN20@FT_Outline
$LN19@FT_Outline:
	mov	eax, DWORD PTR _cbox$[ebp]
	mov	DWORD PTR tv78[ebp], eax
$LN20@FT_Outline:
	mov	ecx, DWORD PTR tv75[ebp]
	or	ecx, DWORD PTR tv78[ebp]
	push	ecx
	call	_FT_MSB
	add	esp, 4
	sub	eax, 14					; 0000000eH
	mov	DWORD PTR _xshift$[ebp], eax
; Line 1062
	cmp	DWORD PTR _xshift$[ebp], 0
	jle	SHORT $LN21@FT_Outline
	mov	edx, DWORD PTR _xshift$[ebp]
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN22@FT_Outline
$LN21@FT_Outline:
	mov	DWORD PTR tv83[ebp], 0
$LN22@FT_Outline:
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR _xshift$[ebp], eax
; Line 1064
	mov	ecx, DWORD PTR _cbox$[ebp+12]
	sub	ecx, DWORD PTR _cbox$[ebp+4]
	push	ecx
	call	_FT_MSB
	add	esp, 4
	sub	eax, 14					; 0000000eH
	mov	DWORD PTR _yshift$[ebp], eax
; Line 1065
	cmp	DWORD PTR _yshift$[ebp], 0
	jle	SHORT $LN23@FT_Outline
	mov	edx, DWORD PTR _yshift$[ebp]
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $LN24@FT_Outline
$LN23@FT_Outline:
	mov	DWORD PTR tv89[ebp], 0
$LN24@FT_Outline:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR _yshift$[ebp], eax
; Line 1067
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _points$[ebp], edx
; Line 1069
	mov	DWORD PTR _first$[ebp], 0
; Line 1070
	mov	DWORD PTR _c$[ebp], 0
	jmp	SHORT $LN10@FT_Outline
$LN9@FT_Outline:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN10@FT_Outline:
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	cmp	DWORD PTR _c$[ebp], edx
	jge	$LN8@FT_Outline
; Line 1072
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _c$[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _last$1[ebp], eax
; Line 1075
	mov	ecx, DWORD PTR _last$1[ebp]
	mov	edx, DWORD PTR _points$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _v_prev$[ebp], eax
	mov	DWORD PTR _v_prev$[ebp+4], ecx
; Line 1077
	mov	edx, DWORD PTR _first$[ebp]
	mov	DWORD PTR _n$[ebp], edx
	jmp	SHORT $LN7@FT_Outline
$LN6@FT_Outline:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN7@FT_Outline:
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _last$1[ebp]
	jg	SHORT $LN5@FT_Outline
; Line 1079
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _points$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	DWORD PTR _v_cur$[ebp], ecx
	mov	DWORD PTR _v_cur$[ebp+4], edx
; Line 1081
	mov	eax, DWORD PTR _v_cur$[ebp+4]
	sub	eax, DWORD PTR _v_prev$[ebp+4]
	mov	ecx, DWORD PTR _yshift$[ebp]
	sar	eax, cl
	mov	edx, DWORD PTR _v_cur$[ebp]
	add	edx, DWORD PTR _v_prev$[ebp]
	mov	ecx, DWORD PTR _xshift$[ebp]
	sar	edx, cl
	imul	eax, edx
	add	eax, DWORD PTR _area$[ebp]
	mov	DWORD PTR _area$[ebp], eax
; Line 1082
	mov	eax, DWORD PTR _v_cur$[ebp]
	mov	DWORD PTR _v_prev$[ebp], eax
	mov	ecx, DWORD PTR _v_cur$[ebp+4]
	mov	DWORD PTR _v_prev$[ebp+4], ecx
; Line 1083
	jmp	SHORT $LN6@FT_Outline
$LN5@FT_Outline:
; Line 1085
	mov	edx, DWORD PTR _last$1[ebp]
	add	edx, 1
	mov	DWORD PTR _first$[ebp], edx
; Line 1086
	jmp	$LN9@FT_Outline
$LN8@FT_Outline:
; Line 1088
	cmp	DWORD PTR _area$[ebp], 0
	jle	SHORT $LN4@FT_Outline
; Line 1089
	mov	eax, 1
	jmp	SHORT $LN15@FT_Outline
	jmp	SHORT $LN15@FT_Outline
$LN4@FT_Outline:
; Line 1090
	cmp	DWORD PTR _area$[ebp], 0
	jge	SHORT $LN2@FT_Outline
; Line 1091
	xor	eax, eax
	jmp	SHORT $LN15@FT_Outline
; Line 1092
	jmp	SHORT $LN15@FT_Outline
$LN2@FT_Outline:
; Line 1093
	mov	eax, 2
$LN15@FT_Outline:
; Line 1094
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@FT_Outline
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN29@FT_Outline:
	DD	3
	DD	$LN28@FT_Outline
$LN28@FT_Outline:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN25@FT_Outline
	DD	-52					; ffffffccH
	DD	8
	DD	$LN26@FT_Outline
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN27@FT_Outline
$LN27@FT_Outline:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
$LN26@FT_Outline:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	0
$LN25@FT_Outline:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
_FT_Outline_Get_Orientation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_node$ = -20						; size = 4
_renderer$ = -12					; size = 4
_update$ = -5						; size = 1
_error$ = -4						; size = 4
_library$ = 8						; size = 4
_outline$ = 12						; size = 4
_params$ = 16						; size = 4
_FT_Outline_Render PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 613
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 615
	mov	BYTE PTR _update$[ebp], 0
; Line 620
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN8@FT_Outline
; Line 621
	push	OFFSET $SG12344
	push	621					; 0000026dH
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	$LN9@FT_Outline
$LN8@FT_Outline:
; Line 623
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN7@FT_Outline
; Line 624
	push	OFFSET $SG12346
	push	624					; 00000270H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN9@FT_Outline
$LN7@FT_Outline:
; Line 626
	cmp	DWORD PTR _params$[ebp], 0
	jne	SHORT $LN6@FT_Outline
; Line 627
	push	OFFSET $SG12348
	push	627					; 00000273H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN9@FT_Outline
$LN6@FT_Outline:
; Line 629
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR _renderer$[ebp], ecx
; Line 630
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	DWORD PTR _node$[ebp], eax
; Line 632
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 634
	mov	DWORD PTR _error$[ebp], 19		; 00000013H
$LN5@FT_Outline:
; Line 635
	cmp	DWORD PTR _renderer$[ebp], 0
	je	SHORT $LN4@FT_Outline
; Line 637
	mov	esi, esp
	mov	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _renderer$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 638
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FT_Outline
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 19					; 00000013H
	je	SHORT $LN3@FT_Outline
$LN2@FT_Outline:
; Line 639
	jmp	SHORT $LN4@FT_Outline
$LN3@FT_Outline:
; Line 648
	lea	eax, DWORD PTR _node$[ebp]
	push	eax
	push	1869968492				; 6f75746cH
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Lookup_Renderer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _renderer$[ebp], eax
; Line 649
	mov	BYTE PTR _update$[ebp], 1
; Line 650
	jmp	SHORT $LN5@FT_Outline
$LN4@FT_Outline:
; Line 654
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@FT_Outline
	movzx	edx, BYTE PTR _update$[ebp]
	test	edx, edx
	je	SHORT $LN1@FT_Outline
	cmp	DWORD PTR _renderer$[ebp], 0
	je	SHORT $LN1@FT_Outline
; Line 655
	push	0
	push	0
	mov	eax, DWORD PTR _renderer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Set_Renderer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$LN1@FT_Outline:
; Line 657
	mov	eax, DWORD PTR _error$[ebp]
$LN9@FT_Outline:
; Line 658
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FT_Outline
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@FT_Outline:
	DD	1
	DD	$LN12@FT_Outline
$LN12@FT_Outline:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@FT_Outline
$LN11@FT_Outline:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_FT_Outline_Render ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_params$ = -56						; size = 48
__$ArrayPad$ = -4					; size = 4
_library$ = 8						; size = 4
_outline$ = 12						; size = 4
_abitmap$ = 16						; size = 4
_FT_Outline_Get_Bitmap PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 667
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 671
	cmp	DWORD PTR _abitmap$[ebp], 0
	jne	SHORT $LN3@FT_Outline
; Line 672
	push	OFFSET $SG12365
	push	672					; 000002a0H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN4@FT_Outline
$LN3@FT_Outline:
; Line 676
	mov	eax, DWORD PTR _abitmap$[ebp]
	mov	DWORD PTR _params$[ebp], eax
; Line 677
	mov	DWORD PTR _params$[ebp+8], 0
; Line 681
	mov	ecx, DWORD PTR _abitmap$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	cmp	edx, 2
	je	SHORT $LN1@FT_Outline
	mov	eax, DWORD PTR _abitmap$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	cmp	ecx, 5
	je	SHORT $LN1@FT_Outline
	mov	edx, DWORD PTR _abitmap$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	cmp	eax, 6
	jne	SHORT $LN2@FT_Outline
$LN1@FT_Outline:
; Line 682
	mov	ecx, DWORD PTR _params$[ebp+8]
	or	ecx, 1
	mov	DWORD PTR _params$[ebp+8], ecx
$LN2@FT_Outline:
; Line 684
	lea	edx, DWORD PTR _params$[ebp]
	push	edx
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Outline_Render
	add	esp, 12					; 0000000cH
$LN4@FT_Outline:
; Line 685
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@FT_Outline
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@FT_Outline:
	DD	1
	DD	$LN7@FT_Outline
$LN7@FT_Outline:
	DD	-56					; ffffffc8H
	DD	48					; 00000030H
	DD	$LN6@FT_Outline
$LN6@FT_Outline:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_FT_Outline_Get_Bitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_swap$1 = -45						; size = 1
_q$2 = -44						; size = 4
_p$3 = -40						; size = 4
_swap$4 = -32						; size = 8
_q$5 = -20						; size = 4
_p$6 = -16						; size = 4
_last$ = -12						; size = 4
_first$ = -8						; size = 4
_n$ = -4						; size = 2
_outline$ = 8						; size = 4
_FT_Outline_Reverse PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 550
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 555
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN8@FT_Outline
; Line 556
	jmp	$LN9@FT_Outline
$LN8@FT_Outline:
; Line 558
	mov	DWORD PTR _first$[ebp], 0
; Line 560
	xor	eax, eax
	mov	WORD PTR _n$[ebp], ax
	jmp	SHORT $LN7@FT_Outline
$LN6@FT_Outline:
	mov	cx, WORD PTR _n$[ebp]
	add	cx, 1
	mov	WORD PTR _n$[ebp], cx
$LN7@FT_Outline:
	movzx	edx, WORD PTR _n$[ebp]
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax]
	cmp	edx, ecx
	jge	$LN5@FT_Outline
; Line 562
	movzx	edx, WORD PTR _n$[ebp]
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movsx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _last$[ebp], edx
; Line 566
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _first$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _p$6[ebp], eax
; Line 567
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _last$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _q$5[ebp], ecx
$LN4@FT_Outline:
; Line 571
	mov	edx, DWORD PTR _p$6[ebp]
	cmp	edx, DWORD PTR _q$5[ebp]
	jae	SHORT $LN3@FT_Outline
; Line 573
	mov	eax, DWORD PTR _p$6[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _swap$4[ebp], ecx
	mov	DWORD PTR _swap$4[ebp+4], edx
; Line 574
	mov	eax, DWORD PTR _q$5[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _p$6[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 575
	mov	ecx, DWORD PTR _q$5[ebp]
	mov	edx, DWORD PTR _swap$4[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _swap$4[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 576
	mov	ecx, DWORD PTR _p$6[ebp]
	add	ecx, 8
	mov	DWORD PTR _p$6[ebp], ecx
; Line 577
	mov	edx, DWORD PTR _q$5[ebp]
	sub	edx, 8
	mov	DWORD PTR _q$5[ebp], edx
; Line 578
	jmp	SHORT $LN4@FT_Outline
$LN3@FT_Outline:
; Line 583
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _first$[ebp]
	mov	DWORD PTR _p$3[ebp], ecx
; Line 584
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _last$[ebp]
	mov	DWORD PTR _q$2[ebp], eax
$LN2@FT_Outline:
; Line 587
	mov	ecx, DWORD PTR _p$3[ebp]
	cmp	ecx, DWORD PTR _q$2[ebp]
	jae	SHORT $LN1@FT_Outline
; Line 592
	mov	edx, DWORD PTR _p$3[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _swap$1[ebp], al
; Line 593
	mov	ecx, DWORD PTR _p$3[ebp]
	mov	edx, DWORD PTR _q$2[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
; Line 594
	mov	ecx, DWORD PTR _q$2[ebp]
	mov	dl, BYTE PTR _swap$1[ebp]
	mov	BYTE PTR [ecx], dl
; Line 595
	mov	eax, DWORD PTR _p$3[ebp]
	add	eax, 1
	mov	DWORD PTR _p$3[ebp], eax
; Line 596
	mov	ecx, DWORD PTR _q$2[ebp]
	sub	ecx, 1
	mov	DWORD PTR _q$2[ebp], ecx
; Line 597
	jmp	SHORT $LN2@FT_Outline
$LN1@FT_Outline:
; Line 600
	mov	edx, DWORD PTR _last$[ebp]
	add	edx, 1
	mov	DWORD PTR _first$[ebp], edx
; Line 601
	jmp	$LN6@FT_Outline
$LN5@FT_Outline:
; Line 603
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	xor	ecx, 4
	mov	edx, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN9@FT_Outline:
; Line 604
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FT_Outline
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@FT_Outline:
	DD	1
	DD	$LN12@FT_Outline
$LN12@FT_Outline:
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN11@FT_Outline
$LN11@FT_Outline:
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
_FT_Outline_Reverse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv217 = -160						; size = 4
_last$1 = -156						; size = 4
_d$2 = -152						; size = 4
_q$3 = -148						; size = 4
_l$4 = -144						; size = 4
_l_out$5 = -140						; size = 4
_l_in$6 = -136						; size = 4
_shift$7 = -128						; size = 8
_out$8 = -112						; size = 8
_in$9 = -96						; size = 8
_orientation$ = -84					; size = 4
_first$ = -80						; size = 4
_n$ = -76						; size = 4
_c$ = -72						; size = 4
_v_cur$ = -64						; size = 8
_v_next$ = -48						; size = 8
_v_first$ = -32						; size = 8
_v_prev$ = -16						; size = 8
_points$ = -4						; size = 4
_outline$ = 8						; size = 4
_xstrength$ = 12					; size = 4
_ystrength$ = 16					; size = 4
_FT_Outline_EmboldenXY PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 915
	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 922
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN24@FT_Outline
; Line 923
	push	OFFSET $SG12411
	push	923					; 0000039bH
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN25@FT_Outline
$LN24@FT_Outline:
; Line 925
	mov	eax, DWORD PTR _xstrength$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _xstrength$[ebp], eax
; Line 926
	mov	eax, DWORD PTR _ystrength$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _ystrength$[ebp], eax
; Line 927
	cmp	DWORD PTR _xstrength$[ebp], 0
	jne	SHORT $LN23@FT_Outline
	cmp	DWORD PTR _ystrength$[ebp], 0
	jne	SHORT $LN23@FT_Outline
; Line 928
	xor	eax, eax
	jmp	$LN25@FT_Outline
$LN23@FT_Outline:
; Line 930
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	call	_FT_Outline_Get_Orientation
	add	esp, 4
	mov	DWORD PTR _orientation$[ebp], eax
; Line 931
	cmp	DWORD PTR _orientation$[ebp], 2
	jne	SHORT $LN22@FT_Outline
; Line 933
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN21@FT_Outline
; Line 934
	push	OFFSET $SG12415
	push	934					; 000003a6H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN25@FT_Outline
; Line 935
	jmp	SHORT $LN22@FT_Outline
$LN21@FT_Outline:
; Line 936
	xor	eax, eax
	jmp	$LN25@FT_Outline
$LN22@FT_Outline:
; Line 939
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _points$[ebp], ecx
; Line 941
	mov	DWORD PTR _first$[ebp], 0
; Line 942
	mov	DWORD PTR _c$[ebp], 0
	jmp	SHORT $LN19@FT_Outline
$LN18@FT_Outline:
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 1
	mov	DWORD PTR _c$[ebp], edx
$LN19@FT_Outline:
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax]
	cmp	DWORD PTR _c$[ebp], ecx
	jge	$LN17@FT_Outline
; Line 946
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _c$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _last$1[ebp], edx
; Line 949
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _v_first$[ebp], edx
	mov	DWORD PTR _v_first$[ebp+4], eax
; Line 950
	mov	ecx, DWORD PTR _last$1[ebp]
	mov	edx, DWORD PTR _points$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _v_prev$[ebp], eax
	mov	DWORD PTR _v_prev$[ebp+4], ecx
; Line 951
	mov	edx, DWORD PTR _v_first$[ebp]
	mov	DWORD PTR _v_cur$[ebp], edx
	mov	eax, DWORD PTR _v_first$[ebp+4]
	mov	DWORD PTR _v_cur$[ebp+4], eax
; Line 954
	mov	ecx, DWORD PTR _v_cur$[ebp]
	sub	ecx, DWORD PTR _v_prev$[ebp]
	mov	DWORD PTR _in$9[ebp], ecx
; Line 955
	mov	edx, DWORD PTR _v_cur$[ebp+4]
	sub	edx, DWORD PTR _v_prev$[ebp+4]
	mov	DWORD PTR _in$9[ebp+4], edx
; Line 956
	lea	eax, DWORD PTR _in$9[ebp]
	push	eax
	call	_FT_Vector_Length
	add	esp, 4
	mov	DWORD PTR _l_in$6[ebp], eax
; Line 957
	cmp	DWORD PTR _l_in$6[ebp], 0
	je	SHORT $LN16@FT_Outline
; Line 959
	mov	ecx, DWORD PTR _l_in$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _in$9[ebp]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _in$9[ebp], eax
; Line 960
	mov	eax, DWORD PTR _l_in$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$9[ebp+4]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _in$9[ebp+4], eax
$LN16@FT_Outline:
; Line 963
	mov	edx, DWORD PTR _first$[ebp]
	mov	DWORD PTR _n$[ebp], edx
	jmp	SHORT $LN15@FT_Outline
$LN14@FT_Outline:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN15@FT_Outline:
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _last$1[ebp]
	jg	$LN13@FT_Outline
; Line 965
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _last$1[ebp]
	jge	SHORT $LN12@FT_Outline
; Line 966
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _points$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+8]
	mov	eax, DWORD PTR [ecx+eax*8+12]
	mov	DWORD PTR _v_next$[ebp], edx
	mov	DWORD PTR _v_next$[ebp+4], eax
; Line 967
	jmp	SHORT $LN11@FT_Outline
$LN12@FT_Outline:
; Line 968
	mov	ecx, DWORD PTR _v_first$[ebp]
	mov	DWORD PTR _v_next$[ebp], ecx
	mov	edx, DWORD PTR _v_first$[ebp+4]
	mov	DWORD PTR _v_next$[ebp+4], edx
$LN11@FT_Outline:
; Line 971
	mov	eax, DWORD PTR _v_next$[ebp]
	sub	eax, DWORD PTR _v_cur$[ebp]
	mov	DWORD PTR _out$8[ebp], eax
; Line 972
	mov	ecx, DWORD PTR _v_next$[ebp+4]
	sub	ecx, DWORD PTR _v_cur$[ebp+4]
	mov	DWORD PTR _out$8[ebp+4], ecx
; Line 973
	lea	edx, DWORD PTR _out$8[ebp]
	push	edx
	call	_FT_Vector_Length
	add	esp, 4
	mov	DWORD PTR _l_out$5[ebp], eax
; Line 974
	cmp	DWORD PTR _l_out$5[ebp], 0
	je	SHORT $LN10@FT_Outline
; Line 976
	mov	eax, DWORD PTR _l_out$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$8[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _out$8[ebp], eax
; Line 977
	mov	edx, DWORD PTR _l_out$5[ebp]
	push	edx
	mov	eax, DWORD PTR _out$8[ebp+4]
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR _out$8[ebp+4], eax
$LN10@FT_Outline:
; Line 980
	mov	ecx, DWORD PTR _out$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _in$9[ebp]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	mov	esi, eax
	mov	eax, DWORD PTR _out$8[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _in$9[ebp+4]
	push	ecx
	call	_FT_MulFix
	add	esp, 8
	add	esi, eax
	mov	DWORD PTR _d$2[ebp], esi
; Line 983
	cmp	DWORD PTR _d$2[ebp], -61440		; ffff1000H
	jle	$LN9@FT_Outline
; Line 985
	mov	edx, DWORD PTR _d$2[ebp]
	add	edx, 65536				; 00010000H
	mov	DWORD PTR _d$2[ebp], edx
; Line 989
	mov	eax, DWORD PTR _in$9[ebp+4]
	add	eax, DWORD PTR _out$8[ebp+4]
	mov	DWORD PTR _shift$7[ebp], eax
; Line 990
	mov	ecx, DWORD PTR _in$9[ebp]
	add	ecx, DWORD PTR _out$8[ebp]
	mov	DWORD PTR _shift$7[ebp+4], ecx
; Line 992
	cmp	DWORD PTR _orientation$[ebp], 0
	jne	SHORT $LN8@FT_Outline
; Line 993
	mov	edx, DWORD PTR _shift$7[ebp]
	neg	edx
	mov	DWORD PTR _shift$7[ebp], edx
; Line 994
	jmp	SHORT $LN7@FT_Outline
$LN8@FT_Outline:
; Line 995
	mov	eax, DWORD PTR _shift$7[ebp+4]
	neg	eax
	mov	DWORD PTR _shift$7[ebp+4], eax
$LN7@FT_Outline:
; Line 998
	mov	ecx, DWORD PTR _in$9[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _out$8[ebp]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	mov	esi, eax
	mov	eax, DWORD PTR _in$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$8[ebp+4]
	push	ecx
	call	_FT_MulFix
	add	esp, 8
	sub	esi, eax
	mov	DWORD PTR _q$3[ebp], esi
; Line 999
	cmp	DWORD PTR _orientation$[ebp], 0
	jne	SHORT $LN6@FT_Outline
; Line 1000
	mov	edx, DWORD PTR _q$3[ebp]
	neg	edx
	mov	DWORD PTR _q$3[ebp], edx
$LN6@FT_Outline:
; Line 1002
	mov	eax, DWORD PTR _l_in$6[ebp]
	cmp	eax, DWORD PTR _l_out$5[ebp]
	jge	SHORT $LN27@FT_Outline
	mov	ecx, DWORD PTR _l_in$6[ebp]
	mov	DWORD PTR tv217[ebp], ecx
	jmp	SHORT $LN28@FT_Outline
$LN27@FT_Outline:
	mov	edx, DWORD PTR _l_out$5[ebp]
	mov	DWORD PTR tv217[ebp], edx
$LN28@FT_Outline:
	mov	eax, DWORD PTR tv217[ebp]
	mov	DWORD PTR _l$4[ebp], eax
; Line 1005
	mov	ecx, DWORD PTR _q$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _xstrength$[ebp]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	mov	esi, eax
	mov	eax, DWORD PTR _l$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _d$2[ebp]
	push	ecx
	call	_FT_MulFix
	add	esp, 8
	cmp	esi, eax
	jg	SHORT $LN5@FT_Outline
; Line 1006
	mov	edx, DWORD PTR _d$2[ebp]
	push	edx
	mov	eax, DWORD PTR _xstrength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shift$7[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _shift$7[ebp], eax
; Line 1007
	jmp	SHORT $LN4@FT_Outline
$LN5@FT_Outline:
; Line 1008
	mov	edx, DWORD PTR _q$3[ebp]
	push	edx
	mov	eax, DWORD PTR _l$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _shift$7[ebp]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _shift$7[ebp], eax
$LN4@FT_Outline:
; Line 1011
	mov	edx, DWORD PTR _q$3[ebp]
	push	edx
	mov	eax, DWORD PTR _ystrength$[ebp]
	push	eax
	call	_FT_MulFix
	add	esp, 8
	mov	esi, eax
	mov	ecx, DWORD PTR _l$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _d$2[ebp]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	cmp	esi, eax
	jg	SHORT $LN3@FT_Outline
; Line 1012
	mov	eax, DWORD PTR _d$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _ystrength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _shift$7[ebp+4]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _shift$7[ebp+4], eax
; Line 1013
	jmp	SHORT $LN2@FT_Outline
$LN3@FT_Outline:
; Line 1014
	mov	eax, DWORD PTR _q$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _l$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _shift$7[ebp+4]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _shift$7[ebp+4], eax
$LN2@FT_Outline:
; Line 1016
	jmp	SHORT $LN1@FT_Outline
$LN9@FT_Outline:
; Line 1017
	mov	DWORD PTR _shift$7[ebp+4], 0
	mov	eax, DWORD PTR _shift$7[ebp+4]
	mov	DWORD PTR _shift$7[ebp], eax
$LN1@FT_Outline:
; Line 1019
	mov	ecx, DWORD PTR _v_cur$[ebp]
	add	ecx, DWORD PTR _xstrength$[ebp]
	add	ecx, DWORD PTR _shift$7[ebp]
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
; Line 1020
	mov	eax, DWORD PTR _v_cur$[ebp+4]
	add	eax, DWORD PTR _ystrength$[ebp]
	add	eax, DWORD PTR _shift$7[ebp+4]
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+ecx*8+4], eax
; Line 1022
	mov	edx, DWORD PTR _out$8[ebp]
	mov	DWORD PTR _in$9[ebp], edx
	mov	eax, DWORD PTR _out$8[ebp+4]
	mov	DWORD PTR _in$9[ebp+4], eax
; Line 1023
	mov	ecx, DWORD PTR _l_out$5[ebp]
	mov	DWORD PTR _l_in$6[ebp], ecx
; Line 1024
	mov	edx, DWORD PTR _v_next$[ebp]
	mov	DWORD PTR _v_cur$[ebp], edx
	mov	eax, DWORD PTR _v_next$[ebp+4]
	mov	DWORD PTR _v_cur$[ebp+4], eax
; Line 1025
	jmp	$LN14@FT_Outline
$LN13@FT_Outline:
; Line 1027
	mov	ecx, DWORD PTR _last$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _first$[ebp], ecx
; Line 1028
	jmp	$LN18@FT_Outline
$LN17@FT_Outline:
; Line 1030
	xor	eax, eax
$LN25@FT_Outline:
; Line 1031
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@FT_Outline
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 160				; 000000a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN37@FT_Outline:
	DD	7
	DD	$LN36@FT_Outline
$LN36@FT_Outline:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN29@FT_Outline
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN30@FT_Outline
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN31@FT_Outline
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN32@FT_Outline
	DD	-96					; ffffffa0H
	DD	8
	DD	$LN33@FT_Outline
	DD	-112					; ffffff90H
	DD	8
	DD	$LN34@FT_Outline
	DD	-128					; ffffff80H
	DD	8
	DD	$LN35@FT_Outline
$LN35@FT_Outline:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN34@FT_Outline:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN33@FT_Outline:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN32@FT_Outline:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
$LN31@FT_Outline:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN30@FT_Outline:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN29@FT_Outline:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	0
_FT_Outline_EmboldenXY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_outline$ = 8						; size = 4
_strength$ = 12						; size = 4
_FT_Outline_Embolden PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 904
	push	ebp
	mov	ebp, esp
; Line 905
	mov	eax, DWORD PTR _strength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outline$[ebp]
	push	edx
	call	_FT_Outline_EmboldenXY
	add	esp, 12					; 0000000cH
; Line 906
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Outline_Embolden ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$ = -8						; size = 4
_vec$ = -4						; size = 4
_outline$ = 8						; size = 4
_matrix$ = 12						; size = 4
_FT_Outline_Transform PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 716
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 721
	cmp	DWORD PTR _outline$[ebp], 0
	je	SHORT $LN4@FT_Outline
	cmp	DWORD PTR _matrix$[ebp], 0
	jne	SHORT $LN5@FT_Outline
$LN4@FT_Outline:
; Line 722
	jmp	SHORT $LN6@FT_Outline
$LN5@FT_Outline:
; Line 724
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vec$[ebp], ecx
; Line 725
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _vec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _limit$[ebp], edx
; Line 727
	jmp	SHORT $LN3@FT_Outline
$LN2@FT_Outline:
	mov	eax, DWORD PTR _vec$[ebp]
	add	eax, 8
	mov	DWORD PTR _vec$[ebp], eax
$LN3@FT_Outline:
	mov	ecx, DWORD PTR _vec$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN6@FT_Outline
; Line 728
	mov	edx, DWORD PTR _matrix$[ebp]
	push	edx
	mov	eax, DWORD PTR _vec$[ebp]
	push	eax
	call	_FT_Vector_Transform
	add	esp, 8
	jmp	SHORT $LN2@FT_Outline
$LN6@FT_Outline:
; Line 729
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Outline_Transform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_is_owner$ = -4						; size = 4
_source$ = 8						; size = 4
_target$ = 12						; size = 4
_FT_Outline_Copy PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 403
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 407
	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN4@FT_Outline
	cmp	DWORD PTR _target$[ebp], 0
	jne	SHORT $LN5@FT_Outline
$LN4@FT_Outline:
; Line 408
	push	OFFSET $SG12240
	push	408					; 00000198H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN6@FT_Outline
$LN5@FT_Outline:
; Line 411
	mov	eax, DWORD PTR _source$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _target$[ebp]
	movsx	eax, WORD PTR [edx+2]
	cmp	ecx, eax
	jne	SHORT $LN2@FT_Outline
	mov	ecx, DWORD PTR _source$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _target$[ebp]
	movsx	ecx, WORD PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN3@FT_Outline
$LN2@FT_Outline:
; Line 412
	push	OFFSET $SG12243
	push	412					; 0000019cH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN6@FT_Outline
$LN3@FT_Outline:
; Line 414
	mov	edx, DWORD PTR _source$[ebp]
	cmp	edx, DWORD PTR _target$[ebp]
	jne	SHORT $LN1@FT_Outline
; Line 415
	xor	eax, eax
	jmp	$LN6@FT_Outline
$LN1@FT_Outline:
; Line 417
	mov	eax, DWORD PTR _source$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 419
	mov	eax, DWORD PTR _source$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 421
	mov	eax, DWORD PTR _source$[ebp]
	movsx	ecx, WORD PTR [eax]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 424
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	mov	DWORD PTR _is_owner$[ebp], ecx
; Line 425
	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
; Line 427
	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 428
	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+16]
	or	eax, DWORD PTR _is_owner$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 430
	xor	eax, eax
$LN6@FT_Outline:
; Line 431
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Outline_Copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vec$ = -8						; size = 4
_n$ = -4						; size = 2
_outline$ = 8						; size = 4
_xOffset$ = 12						; size = 4
_yOffset$ = 16						; size = 4
_FT_Outline_Translate PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 527
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 532
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN4@FT_Outline
; Line 533
	jmp	SHORT $LN5@FT_Outline
$LN4@FT_Outline:
; Line 535
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vec$[ebp], ecx
; Line 537
	xor	edx, edx
	mov	WORD PTR _n$[ebp], dx
	jmp	SHORT $LN3@FT_Outline
$LN2@FT_Outline:
	mov	ax, WORD PTR _n$[ebp]
	add	ax, 1
	mov	WORD PTR _n$[ebp], ax
$LN3@FT_Outline:
	movzx	ecx, WORD PTR _n$[ebp]
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx+2]
	cmp	ecx, eax
	jge	SHORT $LN5@FT_Outline
; Line 539
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _xOffset$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax], edx
; Line 540
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _yOffset$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 541
	mov	ecx, DWORD PTR _vec$[ebp]
	add	ecx, 8
	mov	DWORD PTR _vec$[ebp], ecx
; Line 542
	jmp	SHORT $LN2@FT_Outline
$LN5@FT_Outline:
; Line 543
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Outline_Translate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_y$1 = -32						; size = 4
_x$2 = -28						; size = 4
_limit$3 = -24						; size = 4
_vec$4 = -20						; size = 4
_yMax$ = -16						; size = 4
_xMax$ = -12						; size = 4
_yMin$ = -8						; size = 4
_xMin$ = -4						; size = 4
_outline$ = 8						; size = 4
_acbox$ = 12						; size = 4
_FT_Outline_Get_CBox PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 476
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 480
	cmp	DWORD PTR _outline$[ebp], 0
	je	$LN11@FT_Outline
	cmp	DWORD PTR _acbox$[ebp], 0
	je	$LN11@FT_Outline
; Line 482
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN9@FT_Outline
; Line 484
	mov	DWORD PTR _xMin$[ebp], 0
; Line 485
	mov	DWORD PTR _yMin$[ebp], 0
; Line 486
	mov	DWORD PTR _xMax$[ebp], 0
; Line 487
	mov	DWORD PTR _yMax$[ebp], 0
; Line 489
	jmp	$LN8@FT_Outline
$LN9@FT_Outline:
; Line 491
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _vec$4[ebp], eax
; Line 492
	mov	ecx, DWORD PTR _outline$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _vec$4[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _limit$3[ebp], ecx
; Line 495
	mov	edx, DWORD PTR _vec$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _xMax$[ebp], eax
	mov	ecx, DWORD PTR _xMax$[ebp]
	mov	DWORD PTR _xMin$[ebp], ecx
; Line 496
	mov	edx, DWORD PTR _vec$4[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _yMax$[ebp], eax
	mov	ecx, DWORD PTR _yMax$[ebp]
	mov	DWORD PTR _yMin$[ebp], ecx
; Line 497
	mov	edx, DWORD PTR _vec$4[ebp]
	add	edx, 8
	mov	DWORD PTR _vec$4[ebp], edx
; Line 499
	jmp	SHORT $LN7@FT_Outline
$LN6@FT_Outline:
	mov	eax, DWORD PTR _vec$4[ebp]
	add	eax, 8
	mov	DWORD PTR _vec$4[ebp], eax
$LN7@FT_Outline:
	mov	ecx, DWORD PTR _vec$4[ebp]
	cmp	ecx, DWORD PTR _limit$3[ebp]
	jae	SHORT $LN8@FT_Outline
; Line 504
	mov	edx, DWORD PTR _vec$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _x$2[ebp], eax
; Line 505
	mov	ecx, DWORD PTR _x$2[ebp]
	cmp	ecx, DWORD PTR _xMin$[ebp]
	jge	SHORT $LN4@FT_Outline
	mov	edx, DWORD PTR _x$2[ebp]
	mov	DWORD PTR _xMin$[ebp], edx
$LN4@FT_Outline:
; Line 506
	mov	eax, DWORD PTR _x$2[ebp]
	cmp	eax, DWORD PTR _xMax$[ebp]
	jle	SHORT $LN3@FT_Outline
	mov	ecx, DWORD PTR _x$2[ebp]
	mov	DWORD PTR _xMax$[ebp], ecx
$LN3@FT_Outline:
; Line 508
	mov	edx, DWORD PTR _vec$4[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _y$1[ebp], eax
; Line 509
	mov	ecx, DWORD PTR _y$1[ebp]
	cmp	ecx, DWORD PTR _yMin$[ebp]
	jge	SHORT $LN2@FT_Outline
	mov	edx, DWORD PTR _y$1[ebp]
	mov	DWORD PTR _yMin$[ebp], edx
$LN2@FT_Outline:
; Line 510
	mov	eax, DWORD PTR _y$1[ebp]
	cmp	eax, DWORD PTR _yMax$[ebp]
	jle	SHORT $LN1@FT_Outline
	mov	ecx, DWORD PTR _y$1[ebp]
	mov	DWORD PTR _yMax$[ebp], ecx
$LN1@FT_Outline:
; Line 511
	jmp	SHORT $LN6@FT_Outline
$LN8@FT_Outline:
; Line 513
	mov	edx, DWORD PTR _acbox$[ebp]
	mov	eax, DWORD PTR _xMin$[ebp]
	mov	DWORD PTR [edx], eax
; Line 514
	mov	ecx, DWORD PTR _acbox$[ebp]
	mov	edx, DWORD PTR _xMax$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 515
	mov	eax, DWORD PTR _acbox$[ebp]
	mov	ecx, DWORD PTR _yMin$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 516
	mov	edx, DWORD PTR _acbox$[ebp]
	mov	eax, DWORD PTR _yMax$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN11@FT_Outline:
; Line 518
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Outline_Get_CBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$1 = -20						; size = 4
_end$2 = -16						; size = 4
_end0$3 = -12						; size = 4
_n_contours$4 = -8					; size = 4
_n_points$5 = -4					; size = 4
_outline$ = 8						; size = 4
_FT_Outline_Check PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 357
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 358
	cmp	DWORD PTR _outline$[ebp], 0
	je	$Bad$13
; Line 360
	mov	eax, DWORD PTR _outline$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _n_points$5[ebp], ecx
; Line 361
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR _n_contours$4[ebp], eax
; Line 367
	cmp	DWORD PTR _n_points$5[ebp], 0
	jne	SHORT $LN9@FT_Outline
	cmp	DWORD PTR _n_contours$4[ebp], 0
	jne	SHORT $LN9@FT_Outline
; Line 368
	xor	eax, eax
	jmp	$LN11@FT_Outline
$LN9@FT_Outline:
; Line 371
	cmp	DWORD PTR _n_points$5[ebp], 0
	jle	SHORT $LN7@FT_Outline
	cmp	DWORD PTR _n_contours$4[ebp], 0
	jg	SHORT $LN8@FT_Outline
$LN7@FT_Outline:
; Line 372
	jmp	SHORT $Bad$13
$LN8@FT_Outline:
; Line 374
	mov	DWORD PTR _end$2[ebp], -1
	mov	ecx, DWORD PTR _end$2[ebp]
	mov	DWORD PTR _end0$3[ebp], ecx
; Line 375
	mov	DWORD PTR _n$1[ebp], 0
	jmp	SHORT $LN6@FT_Outline
$LN5@FT_Outline:
	mov	edx, DWORD PTR _n$1[ebp]
	add	edx, 1
	mov	DWORD PTR _n$1[ebp], edx
$LN6@FT_Outline:
	mov	eax, DWORD PTR _n$1[ebp]
	cmp	eax, DWORD PTR _n_contours$4[ebp]
	jge	SHORT $LN4@FT_Outline
; Line 377
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _n$1[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	mov	DWORD PTR _end$2[ebp], ecx
; Line 380
	mov	edx, DWORD PTR _end$2[ebp]
	cmp	edx, DWORD PTR _end0$3[ebp]
	jle	SHORT $LN2@FT_Outline
	mov	eax, DWORD PTR _end$2[ebp]
	cmp	eax, DWORD PTR _n_points$5[ebp]
	jl	SHORT $LN3@FT_Outline
$LN2@FT_Outline:
; Line 381
	jmp	SHORT $Bad$13
$LN3@FT_Outline:
; Line 383
	mov	ecx, DWORD PTR _end$2[ebp]
	mov	DWORD PTR _end0$3[ebp], ecx
; Line 384
	jmp	SHORT $LN5@FT_Outline
$LN4@FT_Outline:
; Line 386
	mov	edx, DWORD PTR _n_points$5[ebp]
	sub	edx, 1
	cmp	DWORD PTR _end$2[ebp], edx
	je	SHORT $LN1@FT_Outline
; Line 387
	jmp	SHORT $Bad$13
$LN1@FT_Outline:
; Line 390
	xor	eax, eax
	jmp	SHORT $LN11@FT_Outline
$Bad$13:
; Line 394
	push	OFFSET $SG12231
	push	394					; 0000018aH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
$LN11@FT_Outline:
; Line 395
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Outline_Check ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = 8						; size = 4
_outline$ = 12						; size = 4
_FT_Outline_Done_Internal PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 437
	push	ebp
	mov	ebp, esp
; Line 438
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN12@FT_Outline
; Line 439
	push	OFFSET $SG12251
	push	439					; 000001b7H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN13@FT_Outline
$LN12@FT_Outline:
; Line 441
	cmp	DWORD PTR _memory$[ebp], 0
	jne	SHORT $LN11@FT_Outline
; Line 442
	push	OFFSET $SG12253
	push	442					; 000001baH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN13@FT_Outline
$LN11@FT_Outline:
; Line 444
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	je	SHORT $LN10@FT_Outline
$LN9@FT_Outline:
; Line 446
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [edx+4], 0
	xor	eax, eax
	jne	SHORT $LN9@FT_Outline
$LN6@FT_Outline:
; Line 447
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [ecx+8], 0
	xor	edx, edx
	jne	SHORT $LN6@FT_Outline
$LN3@FT_Outline:
; Line 448
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _outline$[ebp]
	mov	DWORD PTR [eax+12], 0
	xor	ecx, ecx
	jne	SHORT $LN3@FT_Outline
$LN10@FT_Outline:
; Line 450
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR _null_outline
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _null_outline+4
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _null_outline+8
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _null_outline+12
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _null_outline+16
	mov	DWORD PTR [edx+16], eax
; Line 452
	xor	eax, eax
$LN13@FT_Outline:
; Line 453
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Outline_Done_Internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = 8						; size = 4
_outline$ = 12						; size = 4
_FT_Outline_Done PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 461
	push	ebp
	mov	ebp, esp
; Line 464
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN1@FT_Outline
; Line 465
	push	OFFSET $SG12273
	push	465					; 000001d1H
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	SHORT $LN2@FT_Outline
$LN1@FT_Outline:
; Line 467
	mov	eax, DWORD PTR _outline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_Outline_Done_Internal
	add	esp, 8
$LN2@FT_Outline:
; Line 468
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Outline_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -8						; size = 4
_memory$ = 8						; size = 4
_numPoints$ = 12					; size = 4
_numContours$ = 16					; size = 4
_anoutline$ = 20					; size = 4
_FT_Outline_New_Internal PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 302
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 306
	cmp	DWORD PTR _anoutline$[ebp], 0
	je	SHORT $LN6@FT_Outline
	cmp	DWORD PTR _memory$[ebp], 0
	jne	SHORT $LN7@FT_Outline
$LN6@FT_Outline:
; Line 307
	push	OFFSET $SG12183
	push	307					; 00000133H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN8@FT_Outline
$LN7@FT_Outline:
; Line 309
	mov	eax, DWORD PTR _anoutline$[ebp]
	mov	ecx, DWORD PTR _null_outline
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _null_outline+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _null_outline+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _null_outline+12
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _null_outline+16
	mov	DWORD PTR [eax+16], ecx
; Line 312
	cmp	DWORD PTR _numContours$[ebp], 0
	jl	SHORT $LN4@FT_Outline
	mov	edx, DWORD PTR _numContours$[ebp]
	cmp	edx, DWORD PTR _numPoints$[ebp]
	jbe	SHORT $LN5@FT_Outline
$LN4@FT_Outline:
; Line 313
	push	OFFSET $SG12187
	push	313					; 00000139H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN8@FT_Outline
$LN5@FT_Outline:
; Line 315
	cmp	DWORD PTR _numPoints$[ebp], 32767	; 00007fffH
	jbe	SHORT $LN3@FT_Outline
; Line 316
	push	OFFSET $SG12189
	push	316					; 0000013cH
	push	10					; 0000000aH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 10					; 0000000aH
	jmp	$LN8@FT_Outline
$LN3@FT_Outline:
; Line 320
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _numPoints$[ebp]
	push	ecx
	push	0
	push	8
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _anoutline$[ebp]
	mov	DWORD PTR [ecx+4], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@FT_Outline
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _numPoints$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _anoutline$[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@FT_Outline
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _numContours$[ebp]
	push	ecx
	push	0
	push	2
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _anoutline$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FT_Outline
$LN1@FT_Outline:
; Line 321
	jmp	SHORT $Fail$13
$LN2@FT_Outline:
; Line 323
	mov	edx, DWORD PTR _anoutline$[ebp]
	mov	ax, WORD PTR _numPoints$[ebp]
	mov	WORD PTR [edx+2], ax
; Line 324
	mov	ecx, DWORD PTR _anoutline$[ebp]
	mov	dx, WORD PTR _numContours$[ebp]
	mov	WORD PTR [ecx], dx
; Line 325
	mov	eax, DWORD PTR _anoutline$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 1
	mov	edx, DWORD PTR _anoutline$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 327
	xor	eax, eax
	jmp	SHORT $LN8@FT_Outline
$Fail$13:
; Line 330
	mov	eax, DWORD PTR _anoutline$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 1
	mov	edx, DWORD PTR _anoutline$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 331
	mov	eax, DWORD PTR _anoutline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_FT_Outline_Done_Internal
	add	esp, 8
; Line 333
	mov	eax, DWORD PTR _error$[ebp]
$LN8@FT_Outline:
; Line 334
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@FT_Outline
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@FT_Outline:
	DD	1
	DD	$LN11@FT_Outline
$LN11@FT_Outline:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@FT_Outline
$LN10@FT_Outline:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_Outline_New_Internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = 8						; size = 4
_numPoints$ = 12					; size = 4
_numContours$ = 16					; size = 4
_anoutline$ = 20					; size = 4
_FT_Outline_New PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 344
	push	ebp
	mov	ebp, esp
; Line 345
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN1@FT_Outline
; Line 346
	push	OFFSET $SG12211
	push	346					; 0000015aH
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	SHORT $LN2@FT_Outline
$LN1@FT_Outline:
; Line 349
	mov	eax, DWORD PTR _anoutline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numContours$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numPoints$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_FT_Outline_New_Internal
	add	esp, 16					; 00000010H
$LN2@FT_Outline:
; Line 350
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Outline_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv191 = -188						; size = 4
_vec$1 = -180						; size = 8
_vec2$2 = -164						; size = 8
_vec1$3 = -148						; size = 8
_v_middle$4 = -132					; size = 8
_vec$5 = -116						; size = 8
_vec$6 = -100						; size = 8
_last$7 = -88						; size = 4
_delta$ = -84						; size = 4
_shift$ = -80						; size = 4
_tag$ = -76						; size = 4
_first$ = -72						; size = 4
_n$ = -68						; size = 4
_error$ = -64						; size = 4
_tags$ = -60						; size = 4
_limit$ = -56						; size = 4
_point$ = -52						; size = 4
_v_start$ = -44						; size = 8
_v_control$ = -28					; size = 8
_v_last$ = -12						; size = 8
_outline$ = 8						; size = 4
_func_interface$ = 12					; size = 4
_user$ = 16						; size = 4
_FT_Outline_Decompose PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-188]
	mov	ecx, 47					; 0000002fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 76
	cmp	DWORD PTR _outline$[ebp], 0
	jne	SHORT $LN73@FT_Outline
; Line 77
	push	OFFSET $SG12071
	push	77					; 0000004dH
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
	jmp	$LN74@FT_Outline
$LN73@FT_Outline:
; Line 79
	cmp	DWORD PTR _func_interface$[ebp], 0
	jne	SHORT $LN72@FT_Outline
; Line 80
	push	OFFSET $SG12073
	push	80					; 00000050H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN74@FT_Outline
$LN72@FT_Outline:
; Line 82
	mov	eax, DWORD PTR _func_interface$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _shift$[ebp], ecx
; Line 83
	mov	edx, DWORD PTR _func_interface$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _delta$[ebp], eax
; Line 84
	mov	DWORD PTR _first$[ebp], 0
; Line 86
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN71@FT_Outline
$LN70@FT_Outline:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN71@FT_Outline:
	mov	edx, DWORD PTR _outline$[ebp]
	movsx	eax, WORD PTR [edx]
	cmp	DWORD PTR _n$[ebp], eax
	jge	$LN69@FT_Outline
$LN68@FT_Outline:
; Line 91
	mov	ecx, 4
	shl	ecx, 3
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN65@FT_Outline
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	push	OFFSET $SG12082
	call	_FT_Message
	add	esp, 8
$LN65@FT_Outline:
	xor	eax, eax
	jne	SHORT $LN68@FT_Outline
; Line 93
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _n$[ebp]
	movsx	ecx, WORD PTR [edx+eax*2]
	mov	DWORD PTR _last$7[ebp], ecx
; Line 94
	cmp	DWORD PTR _last$7[ebp], 0
	jge	SHORT $LN64@FT_Outline
; Line 95
	jmp	$Invalid_Outline$89
$LN64@FT_Outline:
; Line 96
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _last$7[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _limit$[ebp], edx
; Line 98
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _first$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _v_start$[ebp], eax
	mov	DWORD PTR _v_start$[ebp+4], ecx
; Line 99
	mov	edx, DWORD PTR _v_start$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	sub	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _v_start$[ebp], edx
; Line 100
	mov	eax, DWORD PTR _v_start$[ebp+4]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	eax, cl
	sub	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _v_start$[ebp+4], eax
; Line 102
	mov	ecx, DWORD PTR _outline$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _last$7[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [edx+eax*8+4]
	mov	DWORD PTR _v_last$[ebp], ecx
	mov	DWORD PTR _v_last$[ebp+4], edx
; Line 103
	mov	eax, DWORD PTR _v_last$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	eax, cl
	sub	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _v_last$[ebp], eax
; Line 104
	mov	edx, DWORD PTR _v_last$[ebp+4]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	sub	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _v_last$[ebp+4], edx
; Line 106
	mov	eax, DWORD PTR _v_start$[ebp]
	mov	DWORD PTR _v_control$[ebp], eax
	mov	ecx, DWORD PTR _v_start$[ebp+4]
	mov	DWORD PTR _v_control$[ebp+4], ecx
; Line 108
	mov	edx, DWORD PTR _outline$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _first$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _point$[ebp], edx
; Line 109
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _first$[ebp]
	mov	DWORD PTR _tags$[ebp], ecx
; Line 110
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _tags$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	and	edx, 3
	mov	DWORD PTR _tag$[ebp], edx
; Line 113
	cmp	DWORD PTR _tag$[ebp], 2
	jne	SHORT $LN63@FT_Outline
; Line 114
	jmp	$Invalid_Outline$89
$LN63@FT_Outline:
; Line 117
	cmp	DWORD PTR _tag$[ebp], 0
	jne	SHORT $LN62@FT_Outline
; Line 120
	mov	eax, DWORD PTR _outline$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _last$7[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	and	eax, 3
	cmp	eax, 1
	jne	SHORT $LN61@FT_Outline
; Line 123
	mov	ecx, DWORD PTR _v_last$[ebp]
	mov	DWORD PTR _v_start$[ebp], ecx
	mov	edx, DWORD PTR _v_last$[ebp+4]
	mov	DWORD PTR _v_start$[ebp+4], edx
; Line 124
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 8
	mov	DWORD PTR _limit$[ebp], eax
; Line 126
	jmp	SHORT $LN60@FT_Outline
$LN61@FT_Outline:
; Line 131
	mov	eax, DWORD PTR _v_start$[ebp]
	add	eax, DWORD PTR _v_last$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_start$[ebp], eax
; Line 132
	mov	eax, DWORD PTR _v_start$[ebp+4]
	add	eax, DWORD PTR _v_last$[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_start$[ebp+4], eax
$LN60@FT_Outline:
; Line 136
	mov	ecx, DWORD PTR _point$[ebp]
	sub	ecx, 8
	mov	DWORD PTR _point$[ebp], ecx
; Line 137
	mov	edx, DWORD PTR _tags$[ebp]
	sub	edx, 1
	mov	DWORD PTR _tags$[ebp], edx
$LN62@FT_Outline:
; Line 141
	mov	eax, 4
	shl	eax, 3
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN56@FT_Outline
	cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG12093
	call	_FT_Message
	add	esp, 20					; 00000014H
$LN56@FT_Outline:
	xor	ecx, ecx
	jne	SHORT $LN62@FT_Outline
; Line 142
	mov	esi, esp
	mov	edx, DWORD PTR _user$[ebp]
	push	edx
	lea	eax, DWORD PTR _v_start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _func_interface$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 143
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN55@FT_Outline
; Line 144
	jmp	$Exit$90
$LN55@FT_Outline:
; Line 146
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN53@FT_Outline
; Line 148
	mov	ecx, DWORD PTR _point$[ebp]
	add	ecx, 8
	mov	DWORD PTR _point$[ebp], ecx
; Line 149
	mov	edx, DWORD PTR _tags$[ebp]
	add	edx, 1
	mov	DWORD PTR _tags$[ebp], edx
; Line 151
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tags$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	and	eax, 3
	mov	DWORD PTR _tag$[ebp], eax
; Line 152
	mov	ecx, DWORD PTR _tag$[ebp]
	mov	DWORD PTR tv191[ebp], ecx
	cmp	DWORD PTR tv191[ebp], 0
	je	$LN44@FT_Outline
	cmp	DWORD PTR tv191[ebp], 1
	je	SHORT $LN50@FT_Outline
	jmp	$LN26@FT_Outline
$LN50@FT_Outline:
; Line 159
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	eax, cl
	sub	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _vec$6[ebp], eax
; Line 160
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	sub	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _vec$6[ebp+4], edx
$LN49@FT_Outline:
; Line 163
	mov	eax, 4
	shl	eax, 3
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN46@FT_Outline
	cvtsi2sd xmm0, DWORD PTR _vec$6[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _vec$6[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG12109
	call	_FT_Message
	add	esp, 20					; 00000014H
$LN46@FT_Outline:
	xor	ecx, ecx
	jne	SHORT $LN49@FT_Outline
; Line 164
	mov	esi, esp
	mov	edx, DWORD PTR _user$[ebp]
	push	edx
	lea	eax, DWORD PTR _vec$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _func_interface$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 165
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN45@FT_Outline
; Line 166
	jmp	$Exit$90
$LN45@FT_Outline:
; Line 167
	jmp	$LN55@FT_Outline
$LN44@FT_Outline:
; Line 171
	mov	eax, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	sub	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _v_control$[ebp], edx
; Line 172
	mov	eax, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	sub	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _v_control$[ebp+4], edx
$Do_Conic$91:
; Line 175
	mov	eax, DWORD PTR _point$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN43@FT_Outline
; Line 181
	mov	ecx, DWORD PTR _point$[ebp]
	add	ecx, 8
	mov	DWORD PTR _point$[ebp], ecx
; Line 182
	mov	edx, DWORD PTR _tags$[ebp]
	add	edx, 1
	mov	DWORD PTR _tags$[ebp], edx
; Line 183
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tags$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	and	eax, 3
	mov	DWORD PTR _tag$[ebp], eax
; Line 185
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	sub	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _vec$5[ebp], edx
; Line 186
	mov	eax, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	sub	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _vec$5[ebp+4], edx
; Line 188
	cmp	DWORD PTR _tag$[ebp], 1
	jne	$LN42@FT_Outline
$LN41@FT_Outline:
; Line 193
	mov	eax, 4
	shl	eax, 3
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN38@FT_Outline
	cvtsi2sd xmm0, DWORD PTR _v_control$[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _v_control$[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _vec$5[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _vec$5[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG12121
	call	_FT_Message
	add	esp, 36					; 00000024H
$LN38@FT_Outline:
	xor	ecx, ecx
	jne	SHORT $LN41@FT_Outline
; Line 194
	mov	esi, esp
	mov	edx, DWORD PTR _user$[ebp]
	push	edx
	lea	eax, DWORD PTR _vec$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_control$[ebp]
	push	ecx
	mov	edx, DWORD PTR _func_interface$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 195
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN37@FT_Outline
; Line 196
	jmp	$Exit$90
$LN37@FT_Outline:
; Line 197
	jmp	$LN55@FT_Outline
$LN42@FT_Outline:
; Line 200
	cmp	DWORD PTR _tag$[ebp], 0
	je	SHORT $LN36@FT_Outline
; Line 201
	jmp	$Invalid_Outline$89
$LN36@FT_Outline:
; Line 203
	mov	eax, DWORD PTR _v_control$[ebp]
	add	eax, DWORD PTR _vec$5[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_middle$4[ebp], eax
; Line 204
	mov	eax, DWORD PTR _v_control$[ebp+4]
	add	eax, DWORD PTR _vec$5[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _v_middle$4[ebp+4], eax
$LN35@FT_Outline:
; Line 209
	mov	ecx, 4
	shl	ecx, 3
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN32@FT_Outline
	cvtsi2sd xmm0, DWORD PTR _v_control$[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _v_control$[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _v_middle$4[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _v_middle$4[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG12128
	call	_FT_Message
	add	esp, 36					; 00000024H
$LN32@FT_Outline:
	xor	edx, edx
	jne	SHORT $LN35@FT_Outline
; Line 210
	mov	esi, esp
	mov	eax, DWORD PTR _user$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_middle$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _v_control$[ebp]
	push	edx
	mov	eax, DWORD PTR _func_interface$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 211
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@FT_Outline
; Line 212
	jmp	$Exit$90
$LN31@FT_Outline:
; Line 214
	mov	edx, DWORD PTR _vec$5[ebp]
	mov	DWORD PTR _v_control$[ebp], edx
	mov	eax, DWORD PTR _vec$5[ebp+4]
	mov	DWORD PTR _v_control$[ebp+4], eax
; Line 215
	jmp	$Do_Conic$91
$LN43@FT_Outline:
; Line 221
	mov	ecx, 4
	shl	ecx, 3
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN27@FT_Outline
	cvtsi2sd xmm0, DWORD PTR _v_control$[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _v_control$[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG12134
	call	_FT_Message
	add	esp, 36					; 00000024H
$LN27@FT_Outline:
	xor	edx, edx
	jne	SHORT $LN43@FT_Outline
; Line 222
	mov	esi, esp
	mov	eax, DWORD PTR _user$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_start$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v_control$[ebp]
	push	edx
	mov	eax, DWORD PTR _func_interface$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 223
	jmp	$Close$92
$LN26@FT_Outline:
; Line 231
	mov	edx, DWORD PTR _point$[ebp]
	add	edx, 8
	cmp	edx, DWORD PTR _limit$[ebp]
	ja	SHORT $LN24@FT_Outline
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _tags$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	and	edx, 3
	cmp	edx, 2
	je	SHORT $LN25@FT_Outline
$LN24@FT_Outline:
; Line 232
	jmp	$Invalid_Outline$89
$LN25@FT_Outline:
; Line 234
	mov	eax, DWORD PTR _point$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _point$[ebp], eax
; Line 235
	mov	ecx, DWORD PTR _tags$[ebp]
	add	ecx, 2
	mov	DWORD PTR _tags$[ebp], ecx
; Line 237
	mov	edx, 8
	imul	eax, edx, -2
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	sub	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _vec1$3[ebp], edx
; Line 238
	mov	eax, 8
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	eax, cl
	sub	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _vec1$3[ebp+4], eax
; Line 240
	mov	ecx, 8
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	sub	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _vec2$2[ebp], edx
; Line 241
	mov	eax, 8
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	eax, cl
	sub	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _vec2$2[ebp+4], eax
; Line 243
	mov	ecx, DWORD PTR _point$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	ja	$LN23@FT_Outline
; Line 248
	mov	edx, DWORD PTR _point$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	eax, cl
	sub	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _vec$1[ebp], eax
; Line 249
	mov	ecx, DWORD PTR _point$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	sub	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _vec$1[ebp+4], edx
$LN22@FT_Outline:
; Line 255
	mov	eax, 4
	shl	eax, 3
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	$LN19@FT_Outline
	cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _vec$1[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _vec$1[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG12147
	call	_FT_Message
	add	esp, 52					; 00000034H
$LN19@FT_Outline:
	xor	ecx, ecx
	jne	$LN22@FT_Outline
; Line 256
	mov	esi, esp
	mov	edx, DWORD PTR _user$[ebp]
	push	edx
	lea	eax, DWORD PTR _vec$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec2$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _vec1$3[ebp]
	push	edx
	mov	eax, DWORD PTR _func_interface$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 257
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@FT_Outline
; Line 258
	jmp	$Exit$90
$LN18@FT_Outline:
; Line 259
	jmp	$LN55@FT_Outline
$LN23@FT_Outline:
; Line 266
	mov	edx, 4
	shl	edx, 3
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	$LN14@FT_Outline
	cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG12153
	call	_FT_Message
	add	esp, 52					; 00000034H
$LN14@FT_Outline:
	xor	eax, eax
	jne	$LN23@FT_Outline
; Line 267
	mov	esi, esp
	mov	ecx, DWORD PTR _user$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v_start$[ebp]
	push	edx
	lea	eax, DWORD PTR _vec2$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec1$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _func_interface$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 268
	jmp	SHORT $Close$92
; Line 271
	jmp	$LN55@FT_Outline
$LN53@FT_Outline:
; Line 275
	mov	ecx, 4
	shl	ecx, 3
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN10@FT_Outline
	cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG12158
	call	_FT_Message
	add	esp, 20					; 00000014H
$LN10@FT_Outline:
	xor	edx, edx
	jne	SHORT $LN53@FT_Outline
; Line 276
	mov	esi, esp
	mov	eax, DWORD PTR _user$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _func_interface$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$Close$92:
; Line 279
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@FT_Outline
; Line 280
	jmp	SHORT $Exit$90
$LN9@FT_Outline:
; Line 282
	mov	ecx, DWORD PTR _last$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _first$[ebp], ecx
; Line 283
	jmp	$LN70@FT_Outline
$LN69@FT_Outline:
; Line 285
	mov	edx, 4
	shl	edx, 3
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN5@FT_Outline
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	OFFSET $SG12164
	call	_FT_Message
	add	esp, 8
$LN5@FT_Outline:
	xor	ecx, ecx
	jne	SHORT $LN69@FT_Outline
; Line 286
	xor	eax, eax
	jmp	SHORT $LN74@FT_Outline
$Exit$90:
; Line 289
	mov	edx, 4
	shl	edx, 3
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN1@FT_Outline
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	push	OFFSET $SG12169
	call	_FT_Message
	add	esp, 8
$LN1@FT_Outline:
	xor	ecx, ecx
	jne	SHORT $Exit$90
; Line 290
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN74@FT_Outline
$Invalid_Outline$89:
; Line 293
	push	OFFSET $SG12170
	push	293					; 00000125H
	push	20					; 00000014H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 20					; 00000014H
$LN74@FT_Outline:
; Line 294
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN88@FT_Outline
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 188				; 000000bcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN88@FT_Outline:
	DD	9
	DD	$LN87@FT_Outline
$LN87@FT_Outline:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN78@FT_Outline
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN79@FT_Outline
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN80@FT_Outline
	DD	-100					; ffffff9cH
	DD	8
	DD	$LN81@FT_Outline
	DD	-116					; ffffff8cH
	DD	8
	DD	$LN82@FT_Outline
	DD	-132					; ffffff7cH
	DD	8
	DD	$LN83@FT_Outline
	DD	-148					; ffffff6cH
	DD	8
	DD	$LN84@FT_Outline
	DD	-164					; ffffff5cH
	DD	8
	DD	$LN85@FT_Outline
	DD	-180					; ffffff4cH
	DD	8
	DD	$LN86@FT_Outline
$LN86@FT_Outline:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN85@FT_Outline:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	50					; 00000032H
	DB	0
$LN84@FT_Outline:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	0
$LN83@FT_Outline:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN82@FT_Outline:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN81@FT_Outline:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN80@FT_Outline:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN79@FT_Outline:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN78@FT_Outline:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_FT_Outline_Decompose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_data$1 = -12						; size = 4
_next$2 = -8						; size = 4
_cur$ = -4						; size = 4
_list$ = 8						; size = 4
_destroy$ = 12						; size = 4
_memory$ = 16						; size = 4
_user$ = 20						; size = 4
_FT_List_Finalize PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 415
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 419
	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN7@FT_List_Fi
	cmp	DWORD PTR _memory$[ebp], 0
	jne	SHORT $LN8@FT_List_Fi
$LN7@FT_List_Fi:
; Line 420
	jmp	SHORT $LN9@FT_List_Fi
$LN8@FT_List_Fi:
; Line 422
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN6@FT_List_Fi:
; Line 423
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN5@FT_List_Fi
; Line 425
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _next$2[ebp], eax
; Line 426
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _data$1[ebp], edx
; Line 429
	cmp	DWORD PTR _destroy$[ebp], 0
	je	SHORT $LN3@FT_List_Fi
; Line 430
	mov	esi, esp
	mov	eax, DWORD PTR _user$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	DWORD PTR _destroy$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@FT_List_Fi:
; Line 432
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _cur$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@FT_List_Fi
; Line 433
	mov	eax, DWORD PTR _next$2[ebp]
	mov	DWORD PTR _cur$[ebp], eax
; Line 434
	jmp	SHORT $LN6@FT_List_Fi
$LN5@FT_List_Fi:
; Line 436
	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 437
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN9@FT_List_Fi:
; Line 438
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_List_Finalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_next$1 = -12						; size = 4
_error$ = -8						; size = 4
_cur$ = -4						; size = 4
_list$ = 8						; size = 4
_iterator$ = 12						; size = 4
_user$ = 16						; size = 4
_FT_List_Iterate PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 382
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 384
	mov	DWORD PTR _error$[ebp], 0
; Line 387
	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN4@FT_List_It
	cmp	DWORD PTR _iterator$[ebp], 0
	jne	SHORT $LN5@FT_List_It
$LN4@FT_List_It:
; Line 388
	push	OFFSET $SG14016
	push	388					; 00000184H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN6@FT_List_It
$LN5@FT_List_It:
; Line 390
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@FT_List_It:
; Line 392
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@FT_List_It
; Line 394
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _next$1[ebp], eax
; Line 397
	mov	esi, esp
	mov	ecx, DWORD PTR _user$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	DWORD PTR _iterator$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 398
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@FT_List_It
; Line 399
	jmp	SHORT $LN2@FT_List_It
$LN1@FT_List_It:
; Line 401
	mov	eax, DWORD PTR _next$1[ebp]
	mov	DWORD PTR _cur$[ebp], eax
; Line 402
	jmp	SHORT $LN3@FT_List_It
$LN2@FT_List_It:
; Line 404
	mov	eax, DWORD PTR _error$[ebp]
$LN6@FT_List_It:
; Line 405
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_List_Iterate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_after$ = -8						; size = 4
_before$ = -4						; size = 4
_list$ = 8						; size = 4
_node$ = 12						; size = 4
_FT_List_Up PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 348
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 352
	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN4@FT_List_Up
	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN5@FT_List_Up
$LN4@FT_List_Up:
; Line 353
	jmp	SHORT $LN6@FT_List_Up
$LN5@FT_List_Up:
; Line 355
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _before$[ebp], ecx
; Line 356
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _after$[ebp], eax
; Line 359
	cmp	DWORD PTR _before$[ebp], 0
	jne	SHORT $LN3@FT_List_Up
; Line 360
	jmp	SHORT $LN6@FT_List_Up
$LN3@FT_List_Up:
; Line 362
	mov	ecx, DWORD PTR _before$[ebp]
	mov	edx, DWORD PTR _after$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 364
	cmp	DWORD PTR _after$[ebp], 0
	je	SHORT $LN2@FT_List_Up
; Line 365
	mov	eax, DWORD PTR _after$[ebp]
	mov	ecx, DWORD PTR _before$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 366
	jmp	SHORT $LN1@FT_List_Up
$LN2@FT_List_Up:
; Line 367
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR _before$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN1@FT_List_Up:
; Line 369
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 370
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+4], ecx
; Line 371
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 372
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx], eax
$LN6@FT_List_Up:
; Line 373
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_List_Up ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_after$ = -8						; size = 4
_before$ = -4						; size = 4
_list$ = 8						; size = 4
_node$ = 12						; size = 4
_FT_List_Remove PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 321
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 325
	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN5@FT_List_Re
	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN6@FT_List_Re
$LN5@FT_List_Re:
; Line 326
	jmp	SHORT $LN7@FT_List_Re
$LN6@FT_List_Re:
; Line 328
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _before$[ebp], ecx
; Line 329
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _after$[ebp], eax
; Line 331
	cmp	DWORD PTR _before$[ebp], 0
	je	SHORT $LN4@FT_List_Re
; Line 332
	mov	ecx, DWORD PTR _before$[ebp]
	mov	edx, DWORD PTR _after$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 333
	jmp	SHORT $LN3@FT_List_Re
$LN4@FT_List_Re:
; Line 334
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _after$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@FT_List_Re:
; Line 336
	cmp	DWORD PTR _after$[ebp], 0
	je	SHORT $LN2@FT_List_Re
; Line 337
	mov	edx, DWORD PTR _after$[ebp]
	mov	eax, DWORD PTR _before$[ebp]
	mov	DWORD PTR [edx], eax
; Line 338
	jmp	SHORT $LN7@FT_List_Re
$LN2@FT_List_Re:
; Line 339
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR _before$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN7@FT_List_Re:
; Line 340
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_List_Remove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_after$ = -4						; size = 4
_list$ = 8						; size = 4
_node$ = 12						; size = 4
_FT_List_Insert PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 295
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 299
	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN3@FT_List_In
	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN4@FT_List_In
$LN3@FT_List_In:
; Line 300
	jmp	SHORT $LN5@FT_List_In
$LN4@FT_List_In:
; Line 302
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _after$[ebp], ecx
; Line 304
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _after$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 305
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 307
	cmp	DWORD PTR _after$[ebp], 0
	jne	SHORT $LN2@FT_List_In
; Line 308
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 309
	jmp	SHORT $LN1@FT_List_In
$LN2@FT_List_In:
; Line 310
	mov	ecx, DWORD PTR _after$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@FT_List_In:
; Line 312
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@FT_List_In:
; Line 313
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_List_Insert ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_before$ = -4						; size = 4
_list$ = 8						; size = 4
_node$ = 12						; size = 4
_FT_List_Add PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 269
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 273
	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN3@FT_List_Ad
	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN4@FT_List_Ad
$LN3@FT_List_Ad:
; Line 274
	jmp	SHORT $LN5@FT_List_Ad
$LN4@FT_List_Ad:
; Line 276
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _before$[ebp], ecx
; Line 278
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 279
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _before$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 281
	cmp	DWORD PTR _before$[ebp], 0
	je	SHORT $LN2@FT_List_Ad
; Line 282
	mov	edx, DWORD PTR _before$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 283
	jmp	SHORT $LN1@FT_List_Ad
$LN2@FT_List_Ad:
; Line 284
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@FT_List_Ad:
; Line 286
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN5@FT_List_Ad:
; Line 287
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_List_Add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cur$ = -4						; size = 4
_list$ = 8						; size = 4
_data$ = 12						; size = 4
_FT_List_Find PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 244
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 248
	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN4@FT_List_Fi
; Line 249
	xor	eax, eax
	jmp	SHORT $LN5@FT_List_Fi
$LN4@FT_List_Fi:
; Line 251
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@FT_List_Fi:
; Line 252
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@FT_List_Fi
; Line 254
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _data$[ebp]
	jne	SHORT $LN1@FT_List_Fi
; Line 255
	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN5@FT_List_Fi
$LN1@FT_List_Fi:
; Line 257
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cur$[ebp], edx
; Line 258
	jmp	SHORT $LN3@FT_List_Fi
$LN2@FT_List_Fi:
; Line 260
	xor	eax, eax
$LN5@FT_List_Fi:
; Line 261
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_List_Find ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_current$ = -8						; size = 4
_base$ = -4						; size = 4
_loader$ = 8						; size = 4
_FT_GlyphLoader_Adjust_Subglyphs PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 188
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _base$[ebp], eax
; Line 189
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _current$[ebp], ecx
; Line 192
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+28]
	shl	eax, 5
	mov	ecx, DWORD PTR _base$[ebp]
	add	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 193
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_GlyphLoader_Adjust_Subglyphs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_current$ = -8						; size = 4
_base$ = -4						; size = 4
_loader$ = 8						; size = 4
_FT_GlyphLoader_Adjust_Points PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 145
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _base$[ebp], eax
; Line 146
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _current$[ebp], ecx
; Line 149
	mov	edx, DWORD PTR _base$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 150
	mov	edx, DWORD PTR _base$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _base$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 151
	mov	eax, DWORD PTR _base$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 154
	mov	eax, DWORD PTR _loader$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN2@FT_GlyphLo
; Line 157
	mov	edx, DWORD PTR _base$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+76], eax
; Line 160
	mov	edx, DWORD PTR _base$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+80], eax
$LN2@FT_GlyphLo:
; Line 162
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_GlyphLoader_Adjust_Points ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -12						; size = 4
_hi$ = -8						; size = 4
_lo$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_FT_Add64 PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 342
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 346
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _lo$[ebp], ecx
; Line 347
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _lo$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN3@FT_Add64
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@FT_Add64
$LN3@FT_Add64:
	mov	DWORD PTR tv72[ebp], 0
$LN4@FT_Add64:
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR [ecx+4]
	add	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _hi$[ebp], eax
; Line 349
	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR _lo$[ebp]
	mov	DWORD PTR [edx], eax
; Line 350
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _hi$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 351
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Add64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_q$ = -8						; size = 4
_r$ = -4						; size = 4
_hi$ = 8						; size = 4
_lo$ = 12						; size = 4
_y$ = 16						; size = 4
_ft_div64by32 PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 303
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 308
	mov	eax, DWORD PTR _hi$[ebp]
	cmp	eax, DWORD PTR _y$[ebp]
	jb	SHORT $LN5@ft_div64by
; Line 309
	mov	eax, 2147483647				; 7fffffffH
	jmp	$LN6@ft_div64by
$LN5@ft_div64by:
; Line 316
	mov	ecx, DWORD PTR _hi$[ebp]
	push	ecx
	call	_FT_MSB
	add	esp, 4
	mov	edx, 31					; 0000001fH
	sub	edx, eax
	mov	DWORD PTR _i$[ebp], edx
; Line 317
	mov	eax, DWORD PTR _hi$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	eax, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _lo$[ebp]
	shr	edx, cl
	or	eax, edx
	mov	DWORD PTR _r$[ebp], eax
	mov	eax, DWORD PTR _lo$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	eax, cl
	mov	DWORD PTR _lo$[ebp], eax
; Line 318
	mov	eax, DWORD PTR _r$[ebp]
	xor	edx, edx
	div	DWORD PTR _y$[ebp]
	mov	DWORD PTR _q$[ebp], eax
; Line 319
	mov	ecx, DWORD PTR _q$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _r$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _r$[ebp], edx
; Line 321
	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN4@ft_div64by:
; Line 324
	mov	ecx, DWORD PTR _q$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _q$[ebp], ecx
; Line 325
	mov	edx, DWORD PTR _r$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _lo$[ebp]
	shr	eax, 31					; 0000001fH
	or	edx, eax
	mov	DWORD PTR _r$[ebp], edx
	mov	ecx, DWORD PTR _lo$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _lo$[ebp], ecx
; Line 327
	mov	edx, DWORD PTR _r$[ebp]
	cmp	edx, DWORD PTR _y$[ebp]
	jb	SHORT $LN3@ft_div64by
; Line 329
	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 330
	mov	ecx, DWORD PTR _q$[ebp]
	or	ecx, 1
	mov	DWORD PTR _q$[ebp], ecx
$LN3@ft_div64by:
; Line 332
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jne	SHORT $LN4@ft_div64by
; Line 334
	mov	eax, DWORD PTR _q$[ebp]
$LN6@ft_div64by:
; Line 335
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_div64by32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -40						; size = 4
tv74 = -36						; size = 4
_i2$ = -32						; size = 4
_i1$ = -28						; size = 4
_hi$ = -24						; size = 4
_lo$ = -20						; size = 4
_hi2$ = -16						; size = 4
_lo2$ = -12						; size = 4
_hi1$ = -8						; size = 4
_lo1$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_ft_multo64 PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 271
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 275
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _lo1$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR _hi1$[ebp], ecx
; Line 276
	mov	edx, DWORD PTR _y$[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _lo2$[ebp], edx
	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 16					; 00000010H
	mov	DWORD PTR _hi2$[ebp], eax
; Line 278
	mov	ecx, DWORD PTR _lo1$[ebp]
	imul	ecx, DWORD PTR _lo2$[ebp]
	mov	DWORD PTR _lo$[ebp], ecx
; Line 279
	mov	edx, DWORD PTR _lo1$[ebp]
	imul	edx, DWORD PTR _hi2$[ebp]
	mov	DWORD PTR _i1$[ebp], edx
; Line 280
	mov	eax, DWORD PTR _lo2$[ebp]
	imul	eax, DWORD PTR _hi1$[ebp]
	mov	DWORD PTR _i2$[ebp], eax
; Line 281
	mov	ecx, DWORD PTR _hi1$[ebp]
	imul	ecx, DWORD PTR _hi2$[ebp]
	mov	DWORD PTR _hi$[ebp], ecx
; Line 284
	mov	edx, DWORD PTR _i1$[ebp]
	add	edx, DWORD PTR _i2$[ebp]
	mov	DWORD PTR _i1$[ebp], edx
; Line 285
	mov	eax, DWORD PTR _i1$[ebp]
	cmp	eax, DWORD PTR _i2$[ebp]
	jae	SHORT $LN3@ft_multo64
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@ft_multo64
$LN3@ft_multo64:
	mov	DWORD PTR tv74[ebp], 0
$LN4@ft_multo64:
	mov	ecx, DWORD PTR tv74[ebp]
	shl	ecx, 16					; 00000010H
	add	ecx, DWORD PTR _hi$[ebp]
	mov	DWORD PTR _hi$[ebp], ecx
; Line 287
	mov	edx, DWORD PTR _i1$[ebp]
	shr	edx, 16					; 00000010H
	add	edx, DWORD PTR _hi$[ebp]
	mov	DWORD PTR _hi$[ebp], edx
; Line 288
	mov	eax, DWORD PTR _i1$[ebp]
	shl	eax, 16					; 00000010H
	mov	DWORD PTR _i1$[ebp], eax
; Line 291
	mov	ecx, DWORD PTR _lo$[ebp]
	add	ecx, DWORD PTR _i1$[ebp]
	mov	DWORD PTR _lo$[ebp], ecx
; Line 292
	mov	edx, DWORD PTR _lo$[ebp]
	cmp	edx, DWORD PTR _i1$[ebp]
	jae	SHORT $LN5@ft_multo64
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN6@ft_multo64
$LN5@ft_multo64:
	mov	DWORD PTR tv82[ebp], 0
$LN6@ft_multo64:
	mov	eax, DWORD PTR _hi$[ebp]
	add	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR _hi$[ebp], eax
; Line 294
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _lo$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 295
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _hi$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 296
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_multo64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$ = -12						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_FT_Hypot PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 159
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 163
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _v$[ebp], eax
; Line 164
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _v$[ebp+4], ecx
; Line 166
	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_FT_Vector_Length
	add	esp, 4
; Line 167
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@FT_Hypot
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@FT_Hypot:
	DD	1
	DD	$LN4@FT_Hypot
$LN4@FT_Hypot:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@FT_Hypot
$LN3@FT_Hypot:
	DB	118					; 00000076H
	DB	0
_FT_Hypot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -4						; size = 4
_z$ = 8							; size = 4
_FT_MSB	PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 117
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 118
	mov	DWORD PTR _shift$[ebp], 0
; Line 122
	mov	eax, DWORD PTR _z$[ebp]
	and	eax, -65536				; ffff0000H
	je	SHORT $LN5@FT_MSB
; Line 124
	mov	ecx, DWORD PTR _z$[ebp]
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR _z$[ebp], ecx
; Line 125
	mov	edx, DWORD PTR _shift$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _shift$[ebp], edx
$LN5@FT_MSB:
; Line 127
	mov	eax, DWORD PTR _z$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN4@FT_MSB
; Line 129
	mov	ecx, DWORD PTR _z$[ebp]
	shr	ecx, 8
	mov	DWORD PTR _z$[ebp], ecx
; Line 130
	mov	edx, DWORD PTR _shift$[ebp]
	add	edx, 8
	mov	DWORD PTR _shift$[ebp], edx
$LN4@FT_MSB:
; Line 132
	mov	eax, DWORD PTR _z$[ebp]
	and	eax, 240				; 000000f0H
	je	SHORT $LN3@FT_MSB
; Line 134
	mov	ecx, DWORD PTR _z$[ebp]
	shr	ecx, 4
	mov	DWORD PTR _z$[ebp], ecx
; Line 135
	mov	edx, DWORD PTR _shift$[ebp]
	add	edx, 4
	mov	DWORD PTR _shift$[ebp], edx
$LN3@FT_MSB:
; Line 137
	mov	eax, DWORD PTR _z$[ebp]
	and	eax, 12					; 0000000cH
	je	SHORT $LN2@FT_MSB
; Line 139
	mov	ecx, DWORD PTR _z$[ebp]
	shr	ecx, 2
	mov	DWORD PTR _z$[ebp], ecx
; Line 140
	mov	edx, DWORD PTR _shift$[ebp]
	add	edx, 2
	mov	DWORD PTR _shift$[ebp], edx
$LN2@FT_MSB:
; Line 142
	mov	eax, DWORD PTR _z$[ebp]
	and	eax, 2
	je	SHORT $LN1@FT_MSB
; Line 145
	mov	ecx, DWORD PTR _shift$[ebp]
	add	ecx, 1
	mov	DWORD PTR _shift$[ebp], ecx
$LN1@FT_MSB:
; Line 148
	mov	eax, DWORD PTR _shift$[ebp]
; Line 149
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_MSB	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv144 = -60						; size = 4
tv139 = -56						; size = 4
tv131 = -52						; size = 4
tv128 = -48						; size = 4
tv93 = -44						; size = 4
tv85 = -40						; size = 4
tv82 = -36						; size = 4
tv79 = -32						; size = 4
tv71 = -28						; size = 4
tv68 = -24						; size = 4
_d_hypot$ = -20						; size = 4
_d_out$ = -16						; size = 4
_d_in$ = -12						; size = 4
_ay$ = -8						; size = 4
_ax$ = -4						; size = 4
_in_x$ = 8						; size = 4
_in_y$ = 12						; size = 4
_out_x$ = 16						; size = 4
_out_y$ = 20						; size = 4
_ft_corner_is_flat PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 861
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 862
	mov	eax, DWORD PTR _in_x$[ebp]
	add	eax, DWORD PTR _out_x$[ebp]
	mov	DWORD PTR _ax$[ebp], eax
; Line 863
	mov	ecx, DWORD PTR _in_y$[ebp]
	add	ecx, DWORD PTR _out_y$[ebp]
	mov	DWORD PTR _ay$[ebp], ecx
; Line 887
	cmp	DWORD PTR _in_x$[ebp], 0
	jge	SHORT $LN3@ft_corner_
	mov	edx, DWORD PTR _in_x$[ebp]
	neg	edx
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN4@ft_corner_
$LN3@ft_corner_:
	mov	eax, DWORD PTR _in_x$[ebp]
	mov	DWORD PTR tv68[ebp], eax
$LN4@ft_corner_:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _in_x$[ebp], ecx
	cmp	DWORD PTR _in_y$[ebp], 0
	jge	SHORT $LN5@ft_corner_
	mov	edx, DWORD PTR _in_y$[ebp]
	neg	edx
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN6@ft_corner_
$LN5@ft_corner_:
	mov	eax, DWORD PTR _in_y$[ebp]
	mov	DWORD PTR tv71[ebp], eax
$LN6@ft_corner_:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _in_y$[ebp], ecx
	mov	edx, DWORD PTR _in_x$[ebp]
	cmp	edx, DWORD PTR _in_y$[ebp]
	jle	SHORT $LN7@ft_corner_
	imul	eax, DWORD PTR _in_y$[ebp], 3
	sar	eax, 3
	add	eax, DWORD PTR _in_x$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN8@ft_corner_
$LN7@ft_corner_:
	imul	ecx, DWORD PTR _in_x$[ebp], 3
	sar	ecx, 3
	add	ecx, DWORD PTR _in_y$[ebp]
	mov	DWORD PTR tv79[ebp], ecx
$LN8@ft_corner_:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _d_in$[ebp], edx
; Line 888
	cmp	DWORD PTR _out_x$[ebp], 0
	jge	SHORT $LN9@ft_corner_
	mov	eax, DWORD PTR _out_x$[ebp]
	neg	eax
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN10@ft_corner_
$LN9@ft_corner_:
	mov	ecx, DWORD PTR _out_x$[ebp]
	mov	DWORD PTR tv82[ebp], ecx
$LN10@ft_corner_:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _out_x$[ebp], edx
	cmp	DWORD PTR _out_y$[ebp], 0
	jge	SHORT $LN11@ft_corner_
	mov	eax, DWORD PTR _out_y$[ebp]
	neg	eax
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN12@ft_corner_
$LN11@ft_corner_:
	mov	ecx, DWORD PTR _out_y$[ebp]
	mov	DWORD PTR tv85[ebp], ecx
$LN12@ft_corner_:
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _out_y$[ebp], edx
	mov	eax, DWORD PTR _out_x$[ebp]
	cmp	eax, DWORD PTR _out_y$[ebp]
	jle	SHORT $LN13@ft_corner_
	imul	ecx, DWORD PTR _out_y$[ebp], 3
	sar	ecx, 3
	add	ecx, DWORD PTR _out_x$[ebp]
	mov	DWORD PTR tv93[ebp], ecx
	jmp	SHORT $LN14@ft_corner_
$LN13@ft_corner_:
	imul	edx, DWORD PTR _out_x$[ebp], 3
	sar	edx, 3
	add	edx, DWORD PTR _out_y$[ebp]
	mov	DWORD PTR tv93[ebp], edx
$LN14@ft_corner_:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR _d_out$[ebp], eax
; Line 889
	cmp	DWORD PTR _ax$[ebp], 0
	jge	SHORT $LN15@ft_corner_
	mov	ecx, DWORD PTR _ax$[ebp]
	neg	ecx
	mov	DWORD PTR tv128[ebp], ecx
	jmp	SHORT $LN16@ft_corner_
$LN15@ft_corner_:
	mov	edx, DWORD PTR _ax$[ebp]
	mov	DWORD PTR tv128[ebp], edx
$LN16@ft_corner_:
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR _ax$[ebp], eax
	cmp	DWORD PTR _ay$[ebp], 0
	jge	SHORT $LN17@ft_corner_
	mov	ecx, DWORD PTR _ay$[ebp]
	neg	ecx
	mov	DWORD PTR tv131[ebp], ecx
	jmp	SHORT $LN18@ft_corner_
$LN17@ft_corner_:
	mov	edx, DWORD PTR _ay$[ebp]
	mov	DWORD PTR tv131[ebp], edx
$LN18@ft_corner_:
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR _ay$[ebp], eax
	mov	ecx, DWORD PTR _ax$[ebp]
	cmp	ecx, DWORD PTR _ay$[ebp]
	jle	SHORT $LN19@ft_corner_
	imul	edx, DWORD PTR _ay$[ebp], 3
	sar	edx, 3
	add	edx, DWORD PTR _ax$[ebp]
	mov	DWORD PTR tv139[ebp], edx
	jmp	SHORT $LN20@ft_corner_
$LN19@ft_corner_:
	imul	eax, DWORD PTR _ax$[ebp], 3
	sar	eax, 3
	add	eax, DWORD PTR _ay$[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN20@ft_corner_:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _d_hypot$[ebp], ecx
; Line 895
	mov	edx, DWORD PTR _d_in$[ebp]
	add	edx, DWORD PTR _d_out$[ebp]
	sub	edx, DWORD PTR _d_hypot$[ebp]
	mov	eax, DWORD PTR _d_hypot$[ebp]
	sar	eax, 4
	cmp	edx, eax
	jge	SHORT $LN21@ft_corner_
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN22@ft_corner_
$LN21@ft_corner_:
	mov	DWORD PTR tv144[ebp], 0
$LN22@ft_corner_:
	mov	eax, DWORD PTR tv144[ebp]
; Line 896
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_corner_is_flat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_z2$1 = -32						; size = 8
_z1$2 = -16						; size = 8
_result$ = -4						; size = 4
_in_x$ = 8						; size = 4
_in_y$ = 12						; size = 4
_out_x$ = 16						; size = 4
_out_y$ = 20						; size = 4
_ft_corner_orientation PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 781
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 786
	cmp	DWORD PTR _in_y$[ebp], 0
	jne	SHORT $LN24@ft_corner_
; Line 788
	cmp	DWORD PTR _in_x$[ebp], 0
	jl	SHORT $LN23@ft_corner_
; Line 789
	mov	eax, DWORD PTR _out_y$[ebp]
	mov	DWORD PTR _result$[ebp], eax
; Line 790
	jmp	SHORT $LN22@ft_corner_
$LN23@ft_corner_:
; Line 791
	mov	ecx, DWORD PTR _out_y$[ebp]
	neg	ecx
	mov	DWORD PTR _result$[ebp], ecx
$LN22@ft_corner_:
; Line 793
	jmp	$LN21@ft_corner_
$LN24@ft_corner_:
	cmp	DWORD PTR _in_x$[ebp], 0
	jne	SHORT $LN20@ft_corner_
; Line 795
	cmp	DWORD PTR _in_y$[ebp], 0
	jl	SHORT $LN19@ft_corner_
; Line 796
	mov	edx, DWORD PTR _out_x$[ebp]
	neg	edx
	mov	DWORD PTR _result$[ebp], edx
; Line 797
	jmp	SHORT $LN18@ft_corner_
$LN19@ft_corner_:
; Line 798
	mov	eax, DWORD PTR _out_x$[ebp]
	mov	DWORD PTR _result$[ebp], eax
$LN18@ft_corner_:
; Line 800
	jmp	$LN21@ft_corner_
$LN20@ft_corner_:
	cmp	DWORD PTR _out_y$[ebp], 0
	jne	SHORT $LN16@ft_corner_
; Line 802
	cmp	DWORD PTR _out_x$[ebp], 0
	jl	SHORT $LN15@ft_corner_
; Line 803
	mov	ecx, DWORD PTR _in_y$[ebp]
	mov	DWORD PTR _result$[ebp], ecx
; Line 804
	jmp	SHORT $LN14@ft_corner_
$LN15@ft_corner_:
; Line 805
	mov	edx, DWORD PTR _in_y$[ebp]
	neg	edx
	mov	DWORD PTR _result$[ebp], edx
$LN14@ft_corner_:
; Line 807
	jmp	$LN21@ft_corner_
$LN16@ft_corner_:
	cmp	DWORD PTR _out_x$[ebp], 0
	jne	SHORT $LN12@ft_corner_
; Line 809
	cmp	DWORD PTR _out_y$[ebp], 0
	jl	SHORT $LN11@ft_corner_
; Line 810
	mov	eax, DWORD PTR _in_x$[ebp]
	neg	eax
	mov	DWORD PTR _result$[ebp], eax
; Line 811
	jmp	SHORT $LN10@ft_corner_
$LN11@ft_corner_:
; Line 812
	mov	ecx, DWORD PTR _in_x$[ebp]
	mov	DWORD PTR _result$[ebp], ecx
$LN10@ft_corner_:
; Line 814
	jmp	SHORT $LN21@ft_corner_
$LN12@ft_corner_:
; Line 832
	lea	edx, DWORD PTR _z1$2[ebp]
	push	edx
	mov	eax, DWORD PTR _out_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_x$[ebp]
	push	ecx
	call	_ft_multo64
	add	esp, 12					; 0000000cH
; Line 833
	lea	edx, DWORD PTR _z2$1[ebp]
	push	edx
	mov	eax, DWORD PTR _out_x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_y$[ebp]
	push	ecx
	call	_ft_multo64
	add	esp, 12					; 0000000cH
; Line 835
	mov	edx, DWORD PTR _z1$2[ebp+4]
	cmp	edx, DWORD PTR _z2$1[ebp+4]
	jbe	SHORT $LN8@ft_corner_
; Line 836
	mov	DWORD PTR _result$[ebp], 1
	jmp	SHORT $LN21@ft_corner_
$LN8@ft_corner_:
; Line 837
	mov	eax, DWORD PTR _z1$2[ebp+4]
	cmp	eax, DWORD PTR _z2$1[ebp+4]
	jae	SHORT $LN6@ft_corner_
; Line 838
	mov	DWORD PTR _result$[ebp], -1
	jmp	SHORT $LN21@ft_corner_
$LN6@ft_corner_:
; Line 839
	mov	ecx, DWORD PTR _z1$2[ebp]
	cmp	ecx, DWORD PTR _z2$1[ebp]
	jbe	SHORT $LN4@ft_corner_
; Line 840
	mov	DWORD PTR _result$[ebp], 1
	jmp	SHORT $LN21@ft_corner_
$LN4@ft_corner_:
; Line 841
	mov	edx, DWORD PTR _z1$2[ebp]
	cmp	edx, DWORD PTR _z2$1[ebp]
	jae	SHORT $LN2@ft_corner_
; Line 842
	mov	DWORD PTR _result$[ebp], -1
; Line 843
	jmp	SHORT $LN21@ft_corner_
$LN2@ft_corner_:
; Line 844
	mov	DWORD PTR _result$[ebp], 0
$LN21@ft_corner_:
; Line 850
	mov	eax, DWORD PTR _result$[ebp]
; Line 851
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@ft_corner_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@ft_corner_:
	DD	2
	DD	$LN29@ft_corner_
$LN29@ft_corner_:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN27@ft_corner_
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN28@ft_corner_
$LN28@ft_corner_:
	DB	122					; 0000007aH
	DB	50					; 00000032H
	DB	0
$LN27@ft_corner_:
	DB	122					; 0000007aH
	DB	49					; 00000031H
	DB	0
_ft_corner_orientation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -12						; size = 4
_yz$ = -8						; size = 4
_xz$ = -4						; size = 4
_vector$ = 8						; size = 4
_matrix$ = 12						; size = 4
_scaling$ = 16						; size = 4
_FT_Vector_Transform_Scaled PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 715
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 718
	mov	eax, DWORD PTR _scaling$[ebp]
	shl	eax, 16					; 00000010H
	mov	DWORD PTR _val$[ebp], eax
; Line 721
	cmp	DWORD PTR _vector$[ebp], 0
	je	SHORT $LN1@FT_Vector_
	cmp	DWORD PTR _matrix$[ebp], 0
	jne	SHORT $LN2@FT_Vector_
$LN1@FT_Vector_:
; Line 722
	jmp	$LN3@FT_Vector_
$LN2@FT_Vector_:
; Line 725
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	esi, eax
	mov	DWORD PTR _xz$[ebp], esi
; Line 728
	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	eax, DWORD PTR _matrix$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	esi, eax
	mov	DWORD PTR _yz$[ebp], esi
; Line 730
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _xz$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 731
	mov	edx, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR _yz$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN3@FT_Vector_:
; Line 732
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Vector_Transform_Scaled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = -20						; size = 4
_yy$ = -16						; size = 4
_yx$ = -12						; size = 4
_xy$ = -8						; size = 4
_xx$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_scaling$ = 16						; size = 4
_FT_Matrix_Multiply_Scaled PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 690
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 693
	mov	eax, DWORD PTR _scaling$[ebp]
	shl	eax, 16					; 00000010H
	mov	DWORD PTR _val$[ebp], eax
; Line 696
	cmp	DWORD PTR _a$[ebp], 0
	je	SHORT $LN1@FT_Matrix_
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN2@FT_Matrix_
$LN1@FT_Matrix_:
; Line 697
	jmp	$LN3@FT_Matrix_
$LN2@FT_Matrix_:
; Line 699
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	esi, eax
	mov	DWORD PTR _xx$[ebp], esi
; Line 700
	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	esi, eax
	mov	DWORD PTR _xy$[ebp], esi
; Line 701
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	esi, eax
	mov	DWORD PTR _yx$[ebp], esi
; Line 702
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	add	esi, eax
	mov	DWORD PTR _yy$[ebp], esi
; Line 704
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _xx$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _xy$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 705
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _yx$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _yy$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN3@FT_Matrix_:
; Line 706
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Matrix_Multiply_Scaled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv95 = -28						; size = 4
tv92 = -24						; size = 4
_temp$1 = -16						; size = 8
_s$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_FT_MulDiv_No_Round PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 450
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 451
	mov	DWORD PTR _s$[ebp], 1
; Line 454
	cmp	DWORD PTR _a$[ebp], 0
	je	SHORT $LN17@FT_MulDiv_
	mov	eax, DWORD PTR _b$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jne	SHORT $LN16@FT_MulDiv_
$LN17@FT_MulDiv_:
; Line 455
	mov	eax, DWORD PTR _a$[ebp]
	jmp	$LN19@FT_MulDiv_
$LN16@FT_MulDiv_:
; Line 457
	cmp	DWORD PTR _a$[ebp], 0
	jge	SHORT $LN15@FT_MulDiv_
	mov	ecx, DWORD PTR _a$[ebp]
	neg	ecx
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	neg	edx
	mov	DWORD PTR _s$[ebp], edx
$LN15@FT_MulDiv_:
	xor	eax, eax
	jne	SHORT $LN16@FT_MulDiv_
$LN12@FT_MulDiv_:
; Line 458
	cmp	DWORD PTR _b$[ebp], 0
	jge	SHORT $LN11@FT_MulDiv_
	mov	ecx, DWORD PTR _b$[ebp]
	neg	ecx
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	neg	edx
	mov	DWORD PTR _s$[ebp], edx
$LN11@FT_MulDiv_:
	xor	eax, eax
	jne	SHORT $LN12@FT_MulDiv_
$LN8@FT_MulDiv_:
; Line 459
	cmp	DWORD PTR _c$[ebp], 0
	jge	SHORT $LN7@FT_MulDiv_
	mov	ecx, DWORD PTR _c$[ebp]
	neg	ecx
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	neg	edx
	mov	DWORD PTR _s$[ebp], edx
$LN7@FT_MulDiv_:
	xor	eax, eax
	jne	SHORT $LN8@FT_MulDiv_
; Line 461
	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN4@FT_MulDiv_
; Line 462
	mov	DWORD PTR _a$[ebp], 2147483647		; 7fffffffH
	jmp	SHORT $LN3@FT_MulDiv_
$LN4@FT_MulDiv_:
; Line 464
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	cmp	ecx, 131071				; 0001ffffH
	ja	SHORT $LN2@FT_MulDiv_
; Line 465
	mov	eax, DWORD PTR _a$[ebp]
	imul	eax, DWORD PTR _b$[ebp]
	xor	edx, edx
	div	DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 467
	jmp	SHORT $LN3@FT_MulDiv_
$LN2@FT_MulDiv_:
; Line 472
	lea	edx, DWORD PTR _temp$1[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_ft_multo64
	add	esp, 12					; 0000000cH
; Line 476
	cmp	DWORD PTR _temp$1[ebp+4], 0
	jne	SHORT $LN21@FT_MulDiv_
	mov	eax, DWORD PTR _temp$1[ebp]
	xor	edx, edx
	div	DWORD PTR _c$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN22@FT_MulDiv_
$LN21@FT_MulDiv_:
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _temp$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _temp$1[ebp+4]
	push	ecx
	call	_ft_div64by32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv92[ebp], eax
$LN22@FT_MulDiv_:
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _a$[ebp], edx
$LN3@FT_MulDiv_:
; Line 479
	cmp	DWORD PTR _s$[ebp], 0
	jge	SHORT $LN23@FT_MulDiv_
	mov	eax, DWORD PTR _a$[ebp]
	neg	eax
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN24@FT_MulDiv_
$LN23@FT_MulDiv_:
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv95[ebp], ecx
$LN24@FT_MulDiv_:
	mov	eax, DWORD PTR tv95[ebp]
$LN19@FT_MulDiv_:
; Line 480
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@FT_MulDiv_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN27@FT_MulDiv_:
	DD	1
	DD	$LN26@FT_MulDiv_
$LN26@FT_MulDiv_:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN25@FT_MulDiv_
$LN25@FT_MulDiv_:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_FT_MulDiv_No_Round ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_MulFix_i386 PROC
; File d:\mozilla\modules\freetype2\include\internal\ftcalc.h
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 159
	mov	eax, DWORD PTR _a$[ebp]
; Line 160
	mov	edx, DWORD PTR _b$[ebp]
; Line 161
	imul	edx
; Line 162
	mov	ecx, edx
; Line 163
	sar	ecx, 31					; 0000001fH
; Line 164
	add	ecx, 32768				; 00008000H
; Line 165
	add	eax, ecx
; Line 166
	adc	edx, 0
; Line 167
	shr	eax, 16					; 00000010H
; Line 168
	shl	edx, 16					; 00000010H
; Line 169
	add	eax, edx
; Line 170
	mov	DWORD PTR _result$[ebp], eax
; Line 172
	mov	eax, DWORD PTR _result$[ebp]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_MulFix_i386 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vec$ = 8						; size = 4
_length$ = 12						; size = 4
_angle$ = 16						; size = 4
_FT_Vector_From_Polar PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 495
	push	ebp
	mov	ebp, esp
; Line 496
	cmp	DWORD PTR _vec$[ebp], 0
	jne	SHORT $LN1@FT_Vector_
; Line 497
	jmp	SHORT $LN2@FT_Vector_
$LN1@FT_Vector_:
; Line 499
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 500
	mov	edx, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 502
	mov	eax, DWORD PTR _angle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	call	_FT_Vector_Rotate
	add	esp, 8
$LN2@FT_Vector_:
; Line 503
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Vector_From_Polar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -24						; size = 4
_v$ = -16						; size = 8
_shift$ = -4						; size = 4
_vec$ = 8						; size = 4
_length$ = 12						; size = 4
_angle$ = 16						; size = 4
_FT_Vector_Polarize PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 465
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 470
	cmp	DWORD PTR _vec$[ebp], 0
	je	SHORT $LN2@FT_Vector_
	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN2@FT_Vector_
	cmp	DWORD PTR _angle$[ebp], 0
	jne	SHORT $LN3@FT_Vector_
$LN2@FT_Vector_:
; Line 471
	jmp	SHORT $LN4@FT_Vector_
$LN3@FT_Vector_:
; Line 473
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$[ebp], ecx
	mov	DWORD PTR _v$[ebp+4], edx
; Line 475
	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN1@FT_Vector_
	cmp	DWORD PTR _v$[ebp+4], 0
	jne	SHORT $LN1@FT_Vector_
; Line 476
	jmp	SHORT $LN4@FT_Vector_
$LN1@FT_Vector_:
; Line 478
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_ft_trig_prenorm
	add	esp, 4
	mov	DWORD PTR _shift$[ebp], eax
; Line 479
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_ft_trig_pseudo_polarize
	add	esp, 4
; Line 481
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_ft_trig_downscale
	add	esp, 4
	mov	DWORD PTR _v$[ebp], eax
; Line 484
	cmp	DWORD PTR _shift$[ebp], 0
	jl	SHORT $LN6@FT_Vector_
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN7@FT_Vector_
$LN6@FT_Vector_:
	mov	ecx, DWORD PTR _shift$[ebp]
	neg	ecx
	mov	edx, DWORD PTR _v$[ebp]
	shl	edx, cl
	mov	DWORD PTR tv79[ebp], edx
$LN7@FT_Vector_:
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [eax], ecx
; Line 485
	mov	edx, DWORD PTR _angle$[ebp]
	mov	eax, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR [edx], eax
$LN4@FT_Vector_:
; Line 486
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@FT_Vector_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@FT_Vector_:
	DD	1
	DD	$LN9@FT_Vector_
$LN9@FT_Vector_:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN8@FT_Vector_
$LN8@FT_Vector_:
	DB	118					; 00000076H
	DB	0
_FT_Vector_Polarize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -28						; size = 4
tv69 = -24						; size = 4
_v$ = -16						; size = 8
_shift$ = -4						; size = 4
_vec$ = 8						; size = 4
_FT_Vector_Length PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 426
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 431
	cmp	DWORD PTR _vec$[ebp], 0
	jne	SHORT $LN5@FT_Vector_
; Line 432
	xor	eax, eax
	jmp	$LN6@FT_Vector_
$LN5@FT_Vector_:
; Line 434
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$[ebp], ecx
	mov	DWORD PTR _v$[ebp+4], edx
; Line 437
	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN4@FT_Vector_
; Line 439
	cmp	DWORD PTR _v$[ebp+4], 0
	jge	SHORT $LN8@FT_Vector_
	mov	eax, DWORD PTR _v$[ebp+4]
	neg	eax
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN9@FT_Vector_
$LN8@FT_Vector_:
	mov	ecx, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR tv69[ebp], ecx
$LN9@FT_Vector_:
	mov	eax, DWORD PTR tv69[ebp]
	jmp	SHORT $LN6@FT_Vector_
	jmp	SHORT $LN3@FT_Vector_
$LN4@FT_Vector_:
; Line 441
	cmp	DWORD PTR _v$[ebp+4], 0
	jne	SHORT $LN3@FT_Vector_
; Line 443
	cmp	DWORD PTR _v$[ebp], 0
	jge	SHORT $LN10@FT_Vector_
	mov	edx, DWORD PTR _v$[ebp]
	neg	edx
	mov	DWORD PTR tv73[ebp], edx
	jmp	SHORT $LN11@FT_Vector_
$LN10@FT_Vector_:
	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR tv73[ebp], eax
$LN11@FT_Vector_:
	mov	eax, DWORD PTR tv73[ebp]
	jmp	SHORT $LN6@FT_Vector_
$LN3@FT_Vector_:
; Line 447
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_ft_trig_prenorm
	add	esp, 4
	mov	DWORD PTR _shift$[ebp], eax
; Line 448
	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_ft_trig_pseudo_polarize
	add	esp, 4
; Line 450
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_ft_trig_downscale
	add	esp, 4
	mov	DWORD PTR _v$[ebp], eax
; Line 452
	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@FT_Vector_
; Line 453
	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	add	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	jmp	SHORT $LN6@FT_Vector_
$LN1@FT_Vector_:
; Line 455
	mov	ecx, DWORD PTR _shift$[ebp]
	neg	ecx
	mov	eax, DWORD PTR _v$[ebp]
	shl	eax, cl
$LN6@FT_Vector_:
; Line 456
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@FT_Vector_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@FT_Vector_:
	DD	1
	DD	$LN13@FT_Vector_
$LN13@FT_Vector_:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN12@FT_Vector_
$LN12@FT_Vector_:
	DB	118					; 00000076H
	DB	0
_FT_Vector_Length ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_half$1 = -24						; size = 4
_v$ = -16						; size = 8
_shift$ = -4						; size = 4
_vec$ = 8						; size = 4
_angle$ = 12						; size = 4
_FT_Vector_Rotate PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 386
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 391
	cmp	DWORD PTR _vec$[ebp], 0
	jne	SHORT $LN5@FT_Vector_
; Line 392
	jmp	$LN6@FT_Vector_
$LN5@FT_Vector_:
; Line 394
	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v$[ebp], ecx
; Line 395
	mov	edx, DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _v$[ebp+4], eax
; Line 397
	cmp	DWORD PTR _angle$[ebp], 0
	je	$LN6@FT_Vector_
	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@FT_Vector_
	cmp	DWORD PTR _v$[ebp+4], 0
	je	$LN6@FT_Vector_
$LN3@FT_Vector_:
; Line 399
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_ft_trig_prenorm
	add	esp, 4
	mov	DWORD PTR _shift$[ebp], eax
; Line 400
	mov	edx, DWORD PTR _angle$[ebp]
	push	edx
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_ft_trig_pseudo_rotate
	add	esp, 8
; Line 401
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_ft_trig_downscale
	add	esp, 4
	mov	DWORD PTR _v$[ebp], eax
; Line 402
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	call	_ft_trig_downscale
	add	esp, 4
	mov	DWORD PTR _v$[ebp+4], eax
; Line 404
	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN2@FT_Vector_
; Line 406
	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _half$1[ebp], eax
; Line 409
	mov	edx, DWORD PTR _v$[ebp]
	add	edx, DWORD PTR _half$1[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	sar	eax, 31					; 0000001fH
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 410
	mov	edx, DWORD PTR _v$[ebp+4]
	add	edx, DWORD PTR _half$1[ebp]
	mov	eax, DWORD PTR _v$[ebp+4]
	sar	eax, 31					; 0000001fH
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 412
	jmp	SHORT $LN6@FT_Vector_
$LN2@FT_Vector_:
; Line 414
	mov	edx, DWORD PTR _shift$[ebp]
	neg	edx
	mov	DWORD PTR _shift$[ebp], edx
; Line 415
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 416
	mov	edx, DWORD PTR _v$[ebp+4]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN6@FT_Vector_:
; Line 419
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@FT_Vector_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@FT_Vector_:
	DD	1
	DD	$LN9@FT_Vector_
$LN9@FT_Vector_:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN8@FT_Vector_
$LN8@FT_Vector_:
	DB	118					; 00000076H
	DB	0
_FT_Vector_Rotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vec$ = 8						; size = 4
_angle$ = 12						; size = 4
_FT_Vector_Unit PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 361
	push	ebp
	mov	ebp, esp
; Line 362
	cmp	DWORD PTR _vec$[ebp], 0
	jne	SHORT $LN1@FT_Vector_
; Line 363
	jmp	SHORT $LN2@FT_Vector_
$LN1@FT_Vector_:
; Line 365
	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax], 14408027		; 00dbd95bH
; Line 366
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 367
	mov	edx, DWORD PTR _angle$[ebp]
	push	edx
	mov	eax, DWORD PTR _vec$[ebp]
	push	eax
	call	_ft_trig_pseudo_rotate
	add	esp, 8
; Line 368
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 128				; 00000080H
	sar	edx, 8
	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax], edx
; Line 369
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 128				; 00000080H
	sar	edx, 8
	mov	eax, DWORD PTR _vec$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN2@FT_Vector_:
; Line 370
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Vector_Unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_delta$ = -4						; size = 4
_angle1$ = 8						; size = 4
_angle2$ = 12						; size = 4
_FT_Angle_Diff PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 511
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 512
	mov	eax, DWORD PTR _angle2$[ebp]
	sub	eax, DWORD PTR _angle1$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
; Line 515
	mov	eax, DWORD PTR _delta$[ebp]
	cdq
	mov	ecx, 23592960				; 01680000H
	idiv	ecx
	mov	DWORD PTR _delta$[ebp], edx
; Line 516
	cmp	DWORD PTR _delta$[ebp], 0
	jge	SHORT $LN2@FT_Angle_D
; Line 517
	mov	edx, DWORD PTR _delta$[ebp]
	add	edx, 23592960				; 01680000H
	mov	DWORD PTR _delta$[ebp], edx
$LN2@FT_Angle_D:
; Line 519
	cmp	DWORD PTR _delta$[ebp], 11796480	; 00b40000H
	jle	SHORT $LN1@FT_Angle_D
; Line 520
	mov	eax, DWORD PTR _delta$[ebp]
	sub	eax, 23592960				; 01680000H
	mov	DWORD PTR _delta$[ebp], eax
$LN1@FT_Angle_D:
; Line 522
	mov	eax, DWORD PTR _delta$[ebp]
; Line 523
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Angle_Diff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$ = -12						; size = 8
_dx$ = 8						; size = 4
_dy$ = 12						; size = 4
_FT_Atan2 PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 340
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 344
	cmp	DWORD PTR _dx$[ebp], 0
	jne	SHORT $LN1@FT_Atan2
	cmp	DWORD PTR _dy$[ebp], 0
	jne	SHORT $LN1@FT_Atan2
; Line 345
	xor	eax, eax
	jmp	SHORT $LN2@FT_Atan2
$LN1@FT_Atan2:
; Line 347
	mov	eax, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _v$[ebp], eax
; Line 348
	mov	ecx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _v$[ebp+4], ecx
; Line 349
	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_ft_trig_prenorm
	add	esp, 4
; Line 350
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_ft_trig_pseudo_polarize
	add	esp, 4
; Line 352
	mov	eax, DWORD PTR _v$[ebp+4]
$LN2@FT_Atan2:
; Line 353
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@FT_Atan2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@FT_Atan2:
	DD	1
	DD	$LN5@FT_Atan2
$LN5@FT_Atan2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN4@FT_Atan2
$LN4@FT_Atan2:
	DB	118					; 00000076H
	DB	0
_FT_Atan2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$ = -12						; size = 8
_angle$ = 8						; size = 4
_FT_Tan	PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 323
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 327
	mov	DWORD PTR _v$[ebp], 14408027		; 00dbd95bH
; Line 328
	mov	DWORD PTR _v$[ebp+4], 0
; Line 329
	mov	eax, DWORD PTR _angle$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_ft_trig_pseudo_rotate
	add	esp, 8
; Line 331
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp+4]
	push	eax
	call	_FT_DivFix
	add	esp, 8
; Line 332
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@FT_Tan
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@FT_Tan:
	DD	1
	DD	$LN4@FT_Tan
$LN4@FT_Tan:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@FT_Tan
$LN3@FT_Tan:
	DB	118					; 00000076H
	DB	0
_FT_Tan	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$ = -12						; size = 8
_angle$ = 8						; size = 4
_FT_Cos	PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 298
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 302
	mov	DWORD PTR _v$[ebp], 14408027		; 00dbd95bH
; Line 303
	mov	DWORD PTR _v$[ebp+4], 0
; Line 304
	mov	eax, DWORD PTR _angle$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_ft_trig_pseudo_rotate
	add	esp, 8
; Line 306
	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 128				; 00000080H
	sar	eax, 8
; Line 307
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@FT_Cos
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@FT_Cos:
	DD	1
	DD	$LN4@FT_Cos
$LN4@FT_Cos:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@FT_Cos
$LN3@FT_Cos:
	DB	118					; 00000076H
	DB	0
_FT_Cos	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_angle$ = 8						; size = 4
_FT_Sin	PROC
; File d:\mozilla\modules\freetype2\src\base\fttrigon.c
; Line 314
	push	ebp
	mov	ebp, esp
; Line 315
	mov	eax, 5898240				; 005a0000H
	sub	eax, DWORD PTR _angle$[ebp]
	push	eax
	call	_FT_Cos
	add	esp, 4
; Line 316
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Sin	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nn$ = -8						; size = 4
_scale$ = -4						; size = 4
_face$ = 8						; size = 4
_advances$ = 12						; size = 4
_count$ = 16						; size = 4
_flags$ = 20						; size = 4
__ft_face_scale_advances PROC
; File d:\mozilla\modules\freetype2\src\base\ftadvanc.c
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 36
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1
	je	SHORT $LN7@ft_face_sc
; Line 37
	xor	eax, eax
	jmp	$LN8@ft_face_sc
$LN7@ft_face_sc:
; Line 39
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+88], 0
	jne	SHORT $LN6@ft_face_sc
; Line 40
	push	OFFSET $SG7003
	push	40					; 00000028H
	push	36					; 00000024H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 36					; 00000024H
	jmp	SHORT $LN8@ft_face_sc
$LN6@ft_face_sc:
; Line 42
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN5@ft_face_sc
; Line 43
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _scale$[ebp], edx
; Line 44
	jmp	SHORT $LN4@ft_face_sc
$LN5@ft_face_sc:
; Line 45
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _scale$[ebp], edx
$LN4@ft_face_sc:
; Line 50
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN3@ft_face_sc
$LN2@ft_face_sc:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN3@ft_face_sc:
	mov	ecx, DWORD PTR _nn$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	SHORT $LN1@ft_face_sc
; Line 51
	push	64					; 00000040H
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _nn$[ebp]
	mov	ecx, DWORD PTR _advances$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _nn$[ebp]
	mov	edx, DWORD PTR _advances$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN2@ft_face_sc
$LN1@ft_face_sc:
; Line 53
	xor	eax, eax
$LN8@ft_face_sc:
; Line 54
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ft_face_scale_advances ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv168 = -24						; size = 4
_error$ = -20						; size = 4
_nn$ = -16						; size = 4
_end$ = -12						; size = 4
_num$ = -8						; size = 4
_func$ = -4						; size = 4
_face$ = 8						; size = 4
_start$ = 12						; size = 4
_count$ = 16						; size = 4
_flags$ = 20						; size = 4
_padvances$ = 24					; size = 4
_FT_Get_Advances PROC
; File d:\mozilla\modules\freetype2\src\base\ftadvanc.c
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 118
	mov	DWORD PTR _error$[ebp], 0
; Line 121
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN14@FT_Get_Adv
; Line 122
	push	OFFSET $SG7049
	push	122					; 0000007aH
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN15@FT_Get_Adv
$LN14@FT_Get_Adv:
; Line 124
	cmp	DWORD PTR _padvances$[ebp], 0
	jne	SHORT $LN13@FT_Get_Adv
; Line 125
	push	OFFSET $SG7051
	push	125					; 0000007dH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN15@FT_Get_Adv
$LN13@FT_Get_Adv:
; Line 127
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _num$[ebp], ecx
; Line 128
	mov	edx, DWORD PTR _start$[ebp]
	add	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _end$[ebp], edx
; Line 129
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _num$[ebp]
	jae	SHORT $LN11@FT_Get_Adv
	mov	ecx, DWORD PTR _end$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	jb	SHORT $LN11@FT_Get_Adv
	mov	edx, DWORD PTR _end$[ebp]
	cmp	edx, DWORD PTR _num$[ebp]
	jbe	SHORT $LN12@FT_Get_Adv
$LN11@FT_Get_Adv:
; Line 130
	push	OFFSET $SG7055
	push	130					; 00000082H
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	jmp	$LN15@FT_Get_Adv
$LN12@FT_Get_Adv:
; Line 132
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN10@FT_Get_Adv
; Line 133
	xor	eax, eax
	jmp	$LN15@FT_Get_Adv
$LN10@FT_Get_Adv:
; Line 135
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR _func$[ebp], eax
; Line 136
	cmp	DWORD PTR _func$[ebp], 0
	je	SHORT $LN9@FT_Get_Adv
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 3
	jne	SHORT $LN8@FT_Get_Adv
	mov	edx, DWORD PTR _flags$[ebp]
	sar	edx, 16					; 00000010H
	and	edx, 15					; 0000000fH
	cmp	edx, 1
	jne	SHORT $LN9@FT_Get_Adv
$LN8@FT_Get_Adv:
; Line 138
	mov	esi, esp
	mov	eax, DWORD PTR _padvances$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	DWORD PTR _func$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 139
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN7@FT_Get_Adv
; Line 140
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _padvances$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	__ft_face_scale_advances
	add	esp, 16					; 00000010H
	jmp	$LN15@FT_Get_Adv
$LN7@FT_Get_Adv:
; Line 142
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 7
	je	SHORT $LN9@FT_Get_Adv
; Line 143
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN15@FT_Get_Adv
$LN9@FT_Get_Adv:
; Line 146
	mov	DWORD PTR _error$[ebp], 0
; Line 148
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 536870912				; 20000000H
	je	SHORT $LN5@FT_Get_Adv
; Line 149
	push	OFFSET $SG7063
	push	149					; 00000095H
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	jmp	$LN15@FT_Get_Adv
$LN5@FT_Get_Adv:
; Line 151
	mov	edx, DWORD PTR _flags$[ebp]
	or	edx, 256				; 00000100H
	mov	DWORD PTR _flags$[ebp], edx
; Line 152
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN4@FT_Get_Adv
$LN3@FT_Get_Adv:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN4@FT_Get_Adv:
	mov	ecx, DWORD PTR _nn$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	SHORT $LN2@FT_Get_Adv
; Line 154
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _nn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Load_Glyph
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 155
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@FT_Get_Adv
; Line 156
	jmp	SHORT $LN2@FT_Get_Adv
$LN1@FT_Get_Adv:
; Line 161
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN17@FT_Get_Adv
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [ecx+68]
	shl	edx, 10					; 0000000aH
	mov	DWORD PTR tv168[ebp], edx
	jmp	SHORT $LN18@FT_Get_Adv
$LN17@FT_Get_Adv:
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [ecx+64]
	shl	edx, 10					; 0000000aH
	mov	DWORD PTR tv168[ebp], edx
$LN18@FT_Get_Adv:
	mov	eax, DWORD PTR _nn$[ebp]
	mov	ecx, DWORD PTR _padvances$[ebp]
	mov	edx, DWORD PTR tv168[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 162
	jmp	SHORT $LN3@FT_Get_Adv
$LN2@FT_Get_Adv:
; Line 164
	mov	eax, DWORD PTR _error$[ebp]
$LN15@FT_Get_Adv:
; Line 165
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Advances ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$1 = -8						; size = 4
_func$ = -4						; size = 4
_face$ = 8						; size = 4
_gindex$ = 12						; size = 4
_flags$ = 16						; size = 4
_padvance$ = 20						; size = 4
_FT_Get_Advance PROC
; File d:\mozilla\modules\freetype2\src\base\ftadvanc.c
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 80
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN7@FT_Get_Adv
; Line 81
	push	OFFSET $SG7020
	push	81					; 00000051H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN8@FT_Get_Adv
$LN7@FT_Get_Adv:
; Line 83
	cmp	DWORD PTR _padvance$[ebp], 0
	jne	SHORT $LN6@FT_Get_Adv
; Line 84
	push	OFFSET $SG7022
	push	84					; 00000054H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN8@FT_Get_Adv
$LN6@FT_Get_Adv:
; Line 86
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _gindex$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN5@FT_Get_Adv
; Line 87
	push	OFFSET $SG7025
	push	87					; 00000057H
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	jmp	$LN8@FT_Get_Adv
$LN5@FT_Get_Adv:
; Line 89
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _func$[ebp], edx
; Line 90
	cmp	DWORD PTR _func$[ebp], 0
	je	SHORT $LN4@FT_Get_Adv
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 3
	jne	SHORT $LN3@FT_Get_Adv
	mov	ecx, DWORD PTR _flags$[ebp]
	sar	ecx, 16					; 00000010H
	and	ecx, 15					; 0000000fH
	cmp	ecx, 1
	jne	SHORT $LN4@FT_Get_Adv
$LN3@FT_Get_Adv:
; Line 95
	mov	esi, esp
	mov	edx, DWORD PTR _padvance$[ebp]
	push	edx
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _gindex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	DWORD PTR _func$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$1[ebp], eax
; Line 96
	cmp	DWORD PTR _error$1[ebp], 0
	jne	SHORT $LN2@FT_Get_Adv
; Line 97
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _padvance$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	__ft_face_scale_advances
	add	esp, 16					; 00000010H
	jmp	SHORT $LN8@FT_Get_Adv
$LN2@FT_Get_Adv:
; Line 99
	mov	eax, DWORD PTR _error$1[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 7
	je	SHORT $LN4@FT_Get_Adv
; Line 100
	mov	eax, DWORD PTR _error$1[ebp]
	jmp	SHORT $LN8@FT_Get_Adv
$LN4@FT_Get_Adv:
; Line 103
	mov	ecx, DWORD PTR _padvance$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _gindex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Get_Advances
	add	esp, 20					; 00000014H
$LN8@FT_Get_Adv:
; Line 104
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Advance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv65 = -256						; size = 4
_i$1 = -252						; size = 4
_md5$2 = -244						; size = 16
_ctx$3 = -220						; size = 152
_err$4 = -64						; size = 4
_bitmap$5 = -56						; size = 24
_update$6 = -25						; size = 1
_node$7 = -20						; size = 4
_renderer$ = -12					; size = 4
_error$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_library$ = 8						; size = 4
_slot$ = 12						; size = 4
_render_mode$ = 16					; size = 4
_FT_Render_Glyph_Internal PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4074
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 4075
	mov	DWORD PTR _error$[ebp], 0
; Line 4080
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 1651078259		; 62697473H
	je	SHORT $LN27@FT_Render_
	jmp	SHORT $LN26@FT_Render_
$LN27@FT_Render_:
; Line 4083
	jmp	$LN28@FT_Render_
$LN26@FT_Render_:
; Line 4087
	mov	DWORD PTR _node$7[ebp], 0
; Line 4088
	mov	BYTE PTR _update$6[ebp], 0
; Line 4092
	mov	edx, DWORD PTR _slot$[ebp]
	cmp	DWORD PTR [edx+72], 1869968492		; 6f75746cH
	jne	SHORT $LN25@FT_Render_
; Line 4094
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR _renderer$[ebp], ecx
; Line 4095
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	DWORD PTR _node$7[ebp], eax
; Line 4097
	jmp	SHORT $LN24@FT_Render_
$LN25@FT_Render_:
; Line 4098
	lea	ecx, DWORD PTR _node$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Lookup_Renderer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _renderer$[ebp], eax
$LN24@FT_Render_:
; Line 4100
	mov	DWORD PTR _error$[ebp], 7
$LN23@FT_Render_:
; Line 4101
	cmp	DWORD PTR _renderer$[ebp], 0
	je	SHORT $LN22@FT_Render_
; Line 4103
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _render_mode$[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _renderer$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 4105
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@FT_Render_
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 19					; 00000013H
	je	SHORT $LN21@FT_Render_
$LN20@FT_Render_:
; Line 4106
	jmp	SHORT $LN22@FT_Render_
$LN21@FT_Render_:
; Line 4114
	lea	edx, DWORD PTR _node$7[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_FT_Lookup_Renderer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _renderer$[ebp], eax
; Line 4115
	mov	BYTE PTR _update$6[ebp], 1
; Line 4116
	jmp	SHORT $LN23@FT_Render_
$LN22@FT_Render_:
; Line 4120
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN28@FT_Render_
	movzx	eax, BYTE PTR _update$6[ebp]
	test	eax, eax
	je	SHORT $LN28@FT_Render_
	cmp	DWORD PTR _renderer$[ebp], 0
	je	SHORT $LN28@FT_Render_
; Line 4122
	push	0
	push	0
	mov	ecx, DWORD PTR _renderer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_FT_Set_Renderer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$LN28@FT_Render_:
; Line 4135
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN17@FT_Render_
; Line 4141
	lea	eax, DWORD PTR _bitmap$5[ebp]
	push	eax
	call	_FT_Bitmap_New
	add	esp, 4
; Line 4144
	push	1
	lea	ecx, DWORD PTR _bitmap$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	add	edx, 76					; 0000004cH
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_FT_Bitmap_Convert
	add	esp, 16					; 00000010H
	mov	DWORD PTR _err$4[ebp], eax
; Line 4145
	cmp	DWORD PTR _err$4[ebp], 0
	jne	$LN16@FT_Render_
; Line 4152
	lea	ecx, DWORD PTR _ctx$3[ebp]
	push	ecx
	call	_MD5_Init
	add	esp, 4
; Line 4153
	mov	edx, DWORD PTR _bitmap$5[ebp]
	imul	edx, DWORD PTR _bitmap$5[ebp+8]
	push	edx
	mov	eax, DWORD PTR _bitmap$5[ebp+12]
	push	eax
	lea	ecx, DWORD PTR _ctx$3[ebp]
	push	ecx
	call	_MD5_Update
	add	esp, 12					; 0000000cH
; Line 4154
	lea	edx, DWORD PTR _ctx$3[ebp]
	push	edx
	lea	eax, DWORD PTR _md5$2[ebp]
	push	eax
	call	_MD5_Final
	add	esp, 8
$LN15@FT_Render_:
; Line 4158
	mov	ecx, 4
	shl	ecx, 4
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN14@FT_Render_
	mov	edx, DWORD PTR _bitmap$5[ebp+8]
	push	edx
	mov	eax, DWORD PTR _bitmap$5[ebp]
	push	eax
	push	OFFSET $SG11675
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN14@FT_Render_:
	xor	ecx, ecx
	jne	SHORT $LN15@FT_Render_
; Line 4159
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN11@FT_Render_
$LN10@FT_Render_:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN11@FT_Render_:
	cmp	DWORD PTR _i$1[ebp], 16			; 00000010H
	jge	SHORT $LN4@FT_Render_
$LN8@FT_Render_:
; Line 4160
	mov	eax, 4
	shl	eax, 4
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN7@FT_Render_
	mov	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR _md5$2[ebp+ecx]
	push	edx
	push	OFFSET $SG11683
	call	_FT_Message
	add	esp, 8
$LN7@FT_Render_:
	xor	eax, eax
	jne	SHORT $LN8@FT_Render_
	jmp	SHORT $LN10@FT_Render_
$LN4@FT_Render_:
; Line 4161
	mov	ecx, 4
	shl	ecx, 4
	cmp	DWORD PTR _ft_trace_levels[ecx], 3
	jl	SHORT $LN3@FT_Render_
	push	OFFSET $SG11688
	call	_FT_Message
	add	esp, 4
$LN3@FT_Render_:
	xor	edx, edx
	jne	SHORT $LN4@FT_Render_
$LN16@FT_Render_:
; Line 4164
	lea	eax, DWORD PTR _bitmap$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Bitmap_Done
	add	esp, 8
$LN17@FT_Render_:
; Line 4172
	mov	eax, DWORD PTR _error$[ebp]
; Line 4173
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@FT_Render_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN37@FT_Render_:
	DD	4
	DD	$LN36@FT_Render_
$LN36@FT_Render_:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN32@FT_Render_
	DD	-56					; ffffffc8H
	DD	24					; 00000018H
	DD	$LN33@FT_Render_
	DD	-220					; ffffff24H
	DD	152					; 00000098H
	DD	$LN34@FT_Render_
	DD	-244					; ffffff0cH
	DD	16					; 00000010H
	DD	$LN35@FT_Render_
$LN35@FT_Render_:
	DB	109					; 0000006dH
	DB	100					; 00000064H
	DB	53					; 00000035H
	DB	0
$LN34@FT_Render_:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
$LN33@FT_Render_:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN32@FT_Render_:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_FT_Render_Glyph_Internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_renderer$1 = -12					; size = 4
_result$ = -8						; size = 4
_cur$ = -4						; size = 4
_library$ = 8						; size = 4
_format$ = 12						; size = 4
_node$ = 16						; size = 4
_FT_Lookup_Renderer PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3853
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3855
	mov	DWORD PTR _result$[ebp], 0
; Line 3858
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN7@FT_Lookup_
; Line 3859
	jmp	SHORT $Exit$10
$LN7@FT_Lookup_:
; Line 3861
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 3863
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN4@FT_Lookup_
; Line 3865
	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN5@FT_Lookup_
; Line 3866
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cur$[ebp], edx
$LN5@FT_Lookup_:
; Line 3867
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@FT_Lookup_:
; Line 3870
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $Exit$10
; Line 3872
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _renderer$1[ebp], edx
; Line 3875
	mov	eax, DWORD PTR _renderer$1[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _format$[ebp]
	jne	SHORT $LN2@FT_Lookup_
; Line 3877
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN1@FT_Lookup_
; Line 3878
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@FT_Lookup_:
; Line 3880
	mov	ecx, DWORD PTR _renderer$1[ebp]
	mov	DWORD PTR _result$[ebp], ecx
; Line 3881
	jmp	SHORT $Exit$10
$LN2@FT_Lookup_:
; Line 3883
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _cur$[ebp], eax
; Line 3884
	jmp	SHORT $LN4@FT_Lookup_
$Exit$10:
; Line 3887
	mov	eax, DWORD PTR _result$[ebp]
; Line 3888
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Lookup_Renderer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_slot$ = 8						; size = 4
_buffer$ = 12						; size = 4
_ft_glyphslot_set_bitmap PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 310
	push	ebp
	mov	ebp, esp
; Line 311
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	call	_ft_glyphslot_free_bitmap
	add	esp, 4
; Line 313
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [ecx+88], edx
$LN4@ft_glyphsl:
; Line 315
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 1
	je	SHORT $LN3@ft_glyphsl
	push	OFFSET $SG9412
	push	315					; 0000013bH
	push	OFFSET $SG9413
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@ft_glyphsl:
	xor	eax, eax
	jne	SHORT $LN4@ft_glyphsl
; Line 316
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_glyphslot_set_bitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_slot$ = 8						; size = 4
_size$ = 12						; size = 4
_ft_glyphslot_alloc_bitmap PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 322
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 323
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _memory$[ebp], edx
; Line 327
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 1
	je	SHORT $LN5@ft_glyphsl
$LN4@ft_glyphsl:
; Line 328
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+88], 0
	xor	ecx, ecx
	jne	SHORT $LN4@ft_glyphsl
; Line 329
	jmp	SHORT $LN1@ft_glyphsl
$LN5@ft_glyphsl:
; Line 330
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 1
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	DWORD PTR [eax+4], ecx
$LN1@ft_glyphsl:
; Line 332
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+88], eax
; Line 333
	mov	eax, DWORD PTR _error$[ebp]
; Line 334
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ft_glyphsl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@ft_glyphsl:
	DD	1
	DD	$LN9@ft_glyphsl
$LN9@ft_glyphsl:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@ft_glyphsl
$LN8@ft_glyphsl:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_glyphslot_alloc_bitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -4						; size = 4
_slot$ = 8						; size = 4
_ft_glyphslot_free_bitmap PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 289
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 290
	mov	eax, DWORD PTR _slot$[ebp]
	cmp	DWORD PTR [eax+156], 0
	je	SHORT $LN5@ft_glyphsl
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 1
	je	SHORT $LN5@ft_glyphsl
; Line 292
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$1[ebp], eax
$LN4@ft_glyphsl:
; Line 295
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+88], 0
	xor	edx, edx
	jne	SHORT $LN4@ft_glyphsl
; Line 296
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR [ecx+4], edx
; Line 298
	jmp	SHORT $LN6@ft_glyphsl
$LN5@ft_glyphsl:
; Line 302
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+88], 0
$LN6@ft_glyphsl:
; Line 304
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_glyphslot_free_bitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_height$ = -4						; size = 4
_metrics$ = 8						; size = 4
_advance$ = 12						; size = 4
_ft_synthesize_vertical_metrics PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2607
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2608
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _height$[ebp], ecx
; Line 2612
	mov	edx, DWORD PTR _metrics$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jge	SHORT $LN5@ft_synthes
; Line 2614
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN4@ft_synthes
; Line 2615
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _height$[ebp], eax
$LN4@ft_synthes:
; Line 2617
	jmp	SHORT $LN3@ft_synthes
$LN5@ft_synthes:
	mov	ecx, DWORD PTR _metrics$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jle	SHORT $LN3@ft_synthes
; Line 2618
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _height$[ebp], eax
$LN3@ft_synthes:
; Line 2621
	cmp	DWORD PTR _advance$[ebp], 0
	jne	SHORT $LN1@ft_synthes
; Line 2622
	imul	eax, DWORD PTR _height$[ebp], 12
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _advance$[ebp], eax
$LN1@ft_synthes:
; Line 2624
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [eax+20], edx
; Line 2625
	mov	eax, DWORD PTR _advance$[ebp]
	sub	eax, DWORD PTR _height$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 2626
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR _advance$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 2627
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_synthesize_vertical_metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv128 = -24						; size = 4
tv87 = -20						; size = 4
_bsize$1 = -16						; size = 4
_h$ = -12						; size = 4
_w$ = -8						; size = 4
_i$ = -4						; size = 4
_face$ = 8						; size = 4
_req$ = 12						; size = 4
_ignore_width$ = 16					; size = 1
_size_index$ = 20					; size = 4
_FT_Match_Size PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2556
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2561
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	jne	SHORT $LN16@FT_Match_S
; Line 2562
	push	OFFSET $SG10562
	push	2562					; 00000a02H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN17@FT_Match_S
$LN16@FT_Match_S:
; Line 2565
	mov	edx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN15@FT_Match_S
; Line 2566
	push	OFFSET $SG10564
	push	2566					; 00000a06H
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	jmp	$LN17@FT_Match_S
$LN15@FT_Match_S:
; Line 2568
	mov	eax, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN19@FT_Match_S
	mov	ecx, DWORD PTR _req$[ebp]
	mov	edx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	imul	eax, DWORD PTR [edx+12]
	add	eax, 36					; 00000024H
	cdq
	mov	ecx, 72					; 00000048H
	idiv	ecx
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN20@FT_Match_S
$LN19@FT_Match_S:
	mov	edx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv87[ebp], eax
$LN20@FT_Match_S:
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR _w$[ebp], ecx
; Line 2569
	mov	edx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN21@FT_Match_S
	mov	eax, DWORD PTR _req$[ebp]
	mov	ecx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR [eax+8]
	imul	eax, DWORD PTR [ecx+16]
	add	eax, 36					; 00000024H
	cdq
	mov	ecx, 72					; 00000048H
	idiv	ecx
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN22@FT_Match_S
$LN21@FT_Match_S:
	mov	edx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv128[ebp], eax
$LN22@FT_Match_S:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _h$[ebp], ecx
; Line 2571
	mov	edx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN14@FT_Match_S
	mov	eax, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN14@FT_Match_S
; Line 2572
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _h$[ebp], ecx
	jmp	SHORT $LN13@FT_Match_S
$LN14@FT_Match_S:
; Line 2573
	mov	edx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN13@FT_Match_S
	mov	eax, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN13@FT_Match_S
; Line 2574
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR _w$[ebp], ecx
$LN13@FT_Match_S:
; Line 2576
	mov	edx, DWORD PTR _w$[ebp]
	add	edx, 32					; 00000020H
	and	edx, -64				; ffffffc0H
	mov	DWORD PTR _w$[ebp], edx
; Line 2577
	mov	eax, DWORD PTR _h$[ebp]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _h$[ebp], eax
; Line 2579
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@FT_Match_S
$LN10@FT_Match_S:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@FT_Match_S:
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+28]
	jge	SHORT $LN9@FT_Match_S
; Line 2581
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _face$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR _bsize$1[ebp], ecx
; Line 2584
	mov	eax, DWORD PTR _bsize$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 32					; 00000020H
	and	ecx, -64				; ffffffc0H
	cmp	DWORD PTR _h$[ebp], ecx
	je	SHORT $LN8@FT_Match_S
; Line 2585
	jmp	SHORT $LN10@FT_Match_S
$LN8@FT_Match_S:
; Line 2587
	mov	edx, DWORD PTR _bsize$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	cmp	DWORD PTR _w$[ebp], eax
	je	SHORT $LN5@FT_Match_S
	movzx	ecx, BYTE PTR _ignore_width$[ebp]
	test	ecx, ecx
	je	SHORT $LN7@FT_Match_S
$LN5@FT_Match_S:
; Line 2589
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 3
	jl	SHORT $LN4@FT_Match_S
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG10581
	call	_FT_Message
	add	esp, 8
$LN4@FT_Match_S:
	xor	edx, edx
	jne	SHORT $LN5@FT_Match_S
; Line 2591
	cmp	DWORD PTR _size_index$[ebp], 0
	je	SHORT $LN1@FT_Match_S
; Line 2592
	mov	eax, DWORD PTR _size_index$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@FT_Match_S:
; Line 2594
	xor	eax, eax
	jmp	SHORT $LN17@FT_Match_S
$LN7@FT_Match_S:
; Line 2596
	jmp	$LN10@FT_Match_S
$LN9@FT_Match_S:
; Line 2598
	push	OFFSET $SG10584
	push	2598					; 00000a26H
	push	23					; 00000017H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 23					; 00000017H
$LN17@FT_Match_S:
; Line 2599
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Match_Size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv187 = -36						; size = 4
tv157 = -32						; size = 4
tv148 = -28						; size = 4
tv70 = -24						; size = 4
_scaled_h$1 = -20					; size = 4
_scaled_w$2 = -16					; size = 4
_h$3 = -12						; size = 4
_w$4 = -8						; size = 4
_metrics$ = -4						; size = 4
_face$ = 8						; size = 4
_req$ = 12						; size = 4
_FT_Request_Metrics PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2714
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2718
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _metrics$[ebp], ecx
; Line 2720
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	je	$LN59@FT_Request
; Line 2722
	mov	DWORD PTR _w$4[ebp], 0
	mov	DWORD PTR _h$3[ebp], 0
	mov	DWORD PTR _scaled_w$2[ebp], 0
	mov	DWORD PTR _scaled_h$1[ebp], 0
; Line 2725
	mov	ecx, DWORD PTR _req$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv70[ebp], edx
	cmp	DWORD PTR tv70[ebp], 4
	ja	$LN57@FT_Request
	mov	eax, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN66@FT_Request[eax*4]
$LN56@FT_Request:
; Line 2728
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+68]
	mov	DWORD PTR _h$3[ebp], edx
	mov	eax, DWORD PTR _h$3[ebp]
	mov	DWORD PTR _w$4[ebp], eax
; Line 2729
	jmp	$LN57@FT_Request
$LN55@FT_Request:
; Line 2732
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+70]
	mov	eax, DWORD PTR _face$[ebp]
	movsx	ecx, WORD PTR [eax+72]
	sub	edx, ecx
	mov	DWORD PTR _h$3[ebp], edx
	mov	edx, DWORD PTR _h$3[ebp]
	mov	DWORD PTR _w$4[ebp], edx
; Line 2733
	jmp	$LN57@FT_Request
$LN54@FT_Request:
; Line 2736
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [eax+60]
	sub	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _w$4[ebp], edx
; Line 2737
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [eax+64]
	sub	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _h$3[ebp], edx
; Line 2738
	jmp	SHORT $LN57@FT_Request
$LN53@FT_Request:
; Line 2741
	mov	eax, DWORD PTR _face$[ebp]
	movsx	ecx, WORD PTR [eax+76]
	mov	DWORD PTR _w$4[ebp], ecx
; Line 2742
	mov	edx, DWORD PTR _face$[ebp]
	movsx	eax, WORD PTR [edx+70]
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+72]
	sub	eax, edx
	mov	DWORD PTR _h$3[ebp], eax
; Line 2743
	jmp	SHORT $LN57@FT_Request
$LN52@FT_Request:
; Line 2746
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _req$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 2747
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _req$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 2748
	mov	eax, DWORD PTR _metrics$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN51@FT_Request
; Line 2749
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN49@FT_Request
$LN51@FT_Request:
; Line 2750
	mov	ecx, DWORD PTR _metrics$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN49@FT_Request
; Line 2751
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
$LN49@FT_Request:
; Line 2752
	jmp	$Calculate_Ppem$67
$LN57@FT_Request:
; Line 2759
	cmp	DWORD PTR _w$4[ebp], 0
	jge	SHORT $LN47@FT_Request
; Line 2760
	mov	edx, DWORD PTR _w$4[ebp]
	neg	edx
	mov	DWORD PTR _w$4[ebp], edx
$LN47@FT_Request:
; Line 2762
	cmp	DWORD PTR _h$3[ebp], 0
	jge	SHORT $LN46@FT_Request
; Line 2763
	mov	eax, DWORD PTR _h$3[ebp]
	neg	eax
	mov	DWORD PTR _h$3[ebp], eax
$LN46@FT_Request:
; Line 2765
	mov	ecx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN62@FT_Request
	mov	edx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR _req$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	imul	ecx, DWORD PTR [eax+12]
	add	ecx, 36					; 00000024H
	mov	eax, ecx
	cdq
	mov	ecx, 72					; 00000048H
	idiv	ecx
	mov	DWORD PTR tv148[ebp], eax
	jmp	SHORT $LN63@FT_Request
$LN62@FT_Request:
	mov	edx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv148[ebp], eax
$LN63@FT_Request:
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR _scaled_w$2[ebp], ecx
; Line 2766
	mov	edx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN64@FT_Request
	mov	eax, DWORD PTR _req$[ebp]
	mov	ecx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR [eax+8]
	imul	eax, DWORD PTR [ecx+16]
	add	eax, 36					; 00000024H
	cdq
	mov	ecx, 72					; 00000048H
	idiv	ecx
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN65@FT_Request
$LN64@FT_Request:
	mov	edx, DWORD PTR _req$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv157[ebp], eax
$LN65@FT_Request:
	mov	ecx, DWORD PTR tv157[ebp]
	mov	DWORD PTR _scaled_h$1[ebp], ecx
; Line 2769
	mov	edx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN45@FT_Request
; Line 2771
	mov	eax, DWORD PTR _w$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _scaled_w$2[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 2773
	mov	eax, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN44@FT_Request
; Line 2775
	mov	ecx, DWORD PTR _h$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _scaled_h$1[ebp]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 2777
	mov	edx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [edx], 3
	jne	SHORT $LN41@FT_Request
; Line 2779
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN42@FT_Request
; Line 2780
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 2781
	jmp	SHORT $LN41@FT_Request
$LN42@FT_Request:
; Line 2782
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
$LN41@FT_Request:
; Line 2785
	jmp	SHORT $LN40@FT_Request
$LN44@FT_Request:
; Line 2787
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 2788
	mov	eax, DWORD PTR _w$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _scaled_w$2[ebp]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _scaled_h$1[ebp], eax
$LN40@FT_Request:
; Line 2791
	jmp	SHORT $Calculate_Ppem$67
$LN45@FT_Request:
; Line 2793
	mov	eax, DWORD PTR _h$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _scaled_h$1[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	DWORD PTR tv187[ebp], eax
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR tv187[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR tv187[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 2794
	mov	eax, DWORD PTR _h$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _scaled_h$1[ebp]
	push	edx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _scaled_w$2[ebp], eax
$Calculate_Ppem$67:
; Line 2799
	mov	eax, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN38@FT_Request
; Line 2801
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+68]
	push	ecx
	call	_FT_MulFix
	add	esp, 8
	mov	DWORD PTR _scaled_w$2[ebp], eax
; Line 2802
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	movzx	edx, WORD PTR [ecx+68]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	mov	DWORD PTR _scaled_h$1[ebp], eax
$LN38@FT_Request:
; Line 2805
	mov	eax, DWORD PTR _scaled_w$2[ebp]
	add	eax, 32					; 00000020H
	sar	eax, 6
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [ecx], ax
; Line 2806
	mov	edx, DWORD PTR _scaled_h$1[ebp]
	add	edx, 32					; 00000020H
	sar	edx, 6
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 2808
	mov	ecx, DWORD PTR _metrics$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_ft_recompute_scaled_metrics
	add	esp, 8
; Line 2810
	jmp	SHORT $LN37@FT_Request
$LN59@FT_Request:
; Line 2812
	push	28					; 0000001cH
	push	0
	mov	eax, DWORD PTR _metrics$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2813
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+4], 65536		; 00010000H
; Line 2814
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+8], 65536		; 00010000H
$LN37@FT_Request:
; Line 2817
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN33@FT_Request
	push	OFFSET $SG10704
	call	_FT_Message
	add	esp, 4
$LN33@FT_Request:
	xor	edx, edx
	jne	SHORT $LN37@FT_Request
$LN34@FT_Request:
; Line 2819
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN29@FT_Request
	mov	edx, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET $SG10709
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN29@FT_Request:
	xor	edx, edx
	jne	SHORT $LN34@FT_Request
$LN30@FT_Request:
; Line 2821
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN25@FT_Request
	mov	edx, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+8]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG10714
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN25@FT_Request:
	xor	edx, edx
	jne	SHORT $LN30@FT_Request
$LN26@FT_Request:
; Line 2822
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN21@FT_Request
	mov	edx, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+12]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10719
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN21@FT_Request:
	xor	eax, eax
	jne	SHORT $LN26@FT_Request
$LN22@FT_Request:
; Line 2823
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN17@FT_Request
	mov	eax, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+16]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10724
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN17@FT_Request:
	xor	ecx, ecx
	jne	SHORT $LN22@FT_Request
$LN18@FT_Request:
; Line 2824
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN13@FT_Request
	mov	ecx, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+20]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10729
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN13@FT_Request:
	xor	edx, edx
	jne	SHORT $LN18@FT_Request
$LN14@FT_Request:
; Line 2825
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN9@FT_Request
	mov	edx, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+24]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10734
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN9@FT_Request:
	xor	eax, eax
	jne	SHORT $LN14@FT_Request
$LN10@FT_Request:
; Line 2826
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN5@FT_Request
	mov	eax, DWORD PTR _metrics$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	push	OFFSET $SG10739
	call	_FT_Message
	add	esp, 8
$LN5@FT_Request:
	xor	edx, edx
	jne	SHORT $LN10@FT_Request
$LN6@FT_Request:
; Line 2827
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN1@FT_Request
	mov	edx, DWORD PTR _metrics$[ebp]
	movzx	eax, WORD PTR [edx+2]
	push	eax
	push	OFFSET $SG10744
	call	_FT_Message
	add	esp, 8
$LN1@FT_Request:
	xor	ecx, ecx
	jne	SHORT $LN6@FT_Request
; Line 2828
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN66@FT_Request:
	DD	$LN56@FT_Request
	DD	$LN55@FT_Request
	DD	$LN54@FT_Request
	DD	$LN53@FT_Request
	DD	$LN52@FT_Request
_FT_Request_Metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bsize$ = -8						; size = 4
_metrics$ = -4						; size = 4
_face$ = 8						; size = 4
_strike_index$ = 12					; size = 4
_FT_Select_Metrics PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2667
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2672
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _metrics$[ebp], ecx
; Line 2673
	mov	edx, DWORD PTR _strike_index$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _face$[ebp]
	add	edx, DWORD PTR [eax+32]
	mov	DWORD PTR _bsize$[ebp], edx
; Line 2675
	mov	ecx, DWORD PTR _bsize$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 32					; 00000020H
	sar	edx, 6
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [eax], dx
; Line 2676
	mov	ecx, DWORD PTR _bsize$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 32					; 00000020H
	sar	edx, 6
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 2678
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 1
	je	SHORT $LN38@FT_Select_
; Line 2681
	mov	eax, DWORD PTR _face$[ebp]
	movzx	ecx, WORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _bsize$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2683
	mov	edx, DWORD PTR _face$[ebp]
	movzx	eax, WORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _bsize$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 2685
	mov	edx, DWORD PTR _metrics$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_ft_recompute_scaled_metrics
	add	esp, 8
; Line 2687
	jmp	SHORT $LN37@FT_Select_
$LN38@FT_Select_:
; Line 2689
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [ecx+4], 65536		; 00010000H
; Line 2690
	mov	edx, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [edx+8], 65536		; 00010000H
; Line 2691
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	ecx, DWORD PTR _bsize$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
; Line 2692
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 2693
	mov	ecx, DWORD PTR _bsize$[ebp]
	movsx	edx, WORD PTR [ecx]
	shl	edx, 6
	mov	eax, DWORD PTR _metrics$[ebp]
	mov	DWORD PTR [eax+20], edx
; Line 2694
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR _bsize$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+24], eax
$LN37@FT_Select_:
; Line 2697
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN33@FT_Select_
	push	OFFSET $SG10617
	call	_FT_Message
	add	esp, 4
$LN33@FT_Select_:
	xor	eax, eax
	jne	SHORT $LN37@FT_Select_
$LN34@FT_Select_:
; Line 2699
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN29@FT_Select_
	mov	eax, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+4]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET $SG10622
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN29@FT_Select_:
	xor	eax, eax
	jne	SHORT $LN34@FT_Select_
$LN30@FT_Select_:
; Line 2701
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN25@FT_Select_
	mov	eax, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+8]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _metrics$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET $SG10627
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN25@FT_Select_:
	xor	eax, eax
	jne	SHORT $LN30@FT_Select_
$LN26@FT_Select_:
; Line 2702
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN21@FT_Select_
	mov	eax, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+12]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10632
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN21@FT_Select_:
	xor	ecx, ecx
	jne	SHORT $LN26@FT_Select_
$LN22@FT_Select_:
; Line 2703
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN17@FT_Select_
	mov	ecx, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+16]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10637
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN17@FT_Select_:
	xor	edx, edx
	jne	SHORT $LN22@FT_Select_
$LN18@FT_Select_:
; Line 2704
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN13@FT_Select_
	mov	edx, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+20]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10642
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN13@FT_Select_:
	xor	eax, eax
	jne	SHORT $LN18@FT_Select_
$LN14@FT_Select_:
; Line 2705
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN9@FT_Select_
	mov	eax, DWORD PTR _metrics$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+24]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10647
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN9@FT_Select_:
	xor	ecx, ecx
	jne	SHORT $LN14@FT_Select_
$LN10@FT_Select_:
; Line 2706
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN5@FT_Select_
	mov	ecx, DWORD PTR _metrics$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	push	OFFSET $SG10652
	call	_FT_Message
	add	esp, 8
$LN5@FT_Select_:
	xor	eax, eax
	jne	SHORT $LN10@FT_Select_
$LN6@FT_Select_:
; Line 2707
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN1@FT_Select_
	mov	eax, DWORD PTR _metrics$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	push	OFFSET $SG10657
	call	_FT_Message
	add	esp, 8
$LN1@FT_Select_:
	xor	edx, edx
	jne	SHORT $LN6@FT_Select_
; Line 2708
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Select_Metrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cur$1 = -16						; size = 4
_prev$2 = -12						; size = 4
_memory$3 = -8						; size = 4
_driver$4 = -4						; size = 4
_slot$ = 8						; size = 4
_FT_Done_GlyphSlot PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 454
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 455
	cmp	DWORD PTR _slot$[ebp], 0
	je	$LN11@FT_Done_Gl
; Line 457
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _driver$4[ebp], edx
; Line 458
	mov	eax, DWORD PTR _driver$4[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memory$3[ebp], ecx
; Line 464
	mov	DWORD PTR _prev$2[ebp], 0
; Line 465
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _cur$1[ebp], ecx
$LN9@FT_Done_Gl:
; Line 467
	cmp	DWORD PTR _cur$1[ebp], 0
	je	$LN11@FT_Done_Gl
; Line 469
	mov	edx, DWORD PTR _cur$1[ebp]
	cmp	edx, DWORD PTR _slot$[ebp]
	jne	SHORT $LN7@FT_Done_Gl
; Line 471
	cmp	DWORD PTR _prev$2[ebp], 0
	jne	SHORT $LN6@FT_Done_Gl
; Line 472
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _cur$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+84], eax
; Line 473
	jmp	SHORT $LN5@FT_Done_Gl
$LN6@FT_Done_Gl:
; Line 474
	mov	ecx, DWORD PTR _prev$2[ebp]
	mov	edx, DWORD PTR _cur$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
$LN5@FT_Done_Gl:
; Line 477
	mov	ecx, DWORD PTR _slot$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN4@FT_Done_Gl
; Line 478
	mov	esi, esp
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@FT_Done_Gl:
; Line 480
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	call	_ft_glyphslot_done
	add	esp, 4
$LN3@FT_Done_Gl:
; Line 481
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$3[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _slot$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@FT_Done_Gl
; Line 482
	jmp	SHORT $LN11@FT_Done_Gl
$LN7@FT_Done_Gl:
; Line 484
	mov	eax, DWORD PTR _cur$1[ebp]
	mov	DWORD PTR _prev$2[ebp], eax
; Line 485
	mov	ecx, DWORD PTR _cur$1[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _cur$1[ebp], edx
; Line 486
	jmp	$LN9@FT_Done_Gl
$LN11@FT_Done_Gl:
; Line 488
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Done_GlyphSlot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_slot$ = -28						; size = 4
_memory$ = -24						; size = 4
_clazz$ = -20						; size = 4
_driver$ = -16						; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_aslot$ = 12						; size = 4
_FT_New_GlyphSlot PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 403
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 408
	mov	DWORD PTR _slot$[ebp], 0
; Line 411
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN18@FT_New_Gly
; Line 412
	push	OFFSET $SG9461
	push	412					; 0000019cH
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN19@FT_New_Gly
$LN18@FT_New_Gly:
; Line 414
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jne	SHORT $LN17@FT_New_Gly
; Line 415
	push	OFFSET $SG9463
	push	415					; 0000019fH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN19@FT_New_Gly
$LN17@FT_New_Gly:
; Line 417
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _driver$[ebp], edx
; Line 418
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _clazz$[ebp], ecx
; Line 419
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _memory$[ebp], eax
$LN16@FT_New_Gly:
; Line 421
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN15@FT_New_Gly
	push	OFFSET $SG9468
	call	_FT_Message
	add	esp, 4
$LN15@FT_New_Gly:
	xor	eax, eax
	jne	SHORT $LN16@FT_New_Gly
; Line 422
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _clazz$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _slot$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN12@FT_New_Gly
; Line 424
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 426
	mov	ecx, DWORD PTR _slot$[ebp]
	push	ecx
	call	_ft_glyphslot_init
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 427
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@FT_New_Gly
; Line 429
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	call	_ft_glyphslot_done
	add	esp, 4
$LN10@FT_New_Gly:
; Line 430
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _slot$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN10@FT_New_Gly
; Line 431
	jmp	SHORT $Exit$24
$LN11@FT_New_Gly:
; Line 434
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+8], edx
; Line 435
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+84], ecx
; Line 437
	cmp	DWORD PTR _aslot$[ebp], 0
	je	SHORT $LN7@FT_New_Gly
; Line 438
	mov	edx, DWORD PTR _aslot$[ebp]
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx], eax
$LN7@FT_New_Gly:
; Line 440
	jmp	SHORT $Exit$24
$LN12@FT_New_Gly:
	cmp	DWORD PTR _aslot$[ebp], 0
	je	SHORT $Exit$24
; Line 441
	mov	ecx, DWORD PTR _aslot$[ebp]
	mov	DWORD PTR [ecx], 0
$Exit$24:
; Line 445
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN3@FT_New_Gly
	mov	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	OFFSET $SG9484
	call	_FT_Message
	add	esp, 8
$LN3@FT_New_Gly:
	xor	edx, edx
	jne	SHORT $Exit$24
; Line 446
	mov	eax, DWORD PTR _error$[ebp]
$LN19@FT_New_Gly:
; Line 447
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@FT_New_Gly
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN23@FT_New_Gly:
	DD	1
	DD	$LN22@FT_New_Gly
$LN22@FT_New_Gly:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN21@FT_New_Gly
$LN21@FT_New_Gly:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_New_GlyphSlot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$1 = -16						; size = 4
_cur$2 = -12						; size = 4
_library$3 = -8						; size = 4
_result$ = -4						; size = 4
_module$ = 8						; size = 4
_service_id$ = 12					; size = 4
_ft_module_get_service PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4427
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 4428
	mov	DWORD PTR _result$[ebp], 0
; Line 4431
	cmp	DWORD PTR _module$[ebp], 0
	je	$LN18@ft_module_
$LN17@ft_module_:
; Line 4433
	mov	eax, DWORD PTR _module$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN13@ft_module_
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+32], 0
	jne	SHORT $LN16@ft_module_
$LN13@ft_module_:
	push	OFFSET $SG11810
	push	4433					; 00001151H
	push	OFFSET $SG11811
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN16@ft_module_:
	xor	eax, eax
	jne	SHORT $LN17@ft_module_
; Line 4436
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN12@ft_module_
; Line 4437
	mov	esi, esp
	mov	eax, DWORD PTR _service_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _module$[ebp]
	push	ecx
	mov	edx, DWORD PTR _module$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN12@ft_module_:
; Line 4439
	cmp	DWORD PTR _result$[ebp], 0
	jne	$LN18@ft_module_
; Line 4442
	mov	edx, DWORD PTR _module$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _library$3[ebp], eax
; Line 4443
	mov	ecx, DWORD PTR _library$3[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _cur$2[ebp], ecx
; Line 4444
	mov	edx, DWORD PTR _library$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _cur$2[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _limit$1[ebp], edx
; Line 4447
	jmp	SHORT $LN10@ft_module_
$LN9@ft_module_:
	mov	eax, DWORD PTR _cur$2[ebp]
	add	eax, 4
	mov	DWORD PTR _cur$2[ebp], eax
$LN10@ft_module_:
	mov	ecx, DWORD PTR _cur$2[ebp]
	cmp	ecx, DWORD PTR _limit$1[ebp]
	jae	$LN18@ft_module_
; Line 4449
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$2[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	cmp	edx, DWORD PTR _module$[ebp]
	je	$LN7@ft_module_
$LN6@ft_module_:
; Line 4451
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$2[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@ft_module_
	push	OFFSET $SG11826
	push	4451					; 00001163H
	push	OFFSET $SG11827
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN5@ft_module_:
	xor	ecx, ecx
	jne	SHORT $LN6@ft_module_
; Line 4453
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$2[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN7@ft_module_
; Line 4455
	mov	esi, esp
	mov	ecx, DWORD PTR _service_id$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$2[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$2[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
; Line 4456
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@ft_module_
; Line 4457
	jmp	SHORT $LN18@ft_module_
$LN7@ft_module_:
; Line 4460
	jmp	$LN9@ft_module_
$LN18@ft_module_:
; Line 4464
	mov	eax, DWORD PTR _result$[ebp]
; Line 4465
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_module_get_service ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -8						; size = 4
_module$ = -4						; size = 4
_library$ = 8						; size = 4
_mod_name$ = 12						; size = 4
_FT_Get_Module_Interface PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4412
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4418
	mov	eax, DWORD PTR _mod_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _module$[ebp], eax
; Line 4420
	cmp	DWORD PTR _module$[ebp], 0
	je	SHORT $LN3@FT_Get_Mod
	mov	edx, DWORD PTR _module$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv70[ebp], ecx
	jmp	SHORT $LN4@FT_Get_Mod
$LN3@FT_Get_Mod:
	mov	DWORD PTR tv70[ebp], 0
$LN4@FT_Get_Mod:
	mov	eax, DWORD PTR tv70[ebp]
; Line 4421
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Module_Interface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_last_charmap$1 = -32					; size = 4
_j$2 = -28						; size = 4
_i$3 = -24						; size = 4
_error$4 = -16						; size = 4
_memory$5 = -8						; size = 4
_face$6 = -4						; size = 4
_cmap$ = 8						; size = 4
_FT_CMap_Done PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3242
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3243
	cmp	DWORD PTR _cmap$[ebp], 0
	je	$LN13@FT_CMap_Do
; Line 3245
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$6[ebp], ecx
; Line 3246
	mov	edx, DWORD PTR _face$6[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$5[ebp], eax
; Line 3251
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN11@FT_CMap_Do
$LN10@FT_CMap_Do:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN11@FT_CMap_Do:
	mov	edx, DWORD PTR _face$6[ebp]
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jge	$LN13@FT_CMap_Do
; Line 3253
	mov	ecx, DWORD PTR _face$6[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	ecx, DWORD PTR _cmap$[ebp]
	jne	$LN8@FT_CMap_Do
; Line 3255
	mov	edx, DWORD PTR _face$6[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _face$6[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+eax*4-4]
	mov	DWORD PTR _last_charmap$1[ebp], eax
; Line 3260
	lea	ecx, DWORD PTR _error$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$6[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _face$6[ebp]
	mov	edx, DWORD PTR [ecx+36]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _face$6[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	push	4
	mov	edx, DWORD PTR _memory$5[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _face$6[ebp]
	mov	DWORD PTR [ecx+40], eax
	cmp	DWORD PTR _error$4[ebp], 0
	je	SHORT $LN7@FT_CMap_Do
; Line 3261
	jmp	$LN13@FT_CMap_Do
$LN7@FT_CMap_Do:
; Line 3264
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _j$2[ebp], edx
	jmp	SHORT $LN6@FT_CMap_Do
$LN5@FT_CMap_Do:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN6@FT_CMap_Do:
	mov	ecx, DWORD PTR _face$6[ebp]
	mov	edx, DWORD PTR _j$2[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jge	SHORT $LN4@FT_CMap_Do
; Line 3266
	mov	eax, DWORD PTR _face$6[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, 1
	cmp	DWORD PTR _j$2[ebp], ecx
	jne	SHORT $LN3@FT_CMap_Do
; Line 3267
	mov	edx, DWORD PTR _face$6[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _j$2[ebp]
	mov	edx, DWORD PTR _last_charmap$1[ebp]
	mov	DWORD PTR [eax+ecx*4-4], edx
; Line 3268
	jmp	SHORT $LN2@FT_CMap_Do
$LN3@FT_CMap_Do:
; Line 3269
	mov	eax, DWORD PTR _face$6[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _face$6[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, DWORD PTR _j$2[ebp]
	mov	esi, DWORD PTR _j$2[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edx*4-4], ecx
$LN2@FT_CMap_Do:
; Line 3270
	jmp	SHORT $LN5@FT_CMap_Do
$LN4@FT_CMap_Do:
; Line 3272
	mov	edx, DWORD PTR _face$6[ebp]
	mov	eax, DWORD PTR [edx+36]
	sub	eax, 1
	mov	ecx, DWORD PTR _face$6[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 3274
	mov	edx, DWORD PTR _face$6[ebp]
	mov	eax, DWORD PTR [edx+92]
	cmp	eax, DWORD PTR _cmap$[ebp]
	jne	SHORT $LN1@FT_CMap_Do
; Line 3275
	mov	ecx, DWORD PTR _face$6[ebp]
	mov	DWORD PTR [ecx+92], 0
$LN1@FT_CMap_Do:
; Line 3277
	mov	edx, DWORD PTR _cmap$[ebp]
	push	edx
	call	_ft_cmap_done_internal
	add	esp, 4
; Line 3279
	jmp	SHORT $LN13@FT_CMap_Do
$LN8@FT_CMap_Do:
; Line 3281
	jmp	$LN10@FT_CMap_Do
$LN13@FT_CMap_Do:
; Line 3283
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@FT_CMap_Do
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@FT_CMap_Do:
	DD	1
	DD	$LN16@FT_CMap_Do
$LN16@FT_CMap_Do:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN15@FT_CMap_Do
$LN15@FT_CMap_Do:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_CMap_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$ = -24						; size = 4
_memory$ = -20						; size = 4
_face$ = -16						; size = 4
_error$ = -8						; size = 4
_clazz$ = 8						; size = 4
_init_data$ = 12					; size = 4
_charmap$ = 16						; size = 4
_acmap$ = 20						; size = 4
_FT_CMap_New PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3291
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3292
	mov	DWORD PTR _error$[ebp], 0
; Line 3295
	mov	DWORD PTR _cmap$[ebp], 0
; Line 3298
	cmp	DWORD PTR _clazz$[ebp], 0
	je	SHORT $LN6@FT_CMap_Ne
	cmp	DWORD PTR _charmap$[ebp], 0
	je	SHORT $LN6@FT_CMap_Ne
	mov	eax, DWORD PTR _charmap$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@FT_CMap_Ne
$LN6@FT_CMap_Ne:
; Line 3299
	push	OFFSET $SG11069
	push	3299					; 00000ce3H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN8@FT_CMap_Ne
$LN7@FT_CMap_Ne:
; Line 3301
	mov	ecx, DWORD PTR _charmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$[ebp], edx
; Line 3302
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 3304
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _clazz$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmap$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$13
; Line 3306
	mov	eax, DWORD PTR _charmap$[ebp]
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
; Line 3307
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	edx, DWORD PTR _clazz$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 3309
	mov	eax, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@FT_CMap_Ne
; Line 3311
	mov	esi, esp
	mov	ecx, DWORD PTR _init_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmap$[ebp]
	push	edx
	mov	eax, DWORD PTR _clazz$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 3312
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FT_CMap_Ne
; Line 3313
	jmp	SHORT $Fail$14
$LN4@FT_CMap_Ne:
; Line 3319
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+36]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+40], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FT_CMap_Ne
; Line 3320
	jmp	SHORT $Fail$14
$LN2@FT_CMap_Ne:
; Line 3322
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+36]
	add	eax, 1
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+36], eax
$Exit$13:
; Line 3326
	cmp	DWORD PTR _acmap$[ebp], 0
	je	SHORT $LN1@FT_CMap_Ne
; Line 3327
	mov	edx, DWORD PTR _acmap$[ebp]
	mov	eax, DWORD PTR _cmap$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@FT_CMap_Ne:
; Line 3329
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN8@FT_CMap_Ne
$Fail$14:
; Line 3332
	mov	ecx, DWORD PTR _cmap$[ebp]
	push	ecx
	call	_ft_cmap_done_internal
	add	esp, 4
; Line 3333
	mov	DWORD PTR _cmap$[ebp], 0
; Line 3334
	jmp	SHORT $Exit$13
$LN8@FT_CMap_Ne:
; Line 3335
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@FT_CMap_Ne
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@FT_CMap_Ne:
	DD	1
	DD	$LN11@FT_CMap_Ne
$LN11@FT_CMap_Ne:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@FT_CMap_Ne
$LN10@FT_CMap_Ne:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_CMap_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_desc$ = -8						; size = 4
_result$ = -4						; size = 4
_service_descriptors$ = 8				; size = 4
_service_id$ = 12					; size = 4
_ft_service_list_lookup PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 75
	mov	DWORD PTR _result$[ebp], 0
; Line 76
	mov	eax, DWORD PTR _service_descriptors$[ebp]
	mov	DWORD PTR _desc$[ebp], eax
; Line 79
	cmp	DWORD PTR _desc$[ebp], 0
	je	SHORT $LN5@ft_service
	cmp	DWORD PTR _service_id$[ebp], 0
	je	SHORT $LN5@ft_service
; Line 81
	jmp	SHORT $LN4@ft_service
$LN3@ft_service:
	mov	ecx, DWORD PTR _desc$[ebp]
	add	ecx, 8
	mov	DWORD PTR _desc$[ebp], ecx
$LN4@ft_service:
	mov	edx, DWORD PTR _desc$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN5@ft_service
; Line 83
	mov	eax, DWORD PTR _service_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@ft_service
; Line 85
	mov	eax, DWORD PTR _desc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _result$[ebp], ecx
; Line 86
	jmp	SHORT $LN5@ft_service
$LN1@ft_service:
; Line 88
	jmp	SHORT $LN3@ft_service
$LN5@ft_service:
; Line 91
	mov	eax, DWORD PTR _result$[ebp]
; Line 92
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_service_list_lookup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_in$1 = -20						; size = 4
_out$2 = -16						; size = 4
_num_contours$ = -12					; size = 4
_num_points$ = -8					; size = 4
_error$ = -4						; size = 4
_target$ = 8						; size = 4
_source$ = 12						; size = 4
_FT_GlyphLoader_CopyPoints PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 366
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 368
	mov	eax, DWORD PTR _source$[ebp]
	movsx	ecx, WORD PTR [eax+22]
	mov	DWORD PTR _num_points$[ebp], ecx
; Line 369
	mov	edx, DWORD PTR _source$[ebp]
	movsx	eax, WORD PTR [edx+20]
	mov	DWORD PTR _num_contours$[ebp], eax
; Line 372
	mov	ecx, DWORD PTR _num_contours$[ebp]
	push	ecx
	mov	edx, DWORD PTR _num_points$[ebp]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_FT_GlyphLoader_CheckPoints
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 373
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN2@FT_GlyphLo
; Line 375
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _out$2[ebp], ecx
; Line 376
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _in$1[ebp], edx
; Line 380
	mov	eax, DWORD PTR _num_points$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _in$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _out$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 382
	mov	edx, DWORD PTR _num_points$[ebp]
	push	edx
	mov	eax, DWORD PTR _in$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _out$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 384
	mov	ecx, DWORD PTR _num_contours$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _in$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _out$2[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 387
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN1@FT_GlyphLo
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN1@FT_GlyphLo
; Line 390
	mov	ecx, DWORD PTR _num_points$[ebp]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 392
	mov	eax, DWORD PTR _num_points$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@FT_GlyphLo:
; Line 395
	mov	edx, DWORD PTR _out$2[ebp]
	mov	ax, WORD PTR _num_points$[ebp]
	mov	WORD PTR [edx+2], ax
; Line 396
	mov	ecx, DWORD PTR _out$2[ebp]
	mov	dx, WORD PTR _num_contours$[ebp]
	mov	WORD PTR [ecx], dx
; Line 398
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_FT_GlyphLoader_Adjust_Points
	add	esp, 4
$LN2@FT_GlyphLo:
; Line 401
	mov	eax, DWORD PTR _error$[ebp]
; Line 402
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_GlyphLoader_CopyPoints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$ = -20						; size = 4
_n_base_points$ = -16					; size = 4
_n_curr_contours$ = -12					; size = 4
_current$ = -8						; size = 4
_base$ = -4						; size = 4
_loader$ = 8						; size = 4
_FT_GlyphLoader_Add PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 328
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 337
	cmp	DWORD PTR _loader$[ebp], 0
	jne	SHORT $LN4@FT_GlyphLo
; Line 338
	jmp	$LN5@FT_GlyphLo
$LN4@FT_GlyphLo:
; Line 340
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _base$[ebp], eax
; Line 341
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _current$[ebp], ecx
; Line 343
	mov	edx, DWORD PTR _current$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR _n_curr_contours$[ebp], eax
; Line 344
	mov	ecx, DWORD PTR _base$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR _n_base_points$[ebp], edx
; Line 347
	mov	eax, DWORD PTR _base$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _current$[ebp]
	movsx	eax, WORD PTR [edx+2]
	add	ecx, eax
	mov	edx, DWORD PTR _base$[ebp]
	mov	WORD PTR [edx+2], cx
; Line 349
	mov	eax, DWORD PTR _base$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _current$[ebp]
	movsx	eax, WORD PTR [edx]
	add	ecx, eax
	mov	edx, DWORD PTR _base$[ebp]
	mov	WORD PTR [edx], cx
; Line 351
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _current$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 354
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN3@FT_GlyphLo
$LN2@FT_GlyphLo:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN3@FT_GlyphLo:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _n_curr_contours$[ebp]
	jae	SHORT $LN1@FT_GlyphLo
; Line 356
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	add	eax, DWORD PTR _n_base_points$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN2@FT_GlyphLo
$LN1@FT_GlyphLo:
; Line 359
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_FT_GlyphLoader_Prepare
	add	esp, 4
$LN5@FT_GlyphLo:
; Line 360
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_GlyphLoader_Add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_current$ = -4						; size = 4
_loader$ = 8						; size = 4
_FT_GlyphLoader_Prepare PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 312
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 313
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 56					; 00000038H
	mov	DWORD PTR _current$[ebp], eax
; Line 316
	xor	ecx, ecx
	mov	edx, DWORD PTR _current$[ebp]
	mov	WORD PTR [edx+2], cx
; Line 317
	xor	eax, eax
	mov	ecx, DWORD PTR _current$[ebp]
	mov	WORD PTR [ecx], ax
; Line 318
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 320
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_FT_GlyphLoader_Adjust_Points
	add	esp, 4
; Line 321
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_FT_GlyphLoader_Adjust_Subglyphs
	add	esp, 4
; Line 322
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_GlyphLoader_Prepare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_current$ = -32						; size = 4
_base$ = -28						; size = 4
_old_max$ = -24						; size = 4
_new_max$ = -20						; size = 4
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_loader$ = 8						; size = 4
_n_subs$ = 12						; size = 4
_FT_GlyphLoader_CheckSubGlyphs PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 283
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 284
	mov	DWORD PTR _error$[ebp], 0
; Line 287
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _base$[ebp], edx
; Line 288
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 56					; 00000038H
	mov	DWORD PTR _current$[ebp], eax
; Line 291
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _current$[ebp]
	add	edx, DWORD PTR [eax+28]
	add	edx, DWORD PTR _n_subs$[ebp]
	mov	DWORD PTR _new_max$[ebp], edx
; Line 292
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _old_max$[ebp], edx
; Line 293
	mov	eax, DWORD PTR _new_max$[ebp]
	cmp	eax, DWORD PTR _old_max$[ebp]
	jbe	SHORT $Exit$8
; Line 295
	mov	ecx, DWORD PTR _new_max$[ebp]
	add	ecx, 1
	and	ecx, -2					; fffffffeH
	mov	DWORD PTR _new_max$[ebp], ecx
; Line 296
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _new_max$[ebp]
	push	edx
	mov	eax, DWORD PTR _old_max$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+32], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@FT_GlyphLo
; Line 297
	jmp	SHORT $Exit$8
$LN1@FT_GlyphLo:
; Line 299
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR _new_max$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 301
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_FT_GlyphLoader_Adjust_Subglyphs
	add	esp, 4
$Exit$8:
; Line 305
	mov	eax, DWORD PTR _error$[ebp]
; Line 306
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@FT_GlyphLo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@FT_GlyphLo:
	DD	1
	DD	$LN6@FT_GlyphLo
$LN6@FT_GlyphLo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN5@FT_GlyphLo
$LN5@FT_GlyphLo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_GlyphLoader_CheckSubGlyphs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_old_max$ = -36						; size = 4
_new_max$ = -32						; size = 4
_adjust$ = -25						; size = 1
_current$ = -24						; size = 4
_base$ = -20						; size = 4
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_loader$ = 8						; size = 4
_n_points$ = 12						; size = 4
_n_contours$ = 16					; size = 4
_FT_GlyphLoader_CheckPoints PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 204
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 205
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 206
	mov	DWORD PTR _error$[ebp], 0
; Line 207
	mov	edx, DWORD PTR _loader$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _base$[ebp], edx
; Line 208
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 56					; 00000038H
	mov	DWORD PTR _current$[ebp], eax
; Line 209
	mov	BYTE PTR _adjust$[ebp], 0
; Line 215
	mov	ecx, DWORD PTR _base$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _current$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	add	edx, DWORD PTR _n_points$[ebp]
	add	ecx, edx
	mov	DWORD PTR _new_max$[ebp], ecx
; Line 216
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _old_max$[ebp], eax
; Line 218
	mov	ecx, DWORD PTR _new_max$[ebp]
	cmp	ecx, DWORD PTR _old_max$[ebp]
	jbe	$LN11@FT_GlyphLo
; Line 220
	mov	edx, DWORD PTR _new_max$[ebp]
	add	edx, 7
	and	edx, -8					; fffffff8H
	mov	DWORD PTR _new_max$[ebp], edx
; Line 222
	cmp	DWORD PTR _new_max$[ebp], 32767		; 00007fffH
	jbe	SHORT $LN10@FT_GlyphLo
; Line 223
	push	OFFSET $SG7524
	push	223					; 000000dfH
	push	10					; 0000000aH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 10					; 0000000aH
	jmp	$LN12@FT_GlyphLo
$LN10@FT_GlyphLo:
; Line 226
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _new_max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_max$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx+4], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN8@FT_GlyphLo
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _new_max$[ebp]
	push	edx
	mov	eax, DWORD PTR _old_max$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@FT_GlyphLo
$LN8@FT_GlyphLo:
; Line 227
	jmp	$Exit$17
$LN9@FT_GlyphLo:
; Line 229
	mov	eax, DWORD PTR _loader$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN7@FT_GlyphLo
; Line 232
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _new_max$[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _old_max$[ebp]
	shl	eax, 1
	push	eax
	push	8
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+40], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN6@FT_GlyphLo
; Line 233
	jmp	$Exit$17
$LN6@FT_GlyphLo:
; Line 237
	mov	eax, DWORD PTR _old_max$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _old_max$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	push	ecx
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _new_max$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 239
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _new_max$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+44], eax
$LN7@FT_GlyphLo:
; Line 242
	mov	BYTE PTR _adjust$[ebp], 1
; Line 243
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _new_max$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN11@FT_GlyphLo:
; Line 247
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _old_max$[ebp], edx
; Line 249
	mov	eax, DWORD PTR _base$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _current$[ebp]
	movsx	eax, WORD PTR [edx]
	add	ecx, DWORD PTR _n_contours$[ebp]
	add	eax, ecx
	mov	DWORD PTR _new_max$[ebp], eax
; Line 250
	mov	ecx, DWORD PTR _new_max$[ebp]
	cmp	ecx, DWORD PTR _old_max$[ebp]
	jbe	SHORT $LN5@FT_GlyphLo
; Line 252
	mov	edx, DWORD PTR _new_max$[ebp]
	add	edx, 3
	and	edx, -4					; fffffffcH
	mov	DWORD PTR _new_max$[ebp], edx
; Line 254
	cmp	DWORD PTR _new_max$[ebp], 32767		; 00007fffH
	jbe	SHORT $LN4@FT_GlyphLo
; Line 255
	push	OFFSET $SG7538
	push	255					; 000000ffH
	push	10					; 0000000aH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 10					; 0000000aH
	jmp	SHORT $LN12@FT_GlyphLo
$LN4@FT_GlyphLo:
; Line 257
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _new_max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_max$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN3@FT_GlyphLo
; Line 258
	jmp	SHORT $Exit$17
$LN3@FT_GlyphLo:
; Line 260
	mov	BYTE PTR _adjust$[ebp], 1
; Line 261
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _new_max$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN5@FT_GlyphLo:
; Line 264
	movzx	ecx, BYTE PTR _adjust$[ebp]
	test	ecx, ecx
	je	SHORT $Exit$17
; Line 265
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_FT_GlyphLoader_Adjust_Points
	add	esp, 4
$Exit$17:
; Line 268
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@FT_GlyphLo
; Line 269
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_FT_GlyphLoader_Reset
	add	esp, 4
$LN1@FT_GlyphLo:
; Line 271
	mov	eax, DWORD PTR _error$[ebp]
$LN12@FT_GlyphLo:
; Line 272
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@FT_GlyphLo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@FT_GlyphLo:
	DD	1
	DD	$LN15@FT_GlyphLo
$LN15@FT_GlyphLo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@FT_GlyphLo
$LN14@FT_GlyphLo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_GlyphLoader_CheckPoints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_current$ = -8						; size = 4
_base$ = -4						; size = 4
_loader$ = 8						; size = 4
_FT_GlyphLoader_Rewind PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 90
	mov	eax, DWORD PTR _loader$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _base$[ebp], eax
; Line 91
	mov	ecx, DWORD PTR _loader$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _current$[ebp], ecx
; Line 94
	xor	edx, edx
	mov	eax, DWORD PTR _base$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 95
	xor	ecx, ecx
	mov	edx, DWORD PTR _base$[ebp]
	mov	WORD PTR [edx], cx
; Line 96
	mov	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 98
	mov	ecx, 9
	mov	esi, DWORD PTR _base$[ebp]
	mov	edi, DWORD PTR _current$[ebp]
	rep movsd
; Line 99
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_GlyphLoader_Rewind ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -4						; size = 4
_loader$ = 8						; size = 4
_FT_GlyphLoader_Reset PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 106
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 107
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
$LN15@FT_GlyphLo:
; Line 110
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+24], 0
	xor	eax, eax
	jne	SHORT $LN15@FT_GlyphLo
$LN12@FT_GlyphLo:
; Line 111
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+28], 0
	xor	edx, edx
	jne	SHORT $LN12@FT_GlyphLo
$LN9@FT_GlyphLo:
; Line 112
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+32], 0
	xor	ecx, ecx
	jne	SHORT $LN9@FT_GlyphLo
$LN6@FT_GlyphLo:
; Line 113
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+40], 0
	xor	eax, eax
	jne	SHORT $LN6@FT_GlyphLo
$LN3@FT_GlyphLo:
; Line 114
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+52], 0
	xor	edx, edx
	jne	SHORT $LN3@FT_GlyphLo
; Line 116
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 118
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 119
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 120
	mov	eax, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 122
	mov	ecx, DWORD PTR _loader$[ebp]
	push	ecx
	call	_FT_GlyphLoader_Rewind
	add	esp, 4
; Line 123
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_GlyphLoader_Reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -4						; size = 4
_loader$ = 8						; size = 4
_FT_GlyphLoader_Done PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 130
	cmp	DWORD PTR _loader$[ebp], 0
	je	SHORT $LN5@FT_GlyphLo
; Line 132
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$1[ebp], ecx
; Line 135
	mov	edx, DWORD PTR _loader$[ebp]
	push	edx
	call	_FT_GlyphLoader_Reset
	add	esp, 4
$LN3@FT_GlyphLo:
; Line 136
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$1[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _loader$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@FT_GlyphLo
$LN5@FT_GlyphLo:
; Line 138
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_GlyphLoader_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_loader$ = 8						; size = 4
_FT_GlyphLoader_CreateExtra PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 167
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 169
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 172
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	push	ecx
	push	0
	push	8
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx+40], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@FT_GlyphLo
; Line 174
	mov	edx, DWORD PTR _loader$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 176
	mov	eax, DWORD PTR _loader$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR [edx+40]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 178
	mov	eax, DWORD PTR _loader$[ebp]
	push	eax
	call	_FT_GlyphLoader_Adjust_Points
	add	esp, 4
$LN1@FT_GlyphLo:
; Line 180
	mov	eax, DWORD PTR _error$[ebp]
; Line 181
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@FT_GlyphLo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@FT_GlyphLo:
	DD	1
	DD	$LN5@FT_GlyphLo
$LN5@FT_GlyphLo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@FT_GlyphLo
$LN4@FT_GlyphLo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_GlyphLoader_CreateExtra ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -12						; size = 4
_loader$ = -4						; size = 4
_memory$ = 8						; size = 4
_aloader$ = 12						; size = 4
_FT_GlyphLoader_New PROC
; File d:\mozilla\modules\freetype2\src\base\ftgloadr.c
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 73
	mov	DWORD PTR _loader$[ebp], 0
; Line 77
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	96					; 00000060H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _loader$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@FT_GlyphLo
; Line 79
	mov	edx, DWORD PTR _loader$[ebp]
	mov	eax, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [edx], eax
; Line 80
	mov	ecx, DWORD PTR _aloader$[ebp]
	mov	edx, DWORD PTR _loader$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@FT_GlyphLo:
; Line 82
	mov	eax, DWORD PTR _error$[ebp]
; Line 83
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@FT_GlyphLo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@FT_GlyphLo:
	DD	1
	DD	$LN5@FT_GlyphLo
$LN5@FT_GlyphLo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@FT_GlyphLo
$LN4@FT_GlyphLo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_GlyphLoader_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -4						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_ft_mem_strcpyn PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 211
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN2@ft_mem_str:
; Line 212
	cmp	DWORD PTR _size$[ebp], 1
	jbe	SHORT $LN1@ft_mem_str
	mov	eax, DWORD PTR _src$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@ft_mem_str
; Line 214
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 1
	mov	DWORD PTR _dst$[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax
; Line 215
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
; Line 216
	jmp	SHORT $LN2@ft_mem_str
$LN1@ft_mem_str:
; Line 218
	mov	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx], 0
; Line 220
	mov	eax, DWORD PTR _src$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@ft_mem_str
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN6@ft_mem_str
$LN5@ft_mem_str:
	mov	DWORD PTR tv72[ebp], 0
$LN6@ft_mem_str:
	mov	eax, DWORD PTR tv72[ebp]
; Line 221
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_mem_strcpyn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -16						; size = 4
_error$ = -8						; size = 4
_memory$ = 8						; size = 4
_address$ = 12						; size = 4
_size$ = 16						; size = 4
_p_error$ = 20						; size = 4
_ft_mem_dup PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 183
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_qalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax
; Line 186
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ft_mem_dup
	cmp	DWORD PTR _address$[ebp], 0
	je	SHORT $LN1@ft_mem_dup
; Line 187
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _address$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ft_mem_dup:
; Line 189
	mov	eax, DWORD PTR _p_error$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 190
	mov	eax, DWORD PTR _p$[ebp]
; Line 191
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ft_mem_dup
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@ft_mem_dup:
	DD	1
	DD	$LN5@ft_mem_dup
$LN5@ft_mem_dup:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@ft_mem_dup
$LN4@ft_mem_dup:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_mem_dup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -8						; size = 4
_len$ = -4						; size = 4
_memory$ = 8						; size = 4
_str$ = 12						; size = 4
_p_error$ = 16						; size = 4
_ft_mem_strdup PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 200
	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN3@ft_mem_str
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@ft_mem_str
$LN3@ft_mem_str:
	mov	DWORD PTR tv68[ebp], 0
$LN4@ft_mem_str:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _len$[ebp], ecx
; Line 203
	mov	edx, DWORD PTR _p_error$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_dup
	add	esp, 16					; 00000010H
; Line 204
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_mem_strdup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = 8						; size = 4
_P$ = 12						; size = 4
_ft_mem_free PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 170
	push	ebp
	mov	ebp, esp
	push	esi
; Line 171
	cmp	DWORD PTR _P$[ebp], 0
	je	SHORT $LN2@ft_mem_fre
; Line 172
	mov	esi, esp
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@ft_mem_fre:
; Line 173
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ft_mem_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_new_size$1 = -24					; size = 4
_cur_size$2 = -20					; size = 4
_block2$3 = -16						; size = 4
_error$ = -8						; size = 4
_memory$ = 8						; size = 4
_item_size$ = 12					; size = 4
_cur_count$ = 16					; size = 4
_new_count$ = 20					; size = 4
_block$ = 24						; size = 4
_p_error$ = 28						; size = 4
_ft_mem_qrealloc PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 120
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 121
	mov	DWORD PTR _error$[ebp], 0
; Line 128
	cmp	DWORD PTR _cur_count$[ebp], 0
	jl	SHORT $LN15@ft_mem_qre
	cmp	DWORD PTR _new_count$[ebp], 0
	jl	SHORT $LN15@ft_mem_qre
	cmp	DWORD PTR _item_size$[ebp], 0
	jge	SHORT $LN16@ft_mem_qre
$LN15@ft_mem_qre:
; Line 131
	push	OFFSET $SG13884
	push	131					; 00000083H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
	jmp	$LN14@ft_mem_qre
$LN16@ft_mem_qre:
; Line 133
	cmp	DWORD PTR _new_count$[ebp], 0
	je	SHORT $LN12@ft_mem_qre
	cmp	DWORD PTR _item_size$[ebp], 0
	jne	SHORT $LN13@ft_mem_qre
$LN12@ft_mem_qre:
; Line 135
	mov	eax, DWORD PTR _block$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
; Line 136
	mov	DWORD PTR _block$[ebp], 0
	jmp	$LN14@ft_mem_qre
$LN13@ft_mem_qre:
; Line 138
	mov	eax, 2147483647				; 7fffffffH
	cdq
	idiv	DWORD PTR _item_size$[ebp]
	cmp	DWORD PTR _new_count$[ebp], eax
	jle	SHORT $LN10@ft_mem_qre
; Line 140
	push	OFFSET $SG13891
	push	140					; 0000008cH
	push	10					; 0000000aH
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 10					; 0000000aH
	mov	DWORD PTR _error$[ebp], eax
	jmp	$LN14@ft_mem_qre
$LN10@ft_mem_qre:
; Line 142
	cmp	DWORD PTR _cur_count$[ebp], 0
	jne	SHORT $LN8@ft_mem_qre
$LN7@ft_mem_qre:
; Line 144
	cmp	DWORD PTR _block$[ebp], 0
	je	SHORT $LN6@ft_mem_qre
	push	OFFSET $SG13899
	push	144					; 00000090H
	push	OFFSET $SG13900
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN6@ft_mem_qre:
	xor	edx, edx
	jne	SHORT $LN7@ft_mem_qre
; Line 146
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_count$[ebp]
	imul	ecx, DWORD PTR _item_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _block$[ebp], eax
; Line 148
	jmp	SHORT $LN14@ft_mem_qre
$LN8@ft_mem_qre:
; Line 151
	mov	eax, DWORD PTR _cur_count$[ebp]
	imul	eax, DWORD PTR _item_size$[ebp]
	mov	DWORD PTR _cur_size$2[ebp], eax
; Line 152
	mov	ecx, DWORD PTR _new_count$[ebp]
	imul	ecx, DWORD PTR _item_size$[ebp]
	mov	DWORD PTR _new_size$1[ebp], ecx
; Line 155
	mov	esi, esp
	mov	edx, DWORD PTR _block$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_size$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_size$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _block2$3[ebp], eax
; Line 156
	cmp	DWORD PTR _block2$3[ebp], 0
	jne	SHORT $LN2@ft_mem_qre
; Line 157
	push	OFFSET $SG13907
	push	157					; 0000009dH
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	mov	DWORD PTR _error$[ebp], eax
; Line 158
	jmp	SHORT $LN14@ft_mem_qre
$LN2@ft_mem_qre:
; Line 159
	mov	edx, DWORD PTR _block2$3[ebp]
	mov	DWORD PTR _block$[ebp], edx
$LN14@ft_mem_qre:
; Line 162
	mov	eax, DWORD PTR _p_error$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 163
	mov	eax, DWORD PTR _block$[ebp]
; Line 164
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@ft_mem_qre
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN21@ft_mem_qre:
	DD	1
	DD	$LN20@ft_mem_qre
$LN20@ft_mem_qre:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN19@ft_mem_qre
$LN19@ft_mem_qre:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_mem_qrealloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -8						; size = 4
_memory$ = 8						; size = 4
_item_size$ = 12					; size = 4
_cur_count$ = 16					; size = 4
_new_count$ = 20					; size = 4
_block$ = 24						; size = 4
_p_error$ = 28						; size = 4
_ft_mem_realloc PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 98
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 99
	mov	DWORD PTR _error$[ebp], 0
; Line 103
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _new_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _item_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_qrealloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _block$[ebp], eax
; Line 104
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ft_mem_rea
	mov	eax, DWORD PTR _new_count$[ebp]
	cmp	eax, DWORD PTR _cur_count$[ebp]
	jle	SHORT $LN1@ft_mem_rea
; Line 106
	mov	ecx, DWORD PTR _new_count$[ebp]
	sub	ecx, DWORD PTR _cur_count$[ebp]
	imul	ecx, DWORD PTR _item_size$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _cur_count$[ebp]
	imul	edx, DWORD PTR _item_size$[ebp]
	add	edx, DWORD PTR _block$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN1@ft_mem_rea:
; Line 108
	mov	eax, DWORD PTR _p_error$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 109
	mov	eax, DWORD PTR _block$[ebp]
; Line 110
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ft_mem_rea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@ft_mem_rea:
	DD	1
	DD	$LN5@ft_mem_rea
$LN5@ft_mem_rea:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@ft_mem_rea
$LN4@ft_mem_rea:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_mem_realloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_block$ = -8						; size = 4
_error$ = -4						; size = 4
_memory$ = 8						; size = 4
_size$ = 12						; size = 4
_p_error$ = 16						; size = 4
_ft_mem_qalloc PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 70
	mov	DWORD PTR _error$[ebp], 0
; Line 71
	mov	DWORD PTR _block$[ebp], 0
; Line 74
	cmp	DWORD PTR _size$[ebp], 0
	jle	SHORT $LN4@ft_mem_qal
; Line 76
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _block$[ebp], eax
; Line 77
	cmp	DWORD PTR _block$[ebp], 0
	jne	SHORT $LN3@ft_mem_qal
; Line 78
	push	OFFSET $SG13848
	push	78					; 0000004eH
	push	64					; 00000040H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 64					; 00000040H
	mov	DWORD PTR _error$[ebp], eax
$LN3@ft_mem_qal:
; Line 80
	jmp	SHORT $LN2@ft_mem_qal
$LN4@ft_mem_qal:
	cmp	DWORD PTR _size$[ebp], 0
	jge	SHORT $LN2@ft_mem_qal
; Line 83
	push	OFFSET $SG13851
	push	83					; 00000053H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
$LN2@ft_mem_qal:
; Line 86
	mov	ecx, DWORD PTR _p_error$[ebp]
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 87
	mov	eax, DWORD PTR _block$[ebp]
; Line 88
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ft_mem_qalloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_block$ = -16						; size = 4
_error$ = -8						; size = 4
_memory$ = 8						; size = 4
_size$ = 12						; size = 4
_p_error$ = 16						; size = 4
_ft_mem_alloc PROC
; File d:\mozilla\modules\freetype2\src\base\ftutil.c
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 55
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_qalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _block$[ebp], eax
; Line 57
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ft_mem_all
	cmp	DWORD PTR _size$[ebp], 0
	jle	SHORT $LN1@ft_mem_all
; Line 58
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _block$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN1@ft_mem_all:
; Line 60
	mov	edx, DWORD PTR _p_error$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
; Line 61
	mov	eax, DWORD PTR _block$[ebp]
; Line 62
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ft_mem_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@ft_mem_all:
	DD	1
	DD	$LN5@ft_mem_all
$LN5@ft_mem_all:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@ft_mem_all
$LN4@ft_mem_all:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ft_mem_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = -4						; size = 4
_size$ = 8						; size = 4
_FT_Activate_Size PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3817
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3821
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN3@FT_Activat
; Line 3822
	push	OFFSET $SG11528
	push	3822					; 00000eeeH
	push	36					; 00000024H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 36					; 00000024H
	jmp	SHORT $LN4@FT_Activat
$LN3@FT_Activat:
; Line 3824
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 3825
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN1@FT_Activat
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+96], 0
	jne	SHORT $LN2@FT_Activat
$LN1@FT_Activat:
; Line 3826
	push	OFFSET $SG11531
	push	3826					; 00000ef2H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	SHORT $LN4@FT_Activat
$LN2@FT_Activat:
; Line 3830
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 3832
	xor	eax, eax
$LN4@FT_Activat:
; Line 3833
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Activate_Size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_node$ = -20						; size = 4
_face$ = -16						; size = 4
_memory$ = -12						; size = 4
_driver$ = -8						; size = 4
_error$ = -4						; size = 4
_size$ = 8						; size = 4
_FT_Done_Size PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2505
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2513
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN10@FT_Done_Si
; Line 2514
	push	OFFSET $SG10534
	push	2514					; 000009d2H
	push	36					; 00000024H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 36					; 00000024H
	jmp	$LN11@FT_Done_Si
$LN10@FT_Done_Si:
; Line 2516
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 2517
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN9@FT_Done_Si
; Line 2518
	push	OFFSET $SG10536
	push	2518					; 000009d6H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN11@FT_Done_Si
$LN9@FT_Done_Si:
; Line 2520
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _driver$[ebp], eax
; Line 2521
	cmp	DWORD PTR _driver$[ebp], 0
	jne	SHORT $LN8@FT_Done_Si
; Line 2522
	push	OFFSET $SG10538
	push	2522					; 000009daH
	push	34					; 00000022H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 34					; 00000022H
	jmp	$LN11@FT_Done_Si
$LN8@FT_Done_Si:
; Line 2524
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _memory$[ebp], edx
; Line 2526
	mov	DWORD PTR _error$[ebp], 0
; Line 2527
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_FT_List_Find
	add	esp, 8
	mov	DWORD PTR _node$[ebp], eax
; Line 2528
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN7@FT_Done_Si
; Line 2530
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_List_Remove
	add	esp, 8
$LN6@FT_Done_Si:
; Line 2531
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _node$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN6@FT_Done_Si
; Line 2533
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	cmp	edx, DWORD PTR _size$[ebp]
	jne	SHORT $LN3@FT_Done_Si
; Line 2535
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [eax+88], 0
; Line 2536
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+108], 0
	je	SHORT $LN3@FT_Done_Si
; Line 2537
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+88], edx
$LN3@FT_Done_Si:
; Line 2540
	mov	eax, DWORD PTR _driver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_destroy_size
	add	esp, 12					; 0000000cH
; Line 2542
	jmp	SHORT $LN1@FT_Done_Si
$LN7@FT_Done_Si:
; Line 2543
	push	OFFSET $SG10548
	push	2543					; 000009efH
	push	36					; 00000024H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 36					; 00000024H
	mov	DWORD PTR _error$[ebp], eax
$LN1@FT_Done_Si:
; Line 2545
	mov	eax, DWORD PTR _error$[ebp]
$LN11@FT_Done_Si:
; Line 2546
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Done_Size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_node$ = -32						; size = 4
_size$ = -28						; size = 4
_clazz$ = -24						; size = 4
_driver$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_face$ = 8						; size = 4
_asize$ = 12						; size = 4
_FT_New_Size PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2445
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2451
	mov	DWORD PTR _size$[ebp], 0
; Line 2452
	mov	DWORD PTR _node$[ebp], 0
; Line 2455
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN14@FT_New_Siz
; Line 2456
	push	OFFSET $SG10504
	push	2456					; 00000998H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN15@FT_New_Siz
$LN14@FT_New_Siz:
; Line 2458
	cmp	DWORD PTR _asize$[ebp], 0
	jne	SHORT $LN13@FT_New_Siz
; Line 2459
	push	OFFSET $SG10506
	push	2459					; 0000099bH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN15@FT_New_Siz
$LN13@FT_New_Siz:
; Line 2461
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jne	SHORT $LN12@FT_New_Siz
; Line 2462
	push	OFFSET $SG10508
	push	2462					; 0000099eH
	push	34					; 00000022H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 34					; 00000022H
	jmp	$LN15@FT_New_Siz
$LN12@FT_New_Siz:
; Line 2464
	mov	ecx, DWORD PTR _asize$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 2466
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _driver$[ebp], eax
; Line 2467
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _clazz$[ebp], edx
; Line 2468
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 2471
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _clazz$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _size$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN10@FT_New_Siz
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _node$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN11@FT_New_Siz
$LN10@FT_New_Siz:
; Line 2472
	jmp	SHORT $Exit$20
$LN11@FT_New_Siz:
; Line 2474
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx], eax
; Line 2477
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+40], 0
; Line 2479
	mov	edx, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN9@FT_New_Siz
; Line 2480
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clazz$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN9@FT_New_Siz:
; Line 2483
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $Exit$20
; Line 2485
	mov	eax, DWORD PTR _asize$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 2486
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2487
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_FT_List_Add
	add	esp, 8
$Exit$20:
; Line 2491
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@FT_New_Siz
$LN6@FT_New_Siz:
; Line 2493
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _node$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN6@FT_New_Siz
$LN3@FT_New_Siz:
; Line 2494
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _size$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@FT_New_Siz
$LN7@FT_New_Siz:
; Line 2497
	mov	eax, DWORD PTR _error$[ebp]
$LN15@FT_New_Siz:
; Line 2498
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@FT_New_Siz
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@FT_New_Siz:
	DD	1
	DD	$LN18@FT_New_Siz
$LN18@FT_New_Siz:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN17@FT_New_Siz
$LN17@FT_New_Siz:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_New_Size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_set_mode$ = -12					; size = 4
_error$ = -8						; size = 4
_node$ = -4						; size = 4
_library$ = 8						; size = 4
_renderer$ = 12						; size = 4
_num_params$ = 16					; size = 4
_parameters$ = 20					; size = 4
_FT_Set_Renderer PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4018
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4020
	mov	DWORD PTR _error$[ebp], 0
; Line 4025
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN9@FT_Set_Ren
; Line 4027
	push	OFFSET $SG11624
	push	4027					; 00000fbbH
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	mov	DWORD PTR _error$[ebp], eax
; Line 4028
	jmp	$Exit$12
$LN9@FT_Set_Ren:
; Line 4031
	cmp	DWORD PTR _renderer$[ebp], 0
	jne	SHORT $LN8@FT_Set_Ren
; Line 4033
	push	OFFSET $SG11627
	push	4033					; 00000fc1H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 4034
	jmp	$Exit$12
$LN8@FT_Set_Ren:
; Line 4037
	cmp	DWORD PTR _num_params$[ebp], 0
	jbe	SHORT $LN7@FT_Set_Ren
	cmp	DWORD PTR _parameters$[ebp], 0
	jne	SHORT $LN7@FT_Set_Ren
; Line 4039
	push	OFFSET $SG11629
	push	4039					; 00000fc7H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 4040
	jmp	$Exit$12
$LN7@FT_Set_Ren:
; Line 4043
	mov	eax, DWORD PTR _renderer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	add	ecx, 148				; 00000094H
	push	ecx
	call	_FT_List_Find
	add	esp, 8
	mov	DWORD PTR _node$[ebp], eax
; Line 4044
	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN6@FT_Set_Ren
; Line 4046
	push	OFFSET $SG11631
	push	4046					; 00000fceH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 4047
	jmp	$Exit$12
$LN6@FT_Set_Ren:
; Line 4050
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	add	eax, 148				; 00000094H
	push	eax
	call	_FT_List_Up
	add	esp, 8
; Line 4052
	mov	ecx, DWORD PTR _renderer$[ebp]
	cmp	DWORD PTR [ecx+16], 1869968492		; 6f75746cH
	jne	SHORT $LN5@FT_Set_Ren
; Line 4053
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR _renderer$[ebp]
	mov	DWORD PTR [edx+156], eax
$LN5@FT_Set_Ren:
; Line 4055
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _set_mode$[ebp], eax
; Line 4057
	jmp	SHORT $LN4@FT_Set_Ren
$LN3@FT_Set_Ren:
	mov	ecx, DWORD PTR _num_params$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _num_params$[ebp], ecx
$LN4@FT_Set_Ren:
	cmp	DWORD PTR _num_params$[ebp], 0
	jbe	SHORT $Exit$12
; Line 4059
	mov	esi, esp
	mov	edx, DWORD PTR _parameters$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _parameters$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _renderer$[ebp]
	push	eax
	call	DWORD PTR _set_mode$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 4060
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@FT_Set_Ren
; Line 4061
	jmp	SHORT $Exit$12
$LN1@FT_Set_Ren:
; Line 4062
	mov	ecx, DWORD PTR _parameters$[ebp]
	add	ecx, 8
	mov	DWORD PTR _parameters$[ebp], ecx
; Line 4063
	jmp	SHORT $LN3@FT_Set_Ren
$Exit$12:
; Line 4066
	mov	eax, DWORD PTR _error$[ebp]
; Line 4067
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Set_Renderer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = 8						; size = 4
_format$ = 12						; size = 4
_FT_Get_Renderer PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4004
	push	ebp
	mov	ebp, esp
; Line 4007
	push	0
	mov	eax, DWORD PTR _format$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Lookup_Renderer
	add	esp, 12					; 0000000cH
; Line 4008
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Get_Renderer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_yy$ = -12						; size = 4
_xx$ = -8						; size = 4
_delta$ = -4						; size = 4
_matrix$ = 8						; size = 4
_FT_Matrix_Invert PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 657
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 661
	cmp	DWORD PTR _matrix$[ebp], 0
	jne	SHORT $LN2@FT_Matrix_
; Line 662
	push	OFFSET $SG7351
	push	662					; 00000296H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN3@FT_Matrix_
$LN2@FT_Matrix_:
; Line 666
	mov	eax, DWORD PTR _matrix$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_MulFix
	add	esp, 8
	mov	esi, eax
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _matrix$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulFix
	add	esp, 8
	sub	esi, eax
	mov	DWORD PTR _delta$[ebp], esi
; Line 668
	jne	SHORT $LN1@FT_Matrix_
; Line 669
	push	OFFSET $SG7353
	push	669					; 0000029dH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN3@FT_Matrix_
$LN1@FT_Matrix_:
; Line 671
	mov	edx, DWORD PTR _delta$[ebp]
	push	edx
	mov	eax, DWORD PTR _matrix$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	neg	eax
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 672
	mov	eax, DWORD PTR _delta$[ebp]
	push	eax
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_DivFix
	add	esp, 8
	neg	eax
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 674
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _xx$[ebp], eax
; Line 675
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _yy$[ebp], edx
; Line 677
	mov	eax, DWORD PTR _delta$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yy$[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [edx], eax
; Line 678
	mov	eax, DWORD PTR _delta$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xx$[ebp]
	push	ecx
	call	_FT_DivFix
	add	esp, 8
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 680
	xor	eax, eax
$LN3@FT_Matrix_:
; Line 681
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Matrix_Invert ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_yy$ = -16						; size = 4
_yx$ = -12						; size = 4
_xy$ = -8						; size = 4
_xx$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_Matrix_Multiply PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 636
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 640
	cmp	DWORD PTR _a$[ebp], 0
	je	SHORT $LN1@FT_Matrix_
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN2@FT_Matrix_
$LN1@FT_Matrix_:
; Line 641
	jmp	$LN3@FT_Matrix_
$LN2@FT_Matrix_:
; Line 643
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_MulFix
	add	esp, 8
	mov	esi, eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulFix
	add	esp, 8
	add	esi, eax
	mov	DWORD PTR _xx$[ebp], esi
; Line 644
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	mov	esi, eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_MulFix
	add	esp, 8
	add	esi, eax
	mov	DWORD PTR _xy$[ebp], esi
; Line 645
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_FT_MulFix
	add	esp, 8
	mov	esi, eax
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	add	esi, eax
	mov	DWORD PTR _yx$[ebp], esi
; Line 646
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_FT_MulFix
	add	esp, 8
	mov	esi, eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_FT_MulFix
	add	esp, 8
	add	esi, eax
	mov	DWORD PTR _yy$[ebp], esi
; Line 648
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _xx$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _xy$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 649
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _yx$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _yy$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN3@FT_Matrix_:
; Line 650
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Matrix_Multiply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_service$1 = -12					; size = 4
_module$2 = -8						; size = 4
_result$ = -4						; size = 4
_library$ = 8						; size = 4
_FT_Get_TrueType_Engine_Type PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4868
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4869
	mov	DWORD PTR _result$[ebp], 0
; Line 4872
	cmp	DWORD PTR _library$[ebp], 0
	je	SHORT $LN3@FT_Get_Tru
; Line 4874
	push	OFFSET $SG12025
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_FT_Get_Module
	add	esp, 8
	mov	DWORD PTR _module$2[ebp], eax
; Line 4877
	cmp	DWORD PTR _module$2[ebp], 0
	je	SHORT $LN3@FT_Get_Tru
; Line 4884
	push	OFFSET $SG12029
	mov	ecx, DWORD PTR _module$2[ebp]
	push	ecx
	call	_ft_module_get_service
	add	esp, 8
	mov	DWORD PTR _service$1[ebp], eax
; Line 4885
	cmp	DWORD PTR _service$1[ebp], 0
	je	SHORT $LN3@FT_Get_Tru
; Line 4886
	mov	edx, DWORD PTR _service$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _result$[ebp], eax
$LN3@FT_Get_Tru:
; Line 4890
	mov	eax, DWORD PTR _result$[ebp]
; Line 4891
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_TrueType_Engine_Type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = 8						; size = 4
_hook_index$ = 12					; size = 4
_debug_hook$ = 16					; size = 4
_FT_Set_Debug_Hook PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4856
	push	ebp
	mov	ebp, esp
; Line 4859
	cmp	DWORD PTR _library$[ebp], 0
	je	SHORT $LN2@FT_Set_Deb
	cmp	DWORD PTR _debug_hook$[ebp], 0
	je	SHORT $LN2@FT_Set_Deb
	cmp	DWORD PTR _hook_index$[ebp], 4
	jae	SHORT $LN2@FT_Set_Deb
; Line 4860
	mov	eax, DWORD PTR _hook_index$[ebp]
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR _debug_hook$[ebp]
	mov	DWORD PTR [ecx+eax*4+172], edx
$LN2@FT_Set_Deb:
; Line 4861
	pop	ebp
	ret	0
_FT_Set_Debug_Hook ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_faces$1 = -40						; size = 4
_module_name$2 = -36					; size = 4
_module$3 = -32						; size = 4
_driver_name$4 = -24					; size = 8
_n$5 = -12						; size = 4
_m$6 = -8						; size = 4
_memory$ = -4						; size = 4
_library$ = 8						; size = 4
_FT_Done_Library PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4742
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 4746
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN29@FT_Done_Li
; Line 4747
	push	OFFSET $SG11963
	push	4747					; 0000128bH
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	$LN30@FT_Done_Li
$LN29@FT_Done_Li:
; Line 4749
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	sub	ecx, 1
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [edx+188], ecx
; Line 4750
	mov	eax, DWORD PTR _library$[ebp]
	cmp	DWORD PTR [eax+188], 0
	jle	SHORT $LN28@FT_Done_Li
; Line 4751
	jmp	$Exit$35
$LN28@FT_Done_Li:
; Line 4753
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$[ebp], edx
; Line 4773
	mov	DWORD PTR _driver_name$4[ebp], OFFSET $SG11971
	mov	DWORD PTR _driver_name$4[ebp+4], 0
; Line 4778
	mov	DWORD PTR _m$6[ebp], 0
	jmp	SHORT $LN27@FT_Done_Li
$LN26@FT_Done_Li:
	mov	eax, DWORD PTR _m$6[ebp]
	add	eax, 1
	mov	DWORD PTR _m$6[ebp], eax
$LN27@FT_Done_Li:
	cmp	DWORD PTR _m$6[ebp], 2
	jae	$LN8@FT_Done_Li
; Line 4780
	mov	DWORD PTR _n$5[ebp], 0
	jmp	SHORT $LN24@FT_Done_Li
$LN23@FT_Done_Li:
	mov	ecx, DWORD PTR _n$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$5[ebp], ecx
$LN24@FT_Done_Li:
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR _n$5[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	$LN22@FT_Done_Li
; Line 4782
	mov	ecx, DWORD PTR _n$5[ebp]
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+20]
	mov	DWORD PTR _module$3[ebp], eax
; Line 4783
	mov	ecx, DWORD PTR _module$3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _module_name$2[ebp], eax
; Line 4788
	mov	ecx, DWORD PTR _m$6[ebp]
	cmp	DWORD PTR _driver_name$4[ebp+ecx*4], 0
	je	SHORT $LN21@FT_Done_Li
	mov	edx, DWORD PTR _m$6[ebp]
	mov	eax, DWORD PTR _driver_name$4[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _module_name$2[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN21@FT_Done_Li
; Line 4789
	jmp	SHORT $LN23@FT_Done_Li
$LN21@FT_Done_Li:
; Line 4791
	mov	edx, DWORD PTR _module$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	jne	SHORT $LN19@FT_Done_Li
; Line 4792
	jmp	SHORT $LN23@FT_Done_Li
$LN19@FT_Done_Li:
; Line 4794
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 7
	jl	SHORT $LN18@FT_Done_Li
	mov	ecx, DWORD PTR _module_name$2[ebp]
	push	ecx
	push	OFFSET $SG11987
	call	_FT_Message
	add	esp, 8
$LN18@FT_Done_Li:
	xor	edx, edx
	jne	SHORT $LN19@FT_Done_Li
; Line 4796
	mov	eax, DWORD PTR _module$3[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _faces$1[ebp], eax
$LN15@FT_Done_Li:
; Line 4797
	mov	ecx, DWORD PTR _faces$1[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN14@FT_Done_Li
; Line 4799
	mov	edx, DWORD PTR _faces$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_FT_Done_Face
	add	esp, 4
; Line 4800
	mov	edx, DWORD PTR _faces$1[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN13@FT_Done_Li
$LN12@FT_Done_Li:
; Line 4801
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 0
	jl	SHORT $LN11@FT_Done_Li
	push	OFFSET $SG11998
	call	_FT_Message
	add	esp, 4
$LN11@FT_Done_Li:
	xor	edx, edx
	jne	SHORT $LN12@FT_Done_Li
$LN13@FT_Done_Li:
; Line 4802
	jmp	SHORT $LN15@FT_Done_Li
$LN14@FT_Done_Li:
; Line 4803
	jmp	$LN23@FT_Done_Li
$LN22@FT_Done_Li:
; Line 4804
	jmp	$LN26@FT_Done_Li
$LN8@FT_Done_Li:
; Line 4812
	mov	eax, DWORD PTR _library$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jbe	SHORT $LN6@FT_Done_Li
; Line 4814
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+16]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_FT_Remove_Module
	add	esp, 8
	jmp	SHORT $LN8@FT_Done_Li
$LN6@FT_Done_Li:
; Line 4835
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	eax, DWORD PTR _library$[ebp]
	mov	DWORD PTR [eax+164], 0
	xor	ecx, ecx
	jne	SHORT $LN6@FT_Done_Li
; Line 4836
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [edx+168], 0
$LN3@FT_Done_Li:
; Line 4843
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _library$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@FT_Done_Li
$Exit$35:
; Line 4846
	xor	eax, eax
$LN30@FT_Done_Li:
; Line 4847
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@FT_Done_Li
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN34@FT_Done_Li:
	DD	1
	DD	$LN33@FT_Done_Li
$LN33@FT_Done_Li:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN32@FT_Done_Li
$LN32@FT_Done_Li:
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_FT_Done_Library ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -12						; size = 4
_library$ = -4						; size = 4
_memory$ = 8						; size = 4
_alibrary$ = 12						; size = 4
_FT_New_Library PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4654
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 4655
	mov	DWORD PTR _library$[ebp], 0
; Line 4659
	cmp	DWORD PTR _memory$[ebp], 0
	je	SHORT $LN6@FT_New_Lib
	cmp	DWORD PTR _alibrary$[ebp], 0
	jne	SHORT $LN7@FT_New_Lib
$LN6@FT_New_Lib:
; Line 4660
	push	OFFSET $SG11932
	push	4660					; 00001234H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN8@FT_New_Lib
$LN7@FT_New_Lib:
; Line 4664
	call	_ft_debug_init
; Line 4668
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	192					; 000000c0H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _library$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@FT_New_Lib
; Line 4669
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN8@FT_New_Lib
$LN5@FT_New_Lib:
; Line 4671
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [edx], eax
; Line 4681
	mov	ecx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [ecx+168], 16384		; 00004000H
; Line 4683
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	16384					; 00004000H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [ecx+164], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FT_New_Lib
; Line 4684
	jmp	SHORT $Fail$13
$LN4@FT_New_Lib:
; Line 4687
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [edx+4], 2
; Line 4688
	mov	eax, DWORD PTR _library$[ebp]
	mov	DWORD PTR [eax+8], 5
; Line 4689
	mov	ecx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [ecx+12], 5
; Line 4691
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [edx+188], 1
; Line 4694
	mov	eax, DWORD PTR _alibrary$[ebp]
	mov	ecx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 4696
	xor	eax, eax
	jmp	SHORT $LN8@FT_New_Lib
$Fail$13:
; Line 4702
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _library$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $Fail$13
; Line 4703
	mov	eax, DWORD PTR _error$[ebp]
$LN8@FT_New_Lib:
; Line 4704
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@FT_New_Lib
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@FT_New_Lib:
	DD	1
	DD	$LN11@FT_New_Lib
$LN11@FT_New_Lib:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN10@FT_New_Lib
$LN10@FT_New_Lib:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_New_Library ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = 8						; size = 4
_FT_Reference_Library PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4639
	push	ebp
	mov	ebp, esp
; Line 4640
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN1@FT_Referen
; Line 4641
	push	OFFSET $SG11921
	push	4641					; 00001221H
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	SHORT $LN2@FT_Referen
$LN1@FT_Referen:
; Line 4643
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	add	ecx, 1
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [edx+188], ecx
; Line 4645
	xor	eax, eax
$LN2@FT_Referen:
; Line 4646
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Reference_Library ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = 8						; size = 4
_module_name$ = 12					; size = 4
_property_name$ = 16					; size = 4
_value$ = 20						; size = 4
_FT_Property_Get PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4613
	push	ebp
	mov	ebp, esp
; Line 4618
	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _module_name$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_ft_property_do
	add	esp, 20					; 00000014H
; Line 4619
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Property_Get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = 8						; size = 4
_module_name$ = 12					; size = 4
_property_name$ = 16					; size = 4
_value$ = 20						; size = 4
_FT_Property_Set PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4597
	push	ebp
	mov	ebp, esp
; Line 4602
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _property_name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _module_name$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_ft_property_do
	add	esp, 20					; 00000014H
; Line 4603
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Property_Set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$1 = -8						; size = 4
_cur$2 = -4						; size = 4
_library$ = 8						; size = 4
_module$ = 12						; size = 4
_FT_Remove_Module PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4473
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4476
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN8@FT_Remove_
; Line 4477
	push	OFFSET $SG11837
	push	4477					; 0000117dH
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	$LN9@FT_Remove_
$LN8@FT_Remove_:
; Line 4479
	cmp	DWORD PTR _module$[ebp], 0
	je	$LN7@FT_Remove_
; Line 4481
	mov	eax, DWORD PTR _library$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _cur$2[ebp], eax
; Line 4482
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _cur$2[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _limit$1[ebp], ecx
; Line 4485
	jmp	SHORT $LN6@FT_Remove_
$LN5@FT_Remove_:
	mov	edx, DWORD PTR _cur$2[ebp]
	add	edx, 4
	mov	DWORD PTR _cur$2[ebp], edx
$LN6@FT_Remove_:
	mov	eax, DWORD PTR _cur$2[ebp]
	cmp	eax, DWORD PTR _limit$1[ebp]
	jae	$LN7@FT_Remove_
; Line 4487
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$2[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	cmp	ecx, DWORD PTR _module$[ebp]
	jne	SHORT $LN3@FT_Remove_
; Line 4490
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, 1
	mov	ecx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 4491
	mov	edx, DWORD PTR _limit$1[ebp]
	sub	edx, 4
	mov	DWORD PTR _limit$1[ebp], edx
$LN2@FT_Remove_:
; Line 4492
	mov	eax, DWORD PTR _cur$2[ebp]
	cmp	eax, DWORD PTR _limit$1[ebp]
	jae	SHORT $LN1@FT_Remove_
; Line 4494
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _cur$2[ebp]
	mov	esi, DWORD PTR _cur$2[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
; Line 4495
	mov	edx, DWORD PTR _cur$2[ebp]
	add	edx, 4
	mov	DWORD PTR _cur$2[ebp], edx
; Line 4496
	jmp	SHORT $LN2@FT_Remove_
$LN1@FT_Remove_:
; Line 4497
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _limit$1[ebp]
	mov	DWORD PTR [edx+ecx], 0
; Line 4500
	mov	eax, DWORD PTR _module$[ebp]
	push	eax
	call	_Destroy_Module
	add	esp, 4
; Line 4502
	xor	eax, eax
	jmp	SHORT $LN9@FT_Remove_
$LN3@FT_Remove_:
; Line 4504
	jmp	$LN5@FT_Remove_
$LN7@FT_Remove_:
; Line 4506
	push	OFFSET $SG11848
	push	4506					; 0000119aH
	push	34					; 00000022H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 34					; 00000022H
$LN9@FT_Remove_:
; Line 4507
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Remove_Module ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$ = -12						; size = 4
_cur$ = -8						; size = 4
_result$ = -4						; size = 4
_library$ = 8						; size = 4
_module_name$ = 12					; size = 4
_FT_Get_Module PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4384
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4385
	mov	DWORD PTR _result$[ebp], 0
; Line 4390
	cmp	DWORD PTR _library$[ebp], 0
	je	SHORT $LN5@FT_Get_Mod
	cmp	DWORD PTR _module_name$[ebp], 0
	jne	SHORT $LN6@FT_Get_Mod
$LN5@FT_Get_Mod:
; Line 4391
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN7@FT_Get_Mod
$LN6@FT_Get_Mod:
; Line 4393
	mov	eax, DWORD PTR _library$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _cur$[ebp], eax
; Line 4394
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _cur$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 4396
	jmp	SHORT $LN4@FT_Get_Mod
$LN3@FT_Get_Mod:
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 4
	mov	DWORD PTR _cur$[ebp], edx
$LN4@FT_Get_Mod:
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN2@FT_Get_Mod
; Line 4397
	mov	ecx, DWORD PTR _module_name$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@FT_Get_Mod
; Line 4399
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _result$[ebp], edx
; Line 4400
	jmp	SHORT $LN2@FT_Get_Mod
$LN1@FT_Get_Mod:
; Line 4401
	jmp	SHORT $LN3@FT_Get_Mod
$LN2@FT_Get_Mod:
; Line 4403
	mov	eax, DWORD PTR _result$[ebp]
$LN7@FT_Get_Mod:
; Line 4404
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Module ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_renderer$1 = -36					; size = 4
_driver$2 = -32						; size = 4
_driver$3 = -28						; size = 4
_nn$ = -24						; size = 4
_module$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_clazz$ = 12						; size = 4
_FT_Add_Module PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4255
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 4265
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN25@FT_Add_Mod
; Line 4266
	push	OFFSET $SG11727
	push	4266					; 000010aaH
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	$LN26@FT_Add_Mod
$LN25@FT_Add_Mod:
; Line 4268
	cmp	DWORD PTR _clazz$[ebp], 0
	jne	SHORT $LN24@FT_Add_Mod
; Line 4269
	push	OFFSET $SG11729
	push	4269					; 000010adH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN26@FT_Add_Mod
$LN24@FT_Add_Mod:
; Line 4272
	mov	eax, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [eax+16], 131077		; 00020005H
	jle	SHORT $LN23@FT_Add_Mod
; Line 4273
	push	OFFSET $SG11732
	push	4273					; 000010b1H
	push	4
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 4
	jmp	$LN26@FT_Add_Mod
$LN23@FT_Add_Mod:
; Line 4276
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN22@FT_Add_Mod
$LN21@FT_Add_Mod:
	mov	ecx, DWORD PTR _nn$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nn$[ebp], ecx
$LN22@FT_Add_Mod:
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR _nn$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $LN20@FT_Add_Mod
; Line 4278
	mov	ecx, DWORD PTR _nn$[ebp]
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+20]
	mov	DWORD PTR _module$[ebp], eax
; Line 4279
	mov	ecx, DWORD PTR _clazz$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@FT_Add_Mod
; Line 4282
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _clazz$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR [ecx+12]
	jg	SHORT $LN18@FT_Add_Mod
; Line 4283
	push	OFFSET $SG11738
	push	4283					; 000010bbH
	push	5
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 5
	jmp	$LN26@FT_Add_Mod
$LN18@FT_Add_Mod:
; Line 4287
	mov	ecx, DWORD PTR _module$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_FT_Remove_Module
	add	esp, 8
; Line 4288
	jmp	SHORT $LN20@FT_Add_Mod
$LN19@FT_Add_Mod:
; Line 4290
	jmp	SHORT $LN21@FT_Add_Mod
$LN20@FT_Add_Mod:
; Line 4292
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 4293
	mov	DWORD PTR _error$[ebp], 0
; Line 4295
	mov	edx, DWORD PTR _library$[ebp]
	cmp	DWORD PTR [edx+16], 32			; 00000020H
	jb	SHORT $LN17@FT_Add_Mod
; Line 4297
	push	OFFSET $SG11740
	push	4297					; 000010c9H
	push	48					; 00000030H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 48					; 00000030H
	mov	DWORD PTR _error$[ebp], eax
; Line 4298
	jmp	$Exit$31
$LN17@FT_Add_Mod:
; Line 4302
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clazz$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _module$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN16@FT_Add_Mod
; Line 4303
	jmp	$Exit$31
$LN16@FT_Add_Mod:
; Line 4306
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 4307
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 4308
	mov	edx, DWORD PTR _module$[ebp]
	mov	eax, DWORD PTR _clazz$[ebp]
	mov	DWORD PTR [edx], eax
; Line 4312
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	and	eax, 2
	je	SHORT $LN15@FT_Add_Mod
; Line 4315
	mov	ecx, DWORD PTR _module$[ebp]
	push	ecx
	call	_ft_add_renderer
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 4316
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@FT_Add_Mod
; Line 4317
	jmp	$Fail$32
$LN15@FT_Add_Mod:
; Line 4321
	mov	edx, DWORD PTR _module$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 4
	je	SHORT $LN13@FT_Add_Mod
; Line 4322
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR [edx+160], eax
$LN13@FT_Add_Mod:
; Line 4325
	mov	ecx, DWORD PTR _module$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	and	eax, 1
	je	SHORT $LN12@FT_Add_Mod
; Line 4328
	mov	ecx, DWORD PTR _module$[ebp]
	mov	DWORD PTR _driver$3[ebp], ecx
; Line 4331
	mov	edx, DWORD PTR _driver$3[ebp]
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+12], ecx
; Line 4332
	mov	edx, DWORD PTR _driver$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 512				; 00000200H
	jne	SHORT $LN12@FT_Add_Mod
; Line 4334
	mov	edx, DWORD PTR _driver$3[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_FT_GlyphLoader_New
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 4335
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN12@FT_Add_Mod
; Line 4336
	jmp	SHORT $Fail$32
$LN12@FT_Add_Mod:
; Line 4340
	mov	ecx, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN9@FT_Add_Mod
; Line 4342
	mov	esi, esp
	mov	edx, DWORD PTR _module$[ebp]
	push	edx
	mov	eax, DWORD PTR _clazz$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 4343
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN9@FT_Add_Mod
; Line 4344
	jmp	SHORT $Fail$32
$LN9@FT_Add_Mod:
; Line 4348
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR _module$[ebp]
	mov	DWORD PTR [ecx+eax*4+20], edx
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [edx+16], ecx
$Exit$31:
; Line 4351
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN26@FT_Add_Mod
$Fail$32:
; Line 4354
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	SHORT $LN7@FT_Add_Mod
; Line 4356
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _driver$2[ebp], eax
; Line 4359
	mov	ecx, DWORD PTR _driver$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	and	eax, 512				; 00000200H
	jne	SHORT $LN7@FT_Add_Mod
; Line 4360
	mov	ecx, DWORD PTR _driver$2[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_FT_GlyphLoader_Done
	add	esp, 4
$LN7@FT_Add_Mod:
; Line 4363
	mov	eax, DWORD PTR _module$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	and	edx, 2
	je	SHORT $LN3@FT_Add_Mod
; Line 4365
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _renderer$1[ebp], eax
; Line 4370
	mov	ecx, DWORD PTR _renderer$1[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN3@FT_Add_Mod
	mov	edx, DWORD PTR _renderer$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax+36], 1869968492		; 6f75746cH
	jne	SHORT $LN3@FT_Add_Mod
	mov	ecx, DWORD PTR _renderer$1[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN3@FT_Add_Mod
; Line 4371
	mov	esi, esp
	mov	edx, DWORD PTR _renderer$1[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _renderer$1[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@FT_Add_Mod:
; Line 4374
	mov	edx, DWORD PTR _module$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _module$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@FT_Add_Mod
; Line 4375
	jmp	$Exit$31
$LN26@FT_Add_Mod:
; Line 4376
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@FT_Add_Mod
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN30@FT_Add_Mod:
	DD	1
	DD	$LN29@FT_Add_Mod
$LN29@FT_Add_Mod:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN28@FT_Add_Mod
$LN28@FT_Add_Mod:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_Add_Module ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_patch$ = -12						; size = 4
_minor$ = -8						; size = 4
_major$ = -4						; size = 4
_library$ = 8						; size = 4
_amajor$ = 12						; size = 4
_aminor$ = 16						; size = 4
_apatch$ = 20						; size = 4
_FT_Library_Version PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4714
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4715
	mov	DWORD PTR _major$[ebp], 0
; Line 4716
	mov	DWORD PTR _minor$[ebp], 0
; Line 4717
	mov	DWORD PTR _patch$[ebp], 0
; Line 4720
	cmp	DWORD PTR _library$[ebp], 0
	je	SHORT $LN4@FT_Library
; Line 4722
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _major$[ebp], ecx
; Line 4723
	mov	edx, DWORD PTR _library$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _minor$[ebp], eax
; Line 4724
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _patch$[ebp], edx
$LN4@FT_Library:
; Line 4727
	cmp	DWORD PTR _amajor$[ebp], 0
	je	SHORT $LN3@FT_Library
; Line 4728
	mov	eax, DWORD PTR _amajor$[ebp]
	mov	ecx, DWORD PTR _major$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@FT_Library:
; Line 4730
	cmp	DWORD PTR _aminor$[ebp], 0
	je	SHORT $LN2@FT_Library
; Line 4731
	mov	edx, DWORD PTR _aminor$[ebp]
	mov	eax, DWORD PTR _minor$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@FT_Library:
; Line 4733
	cmp	DWORD PTR _apatch$[ebp], 0
	je	SHORT $LN5@FT_Library
; Line 4734
	mov	ecx, DWORD PTR _apatch$[ebp]
	mov	edx, DWORD PTR _patch$[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@FT_Library:
; Line 4735
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Library_Version ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_yz$ = -8						; size = 4
_xz$ = -4						; size = 4
_vector$ = 8						; size = 4
_matrix$ = 12						; size = 4
_FT_Vector_Transform PROC
; File d:\mozilla\modules\freetype2\src\base\ftoutln.c
; Line 693
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 697
	cmp	DWORD PTR _vector$[ebp], 0
	je	SHORT $LN1@FT_Vector_
	cmp	DWORD PTR _matrix$[ebp], 0
	jne	SHORT $LN2@FT_Vector_
$LN1@FT_Vector_:
; Line 698
	jmp	SHORT $LN3@FT_Vector_
$LN2@FT_Vector_:
; Line 701
	mov	eax, DWORD PTR _matrix$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_MulFix
	add	esp, 8
	mov	esi, eax
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_FT_MulFix
	add	esp, 8
	add	esi, eax
	mov	DWORD PTR _xz$[ebp], esi
; Line 704
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	mov	esi, eax
	mov	eax, DWORD PTR _matrix$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_MulFix
	add	esp, 8
	add	esi, eax
	mov	DWORD PTR _yz$[ebp], esi
; Line 706
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR _xz$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 707
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _yz$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN3@FT_Vector_:
; Line 708
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Vector_Transform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -4						; size = 4
_a$ = 8							; size = 4
_FT_FloorFix PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 108
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 110
	cmp	DWORD PTR _a$[ebp], 0
	jl	SHORT $LN3@FT_FloorFi
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, -65536				; ffff0000H
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@FT_FloorFi
$LN3@FT_FloorFi:
	mov	ecx, DWORD PTR _a$[ebp]
	neg	ecx
	and	ecx, -65536				; ffff0000H
	neg	ecx
	mov	DWORD PTR tv69[ebp], ecx
$LN4@FT_FloorFi:
	mov	eax, DWORD PTR tv69[ebp]
; Line 111
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_FloorFix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -4						; size = 4
_a$ = 8							; size = 4
_FT_CeilFix PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 98
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 100
	cmp	DWORD PTR _a$[ebp], 0
	jl	SHORT $LN3@FT_CeilFix
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 65535				; 0000ffffH
	and	eax, -65536				; ffff0000H
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@FT_CeilFix
$LN3@FT_CeilFix:
	mov	ecx, DWORD PTR _a$[ebp]
	neg	ecx
	add	ecx, 65535				; 0000ffffH
	and	ecx, -65536				; ffff0000H
	neg	ecx
	mov	DWORD PTR tv71[ebp], ecx
$LN4@FT_CeilFix:
	mov	eax, DWORD PTR tv71[ebp]
; Line 101
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_CeilFix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -4						; size = 4
_a$ = 8							; size = 4
_FT_RoundFix PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 88
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 90
	cmp	DWORD PTR _a$[ebp], 0
	jl	SHORT $LN3@FT_RoundFi
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 32768				; 00008000H
	and	eax, -65536				; ffff0000H
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@FT_RoundFi
$LN3@FT_RoundFi:
	mov	ecx, DWORD PTR _a$[ebp]
	neg	ecx
	add	ecx, 32768				; 00008000H
	and	ecx, -65536				; ffff0000H
	neg	ecx
	mov	DWORD PTR tv71[ebp], ecx
$LN4@FT_RoundFi:
	mov	eax, DWORD PTR tv71[ebp]
; Line 91
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_RoundFix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv92 = -44						; size = 4
_temp2$1 = -36						; size = 8
_temp$2 = -20						; size = 8
_q$ = -8						; size = 4
_s$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_DivFix PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 589
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 590
	mov	DWORD PTR _s$[ebp], 1
$LN12@FT_DivFix:
; Line 596
	cmp	DWORD PTR _a$[ebp], 0
	jge	SHORT $LN11@FT_DivFix
	mov	eax, DWORD PTR _a$[ebp]
	neg	eax
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	neg	ecx
	mov	DWORD PTR _s$[ebp], ecx
$LN11@FT_DivFix:
	xor	edx, edx
	jne	SHORT $LN12@FT_DivFix
$LN8@FT_DivFix:
; Line 597
	cmp	DWORD PTR _b$[ebp], 0
	jge	SHORT $LN7@FT_DivFix
	mov	eax, DWORD PTR _b$[ebp]
	neg	eax
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	neg	ecx
	mov	DWORD PTR _s$[ebp], ecx
$LN7@FT_DivFix:
	xor	edx, edx
	jne	SHORT $LN8@FT_DivFix
; Line 599
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN4@FT_DivFix
; Line 602
	mov	DWORD PTR _q$[ebp], 2147483647		; 7fffffffH
	jmp	SHORT $LN3@FT_DivFix
$LN4@FT_DivFix:
; Line 604
	mov	eax, DWORD PTR _b$[ebp]
	sar	eax, 17					; 00000011H
	mov	ecx, 65535				; 0000ffffH
	sub	ecx, eax
	cmp	DWORD PTR _a$[ebp], ecx
	jg	SHORT $LN2@FT_DivFix
; Line 607
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 16					; 00000010H
	mov	edx, DWORD PTR _b$[ebp]
	sar	edx, 1
	add	eax, edx
	xor	edx, edx
	div	DWORD PTR _b$[ebp]
	mov	DWORD PTR _q$[ebp], eax
; Line 609
	jmp	SHORT $LN3@FT_DivFix
$LN2@FT_DivFix:
; Line 615
	mov	eax, DWORD PTR _a$[ebp]
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _temp$2[ebp+4], eax
; Line 616
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 16					; 00000010H
	mov	DWORD PTR _temp$2[ebp], ecx
; Line 617
	mov	DWORD PTR _temp2$1[ebp+4], 0
; Line 618
	mov	edx, DWORD PTR _b$[ebp]
	sar	edx, 1
	mov	DWORD PTR _temp2$1[ebp], edx
; Line 620
	lea	eax, DWORD PTR _temp$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp2$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _temp$2[ebp]
	push	edx
	call	_FT_Add64
	add	esp, 12					; 0000000cH
; Line 621
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _temp$2[ebp+4]
	push	edx
	call	_ft_div64by32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _q$[ebp], eax
$LN3@FT_DivFix:
; Line 624
	cmp	DWORD PTR _s$[ebp], 0
	jge	SHORT $LN15@FT_DivFix
	mov	eax, DWORD PTR _q$[ebp]
	neg	eax
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN16@FT_DivFix
$LN15@FT_DivFix:
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv92[ebp], ecx
$LN16@FT_DivFix:
	mov	eax, DWORD PTR tv92[ebp]
; Line 625
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@FT_DivFix
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@FT_DivFix:
	DD	2
	DD	$LN19@FT_DivFix
$LN19@FT_DivFix:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN17@FT_DivFix
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN18@FT_DivFix
$LN18@FT_DivFix:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	50					; 00000032H
	DB	0
$LN17@FT_DivFix:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_FT_DivFix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_FT_MulFix PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 488
	push	ebp
	mov	ebp, esp
; Line 491
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_FT_MulFix_i386
	add	esp, 8
; Line 581
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_MulFix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv135 = -44						; size = 4
tv132 = -40						; size = 4
_temp2$1 = -32						; size = 8
_temp$2 = -16						; size = 8
_s$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_FT_MulDiv PROC
; File d:\mozilla\modules\freetype2\src\base\ftcalc.c
; Line 407
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 408
	mov	DWORD PTR _s$[ebp], 1
; Line 412
	cmp	DWORD PTR _a$[ebp], 0
	je	SHORT $LN17@FT_MulDiv
	mov	eax, DWORD PTR _b$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jne	SHORT $LN16@FT_MulDiv
$LN17@FT_MulDiv:
; Line 413
	mov	eax, DWORD PTR _a$[ebp]
	jmp	$LN19@FT_MulDiv
$LN16@FT_MulDiv:
; Line 415
	cmp	DWORD PTR _a$[ebp], 0
	jge	SHORT $LN15@FT_MulDiv
	mov	ecx, DWORD PTR _a$[ebp]
	neg	ecx
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	neg	edx
	mov	DWORD PTR _s$[ebp], edx
$LN15@FT_MulDiv:
	xor	eax, eax
	jne	SHORT $LN16@FT_MulDiv
$LN12@FT_MulDiv:
; Line 416
	cmp	DWORD PTR _b$[ebp], 0
	jge	SHORT $LN11@FT_MulDiv
	mov	ecx, DWORD PTR _b$[ebp]
	neg	ecx
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	neg	edx
	mov	DWORD PTR _s$[ebp], edx
$LN11@FT_MulDiv:
	xor	eax, eax
	jne	SHORT $LN12@FT_MulDiv
$LN8@FT_MulDiv:
; Line 417
	cmp	DWORD PTR _c$[ebp], 0
	jge	SHORT $LN7@FT_MulDiv
	mov	ecx, DWORD PTR _c$[ebp]
	neg	ecx
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	neg	edx
	mov	DWORD PTR _s$[ebp], edx
$LN7@FT_MulDiv:
	xor	eax, eax
	jne	SHORT $LN8@FT_MulDiv
; Line 419
	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN4@FT_MulDiv
; Line 420
	mov	DWORD PTR _a$[ebp], 2147483647		; 7fffffffH
	jmp	$LN3@FT_MulDiv
$LN4@FT_MulDiv:
; Line 422
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	sar	edx, 17					; 00000011H
	mov	eax, 129894				; 0001fb66H
	sub	eax, edx
	cmp	ecx, eax
	ja	SHORT $LN2@FT_MulDiv
; Line 423
	mov	eax, DWORD PTR _a$[ebp]
	imul	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	sar	ecx, 1
	add	eax, ecx
	xor	edx, edx
	div	DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 425
	jmp	SHORT $LN3@FT_MulDiv
$LN2@FT_MulDiv:
; Line 430
	lea	edx, DWORD PTR _temp$2[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_ft_multo64
	add	esp, 12					; 0000000cH
; Line 432
	mov	DWORD PTR _temp2$1[ebp+4], 0
; Line 433
	mov	edx, DWORD PTR _c$[ebp]
	sar	edx, 1
	mov	DWORD PTR _temp2$1[ebp], edx
; Line 435
	lea	eax, DWORD PTR _temp$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp2$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _temp$2[ebp]
	push	edx
	call	_FT_Add64
	add	esp, 12					; 0000000cH
; Line 439
	cmp	DWORD PTR _temp$2[ebp+4], 0
	jne	SHORT $LN21@FT_MulDiv
	mov	eax, DWORD PTR _temp$2[ebp]
	xor	edx, edx
	div	DWORD PTR _c$[ebp]
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN22@FT_MulDiv
$LN21@FT_MulDiv:
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _temp$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _temp$2[ebp+4]
	push	edx
	call	_ft_div64by32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv132[ebp], eax
$LN22@FT_MulDiv:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR _a$[ebp], eax
$LN3@FT_MulDiv:
; Line 442
	cmp	DWORD PTR _s$[ebp], 0
	jge	SHORT $LN23@FT_MulDiv
	mov	ecx, DWORD PTR _a$[ebp]
	neg	ecx
	mov	DWORD PTR tv135[ebp], ecx
	jmp	SHORT $LN24@FT_MulDiv
$LN23@FT_MulDiv:
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv135[ebp], edx
$LN24@FT_MulDiv:
	mov	eax, DWORD PTR tv135[ebp]
$LN19@FT_MulDiv:
; Line 443
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@FT_MulDiv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@FT_MulDiv:
	DD	2
	DD	$LN27@FT_MulDiv
$LN27@FT_MulDiv:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN25@FT_MulDiv
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN26@FT_MulDiv
$LN26@FT_MulDiv:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	50					; 00000032H
	DB	0
$LN25@FT_MulDiv:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_FT_MulDiv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -16						; size = 4
_vcmap$2 = -12						; size = 4
_charmap$3 = -8						; size = 4
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_variantSelector$ = 12					; size = 4
_FT_Face_GetCharsOfVariant PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3572
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3573
	mov	DWORD PTR _result$[ebp], 0
; Line 3576
	cmp	DWORD PTR _face$[ebp], 0
	je	$LN11@FT_Face_Ge
; Line 3578
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_find_variant_selector_charmap
	add	esp, 4
	mov	DWORD PTR _charmap$3[ebp], eax
; Line 3581
	cmp	DWORD PTR _charmap$3[ebp], 0
	je	$LN11@FT_Face_Ge
; Line 3583
	mov	ecx, DWORD PTR _charmap$3[ebp]
	mov	DWORD PTR _vcmap$2[ebp], ecx
; Line 3584
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$1[ebp], eax
; Line 3587
	cmp	DWORD PTR _variantSelector$[ebp], -1
	jbe	SHORT $LN9@FT_Face_Ge
$LN8@FT_Face_Ge:
; Line 3589
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN7@FT_Face_Ge
	push	OFFSET $SG11273
	call	_FT_Message
	add	esp, 4
$LN7@FT_Face_Ge:
	xor	eax, eax
	jne	SHORT $LN8@FT_Face_Ge
$LN4@FT_Face_Ge:
; Line 3590
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN3@FT_Face_Ge
	mov	eax, DWORD PTR _variantSelector$[ebp]
	push	eax
	push	OFFSET $SG11278
	call	_FT_Message
	add	esp, 8
$LN3@FT_Face_Ge:
	xor	ecx, ecx
	jne	SHORT $LN4@FT_Face_Ge
$LN9@FT_Face_Ge:
; Line 3594
	mov	esi, esp
	mov	edx, DWORD PTR _variantSelector$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _vcmap$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _vcmap$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN11@FT_Face_Ge:
; Line 3598
	mov	eax, DWORD PTR _result$[ebp]
; Line 3599
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Face_GetCharsOfVariant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -16						; size = 4
_vcmap$2 = -12						; size = 4
_charmap$3 = -8						; size = 4
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_charcode$ = 12						; size = 4
_FT_Face_GetVariantsOfChar PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3538
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3539
	mov	DWORD PTR _result$[ebp], 0
; Line 3542
	cmp	DWORD PTR _face$[ebp], 0
	je	$LN11@FT_Face_Ge
; Line 3544
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_find_variant_selector_charmap
	add	esp, 4
	mov	DWORD PTR _charmap$3[ebp], eax
; Line 3547
	cmp	DWORD PTR _charmap$3[ebp], 0
	je	$LN11@FT_Face_Ge
; Line 3549
	mov	ecx, DWORD PTR _charmap$3[ebp]
	mov	DWORD PTR _vcmap$2[ebp], ecx
; Line 3550
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$1[ebp], eax
; Line 3553
	cmp	DWORD PTR _charcode$[ebp], -1
	jbe	SHORT $LN9@FT_Face_Ge
$LN8@FT_Face_Ge:
; Line 3555
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN7@FT_Face_Ge
	push	OFFSET $SG11246
	call	_FT_Message
	add	esp, 4
$LN7@FT_Face_Ge:
	xor	eax, eax
	jne	SHORT $LN8@FT_Face_Ge
$LN4@FT_Face_Ge:
; Line 3556
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN3@FT_Face_Ge
	mov	eax, DWORD PTR _charcode$[ebp]
	push	eax
	push	OFFSET $SG11251
	call	_FT_Message
	add	esp, 8
$LN3@FT_Face_Ge:
	xor	ecx, ecx
	jne	SHORT $LN4@FT_Face_Ge
$LN9@FT_Face_Ge:
; Line 3560
	mov	esi, esp
	mov	edx, DWORD PTR _charcode$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _vcmap$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _vcmap$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN11@FT_Face_Ge:
; Line 3563
	mov	eax, DWORD PTR _result$[ebp]
; Line 3564
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Face_GetVariantsOfChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -16						; size = 4
_vcmap$2 = -12						; size = 4
_charmap$3 = -8						; size = 4
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_FT_Face_GetVariantSelectors PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3510
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3511
	mov	DWORD PTR _result$[ebp], 0
; Line 3514
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN2@FT_Face_Ge
; Line 3516
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_find_variant_selector_charmap
	add	esp, 4
	mov	DWORD PTR _charmap$3[ebp], eax
; Line 3519
	cmp	DWORD PTR _charmap$3[ebp], 0
	je	SHORT $LN2@FT_Face_Ge
; Line 3521
	mov	ecx, DWORD PTR _charmap$3[ebp]
	mov	DWORD PTR _vcmap$2[ebp], ecx
; Line 3522
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _memory$1[ebp], eax
; Line 3525
	mov	esi, esp
	mov	ecx, DWORD PTR _memory$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _vcmap$2[ebp]
	push	edx
	mov	eax, DWORD PTR _vcmap$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN2@FT_Face_Ge:
; Line 3529
	mov	eax, DWORD PTR _result$[ebp]
; Line 3530
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Face_GetVariantSelectors ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vcmap$1 = -12						; size = 4
_charmap$2 = -8						; size = 4
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_charcode$ = 12						; size = 4
_variantSelector$ = 16					; size = 4
_FT_Face_GetCharVariantIsDefault PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3471
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3472
	mov	DWORD PTR _result$[ebp], -1
; Line 3475
	cmp	DWORD PTR _face$[ebp], 0
	je	$LN20@FT_Face_Ge
; Line 3477
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_find_variant_selector_charmap
	add	esp, 4
	mov	DWORD PTR _charmap$2[ebp], eax
; Line 3480
	cmp	DWORD PTR _charmap$2[ebp], 0
	je	$LN20@FT_Face_Ge
; Line 3482
	mov	ecx, DWORD PTR _charmap$2[ebp]
	mov	DWORD PTR _vcmap$1[ebp], ecx
; Line 3485
	cmp	DWORD PTR _charcode$[ebp], -1
	jbe	SHORT $LN18@FT_Face_Ge
$LN17@FT_Face_Ge:
; Line 3487
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN16@FT_Face_Ge
	push	OFFSET $SG11194
	call	_FT_Message
	add	esp, 4
$LN16@FT_Face_Ge:
	xor	ecx, ecx
	jne	SHORT $LN17@FT_Face_Ge
$LN13@FT_Face_Ge:
; Line 3488
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN12@FT_Face_Ge
	mov	ecx, DWORD PTR _charcode$[ebp]
	push	ecx
	push	OFFSET $SG11199
	call	_FT_Message
	add	esp, 8
$LN12@FT_Face_Ge:
	xor	edx, edx
	jne	SHORT $LN13@FT_Face_Ge
$LN18@FT_Face_Ge:
; Line 3490
	cmp	DWORD PTR _variantSelector$[ebp], -1
	jbe	SHORT $LN9@FT_Face_Ge
$LN8@FT_Face_Ge:
; Line 3492
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN7@FT_Face_Ge
	push	OFFSET $SG11205
	call	_FT_Message
	add	esp, 4
$LN7@FT_Face_Ge:
	xor	edx, edx
	jne	SHORT $LN8@FT_Face_Ge
$LN4@FT_Face_Ge:
; Line 3493
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN3@FT_Face_Ge
	mov	edx, DWORD PTR _variantSelector$[ebp]
	push	edx
	push	OFFSET $SG11210
	call	_FT_Message
	add	esp, 8
$LN3@FT_Face_Ge:
	xor	eax, eax
	jne	SHORT $LN4@FT_Face_Ge
$LN9@FT_Face_Ge:
; Line 3498
	mov	esi, esp
	mov	ecx, DWORD PTR _variantSelector$[ebp]
	push	ecx
	mov	edx, DWORD PTR _charcode$[ebp]
	push	edx
	mov	eax, DWORD PTR _vcmap$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _vcmap$1[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	mov	DWORD PTR _result$[ebp], ecx
$LN20@FT_Face_Ge:
; Line 3502
	mov	eax, DWORD PTR _result$[ebp]
; Line 3503
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Face_GetCharVariantIsDefault ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vcmap$1 = -16						; size = 4
_ucmap$2 = -12						; size = 4
_charmap$3 = -8						; size = 4
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_charcode$ = 12						; size = 4
_variantSelector$ = 16					; size = 4
_FT_Face_GetCharVariantIndex PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3427
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3428
	mov	DWORD PTR _result$[ebp], 0
; Line 3433
	cmp	DWORD PTR _face$[ebp], 0
	je	$LN20@FT_Face_Ge
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	$LN20@FT_Face_Ge
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	cmp	DWORD PTR [edx+4], 1970170211		; 756e6963H
	jne	$LN20@FT_Face_Ge
; Line 3435
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_find_variant_selector_charmap
	add	esp, 4
	mov	DWORD PTR _charmap$3[ebp], eax
; Line 3436
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR _ucmap$2[ebp], edx
; Line 3439
	cmp	DWORD PTR _charmap$3[ebp], 0
	je	$LN20@FT_Face_Ge
; Line 3441
	mov	eax, DWORD PTR _charmap$3[ebp]
	mov	DWORD PTR _vcmap$1[ebp], eax
; Line 3444
	cmp	DWORD PTR _charcode$[ebp], -1
	jbe	SHORT $LN18@FT_Face_Ge
$LN17@FT_Face_Ge:
; Line 3446
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN16@FT_Face_Ge
	push	OFFSET $SG11156
	call	_FT_Message
	add	esp, 4
$LN16@FT_Face_Ge:
	xor	eax, eax
	jne	SHORT $LN17@FT_Face_Ge
$LN13@FT_Face_Ge:
; Line 3447
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN12@FT_Face_Ge
	mov	eax, DWORD PTR _charcode$[ebp]
	push	eax
	push	OFFSET $SG11161
	call	_FT_Message
	add	esp, 8
$LN12@FT_Face_Ge:
	xor	ecx, ecx
	jne	SHORT $LN13@FT_Face_Ge
$LN18@FT_Face_Ge:
; Line 3449
	cmp	DWORD PTR _variantSelector$[ebp], -1
	jbe	SHORT $LN9@FT_Face_Ge
$LN8@FT_Face_Ge:
; Line 3451
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN7@FT_Face_Ge
	push	OFFSET $SG11167
	call	_FT_Message
	add	esp, 4
$LN7@FT_Face_Ge:
	xor	ecx, ecx
	jne	SHORT $LN8@FT_Face_Ge
$LN4@FT_Face_Ge:
; Line 3452
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN3@FT_Face_Ge
	mov	ecx, DWORD PTR _variantSelector$[ebp]
	push	ecx
	push	OFFSET $SG11172
	call	_FT_Message
	add	esp, 8
$LN3@FT_Face_Ge:
	xor	edx, edx
	jne	SHORT $LN4@FT_Face_Ge
$LN9@FT_Face_Ge:
; Line 3457
	mov	esi, esp
	mov	eax, DWORD PTR _variantSelector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _charcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ucmap$2[ebp]
	push	edx
	mov	eax, DWORD PTR _vcmap$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _vcmap$1[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN20@FT_Face_Ge:
; Line 3461
	mov	eax, DWORD PTR _result$[ebp]
; Line 3462
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Face_GetCharVariantIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_subg$1 = -8						; size = 4
_error$ = -4						; size = 4
_glyph$ = 8						; size = 4
_sub_index$ = 12					; size = 4
_p_index$ = 16						; size = 4
_p_flags$ = 20						; size = 4
_p_arg1$ = 24						; size = 4
_p_arg2$ = 28						; size = 4
_p_transform$ = 32					; size = 4
_FT_Get_SubGlyph_Info PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4904
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4905
	mov	DWORD PTR _error$[ebp], 6
; Line 4911
	cmp	DWORD PTR _glyph$[ebp], 0
	je	$LN1@FT_Get_Sub
	mov	eax, DWORD PTR _glyph$[ebp]
	cmp	DWORD PTR [eax+132], 0
	je	SHORT $LN1@FT_Get_Sub
	mov	ecx, DWORD PTR _glyph$[ebp]
	cmp	DWORD PTR [ecx+72], 1668246896		; 636f6d70H
	jne	SHORT $LN1@FT_Get_Sub
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	eax, DWORD PTR _sub_index$[ebp]
	cmp	eax, DWORD PTR [edx+128]
	jae	SHORT $LN1@FT_Get_Sub
; Line 4913
	mov	ecx, DWORD PTR _sub_index$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _glyph$[ebp]
	add	ecx, DWORD PTR [edx+132]
	mov	DWORD PTR _subg$1[ebp], ecx
; Line 4916
	mov	eax, DWORD PTR _p_index$[ebp]
	mov	ecx, DWORD PTR _subg$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 4917
	mov	eax, DWORD PTR _subg$1[ebp]
	movzx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _p_flags$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4918
	mov	eax, DWORD PTR _p_arg1$[ebp]
	mov	ecx, DWORD PTR _subg$1[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
; Line 4919
	mov	eax, DWORD PTR _p_arg2$[ebp]
	mov	ecx, DWORD PTR _subg$1[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx
; Line 4920
	mov	eax, DWORD PTR _subg$1[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p_transform$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4922
	mov	DWORD PTR _error$[ebp], 0
$LN1@FT_Get_Sub:
; Line 4925
	mov	eax, DWORD PTR _error$[ebp]
; Line 4926
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_SubGlyph_Info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv86 = -24						; size = 4
__tmp_$1 = -20						; size = 4
_module$2 = -16						; size = 4
_svc$3 = -12						; size = 4
_service$4 = -8						; size = 4
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_glyph_name$ = 12					; size = 4
_FT_Get_Name_Index PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3607
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3608
	mov	DWORD PTR _result$[ebp], 0
; Line 3613
	cmp	DWORD PTR _face$[ebp], 0
	je	$LN12@FT_Get_Nam
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 512				; 00000200H
	je	$LN12@FT_Get_Nam
	cmp	DWORD PTR _glyph_name$[ebp], 0
	je	$LN12@FT_Get_Nam
$LN11@FT_Get_Nam:
; Line 3620
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _svc$3[ebp], ecx
	cmp	DWORD PTR _svc$3[ebp], -2		; fffffffeH
	jne	SHORT $LN8@FT_Get_Nam
	mov	DWORD PTR _svc$3[ebp], 0
	jmp	SHORT $LN7@FT_Get_Nam
$LN8@FT_Get_Nam:
	cmp	DWORD PTR _svc$3[ebp], 0
	jne	SHORT $LN7@FT_Get_Nam
$LN5@FT_Get_Nam:
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _module$2[ebp], eax
	mov	DWORD PTR __tmp_$1[ebp], 0
	mov	ecx, DWORD PTR _module$2[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN2@FT_Get_Nam
	mov	esi, esp
	push	OFFSET $SG11309
	mov	eax, DWORD PTR _module$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _module$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$1[ebp], eax
$LN2@FT_Get_Nam:
	mov	ecx, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR _svc$3[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN5@FT_Get_Nam
	cmp	DWORD PTR _svc$3[ebp], 0
	je	SHORT $LN15@FT_Get_Nam
	mov	eax, DWORD PTR _svc$3[ebp]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN16@FT_Get_Nam
$LN15@FT_Get_Nam:
	mov	DWORD PTR tv86[ebp], -2			; fffffffeH
$LN16@FT_Get_Nam:
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR [edx+36], eax
$LN7@FT_Get_Nam:
	mov	ecx, DWORD PTR _svc$3[ebp]
	mov	DWORD PTR _service$4[ebp], ecx
	xor	edx, edx
	jne	$LN11@FT_Get_Nam
; Line 3622
	cmp	DWORD PTR _service$4[ebp], 0
	je	SHORT $LN12@FT_Get_Nam
	mov	eax, DWORD PTR _service$4[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN12@FT_Get_Nam
; Line 3623
	mov	esi, esp
	mov	ecx, DWORD PTR _glyph_name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _service$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN12@FT_Get_Nam:
; Line 3626
	mov	eax, DWORD PTR _result$[ebp]
; Line 3627
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Name_Index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv78 = -28						; size = 4
_cmap$1 = -24						; size = 4
_code$2 = -16						; size = 4
_gindex$ = -8						; size = 4
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_charcode$ = 12						; size = 4
_agindex$ = 16						; size = 4
_FT_Get_Next_Char PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3394
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3395
	mov	DWORD PTR _result$[ebp], 0
; Line 3396
	mov	DWORD PTR _gindex$[ebp], 0
; Line 3399
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN5@FT_Get_Nex
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN5@FT_Get_Nex
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN5@FT_Get_Nex
; Line 3401
	mov	edx, DWORD PTR _charcode$[ebp]
	mov	DWORD PTR _code$2[ebp], edx
; Line 3402
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _cmap$1[ebp], ecx
$LN4@FT_Get_Nex:
; Line 3407
	mov	esi, esp
	lea	edx, DWORD PTR _code$2[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmap$1[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _gindex$[ebp], eax
; Line 3409
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _gindex$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $LN4@FT_Get_Nex
; Line 3411
	cmp	DWORD PTR _gindex$[ebp], 0
	jne	SHORT $LN8@FT_Get_Nex
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN9@FT_Get_Nex
$LN8@FT_Get_Nex:
	mov	eax, DWORD PTR _code$2[ebp]
	mov	DWORD PTR tv78[ebp], eax
$LN9@FT_Get_Nex:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _result$[ebp], ecx
$LN5@FT_Get_Nex:
; Line 3414
	cmp	DWORD PTR _agindex$[ebp], 0
	je	SHORT $LN1@FT_Get_Nex
; Line 3415
	mov	edx, DWORD PTR _agindex$[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@FT_Get_Nex:
; Line 3417
	mov	eax, DWORD PTR _result$[ebp]
; Line 3418
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@FT_Get_Nex
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@FT_Get_Nex:
	DD	1
	DD	$LN11@FT_Get_Nex
$LN11@FT_Get_Nex:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN10@FT_Get_Nex
$LN10@FT_Get_Nex:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_FT_Get_Next_Char ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gindex$ = -12						; size = 4
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_agindex$ = 12						; size = 4
_FT_Get_First_Char PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3368
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3369
	mov	DWORD PTR _result$[ebp], 0
; Line 3370
	mov	DWORD PTR _gindex$[ebp], 0
; Line 3374
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN4@FT_Get_Fir
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN4@FT_Get_Fir
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN4@FT_Get_Fir
; Line 3376
	push	0
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Get_Char_Index
	add	esp, 8
	mov	DWORD PTR _gindex$[ebp], eax
; Line 3377
	cmp	DWORD PTR _gindex$[ebp], 0
	je	SHORT $LN2@FT_Get_Fir
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _gindex$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN4@FT_Get_Fir
$LN2@FT_Get_Fir:
; Line 3378
	lea	edx, DWORD PTR _gindex$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_FT_Get_Next_Char
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
$LN4@FT_Get_Fir:
; Line 3381
	cmp	DWORD PTR _agindex$[ebp], 0
	je	SHORT $LN1@FT_Get_Fir
; Line 3382
	mov	ecx, DWORD PTR _agindex$[ebp]
	mov	edx, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@FT_Get_Fir:
; Line 3384
	mov	eax, DWORD PTR _result$[ebp]
; Line 3385
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@FT_Get_Fir
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@FT_Get_Fir:
	DD	1
	DD	$LN8@FT_Get_Fir
$LN8@FT_Get_Fir:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@FT_Get_Fir
$LN7@FT_Get_Fir:
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_FT_Get_First_Char ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cmap$1 = -8						; size = 4
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_charcode$ = 12						; size = 4
_FT_Get_Char_Index PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3343
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3344
	mov	DWORD PTR _result$[ebp], 0
; Line 3347
	cmp	DWORD PTR _face$[ebp], 0
	je	$LN10@FT_Get_Cha
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN10@FT_Get_Cha
; Line 3349
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR _cmap$1[ebp], edx
; Line 3352
	cmp	DWORD PTR _charcode$[ebp], -1
	jbe	SHORT $LN9@FT_Get_Cha
$LN8@FT_Get_Cha:
; Line 3354
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN7@FT_Get_Cha
	push	OFFSET $SG11097
	call	_FT_Message
	add	esp, 4
$LN7@FT_Get_Cha:
	xor	edx, edx
	jne	SHORT $LN8@FT_Get_Cha
$LN4@FT_Get_Cha:
; Line 3355
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 1
	jl	SHORT $LN3@FT_Get_Cha
	mov	edx, DWORD PTR _charcode$[ebp]
	push	edx
	push	OFFSET $SG11102
	call	_FT_Message
	add	esp, 8
$LN3@FT_Get_Cha:
	xor	eax, eax
	jne	SHORT $LN4@FT_Get_Cha
$LN9@FT_Get_Cha:
; Line 3357
	mov	esi, esp
	mov	ecx, DWORD PTR _charcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmap$1[ebp]
	push	edx
	mov	eax, DWORD PTR _cmap$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN10@FT_Get_Cha:
; Line 3359
	mov	eax, DWORD PTR _result$[ebp]
; Line 3360
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Char_Index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_charmap$ = 8						; size = 4
_FT_Get_Charmap_Index PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3212
	cmp	DWORD PTR _charmap$[ebp], 0
	je	SHORT $LN9@FT_Get_Cha
	mov	eax, DWORD PTR _charmap$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@FT_Get_Cha
$LN9@FT_Get_Cha:
; Line 3213
	or	eax, -1
	jmp	SHORT $LN11@FT_Get_Cha
$LN10@FT_Get_Cha:
; Line 3215
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@FT_Get_Cha
$LN7@FT_Get_Cha:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@FT_Get_Cha:
	mov	edx, DWORD PTR _charmap$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jge	SHORT $LN4@FT_Get_Cha
; Line 3216
	mov	edx, DWORD PTR _charmap$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _charmap$[ebp]
	jne	SHORT $LN5@FT_Get_Cha
; Line 3217
	jmp	SHORT $LN4@FT_Get_Cha
$LN5@FT_Get_Cha:
; Line 3219
	jmp	SHORT $LN7@FT_Get_Cha
$LN4@FT_Get_Cha:
	mov	ecx, DWORD PTR _charmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jl	SHORT $LN3@FT_Get_Cha
	push	OFFSET $SG11009
	push	3219					; 00000c93H
	push	OFFSET $SG11010
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@FT_Get_Cha:
	xor	ecx, ecx
	jne	SHORT $LN4@FT_Get_Cha
; Line 3221
	mov	eax, DWORD PTR _i$[ebp]
$LN11@FT_Get_Cha:
; Line 3222
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Charmap_Index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$ = -8						; size = 4
_cur$ = -4						; size = 4
_face$ = 8						; size = 4
_charmap$ = 12						; size = 4
_FT_Set_Charmap PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3174
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3179
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN8@FT_Set_Cha
; Line 3180
	push	OFFSET $SG10984
	push	3180					; 00000c6cH
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN9@FT_Set_Cha
$LN8@FT_Set_Cha:
; Line 3182
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 3183
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN6@FT_Set_Cha
	cmp	DWORD PTR _charmap$[ebp], 0
	jne	SHORT $LN7@FT_Set_Cha
$LN6@FT_Set_Cha:
; Line 3184
	push	OFFSET $SG10987
	push	3184					; 00000c70H
	push	38					; 00000026H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 38					; 00000026H
	jmp	$LN9@FT_Set_Cha
$LN7@FT_Set_Cha:
; Line 3186
	mov	edx, DWORD PTR _charmap$[ebp]
	push	edx
	call	_FT_Get_CMap_Format
	add	esp, 4
	cmp	eax, 14					; 0000000eH
	jne	SHORT $LN5@FT_Set_Cha
; Line 3187
	push	OFFSET $SG10989
	push	3187					; 00000c73H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN9@FT_Set_Cha
$LN5@FT_Set_Cha:
; Line 3189
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _cur$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _limit$[ebp], eax
; Line 3191
	jmp	SHORT $LN4@FT_Set_Cha
$LN3@FT_Set_Cha:
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 4
	mov	DWORD PTR _cur$[ebp], ecx
$LN4@FT_Set_Cha:
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN2@FT_Set_Cha
; Line 3193
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	cmp	eax, DWORD PTR _charmap$[ebp]
	jne	SHORT $LN1@FT_Set_Cha
; Line 3195
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+92], edx
; Line 3196
	xor	eax, eax
	jmp	SHORT $LN9@FT_Set_Cha
$LN1@FT_Set_Cha:
; Line 3198
	jmp	SHORT $LN3@FT_Set_Cha
$LN2@FT_Set_Cha:
; Line 3200
	push	OFFSET $SG10994
	push	3200					; 00000c80H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
$LN9@FT_Set_Cha:
; Line 3201
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Set_Charmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_limit$ = -8						; size = 4
_cur$ = -4						; size = 4
_face$ = 8						; size = 4
_encoding$ = 12						; size = 4
_FT_Select_Charmap PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3132
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3137
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN8@FT_Select_
; Line 3138
	push	OFFSET $SG10965
	push	3138					; 00000c42H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN9@FT_Select_
$LN8@FT_Select_:
; Line 3140
	cmp	DWORD PTR _encoding$[ebp], 0
	jne	SHORT $LN7@FT_Select_
; Line 3141
	push	OFFSET $SG10967
	push	3141					; 00000c45H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN9@FT_Select_
$LN7@FT_Select_:
; Line 3147
	cmp	DWORD PTR _encoding$[ebp], 1970170211	; 756e6963H
	jne	SHORT $LN6@FT_Select_
; Line 3148
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_find_unicode_charmap
	add	esp, 4
	jmp	$LN9@FT_Select_
$LN6@FT_Select_:
; Line 3150
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _cur$[ebp], edx
; Line 3151
	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN5@FT_Select_
; Line 3152
	push	OFFSET $SG10970
	push	3152					; 00000c50H
	push	38					; 00000026H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 38					; 00000026H
	jmp	SHORT $LN9@FT_Select_
$LN5@FT_Select_:
; Line 3154
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _cur$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _limit$[ebp], eax
; Line 3156
	jmp	SHORT $LN4@FT_Select_
$LN3@FT_Select_:
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 4
	mov	DWORD PTR _cur$[ebp], ecx
$LN4@FT_Select_:
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN2@FT_Select_
; Line 3158
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _encoding$[ebp]
	jne	SHORT $LN1@FT_Select_
; Line 3160
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+92], eax
; Line 3161
	xor	eax, eax
	jmp	SHORT $LN9@FT_Select_
$LN1@FT_Select_:
; Line 3163
	jmp	SHORT $LN3@FT_Select_
$LN2@FT_Select_:
; Line 3165
	push	OFFSET $SG10975
	push	3165					; 00000c5dH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
$LN9@FT_Select_:
; Line 3166
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Select_Charmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv83 = -24						; size = 4
__tmp_$1 = -20						; size = 4
_module$2 = -16						; size = 4
_svc$3 = -12						; size = 4
_service$4 = -8						; size = 4
_result$ = -4						; size = 4
_face$ = 8						; size = 4
_FT_Get_Postscript_Name PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3671
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3672
	mov	DWORD PTR _result$[ebp], 0
; Line 3675
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN13@FT_Get_Pos
; Line 3676
	jmp	$Exit$18
$LN13@FT_Get_Pos:
; Line 3678
	cmp	DWORD PTR _result$[ebp], 0
	jne	$Exit$18
$LN11@FT_Get_Pos:
; Line 3685
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _svc$3[ebp], edx
	cmp	DWORD PTR _svc$3[ebp], -2		; fffffffeH
	jne	SHORT $LN8@FT_Get_Pos
	mov	DWORD PTR _svc$3[ebp], 0
	jmp	SHORT $LN7@FT_Get_Pos
$LN8@FT_Get_Pos:
	cmp	DWORD PTR _svc$3[ebp], 0
	jne	SHORT $LN7@FT_Get_Pos
$LN5@FT_Get_Pos:
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _module$2[ebp], ecx
	mov	DWORD PTR __tmp_$1[ebp], 0
	mov	edx, DWORD PTR _module$2[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@FT_Get_Pos
	mov	esi, esp
	push	OFFSET $SG11398
	mov	ecx, DWORD PTR _module$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _module$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$1[ebp], eax
$LN2@FT_Get_Pos:
	mov	edx, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR _svc$3[ebp], edx
	xor	eax, eax
	jne	SHORT $LN5@FT_Get_Pos
	cmp	DWORD PTR _svc$3[ebp], 0
	je	SHORT $LN16@FT_Get_Pos
	mov	ecx, DWORD PTR _svc$3[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN17@FT_Get_Pos
$LN16@FT_Get_Pos:
	mov	DWORD PTR tv83[ebp], -2			; fffffffeH
$LN17@FT_Get_Pos:
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR [eax+28], ecx
$LN7@FT_Get_Pos:
	mov	edx, DWORD PTR _svc$3[ebp]
	mov	DWORD PTR _service$4[ebp], edx
	xor	eax, eax
	jne	$LN11@FT_Get_Pos
; Line 3687
	cmp	DWORD PTR _service$4[ebp], 0
	je	SHORT $Exit$18
	mov	ecx, DWORD PTR _service$4[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $Exit$18
; Line 3688
	mov	esi, esp
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _service$4[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$Exit$18:
; Line 3692
	mov	eax, DWORD PTR _result$[ebp]
; Line 3693
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Postscript_Name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv143 = -24						; size = 4
__tmp_$1 = -20						; size = 4
_module$2 = -16						; size = 4
_svc$3 = -12						; size = 4
_service$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_buffer$ = 16						; size = 4
_buffer_max$ = 20					; size = 4
_FT_Get_Glyph_Name PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3637
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3642
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN17@FT_Get_Gly
; Line 3643
	push	OFFSET $SG11328
	push	3643					; 00000e3bH
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN18@FT_Get_Gly
$LN17@FT_Get_Gly:
; Line 3645
	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN15@FT_Get_Gly
	cmp	DWORD PTR _buffer_max$[ebp], 0
	jne	SHORT $LN16@FT_Get_Gly
$LN15@FT_Get_Gly:
; Line 3646
	push	OFFSET $SG11331
	push	3646					; 00000e3eH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN18@FT_Get_Gly
$LN16@FT_Get_Gly:
; Line 3649
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [edx+ecx], 0
; Line 3651
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jl	SHORT $LN14@FT_Get_Gly
; Line 3652
	push	OFFSET $SG11335
	push	3652					; 00000e44H
	push	16					; 00000010H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 16					; 00000010H
	jmp	$LN18@FT_Get_Gly
$LN14@FT_Get_Gly:
; Line 3654
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 512				; 00000200H
	jne	SHORT $LN12@FT_Get_Gly
; Line 3655
	push	OFFSET $SG11337
	push	3655					; 00000e47H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN18@FT_Get_Gly
$LN12@FT_Get_Gly:
; Line 3657
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _svc$3[ebp], eax
	cmp	DWORD PTR _svc$3[ebp], -2		; fffffffeH
	jne	SHORT $LN9@FT_Get_Gly
	mov	DWORD PTR _svc$3[ebp], 0
	jmp	SHORT $LN8@FT_Get_Gly
$LN9@FT_Get_Gly:
	cmp	DWORD PTR _svc$3[ebp], 0
	jne	SHORT $LN8@FT_Get_Gly
$LN6@FT_Get_Gly:
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _module$2[ebp], edx
	mov	DWORD PTR __tmp_$1[ebp], 0
	mov	eax, DWORD PTR _module$2[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN3@FT_Get_Gly
	mov	esi, esp
	push	OFFSET $SG11359
	mov	edx, DWORD PTR _module$2[ebp]
	push	edx
	mov	eax, DWORD PTR _module$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$1[ebp], eax
$LN3@FT_Get_Gly:
	mov	eax, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR _svc$3[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN6@FT_Get_Gly
	cmp	DWORD PTR _svc$3[ebp], 0
	je	SHORT $LN20@FT_Get_Gly
	mov	edx, DWORD PTR _svc$3[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN21@FT_Get_Gly
$LN20@FT_Get_Gly:
	mov	DWORD PTR tv143[ebp], -2		; fffffffeH
$LN21@FT_Get_Gly:
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR [ecx+36], edx
$LN8@FT_Get_Gly:
	mov	eax, DWORD PTR _svc$3[ebp]
	mov	DWORD PTR _service$[ebp], eax
	xor	ecx, ecx
	jne	$LN12@FT_Get_Gly
; Line 3658
	cmp	DWORD PTR _service$[ebp], 0
	je	SHORT $LN2@FT_Get_Gly
	mov	edx, DWORD PTR _service$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN2@FT_Get_Gly
; Line 3659
	mov	esi, esp
	mov	eax, DWORD PTR _buffer_max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _service$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 3660
	jmp	SHORT $LN1@FT_Get_Gly
$LN2@FT_Get_Gly:
; Line 3661
	push	OFFSET $SG11367
	push	3661					; 00000e4dH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
$LN1@FT_Get_Gly:
; Line 3663
	mov	eax, DWORD PTR _error$[ebp]
$LN18@FT_Get_Gly:
; Line 3664
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Glyph_Name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__tmp_$1 = -16						; size = 4
_module$2 = -12						; size = 4
_error$ = -8						; size = 4
_service$ = -4						; size = 4
_face$ = 8						; size = 4
_point_size$ = 12					; size = 4
_degree$ = 16						; size = 4
_akerning$ = 20						; size = 4
_FT_Get_Track_Kerning PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3103
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3105
	mov	DWORD PTR _error$[ebp], 0
; Line 3108
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN7@FT_Get_Tra
; Line 3109
	push	OFFSET $SG10942
	push	3109					; 00000c25H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN8@FT_Get_Tra
$LN7@FT_Get_Tra:
; Line 3111
	cmp	DWORD PTR _akerning$[ebp], 0
	jne	SHORT $LN5@FT_Get_Tra
; Line 3112
	push	OFFSET $SG10944
	push	3112					; 00000c28H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN8@FT_Get_Tra
$LN5@FT_Get_Tra:
; Line 3114
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _module$2[ebp], ecx
	mov	DWORD PTR __tmp_$1[ebp], 0
	mov	edx, DWORD PTR _module$2[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@FT_Get_Tra
	mov	esi, esp
	push	OFFSET $SG10954
	mov	ecx, DWORD PTR _module$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _module$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$1[ebp], eax
$LN2@FT_Get_Tra:
	mov	edx, DWORD PTR __tmp_$1[ebp]
	mov	DWORD PTR _service$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN5@FT_Get_Tra
; Line 3115
	cmp	DWORD PTR _service$[ebp], 0
	jne	SHORT $LN1@FT_Get_Tra
; Line 3116
	push	OFFSET $SG10956
	push	3116					; 00000c2cH
	push	7
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 7
	jmp	SHORT $LN8@FT_Get_Tra
$LN1@FT_Get_Tra:
; Line 3121
	mov	esi, esp
	mov	ecx, DWORD PTR _akerning$[ebp]
	push	ecx
	mov	edx, DWORD PTR _degree$[ebp]
	push	edx
	mov	eax, DWORD PTR _point_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _service$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 3123
	mov	eax, DWORD PTR _error$[ebp]
$LN8@FT_Get_Tra:
; Line 3124
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Track_Kerning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_driver$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_left_glyph$ = 12					; size = 4
_right_glyph$ = 16					; size = 4
_kern_mode$ = 20					; size = 4
_akerning$ = 24						; size = 4
_FT_Get_Kerning PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3044
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3045
	mov	DWORD PTR _error$[ebp], 0
; Line 3049
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN8@FT_Get_Ker
; Line 3050
	push	OFFSET $SG10921
	push	3050					; 00000beaH
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN9@FT_Get_Ker
$LN8@FT_Get_Ker:
; Line 3052
	cmp	DWORD PTR _akerning$[ebp], 0
	jne	SHORT $LN7@FT_Get_Ker
; Line 3053
	push	OFFSET $SG10923
	push	3053					; 00000bedH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN9@FT_Get_Ker
$LN7@FT_Get_Ker:
; Line 3055
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _driver$[ebp], ecx
; Line 3057
	mov	edx, DWORD PTR _akerning$[ebp]
	mov	DWORD PTR [edx], 0
; Line 3058
	mov	eax, DWORD PTR _akerning$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 3060
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+76], 0
	je	$LN6@FT_Get_Ker
; Line 3065
	mov	esi, esp
	mov	eax, DWORD PTR _akerning$[ebp]
	push	eax
	mov	ecx, DWORD PTR _right_glyph$[ebp]
	push	ecx
	mov	edx, DWORD PTR _left_glyph$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 3066
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN6@FT_Get_Ker
; Line 3068
	cmp	DWORD PTR _kern_mode$[ebp], 2
	je	$LN6@FT_Get_Ker
; Line 3070
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _akerning$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_FT_MulFix
	add	esp, 8
	mov	ecx, DWORD PTR _akerning$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 3071
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _akerning$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_MulFix
	add	esp, 8
	mov	ecx, DWORD PTR _akerning$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 3073
	cmp	DWORD PTR _kern_mode$[ebp], 1
	je	$LN6@FT_Get_Ker
; Line 3078
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+88]
	movzx	ecx, WORD PTR [eax+12]
	cmp	ecx, 25					; 00000019H
	jge	SHORT $LN2@FT_Get_Ker
; Line 3080
	push	25					; 00000019H
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+88]
	movzx	ecx, WORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _akerning$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _akerning$[ebp]
	mov	DWORD PTR [ecx], eax
$LN2@FT_Get_Ker:
; Line 3081
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+88]
	movzx	ecx, WORD PTR [eax+14]
	cmp	ecx, 25					; 00000019H
	jge	SHORT $LN1@FT_Get_Ker
; Line 3083
	push	25					; 00000019H
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+88]
	movzx	ecx, WORD PTR [eax+14]
	push	ecx
	mov	edx, DWORD PTR _akerning$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _akerning$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@FT_Get_Ker:
; Line 3085
	mov	edx, DWORD PTR _akerning$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _akerning$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 3086
	mov	edx, DWORD PTR _akerning$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 32					; 00000020H
	and	eax, -64				; ffffffc0H
	mov	ecx, DWORD PTR _akerning$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN6@FT_Get_Ker:
; Line 3092
	mov	eax, DWORD PTR _error$[ebp]
$LN9@FT_Get_Ker:
; Line 3093
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Get_Kerning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_library$ = -4						; size = 4
_slot$ = 8						; size = 4
_render_mode$ = 12					; size = 4
_FT_Render_Glyph PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 4181
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4185
	cmp	DWORD PTR _slot$[ebp], 0
	je	SHORT $LN1@FT_Render_
	mov	eax, DWORD PTR _slot$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@FT_Render_
$LN1@FT_Render_:
; Line 4186
	push	OFFSET $SG11697
	push	4186					; 0000105aH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN3@FT_Render_
$LN2@FT_Render_:
; Line 4188
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _library$[ebp], ecx
; Line 4190
	mov	edx, DWORD PTR _render_mode$[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Render_Glyph_Internal
	add	esp, 12					; 0000000cH
$LN3@FT_Render_:
; Line 4191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Render_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_internal$ = -4						; size = 4
_face$ = 8						; size = 4
_matrix$ = 12						; size = 4
_delta$ = 16						; size = 4
_FT_Set_Transform PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 497
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 501
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN8@FT_Set_Tra
; Line 502
	jmp	$LN9@FT_Set_Tra
$LN8@FT_Set_Tra:
; Line 504
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _internal$[ebp], ecx
; Line 506
	mov	edx, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 508
	cmp	DWORD PTR _matrix$[ebp], 0
	jne	SHORT $LN7@FT_Set_Tra
; Line 510
	mov	eax, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [eax], 65536			; 00010000H
; Line 511
	mov	ecx, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 512
	mov	edx, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 513
	mov	eax, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [eax+12], 65536		; 00010000H
; Line 515
	mov	ecx, DWORD PTR _internal$[ebp]
	mov	DWORD PTR _matrix$[ebp], ecx
; Line 517
	jmp	SHORT $LN6@FT_Set_Tra
$LN7@FT_Set_Tra:
; Line 518
	mov	edx, DWORD PTR _matrix$[ebp]
	mov	eax, DWORD PTR _internal$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
$LN6@FT_Set_Tra:
; Line 523
	mov	eax, DWORD PTR _matrix$[ebp]
	mov	ecx, DWORD PTR _matrix$[ebp]
	mov	edx, DWORD PTR [eax+4]
	or	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN4@FT_Set_Tra
	mov	eax, DWORD PTR _matrix$[ebp]
	cmp	DWORD PTR [eax], 65536			; 00010000H
	jne	SHORT $LN4@FT_Set_Tra
	mov	ecx, DWORD PTR _matrix$[ebp]
	cmp	DWORD PTR [ecx+12], 65536		; 00010000H
	je	SHORT $LN5@FT_Set_Tra
$LN4@FT_Set_Tra:
; Line 524
	mov	edx, DWORD PTR _internal$[ebp]
	mov	eax, DWORD PTR [edx+24]
	or	eax, 1
	mov	ecx, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN5@FT_Set_Tra:
; Line 526
	cmp	DWORD PTR _delta$[ebp], 0
	jne	SHORT $LN3@FT_Set_Tra
; Line 528
	mov	edx, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 529
	mov	eax, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 531
	mov	ecx, DWORD PTR _internal$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _delta$[ebp], ecx
; Line 533
	jmp	SHORT $LN2@FT_Set_Tra
$LN3@FT_Set_Tra:
; Line 534
	mov	edx, DWORD PTR _delta$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+20], ecx
$LN2@FT_Set_Tra:
; Line 537
	mov	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _delta$[ebp]
	mov	edx, DWORD PTR [eax]
	or	edx, DWORD PTR [ecx+4]
	je	SHORT $LN9@FT_Set_Tra
; Line 538
	mov	eax, DWORD PTR _internal$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, 2
	mov	edx, DWORD PTR _internal$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN9@FT_Set_Tra:
; Line 539
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Set_Transform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyph_index$ = -4					; size = 4
_face$ = 8						; size = 4
_char_code$ = 12					; size = 4
_load_flags$ = 16					; size = 4
_FT_Load_Char PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 849
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 853
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN2@FT_Load_Ch
; Line 854
	push	OFFSET $SG9630
	push	854					; 00000356H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	SHORT $LN3@FT_Load_Ch
$LN2@FT_Load_Ch:
; Line 856
	mov	eax, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR _glyph_index$[ebp], eax
; Line 857
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	je	SHORT $LN1@FT_Load_Ch
; Line 858
	mov	edx, DWORD PTR _char_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_FT_Get_Char_Index
	add	esp, 8
	mov	DWORD PTR _glyph_index$[ebp], eax
$LN1@FT_Load_Ch:
; Line 860
	mov	ecx, DWORD PTR _load_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_FT_Load_Glyph
	add	esp, 12					; 0000000cH
$LN3@FT_Load_Ch:
; Line 861
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Load_Char ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mode$1 = -60						; size = 4
_renderer$2 = -56					; size = 4
_internal$3 = -52					; size = 4
_metrics$4 = -48					; size = 4
_transform_flags$5 = -44				; size = 4
_internal$6 = -40					; size = 4
_hinting$7 = -36					; size = 4
_mode$8 = -32						; size = 4
_ttface$ = -28						; size = 4
_hinter$ = -24						; size = 4
_autohint$ = -17					; size = 1
_library$ = -16						; size = 4
_slot$ = -12						; size = 4
_driver$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_glyph_index$ = 12					; size = 4
_load_flags$ = 16					; size = 4
_FT_Load_Glyph PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 596
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 601
	mov	BYTE PTR _autohint$[ebp], 0
; Line 603
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _ttface$[ebp], eax
; Line 606
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN47@FT_Load_Gl
	mov	ecx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [ecx+88], 0
	je	SHORT $LN47@FT_Load_Gl
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+84], 0
	jne	SHORT $LN48@FT_Load_Gl
$LN47@FT_Load_Gl:
; Line 607
	push	OFFSET $SG9552
	push	607					; 0000025fH
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN49@FT_Load_Gl
$LN48@FT_Load_Gl:
; Line 612
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _slot$[ebp], ecx
; Line 613
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	call	_ft_glyphslot_clear
	add	esp, 4
; Line 615
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _driver$[ebp], ecx
; Line 616
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _library$[ebp], eax
; Line 617
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	DWORD PTR _hinter$[ebp], edx
; Line 621
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 1024				; 00000400H
	je	SHORT $LN46@FT_Load_Gl
; Line 623
	mov	ecx, DWORD PTR _load_flags$[ebp]
	or	ecx, 2049				; 00000801H
	mov	DWORD PTR _load_flags$[ebp], ecx
$LN46@FT_Load_Gl:
; Line 625
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 1
	je	SHORT $LN45@FT_Load_Gl
; Line 628
	mov	eax, DWORD PTR _load_flags$[ebp]
	or	eax, 10					; 0000000aH
	mov	DWORD PTR _load_flags$[ebp], eax
; Line 630
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, -5					; fffffffbH
	mov	DWORD PTR _load_flags$[ebp], ecx
$LN45@FT_Load_Gl:
; Line 661
	cmp	DWORD PTR _hinter$[ebp], 0
	je	$LN44@FT_Load_Gl
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 2
	jne	$LN44@FT_Load_Gl
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 32768				; 00008000H
	jne	$LN44@FT_Load_Gl
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	and	eax, 256				; 00000100H
	je	$LN44@FT_Load_Gl
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	and	eax, 512				; 00000200H
	jne	$LN44@FT_Load_Gl
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 8192				; 00002000H
	jne	$LN44@FT_Load_Gl
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 2048				; 00000800H
	jne	SHORT $LN43@FT_Load_Gl
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN42@FT_Load_Gl
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN43@FT_Load_Gl
$LN42@FT_Load_Gl:
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	cmp	DWORD PTR [eax], 0
	jne	$LN44@FT_Load_Gl
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	cmp	DWORD PTR [edx+8], 0
	je	$LN44@FT_Load_Gl
$LN43@FT_Load_Gl:
; Line 664
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 32					; 00000020H
	jne	SHORT $LN40@FT_Load_Gl
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN41@FT_Load_Gl
$LN40@FT_Load_Gl:
; Line 665
	mov	BYTE PTR _autohint$[ebp], 1
; Line 666
	jmp	SHORT $LN44@FT_Load_Gl
$LN41@FT_Load_Gl:
; Line 668
	mov	ecx, DWORD PTR _load_flags$[ebp]
	sar	ecx, 16					; 00000010H
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _mode$8[ebp], ecx
; Line 684
	cmp	DWORD PTR _mode$8[ebp], 1
	je	SHORT $LN37@FT_Load_Gl
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	movzx	ecx, BYTE PTR [eax+52]
	test	ecx, ecx
	jne	SHORT $LN37@FT_Load_Gl
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 8
	je	SHORT $LN44@FT_Load_Gl
	mov	ecx, DWORD PTR _ttface$[ebp]
	cmp	DWORD PTR [ecx+696], 0
	je	SHORT $LN44@FT_Load_Gl
	mov	edx, DWORD PTR _ttface$[ebp]
	movzx	eax, WORD PTR [edx+286]
	test	eax, eax
	jne	SHORT $LN44@FT_Load_Gl
	mov	ecx, DWORD PTR _ttface$[ebp]
	cmp	DWORD PTR [ecx+628], 0
	jne	SHORT $LN44@FT_Load_Gl
	mov	edx, DWORD PTR _ttface$[ebp]
	cmp	DWORD PTR [edx+636], 0
	jne	SHORT $LN44@FT_Load_Gl
$LN37@FT_Load_Gl:
; Line 685
	mov	BYTE PTR _autohint$[ebp], 1
$LN44@FT_Load_Gl:
; Line 689
	movzx	eax, BYTE PTR _autohint$[ebp]
	test	eax, eax
	je	$LN36@FT_Load_Gl
; Line 700
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 2
	je	SHORT $LN35@FT_Load_Gl
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 8
	jne	SHORT $LN35@FT_Load_Gl
; Line 704
	mov	ecx, DWORD PTR _load_flags$[ebp]
	or	ecx, 16384				; 00004000H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 706
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN35@FT_Load_Gl
	mov	eax, DWORD PTR _slot$[ebp]
	cmp	DWORD PTR [eax+72], 1651078259		; 62697473H
	jne	SHORT $LN35@FT_Load_Gl
; Line 707
	jmp	$Load_Ok$51
$LN35@FT_Load_Gl:
; Line 711
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR _internal$6[ebp], edx
; Line 712
	mov	eax, DWORD PTR _internal$6[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _transform_flags$5[ebp], ecx
; Line 717
	mov	edx, DWORD PTR _internal$6[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 720
	mov	eax, DWORD PTR _hinter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _hinting$7[ebp], edx
; Line 724
	mov	esi, esp
	mov	eax, DWORD PTR _load_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _glyph_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hinter$[ebp]
	push	edx
	mov	eax, DWORD PTR _hinting$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 726
	mov	edx, DWORD PTR _internal$6[ebp]
	mov	eax, DWORD PTR _transform_flags$5[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 729
	jmp	SHORT $Load_Ok$51
$LN36@FT_Load_Gl:
; Line 734
	mov	esi, esp
	mov	ecx, DWORD PTR _load_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glyph_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	push	edx
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 735
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN32@FT_Load_Gl
; Line 736
	jmp	$Exit$52
$LN32@FT_Load_Gl:
; Line 738
	mov	eax, DWORD PTR _slot$[ebp]
	cmp	DWORD PTR [eax+72], 1869968492		; 6f75746cH
	jne	SHORT $Load_Ok$51
; Line 741
	mov	ecx, DWORD PTR _slot$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_FT_Outline_Check
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 742
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN30@FT_Load_Gl
; Line 743
	jmp	$Exit$52
$LN30@FT_Load_Gl:
; Line 746
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 2
	jne	SHORT $Load_Ok$51
; Line 748
	mov	eax, DWORD PTR _load_flags$[ebp]
	and	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	push	ecx
	call	_ft_glyphslot_grid_fit_metrics
	add	esp, 8
$Load_Ok$51:
; Line 755
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN28@FT_Load_Gl
; Line 757
	mov	eax, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 758
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+68], eax
; Line 760
	jmp	SHORT $LN27@FT_Load_Gl
$LN28@FT_Load_Gl:
; Line 762
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+64], eax
; Line 763
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+68], 0
$LN27@FT_Load_Gl:
; Line 768
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 8192				; 00002000H
	jne	SHORT $LN26@FT_Load_Gl
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	SHORT $LN26@FT_Load_Gl
; Line 770
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+88]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _metrics$4[ebp], eax
; Line 775
	push	64					; 00000040H
	mov	ecx, DWORD PTR _metrics$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [edx+56], eax
; Line 778
	push	64					; 00000040H
	mov	eax, DWORD PTR _metrics$4[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	call	_FT_MulDiv
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN26@FT_Load_Gl:
; Line 781
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 2048				; 00000800H
	jne	$LN18@FT_Load_Gl
; Line 783
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _internal$3[ebp], ecx
; Line 787
	mov	edx, DWORD PTR _internal$3[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	$LN18@FT_Load_Gl
; Line 790
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	call	_ft_lookup_glyph_renderer
	add	esp, 4
	mov	DWORD PTR _renderer$2[ebp], eax
; Line 793
	cmp	DWORD PTR _renderer$2[ebp], 0
	je	SHORT $LN23@FT_Load_Gl
; Line 797
	mov	ecx, DWORD PTR _internal$3[ebp]
	add	ecx, 16					; 00000010H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _internal$3[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _renderer$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
	jmp	SHORT $LN22@FT_Load_Gl
$LN23@FT_Load_Gl:
; Line 798
	mov	edx, DWORD PTR _slot$[ebp]
	cmp	DWORD PTR [edx+72], 1869968492		; 6f75746cH
	jne	SHORT $LN22@FT_Load_Gl
; Line 801
	mov	eax, DWORD PTR _internal$3[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 1
	je	SHORT $LN20@FT_Load_Gl
; Line 803
	mov	edx, DWORD PTR _internal$3[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_FT_Outline_Transform
	add	esp, 8
$LN20@FT_Load_Gl:
; Line 805
	mov	ecx, DWORD PTR _internal$3[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, 2
	je	SHORT $LN22@FT_Load_Gl
; Line 808
	mov	eax, DWORD PTR _internal$3[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _internal$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _slot$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_FT_Outline_Translate
	add	esp, 12					; 0000000cH
$LN22@FT_Load_Gl:
; Line 812
	mov	edx, DWORD PTR _internal$3[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_FT_Vector_Transform
	add	esp, 8
$LN18@FT_Load_Gl:
; Line 816
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN17@FT_Load_Gl
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	push	OFFSET $SG9601
	call	_FT_Message
	add	esp, 8
$LN17@FT_Load_Gl:
	xor	edx, edx
	jne	SHORT $LN18@FT_Load_Gl
$LN14@FT_Load_Gl:
; Line 817
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN13@FT_Load_Gl
	mov	edx, DWORD PTR _slot$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	push	OFFSET $SG9606
	call	_FT_Message
	add	esp, 8
$LN13@FT_Load_Gl:
	xor	ecx, ecx
	jne	SHORT $LN14@FT_Load_Gl
$LN10@FT_Load_Gl:
; Line 819
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN9@FT_Load_Gl
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	push	OFFSET $SG9611
	call	_FT_Message
	add	esp, 8
$LN9@FT_Load_Gl:
	xor	eax, eax
	jne	SHORT $LN10@FT_Load_Gl
$LN6@FT_Load_Gl:
; Line 820
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN5@FT_Load_Gl
	mov	eax, DWORD PTR _slot$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	push	OFFSET $SG9616
	call	_FT_Message
	add	esp, 8
$LN5@FT_Load_Gl:
	xor	edx, edx
	jne	SHORT $LN6@FT_Load_Gl
; Line 826
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $Exit$52
	mov	eax, DWORD PTR _slot$[ebp]
	cmp	DWORD PTR [eax+72], 1651078259		; 62697473H
	je	SHORT $Exit$52
	mov	ecx, DWORD PTR _slot$[ebp]
	cmp	DWORD PTR [ecx+72], 1668246896		; 636f6d70H
	je	SHORT $Exit$52
	mov	edx, DWORD PTR _load_flags$[ebp]
	and	edx, 4
	je	SHORT $Exit$52
; Line 828
	mov	eax, DWORD PTR _load_flags$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _mode$1[ebp], eax
; Line 832
	jne	SHORT $LN1@FT_Load_Gl
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 4096				; 00001000H
	je	SHORT $LN1@FT_Load_Gl
; Line 833
	mov	DWORD PTR _mode$1[ebp], 2
$LN1@FT_Load_Gl:
; Line 835
	mov	edx, DWORD PTR _mode$1[ebp]
	push	edx
	mov	eax, DWORD PTR _slot$[ebp]
	push	eax
	call	_FT_Render_Glyph
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
$Exit$52:
; Line 839
	mov	eax, DWORD PTR _error$[ebp]
$LN49@FT_Load_Gl:
; Line 840
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Load_Glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_req$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_pixel_width$ = 12					; size = 4
_pixel_height$ = 16					; size = 4
_FT_Set_Pixel_Sizes PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 3004
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3010
	cmp	DWORD PTR _pixel_width$[ebp], 0
	jne	SHORT $LN7@FT_Set_Pix
; Line 3011
	mov	eax, DWORD PTR _pixel_height$[ebp]
	mov	DWORD PTR _pixel_width$[ebp], eax
	jmp	SHORT $LN6@FT_Set_Pix
$LN7@FT_Set_Pix:
; Line 3012
	cmp	DWORD PTR _pixel_height$[ebp], 0
	jne	SHORT $LN6@FT_Set_Pix
; Line 3013
	mov	ecx, DWORD PTR _pixel_width$[ebp]
	mov	DWORD PTR _pixel_height$[ebp], ecx
$LN6@FT_Set_Pix:
; Line 3015
	cmp	DWORD PTR _pixel_width$[ebp], 1
	jae	SHORT $LN4@FT_Set_Pix
; Line 3016
	mov	DWORD PTR _pixel_width$[ebp], 1
$LN4@FT_Set_Pix:
; Line 3017
	cmp	DWORD PTR _pixel_height$[ebp], 1
	jae	SHORT $LN3@FT_Set_Pix
; Line 3018
	mov	DWORD PTR _pixel_height$[ebp], 1
$LN3@FT_Set_Pix:
; Line 3021
	cmp	DWORD PTR _pixel_width$[ebp], 65535	; 0000ffffH
	jb	SHORT $LN2@FT_Set_Pix
; Line 3022
	mov	DWORD PTR _pixel_width$[ebp], 65535	; 0000ffffH
$LN2@FT_Set_Pix:
; Line 3023
	cmp	DWORD PTR _pixel_height$[ebp], 65535	; 0000ffffH
	jb	SHORT $LN1@FT_Set_Pix
; Line 3024
	mov	DWORD PTR _pixel_height$[ebp], 65535	; 0000ffffH
$LN1@FT_Set_Pix:
; Line 3026
	mov	DWORD PTR _req$[ebp], 0
; Line 3027
	mov	edx, DWORD PTR _pixel_width$[ebp]
	shl	edx, 6
	mov	DWORD PTR _req$[ebp+4], edx
; Line 3028
	mov	eax, DWORD PTR _pixel_height$[ebp]
	shl	eax, 6
	mov	DWORD PTR _req$[ebp+8], eax
; Line 3029
	mov	DWORD PTR _req$[ebp+12], 0
; Line 3030
	mov	DWORD PTR _req$[ebp+16], 0
; Line 3032
	lea	ecx, DWORD PTR _req$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Request_Size
	add	esp, 8
; Line 3033
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@FT_Set_Pix
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@FT_Set_Pix:
	DD	1
	DD	$LN11@FT_Set_Pix
$LN11@FT_Set_Pix:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN10@FT_Set_Pix
$LN10@FT_Set_Pix:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	0
_FT_Set_Pixel_Sizes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_req$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_face$ = 8						; size = 4
_char_width$ = 12					; size = 4
_char_height$ = 16					; size = 4
_horz_resolution$ = 20					; size = 4
_vert_resolution$ = 24					; size = 4
_FT_Set_Char_Size PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2964
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2970
	cmp	DWORD PTR _char_width$[ebp], 0
	jne	SHORT $LN9@FT_Set_Cha
; Line 2971
	mov	eax, DWORD PTR _char_height$[ebp]
	mov	DWORD PTR _char_width$[ebp], eax
	jmp	SHORT $LN8@FT_Set_Cha
$LN9@FT_Set_Cha:
; Line 2972
	cmp	DWORD PTR _char_height$[ebp], 0
	jne	SHORT $LN8@FT_Set_Cha
; Line 2973
	mov	ecx, DWORD PTR _char_width$[ebp]
	mov	DWORD PTR _char_height$[ebp], ecx
$LN8@FT_Set_Cha:
; Line 2975
	cmp	DWORD PTR _horz_resolution$[ebp], 0
	jne	SHORT $LN6@FT_Set_Cha
; Line 2976
	mov	edx, DWORD PTR _vert_resolution$[ebp]
	mov	DWORD PTR _horz_resolution$[ebp], edx
	jmp	SHORT $LN5@FT_Set_Cha
$LN6@FT_Set_Cha:
; Line 2977
	cmp	DWORD PTR _vert_resolution$[ebp], 0
	jne	SHORT $LN5@FT_Set_Cha
; Line 2978
	mov	eax, DWORD PTR _horz_resolution$[ebp]
	mov	DWORD PTR _vert_resolution$[ebp], eax
$LN5@FT_Set_Cha:
; Line 2980
	cmp	DWORD PTR _char_width$[ebp], 64		; 00000040H
	jge	SHORT $LN3@FT_Set_Cha
; Line 2981
	mov	DWORD PTR _char_width$[ebp], 64		; 00000040H
$LN3@FT_Set_Cha:
; Line 2982
	cmp	DWORD PTR _char_height$[ebp], 64	; 00000040H
	jge	SHORT $LN2@FT_Set_Cha
; Line 2983
	mov	DWORD PTR _char_height$[ebp], 64	; 00000040H
$LN2@FT_Set_Cha:
; Line 2985
	cmp	DWORD PTR _horz_resolution$[ebp], 0
	jne	SHORT $LN1@FT_Set_Cha
; Line 2986
	mov	DWORD PTR _vert_resolution$[ebp], 72	; 00000048H
	mov	ecx, DWORD PTR _vert_resolution$[ebp]
	mov	DWORD PTR _horz_resolution$[ebp], ecx
$LN1@FT_Set_Cha:
; Line 2988
	mov	DWORD PTR _req$[ebp], 0
; Line 2989
	mov	edx, DWORD PTR _char_width$[ebp]
	mov	DWORD PTR _req$[ebp+4], edx
; Line 2990
	mov	eax, DWORD PTR _char_height$[ebp]
	mov	DWORD PTR _req$[ebp+8], eax
; Line 2991
	mov	ecx, DWORD PTR _horz_resolution$[ebp]
	mov	DWORD PTR _req$[ebp+12], ecx
; Line 2992
	mov	edx, DWORD PTR _vert_resolution$[ebp]
	mov	DWORD PTR _req$[ebp+16], edx
; Line 2994
	lea	eax, DWORD PTR _req$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Request_Size
	add	esp, 8
; Line 2995
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@FT_Set_Cha
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@FT_Set_Cha:
	DD	1
	DD	$LN13@FT_Set_Cha
$LN13@FT_Set_Cha:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN12@FT_Set_Cha
$LN12@FT_Set_Cha:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	0
_FT_Set_Char_Size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$1 = -28						; size = 4
_metrics$2 = -24					; size = 4
_error$3 = -20						; size = 4
_strike_index$ = -12					; size = 4
_clazz$ = -4						; size = 4
_face$ = 8						; size = 4
_req$ = 12						; size = 4
_FT_Request_Size PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2888
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2893
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN42@FT_Request
; Line 2894
	push	OFFSET $SG10815
	push	2894					; 00000b4eH
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN43@FT_Request
$LN42@FT_Request:
; Line 2897
	cmp	DWORD PTR _req$[ebp], 0
	je	SHORT $LN40@FT_Request
	mov	eax, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jl	SHORT $LN40@FT_Request
	mov	ecx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jl	SHORT $LN40@FT_Request
	mov	edx, DWORD PTR _req$[ebp]
	cmp	DWORD PTR [edx], 5
	jl	SHORT $LN41@FT_Request
$LN40@FT_Request:
; Line 2898
	push	OFFSET $SG10818
	push	2898					; 00000b52H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN43@FT_Request
$LN41@FT_Request:
; Line 2900
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _clazz$[ebp], edx
; Line 2902
	mov	eax, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [eax+88], 0
	je	$LN39@FT_Request
; Line 2907
	mov	esi, esp
	mov	ecx, DWORD PTR _req$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _clazz$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$3[ebp], eax
; Line 2911
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _metrics$2[ebp], ecx
$LN38@FT_Request:
; Line 2914
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN35@FT_Request
	push	OFFSET $SG10826
	call	_FT_Message
	add	esp, 4
$LN35@FT_Request:
	xor	ecx, ecx
	jne	SHORT $LN38@FT_Request
$LN36@FT_Request:
; Line 2916
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN31@FT_Request
	mov	ecx, DWORD PTR _metrics$2[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+4]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _metrics$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	OFFSET $SG10831
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN31@FT_Request:
	xor	ecx, ecx
	jne	SHORT $LN36@FT_Request
$LN32@FT_Request:
; Line 2918
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN27@FT_Request
	mov	ecx, DWORD PTR _metrics$2[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+8]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _metrics$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET $SG10836
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN27@FT_Request:
	xor	ecx, ecx
	jne	SHORT $LN32@FT_Request
$LN28@FT_Request:
; Line 2919
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN23@FT_Request
	mov	ecx, DWORD PTR _metrics$2[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+12]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10841
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN23@FT_Request:
	xor	edx, edx
	jne	SHORT $LN28@FT_Request
$LN24@FT_Request:
; Line 2920
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN19@FT_Request
	mov	edx, DWORD PTR _metrics$2[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+16]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10846
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN19@FT_Request:
	xor	eax, eax
	jne	SHORT $LN24@FT_Request
$LN20@FT_Request:
; Line 2921
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN15@FT_Request
	mov	eax, DWORD PTR _metrics$2[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+20]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10851
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN15@FT_Request:
	xor	ecx, ecx
	jne	SHORT $LN20@FT_Request
$LN16@FT_Request:
; Line 2922
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN11@FT_Request
	mov	ecx, DWORD PTR _metrics$2[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+24]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10856
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN11@FT_Request:
	xor	edx, edx
	jne	SHORT $LN16@FT_Request
$LN12@FT_Request:
; Line 2923
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN7@FT_Request
	mov	edx, DWORD PTR _metrics$2[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	push	OFFSET $SG10861
	call	_FT_Message
	add	esp, 8
$LN7@FT_Request:
	xor	ecx, ecx
	jne	SHORT $LN12@FT_Request
$LN8@FT_Request:
; Line 2924
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN3@FT_Request
	mov	ecx, DWORD PTR _metrics$2[ebp]
	movzx	edx, WORD PTR [ecx+2]
	push	edx
	push	OFFSET $SG10866
	call	_FT_Message
	add	esp, 8
$LN3@FT_Request:
	xor	eax, eax
	jne	SHORT $LN8@FT_Request
; Line 2928
	mov	eax, DWORD PTR _error$3[ebp]
	jmp	SHORT $LN43@FT_Request
$LN39@FT_Request:
; Line 2938
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 1
	jne	SHORT $LN2@FT_Request
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	je	SHORT $LN2@FT_Request
; Line 2943
	lea	edx, DWORD PTR _strike_index$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _req$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Match_Size
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$1[ebp], eax
; Line 2944
	cmp	DWORD PTR _error$1[ebp], 0
	je	SHORT $LN1@FT_Request
; Line 2945
	mov	eax, DWORD PTR _error$1[ebp]
	jmp	SHORT $LN43@FT_Request
$LN1@FT_Request:
; Line 2947
	mov	edx, DWORD PTR _strike_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_FT_Select_Size
	add	esp, 8
	jmp	SHORT $LN43@FT_Request
$LN2@FT_Request:
; Line 2950
	mov	ecx, DWORD PTR _req$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Request_Metrics
	add	esp, 8
; Line 2952
	xor	eax, eax
$LN43@FT_Request:
; Line 2953
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN47@FT_Request
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN47@FT_Request:
	DD	1
	DD	$LN46@FT_Request
$LN46@FT_Request:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN45@FT_Request
$LN45@FT_Request:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_FT_Request_Size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_metrics$1 = -12					; size = 4
_error$2 = -8						; size = 4
_clazz$ = -4						; size = 4
_face$ = 8						; size = 4
_strike_index$ = 12					; size = 4
_FT_Select_Size PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2836
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2840
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN40@FT_Select_
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	jne	SHORT $LN41@FT_Select_
$LN40@FT_Select_:
; Line 2841
	push	OFFSET $SG10753
	push	2841					; 00000b19H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN42@FT_Select_
$LN41@FT_Select_:
; Line 2843
	cmp	DWORD PTR _strike_index$[ebp], 0
	jl	SHORT $LN38@FT_Select_
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _strike_index$[ebp]
	cmp	eax, DWORD PTR [edx+28]
	jl	SHORT $LN39@FT_Select_
$LN38@FT_Select_:
; Line 2844
	push	OFFSET $SG10756
	push	2844					; 00000b1cH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN42@FT_Select_
$LN39@FT_Select_:
; Line 2846
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _clazz$[ebp], eax
; Line 2848
	mov	ecx, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	je	$LN37@FT_Select_
; Line 2853
	mov	esi, esp
	mov	edx, DWORD PTR _strike_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _clazz$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$2[ebp], eax
; Line 2857
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _metrics$1[ebp], edx
$LN36@FT_Select_:
; Line 2860
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN33@FT_Select_
	push	OFFSET $SG10765
	call	_FT_Message
	add	esp, 4
$LN33@FT_Select_:
	xor	edx, edx
	jne	SHORT $LN36@FT_Select_
$LN34@FT_Select_:
; Line 2862
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN29@FT_Select_
	mov	edx, DWORD PTR _metrics$1[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+4]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _metrics$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET $SG10770
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN29@FT_Select_:
	xor	edx, edx
	jne	SHORT $LN34@FT_Select_
$LN30@FT_Select_:
; Line 2864
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN25@FT_Select_
	mov	edx, DWORD PTR _metrics$1[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+8]
	divsd	xmm0, QWORD PTR __real@40f0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _metrics$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG10775
	call	_FT_Message
	add	esp, 16					; 00000010H
$LN25@FT_Select_:
	xor	edx, edx
	jne	SHORT $LN30@FT_Select_
$LN26@FT_Select_:
; Line 2865
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN21@FT_Select_
	mov	edx, DWORD PTR _metrics$1[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+12]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10780
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN21@FT_Select_:
	xor	eax, eax
	jne	SHORT $LN26@FT_Select_
$LN22@FT_Select_:
; Line 2866
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN17@FT_Select_
	mov	eax, DWORD PTR _metrics$1[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+16]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10785
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN17@FT_Select_:
	xor	ecx, ecx
	jne	SHORT $LN22@FT_Select_
$LN18@FT_Select_:
; Line 2867
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 5
	jl	SHORT $LN13@FT_Select_
	mov	ecx, DWORD PTR _metrics$1[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+20]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10790
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN13@FT_Select_:
	xor	edx, edx
	jne	SHORT $LN18@FT_Select_
$LN14@FT_Select_:
; Line 2868
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN9@FT_Select_
	mov	edx, DWORD PTR _metrics$1[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+24]
	divsd	xmm0, QWORD PTR __real@4050000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG10795
	call	_FT_Message
	add	esp, 12					; 0000000cH
$LN9@FT_Select_:
	xor	eax, eax
	jne	SHORT $LN14@FT_Select_
$LN10@FT_Select_:
; Line 2869
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 5
	jl	SHORT $LN5@FT_Select_
	mov	eax, DWORD PTR _metrics$1[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	push	OFFSET $SG10800
	call	_FT_Message
	add	esp, 8
$LN5@FT_Select_:
	xor	edx, edx
	jne	SHORT $LN10@FT_Select_
$LN6@FT_Select_:
; Line 2870
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 5
	jl	SHORT $LN1@FT_Select_
	mov	edx, DWORD PTR _metrics$1[ebp]
	movzx	eax, WORD PTR [edx+2]
	push	eax
	push	OFFSET $SG10805
	call	_FT_Message
	add	esp, 8
$LN1@FT_Select_:
	xor	ecx, ecx
	jne	SHORT $LN6@FT_Select_
; Line 2874
	mov	eax, DWORD PTR _error$2[ebp]
	jmp	SHORT $LN42@FT_Select_
$LN37@FT_Select_:
; Line 2877
	mov	edx, DWORD PTR _strike_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_FT_Select_Metrics
	add	esp, 8
; Line 2879
	xor	eax, eax
$LN42@FT_Select_:
; Line 2880
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Select_Size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_node$ = -16						; size = 4
_memory$ = -12						; size = 4
_driver$ = -8						; size = 4
_error$ = -4						; size = 4
_face$ = 8						; size = 4
_FT_Done_Face PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2403
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2410
	mov	DWORD PTR _error$[ebp], 35		; 00000023H
; Line 2411
	cmp	DWORD PTR _face$[ebp], 0
	je	$LN7@FT_Done_Fa
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	$LN7@FT_Done_Fa
; Line 2413
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+56]
	sub	eax, 1
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [edx+56], eax
; Line 2414
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	cmp	DWORD PTR [ecx+56], 0
	jle	SHORT $LN6@FT_Done_Fa
; Line 2415
	mov	DWORD PTR _error$[ebp], 0
; Line 2416
	jmp	SHORT $LN7@FT_Done_Fa
$LN6@FT_Done_Fa:
; Line 2418
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _driver$[ebp], eax
; Line 2419
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _memory$[ebp], edx
; Line 2422
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _driver$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_FT_List_Find
	add	esp, 8
	mov	DWORD PTR _node$[ebp], eax
; Line 2423
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN7@FT_Done_Fa
; Line 2426
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _driver$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_FT_List_Remove
	add	esp, 8
$LN3@FT_Done_Fa:
; Line 2427
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _node$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@FT_Done_Fa
; Line 2430
	mov	ecx, DWORD PTR _driver$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_destroy_face
	add	esp, 12					; 0000000cH
; Line 2431
	mov	DWORD PTR _error$[ebp], 0
$LN7@FT_Done_Fa:
; Line 2436
	mov	eax, DWORD PTR _error$[ebp]
; Line 2437
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Done_Face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$ = 8						; size = 4
_FT_Reference_Face PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2389
	push	ebp
	mov	ebp, esp
; Line 2390
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN1@FT_Referen
; Line 2391
	push	OFFSET $SG10476
	push	2391					; 00000957H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	SHORT $LN2@FT_Referen
$LN1@FT_Referen:
; Line 2393
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, 1
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR [ecx+56], edx
; Line 2395
	xor	eax, eax
$LN2@FT_Referen:
; Line 2396
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FT_Reference_Face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv95 = -25						; size = 1
_clazz$ = -24						; size = 4
_driver$ = -20						; size = 4
_error$ = -16						; size = 4
_stream$ = -8						; size = 4
_face$ = 8						; size = 4
_parameters$ = 12					; size = 4
_FT_Attach_Stream PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2346
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2356
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN4@FT_Attach_
; Line 2357
	push	OFFSET $SG10465
	push	2357					; 00000935H
	push	35					; 00000023H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 35					; 00000023H
	jmp	$LN5@FT_Attach_
$LN4@FT_Attach_:
; Line 2359
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _driver$[ebp], ecx
; Line 2360
	cmp	DWORD PTR _driver$[ebp], 0
	jne	SHORT $LN3@FT_Attach_
; Line 2361
	push	OFFSET $SG10467
	push	2361					; 00000939H
	push	34					; 00000022H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 34					; 00000022H
	jmp	$LN5@FT_Attach_
$LN3@FT_Attach_:
; Line 2363
	lea	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _parameters$[ebp]
	push	eax
	mov	ecx, DWORD PTR _driver$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_FT_Stream_New
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2364
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FT_Attach_
; Line 2365
	jmp	SHORT $Exit$12
$LN2@FT_Attach_:
; Line 2370
	mov	DWORD PTR _error$[ebp], 7
; Line 2371
	mov	eax, DWORD PTR _driver$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _clazz$[ebp], ecx
; Line 2372
	mov	edx, DWORD PTR _clazz$[ebp]
	cmp	DWORD PTR [edx+80], 0
	je	SHORT $LN1@FT_Attach_
; Line 2373
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _clazz$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
$LN1@FT_Attach_:
; Line 2378
	mov	ecx, DWORD PTR _parameters$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN7@FT_Attach_
	mov	edx, DWORD PTR _parameters$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 2
	je	SHORT $LN7@FT_Attach_
	mov	BYTE PTR tv95[ebp], 1
	jmp	SHORT $LN8@FT_Attach_
$LN7@FT_Attach_:
	mov	BYTE PTR tv95[ebp], 0
$LN8@FT_Attach_:
	movzx	ecx, BYTE PTR tv95[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Free
	add	esp, 8
$Exit$12:
; Line 2381
	mov	eax, DWORD PTR _error$[ebp]
$LN5@FT_Attach_:
; Line 2382
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@FT_Attach_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN11@FT_Attach_:
	DD	1
	DD	$LN10@FT_Attach_
$LN10@FT_Attach_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@FT_Attach_
$LN9@FT_Attach_:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_FT_Attach_Stream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_open$ = -36						; size = 32
_face$ = 8						; size = 4
_filepathname$ = 12					; size = 4
_FT_Attach_File PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2324
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2330
	cmp	DWORD PTR _filepathname$[ebp], 0
	jne	SHORT $LN1@FT_Attach_
; Line 2331
	push	OFFSET $SG10452
	push	2331					; 0000091bH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN2@FT_Attach_
$LN1@FT_Attach_:
; Line 2333
	mov	DWORD PTR _open$[ebp+16], 0
; Line 2334
	mov	DWORD PTR _open$[ebp], 4
; Line 2335
	mov	eax, DWORD PTR _filepathname$[ebp]
	mov	DWORD PTR _open$[ebp+12], eax
; Line 2337
	lea	ecx, DWORD PTR _open$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Attach_Stream
	add	esp, 8
$LN2@FT_Attach_:
; Line 2338
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@FT_Attach_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@FT_Attach_:
	DD	1
	DD	$LN5@FT_Attach_
$LN5@FT_Attach_:
	DD	-36					; ffffffdcH
	DD	32					; 00000020H
	DD	$LN4@FT_Attach_
$LN4@FT_Attach_:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_FT_Attach_File ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -101						; size = 1
_internal$1 = -100					; size = 4
_bsize$2 = -96						; size = 4
_i$3 = -92						; size = 4
_size$4 = -84						; size = 4
_params$5 = -76						; size = 4
_num_params$6 = -72					; size = 4
_params$7 = -68						; size = 4
_num_params$8 = -64					; size = 4
_limit$ = -60						; size = 4
_cur$ = -56						; size = 4
_external_stream$ = -49					; size = 1
_node$ = -48						; size = 4
_face$ = -40						; size = 4
_stream$ = -28						; size = 4
_memory$ = -20						; size = 4
_driver$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_args$ = 12						; size = 4
_face_index$ = 16					; size = 4
_aface$ = 20						; size = 4
_FT_Open_Face PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 2069
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	edi
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2071
	mov	DWORD PTR _driver$[ebp], 0
; Line 2072
	mov	DWORD PTR _memory$[ebp], 0
; Line 2073
	mov	DWORD PTR _stream$[ebp], 0
; Line 2074
	mov	DWORD PTR _face$[ebp], 0
; Line 2075
	mov	DWORD PTR _node$[ebp], 0
; Line 2083
	cmp	DWORD PTR _aface$[ebp], 0
	jne	SHORT $LN56@FT_Open_Fa
	cmp	DWORD PTR _face_index$[ebp], 0
	jge	SHORT $LN57@FT_Open_Fa
$LN56@FT_Open_Fa:
	cmp	DWORD PTR _args$[ebp], 0
	jne	SHORT $LN58@FT_Open_Fa
$LN57@FT_Open_Fa:
; Line 2084
	push	OFFSET $SG10358
	push	2084					; 00000824H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN59@FT_Open_Fa
$LN58@FT_Open_Fa:
; Line 2087
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN61@FT_Open_Fa
	mov	edx, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN61@FT_Open_Fa
	mov	BYTE PTR tv77[ebp], 1
	jmp	SHORT $LN62@FT_Open_Fa
$LN61@FT_Open_Fa:
	mov	BYTE PTR tv77[ebp], 0
$LN62@FT_Open_Fa:
	mov	al, BYTE PTR tv77[ebp]
	mov	BYTE PTR _external_stream$[ebp], al
; Line 2090
	lea	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_FT_Stream_New
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2091
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN55@FT_Open_Fa
; Line 2092
	jmp	$Fail3$69
$LN55@FT_Open_Fa:
; Line 2094
	mov	ecx, DWORD PTR _library$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _memory$[ebp], edx
; Line 2098
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 8
	je	$LN54@FT_Open_Fa
	mov	edx, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	$LN54@FT_Open_Fa
; Line 2100
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _driver$[ebp], ecx
; Line 2103
	mov	edx, DWORD PTR _driver$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN53@FT_Open_Fa
; Line 2105
	mov	DWORD PTR _num_params$8[ebp], 0
; Line 2106
	mov	DWORD PTR _params$7[ebp], 0
; Line 2109
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 16					; 00000010H
	je	SHORT $LN52@FT_Open_Fa
; Line 2111
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _num_params$8[ebp], edx
; Line 2112
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _params$7[ebp], ecx
$LN52@FT_Open_Fa:
; Line 2116
	lea	edx, DWORD PTR _face$[ebp]
	push	edx
	mov	eax, DWORD PTR _params$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _num_params$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	movzx	eax, BYTE PTR _external_stream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _driver$[ebp]
	push	edx
	call	_open_face
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2117
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN51@FT_Open_Fa
; Line 2118
	jmp	$Success$70
$LN51@FT_Open_Fa:
; Line 2120
	jmp	SHORT $LN50@FT_Open_Fa
$LN53@FT_Open_Fa:
; Line 2121
	push	OFFSET $SG10372
	push	2121					; 00000849H
	push	32					; 00000020H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 32					; 00000020H
	mov	DWORD PTR _error$[ebp], eax
$LN50@FT_Open_Fa:
; Line 2123
	movzx	eax, BYTE PTR _external_stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Free
	add	esp, 8
; Line 2124
	jmp	$Fail$71
; Line 2126
	jmp	$Success$70
$LN54@FT_Open_Fa:
; Line 2128
	mov	DWORD PTR _error$[ebp], 11		; 0000000bH
; Line 2131
	mov	edx, DWORD PTR _library$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _cur$[ebp], edx
; Line 2132
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _cur$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _limit$[ebp], eax
; Line 2134
	jmp	SHORT $LN48@FT_Open_Fa
$LN47@FT_Open_Fa:
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 4
	mov	DWORD PTR _cur$[ebp], ecx
$LN48@FT_Open_Fa:
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	$Fail3$69
; Line 2137
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	$LN45@FT_Open_Fa
; Line 2139
	mov	DWORD PTR _num_params$6[ebp], 0
; Line 2140
	mov	DWORD PTR _params$5[ebp], 0
; Line 2143
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _driver$[ebp], eax
; Line 2145
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 16					; 00000010H
	je	SHORT $LN44@FT_Open_Fa
; Line 2147
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _num_params$6[ebp], ecx
; Line 2148
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _params$5[ebp], eax
$LN44@FT_Open_Fa:
; Line 2152
	lea	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _params$5[ebp]
	push	edx
	mov	eax, DWORD PTR _num_params$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _face_index$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _external_stream$[ebp]
	push	edx
	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _driver$[ebp]
	push	ecx
	call	_open_face
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _error$[ebp], eax
; Line 2153
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN43@FT_Open_Fa
; Line 2154
	jmp	$Success$70
$LN43@FT_Open_Fa:
; Line 2158
	push	OFFSET $SG10386
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN42@FT_Open_Fa
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 142				; 0000008eH
	jne	SHORT $LN42@FT_Open_Fa
; Line 2161
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_Seek
	add	esp, 8
	test	eax, eax
	je	SHORT $LN41@FT_Open_Fa
; Line 2162
	jmp	SHORT $Fail3$69
$LN41@FT_Open_Fa:
; Line 2169
	mov	ecx, DWORD PTR _aface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _params$5[ebp]
	push	edx
	mov	eax, DWORD PTR _num_params$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _face_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _library$[ebp]
	push	eax
	call	_open_face_PS_from_sfnt_stream
	add	esp, 24					; 00000018H
	mov	DWORD PTR _error$[ebp], eax
; Line 2170
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN42@FT_Open_Fa
; Line 2172
	movzx	ecx, BYTE PTR _external_stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Free
	add	esp, 8
; Line 2173
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN59@FT_Open_Fa
$LN42@FT_Open_Fa:
; Line 2178
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 2
	je	SHORT $LN45@FT_Open_Fa
; Line 2179
	jmp	SHORT $Fail3$69
$LN45@FT_Open_Fa:
; Line 2181
	jmp	$LN47@FT_Open_Fa
$Fail3$69:
; Line 2189
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 81					; 00000051H
	je	SHORT $LN38@FT_Open_Fa
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 2
	je	SHORT $LN38@FT_Open_Fa
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 85					; 00000055H
	je	SHORT $LN38@FT_Open_Fa
; Line 2190
	jmp	SHORT $Fail2$72
$LN38@FT_Open_Fa:
; Line 2193
	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aface$[ebp]
	push	edx
	mov	eax, DWORD PTR _face_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_load_mac_face
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
; Line 2194
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN37@FT_Open_Fa
; Line 2201
	movzx	eax, BYTE PTR _external_stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Free
	add	esp, 8
; Line 2202
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN59@FT_Open_Fa
$LN37@FT_Open_Fa:
; Line 2205
	mov	edx, DWORD PTR _error$[ebp]
	and	edx, 255				; 000000ffH
	cmp	edx, 2
	je	SHORT $LN36@FT_Open_Fa
; Line 2206
	jmp	SHORT $Fail2$72
$LN36@FT_Open_Fa:
; Line 2210
	push	OFFSET $SG10394
	push	2210					; 000008a2H
	push	2
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 2
	mov	DWORD PTR _error$[ebp], eax
$Fail2$72:
; Line 2213
	movzx	eax, BYTE PTR _external_stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Free
	add	esp, 8
; Line 2214
	jmp	$Fail$71
$Success$70:
; Line 2218
	mov	edx, 4
	imul	eax, edx, 7
	cmp	DWORD PTR _ft_trace_levels[eax], 4
	jl	SHORT $LN34@FT_Open_Fa
	push	OFFSET $SG10399
	call	_FT_Message
	add	esp, 4
$LN34@FT_Open_Fa:
	xor	ecx, ecx
	jne	SHORT $Success$70
; Line 2221
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _node$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN31@FT_Open_Fa
; Line 2222
	jmp	$Fail$71
$LN31@FT_Open_Fa:
; Line 2224
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _face$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 2227
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	add	edx, 16					; 00000010H
	push	edx
	call	_FT_List_Add
	add	esp, 8
$LN30@FT_Open_Fa:
; Line 2230
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN29@FT_Open_Fa
	push	OFFSET $SG10406
	call	_FT_Message
	add	esp, 4
$LN29@FT_Open_Fa:
	xor	edx, edx
	jne	SHORT $LN30@FT_Open_Fa
; Line 2232
	cmp	DWORD PTR _face_index$[ebp], 0
	jl	SHORT $LN26@FT_Open_Fa
; Line 2234
	push	0
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_FT_New_GlyphSlot
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2235
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN24@FT_Open_Fa
; Line 2236
	jmp	$Fail$71
$LN24@FT_Open_Fa:
; Line 2243
	mov	ecx, 4
	imul	edx, ecx, 7
	cmp	DWORD PTR _ft_trace_levels[edx], 4
	jl	SHORT $LN23@FT_Open_Fa
	push	OFFSET $SG10415
	call	_FT_Message
	add	esp, 4
$LN23@FT_Open_Fa:
	xor	eax, eax
	jne	SHORT $LN24@FT_Open_Fa
; Line 2245
	lea	ecx, DWORD PTR _size$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_New_Size
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 2246
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN20@FT_Open_Fa
; Line 2247
	jmp	$Fail$71
$LN20@FT_Open_Fa:
; Line 2249
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR _size$4[ebp]
	mov	DWORD PTR [eax+88], ecx
$LN26@FT_Open_Fa:
; Line 2255
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	je	SHORT $LN19@FT_Open_Fa
; Line 2257
	mov	ecx, DWORD PTR _face$[ebp]
	movsx	edx, WORD PTR [ecx+74]
	test	edx, edx
	jge	SHORT $LN18@FT_Open_Fa
; Line 2258
	mov	eax, DWORD PTR _face$[ebp]
	movsx	ecx, WORD PTR [eax+74]
	neg	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	WORD PTR [edx+74], cx
$LN18@FT_Open_Fa:
; Line 2260
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN19@FT_Open_Fa
; Line 2261
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	cx, WORD PTR [eax+74]
	mov	WORD PTR [edx+78], cx
$LN19@FT_Open_Fa:
; Line 2264
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 2
	je	SHORT $LN16@FT_Open_Fa
; Line 2269
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN15@FT_Open_Fa
$LN14@FT_Open_Fa:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN15@FT_Open_Fa:
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR [edx+28]
	jge	SHORT $LN16@FT_Open_Fa
; Line 2271
	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _face$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR _bsize$2[ebp], ecx
; Line 2274
	mov	eax, DWORD PTR _bsize$2[ebp]
	movsx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jge	SHORT $LN12@FT_Open_Fa
; Line 2275
	mov	edx, DWORD PTR _bsize$2[ebp]
	movsx	eax, WORD PTR [edx]
	neg	eax
	mov	ecx, DWORD PTR _bsize$2[ebp]
	mov	WORD PTR [ecx], ax
$LN12@FT_Open_Fa:
; Line 2276
	mov	edx, DWORD PTR _bsize$2[ebp]
	cmp	DWORD PTR [edx+8], 0
	jge	SHORT $LN11@FT_Open_Fa
; Line 2277
	mov	eax, DWORD PTR _bsize$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	neg	ecx
	movsx	edx, cx
	mov	eax, DWORD PTR _bsize$2[ebp]
	mov	DWORD PTR [eax+8], edx
$LN11@FT_Open_Fa:
; Line 2278
	mov	ecx, DWORD PTR _bsize$2[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jge	SHORT $LN10@FT_Open_Fa
; Line 2279
	mov	edx, DWORD PTR _bsize$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	neg	eax
	mov	ecx, DWORD PTR _bsize$2[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN10@FT_Open_Fa:
; Line 2280
	jmp	SHORT $LN14@FT_Open_Fa
$LN16@FT_Open_Fa:
; Line 2285
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR _internal$1[ebp], eax
; Line 2288
	mov	ecx, DWORD PTR _internal$1[ebp]
	mov	DWORD PTR [ecx], 65536			; 00010000H
; Line 2289
	mov	edx, DWORD PTR _internal$1[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 2290
	mov	eax, DWORD PTR _internal$1[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 2291
	mov	ecx, DWORD PTR _internal$1[ebp]
	mov	DWORD PTR [ecx+12], 65536		; 00010000H
; Line 2293
	mov	edx, DWORD PTR _internal$1[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 2294
	mov	eax, DWORD PTR _internal$1[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 2296
	mov	ecx, DWORD PTR _internal$1[ebp]
	mov	DWORD PTR [ecx+56], 1
; Line 2299
	cmp	DWORD PTR _aface$[ebp], 0
	je	SHORT $LN9@FT_Open_Fa
; Line 2300
	mov	edx, DWORD PTR _aface$[ebp]
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR [edx], eax
; Line 2301
	jmp	SHORT $LN8@FT_Open_Fa
$LN9@FT_Open_Fa:
; Line 2302
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	_FT_Done_Face
	add	esp, 4
$LN8@FT_Open_Fa:
; Line 2304
	jmp	SHORT $Exit$73
$Fail$71:
; Line 2307
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN7@FT_Open_Fa
; Line 2308
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Done_Face
	add	esp, 4
	jmp	SHORT $Exit$73
$LN7@FT_Open_Fa:
; Line 2309
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $Exit$73
; Line 2310
	mov	eax, DWORD PTR _driver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_destroy_face
	add	esp, 12					; 0000000cH
$Exit$73:
; Line 2313
	mov	eax, 4
	imul	ecx, eax, 7
	cmp	DWORD PTR _ft_trace_levels[ecx], 4
	jl	SHORT $LN3@FT_Open_Fa
	mov	edx, DWORD PTR _error$[ebp]
	push	edx
	push	OFFSET $SG10444
	call	_FT_Message
	add	esp, 8
$LN3@FT_Open_Fa:
	xor	eax, eax
	jne	SHORT $Exit$73
; Line 2315
	mov	eax, DWORD PTR _error$[ebp]
$LN59@FT_Open_Fa:
; Line 2316
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN68@FT_Open_Fa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN68@FT_Open_Fa:
	DD	4
	DD	$LN67@FT_Open_Fa
$LN67@FT_Open_Fa:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN63@FT_Open_Fa
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN64@FT_Open_Fa
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN65@FT_Open_Fa
	DD	-84					; ffffffacH
	DD	4
	DD	$LN66@FT_Open_Fa
$LN66@FT_Open_Fa:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN65@FT_Open_Fa:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN64@FT_Open_Fa:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN63@FT_Open_Fa:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FT_Open_Face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_args$ = -36						; size = 32
_library$ = 8						; size = 4
_file_base$ = 12					; size = 4
_file_size$ = 16					; size = 4
_face_index$ = 20					; size = 4
_aface$ = 24						; size = 4
_FT_New_Memory_Face PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1247
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1252
	cmp	DWORD PTR _file_base$[ebp], 0
	jne	SHORT $LN1@FT_New_Mem
; Line 1253
	push	OFFSET $SG9832
	push	1253					; 000004e5H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN2@FT_New_Mem
$LN1@FT_New_Mem:
; Line 1255
	mov	DWORD PTR _args$[ebp], 1
; Line 1256
	mov	eax, DWORD PTR _file_base$[ebp]
	mov	DWORD PTR _args$[ebp+4], eax
; Line 1257
	mov	ecx, DWORD PTR _file_size$[ebp]
	mov	DWORD PTR _args$[ebp+8], ecx
; Line 1258
	mov	DWORD PTR _args$[ebp+16], 0
; Line 1260
	mov	edx, DWORD PTR _aface$[ebp]
	push	edx
	mov	eax, DWORD PTR _face_index$[ebp]
	push	eax
	lea	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _library$[ebp]
	push	edx
	call	_FT_Open_Face
	add	esp, 16					; 00000010H
$LN2@FT_New_Mem:
; Line 1261
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@FT_New_Mem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@FT_New_Mem:
	DD	1
	DD	$LN5@FT_New_Mem
$LN5@FT_New_Mem:
	DD	-36					; ffffffdcH
	DD	32					; 00000020H
	DD	$LN4@FT_New_Mem
$LN4@FT_New_Mem:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
_FT_New_Memory_Face ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_args$ = -36						; size = 32
_library$ = 8						; size = 4
_pathname$ = 12						; size = 4
_face_index$ = 16					; size = 4
_aface$ = 20						; size = 4
_FT_New_Face PROC
; File d:\mozilla\modules\freetype2\src\base\ftobjs.c
; Line 1221
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1226
	cmp	DWORD PTR _pathname$[ebp], 0
	jne	SHORT $LN1@FT_New_Fac
; Line 1227
	push	OFFSET $SG9816
	push	1227					; 000004cbH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	SHORT $LN2@FT_New_Fac
$LN1@FT_New_Fac:
; Line 1229
	mov	DWORD PTR _args$[ebp], 4
; Line 1230
	mov	eax, DWORD PTR _pathname$[ebp]
	mov	DWORD PTR _args$[ebp+12], eax
; Line 1231
	mov	DWORD PTR _args$[ebp+16], 0
; Line 1233
	mov	ecx, DWORD PTR _aface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face_index$[ebp]
	push	edx
	lea	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _library$[ebp]
	push	ecx
	call	_FT_Open_Face
	add	esp, 16					; 00000010H
$LN2@FT_New_Fac:
; Line 1234
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@FT_New_Fac
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@FT_New_Fac:
	DD	1
	DD	$LN5@FT_New_Fac
$LN5@FT_New_Fac:
	DD	-36					; ffffffdcH
	DD	32					; 00000020H
	DD	$LN4@FT_New_Fac
$LN4@FT_New_Fac:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
_FT_New_Face ENDP
_TEXT	ENDS
END
