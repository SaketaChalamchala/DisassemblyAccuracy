; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\cache\ftcache.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

CONST	SEGMENT
_ftc_basic_sbit_family_class DD 030H
	DD	FLAT:_ftc_basic_family_compare
	DD	FLAT:_ftc_basic_family_init
	DD	00H
	DD	00H
	DD	FLAT:_ftc_basic_family_get_count
	DD	FLAT:_ftc_basic_family_load_bitmap
_ftc_basic_sbit_cache_class DD FLAT:_ftc_snode_new
	DD	FLAT:_ftc_snode_weight
	DD	FLAT:_ftc_snode_compare
	DD	FLAT:_ftc_basic_gnode_compare_faceid
	DD	FLAT:_ftc_snode_free
	DD	068H
	DD	FLAT:_ftc_gcache_init
	DD	FLAT:_ftc_gcache_done
	DD	FLAT:_ftc_basic_sbit_family_class
_ftc_cmap_cache_class DD FLAT:_ftc_cmap_node_new
	DD	FLAT:_ftc_cmap_node_weight
	DD	FLAT:_ftc_cmap_node_compare
	DD	FLAT:_ftc_cmap_node_remove_faceid
	DD	FLAT:_ftc_cmap_node_free
	DD	040H
	DD	FLAT:_ftc_cache_init
	DD	FLAT:_ftc_cache_done
_ftc_size_list_class DD 024H
	DD	FLAT:_ftc_size_node_compare
	DD	FLAT:_ftc_size_node_init
	DD	FLAT:_ftc_size_node_reset
	DD	FLAT:_ftc_size_node_done
_ftc_face_list_class DD 010H
	DD	FLAT:_ftc_face_node_compare
	DD	FLAT:_ftc_face_node_init
	DD	00H
	DD	FLAT:_ftc_face_node_done
_ftc_basic_image_family_class DD 030H
	DD	FLAT:_ftc_basic_family_compare
	DD	FLAT:_ftc_basic_family_init
	DD	00H
	DD	00H
	DD	FLAT:_ftc_basic_family_load_glyph
_ftc_basic_image_cache_class DD FLAT:_ftc_inode_new
	DD	FLAT:_ftc_inode_weight
	DD	FLAT:_ftc_gnode_compare
	DD	FLAT:_ftc_basic_gnode_compare_faceid
	DD	FLAT:_ftc_inode_free
	DD	068H
	DD	FLAT:_ftc_gcache_init
	DD	FLAT:_ftc_gcache_done
	DD	FLAT:_ftc_basic_image_family_class
CONST	ENDS
_DATA	SEGMENT
$SG9216	DB	'd:\mozilla\modules\freetype2\src\cache\ftcbasic.c', 00H
	ORG $+6
$SG9227	DB	'FTC_ImageCache_LookupScaler: higher bits in load_flags 0'
	DB	'x%x are dropped', 0aH, 00H
	ORG $+3
$SG8224	DB	'ftc_node_hash_unlink: unknown node', 0aH, 00H
$SG9290	DB	'FTC_CACHE_LOOKUP_CMP: oops!!! node missing', 0aH, 00H
$SG9334	DB	'd:\mozilla\modules\freetype2\src\cache\ftcbasic.c', 00H
	ORG $+2
$SG9343	DB	'FTC_ImageCache_Lookup: higher bits in load_flags 0x%x ar'
	DB	'e dropped', 0aH, 00H
	ORG $+1
$SG7343	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmru.c', 00H
$SG7344	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9406	DB	'FTC_CACHE_LOOKUP_CMP: oops!!! node missing', 0aH, 00H
$SG7362	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmru.c', 00H
$SG7363	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG7369	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmru.c', 00H
$SG7370	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG7375	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmru.c', 00H
$SG7376	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG9444	DB	'd:\mozilla\modules\freetype2\src\cache\ftcbasic.c', 00H
	ORG $+2
$SG7402	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmru.c', 00H
$SG7403	DB	'assertion failed on line %d of file %s', 0aH, 00H
	ORG $+4
$SG9452	DB	'FTC_ImageCache_LookupScaler: higher bits in load_flags 0'
	DB	'x%x are dropped', 0aH, 00H
	ORG $+3
$SG7423	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmru.c', 00H
$SG7424	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG8476	DB	'FTC_CMapCache_Lookup: bad arguments, returning 0', 0aH, 00H
	ORG $+2
$SG9515	DB	'FTC_CACHE_LOOKUP_CMP: oops!!! node missing', 0aH, 00H
$SG8509	DB	'FTC_CACHE_LOOKUP_CMP: oops!!! node missing', 0aH, 00H
$SG8526	DB	'd:\mozilla\modules\freetype2\src\cache\ftccmap.c', 00H
	ORG $+3
$SG8527	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG8775	DB	'ftc_snode_load: invalid glyph index', 00H
$SG8776	DB	'd:\mozilla\modules\freetype2\src\cache\ftcsbits.c', 00H
	ORG $+2
$SG8790	DB	'ftc_snode_load: glyph loaded didn''t return a bitmap', 0aH
	DB	00H
	ORG $+3
$SG8818	DB	'ftc_snode_load: glyph too large for small bitmap cache', 0aH
	DB	00H
$SG8853	DB	'd:\mozilla\modules\freetype2\src\cache\ftcsbits.c', 00H
	ORG $+2
$SG8893	DB	'd:\mozilla\modules\freetype2\src\cache\ftcsbits.c', 00H
	ORG $+2
$SG8894	DB	'assertion failed on line %d of file %s', 0aH, 00H
$SG7899	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmanag.c', 00H
	ORG $+2
$SG7902	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmanag.c', 00H
	ORG $+2
$SG7982	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmanag.c', 00H
	ORG $+2
$SG7985	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmanag.c', 00H
	ORG $+6
$SG9015	DB	'ftc_basic_family_get_count: too large number of glyphs i'
	DB	'n this face, truncated', 0aH, 00H
$SG8025	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmanag.c', 00H
	ORG $+2
$SG8028	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmanag.c', 00H
	ORG $+2
$SG9059	DB	'd:\mozilla\modules\freetype2\src\cache\ftcbasic.c', 00H
	ORG $+2
$SG9107	DB	'd:\mozilla\modules\freetype2\src\cache\ftcbasic.c', 00H
	ORG $+2
$SG8093	DB	'd:\mozilla\modules\freetype2\src\cache\ftcmanag.c', 00H
	ORG $+2
$SG8094	DB	'FTC_Manager_RegisterCache: too many registered caches', 0aH
	DB	00H
	ORG $+5
$SG9119	DB	'FTC_ImageCache_Lookup: higher bits in load_flags 0x%x ar'
	DB	'e dropped', 0aH, 00H
	ORG $+1
$SG9182	DB	'FTC_CACHE_LOOKUP_CMP: oops!!! node missing', 0aH, 00H
_DATA	ENDS
PUBLIC	_FTC_Manager_New
PUBLIC	_FTC_Manager_Reset
PUBLIC	_FTC_Manager_Done
PUBLIC	_FTC_Manager_LookupFace
PUBLIC	_FTC_Manager_LookupSize
PUBLIC	_FTC_Node_Unref
PUBLIC	_FTC_Manager_RemoveFaceID
PUBLIC	_FTC_CMapCache_New
PUBLIC	_FTC_CMapCache_Lookup
PUBLIC	_FTC_ImageCache_New
PUBLIC	_FTC_ImageCache_Lookup
PUBLIC	_FTC_ImageCache_LookupScaler
PUBLIC	_FTC_SBitCache_New
PUBLIC	_FTC_SBitCache_Lookup
PUBLIC	_FTC_SBitCache_LookupScaler
EXTRN	_memcpy:PROC
EXTRN	_labs:PROC
EXTRN	_FT_Done_Face:PROC
EXTRN	_FT_Set_Char_Size:PROC
EXTRN	_FT_Set_Pixel_Sizes:PROC
EXTRN	_FT_Load_Glyph:PROC
EXTRN	_FT_Set_Charmap:PROC
EXTRN	_FT_Get_Char_Index:PROC
EXTRN	_FT_Get_Glyph:PROC
EXTRN	_FT_Done_Glyph:PROC
EXTRN	_FT_New_Size:PROC
EXTRN	_FT_Done_Size:PROC
EXTRN	_FT_Activate_Size:PROC
EXTRN	_ft_mem_alloc:PROC
EXTRN	_ft_mem_realloc:PROC
EXTRN	_ft_mem_free:PROC
EXTRN	_FT_Message:PROC
EXTRN	_FT_Panic:PROC
EXTRN	_FT_Throw:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ft_trace_levels:BYTE
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -14						; size = 1
_result$ = -13						; size = 1
_family$ = -12						; size = 4
_face_id$ = -8						; size = 4
_gnode$ = -4						; size = 4
_ftcgnode$ = 8						; size = 4
_ftcface_id$ = 12					; size = 4
_cache$ = 16						; size = 4
_list_changed$ = 20					; size = 4
_ftc_basic_gnode_compare_faceid PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 204
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 205
	mov	eax, DWORD PTR _ftcgnode$[ebp]
	mov	DWORD PTR _gnode$[ebp], eax
; Line 206
	mov	ecx, DWORD PTR _ftcface_id$[ebp]
	mov	DWORD PTR _face_id$[ebp], ecx
; Line 207
	mov	edx, DWORD PTR _gnode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _family$[ebp], eax
; Line 211
	cmp	DWORD PTR _list_changed$[ebp], 0
	je	SHORT $LN2@ftc_basic_
; Line 212
	mov	ecx, DWORD PTR _list_changed$[ebp]
	mov	BYTE PTR [ecx], 0
$LN2@ftc_basic_:
; Line 213
	mov	edx, DWORD PTR _family$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _face_id$[ebp]
	jne	SHORT $LN5@ftc_basic_
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN6@ftc_basic_
$LN5@ftc_basic_:
	mov	BYTE PTR tv68[ebp], 0
$LN6@ftc_basic_:
	mov	cl, BYTE PTR tv68[ebp]
	mov	BYTE PTR _result$[ebp], cl
; Line 214
	movzx	edx, BYTE PTR _result$[ebp]
	test	edx, edx
	je	SHORT $LN1@ftc_basic_
; Line 219
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	mov	ecx, DWORD PTR _gnode$[ebp]
	push	ecx
	call	_FTC_GNode_UnselectFamily
	add	esp, 8
$LN1@ftc_basic_:
; Line 221
	mov	al, BYTE PTR _result$[ebp]
; Line 222
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_basic_gnode_compare_faceid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_glyph$1 = -36						; size = 4
_size$ = -24						; size = 4
_face$ = -16						; size = 4
_scaler$ = -12						; size = 4
_error$ = -8						; size = 4
_family$ = -4						; size = 4
_ftcfamily$ = 8						; size = 4
_gindex$ = 12						; size = 4
_cache$ = 16						; size = 4
_aglyph$ = 20						; size = 4
_ftc_basic_family_load_glyph PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 157
	mov	eax, DWORD PTR _ftcfamily$[ebp]
	mov	DWORD PTR _family$[ebp], eax
; Line 159
	mov	ecx, DWORD PTR _family$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _scaler$[ebp], ecx
; Line 167
	lea	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _scaler$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_FTC_Manager_LookupSize
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 168
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$13
; Line 170
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$[ebp], ecx
; Line 172
	mov	edx, DWORD PTR _family$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _gindex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_Load_Glyph
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 173
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $Exit$13
; Line 176
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	cmp	DWORD PTR [ecx+72], 1651078259		; 62697473H
	je	SHORT $LN3@ftc_basic_
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+84]
	cmp	DWORD PTR [eax+72], 1869968492		; 6f75746cH
	jne	SHORT $LN4@ftc_basic_
$LN3@ftc_basic_:
; Line 182
	lea	ecx, DWORD PTR _glyph$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	_FT_Get_Glyph
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 183
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@ftc_basic_
; Line 185
	mov	ecx, DWORD PTR _aglyph$[ebp]
	mov	edx, DWORD PTR _glyph$1[ebp]
	mov	DWORD PTR [ecx], edx
; Line 186
	jmp	SHORT $Exit$13
$LN2@ftc_basic_:
; Line 189
	jmp	SHORT $Exit$13
$LN4@ftc_basic_:
; Line 190
	push	OFFSET $SG9059
	push	190					; 000000beH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
$Exit$13:
; Line 195
	mov	eax, DWORD PTR _error$[ebp]
; Line 196
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ftc_basic_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@ftc_basic_:
	DD	2
	DD	$LN11@ftc_basic_
$LN11@ftc_basic_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@ftc_basic_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN10@ftc_basic_
$LN10@ftc_basic_:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	0
$LN9@ftc_basic_:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_ftc_basic_family_load_glyph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_face$1 = -24						; size = 4
_size$ = -16						; size = 4
_error$ = -8						; size = 4
_family$ = -4						; size = 4
_ftcfamily$ = 8						; size = 4
_gindex$ = 12						; size = 4
_manager$ = 16						; size = 4
_aface$ = 20						; size = 4
_ftc_basic_family_load_bitmap PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 130
	mov	eax, DWORD PTR _ftcfamily$[ebp]
	mov	DWORD PTR _family$[ebp], eax
; Line 135
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _family$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	eax, DWORD PTR _manager$[ebp]
	push	eax
	call	_FTC_Manager_LookupSize
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 136
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@ftc_basic_
; Line 138
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _face$1[ebp], edx
; Line 142
	mov	eax, DWORD PTR _family$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	or	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _gindex$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$1[ebp]
	push	eax
	call	_FT_Load_Glyph
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 143
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@ftc_basic_
; Line 144
	mov	ecx, DWORD PTR _aface$[ebp]
	mov	edx, DWORD PTR _face$1[ebp]
	mov	DWORD PTR [ecx], edx
$LN2@ftc_basic_:
; Line 147
	mov	eax, DWORD PTR _error$[ebp]
; Line 148
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ftc_basic_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@ftc_basic_:
	DD	1
	DD	$LN6@ftc_basic_
$LN6@ftc_basic_:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN5@ftc_basic_
$LN5@ftc_basic_:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_ftc_basic_family_load_bitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -24						; size = 4
_face$ = -16						; size = 4
_error$ = -8						; size = 4
_family$ = -4						; size = 4
_ftcfamily$ = 8						; size = 4
_manager$ = 12						; size = 4
_ftc_basic_family_get_count PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 100
	mov	eax, DWORD PTR _ftcfamily$[ebp]
	mov	DWORD PTR _family$[ebp], eax
; Line 103
	mov	DWORD PTR _result$[ebp], 0
; Line 107
	lea	ecx, DWORD PTR _face$[ebp]
	push	ecx
	mov	edx, DWORD PTR _family$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _manager$[ebp]
	push	ecx
	call	_FTC_Manager_LookupFace
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 109
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN8@ftc_basic_
	cmp	DWORD PTR _face$[ebp], 0
	jne	SHORT $LN9@ftc_basic_
$LN8@ftc_basic_:
; Line 110
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN10@ftc_basic_
$LN9@ftc_basic_:
; Line 112
	mov	edx, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [edx+16], -1
	ja	SHORT $LN5@ftc_basic_
	mov	eax, DWORD PTR _face$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jge	SHORT $LN7@ftc_basic_
$LN5@ftc_basic_:
; Line 115
	mov	ecx, 4
	imul	edx, ecx, 17
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN4@ftc_basic_
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	OFFSET $SG9015
	call	_FT_Message
	add	esp, 8
$LN4@ftc_basic_:
	xor	edx, edx
	jne	SHORT $LN5@ftc_basic_
$LN7@ftc_basic_:
; Line 117
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ftc_basic_
; Line 118
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _result$[ebp], ecx
$LN1@ftc_basic_:
; Line 120
	mov	eax, DWORD PTR _result$[ebp]
$LN10@ftc_basic_:
; Line 121
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ftc_basic_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@ftc_basic_:
	DD	1
	DD	$LN13@ftc_basic_
$LN13@ftc_basic_:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN12@ftc_basic_
$LN12@ftc_basic_:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
_ftc_basic_family_get_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cache$ = -12						; size = 4
_query$ = -8						; size = 4
_family$ = -4						; size = 4
_ftcfamily$ = 8						; size = 4
_ftcquery$ = 12						; size = 4
_ftccache$ = 16						; size = 4
_ftc_basic_family_init PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 85
	mov	eax, DWORD PTR _ftcfamily$[ebp]
	mov	DWORD PTR _family$[ebp], eax
; Line 86
	mov	ecx, DWORD PTR _ftcquery$[ebp]
	mov	DWORD PTR _query$[ebp], ecx
; Line 87
	mov	edx, DWORD PTR _ftccache$[ebp]
	mov	DWORD PTR _cache$[ebp], edx
; Line 90
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	mov	ecx, DWORD PTR _family$[ebp]
	push	ecx
	call	_FTC_Family_Init
	add	esp, 8
; Line 91
	mov	esi, DWORD PTR _query$[ebp]
	add	esi, 8
	mov	edi, DWORD PTR _family$[ebp]
	add	edi, 20					; 00000014H
	mov	ecx, 7
	rep movsd
; Line 92
	xor	eax, eax
; Line 93
	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_basic_family_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv91 = -17						; size = 1
tv77 = -16						; size = 4
tv78 = -12						; size = 4
_query$ = -8						; size = 4
_family$ = -4						; size = 4
_ftcfamily$ = 8						; size = 4
_ftcquery$ = 12						; size = 4
_ftc_basic_family_compare PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 72
	mov	eax, DWORD PTR _ftcfamily$[ebp]
	mov	DWORD PTR _family$[ebp], eax
; Line 73
	mov	ecx, DWORD PTR _ftcquery$[ebp]
	mov	DWORD PTR _query$[ebp], ecx
; Line 76
	mov	edx, DWORD PTR _family$[ebp]
	mov	eax, DWORD PTR _query$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+8]
	jne	$LN8@ftc_basic_
	mov	edx, DWORD PTR _family$[ebp]
	mov	eax, DWORD PTR _query$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	cmp	ecx, DWORD PTR [eax+12]
	jne	$LN8@ftc_basic_
	mov	edx, DWORD PTR _family$[ebp]
	mov	eax, DWORD PTR _query$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	cmp	ecx, DWORD PTR [eax+16]
	jne	SHORT $LN8@ftc_basic_
	mov	edx, DWORD PTR _family$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN6@ftc_basic_
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN7@ftc_basic_
$LN6@ftc_basic_:
	mov	DWORD PTR tv78[ebp], 0
$LN7@ftc_basic_:
	mov	eax, DWORD PTR _query$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@ftc_basic_
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN5@ftc_basic_
$LN4@ftc_basic_:
	mov	DWORD PTR tv77[ebp], 0
$LN5@ftc_basic_:
	mov	ecx, DWORD PTR tv78[ebp]
	cmp	ecx, DWORD PTR tv77[ebp]
	jne	SHORT $LN8@ftc_basic_
	mov	edx, DWORD PTR _family$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	SHORT $LN9@ftc_basic_
	mov	eax, DWORD PTR _family$[ebp]
	mov	ecx, DWORD PTR _query$[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx+24]
	jne	SHORT $LN8@ftc_basic_
	mov	eax, DWORD PTR _family$[ebp]
	mov	ecx, DWORD PTR _query$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+28]
	jne	SHORT $LN8@ftc_basic_
$LN9@ftc_basic_:
	mov	eax, DWORD PTR _family$[ebp]
	mov	ecx, DWORD PTR _query$[ebp]
	mov	edx, DWORD PTR [eax+44]
	cmp	edx, DWORD PTR [ecx+32]
	jne	SHORT $LN8@ftc_basic_
	mov	BYTE PTR tv91[ebp], 1
	jmp	SHORT $LN10@ftc_basic_
$LN8@ftc_basic_:
	mov	BYTE PTR tv91[ebp], 0
$LN10@ftc_basic_:
	mov	al, BYTE PTR tv91[ebp]
; Line 77
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_basic_family_compare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv199 = -60						; size = 4
_yadvance$1 = -56					; size = 4
_xadvance$2 = -52					; size = 4
_bitmap$3 = -48						; size = 4
_slot$4 = -44						; size = 4
_temp$5 = -40						; size = 4
_clazz$ = -36						; size = 4
_sbit$ = -32						; size = 4
_face$ = -24						; size = 4
_memory$ = -16						; size = 4
_family$ = -12						; size = 4
_gnode$ = -8						; size = 4
_error$ = -4						; size = 4
_snode$ = 8						; size = 4
_manager$ = 12						; size = 4
_gindex$ = 16						; size = 4
_asize$ = 20						; size = 4
_ftc_snode_load PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcsbits.c
; Line 106
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 108
	mov	eax, DWORD PTR _snode$[ebp]
	mov	DWORD PTR _gnode$[ebp], eax
; Line 109
	mov	ecx, DWORD PTR _gnode$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _family$[ebp], edx
; Line 110
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 116
	mov	edx, DWORD PTR _gnode$[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	sub	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _snode$[ebp]
	cmp	eax, DWORD PTR [ecx+28]
	jb	SHORT $LN16@ftc_snode_
; Line 118
	push	OFFSET $SG8775
	call	_FT_Message
	add	esp, 4
; Line 119
	push	OFFSET $SG8776
	push	119					; 00000077H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN17@ftc_snode_
$LN16@ftc_snode_:
; Line 122
	mov	edx, DWORD PTR _gnode$[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	sub	eax, DWORD PTR [edx+24]
	shl	eax, 4
	mov	ecx, DWORD PTR _snode$[ebp]
	lea	edx, DWORD PTR [ecx+eax+32]
	mov	DWORD PTR _sbit$[ebp], edx
; Line 123
	mov	eax, DWORD PTR _family$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _clazz$[ebp], ecx
; Line 125
	mov	edx, DWORD PTR _sbit$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 127
	mov	esi, esp
	lea	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _manager$[ebp]
	push	ecx
	mov	edx, DWORD PTR _gindex$[ebp]
	push	edx
	mov	eax, DWORD PTR _family$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clazz$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 128
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@ftc_snode_
; Line 129
	jmp	$BadGlyph$24
$LN15@ftc_snode_:
; Line 133
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _slot$4[ebp], ecx
; Line 134
	mov	edx, DWORD PTR _slot$4[ebp]
	add	edx, 76					; 0000004cH
	mov	DWORD PTR _bitmap$3[ebp], edx
; Line 138
	mov	eax, DWORD PTR _slot$4[ebp]
	cmp	DWORD PTR [eax+72], 1651078259		; 62697473H
	je	SHORT $LN14@ftc_snode_
$LN13@ftc_snode_:
; Line 141
	mov	ecx, 4
	imul	edx, ecx, 17
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN12@ftc_snode_
	push	OFFSET $SG8790
	call	_FT_Message
	add	esp, 4
$LN12@ftc_snode_:
	xor	eax, eax
	jne	SHORT $LN13@ftc_snode_
; Line 142
	jmp	$BadGlyph$24
$LN14@ftc_snode_:
; Line 153
	mov	ecx, DWORD PTR _slot$4[ebp]
	mov	edx, DWORD PTR [ecx+64]
	add	edx, 32					; 00000020H
	sar	edx, 6
	mov	DWORD PTR _xadvance$2[ebp], edx
; Line 154
	mov	eax, DWORD PTR _slot$4[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 32					; 00000020H
	sar	ecx, 6
	mov	DWORD PTR _yadvance$1[ebp], ecx
; Line 162
	mov	edx, DWORD PTR _bitmap$3[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _temp$5[ebp], eax
	mov	ecx, DWORD PTR _bitmap$3[ebp]
	mov	edx, DWORD PTR _temp$5[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN7@ftc_snode_
	mov	eax, DWORD PTR _bitmap$3[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR _temp$5[ebp], ecx
	mov	edx, DWORD PTR _bitmap$3[ebp]
	mov	eax, DWORD PTR _temp$5[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN7@ftc_snode_
	mov	ecx, DWORD PTR _bitmap$3[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	mov	DWORD PTR _temp$5[ebp], edx
	mov	eax, DWORD PTR _bitmap$3[ebp]
	mov	ecx, DWORD PTR _temp$5[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN7@ftc_snode_
	mov	edx, DWORD PTR _slot$4[ebp]
	movsx	eax, BYTE PTR [edx+100]
	mov	DWORD PTR _temp$5[ebp], eax
	mov	ecx, DWORD PTR _slot$4[ebp]
	mov	edx, DWORD PTR _temp$5[ebp]
	cmp	edx, DWORD PTR [ecx+100]
	jne	SHORT $LN7@ftc_snode_
	mov	eax, DWORD PTR _slot$4[ebp]
	movsx	ecx, BYTE PTR [eax+104]
	mov	DWORD PTR _temp$5[ebp], ecx
	mov	edx, DWORD PTR _slot$4[ebp]
	mov	eax, DWORD PTR _temp$5[ebp]
	cmp	eax, DWORD PTR [edx+104]
	jne	SHORT $LN7@ftc_snode_
	movsx	ecx, BYTE PTR _xadvance$2[ebp]
	mov	DWORD PTR _temp$5[ebp], ecx
	mov	edx, DWORD PTR _temp$5[ebp]
	cmp	edx, DWORD PTR _xadvance$2[ebp]
	jne	SHORT $LN7@ftc_snode_
	movsx	eax, BYTE PTR _yadvance$1[ebp]
	mov	DWORD PTR _temp$5[ebp], eax
	mov	ecx, DWORD PTR _temp$5[ebp]
	cmp	ecx, DWORD PTR _yadvance$1[ebp]
	je	SHORT $LN9@ftc_snode_
$LN7@ftc_snode_:
; Line 165
	mov	edx, 4
	imul	eax, edx, 17
	cmp	DWORD PTR _ft_trace_levels[eax], 2
	jl	SHORT $LN6@ftc_snode_
	push	OFFSET $SG8818
	call	_FT_Message
	add	esp, 4
$LN6@ftc_snode_:
	xor	ecx, ecx
	jne	SHORT $LN7@ftc_snode_
; Line 166
	jmp	$BadGlyph$24
$LN9@ftc_snode_:
; Line 169
	mov	edx, DWORD PTR _sbit$[ebp]
	mov	eax, DWORD PTR _bitmap$3[ebp]
	mov	cl, BYTE PTR [eax+4]
	mov	BYTE PTR [edx], cl
; Line 170
	mov	edx, DWORD PTR _sbit$[ebp]
	mov	eax, DWORD PTR _bitmap$3[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx+1], cl
; Line 171
	mov	edx, DWORD PTR _bitmap$3[ebp]
	movsx	ax, BYTE PTR [edx+8]
	mov	ecx, DWORD PTR _sbit$[ebp]
	mov	WORD PTR [ecx+6], ax
; Line 172
	mov	edx, DWORD PTR _sbit$[ebp]
	mov	eax, DWORD PTR _slot$4[ebp]
	mov	cl, BYTE PTR [eax+100]
	mov	BYTE PTR [edx+2], cl
; Line 173
	mov	edx, DWORD PTR _sbit$[ebp]
	mov	eax, DWORD PTR _slot$4[ebp]
	mov	cl, BYTE PTR [eax+104]
	mov	BYTE PTR [edx+3], cl
; Line 174
	mov	edx, DWORD PTR _sbit$[ebp]
	mov	al, BYTE PTR _xadvance$2[ebp]
	mov	BYTE PTR [edx+8], al
; Line 175
	mov	ecx, DWORD PTR _sbit$[ebp]
	mov	dl, BYTE PTR _yadvance$1[ebp]
	mov	BYTE PTR [ecx+9], dl
; Line 176
	mov	eax, DWORD PTR _sbit$[ebp]
	mov	ecx, DWORD PTR _bitmap$3[ebp]
	mov	dl, BYTE PTR [ecx+18]
	mov	BYTE PTR [eax+4], dl
; Line 177
	mov	eax, DWORD PTR _bitmap$3[ebp]
	movzx	ecx, WORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _sbit$[ebp]
	mov	BYTE PTR [edx+5], cl
; Line 180
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitmap$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _sbit$[ebp]
	push	edx
	call	_ftc_sbit_copy_bitmap
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 183
	cmp	DWORD PTR _asize$[ebp], 0
	je	SHORT $LN3@ftc_snode_
; Line 184
	mov	eax, DWORD PTR _sbit$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	test	ecx, ecx
	jge	SHORT $LN19@ftc_snode_
	mov	edx, DWORD PTR _sbit$[ebp]
	movsx	eax, WORD PTR [edx+6]
	neg	eax
	mov	DWORD PTR tv199[ebp], eax
	jmp	SHORT $LN20@ftc_snode_
$LN19@ftc_snode_:
	mov	ecx, DWORD PTR _sbit$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	mov	DWORD PTR tv199[ebp], edx
$LN20@ftc_snode_:
	mov	eax, DWORD PTR _sbit$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	imul	ecx, DWORD PTR tv199[ebp]
	mov	edx, DWORD PTR _asize$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@ftc_snode_:
; Line 192
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@ftc_snode_
	mov	eax, DWORD PTR _error$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 64					; 00000040H
	je	SHORT $LN2@ftc_snode_
$BadGlyph$24:
; Line 195
	mov	ecx, DWORD PTR _sbit$[ebp]
	mov	BYTE PTR [ecx], 255			; 000000ffH
; Line 196
	mov	edx, DWORD PTR _sbit$[ebp]
	mov	BYTE PTR [edx+1], 0
; Line 197
	mov	eax, DWORD PTR _sbit$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 198
	mov	DWORD PTR _error$[ebp], 0
; Line 199
	cmp	DWORD PTR _asize$[ebp], 0
	je	SHORT $LN2@ftc_snode_
; Line 200
	mov	ecx, DWORD PTR _asize$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@ftc_snode_:
; Line 203
	mov	eax, DWORD PTR _error$[ebp]
$LN17@ftc_snode_:
; Line 204
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@ftc_snode_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@ftc_snode_:
	DD	1
	DD	$LN22@ftc_snode_
$LN22@ftc_snode_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN21@ftc_snode_
$LN21@ftc_snode_:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
_ftc_snode_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -20						; size = 4
_pitch$ = -16						; size = 4
_error$ = -8						; size = 4
_sbit$ = 8						; size = 4
_bitmap$ = 12						; size = 4
_memory$ = 16						; size = 4
_ftc_sbit_copy_bitmap PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcsbits.c
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 48
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pitch$[ebp], ecx
; Line 52
	cmp	DWORD PTR _pitch$[ebp], 0
	jge	SHORT $LN2@ftc_sbit_c
; Line 53
	mov	edx, DWORD PTR _pitch$[ebp]
	neg	edx
	mov	DWORD PTR _pitch$[ebp], edx
$LN2@ftc_sbit_c:
; Line 55
	mov	eax, DWORD PTR _bitmap$[ebp]
	mov	ecx, DWORD PTR _pitch$[ebp]
	imul	ecx, DWORD PTR [eax]
	mov	DWORD PTR _size$[ebp], ecx
; Line 57
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _sbit$[ebp]
	mov	DWORD PTR [edx+12], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ftc_sbit_c
; Line 58
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitmap$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _sbit$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ftc_sbit_c:
; Line 60
	mov	eax, DWORD PTR _error$[ebp]
; Line 61
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ftc_sbit_c
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@ftc_sbit_c:
	DD	1
	DD	$LN6@ftc_sbit_c
$LN6@ftc_sbit_c:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@ftc_sbit_c
$LN5@ftc_sbit_c:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ftc_sbit_copy_bitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -9						; size = 1
_face_id$ = -8						; size = 4
_node$ = -4						; size = 4
_ftcnode$ = 8						; size = 4
_ftcface_id$ = 12					; size = 4
_cache$ = 16						; size = 4
_list_changed$ = 20					; size = 4
_ftc_cmap_node_remove_faceid PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccmap.c
; Line 184
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 185
	mov	eax, DWORD PTR _ftcnode$[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 186
	mov	ecx, DWORD PTR _ftcface_id$[ebp]
	mov	DWORD PTR _face_id$[ebp], ecx
; Line 187
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR _cache$[ebp], edx
; Line 190
	cmp	DWORD PTR _list_changed$[ebp], 0
	je	SHORT $LN1@ftc_cmap_n
; Line 191
	mov	eax, DWORD PTR _list_changed$[ebp]
	mov	BYTE PTR [eax], 0
$LN1@ftc_cmap_n:
; Line 192
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _face_id$[ebp]
	jne	SHORT $LN4@ftc_cmap_n
	mov	BYTE PTR tv67[ebp], 1
	jmp	SHORT $LN5@ftc_cmap_n
$LN4@ftc_cmap_n:
	mov	BYTE PTR tv67[ebp], 0
$LN5@ftc_cmap_n:
	mov	al, BYTE PTR tv67[ebp]
; Line 193
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_cmap_node_remove_faceid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -13						; size = 1
_offset$1 = -12						; size = 4
_query$ = -8						; size = 4
_node$ = -4						; size = 4
_ftcnode$ = 8						; size = 4
_ftcquery$ = 12						; size = 4
_cache$ = 16						; size = 4
_list_changed$ = 20					; size = 4
_ftc_cmap_node_compare PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccmap.c
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 159
	mov	eax, DWORD PTR _ftcnode$[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 160
	mov	ecx, DWORD PTR _ftcquery$[ebp]
	mov	DWORD PTR _query$[ebp], ecx
; Line 161
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR _cache$[ebp], edx
; Line 164
	cmp	DWORD PTR _list_changed$[ebp], 0
	je	SHORT $LN2@ftc_cmap_n
; Line 165
	mov	eax, DWORD PTR _list_changed$[ebp]
	mov	BYTE PTR [eax], 0
$LN2@ftc_cmap_n:
; Line 167
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _query$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN1@ftc_cmap_n
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _query$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN1@ftc_cmap_n
; Line 169
	mov	ecx, DWORD PTR _query$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _offset$1[ebp], eax
; Line 172
	cmp	DWORD PTR _offset$1[ebp], 128		; 00000080H
	jae	SHORT $LN5@ftc_cmap_n
	mov	BYTE PTR tv75[ebp], 1
	jmp	SHORT $LN6@ftc_cmap_n
$LN5@ftc_cmap_n:
	mov	BYTE PTR tv75[ebp], 0
$LN6@ftc_cmap_n:
	mov	al, BYTE PTR tv75[ebp]
	jmp	SHORT $LN3@ftc_cmap_n
$LN1@ftc_cmap_n:
; Line 175
	xor	al, al
$LN3@ftc_cmap_n:
; Line 176
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_cmap_node_compare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cnode$ = 8						; size = 4
_cache$ = 12						; size = 4
_ftc_cmap_node_weight PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccmap.c
; Line 144
	push	ebp
	mov	ebp, esp
; Line 145
	mov	eax, DWORD PTR _cnode$[ebp]
	mov	DWORD PTR _cnode$[ebp], eax
; Line 146
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR _cache$[ebp], ecx
; Line 148
	mov	eax, 20					; 00000014H
; Line 149
	pop	ebp
	ret	0
_ftc_cmap_node_weight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nn$ = -32						; size = 4
_node$ = -28						; size = 4
_memory$ = -24						; size = 4
_error$ = -16						; size = 4
_query$ = -8						; size = 4
_anode$ = -4						; size = 4
_ftcanode$ = 8						; size = 4
_ftcquery$ = 12						; size = 4
_cache$ = 16						; size = 4
_ftc_cmap_node_new PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccmap.c
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 116
	mov	eax, DWORD PTR _ftcanode$[ebp]
	mov	DWORD PTR _anode$[ebp], eax
; Line 117
	mov	ecx, DWORD PTR _ftcquery$[ebp]
	mov	DWORD PTR _query$[ebp], ecx
; Line 119
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _memory$[ebp], eax
; Line 120
	mov	DWORD PTR _node$[ebp], 0
; Line 124
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	288					; 00000120H
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _node$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN4@ftc_cmap_n
; Line 126
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _query$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+20], edx
; Line 127
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _query$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+24], edx
; Line 129
	mov	eax, DWORD PTR _query$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 7
	shl	ecx, 7
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 131
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN3@ftc_cmap_n
$LN2@ftc_cmap_n:
	mov	eax, DWORD PTR _nn$[ebp]
	add	eax, 1
	mov	DWORD PTR _nn$[ebp], eax
$LN3@ftc_cmap_n:
	cmp	DWORD PTR _nn$[ebp], 128		; 00000080H
	jae	SHORT $LN4@ftc_cmap_n
; Line 132
	mov	ecx, 65535				; 0000ffffH
	mov	edx, DWORD PTR _nn$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	WORD PTR [eax+edx*2+32], cx
	jmp	SHORT $LN2@ftc_cmap_n
$LN4@ftc_cmap_n:
; Line 135
	mov	ecx, DWORD PTR _anode$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 136
	mov	eax, DWORD PTR _error$[ebp]
; Line 137
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ftc_cmap_n
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@ftc_cmap_n:
	DD	1
	DD	$LN8@ftc_cmap_n
$LN8@ftc_cmap_n:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN7@ftc_cmap_n
$LN7@ftc_cmap_n:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ftc_cmap_node_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_node$ = -4						; size = 4
_ftcnode$ = 8						; size = 4
_cache$ = 12						; size = 4
_ftc_cmap_node_free PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccmap.c
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 102
	mov	eax, DWORD PTR _ftcnode$[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 103
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _memory$[ebp], edx
$LN3@ftc_cmap_n:
; Line 106
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _node$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@ftc_cmap_n
; Line 107
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_cmap_node_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_manager$1 = -4						; size = 4
_cache$ = 8						; size = 4
_hash$ = 12						; size = 4
_node$ = 16						; size = 4
_ftc_cache_add PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 419
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 420
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 421
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _cache$[ebp]
	mov	cx, WORD PTR [eax+56]
	mov	WORD PTR [edx+16], cx
; Line 422
	xor	edx, edx
	mov	eax, DWORD PTR _node$[ebp]
	mov	WORD PTR [eax+18], dx
; Line 424
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	call	_ftc_node_hash_link
	add	esp, 8
; Line 425
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	call	_ftc_node_mru_link
	add	esp, 8
; Line 428
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _manager$1[ebp], ecx
; Line 431
	mov	esi, esp
	mov	edx, DWORD PTR _cache$[ebp]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _manager$1[ebp]
	add	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _manager$1[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 433
	mov	eax, DWORD PTR _manager$1[ebp]
	mov	ecx, DWORD PTR _manager$1[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+12]
	jb	SHORT $LN2@ftc_cache_
; Line 435
	mov	eax, DWORD PTR _node$[ebp]
	mov	cx, WORD PTR [eax+18]
	add	cx, 1
	mov	edx, DWORD PTR _node$[ebp]
	mov	WORD PTR [edx+18], cx
; Line 436
	mov	eax, DWORD PTR _manager$1[ebp]
	push	eax
	call	_FTC_Manager_Compress
	add	esp, 4
; Line 437
	mov	ecx, DWORD PTR _node$[ebp]
	mov	dx, WORD PTR [ecx+18]
	sub	dx, 1
	mov	eax, DWORD PTR _node$[ebp]
	mov	WORD PTR [eax+18], dx
$LN2@ftc_cache_:
; Line 440
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_cache_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_node$1 = -24						; size = 4
_next$2 = -20						; size = 4
_pnode$3 = -16						; size = 4
_count$4 = -12						; size = 4
_i$5 = -8						; size = 4
_manager$6 = -4						; size = 4
_cache$ = 8						; size = 4
_FTC_Cache_Clear PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 352
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 353
	cmp	DWORD PTR _cache$[ebp], 0
	je	$LN7@FTC_Cache_
	mov	eax, DWORD PTR _cache$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN7@FTC_Cache_
; Line 355
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _manager$6[ebp], edx
; Line 360
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _count$4[ebp], ecx
; Line 362
	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN5@FTC_Cache_
$LN4@FTC_Cache_:
	mov	edx, DWORD PTR _i$5[ebp]
	add	edx, 1
	mov	DWORD PTR _i$5[ebp], edx
$LN5@FTC_Cache_:
	mov	eax, DWORD PTR _i$5[ebp]
	cmp	eax, DWORD PTR _count$4[ebp]
	jae	$LN3@FTC_Cache_
; Line 364
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _i$5[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _pnode$3[ebp], ecx
	mov	edx, DWORD PTR _pnode$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _node$1[ebp], eax
$LN2@FTC_Cache_:
; Line 367
	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN1@FTC_Cache_
; Line 369
	mov	ecx, DWORD PTR _node$1[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _next$2[ebp], edx
; Line 370
	mov	eax, DWORD PTR _node$1[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 373
	mov	ecx, DWORD PTR _manager$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$1[ebp]
	push	edx
	call	_ftc_node_mru_unlink
	add	esp, 8
; Line 376
	mov	esi, esp
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _manager$6[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, eax
	mov	eax, DWORD PTR _manager$6[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 378
	mov	esi, esp
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$1[ebp]
	push	edx
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 379
	mov	edx, DWORD PTR _next$2[ebp]
	mov	DWORD PTR _node$1[ebp], edx
; Line 380
	jmp	SHORT $LN2@FTC_Cache_
$LN1@FTC_Cache_:
; Line 381
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$5[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
; Line 382
	jmp	$LN4@FTC_Cache_
$LN3@FTC_Cache_:
; Line 383
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	call	_ftc_cache_resize
	add	esp, 4
$LN7@FTC_Cache_:
; Line 385
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_Cache_Clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv78 = -8						; size = 4
_pnode$ = -4						; size = 4
_node$ = 8						; size = 4
_cache$ = 12						; size = 4
_ftc_node_hash_link PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 259
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 260
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _cache$[ebp]
	cmp	edx, DWORD PTR [eax]
	jae	SHORT $LN3@ftc_node_h
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+edx+1]
	mov	ecx, DWORD PTR _node$[ebp]
	and	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN4@ftc_node_h
$LN3@ftc_node_h:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	and	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv78[ebp], ecx
$LN4@ftc_node_h:
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR tv78[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _pnode$[ebp], edx
; Line 263
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
; Line 264
	mov	eax, DWORD PTR _pnode$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 266
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 267
	mov	edx, DWORD PTR _cache$[ebp]
	push	edx
	call	_ftc_cache_resize
	add	esp, 4
; Line 268
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_node_hash_link ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv78 = -12						; size = 4
_node$1 = -8						; size = 4
_pnode$ = -4						; size = 4
_node0$ = 8						; size = 4
_cache$ = 12						; size = 4
_ftc_node_hash_unlink PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 226
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 227
	mov	eax, DWORD PTR _node0$[ebp]
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _cache$[ebp]
	cmp	edx, DWORD PTR [eax]
	jae	SHORT $LN11@ftc_node_h
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+edx+1]
	mov	ecx, DWORD PTR _node0$[ebp]
	and	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN12@ftc_node_h
$LN11@ftc_node_h:
	mov	edx, DWORD PTR _node0$[ebp]
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	and	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv78[ebp], ecx
$LN12@ftc_node_h:
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR tv78[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _pnode$[ebp], edx
$LN8@ftc_node_h:
; Line 232
	mov	eax, DWORD PTR _pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _node$1[ebp], ecx
; Line 235
	cmp	DWORD PTR _node$1[ebp], 0
	jne	SHORT $LN6@ftc_node_h
$LN5@ftc_node_h:
; Line 237
	mov	edx, 4
	imul	eax, edx, 17
	cmp	DWORD PTR _ft_trace_levels[eax], 0
	jl	SHORT $LN4@ftc_node_h
	push	OFFSET $SG8224
	call	_FT_Message
	add	esp, 4
$LN4@ftc_node_h:
	xor	ecx, ecx
	jne	SHORT $LN5@ftc_node_h
; Line 238
	jmp	SHORT $LN9@ftc_node_h
$LN6@ftc_node_h:
; Line 241
	mov	edx, DWORD PTR _node$1[ebp]
	cmp	edx, DWORD PTR _node0$[ebp]
	jne	SHORT $LN1@ftc_node_h
; Line 242
	jmp	SHORT $LN7@ftc_node_h
$LN1@ftc_node_h:
; Line 244
	mov	eax, DWORD PTR _pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	DWORD PTR _pnode$[ebp], ecx
; Line 245
	jmp	SHORT $LN8@ftc_node_h
$LN7@ftc_node_h:
; Line 247
	mov	edx, DWORD PTR _pnode$[ebp]
	mov	eax, DWORD PTR _node0$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx
; Line 248
	mov	edx, DWORD PTR _node0$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 250
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 251
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	call	_ftc_cache_resize
	add	esp, 4
$LN9@ftc_node_h:
; Line 252
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_node_hash_unlink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$1 = -60						; size = 4
_memory$2 = -52						; size = 4
_pold$3 = -48						; size = 4
_old_index$4 = -44					; size = 4
_error$5 = -36						; size = 4
_memory$6 = -28						; size = 4
_new_list$7 = -24					; size = 4
_count$8 = -20						; size = 4
_mask$9 = -16						; size = 4
_p$10 = -12						; size = 4
_pnode$11 = -8						; size = 4
_node$12 = -4						; size = 4
_cache$ = 8						; size = 4
_ftc_cache_resize PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN21@ftc_cache_:
; Line 118
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$10[ebp], ecx
; Line 119
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _mask$9[ebp], eax
; Line 120
	mov	ecx, DWORD PTR _p$10[ebp]
	mov	edx, DWORD PTR _mask$9[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	mov	DWORD PTR _count$8[ebp], eax
; Line 124
	mov	ecx, DWORD PTR _cache$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jge	$LN19@ftc_cache_
; Line 126
	mov	DWORD PTR _new_list$7[ebp], 0
; Line 132
	mov	edx, DWORD PTR _p$10[ebp]
	cmp	edx, DWORD PTR _mask$9[ebp]
	jb	SHORT $LN18@ftc_cache_
; Line 134
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _memory$6[ebp], ecx
; Line 140
	lea	edx, DWORD PTR _error$5[ebp]
	push	edx
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _mask$9[ebp]
	lea	eax, DWORD PTR [edx*4+4]
	push	eax
	mov	ecx, DWORD PTR _mask$9[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	push	edx
	push	4
	mov	eax, DWORD PTR _memory$6[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$5[ebp], 0
	je	SHORT $LN18@ftc_cache_
; Line 141
	jmp	$LN22@ftc_cache_
$LN18@ftc_cache_:
; Line 145
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _p$10[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _pnode$11[ebp], edx
$LN16@ftc_cache_:
; Line 149
	mov	eax, DWORD PTR _pnode$11[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _node$12[ebp], ecx
; Line 150
	cmp	DWORD PTR _node$12[ebp], 0
	jne	SHORT $LN14@ftc_cache_
; Line 151
	jmp	SHORT $LN15@ftc_cache_
$LN14@ftc_cache_:
; Line 153
	mov	edx, DWORD PTR _mask$9[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _node$12[ebp]
	and	edx, DWORD PTR [eax+12]
	je	SHORT $LN13@ftc_cache_
; Line 155
	mov	ecx, DWORD PTR _pnode$11[ebp]
	mov	edx, DWORD PTR _node$12[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
; Line 156
	mov	ecx, DWORD PTR _node$12[ebp]
	mov	edx, DWORD PTR _new_list$7[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 157
	mov	eax, DWORD PTR _node$12[ebp]
	mov	DWORD PTR _new_list$7[ebp], eax
; Line 159
	jmp	SHORT $LN12@ftc_cache_
$LN13@ftc_cache_:
; Line 160
	mov	ecx, DWORD PTR _node$12[ebp]
	add	ecx, 8
	mov	DWORD PTR _pnode$11[ebp], ecx
$LN12@ftc_cache_:
; Line 161
	jmp	SHORT $LN16@ftc_cache_
$LN15@ftc_cache_:
; Line 163
	mov	edx, DWORD PTR _p$10[ebp]
	add	edx, DWORD PTR _mask$9[ebp]
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _new_list$7[ebp]
	mov	DWORD PTR [ecx+edx*4+4], eax
; Line 165
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 2
	mov	eax, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 167
	mov	ecx, DWORD PTR _p$10[ebp]
	cmp	ecx, DWORD PTR _mask$9[ebp]
	jb	SHORT $LN11@ftc_cache_
; Line 169
	mov	edx, DWORD PTR _mask$9[ebp]
	lea	eax, DWORD PTR [edx+edx+1]
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 170
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [edx], 0
; Line 172
	jmp	SHORT $LN10@ftc_cache_
$LN11@ftc_cache_:
; Line 173
	mov	eax, DWORD PTR _p$10[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx], eax
$LN10@ftc_cache_:
; Line 177
	jmp	$LN9@ftc_cache_
$LN19@ftc_cache_:
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _count$8[ebp]
	jle	$LN8@ftc_cache_
; Line 179
	mov	ecx, DWORD PTR _p$10[ebp]
	add	ecx, DWORD PTR _mask$9[ebp]
	mov	DWORD PTR _old_index$4[ebp], ecx
; Line 183
	mov	edx, DWORD PTR _old_index$4[ebp]
	add	edx, 1
	cmp	edx, 8
	ja	SHORT $LN7@ftc_cache_
; Line 184
	jmp	$LN22@ftc_cache_
$LN7@ftc_cache_:
; Line 186
	cmp	DWORD PTR _p$10[ebp], 0
	jne	SHORT $LN6@ftc_cache_
; Line 188
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _memory$2[ebp], ecx
; Line 194
	lea	edx, DWORD PTR _error$1[ebp]
	push	edx
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _mask$9[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _mask$9[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	push	4
	mov	edx, DWORD PTR _memory$2[ebp]
	push	edx
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx+12], eax
	cmp	DWORD PTR _error$1[ebp], 0
	je	SHORT $LN5@ftc_cache_
; Line 195
	jmp	$LN22@ftc_cache_
$LN5@ftc_cache_:
; Line 197
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 1
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 198
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _p$10[ebp], eax
; Line 200
	jmp	SHORT $LN4@ftc_cache_
$LN6@ftc_cache_:
; Line 201
	mov	ecx, DWORD PTR _p$10[ebp]
	sub	ecx, 1
	mov	DWORD PTR _p$10[ebp], ecx
$LN4@ftc_cache_:
; Line 203
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _p$10[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _pnode$11[ebp], edx
$LN3@ftc_cache_:
; Line 204
	mov	eax, DWORD PTR _pnode$11[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@ftc_cache_
; Line 205
	mov	ecx, DWORD PTR _pnode$11[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 8
	mov	DWORD PTR _pnode$11[ebp], edx
	jmp	SHORT $LN3@ftc_cache_
$LN2@ftc_cache_:
; Line 207
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _old_index$4[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pold$3[ebp], eax
; Line 208
	mov	ecx, DWORD PTR _pnode$11[ebp]
	mov	edx, DWORD PTR _pold$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
; Line 209
	mov	ecx, DWORD PTR _pold$3[ebp]
	mov	DWORD PTR [ecx], 0
; Line 211
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 2
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 212
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR _p$10[ebp]
	mov	DWORD PTR [edx], eax
; Line 216
	jmp	SHORT $LN9@ftc_cache_
$LN8@ftc_cache_:
; Line 217
	jmp	SHORT $LN22@ftc_cache_
$LN9@ftc_cache_:
; Line 218
	jmp	$LN21@ftc_cache_
$LN22@ftc_cache_:
; Line 219
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@ftc_cache_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@ftc_cache_:
	DD	2
	DD	$LN26@ftc_cache_
$LN26@ftc_cache_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN24@ftc_cache_
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN25@ftc_cache_
$LN25@ftc_cache_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN24@ftc_cache_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ftc_cache_resize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nl$ = -4						; size = 4
_node$ = 8						; size = 4
_manager$ = 12						; size = 4
_ftc_node_mru_unlink PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 65
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 66
	mov	eax, DWORD PTR _manager$[ebp]
	add	eax, 8
	mov	DWORD PTR _nl$[ebp], eax
; Line 70
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nl$[ebp]
	push	edx
	call	_FTC_MruNode_Remove
	add	esp, 8
; Line 71
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	edx, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 72
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_node_mru_unlink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nl$ = -4						; size = 4
_node$ = 8						; size = 4
_manager$ = 12						; size = 4
_ftc_node_mru_link PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 51
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 52
	mov	eax, DWORD PTR _manager$[ebp]
	add	eax, 8
	mov	DWORD PTR _nl$[ebp], eax
; Line 56
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nl$[ebp]
	push	edx
	call	_FTC_MruNode_Prepend
	add	esp, 8
; Line 57
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 58
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_node_mru_link ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -9						; size = 1
_face_id$ = -8						; size = 4
_node$ = -4						; size = 4
_ftcnode$ = 8						; size = 4
_ftcface_id$ = 12					; size = 4
_ftc_face_node_compare PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 284
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 285
	mov	eax, DWORD PTR _ftcnode$[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _ftcface_id$[ebp]
	mov	DWORD PTR _face_id$[ebp], ecx
; Line 289
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _face_id$[ebp]
	jne	SHORT $LN3@ftc_face_n
	mov	BYTE PTR tv66[ebp], 1
	jmp	SHORT $LN4@ftc_face_n
$LN3@ftc_face_n:
	mov	BYTE PTR tv66[ebp], 0
$LN4@ftc_face_n:
	mov	al, BYTE PTR tv66[ebp]
; Line 290
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_face_node_compare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_manager$ = -8						; size = 4
_node$ = -4						; size = 4
_ftcnode$ = 8						; size = 4
_ftcmanager$ = 12					; size = 4
_ftc_face_node_done PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 263
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 264
	mov	eax, DWORD PTR _ftcnode$[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 265
	mov	ecx, DWORD PTR _ftcmanager$[ebp]
	mov	DWORD PTR _manager$[ebp], ecx
; Line 272
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET _ftc_size_node_compare_faceid
	mov	ecx, DWORD PTR _manager$[ebp]
	add	ecx, 132				; 00000084H
	push	ecx
	call	_FTC_MruList_RemoveSelection
	add	esp, 12					; 0000000cH
; Line 275
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_FT_Done_Face
	add	esp, 4
; Line 276
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 277
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 278
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_face_node_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -16						; size = 4
_manager$ = -12						; size = 4
_face_id$ = -8						; size = 4
_node$ = -4						; size = 4
_ftcnode$ = 8						; size = 4
_ftcface_id$ = 12					; size = 4
_ftcmanager$ = 16					; size = 4
_ftc_face_node_init PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 236
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 237
	mov	eax, DWORD PTR _ftcnode$[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 238
	mov	ecx, DWORD PTR _ftcface_id$[ebp]
	mov	DWORD PTR _face_id$[ebp], ecx
; Line 239
	mov	edx, DWORD PTR _ftcmanager$[ebp]
	mov	DWORD PTR _manager$[ebp], edx
; Line 243
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _face_id$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 248
	mov	edx, DWORD PTR _node$[ebp]
	add	edx, 12					; 0000000cH
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	mov	edx, DWORD PTR _manager$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _face_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _manager$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 249
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@ftc_face_n
; Line 252
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+88], 0
	je	SHORT $LN2@ftc_face_n
; Line 253
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_FT_Done_Size
	add	esp, 4
$LN2@ftc_face_n:
; Line 256
	mov	eax, DWORD PTR _error$[ebp]
; Line 257
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_face_node_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -9						; size = 1
_face_id$ = -8						; size = 4
_node$ = -4						; size = 4
_ftcnode$ = 8						; size = 4
_ftcface_id$ = 12					; size = 4
_ftc_size_node_compare_faceid PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 169
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 170
	mov	eax, DWORD PTR _ftcnode$[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 171
	mov	ecx, DWORD PTR _ftcface_id$[ebp]
	mov	DWORD PTR _face_id$[ebp], ecx
; Line 174
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR _face_id$[ebp]
	jne	SHORT $LN3@ftc_size_n
	mov	BYTE PTR tv66[ebp], 1
	jmp	SHORT $LN4@ftc_size_n
$LN3@ftc_size_n:
	mov	BYTE PTR tv66[ebp], 0
$LN4@ftc_size_n:
	mov	al, BYTE PTR tv66[ebp]
; Line 175
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_size_node_compare_faceid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_manager$ = -12						; size = 4
_scaler$ = -8						; size = 4
_node$ = -4						; size = 4
_ftcnode$ = 8						; size = 4
_ftcscaler$ = 12					; size = 4
_ftcmanager$ = 16					; size = 4
_ftc_size_node_reset PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 140
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 141
	mov	eax, DWORD PTR _ftcnode$[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 142
	mov	ecx, DWORD PTR _ftcscaler$[ebp]
	mov	DWORD PTR _scaler$[ebp], ecx
; Line 143
	mov	edx, DWORD PTR _ftcmanager$[ebp]
	mov	DWORD PTR _manager$[ebp], edx
; Line 146
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_FT_Done_Size
	add	esp, 4
; Line 148
	mov	edx, 24					; 00000018H
	imul	eax, edx, 0
	add	eax, DWORD PTR _scaler$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 150
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _scaler$[ebp]
	push	edx
	mov	eax, DWORD PTR _manager$[ebp]
	push	eax
	call	_ftc_scaler_lookup_size
	add	esp, 12					; 0000000cH
; Line 151
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_size_node_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_manager$ = -12						; size = 4
_scaler$ = -8						; size = 4
_node$ = -4						; size = 4
_ftcnode$ = 8						; size = 4
_ftcscaler$ = 12					; size = 4
_ftcmanager$ = 16					; size = 4
_ftc_size_node_init PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 125
	mov	eax, DWORD PTR _ftcnode$[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 126
	mov	ecx, DWORD PTR _ftcscaler$[ebp]
	mov	DWORD PTR _scaler$[ebp], ecx
; Line 127
	mov	edx, DWORD PTR _ftcmanager$[ebp]
	mov	DWORD PTR _manager$[ebp], edx
; Line 130
	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx
; Line 132
	mov	edx, DWORD PTR _node$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _scaler$[ebp]
	push	eax
	mov	ecx, DWORD PTR _manager$[ebp]
	push	ecx
	call	_ftc_scaler_lookup_size
	add	esp, 12					; 0000000cH
; Line 133
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_size_node_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv78 = -20						; size = 4
tv79 = -16						; size = 4
_scaler0$ = -12						; size = 4
_scaler$ = -8						; size = 4
_node$ = -4						; size = 4
_ftcnode$ = 8						; size = 4
_ftcscaler$ = 12					; size = 4
_ftc_size_node_compare PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 105
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 106
	mov	eax, DWORD PTR _ftcnode$[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 107
	mov	ecx, DWORD PTR _ftcscaler$[ebp]
	mov	DWORD PTR _scaler$[ebp], ecx
; Line 108
	mov	edx, DWORD PTR _node$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _scaler0$[ebp], edx
; Line 111
	mov	eax, DWORD PTR _scaler0$[ebp]
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	$LN2@ftc_size_n
	mov	eax, DWORD PTR _scaler0$[ebp]
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	$LN2@ftc_size_n
	mov	eax, DWORD PTR _scaler0$[ebp]
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@ftc_size_n
	mov	eax, DWORD PTR _scaler0$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN7@ftc_size_n
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN8@ftc_size_n
$LN7@ftc_size_n:
	mov	DWORD PTR tv79[ebp], 0
$LN8@ftc_size_n:
	mov	ecx, DWORD PTR _scaler$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN5@ftc_size_n
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN6@ftc_size_n
$LN5@ftc_size_n:
	mov	DWORD PTR tv78[ebp], 0
$LN6@ftc_size_n:
	mov	edx, DWORD PTR tv79[ebp]
	cmp	edx, DWORD PTR tv78[ebp]
	jne	SHORT $LN2@ftc_size_n
	mov	eax, DWORD PTR _scaler0$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN1@ftc_size_n
	mov	ecx, DWORD PTR _scaler0$[ebp]
	mov	edx, DWORD PTR _scaler$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [edx+16]
	jne	SHORT $LN2@ftc_size_n
	mov	ecx, DWORD PTR _scaler0$[ebp]
	mov	edx, DWORD PTR _scaler$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+20]
	jne	SHORT $LN2@ftc_size_n
$LN1@ftc_size_n:
; Line 113
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_FT_Activate_Size
	add	esp, 4
; Line 114
	mov	al, 1
	jmp	SHORT $LN3@ftc_size_n
$LN2@ftc_size_n:
; Line 116
	xor	al, al
$LN3@ftc_size_n:
; Line 117
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_size_node_compare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -8						; size = 4
_node$ = -4						; size = 4
_ftcnode$ = 8						; size = 4
_data$ = 12						; size = 4
_ftc_size_node_done PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 91
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 92
	mov	eax, DWORD PTR _ftcnode$[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 93
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _size$[ebp], edx
; Line 94
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 97
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ftc_size_n
; Line 98
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_FT_Done_Size
	add	esp, 4
$LN2@ftc_size_n:
; Line 99
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_size_node_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -28						; size = 4
_size$ = -20						; size = 4
_face$ = -8						; size = 4
_manager$ = 8						; size = 4
_scaler$ = 12						; size = 4
_asize$ = 16						; size = 4
_ftc_scaler_lookup_size PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 46
	mov	DWORD PTR _size$[ebp], 0
; Line 50
	lea	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _manager$[ebp]
	push	eax
	call	_FTC_Manager_LookupFace
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 51
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@ftc_scaler
; Line 52
	jmp	$Exit$12
$LN5@ftc_scaler:
; Line 54
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	_FT_New_Size
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
; Line 55
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@ftc_scaler
; Line 56
	jmp	SHORT $Exit$12
$LN4@ftc_scaler:
; Line 58
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_FT_Activate_Size
	add	esp, 4
; Line 60
	mov	ecx, DWORD PTR _scaler$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN3@ftc_scaler
; Line 61
	mov	edx, DWORD PTR _scaler$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_FT_Set_Pixel_Sizes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 62
	jmp	SHORT $LN2@ftc_scaler
$LN3@ftc_scaler:
; Line 64
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _scaler$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _scaler$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	call	_FT_Set_Char_Size
	add	esp, 20					; 00000014H
	mov	DWORD PTR _error$[ebp], eax
$LN2@ftc_scaler:
; Line 65
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $Exit$12
; Line 67
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_FT_Done_Size
	add	esp, 4
; Line 68
	mov	DWORD PTR _size$[ebp], 0
$Exit$12:
; Line 72
	mov	edx, DWORD PTR _asize$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx], eax
; Line 73
	mov	eax, DWORD PTR _error$[ebp]
; Line 74
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ftc_scaler
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@ftc_scaler:
	DD	2
	DD	$LN10@ftc_scaler
$LN10@ftc_scaler:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@ftc_scaler
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@ftc_scaler
$LN9@ftc_scaler:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN8@ftc_scaler:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
_ftc_scaler_lookup_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cache$ = -4						; size = 4
_node$ = 8						; size = 4
_manager$ = 12						; size = 4
_ftc_node_destroy PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 275
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 288
	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax+16]
	mov	edx, DWORD PTR _manager$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+24]
	mov	DWORD PTR _cache$[ebp], eax
; Line 298
	mov	esi, esp
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	sub	ecx, eax
	mov	edx, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 301
	mov	eax, DWORD PTR _manager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	call	_ftc_node_mru_unlink
	add	esp, 8
; Line 304
	mov	edx, DWORD PTR _cache$[ebp]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	call	_ftc_node_hash_unlink
	add	esp, 8
; Line 307
	mov	esi, esp
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 315
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_node_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -4						; size = 4
_cache$ = 8						; size = 4
_ftc_cache_done PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 390
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 391
	mov	eax, DWORD PTR _cache$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN5@ftc_cache_
; Line 393
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _memory$1[ebp], edx
; Line 396
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	call	_FTC_Cache_Clear
	add	esp, 4
$LN3@ftc_cache_:
; Line 398
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx+12], 0
	xor	edx, edx
	jne	SHORT $LN3@ftc_cache_
; Line 399
	mov	eax, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 400
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 401
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 403
	mov	eax, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [eax+52], 0
$LN5@ftc_cache_:
; Line 405
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_cache_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_cache$ = 8						; size = 4
_ftc_cache_init PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 336
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 337
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 341
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [edx], 0
; Line 342
	mov	eax, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [eax+4], 7
; Line 343
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx+8], 16			; 00000010H
; Line 345
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	push	16					; 00000010H
	push	0
	push	4
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 346
	mov	eax, DWORD PTR _error$[ebp]
; Line 347
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ftc_cache_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@ftc_cache_:
	DD	1
	DD	$LN4@ftc_cache_
$LN4@ftc_cache_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@ftc_cache_
$LN3@ftc_cache_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_ftc_cache_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cache$ = -4						; size = 4
_ftccache$ = 8						; size = 4
_ftc_gcache_done PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcglyph.c
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 155
	mov	eax, DWORD PTR _ftccache$[ebp]
	mov	DWORD PTR _cache$[ebp], eax
; Line 158
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	call	_FTC_Cache_Done
	add	esp, 4
; Line 159
	mov	edx, DWORD PTR _cache$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_FTC_MruList_Done
	add	esp, 4
; Line 160
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_gcache_done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_clazz$1 = -12						; size = 4
_error$ = -8						; size = 4
_cache$ = -4						; size = 4
_ftccache$ = 8						; size = 4
_ftc_gcache_init PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcglyph.c
; Line 120
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 121
	mov	eax, DWORD PTR _ftccache$[ebp]
	mov	DWORD PTR _cache$[ebp], eax
; Line 125
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	call	_FTC_Cache_Init
	add	esp, 4
	mov	DWORD PTR _error$[ebp], eax
; Line 126
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@ftc_gcache
; Line 128
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _clazz$1[ebp], eax
; Line 134
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _clazz$1[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _cache$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_FTC_MruList_Init
	add	esp, 20					; 00000014H
$LN1@ftc_gcache:
; Line 137
	mov	eax, DWORD PTR _error$[ebp]
; Line 138
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_gcache_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -9						; size = 1
_gquery$ = -8						; size = 4
_gnode$ = -4						; size = 4
_ftcgnode$ = 8						; size = 4
_ftcgquery$ = 12					; size = 4
_cache$ = 16						; size = 4
_list_changed$ = 20					; size = 4
_ftc_gnode_compare PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcglyph.c
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 71
	mov	eax, DWORD PTR _ftcgnode$[ebp]
	mov	DWORD PTR _gnode$[ebp], eax
; Line 72
	mov	ecx, DWORD PTR _ftcgquery$[ebp]
	mov	DWORD PTR _gquery$[ebp], ecx
; Line 73
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR _cache$[ebp], edx
; Line 76
	cmp	DWORD PTR _list_changed$[ebp], 0
	je	SHORT $LN1@ftc_gnode_
; Line 77
	mov	eax, DWORD PTR _list_changed$[ebp]
	mov	BYTE PTR [eax], 0
$LN1@ftc_gnode_:
; Line 79
	mov	ecx, DWORD PTR _gnode$[ebp]
	mov	edx, DWORD PTR _gquery$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN4@ftc_gnode_
	mov	ecx, DWORD PTR _gnode$[ebp]
	mov	edx, DWORD PTR _gquery$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN4@ftc_gnode_
	mov	BYTE PTR tv71[ebp], 1
	jmp	SHORT $LN5@ftc_gnode_
$LN4@ftc_gnode_:
	mov	BYTE PTR tv71[ebp], 0
$LN5@ftc_gnode_:
	mov	al, BYTE PTR tv71[ebp]
; Line 80
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_gnode_compare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -53						; size = 1
__try_done$1 = -52					; size = 4
__try_count$2 = -48					; size = 4
__try_manager$3 = -44					; size = 4
_error$4 = -40						; size = 4
_size$5 = -32						; size = 4
_sbit$6 = -24						; size = 4
_result$ = -17						; size = 1
_gindex$ = -16						; size = 4
_gnode$ = -12						; size = 4
_gquery$ = -8						; size = 4
_snode$ = -4						; size = 4
_ftcsnode$ = 8						; size = 4
_ftcgquery$ = 12					; size = 4
_cache$ = 16						; size = 4
_list_changed$ = 20					; size = 4
_ftc_snode_compare PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcsbits.c
; Line 329
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 330
	mov	eax, DWORD PTR _ftcsnode$[ebp]
	mov	DWORD PTR _snode$[ebp], eax
; Line 331
	mov	ecx, DWORD PTR _ftcgquery$[ebp]
	mov	DWORD PTR _gquery$[ebp], ecx
; Line 332
	mov	edx, DWORD PTR _snode$[ebp]
	mov	DWORD PTR _gnode$[ebp], edx
; Line 333
	mov	eax, DWORD PTR _gquery$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _gindex$[ebp], ecx
; Line 337
	cmp	DWORD PTR _list_changed$[ebp], 0
	je	SHORT $LN14@ftc_snode_
; Line 338
	mov	edx, DWORD PTR _list_changed$[ebp]
	mov	BYTE PTR [edx], 0
$LN14@ftc_snode_:
; Line 340
	mov	eax, DWORD PTR _gnode$[ebp]
	mov	ecx, DWORD PTR _gquery$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN17@ftc_snode_
	mov	eax, DWORD PTR _gnode$[ebp]
	mov	ecx, DWORD PTR _gindex$[ebp]
	sub	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _snode$[ebp]
	cmp	ecx, DWORD PTR [edx+28]
	jae	SHORT $LN17@ftc_snode_
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN18@ftc_snode_
$LN17@ftc_snode_:
	mov	BYTE PTR tv73[ebp], 0
$LN18@ftc_snode_:
	mov	al, BYTE PTR tv73[ebp]
	mov	BYTE PTR _result$[ebp], al
; Line 341
	movzx	ecx, BYTE PTR _result$[ebp]
	test	ecx, ecx
	je	$LN13@ftc_snode_
; Line 344
	mov	edx, DWORD PTR _gnode$[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	sub	eax, DWORD PTR [edx+24]
	shl	eax, 4
	mov	ecx, DWORD PTR _snode$[ebp]
	lea	edx, DWORD PTR [ecx+eax+32]
	mov	DWORD PTR _sbit$6[ebp], edx
; Line 379
	mov	eax, DWORD PTR _sbit$6[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	$LN13@ftc_snode_
	mov	ecx, DWORD PTR _sbit$6[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 255				; 000000ffH
	jne	$LN13@ftc_snode_
; Line 385
	mov	eax, DWORD PTR _ftcsnode$[ebp]
	mov	cx, WORD PTR [eax+18]
	add	cx, 1
	mov	edx, DWORD PTR _ftcsnode$[ebp]
	mov	WORD PTR [edx+18], cx
; Line 388
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR __try_manager$3[ebp], ecx
	mov	DWORD PTR __try_count$2[ebp], 4
$LN11@ftc_snode_:
; Line 390
	lea	edx, DWORD PTR _size$5[ebp]
	push	edx
	mov	eax, DWORD PTR _gindex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _snode$[ebp]
	push	eax
	call	_ftc_snode_load
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$4[ebp], eax
; Line 392
	cmp	DWORD PTR _error$4[ebp], 0
	je	SHORT $LN8@ftc_snode_
	mov	ecx, DWORD PTR _error$4[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 64					; 00000040H
	je	SHORT $LN9@ftc_snode_
$LN8@ftc_snode_:
	jmp	SHORT $LN10@ftc_snode_
$LN9@ftc_snode_:
	mov	edx, DWORD PTR __try_count$2[ebp]
	push	edx
	mov	eax, DWORD PTR __try_manager$3[ebp]
	push	eax
	call	_FTC_Manager_FlushN
	add	esp, 8
	mov	DWORD PTR __try_done$1[ebp], eax
	cmp	DWORD PTR __try_done$1[ebp], 0
	jbe	SHORT $LN7@ftc_snode_
	cmp	DWORD PTR _list_changed$[ebp], 0
	je	SHORT $LN7@ftc_snode_
	mov	ecx, DWORD PTR _list_changed$[ebp]
	mov	BYTE PTR [ecx], 1
$LN7@ftc_snode_:
	cmp	DWORD PTR __try_done$1[ebp], 0
	jne	SHORT $LN6@ftc_snode_
	jmp	SHORT $LN10@ftc_snode_
$LN6@ftc_snode_:
	mov	edx, DWORD PTR __try_done$1[ebp]
	cmp	edx, DWORD PTR __try_count$2[ebp]
	jne	SHORT $LN5@ftc_snode_
	mov	eax, DWORD PTR __try_count$2[ebp]
	shl	eax, 1
	mov	DWORD PTR __try_count$2[ebp], eax
	mov	ecx, DWORD PTR __try_count$2[ebp]
	cmp	ecx, DWORD PTR __try_done$1[ebp]
	jb	SHORT $LN3@ftc_snode_
	mov	edx, DWORD PTR __try_manager$3[ebp]
	mov	eax, DWORD PTR __try_count$2[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jbe	SHORT $LN5@ftc_snode_
$LN3@ftc_snode_:
	mov	ecx, DWORD PTR __try_manager$3[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR __try_count$2[ebp], edx
$LN5@ftc_snode_:
	jmp	$LN11@ftc_snode_
$LN10@ftc_snode_:
; Line 394
	mov	eax, DWORD PTR _ftcsnode$[ebp]
	mov	cx, WORD PTR [eax+18]
	sub	cx, 1
	mov	edx, DWORD PTR _ftcsnode$[ebp]
	mov	WORD PTR [edx+18], cx
; Line 396
	cmp	DWORD PTR _error$4[ebp], 0
	je	SHORT $LN2@ftc_snode_
; Line 397
	mov	BYTE PTR _result$[ebp], 0
; Line 398
	jmp	SHORT $LN13@ftc_snode_
$LN2@ftc_snode_:
; Line 399
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _size$5[ebp]
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [ecx+16], edx
$LN13@ftc_snode_:
; Line 403
	mov	al, BYTE PTR _result$[ebp]
; Line 404
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@ftc_snode_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@ftc_snode_:
	DD	1
	DD	$LN20@ftc_snode_
$LN20@ftc_snode_:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN19@ftc_snode_
$LN19@ftc_snode_:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_ftc_snode_compare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -20						; size = 4
_pitch$ = -16						; size = 4
_sbit$ = -12						; size = 4
_count$ = -8						; size = 4
_snode$ = -4						; size = 4
_ftcsnode$ = 8						; size = 4
_cache$ = 12						; size = 4
_ftc_snode_weight PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcsbits.c
; Line 281
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 282
	mov	eax, DWORD PTR _ftcsnode$[ebp]
	mov	DWORD PTR _snode$[ebp], eax
; Line 283
	mov	ecx, DWORD PTR _snode$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _count$[ebp], edx
; Line 284
	mov	eax, DWORD PTR _snode$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _sbit$[ebp], eax
; Line 288
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR _cache$[ebp], ecx
$LN9@ftc_snode_:
; Line 291
	mov	edx, DWORD PTR _snode$[ebp]
	cmp	DWORD PTR [edx+28], 16			; 00000010H
	jbe	SHORT $LN8@ftc_snode_
	push	OFFSET $SG8893
	push	291					; 00000123H
	push	OFFSET $SG8894
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN8@ftc_snode_:
	xor	eax, eax
	jne	SHORT $LN9@ftc_snode_
; Line 294
	mov	DWORD PTR _size$[ebp], 288		; 00000120H
; Line 296
	jmp	SHORT $LN5@ftc_snode_
$LN4@ftc_snode_:
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _sbit$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _sbit$[ebp], edx
$LN5@ftc_snode_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@ftc_snode_
; Line 298
	mov	eax, DWORD PTR _sbit$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@ftc_snode_
; Line 300
	mov	ecx, DWORD PTR _sbit$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	mov	DWORD PTR _pitch$[ebp], edx
; Line 301
	cmp	DWORD PTR _pitch$[ebp], 0
	jge	SHORT $LN1@ftc_snode_
; Line 302
	mov	eax, DWORD PTR _pitch$[ebp]
	neg	eax
	mov	DWORD PTR _pitch$[ebp], eax
$LN1@ftc_snode_:
; Line 305
	mov	ecx, DWORD PTR _sbit$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	imul	edx, DWORD PTR _pitch$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], edx
$LN2@ftc_snode_:
; Line 307
	jmp	SHORT $LN4@ftc_snode_
$LN3@ftc_snode_:
; Line 309
	mov	eax, DWORD PTR _size$[ebp]
; Line 310
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_snode_weight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gquery$ = -8						; size = 4
_psnode$ = -4						; size = 4
_ftcpsnode$ = 8						; size = 4
_ftcgquery$ = 12					; size = 4
_cache$ = 16						; size = 4
_ftc_snode_new PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcsbits.c
; Line 269
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 270
	mov	eax, DWORD PTR _ftcpsnode$[ebp]
	mov	DWORD PTR _psnode$[ebp], eax
; Line 271
	mov	ecx, DWORD PTR _ftcgquery$[ebp]
	mov	DWORD PTR _gquery$[ebp], ecx
; Line 274
	mov	edx, DWORD PTR _cache$[ebp]
	push	edx
	mov	eax, DWORD PTR _gquery$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psnode$[ebp]
	push	ecx
	call	_FTC_SNode_New
	add	esp, 12					; 0000000cH
; Line 275
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_snode_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -16						; size = 4
_count$ = -12						; size = 4
_sbit$ = -8						; size = 4
_snode$ = -4						; size = 4
_ftcsnode$ = 8						; size = 4
_cache$ = 12						; size = 4
_ftc_snode_free PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcsbits.c
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 68
	mov	eax, DWORD PTR _ftcsnode$[ebp]
	mov	DWORD PTR _snode$[ebp], eax
; Line 69
	mov	ecx, DWORD PTR _snode$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _sbit$[ebp], ecx
; Line 70
	mov	edx, DWORD PTR _snode$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _count$[ebp], eax
; Line 71
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _memory$[ebp], edx
; Line 74
	jmp	SHORT $LN9@ftc_snode_
$LN8@ftc_snode_:
	mov	eax, DWORD PTR _sbit$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _sbit$[ebp], eax
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
$LN9@ftc_snode_:
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN7@ftc_snode_
$LN6@ftc_snode_:
; Line 75
	mov	edx, DWORD PTR _sbit$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	edx, DWORD PTR _sbit$[ebp]
	mov	DWORD PTR [edx+12], 0
	xor	eax, eax
	jne	SHORT $LN6@ftc_snode_
	jmp	SHORT $LN8@ftc_snode_
$LN7@ftc_snode_:
; Line 77
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	mov	edx, DWORD PTR _snode$[ebp]
	push	edx
	call	_FTC_GNode_Done
	add	esp, 8
$LN3@ftc_snode_:
; Line 79
	mov	eax, DWORD PTR _snode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _snode$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@ftc_snode_
; Line 80
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_snode_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -24						; size = 4
_outg$1 = -20						; size = 4
_bitg$2 = -16						; size = 4
_glyph$ = -12						; size = 4
_size$ = -8						; size = 4
_inode$ = -4						; size = 4
_ftcinode$ = 8						; size = 4
_ftccache$ = 12						; size = 4
_ftc_inode_weight PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcimage.c
; Line 109
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 110
	mov	eax, DWORD PTR _ftcinode$[ebp]
	mov	DWORD PTR _inode$[ebp], eax
; Line 111
	mov	DWORD PTR _size$[ebp], 0
; Line 112
	mov	ecx, DWORD PTR _inode$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _glyph$[ebp], edx
; Line 114
	mov	eax, DWORD PTR _ftccache$[ebp]
	mov	DWORD PTR _ftccache$[ebp], eax
; Line 117
	mov	ecx, DWORD PTR _glyph$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv66[ebp], edx
	cmp	DWORD PTR tv66[ebp], 1651078259		; 62697473H
	je	SHORT $LN3@ftc_inode_
	cmp	DWORD PTR tv66[ebp], 1869968492		; 6f75746cH
	je	SHORT $LN2@ftc_inode_
	jmp	SHORT $LN4@ftc_inode_
$LN3@ftc_inode_:
; Line 124
	mov	eax, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR _bitg$2[ebp], eax
; Line 126
	mov	ecx, DWORD PTR _bitg$2[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_labs
	add	esp, 4
	mov	ecx, DWORD PTR _bitg$2[ebp]
	imul	eax, DWORD PTR [ecx+28]
	add	eax, 52					; 00000034H
	mov	DWORD PTR _size$[ebp], eax
; Line 128
	jmp	SHORT $LN4@ftc_inode_
$LN2@ftc_inode_:
; Line 135
	mov	edx, DWORD PTR _glyph$[ebp]
	mov	DWORD PTR _outg$1[ebp], edx
; Line 139
	mov	eax, DWORD PTR _outg$1[ebp]
	movsx	ecx, WORD PTR [eax+22]
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _outg$1[ebp]
	movsx	ecx, WORD PTR [eax+20]
	lea	edx, DWORD PTR [edx+ecx*2+40]
	mov	DWORD PTR _size$[ebp], edx
$LN4@ftc_inode_:
; Line 147
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _size$[ebp], eax
; Line 148
	mov	eax, DWORD PTR _size$[ebp]
; Line 149
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_inode_weight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gquery$ = -8						; size = 4
_pinode$ = -4						; size = 4
_ftcpinode$ = 8						; size = 4
_ftcgquery$ = 12					; size = 4
_cache$ = 16						; size = 4
_ftc_inode_new PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcimage.c
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 98
	mov	eax, DWORD PTR _ftcpinode$[ebp]
	mov	DWORD PTR _pinode$[ebp], eax
; Line 99
	mov	ecx, DWORD PTR _ftcgquery$[ebp]
	mov	DWORD PTR _gquery$[ebp], ecx
; Line 102
	mov	edx, DWORD PTR _cache$[ebp]
	push	edx
	mov	eax, DWORD PTR _gquery$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pinode$[ebp]
	push	ecx
	call	_FTC_INode_New
	add	esp, 12					; 0000000cH
; Line 103
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_inode_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -8						; size = 4
_inode$ = -4						; size = 4
_ftcinode$ = 8						; size = 4
_cache$ = 12						; size = 4
_ftc_inode_free PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcimage.c
; Line 32
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 33
	mov	eax, DWORD PTR _ftcinode$[ebp]
	mov	DWORD PTR _inode$[ebp], eax
; Line 34
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _memory$[ebp], edx
; Line 37
	mov	eax, DWORD PTR _inode$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN4@ftc_inode_
; Line 39
	mov	ecx, DWORD PTR _inode$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_FT_Done_Glyph
	add	esp, 4
; Line 40
	mov	eax, DWORD PTR _inode$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN4@ftc_inode_:
; Line 43
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inode$[ebp]
	push	edx
	call	_FTC_GNode_Done
	add	esp, 8
$LN3@ftc_inode_:
; Line 44
	mov	eax, DWORD PTR _inode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _inode$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN3@ftc_inode_
; Line 45
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ftc_inode_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_snode$ = 8						; size = 4
_gquery$ = 12						; size = 4
_cache$ = 16						; size = 4
_list_changed$ = 20					; size = 4
_FTC_SNode_Compare PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcsbits.c
; Line 414
	push	ebp
	mov	ebp, esp
; Line 416
	mov	eax, DWORD PTR _list_changed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	mov	edx, DWORD PTR _gquery$[ebp]
	push	edx
	mov	eax, DWORD PTR _snode$[ebp]
	push	eax
	call	_ftc_snode_compare
	add	esp, 16					; 00000010H
; Line 417
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_SNode_Compare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_start$1 = -48						; size = 4
_count$2 = -44						; size = 4
_node_count$ = -40					; size = 4
_total$ = -36						; size = 4
_clazz$ = -32						; size = 4
_family$ = -28						; size = 4
_gindex$ = -24						; size = 4
_snode$ = -20						; size = 4
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_psnode$ = 8						; size = 4
_gquery$ = 12						; size = 4
_cache$ = 16						; size = 4
_FTC_SNode_New PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcsbits.c
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 212
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 214
	mov	DWORD PTR _snode$[ebp], 0
; Line 215
	mov	edx, DWORD PTR _gquery$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _gindex$[ebp], eax
; Line 216
	mov	ecx, DWORD PTR _gquery$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _family$[ebp], edx
; Line 218
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _clazz$[ebp], edx
; Line 223
	mov	esi, esp
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _family$[ebp]
	push	edx
	mov	eax, DWORD PTR _clazz$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _total$[ebp], eax
; Line 224
	cmp	DWORD PTR _total$[ebp], 0
	je	SHORT $LN7@FTC_SNode_
	mov	edx, DWORD PTR _gindex$[ebp]
	cmp	edx, DWORD PTR _total$[ebp]
	jb	SHORT $LN8@FTC_SNode_
$LN7@FTC_SNode_:
; Line 226
	push	OFFSET $SG8853
	push	226					; 000000e2H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 227
	jmp	$Exit$14
$LN8@FTC_SNode_:
; Line 230
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	push	288					; 00000120H
	mov	ecx, DWORD PTR _memory$[ebp]
	push	ecx
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _snode$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$14
; Line 235
	mov	eax, DWORD PTR _gindex$[ebp]
	xor	edx, edx
	mov	ecx, 16					; 00000010H
	div	ecx
	mov	eax, DWORD PTR _gindex$[ebp]
	sub	eax, edx
	mov	DWORD PTR _start$1[ebp], eax
; Line 236
	mov	ecx, DWORD PTR _total$[ebp]
	sub	ecx, DWORD PTR _start$1[ebp]
	mov	DWORD PTR _count$2[ebp], ecx
; Line 237
	cmp	DWORD PTR _count$2[ebp], 16		; 00000010H
	jbe	SHORT $LN5@FTC_SNode_
; Line 238
	mov	DWORD PTR _count$2[ebp], 16		; 00000010H
$LN5@FTC_SNode_:
; Line 240
	mov	edx, DWORD PTR _family$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _snode$[ebp]
	push	ecx
	call	_FTC_GNode_Init
	add	esp, 12					; 0000000cH
; Line 242
	mov	edx, DWORD PTR _snode$[ebp]
	mov	eax, DWORD PTR _count$2[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 243
	mov	DWORD PTR _node_count$[ebp], 0
	jmp	SHORT $LN4@FTC_SNode_
$LN3@FTC_SNode_:
	mov	ecx, DWORD PTR _node_count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _node_count$[ebp], ecx
$LN4@FTC_SNode_:
	mov	edx, DWORD PTR _node_count$[ebp]
	cmp	edx, DWORD PTR _count$2[ebp]
	jae	SHORT $LN2@FTC_SNode_
; Line 245
	mov	eax, DWORD PTR _node_count$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _snode$[ebp]
	mov	BYTE PTR [ecx+eax+32], 255		; 000000ffH
; Line 246
	jmp	SHORT $LN3@FTC_SNode_
$LN2@FTC_SNode_:
; Line 251
	push	0
	mov	edx, DWORD PTR _gindex$[ebp]
	push	edx
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _snode$[ebp]
	push	edx
	call	_ftc_snode_load
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
; Line 252
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $Exit$14
; Line 254
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	mov	ecx, DWORD PTR _snode$[ebp]
	push	ecx
	call	_FTC_SNode_Free
	add	esp, 8
; Line 255
	mov	DWORD PTR _snode$[ebp], 0
$Exit$14:
; Line 260
	mov	edx, DWORD PTR _psnode$[ebp]
	mov	eax, DWORD PTR _snode$[ebp]
	mov	DWORD PTR [edx], eax
; Line 261
	mov	eax, DWORD PTR _error$[ebp]
; Line 262
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FTC_SNode_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@FTC_SNode_:
	DD	1
	DD	$LN12@FTC_SNode_
$LN12@FTC_SNode_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN11@FTC_SNode_
$LN11@FTC_SNode_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FTC_SNode_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_snode$ = 8						; size = 4
_cache$ = 12						; size = 4
_FTC_SNode_Free PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcsbits.c
; Line 86
	push	ebp
	mov	ebp, esp
; Line 87
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	mov	ecx, DWORD PTR _snode$[ebp]
	push	ecx
	call	_ftc_snode_free
	add	esp, 8
; Line 88
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_SNode_Free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_clazz$1 = -36						; size = 4
_gindex$2 = -32						; size = 4
_family$3 = -28						; size = 4
_gnode$4 = -24						; size = 4
_inode$ = -20						; size = 4
_error$ = -12						; size = 4
_memory$ = -4						; size = 4
_pinode$ = 8						; size = 4
_gquery$ = 12						; size = 4
_cache$ = 16						; size = 4
_FTC_INode_New PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcimage.c
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 62
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 64
	mov	DWORD PTR _inode$[ebp], 0
; Line 67
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	32					; 00000020H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _inode$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN2@FTC_INode_
; Line 69
	mov	ecx, DWORD PTR _inode$[ebp]
	mov	DWORD PTR _gnode$4[ebp], ecx
; Line 70
	mov	edx, DWORD PTR _gquery$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _family$3[ebp], eax
; Line 71
	mov	ecx, DWORD PTR _gquery$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _gindex$2[ebp], edx
; Line 72
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _clazz$1[ebp], edx
; Line 76
	mov	eax, DWORD PTR _family$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _gindex$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _gnode$4[ebp]
	push	edx
	call	_FTC_GNode_Init
	add	esp, 12					; 0000000cH
; Line 80
	mov	eax, DWORD PTR _inode$[ebp]
	add	eax, 28					; 0000001cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	mov	edx, DWORD PTR _gindex$2[ebp]
	push	edx
	mov	eax, DWORD PTR _family$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _clazz$1[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 81
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FTC_INode_
; Line 83
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inode$[ebp]
	push	ecx
	call	_FTC_INode_Free
	add	esp, 8
; Line 84
	mov	DWORD PTR _inode$[ebp], 0
$LN2@FTC_INode_:
; Line 88
	mov	edx, DWORD PTR _pinode$[ebp]
	mov	eax, DWORD PTR _inode$[ebp]
	mov	DWORD PTR [edx], eax
; Line 89
	mov	eax, DWORD PTR _error$[ebp]
; Line 90
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@FTC_INode_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@FTC_INode_:
	DD	1
	DD	$LN6@FTC_INode_
$LN6@FTC_INode_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN5@FTC_INode_
$LN5@FTC_INode_:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FTC_INode_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_inode$ = 8						; size = 4
_cache$ = 12						; size = 4
_FTC_INode_Free PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcimage.c
; Line 51
	push	ebp
	mov	ebp, esp
; Line 52
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inode$[ebp]
	push	ecx
	call	_ftc_inode_free
	add	esp, 8
; Line 53
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_INode_Free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_manager$ = 8						; size = 4
_clazz$ = 12						; size = 4
_acache$ = 16						; size = 4
_FTC_GCache_New PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcglyph.c
; Line 178
	push	ebp
	mov	ebp, esp
; Line 180
	mov	eax, DWORD PTR _acache$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clazz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _manager$[ebp]
	push	edx
	call	_FTC_Manager_RegisterCache
	add	esp, 12					; 0000000cH
; Line 181
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_GCache_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_clazz$ = -4						; size = 4
_family$ = 8						; size = 4
_cache$ = 12						; size = 4
_FTC_Family_Init PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcglyph.c
; Line 108
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 109
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _clazz$[ebp], ecx
; Line 112
	mov	edx, DWORD PTR _family$[ebp]
	mov	eax, DWORD PTR _clazz$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+16], ecx
; Line 113
	mov	edx, DWORD PTR _family$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 114
	mov	eax, DWORD PTR _family$[ebp]
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 115
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_Family_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gnode$ = 8						; size = 4
_cache$ = 12						; size = 4
_FTC_GNode_Done PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcglyph.c
; Line 57
	push	ebp
	mov	ebp, esp
; Line 59
	mov	eax, DWORD PTR _gnode$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 61
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	mov	edx, DWORD PTR _gnode$[ebp]
	push	edx
	call	_FTC_GNode_UnselectFamily
	add	esp, 8
; Line 62
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_GNode_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -8						; size = 4
_family$ = -4						; size = 4
_gnode$ = 8						; size = 4
_cache$ = 12						; size = 4
_FTC_GNode_UnselectFamily PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcglyph.c
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 45
	mov	eax, DWORD PTR _gnode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _family$[ebp], ecx
; Line 48
	mov	edx, DWORD PTR _gnode$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 49
	cmp	DWORD PTR _family$[ebp], 0
	je	SHORT $LN2@FTC_GNode_
	mov	eax, DWORD PTR _family$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR _family$[ebp]
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv69[ebp], 0
	jne	SHORT $LN2@FTC_GNode_
; Line 50
	mov	ecx, DWORD PTR _family$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cache$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_FTC_MruList_Remove
	add	esp, 8
$LN2@FTC_GNode_:
; Line 51
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_GNode_UnselectFamily ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gnode$ = 8						; size = 4
_gquery$ = 12						; size = 4
_cache$ = 16						; size = 4
_list_changed$ = 20					; size = 4
_FTC_GNode_Compare PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcglyph.c
; Line 90
	push	ebp
	mov	ebp, esp
; Line 92
	mov	eax, DWORD PTR _list_changed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	mov	edx, DWORD PTR _gquery$[ebp]
	push	edx
	mov	eax, DWORD PTR _gnode$[ebp]
	push	eax
	call	_ftc_gnode_compare
	add	esp, 16					; 00000010H
; Line 93
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_GNode_Compare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_gnode$ = 8						; size = 4
_gindex$ = 12						; size = 4
_family$ = 16						; size = 4
_FTC_GNode_Init PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcglyph.c
; Line 34
	push	ebp
	mov	ebp, esp
; Line 35
	mov	eax, DWORD PTR _gnode$[ebp]
	mov	ecx, DWORD PTR _family$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 36
	mov	edx, DWORD PTR _gnode$[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 37
	mov	ecx, DWORD PTR _family$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _family$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 38
	pop	ebp
	ret	0
_FTC_GNode_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -20						; size = 4
_cache$ = -16						; size = 4
_error$ = -8						; size = 4
_manager$ = 8						; size = 4
_clazz$ = 12						; size = 4
_acache$ = 16						; size = 4
_FTC_Manager_RegisterCache PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 581
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 582
	mov	DWORD PTR _error$[ebp], 6
; Line 583
	mov	DWORD PTR _cache$[ebp], 0
; Line 586
	cmp	DWORD PTR _manager$[ebp], 0
	je	$Exit$14
	cmp	DWORD PTR _clazz$[ebp], 0
	je	$Exit$14
	cmp	DWORD PTR _acache$[ebp], 0
	je	$Exit$14
; Line 588
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _memory$1[ebp], ecx
; Line 591
	mov	edx, DWORD PTR _manager$[ebp]
	cmp	DWORD PTR [edx+88], 16			; 00000010H
	jb	SHORT $LN7@FTC_Manage
; Line 593
	push	OFFSET $SG8093
	push	593					; 00000251H
	push	112					; 00000070H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 112				; 00000070H
	mov	DWORD PTR _error$[ebp], eax
; Line 595
	push	OFFSET $SG8094
	call	_FT_Message
	add	esp, 4
; Line 596
	jmp	$Exit$14
$LN7@FTC_Manage:
; Line 599
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clazz$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cache$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$Exit$14
; Line 601
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [ecx+48], edx
; Line 602
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR _memory$1[ebp]
	mov	DWORD PTR [eax+52], ecx
; Line 603
	mov	edx, 32					; 00000020H
	imul	esi, edx, 0
	add	esi, DWORD PTR _clazz$[ebp]
	mov	edi, DWORD PTR _cache$[ebp]
	add	edi, 16					; 00000010H
	mov	ecx, 8
	rep movsd
; Line 604
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR _clazz$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 608
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR [edx+56], ecx
; Line 610
	mov	esi, esp
	mov	edx, DWORD PTR _cache$[ebp]
	push	edx
	mov	eax, DWORD PTR _clazz$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 611
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@FTC_Manage
; Line 613
	mov	esi, esp
	mov	edx, DWORD PTR _cache$[ebp]
	push	edx
	mov	eax, DWORD PTR _clazz$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@FTC_Manage:
; Line 614
	mov	edx, DWORD PTR _cache$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$1[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _cache$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN4@FTC_Manage
; Line 615
	jmp	SHORT $Exit$14
$LN5@FTC_Manage:
; Line 618
	mov	edx, DWORD PTR _manager$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR _manager$[ebp]
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [ecx+eax*4+24], edx
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 1
	mov	edx, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [edx+88], ecx
$Exit$14:
; Line 623
	cmp	DWORD PTR _acache$[ebp], 0
	je	SHORT $LN1@FTC_Manage
; Line 624
	mov	eax, DWORD PTR _acache$[ebp]
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@FTC_Manage:
; Line 625
	mov	eax, DWORD PTR _error$[ebp]
; Line 626
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FTC_Manage
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@FTC_Manage:
	DD	1
	DD	$LN12@FTC_Manage
$LN12@FTC_Manage:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN11@FTC_Manage
$LN11@FTC_Manage:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FTC_Manager_RegisterCache ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_prev$1 = -16						; size = 4
_result$ = -12						; size = 4
_node$ = -8						; size = 4
_first$ = -4						; size = 4
_manager$ = 8						; size = 4
_count$ = 12						; size = 4
_FTC_Manager_FlushN PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 632
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 633
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _first$[ebp], ecx
; Line 639
	cmp	DWORD PTR _first$[ebp], 0
	jne	SHORT $LN5@FTC_Manage
; Line 640
	xor	eax, eax
	jmp	SHORT $LN6@FTC_Manage
$LN5@FTC_Manage:
; Line 643
	mov	edx, DWORD PTR _first$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _node$[ebp], eax
; Line 644
	mov	DWORD PTR _result$[ebp], 0
$LN4@FTC_Manage:
	mov	ecx, DWORD PTR _result$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	SHORT $LN3@FTC_Manage
; Line 646
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _prev$1[ebp], eax
; Line 650
	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, WORD PTR [ecx+18]
	test	edx, edx
	jg	SHORT $LN2@FTC_Manage
; Line 652
	mov	eax, DWORD PTR _manager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	call	_ftc_node_destroy
	add	esp, 8
; Line 653
	mov	edx, DWORD PTR _result$[ebp]
	add	edx, 1
	mov	DWORD PTR _result$[ebp], edx
$LN2@FTC_Manage:
; Line 656
	mov	eax, DWORD PTR _node$[ebp]
	cmp	eax, DWORD PTR _first$[ebp]
	jne	SHORT $LN1@FTC_Manage
; Line 657
	jmp	SHORT $LN3@FTC_Manage
$LN1@FTC_Manage:
; Line 659
	mov	ecx, DWORD PTR _prev$1[ebp]
	mov	DWORD PTR _node$[ebp], ecx
; Line 660
	jmp	SHORT $LN4@FTC_Manage
$LN3@FTC_Manage:
; Line 661
	mov	eax, DWORD PTR _result$[ebp]
$LN6@FTC_Manage:
; Line 662
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_Manager_FlushN ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -16						; size = 4
_prev$1 = -12						; size = 4
_first$ = -8						; size = 4
_node$ = -4						; size = 4
_manager$ = 8						; size = 4
_FTC_Manager_Compress PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 537
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 541
	cmp	DWORD PTR _manager$[ebp], 0
	jne	SHORT $LN8@FTC_Manage
; Line 542
	jmp	SHORT $LN9@FTC_Manage
$LN8@FTC_Manage:
; Line 544
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _first$[ebp], ecx
; Line 554
	mov	edx, DWORD PTR _manager$[ebp]
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN6@FTC_Manage
	cmp	DWORD PTR _first$[ebp], 0
	jne	SHORT $LN7@FTC_Manage
$LN6@FTC_Manage:
; Line 555
	jmp	SHORT $LN9@FTC_Manage
$LN7@FTC_Manage:
; Line 558
	mov	edx, DWORD PTR _first$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _node$[ebp], eax
$LN5@FTC_Manage:
; Line 564
	mov	ecx, DWORD PTR _node$[ebp]
	cmp	ecx, DWORD PTR _first$[ebp]
	jne	SHORT $LN11@FTC_Manage
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN12@FTC_Manage
$LN11@FTC_Manage:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv73[ebp], eax
$LN12@FTC_Manage:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _prev$1[ebp], ecx
; Line 566
	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, WORD PTR [edx+18]
	test	eax, eax
	jg	SHORT $LN2@FTC_Manage
; Line 567
	mov	ecx, DWORD PTR _manager$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	call	_ftc_node_destroy
	add	esp, 8
$LN2@FTC_Manage:
; Line 569
	mov	eax, DWORD PTR _prev$1[ebp]
	mov	DWORD PTR _node$[ebp], eax
; Line 571
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN9@FTC_Manage
	mov	ecx, DWORD PTR _manager$[ebp]
	mov	edx, DWORD PTR _manager$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [edx+12]
	ja	SHORT $LN5@FTC_Manage
$LN9@FTC_Manage:
; Line 572
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_Manager_Compress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_node$1 = -44						; size = 4
_list_changed$2 = -33					; size = 1
_node$3 = -28						; size = 4
_pnode$4 = -24						; size = 4
_bucket$5 = -20						; size = 4
_frees$ = -16						; size = 4
_manager$ = -12						; size = 4
_count$ = -8						; size = 4
_i$ = -4						; size = 4
_cache$ = 8						; size = 4
_face_id$ = 12						; size = 4
_FTC_Cache_RemoveFaceID PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 566
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 568
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _manager$[ebp], ecx
; Line 569
	mov	DWORD PTR _frees$[ebp], 0
; Line 572
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	DWORD PTR _count$[ebp], eax
; Line 573
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@FTC_Cache_
$LN9@FTC_Cache_:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN10@FTC_Cache_:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jae	$LN2@FTC_Cache_
; Line 575
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _bucket$5[ebp], eax
; Line 576
	mov	ecx, DWORD PTR _bucket$5[ebp]
	mov	DWORD PTR _pnode$4[ebp], ecx
$LN7@FTC_Cache_:
; Line 581
	mov	edx, DWORD PTR _pnode$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _node$3[ebp], eax
; Line 582
	mov	BYTE PTR _list_changed$2[ebp], 0
; Line 585
	cmp	DWORD PTR _node$3[ebp], 0
	jne	SHORT $LN5@FTC_Cache_
; Line 586
	jmp	SHORT $LN6@FTC_Cache_
$LN5@FTC_Cache_:
; Line 589
	mov	esi, esp
	lea	ecx, DWORD PTR _list_changed$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _cache$[ebp]
	push	edx
	mov	eax, DWORD PTR _face_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@FTC_Cache_
; Line 591
	mov	edx, DWORD PTR _pnode$4[ebp]
	mov	eax, DWORD PTR _node$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx
; Line 592
	mov	edx, DWORD PTR _node$3[ebp]
	mov	eax, DWORD PTR _frees$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 593
	mov	ecx, DWORD PTR _node$3[ebp]
	mov	DWORD PTR _frees$[ebp], ecx
; Line 595
	jmp	SHORT $LN3@FTC_Cache_
$LN4@FTC_Cache_:
; Line 596
	mov	edx, DWORD PTR _node$3[ebp]
	add	edx, 8
	mov	DWORD PTR _pnode$4[ebp], edx
$LN3@FTC_Cache_:
; Line 597
	jmp	SHORT $LN7@FTC_Cache_
$LN6@FTC_Cache_:
; Line 598
	jmp	$LN9@FTC_Cache_
$LN2@FTC_Cache_:
; Line 601
	cmp	DWORD PTR _frees$[ebp], 0
	je	SHORT $LN1@FTC_Cache_
; Line 606
	mov	eax, DWORD PTR _frees$[ebp]
	mov	DWORD PTR _node$1[ebp], eax
; Line 607
	mov	ecx, DWORD PTR _node$1[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _frees$[ebp], edx
; Line 609
	mov	esi, esp
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _manager$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, eax
	mov	eax, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 610
	mov	ecx, DWORD PTR _manager$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$1[ebp]
	push	edx
	call	_ftc_node_mru_unlink
	add	esp, 8
; Line 612
	mov	esi, esp
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 614
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _cache$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 615
	jmp	SHORT $LN2@FTC_Cache_
$LN1@FTC_Cache_:
; Line 617
	mov	ecx, DWORD PTR _cache$[ebp]
	push	ecx
	call	_ftc_cache_resize
	add	esp, 4
; Line 618
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@FTC_Cache_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@FTC_Cache_:
	DD	1
	DD	$LN14@FTC_Cache_
$LN14@FTC_Cache_:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN13@FTC_Cache_
$LN13@FTC_Cache_:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_FTC_Cache_RemoveFaceID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__try_done$1 = -28					; size = 4
__try_count$2 = -24					; size = 4
__try_manager$3 = -20					; size = 4
_node$ = -12						; size = 4
_error$ = -4						; size = 4
_cache$ = 8						; size = 4
_hash$ = 12						; size = 4
_query$ = 16						; size = 4
_anode$ = 20						; size = 4
_FTC_Cache_NewNode PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 448
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 459
	mov	eax, DWORD PTR _cache$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR __try_manager$3[ebp], ecx
	mov	DWORD PTR __try_count$2[ebp], 4
$LN11@FTC_Cache_:
; Line 461
	mov	esi, esp
	mov	edx, DWORD PTR _cache$[ebp]
	push	edx
	mov	eax, DWORD PTR _query$[ebp]
	push	eax
	lea	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cache$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 463
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN8@FTC_Cache_
	mov	ecx, DWORD PTR _error$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 64					; 00000040H
	je	SHORT $LN9@FTC_Cache_
$LN8@FTC_Cache_:
	jmp	SHORT $LN10@FTC_Cache_
$LN9@FTC_Cache_:
	mov	edx, DWORD PTR __try_count$2[ebp]
	push	edx
	mov	eax, DWORD PTR __try_manager$3[ebp]
	push	eax
	call	_FTC_Manager_FlushN
	add	esp, 8
	mov	DWORD PTR __try_done$1[ebp], eax
	cmp	DWORD PTR __try_done$1[ebp], 0
	jbe	SHORT $LN7@FTC_Cache_
	xor	ecx, ecx
	je	SHORT $LN7@FTC_Cache_
	mov	BYTE PTR ds:0, 1
$LN7@FTC_Cache_:
	cmp	DWORD PTR __try_done$1[ebp], 0
	jne	SHORT $LN6@FTC_Cache_
	jmp	SHORT $LN10@FTC_Cache_
$LN6@FTC_Cache_:
	mov	edx, DWORD PTR __try_done$1[ebp]
	cmp	edx, DWORD PTR __try_count$2[ebp]
	jne	SHORT $LN5@FTC_Cache_
	mov	eax, DWORD PTR __try_count$2[ebp]
	shl	eax, 1
	mov	DWORD PTR __try_count$2[ebp], eax
	mov	ecx, DWORD PTR __try_count$2[ebp]
	cmp	ecx, DWORD PTR __try_done$1[ebp]
	jb	SHORT $LN3@FTC_Cache_
	mov	edx, DWORD PTR __try_manager$3[ebp]
	mov	eax, DWORD PTR __try_count$2[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jbe	SHORT $LN5@FTC_Cache_
$LN3@FTC_Cache_:
	mov	ecx, DWORD PTR __try_manager$3[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR __try_count$2[ebp], edx
$LN5@FTC_Cache_:
	jmp	$LN11@FTC_Cache_
$LN10@FTC_Cache_:
; Line 465
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FTC_Cache_
; Line 466
	mov	DWORD PTR _node$[ebp], 0
; Line 467
	jmp	SHORT $LN1@FTC_Cache_
$LN2@FTC_Cache_:
; Line 472
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cache$[ebp]
	push	edx
	call	_ftc_cache_add
	add	esp, 12					; 0000000cH
$LN1@FTC_Cache_:
; Line 475
	mov	eax, DWORD PTR _anode$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 476
	mov	eax, DWORD PTR _error$[ebp]
; Line 477
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@FTC_Cache_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@FTC_Cache_:
	DD	1
	DD	$LN15@FTC_Cache_
$LN15@FTC_Cache_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@FTC_Cache_
$LN14@FTC_Cache_:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_FTC_Cache_NewNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cache$ = 8						; size = 4
_FTC_Cache_Done PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 410
	push	ebp
	mov	ebp, esp
; Line 411
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	call	_ftc_cache_done
	add	esp, 4
; Line 412
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_Cache_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cache$ = 8						; size = 4
_FTC_Cache_Init PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccache.c
; Line 329
	push	ebp
	mov	ebp, esp
; Line 330
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	call	_ftc_cache_init
	add	esp, 4
; Line 331
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_Cache_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_next$ = -12						; size = 4
_node$ = -8						; size = 4
_first$ = -4						; size = 4
_list$ = 8						; size = 4
_selection$ = 12					; size = 4
_key$ = 16						; size = 4
_FTC_MruList_RemoveSelection PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmru.c
; Line 330
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 334
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _first$[ebp], ecx
$LN7@FTC_MruLis:
; Line 335
	cmp	DWORD PTR _first$[ebp], 0
	je	SHORT $LN6@FTC_MruLis
	cmp	DWORD PTR _selection$[ebp], 0
	je	SHORT $LN5@FTC_MruLis
	mov	esi, esp
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _first$[ebp]
	push	eax
	call	DWORD PTR _selection$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@FTC_MruLis
$LN5@FTC_MruLis:
; Line 337
	mov	edx, DWORD PTR _first$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_FTC_MruList_Remove
	add	esp, 8
; Line 338
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _first$[ebp], edx
; Line 339
	jmp	SHORT $LN7@FTC_MruLis
$LN6@FTC_MruLis:
; Line 341
	cmp	DWORD PTR _first$[ebp], 0
	je	SHORT $LN8@FTC_MruLis
; Line 343
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _node$[ebp], ecx
$LN3@FTC_MruLis:
; Line 344
	mov	edx, DWORD PTR _node$[ebp]
	cmp	edx, DWORD PTR _first$[ebp]
	je	SHORT $LN8@FTC_MruLis
; Line 346
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx
; Line 348
	mov	esi, esp
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	call	DWORD PTR _selection$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@FTC_MruLis
; Line 349
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_FTC_MruList_Remove
	add	esp, 8
$LN1@FTC_MruLis:
; Line 351
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _node$[ebp], ecx
; Line 352
	jmp	SHORT $LN3@FTC_MruLis
$LN8@FTC_MruLis:
; Line 354
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_MruList_RemoveSelection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$1 = -4						; size = 4
_list$ = 8						; size = 4
_node$ = 12						; size = 4
_FTC_MruList_Remove PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmru.c
; Line 310
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 311
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	add	ecx, 8
	push	ecx
	call	_FTC_MruNode_Remove
	add	esp, 8
; Line 312
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 315
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _memory$1[ebp], eax
; Line 318
	mov	ecx, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN3@FTC_MruLis
; Line 319
	mov	esi, esp
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@FTC_MruLis:
; Line 321
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$1[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _node$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN3@FTC_MruLis
; Line 323
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_MruList_Remove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_memory$ = -20						; size = 4
_node$ = -16						; size = 4
_error$ = -8						; size = 4
_list$ = 8						; size = 4
_key$ = 12						; size = 4
_anode$ = 16						; size = 4
_FTC_MruList_New PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmru.c
; Line 239
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 241
	mov	DWORD PTR _node$[ebp], 0
; Line 242
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 245
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+4]
	jb	$LN15@FTC_MruLis
	mov	edx, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jbe	$LN15@FTC_MruLis
; Line 247
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _node$[ebp], edx
$LN14@FTC_MruLis:
; Line 249
	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN13@FTC_MruLis
	push	OFFSET $SG7423
	push	249					; 000000f9H
	push	OFFSET $SG7424
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN13@FTC_MruLis:
	xor	eax, eax
	jne	SHORT $LN14@FTC_MruLis
; Line 251
	mov	ecx, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN10@FTC_MruLis
; Line 253
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 8
	push	eax
	call	_FTC_MruNode_Up
	add	esp, 8
; Line 255
	mov	esi, esp
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 256
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN10@FTC_MruLis
; Line 257
	jmp	$Exit$21
$LN10@FTC_MruLis:
; Line 260
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	add	edx, 8
	push	edx
	call	_FTC_MruNode_Remove
	add	esp, 8
; Line 261
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 263
	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN8@FTC_MruLis
; Line 264
	mov	esi, esp
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@FTC_MruLis:
; Line 266
	jmp	SHORT $LN7@FTC_MruLis
$LN15@FTC_MruLis:
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _node$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN7@FTC_MruLis
; Line 267
	jmp	SHORT $Exit$21
$LN7@FTC_MruLis:
; Line 269
	mov	esi, esp
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 270
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@FTC_MruLis
; Line 271
	jmp	SHORT $Fail$22
$LN5@FTC_MruLis:
; Line 273
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	add	edx, 8
	push	edx
	call	_FTC_MruNode_Prepend
	add	esp, 8
; Line 274
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx], ecx
$Exit$21:
; Line 277
	mov	eax, DWORD PTR _anode$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 278
	mov	eax, DWORD PTR _error$[ebp]
	jmp	SHORT $LN16@FTC_MruLis
$Fail$22:
; Line 281
	mov	edx, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN3@FTC_MruLis
; Line 282
	mov	esi, esp
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@FTC_MruLis:
; Line 284
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _node$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@FTC_MruLis
; Line 285
	jmp	SHORT $Exit$21
$LN16@FTC_MruLis:
; Line 286
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@FTC_MruLis
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@FTC_MruLis:
	DD	1
	DD	$LN19@FTC_MruLis
$LN19@FTC_MruLis:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@FTC_MruLis
$LN18@FTC_MruLis:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FTC_MruList_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_list$ = 8						; size = 4
_FTC_MruList_Done PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmru.c
; Line 196
	push	ebp
	mov	ebp, esp
; Line 197
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_FTC_MruList_Reset
	add	esp, 4
; Line 198
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_MruList_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_list$ = 8						; size = 4
_FTC_MruList_Reset PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmru.c
; Line 186
	push	ebp
	mov	ebp, esp
$LN6@FTC_MruLis:
; Line 187
	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@FTC_MruLis
; Line 188
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_FTC_MruList_Remove
	add	esp, 8
	jmp	SHORT $LN6@FTC_MruLis
$LN4@FTC_MruLis:
; Line 190
	mov	ecx, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@FTC_MruLis
	push	OFFSET $SG7402
	push	190					; 000000beH
	push	OFFSET $SG7403
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN3@FTC_MruLis:
	xor	edx, edx
	jne	SHORT $LN4@FTC_MruLis
; Line 191
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_MruList_Reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_list$ = 8						; size = 4
_clazz$ = 12						; size = 4
_max_nodes$ = 16					; size = 4
_data$ = 20						; size = 4
_memory$ = 24						; size = 4
_FTC_MruList_Init PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmru.c
; Line 174
	push	ebp
	mov	ebp, esp
; Line 175
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax], 0
; Line 176
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR _max_nodes$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 177
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 178
	mov	ecx, DWORD PTR _list$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _clazz$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], edx
; Line 179
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 180
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 181
	pop	ebp
	ret	0
_FTC_MruList_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_next$ = -12						; size = 4
_prev$ = -8						; size = 4
_first$ = -4						; size = 4
_plist$ = 8						; size = 4
_node$ = 12						; size = 4
_FTC_MruNode_Remove PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmru.c
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 125
	mov	eax, DWORD PTR _plist$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _first$[ebp], ecx
$LN15@FTC_MruNod:
; Line 129
	cmp	DWORD PTR _first$[ebp], 0
	jne	SHORT $LN14@FTC_MruNod
	push	OFFSET $SG7362
	push	129					; 00000081H
	push	OFFSET $SG7363
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN14@FTC_MruNod:
	xor	edx, edx
	jne	SHORT $LN15@FTC_MruNod
; Line 150
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _prev$[ebp], ecx
; Line 151
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _next$[ebp], eax
; Line 153
	mov	ecx, DWORD PTR _prev$[ebp]
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 154
	mov	eax, DWORD PTR _next$[ebp]
	mov	ecx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 156
	mov	edx, DWORD PTR _node$[ebp]
	cmp	edx, DWORD PTR _next$[ebp]
	jne	SHORT $LN11@FTC_MruNod
$LN10@FTC_MruNod:
; Line 158
	mov	eax, DWORD PTR _first$[ebp]
	cmp	eax, DWORD PTR _node$[ebp]
	je	SHORT $LN9@FTC_MruNod
	push	OFFSET $SG7369
	push	158					; 0000009eH
	push	OFFSET $SG7370
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@FTC_MruNod:
	xor	ecx, ecx
	jne	SHORT $LN10@FTC_MruNod
$LN6@FTC_MruNod:
; Line 159
	mov	edx, DWORD PTR _prev$[ebp]
	cmp	edx, DWORD PTR _node$[ebp]
	je	SHORT $LN5@FTC_MruNod
	push	OFFSET $SG7375
	push	159					; 0000009fH
	push	OFFSET $SG7376
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN5@FTC_MruNod:
	xor	eax, eax
	jne	SHORT $LN6@FTC_MruNod
; Line 161
	mov	ecx, DWORD PTR _plist$[ebp]
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN16@FTC_MruNod
$LN11@FTC_MruNod:
; Line 163
	mov	edx, DWORD PTR _node$[ebp]
	cmp	edx, DWORD PTR _first$[ebp]
	jne	SHORT $LN16@FTC_MruNod
; Line 164
	mov	eax, DWORD PTR _plist$[ebp]
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [eax], ecx
$LN16@FTC_MruNod:
; Line 165
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_MruNode_Remove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_last$1 = -16						; size = 4
_next$2 = -12						; size = 4
_prev$3 = -8						; size = 4
_first$ = -4						; size = 4
_plist$ = 8						; size = 4
_node$ = 12						; size = 4
_FTC_MruNode_Up PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmru.c
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 76
	mov	eax, DWORD PTR _plist$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _first$[ebp], ecx
$LN5@FTC_MruNod:
; Line 79
	cmp	DWORD PTR _first$[ebp], 0
	jne	SHORT $LN4@FTC_MruNod
	push	OFFSET $SG7343
	push	79					; 0000004fH
	push	OFFSET $SG7344
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN4@FTC_MruNod:
	xor	edx, edx
	jne	SHORT $LN5@FTC_MruNod
; Line 81
	mov	eax, DWORD PTR _first$[ebp]
	cmp	eax, DWORD PTR _node$[ebp]
	je	SHORT $LN6@FTC_MruNod
; Line 102
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _prev$3[ebp], edx
; Line 103
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$2[ebp], ecx
; Line 105
	mov	edx, DWORD PTR _prev$3[ebp]
	mov	eax, DWORD PTR _next$2[ebp]
	mov	DWORD PTR [edx], eax
; Line 106
	mov	ecx, DWORD PTR _next$2[ebp]
	mov	edx, DWORD PTR _prev$3[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 108
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _last$1[ebp], ecx
; Line 110
	mov	edx, DWORD PTR _last$1[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx], eax
; Line 111
	mov	ecx, DWORD PTR _first$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 113
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _first$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 114
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _last$1[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 116
	mov	ecx, DWORD PTR _plist$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx
$LN6@FTC_MruNod:
; Line 118
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_MruNode_Up ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_last$1 = -8						; size = 4
_first$ = -4						; size = 4
_plist$ = 8						; size = 4
_node$ = 12						; size = 4
_FTC_MruNode_Prepend PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmru.c
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 32
	mov	eax, DWORD PTR _plist$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _first$[ebp], ecx
; Line 35
	cmp	DWORD PTR _first$[ebp], 0
	je	SHORT $LN2@FTC_MruNod
; Line 37
	mov	edx, DWORD PTR _first$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _last$1[ebp], eax
; Line 58
	mov	ecx, DWORD PTR _first$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 59
	mov	eax, DWORD PTR _last$1[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 60
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR [edx], eax
; Line 61
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _last$1[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 63
	jmp	SHORT $LN1@FTC_MruNod
$LN2@FTC_MruNod:
; Line 65
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 66
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN1@FTC_MruNod:
; Line 68
	mov	ecx, DWORD PTR _plist$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_MruNode_Prepend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv251 = -168						; size = 4
tv227 = -164						; size = 4
tv200 = -160						; size = 4
tv93 = -156						; size = 4
__nl$1 = -152						; size = 4
__manager$2 = -148					; size = 4
__list_changed$3 = -137					; size = 1
__nodcomp$4 = -132					; size = 4
__hash$5 = -128						; size = 4
__cache$6 = -124					; size = 4
__node$7 = -116						; size = 4
__pnode$8 = -108					; size = 4
__bucket$9 = -104					; size = 4
__gqfamily$10 = -100					; size = 4
__node$11 = -96						; size = 4
__first$12 = -92					; size = 4
__compare$13 = -88					; size = 4
__pfirst$14 = -84					; size = 4
__mrunode$15 = -76					; size = 4
__fcompare$16 = -68					; size = 4
__gquery$17 = -64					; size = 4
__gcache$18 = -60					; size = 4
_hash$ = -56						; size = 4
_node$ = -52						; size = 4
_query$ = -44						; size = 36
_error$ = -4						; size = 4
_cache$ = 8						; size = 4
_scaler$ = 12						; size = 4
_load_flags$ = 16					; size = 4
_gindex$ = 20						; size = 4
_ansbit$ = 24						; size = 4
_anode$ = 28						; size = 4
_FTC_SBitCache_LookupScaler PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 540
	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-168]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 543
	mov	DWORD PTR _node$[ebp], 0
; Line 547
	cmp	DWORD PTR _anode$[ebp], 0
	je	SHORT $LN38@FTC_SBitCa
; Line 548
	mov	eax, DWORD PTR _anode$[ebp]
	mov	DWORD PTR [eax], 0
$LN38@FTC_SBitCa:
; Line 551
	cmp	DWORD PTR _ansbit$[ebp], 0
	je	SHORT $LN36@FTC_SBitCa
	cmp	DWORD PTR _scaler$[ebp], 0
	jne	SHORT $LN37@FTC_SBitCa
$LN36@FTC_SBitCa:
; Line 552
	push	OFFSET $SG9444
	push	552					; 00000228H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN39@FTC_SBitCa
$LN37@FTC_SBitCa:
; Line 554
	mov	ecx, DWORD PTR _ansbit$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 557
	cmp	DWORD PTR _load_flags$[ebp], -1
	jbe	SHORT $LN35@FTC_SBitCa
$LN34@FTC_SBitCa:
; Line 560
	mov	edx, 4
	imul	eax, edx, 17
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN33@FTC_SBitCa
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 0
	push	ecx
	push	OFFSET $SG9452
	call	_FT_Message
	add	esp, 8
$LN33@FTC_SBitCa:
	xor	edx, edx
	jne	SHORT $LN34@FTC_SBitCa
$LN35@FTC_SBitCa:
; Line 562
	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _query$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _query$[ebp+12], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _query$[ebp+16], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _query$[ebp+20], eax
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _query$[ebp+24], edx
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _query$[ebp+28], eax
; Line 563
	mov	ecx, DWORD PTR _load_flags$[ebp]
	mov	DWORD PTR _query$[ebp+32], ecx
; Line 567
	cmp	DWORD PTR _query$[ebp+20], 0
	je	SHORT $LN41@FTC_SBitCa
	mov	DWORD PTR tv93[ebp], 0
	jmp	SHORT $LN42@FTC_SBitCa
$LN41@FTC_SBitCa:
	imul	edx, DWORD PTR _query$[ebp+24], 33
	imul	eax, DWORD PTR _query$[ebp+28], 61
	xor	edx, eax
	mov	DWORD PTR tv93[ebp], edx
$LN42@FTC_SBitCa:
	mov	ecx, DWORD PTR _query$[ebp+8]
	sar	ecx, 3
	mov	edx, DWORD PTR _query$[ebp+8]
	shl	edx, 7
	xor	ecx, edx
	add	ecx, DWORD PTR _query$[ebp+12]
	imul	eax, DWORD PTR _query$[ebp+16], 7
	add	ecx, DWORD PTR tv93[ebp]
	add	eax, ecx
	imul	ecx, DWORD PTR _query$[ebp+32], 31
	add	eax, ecx
	mov	edx, DWORD PTR _gindex$[ebp]
	shr	edx, 4
	add	eax, edx
	mov	DWORD PTR _hash$[ebp], eax
$LN30@FTC_SBitCa:
; Line 575
	mov	eax, DWORD PTR _cache$[ebp]
	mov	DWORD PTR __gcache$18[ebp], eax
	lea	ecx, DWORD PTR _query$[ebp]
	mov	DWORD PTR __gquery$17[ebp], ecx
	mov	DWORD PTR __fcompare$16[ebp], OFFSET _ftc_basic_family_compare
	mov	edx, DWORD PTR __gquery$17[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [edx], eax
$LN27@FTC_SBitCa:
	mov	ecx, DWORD PTR __gcache$18[ebp]
	add	ecx, 72					; 00000048H
	mov	DWORD PTR __pfirst$14[ebp], ecx
	mov	edx, DWORD PTR __fcompare$16[ebp]
	mov	DWORD PTR __compare$13[ebp], edx
	mov	DWORD PTR _error$[ebp], 0
	mov	eax, DWORD PTR __pfirst$14[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __first$12[ebp], ecx
	mov	DWORD PTR __node$11[ebp], 0
	cmp	DWORD PTR __first$12[ebp], 0
	je	SHORT $LN24@FTC_SBitCa
	mov	edx, DWORD PTR __first$12[ebp]
	mov	DWORD PTR __node$11[ebp], edx
$LN23@FTC_SBitCa:
	mov	esi, esp
	mov	eax, DWORD PTR __gquery$17[ebp]
	push	eax
	mov	ecx, DWORD PTR __node$11[ebp]
	push	ecx
	call	DWORD PTR __compare$13[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN20@FTC_SBitCa
	mov	eax, DWORD PTR __node$11[ebp]
	cmp	eax, DWORD PTR __first$12[ebp]
	je	SHORT $LN19@FTC_SBitCa
	mov	ecx, DWORD PTR __node$11[ebp]
	push	ecx
	mov	edx, DWORD PTR __pfirst$14[ebp]
	push	edx
	call	_FTC_MruNode_Up
	add	esp, 8
$LN19@FTC_SBitCa:
	mov	eax, DWORD PTR __node$11[ebp]
	mov	DWORD PTR __mrunode$15[ebp], eax
	jmp	SHORT $_MruOk$53
$LN20@FTC_SBitCa:
	mov	ecx, DWORD PTR __node$11[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __node$11[ebp], edx
	mov	eax, DWORD PTR __node$11[ebp]
	cmp	eax, DWORD PTR __first$12[ebp]
	jne	SHORT $LN23@FTC_SBitCa
$LN24@FTC_SBitCa:
	lea	ecx, DWORD PTR __mrunode$15[ebp]
	push	ecx
	mov	edx, DWORD PTR __gquery$17[ebp]
	push	edx
	mov	eax, DWORD PTR __gcache$18[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_FTC_MruList_New
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$_MruOk$53:
	xor	ecx, ecx
	jne	$LN27@FTC_SBitCa
	mov	edx, DWORD PTR __gquery$17[ebp]
	mov	eax, DWORD PTR __mrunode$15[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN29@FTC_SBitCa
	mov	ecx, DWORD PTR __gquery$17[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __gqfamily$10[ebp], edx
	mov	eax, DWORD PTR __gqfamily$10[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR __gqfamily$10[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN17@FTC_SBitCa:
	mov	eax, DWORD PTR _cache$[ebp]
	mov	DWORD PTR __cache$6[ebp], eax
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR __hash$5[ebp], ecx
	mov	DWORD PTR __nodcomp$4[ebp], OFFSET _FTC_SNode_Compare
	mov	BYTE PTR __list_changed$3[ebp], 0
	mov	DWORD PTR _error$[ebp], 0
	mov	DWORD PTR _node$[ebp], 0
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR __hash$5[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __cache$6[ebp]
	cmp	eax, DWORD PTR [ecx]
	jae	SHORT $LN43@FTC_SBitCa
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+eax+1]
	and	ecx, DWORD PTR __hash$5[ebp]
	mov	DWORD PTR tv200[ebp], ecx
	jmp	SHORT $LN44@FTC_SBitCa
$LN43@FTC_SBitCa:
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR __hash$5[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv200[ebp], eax
$LN44@FTC_SBitCa:
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR tv200[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR __pnode$8[ebp], ecx
	mov	edx, DWORD PTR __pnode$8[ebp]
	mov	DWORD PTR __bucket$9[ebp], edx
$LN14@FTC_SBitCa:
	mov	eax, DWORD PTR __pnode$8[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __node$7[ebp], ecx
	cmp	DWORD PTR __node$7[ebp], 0
	jne	SHORT $LN12@FTC_SBitCa
	jmp	$_NewNode$54
$LN12@FTC_SBitCa:
	mov	edx, DWORD PTR __node$7[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR __hash$5[ebp]
	jne	SHORT $LN11@FTC_SBitCa
	mov	esi, esp
	lea	ecx, DWORD PTR __list_changed$3[ebp]
	push	ecx
	mov	edx, DWORD PTR __cache$6[ebp]
	push	edx
	lea	eax, DWORD PTR _query$[ebp]
	push	eax
	mov	ecx, DWORD PTR __node$7[ebp]
	push	ecx
	call	DWORD PTR __nodcomp$4[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@FTC_SBitCa
	jmp	SHORT $LN13@FTC_SBitCa
$LN11@FTC_SBitCa:
	mov	eax, DWORD PTR __node$7[ebp]
	add	eax, 8
	mov	DWORD PTR __pnode$8[ebp], eax
	jmp	SHORT $LN14@FTC_SBitCa
$LN13@FTC_SBitCa:
	movzx	ecx, BYTE PTR __list_changed$3[ebp]
	test	ecx, ecx
	je	SHORT $LN10@FTC_SBitCa
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR __hash$5[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __cache$6[ebp]
	cmp	eax, DWORD PTR [ecx]
	jae	SHORT $LN45@FTC_SBitCa
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+eax+1]
	and	ecx, DWORD PTR __hash$5[ebp]
	mov	DWORD PTR tv227[ebp], ecx
	jmp	SHORT $LN46@FTC_SBitCa
$LN45@FTC_SBitCa:
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR __hash$5[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv227[ebp], eax
$LN46@FTC_SBitCa:
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR tv227[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR __pnode$8[ebp], ecx
	mov	edx, DWORD PTR __pnode$8[ebp]
	mov	DWORD PTR __bucket$9[ebp], edx
$LN9@FTC_SBitCa:
	mov	eax, DWORD PTR __pnode$8[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __node$7[ebp]
	je	SHORT $LN10@FTC_SBitCa
	mov	edx, DWORD PTR __pnode$8[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN7@FTC_SBitCa
	push	OFFSET $SG9515
	call	_FT_Message
	add	esp, 4
	jmp	SHORT $_NewNode$54
	jmp	SHORT $LN6@FTC_SBitCa
$LN7@FTC_SBitCa:
	mov	eax, DWORD PTR __pnode$8[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	DWORD PTR __pnode$8[ebp], ecx
$LN6@FTC_SBitCa:
	jmp	SHORT $LN9@FTC_SBitCa
$LN10@FTC_SBitCa:
	mov	edx, DWORD PTR __bucket$9[ebp]
	mov	eax, DWORD PTR __node$7[ebp]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN5@FTC_SBitCa
	mov	ecx, DWORD PTR __pnode$8[ebp]
	mov	edx, DWORD PTR __node$7[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __node$7[ebp]
	mov	edx, DWORD PTR __bucket$9[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR __bucket$9[ebp]
	mov	edx, DWORD PTR __node$7[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@FTC_SBitCa:
	mov	eax, DWORD PTR __cache$6[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR __manager$2[ebp], ecx
	mov	edx, DWORD PTR __manager$2[ebp]
	add	edx, 8
	mov	DWORD PTR __nl$1[ebp], edx
	mov	eax, DWORD PTR __manager$2[ebp]
	mov	ecx, DWORD PTR __node$7[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN4@FTC_SBitCa
	mov	edx, DWORD PTR __node$7[ebp]
	push	edx
	mov	eax, DWORD PTR __nl$1[ebp]
	push	eax
	call	_FTC_MruNode_Up
	add	esp, 8
$LN4@FTC_SBitCa:
	jmp	SHORT $_Ok$55
$_NewNode$54:
	lea	ecx, DWORD PTR __node$7[ebp]
	push	ecx
	lea	edx, DWORD PTR _query$[ebp]
	push	edx
	mov	eax, DWORD PTR __hash$5[ebp]
	push	eax
	mov	ecx, DWORD PTR __cache$6[ebp]
	push	ecx
	call	_FTC_Cache_NewNode
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$_Ok$55:
	mov	edx, DWORD PTR __node$7[ebp]
	mov	DWORD PTR _node$[ebp], edx
	xor	eax, eax
	jne	$LN17@FTC_SBitCa
	mov	ecx, DWORD PTR __gqfamily$10[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	mov	DWORD PTR tv251[ebp], edx
	mov	eax, DWORD PTR __gqfamily$10[ebp]
	mov	ecx, DWORD PTR tv251[ebp]
	mov	DWORD PTR [eax+8], ecx
	cmp	DWORD PTR tv251[ebp], 0
	jne	SHORT $LN29@FTC_SBitCa
	mov	edx, DWORD PTR __gqfamily$10[ebp]
	push	edx
	mov	eax, DWORD PTR __gcache$18[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_FTC_MruList_Remove
	add	esp, 8
$LN29@FTC_SBitCa:
	xor	ecx, ecx
	jne	$LN30@FTC_SBitCa
; Line 576
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FTC_SBitCa
; Line 577
	jmp	SHORT $Exit$56
$LN2@FTC_SBitCa:
; Line 580
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	sub	eax, DWORD PTR [edx+24]
	shl	eax, 4
	mov	ecx, DWORD PTR _node$[ebp]
	lea	edx, DWORD PTR [ecx+eax+32]
	mov	eax, DWORD PTR _ansbit$[ebp]
	mov	DWORD PTR [eax], edx
; Line 582
	cmp	DWORD PTR _anode$[ebp], 0
	je	SHORT $Exit$56
; Line 584
	mov	ecx, DWORD PTR _anode$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 585
	mov	eax, DWORD PTR _node$[ebp]
	mov	cx, WORD PTR [eax+18]
	add	cx, 1
	mov	edx, DWORD PTR _node$[ebp]
	mov	WORD PTR [edx+18], cx
$Exit$56:
; Line 589
	mov	eax, DWORD PTR _error$[ebp]
$LN39@FTC_SBitCa:
; Line 590
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN52@FTC_SBitCa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 168				; 000000a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN52@FTC_SBitCa:
	DD	4
	DD	$LN51@FTC_SBitCa
$LN51@FTC_SBitCa:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN47@FTC_SBitCa
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN48@FTC_SBitCa
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN49@FTC_SBitCa
	DD	-137					; ffffff77H
	DD	1
	DD	$LN50@FTC_SBitCa
$LN50@FTC_SBitCa:
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN49@FTC_SBitCa:
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN48@FTC_SBitCa:
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN47@FTC_SBitCa:
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
_FTC_SBitCache_LookupScaler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv254 = -168						; size = 4
tv230 = -164						; size = 4
tv203 = -160						; size = 4
tv128 = -156						; size = 4
__nl$1 = -152						; size = 4
__manager$2 = -148					; size = 4
__list_changed$3 = -137					; size = 1
__nodcomp$4 = -132					; size = 4
__hash$5 = -128						; size = 4
__cache$6 = -124					; size = 4
__node$7 = -116						; size = 4
__pnode$8 = -108					; size = 4
__bucket$9 = -104					; size = 4
__gqfamily$10 = -100					; size = 4
__node$11 = -96						; size = 4
__first$12 = -92					; size = 4
__compare$13 = -88					; size = 4
__pfirst$14 = -84					; size = 4
__mrunode$15 = -76					; size = 4
__fcompare$16 = -68					; size = 4
__gquery$17 = -64					; size = 4
__gcache$18 = -60					; size = 4
_hash$ = -56						; size = 4
_node$ = -52						; size = 4
_query$ = -44						; size = 36
_error$ = -4						; size = 4
_cache$ = 8						; size = 4
_type$ = 12						; size = 4
_gindex$ = 16						; size = 4
_ansbit$ = 20						; size = 4
_anode$ = 24						; size = 4
_FTC_SBitCache_Lookup PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 465
	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-168]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 468
	mov	DWORD PTR _node$[ebp], 0
; Line 472
	cmp	DWORD PTR _anode$[ebp], 0
	je	SHORT $LN37@FTC_SBitCa
; Line 473
	mov	eax, DWORD PTR _anode$[ebp]
	mov	DWORD PTR [eax], 0
$LN37@FTC_SBitCa:
; Line 476
	cmp	DWORD PTR _ansbit$[ebp], 0
	jne	SHORT $LN36@FTC_SBitCa
; Line 477
	push	OFFSET $SG9334
	push	477					; 000001ddH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN38@FTC_SBitCa
$LN36@FTC_SBitCa:
; Line 479
	mov	ecx, DWORD PTR _ansbit$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 481
	mov	edx, DWORD PTR _type$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, -2147483648			; 80000000H
	cmp	eax, -1
	jbe	SHORT $LN35@FTC_SBitCa
$LN34@FTC_SBitCa:
; Line 484
	mov	ecx, 4
	imul	edx, ecx, 17
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN33@FTC_SBitCa
	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 0
	push	ecx
	push	OFFSET $SG9343
	call	_FT_Message
	add	esp, 8
$LN33@FTC_SBitCa:
	xor	edx, edx
	jne	SHORT $LN34@FTC_SBitCa
$LN35@FTC_SBitCa:
; Line 486
	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _query$[ebp+8], ecx
; Line 487
	mov	edx, DWORD PTR _type$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _query$[ebp+12], eax
; Line 488
	mov	ecx, DWORD PTR _type$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _query$[ebp+16], edx
; Line 489
	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _query$[ebp+32], ecx
; Line 491
	mov	DWORD PTR _query$[ebp+20], 1
; Line 492
	mov	DWORD PTR _query$[ebp+24], 0
; Line 493
	mov	DWORD PTR _query$[ebp+28], 0
; Line 497
	cmp	DWORD PTR _query$[ebp+20], 0
	je	SHORT $LN40@FTC_SBitCa
	mov	DWORD PTR tv128[ebp], 0
	jmp	SHORT $LN41@FTC_SBitCa
$LN40@FTC_SBitCa:
	imul	edx, DWORD PTR _query$[ebp+24], 33
	imul	eax, DWORD PTR _query$[ebp+28], 61
	xor	edx, eax
	mov	DWORD PTR tv128[ebp], edx
$LN41@FTC_SBitCa:
	mov	ecx, DWORD PTR _query$[ebp+8]
	sar	ecx, 3
	mov	edx, DWORD PTR _query$[ebp+8]
	shl	edx, 7
	xor	ecx, edx
	add	ecx, DWORD PTR _query$[ebp+12]
	imul	eax, DWORD PTR _query$[ebp+16], 7
	add	ecx, DWORD PTR tv128[ebp]
	add	eax, ecx
	imul	ecx, DWORD PTR _query$[ebp+32], 31
	add	eax, ecx
	mov	edx, DWORD PTR _gindex$[ebp]
	shr	edx, 4
	add	eax, edx
	mov	DWORD PTR _hash$[ebp], eax
$LN30@FTC_SBitCa:
; Line 506
	mov	eax, DWORD PTR _cache$[ebp]
	mov	DWORD PTR __gcache$18[ebp], eax
	lea	ecx, DWORD PTR _query$[ebp]
	mov	DWORD PTR __gquery$17[ebp], ecx
	mov	DWORD PTR __fcompare$16[ebp], OFFSET _ftc_basic_family_compare
	mov	edx, DWORD PTR __gquery$17[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [edx], eax
$LN27@FTC_SBitCa:
	mov	ecx, DWORD PTR __gcache$18[ebp]
	add	ecx, 72					; 00000048H
	mov	DWORD PTR __pfirst$14[ebp], ecx
	mov	edx, DWORD PTR __fcompare$16[ebp]
	mov	DWORD PTR __compare$13[ebp], edx
	mov	DWORD PTR _error$[ebp], 0
	mov	eax, DWORD PTR __pfirst$14[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __first$12[ebp], ecx
	mov	DWORD PTR __node$11[ebp], 0
	cmp	DWORD PTR __first$12[ebp], 0
	je	SHORT $LN24@FTC_SBitCa
	mov	edx, DWORD PTR __first$12[ebp]
	mov	DWORD PTR __node$11[ebp], edx
$LN23@FTC_SBitCa:
	mov	esi, esp
	mov	eax, DWORD PTR __gquery$17[ebp]
	push	eax
	mov	ecx, DWORD PTR __node$11[ebp]
	push	ecx
	call	DWORD PTR __compare$13[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN20@FTC_SBitCa
	mov	eax, DWORD PTR __node$11[ebp]
	cmp	eax, DWORD PTR __first$12[ebp]
	je	SHORT $LN19@FTC_SBitCa
	mov	ecx, DWORD PTR __node$11[ebp]
	push	ecx
	mov	edx, DWORD PTR __pfirst$14[ebp]
	push	edx
	call	_FTC_MruNode_Up
	add	esp, 8
$LN19@FTC_SBitCa:
	mov	eax, DWORD PTR __node$11[ebp]
	mov	DWORD PTR __mrunode$15[ebp], eax
	jmp	SHORT $_MruOk$52
$LN20@FTC_SBitCa:
	mov	ecx, DWORD PTR __node$11[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __node$11[ebp], edx
	mov	eax, DWORD PTR __node$11[ebp]
	cmp	eax, DWORD PTR __first$12[ebp]
	jne	SHORT $LN23@FTC_SBitCa
$LN24@FTC_SBitCa:
	lea	ecx, DWORD PTR __mrunode$15[ebp]
	push	ecx
	mov	edx, DWORD PTR __gquery$17[ebp]
	push	edx
	mov	eax, DWORD PTR __gcache$18[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_FTC_MruList_New
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$_MruOk$52:
	xor	ecx, ecx
	jne	$LN27@FTC_SBitCa
	mov	edx, DWORD PTR __gquery$17[ebp]
	mov	eax, DWORD PTR __mrunode$15[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN29@FTC_SBitCa
	mov	ecx, DWORD PTR __gquery$17[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __gqfamily$10[ebp], edx
	mov	eax, DWORD PTR __gqfamily$10[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR __gqfamily$10[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN17@FTC_SBitCa:
	mov	eax, DWORD PTR _cache$[ebp]
	mov	DWORD PTR __cache$6[ebp], eax
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR __hash$5[ebp], ecx
	mov	DWORD PTR __nodcomp$4[ebp], OFFSET _FTC_SNode_Compare
	mov	BYTE PTR __list_changed$3[ebp], 0
	mov	DWORD PTR _error$[ebp], 0
	mov	DWORD PTR _node$[ebp], 0
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR __hash$5[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __cache$6[ebp]
	cmp	eax, DWORD PTR [ecx]
	jae	SHORT $LN42@FTC_SBitCa
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+eax+1]
	and	ecx, DWORD PTR __hash$5[ebp]
	mov	DWORD PTR tv203[ebp], ecx
	jmp	SHORT $LN43@FTC_SBitCa
$LN42@FTC_SBitCa:
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR __hash$5[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv203[ebp], eax
$LN43@FTC_SBitCa:
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR tv203[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR __pnode$8[ebp], ecx
	mov	edx, DWORD PTR __pnode$8[ebp]
	mov	DWORD PTR __bucket$9[ebp], edx
$LN14@FTC_SBitCa:
	mov	eax, DWORD PTR __pnode$8[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __node$7[ebp], ecx
	cmp	DWORD PTR __node$7[ebp], 0
	jne	SHORT $LN12@FTC_SBitCa
	jmp	$_NewNode$53
$LN12@FTC_SBitCa:
	mov	edx, DWORD PTR __node$7[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR __hash$5[ebp]
	jne	SHORT $LN11@FTC_SBitCa
	mov	esi, esp
	lea	ecx, DWORD PTR __list_changed$3[ebp]
	push	ecx
	mov	edx, DWORD PTR __cache$6[ebp]
	push	edx
	lea	eax, DWORD PTR _query$[ebp]
	push	eax
	mov	ecx, DWORD PTR __node$7[ebp]
	push	ecx
	call	DWORD PTR __nodcomp$4[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@FTC_SBitCa
	jmp	SHORT $LN13@FTC_SBitCa
$LN11@FTC_SBitCa:
	mov	eax, DWORD PTR __node$7[ebp]
	add	eax, 8
	mov	DWORD PTR __pnode$8[ebp], eax
	jmp	SHORT $LN14@FTC_SBitCa
$LN13@FTC_SBitCa:
	movzx	ecx, BYTE PTR __list_changed$3[ebp]
	test	ecx, ecx
	je	SHORT $LN10@FTC_SBitCa
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR __hash$5[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __cache$6[ebp]
	cmp	eax, DWORD PTR [ecx]
	jae	SHORT $LN44@FTC_SBitCa
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+eax+1]
	and	ecx, DWORD PTR __hash$5[ebp]
	mov	DWORD PTR tv230[ebp], ecx
	jmp	SHORT $LN45@FTC_SBitCa
$LN44@FTC_SBitCa:
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR __hash$5[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv230[ebp], eax
$LN45@FTC_SBitCa:
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR tv230[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR __pnode$8[ebp], ecx
	mov	edx, DWORD PTR __pnode$8[ebp]
	mov	DWORD PTR __bucket$9[ebp], edx
$LN9@FTC_SBitCa:
	mov	eax, DWORD PTR __pnode$8[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __node$7[ebp]
	je	SHORT $LN10@FTC_SBitCa
	mov	edx, DWORD PTR __pnode$8[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN7@FTC_SBitCa
	push	OFFSET $SG9406
	call	_FT_Message
	add	esp, 4
	jmp	SHORT $_NewNode$53
	jmp	SHORT $LN6@FTC_SBitCa
$LN7@FTC_SBitCa:
	mov	eax, DWORD PTR __pnode$8[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	DWORD PTR __pnode$8[ebp], ecx
$LN6@FTC_SBitCa:
	jmp	SHORT $LN9@FTC_SBitCa
$LN10@FTC_SBitCa:
	mov	edx, DWORD PTR __bucket$9[ebp]
	mov	eax, DWORD PTR __node$7[ebp]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN5@FTC_SBitCa
	mov	ecx, DWORD PTR __pnode$8[ebp]
	mov	edx, DWORD PTR __node$7[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __node$7[ebp]
	mov	edx, DWORD PTR __bucket$9[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR __bucket$9[ebp]
	mov	edx, DWORD PTR __node$7[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@FTC_SBitCa:
	mov	eax, DWORD PTR __cache$6[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR __manager$2[ebp], ecx
	mov	edx, DWORD PTR __manager$2[ebp]
	add	edx, 8
	mov	DWORD PTR __nl$1[ebp], edx
	mov	eax, DWORD PTR __manager$2[ebp]
	mov	ecx, DWORD PTR __node$7[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN4@FTC_SBitCa
	mov	edx, DWORD PTR __node$7[ebp]
	push	edx
	mov	eax, DWORD PTR __nl$1[ebp]
	push	eax
	call	_FTC_MruNode_Up
	add	esp, 8
$LN4@FTC_SBitCa:
	jmp	SHORT $_Ok$54
$_NewNode$53:
	lea	ecx, DWORD PTR __node$7[ebp]
	push	ecx
	lea	edx, DWORD PTR _query$[ebp]
	push	edx
	mov	eax, DWORD PTR __hash$5[ebp]
	push	eax
	mov	ecx, DWORD PTR __cache$6[ebp]
	push	ecx
	call	_FTC_Cache_NewNode
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$_Ok$54:
	mov	edx, DWORD PTR __node$7[ebp]
	mov	DWORD PTR _node$[ebp], edx
	xor	eax, eax
	jne	$LN17@FTC_SBitCa
	mov	ecx, DWORD PTR __gqfamily$10[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	mov	DWORD PTR tv254[ebp], edx
	mov	eax, DWORD PTR __gqfamily$10[ebp]
	mov	ecx, DWORD PTR tv254[ebp]
	mov	DWORD PTR [eax+8], ecx
	cmp	DWORD PTR tv254[ebp], 0
	jne	SHORT $LN29@FTC_SBitCa
	mov	edx, DWORD PTR __gqfamily$10[ebp]
	push	edx
	mov	eax, DWORD PTR __gcache$18[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_FTC_MruList_Remove
	add	esp, 8
$LN29@FTC_SBitCa:
	xor	ecx, ecx
	jne	$LN30@FTC_SBitCa
; Line 514
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@FTC_SBitCa
; Line 515
	jmp	SHORT $Exit$55
$LN2@FTC_SBitCa:
; Line 518
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	sub	eax, DWORD PTR [edx+24]
	shl	eax, 4
	mov	ecx, DWORD PTR _node$[ebp]
	lea	edx, DWORD PTR [ecx+eax+32]
	mov	eax, DWORD PTR _ansbit$[ebp]
	mov	DWORD PTR [eax], edx
; Line 520
	cmp	DWORD PTR _anode$[ebp], 0
	je	SHORT $Exit$55
; Line 522
	mov	ecx, DWORD PTR _anode$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 523
	mov	eax, DWORD PTR _node$[ebp]
	mov	cx, WORD PTR [eax+18]
	add	cx, 1
	mov	edx, DWORD PTR _node$[ebp]
	mov	WORD PTR [edx+18], cx
$Exit$55:
; Line 527
	mov	eax, DWORD PTR _error$[ebp]
$LN38@FTC_SBitCa:
; Line 528
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN51@FTC_SBitCa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 168				; 000000a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN51@FTC_SBitCa:
	DD	4
	DD	$LN50@FTC_SBitCa
$LN50@FTC_SBitCa:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN46@FTC_SBitCa
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN47@FTC_SBitCa
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN48@FTC_SBitCa
	DD	-137					; ffffff77H
	DD	1
	DD	$LN49@FTC_SBitCa
$LN49@FTC_SBitCa:
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN48@FTC_SBitCa:
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN47@FTC_SBitCa:
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN46@FTC_SBitCa:
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
_FTC_SBitCache_Lookup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_manager$ = 8						; size = 4
_acache$ = 12						; size = 4
_FTC_SBitCache_New PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 451
	push	ebp
	mov	ebp, esp
; Line 453
	mov	eax, DWORD PTR _acache$[ebp]
	push	eax
	push	OFFSET _ftc_basic_sbit_cache_class
	mov	ecx, DWORD PTR _manager$[ebp]
	push	ecx
	call	_FTC_GCache_New
	add	esp, 12					; 0000000cH
; Line 454
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_SBitCache_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv250 = -168						; size = 4
tv226 = -164						; size = 4
tv199 = -160						; size = 4
tv93 = -156						; size = 4
__nl$1 = -152						; size = 4
__manager$2 = -148					; size = 4
__list_changed$3 = -137					; size = 1
__nodcomp$4 = -132					; size = 4
__hash$5 = -128						; size = 4
__cache$6 = -124					; size = 4
__node$7 = -116						; size = 4
__pnode$8 = -108					; size = 4
__bucket$9 = -104					; size = 4
__gqfamily$10 = -100					; size = 4
__node$11 = -96						; size = 4
__first$12 = -92					; size = 4
__compare$13 = -88					; size = 4
__pfirst$14 = -84					; size = 4
__mrunode$15 = -76					; size = 4
__fcompare$16 = -68					; size = 4
__gquery$17 = -64					; size = 4
__gcache$18 = -60					; size = 4
_hash$ = -56						; size = 4
_error$ = -52						; size = 4
_node$ = -48						; size = 4
_query$ = -40						; size = 36
_cache$ = 8						; size = 4
_scaler$ = 12						; size = 4
_load_flags$ = 16					; size = 4
_gindex$ = 20						; size = 4
_aglyph$ = 24						; size = 4
_anode$ = 28						; size = 4
_FTC_ImageCache_LookupScaler PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 355
	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-168]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 357
	mov	DWORD PTR _node$[ebp], 0
; Line 363
	cmp	DWORD PTR _aglyph$[ebp], 0
	je	SHORT $LN37@FTC_ImageC
	cmp	DWORD PTR _scaler$[ebp], 0
	jne	SHORT $LN38@FTC_ImageC
$LN37@FTC_ImageC:
; Line 365
	push	OFFSET $SG9216
	push	365					; 0000016dH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 366
	jmp	$Exit$53
$LN38@FTC_ImageC:
; Line 369
	mov	eax, DWORD PTR _aglyph$[ebp]
	mov	DWORD PTR [eax], 0
; Line 370
	cmp	DWORD PTR _anode$[ebp], 0
	je	SHORT $LN36@FTC_ImageC
; Line 371
	mov	ecx, DWORD PTR _anode$[ebp]
	mov	DWORD PTR [ecx], 0
$LN36@FTC_ImageC:
; Line 374
	cmp	DWORD PTR _load_flags$[ebp], -1
	jbe	SHORT $LN35@FTC_ImageC
$LN34@FTC_ImageC:
; Line 377
	mov	edx, 4
	imul	eax, edx, 17
	cmp	DWORD PTR _ft_trace_levels[eax], 1
	jl	SHORT $LN33@FTC_ImageC
	mov	ecx, DWORD PTR _load_flags$[ebp]
	and	ecx, 0
	push	ecx
	push	OFFSET $SG9227
	call	_FT_Message
	add	esp, 8
$LN33@FTC_ImageC:
	xor	edx, edx
	jne	SHORT $LN34@FTC_ImageC
$LN35@FTC_ImageC:
; Line 379
	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _scaler$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _query$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _query$[ebp+12], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _query$[ebp+16], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _query$[ebp+20], eax
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _query$[ebp+24], edx
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _query$[ebp+28], eax
; Line 380
	mov	ecx, DWORD PTR _load_flags$[ebp]
	mov	DWORD PTR _query$[ebp+32], ecx
; Line 382
	cmp	DWORD PTR _query$[ebp+20], 0
	je	SHORT $LN41@FTC_ImageC
	mov	DWORD PTR tv93[ebp], 0
	jmp	SHORT $LN42@FTC_ImageC
$LN41@FTC_ImageC:
	imul	edx, DWORD PTR _query$[ebp+24], 33
	imul	eax, DWORD PTR _query$[ebp+28], 61
	xor	edx, eax
	mov	DWORD PTR tv93[ebp], edx
$LN42@FTC_ImageC:
	mov	ecx, DWORD PTR _query$[ebp+8]
	sar	ecx, 3
	mov	edx, DWORD PTR _query$[ebp+8]
	shl	edx, 7
	xor	ecx, edx
	add	ecx, DWORD PTR _query$[ebp+12]
	imul	eax, DWORD PTR _query$[ebp+16], 7
	add	ecx, DWORD PTR tv93[ebp]
	add	eax, ecx
	imul	ecx, DWORD PTR _query$[ebp+32], 31
	add	eax, DWORD PTR _gindex$[ebp]
	add	ecx, eax
	mov	DWORD PTR _hash$[ebp], ecx
$LN30@FTC_ImageC:
; Line 390
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR __gcache$18[ebp], edx
	lea	eax, DWORD PTR _query$[ebp]
	mov	DWORD PTR __gquery$17[ebp], eax
	mov	DWORD PTR __fcompare$16[ebp], OFFSET _ftc_basic_family_compare
	mov	ecx, DWORD PTR __gquery$17[ebp]
	mov	edx, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [ecx], edx
$LN27@FTC_ImageC:
	mov	eax, DWORD PTR __gcache$18[ebp]
	add	eax, 72					; 00000048H
	mov	DWORD PTR __pfirst$14[ebp], eax
	mov	ecx, DWORD PTR __fcompare$16[ebp]
	mov	DWORD PTR __compare$13[ebp], ecx
	mov	DWORD PTR _error$[ebp], 0
	mov	edx, DWORD PTR __pfirst$14[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __first$12[ebp], eax
	mov	DWORD PTR __node$11[ebp], 0
	cmp	DWORD PTR __first$12[ebp], 0
	je	SHORT $LN24@FTC_ImageC
	mov	ecx, DWORD PTR __first$12[ebp]
	mov	DWORD PTR __node$11[ebp], ecx
$LN23@FTC_ImageC:
	mov	esi, esp
	mov	edx, DWORD PTR __gquery$17[ebp]
	push	edx
	mov	eax, DWORD PTR __node$11[ebp]
	push	eax
	call	DWORD PTR __compare$13[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@FTC_ImageC
	mov	edx, DWORD PTR __node$11[ebp]
	cmp	edx, DWORD PTR __first$12[ebp]
	je	SHORT $LN19@FTC_ImageC
	mov	eax, DWORD PTR __node$11[ebp]
	push	eax
	mov	ecx, DWORD PTR __pfirst$14[ebp]
	push	ecx
	call	_FTC_MruNode_Up
	add	esp, 8
$LN19@FTC_ImageC:
	mov	edx, DWORD PTR __node$11[ebp]
	mov	DWORD PTR __mrunode$15[ebp], edx
	jmp	SHORT $_MruOk$54
$LN20@FTC_ImageC:
	mov	eax, DWORD PTR __node$11[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __node$11[ebp], ecx
	mov	edx, DWORD PTR __node$11[ebp]
	cmp	edx, DWORD PTR __first$12[ebp]
	jne	SHORT $LN23@FTC_ImageC
$LN24@FTC_ImageC:
	lea	eax, DWORD PTR __mrunode$15[ebp]
	push	eax
	mov	ecx, DWORD PTR __gquery$17[ebp]
	push	ecx
	mov	edx, DWORD PTR __gcache$18[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_FTC_MruList_New
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$_MruOk$54:
	xor	eax, eax
	jne	$LN27@FTC_ImageC
	mov	ecx, DWORD PTR __gquery$17[ebp]
	mov	edx, DWORD PTR __mrunode$15[ebp]
	mov	DWORD PTR [ecx+4], edx
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN29@FTC_ImageC
	mov	eax, DWORD PTR __gquery$17[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __gqfamily$10[ebp], ecx
	mov	edx, DWORD PTR __gqfamily$10[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR __gqfamily$10[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN17@FTC_ImageC:
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR __cache$6[ebp], edx
	mov	eax, DWORD PTR _hash$[ebp]
	mov	DWORD PTR __hash$5[ebp], eax
	mov	DWORD PTR __nodcomp$4[ebp], OFFSET _FTC_GNode_Compare
	mov	BYTE PTR __list_changed$3[ebp], 0
	mov	DWORD PTR _error$[ebp], 0
	mov	DWORD PTR _node$[ebp], 0
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR __hash$5[ebp]
	and	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __cache$6[ebp]
	cmp	edx, DWORD PTR [eax]
	jae	SHORT $LN43@FTC_ImageC
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+edx+1]
	and	eax, DWORD PTR __hash$5[ebp]
	mov	DWORD PTR tv199[ebp], eax
	jmp	SHORT $LN44@FTC_ImageC
$LN43@FTC_ImageC:
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR __hash$5[ebp]
	and	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv199[ebp], edx
$LN44@FTC_ImageC:
	mov	eax, DWORD PTR __cache$6[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR tv199[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR __pnode$8[ebp], eax
	mov	ecx, DWORD PTR __pnode$8[ebp]
	mov	DWORD PTR __bucket$9[ebp], ecx
$LN14@FTC_ImageC:
	mov	edx, DWORD PTR __pnode$8[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __node$7[ebp], eax
	cmp	DWORD PTR __node$7[ebp], 0
	jne	SHORT $LN12@FTC_ImageC
	jmp	$_NewNode$55
$LN12@FTC_ImageC:
	mov	ecx, DWORD PTR __node$7[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR __hash$5[ebp]
	jne	SHORT $LN11@FTC_ImageC
	mov	esi, esp
	lea	eax, DWORD PTR __list_changed$3[ebp]
	push	eax
	mov	ecx, DWORD PTR __cache$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _query$[ebp]
	push	edx
	mov	eax, DWORD PTR __node$7[ebp]
	push	eax
	call	DWORD PTR __nodcomp$4[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@FTC_ImageC
	jmp	SHORT $LN13@FTC_ImageC
$LN11@FTC_ImageC:
	mov	edx, DWORD PTR __node$7[ebp]
	add	edx, 8
	mov	DWORD PTR __pnode$8[ebp], edx
	jmp	SHORT $LN14@FTC_ImageC
$LN13@FTC_ImageC:
	movzx	eax, BYTE PTR __list_changed$3[ebp]
	test	eax, eax
	je	SHORT $LN10@FTC_ImageC
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR __hash$5[ebp]
	and	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __cache$6[ebp]
	cmp	edx, DWORD PTR [eax]
	jae	SHORT $LN45@FTC_ImageC
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+edx+1]
	and	eax, DWORD PTR __hash$5[ebp]
	mov	DWORD PTR tv226[ebp], eax
	jmp	SHORT $LN46@FTC_ImageC
$LN45@FTC_ImageC:
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR __hash$5[ebp]
	and	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv226[ebp], edx
$LN46@FTC_ImageC:
	mov	eax, DWORD PTR __cache$6[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR tv226[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR __pnode$8[ebp], eax
	mov	ecx, DWORD PTR __pnode$8[ebp]
	mov	DWORD PTR __bucket$9[ebp], ecx
$LN9@FTC_ImageC:
	mov	edx, DWORD PTR __pnode$8[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __node$7[ebp]
	je	SHORT $LN10@FTC_ImageC
	mov	ecx, DWORD PTR __pnode$8[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN7@FTC_ImageC
	push	OFFSET $SG9290
	call	_FT_Message
	add	esp, 4
	jmp	SHORT $_NewNode$55
	jmp	SHORT $LN6@FTC_ImageC
$LN7@FTC_ImageC:
	mov	edx, DWORD PTR __pnode$8[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 8
	mov	DWORD PTR __pnode$8[ebp], eax
$LN6@FTC_ImageC:
	jmp	SHORT $LN9@FTC_ImageC
$LN10@FTC_ImageC:
	mov	ecx, DWORD PTR __bucket$9[ebp]
	mov	edx, DWORD PTR __node$7[ebp]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN5@FTC_ImageC
	mov	eax, DWORD PTR __pnode$8[ebp]
	mov	ecx, DWORD PTR __node$7[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR __node$7[ebp]
	mov	ecx, DWORD PTR __bucket$9[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR __bucket$9[ebp]
	mov	ecx, DWORD PTR __node$7[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@FTC_ImageC:
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR __manager$2[ebp], eax
	mov	ecx, DWORD PTR __manager$2[ebp]
	add	ecx, 8
	mov	DWORD PTR __nl$1[ebp], ecx
	mov	edx, DWORD PTR __manager$2[ebp]
	mov	eax, DWORD PTR __node$7[ebp]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN4@FTC_ImageC
	mov	ecx, DWORD PTR __node$7[ebp]
	push	ecx
	mov	edx, DWORD PTR __nl$1[ebp]
	push	edx
	call	_FTC_MruNode_Up
	add	esp, 8
$LN4@FTC_ImageC:
	jmp	SHORT $_Ok$56
$_NewNode$55:
	lea	eax, DWORD PTR __node$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _query$[ebp]
	push	ecx
	mov	edx, DWORD PTR __hash$5[ebp]
	push	edx
	mov	eax, DWORD PTR __cache$6[ebp]
	push	eax
	call	_FTC_Cache_NewNode
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$_Ok$56:
	mov	ecx, DWORD PTR __node$7[ebp]
	mov	DWORD PTR _node$[ebp], ecx
	xor	edx, edx
	jne	$LN17@FTC_ImageC
	mov	eax, DWORD PTR __gqfamily$10[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv250[ebp], ecx
	mov	edx, DWORD PTR __gqfamily$10[ebp]
	mov	eax, DWORD PTR tv250[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv250[ebp], 0
	jne	SHORT $LN29@FTC_ImageC
	mov	ecx, DWORD PTR __gqfamily$10[ebp]
	push	ecx
	mov	edx, DWORD PTR __gcache$18[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_FTC_MruList_Remove
	add	esp, 8
$LN29@FTC_ImageC:
	xor	eax, eax
	jne	$LN30@FTC_ImageC
; Line 391
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $Exit$53
; Line 393
	mov	ecx, DWORD PTR _aglyph$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx], eax
; Line 395
	cmp	DWORD PTR _anode$[ebp], 0
	je	SHORT $Exit$53
; Line 397
	mov	ecx, DWORD PTR _anode$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 398
	mov	eax, DWORD PTR _node$[ebp]
	mov	cx, WORD PTR [eax+18]
	add	cx, 1
	mov	edx, DWORD PTR _node$[ebp]
	mov	WORD PTR [edx+18], cx
$Exit$53:
; Line 403
	mov	eax, DWORD PTR _error$[ebp]
; Line 404
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN52@FTC_ImageC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 168				; 000000a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN52@FTC_ImageC:
	DD	4
	DD	$LN51@FTC_ImageC
$LN51@FTC_ImageC:
	DD	-40					; ffffffd8H
	DD	36					; 00000024H
	DD	$LN47@FTC_ImageC
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN48@FTC_ImageC
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN49@FTC_ImageC
	DD	-137					; ffffff77H
	DD	1
	DD	$LN50@FTC_ImageC
$LN50@FTC_ImageC:
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN49@FTC_ImageC:
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN48@FTC_ImageC:
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN47@FTC_ImageC:
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
_FTC_ImageCache_LookupScaler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv253 = -168						; size = 4
tv229 = -164						; size = 4
tv202 = -160						; size = 4
tv128 = -156						; size = 4
__nl$1 = -152						; size = 4
__manager$2 = -148					; size = 4
__list_changed$3 = -137					; size = 1
__nodcomp$4 = -132					; size = 4
__hash$5 = -128						; size = 4
__cache$6 = -124					; size = 4
__node$7 = -116						; size = 4
__pnode$8 = -108					; size = 4
__bucket$9 = -104					; size = 4
__gqfamily$10 = -100					; size = 4
__node$11 = -96						; size = 4
__first$12 = -92					; size = 4
__compare$13 = -88					; size = 4
__pfirst$14 = -84					; size = 4
__mrunode$15 = -76					; size = 4
__fcompare$16 = -68					; size = 4
__gquery$17 = -64					; size = 4
__gcache$18 = -60					; size = 4
_hash$ = -56						; size = 4
_error$ = -52						; size = 4
_node$ = -48						; size = 4
_query$ = -40						; size = 36
_cache$ = 8						; size = 4
_type$ = 12						; size = 4
_gindex$ = 16						; size = 4
_aglyph$ = 20						; size = 4
_anode$ = 24						; size = 4
_FTC_ImageCache_Lookup PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-168]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 284
	mov	DWORD PTR _node$[ebp], 0
; Line 290
	cmp	DWORD PTR _aglyph$[ebp], 0
	jne	SHORT $LN37@FTC_ImageC
; Line 292
	push	OFFSET $SG9107
	push	292					; 00000124H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	mov	DWORD PTR _error$[ebp], eax
; Line 293
	jmp	$Exit$52
$LN37@FTC_ImageC:
; Line 296
	mov	eax, DWORD PTR _aglyph$[ebp]
	mov	DWORD PTR [eax], 0
; Line 297
	cmp	DWORD PTR _anode$[ebp], 0
	je	SHORT $LN36@FTC_ImageC
; Line 298
	mov	ecx, DWORD PTR _anode$[ebp]
	mov	DWORD PTR [ecx], 0
$LN36@FTC_ImageC:
; Line 300
	mov	edx, DWORD PTR _type$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, -2147483648			; 80000000H
	cmp	eax, -1
	jbe	SHORT $LN35@FTC_ImageC
$LN34@FTC_ImageC:
; Line 303
	mov	ecx, 4
	imul	edx, ecx, 17
	cmp	DWORD PTR _ft_trace_levels[edx], 1
	jl	SHORT $LN33@FTC_ImageC
	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 0
	push	ecx
	push	OFFSET $SG9119
	call	_FT_Message
	add	esp, 8
$LN33@FTC_ImageC:
	xor	edx, edx
	jne	SHORT $LN34@FTC_ImageC
$LN35@FTC_ImageC:
; Line 305
	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _query$[ebp+8], ecx
; Line 306
	mov	edx, DWORD PTR _type$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _query$[ebp+12], eax
; Line 307
	mov	ecx, DWORD PTR _type$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _query$[ebp+16], edx
; Line 308
	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _query$[ebp+32], ecx
; Line 310
	mov	DWORD PTR _query$[ebp+20], 1
; Line 311
	mov	DWORD PTR _query$[ebp+24], 0
; Line 312
	mov	DWORD PTR _query$[ebp+28], 0
; Line 314
	cmp	DWORD PTR _query$[ebp+20], 0
	je	SHORT $LN40@FTC_ImageC
	mov	DWORD PTR tv128[ebp], 0
	jmp	SHORT $LN41@FTC_ImageC
$LN40@FTC_ImageC:
	imul	edx, DWORD PTR _query$[ebp+24], 33
	imul	eax, DWORD PTR _query$[ebp+28], 61
	xor	edx, eax
	mov	DWORD PTR tv128[ebp], edx
$LN41@FTC_ImageC:
	mov	ecx, DWORD PTR _query$[ebp+8]
	sar	ecx, 3
	mov	edx, DWORD PTR _query$[ebp+8]
	shl	edx, 7
	xor	ecx, edx
	add	ecx, DWORD PTR _query$[ebp+12]
	imul	eax, DWORD PTR _query$[ebp+16], 7
	add	ecx, DWORD PTR tv128[ebp]
	add	eax, ecx
	imul	ecx, DWORD PTR _query$[ebp+32], 31
	add	eax, DWORD PTR _gindex$[ebp]
	add	ecx, eax
	mov	DWORD PTR _hash$[ebp], ecx
$LN30@FTC_ImageC:
; Line 323
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR __gcache$18[ebp], edx
	lea	eax, DWORD PTR _query$[ebp]
	mov	DWORD PTR __gquery$17[ebp], eax
	mov	DWORD PTR __fcompare$16[ebp], OFFSET _ftc_basic_family_compare
	mov	ecx, DWORD PTR __gquery$17[ebp]
	mov	edx, DWORD PTR _gindex$[ebp]
	mov	DWORD PTR [ecx], edx
$LN27@FTC_ImageC:
	mov	eax, DWORD PTR __gcache$18[ebp]
	add	eax, 72					; 00000048H
	mov	DWORD PTR __pfirst$14[ebp], eax
	mov	ecx, DWORD PTR __fcompare$16[ebp]
	mov	DWORD PTR __compare$13[ebp], ecx
	mov	DWORD PTR _error$[ebp], 0
	mov	edx, DWORD PTR __pfirst$14[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __first$12[ebp], eax
	mov	DWORD PTR __node$11[ebp], 0
	cmp	DWORD PTR __first$12[ebp], 0
	je	SHORT $LN24@FTC_ImageC
	mov	ecx, DWORD PTR __first$12[ebp]
	mov	DWORD PTR __node$11[ebp], ecx
$LN23@FTC_ImageC:
	mov	esi, esp
	mov	edx, DWORD PTR __gquery$17[ebp]
	push	edx
	mov	eax, DWORD PTR __node$11[ebp]
	push	eax
	call	DWORD PTR __compare$13[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@FTC_ImageC
	mov	edx, DWORD PTR __node$11[ebp]
	cmp	edx, DWORD PTR __first$12[ebp]
	je	SHORT $LN19@FTC_ImageC
	mov	eax, DWORD PTR __node$11[ebp]
	push	eax
	mov	ecx, DWORD PTR __pfirst$14[ebp]
	push	ecx
	call	_FTC_MruNode_Up
	add	esp, 8
$LN19@FTC_ImageC:
	mov	edx, DWORD PTR __node$11[ebp]
	mov	DWORD PTR __mrunode$15[ebp], edx
	jmp	SHORT $_MruOk$53
$LN20@FTC_ImageC:
	mov	eax, DWORD PTR __node$11[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __node$11[ebp], ecx
	mov	edx, DWORD PTR __node$11[ebp]
	cmp	edx, DWORD PTR __first$12[ebp]
	jne	SHORT $LN23@FTC_ImageC
$LN24@FTC_ImageC:
	lea	eax, DWORD PTR __mrunode$15[ebp]
	push	eax
	mov	ecx, DWORD PTR __gquery$17[ebp]
	push	ecx
	mov	edx, DWORD PTR __gcache$18[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_FTC_MruList_New
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$_MruOk$53:
	xor	eax, eax
	jne	$LN27@FTC_ImageC
	mov	ecx, DWORD PTR __gquery$17[ebp]
	mov	edx, DWORD PTR __mrunode$15[ebp]
	mov	DWORD PTR [ecx+4], edx
	cmp	DWORD PTR _error$[ebp], 0
	jne	$LN29@FTC_ImageC
	mov	eax, DWORD PTR __gquery$17[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __gqfamily$10[ebp], ecx
	mov	edx, DWORD PTR __gqfamily$10[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR __gqfamily$10[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN17@FTC_ImageC:
	mov	edx, DWORD PTR _cache$[ebp]
	mov	DWORD PTR __cache$6[ebp], edx
	mov	eax, DWORD PTR _hash$[ebp]
	mov	DWORD PTR __hash$5[ebp], eax
	mov	DWORD PTR __nodcomp$4[ebp], OFFSET _FTC_GNode_Compare
	mov	BYTE PTR __list_changed$3[ebp], 0
	mov	DWORD PTR _error$[ebp], 0
	mov	DWORD PTR _node$[ebp], 0
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR __hash$5[ebp]
	and	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __cache$6[ebp]
	cmp	edx, DWORD PTR [eax]
	jae	SHORT $LN42@FTC_ImageC
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+edx+1]
	and	eax, DWORD PTR __hash$5[ebp]
	mov	DWORD PTR tv202[ebp], eax
	jmp	SHORT $LN43@FTC_ImageC
$LN42@FTC_ImageC:
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR __hash$5[ebp]
	and	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv202[ebp], edx
$LN43@FTC_ImageC:
	mov	eax, DWORD PTR __cache$6[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR tv202[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR __pnode$8[ebp], eax
	mov	ecx, DWORD PTR __pnode$8[ebp]
	mov	DWORD PTR __bucket$9[ebp], ecx
$LN14@FTC_ImageC:
	mov	edx, DWORD PTR __pnode$8[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __node$7[ebp], eax
	cmp	DWORD PTR __node$7[ebp], 0
	jne	SHORT $LN12@FTC_ImageC
	jmp	$_NewNode$54
$LN12@FTC_ImageC:
	mov	ecx, DWORD PTR __node$7[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR __hash$5[ebp]
	jne	SHORT $LN11@FTC_ImageC
	mov	esi, esp
	lea	eax, DWORD PTR __list_changed$3[ebp]
	push	eax
	mov	ecx, DWORD PTR __cache$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _query$[ebp]
	push	edx
	mov	eax, DWORD PTR __node$7[ebp]
	push	eax
	call	DWORD PTR __nodcomp$4[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@FTC_ImageC
	jmp	SHORT $LN13@FTC_ImageC
$LN11@FTC_ImageC:
	mov	edx, DWORD PTR __node$7[ebp]
	add	edx, 8
	mov	DWORD PTR __pnode$8[ebp], edx
	jmp	SHORT $LN14@FTC_ImageC
$LN13@FTC_ImageC:
	movzx	eax, BYTE PTR __list_changed$3[ebp]
	test	eax, eax
	je	SHORT $LN10@FTC_ImageC
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR __hash$5[ebp]
	and	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __cache$6[ebp]
	cmp	edx, DWORD PTR [eax]
	jae	SHORT $LN44@FTC_ImageC
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+edx+1]
	and	eax, DWORD PTR __hash$5[ebp]
	mov	DWORD PTR tv229[ebp], eax
	jmp	SHORT $LN45@FTC_ImageC
$LN44@FTC_ImageC:
	mov	ecx, DWORD PTR __cache$6[ebp]
	mov	edx, DWORD PTR __hash$5[ebp]
	and	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv229[ebp], edx
$LN45@FTC_ImageC:
	mov	eax, DWORD PTR __cache$6[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR tv229[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR __pnode$8[ebp], eax
	mov	ecx, DWORD PTR __pnode$8[ebp]
	mov	DWORD PTR __bucket$9[ebp], ecx
$LN9@FTC_ImageC:
	mov	edx, DWORD PTR __pnode$8[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __node$7[ebp]
	je	SHORT $LN10@FTC_ImageC
	mov	ecx, DWORD PTR __pnode$8[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN7@FTC_ImageC
	push	OFFSET $SG9182
	call	_FT_Message
	add	esp, 4
	jmp	SHORT $_NewNode$54
	jmp	SHORT $LN6@FTC_ImageC
$LN7@FTC_ImageC:
	mov	edx, DWORD PTR __pnode$8[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 8
	mov	DWORD PTR __pnode$8[ebp], eax
$LN6@FTC_ImageC:
	jmp	SHORT $LN9@FTC_ImageC
$LN10@FTC_ImageC:
	mov	ecx, DWORD PTR __bucket$9[ebp]
	mov	edx, DWORD PTR __node$7[ebp]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN5@FTC_ImageC
	mov	eax, DWORD PTR __pnode$8[ebp]
	mov	ecx, DWORD PTR __node$7[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR __node$7[ebp]
	mov	ecx, DWORD PTR __bucket$9[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR __bucket$9[ebp]
	mov	ecx, DWORD PTR __node$7[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@FTC_ImageC:
	mov	edx, DWORD PTR __cache$6[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR __manager$2[ebp], eax
	mov	ecx, DWORD PTR __manager$2[ebp]
	add	ecx, 8
	mov	DWORD PTR __nl$1[ebp], ecx
	mov	edx, DWORD PTR __manager$2[ebp]
	mov	eax, DWORD PTR __node$7[ebp]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN4@FTC_ImageC
	mov	ecx, DWORD PTR __node$7[ebp]
	push	ecx
	mov	edx, DWORD PTR __nl$1[ebp]
	push	edx
	call	_FTC_MruNode_Up
	add	esp, 8
$LN4@FTC_ImageC:
	jmp	SHORT $_Ok$55
$_NewNode$54:
	lea	eax, DWORD PTR __node$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _query$[ebp]
	push	ecx
	mov	edx, DWORD PTR __hash$5[ebp]
	push	edx
	mov	eax, DWORD PTR __cache$6[ebp]
	push	eax
	call	_FTC_Cache_NewNode
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$_Ok$55:
	mov	ecx, DWORD PTR __node$7[ebp]
	mov	DWORD PTR _node$[ebp], ecx
	xor	edx, edx
	jne	$LN17@FTC_ImageC
	mov	eax, DWORD PTR __gqfamily$10[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv253[ebp], ecx
	mov	edx, DWORD PTR __gqfamily$10[ebp]
	mov	eax, DWORD PTR tv253[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv253[ebp], 0
	jne	SHORT $LN29@FTC_ImageC
	mov	ecx, DWORD PTR __gqfamily$10[ebp]
	push	ecx
	mov	edx, DWORD PTR __gcache$18[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_FTC_MruList_Remove
	add	esp, 8
$LN29@FTC_ImageC:
	xor	eax, eax
	jne	$LN30@FTC_ImageC
; Line 330
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $Exit$52
; Line 332
	mov	ecx, DWORD PTR _aglyph$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx], eax
; Line 334
	cmp	DWORD PTR _anode$[ebp], 0
	je	SHORT $Exit$52
; Line 336
	mov	ecx, DWORD PTR _anode$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 337
	mov	eax, DWORD PTR _node$[ebp]
	mov	cx, WORD PTR [eax+18]
	add	cx, 1
	mov	edx, DWORD PTR _node$[ebp]
	mov	WORD PTR [edx+18], cx
$Exit$52:
; Line 342
	mov	eax, DWORD PTR _error$[ebp]
; Line 343
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN51@FTC_ImageC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 168				; 000000a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN51@FTC_ImageC:
	DD	4
	DD	$LN50@FTC_ImageC
$LN50@FTC_ImageC:
	DD	-40					; ffffffd8H
	DD	36					; 00000024H
	DD	$LN46@FTC_ImageC
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN47@FTC_ImageC
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN48@FTC_ImageC
	DD	-137					; ffffff77H
	DD	1
	DD	$LN49@FTC_ImageC
$LN49@FTC_ImageC:
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN48@FTC_ImageC:
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN47@FTC_ImageC:
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN46@FTC_ImageC:
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
_FTC_ImageCache_Lookup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_manager$ = 8						; size = 4
_acache$ = 12						; size = 4
_FTC_ImageCache_New PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcbasic.c
; Line 268
	push	ebp
	mov	ebp, esp
; Line 270
	mov	eax, DWORD PTR _acache$[ebp]
	push	eax
	push	OFFSET _ftc_basic_image_cache_class
	mov	ecx, DWORD PTR _manager$[ebp]
	push	ecx
	call	_FTC_GCache_New
	add	esp, 12					; 0000000cH
; Line 271
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_ImageCache_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv182 = -128						; size = 4
tv149 = -124						; size = 4
tv90 = -120						; size = 4
_cmap$1 = -116						; size = 4
_old$2 = -112						; size = 4
_face$3 = -104						; size = 4
__nl$4 = -96						; size = 4
__manager$5 = -92					; size = 4
__list_changed$6 = -81					; size = 1
__nodcomp$7 = -76					; size = 4
__hash$8 = -72						; size = 4
__cache$9 = -68						; size = 4
__node$10 = -60						; size = 4
__pnode$11 = -52					; size = 4
__bucket$12 = -48					; size = 4
_no_cmap_change$ = -44					; size = 4
_hash$ = -40						; size = 4
_gindex$ = -36						; size = 4
_error$ = -32						; size = 4
_node$ = -28						; size = 4
_query$ = -20						; size = 12
_cache$ = -4						; size = 4
_cmap_cache$ = 8					; size = 4
_face_id$ = 12						; size = 4
_cmap_index$ = 16					; size = 4
_char_code$ = 20					; size = 4
_FTC_CMapCache_Lookup PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccmap.c
; Line 239
	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 240
	mov	eax, DWORD PTR _cmap_cache$[ebp]
	mov	DWORD PTR _cache$[ebp], eax
; Line 244
	mov	DWORD PTR _gindex$[ebp], 0
; Line 246
	mov	DWORD PTR _no_cmap_change$[ebp], 0
; Line 249
	cmp	DWORD PTR _cmap_index$[ebp], 0
	jge	SHORT $LN32@FTC_CMapCa
; Line 256
	mov	DWORD PTR _no_cmap_change$[ebp], 1
; Line 257
	mov	DWORD PTR _cmap_index$[ebp], 0
$LN32@FTC_CMapCa:
; Line 260
	cmp	DWORD PTR _cache$[ebp], 0
	jne	SHORT $LN31@FTC_CMapCa
$LN30@FTC_CMapCa:
; Line 262
	mov	ecx, 4
	imul	edx, ecx, 17
	cmp	DWORD PTR _ft_trace_levels[edx], 0
	jl	SHORT $LN29@FTC_CMapCa
	push	OFFSET $SG8476
	call	_FT_Message
	add	esp, 4
$LN29@FTC_CMapCa:
	xor	eax, eax
	jne	SHORT $LN30@FTC_CMapCa
; Line 263
	xor	eax, eax
	jmp	$LN33@FTC_CMapCa
$LN31@FTC_CMapCa:
; Line 266
	cmp	DWORD PTR _face_id$[ebp], 0
	jne	SHORT $LN26@FTC_CMapCa
; Line 267
	xor	eax, eax
	jmp	$LN33@FTC_CMapCa
$LN26@FTC_CMapCa:
; Line 269
	mov	ecx, DWORD PTR _face_id$[ebp]
	mov	DWORD PTR _query$[ebp], ecx
; Line 270
	mov	edx, DWORD PTR _cmap_index$[ebp]
	mov	DWORD PTR _query$[ebp+4], edx
; Line 271
	mov	eax, DWORD PTR _char_code$[ebp]
	mov	DWORD PTR _query$[ebp+8], eax
; Line 273
	mov	ecx, DWORD PTR _face_id$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR _face_id$[ebp]
	shl	edx, 7
	xor	ecx, edx
	imul	eax, DWORD PTR _cmap_index$[ebp], 211
	add	ecx, eax
	mov	edx, DWORD PTR _char_code$[ebp]
	shr	edx, 7
	add	ecx, edx
	mov	DWORD PTR _hash$[ebp], ecx
$LN25@FTC_CMapCa:
; Line 277
	mov	eax, DWORD PTR _cache$[ebp]
	mov	DWORD PTR __cache$9[ebp], eax
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR __hash$8[ebp], ecx
	mov	DWORD PTR __nodcomp$7[ebp], OFFSET _ftc_cmap_node_compare
	mov	BYTE PTR __list_changed$6[ebp], 0
	mov	DWORD PTR _error$[ebp], 0
	mov	DWORD PTR _node$[ebp], 0
	mov	edx, DWORD PTR __cache$9[ebp]
	mov	eax, DWORD PTR __hash$8[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __cache$9[ebp]
	cmp	eax, DWORD PTR [ecx]
	jae	SHORT $LN35@FTC_CMapCa
	mov	edx, DWORD PTR __cache$9[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+eax+1]
	and	ecx, DWORD PTR __hash$8[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	jmp	SHORT $LN36@FTC_CMapCa
$LN35@FTC_CMapCa:
	mov	edx, DWORD PTR __cache$9[ebp]
	mov	eax, DWORD PTR __hash$8[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv90[ebp], eax
$LN36@FTC_CMapCa:
	mov	ecx, DWORD PTR __cache$9[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR tv90[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR __pnode$11[ebp], ecx
	mov	edx, DWORD PTR __pnode$11[ebp]
	mov	DWORD PTR __bucket$12[ebp], edx
$LN22@FTC_CMapCa:
	mov	eax, DWORD PTR __pnode$11[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __node$10[ebp], ecx
	cmp	DWORD PTR __node$10[ebp], 0
	jne	SHORT $LN20@FTC_CMapCa
	jmp	$_NewNode$47
$LN20@FTC_CMapCa:
	mov	edx, DWORD PTR __node$10[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR __hash$8[ebp]
	jne	SHORT $LN19@FTC_CMapCa
	mov	esi, esp
	lea	ecx, DWORD PTR __list_changed$6[ebp]
	push	ecx
	mov	edx, DWORD PTR __cache$9[ebp]
	push	edx
	lea	eax, DWORD PTR _query$[ebp]
	push	eax
	mov	ecx, DWORD PTR __node$10[ebp]
	push	ecx
	call	DWORD PTR __nodcomp$7[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN19@FTC_CMapCa
	jmp	SHORT $LN21@FTC_CMapCa
$LN19@FTC_CMapCa:
	mov	eax, DWORD PTR __node$10[ebp]
	add	eax, 8
	mov	DWORD PTR __pnode$11[ebp], eax
	jmp	SHORT $LN22@FTC_CMapCa
$LN21@FTC_CMapCa:
	movzx	ecx, BYTE PTR __list_changed$6[ebp]
	test	ecx, ecx
	je	SHORT $LN18@FTC_CMapCa
	mov	edx, DWORD PTR __cache$9[ebp]
	mov	eax, DWORD PTR __hash$8[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __cache$9[ebp]
	cmp	eax, DWORD PTR [ecx]
	jae	SHORT $LN37@FTC_CMapCa
	mov	edx, DWORD PTR __cache$9[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+eax+1]
	and	ecx, DWORD PTR __hash$8[ebp]
	mov	DWORD PTR tv149[ebp], ecx
	jmp	SHORT $LN38@FTC_CMapCa
$LN37@FTC_CMapCa:
	mov	edx, DWORD PTR __cache$9[ebp]
	mov	eax, DWORD PTR __hash$8[ebp]
	and	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv149[ebp], eax
$LN38@FTC_CMapCa:
	mov	ecx, DWORD PTR __cache$9[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR tv149[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR __pnode$11[ebp], ecx
	mov	edx, DWORD PTR __pnode$11[ebp]
	mov	DWORD PTR __bucket$12[ebp], edx
$LN17@FTC_CMapCa:
	mov	eax, DWORD PTR __pnode$11[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __node$10[ebp]
	je	SHORT $LN18@FTC_CMapCa
	mov	edx, DWORD PTR __pnode$11[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN15@FTC_CMapCa
	push	OFFSET $SG8509
	call	_FT_Message
	add	esp, 4
	jmp	SHORT $_NewNode$47
	jmp	SHORT $LN14@FTC_CMapCa
$LN15@FTC_CMapCa:
	mov	eax, DWORD PTR __pnode$11[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	DWORD PTR __pnode$11[ebp], ecx
$LN14@FTC_CMapCa:
	jmp	SHORT $LN17@FTC_CMapCa
$LN18@FTC_CMapCa:
	mov	edx, DWORD PTR __bucket$12[ebp]
	mov	eax, DWORD PTR __node$10[ebp]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN13@FTC_CMapCa
	mov	ecx, DWORD PTR __pnode$11[ebp]
	mov	edx, DWORD PTR __node$10[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR __node$10[ebp]
	mov	edx, DWORD PTR __bucket$12[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR __bucket$12[ebp]
	mov	edx, DWORD PTR __node$10[ebp]
	mov	DWORD PTR [ecx], edx
$LN13@FTC_CMapCa:
	mov	eax, DWORD PTR __cache$9[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR __manager$5[ebp], ecx
	mov	edx, DWORD PTR __manager$5[ebp]
	add	edx, 8
	mov	DWORD PTR __nl$4[ebp], edx
	mov	eax, DWORD PTR __manager$5[ebp]
	mov	ecx, DWORD PTR __node$10[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN12@FTC_CMapCa
	mov	edx, DWORD PTR __node$10[ebp]
	push	edx
	mov	eax, DWORD PTR __nl$4[ebp]
	push	eax
	call	_FTC_MruNode_Up
	add	esp, 8
$LN12@FTC_CMapCa:
	jmp	SHORT $_Ok$48
$_NewNode$47:
	lea	ecx, DWORD PTR __node$10[ebp]
	push	ecx
	lea	edx, DWORD PTR _query$[ebp]
	push	edx
	mov	eax, DWORD PTR __hash$8[ebp]
	push	eax
	mov	ecx, DWORD PTR __cache$9[ebp]
	push	ecx
	call	_FTC_Cache_NewNode
	add	esp, 16					; 00000010H
	mov	DWORD PTR _error$[ebp], eax
$_Ok$48:
	mov	edx, DWORD PTR __node$10[ebp]
	mov	DWORD PTR _node$[ebp], edx
	xor	eax, eax
	jne	$LN25@FTC_CMapCa
; Line 281
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN10@FTC_CMapCa
; Line 282
	jmp	$Exit$49
$LN10@FTC_CMapCa:
; Line 285
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _char_code$[ebp]
	sub	edx, DWORD PTR [ecx+28]
	cmp	edx, 128				; 00000080H
	jb	SHORT $LN9@FTC_CMapCa
	push	OFFSET $SG8526
	push	285					; 0000011dH
	push	OFFSET $SG8527
	call	_FT_Panic
	add	esp, 12					; 0000000cH
$LN9@FTC_CMapCa:
	xor	eax, eax
	jne	SHORT $LN10@FTC_CMapCa
; Line 289
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _char_code$[ebp]
	sub	edx, DWORD PTR [ecx+28]
	cmp	edx, 128				; 00000080H
	jb	SHORT $LN39@FTC_CMapCa
	mov	DWORD PTR tv182[ebp], 1
	jmp	SHORT $LN40@FTC_CMapCa
$LN39@FTC_CMapCa:
	mov	DWORD PTR tv182[ebp], 0
$LN40@FTC_CMapCa:
	cmp	DWORD PTR tv182[ebp], 0
	je	SHORT $LN6@FTC_CMapCa
; Line 290
	xor	eax, eax
	jmp	$LN33@FTC_CMapCa
$LN6@FTC_CMapCa:
; Line 293
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _char_code$[ebp]
	sub	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _node$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2+32]
	mov	DWORD PTR _gindex$[ebp], eax
; Line 294
	cmp	DWORD PTR _gindex$[ebp], 65535		; 0000ffffH
	jne	$Exit$49
; Line 299
	mov	DWORD PTR _gindex$[ebp], 0
; Line 303
	lea	ecx, DWORD PTR _face$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_FTC_Manager_LookupFace
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 304
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FTC_CMapCa
; Line 305
	jmp	$Exit$49
$LN4@FTC_CMapCa:
; Line 307
	mov	eax, DWORD PTR _face$3[ebp]
	mov	ecx, DWORD PTR _cmap_index$[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jae	SHORT $LN3@FTC_CMapCa
; Line 309
	mov	DWORD PTR _cmap$1[ebp], 0
; Line 312
	mov	edx, DWORD PTR _face$3[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	DWORD PTR _old$2[ebp], eax
; Line 313
	mov	ecx, DWORD PTR _face$3[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _cmap_index$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _cmap$1[ebp], ecx
; Line 315
	mov	edx, DWORD PTR _old$2[ebp]
	cmp	edx, DWORD PTR _cmap$1[ebp]
	je	SHORT $LN2@FTC_CMapCa
	cmp	DWORD PTR _no_cmap_change$[ebp], 0
	jne	SHORT $LN2@FTC_CMapCa
; Line 316
	mov	eax, DWORD PTR _cmap$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$3[ebp]
	push	ecx
	call	_FT_Set_Charmap
	add	esp, 8
$LN2@FTC_CMapCa:
; Line 318
	mov	edx, DWORD PTR _char_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$3[ebp]
	push	eax
	call	_FT_Get_Char_Index
	add	esp, 8
	mov	DWORD PTR _gindex$[ebp], eax
; Line 320
	mov	ecx, DWORD PTR _old$2[ebp]
	cmp	ecx, DWORD PTR _cmap$1[ebp]
	je	SHORT $LN3@FTC_CMapCa
	cmp	DWORD PTR _no_cmap_change$[ebp], 0
	jne	SHORT $LN3@FTC_CMapCa
; Line 321
	mov	edx, DWORD PTR _old$2[ebp]
	push	edx
	mov	eax, DWORD PTR _face$3[ebp]
	push	eax
	call	_FT_Set_Charmap
	add	esp, 8
$LN3@FTC_CMapCa:
; Line 326
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _char_code$[ebp]
	sub	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _node$[ebp]
	mov	cx, WORD PTR _gindex$[ebp]
	mov	WORD PTR [eax+edx*2+32], cx
$Exit$49:
; Line 330
	mov	eax, DWORD PTR _gindex$[ebp]
$LN33@FTC_CMapCa:
; Line 331
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@FTC_CMapCa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 128				; 00000080H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN46@FTC_CMapCa:
	DD	4
	DD	$LN45@FTC_CMapCa
$LN45@FTC_CMapCa:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN41@FTC_CMapCa
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN42@FTC_CMapCa
	DD	-81					; ffffffafH
	DD	1
	DD	$LN43@FTC_CMapCa
	DD	-104					; ffffff98H
	DD	4
	DD	$LN44@FTC_CMapCa
$LN44@FTC_CMapCa:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN43@FTC_CMapCa:
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN42@FTC_CMapCa:
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN41@FTC_CMapCa:
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
_FTC_CMapCache_Lookup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_manager$ = 8						; size = 4
_acache$ = 12						; size = 4
_FTC_CMapCache_New PROC
; File d:\mozilla\modules\freetype2\src\cache\ftccmap.c
; Line 225
	push	ebp
	mov	ebp, esp
; Line 228
	mov	eax, DWORD PTR _acache$[ebp]
	push	eax
	push	OFFSET _ftc_cmap_cache_class
	mov	ecx, DWORD PTR _manager$[ebp]
	push	ecx
	call	_FTC_Manager_RegisterCache
	add	esp, 12					; 0000000cH
; Line 229
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_CMapCache_New ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nn$ = -4						; size = 4
_manager$ = 8						; size = 4
_face_id$ = 12						; size = 4
_FTC_Manager_RemoveFaceID PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 670
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 674
	cmp	DWORD PTR _manager$[ebp], 0
	je	SHORT $LN4@FTC_Manage
	cmp	DWORD PTR _face_id$[ebp], 0
	jne	SHORT $LN5@FTC_Manage
$LN4@FTC_Manage:
; Line 675
	jmp	SHORT $LN6@FTC_Manage
$LN5@FTC_Manage:
; Line 682
	mov	eax, DWORD PTR _face_id$[ebp]
	push	eax
	push	OFFSET _ftc_face_node_compare
	mov	ecx, DWORD PTR _manager$[ebp]
	add	ecx, 92					; 0000005cH
	push	ecx
	call	_FTC_MruList_RemoveSelection
	add	esp, 12					; 0000000cH
; Line 684
	mov	DWORD PTR _nn$[ebp], 0
	jmp	SHORT $LN3@FTC_Manage
$LN2@FTC_Manage:
	mov	edx, DWORD PTR _nn$[ebp]
	add	edx, 1
	mov	DWORD PTR _nn$[ebp], edx
$LN3@FTC_Manage:
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR _nn$[ebp]
	cmp	ecx, DWORD PTR [eax+88]
	jae	SHORT $LN6@FTC_Manage
; Line 685
	mov	edx, DWORD PTR _face_id$[ebp]
	push	edx
	mov	eax, DWORD PTR _nn$[ebp]
	mov	ecx, DWORD PTR _manager$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+24]
	push	edx
	call	_FTC_Cache_RemoveFaceID
	add	esp, 8
	jmp	SHORT $LN2@FTC_Manage
$LN6@FTC_Manage:
; Line 686
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_Manager_RemoveFaceID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_node$ = 8						; size = 4
_manager$ = 12						; size = 4
_FTC_Node_Unref PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 694
	push	ebp
	mov	ebp, esp
; Line 697
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@FTC_Node_U
	cmp	DWORD PTR _manager$[ebp], 0
	je	SHORT $LN2@FTC_Node_U
	mov	eax, DWORD PTR _node$[ebp]
	movzx	ecx, WORD PTR [eax+16]
	mov	edx, DWORD PTR _manager$[ebp]
	cmp	ecx, DWORD PTR [edx+88]
	jae	SHORT $LN2@FTC_Node_U
; Line 698
	mov	eax, DWORD PTR _node$[ebp]
	mov	cx, WORD PTR [eax+18]
	sub	cx, 1
	mov	edx, DWORD PTR _node$[ebp]
	mov	WORD PTR [edx+18], cx
$LN2@FTC_Node_U:
; Line 699
	pop	ebp
	ret	0
_FTC_Node_Unref ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__node$1 = -32						; size = 4
__first$2 = -28						; size = 4
__compare$3 = -24					; size = 4
__pfirst$4 = -20					; size = 4
_mrunode$ = -12						; size = 4
_error$ = -4						; size = 4
_manager$ = 8						; size = 4
_scaler$ = 12						; size = 4
_asize$ = 16						; size = 4
_FTC_Manager_LookupSize PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 184
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 189
	cmp	DWORD PTR _asize$[ebp], 0
	je	SHORT $LN12@FTC_Manage
	cmp	DWORD PTR _scaler$[ebp], 0
	jne	SHORT $LN13@FTC_Manage
$LN12@FTC_Manage:
; Line 190
	push	OFFSET $SG7899
	push	190					; 000000beH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN14@FTC_Manage
$LN13@FTC_Manage:
; Line 192
	mov	eax, DWORD PTR _asize$[ebp]
	mov	DWORD PTR [eax], 0
; Line 194
	cmp	DWORD PTR _manager$[ebp], 0
	jne	SHORT $LN10@FTC_Manage
; Line 195
	push	OFFSET $SG7902
	push	195					; 000000c3H
	push	39					; 00000027H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 39					; 00000027H
	jmp	$LN14@FTC_Manage
$LN10@FTC_Manage:
; Line 200
	mov	ecx, DWORD PTR _manager$[ebp]
	add	ecx, 140				; 0000008cH
	mov	DWORD PTR __pfirst$4[ebp], ecx
	mov	DWORD PTR __compare$3[ebp], OFFSET _ftc_size_node_compare
	mov	DWORD PTR _error$[ebp], 0
	mov	edx, DWORD PTR __pfirst$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __first$2[ebp], eax
	mov	DWORD PTR __node$1[ebp], 0
	cmp	DWORD PTR __first$2[ebp], 0
	je	SHORT $LN7@FTC_Manage
	mov	ecx, DWORD PTR __first$2[ebp]
	mov	DWORD PTR __node$1[ebp], ecx
$LN6@FTC_Manage:
	mov	esi, esp
	mov	edx, DWORD PTR _scaler$[ebp]
	push	edx
	mov	eax, DWORD PTR __node$1[ebp]
	push	eax
	call	DWORD PTR __compare$3[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@FTC_Manage
	mov	edx, DWORD PTR __node$1[ebp]
	cmp	edx, DWORD PTR __first$2[ebp]
	je	SHORT $LN2@FTC_Manage
	mov	eax, DWORD PTR __node$1[ebp]
	push	eax
	mov	ecx, DWORD PTR __pfirst$4[ebp]
	push	ecx
	call	_FTC_MruNode_Up
	add	esp, 8
$LN2@FTC_Manage:
	mov	edx, DWORD PTR __node$1[ebp]
	mov	DWORD PTR _mrunode$[ebp], edx
	jmp	SHORT $_MruOk$19
$LN3@FTC_Manage:
	mov	eax, DWORD PTR __node$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __node$1[ebp], ecx
	mov	edx, DWORD PTR __node$1[ebp]
	cmp	edx, DWORD PTR __first$2[ebp]
	jne	SHORT $LN6@FTC_Manage
$LN7@FTC_Manage:
	lea	eax, DWORD PTR _mrunode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scaler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _manager$[ebp]
	add	edx, 132				; 00000084H
	push	edx
	call	_FTC_MruList_New
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$_MruOk$19:
	xor	eax, eax
	jne	$LN10@FTC_Manage
; Line 206
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@FTC_Manage
; Line 207
	mov	ecx, DWORD PTR _asize$[ebp]
	mov	edx, DWORD PTR _mrunode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
$LN1@FTC_Manage:
; Line 209
	mov	eax, DWORD PTR _error$[ebp]
$LN14@FTC_Manage:
; Line 210
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@FTC_Manage
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@FTC_Manage:
	DD	1
	DD	$LN17@FTC_Manage
$LN17@FTC_Manage:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@FTC_Manage
$LN16@FTC_Manage:
	DB	109					; 0000006dH
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_FTC_Manager_LookupSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__node$1 = -32						; size = 4
__first$2 = -28						; size = 4
__compare$3 = -24					; size = 4
__pfirst$4 = -20					; size = 4
_mrunode$ = -12						; size = 4
_error$ = -4						; size = 4
_manager$ = 8						; size = 4
_face_id$ = 12						; size = 4
_aface$ = 16						; size = 4
_FTC_Manager_LookupFace PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 311
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 316
	cmp	DWORD PTR _aface$[ebp], 0
	je	SHORT $LN12@FTC_Manage
	cmp	DWORD PTR _face_id$[ebp], 0
	jne	SHORT $LN13@FTC_Manage
$LN12@FTC_Manage:
; Line 317
	push	OFFSET $SG7982
	push	317					; 0000013dH
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN14@FTC_Manage
$LN13@FTC_Manage:
; Line 319
	mov	eax, DWORD PTR _aface$[ebp]
	mov	DWORD PTR [eax], 0
; Line 321
	cmp	DWORD PTR _manager$[ebp], 0
	jne	SHORT $LN10@FTC_Manage
; Line 322
	push	OFFSET $SG7985
	push	322					; 00000142H
	push	39					; 00000027H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 39					; 00000027H
	jmp	$LN14@FTC_Manage
$LN10@FTC_Manage:
; Line 328
	mov	ecx, DWORD PTR _manager$[ebp]
	add	ecx, 100				; 00000064H
	mov	DWORD PTR __pfirst$4[ebp], ecx
	mov	DWORD PTR __compare$3[ebp], OFFSET _ftc_face_node_compare
	mov	DWORD PTR _error$[ebp], 0
	mov	edx, DWORD PTR __pfirst$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __first$2[ebp], eax
	mov	DWORD PTR __node$1[ebp], 0
	cmp	DWORD PTR __first$2[ebp], 0
	je	SHORT $LN7@FTC_Manage
	mov	ecx, DWORD PTR __first$2[ebp]
	mov	DWORD PTR __node$1[ebp], ecx
$LN6@FTC_Manage:
	mov	esi, esp
	mov	edx, DWORD PTR _face_id$[ebp]
	push	edx
	mov	eax, DWORD PTR __node$1[ebp]
	push	eax
	call	DWORD PTR __compare$3[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@FTC_Manage
	mov	edx, DWORD PTR __node$1[ebp]
	cmp	edx, DWORD PTR __first$2[ebp]
	je	SHORT $LN2@FTC_Manage
	mov	eax, DWORD PTR __node$1[ebp]
	push	eax
	mov	ecx, DWORD PTR __pfirst$4[ebp]
	push	ecx
	call	_FTC_MruNode_Up
	add	esp, 8
$LN2@FTC_Manage:
	mov	edx, DWORD PTR __node$1[ebp]
	mov	DWORD PTR _mrunode$[ebp], edx
	jmp	SHORT $_MruOk$19
$LN3@FTC_Manage:
	mov	eax, DWORD PTR __node$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __node$1[ebp], ecx
	mov	edx, DWORD PTR __node$1[ebp]
	cmp	edx, DWORD PTR __first$2[ebp]
	jne	SHORT $LN6@FTC_Manage
$LN7@FTC_Manage:
	lea	eax, DWORD PTR _mrunode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _manager$[ebp]
	add	edx, 92					; 0000005cH
	push	edx
	call	_FTC_MruList_New
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
$_MruOk$19:
	xor	eax, eax
	jne	$LN10@FTC_Manage
; Line 334
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@FTC_Manage
; Line 335
	mov	ecx, DWORD PTR _aface$[ebp]
	mov	edx, DWORD PTR _mrunode$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx], eax
$LN1@FTC_Manage:
; Line 337
	mov	eax, DWORD PTR _error$[ebp]
$LN14@FTC_Manage:
; Line 338
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@FTC_Manage
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@FTC_Manage:
	DD	1
	DD	$LN17@FTC_Manage
$LN17@FTC_Manage:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@FTC_Manage
$LN16@FTC_Manage:
	DB	109					; 0000006dH
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_FTC_Manager_LookupFace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -20						; size = 4
tv71 = -16						; size = 4
_cache$1 = -12						; size = 4
_idx$ = -8						; size = 4
_memory$ = -4						; size = 4
_manager$ = 8						; size = 4
_FTC_Manager_Done PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 416
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 421
	cmp	DWORD PTR _manager$[ebp], 0
	je	SHORT $LN10@FTC_Manage
	mov	eax, DWORD PTR _manager$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN11@FTC_Manage
$LN10@FTC_Manage:
; Line 422
	jmp	$LN12@FTC_Manage
$LN11@FTC_Manage:
; Line 424
	mov	ecx, DWORD PTR _manager$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _memory$[ebp], edx
; Line 427
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _idx$[ebp], ecx
$LN9@FTC_Manage:
	mov	edx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	mov	eax, DWORD PTR _idx$[ebp]
	sub	eax, 1
	mov	DWORD PTR _idx$[ebp], eax
	cmp	DWORD PTR tv71[ebp], 0
	jbe	SHORT $LN14@FTC_Manage
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN15@FTC_Manage
$LN14@FTC_Manage:
	mov	DWORD PTR tv72[ebp], 0
$LN15@FTC_Manage:
	cmp	DWORD PTR tv72[ebp], 0
	je	SHORT $LN8@FTC_Manage
; Line 429
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _manager$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+24]
	mov	DWORD PTR _cache$1[ebp], eax
; Line 432
	cmp	DWORD PTR _cache$1[ebp], 0
	je	SHORT $LN7@FTC_Manage
; Line 434
	mov	esi, esp
	mov	ecx, DWORD PTR _cache$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _cache$1[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@FTC_Manage:
; Line 435
	mov	ecx, DWORD PTR _cache$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _cache$1[ebp], 0
	xor	eax, eax
	jne	SHORT $LN6@FTC_Manage
; Line 436
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [edx+ecx*4+24], 0
$LN7@FTC_Manage:
; Line 438
	jmp	$LN9@FTC_Manage
$LN8@FTC_Manage:
; Line 439
	mov	eax, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [eax+88], 0
; Line 442
	mov	ecx, DWORD PTR _manager$[ebp]
	add	ecx, 132				; 00000084H
	push	ecx
	call	_FTC_MruList_Done
	add	esp, 4
; Line 443
	mov	edx, DWORD PTR _manager$[ebp]
	add	edx, 92					; 0000005cH
	push	edx
	call	_FTC_MruList_Done
	add	esp, 4
; Line 445
	mov	eax, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [eax], 0
; Line 446
	mov	ecx, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN3@FTC_Manage:
; Line 448
	mov	edx, DWORD PTR _manager$[ebp]
	push	edx
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_free
	add	esp, 8
	mov	DWORD PTR _manager$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN3@FTC_Manage
$LN12@FTC_Manage:
; Line 449
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FTC_Manager_Done ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_manager$ = 8						; size = 4
_FTC_Manager_Reset PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 456
	push	ebp
	mov	ebp, esp
; Line 457
	cmp	DWORD PTR _manager$[ebp], 0
	jne	SHORT $LN1@FTC_Manage
; Line 458
	jmp	SHORT $LN2@FTC_Manage
$LN1@FTC_Manage:
; Line 460
	mov	eax, DWORD PTR _manager$[ebp]
	add	eax, 132				; 00000084H
	push	eax
	call	_FTC_MruList_Reset
	add	esp, 4
; Line 461
	mov	ecx, DWORD PTR _manager$[ebp]
	add	ecx, 92					; 0000005cH
	push	ecx
	call	_FTC_MruList_Reset
	add	esp, 4
; Line 463
	mov	edx, DWORD PTR _manager$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _manager$[ebp]
	push	ecx
	call	_FTC_Manager_FlushN
	add	esp, 8
$LN2@FTC_Manage:
; Line 464
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FTC_Manager_Reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_manager$ = -20						; size = 4
_memory$ = -16						; size = 4
_error$ = -8						; size = 4
_library$ = 8						; size = 4
_max_faces$ = 12					; size = 4
_max_sizes$ = 16					; size = 4
_max_bytes$ = 20					; size = 4
_requester$ = 24					; size = 4
_req_data$ = 28						; size = 4
_amanager$ = 32						; size = 4
_FTC_Manager_New PROC
; File d:\mozilla\modules\freetype2\src\cache\ftcmanag.c
; Line 360
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 363
	mov	DWORD PTR _manager$[ebp], 0
; Line 366
	cmp	DWORD PTR _library$[ebp], 0
	jne	SHORT $LN7@FTC_Manage
; Line 367
	push	OFFSET $SG8025
	push	367					; 0000016fH
	push	33					; 00000021H
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 33					; 00000021H
	jmp	$LN8@FTC_Manage
$LN7@FTC_Manage:
; Line 369
	cmp	DWORD PTR _amanager$[ebp], 0
	je	SHORT $LN5@FTC_Manage
	cmp	DWORD PTR _requester$[ebp], 0
	jne	SHORT $LN6@FTC_Manage
$LN5@FTC_Manage:
; Line 370
	push	OFFSET $SG8028
	push	370					; 00000172H
	push	6
	call	_FT_Throw
	add	esp, 12					; 0000000cH
	or	eax, 6
	jmp	$LN8@FTC_Manage
$LN6@FTC_Manage:
; Line 372
	mov	eax, DWORD PTR _library$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _memory$[ebp], ecx
; Line 374
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	180					; 000000b4H
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	call	_ft_mem_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _manager$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN4@FTC_Manage
; Line 375
	jmp	$Exit$13
$LN4@FTC_Manage:
; Line 377
	cmp	DWORD PTR _max_faces$[ebp], 0
	jne	SHORT $LN3@FTC_Manage
; Line 378
	mov	DWORD PTR _max_faces$[ebp], 2
$LN3@FTC_Manage:
; Line 380
	cmp	DWORD PTR _max_sizes$[ebp], 0
	jne	SHORT $LN2@FTC_Manage
; Line 381
	mov	DWORD PTR _max_sizes$[ebp], 4
$LN2@FTC_Manage:
; Line 383
	cmp	DWORD PTR _max_bytes$[ebp], 0
	jne	SHORT $LN1@FTC_Manage
; Line 384
	mov	DWORD PTR _max_bytes$[ebp], 200000	; 00030d40H
$LN1@FTC_Manage:
; Line 386
	mov	ecx, DWORD PTR _manager$[ebp]
	mov	edx, DWORD PTR _library$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 387
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR _memory$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 388
	mov	edx, DWORD PTR _manager$[ebp]
	mov	eax, DWORD PTR _max_bytes$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 390
	mov	ecx, DWORD PTR _manager$[ebp]
	mov	edx, DWORD PTR _requester$[ebp]
	mov	DWORD PTR [ecx+176], edx
; Line 391
	mov	eax, DWORD PTR _manager$[ebp]
	mov	ecx, DWORD PTR _req_data$[ebp]
	mov	DWORD PTR [eax+172], ecx
; Line 397
	mov	edx, DWORD PTR _memory$[ebp]
	push	edx
	mov	eax, DWORD PTR _manager$[ebp]
	push	eax
	mov	ecx, DWORD PTR _max_faces$[ebp]
	push	ecx
	push	OFFSET _ftc_face_list_class
	mov	edx, DWORD PTR _manager$[ebp]
	add	edx, 92					; 0000005cH
	push	edx
	call	_FTC_MruList_Init
	add	esp, 20					; 00000014H
; Line 403
	mov	eax, DWORD PTR _memory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _manager$[ebp]
	push	ecx
	mov	edx, DWORD PTR _max_sizes$[ebp]
	push	edx
	push	OFFSET _ftc_size_list_class
	mov	eax, DWORD PTR _manager$[ebp]
	add	eax, 132				; 00000084H
	push	eax
	call	_FTC_MruList_Init
	add	esp, 20					; 00000014H
; Line 405
	mov	ecx, DWORD PTR _amanager$[ebp]
	mov	edx, DWORD PTR _manager$[ebp]
	mov	DWORD PTR [ecx], edx
$Exit$13:
; Line 408
	mov	eax, DWORD PTR _error$[ebp]
$LN8@FTC_Manage:
; Line 409
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@FTC_Manage
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@FTC_Manage:
	DD	1
	DD	$LN11@FTC_Manage
$LN11@FTC_Manage:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@FTC_Manage
$LN10@FTC_Manage:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_FTC_Manager_New ENDP
_TEXT	ENDS
END
