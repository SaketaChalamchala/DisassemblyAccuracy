; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\i18n\rbtz.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
_BSS	SEGMENT
?classID@?1??getStaticClassID@RuleBasedTimeZone@icu_56@@SAPAXXZ@4DA DB 01H DUP (?) ; `icu_56::RuleBasedTimeZone::getStaticClassID'::`2'::classID
	ALIGN	4

_gLock	DB	020H DUP (?)
_BSS	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\include\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??9TimeZone@icu_56@@QBECABV01@@Z		; icu_56::TimeZone::operator!=
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9TimeZone@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_that$ = 8						; size = 4
??9TimeZone@icu_56@@QBECABV01@@Z PROC			; icu_56::TimeZone::operator!=, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\timezone.h
; Line 455
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9TimeZone@icu_56@@QBECABV01@@Z ENDP			; icu_56::TimeZone::operator!=
_TEXT	ENDS
PUBLIC	?getID@TimeZone@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z ; icu_56::TimeZone::getID
EXTRN	__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getID@TimeZone@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ID$ = 8						; size = 4
?getID@TimeZone@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z PROC ; icu_56::TimeZone::getID, COMDAT
; _this$ = ecx
; Line 951
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 952
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ID$[ebp]
	call	DWORD PTR __imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 953
	mov	eax, DWORD PTR _ID$[ebp]
; Line 954
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getID@TimeZone@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z ENDP ; icu_56::TimeZone::getID
_TEXT	ENDS
PUBLIC	?setID@TimeZone@icu_56@@QAEXABVUnicodeString@2@@Z ; icu_56::TimeZone::setID
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setID@TimeZone@icu_56@@QAEXABVUnicodeString@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ID$ = 8						; size = 4
?setID@TimeZone@icu_56@@QAEXABVUnicodeString@2@@Z PROC	; icu_56::TimeZone::setID, COMDAT
; _this$ = ecx
; Line 960
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 961
	mov	esi, esp
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 962
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setID@TimeZone@icu_56@@QAEXABVUnicodeString@2@@Z ENDP	; icu_56::TimeZone::setID
_TEXT	ENDS
PUBLIC	??4BasicTimeZone@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::BasicTimeZone::operator=
EXTRN	??4TimeZone@icu_56@@IAEAAV01@ABV01@@Z:PROC	; icu_56::TimeZone::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4BasicTimeZone@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4BasicTimeZone@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::BasicTimeZone::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4TimeZone@icu_56@@IAEAAV01@ABV01@@Z	; icu_56::TimeZone::operator=
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4BasicTimeZone@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::BasicTimeZone::operator=
_TEXT	ENDS
PUBLIC	??1RuleBasedTimeZone@icu_56@@UAE@XZ		; icu_56::RuleBasedTimeZone::~RuleBasedTimeZone
PUBLIC	??_GRuleBasedTimeZone@icu_56@@UAEPAXI@Z		; icu_56::RuleBasedTimeZone::`scalar deleting destructor'
EXTRN	__imp_??3UMemory@icu_56@@SAXPAX@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GRuleBasedTimeZone@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GRuleBasedTimeZone@icu_56@@UAEPAXI@Z PROC		; icu_56::RuleBasedTimeZone::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RuleBasedTimeZone@icu_56@@UAE@XZ	; icu_56::RuleBasedTimeZone::~RuleBasedTimeZone
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRuleBasedTimeZone@icu_56@@UAEPAXI@Z ENDP		; icu_56::RuleBasedTimeZone::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_ERuleBasedTimeZone@icu_56@@UAEPAXI@Z		; icu_56::RuleBasedTimeZone::`vector deleting destructor'
EXTRN	__imp_??_VUMemory@icu_56@@SAXPAX@Z:PROC
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_ERuleBasedTimeZone@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ERuleBasedTimeZone@icu_56@@UAEPAXI@Z PROC		; icu_56::RuleBasedTimeZone::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1RuleBasedTimeZone@icu_56@@UAE@XZ ; icu_56::RuleBasedTimeZone::~RuleBasedTimeZone
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp_??_VUMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RuleBasedTimeZone@icu_56@@UAE@XZ	; icu_56::RuleBasedTimeZone::~RuleBasedTimeZone
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ERuleBasedTimeZone@icu_56@@UAEPAXI@Z ENDP		; icu_56::RuleBasedTimeZone::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getTime@Calendar@icu_56@@QBENAAW4UErrorCode@@@Z ; icu_56::Calendar::getTime
EXTRN	?getTimeInMillis@Calendar@icu_56@@IBENAAW4UErrorCode@@@Z:PROC ; icu_56::Calendar::getTimeInMillis
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getTime@Calendar@icu_56@@QBENAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?getTime@Calendar@icu_56@@QBENAAW4UErrorCode@@@Z PROC	; icu_56::Calendar::getTime, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\calendar.h
; Line 441
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getTimeInMillis@Calendar@icu_56@@IBENAAW4UErrorCode@@@Z ; icu_56::Calendar::getTimeInMillis
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getTime@Calendar@icu_56@@QBENAAW4UErrorCode@@@Z ENDP	; icu_56::Calendar::getTime
_TEXT	ENDS
PUBLIC	?setTime@Calendar@icu_56@@QAEXNAAW4UErrorCode@@@Z ; icu_56::Calendar::setTime
EXTRN	?setTimeInMillis@Calendar@icu_56@@IAEXNAAW4UErrorCode@@@Z:PROC ; icu_56::Calendar::setTimeInMillis
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTime@Calendar@icu_56@@QAEXNAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_date$ = 8						; size = 8
_status$ = 16						; size = 4
?setTime@Calendar@icu_56@@QAEXNAAW4UErrorCode@@@Z PROC	; icu_56::Calendar::setTime, COMDAT
; _this$ = ecx
; Line 453
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _date$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setTimeInMillis@Calendar@icu_56@@IAEXNAAW4UErrorCode@@@Z ; icu_56::Calendar::setTimeInMillis
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setTime@Calendar@icu_56@@QAEXNAAW4UErrorCode@@@Z ENDP	; icu_56::Calendar::setTime
_TEXT	ENDS
PUBLIC	??9Calendar@icu_56@@QBECABV01@@Z		; icu_56::Calendar::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9Calendar@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_that$ = 8						; size = 4
??9Calendar@icu_56@@QBECABV01@@Z PROC			; icu_56::Calendar::operator!=, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9Calendar@icu_56@@QBECABV01@@Z ENDP			; icu_56::Calendar::operator!=
_TEXT	ENDS
PUBLIC	?internalGet@Calendar@icu_56@@IBEHW4EDateFields@12@@Z ; icu_56::Calendar::internalGet
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?internalGet@Calendar@icu_56@@IBEHW4EDateFields@12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_field$ = 8						; size = 4
?internalGet@Calendar@icu_56@@IBEHW4EDateFields@12@@Z PROC ; icu_56::Calendar::internalGet, COMDAT
; _this$ = ecx
; Line 1545
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?internalGet@Calendar@icu_56@@IBEHW4EDateFields@12@@Z ENDP ; icu_56::Calendar::internalGet
_TEXT	ENDS
PUBLIC	?internalGet@Calendar@icu_56@@IBEHW4UCalendarDateFields@@H@Z ; icu_56::Calendar::internalGet
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?internalGet@Calendar@icu_56@@IBEHW4UCalendarDateFields@@H@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
_field$ = 8						; size = 4
_defaultValue$ = 12					; size = 4
?internalGet@Calendar@icu_56@@IBEHW4UCalendarDateFields@@H@Z PROC ; icu_56::Calendar::internalGet, COMDAT
; _this$ = ecx
; Line 1559
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+124], 0
	jle	SHORT $LN3@internalGe
	mov	edx, DWORD PTR _field$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+8]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN4@internalGe
$LN3@internalGe:
	mov	edx, DWORD PTR _defaultValue$[ebp]
	mov	DWORD PTR tv71[ebp], edx
$LN4@internalGe:
	mov	eax, DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?internalGet@Calendar@icu_56@@IBEHW4UCalendarDateFields@@H@Z ENDP ; icu_56::Calendar::internalGet
_TEXT	ENDS
PUBLIC	?internalGet@Calendar@icu_56@@IBEHW4UCalendarDateFields@@@Z ; icu_56::Calendar::internalGet
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?internalGet@Calendar@icu_56@@IBEHW4UCalendarDateFields@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_field$ = 8						; size = 4
?internalGet@Calendar@icu_56@@IBEHW4UCalendarDateFields@@@Z PROC ; icu_56::Calendar::internalGet, COMDAT
; _this$ = ecx
; Line 1569
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?internalGet@Calendar@icu_56@@IBEHW4UCalendarDateFields@@@Z ENDP ; icu_56::Calendar::internalGet
_TEXT	ENDS
PUBLIC	?internalGetTime@Calendar@icu_56@@IBENXZ	; icu_56::Calendar::internalGetTime
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?internalGetTime@Calendar@icu_56@@IBENXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?internalGetTime@Calendar@icu_56@@IBENXZ PROC		; icu_56::Calendar::internalGetTime, COMDAT
; _this$ = ecx
; Line 1898
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR [eax+224]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?internalGetTime@Calendar@icu_56@@IBENXZ ENDP		; icu_56::Calendar::internalGetTime
_TEXT	ENDS
PUBLIC	?internalSetTime@Calendar@icu_56@@IAEXN@Z	; icu_56::Calendar::internalSetTime
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?internalSetTime@Calendar@icu_56@@IAEXN@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_time$ = 8						; size = 8
?internalSetTime@Calendar@icu_56@@IAEXN@Z PROC		; icu_56::Calendar::internalSetTime, COMDAT
; _this$ = ecx
; Line 1907
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR _time$[ebp]
	fstp	QWORD PTR [eax+224]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?internalSetTime@Calendar@icu_56@@IAEXN@Z ENDP		; icu_56::Calendar::internalSetTime
_TEXT	ENDS
PUBLIC	?getGregorianYear@Calendar@icu_56@@IBEHXZ	; icu_56::Calendar::getGregorianYear
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getGregorianYear@Calendar@icu_56@@IBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getGregorianYear@Calendar@icu_56@@IBEHXZ PROC		; icu_56::Calendar::getGregorianYear, COMDAT
; _this$ = ecx
; Line 1970
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1971
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]
; Line 1972
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getGregorianYear@Calendar@icu_56@@IBEHXZ ENDP		; icu_56::Calendar::getGregorianYear
_TEXT	ENDS
PUBLIC	?getGregorianMonth@Calendar@icu_56@@IBEHXZ	; icu_56::Calendar::getGregorianMonth
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getGregorianMonth@Calendar@icu_56@@IBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getGregorianMonth@Calendar@icu_56@@IBEHXZ PROC		; icu_56::Calendar::getGregorianMonth, COMDAT
; _this$ = ecx
; Line 1979
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1980
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]
; Line 1981
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getGregorianMonth@Calendar@icu_56@@IBEHXZ ENDP		; icu_56::Calendar::getGregorianMonth
_TEXT	ENDS
PUBLIC	?getGregorianDayOfYear@Calendar@icu_56@@IBEHXZ	; icu_56::Calendar::getGregorianDayOfYear
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getGregorianDayOfYear@Calendar@icu_56@@IBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getGregorianDayOfYear@Calendar@icu_56@@IBEHXZ PROC	; icu_56::Calendar::getGregorianDayOfYear, COMDAT
; _this$ = ecx
; Line 1988
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1989
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]
; Line 1990
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getGregorianDayOfYear@Calendar@icu_56@@IBEHXZ ENDP	; icu_56::Calendar::getGregorianDayOfYear
_TEXT	ENDS
PUBLIC	?getGregorianDayOfMonth@Calendar@icu_56@@IBEHXZ	; icu_56::Calendar::getGregorianDayOfMonth
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getGregorianDayOfMonth@Calendar@icu_56@@IBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getGregorianDayOfMonth@Calendar@icu_56@@IBEHXZ PROC	; icu_56::Calendar::getGregorianDayOfMonth, COMDAT
; _this$ = ecx
; Line 1997
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1998
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]
; Line 1999
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getGregorianDayOfMonth@Calendar@icu_56@@IBEHXZ ENDP	; icu_56::Calendar::getGregorianDayOfMonth
_TEXT	ENDS
PUBLIC	?createInstance@Calendar@icu_56@@SAPAV12@PAVTimeZone@2@AAW4UErrorCode@@@Z ; icu_56::Calendar::createInstance
EXTRN	?createInstance@Calendar@icu_56@@SAPAV12@PAVTimeZone@2@ABVLocale@2@AAW4UErrorCode@@@Z:PROC ; icu_56::Calendar::createInstance
EXTRN	__imp_?getDefault@Locale@icu_56@@SAABV12@XZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?createInstance@Calendar@icu_56@@SAPAV12@PAVTimeZone@2@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_zone$ = 8						; size = 4
_errorCode$ = 12					; size = 4
?createInstance@Calendar@icu_56@@SAPAV12@PAVTimeZone@2@AAW4UErrorCode@@@Z PROC ; icu_56::Calendar::createInstance, COMDAT
; Line 2500
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2502
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	esi, esp
	call	DWORD PTR __imp_?getDefault@Locale@icu_56@@SAABV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _zone$[ebp]
	push	ecx
	call	?createInstance@Calendar@icu_56@@SAPAV12@PAVTimeZone@2@ABVLocale@2@AAW4UErrorCode@@@Z ; icu_56::Calendar::createInstance
	add	esp, 12					; 0000000cH
; Line 2503
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?createInstance@Calendar@icu_56@@SAPAV12@PAVTimeZone@2@AAW4UErrorCode@@@Z ENDP ; icu_56::Calendar::createInstance
_TEXT	ENDS
PUBLIC	?roll@Calendar@icu_56@@QAEXW4UCalendarDateFields@@CAAW4UErrorCode@@@Z ; icu_56::Calendar::roll
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?roll@Calendar@icu_56@@QAEXW4UCalendarDateFields@@CAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_field$ = 8						; size = 4
_up$ = 12						; size = 1
_status$ = 16						; size = 4
?roll@Calendar@icu_56@@QAEXW4UCalendarDateFields@@CAAW4UErrorCode@@@Z PROC ; icu_56::Calendar::roll, COMDAT
; _this$ = ecx
; Line 2509
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2510
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	movsx	ecx, BYTE PTR _up$[ebp]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 2
	add	ecx, -1
	push	ecx
	mov	edx, DWORD PTR _field$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2511
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?roll@Calendar@icu_56@@QAEXW4UCalendarDateFields@@CAAW4UErrorCode@@@Z ENDP ; icu_56::Calendar::roll
_TEXT	ENDS
PUBLIC	?roll@Calendar@icu_56@@QAEXW4EDateFields@12@CAAW4UErrorCode@@@Z ; icu_56::Calendar::roll
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?roll@Calendar@icu_56@@QAEXW4EDateFields@12@CAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_field$ = 8						; size = 4
_up$ = 12						; size = 1
_status$ = 16						; size = 4
?roll@Calendar@icu_56@@QAEXW4EDateFields@12@CAAW4UErrorCode@@@Z PROC ; icu_56::Calendar::roll, COMDAT
; _this$ = ecx
; Line 2516
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2517
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _field$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?roll@Calendar@icu_56@@QAEXW4UCalendarDateFields@@CAAW4UErrorCode@@@Z ; icu_56::Calendar::roll
; Line 2518
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?roll@Calendar@icu_56@@QAEXW4EDateFields@12@CAAW4UErrorCode@@@Z ENDP ; icu_56::Calendar::roll
_TEXT	ENDS
PUBLIC	?internalSet@Calendar@icu_56@@IAEXW4UCalendarDateFields@@H@Z ; icu_56::Calendar::internalSet
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?internalSet@Calendar@icu_56@@IAEXW4UCalendarDateFields@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_field$ = 8						; size = 4
_value$ = 12						; size = 4
?internalSet@Calendar@icu_56@@IAEXW4UCalendarDateFields@@H@Z PROC ; icu_56::Calendar::internalSet, COMDAT
; _this$ = ecx
; Line 2531
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2532
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+eax*4+8], edx
; Line 2533
	mov	eax, DWORD PTR _field$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+124], 1
; Line 2534
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _field$[ebp]
	mov	BYTE PTR [eax+100], 1
; Line 2535
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?internalSet@Calendar@icu_56@@IAEXW4UCalendarDateFields@@H@Z ENDP ; icu_56::Calendar::internalSet
_TEXT	ENDS
PUBLIC	?weekNumber@Calendar@icu_56@@IAEHHH@Z		; icu_56::Calendar::weekNumber
EXTRN	?weekNumber@Calendar@icu_56@@IAEHHHH@Z:PROC	; icu_56::Calendar::weekNumber
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?weekNumber@Calendar@icu_56@@IAEHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dayOfPeriod$ = 8					; size = 4
_dayOfWeek$ = 12					; size = 4
?weekNumber@Calendar@icu_56@@IAEHHH@Z PROC		; icu_56::Calendar::weekNumber, COMDAT
; _this$ = ecx
; Line 2540
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2541
	mov	eax, DWORD PTR _dayOfWeek$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dayOfPeriod$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dayOfPeriod$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?weekNumber@Calendar@icu_56@@IAEHHHH@Z	; icu_56::Calendar::weekNumber
; Line 2542
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?weekNumber@Calendar@icu_56@@IAEHHH@Z ENDP		; icu_56::Calendar::weekNumber
_TEXT	ENDS
PUBLIC	?getStaticClassID@RuleBasedTimeZone@icu_56@@SAPAXXZ ; icu_56::RuleBasedTimeZone::getStaticClassID
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getStaticClassID@RuleBasedTimeZone@icu_56@@SAPAXXZ
_TEXT	SEGMENT
?getStaticClassID@RuleBasedTimeZone@icu_56@@SAPAXXZ PROC ; icu_56::RuleBasedTimeZone::getStaticClassID, COMDAT
; File d:\mozilla\intl\icu\source\i18n\rbtz.cpp
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, OFFSET ?classID@?1??getStaticClassID@RuleBasedTimeZone@icu_56@@SAPAXXZ@4DA
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getStaticClassID@RuleBasedTimeZone@icu_56@@SAPAXXZ ENDP ; icu_56::RuleBasedTimeZone::getStaticClassID
_TEXT	ENDS
PUBLIC	?getDynamicClassID@RuleBasedTimeZone@icu_56@@UBEPAXXZ ; icu_56::RuleBasedTimeZone::getDynamicClassID
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getDynamicClassID@RuleBasedTimeZone@icu_56@@UBEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getDynamicClassID@RuleBasedTimeZone@icu_56@@UBEPAXXZ PROC ; icu_56::RuleBasedTimeZone::getDynamicClassID, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?getStaticClassID@RuleBasedTimeZone@icu_56@@SAPAXXZ ; icu_56::RuleBasedTimeZone::getStaticClassID
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getDynamicClassID@RuleBasedTimeZone@icu_56@@UBEPAXXZ ENDP ; icu_56::RuleBasedTimeZone::getDynamicClassID
_TEXT	ENDS
PUBLIC	??_7RuleBasedTimeZone@icu_56@@6B@		; icu_56::RuleBasedTimeZone::`vftable'
PUBLIC	??0RuleBasedTimeZone@icu_56@@QAE@ABVUnicodeString@1@PAVInitialTimeZoneRule@1@@Z ; icu_56::RuleBasedTimeZone::RuleBasedTimeZone
PUBLIC	??_R4RuleBasedTimeZone@icu_56@@6B@		; icu_56::RuleBasedTimeZone::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRuleBasedTimeZone@icu_56@@@8		; icu_56::RuleBasedTimeZone `RTTI Type Descriptor'
PUBLIC	??_R3RuleBasedTimeZone@icu_56@@8		; icu_56::RuleBasedTimeZone::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RuleBasedTimeZone@icu_56@@8		; icu_56::RuleBasedTimeZone::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RuleBasedTimeZone@icu_56@@8	; icu_56::RuleBasedTimeZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@BasicTimeZone@icu_56@@8		; icu_56::BasicTimeZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBasicTimeZone@icu_56@@@8		; icu_56::BasicTimeZone `RTTI Type Descriptor'
PUBLIC	??_R3BasicTimeZone@icu_56@@8			; icu_56::BasicTimeZone::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BasicTimeZone@icu_56@@8			; icu_56::BasicTimeZone::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TimeZone@icu_56@@8		; icu_56::TimeZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVTimeZone@icu_56@@@8			; icu_56::TimeZone `RTTI Type Descriptor'
PUBLIC	??_R3TimeZone@icu_56@@8				; icu_56::TimeZone::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TimeZone@icu_56@@8				; icu_56::TimeZone::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UObject@icu_56@@8			; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVUObject@icu_56@@@8			; icu_56::UObject `RTTI Type Descriptor'
PUBLIC	??_R3UObject@icu_56@@8				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UObject@icu_56@@8				; icu_56::UObject::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVUMemory@icu_56@@@8			; icu_56::UMemory `RTTI Type Descriptor'
PUBLIC	??_R3UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??8RuleBasedTimeZone@icu_56@@UBECABVTimeZone@1@@Z ; icu_56::RuleBasedTimeZone::operator==
PUBLIC	?getOffset@RuleBasedTimeZone@icu_56@@UBEXNCAAH0AAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::getOffset
PUBLIC	?getOffset@RuleBasedTimeZone@icu_56@@UBEHEHHHEHHAAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::getOffset
PUBLIC	?getOffset@RuleBasedTimeZone@icu_56@@UBEHEHHHEHAAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::getOffset
PUBLIC	?setRawOffset@RuleBasedTimeZone@icu_56@@UAEXH@Z	; icu_56::RuleBasedTimeZone::setRawOffset
PUBLIC	?getRawOffset@RuleBasedTimeZone@icu_56@@UBEHXZ	; icu_56::RuleBasedTimeZone::getRawOffset
PUBLIC	?useDaylightTime@RuleBasedTimeZone@icu_56@@UBECXZ ; icu_56::RuleBasedTimeZone::useDaylightTime
PUBLIC	?inDaylightTime@RuleBasedTimeZone@icu_56@@UBECNAAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::inDaylightTime
PUBLIC	?hasSameRules@RuleBasedTimeZone@icu_56@@UBECABVTimeZone@2@@Z ; icu_56::RuleBasedTimeZone::hasSameRules
PUBLIC	?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ ; icu_56::RuleBasedTimeZone::clone
PUBLIC	?getNextTransition@RuleBasedTimeZone@icu_56@@UBECNCAAVTimeZoneTransition@2@@Z ; icu_56::RuleBasedTimeZone::getNextTransition
PUBLIC	?getPreviousTransition@RuleBasedTimeZone@icu_56@@UBECNCAAVTimeZoneTransition@2@@Z ; icu_56::RuleBasedTimeZone::getPreviousTransition
PUBLIC	?countTransitionRules@RuleBasedTimeZone@icu_56@@UBEHAAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::countTransitionRules
PUBLIC	?getTimeZoneRules@RuleBasedTimeZone@icu_56@@UBEXAAPBVInitialTimeZoneRule@2@QAPBVTimeZoneRule@2@AAHAAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::getTimeZoneRules
PUBLIC	?getOffsetFromLocal@RuleBasedTimeZone@icu_56@@UBEXNHHAAH0AAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::getOffsetFromLocal
PUBLIC	??9RuleBasedTimeZone@icu_56@@UBECABVTimeZone@1@@Z ; icu_56::RuleBasedTimeZone::operator!=
EXTRN	??0BasicTimeZone@icu_56@@IAE@ABVUnicodeString@1@@Z:PROC ; icu_56::BasicTimeZone::BasicTimeZone
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?getDSTSavings@TimeZone@icu_56@@UBEHXZ:PROC	; icu_56::TimeZone::getDSTSavings
EXTRN	?hasEquivalentTransitions@BasicTimeZone@icu_56@@UBECABV12@NNCAAW4UErrorCode@@@Z:PROC ; icu_56::BasicTimeZone::hasEquivalentTransitions
EXTRN	?getSimpleRulesNear@BasicTimeZone@icu_56@@UBEXNAAPAVInitialTimeZoneRule@2@AAPAVAnnualTimeZoneRule@2@1AAW4UErrorCode@@@Z:PROC ; icu_56::BasicTimeZone::getSimpleRulesNear
;	COMDAT ??_R1A@?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UMemory@icu_56@@8
rdata$r	SEGMENT
??_R2UMemory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UMemory@icu_56@@8
rdata$r	SEGMENT
??_R3UMemory@icu_56@@8 DD 00H				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUMemory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUMemory@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUMemory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R13?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UObject@icu_56@@8
rdata$r	SEGMENT
??_R2UObject@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UObject@icu_56@@8
rdata$r	SEGMENT
??_R3UObject@icu_56@@8 DD 00H				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUObject@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUObject@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUObject@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@UObject@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UObject@icu_56@@8 DD FLAT:??_R0?AVUObject@icu_56@@@8 ; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2TimeZone@icu_56@@8
rdata$r	SEGMENT
??_R2TimeZone@icu_56@@8 DD FLAT:??_R1A@?0A@EA@TimeZone@icu_56@@8 ; icu_56::TimeZone::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3TimeZone@icu_56@@8
rdata$r	SEGMENT
??_R3TimeZone@icu_56@@8 DD 00H				; icu_56::TimeZone::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TimeZone@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTimeZone@icu_56@@@8
_DATA	SEGMENT
??_R0?AVTimeZone@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::TimeZone `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTimeZone@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@TimeZone@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TimeZone@icu_56@@8 DD FLAT:??_R0?AVTimeZone@icu_56@@@8 ; icu_56::TimeZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TimeZone@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2BasicTimeZone@icu_56@@8
rdata$r	SEGMENT
??_R2BasicTimeZone@icu_56@@8 DD FLAT:??_R1A@?0A@EA@BasicTimeZone@icu_56@@8 ; icu_56::BasicTimeZone::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TimeZone@icu_56@@8
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3BasicTimeZone@icu_56@@8
rdata$r	SEGMENT
??_R3BasicTimeZone@icu_56@@8 DD 00H			; icu_56::BasicTimeZone::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2BasicTimeZone@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBasicTimeZone@icu_56@@@8
_DATA	SEGMENT
??_R0?AVBasicTimeZone@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::BasicTimeZone `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBasicTimeZone@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@BasicTimeZone@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BasicTimeZone@icu_56@@8 DD FLAT:??_R0?AVBasicTimeZone@icu_56@@@8 ; icu_56::BasicTimeZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BasicTimeZone@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RuleBasedTimeZone@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RuleBasedTimeZone@icu_56@@8 DD FLAT:??_R0?AVRuleBasedTimeZone@icu_56@@@8 ; icu_56::RuleBasedTimeZone::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RuleBasedTimeZone@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2RuleBasedTimeZone@icu_56@@8
rdata$r	SEGMENT
??_R2RuleBasedTimeZone@icu_56@@8 DD FLAT:??_R1A@?0A@EA@RuleBasedTimeZone@icu_56@@8 ; icu_56::RuleBasedTimeZone::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BasicTimeZone@icu_56@@8
	DD	FLAT:??_R1A@?0A@EA@TimeZone@icu_56@@8
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3RuleBasedTimeZone@icu_56@@8
rdata$r	SEGMENT
??_R3RuleBasedTimeZone@icu_56@@8 DD 00H			; icu_56::RuleBasedTimeZone::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2RuleBasedTimeZone@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRuleBasedTimeZone@icu_56@@@8
_DATA	SEGMENT
??_R0?AVRuleBasedTimeZone@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::RuleBasedTimeZone `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRuleBasedTimeZone@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RuleBasedTimeZone@icu_56@@6B@
rdata$r	SEGMENT
??_R4RuleBasedTimeZone@icu_56@@6B@ DD 00H		; icu_56::RuleBasedTimeZone::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRuleBasedTimeZone@icu_56@@@8
	DD	FLAT:??_R3RuleBasedTimeZone@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7RuleBasedTimeZone@icu_56@@6B@
CONST	SEGMENT
??_7RuleBasedTimeZone@icu_56@@6B@ DD FLAT:??_R4RuleBasedTimeZone@icu_56@@6B@ ; icu_56::RuleBasedTimeZone::`vftable'
	DD	FLAT:??_ERuleBasedTimeZone@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@RuleBasedTimeZone@icu_56@@UBEPAXXZ
	DD	FLAT:??8RuleBasedTimeZone@icu_56@@UBECABVTimeZone@1@@Z
	DD	FLAT:?getOffset@RuleBasedTimeZone@icu_56@@UBEXNCAAH0AAW4UErrorCode@@@Z
	DD	FLAT:?getOffset@RuleBasedTimeZone@icu_56@@UBEHEHHHEHHAAW4UErrorCode@@@Z
	DD	FLAT:?getOffset@RuleBasedTimeZone@icu_56@@UBEHEHHHEHAAW4UErrorCode@@@Z
	DD	FLAT:?setRawOffset@RuleBasedTimeZone@icu_56@@UAEXH@Z
	DD	FLAT:?getRawOffset@RuleBasedTimeZone@icu_56@@UBEHXZ
	DD	FLAT:?useDaylightTime@RuleBasedTimeZone@icu_56@@UBECXZ
	DD	FLAT:?inDaylightTime@RuleBasedTimeZone@icu_56@@UBECNAAW4UErrorCode@@@Z
	DD	FLAT:?hasSameRules@RuleBasedTimeZone@icu_56@@UBECABVTimeZone@2@@Z
	DD	FLAT:?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ
	DD	FLAT:?getDSTSavings@TimeZone@icu_56@@UBEHXZ
	DD	FLAT:?getNextTransition@RuleBasedTimeZone@icu_56@@UBECNCAAVTimeZoneTransition@2@@Z
	DD	FLAT:?getPreviousTransition@RuleBasedTimeZone@icu_56@@UBECNCAAVTimeZoneTransition@2@@Z
	DD	FLAT:?hasEquivalentTransitions@BasicTimeZone@icu_56@@UBECABV12@NNCAAW4UErrorCode@@@Z
	DD	FLAT:?countTransitionRules@RuleBasedTimeZone@icu_56@@UBEHAAW4UErrorCode@@@Z
	DD	FLAT:?getTimeZoneRules@RuleBasedTimeZone@icu_56@@UBEXAAPBVInitialTimeZoneRule@2@QAPBVTimeZoneRule@2@AAHAAW4UErrorCode@@@Z
	DD	FLAT:?getSimpleRulesNear@BasicTimeZone@icu_56@@UBEXNAAPAVInitialTimeZoneRule@2@AAPAVAnnualTimeZoneRule@2@1AAW4UErrorCode@@@Z
	DD	FLAT:?getOffsetFromLocal@RuleBasedTimeZone@icu_56@@UBEXNHHAAH0AAW4UErrorCode@@@Z
	DD	FLAT:??9RuleBasedTimeZone@icu_56@@UBECABVTimeZone@1@@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0RuleBasedTimeZone@icu_56@@QAE@ABVUnicodeString@1@PAVInitialTimeZoneRule@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_id$ = 8						; size = 4
_initialRule$ = 12					; size = 4
??0RuleBasedTimeZone@icu_56@@QAE@ABVUnicodeString@1@PAVInitialTimeZoneRule@1@@Z PROC ; icu_56::RuleBasedTimeZone::RuleBasedTimeZone, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BasicTimeZone@icu_56@@IAE@ABVUnicodeString@1@@Z ; icu_56::BasicTimeZone::BasicTimeZone
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RuleBasedTimeZone@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _initialRule$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 0
; Line 57
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0RuleBasedTimeZone@icu_56@@QAE@ABVUnicodeString@1@PAVInitialTimeZoneRule@1@@Z ENDP ; icu_56::RuleBasedTimeZone::RuleBasedTimeZone
_TEXT	ENDS
PUBLIC	?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::complete
PUBLIC	?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z ; icu_56::RuleBasedTimeZone::copyRules
PUBLIC	??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z	; icu_56::RuleBasedTimeZone::RuleBasedTimeZone
EXTRN	??1BasicTimeZone@icu_56@@UAE@XZ:PROC		; icu_56::BasicTimeZone::~BasicTimeZone
EXTRN	??0BasicTimeZone@icu_56@@IAE@ABV01@@Z:PROC	; icu_56::BasicTimeZone::BasicTimeZone
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z$0
__ehfuncinfo$??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
_status$70571 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_source$ = 8						; size = 4
??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z PROC		; icu_56::RuleBasedTimeZone::RuleBasedTimeZone, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BasicTimeZone@icu_56@@IAE@ABV01@@Z	; icu_56::BasicTimeZone::BasicTimeZone
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RuleBasedTimeZone@icu_56@@6B@
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 0
; Line 62
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z ; icu_56::RuleBasedTimeZone::copyRules
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], eax
; Line 63
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z ; icu_56::RuleBasedTimeZone::copyRules
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], eax
; Line 64
	mov	eax, DWORD PTR _source$[ebp]
	movsx	ecx, BYTE PTR [eax+84]
	test	ecx, ecx
	je	SHORT $LN2@RuleBasedT
; Line 65
	mov	DWORD PTR _status$70571[ebp], 0
; Line 66
	lea	eax, DWORD PTR _status$70571[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::complete
$LN2@RuleBasedT:
; Line 68
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@RuleBasedT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN8@RuleBasedT:
	DD	1
	DD	$LN7@RuleBasedT
$LN7@RuleBasedT:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@RuleBasedT
$LN5@RuleBasedT:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BasicTimeZone@icu_56@@UAE@XZ		; icu_56::BasicTimeZone::~BasicTimeZone
__ehhandler$??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z ENDP		; icu_56::RuleBasedTimeZone::RuleBasedTimeZone
PUBLIC	?deleteRules@RuleBasedTimeZone@icu_56@@AAEXXZ	; icu_56::RuleBasedTimeZone::deleteRules
PUBLIC	?deleteTransitions@RuleBasedTimeZone@icu_56@@AAEXXZ ; icu_56::RuleBasedTimeZone::deleteTransitions
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1RuleBasedTimeZone@icu_56@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RuleBasedTimeZone@icu_56@@UAE@XZ$0
__ehfuncinfo$??1RuleBasedTimeZone@icu_56@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1RuleBasedTimeZone@icu_56@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1RuleBasedTimeZone@icu_56@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1RuleBasedTimeZone@icu_56@@UAE@XZ PROC		; icu_56::RuleBasedTimeZone::~RuleBasedTimeZone, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1RuleBasedTimeZone@icu_56@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RuleBasedTimeZone@icu_56@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 71
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deleteTransitions@RuleBasedTimeZone@icu_56@@AAEXXZ ; icu_56::RuleBasedTimeZone::deleteTransitions
; Line 72
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deleteRules@RuleBasedTimeZone@icu_56@@AAEXXZ ; icu_56::RuleBasedTimeZone::deleteRules
; Line 73
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BasicTimeZone@icu_56@@UAE@XZ		; icu_56::BasicTimeZone::~BasicTimeZone
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1RuleBasedTimeZone@icu_56@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BasicTimeZone@icu_56@@UAE@XZ		; icu_56::BasicTimeZone::~BasicTimeZone
__ehhandler$??1RuleBasedTimeZone@icu_56@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1RuleBasedTimeZone@icu_56@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1RuleBasedTimeZone@icu_56@@UAE@XZ ENDP		; icu_56::RuleBasedTimeZone::~RuleBasedTimeZone
PUBLIC	??4RuleBasedTimeZone@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::RuleBasedTimeZone::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4RuleBasedTimeZone@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??4RuleBasedTimeZone@icu_56@@QAEAAV01@ABV01@@Z PROC	; icu_56::RuleBasedTimeZone::operator=, COMDAT
; _this$ = ecx
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	esi, esp
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator
; Line 78
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4BasicTimeZone@icu_56@@QAEAAV01@ABV01@@Z
; Line 79
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deleteRules@RuleBasedTimeZone@icu_56@@AAEXXZ ; icu_56::RuleBasedTimeZone::deleteRules
; Line 80
	mov	eax, DWORD PTR _right$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _right$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], eax
; Line 81
	mov	eax, DWORD PTR _right$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z ; icu_56::RuleBasedTimeZone::copyRules
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], eax
; Line 82
	mov	eax, DWORD PTR _right$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z ; icu_56::RuleBasedTimeZone::copyRules
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], eax
; Line 83
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deleteTransitions@RuleBasedTimeZone@icu_56@@AAEXXZ ; icu_56::RuleBasedTimeZone::deleteTransitions
; Line 84
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 0
$LN1@operator:
; Line 86
	mov	eax, DWORD PTR _this$[ebp]
; Line 87
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4RuleBasedTimeZone@icu_56@@QAEAAV01@ABV01@@Z ENDP	; icu_56::RuleBasedTimeZone::operator=
_TEXT	ENDS
EXTRN	??8TimeZone@icu_56@@UBECABV01@@Z:PROC		; icu_56::TimeZone::operator==
EXTRN	__imp_??9type_info@@QBE_NABV0@@Z:PROC
EXTRN	___RTtypeid:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??8RuleBasedTimeZone@icu_56@@UBECABVTimeZone@1@@Z
_TEXT	SEGMENT
_rbtz$ = -20						; size = 4
_this$ = -8						; size = 4
_that$ = 8						; size = 4
??8RuleBasedTimeZone@icu_56@@UBECABVTimeZone@1@@Z PROC	; icu_56::RuleBasedTimeZone::operator==, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _that$[ebp]
	jne	SHORT $LN5@operator@2
; Line 92
	mov	al, 1
	jmp	$LN6@operator@2
$LN5@operator@2:
; Line 95
	mov	eax, DWORD PTR _that$[ebp]
	push	eax
	call	___RTtypeid
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	___RTtypeid
	add	esp, 4
	mov	ecx, eax
	call	DWORD PTR __imp_??9type_info@@QBE_NABV0@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@operator@2
	mov	eax, DWORD PTR _that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8TimeZone@icu_56@@UBECABV01@@Z	; icu_56::TimeZone::operator==
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@operator@2
$LN3@operator@2:
; Line 96
	xor	al, al
	jmp	SHORT $LN6@operator@2
$LN4@operator@2:
; Line 98
	mov	eax, DWORD PTR _that$[ebp]
	mov	DWORD PTR _rbtz$[ebp], eax
; Line 99
	mov	esi, esp
	mov	eax, DWORD PTR _rbtz$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+68]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@operator@2
; Line 100
	xor	al, al
	jmp	SHORT $LN6@operator@2
$LN2@operator@2:
; Line 103
	mov	eax, DWORD PTR _rbtz$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	call	?compareRules@icu_56@@YACPAVUVector@1@0@Z ; icu_56::compareRules
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator@2
	mov	eax, DWORD PTR _rbtz$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	call	?compareRules@icu_56@@YACPAVUVector@1@0@Z ; icu_56::compareRules
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator@2
; Line 104
	mov	al, 1
	jmp	SHORT $LN6@operator@2
$LN1@operator@2:
; Line 106
	xor	al, al
$LN6@operator@2:
; Line 107
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8RuleBasedTimeZone@icu_56@@UBECABVTimeZone@1@@Z ENDP	; icu_56::RuleBasedTimeZone::operator==
_TEXT	ENDS
EXTRN	__imp_?elementAt@UVector@icu_56@@QBEPAXH@Z:PROC
EXTRN	__imp_?size@UVector@icu_56@@QBEHXZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareRules@icu_56@@YACPAVUVector@1@0@Z
_TEXT	SEGMENT
_r2$70550 = -44						; size = 4
_r1$70548 = -32						; size = 4
_i$70544 = -20						; size = 4
_size$ = -8						; size = 4
_rules1$ = 8						; size = 4
_rules2$ = 12						; size = 4
?compareRules@icu_56@@YACPAVUVector@1@0@Z PROC		; icu_56::compareRules, COMDAT
; Line 32
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 33
	cmp	DWORD PTR _rules1$[ebp], 0
	jne	SHORT $LN9@compareRul
	cmp	DWORD PTR _rules2$[ebp], 0
	jne	SHORT $LN9@compareRul
; Line 34
	mov	al, 1
	jmp	$LN10@compareRul
	jmp	SHORT $LN8@compareRul
$LN9@compareRul:
; Line 35
	cmp	DWORD PTR _rules1$[ebp], 0
	je	SHORT $LN6@compareRul
	cmp	DWORD PTR _rules2$[ebp], 0
	jne	SHORT $LN8@compareRul
$LN6@compareRul:
; Line 36
	xor	al, al
	jmp	$LN10@compareRul
$LN8@compareRul:
; Line 38
	mov	esi, esp
	mov	ecx, DWORD PTR _rules1$[ebp]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _size$[ebp], eax
; Line 39
	mov	esi, esp
	mov	ecx, DWORD PTR _rules2$[ebp]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _size$[ebp], eax
	je	SHORT $LN5@compareRul
; Line 40
	xor	al, al
	jmp	SHORT $LN10@compareRul
$LN5@compareRul:
; Line 42
	mov	DWORD PTR _i$70544[ebp], 0
	jmp	SHORT $LN4@compareRul
$LN3@compareRul:
	mov	eax, DWORD PTR _i$70544[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70544[ebp], eax
$LN4@compareRul:
	mov	eax, DWORD PTR _i$70544[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN2@compareRul
; Line 43
	mov	esi, esp
	mov	eax, DWORD PTR _i$70544[ebp]
	push	eax
	mov	ecx, DWORD PTR _rules1$[ebp]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r1$70548[ebp], eax
; Line 44
	mov	esi, esp
	mov	eax, DWORD PTR _i$70544[ebp]
	push	eax
	mov	ecx, DWORD PTR _rules2$[ebp]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r2$70550[ebp], eax
; Line 45
	mov	esi, esp
	mov	eax, DWORD PTR _r2$70550[ebp]
	push	eax
	mov	ecx, DWORD PTR _r1$70548[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _r1$70548[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@compareRul
; Line 46
	xor	al, al
	jmp	SHORT $LN10@compareRul
$LN1@compareRul:
; Line 48
	jmp	SHORT $LN3@compareRul
$LN2@compareRul:
; Line 49
	mov	al, 1
$LN10@compareRul:
; Line 50
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?compareRules@icu_56@@YACPAVUVector@1@0@Z ENDP		; icu_56::compareRules
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??9RuleBasedTimeZone@icu_56@@UBECABVTimeZone@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_that$ = 8						; size = 4
??9RuleBasedTimeZone@icu_56@@UBECABVTimeZone@1@@Z PROC	; icu_56::RuleBasedTimeZone::operator!=, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	esi, esp
	mov	eax, DWORD PTR _that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	sete	al
; Line 112
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9RuleBasedTimeZone@icu_56@@UBECABVTimeZone@1@@Z ENDP	; icu_56::RuleBasedTimeZone::operator!=
_TEXT	ENDS
PUBLIC	??_SUVector@icu_56@@6B@				; icu_56::UVector::`local vftable'
PUBLIC	??_R0?AVTimeZoneRule@icu_56@@@8			; icu_56::TimeZoneRule `RTTI Type Descriptor'
PUBLIC	??_R0?AVAnnualTimeZoneRule@icu_56@@@8		; icu_56::AnnualTimeZoneRule `RTTI Type Descriptor'
PUBLIC	?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::addTransitionRule
PUBLIC	??_R4UVector@icu_56@@6B@			; icu_56::UVector::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUVector@icu_56@@@8			; icu_56::UVector `RTTI Type Descriptor'
PUBLIC	??_R3UVector@icu_56@@8				; icu_56::UVector::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UVector@icu_56@@8				; icu_56::UVector::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UVector@icu_56@@8			; icu_56::UVector::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_?addElement@UVector@icu_56@@QAEXPAXAAW4UErrorCode@@@Z:PROC
EXTRN	__imp_??0UVector@icu_56@@QAE@AAW4UErrorCode@@@Z:PROC
EXTRN	__imp_??2UMemory@icu_56@@SAPAXI@Z:PROC
EXTRN	?MAX_YEAR@AnnualTimeZoneRule@icu_56@@2HB:DWORD	; icu_56::AnnualTimeZoneRule::MAX_YEAR
EXTRN	?getEndYear@AnnualTimeZoneRule@icu_56@@QBEHXZ:PROC ; icu_56::AnnualTimeZoneRule::getEndYear
EXTRN	___RTDynamicCast:PROC
EXTRN	??_EUVector@icu_56@@UAEPAXI@Z:PROC		; icu_56::UVector::`vector deleting destructor'
EXTRN	?getDynamicClassID@UVector@icu_56@@UBEPAXXZ:PROC ; icu_56::UVector::getDynamicClassID
;	COMDAT ??_R1A@?0A@EA@UVector@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UVector@icu_56@@8 DD FLAT:??_R0?AVUVector@icu_56@@@8 ; icu_56::UVector::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UVector@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UVector@icu_56@@8
rdata$r	SEGMENT
??_R2UVector@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UVector@icu_56@@8 ; icu_56::UVector::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UVector@icu_56@@8
rdata$r	SEGMENT
??_R3UVector@icu_56@@8 DD 00H				; icu_56::UVector::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2UVector@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUVector@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUVector@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UVector `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUVector@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UVector@icu_56@@6B@
rdata$r	SEGMENT
??_R4UVector@icu_56@@6B@ DD 00H				; icu_56::UVector::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUVector@icu_56@@@8
	DD	FLAT:??_R3UVector@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_SUVector@icu_56@@6B@
CONST	SEGMENT
??_SUVector@icu_56@@6B@ DD FLAT:??_R4UVector@icu_56@@6B@ ; icu_56::UVector::`local vftable'
	DD	FLAT:??_EUVector@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UVector@icu_56@@UBEPAXXZ
CONST	ENDS
;	COMDAT ??_R0?AVTimeZoneRule@icu_56@@@8
_DATA	SEGMENT
??_R0?AVTimeZoneRule@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::TimeZoneRule `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTimeZoneRule@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVAnnualTimeZoneRule@icu_56@@@8
_DATA	SEGMENT
??_R0?AVAnnualTimeZoneRule@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::AnnualTimeZoneRule `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAnnualTimeZoneRule@icu_56@@', 00H
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z$1
__ehfuncinfo$?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv141 = -280						; size = 4
tv87 = -280						; size = 4
$T78010 = -272						; size = 4
$T78011 = -260						; size = 4
$T78014 = -248						; size = 4
$T78015 = -236						; size = 4
_atzrule$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_rule$ = 8						; size = 4
_status$ = 12						; size = 4
?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z PROC ; icu_56::RuleBasedTimeZone::addTransitionRule, COMDAT
; _this$ = ecx
; Line 115
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 116
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN9@addTransit
; Line 117
	jmp	$LN10@addTransit
$LN9@addTransit:
; Line 119
	push	0
	push	OFFSET ??_R0?AVAnnualTimeZoneRule@icu_56@@@8
	push	OFFSET ??_R0?AVTimeZoneRule@icu_56@@@8
	push	0
	mov	eax, DWORD PTR _rule$[ebp]
	push	eax
	call	___RTDynamicCast
	add	esp, 20					; 00000014H
	mov	DWORD PTR _atzrule$[ebp], eax
; Line 120
	cmp	DWORD PTR _atzrule$[ebp], 0
	je	$LN8@addTransit
	mov	ecx, DWORD PTR _atzrule$[ebp]
	call	?getEndYear@AnnualTimeZoneRule@icu_56@@QBEHXZ ; icu_56::AnnualTimeZoneRule::getEndYear
	cmp	eax, DWORD PTR ?MAX_YEAR@AnnualTimeZoneRule@icu_56@@2HB ; icu_56::AnnualTimeZoneRule::MAX_YEAR
	jne	$LN8@addTransit
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jne	$LN7@addTransit
; Line 123
	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78011[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78011[ebp], 0
	je	SHORT $LN12@addTransit
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78011[ebp]
	call	DWORD PTR __imp_??0UVector@icu_56@@QAE@AAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T78011[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_SUVector@icu_56@@6B@
	mov	edx, DWORD PTR $T78011[ebp]
	mov	DWORD PTR tv87[ebp], edx
	jmp	SHORT $LN13@addTransit
$LN12@addTransit:
	mov	DWORD PTR tv87[ebp], 0
$LN13@addTransit:
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR $T78010[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T78010[ebp]
	mov	DWORD PTR [ecx+76], edx
; Line 124
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@addTransit
; Line 125
	jmp	$LN10@addTransit
$LN6@addTransit:
; Line 126
	jmp	SHORT $LN5@addTransit
$LN7@addTransit:
; Line 127
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	jl	SHORT $LN5@addTransit
; Line 129
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
; Line 130
	jmp	$LN10@addTransit
$LN5@addTransit:
; Line 132
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rule$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	call	DWORD PTR __imp_?addElement@UVector@icu_56@@QAEXPAXAAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 133
	jmp	$LN3@addTransit
$LN8@addTransit:
; Line 135
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jne	$LN2@addTransit
; Line 136
	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78015[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T78015[ebp], 0
	je	SHORT $LN14@addTransit
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78015[ebp]
	call	DWORD PTR __imp_??0UVector@icu_56@@QAE@AAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T78015[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_SUVector@icu_56@@6B@
	mov	edx, DWORD PTR $T78015[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN15@addTransit
$LN14@addTransit:
	mov	DWORD PTR tv141[ebp], 0
$LN15@addTransit:
	mov	eax, DWORD PTR tv141[ebp]
	mov	DWORD PTR $T78014[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T78014[ebp]
	mov	DWORD PTR [ecx+72], edx
; Line 137
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@addTransit
; Line 138
	jmp	SHORT $LN10@addTransit
$LN2@addTransit:
; Line 141
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rule$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	call	DWORD PTR __imp_?addElement@UVector@icu_56@@QAEXPAXAAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@addTransit:
; Line 144
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 0
$LN10@addTransit:
; Line 145
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z$0:
	mov	esi, esp
	mov	eax, DWORD PTR $T78011[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z$1:
	mov	esi, esp
	mov	eax, DWORD PTR $T78015[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?addTransitionRule@RuleBasedTimeZone@icu_56@@QAEXPAVTimeZoneRule@2@AAW4UErrorCode@@@Z ENDP ; icu_56::RuleBasedTimeZone::addTransitionRule
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\include\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
EXTRN	__imp_??1UVector@icu_56@@UAE@XZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUVector@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUVector@icu_56@@UAEPAXI@Z PROC			; icu_56::UVector::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UVector@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUVector@icu_56@@UAEPAXI@Z ENDP			; icu_56::UVector::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?completeConst@RuleBasedTimeZone@icu_56@@ABEXAAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::completeConst
EXTRN	_umtx_unlock_56:PROC
EXTRN	_umtx_lock_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?completeConst@RuleBasedTimeZone@icu_56@@ABEXAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_ncThis$70634 = -20					; size = 4
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?completeConst@RuleBasedTimeZone@icu_56@@ABEXAAW4UErrorCode@@@Z PROC ; icu_56::RuleBasedTimeZone::completeConst, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\rbtz.cpp
; Line 150
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@completeCo
; Line 152
	jmp	SHORT $LN3@completeCo
$LN2@completeCo:
; Line 154
	push	OFFSET _gLock
	call	_umtx_lock_56
	add	esp, 4
; Line 155
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+84]
	test	ecx, ecx
	jne	SHORT $LN1@completeCo
; Line 156
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _ncThis$70634[ebp], eax
; Line 157
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ncThis$70634[ebp]
	call	?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::complete
$LN1@completeCo:
; Line 159
	push	OFFSET _gLock
	call	_umtx_unlock_56
	add	esp, 4
$LN3@completeCo:
; Line 160
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?completeConst@RuleBasedTimeZone@icu_56@@ABEXAAW4UErrorCode@@@Z ENDP ; icu_56::RuleBasedTimeZone::completeConst
_TEXT	ENDS
PUBLIC	__real@43846a3eddf8cd80
PUBLIC	__real@c384763b62073280
PUBLIC	__$ArrayPad$
EXTRN	_uprv_free_56:PROC
EXTRN	__imp_??1UnicodeString@icu_56@@UAE@XZ:PROC
EXTRN	__imp_??8UnicodeString@icu_56@@QBECABV01@@Z:PROC
EXTRN	?getName@TimeZoneRule@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z:PROC ; icu_56::TimeZoneRule::getName
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@XZ:PROC
EXTRN	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ:PROC	; icu_56::TimeZoneRule::getDSTSavings
EXTRN	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ:PROC	; icu_56::TimeZoneRule::getRawOffset
EXTRN	_uprv_malloc_56:PROC
;	COMDAT __real@43846a3eddf8cd80
CONST	SEGMENT
__real@43846a3eddf8cd80 DQ 043846a3eddf8cd80r	; 1.83882e+017
CONST	ENDS
;	COMDAT __real@c384763b62073280
CONST	SEGMENT
__real@c384763b62073280 DQ 0c384763b62073280r	; -1.84304e+017
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z$10
	DD	00H
	DD	FLAT:__unwindfunclet$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z$11
	DD	01H
	DD	FLAT:__unwindfunclet$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z$13
__ehfuncinfo$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv270 = -724						; size = 4
tv241 = -724						; size = 4
$T78035 = -716						; size = 4
$T78036 = -704						; size = 4
$T78039 = -692						; size = 4
$T78040 = -680						; size = 4
_final1$70738 = -476					; size = 4
_final0$70733 = -464					; size = 4
_avail1$70729 = -449					; size = 1
_avail0$70728 = -437					; size = 1
_tt1$70727 = -428					; size = 8
_tt0$70726 = -412					; size = 8
_rule1$70724 = -396					; size = 4
_rule0$70722 = -384					; size = 4
_trst$70707 = -372					; size = 4
_fr$70693 = -360					; size = 4
_j$70683 = -348						; size = 4
_bDoneAll$70682 = -333					; size = 1
_name$70670 = -324					; size = 64
_curName$70669 = -252					; size = 64
_tt$70668 = -180					; size = 8
_avail$70667 = -161					; size = 1
_r$70666 = -152						; size = 4
_nextRule$70665 = -140					; size = 4
_nextTransitionTime$70664 = -128			; size = 8
_curDstSavings$70663 = -112				; size = 4
_curStdOffset$70662 = -100				; size = 4
_historicCount$70650 = -88				; size = 4
_i$70649 = -76						; size = 4
_lastTransitionTime$70647 = -64				; size = 8
_curRule$70646 = -48					; size = 4
_done$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_status$ = 8						; size = 4
?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z PROC ; icu_56::RuleBasedTimeZone::complete, COMDAT
; _this$ = ecx
; Line 163
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 712				; 000002c8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-724]
	mov	ecx, 178				; 000000b2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 164
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN62@complete
; Line 165
	jmp	$LN63@complete
$LN62@complete:
; Line 167
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+84]
	test	ecx, ecx
	je	SHORT $LN61@complete
; Line 168
	jmp	$LN63@complete
$LN61@complete:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN60@complete
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	SHORT $LN60@complete
; Line 173
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
; Line 174
	jmp	$LN63@complete
$LN60@complete:
; Line 177
	mov	DWORD PTR _done$[ebp], 0
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jne	SHORT $LN58@complete
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	$LN4@complete
$LN58@complete:
; Line 180
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _curRule$70646[ebp], ecx
; Line 181
	fld	QWORD PTR __real@c384763b62073280
	fstp	QWORD PTR _lastTransitionTime$70647[ebp]
; Line 185
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN50@complete
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jle	$LN50@complete
; Line 187
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _historicCount$70650[ebp], eax
; Line 188
	mov	eax, DWORD PTR _historicCount$70650[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _done$[ebp], eax
; Line 189
	cmp	DWORD PTR _done$[ebp], 0
	jne	SHORT $LN56@complete
; Line 190
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 191
	jmp	$cleanup$70654
$LN56@complete:
; Line 193
	mov	DWORD PTR _i$70649[ebp], 0
	jmp	SHORT $LN54@complete
$LN53@complete:
	mov	eax, DWORD PTR _i$70649[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70649[ebp], eax
$LN54@complete:
	mov	eax, DWORD PTR _i$70649[ebp]
	cmp	eax, DWORD PTR _historicCount$70650[ebp]
	jge	SHORT $LN52@complete
; Line 194
	mov	eax, DWORD PTR _done$[ebp]
	add	eax, DWORD PTR _i$70649[ebp]
	mov	BYTE PTR [eax], 0
; Line 195
	jmp	SHORT $LN53@complete
$LN52@complete:
; Line 196
	mov	eax, 1
	test	eax, eax
	je	$LN50@complete
; Line 197
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	mov	DWORD PTR _curStdOffset$70662[ebp], eax
; Line 198
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	mov	DWORD PTR _curDstSavings$70663[ebp], eax
; Line 199
	fld	QWORD PTR __real@43846a3eddf8cd80
	fstp	QWORD PTR _nextTransitionTime$70664[ebp]
; Line 200
	mov	DWORD PTR _nextRule$70665[ebp], 0
; Line 201
	mov	DWORD PTR _r$70666[ebp], 0
; Line 204
	mov	esi, esp
	lea	ecx, DWORD PTR _curName$70669[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _name$70670[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 205
	lea	eax, DWORD PTR _curName$70669[ebp]
	push	eax
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	call	?getName@TimeZoneRule@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z ; icu_56::TimeZoneRule::getName
; Line 207
	mov	DWORD PTR _i$70649[ebp], 0
	jmp	SHORT $LN49@complete
$LN48@complete:
	mov	eax, DWORD PTR _i$70649[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70649[ebp], eax
$LN49@complete:
	mov	eax, DWORD PTR _i$70649[ebp]
	cmp	eax, DWORD PTR _historicCount$70650[ebp]
	jge	$LN47@complete
; Line 208
	mov	eax, DWORD PTR _done$[ebp]
	add	eax, DWORD PTR _i$70649[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN46@complete
; Line 209
	jmp	SHORT $LN48@complete
$LN46@complete:
; Line 211
	mov	esi, esp
	mov	eax, DWORD PTR _i$70649[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$70666[ebp], eax
; Line 212
	mov	esi, esp
	lea	eax, DWORD PTR _tt$70668[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _curDstSavings$70663[ebp]
	push	ecx
	mov	edx, DWORD PTR _curStdOffset$70662[ebp]
	push	edx
	sub	esp, 8
	fld	QWORD PTR _lastTransitionTime$70647[ebp]
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _r$70666[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _r$70666[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _avail$70667[ebp], al
; Line 213
	movsx	eax, BYTE PTR _avail$70667[ebp]
	test	eax, eax
	jne	SHORT $LN45@complete
; Line 215
	mov	eax, DWORD PTR _done$[ebp]
	add	eax, DWORD PTR _i$70649[ebp]
	mov	BYTE PTR [eax], 1
; Line 216
	jmp	$LN41@complete
$LN45@complete:
; Line 217
	lea	eax, DWORD PTR _name$70670[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$70666[ebp]
	call	?getName@TimeZoneRule@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z ; icu_56::TimeZoneRule::getName
; Line 220
	mov	esi, esp
	mov	eax, DWORD PTR _curRule$70646[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$70666[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _r$70666[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN42@complete
	mov	esi, esp
	lea	eax, DWORD PTR _curName$70669[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$70670[ebp]
	call	DWORD PTR __imp_??8UnicodeString@icu_56@@QBECABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN43@complete
	mov	ecx, DWORD PTR _r$70666[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	mov	esi, eax
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	cmp	esi, eax
	jne	SHORT $LN43@complete
	mov	ecx, DWORD PTR _r$70666[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	mov	esi, eax
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	cmp	esi, eax
	jne	SHORT $LN43@complete
$LN42@complete:
; Line 221
	jmp	$LN48@complete
$LN43@complete:
; Line 223
	fld	QWORD PTR _nextTransitionTime$70664[ebp]
	fcomp	QWORD PTR _tt$70668[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN41@complete
; Line 224
	fld	QWORD PTR _tt$70668[ebp]
	fstp	QWORD PTR _nextTransitionTime$70664[ebp]
; Line 225
	mov	eax, DWORD PTR _r$70666[ebp]
	mov	DWORD PTR _nextRule$70665[ebp], eax
$LN41@complete:
; Line 228
	jmp	$LN48@complete
$LN47@complete:
; Line 230
	cmp	DWORD PTR _nextRule$70665[ebp], 0
	jne	$LN35@complete
; Line 232
	mov	BYTE PTR _bDoneAll$70682[ebp], 1
; Line 233
	mov	DWORD PTR _j$70683[ebp], 0
	jmp	SHORT $LN39@complete
$LN38@complete:
	mov	eax, DWORD PTR _j$70683[ebp]
	add	eax, 1
	mov	DWORD PTR _j$70683[ebp], eax
$LN39@complete:
	mov	eax, DWORD PTR _j$70683[ebp]
	cmp	eax, DWORD PTR _historicCount$70650[ebp]
	jge	SHORT $LN37@complete
; Line 234
	mov	eax, DWORD PTR _done$[ebp]
	add	eax, DWORD PTR _j$70683[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN36@complete
; Line 235
	mov	BYTE PTR _bDoneAll$70682[ebp], 0
; Line 236
	jmp	SHORT $LN37@complete
$LN36@complete:
; Line 238
	jmp	SHORT $LN38@complete
$LN37@complete:
; Line 239
	movsx	eax, BYTE PTR _bDoneAll$70682[ebp]
	test	eax, eax
	je	SHORT $LN35@complete
; Line 240
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _name$70670[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _curName$70669[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN50@complete
$LN35@complete:
; Line 244
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	$LN31@complete
; Line 246
	mov	DWORD PTR _i$70649[ebp], 0
	jmp	SHORT $LN33@complete
$LN32@complete:
	mov	eax, DWORD PTR _i$70649[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70649[ebp], eax
$LN33@complete:
	cmp	DWORD PTR _i$70649[ebp], 2
	jge	$LN31@complete
; Line 247
	mov	esi, esp
	mov	eax, DWORD PTR _i$70649[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+76]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fr$70693[ebp], eax
; Line 248
	mov	esi, esp
	mov	eax, DWORD PTR _curRule$70646[ebp]
	push	eax
	mov	ecx, DWORD PTR _fr$70693[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _fr$70693[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN30@complete
; Line 249
	jmp	SHORT $LN32@complete
$LN30@complete:
; Line 251
	mov	esi, esp
	mov	eax, DWORD PTR _i$70649[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+76]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$70666[ebp], eax
; Line 252
	mov	esi, esp
	lea	eax, DWORD PTR _tt$70668[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _curDstSavings$70663[ebp]
	push	ecx
	mov	edx, DWORD PTR _curStdOffset$70662[ebp]
	push	edx
	sub	esp, 8
	fld	QWORD PTR _lastTransitionTime$70647[ebp]
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _r$70666[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _r$70666[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _avail$70667[ebp], al
; Line 253
	movsx	eax, BYTE PTR _avail$70667[ebp]
	test	eax, eax
	je	SHORT $LN28@complete
; Line 254
	fld	QWORD PTR _nextTransitionTime$70664[ebp]
	fcomp	QWORD PTR _tt$70668[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN28@complete
; Line 255
	fld	QWORD PTR _tt$70668[ebp]
	fstp	QWORD PTR _nextTransitionTime$70664[ebp]
; Line 256
	mov	eax, DWORD PTR _r$70666[ebp]
	mov	DWORD PTR _nextRule$70665[ebp], eax
$LN28@complete:
; Line 259
	jmp	$LN32@complete
$LN31@complete:
; Line 262
	cmp	DWORD PTR _nextRule$70665[ebp], 0
	jne	SHORT $LN27@complete
; Line 264
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _name$70670[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _curName$70669[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN50@complete
$LN27@complete:
; Line 267
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	$LN25@complete
; Line 268
	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78036[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T78036[ebp], 0
	je	SHORT $LN65@complete
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78036[ebp]
	call	DWORD PTR __imp_??0UVector@icu_56@@QAE@AAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T78036[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_SUVector@icu_56@@6B@
	mov	edx, DWORD PTR $T78036[ebp]
	mov	DWORD PTR tv241[ebp], edx
	jmp	SHORT $LN66@complete
$LN65@complete:
	mov	DWORD PTR tv241[ebp], 0
$LN66@complete:
	mov	eax, DWORD PTR tv241[ebp]
	mov	DWORD PTR $T78035[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T78035[ebp]
	mov	DWORD PTR [ecx+80], edx
; Line 269
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN25@complete
; Line 349
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _name$70670[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _curName$70669[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 270
	jmp	$cleanup$70654
$LN25@complete:
; Line 273
	push	16					; 00000010H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _trst$70707[ebp], eax
; Line 274
	cmp	DWORD PTR _trst$70707[ebp], 0
	jne	SHORT $LN23@complete
; Line 275
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 349
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _name$70670[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _curName$70669[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 276
	jmp	$cleanup$70654
$LN23@complete:
; Line 278
	mov	eax, DWORD PTR _trst$70707[ebp]
	fld	QWORD PTR _nextTransitionTime$70664[ebp]
	fstp	QWORD PTR [eax]
; Line 279
	mov	eax, DWORD PTR _trst$70707[ebp]
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 280
	mov	eax, DWORD PTR _trst$70707[ebp]
	mov	ecx, DWORD PTR _nextRule$70665[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 281
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trst$70707[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+80]
	call	DWORD PTR __imp_?addElement@UVector@icu_56@@QAEXPAXAAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 282
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN21@complete
; Line 349
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _name$70670[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _curName$70669[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 283
	jmp	$cleanup$70654
$LN21@complete:
; Line 285
	fld	QWORD PTR _nextTransitionTime$70664[ebp]
	fstp	QWORD PTR _lastTransitionTime$70647[ebp]
; Line 286
	mov	eax, DWORD PTR _nextRule$70665[ebp]
	mov	DWORD PTR _curRule$70646[ebp], eax
; Line 287
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _name$70670[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _curName$70669[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN52@complete
$LN50@complete:
; Line 289
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	$LN4@complete
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	$LN17@complete
; Line 291
	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78040[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T78040[ebp], 0
	je	SHORT $LN67@complete
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78040[ebp]
	call	DWORD PTR __imp_??0UVector@icu_56@@QAE@AAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T78040[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_SUVector@icu_56@@6B@
	mov	edx, DWORD PTR $T78040[ebp]
	mov	DWORD PTR tv270[ebp], edx
	jmp	SHORT $LN68@complete
$LN67@complete:
	mov	DWORD PTR tv270[ebp], 0
$LN68@complete:
	mov	eax, DWORD PTR tv270[ebp]
	mov	DWORD PTR $T78039[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T78039[ebp]
	mov	DWORD PTR [ecx+80], edx
; Line 292
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN17@complete
; Line 293
	jmp	$cleanup$70654
$LN17@complete:
; Line 297
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rule0$70722[ebp], eax
; Line 298
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rule1$70724[ebp], eax
; Line 300
	mov	esi, esp
	lea	eax, DWORD PTR _tt0$70726[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	sub	esp, 8
	fld	QWORD PTR _lastTransitionTime$70647[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _rule0$70722[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _rule0$70722[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _avail0$70728[ebp], al
; Line 301
	mov	esi, esp
	lea	eax, DWORD PTR _tt1$70727[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	sub	esp, 8
	fld	QWORD PTR _lastTransitionTime$70647[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _rule1$70724[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _rule1$70724[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _avail1$70729[ebp], al
; Line 302
	movsx	eax, BYTE PTR _avail0$70728[ebp]
	test	eax, eax
	je	SHORT $LN14@complete
	movsx	eax, BYTE PTR _avail1$70729[ebp]
	test	eax, eax
	jne	SHORT $LN15@complete
$LN14@complete:
; Line 304
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
; Line 305
	jmp	$cleanup$70654
$LN15@complete:
; Line 307
	push	16					; 00000010H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _final0$70733[ebp], eax
; Line 308
	cmp	DWORD PTR _final0$70733[ebp], 0
	jne	SHORT $LN12@complete
; Line 309
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 310
	jmp	$cleanup$70654
$LN12@complete:
; Line 312
	push	16					; 00000010H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _final1$70738[ebp], eax
; Line 313
	cmp	DWORD PTR _final1$70738[ebp], 0
	jne	SHORT $LN10@complete
; Line 314
	mov	eax, DWORD PTR _final0$70733[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 315
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 316
	jmp	$cleanup$70654
$LN10@complete:
; Line 318
	fld	QWORD PTR _tt1$70727[ebp]
	fcomp	QWORD PTR _tt0$70726[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN8@complete
; Line 319
	mov	eax, DWORD PTR _final0$70733[ebp]
	fld	QWORD PTR _tt0$70726[ebp]
	fstp	QWORD PTR [eax]
; Line 320
	mov	eax, DWORD PTR _final0$70733[ebp]
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 321
	mov	eax, DWORD PTR _final0$70733[ebp]
	mov	ecx, DWORD PTR _rule0$70722[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 322
	mov	esi, esp
	mov	eax, DWORD PTR _final1$70738[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _rule0$70722[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _rule0$70722[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	sub	esp, 8
	fld	QWORD PTR _tt0$70726[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _rule1$70724[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _rule1$70724[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 323
	mov	eax, DWORD PTR _final1$70738[ebp]
	mov	ecx, DWORD PTR _rule0$70722[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 324
	mov	eax, DWORD PTR _final1$70738[ebp]
	mov	ecx, DWORD PTR _rule1$70724[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 325
	jmp	$LN7@complete
$LN8@complete:
; Line 326
	mov	eax, DWORD PTR _final0$70733[ebp]
	fld	QWORD PTR _tt1$70727[ebp]
	fstp	QWORD PTR [eax]
; Line 327
	mov	eax, DWORD PTR _final0$70733[ebp]
	mov	ecx, DWORD PTR _curRule$70646[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 328
	mov	eax, DWORD PTR _final0$70733[ebp]
	mov	ecx, DWORD PTR _rule1$70724[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 329
	mov	esi, esp
	mov	eax, DWORD PTR _final1$70738[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _rule1$70724[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _rule1$70724[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	sub	esp, 8
	fld	QWORD PTR _tt1$70727[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _rule0$70722[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _rule0$70722[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 330
	mov	eax, DWORD PTR _final1$70738[ebp]
	mov	ecx, DWORD PTR _rule1$70724[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 331
	mov	eax, DWORD PTR _final1$70738[ebp]
	mov	ecx, DWORD PTR _rule0$70722[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN7@complete:
; Line 333
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _final0$70733[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+80]
	call	DWORD PTR __imp_?addElement@UVector@icu_56@@QAEXPAXAAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 334
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@complete
; Line 335
	jmp	SHORT $cleanup$70654
$LN6@complete:
; Line 337
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _final1$70738[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+80]
	call	DWORD PTR __imp_?addElement@UVector@icu_56@@QAEXPAXAAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 338
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@complete
; Line 339
	jmp	SHORT $cleanup$70654
$LN4@complete:
; Line 343
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 1
; Line 344
	cmp	DWORD PTR _done$[ebp], 0
	je	SHORT $LN2@complete
; Line 345
	mov	eax, DWORD PTR _done$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@complete:
; Line 347
	jmp	SHORT $LN63@complete
$cleanup$70654:
; Line 350
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deleteTransitions@RuleBasedTimeZone@icu_56@@AAEXXZ ; icu_56::RuleBasedTimeZone::deleteTransitions
; Line 351
	cmp	DWORD PTR _done$[ebp], 0
	je	SHORT $LN1@complete
; Line 352
	mov	eax, DWORD PTR _done$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@complete:
; Line 354
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 0
$LN63@complete:
; Line 355
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN80@complete
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 724				; 000002d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN80@complete:
	DD	5
	DD	$LN79@complete
$LN79@complete:
	DD	-180					; ffffff4cH
	DD	8
	DD	$LN73@complete
	DD	-252					; ffffff04H
	DD	64					; 00000040H
	DD	$LN74@complete
	DD	-324					; fffffebcH
	DD	64					; 00000040H
	DD	$LN75@complete
	DD	-412					; fffffe64H
	DD	8
	DD	$LN76@complete
	DD	-428					; fffffe54H
	DD	8
	DD	$LN77@complete
$LN77@complete:
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	49					; 00000031H
	DB	0
$LN76@complete:
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	48					; 00000030H
	DB	0
$LN75@complete:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN74@complete:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN73@complete:
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z$10:
	mov	esi, esp
	lea	ecx, DWORD PTR _curName$70669[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z$11:
	mov	esi, esp
	lea	ecx, DWORD PTR _name$70670[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z$12:
	mov	esi, esp
	mov	eax, DWORD PTR $T78036[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z$13:
	mov	esi, esp
	mov	eax, DWORD PTR $T78040[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-728]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?complete@RuleBasedTimeZone@icu_56@@QAEXAAW4UErrorCode@@@Z ENDP ; icu_56::RuleBasedTimeZone::complete
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ$0
__ehfuncinfo$?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ
_TEXT	SEGMENT
tv75 = -244						; size = 4
$T78066 = -236						; size = 4
$T78067 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ PROC ; icu_56::RuleBasedTimeZone::clone, COMDAT
; _this$ = ecx
; Line 358
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 359
	mov	esi, esp
	push	88					; 00000058H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78067[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78067[ebp], 0
	je	SHORT $LN3@clone
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78067[ebp]
	call	??0RuleBasedTimeZone@icu_56@@QAE@ABV01@@Z ; icu_56::RuleBasedTimeZone::RuleBasedTimeZone
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@clone
$LN3@clone:
	mov	DWORD PTR tv75[ebp], 0
$LN4@clone:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T78066[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T78066[ebp]
; Line 360
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ$0:
	mov	esi, esp
	mov	eax, DWORD PTR $T78067[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clone@RuleBasedTimeZone@icu_56@@UBEPAVTimeZone@2@XZ ENDP ; icu_56::RuleBasedTimeZone::clone
PUBLIC	?monthLength@Grego@icu_56@@SACHH@Z		; icu_56::Grego::monthLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getOffset@RuleBasedTimeZone@icu_56@@UBEHEHHHEHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_era$ = 8						; size = 1
_year$ = 12						; size = 4
_month$ = 16						; size = 4
_day$ = 20						; size = 4
_dayOfWeek$ = 24					; size = 1
_millis$ = 28						; size = 4
_status$ = 32						; size = 4
?getOffset@RuleBasedTimeZone@icu_56@@UBEHEHHHEHAAW4UErrorCode@@@Z PROC ; icu_56::RuleBasedTimeZone::getOffset, COMDAT
; _this$ = ecx
; Line 364
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 365
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@getOffset
; Line 366
	xor	eax, eax
	jmp	SHORT $LN5@getOffset
$LN4@getOffset:
; Line 368
	cmp	DWORD PTR _month$[ebp], 0
	jl	SHORT $LN2@getOffset
	cmp	DWORD PTR _month$[ebp], 11		; 0000000bH
	jle	SHORT $LN3@getOffset
$LN2@getOffset:
; Line 369
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 370
	xor	eax, eax
	jmp	SHORT $LN5@getOffset
; Line 371
	jmp	SHORT $LN5@getOffset
$LN3@getOffset:
; Line 373
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _month$[ebp]
	push	ecx
	mov	edx, DWORD PTR _year$[ebp]
	push	edx
	call	?monthLength@Grego@icu_56@@SACHH@Z	; icu_56::Grego::monthLength
	add	esp, 8
	movsx	eax, al
	push	eax
	mov	ecx, DWORD PTR _millis$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _dayOfWeek$[ebp]
	push	edx
	mov	eax, DWORD PTR _day$[ebp]
	push	eax
	mov	ecx, DWORD PTR _month$[ebp]
	push	ecx
	mov	edx, DWORD PTR _year$[ebp]
	push	edx
	movzx	eax, BYTE PTR _era$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@getOffset:
; Line 375
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?getOffset@RuleBasedTimeZone@icu_56@@UBEHEHHHEHAAW4UErrorCode@@@Z ENDP ; icu_56::RuleBasedTimeZone::getOffset
_TEXT	ENDS
PUBLIC	?isLeapYear@Grego@icu_56@@SACH@Z		; icu_56::Grego::isLeapYear
EXTRN	?MONTH_LENGTH@Grego@icu_56@@0QBCB:BYTE		; icu_56::Grego::MONTH_LENGTH
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?monthLength@Grego@icu_56@@SACHH@Z
_TEXT	SEGMENT
_year$ = 8						; size = 4
_month$ = 12						; size = 4
?monthLength@Grego@icu_56@@SACHH@Z PROC			; icu_56::Grego::monthLength, COMDAT
; File d:\mozilla\intl\icu\source\i18n\gregoimp.h
; Line 264
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 265
	mov	eax, DWORD PTR _year$[ebp]
	push	eax
	call	?isLeapYear@Grego@icu_56@@SACH@Z	; icu_56::Grego::isLeapYear
	add	esp, 4
	movsx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _month$[ebp]
	mov	al, BYTE PTR ?MONTH_LENGTH@Grego@icu_56@@0QBCB[edx+ecx]
; Line 266
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?monthLength@Grego@icu_56@@SACHH@Z ENDP			; icu_56::Grego::monthLength
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isLeapYear@Grego@icu_56@@SACH@Z
_TEXT	SEGMENT
tv70 = -193						; size = 1
_year$ = 8						; size = 4
?isLeapYear@Grego@icu_56@@SACH@Z PROC			; icu_56::Grego::isLeapYear, COMDAT
; Line 258
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 260
	mov	eax, DWORD PTR _year$[ebp]
	and	eax, 3
	jne	SHORT $LN4@isLeapYear
	mov	eax, DWORD PTR _year$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN3@isLeapYear
	mov	eax, DWORD PTR _year$[ebp]
	cdq
	mov	ecx, 400				; 00000190H
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN4@isLeapYear
$LN3@isLeapYear:
	mov	BYTE PTR tv70[ebp], 1
	jmp	SHORT $LN5@isLeapYear
$LN4@isLeapYear:
	mov	BYTE PTR tv70[ebp], 0
$LN5@isLeapYear:
	mov	al, BYTE PTR tv70[ebp]
; Line 261
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isLeapYear@Grego@icu_56@@SACH@Z ENDP			; icu_56::Grego::isLeapYear
_TEXT	ENDS
PUBLIC	?getOffsetInternal@RuleBasedTimeZone@icu_56@@ABEXNCHHAAH0AAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::getOffsetInternal
PUBLIC	__real@4194997000000000
EXTRN	?fieldsToDay@Grego@icu_56@@SANHHH@Z:PROC	; icu_56::Grego::fieldsToDay
;	COMDAT __real@4194997000000000
; File d:\mozilla\intl\icu\source\i18n\rbtz.cpp
CONST	SEGMENT
__real@4194997000000000 DQ 04194997000000000r	; 8.64e+007
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?getOffset@RuleBasedTimeZone@icu_56@@UBEHEHHHEHHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_time$ = -48						; size = 8
_dstOffset$ = -32					; size = 4
_rawOffset$ = -20					; size = 4
_this$ = -8						; size = 4
_era$ = 8						; size = 1
_year$ = 12						; size = 4
_month$ = 16						; size = 4
_day$ = 20						; size = 4
___formal$ = 24						; size = 1
_millis$ = 28						; size = 4
___formal$ = 32						; size = 4
_status$ = 36						; size = 4
?getOffset@RuleBasedTimeZone@icu_56@@UBEHEHHHEHHAAW4UErrorCode@@@Z PROC ; icu_56::RuleBasedTimeZone::getOffset, COMDAT
; _this$ = ecx
; Line 380
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 382
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@getOffset@2
; Line 383
	xor	eax, eax
	jmp	SHORT $LN4@getOffset@2
$LN3@getOffset@2:
; Line 385
	movzx	eax, BYTE PTR _era$[ebp]
	test	eax, eax
	jne	SHORT $LN2@getOffset@2
; Line 387
	mov	eax, 1
	sub	eax, DWORD PTR _year$[ebp]
	mov	DWORD PTR _year$[ebp], eax
$LN2@getOffset@2:
; Line 390
	mov	eax, DWORD PTR _day$[ebp]
	push	eax
	mov	ecx, DWORD PTR _month$[ebp]
	push	ecx
	mov	edx, DWORD PTR _year$[ebp]
	push	edx
	call	?fieldsToDay@Grego@icu_56@@SANHHH@Z	; icu_56::Grego::fieldsToDay
	add	esp, 12					; 0000000cH
	fmul	QWORD PTR __real@4194997000000000
	fiadd	DWORD PTR _millis$[ebp]
	fstp	QWORD PTR _time$[ebp]
; Line 391
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dstOffset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rawOffset$[ebp]
	push	edx
	push	1
	push	3
	push	1
	sub	esp, 8
	fld	QWORD PTR _time$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getOffsetInternal@RuleBasedTimeZone@icu_56@@ABEXNCHHAAH0AAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::getOffsetInternal
; Line 392
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@getOffset@2
; Line 393
	xor	eax, eax
	jmp	SHORT $LN4@getOffset@2
$LN1@getOffset@2:
; Line 395
	mov	eax, DWORD PTR _rawOffset$[ebp]
	add	eax, DWORD PTR _dstOffset$[ebp]
$LN4@getOffset@2:
; Line 396
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@getOffset@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
$LN9@getOffset@2:
	DD	2
	DD	$LN8@getOffset@2
$LN8@getOffset@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@getOffset@2
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@getOffset@2
$LN7@getOffset@2:
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN6@getOffset@2:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
?getOffset@RuleBasedTimeZone@icu_56@@UBEHEHHHEHHAAW4UErrorCode@@@Z ENDP ; icu_56::RuleBasedTimeZone::getOffset
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getOffset@RuleBasedTimeZone@icu_56@@UBEXNCAAH0AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_date$ = 8						; size = 8
_local$ = 16						; size = 1
_rawOffset$ = 20					; size = 4
_dstOffset$ = 24					; size = 4
_status$ = 28						; size = 4
?getOffset@RuleBasedTimeZone@icu_56@@UBEXNCAAH0AAW4UErrorCode@@@Z PROC ; icu_56::RuleBasedTimeZone::getOffset, COMDAT
; _this$ = ecx
; Line 400
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 401
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dstOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rawOffset$[ebp]
	push	edx
	push	12					; 0000000cH
	push	4
	movzx	eax, BYTE PTR _local$[ebp]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _date$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getOffsetInternal@RuleBasedTimeZone@icu_56@@ABEXNCHHAAH0AAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::getOffsetInternal
; Line 402
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?getOffset@RuleBasedTimeZone@icu_56@@UBEXNCAAH0AAW4UErrorCode@@@Z ENDP ; icu_56::RuleBasedTimeZone::getOffset
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getOffsetFromLocal@RuleBasedTimeZone@icu_56@@UBEXNHHAAH0AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_date$ = 8						; size = 8
_nonExistingTimeOpt$ = 16				; size = 4
_duplicatedTimeOpt$ = 20				; size = 4
_rawOffset$ = 24					; size = 4
_dstOffset$ = 28					; size = 4
_status$ = 32						; size = 4
?getOffsetFromLocal@RuleBasedTimeZone@icu_56@@UBEXNHHAAH0AAW4UErrorCode@@@Z PROC ; icu_56::RuleBasedTimeZone::getOffsetFromLocal, COMDAT
; _this$ = ecx
; Line 406
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 407
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dstOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rawOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _duplicatedTimeOpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nonExistingTimeOpt$[ebp]
	push	ecx
	push	1
	sub	esp, 8
	fld	QWORD PTR _date$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getOffsetInternal@RuleBasedTimeZone@icu_56@@ABEXNCHHAAH0AAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::getOffsetInternal
; Line 408
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?getOffsetFromLocal@RuleBasedTimeZone@icu_56@@UBEXNHHAAH0AAW4UErrorCode@@@Z ENDP ; icu_56::RuleBasedTimeZone::getOffsetFromLocal
_TEXT	ENDS
PUBLIC	?findRuleInFinal@RuleBasedTimeZone@icu_56@@ABEPAVTimeZoneRule@2@NCHH@Z ; icu_56::RuleBasedTimeZone::findRuleInFinal
PUBLIC	?getTransitionTime@RuleBasedTimeZone@icu_56@@ABENPAUTransition@2@CHH@Z ; icu_56::RuleBasedTimeZone::getTransitionTime
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getOffsetInternal@RuleBasedTimeZone@icu_56@@ABEXNCHHAAH0AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_tend$70828 = -64					; size = 8
_idx$70827 = -48					; size = 4
_tstart$70823 = -36					; size = 8
_rule$ = -20						; size = 4
_this$ = -8						; size = 4
_date$ = 8						; size = 8
_local$ = 16						; size = 1
_NonExistingTimeOpt$ = 20				; size = 4
_DuplicatedTimeOpt$ = 24				; size = 4
_rawOffset$ = 28					; size = 4
_dstOffset$ = 32					; size = 4
_status$ = 36						; size = 4
?getOffsetInternal@RuleBasedTimeZone@icu_56@@ABEXNCHHAAH0AAW4UErrorCode@@@Z PROC ; icu_56::RuleBasedTimeZone::getOffsetInternal, COMDAT
; _this$ = ecx
; Line 418
	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 419
	mov	eax, DWORD PTR _rawOffset$[ebp]
	mov	DWORD PTR [eax], 0
; Line 420
	mov	eax, DWORD PTR _dstOffset$[ebp]
	mov	DWORD PTR [eax], 0
; Line 422
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN14@getOffsetI
; Line 423
	jmp	$LN15@getOffsetI
$LN14@getOffsetI:
; Line 425
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+84]
	test	ecx, ecx
	jne	SHORT $LN13@getOffsetI
; Line 429
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
; Line 430
	jmp	$LN15@getOffsetI
$LN13@getOffsetI:
; Line 432
	mov	DWORD PTR _rule$[ebp], 0
; Line 433
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN12@getOffsetI
; Line 434
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _rule$[ebp], ecx
; Line 435
	jmp	$LN5@getOffsetI
$LN12@getOffsetI:
; Line 437
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NonExistingTimeOpt$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _local$[ebp]
	push	edx
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getTransitionTime@RuleBasedTimeZone@icu_56@@ABENPAUTransition@2@CHH@Z ; icu_56::RuleBasedTimeZone::getTransitionTime
	fstp	QWORD PTR _tstart$70823[ebp]
; Line 438
	fld	QWORD PTR _tstart$70823[ebp]
	fcomp	QWORD PTR _date$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN10@getOffsetI
; Line 439
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _rule$[ebp], ecx
; Line 440
	jmp	$LN5@getOffsetI
$LN10@getOffsetI:
; Line 441
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR _idx$70827[ebp], eax
; Line 443
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NonExistingTimeOpt$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _local$[ebp]
	push	edx
	mov	esi, esp
	mov	eax, DWORD PTR _idx$70827[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getTransitionTime@RuleBasedTimeZone@icu_56@@ABENPAUTransition@2@CHH@Z ; icu_56::RuleBasedTimeZone::getTransitionTime
	fstp	QWORD PTR _tend$70828[ebp]
; Line 444
	fld	QWORD PTR _tend$70828[ebp]
	fcomp	QWORD PTR _date$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN8@getOffsetI
; Line 445
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN7@getOffsetI
; Line 446
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NonExistingTimeOpt$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _local$[ebp]
	push	edx
	sub	esp, 8
	fld	QWORD PTR _date$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findRuleInFinal@RuleBasedTimeZone@icu_56@@ABEPAVTimeZoneRule@2@NCHH@Z ; icu_56::RuleBasedTimeZone::findRuleInFinal
	mov	DWORD PTR _rule$[ebp], eax
$LN7@getOffsetI:
; Line 448
	cmp	DWORD PTR _rule$[ebp], 0
	jne	SHORT $LN6@getOffsetI
; Line 451
	mov	esi, esp
	mov	eax, DWORD PTR _idx$70827[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rule$[ebp], edx
$LN6@getOffsetI:
; Line 453
	jmp	SHORT $LN5@getOffsetI
$LN8@getOffsetI:
; Line 455
	cmp	DWORD PTR _idx$70827[ebp], 0
	jl	SHORT $LN3@getOffsetI
; Line 457
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NonExistingTimeOpt$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _local$[ebp]
	push	edx
	mov	esi, esp
	mov	eax, DWORD PTR _idx$70827[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getTransitionTime@RuleBasedTimeZone@icu_56@@ABENPAUTransition@2@CHH@Z ; icu_56::RuleBasedTimeZone::getTransitionTime
	fcomp	QWORD PTR _date$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN2@getOffsetI
; Line 458
	jmp	SHORT $LN3@getOffsetI
$LN2@getOffsetI:
; Line 460
	mov	eax, DWORD PTR _idx$70827[ebp]
	sub	eax, 1
	mov	DWORD PTR _idx$70827[ebp], eax
; Line 461
	jmp	SHORT $LN8@getOffsetI
$LN3@getOffsetI:
; Line 462
	mov	esi, esp
	mov	eax, DWORD PTR _idx$70827[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rule$[ebp], edx
$LN5@getOffsetI:
; Line 466
	cmp	DWORD PTR _rule$[ebp], 0
	je	SHORT $LN1@getOffsetI
; Line 467
	mov	ecx, DWORD PTR _rule$[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	mov	ecx, DWORD PTR _rawOffset$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 468
	mov	ecx, DWORD PTR _rule$[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	mov	ecx, DWORD PTR _dstOffset$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@getOffsetI:
$LN15@getOffsetI:
; Line 470
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
?getOffsetInternal@RuleBasedTimeZone@icu_56@@ABEXNCHHAAH0AAW4UErrorCode@@@Z ENDP ; icu_56::RuleBasedTimeZone::getOffsetInternal
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?setRawOffset@RuleBasedTimeZone@icu_56@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?setRawOffset@RuleBasedTimeZone@icu_56@@UAEXH@Z PROC	; icu_56::RuleBasedTimeZone::setRawOffset, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 476
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?setRawOffset@RuleBasedTimeZone@icu_56@@UAEXH@Z ENDP	; icu_56::RuleBasedTimeZone::setRawOffset
_TEXT	ENDS
PUBLIC	__real@408f400000000000
EXTRN	_uprv_getUTCtime_56:PROC
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?getRawOffset@RuleBasedTimeZone@icu_56@@UBEHXZ
_TEXT	SEGMENT
_dst$ = -44						; size = 4
_raw$ = -32						; size = 4
_status$ = -20						; size = 4
_this$ = -8						; size = 4
?getRawOffset@RuleBasedTimeZone@icu_56@@UBEHXZ PROC	; icu_56::RuleBasedTimeZone::getRawOffset, COMDAT
; _this$ = ecx
; Line 479
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 482
	mov	DWORD PTR _status$[ebp], 0
; Line 485
	mov	esi, esp
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	lea	edx, DWORD PTR _raw$[ebp]
	push	edx
	push	0
	call	_uprv_getUTCtime_56
	fmul	QWORD PTR __real@408f400000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 486
	mov	eax, DWORD PTR _raw$[ebp]
; Line 487
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@getRawOffs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@getRawOffs:
	DD	3
	DD	$LN6@getRawOffs
$LN6@getRawOffs:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@getRawOffs
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@getRawOffs
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN5@getRawOffs
$LN5@getRawOffs:
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN4@getRawOffs:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	0
$LN3@getRawOffs:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?getRawOffset@RuleBasedTimeZone@icu_56@@UBEHXZ ENDP	; icu_56::RuleBasedTimeZone::getRawOffset
_TEXT	ENDS
PUBLIC	?findNext@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z ; icu_56::RuleBasedTimeZone::findNext
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?useDaylightTime@RuleBasedTimeZone@icu_56@@UBECXZ
_TEXT	SEGMENT
_avail$ = -109						; size = 1
_to$ = -100						; size = 4
_from$ = -88						; size = 4
_time$ = -76						; size = 8
_dst$ = -60						; size = 4
_raw$ = -48						; size = 4
_now$ = -36						; size = 8
_status$ = -20						; size = 4
_this$ = -8						; size = 4
?useDaylightTime@RuleBasedTimeZone@icu_56@@UBECXZ PROC	; icu_56::RuleBasedTimeZone::useDaylightTime, COMDAT
; _this$ = ecx
; Line 490
	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 494
	mov	DWORD PTR _status$[ebp], 0
; Line 495
	call	_uprv_getUTCtime_56
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR _now$[ebp]
; Line 497
	mov	esi, esp
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	lea	edx, DWORD PTR _raw$[ebp]
	push	edx
	push	0
	sub	esp, 8
	fld	QWORD PTR _now$[ebp]
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 498
	cmp	DWORD PTR _dst$[ebp], 0
	je	SHORT $LN2@useDayligh
; Line 499
	mov	al, 1
	jmp	SHORT $LN3@useDayligh
$LN2@useDayligh:
; Line 504
	lea	eax, DWORD PTR _to$[ebp]
	push	eax
	lea	ecx, DWORD PTR _from$[ebp]
	push	ecx
	lea	edx, DWORD PTR _time$[ebp]
	push	edx
	push	0
	sub	esp, 8
	fld	QWORD PTR _now$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findNext@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z ; icu_56::RuleBasedTimeZone::findNext
	mov	BYTE PTR _avail$[ebp], al
; Line 505
	movsx	eax, BYTE PTR _avail$[ebp]
	test	eax, eax
	je	SHORT $LN1@useDayligh
	mov	ecx, DWORD PTR _to$[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	test	eax, eax
	je	SHORT $LN1@useDayligh
; Line 506
	mov	al, 1
	jmp	SHORT $LN3@useDayligh
$LN1@useDayligh:
; Line 508
	xor	al, al
$LN3@useDayligh:
; Line 509
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@useDayligh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@useDayligh:
	DD	6
	DD	$LN11@useDayligh
$LN11@useDayligh:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@useDayligh
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN6@useDayligh
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN7@useDayligh
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN8@useDayligh
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN9@useDayligh
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN10@useDayligh
$LN10@useDayligh:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	0
$LN9@useDayligh:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	0
$LN8@useDayligh:
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN7@useDayligh:
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN6@useDayligh:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	0
$LN5@useDayligh:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?useDaylightTime@RuleBasedTimeZone@icu_56@@UBECXZ ENDP	; icu_56::RuleBasedTimeZone::useDaylightTime
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?inDaylightTime@RuleBasedTimeZone@icu_56@@UBECNAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_dst$ = -32						; size = 4
_raw$ = -20						; size = 4
_this$ = -8						; size = 4
_date$ = 8						; size = 8
_status$ = 16						; size = 4
?inDaylightTime@RuleBasedTimeZone@icu_56@@UBECNAAW4UErrorCode@@@Z PROC ; icu_56::RuleBasedTimeZone::inDaylightTime, COMDAT
; _this$ = ecx
; Line 512
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 513
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@inDaylight
; Line 514
	xor	al, al
	jmp	SHORT $LN3@inDaylight
$LN2@inDaylight:
; Line 517
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	lea	edx, DWORD PTR _raw$[ebp]
	push	edx
	push	0
	sub	esp, 8
	fld	QWORD PTR _date$[ebp]
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 518
	cmp	DWORD PTR _dst$[ebp], 0
	je	SHORT $LN1@inDaylight
; Line 519
	mov	al, 1
	jmp	SHORT $LN3@inDaylight
$LN1@inDaylight:
; Line 521
	xor	al, al
$LN3@inDaylight:
; Line 522
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@inDaylight
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN8@inDaylight:
	DD	2
	DD	$LN7@inDaylight
$LN7@inDaylight:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@inDaylight
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@inDaylight
$LN6@inDaylight:
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN5@inDaylight:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	0
?inDaylightTime@RuleBasedTimeZone@icu_56@@UBECNAAW4UErrorCode@@@Z ENDP ; icu_56::RuleBasedTimeZone::inDaylightTime
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?hasSameRules@RuleBasedTimeZone@icu_56@@UBECABVTimeZone@2@@Z
_TEXT	SEGMENT
_that$ = -20						; size = 4
_this$ = -8						; size = 4
_other$ = 8						; size = 4
?hasSameRules@RuleBasedTimeZone@icu_56@@UBECABVTimeZone@2@@Z PROC ; icu_56::RuleBasedTimeZone::hasSameRules, COMDAT
; _this$ = ecx
; Line 525
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 526
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _other$[ebp]
	jne	SHORT $LN4@hasSameRul
; Line 527
	mov	al, 1
	jmp	$LN5@hasSameRul
$LN4@hasSameRul:
; Line 529
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	call	___RTtypeid
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	___RTtypeid
	add	esp, 4
	mov	ecx, eax
	call	DWORD PTR __imp_??9type_info@@QBE_NABV0@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@hasSameRul
; Line 530
	xor	al, al
	jmp	SHORT $LN5@hasSameRul
$LN3@hasSameRul:
; Line 532
	mov	eax, DWORD PTR _other$[ebp]
	mov	DWORD PTR _that$[ebp], eax
; Line 533
	mov	esi, esp
	mov	eax, DWORD PTR _that$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+68]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@hasSameRul
; Line 534
	xor	al, al
	jmp	SHORT $LN5@hasSameRul
$LN2@hasSameRul:
; Line 537
	mov	eax, DWORD PTR _that$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	call	?compareRules@icu_56@@YACPAVUVector@1@0@Z ; icu_56::compareRules
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@hasSameRul
	mov	eax, DWORD PTR _that$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	call	?compareRules@icu_56@@YACPAVUVector@1@0@Z ; icu_56::compareRules
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@hasSameRul
; Line 538
	mov	al, 1
	jmp	SHORT $LN5@hasSameRul
$LN1@hasSameRul:
; Line 540
	xor	al, al
$LN5@hasSameRul:
; Line 541
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?hasSameRules@RuleBasedTimeZone@icu_56@@UBECABVTimeZone@2@@Z ENDP ; icu_56::RuleBasedTimeZone::hasSameRules
_TEXT	ENDS
EXTRN	?setTo@TimeZoneTransition@icu_56@@QAEXABVTimeZoneRule@2@@Z:PROC ; icu_56::TimeZoneTransition::setTo
EXTRN	?setFrom@TimeZoneTransition@icu_56@@QAEXABVTimeZoneRule@2@@Z:PROC ; icu_56::TimeZoneTransition::setFrom
EXTRN	?setTime@TimeZoneTransition@icu_56@@QAEXN@Z:PROC ; icu_56::TimeZoneTransition::setTime
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getNextTransition@RuleBasedTimeZone@icu_56@@UBECNCAAVTimeZoneTransition@2@@Z
_TEXT	SEGMENT
_found$ = -69						; size = 1
_toRule$ = -60						; size = 4
_fromRule$ = -48					; size = 4
_transitionTime$ = -36					; size = 8
_status$ = -20						; size = 4
_this$ = -8						; size = 4
_base$ = 8						; size = 8
_inclusive$ = 16					; size = 1
_result$ = 20						; size = 4
?getNextTransition@RuleBasedTimeZone@icu_56@@UBECNCAAVTimeZoneTransition@2@@Z PROC ; icu_56::RuleBasedTimeZone::getNextTransition, COMDAT
; _this$ = ecx
; Line 544
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 545
	mov	DWORD PTR _status$[ebp], 0
; Line 546
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?completeConst@RuleBasedTimeZone@icu_56@@ABEXAAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::completeConst
; Line 547
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@getNextTra
; Line 548
	xor	al, al
	jmp	SHORT $LN3@getNextTra
$LN2@getNextTra:
; Line 552
	lea	eax, DWORD PTR _toRule$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fromRule$[ebp]
	push	ecx
	lea	edx, DWORD PTR _transitionTime$[ebp]
	push	edx
	movzx	eax, BYTE PTR _inclusive$[ebp]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _base$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findNext@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z ; icu_56::RuleBasedTimeZone::findNext
	mov	BYTE PTR _found$[ebp], al
; Line 553
	movsx	eax, BYTE PTR _found$[ebp]
	test	eax, eax
	je	SHORT $LN1@getNextTra
; Line 554
	sub	esp, 8
	fld	QWORD PTR _transitionTime$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _result$[ebp]
	call	?setTime@TimeZoneTransition@icu_56@@QAEXN@Z ; icu_56::TimeZoneTransition::setTime
; Line 555
	mov	eax, DWORD PTR _fromRule$[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	?setFrom@TimeZoneTransition@icu_56@@QAEXABVTimeZoneRule@2@@Z ; icu_56::TimeZoneTransition::setFrom
; Line 556
	mov	eax, DWORD PTR _toRule$[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	?setTo@TimeZoneTransition@icu_56@@QAEXABVTimeZoneRule@2@@Z ; icu_56::TimeZoneTransition::setTo
; Line 557
	mov	al, 1
	jmp	SHORT $LN3@getNextTra
$LN1@getNextTra:
; Line 559
	xor	al, al
$LN3@getNextTra:
; Line 560
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@getNextTra
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN10@getNextTra:
	DD	4
	DD	$LN9@getNextTra
$LN9@getNextTra:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@getNextTra
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN6@getNextTra
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN7@getNextTra
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN8@getNextTra
$LN8@getNextTra:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	82					; 00000052H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN7@getNextTra:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN6@getNextTra:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN5@getNextTra:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?getNextTransition@RuleBasedTimeZone@icu_56@@UBECNCAAVTimeZoneTransition@2@@Z ENDP ; icu_56::RuleBasedTimeZone::getNextTransition
_TEXT	ENDS
PUBLIC	?findPrev@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z ; icu_56::RuleBasedTimeZone::findPrev
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getPreviousTransition@RuleBasedTimeZone@icu_56@@UBECNCAAVTimeZoneTransition@2@@Z
_TEXT	SEGMENT
_found$ = -69						; size = 1
_toRule$ = -60						; size = 4
_fromRule$ = -48					; size = 4
_transitionTime$ = -36					; size = 8
_status$ = -20						; size = 4
_this$ = -8						; size = 4
_base$ = 8						; size = 8
_inclusive$ = 16					; size = 1
_result$ = 20						; size = 4
?getPreviousTransition@RuleBasedTimeZone@icu_56@@UBECNCAAVTimeZoneTransition@2@@Z PROC ; icu_56::RuleBasedTimeZone::getPreviousTransition, COMDAT
; _this$ = ecx
; Line 563
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 564
	mov	DWORD PTR _status$[ebp], 0
; Line 565
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?completeConst@RuleBasedTimeZone@icu_56@@ABEXAAW4UErrorCode@@@Z ; icu_56::RuleBasedTimeZone::completeConst
; Line 566
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@getPreviou
; Line 567
	xor	al, al
	jmp	SHORT $LN3@getPreviou
$LN2@getPreviou:
; Line 571
	lea	eax, DWORD PTR _toRule$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fromRule$[ebp]
	push	ecx
	lea	edx, DWORD PTR _transitionTime$[ebp]
	push	edx
	movzx	eax, BYTE PTR _inclusive$[ebp]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _base$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findPrev@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z ; icu_56::RuleBasedTimeZone::findPrev
	mov	BYTE PTR _found$[ebp], al
; Line 572
	movsx	eax, BYTE PTR _found$[ebp]
	test	eax, eax
	je	SHORT $LN1@getPreviou
; Line 573
	sub	esp, 8
	fld	QWORD PTR _transitionTime$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _result$[ebp]
	call	?setTime@TimeZoneTransition@icu_56@@QAEXN@Z ; icu_56::TimeZoneTransition::setTime
; Line 574
	mov	eax, DWORD PTR _fromRule$[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	?setFrom@TimeZoneTransition@icu_56@@QAEXABVTimeZoneRule@2@@Z ; icu_56::TimeZoneTransition::setFrom
; Line 575
	mov	eax, DWORD PTR _toRule$[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	?setTo@TimeZoneTransition@icu_56@@QAEXABVTimeZoneRule@2@@Z ; icu_56::TimeZoneTransition::setTo
; Line 576
	mov	al, 1
	jmp	SHORT $LN3@getPreviou
$LN1@getPreviou:
; Line 578
	xor	al, al
$LN3@getPreviou:
; Line 579
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@getPreviou
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN10@getPreviou:
	DD	4
	DD	$LN9@getPreviou
$LN9@getPreviou:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@getPreviou
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN6@getPreviou
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN7@getPreviou
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN8@getPreviou
$LN8@getPreviou:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	82					; 00000052H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN7@getPreviou:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN6@getPreviou:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN5@getPreviou:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?getPreviousTransition@RuleBasedTimeZone@icu_56@@UBECNCAAVTimeZoneTransition@2@@Z ENDP ; icu_56::RuleBasedTimeZone::getPreviousTransition
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?countTransitionRules@RuleBasedTimeZone@icu_56@@UBEHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_count$ = -20						; size = 4
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?countTransitionRules@RuleBasedTimeZone@icu_56@@UBEHAAW4UErrorCode@@@Z PROC ; icu_56::RuleBasedTimeZone::countTransitionRules, COMDAT
; _this$ = ecx
; Line 582
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 583
	mov	DWORD PTR _count$[ebp], 0
; Line 584
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN2@countTrans
; Line 585
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN2@countTrans:
; Line 587
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN1@countTrans
; Line 588
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN1@countTrans:
; Line 590
	mov	eax, DWORD PTR _count$[ebp]
; Line 591
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?countTransitionRules@RuleBasedTimeZone@icu_56@@UBEHAAW4UErrorCode@@@Z ENDP ; icu_56::RuleBasedTimeZone::countTransitionRules
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getTimeZoneRules@RuleBasedTimeZone@icu_56@@UBEXAAPBVInitialTimeZoneRule@2@QAPBVTimeZoneRule@2@AAHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv133 = -256						; size = 4
tv84 = -256						; size = 4
_finalCount$70940 = -56					; size = 4
_historicCount$70934 = -44				; size = 4
_idx$ = -32						; size = 4
_cnt$ = -20						; size = 4
_this$ = -8						; size = 4
_initial$ = 8						; size = 4
_trsrules$ = 12						; size = 4
_trscount$ = 16						; size = 4
_status$ = 20						; size = 4
?getTimeZoneRules@RuleBasedTimeZone@icu_56@@UBEXAAPBVInitialTimeZoneRule@2@QAPBVTimeZoneRule@2@AAHAAW4UErrorCode@@@Z PROC ; icu_56::RuleBasedTimeZone::getTimeZoneRules, COMDAT
; _this$ = ecx
; Line 597
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 598
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@getTimeZon
; Line 599
	jmp	$LN8@getTimeZon
$LN7@getTimeZon:
; Line 602
	mov	eax, DWORD PTR _initial$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax], edx
; Line 605
	mov	DWORD PTR _cnt$[ebp], 0
; Line 607
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN6@getTimeZon
	mov	eax, DWORD PTR _trscount$[ebp]
	mov	ecx, DWORD PTR _cnt$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN6@getTimeZon
; Line 608
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _historicCount$70934[ebp], eax
; Line 609
	mov	DWORD PTR _idx$[ebp], 0
$LN5@getTimeZon:
; Line 610
	mov	eax, DWORD PTR _trscount$[ebp]
	mov	ecx, DWORD PTR _cnt$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN6@getTimeZon
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _historicCount$70934[ebp]
	jge	SHORT $LN6@getTimeZon
; Line 611
	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR tv84[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _cnt$[ebp]
	mov	edx, DWORD PTR _trsrules$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR _cnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _cnt$[ebp], eax
; Line 612
	jmp	SHORT $LN5@getTimeZon
$LN6@getTimeZon:
; Line 614
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN3@getTimeZon
	mov	eax, DWORD PTR _trscount$[ebp]
	mov	ecx, DWORD PTR _cnt$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN3@getTimeZon
; Line 615
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _finalCount$70940[ebp], eax
; Line 616
	mov	DWORD PTR _idx$[ebp], 0
$LN2@getTimeZon:
; Line 617
	mov	eax, DWORD PTR _trscount$[ebp]
	mov	ecx, DWORD PTR _cnt$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN3@getTimeZon
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _finalCount$70940[ebp]
	jge	SHORT $LN3@getTimeZon
; Line 618
	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR tv133[ebp], eax
	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR tv133[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _cnt$[ebp]
	mov	edx, DWORD PTR _trsrules$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR _cnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _cnt$[ebp], eax
; Line 619
	jmp	SHORT $LN2@getTimeZon
$LN3@getTimeZon:
; Line 622
	mov	eax, DWORD PTR _trscount$[ebp]
	mov	ecx, DWORD PTR _cnt$[ebp]
	mov	DWORD PTR [eax], ecx
$LN8@getTimeZon:
; Line 623
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?getTimeZoneRules@RuleBasedTimeZone@icu_56@@UBEXAAPBVInitialTimeZoneRule@2@QAPBVTimeZoneRule@2@AAHAAW4UErrorCode@@@Z ENDP ; icu_56::RuleBasedTimeZone::getTimeZoneRules
_TEXT	ENDS
EXTRN	__imp_?orphanElementAt@UVector@icu_56@@QAEPAXH@Z:PROC
EXTRN	__imp_?isEmpty@UVector@icu_56@@QBECXZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?deleteRules@RuleBasedTimeZone@icu_56@@AAEXXZ
_TEXT	SEGMENT
tv177 = -328						; size = 4
tv165 = -328						; size = 4
tv142 = -328						; size = 4
tv130 = -328						; size = 4
tv75 = -328						; size = 4
$T78151 = -320						; size = 4
$T78152 = -308						; size = 4
$T78155 = -296						; size = 4
$T78156 = -284						; size = 4
$T78159 = -272						; size = 4
$T78160 = -260						; size = 4
$T78163 = -248						; size = 4
$T78164 = -236						; size = 4
$T78167 = -224						; size = 4
$T78168 = -212						; size = 4
_this$ = -8						; size = 4
?deleteRules@RuleBasedTimeZone@icu_56@@AAEXXZ PROC	; icu_56::RuleBasedTimeZone::deleteRules, COMDAT
; _this$ = ecx
; Line 626
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 627
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR $T78152[ebp], ecx
	mov	edx, DWORD PTR $T78152[ebp]
	mov	DWORD PTR $T78151[ebp], edx
	cmp	DWORD PTR $T78151[ebp], 0
	je	SHORT $LN9@deleteRule
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T78151[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T78151[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN10@deleteRule
$LN9@deleteRule:
	mov	DWORD PTR tv75[ebp], 0
$LN10@deleteRule:
; Line 628
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
; Line 629
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN6@deleteRule
$LN5@deleteRule:
; Line 630
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	DWORD PTR __imp_?isEmpty@UVector@icu_56@@QBECXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@deleteRule
; Line 631
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	DWORD PTR __imp_?orphanElementAt@UVector@icu_56@@QAEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78156[ebp], eax
	mov	ecx, DWORD PTR $T78156[ebp]
	mov	DWORD PTR $T78155[ebp], ecx
	cmp	DWORD PTR $T78155[ebp], 0
	je	SHORT $LN11@deleteRule
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T78155[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T78155[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN12@deleteRule
$LN11@deleteRule:
	mov	DWORD PTR tv130[ebp], 0
$LN12@deleteRule:
; Line 632
	jmp	SHORT $LN5@deleteRule
$LN4@deleteRule:
; Line 633
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR $T78160[ebp], ecx
	mov	edx, DWORD PTR $T78160[ebp]
	mov	DWORD PTR $T78159[ebp], edx
	cmp	DWORD PTR $T78159[ebp], 0
	je	SHORT $LN13@deleteRule
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T78159[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T78159[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN14@deleteRule
$LN13@deleteRule:
	mov	DWORD PTR tv142[ebp], 0
$LN14@deleteRule:
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
$LN6@deleteRule:
; Line 636
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	$LN7@deleteRule
$LN2@deleteRule:
; Line 637
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?isEmpty@UVector@icu_56@@QBECXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@deleteRule
; Line 638
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?orphanElementAt@UVector@icu_56@@QAEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78164[ebp], eax
	mov	ecx, DWORD PTR $T78164[ebp]
	mov	DWORD PTR $T78163[ebp], ecx
	cmp	DWORD PTR $T78163[ebp], 0
	je	SHORT $LN15@deleteRule
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T78163[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T78163[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv165[ebp], eax
	jmp	SHORT $LN16@deleteRule
$LN15@deleteRule:
	mov	DWORD PTR tv165[ebp], 0
$LN16@deleteRule:
; Line 639
	jmp	SHORT $LN2@deleteRule
$LN1@deleteRule:
; Line 640
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T78168[ebp], ecx
	mov	edx, DWORD PTR $T78168[ebp]
	mov	DWORD PTR $T78167[ebp], edx
	cmp	DWORD PTR $T78167[ebp], 0
	je	SHORT $LN17@deleteRule
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T78167[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T78167[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv177[ebp], eax
	jmp	SHORT $LN18@deleteRule
$LN17@deleteRule:
	mov	DWORD PTR tv177[ebp], 0
$LN18@deleteRule:
; Line 641
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 0
$LN7@deleteRule:
; Line 643
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deleteRules@RuleBasedTimeZone@icu_56@@AAEXXZ ENDP	; icu_56::RuleBasedTimeZone::deleteRules
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?deleteTransitions@RuleBasedTimeZone@icu_56@@AAEXXZ
_TEXT	SEGMENT
tv87 = -244						; size = 4
$T78173 = -236						; size = 4
$T78174 = -224						; size = 4
_trs$70977 = -20					; size = 4
_this$ = -8						; size = 4
?deleteTransitions@RuleBasedTimeZone@icu_56@@AAEXXZ PROC ; icu_56::RuleBasedTimeZone::deleteTransitions, COMDAT
; _this$ = ecx
; Line 646
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 647
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	$LN3@deleteTran
$LN2@deleteTran:
; Line 648
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	DWORD PTR __imp_?isEmpty@UVector@icu_56@@QBECXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@deleteTran
; Line 649
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	DWORD PTR __imp_?orphanElementAt@UVector@icu_56@@QAEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _trs$70977[ebp], eax
; Line 650
	mov	eax, DWORD PTR _trs$70977[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 651
	jmp	SHORT $LN2@deleteTran
$LN1@deleteTran:
; Line 652
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR $T78174[ebp], ecx
	mov	edx, DWORD PTR $T78174[ebp]
	mov	DWORD PTR $T78173[ebp], edx
	cmp	DWORD PTR $T78173[ebp], 0
	je	SHORT $LN6@deleteTran
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T78173[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T78173[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN3@deleteTran
$LN6@deleteTran:
	mov	DWORD PTR tv87[ebp], 0
$LN3@deleteTran:
; Line 654
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 655
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deleteTransitions@RuleBasedTimeZone@icu_56@@AAEXXZ ENDP ; icu_56::RuleBasedTimeZone::deleteTransitions
_TEXT	ENDS
EXTRN	__imp_??0UVector@icu_56@@QAE@HAAW4UErrorCode@@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z$0
__ehfuncinfo$?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z
_TEXT	SEGMENT
tv160 = -352						; size = 4
tv149 = -352						; size = 4
tv87 = -352						; size = 4
tv73 = -352						; size = 4
$T78179 = -344						; size = 4
$T78180 = -332						; size = 4
$T78183 = -320						; size = 4
$T78184 = -308						; size = 4
$T78187 = -296						; size = 4
$T78188 = -284						; size = 4
_rule$71004 = -80					; size = 4
_i$ = -68						; size = 4
_rules$ = -56						; size = 4
_size$ = -44						; size = 4
_ec$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_source$ = 8						; size = 4
?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z PROC ; icu_56::RuleBasedTimeZone::copyRules, COMDAT
; _this$ = ecx
; Line 658
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 659
	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN10@copyRules
; Line 660
	xor	eax, eax
	jmp	$LN11@copyRules
$LN10@copyRules:
; Line 662
	mov	DWORD PTR _ec$[ebp], 0
; Line 663
	mov	esi, esp
	mov	ecx, DWORD PTR _source$[ebp]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _size$[ebp], eax
; Line 664
	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78180[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78180[ebp], 0
	je	SHORT $LN13@copyRules
	mov	esi, esp
	lea	eax, DWORD PTR _ec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T78180[ebp]
	call	DWORD PTR __imp_??0UVector@icu_56@@QAE@HAAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR $T78180[ebp]
	mov	DWORD PTR [edx], OFFSET ??_SUVector@icu_56@@6B@
	mov	eax, DWORD PTR $T78180[ebp]
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN14@copyRules
$LN13@copyRules:
	mov	DWORD PTR tv73[ebp], 0
$LN14@copyRules:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T78179[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78179[ebp]
	mov	DWORD PTR _rules$[ebp], edx
; Line 665
	mov	eax, DWORD PTR _ec$[ebp]
	push	eax
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@copyRules
; Line 666
	xor	eax, eax
	jmp	$LN11@copyRules
$LN9@copyRules:
; Line 669
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@copyRules
$LN7@copyRules:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@copyRules:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN6@copyRules
; Line 670
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv87[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _ec$[ebp]
	push	ecx
	mov	edi, esp
	mov	edx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv87[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _rules$[ebp]
	call	DWORD PTR __imp_?addElement@UVector@icu_56@@QAEXPAXAAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 671
	mov	eax, DWORD PTR _ec$[ebp]
	push	eax
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@copyRules
; Line 672
	jmp	SHORT $LN6@copyRules
$LN5@copyRules:
; Line 674
	jmp	SHORT $LN7@copyRules
$LN6@copyRules:
; Line 675
	mov	eax, DWORD PTR _ec$[ebp]
	push	eax
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN4@copyRules
; Line 677
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@copyRules
$LN2@copyRules:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@copyRules:
	mov	esi, esp
	mov	ecx, DWORD PTR _rules$[ebp]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@copyRules
; Line 678
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rules$[ebp]
	call	DWORD PTR __imp_?orphanElementAt@UVector@icu_56@@QAEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rule$71004[ebp], eax
; Line 679
	mov	eax, DWORD PTR _rule$71004[ebp]
	mov	DWORD PTR $T78184[ebp], eax
	mov	ecx, DWORD PTR $T78184[ebp]
	mov	DWORD PTR $T78183[ebp], ecx
	cmp	DWORD PTR $T78183[ebp], 0
	je	SHORT $LN15@copyRules
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T78183[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T78183[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN16@copyRules
$LN15@copyRules:
	mov	DWORD PTR tv149[ebp], 0
$LN16@copyRules:
; Line 680
	jmp	$LN2@copyRules
$LN1@copyRules:
; Line 681
	mov	eax, DWORD PTR _rules$[ebp]
	mov	DWORD PTR $T78188[ebp], eax
	mov	ecx, DWORD PTR $T78188[ebp]
	mov	DWORD PTR $T78187[ebp], ecx
	cmp	DWORD PTR $T78187[ebp], 0
	je	SHORT $LN17@copyRules
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T78187[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T78187[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv160[ebp], eax
	jmp	SHORT $LN18@copyRules
$LN17@copyRules:
	mov	DWORD PTR tv160[ebp], 0
$LN18@copyRules:
; Line 682
	xor	eax, eax
	jmp	SHORT $LN11@copyRules
$LN4@copyRules:
; Line 684
	mov	eax, DWORD PTR _rules$[ebp]
$LN11@copyRules:
; Line 685
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@copyRules
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN23@copyRules:
	DD	1
	DD	$LN22@copyRules
$LN22@copyRules:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN20@copyRules
$LN20@copyRules:
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z$0:
	mov	esi, esp
	mov	eax, DWORD PTR $T78180[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?copyRules@RuleBasedTimeZone@icu_56@@AAEPAVUVector@2@PAV32@@Z ENDP ; icu_56::RuleBasedTimeZone::copyRules
PUBLIC	?getLocalDelta@RuleBasedTimeZone@icu_56@@ABEHHHHHHH@Z ; icu_56::RuleBasedTimeZone::getLocalDelta
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?findRuleInFinal@RuleBasedTimeZone@icu_56@@ABEPAVTimeZoneRule@2@NCHH@Z
_TEXT	SEGMENT
tv250 = -316						; size = 4
_avail1$ = -113						; size = 1
_avail0$ = -101						; size = 1
_localDelta$ = -92					; size = 4
_base$ = -80						; size = 8
_start1$ = -64						; size = 8
_start0$ = -48						; size = 8
_fr1$ = -32						; size = 4
_fr0$ = -20						; size = 4
_this$ = -8						; size = 4
_date$ = 8						; size = 8
_local$ = 16						; size = 1
_NonExistingTimeOpt$ = 20				; size = 4
_DuplicatedTimeOpt$ = 24				; size = 4
?findRuleInFinal@RuleBasedTimeZone@icu_56@@ABEPAVTimeZoneRule@2@NCHH@Z PROC ; icu_56::RuleBasedTimeZone::findRuleInFinal, COMDAT
; _this$ = ecx
; Line 689
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 690
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jne	SHORT $LN10@findRuleIn
; Line 691
	xor	eax, eax
	jmp	$LN11@findRuleIn
$LN10@findRuleIn:
; Line 694
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fr0$[ebp], eax
; Line 695
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fr1$[ebp], eax
; Line 696
	cmp	DWORD PTR _fr0$[ebp], 0
	je	SHORT $LN8@findRuleIn
	cmp	DWORD PTR _fr1$[ebp], 0
	jne	SHORT $LN9@findRuleIn
$LN8@findRuleIn:
; Line 697
	xor	eax, eax
	jmp	$LN11@findRuleIn
$LN9@findRuleIn:
; Line 704
	fld	QWORD PTR _date$[ebp]
	fstp	QWORD PTR _base$[ebp]
; Line 705
	movsx	eax, BYTE PTR _local$[ebp]
	test	eax, eax
	je	SHORT $LN7@findRuleIn
; Line 708
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NonExistingTimeOpt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fr0$[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _fr0$[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	mov	ecx, DWORD PTR _fr1$[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _fr1$[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getLocalDelta@RuleBasedTimeZone@icu_56@@ABEHHHHHHH@Z ; icu_56::RuleBasedTimeZone::getLocalDelta
	mov	DWORD PTR _localDelta$[ebp], eax
; Line 709
	fild	DWORD PTR _localDelta$[ebp]
	fsubr	QWORD PTR _base$[ebp]
	fstp	QWORD PTR _base$[ebp]
$LN7@findRuleIn:
; Line 711
	mov	esi, esp
	lea	eax, DWORD PTR _start0$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _fr1$[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _fr1$[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	sub	esp, 8
	fld	QWORD PTR _base$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _fr0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _fr0$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _avail0$[ebp], al
; Line 713
	fld	QWORD PTR _date$[ebp]
	fstp	QWORD PTR _base$[ebp]
; Line 714
	movsx	eax, BYTE PTR _local$[ebp]
	test	eax, eax
	je	SHORT $LN6@findRuleIn
; Line 717
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NonExistingTimeOpt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fr1$[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _fr1$[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	mov	ecx, DWORD PTR _fr0$[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _fr0$[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getLocalDelta@RuleBasedTimeZone@icu_56@@ABEHHHHHHH@Z ; icu_56::RuleBasedTimeZone::getLocalDelta
	mov	DWORD PTR _localDelta$[ebp], eax
; Line 718
	fild	DWORD PTR _localDelta$[ebp]
	fsubr	QWORD PTR _base$[ebp]
	fstp	QWORD PTR _base$[ebp]
$LN6@findRuleIn:
; Line 720
	mov	esi, esp
	lea	eax, DWORD PTR _start1$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _fr0$[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _fr0$[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	sub	esp, 8
	fld	QWORD PTR _base$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _fr1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _fr1$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _avail1$[ebp], al
; Line 722
	movsx	eax, BYTE PTR _avail0$[ebp]
	test	eax, eax
	je	SHORT $LN4@findRuleIn
	movsx	eax, BYTE PTR _avail1$[ebp]
	test	eax, eax
	jne	SHORT $LN5@findRuleIn
$LN4@findRuleIn:
; Line 723
	movsx	eax, BYTE PTR _avail0$[ebp]
	test	eax, eax
	je	SHORT $LN3@findRuleIn
; Line 724
	mov	eax, DWORD PTR _fr0$[ebp]
	jmp	SHORT $LN11@findRuleIn
	jmp	SHORT $LN1@findRuleIn
$LN3@findRuleIn:
; Line 725
	movsx	eax, BYTE PTR _avail1$[ebp]
	test	eax, eax
	je	SHORT $LN1@findRuleIn
; Line 726
	mov	eax, DWORD PTR _fr1$[ebp]
	jmp	SHORT $LN11@findRuleIn
$LN1@findRuleIn:
; Line 729
	xor	eax, eax
	jmp	SHORT $LN11@findRuleIn
$LN5@findRuleIn:
; Line 732
	fld	QWORD PTR _start1$[ebp]
	fcomp	QWORD PTR _start0$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN13@findRuleIn
	mov	eax, DWORD PTR _fr0$[ebp]
	mov	DWORD PTR tv250[ebp], eax
	jmp	SHORT $LN14@findRuleIn
$LN13@findRuleIn:
	mov	ecx, DWORD PTR _fr1$[ebp]
	mov	DWORD PTR tv250[ebp], ecx
$LN14@findRuleIn:
	mov	eax, DWORD PTR tv250[ebp]
$LN11@findRuleIn:
; Line 733
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@findRuleIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN18@findRuleIn:
	DD	2
	DD	$LN17@findRuleIn
$LN17@findRuleIn:
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN15@findRuleIn
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN16@findRuleIn
$LN16@findRuleIn:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	49					; 00000031H
	DB	0
$LN15@findRuleIn:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	48					; 00000030H
	DB	0
?findRuleInFinal@RuleBasedTimeZone@icu_56@@ABEPAVTimeZoneRule@2@NCHH@Z ENDP ; icu_56::RuleBasedTimeZone::findRuleInFinal
_TEXT	ENDS
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?findNext@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z
_TEXT	SEGMENT
$T78211 = -389						; size = 1
_prev$71074 = -188					; size = 4
_avail1$71068 = -173					; size = 1
_avail0$71067 = -161					; size = 1
_start1$71066 = -152					; size = 8
_start0$71065 = -136					; size = 8
_r1$71063 = -120					; size = 4
_r0$71061 = -108					; size = 4
_idx$71055 = -96					; size = 4
_tt$ = -84						; size = 8
_tzt$ = -68						; size = 4
_result$ = -56						; size = 16
_found$ = -29						; size = 1
_isFinal$ = -17						; size = 1
_this$ = -8						; size = 4
_base$ = 8						; size = 8
_inclusive$ = 16					; size = 1
_transitionTime$ = 20					; size = 4
_fromRule$ = 24						; size = 4
_toRule$ = 28						; size = 4
?findNext@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z PROC ; icu_56::RuleBasedTimeZone::findNext, COMDAT
; _this$ = ecx
; Line 737
	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	BYTE PTR $T78211[ebp], 0
; Line 738
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN21@findNext
; Line 739
	xor	al, al
	jmp	$LN22@findNext
$LN21@findNext:
; Line 741
	mov	BYTE PTR _isFinal$[ebp], 0
; Line 742
	mov	BYTE PTR _found$[ebp], 0
; Line 744
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tzt$[ebp], eax
; Line 745
	mov	eax, DWORD PTR _tzt$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _tt$[ebp]
; Line 746
	fld	QWORD PTR _base$[ebp]
	fcomp	QWORD PTR _tt$[ebp]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN19@findNext
	movsx	eax, BYTE PTR _inclusive$[ebp]
	test	eax, eax
	je	SHORT $LN20@findNext
	fld	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _base$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN20@findNext
$LN19@findNext:
; Line 747
	mov	eax, DWORD PTR _tzt$[ebp]
	mov	BYTE PTR $T78211[ebp], 1
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _result$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _result$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _result$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _result$[ebp+12], edx
; Line 748
	mov	BYTE PTR _found$[ebp], 1
; Line 749
	jmp	$LN9@findNext
$LN20@findNext:
; Line 750
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR _idx$71055[ebp], eax
; Line 751
	mov	esi, esp
	mov	eax, DWORD PTR _idx$71055[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tzt$[ebp], eax
; Line 752
	mov	eax, DWORD PTR _tzt$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _tt$[ebp]
; Line 753
	movsx	eax, BYTE PTR _inclusive$[ebp]
	test	eax, eax
	je	SHORT $LN17@findNext
	fld	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _base$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN17@findNext
; Line 754
	mov	eax, DWORD PTR _tzt$[ebp]
	mov	BYTE PTR $T78211[ebp], 1
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _result$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _result$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _result$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _result$[ebp+12], edx
; Line 755
	mov	BYTE PTR _found$[ebp], 1
	jmp	$LN9@findNext
$LN17@findNext:
; Line 756
	fld	QWORD PTR _base$[ebp]
	fcomp	QWORD PTR _tt$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	$LN15@findNext
; Line 757
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	$LN14@findNext
; Line 759
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r0$71061[ebp], eax
; Line 760
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r1$71063[ebp], eax
; Line 762
	mov	esi, esp
	lea	eax, DWORD PTR _start0$71065[ebp]
	push	eax
	movzx	ecx, BYTE PTR _inclusive$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _r1$71063[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _r1$71063[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	sub	esp, 8
	fld	QWORD PTR _base$[ebp]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _r0$71061[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _r0$71061[ebp]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _avail0$71067[ebp], al
; Line 763
	mov	esi, esp
	lea	eax, DWORD PTR _start1$71066[ebp]
	push	eax
	movzx	ecx, BYTE PTR _inclusive$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _r0$71061[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _r0$71061[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	sub	esp, 8
	fld	QWORD PTR _base$[ebp]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _r1$71063[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _r1$71063[ebp]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _avail1$71068[ebp], al
; Line 765
	movsx	eax, BYTE PTR _avail0$71067[ebp]
	test	eax, eax
	jne	SHORT $LN13@findNext
	movsx	eax, BYTE PTR _avail1$71068[ebp]
	test	eax, eax
	jne	SHORT $LN13@findNext
; Line 766
	xor	al, al
	jmp	$LN22@findNext
$LN13@findNext:
; Line 768
	movsx	eax, BYTE PTR _avail1$71068[ebp]
	test	eax, eax
	je	SHORT $LN11@findNext
	fld	QWORD PTR _start1$71066[ebp]
	fcomp	QWORD PTR _start0$71065[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN12@findNext
$LN11@findNext:
; Line 769
	mov	BYTE PTR $T78211[ebp], 1
	fld	QWORD PTR _start0$71065[ebp]
	fstp	QWORD PTR _result$[ebp]
; Line 770
	mov	eax, DWORD PTR _r1$71063[ebp]
	mov	DWORD PTR _result$[ebp+8], eax
; Line 771
	mov	eax, DWORD PTR _r0$71061[ebp]
	mov	DWORD PTR _result$[ebp+12], eax
; Line 772
	jmp	SHORT $LN10@findNext
$LN12@findNext:
; Line 773
	mov	BYTE PTR $T78211[ebp], 1
	fld	QWORD PTR _start1$71066[ebp]
	fstp	QWORD PTR _result$[ebp]
; Line 774
	mov	eax, DWORD PTR _r0$71061[ebp]
	mov	DWORD PTR _result$[ebp+8], eax
; Line 775
	mov	eax, DWORD PTR _r1$71063[ebp]
	mov	DWORD PTR _result$[ebp+12], eax
$LN10@findNext:
; Line 777
	mov	BYTE PTR _isFinal$[ebp], 1
; Line 778
	mov	BYTE PTR _found$[ebp], 1
$LN14@findNext:
; Line 780
	jmp	$LN9@findNext
$LN15@findNext:
; Line 782
	mov	eax, DWORD PTR _idx$71055[ebp]
	sub	eax, 1
	mov	DWORD PTR _idx$71055[ebp], eax
; Line 783
	mov	eax, DWORD PTR _tzt$[ebp]
	mov	DWORD PTR _prev$71074[ebp], eax
$LN8@findNext:
; Line 784
	cmp	DWORD PTR _idx$71055[ebp], 0
	jle	SHORT $LN7@findNext
; Line 785
	mov	esi, esp
	mov	eax, DWORD PTR _idx$71055[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tzt$[ebp], eax
; Line 786
	mov	eax, DWORD PTR _tzt$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _tt$[ebp]
; Line 787
	fld	QWORD PTR _base$[ebp]
	fcomp	QWORD PTR _tt$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN5@findNext
	movsx	eax, BYTE PTR _inclusive$[ebp]
	test	eax, eax
	jne	SHORT $LN6@findNext
	fld	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _base$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@findNext
$LN5@findNext:
; Line 788
	jmp	SHORT $LN7@findNext
$LN6@findNext:
; Line 790
	mov	eax, DWORD PTR _idx$71055[ebp]
	sub	eax, 1
	mov	DWORD PTR _idx$71055[ebp], eax
; Line 791
	mov	eax, DWORD PTR _tzt$[ebp]
	mov	DWORD PTR _prev$71074[ebp], eax
; Line 792
	jmp	SHORT $LN8@findNext
$LN7@findNext:
; Line 793
	mov	BYTE PTR $T78211[ebp], 1
	mov	eax, DWORD PTR _prev$71074[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _result$[ebp]
; Line 794
	mov	eax, DWORD PTR _prev$71074[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _result$[ebp+8], ecx
; Line 795
	mov	eax, DWORD PTR _prev$71074[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _result$[ebp+12], ecx
; Line 796
	mov	BYTE PTR _found$[ebp], 1
$LN9@findNext:
; Line 799
	movsx	eax, BYTE PTR _found$[ebp]
	test	eax, eax
	je	$LN4@findNext
; Line 802
	mov	ecx, DWORD PTR _result$[ebp+8]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	mov	esi, eax
	mov	ecx, DWORD PTR _result$[ebp+12]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	cmp	esi, eax
	jne	SHORT $LN1@findNext
	mov	ecx, DWORD PTR _result$[ebp+8]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	mov	esi, eax
	mov	ecx, DWORD PTR _result$[ebp+12]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	cmp	esi, eax
	jne	SHORT $LN1@findNext
; Line 803
	movsx	eax, BYTE PTR _isFinal$[ebp]
	test	eax, eax
	je	SHORT $LN2@findNext
; Line 804
	xor	al, al
	jmp	SHORT $LN22@findNext
; Line 805
	jmp	SHORT $LN1@findNext
$LN2@findNext:
; Line 808
	cmp	BYTE PTR $T78211[ebp], 0
	jne	SHORT $LN24@findNext
	push	OFFSET $LN25@findNext
	call	__RTC_UninitUse
	add	esp, 4
$LN24@findNext:
	mov	eax, DWORD PTR _toRule$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fromRule$[ebp]
	push	ecx
	mov	edx, DWORD PTR _transitionTime$[ebp]
	push	edx
	push	0
	sub	esp, 8
	fld	QWORD PTR _result$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findNext@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z ; icu_56::RuleBasedTimeZone::findNext
	jmp	SHORT $LN22@findNext
$LN1@findNext:
; Line 811
	cmp	BYTE PTR $T78211[ebp], 0
	jne	SHORT $LN26@findNext
	push	OFFSET $LN25@findNext
	call	__RTC_UninitUse
	add	esp, 4
$LN26@findNext:
	mov	eax, DWORD PTR _transitionTime$[ebp]
	fld	QWORD PTR _result$[ebp]
	fstp	QWORD PTR [eax]
; Line 812
	mov	eax, DWORD PTR _fromRule$[ebp]
	mov	ecx, DWORD PTR _result$[ebp+8]
	mov	DWORD PTR [eax], ecx
; Line 813
	mov	eax, DWORD PTR _toRule$[ebp]
	mov	ecx, DWORD PTR _result$[ebp+12]
	mov	DWORD PTR [eax], ecx
; Line 814
	mov	al, 1
	jmp	SHORT $LN22@findNext
$LN4@findNext:
; Line 816
	xor	al, al
$LN22@findNext:
; Line 817
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@findNext
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN30@findNext:
	DD	3
	DD	$LN29@findNext
$LN29@findNext:
	DD	-56					; ffffffc8H
	DD	16					; 00000010H
	DD	$LN25@findNext
	DD	-136					; ffffff78H
	DD	8
	DD	$LN27@findNext
	DD	-152					; ffffff68H
	DD	8
	DD	$LN28@findNext
$LN28@findNext:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	49					; 00000031H
	DB	0
$LN27@findNext:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	48					; 00000030H
	DB	0
$LN25@findNext:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?findNext@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z ENDP ; icu_56::RuleBasedTimeZone::findNext
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?findPrev@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z
_TEXT	SEGMENT
$T78222 = -365						; size = 1
_avail1$71115 = -161					; size = 1
_avail0$71114 = -149					; size = 1
_start1$71113 = -140					; size = 8
_start0$71112 = -124					; size = 8
_r1$71110 = -108					; size = 4
_r0$71108 = -96						; size = 4
_idx$71102 = -84					; size = 4
_tt$ = -72						; size = 8
_tzt$ = -56						; size = 4
_result$ = -44						; size = 16
_found$ = -17						; size = 1
_this$ = -8						; size = 4
_base$ = 8						; size = 8
_inclusive$ = 16					; size = 1
_transitionTime$ = 20					; size = 4
_fromRule$ = 24						; size = 4
_toRule$ = 28						; size = 4
?findPrev@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z PROC ; icu_56::RuleBasedTimeZone::findPrev, COMDAT
; _this$ = ecx
; Line 821
	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-372]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	BYTE PTR $T78222[ebp], 0
; Line 822
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN20@findPrev
; Line 823
	xor	al, al
	jmp	$LN21@findPrev
$LN20@findPrev:
; Line 825
	mov	BYTE PTR _found$[ebp], 0
; Line 827
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tzt$[ebp], eax
; Line 828
	mov	eax, DWORD PTR _tzt$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _tt$[ebp]
; Line 829
	movsx	eax, BYTE PTR _inclusive$[ebp]
	test	eax, eax
	je	SHORT $LN19@findPrev
	fld	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _base$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN19@findPrev
; Line 830
	mov	eax, DWORD PTR _tzt$[ebp]
	mov	BYTE PTR $T78222[ebp], 1
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _result$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _result$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _result$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _result$[ebp+12], edx
; Line 831
	mov	BYTE PTR _found$[ebp], 1
	jmp	$LN7@findPrev
$LN19@findPrev:
; Line 832
	fld	QWORD PTR _base$[ebp]
	fcomp	QWORD PTR _tt$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN7@findPrev
; Line 833
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR _idx$71102[ebp], eax
; Line 834
	mov	esi, esp
	mov	eax, DWORD PTR _idx$71102[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tzt$[ebp], eax
; Line 835
	mov	eax, DWORD PTR _tzt$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _tt$[ebp]
; Line 836
	movsx	eax, BYTE PTR _inclusive$[ebp]
	test	eax, eax
	je	SHORT $LN16@findPrev
	fld	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _base$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN16@findPrev
; Line 837
	mov	eax, DWORD PTR _tzt$[ebp]
	mov	BYTE PTR $T78222[ebp], 1
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _result$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _result$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _result$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _result$[ebp+12], edx
; Line 838
	mov	BYTE PTR _found$[ebp], 1
	jmp	$LN7@findPrev
$LN16@findPrev:
; Line 839
	fld	QWORD PTR _base$[ebp]
	fcomp	QWORD PTR _tt$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN14@findPrev
; Line 840
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	$LN13@findPrev
; Line 842
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r0$71108[ebp], eax
; Line 843
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r1$71110[ebp], eax
; Line 845
	mov	esi, esp
	lea	eax, DWORD PTR _start0$71112[ebp]
	push	eax
	movzx	ecx, BYTE PTR _inclusive$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _r1$71110[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _r1$71110[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	sub	esp, 8
	fld	QWORD PTR _base$[ebp]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _r0$71108[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _r0$71108[ebp]
	mov	edx, DWORD PTR [eax+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _avail0$71114[ebp], al
; Line 846
	mov	esi, esp
	lea	eax, DWORD PTR _start1$71113[ebp]
	push	eax
	movzx	ecx, BYTE PTR _inclusive$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _r0$71108[ebp]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	ecx, DWORD PTR _r0$71108[ebp]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	sub	esp, 8
	fld	QWORD PTR _base$[ebp]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _r1$71110[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _r1$71110[ebp]
	mov	edx, DWORD PTR [eax+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _avail1$71115[ebp], al
; Line 848
	movsx	eax, BYTE PTR _avail0$71114[ebp]
	test	eax, eax
	jne	SHORT $LN12@findPrev
	movsx	eax, BYTE PTR _avail1$71115[ebp]
	test	eax, eax
	jne	SHORT $LN12@findPrev
; Line 849
	xor	al, al
	jmp	$LN21@findPrev
$LN12@findPrev:
; Line 851
	movsx	eax, BYTE PTR _avail1$71115[ebp]
	test	eax, eax
	je	SHORT $LN10@findPrev
	fld	QWORD PTR _start1$71113[ebp]
	fcomp	QWORD PTR _start0$71112[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@findPrev
$LN10@findPrev:
; Line 852
	mov	BYTE PTR $T78222[ebp], 1
	fld	QWORD PTR _start0$71112[ebp]
	fstp	QWORD PTR _result$[ebp]
; Line 853
	mov	eax, DWORD PTR _r1$71110[ebp]
	mov	DWORD PTR _result$[ebp+8], eax
; Line 854
	mov	eax, DWORD PTR _r0$71108[ebp]
	mov	DWORD PTR _result$[ebp+12], eax
; Line 855
	jmp	SHORT $LN9@findPrev
$LN11@findPrev:
; Line 856
	mov	BYTE PTR $T78222[ebp], 1
	fld	QWORD PTR _start1$71113[ebp]
	fstp	QWORD PTR _result$[ebp]
; Line 857
	mov	eax, DWORD PTR _r0$71108[ebp]
	mov	DWORD PTR _result$[ebp+8], eax
; Line 858
	mov	eax, DWORD PTR _r1$71110[ebp]
	mov	DWORD PTR _result$[ebp+12], eax
$LN9@findPrev:
; Line 860
	jmp	SHORT $LN8@findPrev
$LN13@findPrev:
; Line 861
	mov	eax, DWORD PTR _tzt$[ebp]
	mov	BYTE PTR $T78222[ebp], 1
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _result$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _result$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _result$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _result$[ebp+12], edx
$LN8@findPrev:
; Line 863
	mov	BYTE PTR _found$[ebp], 1
; Line 864
	jmp	$LN7@findPrev
$LN14@findPrev:
; Line 866
	mov	eax, DWORD PTR _idx$71102[ebp]
	sub	eax, 1
	mov	DWORD PTR _idx$71102[ebp], eax
$LN6@findPrev:
; Line 867
	cmp	DWORD PTR _idx$71102[ebp], 0
	jl	SHORT $LN5@findPrev
; Line 868
	mov	esi, esp
	mov	eax, DWORD PTR _idx$71102[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tzt$[ebp], eax
; Line 869
	mov	eax, DWORD PTR _tzt$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _tt$[ebp]
; Line 870
	fld	QWORD PTR _base$[ebp]
	fcomp	QWORD PTR _tt$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN3@findPrev
	movsx	eax, BYTE PTR _inclusive$[ebp]
	test	eax, eax
	je	SHORT $LN4@findPrev
	fld	QWORD PTR _tt$[ebp]
	fld	QWORD PTR _base$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@findPrev
$LN3@findPrev:
; Line 871
	jmp	SHORT $LN5@findPrev
$LN4@findPrev:
; Line 873
	mov	eax, DWORD PTR _idx$71102[ebp]
	sub	eax, 1
	mov	DWORD PTR _idx$71102[ebp], eax
; Line 874
	jmp	SHORT $LN6@findPrev
$LN5@findPrev:
; Line 875
	mov	eax, DWORD PTR _tzt$[ebp]
	mov	BYTE PTR $T78222[ebp], 1
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _result$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _result$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _result$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _result$[ebp+12], edx
; Line 876
	mov	BYTE PTR _found$[ebp], 1
$LN7@findPrev:
; Line 879
	movsx	eax, BYTE PTR _found$[ebp]
	test	eax, eax
	je	$LN2@findPrev
; Line 882
	mov	ecx, DWORD PTR _result$[ebp+8]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	mov	esi, eax
	mov	ecx, DWORD PTR _result$[ebp+12]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	cmp	esi, eax
	jne	SHORT $LN1@findPrev
	mov	ecx, DWORD PTR _result$[ebp+8]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	mov	esi, eax
	mov	ecx, DWORD PTR _result$[ebp+12]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	cmp	esi, eax
	jne	SHORT $LN1@findPrev
; Line 885
	cmp	BYTE PTR $T78222[ebp], 0
	jne	SHORT $LN23@findPrev
	push	OFFSET $LN24@findPrev
	call	__RTC_UninitUse
	add	esp, 4
$LN23@findPrev:
	mov	eax, DWORD PTR _toRule$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fromRule$[ebp]
	push	ecx
	mov	edx, DWORD PTR _transitionTime$[ebp]
	push	edx
	push	0
	sub	esp, 8
	fld	QWORD PTR _result$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findPrev@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z ; icu_56::RuleBasedTimeZone::findPrev
	jmp	SHORT $LN21@findPrev
$LN1@findPrev:
; Line 887
	cmp	BYTE PTR $T78222[ebp], 0
	jne	SHORT $LN25@findPrev
	push	OFFSET $LN24@findPrev
	call	__RTC_UninitUse
	add	esp, 4
$LN25@findPrev:
	mov	eax, DWORD PTR _transitionTime$[ebp]
	fld	QWORD PTR _result$[ebp]
	fstp	QWORD PTR [eax]
; Line 888
	mov	eax, DWORD PTR _fromRule$[ebp]
	mov	ecx, DWORD PTR _result$[ebp+8]
	mov	DWORD PTR [eax], ecx
; Line 889
	mov	eax, DWORD PTR _toRule$[ebp]
	mov	ecx, DWORD PTR _result$[ebp+12]
	mov	DWORD PTR [eax], ecx
; Line 890
	mov	al, 1
	jmp	SHORT $LN21@findPrev
$LN2@findPrev:
; Line 892
	xor	al, al
$LN21@findPrev:
; Line 893
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@findPrev
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 372				; 00000174H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	3
$LN29@findPrev:
	DD	3
	DD	$LN28@findPrev
$LN28@findPrev:
	DD	-44					; ffffffd4H
	DD	16					; 00000010H
	DD	$LN24@findPrev
	DD	-124					; ffffff84H
	DD	8
	DD	$LN26@findPrev
	DD	-140					; ffffff74H
	DD	8
	DD	$LN27@findPrev
$LN27@findPrev:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	49					; 00000031H
	DB	0
$LN26@findPrev:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	48					; 00000030H
	DB	0
$LN24@findPrev:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?findPrev@RuleBasedTimeZone@icu_56@@ABECNCAANAAPAVTimeZoneRule@2@1@Z ENDP ; icu_56::RuleBasedTimeZone::findPrev
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getTransitionTime@RuleBasedTimeZone@icu_56@@ABENPAUTransition@2@CHH@Z
_TEXT	SEGMENT
tv133 = -224						; size = 4
_time$ = -24						; size = 8
_this$ = -8						; size = 4
_transition$ = 8					; size = 4
_local$ = 12						; size = 1
_NonExistingTimeOpt$ = 16				; size = 4
_DuplicatedTimeOpt$ = 20				; size = 4
?getTransitionTime@RuleBasedTimeZone@icu_56@@ABENPAUTransition@2@CHH@Z PROC ; icu_56::RuleBasedTimeZone::getTransitionTime, COMDAT
; _this$ = ecx
; Line 897
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 898
	mov	eax, DWORD PTR _transition$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR _time$[ebp]
; Line 899
	movsx	eax, BYTE PTR _local$[ebp]
	test	eax, eax
	je	SHORT $LN1@getTransit
; Line 902
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NonExistingTimeOpt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _transition$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	eax, DWORD PTR _transition$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	mov	ecx, DWORD PTR _transition$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?getDSTSavings@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getDSTSavings
	push	eax
	mov	edx, DWORD PTR _transition$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?getRawOffset@TimeZoneRule@icu_56@@QBEHXZ ; icu_56::TimeZoneRule::getRawOffset
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getLocalDelta@RuleBasedTimeZone@icu_56@@ABEHHHHHHH@Z ; icu_56::RuleBasedTimeZone::getLocalDelta
	mov	DWORD PTR tv133[ebp], eax
	fild	DWORD PTR tv133[ebp]
	fadd	QWORD PTR _time$[ebp]
	fstp	QWORD PTR _time$[ebp]
$LN1@getTransit:
; Line 904
	fld	QWORD PTR _time$[ebp]
; Line 905
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?getTransitionTime@RuleBasedTimeZone@icu_56@@ABENPAUTransition@2@CHH@Z ENDP ; icu_56::RuleBasedTimeZone::getTransitionTime
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getLocalDelta@RuleBasedTimeZone@icu_56@@ABEHHHHHHH@Z
_TEXT	SEGMENT
tv71 = -265						; size = 1
tv68 = -265						; size = 1
_stdToDst$ = -65					; size = 1
_dstToStd$ = -53					; size = 1
_offsetAfter$ = -44					; size = 4
_offsetBefore$ = -32					; size = 4
_delta$ = -20						; size = 4
_this$ = -8						; size = 4
_rawBefore$ = 8						; size = 4
_dstBefore$ = 12					; size = 4
_rawAfter$ = 16						; size = 4
_dstAfter$ = 20						; size = 4
_NonExistingTimeOpt$ = 24				; size = 4
_DuplicatedTimeOpt$ = 28				; size = 4
?getLocalDelta@RuleBasedTimeZone@icu_56@@ABEHHHHHHH@Z PROC ; icu_56::RuleBasedTimeZone::getLocalDelta, COMDAT
; _this$ = ecx
; Line 909
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 910
	mov	DWORD PTR _delta$[ebp], 0
; Line 912
	mov	eax, DWORD PTR _rawBefore$[ebp]
	add	eax, DWORD PTR _dstBefore$[ebp]
	mov	DWORD PTR _offsetBefore$[ebp], eax
; Line 913
	mov	eax, DWORD PTR _rawAfter$[ebp]
	add	eax, DWORD PTR _dstAfter$[ebp]
	mov	DWORD PTR _offsetAfter$[ebp], eax
; Line 915
	cmp	DWORD PTR _dstBefore$[ebp], 0
	je	SHORT $LN25@getLocalDe
	cmp	DWORD PTR _dstAfter$[ebp], 0
	jne	SHORT $LN25@getLocalDe
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN26@getLocalDe
$LN25@getLocalDe:
	mov	BYTE PTR tv68[ebp], 0
$LN26@getLocalDe:
	mov	al, BYTE PTR tv68[ebp]
	mov	BYTE PTR _dstToStd$[ebp], al
; Line 916
	cmp	DWORD PTR _dstBefore$[ebp], 0
	jne	SHORT $LN27@getLocalDe
	cmp	DWORD PTR _dstAfter$[ebp], 0
	je	SHORT $LN27@getLocalDe
	mov	BYTE PTR tv71[ebp], 1
	jmp	SHORT $LN28@getLocalDe
$LN27@getLocalDe:
	mov	BYTE PTR tv71[ebp], 0
$LN28@getLocalDe:
	mov	al, BYTE PTR tv71[ebp]
	mov	BYTE PTR _stdToDst$[ebp], al
; Line 918
	mov	eax, DWORD PTR _offsetAfter$[ebp]
	sub	eax, DWORD PTR _offsetBefore$[ebp]
	js	SHORT $LN22@getLocalDe
; Line 921
	mov	eax, DWORD PTR _NonExistingTimeOpt$[ebp]
	and	eax, 3
	cmp	eax, 1
	jne	SHORT $LN19@getLocalDe
	movsx	eax, BYTE PTR _dstToStd$[ebp]
	test	eax, eax
	jne	SHORT $LN20@getLocalDe
$LN19@getLocalDe:
	mov	eax, DWORD PTR _NonExistingTimeOpt$[ebp]
	and	eax, 3
	cmp	eax, 3
	jne	SHORT $LN21@getLocalDe
	movsx	eax, BYTE PTR _stdToDst$[ebp]
	test	eax, eax
	je	SHORT $LN21@getLocalDe
$LN20@getLocalDe:
; Line 922
	mov	eax, DWORD PTR _offsetBefore$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
; Line 923
	jmp	SHORT $LN18@getLocalDe
$LN21@getLocalDe:
; Line 924
	mov	eax, DWORD PTR _NonExistingTimeOpt$[ebp]
	and	eax, 3
	cmp	eax, 1
	jne	SHORT $LN15@getLocalDe
	movsx	eax, BYTE PTR _stdToDst$[ebp]
	test	eax, eax
	jne	SHORT $LN16@getLocalDe
$LN15@getLocalDe:
	mov	eax, DWORD PTR _NonExistingTimeOpt$[ebp]
	and	eax, 3
	cmp	eax, 3
	jne	SHORT $LN17@getLocalDe
	movsx	eax, BYTE PTR _dstToStd$[ebp]
	test	eax, eax
	je	SHORT $LN17@getLocalDe
$LN16@getLocalDe:
; Line 925
	mov	eax, DWORD PTR _offsetAfter$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
	jmp	SHORT $LN18@getLocalDe
$LN17@getLocalDe:
; Line 926
	mov	eax, DWORD PTR _NonExistingTimeOpt$[ebp]
	and	eax, 12					; 0000000cH
	cmp	eax, 12					; 0000000cH
	jne	SHORT $LN13@getLocalDe
; Line 927
	mov	eax, DWORD PTR _offsetBefore$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
; Line 928
	jmp	SHORT $LN18@getLocalDe
$LN13@getLocalDe:
; Line 931
	mov	eax, DWORD PTR _offsetAfter$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
$LN18@getLocalDe:
; Line 933
	jmp	SHORT $LN11@getLocalDe
$LN22@getLocalDe:
; Line 936
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	and	eax, 3
	cmp	eax, 1
	jne	SHORT $LN8@getLocalDe
	movsx	eax, BYTE PTR _dstToStd$[ebp]
	test	eax, eax
	jne	SHORT $LN9@getLocalDe
$LN8@getLocalDe:
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	and	eax, 3
	cmp	eax, 3
	jne	SHORT $LN10@getLocalDe
	movsx	eax, BYTE PTR _stdToDst$[ebp]
	test	eax, eax
	je	SHORT $LN10@getLocalDe
$LN9@getLocalDe:
; Line 937
	mov	eax, DWORD PTR _offsetAfter$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
; Line 938
	jmp	SHORT $LN11@getLocalDe
$LN10@getLocalDe:
; Line 939
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	and	eax, 3
	cmp	eax, 1
	jne	SHORT $LN4@getLocalDe
	movsx	eax, BYTE PTR _stdToDst$[ebp]
	test	eax, eax
	jne	SHORT $LN5@getLocalDe
$LN4@getLocalDe:
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	and	eax, 3
	cmp	eax, 3
	jne	SHORT $LN6@getLocalDe
	movsx	eax, BYTE PTR _dstToStd$[ebp]
	test	eax, eax
	je	SHORT $LN6@getLocalDe
$LN5@getLocalDe:
; Line 940
	mov	eax, DWORD PTR _offsetBefore$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
	jmp	SHORT $LN11@getLocalDe
$LN6@getLocalDe:
; Line 941
	mov	eax, DWORD PTR _DuplicatedTimeOpt$[ebp]
	and	eax, 12					; 0000000cH
	cmp	eax, 4
	jne	SHORT $LN2@getLocalDe
; Line 942
	mov	eax, DWORD PTR _offsetBefore$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
; Line 943
	jmp	SHORT $LN11@getLocalDe
$LN2@getLocalDe:
; Line 946
	mov	eax, DWORD PTR _offsetAfter$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
$LN11@getLocalDe:
; Line 949
	mov	eax, DWORD PTR _delta$[ebp]
; Line 950
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?getLocalDelta@RuleBasedTimeZone@icu_56@@ABEHHHHHHH@Z ENDP ; icu_56::RuleBasedTimeZone::getLocalDelta
_TEXT	ENDS
END
