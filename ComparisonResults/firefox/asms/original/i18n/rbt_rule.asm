; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\i18n\rbt_rule.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
CONST	SEGMENT
_FORWARD_OP DW	020H
	DW	03eH
	DW	020H
	DW	00H
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\include\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_7UnicodeReplacer@icu_56@@6B@			; icu_56::UnicodeReplacer::`vftable'
PUBLIC	??0UnicodeReplacer@icu_56@@QAE@XZ		; icu_56::UnicodeReplacer::UnicodeReplacer
PUBLIC	??_R4UnicodeReplacer@icu_56@@6B@		; icu_56::UnicodeReplacer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUnicodeReplacer@icu_56@@@8		; icu_56::UnicodeReplacer `RTTI Type Descriptor'
PUBLIC	??_R3UnicodeReplacer@icu_56@@8			; icu_56::UnicodeReplacer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UnicodeReplacer@icu_56@@8			; icu_56::UnicodeReplacer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UnicodeReplacer@icu_56@@8		; icu_56::UnicodeReplacer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EUnicodeReplacer@icu_56@@UAEPAXI@Z		; icu_56::UnicodeReplacer::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@UnicodeReplacer@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UnicodeReplacer@icu_56@@8 DD FLAT:??_R0?AVUnicodeReplacer@icu_56@@@8 ; icu_56::UnicodeReplacer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UnicodeReplacer@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UnicodeReplacer@icu_56@@8
rdata$r	SEGMENT
??_R2UnicodeReplacer@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UnicodeReplacer@icu_56@@8 ; icu_56::UnicodeReplacer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UnicodeReplacer@icu_56@@8
rdata$r	SEGMENT
??_R3UnicodeReplacer@icu_56@@8 DD 00H			; icu_56::UnicodeReplacer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UnicodeReplacer@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUnicodeReplacer@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUnicodeReplacer@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::UnicodeReplacer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUnicodeReplacer@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UnicodeReplacer@icu_56@@6B@
rdata$r	SEGMENT
??_R4UnicodeReplacer@icu_56@@6B@ DD 00H			; icu_56::UnicodeReplacer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUnicodeReplacer@icu_56@@@8
	DD	FLAT:??_R3UnicodeReplacer@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7UnicodeReplacer@icu_56@@6B@
CONST	SEGMENT
??_7UnicodeReplacer@icu_56@@6B@ DD FLAT:??_R4UnicodeReplacer@icu_56@@6B@ ; icu_56::UnicodeReplacer::`vftable'
	DD	FLAT:??_EUnicodeReplacer@icu_56@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UnicodeReplacer@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0UnicodeReplacer@icu_56@@QAE@XZ PROC			; icu_56::UnicodeReplacer::UnicodeReplacer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UnicodeReplacer@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0UnicodeReplacer@icu_56@@QAE@XZ ENDP			; icu_56::UnicodeReplacer::UnicodeReplacer
_TEXT	ENDS
PUBLIC	??0UnicodeReplacer@icu_56@@QAE@ABV01@@Z		; icu_56::UnicodeReplacer::UnicodeReplacer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0UnicodeReplacer@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0UnicodeReplacer@icu_56@@QAE@ABV01@@Z PROC		; icu_56::UnicodeReplacer::UnicodeReplacer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UnicodeReplacer@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0UnicodeReplacer@icu_56@@QAE@ABV01@@Z ENDP		; icu_56::UnicodeReplacer::UnicodeReplacer
_TEXT	ENDS
PUBLIC	??4UnicodeReplacer@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::UnicodeReplacer::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UnicodeReplacer@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UnicodeReplacer@icu_56@@QAEAAV01@ABV01@@Z PROC	; icu_56::UnicodeReplacer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UnicodeReplacer@icu_56@@QAEAAV01@ABV01@@Z ENDP	; icu_56::UnicodeReplacer::operator=
_TEXT	ENDS
PUBLIC	??_GUnicodeReplacer@icu_56@@UAEPAXI@Z		; icu_56::UnicodeReplacer::`scalar deleting destructor'
EXTRN	??1UnicodeReplacer@icu_56@@UAE@XZ:PROC		; icu_56::UnicodeReplacer::~UnicodeReplacer
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUnicodeReplacer@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUnicodeReplacer@icu_56@@UAEPAXI@Z PROC		; icu_56::UnicodeReplacer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UnicodeReplacer@icu_56@@UAE@XZ	; icu_56::UnicodeReplacer::~UnicodeReplacer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUnicodeReplacer@icu_56@@UAEPAXI@Z ENDP		; icu_56::UnicodeReplacer::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_V@YAXPAX@Z					; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUnicodeReplacer@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUnicodeReplacer@icu_56@@UAEPAXI@Z PROC		; icu_56::UnicodeReplacer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1UnicodeReplacer@icu_56@@UAE@XZ ; icu_56::UnicodeReplacer::~UnicodeReplacer
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UnicodeReplacer@icu_56@@UAE@XZ	; icu_56::UnicodeReplacer::~UnicodeReplacer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUnicodeReplacer@icu_56@@UAEPAXI@Z ENDP		; icu_56::UnicodeReplacer::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??_V@YAXPAX@Z PROC					; operator delete[], COMDAT
; Line 450
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 451
	mov	DWORD PTR _q$[ebp], 0
; Line 452
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 453
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??_V@YAXPAX@Z ENDP					; operator delete[]
_TEXT	ENDS
PUBLIC	??_7TransliterationRule@icu_56@@6B@		; icu_56::TransliterationRule::`vftable'
PUBLIC	??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z ; icu_56::TransliterationRule::TransliterationRule
PUBLIC	??_R4TransliterationRule@icu_56@@6B@		; icu_56::TransliterationRule::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTransliterationRule@icu_56@@@8		; icu_56::TransliterationRule `RTTI Type Descriptor'
PUBLIC	??_R3TransliterationRule@icu_56@@8		; icu_56::TransliterationRule::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TransliterationRule@icu_56@@8		; icu_56::TransliterationRule::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TransliterationRule@icu_56@@8	; icu_56::TransliterationRule::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVUMemory@icu_56@@@8			; icu_56::UMemory `RTTI Type Descriptor'
PUBLIC	??_R3UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?getContextLength@TransliterationRule@icu_56@@UBEHXZ ; icu_56::TransliterationRule::getContextLength
PUBLIC	?masks@TransliterationRule@icu_56@@UBECABV12@@Z	; icu_56::TransliterationRule::masks
PUBLIC	?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z ; icu_56::TransliterationRule::toRule
EXTRN	__imp_??3UMemory@icu_56@@SAXPAX@Z:PROC
EXTRN	__imp_??1UnicodeString@icu_56@@UAE@XZ:PROC
EXTRN	??0StringReplacer@icu_56@@QAE@ABVUnicodeString@1@HPBVTransliterationRuleData@1@@Z:PROC ; icu_56::StringReplacer::StringReplacer
EXTRN	??0StringMatcher@icu_56@@QAE@ABVUnicodeString@1@HHHABVTransliterationRuleData@1@@Z:PROC ; icu_56::StringMatcher::StringMatcher
EXTRN	__imp_??2UMemory@icu_56@@SAPAXI@Z:PROC
EXTRN	__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_?length@UnicodeString@icu_56@@QBEHXZ:PROC
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_ETransliterationRule@icu_56@@UAEPAXI@Z:PROC	; icu_56::TransliterationRule::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@UMemory@icu_56@@8
; File d:\mozilla\intl\icu\source\i18n\rbt_rule.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UMemory@icu_56@@8
rdata$r	SEGMENT
??_R2UMemory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UMemory@icu_56@@8
rdata$r	SEGMENT
??_R3UMemory@icu_56@@8 DD 00H				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUMemory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUMemory@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUMemory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R13?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@TransliterationRule@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TransliterationRule@icu_56@@8 DD FLAT:??_R0?AVTransliterationRule@icu_56@@@8 ; icu_56::TransliterationRule::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TransliterationRule@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2TransliterationRule@icu_56@@8
rdata$r	SEGMENT
??_R2TransliterationRule@icu_56@@8 DD FLAT:??_R1A@?0A@EA@TransliterationRule@icu_56@@8 ; icu_56::TransliterationRule::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3TransliterationRule@icu_56@@8
rdata$r	SEGMENT
??_R3TransliterationRule@icu_56@@8 DD 00H		; icu_56::TransliterationRule::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2TransliterationRule@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTransliterationRule@icu_56@@@8
_DATA	SEGMENT
??_R0?AVTransliterationRule@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::TransliterationRule `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTransliterationRule@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TransliterationRule@icu_56@@6B@
rdata$r	SEGMENT
??_R4TransliterationRule@icu_56@@6B@ DD 00H		; icu_56::TransliterationRule::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTransliterationRule@icu_56@@@8
	DD	FLAT:??_R3TransliterationRule@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7TransliterationRule@icu_56@@6B@
CONST	SEGMENT
??_7TransliterationRule@icu_56@@6B@ DD FLAT:??_R4TransliterationRule@icu_56@@6B@ ; icu_56::TransliterationRule::`vftable'
	DD	FLAT:??_ETransliterationRule@icu_56@@UAEPAXI@Z
	DD	FLAT:?getContextLength@TransliterationRule@icu_56@@UBEHXZ
	DD	FLAT:?masks@TransliterationRule@icu_56@@UBECABV12@@Z
	DD	FLAT:?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$4
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv246 = -328						; size = 4
tv228 = -328						; size = 4
tv196 = -328						; size = 4
tv172 = -328						; size = 4
$T44346 = -320						; size = 4
$T44347 = -308						; size = 4
$T44350 = -296						; size = 4
$T44351 = -284						; size = 4
$T44354 = -272						; size = 4
$T44355 = -260						; size = 4
$T44358 = -248						; size = 4
$T44359 = -236						; size = 4
_postContextLength$ = -32				; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_input$ = 8						; size = 4
_anteContextPos$ = 12					; size = 4
_postContextPos$ = 16					; size = 4
_outputStr$ = 20					; size = 4
_cursorPosition$ = 24					; size = 4
_cursorOffset$ = 28					; size = 4
_segs$ = 32						; size = 4
_segsCount$ = 36					; size = 4
_anchorStart$ = 40					; size = 1
_anchorEnd$ = 44					; size = 1
_theData$ = 48						; size = 4
_status$ = 52						; size = 4
??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z PROC ; icu_56::TransliterationRule::TransliterationRule, COMDAT
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TransliterationRule@icu_56@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _theData$[ebp]
	mov	DWORD PTR [eax+104], ecx
; Line 69
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN20@Transliter
; Line 70
	jmp	$LN21@Transliter
$LN20@Transliter:
; Line 73
	cmp	DWORD PTR _anteContextPos$[ebp], 0
	jge	SHORT $LN19@Transliter
; Line 74
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 75
	jmp	SHORT $LN18@Transliter
$LN19@Transliter:
; Line 76
	mov	esi, esp
	mov	ecx, DWORD PTR _input$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _anteContextPos$[ebp], eax
	jle	SHORT $LN17@Transliter
; Line 78
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 79
	jmp	$LN21@Transliter
$LN17@Transliter:
; Line 81
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _anteContextPos$[ebp]
	mov	DWORD PTR [eax+92], ecx
$LN18@Transliter:
; Line 83
	cmp	DWORD PTR _postContextPos$[ebp], 0
	jge	SHORT $LN16@Transliter
; Line 84
	mov	esi, esp
	mov	ecx, DWORD PTR _input$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+92]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+96], eax
; Line 85
	jmp	SHORT $LN15@Transliter
$LN16@Transliter:
; Line 87
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _postContextPos$[ebp]
	cmp	ecx, DWORD PTR [eax+92]
	jl	SHORT $LN13@Transliter
	mov	esi, esp
	mov	ecx, DWORD PTR _input$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _postContextPos$[ebp], eax
	jle	SHORT $LN14@Transliter
$LN13@Transliter:
; Line 89
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 90
	jmp	$LN21@Transliter
$LN14@Transliter:
; Line 92
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _postContextPos$[ebp]
	sub	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+96], ecx
$LN15@Transliter:
; Line 94
	cmp	DWORD PTR _cursorPosition$[ebp], 0
	jge	SHORT $LN12@Transliter
; Line 95
	mov	esi, esp
	mov	ecx, DWORD PTR _outputStr$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cursorPosition$[ebp], eax
	jmp	SHORT $LN11@Transliter
$LN12@Transliter:
; Line 96
	mov	esi, esp
	mov	ecx, DWORD PTR _outputStr$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _cursorPosition$[ebp], eax
	jle	SHORT $LN11@Transliter
; Line 98
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 99
	jmp	$LN21@Transliter
$LN11@Transliter:
; Line 105
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _segs$[ebp]
	mov	DWORD PTR [eax+84], ecx
; Line 106
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _segsCount$[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 108
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	DWORD PTR __imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 109
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+100], 0
; Line 110
	movsx	eax, BYTE PTR _anchorStart$[ebp]
	test	eax, eax
	je	SHORT $LN9@Transliter
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+100]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+100], cl
$LN9@Transliter:
; Line 113
	movsx	eax, BYTE PTR _anchorEnd$[ebp]
	test	eax, eax
	je	SHORT $LN8@Transliter
; Line 114
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+100]
	or	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+100], cl
$LN8@Transliter:
; Line 117
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 118
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jle	$LN7@Transliter
; Line 120
	mov	esi, esp
	push	92					; 0000005cH
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T44347[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T44347[ebp], 0
	je	SHORT $LN23@Transliter
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	ecx, DWORD PTR $T44347[ebp]
	call	??0StringMatcher@icu_56@@QAE@ABVUnicodeString@1@HHHABVTransliterationRuleData@1@@Z ; icu_56::StringMatcher::StringMatcher
	mov	DWORD PTR tv172[ebp], eax
	jmp	SHORT $LN24@Transliter
$LN23@Transliter:
	mov	DWORD PTR tv172[ebp], 0
$LN24@Transliter:
	mov	edx, DWORD PTR tv172[ebp]
	mov	DWORD PTR $T44346[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T44346[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@Transliter
; Line 123
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 124
	jmp	$LN21@Transliter
$LN7@Transliter:
; Line 128
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jle	$LN5@Transliter
; Line 131
	mov	esi, esp
	push	92					; 0000005cH
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T44351[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T44351[ebp], 0
	je	SHORT $LN25@Transliter
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+96]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	ecx, DWORD PTR $T44351[ebp]
	call	??0StringMatcher@icu_56@@QAE@ABVUnicodeString@1@HHHABVTransliterationRuleData@1@@Z ; icu_56::StringMatcher::StringMatcher
	mov	DWORD PTR tv196[ebp], eax
	jmp	SHORT $LN26@Transliter
$LN25@Transliter:
	mov	DWORD PTR tv196[ebp], 0
$LN26@Transliter:
	mov	edx, DWORD PTR tv196[ebp]
	mov	DWORD PTR $T44350[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T44350[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 133
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN5@Transliter
; Line 134
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 135
	jmp	$LN21@Transliter
$LN5@Transliter:
; Line 139
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+96]
	mov	edx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [edx+92]
	mov	DWORD PTR _postContextLength$[ebp], eax
; Line 140
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 141
	cmp	DWORD PTR _postContextLength$[ebp], 0
	jle	$LN3@Transliter
; Line 143
	mov	esi, esp
	push	92					; 0000005cH
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T44355[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T44355[ebp], 0
	je	SHORT $LN27@Transliter
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+96]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	ecx, DWORD PTR $T44355[ebp]
	call	??0StringMatcher@icu_56@@QAE@ABVUnicodeString@1@HHHABVTransliterationRuleData@1@@Z ; icu_56::StringMatcher::StringMatcher
	mov	DWORD PTR tv228[ebp], eax
	jmp	SHORT $LN28@Transliter
$LN27@Transliter:
	mov	DWORD PTR tv228[ebp], 0
$LN28@Transliter:
	mov	eax, DWORD PTR tv228[ebp]
	mov	DWORD PTR $T44354[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T44354[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 145
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@Transliter
; Line 146
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 147
	jmp	$LN21@Transliter
$LN3@Transliter:
; Line 151
	mov	esi, esp
	push	84					; 00000054H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T44359[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T44359[ebp], 0
	je	SHORT $LN29@Transliter
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	edx, DWORD PTR _cursorPosition$[ebp]
	add	edx, DWORD PTR _cursorOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _outputStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T44359[ebp]
	call	??0StringReplacer@icu_56@@QAE@ABVUnicodeString@1@HPBVTransliterationRuleData@1@@Z ; icu_56::StringReplacer::StringReplacer
	mov	DWORD PTR tv246[ebp], eax
	jmp	SHORT $LN30@Transliter
$LN29@Transliter:
	mov	DWORD PTR tv246[ebp], 0
$LN30@Transliter:
	mov	ecx, DWORD PTR tv246[ebp]
	mov	DWORD PTR $T44358[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T44358[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 153
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN21@Transliter
; Line 154
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
$LN21@Transliter:
; Line 157
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$1:
	mov	esi, esp
	mov	eax, DWORD PTR $T44347[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$2:
	mov	esi, esp
	mov	eax, DWORD PTR $T44351[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$3:
	mov	esi, esp
	mov	eax, DWORD PTR $T44355[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$4:
	mov	esi, esp
	mov	eax, DWORD PTR $T44359[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-332]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z ENDP ; icu_56::TransliterationRule::TransliterationRule
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\include\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	??1TransliterationRule@icu_56@@UAE@XZ		; icu_56::TransliterationRule::~TransliterationRule
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GTransliterationRule@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTransliterationRule@icu_56@@UAEPAXI@Z PROC		; icu_56::TransliterationRule::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TransliterationRule@icu_56@@UAE@XZ	; icu_56::TransliterationRule::~TransliterationRule
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTransliterationRule@icu_56@@UAEPAXI@Z ENDP		; icu_56::TransliterationRule::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0TransliterationRule@icu_56@@QAE@AAV01@@Z	; icu_56::TransliterationRule::TransliterationRule
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
; File d:\mozilla\intl\icu\source\i18n\rbt_rule.cpp
xdata$x	SEGMENT
__unwindtable$??0TransliterationRule@icu_56@@QAE@AAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TransliterationRule@icu_56@@QAE@AAV01@@Z$0
__ehfuncinfo$??0TransliterationRule@icu_56@@QAE@AAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0TransliterationRule@icu_56@@QAE@AAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0TransliterationRule@icu_56@@QAE@AAV01@@Z
_TEXT	SEGMENT
tv68 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_other$ = 8						; size = 4
??0TransliterationRule@icu_56@@QAE@AAV01@@Z PROC	; icu_56::TransliterationRule::TransliterationRule, COMDAT
; _this$ = ecx
; Line 171
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TransliterationRule@icu_56@@QAE@AAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _other$[ebp], 0
	je	SHORT $LN7@Transliter@2
	mov	eax, DWORD PTR _other$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN8@Transliter@2
$LN7@Transliter@2:
	mov	DWORD PTR tv68[ebp], 0
$LN8@Transliter@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TransliterationRule@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _other$[ebp]
	add	eax, 20					; 00000014H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+96], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	dl, BYTE PTR [ecx+100]
	mov	BYTE PTR [eax+100], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax+104], edx
; Line 173
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
; Line 175
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+88], 0
	jle	SHORT $LN4@Transliter@2
; Line 176
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	shl	ecx, 2
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+84], eax
; Line 177
	push	1
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx+88]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@Transliter@2:
; Line 180
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Transliter@2
; Line 181
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@Transliter@2:
; Line 183
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@Transliter@2
; Line 184
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN2@Transliter@2:
; Line 186
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Transliter@2
; Line 187
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@Transliter@2:
; Line 189
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 190
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@AAV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0TransliterationRule@icu_56@@QAE@AAV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TransliterationRule@icu_56@@QAE@AAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TransliterationRule@icu_56@@QAE@AAV01@@Z ENDP	; icu_56::TransliterationRule::TransliterationRule
EXTRN	_uprv_free_56:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TransliterationRule@icu_56@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TransliterationRule@icu_56@@UAE@XZ$0
__ehfuncinfo$??1TransliterationRule@icu_56@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1TransliterationRule@icu_56@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1TransliterationRule@icu_56@@UAE@XZ
_TEXT	SEGMENT
tv147 = -316						; size = 4
tv135 = -316						; size = 4
tv91 = -316						; size = 4
tv79 = -316						; size = 4
$T44395 = -308						; size = 4
$T44396 = -296						; size = 4
$T44399 = -284						; size = 4
$T44400 = -272						; size = 4
$T44403 = -260						; size = 4
$T44404 = -248						; size = 4
$T44407 = -236						; size = 4
$T44408 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1TransliterationRule@icu_56@@UAE@XZ PROC		; icu_56::TransliterationRule::~TransliterationRule, COMDAT
; _this$ = ecx
; Line 192
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TransliterationRule@icu_56@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TransliterationRule@icu_56@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 193
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 194
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T44396[ebp], ecx
	mov	edx, DWORD PTR $T44396[ebp]
	mov	DWORD PTR $T44395[ebp], edx
	cmp	DWORD PTR $T44395[ebp], 0
	je	SHORT $LN3@Transliter@3
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T44395[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T44395[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@Transliter@3
$LN3@Transliter@3:
	mov	DWORD PTR tv79[ebp], 0
$LN4@Transliter@3:
; Line 195
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T44400[ebp], ecx
	mov	edx, DWORD PTR $T44400[ebp]
	mov	DWORD PTR $T44399[ebp], edx
	cmp	DWORD PTR $T44399[ebp], 0
	je	SHORT $LN5@Transliter@3
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T44399[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T44399[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN6@Transliter@3
$LN5@Transliter@3:
	mov	DWORD PTR tv91[ebp], 0
$LN6@Transliter@3:
; Line 196
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T44404[ebp], ecx
	mov	edx, DWORD PTR $T44404[ebp]
	mov	DWORD PTR $T44403[ebp], edx
	cmp	DWORD PTR $T44403[ebp], 0
	je	SHORT $LN7@Transliter@3
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T44403[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T44403[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN8@Transliter@3
$LN7@Transliter@3:
	mov	DWORD PTR tv135[ebp], 0
$LN8@Transliter@3:
; Line 197
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T44408[ebp], ecx
	mov	edx, DWORD PTR $T44408[ebp]
	mov	DWORD PTR $T44407[ebp], edx
	cmp	DWORD PTR $T44407[ebp], 0
	je	SHORT $LN9@Transliter@3
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T44407[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T44407[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN1@Transliter@3
$LN9@Transliter@3:
	mov	DWORD PTR tv147[ebp], 0
$LN1@Transliter@3:
; Line 198
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TransliterationRule@icu_56@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1TransliterationRule@icu_56@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-320]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TransliterationRule@icu_56@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TransliterationRule@icu_56@@UAE@XZ ENDP		; icu_56::TransliterationRule::~TransliterationRule
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getContextLength@TransliterationRule@icu_56@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getContextLength@TransliterationRule@icu_56@@UBEHXZ PROC ; icu_56::TransliterationRule::getContextLength, COMDAT
; _this$ = ecx
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 210
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [eax+100]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+92]
; Line 211
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getContextLength@TransliterationRule@icu_56@@UBEHXZ ENDP ; icu_56::TransliterationRule::getContextLength
_TEXT	ENDS
PUBLIC	?getIndexValue@TransliterationRule@icu_56@@QBEFXZ ; icu_56::TransliterationRule::getIndexValue
EXTRN	?lookupMatcher@TransliterationRuleData@icu_56@@QBEPAVUnicodeMatcher@2@H@Z:PROC ; icu_56::TransliterationRuleData::lookupMatcher
EXTRN	__imp_?char32At@UnicodeString@icu_56@@QBEHH@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getIndexValue@TransliterationRule@icu_56@@QBEFXZ
_TEXT	SEGMENT
tv80 = -220						; size = 4
_c$ = -20						; size = 4
_this$ = -8						; size = 4
?getIndexValue@TransliterationRule@icu_56@@QBEFXZ PROC	; icu_56::TransliterationRule::getIndexValue, COMDAT
; _this$ = ecx
; Line 219
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 220
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+92], eax
	jne	SHORT $LN1@getIndexVa
; Line 223
	or	eax, -1
	jmp	SHORT $LN2@getIndexVa
$LN1@getIndexVa:
; Line 225
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	DWORD PTR __imp_?char32At@UnicodeString@icu_56@@QBEHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _c$[ebp], eax
; Line 226
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+104]
	call	?lookupMatcher@TransliterationRuleData@icu_56@@QBEPAVUnicodeMatcher@2@H@Z ; icu_56::TransliterationRuleData::lookupMatcher
	test	eax, eax
	jne	SHORT $LN4@getIndexVa
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv80[ebp], edx
	jmp	SHORT $LN5@getIndexVa
$LN4@getIndexVa:
	mov	DWORD PTR tv80[ebp], -1
$LN5@getIndexVa:
	mov	ax, WORD PTR tv80[ebp]
$LN2@getIndexVa:
; Line 227
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getIndexValue@TransliterationRule@icu_56@@QBEFXZ ENDP	; icu_56::TransliterationRule::getIndexValue
_TEXT	ENDS
PUBLIC	?matchesIndexValue@TransliterationRule@icu_56@@QBECE@Z ; icu_56::TransliterationRule::matchesIndexValue
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?matchesIndexValue@TransliterationRule@icu_56@@QBECE@Z
_TEXT	SEGMENT
tv73 = -224						; size = 4
tv82 = -220						; size = 4
tv71 = -220						; size = 4
_m$ = -20						; size = 4
_this$ = -8						; size = 4
_v$ = 8							; size = 1
?matchesIndexValue@TransliterationRule@icu_56@@QBECE@Z PROC ; icu_56::TransliterationRule::matchesIndexValue, COMDAT
; _this$ = ecx
; Line 239
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 242
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@matchesInd
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN4@matchesInd
$LN3@matchesInd:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv71[ebp], ecx
$LN4@matchesInd:
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN5@matchesInd
	mov	edx, DWORD PTR tv71[ebp]
	add	edx, 4
	mov	DWORD PTR tv73[ebp], edx
	jmp	SHORT $LN6@matchesInd
$LN5@matchesInd:
	mov	DWORD PTR tv73[ebp], 0
$LN6@matchesInd:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _m$[ebp], eax
; Line 243
	cmp	DWORD PTR _m$[ebp], 0
	je	SHORT $LN7@matchesInd
	mov	esi, esp
	movzx	eax, BYTE PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $LN8@matchesInd
$LN7@matchesInd:
	mov	DWORD PTR tv82[ebp], 1
$LN8@matchesInd:
	mov	al, BYTE PTR tv82[ebp]
; Line 244
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?matchesIndexValue@TransliterationRule@icu_56@@QBECE@Z ENDP ; icu_56::TransliterationRule::matchesIndexValue
_TEXT	ENDS
EXTRN	__imp_?compare@UnicodeString@icu_56@@QBECHHABV12@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?masks@TransliterationRule@icu_56@@UBECABV12@@Z
_TEXT	SEGMENT
tv150 = -277						; size = 1
tv142 = -277						; size = 1
_cachedCompare$ = -80					; size = 4
_right2$ = -68						; size = 4
_right$ = -56						; size = 4
_left2$ = -44						; size = 4
_left$ = -32						; size = 4
_len$ = -20						; size = 4
_this$ = -8						; size = 4
_r2$ = 8						; size = 4
?masks@TransliterationRule@icu_56@@UBECABV12@@Z PROC	; icu_56::TransliterationRule::masks, COMDAT
; _this$ = ecx
; Line 252
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 291
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _len$[ebp], eax
; Line 292
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _left$[ebp], ecx
; Line 293
	mov	eax, DWORD PTR _r2$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _left2$[ebp], ecx
; Line 294
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _right$[ebp], eax
; Line 295
	mov	ecx, DWORD PTR _r2$[ebp]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _left2$[ebp]
	mov	DWORD PTR _right2$[ebp], eax
; Line 296
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _left2$[ebp]
	sub	edx, DWORD PTR _left$[ebp]
	push	edx
	mov	ecx, DWORD PTR _r2$[ebp]
	add	ecx, 20					; 00000014H
	call	DWORD PTR __imp_?compare@UnicodeString@icu_56@@QBECHHABV12@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	eax, al
	mov	DWORD PTR _cachedCompare$[ebp], eax
; Line 304
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _left2$[ebp]
	jne	SHORT $LN1@masks
	mov	eax, DWORD PTR _right$[ebp]
	cmp	eax, DWORD PTR _right2$[ebp]
	jne	SHORT $LN1@masks
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _r2$[ebp]
	mov	edx, DWORD PTR [eax+96]
	cmp	edx, DWORD PTR [ecx+96]
	jg	SHORT $LN1@masks
	cmp	DWORD PTR _cachedCompare$[ebp], 0
	jne	SHORT $LN1@masks
; Line 308
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+100]
	mov	edx, DWORD PTR _r2$[ebp]
	movsx	eax, BYTE PTR [edx+100]
	cmp	ecx, eax
	je	SHORT $LN5@masks
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+100]
	and	edx, 1
	jne	SHORT $LN4@masks
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+100]
	and	ecx, 2
	je	SHORT $LN5@masks
$LN4@masks:
	mov	edx, DWORD PTR _r2$[ebp]
	movsx	eax, BYTE PTR [edx+100]
	and	eax, 1
	je	SHORT $LN6@masks
	mov	ecx, DWORD PTR _r2$[ebp]
	movsx	edx, BYTE PTR [ecx+100]
	and	edx, 2
	jne	SHORT $LN5@masks
$LN6@masks:
	mov	BYTE PTR tv142[ebp], 0
	jmp	SHORT $LN7@masks
$LN5@masks:
	mov	BYTE PTR tv142[ebp], 1
$LN7@masks:
	mov	al, BYTE PTR tv142[ebp]
	jmp	SHORT $LN2@masks
$LN1@masks:
; Line 314
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _left2$[ebp]
	jg	SHORT $LN8@masks
	mov	ecx, DWORD PTR _right$[ebp]
	cmp	ecx, DWORD PTR _right2$[ebp]
	jl	SHORT $LN9@masks
	mov	edx, DWORD PTR _right$[ebp]
	cmp	edx, DWORD PTR _right2$[ebp]
	jne	SHORT $LN8@masks
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _r2$[ebp]
	mov	edx, DWORD PTR [eax+96]
	cmp	edx, DWORD PTR [ecx+96]
	jg	SHORT $LN8@masks
$LN9@masks:
	cmp	DWORD PTR _cachedCompare$[ebp], 0
	jne	SHORT $LN8@masks
	mov	BYTE PTR tv150[ebp], 1
	jmp	SHORT $LN11@masks
$LN8@masks:
	mov	BYTE PTR tv150[ebp], 0
$LN11@masks:
	mov	al, BYTE PTR tv150[ebp]
$LN2@masks:
; Line 315
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?masks@TransliterationRule@icu_56@@UBECABV12@@Z ENDP	; icu_56::TransliterationRule::masks
_TEXT	ENDS
PUBLIC	?matchAndReplace@TransliterationRule@icu_56@@QBE?AW4UMatchDegree@2@AAVReplaceable@2@AAUUTransPosition@@C@Z ; icu_56::TransliterationRule::matchAndReplace
EXTRN	_uprv_max_56:PROC
EXTRN	_uprv_min_56:PROC
EXTRN	?resetMatch@StringMatcher@icu_56@@QAEXXZ:PROC	; icu_56::StringMatcher::resetMatch
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?matchAndReplace@TransliterationRule@icu_56@@QBE?AW4UMatchDegree@2@AAVReplaceable@2@AAUUTransPosition@@C@Z
_TEXT	SEGMENT
tv202 = -316						; size = 4
_lenDelta$ = -116					; size = 4
_newLength$ = -104					; size = 4
_newStart$ = -92					; size = 4
_match$ = -80						; size = 4
_anteLimit$ = -68					; size = 4
_minOText$ = -56					; size = 4
_oText$ = -44						; size = 4
_keyLimit$ = -32					; size = 4
_i$37564 = -20						; size = 4
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_pos$ = 12						; size = 4
_incremental$ = 16					; size = 1
?matchAndReplace@TransliterationRule@icu_56@@QBE?AW4UMatchDegree@2@AAVReplaceable@2@AAUUTransPosition@@C@Z PROC ; icu_56::TransliterationRule::matchAndReplace, COMDAT
; _this$ = ecx
; Line 352
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 362
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	SHORT $LN15@matchAndRe
; Line 363
	mov	DWORD PTR _i$37564[ebp], 0
	jmp	SHORT $LN14@matchAndRe
$LN13@matchAndRe:
	mov	eax, DWORD PTR _i$37564[ebp]
	add	eax, 1
	mov	DWORD PTR _i$37564[ebp], eax
$LN14@matchAndRe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$37564[ebp]
	cmp	ecx, DWORD PTR [eax+88]
	jge	SHORT $LN15@matchAndRe
; Line 364
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _i$37564[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	call	?resetMatch@StringMatcher@icu_56@@QAEXXZ ; icu_56::StringMatcher::resetMatch
; Line 365
	jmp	SHORT $LN13@matchAndRe
$LN15@matchAndRe:
; Line 385
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	?posBefore@icu_56@@YAHABVReplaceable@1@H@Z ; icu_56::posBefore
	add	esp, 8
	mov	DWORD PTR _anteLimit$[ebp], eax
; Line 390
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	?posBefore@icu_56@@YAHABVReplaceable@1@H@Z ; icu_56::posBefore
	add	esp, 8
	mov	DWORD PTR _oText$[ebp], eax
; Line 392
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN11@matchAndRe
; Line 393
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _anteLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _oText$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _match$[ebp], eax
; Line 394
	cmp	DWORD PTR _match$[ebp], 2
	je	SHORT $LN11@matchAndRe
; Line 395
	xor	eax, eax
	jmp	$LN16@matchAndRe
$LN11@matchAndRe:
; Line 399
	mov	eax, DWORD PTR _oText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	?posAfter@icu_56@@YAHABVReplaceable@1@H@Z ; icu_56::posAfter
	add	esp, 8
	mov	DWORD PTR _minOText$[ebp], eax
; Line 403
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+100]
	and	ecx, 1
	je	SHORT $LN9@matchAndRe
	mov	eax, DWORD PTR _oText$[ebp]
	cmp	eax, DWORD PTR _anteLimit$[ebp]
	je	SHORT $LN9@matchAndRe
; Line 404
	xor	eax, eax
	jmp	$LN16@matchAndRe
$LN9@matchAndRe:
; Line 409
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _oText$[ebp], ecx
; Line 411
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN8@matchAndRe
; Line 412
	mov	esi, esp
	movzx	eax, BYTE PTR _incremental$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	lea	eax, DWORD PTR _oText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _match$[ebp], eax
; Line 413
	cmp	DWORD PTR _match$[ebp], 2
	je	SHORT $LN8@matchAndRe
; Line 414
	mov	eax, DWORD PTR _match$[ebp]
	jmp	$LN16@matchAndRe
$LN8@matchAndRe:
; Line 418
	mov	eax, DWORD PTR _oText$[ebp]
	mov	DWORD PTR _keyLimit$[ebp], eax
; Line 420
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN6@matchAndRe
; Line 421
	movsx	eax, BYTE PTR _incremental$[ebp]
	test	eax, eax
	je	SHORT $LN5@matchAndRe
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _keyLimit$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN5@matchAndRe
; Line 426
	mov	eax, 1
	jmp	$LN16@matchAndRe
$LN5@matchAndRe:
; Line 429
	mov	esi, esp
	movzx	eax, BYTE PTR _incremental$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR _oText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _match$[ebp], eax
; Line 430
	cmp	DWORD PTR _match$[ebp], 2
	je	SHORT $LN6@matchAndRe
; Line 431
	mov	eax, DWORD PTR _match$[ebp]
	jmp	$LN16@matchAndRe
$LN6@matchAndRe:
; Line 437
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+100]
	and	ecx, 2
	je	SHORT $LN3@matchAndRe
; Line 438
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _oText$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN2@matchAndRe
; Line 439
	xor	eax, eax
	jmp	$LN16@matchAndRe
$LN2@matchAndRe:
; Line 441
	movsx	eax, BYTE PTR _incremental$[ebp]
	test	eax, eax
	je	SHORT $LN3@matchAndRe
; Line 442
	mov	eax, 1
	jmp	$LN16@matchAndRe
$LN3@matchAndRe:
; Line 452
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv202[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _newStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _keyLimit$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR tv202[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv202[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newLength$[ebp], eax
; Line 453
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _keyLimit$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _newLength$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _lenDelta$[ebp], edx
; Line 455
	mov	eax, DWORD PTR _oText$[ebp]
	add	eax, DWORD PTR _lenDelta$[ebp]
	mov	DWORD PTR _oText$[ebp], eax
; Line 456
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _lenDelta$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 457
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _lenDelta$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 459
	mov	eax, DWORD PTR _newStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _oText$[ebp]
	push	eax
	call	_uprv_min_56
	add	esp, 8
	push	eax
	call	_uprv_min_56
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _minOText$[ebp]
	push	ecx
	call	_uprv_max_56
	add	esp, 8
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 460
	mov	eax, 2
$LN16@matchAndRe:
; Line 461
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@matchAndRe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN21@matchAndRe:
	DD	2
	DD	$LN20@matchAndRe
$LN20@matchAndRe:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN18@matchAndRe
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN19@matchAndRe
$LN19@matchAndRe:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN18@matchAndRe:
	DB	111					; 0000006fH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
?matchAndReplace@TransliterationRule@icu_56@@QBE?AW4UMatchDegree@2@AAVReplaceable@2@AAUUTransPosition@@C@Z ENDP ; icu_56::TransliterationRule::matchAndReplace
_TEXT	ENDS
EXTRN	__imp_?char32At@Replaceable@icu_56@@QBEHH@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?posBefore@icu_56@@YAHABVReplaceable@1@H@Z
_TEXT	SEGMENT
tv73 = -196						; size = 4
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
?posBefore@icu_56@@YAHABVReplaceable@1@H@Z PROC		; icu_56::posBefore, COMDAT
; Line 317
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 320
	cmp	DWORD PTR _pos$[ebp], 0
	jle	SHORT $LN3@posBefore
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?char32At@Replaceable@icu_56@@QBEHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 65535				; 0000ffffH
	cmp	ecx, eax
	sbb	edx, edx
	neg	edx
	add	edx, 1
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, edx
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@posBefore
$LN3@posBefore:
	mov	ecx, DWORD PTR _pos$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv73[ebp], ecx
$LN4@posBefore:
	mov	eax, DWORD PTR tv73[ebp]
; Line 321
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?posBefore@icu_56@@YAHABVReplaceable@1@H@Z ENDP		; icu_56::posBefore
_TEXT	ENDS
EXTRN	__imp_?length@Replaceable@icu_56@@QBEHXZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?posAfter@icu_56@@YAHABVReplaceable@1@H@Z
_TEXT	SEGMENT
tv75 = -196						; size = 4
_str$ = 8						; size = 4
_pos$ = 12						; size = 4
?posAfter@icu_56@@YAHABVReplaceable@1@H@Z PROC		; icu_56::posAfter, COMDAT
; Line 323
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 326
	cmp	DWORD PTR _pos$[ebp], 0
	jl	SHORT $LN3@posAfter
	mov	esi, esp
	mov	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?length@Replaceable@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _pos$[ebp], eax
	jge	SHORT $LN3@posAfter
	mov	esi, esp
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?char32At@Replaceable@icu_56@@QBEHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 65535				; 0000ffffH
	cmp	ecx, eax
	sbb	edx, edx
	neg	edx
	add	edx, 1
	add	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN4@posAfter
$LN3@posAfter:
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR tv75[ebp], eax
$LN4@posAfter:
	mov	eax, DWORD PTR tv75[ebp]
; Line 327
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?posAfter@icu_56@@YAHABVReplaceable@1@H@Z ENDP		; icu_56::posAfter
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@ABV32@CC0@Z:PROC
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z:PROC
EXTRN	__imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@HCC0@Z:PROC
EXTRN	__imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@PBVUnicodeMatcher@2@C0@Z:PROC
EXTRN	__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$2
__ehfuncinfo$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
_TEXT	SEGMENT
tv209 = -468						; size = 4
tv158 = -468						; size = 4
tv139 = -468						; size = 4
tv88 = -468						; size = 4
tv214 = -464						; size = 4
tv193 = -464						; size = 4
tv159 = -464						; size = 4
tv140 = -464						; size = 4
tv89 = -464						; size = 4
tv74 = -461						; size = 1
$T44468 = -456						; size = 4
$T37604 = -444						; size = 64
_emitBraces$ = -177					; size = 1
_quoteBuf$ = -168					; size = 64
_str$ = -96						; size = 64
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rule$ = 8						; size = 4
_escapeUnprintable$ = 12				; size = 1
?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z PROC ; icu_56::TransliterationRule::toRule, COMDAT
; _this$ = ecx
; Line 468
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 456				; 000001c8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-468]
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 473
	mov	esi, esp
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _quoteBuf$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 478
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@toRule
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN7@toRule
	mov	BYTE PTR tv74[ebp], 0
	jmp	SHORT $LN8@toRule
$LN7@toRule:
	mov	BYTE PTR tv74[ebp], 1
$LN8@toRule:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _emitBraces$[ebp], dl
; Line 481
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+100]
	and	ecx, 1
	je	SHORT $LN4@toRule
; Line 482
	mov	esi, esp
	push	94					; 0000005eH
	mov	ecx, DWORD PTR _rule$[ebp]
	call	DWORD PTR __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@toRule:
; Line 486
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv89[ebp], ecx
	cmp	DWORD PTR tv89[ebp], 0
	je	SHORT $LN9@toRule
	mov	edx, DWORD PTR tv89[ebp]
	add	edx, 4
	mov	DWORD PTR tv88[ebp], edx
	jmp	SHORT $LN10@toRule
$LN9@toRule:
	mov	DWORD PTR tv88[ebp], 0
$LN10@toRule:
	mov	esi, esp
	lea	eax, DWORD PTR _quoteBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _escapeUnprintable$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv88[ebp]
	push	edx
	mov	eax, DWORD PTR _rule$[ebp]
	push	eax
	call	DWORD PTR __imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@PBVUnicodeMatcher@2@C0@Z
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 488
	movsx	eax, BYTE PTR _emitBraces$[ebp]
	test	eax, eax
	je	SHORT $LN3@toRule
; Line 489
	mov	esi, esp
	lea	eax, DWORD PTR _quoteBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _escapeUnprintable$[ebp]
	push	ecx
	push	1
	push	123					; 0000007bH
	mov	edx, DWORD PTR _rule$[ebp]
	push	edx
	call	DWORD PTR __imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@HCC0@Z
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@toRule:
; Line 492
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv140[ebp], ecx
	cmp	DWORD PTR tv140[ebp], 0
	je	SHORT $LN11@toRule
	mov	edx, DWORD PTR tv140[ebp]
	add	edx, 4
	mov	DWORD PTR tv139[ebp], edx
	jmp	SHORT $LN12@toRule
$LN11@toRule:
	mov	DWORD PTR tv139[ebp], 0
$LN12@toRule:
	mov	esi, esp
	lea	eax, DWORD PTR _quoteBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _escapeUnprintable$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv139[ebp]
	push	edx
	mov	eax, DWORD PTR _rule$[ebp]
	push	eax
	call	DWORD PTR __imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@PBVUnicodeMatcher@2@C0@Z
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 494
	movsx	eax, BYTE PTR _emitBraces$[ebp]
	test	eax, eax
	je	SHORT $LN2@toRule
; Line 495
	mov	esi, esp
	lea	eax, DWORD PTR _quoteBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _escapeUnprintable$[ebp]
	push	ecx
	push	1
	push	125					; 0000007dH
	mov	edx, DWORD PTR _rule$[ebp]
	push	edx
	call	DWORD PTR __imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@HCC0@Z
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@toRule:
; Line 498
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv159[ebp], ecx
	cmp	DWORD PTR tv159[ebp], 0
	je	SHORT $LN13@toRule
	mov	edx, DWORD PTR tv159[ebp]
	add	edx, 4
	mov	DWORD PTR tv158[ebp], edx
	jmp	SHORT $LN14@toRule
$LN13@toRule:
	mov	DWORD PTR tv158[ebp], 0
$LN14@toRule:
	mov	esi, esp
	lea	eax, DWORD PTR _quoteBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _escapeUnprintable$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv158[ebp]
	push	edx
	mov	eax, DWORD PTR _rule$[ebp]
	push	eax
	call	DWORD PTR __imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@PBVUnicodeMatcher@2@C0@Z
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 501
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+100]
	and	ecx, 2
	je	SHORT $LN1@toRule
; Line 502
	mov	esi, esp
	push	36					; 00000024H
	mov	ecx, DWORD PTR _rule$[ebp]
	call	DWORD PTR __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@toRule:
; Line 505
	mov	esi, esp
	lea	eax, DWORD PTR _quoteBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _escapeUnprintable$[ebp]
	push	ecx
	push	1
	mov	edi, esp
	push	3
	push	OFFSET _FORWARD_OP
	push	1
	lea	ecx, DWORD PTR $T37604[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv214[ebp], eax
	mov	edx, DWORD PTR tv214[ebp]
	mov	DWORD PTR tv209[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv209[ebp]
	push	eax
	mov	ecx, DWORD PTR _rule$[ebp]
	push	ecx
	call	DWORD PTR __imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@ABV32@CC0@Z
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	esi, esp
	lea	ecx, DWORD PTR $T37604[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 510
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv193[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _quoteBuf$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _escapeUnprintable$[ebp]
	push	edx
	push	1
	mov	edi, esp
	movzx	eax, BYTE PTR _escapeUnprintable$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv193[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv193[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _rule$[ebp]
	push	eax
	call	DWORD PTR __imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@ABV32@CC0@Z
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 512
	mov	esi, esp
	lea	eax, DWORD PTR _quoteBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _escapeUnprintable$[ebp]
	push	ecx
	push	1
	push	59					; 0000003bH
	mov	edx, DWORD PTR _rule$[ebp]
	push	edx
	call	DWORD PTR __imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@HCC0@Z
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 514
	mov	eax, DWORD PTR _rule$[ebp]
	mov	DWORD PTR $T44468[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _quoteBuf$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR $T44468[ebp]
; Line 515
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@toRule
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 468				; 000001d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN22@toRule:
	DD	2
	DD	$LN21@toRule
$LN21@toRule:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN18@toRule
	DD	-168					; ffffff58H
	DD	64					; 00000040H
	DD	$LN19@toRule
$LN19@toRule:
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN18@toRule:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$1:
	mov	esi, esp
	lea	ecx, DWORD PTR _quoteBuf$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$2:
	mov	esi, esp
	lea	ecx, DWORD PTR $T37604[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-472]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z ENDP ; icu_56::TransliterationRule::toRule
PUBLIC	?setData@TransliterationRule@icu_56@@QAEXPBVTransliterationRuleData@2@@Z ; icu_56::TransliterationRule::setData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setData@TransliterationRule@icu_56@@QAEXPBVTransliterationRuleData@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_d$ = 8							; size = 4
?setData@TransliterationRule@icu_56@@QAEXPBVTransliterationRuleData@2@@Z PROC ; icu_56::TransliterationRule::setData, COMDAT
; _this$ = ecx
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR [eax+104], ecx
; Line 519
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@setData
	mov	esi, esp
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@setData:
; Line 520
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@setData
	mov	esi, esp
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@setData:
; Line 521
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@setData
	mov	esi, esp
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@setData:
; Line 523
	mov	esi, esp
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 525
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setData@TransliterationRule@icu_56@@QAEXPBVTransliterationRuleData@2@@Z ENDP ; icu_56::TransliterationRule::setData
_TEXT	ENDS
PUBLIC	?addSourceSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z ; icu_56::TransliterationRule::addSourceSetTo
EXTRN	__imp_?add@UnicodeSet@icu_56@@QAEAAV12@H@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?addSourceSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z
_TEXT	SEGMENT
_matcher$37625 = -56					; size = 4
_ch$37623 = -44						; size = 4
_i$37619 = -32						; size = 4
_limit$ = -20						; size = 4
_this$ = -8						; size = 4
_toUnionTo$ = 8						; size = 4
?addSourceSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z PROC ; icu_56::TransliterationRule::addSourceSetTo, COMDAT
; _this$ = ecx
; Line 531
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 532
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+96]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 533
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _i$37619[ebp], ecx
$LN4@addSourceS:
	mov	eax, DWORD PTR _i$37619[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	$LN5@addSourceS
; Line 534
	mov	esi, esp
	mov	eax, DWORD PTR _i$37619[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	DWORD PTR __imp_?char32At@UnicodeString@icu_56@@QBEHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ch$37623[ebp], eax
; Line 535
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _ch$37623[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	add	ecx, DWORD PTR _i$37619[ebp]
	mov	DWORD PTR _i$37619[ebp], ecx
; Line 536
	mov	eax, DWORD PTR _ch$37623[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+104]
	call	?lookupMatcher@TransliterationRuleData@icu_56@@QBEPAVUnicodeMatcher@2@H@Z ; icu_56::TransliterationRuleData::lookupMatcher
	mov	DWORD PTR _matcher$37625[ebp], eax
; Line 537
	cmp	DWORD PTR _matcher$37625[ebp], 0
	jne	SHORT $LN2@addSourceS
; Line 538
	mov	esi, esp
	mov	eax, DWORD PTR _ch$37623[ebp]
	push	eax
	mov	ecx, DWORD PTR _toUnionTo$[ebp]
	call	DWORD PTR __imp_?add@UnicodeSet@icu_56@@QAEAAV12@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 539
	jmp	SHORT $LN1@addSourceS
$LN2@addSourceS:
; Line 540
	mov	esi, esp
	mov	eax, DWORD PTR _toUnionTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _matcher$37625[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _matcher$37625[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@addSourceS:
; Line 542
	jmp	$LN4@addSourceS
$LN5@addSourceS:
; Line 543
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?addSourceSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z ENDP ; icu_56::TransliterationRule::addSourceSetTo
_TEXT	ENDS
PUBLIC	?addTargetSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z ; icu_56::TransliterationRule::addTargetSetTo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?addTargetSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z
_TEXT	SEGMENT
tv73 = -208						; size = 4
_this$ = -8						; size = 4
_toUnionTo$ = 8						; size = 4
?addTargetSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z PROC ; icu_56::TransliterationRule::addTargetSetTo, COMDAT
; _this$ = ecx
; Line 549
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 550
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv73[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _toUnionTo$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv73[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 551
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?addTargetSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z ENDP ; icu_56::TransliterationRule::addTargetSetTo
_TEXT	ENDS
END
