; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\i18n\rematch.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
_BSS	SEGMENT
?emptyString@?EK@??split@RegexMatcher@icu_56@@UAEHPAUUText@@QAPAU4@HAAW4UErrorCode@@@Z@4PA_WA DW 01H DUP (?) ; `icu_56::RegexMatcher::split'::`74'::emptyString
	ALIGN	4

?classID@?1??getStaticClassID@RegexMatcher@icu_56@@SAPAXXZ@4DA DB 01H DUP (?) ; `icu_56::RegexMatcher::getStaticClassID'::`2'::classID
_BSS	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\include\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??9RegexPattern@icu_56@@QBECABV01@@Z		; icu_56::RegexPattern::operator!=
EXTRN	??8RegexPattern@icu_56@@QBECABV01@@Z:PROC	; icu_56::RegexPattern::operator==
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9RegexPattern@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_that$ = 8						; size = 4
??9RegexPattern@icu_56@@QBECABV01@@Z PROC		; icu_56::RegexPattern::operator!=, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\regex.h
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8RegexPattern@icu_56@@QBECABV01@@Z	; icu_56::RegexPattern::operator==
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9RegexPattern@icu_56@@QBECABV01@@Z ENDP		; icu_56::RegexPattern::operator!=
_TEXT	ENDS
PUBLIC	??1RegexMatcher@icu_56@@UAE@XZ			; icu_56::RegexMatcher::~RegexMatcher
PUBLIC	??_GRegexMatcher@icu_56@@UAEPAXI@Z		; icu_56::RegexMatcher::`scalar deleting destructor'
EXTRN	__imp_??3UMemory@icu_56@@SAXPAX@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GRegexMatcher@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GRegexMatcher@icu_56@@UAEPAXI@Z PROC			; icu_56::RegexMatcher::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RegexMatcher@icu_56@@UAE@XZ		; icu_56::RegexMatcher::~RegexMatcher
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRegexMatcher@icu_56@@UAEPAXI@Z ENDP			; icu_56::RegexMatcher::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_ERegexMatcher@icu_56@@UAEPAXI@Z		; icu_56::RegexMatcher::`vector deleting destructor'
EXTRN	__imp_??_VUMemory@icu_56@@SAXPAX@Z:PROC
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_ERegexMatcher@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ERegexMatcher@icu_56@@UAEPAXI@Z PROC			; icu_56::RegexMatcher::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1RegexMatcher@icu_56@@UAE@XZ	; icu_56::RegexMatcher::~RegexMatcher
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	272					; 00000110H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp_??_VUMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RegexMatcher@icu_56@@UAE@XZ		; icu_56::RegexMatcher::~RegexMatcher
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ERegexMatcher@icu_56@@UAEPAXI@Z ENDP			; icu_56::RegexMatcher::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init2
PUBLIC	?init@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init
PUBLIC	??_7RegexMatcher@icu_56@@6B@			; icu_56::RegexMatcher::`vftable'
PUBLIC	??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z ; icu_56::RegexMatcher::RegexMatcher
PUBLIC	??_R4RegexMatcher@icu_56@@6B@			; icu_56::RegexMatcher::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRegexMatcher@icu_56@@@8			; icu_56::RegexMatcher `RTTI Type Descriptor'
PUBLIC	??_R3RegexMatcher@icu_56@@8			; icu_56::RegexMatcher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RegexMatcher@icu_56@@8			; icu_56::RegexMatcher::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RegexMatcher@icu_56@@8		; icu_56::RegexMatcher::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@UObject@icu_56@@8			; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVUObject@icu_56@@@8			; icu_56::UObject `RTTI Type Descriptor'
PUBLIC	??_R3UObject@icu_56@@8				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UObject@icu_56@@8				; icu_56::UObject::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVUMemory@icu_56@@@8			; icu_56::UMemory `RTTI Type Descriptor'
PUBLIC	??_R3UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?getDynamicClassID@RegexMatcher@icu_56@@UBEPAXXZ ; icu_56::RegexMatcher::getDynamicClassID
PUBLIC	?matches@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::matches
PUBLIC	?matches@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::matches
PUBLIC	?lookingAt@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::lookingAt
PUBLIC	?lookingAt@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::lookingAt
PUBLIC	?find@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::find
PUBLIC	?find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::find
PUBLIC	?find@RegexMatcher@icu_56@@UAECXZ		; icu_56::RegexMatcher::find
PUBLIC	?group@RegexMatcher@icu_56@@UBEPAUUText@@HPAU3@AA_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::group
PUBLIC	?group@RegexMatcher@icu_56@@UBEPAUUText@@PAU3@AA_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::group
PUBLIC	?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::group
PUBLIC	?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::group
PUBLIC	?groupCount@RegexMatcher@icu_56@@UBEHXZ		; icu_56::RegexMatcher::groupCount
PUBLIC	?start@RegexMatcher@icu_56@@UBEHHAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::start
PUBLIC	?start@RegexMatcher@icu_56@@UBEHAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::start
PUBLIC	?start64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::start64
PUBLIC	?start64@RegexMatcher@icu_56@@UBE_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::start64
PUBLIC	?end@RegexMatcher@icu_56@@UBEHHAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::end
PUBLIC	?end@RegexMatcher@icu_56@@UBEHAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::end
PUBLIC	?end64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::end64
PUBLIC	?end64@RegexMatcher@icu_56@@UBE_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::end64
PUBLIC	?reset@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@@Z ; icu_56::RegexMatcher::reset
PUBLIC	?reset@RegexMatcher@icu_56@@UAEAAV12@ABVUnicodeString@2@@Z ; icu_56::RegexMatcher::reset
PUBLIC	?reset@RegexMatcher@icu_56@@UAEAAV12@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::reset
PUBLIC	?reset@RegexMatcher@icu_56@@UAEAAV12@XZ		; icu_56::RegexMatcher::reset
PUBLIC	?refreshInputText@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::refreshInputText
PUBLIC	?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ ; icu_56::RegexMatcher::input
PUBLIC	?inputText@RegexMatcher@icu_56@@UBEPAUUText@@XZ	; icu_56::RegexMatcher::inputText
PUBLIC	?getInput@RegexMatcher@icu_56@@UBEPAUUText@@PAU3@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::getInput
PUBLIC	?region@RegexMatcher@icu_56@@UAEAAV12@_J00AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::region
PUBLIC	?region@RegexMatcher@icu_56@@UAEAAV12@_J0AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::region
PUBLIC	?regionStart@RegexMatcher@icu_56@@UBEHXZ	; icu_56::RegexMatcher::regionStart
PUBLIC	?regionStart64@RegexMatcher@icu_56@@UBE_JXZ	; icu_56::RegexMatcher::regionStart64
PUBLIC	?regionEnd@RegexMatcher@icu_56@@UBEHXZ		; icu_56::RegexMatcher::regionEnd
PUBLIC	?regionEnd64@RegexMatcher@icu_56@@UBE_JXZ	; icu_56::RegexMatcher::regionEnd64
PUBLIC	?hasTransparentBounds@RegexMatcher@icu_56@@UBECXZ ; icu_56::RegexMatcher::hasTransparentBounds
PUBLIC	?useTransparentBounds@RegexMatcher@icu_56@@UAEAAV12@C@Z ; icu_56::RegexMatcher::useTransparentBounds
PUBLIC	?hasAnchoringBounds@RegexMatcher@icu_56@@UBECXZ	; icu_56::RegexMatcher::hasAnchoringBounds
PUBLIC	?useAnchoringBounds@RegexMatcher@icu_56@@UAEAAV12@C@Z ; icu_56::RegexMatcher::useAnchoringBounds
PUBLIC	?hitEnd@RegexMatcher@icu_56@@UBECXZ		; icu_56::RegexMatcher::hitEnd
PUBLIC	?requireEnd@RegexMatcher@icu_56@@UBECXZ		; icu_56::RegexMatcher::requireEnd
PUBLIC	?pattern@RegexMatcher@icu_56@@UBEABVRegexPattern@2@XZ ; icu_56::RegexMatcher::pattern
PUBLIC	?replaceAll@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@0AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::replaceAll
PUBLIC	?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::replaceAll
PUBLIC	?replaceFirst@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@0AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::replaceFirst
PUBLIC	?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::replaceFirst
PUBLIC	?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::appendReplacement
PUBLIC	?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@AAVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::appendReplacement
PUBLIC	?appendTail@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::appendTail
PUBLIC	?appendTail@RegexMatcher@icu_56@@UAEAAVUnicodeString@2@AAV32@@Z ; icu_56::RegexMatcher::appendTail
PUBLIC	?split@RegexMatcher@icu_56@@UAEHPAUUText@@QAPAU3@HAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::split
PUBLIC	?split@RegexMatcher@icu_56@@UAEHABVUnicodeString@2@QAV32@HAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::split
PUBLIC	?setTimeLimit@RegexMatcher@icu_56@@UAEXHAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::setTimeLimit
PUBLIC	?getTimeLimit@RegexMatcher@icu_56@@UBEHXZ	; icu_56::RegexMatcher::getTimeLimit
PUBLIC	?setStackLimit@RegexMatcher@icu_56@@UAEXHAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::setStackLimit
PUBLIC	?getStackLimit@RegexMatcher@icu_56@@UBEHXZ	; icu_56::RegexMatcher::getStackLimit
PUBLIC	?setMatchCallback@RegexMatcher@icu_56@@UAEXP6ACPBXH@Z0AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::setMatchCallback
PUBLIC	?getMatchCallback@RegexMatcher@icu_56@@UAEXAAP6ACPBXH@ZAAPBXAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::getMatchCallback
PUBLIC	?setFindProgressCallback@RegexMatcher@icu_56@@UAEXP6ACPBX_J@Z0AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::setFindProgressCallback
PUBLIC	?getFindProgressCallback@RegexMatcher@icu_56@@UAEXAAP6ACPBX_J@ZAAPBXAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::getFindProgressCallback
EXTRN	__imp_??1UObject@icu_56@@UAE@XZ:PROC
EXTRN	?gStaticSets@RegexStaticSets@icu_56@@2PAV12@A:DWORD ; icu_56::RegexStaticSets::gStaticSets
EXTRN	__imp_??0UObject@icu_56@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@UMemory@icu_56@@8
; File d:\mozilla\intl\icu\source\i18n\rematch.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UMemory@icu_56@@8
rdata$r	SEGMENT
??_R2UMemory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UMemory@icu_56@@8
rdata$r	SEGMENT
??_R3UMemory@icu_56@@8 DD 00H				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUMemory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUMemory@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUMemory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R13?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UObject@icu_56@@8
rdata$r	SEGMENT
??_R2UObject@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UObject@icu_56@@8
rdata$r	SEGMENT
??_R3UObject@icu_56@@8 DD 00H				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUObject@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUObject@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUObject@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@UObject@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UObject@icu_56@@8 DD FLAT:??_R0?AVUObject@icu_56@@@8 ; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RegexMatcher@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RegexMatcher@icu_56@@8 DD FLAT:??_R0?AVRegexMatcher@icu_56@@@8 ; icu_56::RegexMatcher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RegexMatcher@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2RegexMatcher@icu_56@@8
rdata$r	SEGMENT
??_R2RegexMatcher@icu_56@@8 DD FLAT:??_R1A@?0A@EA@RegexMatcher@icu_56@@8 ; icu_56::RegexMatcher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3RegexMatcher@icu_56@@8
rdata$r	SEGMENT
??_R3RegexMatcher@icu_56@@8 DD 00H			; icu_56::RegexMatcher::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2RegexMatcher@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRegexMatcher@icu_56@@@8
_DATA	SEGMENT
??_R0?AVRegexMatcher@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::RegexMatcher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRegexMatcher@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RegexMatcher@icu_56@@6B@
rdata$r	SEGMENT
??_R4RegexMatcher@icu_56@@6B@ DD 00H			; icu_56::RegexMatcher::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRegexMatcher@icu_56@@@8
	DD	FLAT:??_R3RegexMatcher@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7RegexMatcher@icu_56@@6B@
CONST	SEGMENT
??_7RegexMatcher@icu_56@@6B@ DD FLAT:??_R4RegexMatcher@icu_56@@6B@ ; icu_56::RegexMatcher::`vftable'
	DD	FLAT:??_ERegexMatcher@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@RegexMatcher@icu_56@@UBEPAXXZ
	DD	FLAT:?matches@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z
	DD	FLAT:?matches@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z
	DD	FLAT:?lookingAt@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z
	DD	FLAT:?lookingAt@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z
	DD	FLAT:?find@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z
	DD	FLAT:?find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z
	DD	FLAT:?find@RegexMatcher@icu_56@@UAECXZ
	DD	FLAT:?group@RegexMatcher@icu_56@@UBEPAUUText@@HPAU3@AA_JAAW4UErrorCode@@@Z
	DD	FLAT:?group@RegexMatcher@icu_56@@UBEPAUUText@@PAU3@AA_JAAW4UErrorCode@@@Z
	DD	FLAT:?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z
	DD	FLAT:?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@AAW4UErrorCode@@@Z
	DD	FLAT:?groupCount@RegexMatcher@icu_56@@UBEHXZ
	DD	FLAT:?start@RegexMatcher@icu_56@@UBEHHAAW4UErrorCode@@@Z
	DD	FLAT:?start@RegexMatcher@icu_56@@UBEHAAW4UErrorCode@@@Z
	DD	FLAT:?start64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z
	DD	FLAT:?start64@RegexMatcher@icu_56@@UBE_JAAW4UErrorCode@@@Z
	DD	FLAT:?end@RegexMatcher@icu_56@@UBEHHAAW4UErrorCode@@@Z
	DD	FLAT:?end@RegexMatcher@icu_56@@UBEHAAW4UErrorCode@@@Z
	DD	FLAT:?end64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z
	DD	FLAT:?end64@RegexMatcher@icu_56@@UBE_JAAW4UErrorCode@@@Z
	DD	FLAT:?reset@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@@Z
	DD	FLAT:?reset@RegexMatcher@icu_56@@UAEAAV12@ABVUnicodeString@2@@Z
	DD	FLAT:?reset@RegexMatcher@icu_56@@UAEAAV12@_JAAW4UErrorCode@@@Z
	DD	FLAT:?reset@RegexMatcher@icu_56@@UAEAAV12@XZ
	DD	FLAT:?refreshInputText@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@AAW4UErrorCode@@@Z
	DD	FLAT:?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ
	DD	FLAT:?inputText@RegexMatcher@icu_56@@UBEPAUUText@@XZ
	DD	FLAT:?getInput@RegexMatcher@icu_56@@UBEPAUUText@@PAU3@AAW4UErrorCode@@@Z
	DD	FLAT:?region@RegexMatcher@icu_56@@UAEAAV12@_J00AAW4UErrorCode@@@Z
	DD	FLAT:?region@RegexMatcher@icu_56@@UAEAAV12@_J0AAW4UErrorCode@@@Z
	DD	FLAT:?regionStart@RegexMatcher@icu_56@@UBEHXZ
	DD	FLAT:?regionStart64@RegexMatcher@icu_56@@UBE_JXZ
	DD	FLAT:?regionEnd@RegexMatcher@icu_56@@UBEHXZ
	DD	FLAT:?regionEnd64@RegexMatcher@icu_56@@UBE_JXZ
	DD	FLAT:?hasTransparentBounds@RegexMatcher@icu_56@@UBECXZ
	DD	FLAT:?useTransparentBounds@RegexMatcher@icu_56@@UAEAAV12@C@Z
	DD	FLAT:?hasAnchoringBounds@RegexMatcher@icu_56@@UBECXZ
	DD	FLAT:?useAnchoringBounds@RegexMatcher@icu_56@@UAEAAV12@C@Z
	DD	FLAT:?hitEnd@RegexMatcher@icu_56@@UBECXZ
	DD	FLAT:?requireEnd@RegexMatcher@icu_56@@UBECXZ
	DD	FLAT:?pattern@RegexMatcher@icu_56@@UBEABVRegexPattern@2@XZ
	DD	FLAT:?replaceAll@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@0AAW4UErrorCode@@@Z
	DD	FLAT:?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
	DD	FLAT:?replaceFirst@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@0AAW4UErrorCode@@@Z
	DD	FLAT:?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
	DD	FLAT:?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z
	DD	FLAT:?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@AAVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
	DD	FLAT:?appendTail@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@AAW4UErrorCode@@@Z
	DD	FLAT:?appendTail@RegexMatcher@icu_56@@UAEAAVUnicodeString@2@AAV32@@Z
	DD	FLAT:?split@RegexMatcher@icu_56@@UAEHPAUUText@@QAPAU3@HAAW4UErrorCode@@@Z
	DD	FLAT:?split@RegexMatcher@icu_56@@UAEHABVUnicodeString@2@QAV32@HAAW4UErrorCode@@@Z
	DD	FLAT:?setTimeLimit@RegexMatcher@icu_56@@UAEXHAAW4UErrorCode@@@Z
	DD	FLAT:?getTimeLimit@RegexMatcher@icu_56@@UBEHXZ
	DD	FLAT:?setStackLimit@RegexMatcher@icu_56@@UAEXHAAW4UErrorCode@@@Z
	DD	FLAT:?getStackLimit@RegexMatcher@icu_56@@UBEHXZ
	DD	FLAT:?setMatchCallback@RegexMatcher@icu_56@@UAEXP6ACPBXH@Z0AAW4UErrorCode@@@Z
	DD	FLAT:?getMatchCallback@RegexMatcher@icu_56@@UAEXAAP6ACPBXH@ZAAPBXAAW4UErrorCode@@@Z
	DD	FLAT:?setFindProgressCallback@RegexMatcher@icu_56@@UAEXP6ACPBX_J@Z0AAW4UErrorCode@@@Z
	DD	FLAT:?getFindProgressCallback@RegexMatcher@icu_56@@UAEXAAP6ACPBX_J@ZAAPBXAAW4UErrorCode@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z$0
__ehfuncinfo$??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pat$ = 8						; size = 4
??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z PROC	; icu_56::RegexMatcher::RegexMatcher, COMDAT
; _this$ = ecx
; Line 66
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RegexMatcher@icu_56@@6B@
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 0
; Line 68
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@RegexMatch
; Line 70
	jmp	SHORT $LN3@RegexMatch
$LN2@RegexMatch:
; Line 72
	cmp	DWORD PTR _pat$[ebp], 0
	jne	SHORT $LN1@RegexMatch
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 1
; Line 74
	jmp	SHORT $LN3@RegexMatch
$LN1@RegexMatch:
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 77
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	mov	ecx, DWORD PTR ?gStaticSets@RegexStaticSets@icu_56@@2PAV12@A ; icu_56::RegexStaticSets::gStaticSets
	mov	edx, DWORD PTR [ecx+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init2
$LN3@RegexMatch:
; Line 78
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UObject@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RegexMatcher@icu_56@@AAE@PBVRegexPattern@1@@Z ENDP	; icu_56::RegexMatcher::RegexMatcher
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\include\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::RegexMatcher
EXTRN	_utext_close_56:PROC
EXTRN	_utext_openConstUnicodeString_56:PROC
EXTRN	?compile@RegexPattern@icu_56@@SAPAV12@ABVUnicodeString@2@IAAUUParseError@@AAW4UErrorCode@@@Z:PROC ; icu_56::RegexPattern::compile
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT xdata$x
; File d:\mozilla\intl\icu\source\i18n\rematch.cpp
xdata$x	SEGMENT
__unwindtable$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z$0
__ehfuncinfo$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_inputText$ = -224					; size = 112
_pe$ = -104						; size = 72
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_regexp$ = 8						; size = 4
_input$ = 12						; size = 4
_flags$ = 16						; size = 4
_status$ = 20						; size = 4
??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::RegexMatcher, COMDAT
; _this$ = ecx
; Line 83
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RegexMatcher@icu_56@@6B@
; Line 84
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init
; Line 85
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@RegexMatch@2
; Line 86
	jmp	$LN2@RegexMatch@2
$LN1@RegexMatch@2:
; Line 89
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pe$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	push	eax
	call	?compile@RegexPattern@icu_56@@SAPAV12@ABVUnicodeString@2@IAAUUParseError@@AAW4UErrorCode@@@Z ; icu_56::RegexPattern::compile
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 90
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
; Line 92
	mov	DWORD PTR _inputText$[ebp], 878368812	; 345ad82cH
	mov	DWORD PTR _inputText$[ebp+4], 0
	mov	DWORD PTR _inputText$[ebp+8], 0
	mov	DWORD PTR _inputText$[ebp+12], 112	; 00000070H
	mov	DWORD PTR _inputText$[ebp+16], 0
	mov	DWORD PTR _inputText$[ebp+20], 0
	mov	DWORD PTR _inputText$[ebp+24], 0
	mov	DWORD PTR _inputText$[ebp+28], 0
	mov	DWORD PTR _inputText$[ebp+32], 0
	mov	DWORD PTR _inputText$[ebp+36], 0
	mov	DWORD PTR _inputText$[ebp+40], 0
	mov	DWORD PTR _inputText$[ebp+44], 0
	mov	DWORD PTR _inputText$[ebp+48], 0
	mov	DWORD PTR _inputText$[ebp+52], 0
	mov	DWORD PTR _inputText$[ebp+56], 0
	mov	DWORD PTR _inputText$[ebp+60], 0
	mov	DWORD PTR _inputText$[ebp+64], 0
	mov	DWORD PTR _inputText$[ebp+68], 0
	mov	DWORD PTR _inputText$[ebp+72], 0
	mov	DWORD PTR _inputText$[ebp+76], 0
	mov	DWORD PTR _inputText$[ebp+80], 0
	mov	DWORD PTR _inputText$[ebp+84], 0
	mov	DWORD PTR _inputText$[ebp+88], 0
	mov	DWORD PTR _inputText$[ebp+92], 0
	mov	DWORD PTR _inputText$[ebp+96], 0
	mov	DWORD PTR _inputText$[ebp+100], 0
	mov	DWORD PTR _inputText$[ebp+104], 0
	mov	DWORD PTR _inputText$[ebp+108], 0
; Line 93
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	lea	edx, DWORD PTR _inputText$[ebp]
	push	edx
	call	_utext_openConstUnicodeString_56
	add	esp, 12					; 0000000cH
; Line 94
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inputText$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init2
; Line 95
	lea	eax, DWORD PTR _inputText$[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
; Line 97
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+256], 1
$LN2@RegexMatch@2:
; Line 98
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@RegexMatch@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN9@RegexMatch@2:
	DD	2
	DD	$LN8@RegexMatch@2
$LN8@RegexMatch@2:
	DD	-104					; ffffff98H
	DD	72					; 00000048H
	DD	$LN5@RegexMatch@2
	DD	-224					; ffffff20H
	DD	112					; 00000070H
	DD	$LN6@RegexMatch@2
$LN6@RegexMatch@2:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN5@RegexMatch@2:
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UObject@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-424]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@0IAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::RegexMatcher
PUBLIC	__$ArrayPad$
PUBLIC	??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::RegexMatcher
EXTRN	?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAUUParseError@@AAW4UErrorCode@@@Z:PROC ; icu_56::RegexPattern::compile
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z$0
__ehfuncinfo$??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_pe$ = -104						; size = 72
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_regexp$ = 8						; size = 4
_input$ = 12						; size = 4
_flags$ = 16						; size = 4
_status$ = 20						; size = 4
??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::RegexMatcher, COMDAT
; _this$ = ecx
; Line 102
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RegexMatcher@icu_56@@6B@
; Line 103
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init
; Line 104
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@RegexMatch@3
; Line 105
	jmp	SHORT $LN3@RegexMatch@3
$LN2@RegexMatch@3:
; Line 108
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pe$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	push	eax
	call	?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAUUParseError@@AAW4UErrorCode@@@Z ; icu_56::RegexPattern::compile
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 109
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@RegexMatch@3
; Line 110
	jmp	SHORT $LN3@RegexMatch@3
$LN1@RegexMatch@3:
; Line 113
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
; Line 114
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init2
$LN3@RegexMatch@3:
; Line 115
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@RegexMatch@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN9@RegexMatch@3:
	DD	1
	DD	$LN8@RegexMatch@3
$LN8@RegexMatch@3:
	DD	-104					; ffffff98H
	DD	72					; 00000048H
	DD	$LN6@RegexMatch@3
$LN6@RegexMatch@3:
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UObject@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RegexMatcher@icu_56@@QAE@PAUUText@@0IAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::RegexMatcher
PUBLIC	__$ArrayPad$
PUBLIC	??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::RegexMatcher
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z$0
__ehfuncinfo$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_pe$ = -104						; size = 72
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_regexp$ = 8						; size = 4
_flags$ = 12						; size = 4
_status$ = 16						; size = 4
??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::RegexMatcher, COMDAT
; _this$ = ecx
; Line 119
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RegexMatcher@icu_56@@6B@
; Line 120
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init
; Line 121
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@RegexMatch@4
; Line 122
	jmp	SHORT $LN3@RegexMatch@4
$LN2@RegexMatch@4:
; Line 125
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pe$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	push	eax
	call	?compile@RegexPattern@icu_56@@SAPAV12@ABVUnicodeString@2@IAAUUParseError@@AAW4UErrorCode@@@Z ; icu_56::RegexPattern::compile
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 126
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@RegexMatch@4
; Line 127
	jmp	SHORT $LN3@RegexMatch@4
$LN1@RegexMatch@4:
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
; Line 130
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gStaticSets@RegexStaticSets@icu_56@@2PAV12@A ; icu_56::RegexStaticSets::gStaticSets
	mov	edx, DWORD PTR [ecx+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init2
$LN3@RegexMatch@4:
; Line 131
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@RegexMatch@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN9@RegexMatch@4:
	DD	1
	DD	$LN8@RegexMatch@4
$LN8@RegexMatch@4:
	DD	-104					; ffffff98H
	DD	72					; 00000048H
	DD	$LN6@RegexMatch@4
$LN6@RegexMatch@4:
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UObject@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RegexMatcher@icu_56@@QAE@ABVUnicodeString@1@IAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::RegexMatcher
PUBLIC	__$ArrayPad$
PUBLIC	??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::RegexMatcher
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z$0
__ehfuncinfo$??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_pe$ = -104						; size = 72
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_regexp$ = 8						; size = 4
_flags$ = 12						; size = 4
_status$ = 16						; size = 4
??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::RegexMatcher, COMDAT
; _this$ = ecx
; Line 134
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RegexMatcher@icu_56@@6B@
; Line 135
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init
; Line 136
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@RegexMatch@5
; Line 137
	jmp	SHORT $LN3@RegexMatch@5
$LN2@RegexMatch@5:
; Line 140
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pe$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	push	eax
	call	?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAUUParseError@@AAW4UErrorCode@@@Z ; icu_56::RegexPattern::compile
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 141
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@RegexMatch@5
; Line 142
	jmp	SHORT $LN3@RegexMatch@5
$LN1@RegexMatch@5:
; Line 145
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
; Line 146
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gStaticSets@RegexStaticSets@icu_56@@2PAV12@A ; icu_56::RegexStaticSets::gStaticSets
	mov	edx, DWORD PTR [ecx+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::init2
$LN3@RegexMatch@5:
; Line 147
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@RegexMatch@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN9@RegexMatch@5:
	DD	1
	DD	$LN8@RegexMatch@5
$LN8@RegexMatch@5:
	DD	-104					; ffffff98H
	DD	72					; 00000048H
	DD	$LN6@RegexMatch@5
$LN6@RegexMatch@5:
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UObject@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RegexMatcher@icu_56@@QAE@PAUUText@@IAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::RegexMatcher
EXTRN	_uprv_free_56:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1RegexMatcher@icu_56@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RegexMatcher@icu_56@@UAE@XZ$0
__ehfuncinfo$??1RegexMatcher@icu_56@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1RegexMatcher@icu_56@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1RegexMatcher@icu_56@@UAE@XZ
_TEXT	SEGMENT
tv173 = -316						; size = 4
tv153 = -316						; size = 4
tv137 = -316						; size = 4
tv85 = -316						; size = 4
$T49902 = -308						; size = 4
$T49903 = -296						; size = 4
$T49906 = -284						; size = 4
$T49907 = -272						; size = 4
$T49910 = -260						; size = 4
$T49911 = -248						; size = 4
$T49914 = -236						; size = 4
$T49915 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1RegexMatcher@icu_56@@UAE@XZ PROC			; icu_56::RegexMatcher::~RegexMatcher, COMDAT
; _this$ = ecx
; Line 152
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1RegexMatcher@icu_56@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RegexMatcher@icu_56@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 153
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR $T49903[ebp], ecx
	mov	edx, DWORD PTR $T49903[ebp]
	mov	DWORD PTR $T49902[ebp], edx
	cmp	DWORD PTR $T49902[ebp], 0
	je	SHORT $LN8@RegexMatch@6
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T49902[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T49902[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN9@RegexMatch@6
$LN8@RegexMatch@6:
	mov	DWORD PTR tv85[ebp], 0
$LN9@RegexMatch@6:
; Line 154
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 160				; 000000a0H
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+156], eax
	je	SHORT $LN5@RegexMatch@6
; Line 155
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 156
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+156], 0
$LN5@RegexMatch@6:
; Line 158
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@RegexMatch@6
; Line 159
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T49907[ebp], ecx
	mov	edx, DWORD PTR $T49907[ebp]
	mov	DWORD PTR $T49906[ebp], edx
	cmp	DWORD PTR $T49906[ebp], 0
	je	SHORT $LN10@RegexMatch@6
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T49906[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T49906[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN11@RegexMatch@6
$LN10@RegexMatch@6:
	mov	DWORD PTR tv137[ebp], 0
$LN11@RegexMatch@6:
; Line 160
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 161
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN4@RegexMatch@6:
; Line 164
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@RegexMatch@6
; Line 165
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T49911[ebp], ecx
	mov	edx, DWORD PTR $T49911[ebp]
	mov	DWORD PTR $T49910[ebp], edx
	cmp	DWORD PTR $T49910[ebp], 0
	je	SHORT $LN12@RegexMatch@6
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T49910[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T49910[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN3@RegexMatch@6
$LN12@RegexMatch@6:
	mov	DWORD PTR tv153[ebp], 0
$LN3@RegexMatch@6:
; Line 167
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@RegexMatch@6
; Line 168
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_close_56
	add	esp, 4
$LN2@RegexMatch@6:
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN1@RegexMatch@6
; Line 171
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_utext_close_56
	add	esp, 4
$LN1@RegexMatch@6:
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	DWORD PTR $T49915[ebp], ecx
	mov	edx, DWORD PTR $T49915[ebp]
	mov	DWORD PTR $T49914[ebp], edx
	cmp	DWORD PTR $T49914[ebp], 0
	je	SHORT $LN14@RegexMatch@6
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T49914[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T49914[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv173[ebp], eax
	jmp	SHORT $LN6@RegexMatch@6
$LN14@RegexMatch@6:
	mov	DWORD PTR tv173[ebp], 0
$LN6@RegexMatch@6:
; Line 177
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UObject@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1RegexMatcher@icu_56@@UAE@XZ$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UObject@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1RegexMatcher@icu_56@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-320]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1RegexMatcher@icu_56@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1RegexMatcher@icu_56@@UAE@XZ ENDP			; icu_56::RegexMatcher::~RegexMatcher
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?init@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?init@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z PROC	; icu_56::RegexMatcher::init, COMDAT
; _this$ = ecx
; Line 186
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 187
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 188
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 189
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 190
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	DWORD PTR [eax+44], 0
; Line 191
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	DWORD PTR [eax+52], 0
; Line 192
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	DWORD PTR [eax+60], 0
; Line 193
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	DWORD PTR [eax+68], 0
; Line 194
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
	mov	DWORD PTR [eax+76], 0
; Line 195
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
	mov	DWORD PTR [eax+84], 0
; Line 196
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
	mov	DWORD PTR [eax+92], 0
; Line 197
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
	mov	DWORD PTR [eax+100], 0
; Line 198
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+104], 0
; Line 199
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+105], 1
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+112], 0
	mov	DWORD PTR [eax+116], 0
; Line 202
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+120], 0
	mov	DWORD PTR [eax+124], 0
; Line 203
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+128], -1
	mov	DWORD PTR [eax+132], -1
; Line 204
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0
	mov	DWORD PTR [eax+140], 0
; Line 205
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 0
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 0
; Line 207
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+148], 0
; Line 208
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 0
; Line 209
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+224], 0
; Line 210
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], 0
; Line 211
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+232], 0
; Line 212
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+236], 8000000		; 007a1200H
; Line 213
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 0
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+244], 0
; Line 215
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+248], 0
; Line 216
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+252], 0
; Line 217
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+257], 0
; Line 218
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+260], edx
; Line 219
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 160				; 000000a0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+156], eax
; Line 220
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], 0
; Line 222
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+148], 0
; Line 223
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 224
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 226
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 227
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+256], 0
; Line 228
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?init@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z ENDP	; icu_56::RegexMatcher::init
_TEXT	ENDS
PUBLIC	??_SUVector64@icu_56@@6B@			; icu_56::UVector64::`local vftable'
PUBLIC	??_R4UVector64@icu_56@@6B@			; icu_56::UVector64::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUVector64@icu_56@@@8			; icu_56::UVector64 `RTTI Type Descriptor'
PUBLIC	??_R3UVector64@icu_56@@8			; icu_56::UVector64::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UVector64@icu_56@@8			; icu_56::UVector64::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UVector64@icu_56@@8		; icu_56::UVector64::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z:PROC
EXTRN	__imp_??2UMemory@icu_56@@SAPAXI@Z:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	??_EUVector64@icu_56@@UAEPAXI@Z:PROC		; icu_56::UVector64::`vector deleting destructor'
EXTRN	?getDynamicClassID@UVector64@icu_56@@UBEPAXXZ:PROC ; icu_56::UVector64::getDynamicClassID
;	COMDAT ??_R1A@?0A@EA@UVector64@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UVector64@icu_56@@8 DD FLAT:??_R0?AVUVector64@icu_56@@@8 ; icu_56::UVector64::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UVector64@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UVector64@icu_56@@8
rdata$r	SEGMENT
??_R2UVector64@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UVector64@icu_56@@8 ; icu_56::UVector64::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UVector64@icu_56@@8
rdata$r	SEGMENT
??_R3UVector64@icu_56@@8 DD 00H				; icu_56::UVector64::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2UVector64@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUVector64@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUVector64@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UVector64 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUVector64@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UVector64@icu_56@@6B@
rdata$r	SEGMENT
??_R4UVector64@icu_56@@6B@ DD 00H			; icu_56::UVector64::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUVector64@icu_56@@@8
	DD	FLAT:??_R3UVector64@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_SUVector64@icu_56@@6B@
CONST	SEGMENT
??_SUVector64@icu_56@@6B@ DD FLAT:??_R4UVector64@icu_56@@6B@ ; icu_56::UVector64::`local vftable'
	DD	FLAT:??_EUVector64@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UVector64@icu_56@@UBEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z$0
__ehfuncinfo$?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv88 = -244						; size = 4
$T49929 = -236						; size = 4
$T49930 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_input$ = 8						; size = 4
_status$ = 12						; size = 4
?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::init2, COMDAT
; _this$ = ecx
; Line 234
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 235
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@init2
; Line 236
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+260], edx
; Line 237
	jmp	$LN6@init2
$LN5@init2:
; Line 240
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+104], 8
	jle	SHORT $LN4@init2
; Line 241
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+104]
	shl	edx, 3
	push	edx
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+156], eax
; Line 242
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+156], 0
	jne	SHORT $LN4@init2
; Line 243
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 7
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [ecx], 7
; Line 244
	jmp	$LN6@init2
$LN4@init2:
; Line 248
	mov	esi, esp
	push	20					; 00000014H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T49930[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T49930[ebp], 0
	je	SHORT $LN8@init2
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T49930[ebp]
	call	DWORD PTR __imp_??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T49930[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_SUVector64@icu_56@@6B@
	mov	edx, DWORD PTR $T49930[ebp]
	mov	DWORD PTR tv88[ebp], edx
	jmp	SHORT $LN9@init2
$LN8@init2:
	mov	DWORD PTR tv88[ebp], 0
$LN9@init2:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR $T49929[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T49929[ebp]
	mov	DWORD PTR [ecx+148], edx
; Line 249
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 0
	jne	SHORT $LN2@init2
; Line 250
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 7
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [ecx], 7
; Line 251
	jmp	SHORT $LN6@init2
$LN2@init2:
; Line 254
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 255
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	8000000					; 007a1200H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 256
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@init2
; Line 257
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+260], edx
$LN6@init2:
; Line 260
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z$0:
	mov	esi, esp
	mov	eax, DWORD PTR $T49930[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?init2@RegexMatcher@icu_56@@AAEXPAUUText@@AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::init2
EXTRN	__imp_??1UVector64@icu_56@@UAE@XZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUVector64@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUVector64@icu_56@@UAEPAXI@Z PROC			; icu_56::UVector64::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UVector64@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUVector64@icu_56@@UAEPAXI@Z ENDP			; icu_56::UVector64::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_utext_openUnicodeString_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@AAVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_resultText$40102 = -248				; size = 112
_replacementText$ = -128				; size = 112
_this$ = -8						; size = 4
_dest$ = 8						; size = 4
_replacement$ = 12					; size = 4
_status$ = 16						; size = 4
?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@AAVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::appendReplacement, COMDAT
; _this$ = ecx
; Line 275
	push	ebp
	mov	ebp, esp
	sub	esp, 444				; 000001bcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-444]
	mov	ecx, 111				; 0000006fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 276
	mov	DWORD PTR _replacementText$[ebp], 878368812 ; 345ad82cH
	mov	DWORD PTR _replacementText$[ebp+4], 0
	mov	DWORD PTR _replacementText$[ebp+8], 0
	mov	DWORD PTR _replacementText$[ebp+12], 112 ; 00000070H
	mov	DWORD PTR _replacementText$[ebp+16], 0
	mov	DWORD PTR _replacementText$[ebp+20], 0
	mov	DWORD PTR _replacementText$[ebp+24], 0
	mov	DWORD PTR _replacementText$[ebp+28], 0
	mov	DWORD PTR _replacementText$[ebp+32], 0
	mov	DWORD PTR _replacementText$[ebp+36], 0
	mov	DWORD PTR _replacementText$[ebp+40], 0
	mov	DWORD PTR _replacementText$[ebp+44], 0
	mov	DWORD PTR _replacementText$[ebp+48], 0
	mov	DWORD PTR _replacementText$[ebp+52], 0
	mov	DWORD PTR _replacementText$[ebp+56], 0
	mov	DWORD PTR _replacementText$[ebp+60], 0
	mov	DWORD PTR _replacementText$[ebp+64], 0
	mov	DWORD PTR _replacementText$[ebp+68], 0
	mov	DWORD PTR _replacementText$[ebp+72], 0
	mov	DWORD PTR _replacementText$[ebp+76], 0
	mov	DWORD PTR _replacementText$[ebp+80], 0
	mov	DWORD PTR _replacementText$[ebp+84], 0
	mov	DWORD PTR _replacementText$[ebp+88], 0
	mov	DWORD PTR _replacementText$[ebp+92], 0
	mov	DWORD PTR _replacementText$[ebp+96], 0
	mov	DWORD PTR _replacementText$[ebp+100], 0
	mov	DWORD PTR _replacementText$[ebp+104], 0
	mov	DWORD PTR _replacementText$[ebp+108], 0
; Line 278
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	lea	edx, DWORD PTR _replacementText$[ebp]
	push	edx
	call	_utext_openConstUnicodeString_56
	add	esp, 12					; 0000000cH
; Line 279
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN2@appendRepl
; Line 280
	mov	DWORD PTR _resultText$40102[ebp], 878368812 ; 345ad82cH
	mov	DWORD PTR _resultText$40102[ebp+4], 0
	mov	DWORD PTR _resultText$40102[ebp+8], 0
	mov	DWORD PTR _resultText$40102[ebp+12], 112 ; 00000070H
	mov	DWORD PTR _resultText$40102[ebp+16], 0
	mov	DWORD PTR _resultText$40102[ebp+20], 0
	mov	DWORD PTR _resultText$40102[ebp+24], 0
	mov	DWORD PTR _resultText$40102[ebp+28], 0
	mov	DWORD PTR _resultText$40102[ebp+32], 0
	mov	DWORD PTR _resultText$40102[ebp+36], 0
	mov	DWORD PTR _resultText$40102[ebp+40], 0
	mov	DWORD PTR _resultText$40102[ebp+44], 0
	mov	DWORD PTR _resultText$40102[ebp+48], 0
	mov	DWORD PTR _resultText$40102[ebp+52], 0
	mov	DWORD PTR _resultText$40102[ebp+56], 0
	mov	DWORD PTR _resultText$40102[ebp+60], 0
	mov	DWORD PTR _resultText$40102[ebp+64], 0
	mov	DWORD PTR _resultText$40102[ebp+68], 0
	mov	DWORD PTR _resultText$40102[ebp+72], 0
	mov	DWORD PTR _resultText$40102[ebp+76], 0
	mov	DWORD PTR _resultText$40102[ebp+80], 0
	mov	DWORD PTR _resultText$40102[ebp+84], 0
	mov	DWORD PTR _resultText$40102[ebp+88], 0
	mov	DWORD PTR _resultText$40102[ebp+92], 0
	mov	DWORD PTR _resultText$40102[ebp+96], 0
	mov	DWORD PTR _resultText$40102[ebp+100], 0
	mov	DWORD PTR _resultText$40102[ebp+104], 0
	mov	DWORD PTR _resultText$40102[ebp+108], 0
; Line 281
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _resultText$40102[ebp]
	push	edx
	call	_utext_openUnicodeString_56
	add	esp, 12					; 0000000cH
; Line 283
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@appendRepl
; Line 284
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _replacementText$[ebp]
	push	ecx
	lea	edx, DWORD PTR _resultText$40102[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 285
	lea	eax, DWORD PTR _resultText$40102[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
$LN1@appendRepl:
; Line 287
	lea	eax, DWORD PTR _replacementText$[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
$LN2@appendRepl:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
; Line 291
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@appendRepl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 444				; 000001bcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN8@appendRepl:
	DD	2
	DD	$LN7@appendRepl
$LN7@appendRepl:
	DD	-128					; ffffff80H
	DD	112					; 00000070H
	DD	$LN5@appendRepl
	DD	-248					; ffffff08H
	DD	112					; 00000070H
	DD	$LN6@appendRepl
$LN6@appendRepl:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN5@appendRepl:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@AAVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::appendReplacement
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_SUCCESS@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_SUCCESS@@YACW4UErrorCode@@@Z PROC			; U_SUCCESS, COMDAT
; File d:\mozilla\intl\icu\include\unicode\utypes.h
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setle	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_SUCCESS@@YACW4UErrorCode@@@Z ENDP			; U_SUCCESS
_TEXT	ENDS
PUBLIC	?appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::appendGroup
PUBLIC	__$ArrayPad$
EXTRN	_u_charDigitValue_56:PROC
EXTRN	__imp_?size@UVector32@icu_56@@QBEHXZ:PROC
EXTRN	_u_isdigit_56:PROC
EXTRN	__imp_??1UnicodeString@icu_56@@UAE@XZ:PROC
EXTRN	_uhash_geti_56:PROC
EXTRN	__imp_?append@UnicodeString@icu_56@@QAEAAV12@H@Z:PROC
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@XZ:PROC
EXTRN	_utext_moveIndex32_56:PROC
EXTRN	_utext_previous32_56:PROC
EXTRN	_u_unescapeAt_56:PROC
EXTRN	_uregex_utext_unescape_charAt_56:PROC
EXTRN	_utext_current32_56:PROC
EXTRN	_utext_next32_56:PROC
EXTRN	_utext_setNativeIndex_56:PROC
EXTRN	_utext_extract_56:PROC
EXTRN	_utext_replace_56:PROC
EXTRN	_utext_nativeLength_56:PROC
EXTRN	__allmul:PROC
;	COMDAT xdata$x
; File d:\mozilla\intl\icu\source\i18n\rematch.cpp
xdata$x	SEGMENT
__unwindtable$?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z$0
__ehfuncinfo$?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv639 = -556						; size = 8
tv784 = -552						; size = 8
tv622 = -552						; size = 4
tv605 = -552						; size = 4
tv321 = -552						; size = 4
tv638 = -548						; size = 4
tv621 = -548						; size = 4
tv615 = -548						; size = 4
tv604 = -548						; size = 4
tv526 = -548						; size = 4
tv495 = -548						; size = 4
tv347 = -548						; size = 4
tv315 = -548						; size = 4
tv262 = -548						; size = 4
tv239 = -548						; size = 4
tv219 = -548						; size = 4
_nextDigitVal$40208 = -348				; size = 4
_numCaptureGroups$40202 = -336				; size = 4
_groupName$40186 = -324					; size = 64
_nextChar$40184 = -252					; size = 4
_numDigits$40183 = -240					; size = 4
_groupNum$40182 = -228					; size = 4
_surrogate$40177 = -216					; size = 4
_c16$40174 = -204					; size = 2
_surrogate$40166 = -192					; size = 4
_c16$40163 = -180					; size = 2
_surrogate$40151 = -168					; size = 4
_c16$40148 = -156					; size = 2
_escapedChar$40143 = -144				; size = 4
_context$40142 = -132					; size = 8
_offset$40141 = -116					; size = 4
_c$40133 = -104						; size = 4
___offset$40128 = -92					; size = 8
_inputChars$40124 = -76					; size = 4
_lengthStatus$40123 = -64				; size = 4
_len16$40119 = -52					; size = 4
_destLen$ = -40						; size = 8
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dest$ = 8						; size = 4
_replacement$ = 12					; size = 4
_status$ = 16						; size = 4
?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::appendReplacement, COMDAT
; _this$ = ecx
; Line 298
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 299
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN58@appendRepl@2
; Line 300
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN59@appendRepl@2
$LN58@appendRepl@2:
; Line 302
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN57@appendRepl@2
; Line 303
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 304
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN59@appendRepl@2
$LN57@appendRepl@2:
; Line 306
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	jne	SHORT $LN56@appendRepl@2
; Line 307
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66306			; 00010302H
; Line 308
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN59@appendRepl@2
$LN56@appendRepl@2:
; Line 312
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	mov	DWORD PTR _destLen$[ebp], eax
	mov	DWORD PTR _destLen$[ebp+4], edx
; Line 313
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv604[ebp], eax
	mov	DWORD PTR tv605[ebp], ecx
	mov	edx, DWORD PTR tv604[ebp]
	mov	eax, DWORD PTR tv605[ebp]
	mov	ecx, DWORD PTR [edx+116]
	cmp	ecx, DWORD PTR [eax+140]
	jl	$LN55@appendRepl@2
	jg	SHORT $LN76@appendRepl@2
	mov	edx, DWORD PTR tv604[ebp]
	mov	eax, DWORD PTR tv605[ebp]
	mov	ecx, DWORD PTR [edx+112]
	cmp	ecx, DWORD PTR [eax+136]
	jbe	$LN55@appendRepl@2
$LN76@appendRepl@2:
; Line 314
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv615[ebp], ecx
	mov	edx, DWORD PTR tv615[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	$LN54@appendRepl@2
	mov	eax, DWORD PTR tv615[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	$LN54@appendRepl@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv621[ebp], edx
	mov	DWORD PTR tv622[ebp], ecx
	mov	eax, DWORD PTR tv621[ebp]
	mov	ecx, DWORD PTR tv622[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+16]
	jne	$LN54@appendRepl@2
	mov	eax, DWORD PTR tv621[ebp]
	mov	ecx, DWORD PTR tv622[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+20]
	jne	$LN54@appendRepl@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv638[ebp], ecx
	mov	DWORD PTR tv639[ebp], eax
	mov	DWORD PTR tv639[ebp+4], edx
	mov	edx, DWORD PTR tv638[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv639[ebp]
	jne	$LN54@appendRepl@2
	mov	ecx, DWORD PTR tv638[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv639[ebp+4]
	jne	SHORT $LN54@appendRepl@2
; Line 316
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+112]
	sub	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR [ecx+116]
	sbb	ecx, DWORD PTR [edx+140]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+16]
	mov	eax, DWORD PTR _this$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	push	edx
	call	__allmul
	add	eax, DWORD PTR [esi+48]
	push	eax
	mov	eax, DWORD PTR _destLen$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	add	eax, DWORD PTR _destLen$[ebp]
	adc	edx, DWORD PTR _destLen$[ebp+4]
	mov	DWORD PTR _destLen$[ebp], eax
	mov	DWORD PTR _destLen$[ebp+4], edx
; Line 317
	jmp	$LN55@appendRepl@2
$LN54@appendRepl@2:
; Line 319
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN52@appendRepl@2
; Line 320
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+112]
	sub	edx, DWORD PTR [ecx+136]
	mov	eax, DWORD PTR [eax+116]
	sbb	eax, DWORD PTR [ecx+140]
	mov	DWORD PTR _len16$40119[ebp], edx
; Line 321
	jmp	SHORT $LN51@appendRepl@2
$LN52@appendRepl@2:
; Line 322
	mov	DWORD PTR _lengthStatus$40123[ebp], 0
; Line 323
	lea	eax, DWORD PTR _lengthStatus$40123[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	mov	eax, DWORD PTR [ecx+112]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	mov	eax, DWORD PTR [ecx+136]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _len16$40119[ebp], eax
$LN51@appendRepl@2:
; Line 325
	mov	eax, DWORD PTR _len16$40119[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _inputChars$40124[ebp], eax
; Line 326
	cmp	DWORD PTR _inputChars$40124[ebp], 0
	jne	SHORT $LN50@appendRepl@2
; Line 327
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 328
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN59@appendRepl@2
$LN50@appendRepl@2:
; Line 330
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len16$40119[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _inputChars$40124[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR [eax+112]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
; Line 331
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len16$40119[ebp]
	push	ecx
	mov	edx, DWORD PTR _inputChars$40124[ebp]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	add	eax, DWORD PTR _destLen$[ebp]
	adc	edx, DWORD PTR _destLen$[ebp+4]
	mov	DWORD PTR _destLen$[ebp], eax
	mov	DWORD PTR _destLen$[ebp+4], edx
; Line 332
	mov	eax, DWORD PTR _inputChars$40124[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN55@appendRepl@2:
; Line 335
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+136], edx
	mov	ecx, DWORD PTR [ecx+124]
	mov	DWORD PTR [eax+140], ecx
; Line 341
	mov	eax, DWORD PTR _replacement$[ebp]
	xor	ecx, ecx
	sub	ecx, DWORD PTR [eax+32]
	mov	edx, 0
	sbb	edx, DWORD PTR [eax+36]
	mov	DWORD PTR ___offset$40128[ebp], ecx
	mov	DWORD PTR ___offset$40128[ebp+4], edx
	cmp	DWORD PTR ___offset$40128[ebp+4], 0
	jl	SHORT $LN49@appendRepl@2
	jg	SHORT $LN77@appendRepl@2
	cmp	DWORD PTR ___offset$40128[ebp], 0
	jb	SHORT $LN49@appendRepl@2
$LN77@appendRepl@2:
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [eax+28]
	cdq
	mov	DWORD PTR tv784[ebp], eax
	mov	DWORD PTR tv784[ebp+4], edx
	mov	ecx, DWORD PTR ___offset$40128[ebp+4]
	cmp	ecx, DWORD PTR tv784[ebp+4]
	jg	SHORT $LN49@appendRepl@2
	jl	SHORT $LN78@appendRepl@2
	mov	edx, DWORD PTR ___offset$40128[ebp]
	cmp	edx, DWORD PTR tv784[ebp]
	ja	SHORT $LN49@appendRepl@2
$LN78@appendRepl@2:
	mov	eax, DWORD PTR ___offset$40128[ebp]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN48@appendRepl@2
$LN49@appendRepl@2:
	push	0
	push	0
	mov	eax, DWORD PTR _replacement$[ebp]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN48@appendRepl@2:
; Line 342
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jge	SHORT $LN61@appendRepl@2
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	cmp	ecx, 55296				; 0000d800H
	jge	SHORT $LN61@appendRepl@2
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	DWORD PTR tv219[ebp], eax
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN62@appendRepl@2
$LN61@appendRepl@2:
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv219[ebp], eax
$LN62@appendRepl@2:
	mov	edx, DWORD PTR tv219[ebp]
	mov	DWORD PTR _c$40133[ebp], edx
	jmp	SHORT $LN47@appendRepl@2
$LN46@appendRepl@2:
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jge	SHORT $LN63@appendRepl@2
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	cmp	ecx, 55296				; 0000d800H
	jge	SHORT $LN63@appendRepl@2
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	DWORD PTR tv239[ebp], eax
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN64@appendRepl@2
$LN63@appendRepl@2:
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv239[ebp], eax
$LN64@appendRepl@2:
	mov	edx, DWORD PTR tv239[ebp]
	mov	DWORD PTR _c$40133[ebp], edx
$LN47@appendRepl@2:
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN45@appendRepl@2
	cmp	DWORD PTR _c$40133[ebp], -1
	je	$LN45@appendRepl@2
; Line 343
	cmp	DWORD PTR _c$40133[ebp], 92		; 0000005cH
	jne	$LN44@appendRepl@2
; Line 349
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jge	SHORT $LN65@appendRepl@2
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	cmp	ecx, 55296				; 0000d800H
	jge	SHORT $LN65@appendRepl@2
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	DWORD PTR tv262[ebp], eax
	jmp	SHORT $LN66@appendRepl@2
$LN65@appendRepl@2:
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	call	_utext_current32_56
	add	esp, 4
	mov	DWORD PTR tv262[ebp], eax
$LN66@appendRepl@2:
	mov	edx, DWORD PTR tv262[ebp]
	mov	DWORD PTR _c$40133[ebp], edx
; Line 350
	cmp	DWORD PTR _c$40133[ebp], -1
	jne	SHORT $LN43@appendRepl@2
; Line 351
	jmp	$LN45@appendRepl@2
$LN43@appendRepl@2:
; Line 354
	cmp	DWORD PTR _c$40133[ebp], 85		; 00000055H
	je	SHORT $LN41@appendRepl@2
	cmp	DWORD PTR _c$40133[ebp], 117		; 00000075H
	jne	$LN42@appendRepl@2
$LN41@appendRepl@2:
; Line 356
	mov	DWORD PTR _offset$40141[ebp], 0
; Line 357
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	DWORD PTR _context$40142[ebp], eax
	mov	DWORD PTR _context$40142[ebp+4], -1
; Line 358
	lea	eax, DWORD PTR _context$40142[ebp]
	push	eax
	push	2147483647				; 7fffffffH
	lea	ecx, DWORD PTR _offset$40141[ebp]
	push	ecx
	push	OFFSET _uregex_utext_unescape_charAt_56
	call	_u_unescapeAt_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _escapedChar$40143[ebp], eax
; Line 359
	cmp	DWORD PTR _escapedChar$40143[ebp], -1
	je	$LN40@appendRepl@2
; Line 360
	cmp	DWORD PTR _escapedChar$40143[ebp], 65535 ; 0000ffffH
	ja	SHORT $LN39@appendRepl@2
; Line 361
	mov	ax, WORD PTR _escapedChar$40143[ebp]
	mov	WORD PTR _c16$40148[ebp], ax
; Line 362
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _c16$40148[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	add	eax, DWORD PTR _destLen$[ebp]
	adc	edx, DWORD PTR _destLen$[ebp+4]
	mov	DWORD PTR _destLen$[ebp], eax
	mov	DWORD PTR _destLen$[ebp+4], edx
; Line 363
	jmp	SHORT $LN38@appendRepl@2
$LN39@appendRepl@2:
; Line 365
	mov	eax, DWORD PTR _escapedChar$40143[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	WORD PTR _surrogate$40151[ebp], ax
; Line 366
	mov	eax, DWORD PTR _escapedChar$40143[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	WORD PTR _surrogate$40151[ebp+2], ax
; Line 367
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN38@appendRepl@2
; Line 368
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	2
	lea	ecx, DWORD PTR _surrogate$40151[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	add	eax, DWORD PTR _destLen$[ebp]
	adc	edx, DWORD PTR _destLen$[ebp+4]
	mov	DWORD PTR _destLen$[ebp], eax
	mov	DWORD PTR _destLen$[ebp+4], edx
$LN38@appendRepl@2:
; Line 373
	mov	eax, DWORD PTR _context$40142[ebp+4]
	cmp	eax, DWORD PTR _offset$40141[ebp]
	jne	SHORT $LN36@appendRepl@2
; Line 374
	mov	eax, DWORD PTR _replacement$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jle	SHORT $LN67@appendRepl@2
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	movzx	edx, WORD PTR [ecx+edx*2-2]
	cmp	edx, 55296				; 0000d800H
	jge	SHORT $LN67@appendRepl@2
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, 1
	mov	DWORD PTR tv315[ebp], ecx
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR tv315[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR tv315[ebp]
	movzx	ecx, WORD PTR [edx+eax*2]
	mov	DWORD PTR tv321[ebp], ecx
	jmp	SHORT $LN68@appendRepl@2
$LN67@appendRepl@2:
	mov	edx, DWORD PTR _replacement$[ebp]
	push	edx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv321[ebp], eax
$LN68@appendRepl@2:
; Line 375
	jmp	SHORT $LN40@appendRepl@2
$LN36@appendRepl@2:
	mov	eax, DWORD PTR _offset$40141[ebp]
	sub	eax, 1
	cmp	DWORD PTR _context$40142[ebp+4], eax
	je	SHORT $LN40@appendRepl@2
; Line 376
	mov	eax, DWORD PTR _offset$40141[ebp]
	sub	eax, DWORD PTR _context$40142[ebp+4]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	call	_utext_moveIndex32_56
	add	esp, 8
$LN40@appendRepl@2:
; Line 379
	jmp	$LN33@appendRepl@2
$LN42@appendRepl@2:
; Line 380
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jge	SHORT $LN69@appendRepl@2
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	cmp	ecx, 55296				; 0000d800H
	jge	SHORT $LN69@appendRepl@2
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	DWORD PTR tv347[ebp], eax
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN70@appendRepl@2
$LN69@appendRepl@2:
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv347[ebp], eax
$LN70@appendRepl@2:
; Line 382
	cmp	DWORD PTR _c$40133[ebp], 65535		; 0000ffffH
	ja	SHORT $LN32@appendRepl@2
; Line 383
	mov	ax, WORD PTR _c$40133[ebp]
	mov	WORD PTR _c16$40163[ebp], ax
; Line 384
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _c16$40163[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	add	eax, DWORD PTR _destLen$[ebp]
	adc	edx, DWORD PTR _destLen$[ebp+4]
	mov	DWORD PTR _destLen$[ebp], eax
	mov	DWORD PTR _destLen$[ebp+4], edx
; Line 385
	jmp	SHORT $LN33@appendRepl@2
$LN32@appendRepl@2:
; Line 387
	mov	eax, DWORD PTR _c$40133[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	WORD PTR _surrogate$40166[ebp], ax
; Line 388
	mov	eax, DWORD PTR _c$40133[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	WORD PTR _surrogate$40166[ebp+2], ax
; Line 389
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN33@appendRepl@2
; Line 390
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	2
	lea	ecx, DWORD PTR _surrogate$40166[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	add	eax, DWORD PTR _destLen$[ebp]
	adc	edx, DWORD PTR _destLen$[ebp+4]
	mov	DWORD PTR _destLen$[ebp], eax
	mov	DWORD PTR _destLen$[ebp+4], edx
$LN33@appendRepl@2:
; Line 393
	jmp	$LN29@appendRepl@2
$LN44@appendRepl@2:
; Line 394
	cmp	DWORD PTR _c$40133[ebp], 36		; 00000024H
	je	$LN28@appendRepl@2
; Line 396
	cmp	DWORD PTR _c$40133[ebp], 65535		; 0000ffffH
	ja	SHORT $LN27@appendRepl@2
; Line 397
	mov	ax, WORD PTR _c$40133[ebp]
	mov	WORD PTR _c16$40174[ebp], ax
; Line 398
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _c16$40174[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	add	eax, DWORD PTR _destLen$[ebp]
	adc	edx, DWORD PTR _destLen$[ebp+4]
	mov	DWORD PTR _destLen$[ebp], eax
	mov	DWORD PTR _destLen$[ebp+4], edx
; Line 399
	jmp	SHORT $LN26@appendRepl@2
$LN27@appendRepl@2:
; Line 401
	mov	eax, DWORD PTR _c$40133[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	WORD PTR _surrogate$40177[ebp], ax
; Line 402
	mov	eax, DWORD PTR _c$40133[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	WORD PTR _surrogate$40177[ebp+2], ax
; Line 403
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN26@appendRepl@2
; Line 404
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	2
	lea	ecx, DWORD PTR _surrogate$40177[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	add	eax, DWORD PTR _destLen$[ebp]
	adc	edx, DWORD PTR _destLen$[ebp+4]
	mov	DWORD PTR _destLen$[ebp], eax
	mov	DWORD PTR _destLen$[ebp+4], edx
$LN26@appendRepl@2:
; Line 407
	jmp	$LN29@appendRepl@2
$LN28@appendRepl@2:
; Line 412
	mov	DWORD PTR _groupNum$40182[ebp], 0
; Line 413
	mov	DWORD PTR _numDigits$40183[ebp], 0
; Line 414
	mov	eax, DWORD PTR _replacement$[ebp]
	push	eax
	call	_utext_current32_56
	add	esp, 4
	mov	DWORD PTR _nextChar$40184[ebp], eax
; Line 415
	cmp	DWORD PTR _nextChar$40184[ebp], 123	; 0000007bH
	jne	$LN23@appendRepl@2
; Line 417
	mov	esi, esp
	lea	ecx, DWORD PTR _groupName$40186[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 418
	mov	eax, DWORD PTR _replacement$[ebp]
	push	eax
	call	_utext_next32_56
	add	esp, 4
$LN22@appendRepl@2:
; Line 419
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN21@appendRepl@2
	cmp	DWORD PTR _nextChar$40184[ebp], 125	; 0000007dH
	je	$LN21@appendRepl@2
; Line 420
	mov	eax, DWORD PTR _replacement$[ebp]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR _nextChar$40184[ebp], eax
; Line 421
	cmp	DWORD PTR _nextChar$40184[ebp], -1
	jne	SHORT $LN20@appendRepl@2
; Line 422
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66325			; 00010315H
; Line 423
	jmp	$LN19@appendRepl@2
$LN20@appendRepl@2:
; Line 425
	cmp	DWORD PTR _nextChar$40184[ebp], 65	; 00000041H
	jl	SHORT $LN16@appendRepl@2
	cmp	DWORD PTR _nextChar$40184[ebp], 90	; 0000005aH
	jle	SHORT $LN17@appendRepl@2
$LN16@appendRepl@2:
	cmp	DWORD PTR _nextChar$40184[ebp], 97	; 00000061H
	jl	SHORT $LN15@appendRepl@2
	cmp	DWORD PTR _nextChar$40184[ebp], 122	; 0000007aH
	jle	SHORT $LN17@appendRepl@2
$LN15@appendRepl@2:
	cmp	DWORD PTR _nextChar$40184[ebp], 49	; 00000031H
	jl	SHORT $LN18@appendRepl@2
	cmp	DWORD PTR _nextChar$40184[ebp], 57	; 00000039H
	jg	SHORT $LN18@appendRepl@2
$LN17@appendRepl@2:
; Line 426
	mov	esi, esp
	mov	eax, DWORD PTR _nextChar$40184[ebp]
	push	eax
	lea	ecx, DWORD PTR _groupName$40186[ebp]
	call	DWORD PTR __imp_?append@UnicodeString@icu_56@@QAEAAV12@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN19@appendRepl@2
$LN18@appendRepl@2:
; Line 427
	cmp	DWORD PTR _nextChar$40184[ebp], 125	; 0000007dH
	jne	SHORT $LN13@appendRepl@2
; Line 428
	lea	eax, DWORD PTR _groupName$40186[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+148]
	push	eax
	call	_uhash_geti_56
	add	esp, 8
	mov	DWORD PTR _groupNum$40182[ebp], eax
; Line 429
	cmp	DWORD PTR _groupNum$40182[ebp], 0
	jne	SHORT $LN12@appendRepl@2
; Line 430
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66325			; 00010315H
$LN12@appendRepl@2:
; Line 432
	jmp	SHORT $LN19@appendRepl@2
$LN13@appendRepl@2:
; Line 434
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66325			; 00010315H
$LN19@appendRepl@2:
; Line 436
	jmp	$LN22@appendRepl@2
$LN21@appendRepl@2:
; Line 438
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _groupName$40186[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN10@appendRepl@2
$LN23@appendRepl@2:
	mov	eax, DWORD PTR _nextChar$40184[ebp]
	push	eax
	call	_u_isdigit_56
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN9@appendRepl@2
; Line 440
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+108]
	call	DWORD PTR __imp_?size@UVector32@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _numCaptureGroups$40202[ebp], eax
$LN8@appendRepl@2:
; Line 442
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jge	SHORT $LN71@appendRepl@2
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	cmp	ecx, 55296				; 0000d800H
	jge	SHORT $LN71@appendRepl@2
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	DWORD PTR tv495[ebp], eax
	jmp	SHORT $LN72@appendRepl@2
$LN71@appendRepl@2:
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	call	_utext_current32_56
	add	esp, 4
	mov	DWORD PTR tv495[ebp], eax
$LN72@appendRepl@2:
	mov	edx, DWORD PTR tv495[ebp]
	mov	DWORD PTR _nextChar$40184[ebp], edx
; Line 443
	cmp	DWORD PTR _nextChar$40184[ebp], -1
	jne	SHORT $LN6@appendRepl@2
; Line 444
	jmp	$LN7@appendRepl@2
$LN6@appendRepl@2:
; Line 446
	mov	eax, DWORD PTR _nextChar$40184[ebp]
	push	eax
	call	_u_isdigit_56
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@appendRepl@2
; Line 447
	jmp	$LN7@appendRepl@2
$LN5@appendRepl@2:
; Line 449
	mov	eax, DWORD PTR _nextChar$40184[ebp]
	push	eax
	call	_u_charDigitValue_56
	add	esp, 4
	mov	DWORD PTR _nextDigitVal$40208[ebp], eax
; Line 450
	mov	eax, DWORD PTR _groupNum$40182[ebp]
	imul	eax, 10					; 0000000aH
	add	eax, DWORD PTR _nextDigitVal$40208[ebp]
	cmp	eax, DWORD PTR _numCaptureGroups$40202[ebp]
	jle	SHORT $LN4@appendRepl@2
; Line 452
	cmp	DWORD PTR _numDigits$40183[ebp], 0
	jne	SHORT $LN3@appendRepl@2
; Line 453
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
$LN3@appendRepl@2:
; Line 455
	jmp	$LN7@appendRepl@2
$LN4@appendRepl@2:
; Line 457
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jge	SHORT $LN73@appendRepl@2
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	cmp	ecx, 55296				; 0000d800H
	jge	SHORT $LN73@appendRepl@2
	mov	edx, DWORD PTR _replacement$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	DWORD PTR tv526[ebp], eax
	mov	ecx, DWORD PTR _replacement$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _replacement$[ebp]
	mov	DWORD PTR [eax+40], edx
	jmp	SHORT $LN74@appendRepl@2
$LN73@appendRepl@2:
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv526[ebp], eax
$LN74@appendRepl@2:
; Line 458
	mov	eax, DWORD PTR _groupNum$40182[ebp]
	imul	eax, 10					; 0000000aH
	add	eax, DWORD PTR _nextDigitVal$40208[ebp]
	mov	DWORD PTR _groupNum$40182[ebp], eax
; Line 459
	mov	eax, DWORD PTR _numDigits$40183[ebp]
	add	eax, 1
	mov	DWORD PTR _numDigits$40183[ebp], eax
; Line 460
	jmp	$LN8@appendRepl@2
$LN7@appendRepl@2:
	jmp	SHORT $LN10@appendRepl@2
$LN9@appendRepl@2:
; Line 463
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66325			; 00010315H
$LN10@appendRepl@2:
; Line 466
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN29@appendRepl@2
; Line 467
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _groupNum$40182[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z ; icu_56::RegexMatcher::appendGroup
	add	eax, DWORD PTR _destLen$[ebp]
	adc	edx, DWORD PTR _destLen$[ebp+4]
	mov	DWORD PTR _destLen$[ebp], eax
	mov	DWORD PTR _destLen$[ebp+4], edx
$LN29@appendRepl@2:
; Line 470
	jmp	$LN46@appendRepl@2
$LN45@appendRepl@2:
; Line 472
	mov	eax, DWORD PTR _this$[ebp]
$LN59@appendRepl@2:
; Line 473
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN91@appendRepl@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN91@appendRepl@2:
	DD	10					; 0000000aH
	DD	$LN90@appendRepl@2
$LN90@appendRepl@2:
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN79@appendRepl@2
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN80@appendRepl@2
	DD	-132					; ffffff7cH
	DD	8
	DD	$LN81@appendRepl@2
	DD	-156					; ffffff64H
	DD	2
	DD	$LN82@appendRepl@2
	DD	-168					; ffffff58H
	DD	4
	DD	$LN83@appendRepl@2
	DD	-180					; ffffff4cH
	DD	2
	DD	$LN84@appendRepl@2
	DD	-192					; ffffff40H
	DD	4
	DD	$LN85@appendRepl@2
	DD	-204					; ffffff34H
	DD	2
	DD	$LN86@appendRepl@2
	DD	-216					; ffffff28H
	DD	4
	DD	$LN87@appendRepl@2
	DD	-324					; fffffebcH
	DD	64					; 00000040H
	DD	$LN88@appendRepl@2
$LN88@appendRepl@2:
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN87@appendRepl@2:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN86@appendRepl@2:
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	54					; 00000036H
	DB	0
$LN85@appendRepl@2:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN84@appendRepl@2:
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	54					; 00000036H
	DB	0
$LN83@appendRepl@2:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN82@appendRepl@2:
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	54					; 00000036H
	DB	0
$LN81@appendRepl@2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN80@appendRepl@2:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN79@appendRepl@2:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR _groupName$40186[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-560]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?appendReplacement@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@0AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::appendReplacement
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?appendTail@RegexMatcher@icu_56@@UAEAAVUnicodeString@2@AAV32@@Z
_TEXT	SEGMENT
_resultText$ = -140					; size = 112
_status$ = -20						; size = 4
_this$ = -8						; size = 4
_dest$ = 8						; size = 4
?appendTail@RegexMatcher@icu_56@@UAEAAVUnicodeString@2@AAV32@@Z PROC ; icu_56::RegexMatcher::appendTail, COMDAT
; _this$ = ecx
; Line 486
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 487
	mov	DWORD PTR _status$[ebp], 0
; Line 488
	mov	DWORD PTR _resultText$[ebp], 878368812	; 345ad82cH
	mov	DWORD PTR _resultText$[ebp+4], 0
	mov	DWORD PTR _resultText$[ebp+8], 0
	mov	DWORD PTR _resultText$[ebp+12], 112	; 00000070H
	mov	DWORD PTR _resultText$[ebp+16], 0
	mov	DWORD PTR _resultText$[ebp+20], 0
	mov	DWORD PTR _resultText$[ebp+24], 0
	mov	DWORD PTR _resultText$[ebp+28], 0
	mov	DWORD PTR _resultText$[ebp+32], 0
	mov	DWORD PTR _resultText$[ebp+36], 0
	mov	DWORD PTR _resultText$[ebp+40], 0
	mov	DWORD PTR _resultText$[ebp+44], 0
	mov	DWORD PTR _resultText$[ebp+48], 0
	mov	DWORD PTR _resultText$[ebp+52], 0
	mov	DWORD PTR _resultText$[ebp+56], 0
	mov	DWORD PTR _resultText$[ebp+60], 0
	mov	DWORD PTR _resultText$[ebp+64], 0
	mov	DWORD PTR _resultText$[ebp+68], 0
	mov	DWORD PTR _resultText$[ebp+72], 0
	mov	DWORD PTR _resultText$[ebp+76], 0
	mov	DWORD PTR _resultText$[ebp+80], 0
	mov	DWORD PTR _resultText$[ebp+84], 0
	mov	DWORD PTR _resultText$[ebp+88], 0
	mov	DWORD PTR _resultText$[ebp+92], 0
	mov	DWORD PTR _resultText$[ebp+96], 0
	mov	DWORD PTR _resultText$[ebp+100], 0
	mov	DWORD PTR _resultText$[ebp+104], 0
	mov	DWORD PTR _resultText$[ebp+108], 0
; Line 489
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _resultText$[ebp]
	push	edx
	call	_utext_openUnicodeString_56
	add	esp, 12					; 0000000cH
; Line 491
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@appendTail
; Line 492
	mov	esi, esp
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _resultText$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 493
	lea	eax, DWORD PTR _resultText$[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
$LN1@appendTail:
; Line 496
	mov	eax, DWORD PTR _dest$[ebp]
; Line 497
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@appendTail
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@appendTail:
	DD	2
	DD	$LN6@appendTail
$LN6@appendTail:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@appendTail
	DD	-140					; ffffff74H
	DD	112					; 00000070H
	DD	$LN5@appendTail
$LN5@appendTail:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN4@appendTail:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?appendTail@RegexMatcher@icu_56@@UAEAAVUnicodeString@2@AAV32@@Z ENDP ; icu_56::RegexMatcher::appendTail
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?appendTail@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv235 = -272						; size = 8
tv218 = -268						; size = 4
tv201 = -268						; size = 4
tv234 = -264						; size = 4
tv217 = -264						; size = 4
tv211 = -264						; size = 4
tv200 = -264						; size = 4
_destLen$40243 = -64					; size = 8
_inputChars$40238 = -48					; size = 4
_len16$40234 = -36					; size = 4
_destLen$40231 = -24					; size = 8
_this$ = -8						; size = 4
_dest$ = 8						; size = 4
_status$ = 12						; size = 4
?appendTail@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::appendTail, COMDAT
; _this$ = ecx
; Line 502
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 503
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN9@appendTail@2
; Line 504
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN10@appendTail@2
$LN9@appendTail@2:
; Line 506
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@appendTail@2
; Line 507
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 508
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN10@appendTail@2
$LN8@appendTail@2:
; Line 511
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv200[ebp], eax
	mov	DWORD PTR tv201[ebp], ecx
	mov	edx, DWORD PTR tv200[ebp]
	mov	eax, DWORD PTR tv201[ebp]
	mov	ecx, DWORD PTR [edx+28]
	cmp	ecx, DWORD PTR [eax+140]
	jl	$LN7@appendTail@2
	jg	SHORT $LN12@appendTail@2
	mov	edx, DWORD PTR tv200[ebp]
	mov	eax, DWORD PTR tv201[ebp]
	mov	ecx, DWORD PTR [edx+24]
	cmp	ecx, DWORD PTR [eax+136]
	jbe	$LN7@appendTail@2
$LN12@appendTail@2:
; Line 512
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv211[ebp], ecx
	mov	edx, DWORD PTR tv211[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	$LN6@appendTail@2
	mov	eax, DWORD PTR tv211[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	$LN6@appendTail@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv217[ebp], edx
	mov	DWORD PTR tv218[ebp], ecx
	mov	eax, DWORD PTR tv217[ebp]
	mov	ecx, DWORD PTR tv218[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+16]
	jne	$LN6@appendTail@2
	mov	eax, DWORD PTR tv217[ebp]
	mov	ecx, DWORD PTR tv218[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+20]
	jne	$LN6@appendTail@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv234[ebp], ecx
	mov	DWORD PTR tv235[ebp], eax
	mov	DWORD PTR tv235[ebp+4], edx
	mov	edx, DWORD PTR tv234[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv235[ebp]
	jne	$LN6@appendTail@2
	mov	ecx, DWORD PTR tv234[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv235[ebp+4]
	jne	SHORT $LN6@appendTail@2
; Line 513
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	mov	DWORD PTR _destLen$40231[ebp], eax
	mov	DWORD PTR _destLen$40231[ebp+4], edx
; Line 515
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	sub	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR [ecx+28]
	sbb	ecx, DWORD PTR [edx+140]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+16]
	mov	eax, DWORD PTR _this$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	push	edx
	call	__allmul
	add	eax, DWORD PTR [esi+48]
	push	eax
	mov	eax, DWORD PTR _destLen$40231[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _destLen$40231[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$40231[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$40231[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 516
	jmp	$LN7@appendTail@2
$LN6@appendTail@2:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN4@appendTail@2
; Line 519
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	sub	edx, DWORD PTR [ecx+136]
	mov	eax, DWORD PTR [eax+28]
	sbb	eax, DWORD PTR [ecx+140]
	mov	DWORD PTR _len16$40234[ebp], edx
; Line 520
	jmp	SHORT $LN3@appendTail@2
$LN4@appendTail@2:
; Line 521
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	mov	eax, DWORD PTR [ecx+136]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _len16$40234[ebp], eax
; Line 522
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@appendTail@2:
; Line 525
	mov	eax, DWORD PTR _len16$40234[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _inputChars$40238[ebp], eax
; Line 526
	cmp	DWORD PTR _inputChars$40238[ebp], 0
	jne	SHORT $LN2@appendTail@2
; Line 527
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 7
; Line 528
	jmp	SHORT $LN7@appendTail@2
$LN2@appendTail@2:
; Line 529
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len16$40234[ebp]
	push	ecx
	mov	edx, DWORD PTR _inputChars$40238[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
; Line 530
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	mov	DWORD PTR _destLen$40243[ebp], eax
	mov	DWORD PTR _destLen$40243[ebp+4], edx
; Line 531
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len16$40234[ebp]
	push	ecx
	mov	edx, DWORD PTR _inputChars$40238[ebp]
	push	edx
	mov	eax, DWORD PTR _destLen$40243[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _destLen$40243[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$40243[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$40243[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 532
	mov	eax, DWORD PTR _inputChars$40238[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN7@appendTail@2:
; Line 536
	mov	eax, DWORD PTR _dest$[ebp]
$LN10@appendTail@2:
; Line 537
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?appendTail@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::appendTail
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?end@RegexMatcher@icu_56@@UBEHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_err$ = 8						; size = 4
?end@RegexMatcher@icu_56@@UBEHAAW4UErrorCode@@@Z PROC	; icu_56::RegexMatcher::end, COMDAT
; _this$ = ecx
; Line 546
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 547
	mov	esi, esp
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 548
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@RegexMatcher@icu_56@@UBEHAAW4UErrorCode@@@Z ENDP	; icu_56::RegexMatcher::end
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?end64@RegexMatcher@icu_56@@UBE_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_err$ = 8						; size = 4
?end64@RegexMatcher@icu_56@@UBE_JAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::end64, COMDAT
; _this$ = ecx
; Line 550
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 551
	mov	esi, esp
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 552
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end64@RegexMatcher@icu_56@@UBE_JAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::end64
_TEXT	ENDS
PUBLIC	??_C@_1CC@GOKMHNEN@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EG@FLOMNPIM@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi@ ; `string'
PUBLIC	??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ ; `string'
PUBLIC	?__LINE__Var@?1??end64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z@4JA ; `icu_56::RegexMatcher::end64'::`2'::__LINE__Var
EXTRN	__imp___wassert:PROC
EXTRN	__imp_?elementAti@UVector32@icu_56@@QBEHH@Z:PROC
;	COMDAT ??_C@_1CC@GOKMHNEN@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@GOKMHNEN@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'g'
	DB	00H, 'r', 00H, 'o', 00H, 'u', 00H, 'p', 00H, 'O', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@FLOMNPIM@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi@
CONST	SEGMENT
??_C@_1EG@FLOMNPIM@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi@ DB 'g'
	DB	00H, 'r', 00H, 'o', 00H, 'u', 00H, 'p', 00H, 'O', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'f', 00H, 'P', 00H, 'a', 00H, 't', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'n', 00H, '-', 00H, '>', 00H, 'f', 00H, 'F', 00H, 'r'
	DB	00H, 'a', 00H, 'm', 00H, 'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
CONST	SEGMENT
??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'i', 00H, '1', 00H, '8', 00H, 'n', 00H, '\', 00H, 'r', 00H
	DB	'e', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??end64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??end64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z@4JA DD 022aH ; `icu_56::RegexMatcher::end64'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?end64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_groupOffset$40264 = -36				; size = 4
_e$ = -24						; size = 8
_this$ = -8						; size = 4
_group$ = 8						; size = 4
_err$ = 12						; size = 4
?end64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::end64, COMDAT
; _this$ = ecx
; Line 554
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 555
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@end64
; Line 556
	or	eax, -1
	or	edx, -1
	jmp	$LN7@end64
$LN6@end64:
; Line 558
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	jne	SHORT $LN5@end64
; Line 559
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 66306			; 00010302H
; Line 560
	or	eax, -1
	or	edx, -1
	jmp	$LN7@end64
$LN5@end64:
; Line 562
	cmp	DWORD PTR _group$[ebp], 0
	jl	SHORT $LN3@end64
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+108]
	call	DWORD PTR __imp_?size@UVector32@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _group$[ebp], eax
	jle	SHORT $LN4@end64
$LN3@end64:
; Line 563
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 8
; Line 564
	or	eax, -1
	or	edx, -1
	jmp	$LN7@end64
$LN4@end64:
; Line 566
	mov	DWORD PTR _e$[ebp], -1
	mov	DWORD PTR _e$[ebp+4], -1
; Line 567
	cmp	DWORD PTR _group$[ebp], 0
	jne	SHORT $LN2@end64
; Line 568
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR [eax+124]
	mov	DWORD PTR _e$[ebp+4], edx
; Line 569
	jmp	$LN1@end64
$LN2@end64:
; Line 572
	mov	eax, DWORD PTR _group$[ebp]
	sub	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+108]
	call	DWORD PTR __imp_?elementAti@UVector32@icu_56@@QBEHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _groupOffset$40264[ebp], eax
; Line 573
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _groupOffset$40264[ebp]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN9@end64
	mov	eax, DWORD PTR ?__LINE__Var@?1??end64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z@4JA
	add	eax, 19					; 00000013H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EG@FLOMNPIM@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@end64:
; Line 574
	cmp	DWORD PTR _groupOffset$40264[ebp], 0
	jge	SHORT $LN10@end64
	mov	eax, DWORD PTR ?__LINE__Var@?1??end64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z@4JA
	add	eax, 20					; 00000014H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CC@GOKMHNEN@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@end64:
; Line 575
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _groupOffset$40264[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _e$[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	mov	DWORD PTR _e$[ebp+4], ecx
$LN1@end64:
; Line 578
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR _e$[ebp+4]
$LN7@end64:
; Line 579
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?end64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::end64
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?end@RegexMatcher@icu_56@@UBEHHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_group$ = 8						; size = 4
_err$ = 12						; size = 4
?end@RegexMatcher@icu_56@@UBEHHAAW4UErrorCode@@@Z PROC	; icu_56::RegexMatcher::end, COMDAT
; _this$ = ecx
; Line 581
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 582
	mov	esi, esp
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _group$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+80]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 583
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?end@RegexMatcher@icu_56@@UBEHHAAW4UErrorCode@@@Z ENDP	; icu_56::RegexMatcher::end
_TEXT	ENDS
PUBLIC	?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findProgressInterrupt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pos$ = 8						; size = 8
_status$ = 16						; size = 4
?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::findProgressInterrupt, COMDAT
; _this$ = ecx
; Line 595
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 596
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+248], 0
	je	SHORT $LN1@findProgre
	mov	esi, esp
	mov	eax, DWORD PTR _pos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+252]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN1@findProgre
; Line 597
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66323			; 00010313H
; Line 598
	mov	al, 1
	jmp	SHORT $LN2@findProgre
$LN1@findProgre:
; Line 600
	xor	al, al
$LN2@findProgre:
; Line 601
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::findProgressInterrupt
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?find@RegexMatcher@icu_56@@UAECXZ
_TEXT	SEGMENT
_result$ = -29						; size = 1
_status$ = -20						; size = 4
_this$ = -8						; size = 4
?find@RegexMatcher@icu_56@@UAECXZ PROC			; icu_56::RegexMatcher::find, COMDAT
; _this$ = ecx
; Line 608
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 609
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@find
; Line 610
	xor	al, al
	jmp	SHORT $LN2@find
$LN1@find:
; Line 612
	mov	DWORD PTR _status$[ebp], 0
; Line 613
	mov	esi, esp
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _result$[ebp], al
; Line 614
	mov	al, BYTE PTR _result$[ebp]
$LN2@find:
; Line 615
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@find
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@find:
	DD	1
	DD	$LN5@find
$LN5@find:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@find
$LN4@find:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?find@RegexMatcher@icu_56@@UAECXZ ENDP			; icu_56::RegexMatcher::find
_TEXT	ENDS
PUBLIC	?contains@Regex8BitSet@icu_56@@QAECH@Z		; icu_56::Regex8BitSet::contains
PUBLIC	??_C@_1DG@GIKABGGP@?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAM?$AAi?$AAn?$AAM?$AAa?$AAt?$AAc?$AAh?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
PUBLIC	??_C@_1BM@NJLOMBGK@?$AAs?$AAt?$AAa?$AAr?$AAt?$AAP?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z@4JA ; `icu_56::RegexMatcher::find'::`2'::__LINE__Var
PUBLIC	?findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findUsingChunk
;	COMDAT ??_C@_1DG@GIKABGGP@?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAM?$AAi?$AAn?$AAM?$AAa?$AAt?$AAc?$AAh?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@GIKABGGP@?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAM?$AAi?$AAn?$AAM?$AAa?$AAt?$AAc?$AAh?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'f'
	DB	00H, 'P', 00H, 'a', 00H, 't', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, '-', 00H, '>', 00H, 'f', 00H, 'M', 00H, 'i', 00H, 'n'
	DB	00H, 'M', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'L', 00H
	DB	'e', 00H, 'n', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@NJLOMBGK@?$AAs?$AAt?$AAa?$AAr?$AAt?$AAP?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@NJLOMBGK@?$AAs?$AAt?$AAa?$AAr?$AAt?$AAP?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, 'P', 00H, 'o', 00H
	DB	's', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z@4JA DD 026eH ; `icu_56::RegexMatcher::find'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv1217 = -492						; size = 8
tv2197 = -488						; size = 8
tv2037 = -488						; size = 8
tv1994 = -488						; size = 8
tv1949 = -488						; size = 8
tv1876 = -488						; size = 8
tv1809 = -488						; size = 8
tv1722 = -488						; size = 8
tv1666 = -488						; size = 8
tv1538 = -488						; size = 8
tv1428 = -488						; size = 8
tv1284 = -488						; size = 8
tv1249 = -488						; size = 4
tv1200 = -488						; size = 4
tv941 = -488						; size = 8
tv866 = -488						; size = 8
tv781 = -488						; size = 8
tv687 = -488						; size = 4
tv647 = -488						; size = 8
tv532 = -488						; size = 8
tv394 = -488						; size = 8
tv301 = -488						; size = 8
tv196 = -488						; size = 8
tv2111 = -484						; size = 4
tv1843 = -484						; size = 4
tv1497 = -484						; size = 4
tv1341 = -484						; size = 4
tv1258 = -484						; size = 4
tv1248 = -484						; size = 4
tv1216 = -484						; size = 4
tv1199 = -484						; size = 4
tv1193 = -484						; size = 4
tv923 = -484						; size = 4
tv848 = -484						; size = 4
tv818 = -484						; size = 4
tv763 = -484						; size = 4
tv680 = -484						; size = 4
tv629 = -484						; size = 4
tv514 = -484						; size = 4
tv376 = -484						; size = 4
tv283 = -484						; size = 4
tv227 = -484						; size = 4
tv178 = -484						; size = 4
___offset$40432 = -284					; size = 8
___offset$40416 = -268					; size = 8
___offset$40404 = -252					; size = 8
___offset$40399 = -236					; size = 8
___offset$40393 = -220					; size = 8
_c$40389 = -204						; size = 4
___offset$40380 = -192					; size = 8
_pos$40376 = -176					; size = 8
___offset$40368 = -160					; size = 8
_theChar$40367 = -144					; size = 4
___offset$40357 = -132					; size = 8
_pos$40351 = -116					; size = 8
___offset$40343 = -100					; size = 8
___offset$40328 = -84					; size = 8
_c$ = -68						; size = 4
_testStartLimit$ = -56					; size = 8
___offset$40301 = -40					; size = 8
_startPos$ = -24					; size = 8
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z PROC	; icu_56::RegexMatcher::find, COMDAT
; _this$ = ecx
; Line 622
	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-492]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 626
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN87@find@2
; Line 627
	xor	al, al
	jmp	$LN88@find@2
$LN87@find@2:
; Line 629
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN86@find@2
; Line 630
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 631
	xor	al, al
	jmp	$LN88@find@2
$LN86@find@2:
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv1193[ebp], ecx
	mov	edx, DWORD PTR tv1193[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	$LN85@find@2
	mov	eax, DWORD PTR tv1193[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	$LN85@find@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv1199[ebp], edx
	mov	DWORD PTR tv1200[ebp], ecx
	mov	eax, DWORD PTR tv1199[ebp]
	mov	ecx, DWORD PTR tv1200[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+16]
	jne	SHORT $LN85@find@2
	mov	eax, DWORD PTR tv1199[ebp]
	mov	ecx, DWORD PTR tv1200[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN85@find@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv1216[ebp], ecx
	mov	DWORD PTR tv1217[ebp], eax
	mov	DWORD PTR tv1217[ebp+4], edx
	mov	edx, DWORD PTR tv1216[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv1217[ebp]
	jne	SHORT $LN85@find@2
	mov	ecx, DWORD PTR tv1216[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv1217[ebp+4]
	jne	SHORT $LN85@find@2
; Line 635
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findUsingChunk
	jmp	$LN88@find@2
$LN85@find@2:
; Line 638
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _startPos$[ebp], ecx
	mov	edx, DWORD PTR [eax+124]
	mov	DWORD PTR _startPos$[ebp+4], edx
; Line 639
	mov	eax, DWORD PTR _startPos$[ebp]
	or	eax, DWORD PTR _startPos$[ebp+4]
	jne	SHORT $LN84@find@2
; Line 640
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _startPos$[ebp], ecx
	mov	edx, DWORD PTR [eax+92]
	mov	DWORD PTR _startPos$[ebp+4], edx
$LN84@find@2:
; Line 643
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	$LN83@find@2
; Line 645
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+128], edx
	mov	ecx, DWORD PTR [ecx+124]
	mov	DWORD PTR [eax+132], ecx
; Line 647
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv1248[ebp], eax
	mov	DWORD PTR tv1249[ebp], ecx
	mov	edx, DWORD PTR tv1248[ebp]
	mov	eax, DWORD PTR tv1249[ebp]
	mov	ecx, DWORD PTR [edx+112]
	cmp	ecx, DWORD PTR [eax+120]
	jne	$LN82@find@2
	mov	edx, DWORD PTR tv1248[ebp]
	mov	eax, DWORD PTR tv1249[ebp]
	mov	ecx, DWORD PTR [edx+116]
	cmp	ecx, DWORD PTR [eax+124]
	jne	$LN82@find@2
; Line 650
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv1258[ebp], eax
	mov	ecx, DWORD PTR tv1258[ebp]
	mov	edx, DWORD PTR _startPos$[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN81@find@2
	jg	SHORT $LN134@find@2
	mov	eax, DWORD PTR tv1258[ebp]
	mov	ecx, DWORD PTR _startPos$[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN81@find@2
$LN134@find@2:
; Line 651
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 652
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 653
	xor	al, al
	jmp	$LN88@find@2
$LN81@find@2:
; Line 655
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _startPos$[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _startPos$[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$40301[ebp], edx
	mov	DWORD PTR ___offset$40301[ebp+4], eax
	cmp	DWORD PTR ___offset$40301[ebp+4], 0
	jl	SHORT $LN80@find@2
	jg	SHORT $LN135@find@2
	cmp	DWORD PTR ___offset$40301[ebp], 0
	jb	SHORT $LN80@find@2
$LN135@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv1284[ebp], eax
	mov	DWORD PTR tv1284[ebp+4], edx
	mov	edx, DWORD PTR ___offset$40301[ebp+4]
	cmp	edx, DWORD PTR tv1284[ebp+4]
	jg	SHORT $LN80@find@2
	jl	SHORT $LN136@find@2
	mov	eax, DWORD PTR ___offset$40301[ebp]
	cmp	eax, DWORD PTR tv1284[ebp]
	ja	SHORT $LN80@find@2
$LN136@find@2:
	mov	eax, DWORD PTR ___offset$40301[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN79@find@2
$LN80@find@2:
	mov	eax, DWORD PTR _startPos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN79@find@2:
; Line 656
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN90@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN90@find@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv178[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN91@find@2
$LN90@find@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv178[ebp], eax
$LN91@find@2:
; Line 657
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN92@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv196[ebp], eax
	mov	DWORD PTR tv196[ebp+4], edx
	jmp	SHORT $LN93@find@2
$LN92@find@2:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv196[ebp], eax
	mov	DWORD PTR tv196[ebp+4], edx
$LN93@find@2:
	mov	ecx, DWORD PTR tv196[ebp]
	mov	DWORD PTR _startPos$[ebp], ecx
	mov	edx, DWORD PTR tv196[ebp+4]
	mov	DWORD PTR _startPos$[ebp+4], edx
$LN82@find@2:
; Line 659
	jmp	SHORT $LN78@find@2
$LN83@find@2:
; Line 660
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv1341[ebp], eax
	mov	ecx, DWORD PTR tv1341[ebp]
	cmp	DWORD PTR [ecx+132], 0
	jl	SHORT $LN78@find@2
	jg	SHORT $LN137@find@2
	mov	edx, DWORD PTR tv1341[ebp]
	cmp	DWORD PTR [edx+128], 0
	jb	SHORT $LN78@find@2
$LN137@find@2:
; Line 664
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 665
	xor	al, al
	jmp	$LN88@find@2
$LN78@find@2:
; Line 675
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN76@find@2
; Line 676
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+96]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+96]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+100]
	sbb	eax, edx
	mov	DWORD PTR _testStartLimit$[ebp], esi
	mov	DWORD PTR _testStartLimit$[ebp+4], eax
; Line 677
	mov	eax, DWORD PTR _startPos$[ebp+4]
	cmp	eax, DWORD PTR _testStartLimit$[ebp+4]
	jl	SHORT $LN75@find@2
	jg	SHORT $LN138@find@2
	mov	ecx, DWORD PTR _startPos$[ebp]
	cmp	ecx, DWORD PTR _testStartLimit$[ebp]
	jbe	SHORT $LN75@find@2
$LN138@find@2:
; Line 678
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 679
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 680
	xor	al, al
	jmp	$LN88@find@2
$LN75@find@2:
; Line 682
	jmp	SHORT $LN74@find@2
$LN76@find@2:
; Line 685
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	DWORD PTR [ecx+96], 0
	setg	al
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+96]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+100]
	sbb	eax, edx
	mov	DWORD PTR _testStartLimit$[ebp], esi
	mov	DWORD PTR _testStartLimit$[ebp+4], eax
$LN74@find@2:
; Line 689
	cmp	DWORD PTR _startPos$[ebp+4], 0
	jg	SHORT $LN94@find@2
	jl	SHORT $LN139@find@2
	cmp	DWORD PTR _startPos$[ebp], 0
	jae	SHORT $LN94@find@2
$LN139@find@2:
	mov	eax, DWORD PTR ?__LINE__Var@?1??find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z@4JA
	add	eax, 67					; 00000043H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BM@NJLOMBGK@?$AAs?$AAt?$AAa?$AAr?$AAt?$AAP?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN94@find@2:
; Line 691
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR tv227[ebp], edx
	cmp	DWORD PTR tv227[ebp], 5
	ja	$LN1@find@2
	mov	eax, DWORD PTR tv227[ebp]
	jmp	DWORD PTR $LN167@find@2[eax*4]
$LN70@find@2:
; Line 696
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
; Line 697
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN68@find@2
; Line 698
	xor	al, al
	jmp	$LN88@find@2
$LN68@find@2:
; Line 700
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN67@find@2
; Line 701
	mov	al, 1
	jmp	$LN88@find@2
$LN67@find@2:
; Line 703
	mov	eax, DWORD PTR _startPos$[ebp+4]
	cmp	eax, DWORD PTR _testStartLimit$[ebp+4]
	jl	SHORT $LN66@find@2
	jg	SHORT $LN140@find@2
	mov	ecx, DWORD PTR _startPos$[ebp]
	cmp	ecx, DWORD PTR _testStartLimit$[ebp]
	jb	SHORT $LN66@find@2
$LN140@find@2:
; Line 704
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 705
	xor	al, al
	jmp	$LN88@find@2
$LN66@find@2:
; Line 707
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _startPos$[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _startPos$[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$40328[ebp], edx
	mov	DWORD PTR ___offset$40328[ebp+4], eax
	cmp	DWORD PTR ___offset$40328[ebp+4], 0
	jl	SHORT $LN65@find@2
	jg	SHORT $LN141@find@2
	cmp	DWORD PTR ___offset$40328[ebp], 0
	jb	SHORT $LN65@find@2
$LN141@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv1428[ebp], eax
	mov	DWORD PTR tv1428[ebp+4], edx
	mov	edx, DWORD PTR ___offset$40328[ebp+4]
	cmp	edx, DWORD PTR tv1428[ebp+4]
	jg	SHORT $LN65@find@2
	jl	SHORT $LN142@find@2
	mov	eax, DWORD PTR ___offset$40328[ebp]
	cmp	eax, DWORD PTR tv1428[ebp]
	ja	SHORT $LN65@find@2
$LN142@find@2:
	mov	eax, DWORD PTR ___offset$40328[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN64@find@2
$LN65@find@2:
	mov	eax, DWORD PTR _startPos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN64@find@2:
; Line 708
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN95@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN95@find@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv283[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN96@find@2
$LN95@find@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv283[ebp], eax
$LN96@find@2:
; Line 709
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN97@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv301[ebp], eax
	mov	DWORD PTR tv301[ebp+4], edx
	jmp	SHORT $LN98@find@2
$LN97@find@2:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv301[ebp], eax
	mov	DWORD PTR tv301[ebp+4], edx
$LN98@find@2:
	mov	ecx, DWORD PTR tv301[ebp]
	mov	DWORD PTR _startPos$[ebp], ecx
	mov	edx, DWORD PTR tv301[ebp+4]
	mov	DWORD PTR _startPos$[ebp+4], edx
; Line 713
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findProgressInterrupt
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN63@find@2
; Line 714
	xor	al, al
	jmp	$LN88@find@2
$LN63@find@2:
; Line 715
	jmp	$LN70@find@2
; Line 716
	xor	eax, eax
	jne	SHORT $LN62@find@2
	mov	ecx, DWORD PTR ?__LINE__Var@?1??find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z@4JA
	add	ecx, 94					; 0000005eH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN62@find@2:
; Line 721
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv1497[ebp], eax
	mov	ecx, DWORD PTR tv1497[ebp]
	mov	edx, DWORD PTR _startPos$[ebp+4]
	cmp	edx, DWORD PTR [ecx+92]
	jl	SHORT $LN61@find@2
	jg	SHORT $LN143@find@2
	mov	eax, DWORD PTR tv1497[ebp]
	mov	ecx, DWORD PTR _startPos$[ebp]
	cmp	ecx, DWORD PTR [eax+88]
	jbe	SHORT $LN61@find@2
$LN143@find@2:
; Line 722
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 723
	xor	al, al
	jmp	$LN88@find@2
$LN61@find@2:
; Line 725
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
; Line 726
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN60@find@2
; Line 727
	xor	al, al
	jmp	$LN88@find@2
$LN60@find@2:
; Line 729
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+106]
	jmp	$LN88@find@2
$LN59@find@2:
; Line 735
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+96], 0
	jg	SHORT $LN100@find@2
	mov	edx, DWORD PTR ?__LINE__Var@?1??find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z@4JA
	add	edx, 113				; 00000071H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DG@GIKABGGP@?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAM?$AAi?$AAn?$AAM?$AAa?$AAt?$AAc?$AAh?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN100@find@2:
; Line 736
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _startPos$[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _startPos$[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$40343[ebp], edx
	mov	DWORD PTR ___offset$40343[ebp+4], eax
	cmp	DWORD PTR ___offset$40343[ebp+4], 0
	jl	SHORT $LN58@find@2
	jg	SHORT $LN144@find@2
	cmp	DWORD PTR ___offset$40343[ebp], 0
	jb	SHORT $LN58@find@2
$LN144@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv1538[ebp], eax
	mov	DWORD PTR tv1538[ebp+4], edx
	mov	edx, DWORD PTR ___offset$40343[ebp+4]
	cmp	edx, DWORD PTR tv1538[ebp+4]
	jg	SHORT $LN58@find@2
	jl	SHORT $LN145@find@2
	mov	eax, DWORD PTR ___offset$40343[ebp]
	cmp	eax, DWORD PTR tv1538[ebp]
	ja	SHORT $LN58@find@2
$LN145@find@2:
	mov	eax, DWORD PTR ___offset$40343[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN56@find@2
$LN58@find@2:
	mov	eax, DWORD PTR _startPos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN56@find@2:
; Line 738
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	DWORD PTR _pos$40351[ebp], eax
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	mov	DWORD PTR _pos$40351[ebp+4], ecx
; Line 739
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN101@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN101@find@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv376[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN102@find@2
$LN101@find@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv376[ebp], eax
$LN102@find@2:
	mov	ecx, DWORD PTR tv376[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 740
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN103@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv394[ebp], eax
	mov	DWORD PTR tv394[ebp+4], edx
	jmp	SHORT $LN104@find@2
$LN103@find@2:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv394[ebp], eax
	mov	DWORD PTR tv394[ebp+4], edx
$LN104@find@2:
	mov	ecx, DWORD PTR tv394[ebp]
	mov	DWORD PTR _startPos$[ebp], ecx
	mov	edx, DWORD PTR tv394[ebp+4]
	mov	DWORD PTR _startPos$[ebp+4], edx
; Line 745
	cmp	DWORD PTR _c$[ebp], 0
	jl	$LN54@find@2
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN52@find@2
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+140]
	call	?contains@Regex8BitSet@icu_56@@QAECH@Z	; icu_56::Regex8BitSet::contains
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN53@find@2
$LN52@find@2:
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jl	$LN54@find@2
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+132]
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	eax, al
	test	eax, eax
	je	$LN54@find@2
$LN53@find@2:
; Line 746
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pos$40351[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _pos$40351[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
; Line 747
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN51@find@2
; Line 748
	xor	al, al
	jmp	$LN88@find@2
$LN51@find@2:
; Line 750
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN50@find@2
; Line 751
	mov	al, 1
	jmp	$LN88@find@2
$LN50@find@2:
; Line 753
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$40351[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _pos$40351[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$40357[ebp], edx
	mov	DWORD PTR ___offset$40357[ebp+4], eax
	cmp	DWORD PTR ___offset$40357[ebp+4], 0
	jl	SHORT $LN49@find@2
	jg	SHORT $LN146@find@2
	cmp	DWORD PTR ___offset$40357[ebp], 0
	jb	SHORT $LN49@find@2
$LN146@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv1666[ebp], eax
	mov	DWORD PTR tv1666[ebp+4], edx
	mov	edx, DWORD PTR ___offset$40357[ebp+4]
	cmp	edx, DWORD PTR tv1666[ebp+4]
	jg	SHORT $LN49@find@2
	jl	SHORT $LN147@find@2
	mov	eax, DWORD PTR ___offset$40357[ebp]
	cmp	eax, DWORD PTR tv1666[ebp]
	ja	SHORT $LN49@find@2
$LN147@find@2:
	mov	eax, DWORD PTR ___offset$40357[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN54@find@2
$LN49@find@2:
	mov	eax, DWORD PTR _pos$40351[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$40351[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN54@find@2:
; Line 755
	mov	eax, DWORD PTR _startPos$[ebp+4]
	cmp	eax, DWORD PTR _testStartLimit$[ebp+4]
	jl	SHORT $LN47@find@2
	jg	SHORT $LN148@find@2
	mov	ecx, DWORD PTR _startPos$[ebp]
	cmp	ecx, DWORD PTR _testStartLimit$[ebp]
	jbe	SHORT $LN47@find@2
$LN148@find@2:
; Line 756
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 757
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 758
	xor	al, al
	jmp	$LN88@find@2
$LN47@find@2:
; Line 760
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findProgressInterrupt
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN46@find@2
; Line 761
	xor	al, al
	jmp	$LN88@find@2
$LN46@find@2:
; Line 762
	jmp	$LN56@find@2
; Line 764
	xor	eax, eax
	jne	SHORT $LN45@find@2
	mov	ecx, DWORD PTR ?__LINE__Var@?1??find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z@4JA
	add	ecx, 142				; 0000008eH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN45@find@2:
; Line 770
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+96], 0
	jg	SHORT $LN106@find@2
	mov	edx, DWORD PTR ?__LINE__Var@?1??find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z@4JA
	add	edx, 148				; 00000094H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DG@GIKABGGP@?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAM?$AAi?$AAn?$AAM?$AAa?$AAt?$AAc?$AAh?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN106@find@2:
; Line 771
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR _theChar$40367[ebp], edx
; Line 772
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _startPos$[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _startPos$[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$40368[ebp], edx
	mov	DWORD PTR ___offset$40368[ebp+4], eax
	cmp	DWORD PTR ___offset$40368[ebp+4], 0
	jl	SHORT $LN44@find@2
	jg	SHORT $LN149@find@2
	cmp	DWORD PTR ___offset$40368[ebp], 0
	jb	SHORT $LN44@find@2
$LN149@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv1722[ebp], eax
	mov	DWORD PTR tv1722[ebp+4], edx
	mov	edx, DWORD PTR ___offset$40368[ebp+4]
	cmp	edx, DWORD PTR tv1722[ebp+4]
	jg	SHORT $LN44@find@2
	jl	SHORT $LN150@find@2
	mov	eax, DWORD PTR ___offset$40368[ebp]
	cmp	eax, DWORD PTR tv1722[ebp]
	ja	SHORT $LN44@find@2
$LN150@find@2:
	mov	eax, DWORD PTR ___offset$40368[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN42@find@2
$LN44@find@2:
	mov	eax, DWORD PTR _startPos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN42@find@2:
; Line 774
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	DWORD PTR _pos$40376[ebp], eax
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	mov	DWORD PTR _pos$40376[ebp+4], ecx
; Line 775
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN107@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN107@find@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv514[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN108@find@2
$LN107@find@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv514[ebp], eax
$LN108@find@2:
	mov	ecx, DWORD PTR tv514[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 776
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN109@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv532[ebp], eax
	mov	DWORD PTR tv532[ebp+4], edx
	jmp	SHORT $LN110@find@2
$LN109@find@2:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv532[ebp], eax
	mov	DWORD PTR tv532[ebp+4], edx
$LN110@find@2:
	mov	ecx, DWORD PTR tv532[ebp]
	mov	DWORD PTR _startPos$[ebp], ecx
	mov	edx, DWORD PTR tv532[ebp+4]
	mov	DWORD PTR _startPos$[ebp+4], edx
; Line 777
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _theChar$40367[ebp]
	jne	$LN40@find@2
; Line 778
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pos$40376[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _pos$40376[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
; Line 779
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN39@find@2
; Line 780
	xor	al, al
	jmp	$LN88@find@2
$LN39@find@2:
; Line 782
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN38@find@2
; Line 783
	mov	al, 1
	jmp	$LN88@find@2
$LN38@find@2:
; Line 785
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$40376[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _pos$40376[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$40380[ebp], edx
	mov	DWORD PTR ___offset$40380[ebp+4], eax
	cmp	DWORD PTR ___offset$40380[ebp+4], 0
	jl	SHORT $LN37@find@2
	jg	SHORT $LN151@find@2
	cmp	DWORD PTR ___offset$40380[ebp], 0
	jb	SHORT $LN37@find@2
$LN151@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv1809[ebp], eax
	mov	DWORD PTR tv1809[ebp+4], edx
	mov	edx, DWORD PTR ___offset$40380[ebp+4]
	cmp	edx, DWORD PTR tv1809[ebp+4]
	jg	SHORT $LN37@find@2
	jl	SHORT $LN152@find@2
	mov	eax, DWORD PTR ___offset$40380[ebp]
	cmp	eax, DWORD PTR tv1809[ebp]
	ja	SHORT $LN37@find@2
$LN152@find@2:
	mov	eax, DWORD PTR ___offset$40380[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN40@find@2
$LN37@find@2:
	mov	eax, DWORD PTR _pos$40376[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$40376[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN40@find@2:
; Line 787
	mov	eax, DWORD PTR _startPos$[ebp+4]
	cmp	eax, DWORD PTR _testStartLimit$[ebp+4]
	jl	SHORT $LN35@find@2
	jg	SHORT $LN153@find@2
	mov	ecx, DWORD PTR _startPos$[ebp]
	cmp	ecx, DWORD PTR _testStartLimit$[ebp]
	jbe	SHORT $LN35@find@2
$LN153@find@2:
; Line 788
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 789
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 790
	xor	al, al
	jmp	$LN88@find@2
$LN35@find@2:
; Line 792
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findProgressInterrupt
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN34@find@2
; Line 793
	xor	al, al
	jmp	$LN88@find@2
$LN34@find@2:
; Line 794
	jmp	$LN42@find@2
; Line 796
	xor	eax, eax
	jne	SHORT $LN33@find@2
	mov	ecx, DWORD PTR ?__LINE__Var@?1??find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z@4JA
	add	ecx, 174				; 000000aeH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN33@find@2:
; Line 801
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv1843[ebp], eax
	mov	ecx, DWORD PTR tv1843[ebp]
	mov	edx, DWORD PTR _startPos$[ebp]
	cmp	edx, DWORD PTR [ecx+56]
	jne	$LN32@find@2
	mov	eax, DWORD PTR tv1843[ebp]
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	cmp	ecx, DWORD PTR [eax+60]
	jne	$LN32@find@2
; Line 802
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
; Line 803
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN31@find@2
; Line 804
	xor	al, al
	jmp	$LN88@find@2
$LN31@find@2:
; Line 806
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN30@find@2
; Line 807
	mov	al, 1
	jmp	$LN88@find@2
$LN30@find@2:
; Line 809
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _startPos$[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _startPos$[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$40393[ebp], edx
	mov	DWORD PTR ___offset$40393[ebp+4], eax
	cmp	DWORD PTR ___offset$40393[ebp+4], 0
	jl	SHORT $LN29@find@2
	jg	SHORT $LN154@find@2
	cmp	DWORD PTR ___offset$40393[ebp], 0
	jb	SHORT $LN29@find@2
$LN154@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv1876[ebp], eax
	mov	DWORD PTR tv1876[ebp+4], edx
	mov	edx, DWORD PTR ___offset$40393[ebp+4]
	cmp	edx, DWORD PTR tv1876[ebp+4]
	jg	SHORT $LN29@find@2
	jl	SHORT $LN155@find@2
	mov	eax, DWORD PTR ___offset$40393[ebp]
	cmp	eax, DWORD PTR tv1876[ebp]
	ja	SHORT $LN29@find@2
$LN155@find@2:
	mov	eax, DWORD PTR ___offset$40393[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN28@find@2
$LN29@find@2:
	mov	eax, DWORD PTR _startPos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN28@find@2:
; Line 810
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN112@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN112@find@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv629[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN113@find@2
$LN112@find@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv629[ebp], eax
$LN113@find@2:
	mov	ecx, DWORD PTR tv629[ebp]
	mov	DWORD PTR _c$40389[ebp], ecx
; Line 811
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN114@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv647[ebp], eax
	mov	DWORD PTR tv647[ebp+4], edx
	jmp	SHORT $LN115@find@2
$LN114@find@2:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv647[ebp], eax
	mov	DWORD PTR tv647[ebp+4], edx
$LN115@find@2:
	mov	ecx, DWORD PTR tv647[ebp]
	mov	DWORD PTR _startPos$[ebp], ecx
	mov	edx, DWORD PTR tv647[ebp+4]
	mov	DWORD PTR _startPos$[ebp+4], edx
; Line 812
	jmp	$LN27@find@2
$LN32@find@2:
; Line 813
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _startPos$[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _startPos$[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$40399[ebp], edx
	mov	DWORD PTR ___offset$40399[ebp+4], eax
	cmp	DWORD PTR ___offset$40399[ebp+4], 0
	jl	SHORT $LN26@find@2
	jg	SHORT $LN156@find@2
	cmp	DWORD PTR ___offset$40399[ebp], 0
	jb	SHORT $LN26@find@2
$LN156@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv1949[ebp], eax
	mov	DWORD PTR tv1949[ebp+4], edx
	mov	edx, DWORD PTR ___offset$40399[ebp+4]
	cmp	edx, DWORD PTR tv1949[ebp+4]
	jg	SHORT $LN26@find@2
	jl	SHORT $LN157@find@2
	mov	eax, DWORD PTR ___offset$40399[ebp]
	cmp	eax, DWORD PTR tv1949[ebp]
	ja	SHORT $LN26@find@2
$LN157@find@2:
	mov	eax, DWORD PTR ___offset$40399[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN25@find@2
$LN26@find@2:
	mov	eax, DWORD PTR _startPos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN25@find@2:
; Line 814
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN116@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN116@find@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv680[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv680[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv680[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv687[ebp], edx
	jmp	SHORT $LN117@find@2
$LN116@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv687[ebp], eax
$LN117@find@2:
	mov	edx, DWORD PTR tv687[ebp]
	mov	DWORD PTR _c$40389[ebp], edx
; Line 815
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _startPos$[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _startPos$[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$40404[ebp], edx
	mov	DWORD PTR ___offset$40404[ebp+4], eax
	cmp	DWORD PTR ___offset$40404[ebp+4], 0
	jl	SHORT $LN24@find@2
	jg	SHORT $LN158@find@2
	cmp	DWORD PTR ___offset$40404[ebp], 0
	jb	SHORT $LN24@find@2
$LN158@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv1994[ebp], eax
	mov	DWORD PTR tv1994[ebp+4], edx
	mov	edx, DWORD PTR ___offset$40404[ebp+4]
	cmp	edx, DWORD PTR tv1994[ebp+4]
	jg	SHORT $LN24@find@2
	jl	SHORT $LN159@find@2
	mov	eax, DWORD PTR ___offset$40404[ebp]
	cmp	eax, DWORD PTR tv1994[ebp]
	ja	SHORT $LN24@find@2
$LN159@find@2:
	mov	eax, DWORD PTR ___offset$40404[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN27@find@2
$LN24@find@2:
	mov	eax, DWORD PTR _startPos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN27@find@2:
; Line 818
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 1
	je	$LN11@find@2
$LN21@find@2:
; Line 820
	cmp	DWORD PTR _c$40389[ebp], 10		; 0000000aH
	jne	$LN19@find@2
; Line 821
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
; Line 822
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN18@find@2
; Line 823
	xor	al, al
	jmp	$LN88@find@2
$LN18@find@2:
; Line 825
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN17@find@2
; Line 826
	mov	al, 1
	jmp	$LN88@find@2
$LN17@find@2:
; Line 828
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _startPos$[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _startPos$[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$40416[ebp], edx
	mov	DWORD PTR ___offset$40416[ebp+4], eax
	cmp	DWORD PTR ___offset$40416[ebp+4], 0
	jl	SHORT $LN16@find@2
	jg	SHORT $LN160@find@2
	cmp	DWORD PTR ___offset$40416[ebp], 0
	jb	SHORT $LN16@find@2
$LN160@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv2037[ebp], eax
	mov	DWORD PTR tv2037[ebp+4], edx
	mov	edx, DWORD PTR ___offset$40416[ebp+4]
	cmp	edx, DWORD PTR tv2037[ebp+4]
	jg	SHORT $LN16@find@2
	jl	SHORT $LN161@find@2
	mov	eax, DWORD PTR ___offset$40416[ebp]
	cmp	eax, DWORD PTR tv2037[ebp]
	ja	SHORT $LN16@find@2
$LN161@find@2:
	mov	eax, DWORD PTR ___offset$40416[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN19@find@2
$LN16@find@2:
	mov	eax, DWORD PTR _startPos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN19@find@2:
; Line 830
	mov	eax, DWORD PTR _startPos$[ebp+4]
	cmp	eax, DWORD PTR _testStartLimit$[ebp+4]
	jl	SHORT $LN14@find@2
	jg	SHORT $LN162@find@2
	mov	ecx, DWORD PTR _startPos$[ebp]
	cmp	ecx, DWORD PTR _testStartLimit$[ebp]
	jb	SHORT $LN14@find@2
$LN162@find@2:
; Line 831
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 832
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 833
	xor	al, al
	jmp	$LN88@find@2
$LN14@find@2:
; Line 835
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN118@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN118@find@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv763[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN119@find@2
$LN118@find@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv763[ebp], eax
$LN119@find@2:
	mov	ecx, DWORD PTR tv763[ebp]
	mov	DWORD PTR _c$40389[ebp], ecx
; Line 836
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN120@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv781[ebp], eax
	mov	DWORD PTR tv781[ebp+4], edx
	jmp	SHORT $LN121@find@2
$LN120@find@2:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv781[ebp], eax
	mov	DWORD PTR tv781[ebp+4], edx
$LN121@find@2:
	mov	ecx, DWORD PTR tv781[ebp]
	mov	DWORD PTR _startPos$[ebp], ecx
	mov	edx, DWORD PTR tv781[ebp+4]
	mov	DWORD PTR _startPos$[ebp+4], edx
; Line 840
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findProgressInterrupt
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN13@find@2
; Line 841
	xor	al, al
	jmp	$LN88@find@2
$LN13@find@2:
; Line 842
	jmp	$LN21@find@2
	jmp	$LN1@find@2
$LN11@find@2:
; Line 845
	mov	eax, DWORD PTR _c$40389[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN9@find@2
; Line 846
	cmp	DWORD PTR _c$40389[ebp], 13		; 0000000dH
	jne	$LN8@find@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv2111[ebp], eax
	mov	ecx, DWORD PTR tv2111[ebp]
	mov	edx, DWORD PTR _startPos$[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jg	$LN8@find@2
	jl	SHORT $LN163@find@2
	mov	eax, DWORD PTR tv2111[ebp]
	mov	ecx, DWORD PTR _startPos$[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jae	$LN8@find@2
$LN163@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN122@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN122@find@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv818[ebp], edx
	jmp	SHORT $LN123@find@2
$LN122@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_current32_56
	add	esp, 4
	mov	DWORD PTR tv818[ebp], eax
$LN123@find@2:
	cmp	DWORD PTR tv818[ebp], 10		; 0000000aH
	jne	$LN8@find@2
; Line 847
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN124@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN124@find@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv848[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN125@find@2
$LN124@find@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv848[ebp], eax
$LN125@find@2:
; Line 848
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN126@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv866[ebp], eax
	mov	DWORD PTR tv866[ebp+4], edx
	jmp	SHORT $LN127@find@2
$LN126@find@2:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv866[ebp], eax
	mov	DWORD PTR tv866[ebp+4], edx
$LN127@find@2:
	mov	ecx, DWORD PTR tv866[ebp]
	mov	DWORD PTR _startPos$[ebp], ecx
	mov	edx, DWORD PTR tv866[ebp+4]
	mov	DWORD PTR _startPos$[ebp+4], edx
$LN8@find@2:
; Line 850
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
; Line 851
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@find@2
; Line 852
	xor	al, al
	jmp	$LN88@find@2
$LN7@find@2:
; Line 854
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN6@find@2
; Line 855
	mov	al, 1
	jmp	$LN88@find@2
$LN6@find@2:
; Line 857
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _startPos$[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _startPos$[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$40432[ebp], edx
	mov	DWORD PTR ___offset$40432[ebp+4], eax
	cmp	DWORD PTR ___offset$40432[ebp+4], 0
	jl	SHORT $LN5@find@2
	jg	SHORT $LN164@find@2
	cmp	DWORD PTR ___offset$40432[ebp], 0
	jb	SHORT $LN5@find@2
$LN164@find@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv2197[ebp], eax
	mov	DWORD PTR tv2197[ebp+4], edx
	mov	edx, DWORD PTR ___offset$40432[ebp+4]
	cmp	edx, DWORD PTR tv2197[ebp+4]
	jg	SHORT $LN5@find@2
	jl	SHORT $LN165@find@2
	mov	eax, DWORD PTR ___offset$40432[ebp]
	cmp	eax, DWORD PTR tv2197[ebp]
	ja	SHORT $LN5@find@2
$LN165@find@2:
	mov	eax, DWORD PTR ___offset$40432[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN9@find@2
$LN5@find@2:
	mov	eax, DWORD PTR _startPos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN9@find@2:
; Line 859
	mov	eax, DWORD PTR _startPos$[ebp+4]
	cmp	eax, DWORD PTR _testStartLimit$[ebp+4]
	jl	SHORT $LN3@find@2
	jg	SHORT $LN166@find@2
	mov	ecx, DWORD PTR _startPos$[ebp]
	cmp	ecx, DWORD PTR _testStartLimit$[ebp]
	jb	SHORT $LN3@find@2
$LN166@find@2:
; Line 860
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 861
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 862
	xor	al, al
	jmp	$LN88@find@2
$LN3@find@2:
; Line 864
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN128@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN128@find@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv923[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN129@find@2
$LN128@find@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv923[ebp], eax
$LN129@find@2:
	mov	ecx, DWORD PTR tv923[ebp]
	mov	DWORD PTR _c$40389[ebp], ecx
; Line 865
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN130@find@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv941[ebp], eax
	mov	DWORD PTR tv941[ebp+4], edx
	jmp	SHORT $LN131@find@2
$LN130@find@2:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv941[ebp], eax
	mov	DWORD PTR tv941[ebp+4], edx
$LN131@find@2:
	mov	ecx, DWORD PTR tv941[ebp]
	mov	DWORD PTR _startPos$[ebp], ecx
	mov	edx, DWORD PTR tv941[ebp+4]
	mov	DWORD PTR _startPos$[ebp+4], edx
; Line 869
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findProgressInterrupt
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@find@2
; Line 870
	xor	al, al
	jmp	SHORT $LN88@find@2
$LN2@find@2:
; Line 871
	jmp	$LN11@find@2
$LN1@find@2:
; Line 876
	xor	eax, eax
	jne	SHORT $LN72@find@2
	mov	ecx, DWORD PTR ?__LINE__Var@?1??find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z@4JA
	add	ecx, 254				; 000000feH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN72@find@2:
; Line 879
	xor	eax, eax
	jne	SHORT $LN133@find@2
	mov	ecx, DWORD PTR ?__LINE__Var@?1??find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z@4JA
	add	ecx, 257				; 00000101H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN133@find@2:
; Line 880
	xor	al, al
$LN88@find@2:
; Line 881
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 492				; 000001ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN167@find@2:
	DD	$LN70@find@2
	DD	$LN45@find@2
	DD	$LN59@find@2
	DD	$LN62@find@2
	DD	$LN33@find@2
	DD	$LN45@find@2
?find@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z ENDP	; icu_56::RegexMatcher::find
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?contains@Regex8BitSet@icu_56@@QAECH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
?contains@Regex8BitSet@icu_56@@QAECH@Z PROC		; icu_56::Regex8BitSet::contains, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\regeximp.h
; Line 334
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 336
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 7
	mov	eax, 1
	shl	eax, cl
	and	edx, eax
	setne	al
; Line 337
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?contains@Regex8BitSet@icu_56@@QAECH@Z ENDP		; icu_56::Regex8BitSet::contains
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isLineTerminator@icu_56@@YACH@Z
_TEXT	SEGMENT
tv71 = -193						; size = 1
_c$ = 8							; size = 4
?isLineTerminator@icu_56@@YACH@Z PROC			; icu_56::isLineTerminator, COMDAT
; File d:\mozilla\intl\icu\source\i18n\rematch.cpp
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 55
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -8368				; ffffdf50H
	je	SHORT $LN1@isLineTerm
; Line 56
	xor	al, al
	jmp	SHORT $LN2@isLineTerm
$LN1@isLineTerm:
; Line 58
	cmp	DWORD PTR _c$[ebp], 13			; 0000000dH
	jg	SHORT $LN4@isLineTerm
	cmp	DWORD PTR _c$[ebp], 10			; 0000000aH
	jge	SHORT $LN5@isLineTerm
$LN4@isLineTerm:
	cmp	DWORD PTR _c$[ebp], 133			; 00000085H
	je	SHORT $LN5@isLineTerm
	cmp	DWORD PTR _c$[ebp], 8232		; 00002028H
	je	SHORT $LN5@isLineTerm
	cmp	DWORD PTR _c$[ebp], 8233		; 00002029H
	je	SHORT $LN5@isLineTerm
	mov	BYTE PTR tv71[ebp], 0
	jmp	SHORT $LN6@isLineTerm
$LN5@isLineTerm:
	mov	BYTE PTR tv71[ebp], 1
$LN6@isLineTerm:
	mov	al, BYTE PTR tv71[ebp]
$LN2@isLineTerm:
; Line 59
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isLineTerminator@icu_56@@YACH@Z ENDP			; icu_56::isLineTerminator
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?find@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv152 = -224						; size = 4
tv144 = -224						; size = 4
_nativeStart$ = -24					; size = 8
_this$ = -8						; size = 4
_start$ = 8						; size = 8
_status$ = 16						; size = 4
?find@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::find, COMDAT
; _this$ = ecx
; Line 885
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 886
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@find@3
; Line 887
	xor	al, al
	jmp	$LN6@find@3
$LN5@find@3:
; Line 889
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@find@3
; Line 890
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 891
	xor	al, al
	jmp	$LN6@find@3
$LN4@find@3:
; Line 893
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 895
	cmp	DWORD PTR _start$[ebp+4], 0
	jg	SHORT $LN3@find@3
	jl	SHORT $LN8@find@3
	cmp	DWORD PTR _start$[ebp], 0
	jae	SHORT $LN3@find@3
$LN8@find@3:
; Line 896
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 897
	xor	al, al
	jmp	$LN6@find@3
$LN3@find@3:
; Line 900
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _nativeStart$[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp+4]
	mov	DWORD PTR _nativeStart$[ebp+4], ecx
; Line 901
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR tv144[ebp]
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	cmp	edx, DWORD PTR [ecx+92]
	jl	SHORT $LN1@find@3
	jg	SHORT $LN9@find@3
	mov	eax, DWORD PTR tv144[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+88]
	jb	SHORT $LN1@find@3
$LN9@find@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv152[ebp], eax
	mov	ecx, DWORD PTR tv152[ebp]
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN2@find@3
	jg	SHORT $LN1@find@3
	mov	eax, DWORD PTR tv152[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jbe	SHORT $LN2@find@3
$LN1@find@3:
; Line 902
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 903
	xor	al, al
	jmp	SHORT $LN6@find@3
$LN2@find@3:
; Line 905
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	mov	DWORD PTR [eax+120], ecx
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	mov	DWORD PTR [eax+124], edx
; Line 906
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@find@3:
; Line 907
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?find@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::find
_TEXT	ENDS
PUBLIC	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
PUBLIC	?__LINE__Var@?1??findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z@4JA ; `icu_56::RegexMatcher::findUsingChunk'::`2'::__LINE__Var
;	COMDAT ?__LINE__Var@?1??findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z@4JA DD 0394H ; `icu_56::RegexMatcher::findUsingChunk'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv952 = -336						; size = 4
tv917 = -336						; size = 4
tv883 = -336						; size = 4
tv845 = -336						; size = 4
tv818 = -336						; size = 4
tv768 = -336						; size = 4
tv697 = -336						; size = 4
tv660 = -336						; size = 4
tv625 = -336						; size = 4
tv559 = -336						; size = 4
tv536 = -336						; size = 4
tv949 = -332						; size = 8
tv914 = -332						; size = 8
tv880 = -332						; size = 8
tv842 = -332						; size = 8
tv815 = -332						; size = 8
tv765 = -332						; size = 8
tv694 = -332						; size = 8
tv657 = -332						; size = 8
tv622 = -332						; size = 8
tv556 = -332						; size = 8
tv533 = -332						; size = 8
tv518 = -332						; size = 4
tv569 = -328						; size = 4
tv517 = -328						; size = 4
tv462 = -328						; size = 4
tv407 = -328						; size = 4
tv367 = -328						; size = 4
tv173 = -328						; size = 4
tv153 = -328						; size = 4
tv90 = -328						; size = 4
_c$40529 = -128						; size = 4
___c2$40518 = -116					; size = 2
_pos$40516 = -104					; size = 4
_theChar$40512 = -92					; size = 4
___c2$40498 = -80					; size = 2
_pos$40496 = -68					; size = 4
_c$ = -56						; size = 4
_testLen$ = -44						; size = 4
_inputBuf$ = -32					; size = 4
_startPos$ = -20					; size = 4
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::findUsingChunk, COMDAT
; _this$ = ecx
; Line 916
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 921
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _startPos$[ebp], ecx
; Line 922
	cmp	DWORD PTR _startPos$[ebp], 0
	jne	SHORT $LN68@findUsingC
; Line 923
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _startPos$[ebp], ecx
$LN68@findUsingC:
; Line 926
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _inputBuf$[ebp], edx
; Line 928
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	$LN67@findUsingC
; Line 930
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+128], edx
	mov	ecx, DWORD PTR [ecx+124]
	mov	DWORD PTR [eax+132], ecx
; Line 932
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv517[ebp], eax
	mov	DWORD PTR tv518[ebp], ecx
	mov	edx, DWORD PTR tv517[ebp]
	mov	eax, DWORD PTR tv518[ebp]
	mov	ecx, DWORD PTR [edx+112]
	cmp	ecx, DWORD PTR [eax+120]
	jne	$LN66@findUsingC
	mov	edx, DWORD PTR tv517[ebp]
	mov	eax, DWORD PTR tv518[ebp]
	mov	ecx, DWORD PTR [edx+116]
	cmp	ecx, DWORD PTR [eax+124]
	jne	$LN66@findUsingC
; Line 935
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv533[ebp], eax
	mov	DWORD PTR tv533[ebp+4], edx
	mov	DWORD PTR tv536[ebp], ecx
	mov	edx, DWORD PTR tv536[ebp]
	mov	eax, DWORD PTR tv533[ebp+4]
	cmp	eax, DWORD PTR [edx+100]
	jl	SHORT $LN65@findUsingC
	jg	SHORT $LN89@findUsingC
	mov	ecx, DWORD PTR tv536[ebp]
	mov	edx, DWORD PTR tv533[ebp]
	cmp	edx, DWORD PTR [ecx+96]
	jb	SHORT $LN65@findUsingC
$LN89@findUsingC:
; Line 936
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 937
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 938
	xor	al, al
	jmp	$LN69@findUsingC
$LN65@findUsingC:
; Line 940
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN71@findUsingC
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN72@findUsingC
$LN71@findUsingC:
	mov	DWORD PTR tv90[ebp], 0
$LN72@findUsingC:
	cmp	DWORD PTR tv90[ebp], 0
	je	SHORT $LN66@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv556[ebp], eax
	mov	DWORD PTR tv556[ebp+4], edx
	mov	DWORD PTR tv559[ebp], ecx
	mov	edx, DWORD PTR tv559[ebp]
	mov	eax, DWORD PTR tv556[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jne	SHORT $LN90@findUsingC
	mov	ecx, DWORD PTR tv559[ebp]
	mov	edx, DWORD PTR tv556[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	je	SHORT $LN66@findUsingC
$LN90@findUsingC:
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN66@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
$LN66@findUsingC:
; Line 942
	jmp	SHORT $LN63@findUsingC
$LN67@findUsingC:
; Line 943
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv569[ebp], eax
	mov	ecx, DWORD PTR tv569[ebp]
	cmp	DWORD PTR [ecx+132], 0
	jl	SHORT $LN63@findUsingC
	jg	SHORT $LN91@findUsingC
	mov	edx, DWORD PTR tv569[ebp]
	cmp	DWORD PTR [edx+128], 0
	jb	SHORT $LN63@findUsingC
$LN91@findUsingC:
; Line 947
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 948
	xor	al, al
	jmp	$LN69@findUsingC
$LN63@findUsingC:
; Line 958
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+96]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+96]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+100]
	sbb	eax, edx
	mov	DWORD PTR _testLen$[ebp], esi
; Line 959
	mov	eax, DWORD PTR _startPos$[ebp]
	cmp	eax, DWORD PTR _testLen$[ebp]
	jle	SHORT $LN61@findUsingC
; Line 960
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 961
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 962
	xor	al, al
	jmp	$LN69@findUsingC
$LN61@findUsingC:
; Line 966
	cmp	DWORD PTR _startPos$[ebp], 0
	jge	SHORT $LN73@findUsingC
	mov	eax, DWORD PTR ?__LINE__Var@?1??findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z@4JA
	add	eax, 50					; 00000032H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BM@NJLOMBGK@?$AAs?$AAt?$AAa?$AAr?$AAt?$AAP?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN73@findUsingC:
; Line 968
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR tv153[ebp], edx
	cmp	DWORD PTR tv153[ebp], 5
	ja	$LN1@findUsingC
	mov	eax, DWORD PTR tv153[ebp]
	jmp	DWORD PTR $LN100@findUsingC[eax*4]
$LN57@findUsingC:
; Line 973
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
; Line 974
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN55@findUsingC
; Line 975
	xor	al, al
	jmp	$LN69@findUsingC
$LN55@findUsingC:
; Line 977
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN54@findUsingC
; Line 978
	mov	al, 1
	jmp	$LN69@findUsingC
$LN54@findUsingC:
; Line 980
	mov	eax, DWORD PTR _startPos$[ebp]
	cmp	eax, DWORD PTR _testLen$[ebp]
	jl	SHORT $LN53@findUsingC
; Line 981
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 982
	xor	al, al
	jmp	$LN69@findUsingC
$LN53@findUsingC:
; Line 984
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN74@findUsingC
	mov	DWORD PTR tv173[ebp], 1
	jmp	SHORT $LN75@findUsingC
$LN74@findUsingC:
	mov	DWORD PTR tv173[ebp], 0
$LN75@findUsingC:
	cmp	DWORD PTR tv173[ebp], 0
	je	SHORT $LN52@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv622[ebp], eax
	mov	DWORD PTR tv622[ebp+4], edx
	mov	DWORD PTR tv625[ebp], ecx
	mov	edx, DWORD PTR tv625[ebp]
	mov	eax, DWORD PTR tv622[ebp]
	cmp	eax, DWORD PTR [edx+96]
	jne	SHORT $LN92@findUsingC
	mov	ecx, DWORD PTR tv625[ebp]
	mov	edx, DWORD PTR tv622[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	je	SHORT $LN52@findUsingC
$LN92@findUsingC:
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN52@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
$LN52@findUsingC:
; Line 988
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findProgressInterrupt
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN51@findUsingC
; Line 989
	xor	al, al
	jmp	$LN69@findUsingC
$LN51@findUsingC:
; Line 990
	jmp	$LN57@findUsingC
; Line 991
	xor	eax, eax
	jne	SHORT $LN50@findUsingC
	mov	ecx, DWORD PTR ?__LINE__Var@?1??findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z@4JA
	add	ecx, 75					; 0000004bH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN50@findUsingC:
; Line 996
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv657[ebp], eax
	mov	DWORD PTR tv657[ebp+4], edx
	mov	DWORD PTR tv660[ebp], ecx
	mov	edx, DWORD PTR tv660[ebp]
	mov	eax, DWORD PTR tv657[ebp+4]
	cmp	eax, DWORD PTR [edx+92]
	jl	SHORT $LN49@findUsingC
	jg	SHORT $LN93@findUsingC
	mov	ecx, DWORD PTR tv660[ebp]
	mov	edx, DWORD PTR tv657[ebp]
	cmp	edx, DWORD PTR [ecx+88]
	jbe	SHORT $LN49@findUsingC
$LN93@findUsingC:
; Line 997
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 998
	xor	al, al
	jmp	$LN69@findUsingC
$LN49@findUsingC:
; Line 1000
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
; Line 1001
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN48@findUsingC
; Line 1002
	xor	al, al
	jmp	$LN69@findUsingC
$LN48@findUsingC:
; Line 1004
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+106]
	jmp	$LN69@findUsingC
$LN47@findUsingC:
; Line 1010
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+96], 0
	jg	SHORT $LN46@findUsingC
	mov	edx, DWORD PTR ?__LINE__Var@?1??findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z@4JA
	add	edx, 94					; 0000005eH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DG@GIKABGGP@?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAM?$AAi?$AAn?$AAM?$AAa?$AAt?$AAc?$AAh?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN46@findUsingC:
; Line 1012
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	DWORD PTR _pos$40496[ebp], eax
; Line 1013
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN44@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv694[ebp], eax
	mov	DWORD PTR tv694[ebp+4], edx
	mov	DWORD PTR tv697[ebp], ecx
	mov	edx, DWORD PTR tv697[ebp]
	mov	eax, DWORD PTR tv694[ebp]
	cmp	eax, DWORD PTR [edx+96]
	jne	SHORT $LN94@findUsingC
	mov	ecx, DWORD PTR tv697[ebp]
	mov	edx, DWORD PTR tv694[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	je	SHORT $LN44@findUsingC
$LN94@findUsingC:
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$40498[ebp], dx
	movzx	eax, WORD PTR ___c2$40498[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN44@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$40498[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$[ebp], edx
$LN44@findUsingC:
; Line 1015
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN40@findUsingC
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+140]
	call	?contains@Regex8BitSet@icu_56@@QAECH@Z	; icu_56::Regex8BitSet::contains
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN41@findUsingC
$LN40@findUsingC:
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jl	SHORT $LN42@findUsingC
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+132]
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN42@findUsingC
$LN41@findUsingC:
; Line 1016
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pos$40496[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
; Line 1017
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN39@findUsingC
; Line 1018
	xor	al, al
	jmp	$LN69@findUsingC
$LN39@findUsingC:
; Line 1020
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN42@findUsingC
; Line 1021
	mov	al, 1
	jmp	$LN69@findUsingC
$LN42@findUsingC:
; Line 1024
	mov	eax, DWORD PTR _startPos$[ebp]
	cmp	eax, DWORD PTR _testLen$[ebp]
	jle	SHORT $LN37@findUsingC
; Line 1025
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 1026
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 1027
	xor	al, al
	jmp	$LN69@findUsingC
$LN37@findUsingC:
; Line 1029
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findProgressInterrupt
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN36@findUsingC
; Line 1030
	xor	al, al
	jmp	$LN69@findUsingC
$LN36@findUsingC:
; Line 1031
	jmp	$LN46@findUsingC
; Line 1033
	xor	eax, eax
	jne	SHORT $LN35@findUsingC
	mov	ecx, DWORD PTR ?__LINE__Var@?1??findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z@4JA
	add	ecx, 117				; 00000075H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@findUsingC:
; Line 1039
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+96], 0
	jg	SHORT $LN79@findUsingC
	mov	edx, DWORD PTR ?__LINE__Var@?1??findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z@4JA
	add	edx, 123				; 0000007bH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DG@GIKABGGP@?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAM?$AAi?$AAn?$AAM?$AAa?$AAt?$AAc?$AAh?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN79@findUsingC:
; Line 1040
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR _theChar$40512[ebp], edx
$LN34@findUsingC:
; Line 1042
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	DWORD PTR _pos$40516[ebp], eax
; Line 1043
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN32@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv765[ebp], eax
	mov	DWORD PTR tv765[ebp+4], edx
	mov	DWORD PTR tv768[ebp], ecx
	mov	edx, DWORD PTR tv768[ebp]
	mov	eax, DWORD PTR tv765[ebp]
	cmp	eax, DWORD PTR [edx+96]
	jne	SHORT $LN95@findUsingC
	mov	ecx, DWORD PTR tv768[ebp]
	mov	edx, DWORD PTR tv765[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	je	SHORT $LN32@findUsingC
$LN95@findUsingC:
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$40518[ebp], dx
	movzx	eax, WORD PTR ___c2$40518[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN32@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$40518[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$[ebp], edx
$LN32@findUsingC:
; Line 1044
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _theChar$40512[ebp]
	jne	SHORT $LN30@findUsingC
; Line 1045
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pos$40516[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
; Line 1046
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN29@findUsingC
; Line 1047
	xor	al, al
	jmp	$LN69@findUsingC
$LN29@findUsingC:
; Line 1049
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN30@findUsingC
; Line 1050
	mov	al, 1
	jmp	$LN69@findUsingC
$LN30@findUsingC:
; Line 1053
	mov	eax, DWORD PTR _startPos$[ebp]
	cmp	eax, DWORD PTR _testLen$[ebp]
	jle	SHORT $LN27@findUsingC
; Line 1054
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 1055
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 1056
	xor	al, al
	jmp	$LN69@findUsingC
$LN27@findUsingC:
; Line 1058
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findProgressInterrupt
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN26@findUsingC
; Line 1059
	xor	al, al
	jmp	$LN69@findUsingC
$LN26@findUsingC:
; Line 1060
	jmp	$LN34@findUsingC
; Line 1062
	xor	eax, eax
	jne	SHORT $LN25@findUsingC
	mov	ecx, DWORD PTR ?__LINE__Var@?1??findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z@4JA
	add	ecx, 146				; 00000092H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@findUsingC:
; Line 1067
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv815[ebp], eax
	mov	DWORD PTR tv815[ebp+4], edx
	mov	DWORD PTR tv818[ebp], ecx
	mov	edx, DWORD PTR tv818[ebp]
	mov	eax, DWORD PTR tv815[ebp]
	cmp	eax, DWORD PTR [edx+56]
	jne	$LN24@findUsingC
	mov	ecx, DWORD PTR tv818[ebp]
	mov	edx, DWORD PTR tv815[ebp+4]
	cmp	edx, DWORD PTR [ecx+60]
	jne	$LN24@findUsingC
; Line 1068
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
; Line 1069
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN23@findUsingC
; Line 1070
	xor	al, al
	jmp	$LN69@findUsingC
$LN23@findUsingC:
; Line 1072
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN22@findUsingC
; Line 1073
	mov	al, 1
	jmp	$LN69@findUsingC
$LN22@findUsingC:
; Line 1075
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN81@findUsingC
	mov	DWORD PTR tv367[ebp], 1
	jmp	SHORT $LN82@findUsingC
$LN81@findUsingC:
	mov	DWORD PTR tv367[ebp], 0
$LN82@findUsingC:
	cmp	DWORD PTR tv367[ebp], 0
	je	SHORT $LN24@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv842[ebp], eax
	mov	DWORD PTR tv842[ebp+4], edx
	mov	DWORD PTR tv845[ebp], ecx
	mov	edx, DWORD PTR tv845[ebp]
	mov	eax, DWORD PTR tv842[ebp]
	cmp	eax, DWORD PTR [edx+96]
	jne	SHORT $LN96@findUsingC
	mov	ecx, DWORD PTR tv845[ebp]
	mov	edx, DWORD PTR tv842[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	je	SHORT $LN24@findUsingC
$LN96@findUsingC:
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN24@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
$LN24@findUsingC:
; Line 1078
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 1
	je	$LN10@findUsingC
$LN19@findUsingC:
; Line 1080
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	mov	DWORD PTR _c$40529[ebp], edx
; Line 1081
	cmp	DWORD PTR _c$40529[ebp], 10		; 0000000aH
	jne	SHORT $LN17@findUsingC
; Line 1082
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
; Line 1083
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN16@findUsingC
; Line 1084
	xor	al, al
	jmp	$LN69@findUsingC
$LN16@findUsingC:
; Line 1086
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN17@findUsingC
; Line 1087
	mov	al, 1
	jmp	$LN69@findUsingC
$LN17@findUsingC:
; Line 1090
	mov	eax, DWORD PTR _startPos$[ebp]
	cmp	eax, DWORD PTR _testLen$[ebp]
	jl	SHORT $LN14@findUsingC
; Line 1091
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 1092
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 1093
	xor	al, al
	jmp	$LN69@findUsingC
$LN14@findUsingC:
; Line 1095
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN83@findUsingC
	mov	DWORD PTR tv407[ebp], 1
	jmp	SHORT $LN84@findUsingC
$LN83@findUsingC:
	mov	DWORD PTR tv407[ebp], 0
$LN84@findUsingC:
	cmp	DWORD PTR tv407[ebp], 0
	je	SHORT $LN13@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv880[ebp], eax
	mov	DWORD PTR tv880[ebp+4], edx
	mov	DWORD PTR tv883[ebp], ecx
	mov	edx, DWORD PTR tv883[ebp]
	mov	eax, DWORD PTR tv880[ebp]
	cmp	eax, DWORD PTR [edx+96]
	jne	SHORT $LN97@findUsingC
	mov	ecx, DWORD PTR tv883[ebp]
	mov	edx, DWORD PTR tv880[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	je	SHORT $LN13@findUsingC
$LN97@findUsingC:
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN13@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
$LN13@findUsingC:
; Line 1099
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findProgressInterrupt
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@findUsingC
; Line 1100
	xor	al, al
	jmp	$LN69@findUsingC
$LN12@findUsingC:
; Line 1101
	jmp	$LN19@findUsingC
	jmp	$LN1@findUsingC
$LN10@findUsingC:
; Line 1104
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	mov	DWORD PTR _c$40529[ebp], edx
; Line 1105
	mov	eax, DWORD PTR _c$40529[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN8@findUsingC
; Line 1106
	cmp	DWORD PTR _c$40529[ebp], 13		; 0000000dH
	jne	SHORT $LN7@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv914[ebp], eax
	mov	DWORD PTR tv914[ebp+4], edx
	mov	DWORD PTR tv917[ebp], ecx
	mov	edx, DWORD PTR tv917[ebp]
	mov	eax, DWORD PTR tv914[ebp+4]
	cmp	eax, DWORD PTR [edx+100]
	jg	SHORT $LN7@findUsingC
	jl	SHORT $LN98@findUsingC
	mov	ecx, DWORD PTR tv917[ebp]
	mov	edx, DWORD PTR tv914[ebp]
	cmp	edx, DWORD PTR [ecx+96]
	jae	SHORT $LN7@findUsingC
$LN98@findUsingC:
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN7@findUsingC
; Line 1107
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
$LN7@findUsingC:
; Line 1109
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
; Line 1110
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@findUsingC
; Line 1111
	xor	al, al
	jmp	$LN69@findUsingC
$LN6@findUsingC:
; Line 1113
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN8@findUsingC
; Line 1114
	mov	al, 1
	jmp	$LN69@findUsingC
$LN8@findUsingC:
; Line 1117
	mov	eax, DWORD PTR _startPos$[ebp]
	cmp	eax, DWORD PTR _testLen$[ebp]
	jl	SHORT $LN4@findUsingC
; Line 1118
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 1119
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 1120
	xor	al, al
	jmp	$LN69@findUsingC
$LN4@findUsingC:
; Line 1122
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN85@findUsingC
	mov	DWORD PTR tv462[ebp], 1
	jmp	SHORT $LN86@findUsingC
$LN85@findUsingC:
	mov	DWORD PTR tv462[ebp], 0
$LN86@findUsingC:
	cmp	DWORD PTR tv462[ebp], 0
	je	SHORT $LN3@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv949[ebp], eax
	mov	DWORD PTR tv949[ebp+4], edx
	mov	DWORD PTR tv952[ebp], ecx
	mov	edx, DWORD PTR tv952[ebp]
	mov	eax, DWORD PTR tv949[ebp]
	cmp	eax, DWORD PTR [edx+96]
	jne	SHORT $LN99@findUsingC
	mov	ecx, DWORD PTR tv952[ebp]
	mov	edx, DWORD PTR tv949[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	je	SHORT $LN3@findUsingC
$LN99@findUsingC:
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN3@findUsingC
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
$LN3@findUsingC:
; Line 1126
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _startPos$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findProgressInterrupt@RegexMatcher@icu_56@@AAEC_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::findProgressInterrupt
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@findUsingC
; Line 1127
	xor	al, al
	jmp	SHORT $LN69@findUsingC
$LN2@findUsingC:
; Line 1128
	jmp	$LN10@findUsingC
$LN1@findUsingC:
; Line 1133
	xor	eax, eax
	jne	SHORT $LN59@findUsingC
	mov	ecx, DWORD PTR ?__LINE__Var@?1??findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z@4JA
	add	ecx, 217				; 000000d9H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN59@findUsingC:
; Line 1136
	xor	eax, eax
	jne	SHORT $LN88@findUsingC
	mov	ecx, DWORD PTR ?__LINE__Var@?1??findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z@4JA
	add	ecx, 220				; 000000dcH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN88@findUsingC:
; Line 1137
	xor	al, al
$LN69@findUsingC:
; Line 1138
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN100@findUsingC:
	DD	$LN57@findUsingC
	DD	$LN35@findUsingC
	DD	$LN47@findUsingC
	DD	$LN50@findUsingC
	DD	$LN25@findUsingC
	DD	$LN35@findUsingC
?findUsingChunk@RegexMatcher@icu_56@@AAECAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::findUsingChunk
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
$T50143 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_status$ = 12						; size = 4
?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::group, COMDAT
; _this$ = ecx
; Line 1147
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T50143[ebp], 0
; Line 1148
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR $T50143[ebp]
	or	eax, 1
	mov	DWORD PTR $T50143[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1149
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::group
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?group@RegexMatcher@icu_56@@UBEPAUUText@@PAU3@AA_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dest$ = 8						; size = 4
_group_len$ = 12					; size = 4
_status$ = 16						; size = 4
?group@RegexMatcher@icu_56@@UBEPAUUText@@PAU3@AA_JAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::group, COMDAT
; _this$ = ecx
; Line 1152
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _group_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1154
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?group@RegexMatcher@icu_56@@UBEPAUUText@@PAU3@AA_JAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::group
_TEXT	ENDS
PUBLIC	??_C@_1O@MHCIONED@?$AAs?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??group@RegexMatcher@icu_56@@UBEPAUUText@@HPAU4@AA_JAAW4UErrorCode@@@Z@4JA ; `icu_56::RegexMatcher::group'::`2'::__LINE__Var
EXTRN	_utext_clone_56:PROC
;	COMDAT ??_C@_1O@MHCIONED@?$AAs?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1O@MHCIONED@?$AAs?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?$AA@ DB 's', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??group@RegexMatcher@icu_56@@UBEPAUUText@@HPAU4@AA_JAAW4UErrorCode@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??group@RegexMatcher@icu_56@@UBEPAUUText@@HPAU4@AA_JAAW4UErrorCode@@@Z@4JA DD 0485H ; `icu_56::RegexMatcher::group'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?group@RegexMatcher@icu_56@@UBEPAUUText@@HPAU3@AA_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv291 = -272						; size = 8
___offset$40597 = -68					; size = 8
_groupOffset$40589 = -52				; size = 4
_e$ = -40						; size = 8
_s$ = -24						; size = 8
_this$ = -8						; size = 4
_groupNum$ = 8						; size = 4
_dest$ = 12						; size = 4
_group_len$ = 16					; size = 4
_status$ = 20						; size = 4
?group@RegexMatcher@icu_56@@UBEPAUUText@@HPAU3@AA_JAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::group, COMDAT
; _this$ = ecx
; Line 1157
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1158
	mov	eax, DWORD PTR _group_len$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 1159
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN14@group
; Line 1160
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN15@group
$LN14@group:
; Line 1162
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN13@group
; Line 1163
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN12@group
$LN13@group:
; Line 1164
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	jne	SHORT $LN11@group
; Line 1165
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66306			; 00010302H
	jmp	SHORT $LN12@group
$LN11@group:
; Line 1166
	cmp	DWORD PTR _groupNum$[ebp], 0
	jl	SHORT $LN8@group
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+108]
	call	DWORD PTR __imp_?size@UVector32@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _groupNum$[ebp], eax
	jle	SHORT $LN12@group
$LN8@group:
; Line 1167
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
$LN12@group:
; Line 1170
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@group
; Line 1171
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN15@group
$LN7@group:
; Line 1175
	cmp	DWORD PTR _groupNum$[ebp], 0
	jne	SHORT $LN6@group
; Line 1176
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR [eax+116]
	mov	DWORD PTR _s$[ebp+4], edx
; Line 1177
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR [eax+124]
	mov	DWORD PTR _e$[ebp+4], edx
; Line 1178
	jmp	$LN5@group
$LN6@group:
; Line 1179
	mov	eax, DWORD PTR _groupNum$[ebp]
	sub	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+108]
	call	DWORD PTR __imp_?elementAti@UVector32@icu_56@@QBEHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _groupOffset$40589[ebp], eax
; Line 1180
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _groupOffset$40589[ebp]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN17@group
	mov	eax, DWORD PTR ?__LINE__Var@?1??group@RegexMatcher@icu_56@@UBEPAUUText@@HPAU4@AA_JAAW4UErrorCode@@@Z@4JA
	add	eax, 23					; 00000017H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EG@FLOMNPIM@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@group:
; Line 1181
	cmp	DWORD PTR _groupOffset$40589[ebp], 0
	jge	SHORT $LN18@group
	mov	eax, DWORD PTR ?__LINE__Var@?1??group@RegexMatcher@icu_56@@UBEPAUUText@@HPAU4@AA_JAAW4UErrorCode@@@Z@4JA
	add	eax, 24					; 00000018H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CC@GOKMHNEN@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@group:
; Line 1182
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _groupOffset$40589[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+16]
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+20]
	mov	DWORD PTR _s$[ebp+4], ecx
; Line 1183
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _groupOffset$40589[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _e$[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	mov	DWORD PTR _e$[ebp+4], ecx
$LN5@group:
; Line 1186
	cmp	DWORD PTR _s$[ebp+4], 0
	jg	SHORT $LN4@group
	jl	SHORT $LN20@group
	cmp	DWORD PTR _s$[ebp], 0
	jae	SHORT $LN4@group
$LN20@group:
; Line 1188
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	jmp	$LN15@group
$LN4@group:
; Line 1190
	mov	eax, DWORD PTR _s$[ebp+4]
	cmp	eax, DWORD PTR _e$[ebp+4]
	jl	SHORT $LN19@group
	jg	SHORT $LN21@group
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR _e$[ebp]
	jbe	SHORT $LN19@group
$LN21@group:
	mov	edx, DWORD PTR ?__LINE__Var@?1??group@RegexMatcher@icu_56@@UBEPAUUText@@HPAU4@AA_JAAW4UErrorCode@@@Z@4JA
	add	edx, 33					; 00000021H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1O@MHCIONED@?$AAs?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@group:
; Line 1191
	mov	eax, DWORD PTR _e$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _e$[ebp+4]
	sbb	ecx, DWORD PTR _s$[ebp+4]
	mov	edx, DWORD PTR _group_len$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
; Line 1193
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _dest$[ebp], eax
; Line 1194
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN3@group
; Line 1195
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	sub	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _s$[ebp+4]
	sbb	edx, DWORD PTR [eax+36]
	mov	DWORD PTR ___offset$40597[ebp], ecx
	mov	DWORD PTR ___offset$40597[ebp+4], edx
	cmp	DWORD PTR ___offset$40597[ebp+4], 0
	jl	SHORT $LN2@group
	jg	SHORT $LN22@group
	cmp	DWORD PTR ___offset$40597[ebp], 0
	jb	SHORT $LN2@group
$LN22@group:
	mov	eax, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [eax+28]
	cdq
	mov	DWORD PTR tv291[ebp], eax
	mov	DWORD PTR tv291[ebp+4], edx
	mov	ecx, DWORD PTR ___offset$40597[ebp+4]
	cmp	ecx, DWORD PTR tv291[ebp+4]
	jg	SHORT $LN2@group
	jl	SHORT $LN23@group
	mov	edx, DWORD PTR ___offset$40597[ebp]
	cmp	edx, DWORD PTR tv291[ebp]
	ja	SHORT $LN2@group
$LN23@group:
	mov	eax, DWORD PTR ___offset$40597[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+40], eax
	jmp	SHORT $LN3@group
$LN2@group:
	mov	eax, DWORD PTR _s$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN3@group:
; Line 1196
	mov	eax, DWORD PTR _dest$[ebp]
$LN15@group:
; Line 1197
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?group@RegexMatcher@icu_56@@UBEPAUUText@@HPAU3@AA_JAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::group
_TEXT	ENDS
PUBLIC	??_C@_1DA@KJFBHHIA@?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAx?$AAt?$AAr?$AAa?$AAc?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??group@RegexMatcher@icu_56@@UBE?AVUnicodeString@3@HAAW4UErrorCode@@@Z@4JA ; `icu_56::RegexMatcher::group'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
EXTRN	__imp_?releaseBuffer@UnicodeString@icu_56@@QAEXH@Z:PROC
EXTRN	__imp_?getBuffer@UnicodeString@icu_56@@QAEPA_WH@Z:PROC
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@$$QAV01@@Z:PROC
;	COMDAT ??_C@_1DA@KJFBHHIA@?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAx?$AAt?$AAr?$AAa?$AAc?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@KJFBHHIA@?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAx?$AAt?$AAr?$AAa?$AAc?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@ DB 'l'
	DB	00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'r'
	DB	00H, 'a', 00H, 'c', 00H, 't', 00H, 'L', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??group@RegexMatcher@icu_56@@UBE?AVUnicodeString@3@HAAW4UErrorCode@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??group@RegexMatcher@icu_56@@UBE?AVUnicodeString@3@HAAW4UErrorCode@@@Z@4JA DD 04afH ; `icu_56::RegexMatcher::group'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z$0
__ehfuncinfo$?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z
_TEXT	SEGMENT
$T50162 = -368						; size = 4
_extractLength$40618 = -164				; size = 4
_buf$ = -152						; size = 4
_length$ = -140						; size = 4
_groupEnd$ = -128					; size = 8
_groupStart$ = -112					; size = 8
_result$ = -96						; size = 64
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_groupNum$ = 12						; size = 4
_status$ = 16						; size = 4
?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::group, COMDAT
; _this$ = ecx
; Line 1199
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-372]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T50162[ebp], 0
; Line 1200
	mov	esi, esp
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1201
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+64]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _groupStart$[ebp], eax
	mov	DWORD PTR _groupStart$[ebp+4], edx
; Line 1202
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+80]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _groupEnd$[ebp], eax
	mov	DWORD PTR _groupEnd$[ebp+4], edx
; Line 1203
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN4@group@2
	mov	eax, DWORD PTR _groupStart$[ebp]
	and	eax, DWORD PTR _groupStart$[ebp+4]
	cmp	eax, -1
	je	SHORT $LN4@group@2
	mov	eax, DWORD PTR _groupStart$[ebp]
	cmp	eax, DWORD PTR _groupEnd$[ebp]
	jne	SHORT $LN5@group@2
	mov	ecx, DWORD PTR _groupStart$[ebp+4]
	cmp	ecx, DWORD PTR _groupEnd$[ebp+4]
	jne	SHORT $LN5@group@2
$LN4@group@2:
; Line 1204
	mov	esi, esp
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@$$QAV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T50162[ebp]
	or	ecx, 1
	mov	DWORD PTR $T50162[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN6@group@2
$LN5@group@2:
; Line 1209
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _groupEnd$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _groupEnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _groupStart$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _groupStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _length$[ebp], eax
; Line 1210
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	je	SHORT $LN3@group@2
; Line 1211
	mov	esi, esp
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@$$QAV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T50162[ebp]
	or	ecx, 1
	mov	DWORD PTR $T50162[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN6@group@2
$LN3@group@2:
; Line 1214
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1215
	mov	esi, esp
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?getBuffer@UnicodeString@icu_56@@QAEPA_WH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buf$[ebp], eax
; Line 1216
	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN2@group@2
; Line 1217
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1218
	jmp	$LN1@group@2
$LN2@group@2:
; Line 1219
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _groupEnd$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _groupEnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _groupStart$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _groupStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _extractLength$40618[ebp], eax
; Line 1220
	mov	esi, esp
	mov	eax, DWORD PTR _extractLength$40618[ebp]
	push	eax
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?releaseBuffer@UnicodeString@icu_56@@QAEXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1221
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _extractLength$40618[ebp]
	je	SHORT $LN1@group@2
	mov	ecx, DWORD PTR ?__LINE__Var@?1??group@RegexMatcher@icu_56@@UBE?AVUnicodeString@3@HAAW4UErrorCode@@@Z@4JA
	add	ecx, 22					; 00000016H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DA@KJFBHHIA@?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAx?$AAt?$AAr?$AAa?$AAc?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@group@2:
; Line 1223
	mov	esi, esp
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@$$QAV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T50162[ebp]
	or	ecx, 1
	mov	DWORD PTR $T50162[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN6@group@2:
; Line 1224
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@group@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 372				; 00000174H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN15@group@2:
	DD	1
	DD	$LN14@group@2
$LN14@group@2:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN12@group@2
$LN12@group@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z$1:
	mov	eax, DWORD PTR $T50162[ebp]
	and	eax, 1
	je	$LN11@group@2
	and	DWORD PTR $T50162[ebp], -2		; fffffffeH
	mov	esi, esp
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
$LN11@group@2:
	ret	0
__ehhandler$?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-376]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?group@RegexMatcher@icu_56@@UBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::group
PUBLIC	??_C@_1CE@HPKHPLLD@?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z@4JA ; `icu_56::RegexMatcher::appendGroup'::`2'::__LINE__Var
;	COMDAT ??_C@_1CE@HPKHPLLD@?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@HPKHPLLD@?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@ DB 'e'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'f', 00H, 'I', 00H
	DB	'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'L', 00H, 'e', 00H, 'n'
	DB	00H, 'g', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z@4JA DD 04d2H ; `icu_56::RegexMatcher::appendGroup'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv415 = -328						; size = 8
tv398 = -324						; size = 4
tv424 = -320						; size = 4
tv414 = -320						; size = 4
tv397 = -320						; size = 4
tv391 = -320						; size = 4
_groupChars$40655 = -120				; size = 4
_lengthStatus$40654 = -108				; size = 4
_len16$40650 = -96					; size = 4
_deltaLen$ = -84					; size = 8
_groupOffset$40638 = -68				; size = 4
_e$ = -56						; size = 8
_s$ = -40						; size = 8
_destLen$ = -24						; size = 8
_this$ = -8						; size = 4
_groupNum$ = 8						; size = 4
_dest$ = 12						; size = 4
_status$ = 16						; size = 4
?appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::appendGroup, COMDAT
; _this$ = ecx
; Line 1234
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1235
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN13@appendGrou
; Line 1236
	xor	eax, eax
	xor	edx, edx
	jmp	$LN14@appendGrou
$LN13@appendGrou:
; Line 1238
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN12@appendGrou
; Line 1239
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 1240
	xor	eax, eax
	xor	edx, edx
	jmp	$LN14@appendGrou
$LN12@appendGrou:
; Line 1242
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	mov	DWORD PTR _destLen$[ebp], eax
	mov	DWORD PTR _destLen$[ebp+4], edx
; Line 1244
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	jne	SHORT $LN11@appendGrou
; Line 1245
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66306			; 00010302H
; Line 1246
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _destLen$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	jmp	$LN14@appendGrou
$LN11@appendGrou:
; Line 1248
	cmp	DWORD PTR _groupNum$[ebp], 0
	jl	SHORT $LN9@appendGrou
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+108]
	call	DWORD PTR __imp_?size@UVector32@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _groupNum$[ebp], eax
	jle	SHORT $LN10@appendGrou
$LN9@appendGrou:
; Line 1249
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1250
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _destLen$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	jmp	$LN14@appendGrou
$LN10@appendGrou:
; Line 1254
	cmp	DWORD PTR _groupNum$[ebp], 0
	jne	SHORT $LN8@appendGrou
; Line 1255
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR [eax+116]
	mov	DWORD PTR _s$[ebp+4], edx
; Line 1256
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR [eax+124]
	mov	DWORD PTR _e$[ebp+4], edx
; Line 1257
	jmp	$LN7@appendGrou
$LN8@appendGrou:
; Line 1258
	mov	eax, DWORD PTR _groupNum$[ebp]
	sub	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+108]
	call	DWORD PTR __imp_?elementAti@UVector32@icu_56@@QBEHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _groupOffset$40638[ebp], eax
; Line 1259
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _groupOffset$40638[ebp]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN16@appendGrou
	mov	eax, DWORD PTR ?__LINE__Var@?1??appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z@4JA
	add	eax, 25					; 00000019H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EG@FLOMNPIM@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@appendGrou:
; Line 1260
	cmp	DWORD PTR _groupOffset$40638[ebp], 0
	jge	SHORT $LN17@appendGrou
	mov	eax, DWORD PTR ?__LINE__Var@?1??appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z@4JA
	add	eax, 26					; 0000001aH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CC@GOKMHNEN@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@appendGrou:
; Line 1261
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _groupOffset$40638[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+16]
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+20]
	mov	DWORD PTR _s$[ebp+4], ecx
; Line 1262
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _groupOffset$40638[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _e$[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	mov	DWORD PTR _e$[ebp+4], ecx
$LN7@appendGrou:
; Line 1265
	cmp	DWORD PTR _s$[ebp+4], 0
	jg	SHORT $LN6@appendGrou
	jl	SHORT $LN20@appendGrou
	cmp	DWORD PTR _s$[ebp], 0
	jae	SHORT $LN6@appendGrou
$LN20@appendGrou:
; Line 1267
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _destLen$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	jmp	$LN14@appendGrou
$LN6@appendGrou:
; Line 1269
	mov	eax, DWORD PTR _s$[ebp+4]
	cmp	eax, DWORD PTR _e$[ebp+4]
	jl	SHORT $LN18@appendGrou
	jg	SHORT $LN21@appendGrou
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR _e$[ebp]
	jbe	SHORT $LN18@appendGrou
$LN21@appendGrou:
	mov	edx, DWORD PTR ?__LINE__Var@?1??appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z@4JA
	add	edx, 35					; 00000023H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1O@MHCIONED@?$AAs?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@appendGrou:
; Line 1272
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv391[ebp], ecx
	mov	edx, DWORD PTR tv391[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	$LN5@appendGrou
	mov	eax, DWORD PTR tv391[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	$LN5@appendGrou
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv397[ebp], edx
	mov	DWORD PTR tv398[ebp], ecx
	mov	eax, DWORD PTR tv397[ebp]
	mov	ecx, DWORD PTR tv398[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+16]
	jne	$LN5@appendGrou
	mov	eax, DWORD PTR tv397[ebp]
	mov	ecx, DWORD PTR tv398[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+20]
	jne	$LN5@appendGrou
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv414[ebp], ecx
	mov	DWORD PTR tv415[ebp], eax
	mov	DWORD PTR tv415[ebp+4], edx
	mov	edx, DWORD PTR tv414[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv415[ebp]
	jne	$LN5@appendGrou
	mov	ecx, DWORD PTR tv414[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv415[ebp+4]
	jne	$LN5@appendGrou
; Line 1273
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv424[ebp], eax
	mov	ecx, DWORD PTR tv424[ebp]
	mov	edx, DWORD PTR _e$[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jl	SHORT $LN19@appendGrou
	jg	SHORT $LN22@appendGrou
	mov	eax, DWORD PTR tv424[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN19@appendGrou
$LN22@appendGrou:
	mov	edx, DWORD PTR ?__LINE__Var@?1??appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z@4JA
	add	edx, 39					; 00000027H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CE@HPKHPLLD@?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@appendGrou:
; Line 1274
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	sub	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _e$[ebp+4]
	sbb	edx, DWORD PTR _s$[ebp+4]
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+16]
	push	0
	push	2
	mov	ecx, DWORD PTR _s$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__allmul
	add	eax, DWORD PTR [esi+48]
	push	eax
	mov	eax, DWORD PTR _destLen$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	mov	DWORD PTR _deltaLen$[ebp], eax
	mov	DWORD PTR _deltaLen$[ebp+4], edx
; Line 1275
	jmp	$LN4@appendGrou
$LN5@appendGrou:
; Line 1277
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN3@appendGrou
; Line 1278
	mov	eax, DWORD PTR _e$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _e$[ebp+4]
	sbb	ecx, DWORD PTR _s$[ebp+4]
	mov	DWORD PTR _len16$40650[ebp], eax
; Line 1279
	jmp	SHORT $LN2@appendGrou
$LN3@appendGrou:
; Line 1280
	mov	DWORD PTR _lengthStatus$40654[ebp], 0
; Line 1281
	lea	eax, DWORD PTR _lengthStatus$40654[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _e$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _len16$40650[ebp], eax
$LN2@appendGrou:
; Line 1283
	mov	eax, DWORD PTR _len16$40650[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _groupChars$40655[ebp], eax
; Line 1284
	cmp	DWORD PTR _groupChars$40655[ebp], 0
	jne	SHORT $LN1@appendGrou
; Line 1285
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1286
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN14@appendGrou
$LN1@appendGrou:
; Line 1288
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len16$40650[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _groupChars$40655[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
; Line 1290
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len16$40650[ebp]
	push	ecx
	mov	edx, DWORD PTR _groupChars$40655[ebp]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _destLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
	cdq
	mov	DWORD PTR _deltaLen$[ebp], eax
	mov	DWORD PTR _deltaLen$[ebp+4], edx
; Line 1291
	mov	eax, DWORD PTR _groupChars$40655[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN4@appendGrou:
; Line 1293
	mov	eax, DWORD PTR _deltaLen$[ebp]
	mov	edx, DWORD PTR _deltaLen$[ebp+4]
$LN14@appendGrou:
; Line 1294
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@appendGrou
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN25@appendGrou:
	DD	1
	DD	$LN24@appendGrou
$LN24@appendGrou:
	DD	-108					; ffffff94H
	DD	4
	DD	$LN23@appendGrou
$LN23@appendGrou:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?appendGroup@RegexMatcher@icu_56@@ABE_JHPAUUText@@AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::appendGroup
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?groupCount@RegexMatcher@icu_56@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?groupCount@RegexMatcher@icu_56@@UBEHXZ PROC		; icu_56::RegexMatcher::groupCount, COMDAT
; _this$ = ecx
; Line 1303
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1304
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+108]
	call	DWORD PTR __imp_?size@UVector32@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1305
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?groupCount@RegexMatcher@icu_56@@UBEHXZ ENDP		; icu_56::RegexMatcher::groupCount
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?hasAnchoringBounds@RegexMatcher@icu_56@@UBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?hasAnchoringBounds@RegexMatcher@icu_56@@UBECXZ PROC	; icu_56::RegexMatcher::hasAnchoringBounds, COMDAT
; _this$ = ecx
; Line 1312
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1313
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+105]
; Line 1314
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?hasAnchoringBounds@RegexMatcher@icu_56@@UBECXZ ENDP	; icu_56::RegexMatcher::hasAnchoringBounds
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?hasTransparentBounds@RegexMatcher@icu_56@@UBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?hasTransparentBounds@RegexMatcher@icu_56@@UBECXZ PROC	; icu_56::RegexMatcher::hasTransparentBounds, COMDAT
; _this$ = ecx
; Line 1322
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1323
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+104]
; Line 1324
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?hasTransparentBounds@RegexMatcher@icu_56@@UBECXZ ENDP	; icu_56::RegexMatcher::hasTransparentBounds
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?hitEnd@RegexMatcher@icu_56@@UBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?hitEnd@RegexMatcher@icu_56@@UBECXZ PROC		; icu_56::RegexMatcher::hitEnd, COMDAT
; _this$ = ecx
; Line 1333
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1334
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+144]
; Line 1335
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?hitEnd@RegexMatcher@icu_56@@UBECXZ ENDP		; icu_56::RegexMatcher::hitEnd
_TEXT	ENDS
PUBLIC	??_SUnicodeString@icu_56@@6B@			; icu_56::UnicodeString::`local vftable'
PUBLIC	??_R4UnicodeString@icu_56@@6B@			; icu_56::UnicodeString::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUnicodeString@icu_56@@@8		; icu_56::UnicodeString `RTTI Type Descriptor'
PUBLIC	??_R3UnicodeString@icu_56@@8			; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UnicodeString@icu_56@@8			; icu_56::UnicodeString::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UnicodeString@icu_56@@8		; icu_56::UnicodeString::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Replaceable@icu_56@@8		; icu_56::Replaceable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVReplaceable@icu_56@@@8			; icu_56::Replaceable `RTTI Type Descriptor'
PUBLIC	??_R3Replaceable@icu_56@@8			; icu_56::Replaceable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Replaceable@icu_56@@8			; icu_56::Replaceable::`RTTI Base Class Array'
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@HHH@Z:PROC
EXTRN	??_EUnicodeString@icu_56@@UAEPAXI@Z:PROC	; icu_56::UnicodeString::`vector deleting destructor'
EXTRN	?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ:PROC ; icu_56::UnicodeString::getDynamicClassID
EXTRN	?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z:PROC ; icu_56::UnicodeString::extractBetween
EXTRN	?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z:PROC ; icu_56::UnicodeString::handleReplaceBetween
EXTRN	?copy@UnicodeString@icu_56@@UAEXHHH@Z:PROC	; icu_56::UnicodeString::copy
EXTRN	?hasMetaData@UnicodeString@icu_56@@UBECXZ:PROC	; icu_56::UnicodeString::hasMetaData
EXTRN	?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ:PROC ; icu_56::UnicodeString::clone
EXTRN	?getLength@UnicodeString@icu_56@@MBEHXZ:PROC	; icu_56::UnicodeString::getLength
EXTRN	?getCharAt@UnicodeString@icu_56@@MBE_WH@Z:PROC	; icu_56::UnicodeString::getCharAt
EXTRN	?getChar32At@UnicodeString@icu_56@@MBEHH@Z:PROC	; icu_56::UnicodeString::getChar32At
;	COMDAT ??_R2Replaceable@icu_56@@8
rdata$r	SEGMENT
??_R2Replaceable@icu_56@@8 DD FLAT:??_R1A@?0A@EA@Replaceable@icu_56@@8 ; icu_56::Replaceable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3Replaceable@icu_56@@8
rdata$r	SEGMENT
??_R3Replaceable@icu_56@@8 DD 00H			; icu_56::Replaceable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Replaceable@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReplaceable@icu_56@@@8
_DATA	SEGMENT
??_R0?AVReplaceable@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::Replaceable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReplaceable@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Replaceable@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Replaceable@icu_56@@8 DD FLAT:??_R0?AVReplaceable@icu_56@@@8 ; icu_56::Replaceable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Replaceable@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@UnicodeString@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UnicodeString@icu_56@@8 DD FLAT:??_R0?AVUnicodeString@icu_56@@@8 ; icu_56::UnicodeString::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UnicodeString@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UnicodeString@icu_56@@8
rdata$r	SEGMENT
??_R2UnicodeString@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UnicodeString@icu_56@@8 ; icu_56::UnicodeString::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Replaceable@icu_56@@8
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UnicodeString@icu_56@@8
rdata$r	SEGMENT
??_R3UnicodeString@icu_56@@8 DD 00H			; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2UnicodeString@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUnicodeString@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUnicodeString@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::UnicodeString `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUnicodeString@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UnicodeString@icu_56@@6B@
rdata$r	SEGMENT
??_R4UnicodeString@icu_56@@6B@ DD 00H			; icu_56::UnicodeString::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUnicodeString@icu_56@@@8
	DD	FLAT:??_R3UnicodeString@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_SUnicodeString@icu_56@@6B@
CONST	SEGMENT
??_SUnicodeString@icu_56@@6B@ DD FLAT:??_R4UnicodeString@icu_56@@6B@ ; icu_56::UnicodeString::`local vftable'
	DD	FLAT:??_EUnicodeString@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ
	DD	FLAT:?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z
	DD	FLAT:?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z
	DD	FLAT:?copy@UnicodeString@icu_56@@UAEXHHH@Z
	DD	FLAT:?hasMetaData@UnicodeString@icu_56@@UBECXZ
	DD	FLAT:?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ
	DD	FLAT:?getLength@UnicodeString@icu_56@@MBEHXZ
	DD	FLAT:?getCharAt@UnicodeString@icu_56@@MBE_WH@Z
	DD	FLAT:?getChar32At@UnicodeString@icu_56@@MBEHH@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ$0
__ehfuncinfo$?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ
_TEXT	SEGMENT
tv87 = -292						; size = 4
$T50195 = -284						; size = 4
$T50196 = -272						; size = 4
_inputChars$40685 = -68					; size = 4
_result$40680 = -56					; size = 4
_len16$40676 = -44					; size = 4
_status$40675 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ PROC ; icu_56::RegexMatcher::input, COMDAT
; _this$ = ecx
; Line 1343
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1344
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	$LN3@input
; Line 1345
	mov	DWORD PTR _status$40675[ebp], 0
; Line 1347
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN2@input
; Line 1348
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _len16$40676[ebp], ecx
; Line 1349
	jmp	SHORT $LN1@input
$LN2@input:
; Line 1350
	lea	eax, DWORD PTR _status$40675[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _len16$40676[ebp], eax
; Line 1351
	mov	DWORD PTR _status$40675[ebp], 0
$LN1@input:
; Line 1353
	mov	esi, esp
	push	64					; 00000040H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T50196[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T50196[ebp], 0
	je	SHORT $LN6@input
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _len16$40676[ebp]
	push	eax
	mov	ecx, DWORD PTR $T50196[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@HHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T50196[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_SUnicodeString@icu_56@@6B@
	mov	edx, DWORD PTR $T50196[ebp]
	mov	DWORD PTR tv87[ebp], edx
	jmp	SHORT $LN7@input
$LN6@input:
	mov	DWORD PTR tv87[ebp], 0
$LN7@input:
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR $T50195[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T50195[ebp]
	mov	DWORD PTR _result$40680[ebp], ecx
; Line 1355
	mov	esi, esp
	mov	eax, DWORD PTR _len16$40676[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$40680[ebp]
	call	DWORD PTR __imp_?getBuffer@UnicodeString@icu_56@@QAEPA_WH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _inputChars$40685[ebp], eax
; Line 1356
	lea	eax, DWORD PTR _status$40675[ebp]
	push	eax
	mov	ecx, DWORD PTR _len16$40676[ebp]
	push	ecx
	mov	edx, DWORD PTR _inputChars$40685[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
; Line 1357
	mov	esi, esp
	mov	eax, DWORD PTR _len16$40676[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$40680[ebp]
	call	DWORD PTR __imp_?releaseBuffer@UnicodeString@icu_56@@QAEXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1359
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _result$40680[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN3@input:
; Line 1362
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
; Line 1363
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@input
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@input:
	DD	1
	DD	$LN11@input
$LN11@input:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN9@input
$LN9@input:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ$0:
	mov	esi, esp
	mov	eax, DWORD PTR $T50196[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-296]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?input@RegexMatcher@icu_56@@UBEABVUnicodeString@2@XZ ENDP ; icu_56::RegexMatcher::input
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUnicodeString@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUnicodeString@icu_56@@UAEPAXI@Z PROC		; icu_56::UnicodeString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUnicodeString@icu_56@@UAEPAXI@Z ENDP		; icu_56::UnicodeString::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?inputText@RegexMatcher@icu_56@@UBEPAUUText@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?inputText@RegexMatcher@icu_56@@UBEPAUUText@@XZ PROC	; icu_56::RegexMatcher::inputText, COMDAT
; _this$ = ecx
; Line 1370
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1371
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
; Line 1372
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?inputText@RegexMatcher@icu_56@@UBEPAUUText@@XZ ENDP	; icu_56::RegexMatcher::inputText
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getInput@RegexMatcher@icu_56@@UBEPAUUText@@PAU3@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv216 = -252						; size = 8
tv199 = -248						; size = 4
tv215 = -244						; size = 4
tv198 = -244						; size = 4
tv192 = -244						; size = 4
_inputChars$40706 = -44					; size = 4
_lengthStatus$40705 = -32				; size = 4
_input16Len$40701 = -20					; size = 4
_this$ = -8						; size = 4
_dest$ = 8						; size = 4
_status$ = 12						; size = 4
?getInput@RegexMatcher@icu_56@@UBEPAUUText@@PAU3@AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::getInput, COMDAT
; _this$ = ecx
; Line 1380
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1381
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN9@getInput
; Line 1382
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN10@getInput
$LN9@getInput:
; Line 1384
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@getInput
; Line 1385
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 1386
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN10@getInput
$LN8@getInput:
; Line 1389
	cmp	DWORD PTR _dest$[ebp], 0
	je	$LN7@getInput
; Line 1390
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv192[ebp], ecx
	mov	edx, DWORD PTR tv192[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	$LN6@getInput
	mov	eax, DWORD PTR tv192[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	$LN6@getInput
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv198[ebp], edx
	mov	DWORD PTR tv199[ebp], ecx
	mov	eax, DWORD PTR tv198[ebp]
	mov	ecx, DWORD PTR tv199[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+16]
	jne	$LN6@getInput
	mov	eax, DWORD PTR tv198[ebp]
	mov	ecx, DWORD PTR tv199[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN6@getInput
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv215[ebp], ecx
	mov	DWORD PTR tv216[ebp], eax
	mov	DWORD PTR tv216[ebp+4], edx
	mov	edx, DWORD PTR tv215[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv216[ebp]
	jne	SHORT $LN6@getInput
	mov	ecx, DWORD PTR tv215[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv216[ebp+4]
	jne	SHORT $LN6@getInput
; Line 1391
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	push	edx
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 1392
	jmp	$LN5@getInput
$LN6@getInput:
; Line 1394
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN4@getInput
; Line 1395
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _input16Len$40701[ebp], ecx
; Line 1396
	jmp	SHORT $LN3@getInput
$LN4@getInput:
; Line 1397
	mov	DWORD PTR _lengthStatus$40705[ebp], 0
; Line 1398
	lea	eax, DWORD PTR _lengthStatus$40705[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _input16Len$40701[ebp], eax
$LN3@getInput:
; Line 1400
	mov	eax, DWORD PTR _input16Len$40701[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _inputChars$40706[ebp], eax
; Line 1401
	cmp	DWORD PTR _inputChars$40706[ebp], 0
	jne	SHORT $LN2@getInput
; Line 1402
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN10@getInput
$LN2@getInput:
; Line 1405
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1406
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input16Len$40701[ebp]
	push	ecx
	mov	edx, DWORD PTR _inputChars$40706[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
; Line 1407
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1408
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input16Len$40701[ebp]
	push	ecx
	mov	edx, DWORD PTR _inputChars$40706[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	push	edx
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 1410
	mov	eax, DWORD PTR _inputChars$40706[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN5@getInput:
; Line 1412
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	SHORT $LN10@getInput
; Line 1413
	jmp	SHORT $LN10@getInput
$LN7@getInput:
; Line 1414
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	push	0
	call	_utext_clone_56
	add	esp, 20					; 00000014H
$LN10@getInput:
; Line 1416
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@getInput
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@getInput:
	DD	1
	DD	$LN13@getInput
$LN13@getInput:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN12@getInput
$LN12@getInput:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?getInput@RegexMatcher@icu_56@@UBEPAUUText@@PAU3@AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::getInput
_TEXT	ENDS
PUBLIC	?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ ; icu_56::RegexMatcher::resetPreserveRegion
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lookingAt@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv203 = -216						; size = 8
tv186 = -212						; size = 4
tv202 = -208						; size = 4
tv185 = -208						; size = 4
tv179 = -208						; size = 4
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?lookingAt@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::lookingAt, COMDAT
; _this$ = ecx
; Line 1450
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1451
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@lookingAt
; Line 1452
	xor	al, al
	jmp	$LN8@lookingAt
$LN7@lookingAt:
; Line 1454
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@lookingAt
; Line 1455
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 1456
	xor	al, al
	jmp	$LN8@lookingAt
$LN6@lookingAt:
; Line 1459
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+256]
	test	ecx, ecx
	je	SHORT $LN5@lookingAt
; Line 1460
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	?compat_SyncMutableUTextContents@icu_56@@YACPAUUText@@@Z ; icu_56::compat_SyncMutableUTextContents
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@lookingAt
; Line 1461
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_nativeLength_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], edx
; Line 1462
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@lookingAt:
; Line 1465
	jmp	SHORT $LN3@lookingAt
$LN5@lookingAt:
; Line 1466
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ ; icu_56::RegexMatcher::resetPreserveRegion
$LN3@lookingAt:
; Line 1468
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv179[ebp], ecx
	mov	edx, DWORD PTR tv179[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	$LN2@lookingAt
	mov	eax, DWORD PTR tv179[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	$LN2@lookingAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv185[ebp], edx
	mov	DWORD PTR tv186[ebp], ecx
	mov	eax, DWORD PTR tv185[ebp]
	mov	ecx, DWORD PTR tv186[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+16]
	jne	SHORT $LN2@lookingAt
	mov	eax, DWORD PTR tv185[ebp]
	mov	ecx, DWORD PTR tv186[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN2@lookingAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv202[ebp], ecx
	mov	DWORD PTR tv203[ebp], eax
	mov	DWORD PTR tv203[ebp+4], edx
	mov	edx, DWORD PTR tv202[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv203[ebp]
	jne	SHORT $LN2@lookingAt
	mov	ecx, DWORD PTR tv202[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv203[ebp+4]
	jne	SHORT $LN2@lookingAt
; Line 1469
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
; Line 1470
	jmp	SHORT $LN1@lookingAt
$LN2@lookingAt:
; Line 1471
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR [ecx+88]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
$LN1@lookingAt:
; Line 1473
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+106]
$LN8@lookingAt:
; Line 1474
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?lookingAt@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::lookingAt
_TEXT	ENDS
EXTRN	__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ:PROC
EXTRN	__imp_?length@UnicodeString@icu_56@@QBEHXZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compat_SyncMutableUTextContents@icu_56@@YACPAUUText@@@Z
_TEXT	SEGMENT
tv95 = -244						; size = 8
tv92 = -236						; size = 8
_newLength$40720 = -32					; size = 4
_us$40718 = -20						; size = 4
_retVal$ = -5						; size = 1
_ut$ = 8						; size = 4
?compat_SyncMutableUTextContents@icu_56@@YACPAUUText@@@Z PROC ; icu_56::compat_SyncMutableUTextContents, COMDAT
; Line 1420
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1421
	mov	BYTE PTR _retVal$[ebp], 0
; Line 1426
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	mov	ecx, eax
	mov	esi, edx
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cdq
	mov	DWORD PTR tv92[ebp], ecx
	mov	DWORD PTR tv92[ebp+4], esi
	mov	DWORD PTR tv95[ebp], eax
	mov	DWORD PTR tv95[ebp+4], edx
	mov	eax, DWORD PTR tv92[ebp]
	cmp	eax, DWORD PTR tv95[ebp]
	jne	SHORT $LN4@compat_Syn
	mov	ecx, DWORD PTR tv92[ebp+4]
	cmp	ecx, DWORD PTR tv95[ebp+4]
	je	SHORT $LN1@compat_Syn
$LN4@compat_Syn:
; Line 1427
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _us$40718[ebp], ecx
; Line 1431
	mov	esi, esp
	mov	ecx, DWORD PTR _us$40718[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newLength$40720[ebp], eax
; Line 1435
	mov	esi, esp
	mov	ecx, DWORD PTR _us$40718[ebp]
	call	DWORD PTR __imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 1436
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _newLength$40720[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 1437
	mov	eax, DWORD PTR _newLength$40720[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 1438
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _newLength$40720[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 1439
	mov	BYTE PTR _retVal$[ebp], 1
$LN1@compat_Syn:
; Line 1442
	mov	al, BYTE PTR _retVal$[ebp]
; Line 1443
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?compat_SyncMutableUTextContents@icu_56@@YACPAUUText@@@Z ENDP ; icu_56::compat_SyncMutableUTextContents
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?lookingAt@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv237 = -232						; size = 8
tv220 = -228						; size = 4
tv236 = -224						; size = 4
tv219 = -224						; size = 4
tv213 = -224						; size = 4
tv203 = -224						; size = 4
tv195 = -224						; size = 4
_nativeStart$ = -24					; size = 8
_this$ = -8						; size = 4
_start$ = 8						; size = 8
_status$ = 16						; size = 4
?lookingAt@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::lookingAt, COMDAT
; _this$ = ecx
; Line 1477
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1478
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN9@lookingAt@2
; Line 1479
	xor	al, al
	jmp	$LN10@lookingAt@2
$LN9@lookingAt@2:
; Line 1481
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@lookingAt@2
; Line 1482
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 1483
	xor	al, al
	jmp	$LN10@lookingAt@2
$LN8@lookingAt@2:
; Line 1485
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1487
	cmp	DWORD PTR _start$[ebp+4], 0
	jg	SHORT $LN7@lookingAt@2
	jl	SHORT $LN12@lookingAt@2
	cmp	DWORD PTR _start$[ebp], 0
	jae	SHORT $LN7@lookingAt@2
$LN12@lookingAt@2:
; Line 1488
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1489
	xor	al, al
	jmp	$LN10@lookingAt@2
$LN7@lookingAt@2:
; Line 1492
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+256]
	test	ecx, ecx
	je	SHORT $LN6@lookingAt@2
; Line 1493
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	?compat_SyncMutableUTextContents@icu_56@@YACPAUUText@@@Z ; icu_56::compat_SyncMutableUTextContents
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@lookingAt@2
; Line 1494
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_nativeLength_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], edx
; Line 1495
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@lookingAt@2:
; Line 1500
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _nativeStart$[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp+4]
	mov	DWORD PTR _nativeStart$[ebp+4], ecx
; Line 1501
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv195[ebp], eax
	mov	ecx, DWORD PTR tv195[ebp]
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	cmp	edx, DWORD PTR [ecx+92]
	jl	SHORT $LN3@lookingAt@2
	jg	SHORT $LN13@lookingAt@2
	mov	eax, DWORD PTR tv195[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+88]
	jb	SHORT $LN3@lookingAt@2
$LN13@lookingAt@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN4@lookingAt@2
	jg	SHORT $LN3@lookingAt@2
	mov	eax, DWORD PTR tv203[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jbe	SHORT $LN4@lookingAt@2
$LN3@lookingAt@2:
; Line 1502
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1503
	xor	al, al
	jmp	$LN10@lookingAt@2
$LN4@lookingAt@2:
; Line 1506
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv213[ebp], ecx
	mov	edx, DWORD PTR tv213[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	$LN2@lookingAt@2
	mov	eax, DWORD PTR tv213[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	$LN2@lookingAt@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv219[ebp], edx
	mov	DWORD PTR tv220[ebp], ecx
	mov	eax, DWORD PTR tv219[ebp]
	mov	ecx, DWORD PTR tv220[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+16]
	jne	SHORT $LN2@lookingAt@2
	mov	eax, DWORD PTR tv219[ebp]
	mov	ecx, DWORD PTR tv220[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN2@lookingAt@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv236[ebp], ecx
	mov	DWORD PTR tv237[ebp], eax
	mov	DWORD PTR tv237[ebp+4], edx
	mov	edx, DWORD PTR tv236[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv237[ebp]
	jne	SHORT $LN2@lookingAt@2
	mov	ecx, DWORD PTR tv236[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv237[ebp+4]
	jne	SHORT $LN2@lookingAt@2
; Line 1507
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
; Line 1508
	jmp	SHORT $LN1@lookingAt@2
$LN2@lookingAt@2:
; Line 1509
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _nativeStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nativeStart$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
$LN1@lookingAt@2:
; Line 1511
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+106]
$LN10@lookingAt@2:
; Line 1512
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?lookingAt@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::lookingAt
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?matches@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv203 = -216						; size = 8
tv186 = -212						; size = 4
tv202 = -208						; size = 4
tv185 = -208						; size = 4
tv179 = -208						; size = 4
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?matches@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::matches, COMDAT
; _this$ = ecx
; Line 1521
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1522
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@matches
; Line 1523
	xor	al, al
	jmp	$LN8@matches
$LN7@matches:
; Line 1525
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@matches
; Line 1526
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 1527
	xor	al, al
	jmp	$LN8@matches
$LN6@matches:
; Line 1530
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+256]
	test	ecx, ecx
	je	SHORT $LN5@matches
; Line 1531
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	?compat_SyncMutableUTextContents@icu_56@@YACPAUUText@@@Z ; icu_56::compat_SyncMutableUTextContents
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@matches
; Line 1532
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_nativeLength_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], edx
; Line 1533
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@matches:
; Line 1536
	jmp	SHORT $LN3@matches
$LN5@matches:
; Line 1537
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ ; icu_56::RegexMatcher::resetPreserveRegion
$LN3@matches:
; Line 1540
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv179[ebp], ecx
	mov	edx, DWORD PTR tv179[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	$LN2@matches
	mov	eax, DWORD PTR tv179[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	$LN2@matches
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv185[ebp], edx
	mov	DWORD PTR tv186[ebp], ecx
	mov	eax, DWORD PTR tv185[ebp]
	mov	ecx, DWORD PTR tv186[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+16]
	jne	SHORT $LN2@matches
	mov	eax, DWORD PTR tv185[ebp]
	mov	ecx, DWORD PTR tv186[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN2@matches
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv202[ebp], ecx
	mov	DWORD PTR tv203[ebp], eax
	mov	DWORD PTR tv203[ebp+4], edx
	mov	edx, DWORD PTR tv202[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv203[ebp]
	jne	SHORT $LN2@matches
	mov	ecx, DWORD PTR tv202[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv203[ebp+4]
	jne	SHORT $LN2@matches
; Line 1541
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
; Line 1542
	jmp	SHORT $LN1@matches
$LN2@matches:
; Line 1543
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR [ecx+88]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
$LN1@matches:
; Line 1545
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+106]
$LN8@matches:
; Line 1546
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?matches@RegexMatcher@icu_56@@UAECAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::matches
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?matches@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv237 = -232						; size = 8
tv220 = -228						; size = 4
tv236 = -224						; size = 4
tv219 = -224						; size = 4
tv213 = -224						; size = 4
tv203 = -224						; size = 4
tv195 = -224						; size = 4
_nativeStart$ = -24					; size = 8
_this$ = -8						; size = 4
_start$ = 8						; size = 8
_status$ = 16						; size = 4
?matches@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::matches, COMDAT
; _this$ = ecx
; Line 1549
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1550
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN9@matches@2
; Line 1551
	xor	al, al
	jmp	$LN10@matches@2
$LN9@matches@2:
; Line 1553
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@matches@2
; Line 1554
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 1555
	xor	al, al
	jmp	$LN10@matches@2
$LN8@matches@2:
; Line 1557
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1559
	cmp	DWORD PTR _start$[ebp+4], 0
	jg	SHORT $LN7@matches@2
	jl	SHORT $LN12@matches@2
	cmp	DWORD PTR _start$[ebp], 0
	jae	SHORT $LN7@matches@2
$LN12@matches@2:
; Line 1560
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1561
	xor	al, al
	jmp	$LN10@matches@2
$LN7@matches@2:
; Line 1564
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+256]
	test	ecx, ecx
	je	SHORT $LN6@matches@2
; Line 1565
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	?compat_SyncMutableUTextContents@icu_56@@YACPAUUText@@@Z ; icu_56::compat_SyncMutableUTextContents
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@matches@2
; Line 1566
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_nativeLength_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], edx
; Line 1567
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@matches@2:
; Line 1572
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _nativeStart$[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp+4]
	mov	DWORD PTR _nativeStart$[ebp+4], ecx
; Line 1573
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv195[ebp], eax
	mov	ecx, DWORD PTR tv195[ebp]
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	cmp	edx, DWORD PTR [ecx+92]
	jl	SHORT $LN3@matches@2
	jg	SHORT $LN13@matches@2
	mov	eax, DWORD PTR tv195[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+88]
	jb	SHORT $LN3@matches@2
$LN13@matches@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN4@matches@2
	jg	SHORT $LN3@matches@2
	mov	eax, DWORD PTR tv203[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jbe	SHORT $LN4@matches@2
$LN3@matches@2:
; Line 1574
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1575
	xor	al, al
	jmp	$LN10@matches@2
$LN4@matches@2:
; Line 1578
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv213[ebp], ecx
	mov	edx, DWORD PTR tv213[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	$LN2@matches@2
	mov	eax, DWORD PTR tv213[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	$LN2@matches@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv219[ebp], edx
	mov	DWORD PTR tv220[ebp], ecx
	mov	eax, DWORD PTR tv219[ebp]
	mov	ecx, DWORD PTR tv220[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+16]
	jne	SHORT $LN2@matches@2
	mov	eax, DWORD PTR tv219[ebp]
	mov	ecx, DWORD PTR tv220[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN2@matches@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv236[ebp], ecx
	mov	DWORD PTR tv237[ebp], eax
	mov	DWORD PTR tv237[ebp+4], edx
	mov	edx, DWORD PTR tv236[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv237[ebp]
	jne	SHORT $LN2@matches@2
	mov	ecx, DWORD PTR tv236[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv237[ebp+4]
	jne	SHORT $LN2@matches@2
; Line 1579
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchChunkAt
; Line 1580
	jmp	SHORT $LN1@matches@2
$LN2@matches@2:
; Line 1581
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _nativeStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nativeStart$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::MatchAt
$LN1@matches@2:
; Line 1583
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+106]
$LN10@matches@2:
; Line 1584
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?matches@RegexMatcher@icu_56@@UAEC_JAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::matches
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?pattern@RegexMatcher@icu_56@@UBEABVRegexPattern@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?pattern@RegexMatcher@icu_56@@UBEABVRegexPattern@2@XZ PROC ; icu_56::RegexMatcher::pattern, COMDAT
; _this$ = ecx
; Line 1593
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1594
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 1595
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?pattern@RegexMatcher@icu_56@@UBEABVRegexPattern@2@XZ ENDP ; icu_56::RegexMatcher::pattern
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?region@RegexMatcher@icu_56@@UAEAAV12@_J00AAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv202 = -240						; size = 4
tv194 = -240						; size = 4
tv159 = -240						; size = 4
tv151 = -240						; size = 4
_nativeLimit$ = -40					; size = 8
_nativeStart$ = -24					; size = 8
_this$ = -8						; size = 4
_regionStart$ = 8					; size = 8
_regionLimit$ = 16					; size = 8
_startIndex$ = 24					; size = 8
_status$ = 32						; size = 4
?region@RegexMatcher@icu_56@@UAEAAV12@_J00AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::region, COMDAT
; _this$ = ecx
; Line 1604
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1605
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN12@region
; Line 1606
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN13@region
$LN12@region:
; Line 1609
	mov	eax, DWORD PTR _regionStart$[ebp+4]
	cmp	eax, DWORD PTR _regionLimit$[ebp+4]
	jg	SHORT $LN10@region
	jl	SHORT $LN15@region
	mov	ecx, DWORD PTR _regionStart$[ebp]
	cmp	ecx, DWORD PTR _regionLimit$[ebp]
	ja	SHORT $LN10@region
$LN15@region:
	cmp	DWORD PTR _regionStart$[ebp+4], 0
	jl	SHORT $LN10@region
	jg	SHORT $LN16@region
	cmp	DWORD PTR _regionStart$[ebp], 0
	jb	SHORT $LN10@region
$LN16@region:
	cmp	DWORD PTR _regionLimit$[ebp+4], 0
	jg	SHORT $LN11@region
	jl	SHORT $LN10@region
	cmp	DWORD PTR _regionLimit$[ebp], 0
	jae	SHORT $LN11@region
$LN10@region:
; Line 1610
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
$LN11@region:
; Line 1613
	mov	eax, DWORD PTR _regionStart$[ebp]
	mov	DWORD PTR _nativeStart$[ebp], eax
	mov	ecx, DWORD PTR _regionStart$[ebp+4]
	mov	DWORD PTR _nativeStart$[ebp+4], ecx
; Line 1614
	mov	eax, DWORD PTR _regionLimit$[ebp]
	mov	DWORD PTR _nativeLimit$[ebp], eax
	mov	ecx, DWORD PTR _regionLimit$[ebp+4]
	mov	DWORD PTR _nativeLimit$[ebp+4], ecx
; Line 1615
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv151[ebp], eax
	mov	ecx, DWORD PTR tv151[ebp]
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jg	SHORT $LN8@region
	jl	SHORT $LN18@region
	mov	eax, DWORD PTR tv151[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	ja	SHORT $LN8@region
$LN18@region:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv159[ebp], eax
	mov	ecx, DWORD PTR tv159[ebp]
	mov	edx, DWORD PTR _nativeLimit$[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jl	SHORT $LN9@region
	jg	SHORT $LN8@region
	mov	eax, DWORD PTR tv159[ebp]
	mov	ecx, DWORD PTR _nativeLimit$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN9@region
$LN8@region:
; Line 1616
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
$LN9@region:
; Line 1619
	mov	eax, DWORD PTR _startIndex$[ebp]
	and	eax, DWORD PTR _startIndex$[ebp+4]
	cmp	eax, -1
	jne	SHORT $LN7@region
; Line 1620
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1621
	jmp	SHORT $LN6@region
$LN7@region:
; Line 1622
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ ; icu_56::RegexMatcher::resetPreserveRegion
$LN6@region:
; Line 1624
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	mov	DWORD PTR [eax+44], edx
; Line 1625
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeLimit$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR _nativeLimit$[ebp+4]
	mov	DWORD PTR [eax+52], edx
; Line 1626
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	mov	DWORD PTR [eax+88], ecx
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	mov	DWORD PTR [eax+92], edx
; Line 1627
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeLimit$[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	edx, DWORD PTR _nativeLimit$[ebp+4]
	mov	DWORD PTR [eax+100], edx
; Line 1629
	mov	eax, DWORD PTR _startIndex$[ebp]
	and	eax, DWORD PTR _startIndex$[ebp+4]
	cmp	eax, -1
	je	SHORT $LN5@region
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv194[ebp], eax
	mov	ecx, DWORD PTR tv194[ebp]
	mov	edx, DWORD PTR _startIndex$[ebp+4]
	cmp	edx, DWORD PTR [ecx+92]
	jl	SHORT $LN3@region
	jg	SHORT $LN20@region
	mov	eax, DWORD PTR tv194[ebp]
	mov	ecx, DWORD PTR _startIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+88]
	jb	SHORT $LN3@region
$LN20@region:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv202[ebp], eax
	mov	ecx, DWORD PTR tv202[ebp]
	mov	edx, DWORD PTR _startIndex$[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN4@region
	jg	SHORT $LN3@region
	mov	eax, DWORD PTR tv202[ebp]
	mov	ecx, DWORD PTR _startIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jbe	SHORT $LN4@region
$LN3@region:
; Line 1631
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
$LN4@region:
; Line 1633
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _startIndex$[ebp]
	mov	DWORD PTR [eax+120], ecx
	mov	edx, DWORD PTR _startIndex$[ebp+4]
	mov	DWORD PTR [eax+124], edx
$LN5@region:
; Line 1636
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+104]
	test	ecx, ecx
	jne	SHORT $LN2@region
; Line 1637
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	mov	DWORD PTR [eax+76], edx
; Line 1638
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeLimit$[ebp]
	mov	DWORD PTR [eax+80], ecx
	mov	edx, DWORD PTR _nativeLimit$[ebp+4]
	mov	DWORD PTR [eax+84], edx
$LN2@region:
; Line 1640
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	SHORT $LN1@region
; Line 1641
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	mov	DWORD PTR [eax+60], edx
; Line 1642
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeLimit$[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	edx, DWORD PTR _nativeLimit$[ebp+4]
	mov	DWORD PTR [eax+68], edx
$LN1@region:
; Line 1644
	mov	eax, DWORD PTR _this$[ebp]
$LN13@region:
; Line 1645
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?region@RegexMatcher@icu_56@@UAEAAV12@_J00AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::region
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?region@RegexMatcher@icu_56@@UAEAAV12@_J0AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 8
_limit$ = 16						; size = 8
_status$ = 24						; size = 4
?region@RegexMatcher@icu_56@@UAEAAV12@_J0AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::region, COMDAT
; _this$ = ecx
; Line 1647
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1648
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	-1
	push	-1
	mov	ecx, DWORD PTR _limit$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1649
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?region@RegexMatcher@icu_56@@UAEAAV12@_J0AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::region
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?regionEnd@RegexMatcher@icu_56@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?regionEnd@RegexMatcher@icu_56@@UBEHXZ PROC		; icu_56::RegexMatcher::regionEnd, COMDAT
; _this$ = ecx
; Line 1656
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1657
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
; Line 1658
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?regionEnd@RegexMatcher@icu_56@@UBEHXZ ENDP		; icu_56::RegexMatcher::regionEnd
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?regionEnd64@RegexMatcher@icu_56@@UBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?regionEnd64@RegexMatcher@icu_56@@UBE_JXZ PROC		; icu_56::RegexMatcher::regionEnd64, COMDAT
; _this$ = ecx
; Line 1660
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1661
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR [ecx+52]
; Line 1662
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?regionEnd64@RegexMatcher@icu_56@@UBE_JXZ ENDP		; icu_56::RegexMatcher::regionEnd64
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?regionStart@RegexMatcher@icu_56@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?regionStart@RegexMatcher@icu_56@@UBEHXZ PROC		; icu_56::RegexMatcher::regionStart, COMDAT
; _this$ = ecx
; Line 1669
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1670
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
; Line 1671
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?regionStart@RegexMatcher@icu_56@@UBEHXZ ENDP		; icu_56::RegexMatcher::regionStart
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?regionStart64@RegexMatcher@icu_56@@UBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?regionStart64@RegexMatcher@icu_56@@UBE_JXZ PROC	; icu_56::RegexMatcher::regionStart64, COMDAT
; _this$ = ecx
; Line 1673
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1674
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	mov	edx, DWORD PTR [ecx+44]
; Line 1675
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?regionStart64@RegexMatcher@icu_56@@UBE_JXZ ENDP	; icu_56::RegexMatcher::regionStart64
_TEXT	ENDS
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z$0
__ehfuncinfo$?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
$T50261 = -540						; size = 4
_resultString$ = -336					; size = 64
_resultText$ = -264					; size = 112
_replacementText$ = -144				; size = 112
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_replacement$ = 12					; size = 4
_status$ = 16						; size = 4
?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::replaceAll, COMDAT
; _this$ = ecx
; Line 1683
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 532				; 00000214H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-544]
	mov	ecx, 133				; 00000085H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T50261[ebp], 0
; Line 1684
	mov	DWORD PTR _replacementText$[ebp], 878368812 ; 345ad82cH
	mov	DWORD PTR _replacementText$[ebp+4], 0
	mov	DWORD PTR _replacementText$[ebp+8], 0
	mov	DWORD PTR _replacementText$[ebp+12], 112 ; 00000070H
	mov	DWORD PTR _replacementText$[ebp+16], 0
	mov	DWORD PTR _replacementText$[ebp+20], 0
	mov	DWORD PTR _replacementText$[ebp+24], 0
	mov	DWORD PTR _replacementText$[ebp+28], 0
	mov	DWORD PTR _replacementText$[ebp+32], 0
	mov	DWORD PTR _replacementText$[ebp+36], 0
	mov	DWORD PTR _replacementText$[ebp+40], 0
	mov	DWORD PTR _replacementText$[ebp+44], 0
	mov	DWORD PTR _replacementText$[ebp+48], 0
	mov	DWORD PTR _replacementText$[ebp+52], 0
	mov	DWORD PTR _replacementText$[ebp+56], 0
	mov	DWORD PTR _replacementText$[ebp+60], 0
	mov	DWORD PTR _replacementText$[ebp+64], 0
	mov	DWORD PTR _replacementText$[ebp+68], 0
	mov	DWORD PTR _replacementText$[ebp+72], 0
	mov	DWORD PTR _replacementText$[ebp+76], 0
	mov	DWORD PTR _replacementText$[ebp+80], 0
	mov	DWORD PTR _replacementText$[ebp+84], 0
	mov	DWORD PTR _replacementText$[ebp+88], 0
	mov	DWORD PTR _replacementText$[ebp+92], 0
	mov	DWORD PTR _replacementText$[ebp+96], 0
	mov	DWORD PTR _replacementText$[ebp+100], 0
	mov	DWORD PTR _replacementText$[ebp+104], 0
	mov	DWORD PTR _replacementText$[ebp+108], 0
; Line 1685
	mov	DWORD PTR _resultText$[ebp], 878368812	; 345ad82cH
	mov	DWORD PTR _resultText$[ebp+4], 0
	mov	DWORD PTR _resultText$[ebp+8], 0
	mov	DWORD PTR _resultText$[ebp+12], 112	; 00000070H
	mov	DWORD PTR _resultText$[ebp+16], 0
	mov	DWORD PTR _resultText$[ebp+20], 0
	mov	DWORD PTR _resultText$[ebp+24], 0
	mov	DWORD PTR _resultText$[ebp+28], 0
	mov	DWORD PTR _resultText$[ebp+32], 0
	mov	DWORD PTR _resultText$[ebp+36], 0
	mov	DWORD PTR _resultText$[ebp+40], 0
	mov	DWORD PTR _resultText$[ebp+44], 0
	mov	DWORD PTR _resultText$[ebp+48], 0
	mov	DWORD PTR _resultText$[ebp+52], 0
	mov	DWORD PTR _resultText$[ebp+56], 0
	mov	DWORD PTR _resultText$[ebp+60], 0
	mov	DWORD PTR _resultText$[ebp+64], 0
	mov	DWORD PTR _resultText$[ebp+68], 0
	mov	DWORD PTR _resultText$[ebp+72], 0
	mov	DWORD PTR _resultText$[ebp+76], 0
	mov	DWORD PTR _resultText$[ebp+80], 0
	mov	DWORD PTR _resultText$[ebp+84], 0
	mov	DWORD PTR _resultText$[ebp+88], 0
	mov	DWORD PTR _resultText$[ebp+92], 0
	mov	DWORD PTR _resultText$[ebp+96], 0
	mov	DWORD PTR _resultText$[ebp+100], 0
	mov	DWORD PTR _resultText$[ebp+104], 0
	mov	DWORD PTR _resultText$[ebp+108], 0
; Line 1686
	mov	esi, esp
	lea	ecx, DWORD PTR _resultString$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1687
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@replaceAll
; Line 1688
	mov	esi, esp
	lea	eax, DWORD PTR _resultString$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@$$QAV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T50261[ebp]
	or	ecx, 1
	mov	DWORD PTR $T50261[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _resultString$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN2@replaceAll
$LN1@replaceAll:
; Line 1691
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	lea	edx, DWORD PTR _replacementText$[ebp]
	push	edx
	call	_utext_openConstUnicodeString_56
	add	esp, 12					; 0000000cH
; Line 1692
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _resultString$[ebp]
	push	ecx
	lea	edx, DWORD PTR _resultText$[ebp]
	push	edx
	call	_utext_openUnicodeString_56
	add	esp, 12					; 0000000cH
; Line 1694
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _resultText$[ebp]
	push	ecx
	lea	edx, DWORD PTR _replacementText$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1696
	lea	eax, DWORD PTR _resultText$[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
; Line 1697
	lea	eax, DWORD PTR _replacementText$[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
; Line 1699
	mov	esi, esp
	lea	eax, DWORD PTR _resultString$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@$$QAV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T50261[ebp]
	or	ecx, 1
	mov	DWORD PTR $T50261[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _resultString$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@replaceAll:
; Line 1700
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@replaceAll
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 544				; 00000220H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN12@replaceAll:
	DD	3
	DD	$LN11@replaceAll
$LN11@replaceAll:
	DD	-144					; ffffff70H
	DD	112					; 00000070H
	DD	$LN7@replaceAll
	DD	-264					; fffffef8H
	DD	112					; 00000070H
	DD	$LN8@replaceAll
	DD	-336					; fffffeb0H
	DD	64					; 00000040H
	DD	$LN9@replaceAll
$LN9@replaceAll:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN8@replaceAll:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN7@replaceAll:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR _resultString$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z$1:
	mov	eax, DWORD PTR $T50261[ebp]
	and	eax, 1
	je	$LN6@replaceAll
	and	DWORD PTR $T50261[ebp], -2		; fffffffeH
	mov	esi, esp
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
$LN6@replaceAll:
	ret	0
__ehhandler$?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-548]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?replaceAll@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::replaceAll
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replaceAll@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@0AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_empty$40843 = -204					; size = 112
_emptyString$40842 = -84				; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_replacement$ = 8					; size = 4
_dest$ = 12						; size = 4
_status$ = 16						; size = 4
?replaceAll@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@0AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::replaceAll, COMDAT
; _this$ = ecx
; Line 1706
	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1707
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@replaceAll@2
; Line 1708
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN8@replaceAll@2
$LN7@replaceAll@2:
; Line 1710
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@replaceAll@2
; Line 1711
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 1712
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN8@replaceAll@2
$LN6@replaceAll@2:
; Line 1715
	cmp	DWORD PTR _dest$[ebp], 0
	jne	$LN5@replaceAll@2
; Line 1716
	mov	esi, esp
	lea	ecx, DWORD PTR _emptyString$40842[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1717
	mov	DWORD PTR _empty$40843[ebp], 878368812	; 345ad82cH
	mov	DWORD PTR _empty$40843[ebp+4], 0
	mov	DWORD PTR _empty$40843[ebp+8], 0
	mov	DWORD PTR _empty$40843[ebp+12], 112	; 00000070H
	mov	DWORD PTR _empty$40843[ebp+16], 0
	mov	DWORD PTR _empty$40843[ebp+20], 0
	mov	DWORD PTR _empty$40843[ebp+24], 0
	mov	DWORD PTR _empty$40843[ebp+28], 0
	mov	DWORD PTR _empty$40843[ebp+32], 0
	mov	DWORD PTR _empty$40843[ebp+36], 0
	mov	DWORD PTR _empty$40843[ebp+40], 0
	mov	DWORD PTR _empty$40843[ebp+44], 0
	mov	DWORD PTR _empty$40843[ebp+48], 0
	mov	DWORD PTR _empty$40843[ebp+52], 0
	mov	DWORD PTR _empty$40843[ebp+56], 0
	mov	DWORD PTR _empty$40843[ebp+60], 0
	mov	DWORD PTR _empty$40843[ebp+64], 0
	mov	DWORD PTR _empty$40843[ebp+68], 0
	mov	DWORD PTR _empty$40843[ebp+72], 0
	mov	DWORD PTR _empty$40843[ebp+76], 0
	mov	DWORD PTR _empty$40843[ebp+80], 0
	mov	DWORD PTR _empty$40843[ebp+84], 0
	mov	DWORD PTR _empty$40843[ebp+88], 0
	mov	DWORD PTR _empty$40843[ebp+92], 0
	mov	DWORD PTR _empty$40843[ebp+96], 0
	mov	DWORD PTR _empty$40843[ebp+100], 0
	mov	DWORD PTR _empty$40843[ebp+104], 0
	mov	DWORD PTR _empty$40843[ebp+108], 0
; Line 1719
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _emptyString$40842[ebp]
	push	ecx
	lea	edx, DWORD PTR _empty$40843[ebp]
	push	edx
	call	_utext_openUnicodeString_56
	add	esp, 12					; 0000000cH
; Line 1720
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	1
	lea	ecx, DWORD PTR _empty$40843[ebp]
	push	ecx
	push	0
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _dest$[ebp], eax
; Line 1721
	lea	eax, DWORD PTR _empty$40843[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
; Line 1722
	mov	esi, esp
	lea	ecx, DWORD PTR _emptyString$40842[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@replaceAll@2:
; Line 1724
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN4@replaceAll@2
; Line 1725
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@replaceAll@2:
; Line 1726
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@replaceAll@2
; Line 1727
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1728
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@replaceAll@2
; Line 1729
	jmp	SHORT $LN2@replaceAll@2
$LN1@replaceAll@2:
; Line 1731
	jmp	SHORT $LN3@replaceAll@2
$LN2@replaceAll@2:
; Line 1732
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@replaceAll@2:
; Line 1735
	mov	eax, DWORD PTR _dest$[ebp]
$LN8@replaceAll@2:
; Line 1736
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@replaceAll@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN14@replaceAll@2:
	DD	2
	DD	$LN13@replaceAll@2
$LN13@replaceAll@2:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN11@replaceAll@2
	DD	-204					; ffffff34H
	DD	112					; 00000070H
	DD	$LN12@replaceAll@2
$LN12@replaceAll@2:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
$LN11@replaceAll@2:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
?replaceAll@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@0AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::replaceAll
_TEXT	ENDS
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z$0
__ehfuncinfo$?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
$T50287 = -540						; size = 4
_resultString$ = -336					; size = 64
_resultText$ = -264					; size = 112
_replacementText$ = -144				; size = 112
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_replacement$ = 12					; size = 4
_status$ = 16						; size = 4
?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::replaceFirst, COMDAT
; _this$ = ecx
; Line 1744
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 532				; 00000214H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-544]
	mov	ecx, 133				; 00000085H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T50287[ebp], 0
; Line 1745
	mov	DWORD PTR _replacementText$[ebp], 878368812 ; 345ad82cH
	mov	DWORD PTR _replacementText$[ebp+4], 0
	mov	DWORD PTR _replacementText$[ebp+8], 0
	mov	DWORD PTR _replacementText$[ebp+12], 112 ; 00000070H
	mov	DWORD PTR _replacementText$[ebp+16], 0
	mov	DWORD PTR _replacementText$[ebp+20], 0
	mov	DWORD PTR _replacementText$[ebp+24], 0
	mov	DWORD PTR _replacementText$[ebp+28], 0
	mov	DWORD PTR _replacementText$[ebp+32], 0
	mov	DWORD PTR _replacementText$[ebp+36], 0
	mov	DWORD PTR _replacementText$[ebp+40], 0
	mov	DWORD PTR _replacementText$[ebp+44], 0
	mov	DWORD PTR _replacementText$[ebp+48], 0
	mov	DWORD PTR _replacementText$[ebp+52], 0
	mov	DWORD PTR _replacementText$[ebp+56], 0
	mov	DWORD PTR _replacementText$[ebp+60], 0
	mov	DWORD PTR _replacementText$[ebp+64], 0
	mov	DWORD PTR _replacementText$[ebp+68], 0
	mov	DWORD PTR _replacementText$[ebp+72], 0
	mov	DWORD PTR _replacementText$[ebp+76], 0
	mov	DWORD PTR _replacementText$[ebp+80], 0
	mov	DWORD PTR _replacementText$[ebp+84], 0
	mov	DWORD PTR _replacementText$[ebp+88], 0
	mov	DWORD PTR _replacementText$[ebp+92], 0
	mov	DWORD PTR _replacementText$[ebp+96], 0
	mov	DWORD PTR _replacementText$[ebp+100], 0
	mov	DWORD PTR _replacementText$[ebp+104], 0
	mov	DWORD PTR _replacementText$[ebp+108], 0
; Line 1746
	mov	DWORD PTR _resultText$[ebp], 878368812	; 345ad82cH
	mov	DWORD PTR _resultText$[ebp+4], 0
	mov	DWORD PTR _resultText$[ebp+8], 0
	mov	DWORD PTR _resultText$[ebp+12], 112	; 00000070H
	mov	DWORD PTR _resultText$[ebp+16], 0
	mov	DWORD PTR _resultText$[ebp+20], 0
	mov	DWORD PTR _resultText$[ebp+24], 0
	mov	DWORD PTR _resultText$[ebp+28], 0
	mov	DWORD PTR _resultText$[ebp+32], 0
	mov	DWORD PTR _resultText$[ebp+36], 0
	mov	DWORD PTR _resultText$[ebp+40], 0
	mov	DWORD PTR _resultText$[ebp+44], 0
	mov	DWORD PTR _resultText$[ebp+48], 0
	mov	DWORD PTR _resultText$[ebp+52], 0
	mov	DWORD PTR _resultText$[ebp+56], 0
	mov	DWORD PTR _resultText$[ebp+60], 0
	mov	DWORD PTR _resultText$[ebp+64], 0
	mov	DWORD PTR _resultText$[ebp+68], 0
	mov	DWORD PTR _resultText$[ebp+72], 0
	mov	DWORD PTR _resultText$[ebp+76], 0
	mov	DWORD PTR _resultText$[ebp+80], 0
	mov	DWORD PTR _resultText$[ebp+84], 0
	mov	DWORD PTR _resultText$[ebp+88], 0
	mov	DWORD PTR _resultText$[ebp+92], 0
	mov	DWORD PTR _resultText$[ebp+96], 0
	mov	DWORD PTR _resultText$[ebp+100], 0
	mov	DWORD PTR _resultText$[ebp+104], 0
	mov	DWORD PTR _resultText$[ebp+108], 0
; Line 1747
	mov	esi, esp
	lea	ecx, DWORD PTR _resultString$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1749
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	lea	edx, DWORD PTR _replacementText$[ebp]
	push	edx
	call	_utext_openConstUnicodeString_56
	add	esp, 12					; 0000000cH
; Line 1750
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _resultString$[ebp]
	push	ecx
	lea	edx, DWORD PTR _resultText$[ebp]
	push	edx
	call	_utext_openUnicodeString_56
	add	esp, 12					; 0000000cH
; Line 1752
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _resultText$[ebp]
	push	ecx
	lea	edx, DWORD PTR _replacementText$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1754
	lea	eax, DWORD PTR _resultText$[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
; Line 1755
	lea	eax, DWORD PTR _replacementText$[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
; Line 1757
	mov	esi, esp
	lea	eax, DWORD PTR _resultString$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@$$QAV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T50287[ebp]
	or	ecx, 1
	mov	DWORD PTR $T50287[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _resultString$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1758
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@replaceFir
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 544				; 00000220H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN11@replaceFir:
	DD	3
	DD	$LN10@replaceFir
$LN10@replaceFir:
	DD	-144					; ffffff70H
	DD	112					; 00000070H
	DD	$LN6@replaceFir
	DD	-264					; fffffef8H
	DD	112					; 00000070H
	DD	$LN7@replaceFir
	DD	-336					; fffffeb0H
	DD	64					; 00000040H
	DD	$LN8@replaceFir
$LN8@replaceFir:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN7@replaceFir:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN6@replaceFir:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR _resultString$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z$1:
	mov	eax, DWORD PTR $T50287[ebp]
	and	eax, 1
	je	$LN5@replaceFir
	and	DWORD PTR $T50287[ebp], -2		; fffffffeH
	mov	esi, esp
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
$LN5@replaceFir:
	ret	0
__ehhandler$?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-548]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?replaceFirst@RegexMatcher@icu_56@@UAE?AVUnicodeString@2@ABV32@AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::replaceFirst
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replaceFirst@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@0AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_empty$40872 = -204					; size = 112
_emptyString$40871 = -84				; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_replacement$ = 8					; size = 4
_dest$ = 12						; size = 4
_status$ = 16						; size = 4
?replaceFirst@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@0AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::replaceFirst, COMDAT
; _this$ = ecx
; Line 1763
	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1764
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@replaceFir@2
; Line 1765
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN5@replaceFir@2
$LN4@replaceFir@2:
; Line 1767
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@replaceFir@2
; Line 1768
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 1769
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN5@replaceFir@2
$LN3@replaceFir@2:
; Line 1772
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1773
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@replaceFir@2
; Line 1774
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN5@replaceFir@2
$LN2@replaceFir@2:
; Line 1777
	cmp	DWORD PTR _dest$[ebp], 0
	jne	$LN1@replaceFir@2
; Line 1778
	mov	esi, esp
	lea	ecx, DWORD PTR _emptyString$40871[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1779
	mov	DWORD PTR _empty$40872[ebp], 878368812	; 345ad82cH
	mov	DWORD PTR _empty$40872[ebp+4], 0
	mov	DWORD PTR _empty$40872[ebp+8], 0
	mov	DWORD PTR _empty$40872[ebp+12], 112	; 00000070H
	mov	DWORD PTR _empty$40872[ebp+16], 0
	mov	DWORD PTR _empty$40872[ebp+20], 0
	mov	DWORD PTR _empty$40872[ebp+24], 0
	mov	DWORD PTR _empty$40872[ebp+28], 0
	mov	DWORD PTR _empty$40872[ebp+32], 0
	mov	DWORD PTR _empty$40872[ebp+36], 0
	mov	DWORD PTR _empty$40872[ebp+40], 0
	mov	DWORD PTR _empty$40872[ebp+44], 0
	mov	DWORD PTR _empty$40872[ebp+48], 0
	mov	DWORD PTR _empty$40872[ebp+52], 0
	mov	DWORD PTR _empty$40872[ebp+56], 0
	mov	DWORD PTR _empty$40872[ebp+60], 0
	mov	DWORD PTR _empty$40872[ebp+64], 0
	mov	DWORD PTR _empty$40872[ebp+68], 0
	mov	DWORD PTR _empty$40872[ebp+72], 0
	mov	DWORD PTR _empty$40872[ebp+76], 0
	mov	DWORD PTR _empty$40872[ebp+80], 0
	mov	DWORD PTR _empty$40872[ebp+84], 0
	mov	DWORD PTR _empty$40872[ebp+88], 0
	mov	DWORD PTR _empty$40872[ebp+92], 0
	mov	DWORD PTR _empty$40872[ebp+96], 0
	mov	DWORD PTR _empty$40872[ebp+100], 0
	mov	DWORD PTR _empty$40872[ebp+104], 0
	mov	DWORD PTR _empty$40872[ebp+108], 0
; Line 1781
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _emptyString$40871[ebp]
	push	ecx
	lea	edx, DWORD PTR _empty$40872[ebp]
	push	edx
	call	_utext_openUnicodeString_56
	add	esp, 12					; 0000000cH
; Line 1782
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	1
	lea	ecx, DWORD PTR _empty$40872[ebp]
	push	ecx
	push	0
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _dest$[ebp], eax
; Line 1783
	lea	eax, DWORD PTR _empty$40872[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
; Line 1784
	mov	esi, esp
	lea	ecx, DWORD PTR _emptyString$40871[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@replaceFir@2:
; Line 1786
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replacement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1787
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1789
	mov	eax, DWORD PTR _dest$[ebp]
$LN5@replaceFir@2:
; Line 1790
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@replaceFir@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN11@replaceFir@2:
	DD	2
	DD	$LN10@replaceFir@2
$LN10@replaceFir@2:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN8@replaceFir@2
	DD	-204					; ffffff34H
	DD	112					; 00000070H
	DD	$LN9@replaceFir@2
$LN9@replaceFir@2:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
$LN8@replaceFir@2:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
?replaceFirst@RegexMatcher@icu_56@@UAEPAUUText@@PAU3@0AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::replaceFirst
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?requireEnd@RegexMatcher@icu_56@@UBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?requireEnd@RegexMatcher@icu_56@@UBECXZ PROC		; icu_56::RegexMatcher::requireEnd, COMDAT
; _this$ = ecx
; Line 1798
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1799
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+145]
; Line 1800
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?requireEnd@RegexMatcher@icu_56@@UBECXZ ENDP		; icu_56::RegexMatcher::requireEnd
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?reset@RegexMatcher@icu_56@@UAEAAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?reset@RegexMatcher@icu_56@@UAEAAV12@XZ PROC		; icu_56::RegexMatcher::reset, COMDAT
; _this$ = ecx
; Line 1808
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1809
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	DWORD PTR [eax+44], 0
; Line 1810
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+48], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+52], ecx
; Line 1811
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
	mov	DWORD PTR [eax+92], 0
; Line 1812
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+96], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+100], ecx
; Line 1813
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	DWORD PTR [eax+60], 0
; Line 1814
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+64], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+68], ecx
; Line 1815
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
	mov	DWORD PTR [eax+76], 0
; Line 1816
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+80], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+84], ecx
; Line 1817
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ ; icu_56::RegexMatcher::resetPreserveRegion
; Line 1818
	mov	eax, DWORD PTR _this$[ebp]
; Line 1819
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?reset@RegexMatcher@icu_56@@UAEAAV12@XZ ENDP		; icu_56::RegexMatcher::reset
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ PROC	; icu_56::RegexMatcher::resetPreserveRegion, COMDAT
; _this$ = ecx
; Line 1823
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1824
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+112], 0
	mov	DWORD PTR [eax+116], 0
; Line 1825
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+120], 0
	mov	DWORD PTR [eax+124], 0
; Line 1826
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+128], -1
	mov	DWORD PTR [eax+132], -1
; Line 1827
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0
	mov	DWORD PTR [eax+140], 0
; Line 1828
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+106], 0
; Line 1829
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 0
; Line 1830
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 0
; Line 1831
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], 0
; Line 1832
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+232], 10000		; 00002710H
; Line 1834
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ ENDP	; icu_56::RegexMatcher::resetPreserveRegion
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?reset@RegexMatcher@icu_56@@UAEAAV12@ABVUnicodeString@2@@Z
_TEXT	SEGMENT
tv140 = -244						; size = 4
$T50316 = -236						; size = 4
$T50317 = -224						; size = 4
_status$40892 = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?reset@RegexMatcher@icu_56@@UAEAAV12@ABVUnicodeString@2@@Z PROC ; icu_56::RegexMatcher::reset, COMDAT
; _this$ = ecx
; Line 1837
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1838
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_openConstUnicodeString_56
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1839
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+144]
	test	edx, edx
	je	SHORT $LN3@reset
; Line 1840
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN3@reset:
; Line 1842
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@reset
; Line 1843
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@reset
$LN2@reset:
; Line 1845
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_nativeLength_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], edx
; Line 1847
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1848
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T50317[ebp], ecx
	mov	edx, DWORD PTR $T50317[ebp]
	mov	DWORD PTR $T50316[ebp], edx
	cmp	DWORD PTR $T50316[ebp], 0
	je	SHORT $LN6@reset
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T50316[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T50316[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN7@reset
$LN6@reset:
	mov	DWORD PTR tv140[ebp], 0
$LN7@reset:
; Line 1849
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 1853
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+256], 1
; Line 1855
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN1@reset
; Line 1857
	mov	DWORD PTR _status$40892[ebp], 0
; Line 1858
	mov	esi, esp
	lea	eax, DWORD PTR _status$40892[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+264]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@reset:
; Line 1861
	mov	eax, DWORD PTR _this$[ebp]
$LN4@reset:
; Line 1862
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@reset
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN10@reset:
	DD	1
	DD	$LN9@reset
$LN9@reset:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@reset
$LN8@reset:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?reset@RegexMatcher@icu_56@@UAEAAV12@ABVUnicodeString@2@@Z ENDP ; icu_56::RegexMatcher::reset
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?reset@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@@Z
_TEXT	SEGMENT
tv141 = -244						; size = 4
$T50325 = -236						; size = 4
$T50326 = -224						; size = 4
_status$40903 = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?reset@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@@Z PROC	; icu_56::RegexMatcher::reset, COMDAT
; _this$ = ecx
; Line 1865
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1866
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _input$[ebp]
	je	$LN4@reset@2
; Line 1867
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1868
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+144]
	test	edx, edx
	je	SHORT $LN3@reset@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN3@reset@2:
; Line 1869
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@reset@2
; Line 1870
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@reset@2
$LN2@reset@2:
; Line 1872
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_nativeLength_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], edx
; Line 1874
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T50326[ebp], ecx
	mov	edx, DWORD PTR $T50326[ebp]
	mov	DWORD PTR $T50325[ebp], edx
	cmp	DWORD PTR $T50325[ebp], 0
	je	SHORT $LN7@reset@2
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T50325[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T50325[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN8@reset@2
$LN7@reset@2:
	mov	DWORD PTR tv141[ebp], 0
$LN8@reset@2:
; Line 1875
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 1877
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN4@reset@2
; Line 1879
	mov	DWORD PTR _status$40903[ebp], 0
; Line 1880
	mov	esi, esp
	lea	eax, DWORD PTR _status$40903[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+264]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+264]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@reset@2:
; Line 1884
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1885
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+256], 0
; Line 1887
	mov	eax, DWORD PTR _this$[ebp]
$LN5@reset@2:
; Line 1888
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@reset@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@reset@2:
	DD	1
	DD	$LN10@reset@2
$LN10@reset@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@reset@2
$LN9@reset@2:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?reset@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@@Z ENDP	; icu_56::RegexMatcher::reset
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?reset@RegexMatcher@icu_56@@UAEAAV12@_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv87 = -208						; size = 4
_this$ = -8						; size = 4
_position$ = 8						; size = 8
_status$ = 16						; size = 4
?reset@RegexMatcher@icu_56@@UAEAAV12@_JAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::reset, COMDAT
; _this$ = ecx
; Line 1895
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1896
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@reset@3
; Line 1897
	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN4@reset@3
$LN3@reset@3:
; Line 1899
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1901
	cmp	DWORD PTR _position$[ebp+4], 0
	jl	SHORT $LN1@reset@3
	jg	SHORT $LN6@reset@3
	cmp	DWORD PTR _position$[ebp], 0
	jb	SHORT $LN1@reset@3
$LN6@reset@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR tv87[ebp]
	mov	edx, DWORD PTR _position$[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN2@reset@3
	jg	SHORT $LN1@reset@3
	mov	eax, DWORD PTR tv87[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jbe	SHORT $LN2@reset@3
$LN1@reset@3:
; Line 1902
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1903
	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN4@reset@3
$LN2@reset@3:
; Line 1905
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax+120], ecx
	mov	edx, DWORD PTR _position$[ebp+4]
	mov	DWORD PTR [eax+124], edx
; Line 1906
	mov	eax, DWORD PTR _this$[ebp]
$LN4@reset@3:
; Line 1907
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?reset@RegexMatcher@icu_56@@UAEAAV12@_JAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::reset
_TEXT	ENDS
EXTRN	_utext_getNativeIndex_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?refreshInputText@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv167 = -236						; size = 8
tv164 = -228						; size = 8
_pos$ = -24						; size = 8
_this$ = -8						; size = 4
_input$ = 8						; size = 4
_status$ = 12						; size = 4
?refreshInputText@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::refreshInputText, COMDAT
; _this$ = ecx
; Line 1915
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1916
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@refreshInp
; Line 1917
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN7@refreshInp
$LN6@refreshInp:
; Line 1919
	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN5@refreshInp
; Line 1920
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1921
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN7@refreshInp
$LN5@refreshInp:
; Line 1923
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_nativeLength_56
	add	esp, 4
	mov	esi, eax
	mov	edi, edx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_utext_nativeLength_56
	add	esp, 4
	mov	DWORD PTR tv164[ebp], esi
	mov	DWORD PTR tv164[ebp+4], edi
	mov	DWORD PTR tv167[ebp], eax
	mov	DWORD PTR tv167[ebp+4], edx
	mov	eax, DWORD PTR tv164[ebp]
	cmp	eax, DWORD PTR tv167[ebp]
	jne	SHORT $LN9@refreshInp
	mov	ecx, DWORD PTR tv164[ebp+4]
	cmp	ecx, DWORD PTR tv167[ebp+4]
	je	SHORT $LN4@refreshInp
$LN9@refreshInp:
; Line 1924
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1925
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN7@refreshInp
$LN4@refreshInp:
; Line 1927
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_getNativeIndex_56
	add	esp, 4
	mov	DWORD PTR _pos$[ebp], eax
	mov	DWORD PTR _pos$[ebp+4], edx
; Line 1929
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1930
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@refreshInp
; Line 1931
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN7@refreshInp
$LN3@refreshInp:
; Line 1933
	mov	eax, DWORD PTR _pos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
; Line 1935
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN2@refreshInp
; Line 1936
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_utext_getNativeIndex_56
	add	esp, 4
	mov	DWORD PTR _pos$[ebp], eax
	mov	DWORD PTR _pos$[ebp+4], edx
; Line 1937
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 1938
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@refreshInp
; Line 1939
	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN7@refreshInp
$LN1@refreshInp:
; Line 1941
	mov	eax, DWORD PTR _pos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN2@refreshInp:
; Line 1943
	mov	eax, DWORD PTR _this$[ebp]
$LN7@refreshInp:
; Line 1944
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?refreshInputText@RegexMatcher@icu_56@@UAEAAV12@PAUUText@@AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::refreshInputText
_TEXT	ENDS
PUBLIC	?setTrace@RegexMatcher@icu_56@@QAEXC@Z		; icu_56::RegexMatcher::setTrace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTrace@RegexMatcher@icu_56@@QAEXC@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_state$ = 8						; size = 1
?setTrace@RegexMatcher@icu_56@@QAEXC@Z PROC		; icu_56::RegexMatcher::setTrace, COMDAT
; _this$ = ecx
; Line 1953
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1954
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _state$[ebp]
	mov	BYTE PTR [eax+257], cl
; Line 1955
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?setTrace@RegexMatcher@icu_56@@QAEXC@Z ENDP		; icu_56::RegexMatcher::setTrace
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?split@RegexMatcher@icu_56@@UAEHABVUnicodeString@2@QAV32@HAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_fieldCount$ = -164					; size = 4
_i$ = -152						; size = 4
_destText$ = -140					; size = 4
_inputText$ = -128					; size = 112
_this$ = -8						; size = 4
_input$ = 8						; size = 4
_dest$ = 12						; size = 4
_destCapacity$ = 16					; size = 4
_status$ = 20						; size = 4
?split@RegexMatcher@icu_56@@UAEHABVUnicodeString@2@QAV32@HAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::split, COMDAT
; _this$ = ecx
; Line 2029
	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2030
	mov	DWORD PTR _inputText$[ebp], 878368812	; 345ad82cH
	mov	DWORD PTR _inputText$[ebp+4], 0
	mov	DWORD PTR _inputText$[ebp+8], 0
	mov	DWORD PTR _inputText$[ebp+12], 112	; 00000070H
	mov	DWORD PTR _inputText$[ebp+16], 0
	mov	DWORD PTR _inputText$[ebp+20], 0
	mov	DWORD PTR _inputText$[ebp+24], 0
	mov	DWORD PTR _inputText$[ebp+28], 0
	mov	DWORD PTR _inputText$[ebp+32], 0
	mov	DWORD PTR _inputText$[ebp+36], 0
	mov	DWORD PTR _inputText$[ebp+40], 0
	mov	DWORD PTR _inputText$[ebp+44], 0
	mov	DWORD PTR _inputText$[ebp+48], 0
	mov	DWORD PTR _inputText$[ebp+52], 0
	mov	DWORD PTR _inputText$[ebp+56], 0
	mov	DWORD PTR _inputText$[ebp+60], 0
	mov	DWORD PTR _inputText$[ebp+64], 0
	mov	DWORD PTR _inputText$[ebp+68], 0
	mov	DWORD PTR _inputText$[ebp+72], 0
	mov	DWORD PTR _inputText$[ebp+76], 0
	mov	DWORD PTR _inputText$[ebp+80], 0
	mov	DWORD PTR _inputText$[ebp+84], 0
	mov	DWORD PTR _inputText$[ebp+88], 0
	mov	DWORD PTR _inputText$[ebp+92], 0
	mov	DWORD PTR _inputText$[ebp+96], 0
	mov	DWORD PTR _inputText$[ebp+100], 0
	mov	DWORD PTR _inputText$[ebp+104], 0
	mov	DWORD PTR _inputText$[ebp+108], 0
; Line 2031
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	lea	edx, DWORD PTR _inputText$[ebp]
	push	edx
	call	_utext_openConstUnicodeString_56
	add	esp, 12					; 0000000cH
; Line 2032
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@split
; Line 2033
	xor	eax, eax
	jmp	$LN9@split
$LN8@split:
; Line 2036
	mov	eax, DWORD PTR _destCapacity$[ebp]
	shl	eax, 2
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _destText$[ebp], eax
; Line 2037
	cmp	DWORD PTR _destText$[ebp], 0
	jne	SHORT $LN7@split
; Line 2038
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 2039
	xor	eax, eax
	jmp	$LN9@split
$LN7@split:
; Line 2042
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@split
$LN5@split:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@split:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN4@split
; Line 2043
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	add	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	push	0
	call	_utext_openUnicodeString_56
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _destText$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 2044
	jmp	SHORT $LN5@split
$LN4@split:
; Line 2046
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destText$[ebp]
	push	edx
	lea	eax, DWORD PTR _inputText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fieldCount$[ebp], eax
; Line 2048
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@split
$LN2@split:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@split:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN1@split
; Line 2049
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _destText$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_utext_close_56
	add	esp, 4
; Line 2050
	jmp	SHORT $LN2@split
$LN1@split:
; Line 2052
	mov	eax, DWORD PTR _destText$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 2053
	lea	eax, DWORD PTR _inputText$[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
; Line 2054
	mov	eax, DWORD PTR _fieldCount$[ebp]
$LN9@split:
; Line 2055
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@split
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN13@split:
	DD	1
	DD	$LN12@split
$LN12@split:
	DD	-128					; ffffff80H
	DD	112					; 00000070H
	DD	$LN11@split
$LN11@split:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
?split@RegexMatcher@icu_56@@UAEHABVUnicodeString@2@QAV32@HAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::split
_TEXT	ENDS
EXTRN	_utext_openUChars_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?split@RegexMatcher@icu_56@@UAEHPAUUText@@QAPAU3@HAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv1300 = -1096						; size = 8
tv1053 = -1096						; size = 8
tv845 = -1096						; size = 8
tv1283 = -1092						; size = 4
tv1036 = -1092						; size = 4
tv828 = -1092						; size = 4
tv1299 = -1088						; size = 4
tv1282 = -1088						; size = 4
tv1276 = -1088						; size = 4
tv1243 = -1088						; size = 4
tv1052 = -1088						; size = 4
tv1035 = -1088						; size = 4
tv1029 = -1088						; size = 4
tv844 = -1088						; size = 4
tv827 = -1088						; size = 4
tv821 = -1088						; size = 4
tv813 = -1088						; size = 4
tv798 = -1088						; size = 4
_remainingText$41099 = -888				; size = 112
_remainingChars$41093 = -768				; size = 4
_remaining16Length$41092 = -756				; size = 4
_lengthStatus$41091 = -744				; size = 4
_remainingText$41088 = -732				; size = 112
_groupNum$41071 = -612					; size = 4
_remainingText$41069 = -600				; size = 112
_remainingChars$41063 = -480				; size = 4
_remaining16Length$41062 = -468				; size = 4
_lengthStatus$41061 = -456				; size = 4
_remainingText$41058 = -444				; size = 112
_remainingText$41051 = -324				; size = 112
_remainingChars$41045 = -204				; size = 4
_remaining16Length$41044 = -192				; size = 4
_lengthStatus$41043 = -180				; size = 4
_remainingText$41040 = -168				; size = 112
_numCaptureGroups$ = -48				; size = 4
_i$ = -36						; size = 4
_nextOutputStringStart$ = -24				; size = 8
_this$ = -8						; size = 4
_input$ = 8						; size = 4
_dest$ = 12						; size = 4
_destCapacity$ = 16					; size = 4
_status$ = 20						; size = 4
?split@RegexMatcher@icu_56@@UAEHPAUUText@@QAPAU3@HAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::split, COMDAT
; _this$ = ecx
; Line 2064
	push	ebp
	mov	ebp, esp
	sub	esp, 1096				; 00000448H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1096]
	mov	ecx, 274				; 00000112H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2068
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN40@split@2
; Line 2069
	xor	eax, eax
	jmp	$LN41@split@2
$LN40@split@2:
; Line 2072
	cmp	DWORD PTR _destCapacity$[ebp], 1
	jge	SHORT $LN39@split@2
; Line 2073
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2074
	xor	eax, eax
	jmp	$LN41@split@2
$LN39@split@2:
; Line 2080
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2081
	mov	DWORD PTR _nextOutputStringStart$[ebp], 0
	mov	DWORD PTR _nextOutputStringStart$[ebp+4], 0
; Line 2082
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv798[ebp], eax
	mov	ecx, DWORD PTR tv798[ebp]
	mov	edx, DWORD PTR tv798[ebp]
	mov	eax, DWORD PTR [ecx+96]
	or	eax, DWORD PTR [edx+100]
	jne	SHORT $LN38@split@2
; Line 2083
	xor	eax, eax
	jmp	$LN41@split@2
$LN38@split@2:
; Line 2090
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+108]
	call	DWORD PTR __imp_?size@UVector32@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _numCaptureGroups$[ebp], eax
; Line 2091
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN37@split@2
$LN36@split@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN37@split@2:
; Line 2092
	mov	eax, DWORD PTR _destCapacity$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jl	$LN34@split@2
; Line 2099
	mov	eax, DWORD PTR _destCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 2100
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv813[ebp], eax
	mov	ecx, DWORD PTR tv813[ebp]
	mov	edx, DWORD PTR [ecx+100]
	cmp	edx, DWORD PTR _nextOutputStringStart$[ebp+4]
	jl	$LN33@split@2
	jg	SHORT $LN43@split@2
	mov	eax, DWORD PTR tv813[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	ecx, DWORD PTR _nextOutputStringStart$[ebp]
	jbe	$LN33@split@2
$LN43@split@2:
; Line 2101
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR tv821[ebp], eax
	mov	ecx, DWORD PTR tv821[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	$LN32@split@2
	mov	edx, DWORD PTR tv821[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	$LN32@split@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR tv827[ebp], eax
	mov	DWORD PTR tv828[ebp], ecx
	mov	edx, DWORD PTR tv827[ebp]
	mov	eax, DWORD PTR tv828[ebp]
	mov	ecx, DWORD PTR [edx+24]
	cmp	ecx, DWORD PTR [eax+16]
	jne	$LN32@split@2
	mov	edx, DWORD PTR tv827[ebp]
	mov	eax, DWORD PTR tv828[ebp]
	mov	ecx, DWORD PTR [edx+28]
	cmp	ecx, DWORD PTR [eax+20]
	jne	$LN32@split@2
	mov	eax, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [eax+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv844[ebp], ecx
	mov	DWORD PTR tv845[ebp], eax
	mov	DWORD PTR tv845[ebp+4], edx
	mov	edx, DWORD PTR tv844[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv845[ebp]
	jne	$LN32@split@2
	mov	ecx, DWORD PTR tv844[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv845[ebp+4]
	jne	$LN32@split@2
; Line 2102
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN31@split@2
; Line 2105
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	sub	edx, DWORD PTR _nextOutputStringStart$[ebp]
	mov	eax, DWORD PTR [ecx+100]
	sbb	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	edx
	push	0
	push	2
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nextOutputStringStart$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _input$[ebp]
	add	eax, DWORD PTR [ecx+48]
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_utext_nativeLength_56
	add	esp, 4
	push	edx
	push	eax
	push	0
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 2106
	jmp	$LN30@split@2
$LN31@split@2:
; Line 2107
	mov	DWORD PTR _remainingText$41040[ebp], 878368812 ; 345ad82cH
	mov	DWORD PTR _remainingText$41040[ebp+4], 0
	mov	DWORD PTR _remainingText$41040[ebp+8], 0
	mov	DWORD PTR _remainingText$41040[ebp+12], 112 ; 00000070H
	mov	DWORD PTR _remainingText$41040[ebp+16], 0
	mov	DWORD PTR _remainingText$41040[ebp+20], 0
	mov	DWORD PTR _remainingText$41040[ebp+24], 0
	mov	DWORD PTR _remainingText$41040[ebp+28], 0
	mov	DWORD PTR _remainingText$41040[ebp+32], 0
	mov	DWORD PTR _remainingText$41040[ebp+36], 0
	mov	DWORD PTR _remainingText$41040[ebp+40], 0
	mov	DWORD PTR _remainingText$41040[ebp+44], 0
	mov	DWORD PTR _remainingText$41040[ebp+48], 0
	mov	DWORD PTR _remainingText$41040[ebp+52], 0
	mov	DWORD PTR _remainingText$41040[ebp+56], 0
	mov	DWORD PTR _remainingText$41040[ebp+60], 0
	mov	DWORD PTR _remainingText$41040[ebp+64], 0
	mov	DWORD PTR _remainingText$41040[ebp+68], 0
	mov	DWORD PTR _remainingText$41040[ebp+72], 0
	mov	DWORD PTR _remainingText$41040[ebp+76], 0
	mov	DWORD PTR _remainingText$41040[ebp+80], 0
	mov	DWORD PTR _remainingText$41040[ebp+84], 0
	mov	DWORD PTR _remainingText$41040[ebp+88], 0
	mov	DWORD PTR _remainingText$41040[ebp+92], 0
	mov	DWORD PTR _remainingText$41040[ebp+96], 0
	mov	DWORD PTR _remainingText$41040[ebp+100], 0
	mov	DWORD PTR _remainingText$41040[ebp+104], 0
	mov	DWORD PTR _remainingText$41040[ebp+108], 0
; Line 2109
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	sub	edx, DWORD PTR _nextOutputStringStart$[ebp]
	mov	eax, DWORD PTR [ecx+100]
	sbb	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	eax
	push	edx
	push	0
	push	2
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nextOutputStringStart$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _input$[ebp]
	add	eax, DWORD PTR [ecx+48]
	push	eax
	lea	edx, DWORD PTR _remainingText$41040[ebp]
	push	edx
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
; Line 2110
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	1
	lea	ecx, DWORD PTR _remainingText$41040[ebp]
	push	ecx
	push	0
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 2111
	lea	eax, DWORD PTR _remainingText$41040[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
$LN30@split@2:
; Line 2113
	jmp	$LN33@split@2
$LN32@split@2:
; Line 2114
	mov	DWORD PTR _lengthStatus$41043[ebp], 0
; Line 2116
	lea	eax, DWORD PTR _lengthStatus$41043[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR [ecx+96]
	push	eax
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nextOutputStringStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _remaining16Length$41044[ebp], eax
; Line 2117
	mov	eax, DWORD PTR _remaining16Length$41044[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _remainingChars$41045[ebp], eax
; Line 2118
	cmp	DWORD PTR _remainingChars$41045[ebp], 0
	jne	SHORT $LN28@split@2
; Line 2119
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 2120
	jmp	$LN35@split@2
$LN28@split@2:
; Line 2123
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _remaining16Length$41044[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _remainingChars$41045[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR [eax+96]
	push	edx
	mov	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
; Line 2124
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN27@split@2
; Line 2125
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _remaining16Length$41044[ebp]
	push	ecx
	mov	edx, DWORD PTR _remainingChars$41045[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_utext_nativeLength_56
	add	esp, 4
	push	edx
	push	eax
	push	0
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 2126
	jmp	$LN26@split@2
$LN27@split@2:
; Line 2127
	mov	DWORD PTR _remainingText$41051[ebp], 878368812 ; 345ad82cH
	mov	DWORD PTR _remainingText$41051[ebp+4], 0
	mov	DWORD PTR _remainingText$41051[ebp+8], 0
	mov	DWORD PTR _remainingText$41051[ebp+12], 112 ; 00000070H
	mov	DWORD PTR _remainingText$41051[ebp+16], 0
	mov	DWORD PTR _remainingText$41051[ebp+20], 0
	mov	DWORD PTR _remainingText$41051[ebp+24], 0
	mov	DWORD PTR _remainingText$41051[ebp+28], 0
	mov	DWORD PTR _remainingText$41051[ebp+32], 0
	mov	DWORD PTR _remainingText$41051[ebp+36], 0
	mov	DWORD PTR _remainingText$41051[ebp+40], 0
	mov	DWORD PTR _remainingText$41051[ebp+44], 0
	mov	DWORD PTR _remainingText$41051[ebp+48], 0
	mov	DWORD PTR _remainingText$41051[ebp+52], 0
	mov	DWORD PTR _remainingText$41051[ebp+56], 0
	mov	DWORD PTR _remainingText$41051[ebp+60], 0
	mov	DWORD PTR _remainingText$41051[ebp+64], 0
	mov	DWORD PTR _remainingText$41051[ebp+68], 0
	mov	DWORD PTR _remainingText$41051[ebp+72], 0
	mov	DWORD PTR _remainingText$41051[ebp+76], 0
	mov	DWORD PTR _remainingText$41051[ebp+80], 0
	mov	DWORD PTR _remainingText$41051[ebp+84], 0
	mov	DWORD PTR _remainingText$41051[ebp+88], 0
	mov	DWORD PTR _remainingText$41051[ebp+92], 0
	mov	DWORD PTR _remainingText$41051[ebp+96], 0
	mov	DWORD PTR _remainingText$41051[ebp+100], 0
	mov	DWORD PTR _remainingText$41051[ebp+104], 0
	mov	DWORD PTR _remainingText$41051[ebp+108], 0
; Line 2128
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _remaining16Length$41044[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _remainingChars$41045[ebp]
	push	ecx
	lea	edx, DWORD PTR _remainingText$41051[ebp]
	push	edx
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
; Line 2129
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	1
	lea	ecx, DWORD PTR _remainingText$41051[ebp]
	push	ecx
	push	0
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 2130
	lea	eax, DWORD PTR _remainingText$41051[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
$LN26@split@2:
; Line 2133
	mov	eax, DWORD PTR _remainingChars$41045[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN33@split@2:
; Line 2136
	jmp	$LN35@split@2
$LN34@split@2:
; Line 2138
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	$LN25@split@2
; Line 2141
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR tv1029[ebp], eax
	mov	ecx, DWORD PTR tv1029[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	$LN24@split@2
	mov	edx, DWORD PTR tv1029[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	$LN24@split@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR tv1035[ebp], eax
	mov	DWORD PTR tv1036[ebp], ecx
	mov	edx, DWORD PTR tv1035[ebp]
	mov	eax, DWORD PTR tv1036[ebp]
	mov	ecx, DWORD PTR [edx+24]
	cmp	ecx, DWORD PTR [eax+16]
	jne	$LN24@split@2
	mov	edx, DWORD PTR tv1035[ebp]
	mov	eax, DWORD PTR tv1036[ebp]
	mov	ecx, DWORD PTR [edx+28]
	cmp	ecx, DWORD PTR [eax+20]
	jne	$LN24@split@2
	mov	eax, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [eax+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv1052[ebp], ecx
	mov	DWORD PTR tv1053[ebp], eax
	mov	DWORD PTR tv1053[ebp+4], edx
	mov	edx, DWORD PTR tv1052[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv1053[ebp]
	jne	$LN24@split@2
	mov	ecx, DWORD PTR tv1052[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv1053[ebp+4]
	jne	$LN24@split@2
; Line 2142
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN23@split@2
; Line 2145
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	sub	edx, DWORD PTR _nextOutputStringStart$[ebp]
	mov	eax, DWORD PTR [ecx+116]
	sbb	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	edx
	push	0
	push	2
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nextOutputStringStart$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _input$[ebp]
	add	eax, DWORD PTR [ecx+48]
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_utext_nativeLength_56
	add	esp, 4
	push	edx
	push	eax
	push	0
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 2146
	jmp	$LN22@split@2
$LN23@split@2:
; Line 2147
	mov	DWORD PTR _remainingText$41058[ebp], 878368812 ; 345ad82cH
	mov	DWORD PTR _remainingText$41058[ebp+4], 0
	mov	DWORD PTR _remainingText$41058[ebp+8], 0
	mov	DWORD PTR _remainingText$41058[ebp+12], 112 ; 00000070H
	mov	DWORD PTR _remainingText$41058[ebp+16], 0
	mov	DWORD PTR _remainingText$41058[ebp+20], 0
	mov	DWORD PTR _remainingText$41058[ebp+24], 0
	mov	DWORD PTR _remainingText$41058[ebp+28], 0
	mov	DWORD PTR _remainingText$41058[ebp+32], 0
	mov	DWORD PTR _remainingText$41058[ebp+36], 0
	mov	DWORD PTR _remainingText$41058[ebp+40], 0
	mov	DWORD PTR _remainingText$41058[ebp+44], 0
	mov	DWORD PTR _remainingText$41058[ebp+48], 0
	mov	DWORD PTR _remainingText$41058[ebp+52], 0
	mov	DWORD PTR _remainingText$41058[ebp+56], 0
	mov	DWORD PTR _remainingText$41058[ebp+60], 0
	mov	DWORD PTR _remainingText$41058[ebp+64], 0
	mov	DWORD PTR _remainingText$41058[ebp+68], 0
	mov	DWORD PTR _remainingText$41058[ebp+72], 0
	mov	DWORD PTR _remainingText$41058[ebp+76], 0
	mov	DWORD PTR _remainingText$41058[ebp+80], 0
	mov	DWORD PTR _remainingText$41058[ebp+84], 0
	mov	DWORD PTR _remainingText$41058[ebp+88], 0
	mov	DWORD PTR _remainingText$41058[ebp+92], 0
	mov	DWORD PTR _remainingText$41058[ebp+96], 0
	mov	DWORD PTR _remainingText$41058[ebp+100], 0
	mov	DWORD PTR _remainingText$41058[ebp+104], 0
	mov	DWORD PTR _remainingText$41058[ebp+108], 0
; Line 2149
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	sub	edx, DWORD PTR _nextOutputStringStart$[ebp]
	mov	eax, DWORD PTR [ecx+116]
	sbb	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	eax
	push	edx
	push	0
	push	2
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nextOutputStringStart$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _input$[ebp]
	add	eax, DWORD PTR [ecx+48]
	push	eax
	lea	edx, DWORD PTR _remainingText$41058[ebp]
	push	edx
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
; Line 2150
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	1
	lea	ecx, DWORD PTR _remainingText$41058[ebp]
	push	ecx
	push	0
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 2151
	lea	eax, DWORD PTR _remainingText$41058[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
$LN22@split@2:
; Line 2153
	jmp	$LN21@split@2
$LN24@split@2:
; Line 2154
	mov	DWORD PTR _lengthStatus$41061[ebp], 0
; Line 2155
	lea	eax, DWORD PTR _lengthStatus$41061[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	mov	eax, DWORD PTR [ecx+112]
	push	eax
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nextOutputStringStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _remaining16Length$41062[ebp], eax
; Line 2156
	mov	eax, DWORD PTR _remaining16Length$41062[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _remainingChars$41063[ebp], eax
; Line 2157
	cmp	DWORD PTR _remainingChars$41063[ebp], 0
	jne	SHORT $LN20@split@2
; Line 2158
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 2159
	jmp	$LN35@split@2
$LN20@split@2:
; Line 2161
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _remaining16Length$41062[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _remainingChars$41063[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR [eax+112]
	push	edx
	mov	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
; Line 2162
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN19@split@2
; Line 2163
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _remaining16Length$41062[ebp]
	push	ecx
	mov	edx, DWORD PTR _remainingChars$41063[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_utext_nativeLength_56
	add	esp, 4
	push	edx
	push	eax
	push	0
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 2164
	jmp	$LN18@split@2
$LN19@split@2:
; Line 2165
	mov	DWORD PTR _remainingText$41069[ebp], 878368812 ; 345ad82cH
	mov	DWORD PTR _remainingText$41069[ebp+4], 0
	mov	DWORD PTR _remainingText$41069[ebp+8], 0
	mov	DWORD PTR _remainingText$41069[ebp+12], 112 ; 00000070H
	mov	DWORD PTR _remainingText$41069[ebp+16], 0
	mov	DWORD PTR _remainingText$41069[ebp+20], 0
	mov	DWORD PTR _remainingText$41069[ebp+24], 0
	mov	DWORD PTR _remainingText$41069[ebp+28], 0
	mov	DWORD PTR _remainingText$41069[ebp+32], 0
	mov	DWORD PTR _remainingText$41069[ebp+36], 0
	mov	DWORD PTR _remainingText$41069[ebp+40], 0
	mov	DWORD PTR _remainingText$41069[ebp+44], 0
	mov	DWORD PTR _remainingText$41069[ebp+48], 0
	mov	DWORD PTR _remainingText$41069[ebp+52], 0
	mov	DWORD PTR _remainingText$41069[ebp+56], 0
	mov	DWORD PTR _remainingText$41069[ebp+60], 0
	mov	DWORD PTR _remainingText$41069[ebp+64], 0
	mov	DWORD PTR _remainingText$41069[ebp+68], 0
	mov	DWORD PTR _remainingText$41069[ebp+72], 0
	mov	DWORD PTR _remainingText$41069[ebp+76], 0
	mov	DWORD PTR _remainingText$41069[ebp+80], 0
	mov	DWORD PTR _remainingText$41069[ebp+84], 0
	mov	DWORD PTR _remainingText$41069[ebp+88], 0
	mov	DWORD PTR _remainingText$41069[ebp+92], 0
	mov	DWORD PTR _remainingText$41069[ebp+96], 0
	mov	DWORD PTR _remainingText$41069[ebp+100], 0
	mov	DWORD PTR _remainingText$41069[ebp+104], 0
	mov	DWORD PTR _remainingText$41069[ebp+108], 0
; Line 2166
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _remaining16Length$41062[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _remainingChars$41063[ebp]
	push	ecx
	lea	edx, DWORD PTR _remainingText$41069[ebp]
	push	edx
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
; Line 2167
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	1
	lea	ecx, DWORD PTR _remainingText$41069[ebp]
	push	ecx
	push	0
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 2168
	lea	eax, DWORD PTR _remainingText$41069[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
$LN18@split@2:
; Line 2171
	mov	eax, DWORD PTR _remainingChars$41063[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN21@split@2:
; Line 2173
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _nextOutputStringStart$[ebp], ecx
	mov	edx, DWORD PTR [eax+124]
	mov	DWORD PTR _nextOutputStringStart$[ebp+4], edx
; Line 2178
	mov	DWORD PTR _groupNum$41071[ebp], 1
	jmp	SHORT $LN17@split@2
$LN16@split@2:
	mov	eax, DWORD PTR _groupNum$41071[ebp]
	add	eax, 1
	mov	DWORD PTR _groupNum$41071[ebp], eax
$LN17@split@2:
	mov	eax, DWORD PTR _groupNum$41071[ebp]
	cmp	eax, DWORD PTR _numCaptureGroups$[ebp]
	jg	$LN15@split@2
; Line 2179
	mov	eax, DWORD PTR _destCapacity$[ebp]
	sub	eax, 2
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN14@split@2
; Line 2183
	jmp	SHORT $LN15@split@2
$LN14@split@2:
; Line 2185
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 2187
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	esi, esp
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _groupNum$41071[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	push	eax
	mov	esi, esp
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _groupNum$41071[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z ; icu_56::utext_extract_replace
	add	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 2188
	jmp	$LN16@split@2
$LN15@split@2:
; Line 2190
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv1243[ebp], eax
	mov	ecx, DWORD PTR tv1243[ebp]
	mov	edx, DWORD PTR _nextOutputStringStart$[ebp]
	cmp	edx, DWORD PTR [ecx+96]
	jne	$LN13@split@2
	mov	eax, DWORD PTR tv1243[ebp]
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp+4]
	cmp	ecx, DWORD PTR [eax+100]
	jne	SHORT $LN13@split@2
; Line 2194
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN12@split@2
; Line 2195
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 2196
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN11@split@2
; Line 2197
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	0
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 2198
	jmp	SHORT $LN12@split@2
$LN11@split@2:
; Line 2200
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	OFFSET ?emptyString@?EK@??split@RegexMatcher@icu_56@@UAEHPAUUText@@QAPAU4@HAAW4UErrorCode@@@Z@4PA_WA
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	push	edx
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_utext_replace_56
	add	esp, 32					; 00000020H
$LN12@split@2:
; Line 2203
	jmp	$LN35@split@2
$LN13@split@2:
; Line 2207
	jmp	$LN9@split@2
$LN25@split@2:
; Line 2211
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR tv1276[ebp], eax
	mov	ecx, DWORD PTR tv1276[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	$LN8@split@2
	mov	edx, DWORD PTR tv1276[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	$LN8@split@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR tv1282[ebp], eax
	mov	DWORD PTR tv1283[ebp], ecx
	mov	edx, DWORD PTR tv1282[ebp]
	mov	eax, DWORD PTR tv1283[ebp]
	mov	ecx, DWORD PTR [edx+24]
	cmp	ecx, DWORD PTR [eax+16]
	jne	$LN8@split@2
	mov	edx, DWORD PTR tv1282[ebp]
	mov	eax, DWORD PTR tv1283[ebp]
	mov	ecx, DWORD PTR [edx+28]
	cmp	ecx, DWORD PTR [eax+20]
	jne	$LN8@split@2
	mov	eax, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [eax+28]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv1299[ebp], ecx
	mov	DWORD PTR tv1300[ebp], eax
	mov	DWORD PTR tv1300[ebp+4], edx
	mov	edx, DWORD PTR tv1299[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR tv1300[ebp]
	jne	$LN8@split@2
	mov	ecx, DWORD PTR tv1299[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR tv1300[ebp+4]
	jne	$LN8@split@2
; Line 2212
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN7@split@2
; Line 2215
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	sub	edx, DWORD PTR _nextOutputStringStart$[ebp]
	mov	eax, DWORD PTR [ecx+100]
	sbb	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	edx
	push	0
	push	2
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nextOutputStringStart$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _input$[ebp]
	add	eax, DWORD PTR [ecx+48]
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_utext_nativeLength_56
	add	esp, 4
	push	edx
	push	eax
	push	0
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 2216
	jmp	$LN6@split@2
$LN7@split@2:
; Line 2217
	mov	DWORD PTR _remainingText$41088[ebp], 878368812 ; 345ad82cH
	mov	DWORD PTR _remainingText$41088[ebp+4], 0
	mov	DWORD PTR _remainingText$41088[ebp+8], 0
	mov	DWORD PTR _remainingText$41088[ebp+12], 112 ; 00000070H
	mov	DWORD PTR _remainingText$41088[ebp+16], 0
	mov	DWORD PTR _remainingText$41088[ebp+20], 0
	mov	DWORD PTR _remainingText$41088[ebp+24], 0
	mov	DWORD PTR _remainingText$41088[ebp+28], 0
	mov	DWORD PTR _remainingText$41088[ebp+32], 0
	mov	DWORD PTR _remainingText$41088[ebp+36], 0
	mov	DWORD PTR _remainingText$41088[ebp+40], 0
	mov	DWORD PTR _remainingText$41088[ebp+44], 0
	mov	DWORD PTR _remainingText$41088[ebp+48], 0
	mov	DWORD PTR _remainingText$41088[ebp+52], 0
	mov	DWORD PTR _remainingText$41088[ebp+56], 0
	mov	DWORD PTR _remainingText$41088[ebp+60], 0
	mov	DWORD PTR _remainingText$41088[ebp+64], 0
	mov	DWORD PTR _remainingText$41088[ebp+68], 0
	mov	DWORD PTR _remainingText$41088[ebp+72], 0
	mov	DWORD PTR _remainingText$41088[ebp+76], 0
	mov	DWORD PTR _remainingText$41088[ebp+80], 0
	mov	DWORD PTR _remainingText$41088[ebp+84], 0
	mov	DWORD PTR _remainingText$41088[ebp+88], 0
	mov	DWORD PTR _remainingText$41088[ebp+92], 0
	mov	DWORD PTR _remainingText$41088[ebp+96], 0
	mov	DWORD PTR _remainingText$41088[ebp+100], 0
	mov	DWORD PTR _remainingText$41088[ebp+104], 0
	mov	DWORD PTR _remainingText$41088[ebp+108], 0
; Line 2219
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	sub	edx, DWORD PTR _nextOutputStringStart$[ebp]
	mov	eax, DWORD PTR [ecx+100]
	sbb	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	eax
	push	edx
	push	0
	push	2
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nextOutputStringStart$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _input$[ebp]
	add	eax, DWORD PTR [ecx+48]
	push	eax
	lea	edx, DWORD PTR _remainingText$41088[ebp]
	push	edx
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
; Line 2220
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	1
	lea	ecx, DWORD PTR _remainingText$41088[ebp]
	push	ecx
	push	0
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 2221
	lea	eax, DWORD PTR _remainingText$41088[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
$LN6@split@2:
; Line 2223
	jmp	$LN5@split@2
$LN8@split@2:
; Line 2224
	mov	DWORD PTR _lengthStatus$41091[ebp], 0
; Line 2225
	lea	eax, DWORD PTR _lengthStatus$41091[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR [ecx+96]
	push	eax
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nextOutputStringStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _remaining16Length$41092[ebp], eax
; Line 2226
	mov	eax, DWORD PTR _remaining16Length$41092[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _remainingChars$41093[ebp], eax
; Line 2227
	cmp	DWORD PTR _remainingChars$41093[ebp], 0
	jne	SHORT $LN4@split@2
; Line 2228
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 2229
	jmp	$LN35@split@2
$LN4@split@2:
; Line 2232
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _remaining16Length$41092[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _remainingChars$41093[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR [eax+96]
	push	edx
	mov	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
; Line 2233
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN3@split@2
; Line 2234
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _remaining16Length$41092[ebp]
	push	ecx
	mov	edx, DWORD PTR _remainingChars$41093[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_utext_nativeLength_56
	add	esp, 4
	push	edx
	push	eax
	push	0
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 2235
	jmp	$LN2@split@2
$LN3@split@2:
; Line 2236
	mov	DWORD PTR _remainingText$41099[ebp], 878368812 ; 345ad82cH
	mov	DWORD PTR _remainingText$41099[ebp+4], 0
	mov	DWORD PTR _remainingText$41099[ebp+8], 0
	mov	DWORD PTR _remainingText$41099[ebp+12], 112 ; 00000070H
	mov	DWORD PTR _remainingText$41099[ebp+16], 0
	mov	DWORD PTR _remainingText$41099[ebp+20], 0
	mov	DWORD PTR _remainingText$41099[ebp+24], 0
	mov	DWORD PTR _remainingText$41099[ebp+28], 0
	mov	DWORD PTR _remainingText$41099[ebp+32], 0
	mov	DWORD PTR _remainingText$41099[ebp+36], 0
	mov	DWORD PTR _remainingText$41099[ebp+40], 0
	mov	DWORD PTR _remainingText$41099[ebp+44], 0
	mov	DWORD PTR _remainingText$41099[ebp+48], 0
	mov	DWORD PTR _remainingText$41099[ebp+52], 0
	mov	DWORD PTR _remainingText$41099[ebp+56], 0
	mov	DWORD PTR _remainingText$41099[ebp+60], 0
	mov	DWORD PTR _remainingText$41099[ebp+64], 0
	mov	DWORD PTR _remainingText$41099[ebp+68], 0
	mov	DWORD PTR _remainingText$41099[ebp+72], 0
	mov	DWORD PTR _remainingText$41099[ebp+76], 0
	mov	DWORD PTR _remainingText$41099[ebp+80], 0
	mov	DWORD PTR _remainingText$41099[ebp+84], 0
	mov	DWORD PTR _remainingText$41099[ebp+88], 0
	mov	DWORD PTR _remainingText$41099[ebp+92], 0
	mov	DWORD PTR _remainingText$41099[ebp+96], 0
	mov	DWORD PTR _remainingText$41099[ebp+100], 0
	mov	DWORD PTR _remainingText$41099[ebp+104], 0
	mov	DWORD PTR _remainingText$41099[ebp+108], 0
; Line 2237
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _remaining16Length$41092[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _remainingChars$41093[ebp]
	push	ecx
	lea	edx, DWORD PTR _remainingText$41099[ebp]
	push	edx
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
; Line 2238
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	1
	lea	ecx, DWORD PTR _remainingText$41099[ebp]
	push	ecx
	push	0
	call	_utext_clone_56
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 2239
	lea	eax, DWORD PTR _remainingText$41099[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
$LN2@split@2:
; Line 2242
	mov	eax, DWORD PTR _remainingChars$41093[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN5@split@2:
; Line 2244
	jmp	SHORT $LN35@split@2
$LN9@split@2:
; Line 2246
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@split@2
; Line 2247
	jmp	SHORT $LN35@split@2
$LN1@split@2:
; Line 2249
	jmp	$LN36@split@2
$LN35@split@2:
; Line 2250
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
$LN41@split@2:
; Line 2251
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN54@split@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1096				; 00000448H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN54@split@2:
	DD	9
	DD	$LN53@split@2
$LN53@split@2:
	DD	-168					; ffffff58H
	DD	112					; 00000070H
	DD	$LN44@split@2
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN45@split@2
	DD	-324					; fffffebcH
	DD	112					; 00000070H
	DD	$LN46@split@2
	DD	-444					; fffffe44H
	DD	112					; 00000070H
	DD	$LN47@split@2
	DD	-456					; fffffe38H
	DD	4
	DD	$LN48@split@2
	DD	-600					; fffffda8H
	DD	112					; 00000070H
	DD	$LN49@split@2
	DD	-732					; fffffd24H
	DD	112					; 00000070H
	DD	$LN50@split@2
	DD	-744					; fffffd18H
	DD	4
	DD	$LN51@split@2
	DD	-888					; fffffc88H
	DD	112					; 00000070H
	DD	$LN52@split@2
$LN52@split@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN51@split@2:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN50@split@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN49@split@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN48@split@2:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN47@split@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN46@split@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN45@split@2:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN44@split@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
?split@RegexMatcher@icu_56@@UAEHPAUUText@@QAPAU3@HAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::split
_TEXT	ENDS
PUBLIC	?orphanOrClone@?$MaybeStackArray@_W$0CI@@icu_56@@QAEPA_WHAAH@Z ; icu_56::MaybeStackArray<wchar_t,40>::orphanOrClone
PUBLIC	??1?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ	; icu_56::MaybeStackArray<wchar_t,40>::~MaybeStackArray<wchar_t,40>
PUBLIC	?getAlias@?$MaybeStackArray@_W$0CI@@icu_56@@QBEPA_WXZ ; icu_56::MaybeStackArray<wchar_t,40>::getAlias
PUBLIC	?resize@?$MaybeStackArray@_W$0CI@@icu_56@@QAEPA_WHH@Z ; icu_56::MaybeStackArray<wchar_t,40>::resize
PUBLIC	?getCapacity@?$MaybeStackArray@_W$0CI@@icu_56@@QBEHXZ ; icu_56::MaybeStackArray<wchar_t,40>::getCapacity
PUBLIC	??0?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ	; icu_56::MaybeStackArray<wchar_t,40>::MaybeStackArray<wchar_t,40>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z$0
__ehfuncinfo$?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z
_TEXT	SEGMENT
$T50363 = -424						; size = 4
$T50364 = -412						; size = 4
$T50365 = -400						; size = 4
$T50366 = -388						; size = 4
$T50367 = -376						; size = 4
_result$ = -172						; size = 4
_ownedBuf$ = -160					; size = 4
_ownedLength$ = -148					; size = 4
_newBuf$40982 = -136					; size = 4
_buffer$ = -124						; size = 92
_length$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_src$ = 8						; size = 4
_dest$ = 12						; size = 4
_start$ = 16						; size = 8
_limit$ = 24						; size = 8
_status$ = 32						; size = 4
?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z PROC ; icu_56::utext_extract_replace, COMDAT
; Line 1969
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-428]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1970
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN11@utext_extr
; Line 1971
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN12@utext_extr
$LN11@utext_extr:
; Line 1973
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jne	SHORT $LN10@utext_extr
	mov	ecx, DWORD PTR _start$[ebp+4]
	cmp	ecx, DWORD PTR _limit$[ebp+4]
	jne	SHORT $LN10@utext_extr
; Line 1974
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN9@utext_extr
; Line 1975
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_utext_nativeLength_56
	add	esp, 4
	push	edx
	push	eax
	push	0
	push	0
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 1976
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN12@utext_extr
; Line 1977
	jmp	SHORT $LN10@utext_extr
$LN9@utext_extr:
; Line 1978
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	0
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
	jmp	$LN12@utext_extr
$LN10@utext_extr:
; Line 1981
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _limit$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _length$[ebp], eax
; Line 1982
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	je	SHORT $LN7@utext_extr
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@utext_extr
; Line 1983
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN12@utext_extr
$LN7@utext_extr:
; Line 1985
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1986
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??0?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ ; icu_56::MaybeStackArray<wchar_t,40>::MaybeStackArray<wchar_t,40>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1987
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	?getCapacity@?$MaybeStackArray@_W$0CI@@icu_56@@QBEHXZ ; icu_56::MaybeStackArray<wchar_t,40>::getCapacity
	cmp	DWORD PTR _length$[ebp], eax
	jl	SHORT $LN6@utext_extr
; Line 1988
	push	0
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	?resize@?$MaybeStackArray@_W$0CI@@icu_56@@QAEPA_WHH@Z ; icu_56::MaybeStackArray<wchar_t,40>::resize
	mov	DWORD PTR _newBuf$40982[ebp], eax
; Line 1989
	cmp	DWORD PTR _newBuf$40982[ebp], 0
	jne	SHORT $LN6@utext_extr
; Line 1990
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
$LN6@utext_extr:
; Line 1993
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	?getAlias@?$MaybeStackArray@_W$0CI@@icu_56@@QBEPA_WXZ ; icu_56::MaybeStackArray<wchar_t,40>::getAlias
	push	eax
	mov	edx, DWORD PTR _limit$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
; Line 1994
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN4@utext_extr
; Line 1995
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	?getAlias@?$MaybeStackArray@_W$0CI@@icu_56@@QBEPA_WXZ ; icu_56::MaybeStackArray<wchar_t,40>::getAlias
	push	eax
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_utext_nativeLength_56
	add	esp, 4
	push	edx
	push	eax
	push	0
	push	0
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_replace_56
	add	esp, 32					; 00000020H
; Line 1996
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR $T50363[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ ; icu_56::MaybeStackArray<wchar_t,40>::~MaybeStackArray<wchar_t,40>
	mov	eax, DWORD PTR $T50363[ebp]
	jmp	$LN12@utext_extr
$LN4@utext_extr:
; Line 2001
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@utext_extr
; Line 2002
	mov	DWORD PTR $T50364[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ ; icu_56::MaybeStackArray<wchar_t,40>::~MaybeStackArray<wchar_t,40>
	mov	eax, DWORD PTR $T50364[ebp]
	jmp	$LN12@utext_extr
$LN3@utext_extr:
; Line 2004
	mov	DWORD PTR _ownedLength$[ebp], 0
; Line 2005
	lea	eax, DWORD PTR _ownedLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	?orphanOrClone@?$MaybeStackArray@_W$0CI@@icu_56@@QAEPA_WHAAH@Z ; icu_56::MaybeStackArray<wchar_t,40>::orphanOrClone
	mov	DWORD PTR _ownedBuf$[ebp], eax
; Line 2006
	cmp	DWORD PTR _ownedBuf$[ebp], 0
	jne	SHORT $LN2@utext_extr
; Line 2007
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 2008
	mov	DWORD PTR $T50365[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ ; icu_56::MaybeStackArray<wchar_t,40>::~MaybeStackArray<wchar_t,40>
	mov	eax, DWORD PTR $T50365[ebp]
	jmp	$LN12@utext_extr
$LN2@utext_extr:
; Line 2010
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _ownedBuf$[ebp]
	push	ecx
	push	0
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
; Line 2011
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@utext_extr
; Line 2012
	mov	eax, DWORD PTR _ownedBuf$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 2013
	mov	DWORD PTR $T50366[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ ; icu_56::MaybeStackArray<wchar_t,40>::~MaybeStackArray<wchar_t,40>
	mov	eax, DWORD PTR $T50366[ebp]
	jmp	SHORT $LN12@utext_extr
$LN1@utext_extr:
; Line 2015
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 2016
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR $T50367[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ ; icu_56::MaybeStackArray<wchar_t,40>::~MaybeStackArray<wchar_t,40>
	mov	eax, DWORD PTR $T50367[ebp]
$LN12@utext_extr:
; Line 2017
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@utext_extr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 428				; 000001acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN19@utext_extr:
	DD	2
	DD	$LN18@utext_extr
$LN18@utext_extr:
	DD	-124					; ffffff84H
	DD	92					; 0000005cH
	DD	$LN15@utext_extr
	DD	-148					; ffffff6cH
	DD	4
	DD	$LN16@utext_extr
$LN16@utext_extr:
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN15@utext_extr:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z$0:
	lea	ecx, DWORD PTR _buffer$[ebp]
	jmp	??1?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ ; icu_56::MaybeStackArray<wchar_t,40>::~MaybeStackArray<wchar_t,40>
__ehhandler$?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-432]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?utext_extract_replace@icu_56@@YAPAUUText@@PAU2@0_J1PAW4UErrorCode@@@Z ENDP ; icu_56::utext_extract_replace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?start@RegexMatcher@icu_56@@UBEHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?start@RegexMatcher@icu_56@@UBEHAAW4UErrorCode@@@Z PROC	; icu_56::RegexMatcher::start, COMDAT
; _this$ = ecx
; Line 2259
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2260
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2261
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?start@RegexMatcher@icu_56@@UBEHAAW4UErrorCode@@@Z ENDP	; icu_56::RegexMatcher::start
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?start64@RegexMatcher@icu_56@@UBE_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?start64@RegexMatcher@icu_56@@UBE_JAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::start64, COMDAT
; _this$ = ecx
; Line 2263
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2264
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2265
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?start64@RegexMatcher@icu_56@@UBE_JAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::start64
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??start64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z@4JA ; `icu_56::RegexMatcher::start64'::`2'::__LINE__Var
;	COMDAT ?__LINE__Var@?1??start64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??start64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z@4JA DD 08e1H ; `icu_56::RegexMatcher::start64'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?start64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_groupOffset$41123 = -36				; size = 4
_s$ = -24						; size = 8
_this$ = -8						; size = 4
_group$ = 8						; size = 4
_status$ = 12						; size = 4
?start64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::start64, COMDAT
; _this$ = ecx
; Line 2273
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2274
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@start64
; Line 2275
	or	eax, -1
	or	edx, -1
	jmp	$LN8@start64
$LN7@start64:
; Line 2277
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@start64
; Line 2278
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 2279
	or	eax, -1
	or	edx, -1
	jmp	$LN8@start64
$LN6@start64:
; Line 2281
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	jne	SHORT $LN5@start64
; Line 2282
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66306			; 00010302H
; Line 2283
	or	eax, -1
	or	edx, -1
	jmp	$LN8@start64
$LN5@start64:
; Line 2285
	cmp	DWORD PTR _group$[ebp], 0
	jl	SHORT $LN3@start64
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+108]
	call	DWORD PTR __imp_?size@UVector32@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _group$[ebp], eax
	jle	SHORT $LN4@start64
$LN3@start64:
; Line 2286
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 2287
	or	eax, -1
	or	edx, -1
	jmp	$LN8@start64
$LN4@start64:
; Line 2290
	cmp	DWORD PTR _group$[ebp], 0
	jne	SHORT $LN2@start64
; Line 2291
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR [eax+116]
	mov	DWORD PTR _s$[ebp+4], edx
; Line 2292
	jmp	$LN1@start64
$LN2@start64:
; Line 2293
	mov	eax, DWORD PTR _group$[ebp]
	sub	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+108]
	call	DWORD PTR __imp_?elementAti@UVector32@icu_56@@QBEHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _groupOffset$41123[ebp], eax
; Line 2294
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _groupOffset$41123[ebp]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN10@start64
	mov	eax, DWORD PTR ?__LINE__Var@?1??start64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z@4JA
	add	eax, 21					; 00000015H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EG@FLOMNPIM@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@start64:
; Line 2295
	cmp	DWORD PTR _groupOffset$41123[ebp], 0
	jge	SHORT $LN11@start64
	mov	eax, DWORD PTR ?__LINE__Var@?1??start64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z@4JA
	add	eax, 22					; 00000016H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CC@GOKMHNEN@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@start64:
; Line 2296
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _groupOffset$41123[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+16]
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+20]
	mov	DWORD PTR _s$[ebp+4], ecx
$LN1@start64:
; Line 2299
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp+4]
$LN8@start64:
; Line 2300
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?start64@RegexMatcher@icu_56@@UBE_JHAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::start64
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?start@RegexMatcher@icu_56@@UBEHHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_group$ = 8						; size = 4
_status$ = 12						; size = 4
?start@RegexMatcher@icu_56@@UBEHHAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::start, COMDAT
; _this$ = ecx
; Line 2303
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2304
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _group$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+64]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2305
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?start@RegexMatcher@icu_56@@UBEHHAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::start
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?useAnchoringBounds@RegexMatcher@icu_56@@UAEAAV12@C@Z
_TEXT	SEGMENT
tv77 = -212						; size = 8
tv70 = -212						; size = 8
_this$ = -8						; size = 4
_b$ = 8							; size = 1
?useAnchoringBounds@RegexMatcher@icu_56@@UAEAAV12@C@Z PROC ; icu_56::RegexMatcher::useAnchoringBounds, COMDAT
; _this$ = ecx
; Line 2312
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2313
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+105], cl
; Line 2314
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	SHORT $LN3@useAnchori
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR tv70[ebp+4], ecx
	jmp	SHORT $LN4@useAnchori
$LN3@useAnchori:
	mov	DWORD PTR tv70[ebp], 0
	mov	DWORD PTR tv70[ebp+4], 0
$LN4@useAnchori:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	ecx, DWORD PTR tv70[ebp+4]
	mov	DWORD PTR [edx+60], ecx
; Line 2315
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	SHORT $LN5@useAnchori
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR tv77[ebp+4], ecx
	jmp	SHORT $LN6@useAnchori
$LN5@useAnchori:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR tv77[ebp+4], ecx
$LN6@useAnchori:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR [edx+64], eax
	mov	ecx, DWORD PTR tv77[ebp+4]
	mov	DWORD PTR [edx+68], ecx
; Line 2316
	mov	eax, DWORD PTR _this$[ebp]
; Line 2317
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?useAnchoringBounds@RegexMatcher@icu_56@@UAEAAV12@C@Z ENDP ; icu_56::RegexMatcher::useAnchoringBounds
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?useTransparentBounds@RegexMatcher@icu_56@@UAEAAV12@C@Z
_TEXT	SEGMENT
tv77 = -212						; size = 8
tv70 = -212						; size = 8
_this$ = -8						; size = 4
_b$ = 8							; size = 1
?useTransparentBounds@RegexMatcher@icu_56@@UAEAAV12@C@Z PROC ; icu_56::RegexMatcher::useTransparentBounds, COMDAT
; _this$ = ecx
; Line 2325
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2326
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+104], cl
; Line 2327
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+104]
	test	ecx, ecx
	je	SHORT $LN3@useTranspa
	mov	DWORD PTR tv70[ebp], 0
	mov	DWORD PTR tv70[ebp+4], 0
	jmp	SHORT $LN4@useTranspa
$LN3@useTranspa:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR tv70[ebp+4], ecx
$LN4@useTranspa:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+72], eax
	mov	ecx, DWORD PTR tv70[ebp+4]
	mov	DWORD PTR [edx+76], ecx
; Line 2328
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+104]
	test	ecx, ecx
	je	SHORT $LN5@useTranspa
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR tv77[ebp+4], ecx
	jmp	SHORT $LN6@useTranspa
$LN5@useTranspa:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR tv77[ebp+4], ecx
$LN6@useTranspa:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR [edx+80], eax
	mov	ecx, DWORD PTR tv77[ebp+4]
	mov	DWORD PTR [edx+84], ecx
; Line 2329
	mov	eax, DWORD PTR _this$[ebp]
; Line 2330
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?useTransparentBounds@RegexMatcher@icu_56@@UAEAAV12@C@Z ENDP ; icu_56::RegexMatcher::useTransparentBounds
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?setTimeLimit@RegexMatcher@icu_56@@UAEXHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_limit$ = 8						; size = 4
_status$ = 12						; size = 4
?setTimeLimit@RegexMatcher@icu_56@@UAEXHAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::setTimeLimit, COMDAT
; _this$ = ecx
; Line 2337
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2338
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@setTimeLim
; Line 2339
	jmp	SHORT $LN4@setTimeLim
$LN3@setTimeLim:
; Line 2341
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@setTimeLim
; Line 2342
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 2343
	jmp	SHORT $LN4@setTimeLim
$LN2@setTimeLim:
; Line 2345
	cmp	DWORD PTR _limit$[ebp], 0
	jge	SHORT $LN1@setTimeLim
; Line 2346
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2347
	jmp	SHORT $LN4@setTimeLim
$LN1@setTimeLim:
; Line 2349
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [eax+224], ecx
$LN4@setTimeLim:
; Line 2350
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setTimeLimit@RegexMatcher@icu_56@@UAEXHAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::setTimeLimit
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getTimeLimit@RegexMatcher@icu_56@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getTimeLimit@RegexMatcher@icu_56@@UBEHXZ PROC		; icu_56::RegexMatcher::getTimeLimit, COMDAT
; _this$ = ecx
; Line 2358
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2359
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+224]
; Line 2360
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getTimeLimit@RegexMatcher@icu_56@@UBEHXZ ENDP		; icu_56::RegexMatcher::getTimeLimit
_TEXT	ENDS
EXTRN	__imp_?setMaxCapacity@UVector64@icu_56@@QAEXH@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setStackLimit@RegexMatcher@icu_56@@UAEXHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_adjustedLimit$41162 = -20				; size = 4
_this$ = -8						; size = 4
_limit$ = 8						; size = 4
_status$ = 12						; size = 4
?setStackLimit@RegexMatcher@icu_56@@UAEXHAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::setStackLimit, COMDAT
; _this$ = ecx
; Line 2368
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2369
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@setStackLi
; Line 2370
	jmp	$LN7@setStackLi
$LN6@setStackLi:
; Line 2372
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@setStackLi
; Line 2373
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 2374
	jmp	$LN7@setStackLi
$LN5@setStackLi:
; Line 2376
	cmp	DWORD PTR _limit$[ebp], 0
	jge	SHORT $LN4@setStackLi
; Line 2377
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2378
	jmp	$LN7@setStackLi
$LN4@setStackLi:
; Line 2384
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2386
	cmp	DWORD PTR _limit$[ebp], 0
	jne	SHORT $LN3@setStackLi
; Line 2388
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?setMaxCapacity@UVector64@icu_56@@QAEXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2389
	jmp	SHORT $LN2@setStackLi
$LN3@setStackLi:
; Line 2393
	mov	eax, DWORD PTR _limit$[ebp]
	shr	eax, 2
	mov	DWORD PTR _adjustedLimit$41162[ebp], eax
; Line 2394
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _adjustedLimit$41162[ebp]
	cmp	edx, DWORD PTR [ecx+100]
	jge	SHORT $LN1@setStackLi
; Line 2395
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _adjustedLimit$41162[ebp], edx
$LN1@setStackLi:
; Line 2397
	mov	esi, esp
	mov	eax, DWORD PTR _adjustedLimit$41162[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+148]
	call	DWORD PTR __imp_?setMaxCapacity@UVector64@icu_56@@QAEXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@setStackLi:
; Line 2399
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [eax+236], ecx
$LN7@setStackLi:
; Line 2400
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setStackLimit@RegexMatcher@icu_56@@UAEXHAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::setStackLimit
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getStackLimit@RegexMatcher@icu_56@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getStackLimit@RegexMatcher@icu_56@@UBEHXZ PROC		; icu_56::RegexMatcher::getStackLimit, COMDAT
; _this$ = ecx
; Line 2408
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2409
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+236]
; Line 2410
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getStackLimit@RegexMatcher@icu_56@@UBEHXZ ENDP		; icu_56::RegexMatcher::getStackLimit
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?setMatchCallback@RegexMatcher@icu_56@@UAEXP6ACPBXH@Z0AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_callback$ = 8						; size = 4
_context$ = 12						; size = 4
_status$ = 16						; size = 4
?setMatchCallback@RegexMatcher@icu_56@@UAEXP6ACPBXH@Z0AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::setMatchCallback, COMDAT
; _this$ = ecx
; Line 2420
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2421
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@setMatchCa
; Line 2422
	jmp	SHORT $LN2@setMatchCa
$LN1@setMatchCa:
; Line 2424
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	DWORD PTR [eax+240], ecx
; Line 2425
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [eax+244], ecx
$LN2@setMatchCa:
; Line 2426
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setMatchCallback@RegexMatcher@icu_56@@UAEXP6ACPBXH@Z0AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::setMatchCallback
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getMatchCallback@RegexMatcher@icu_56@@UAEXAAP6ACPBXH@ZAAPBXAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_callback$ = 8						; size = 4
_context$ = 12						; size = 4
_status$ = 16						; size = 4
?getMatchCallback@RegexMatcher@icu_56@@UAEXAAP6ACPBXH@ZAAPBXAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::getMatchCallback, COMDAT
; _this$ = ecx
; Line 2436
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2437
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@getMatchCa
; Line 2438
	jmp	SHORT $LN2@getMatchCa
$LN1@getMatchCa:
; Line 2440
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+240]
	mov	DWORD PTR [eax], edx
; Line 2441
	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+244]
	mov	DWORD PTR [eax], edx
$LN2@getMatchCa:
; Line 2442
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getMatchCallback@RegexMatcher@icu_56@@UAEXAAP6ACPBXH@ZAAPBXAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::getMatchCallback
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?setFindProgressCallback@RegexMatcher@icu_56@@UAEXP6ACPBX_J@Z0AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_callback$ = 8						; size = 4
_context$ = 12						; size = 4
_status$ = 16						; size = 4
?setFindProgressCallback@RegexMatcher@icu_56@@UAEXP6ACPBX_J@Z0AAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::setFindProgressCallback, COMDAT
; _this$ = ecx
; Line 2452
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2453
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@setFindPro
; Line 2454
	jmp	SHORT $LN2@setFindPro
$LN1@setFindPro:
; Line 2456
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	DWORD PTR [eax+248], ecx
; Line 2457
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [eax+252], ecx
$LN2@setFindPro:
; Line 2458
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setFindProgressCallback@RegexMatcher@icu_56@@UAEXP6ACPBX_J@Z0AAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::setFindProgressCallback
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getFindProgressCallback@RegexMatcher@icu_56@@UAEXAAP6ACPBX_J@ZAAPBXAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_callback$ = 8						; size = 4
_context$ = 12						; size = 4
_status$ = 16						; size = 4
?getFindProgressCallback@RegexMatcher@icu_56@@UAEXAAP6ACPBX_J@ZAAPBXAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::getFindProgressCallback, COMDAT
; _this$ = ecx
; Line 2468
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2469
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@getFindPro
; Line 2470
	jmp	SHORT $LN2@getFindPro
$LN1@getFindPro:
; Line 2472
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	mov	DWORD PTR [eax], edx
; Line 2473
	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+252]
	mov	DWORD PTR [eax], edx
$LN2@getFindPro:
; Line 2474
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getFindProgressCallback@RegexMatcher@icu_56@@UAEXAAP6ACPBX_J@ZAAPBXAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::getFindProgressCallback
_TEXT	ENDS
PUBLIC	?resetStack@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@XZ ; icu_56::RegexMatcher::resetStack
EXTRN	__imp_?reserveBlock@UVector64@icu_56@@QAEPA_JHAAW4UErrorCode@@@Z:PROC
EXTRN	__imp_?removeAllElements@UVector64@icu_56@@QAEXXZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resetStack@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@XZ
_TEXT	SEGMENT
_i$ = -32						; size = 4
_iFrame$ = -20						; size = 4
_this$ = -8						; size = 4
?resetStack@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@XZ PROC ; icu_56::RegexMatcher::resetStack, COMDAT
; _this$ = ecx
; Line 2492
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2496
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?removeAllElements@UVector64@icu_56@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2498
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+100]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+148]
	call	DWORD PTR __imp_?reserveBlock@UVector64@icu_56@@QAEPA_JHAAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _iFrame$[ebp], eax
; Line 2499
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@resetStack
; Line 2500
	xor	eax, eax
	jmp	SHORT $LN5@resetStack
$LN4@resetStack:
; Line 2504
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@resetStack
$LN2@resetStack:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@resetStack:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+100]
	sub	edx, 2
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN1@resetStack
; Line 2505
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _iFrame$[ebp]
	mov	DWORD PTR [ecx+eax*8+16], -1
	mov	DWORD PTR [ecx+eax*8+20], -1
; Line 2506
	jmp	SHORT $LN2@resetStack
$LN1@resetStack:
; Line 2507
	mov	eax, DWORD PTR _iFrame$[ebp]
$LN5@resetStack:
; Line 2508
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?resetStack@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@XZ ENDP ; icu_56::RegexMatcher::resetStack
_TEXT	ENDS
PUBLIC	?isWordBoundary@RegexMatcher@icu_56@@AAEC_J@Z	; icu_56::RegexMatcher::isWordBoundary
EXTRN	_u_charType_56:PROC
EXTRN	_u_hasBinaryProperty_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isWordBoundary@RegexMatcher@icu_56@@AAEC_J@Z
_TEXT	SEGMENT
tv368 = -292						; size = 4
tv302 = -288						; size = 8
tv208 = -288						; size = 4
tv180 = -288						; size = 8
tv278 = -284						; size = 4
tv201 = -284						; size = 4
tv136 = -284						; size = 4
_prevChar$41227 = -84					; size = 4
_prevCIsWord$ = -69					; size = 1
_c$41219 = -60						; size = 4
___offset$41214 = -48					; size = 8
_cIsWord$ = -29						; size = 1
_isBoundary$ = -17					; size = 1
_this$ = -8						; size = 4
_pos$ = 8						; size = 8
?isWordBoundary@RegexMatcher@icu_56@@AAEC_J@Z PROC	; icu_56::RegexMatcher::isWordBoundary, COMDAT
; _this$ = ecx
; Line 2528
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2529
	mov	BYTE PTR _isBoundary$[ebp], 0
; Line 2530
	mov	BYTE PTR _cIsWord$[ebp], 0
; Line 2532
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv278[ebp], eax
	mov	ecx, DWORD PTR tv278[ebp]
	mov	edx, DWORD PTR _pos$[ebp+4]
	cmp	edx, DWORD PTR [ecx+84]
	jl	SHORT $LN10@isWordBoun
	jg	SHORT $LN19@isWordBoun
	mov	eax, DWORD PTR tv278[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	jb	SHORT $LN10@isWordBoun
$LN19@isWordBoun:
; Line 2533
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 2534
	jmp	$LN9@isWordBoun
$LN10@isWordBoun:
; Line 2537
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pos$[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _pos$[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41214[ebp], edx
	mov	DWORD PTR ___offset$41214[ebp+4], eax
	cmp	DWORD PTR ___offset$41214[ebp+4], 0
	jl	SHORT $LN8@isWordBoun
	jg	SHORT $LN20@isWordBoun
	cmp	DWORD PTR ___offset$41214[ebp], 0
	jb	SHORT $LN8@isWordBoun
$LN20@isWordBoun:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv302[ebp], eax
	mov	DWORD PTR tv302[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41214[ebp+4]
	cmp	edx, DWORD PTR tv302[ebp+4]
	jg	SHORT $LN8@isWordBoun
	jl	SHORT $LN21@isWordBoun
	mov	eax, DWORD PTR ___offset$41214[ebp]
	cmp	eax, DWORD PTR tv302[ebp]
	ja	SHORT $LN8@isWordBoun
$LN21@isWordBoun:
	mov	eax, DWORD PTR ___offset$41214[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN7@isWordBoun
$LN8@isWordBoun:
	mov	eax, DWORD PTR _pos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN7@isWordBoun:
; Line 2538
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN13@isWordBoun
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN13@isWordBoun
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv136[ebp], edx
	jmp	SHORT $LN14@isWordBoun
$LN13@isWordBoun:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_current32_56
	add	esp, 4
	mov	DWORD PTR tv136[ebp], eax
$LN14@isWordBoun:
	mov	edx, DWORD PTR tv136[ebp]
	mov	DWORD PTR _c$41219[ebp], edx
; Line 2539
	push	11					; 0000000bH
	mov	eax, DWORD PTR _c$41219[ebp]
	push	eax
	call	_u_hasBinaryProperty_56
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@isWordBoun
	mov	eax, DWORD PTR _c$41219[ebp]
	push	eax
	call	_u_charType_56
	add	esp, 4
	movsx	ecx, al
	cmp	ecx, 16					; 00000010H
	jne	SHORT $LN6@isWordBoun
$LN5@isWordBoun:
; Line 2541
	xor	al, al
	jmp	$LN11@isWordBoun
$LN6@isWordBoun:
; Line 2543
	mov	esi, esp
	mov	eax, DWORD PTR _c$41219[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+112]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+112]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _cIsWord$[ebp], al
$LN9@isWordBoun:
; Line 2548
	mov	BYTE PTR _prevCIsWord$[ebp], 0
$LN4@isWordBoun:
; Line 2550
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN15@isWordBoun
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv180[ebp], eax
	mov	DWORD PTR tv180[ebp+4], edx
	jmp	SHORT $LN16@isWordBoun
$LN15@isWordBoun:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv180[ebp], eax
	mov	DWORD PTR tv180[ebp+4], edx
$LN16@isWordBoun:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv368[ebp], ecx
	mov	edx, DWORD PTR tv368[ebp]
	mov	eax, DWORD PTR tv180[ebp+4]
	cmp	eax, DWORD PTR [edx+76]
	jg	SHORT $LN2@isWordBoun
	jl	SHORT $LN22@isWordBoun
	mov	ecx, DWORD PTR tv368[ebp]
	mov	edx, DWORD PTR tv180[ebp]
	cmp	edx, DWORD PTR [ecx+72]
	ja	SHORT $LN2@isWordBoun
$LN22@isWordBoun:
; Line 2551
	jmp	$LN3@isWordBoun
$LN2@isWordBoun:
; Line 2553
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN17@isWordBoun
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN17@isWordBoun
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv201[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv201[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv201[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv208[ebp], edx
	jmp	SHORT $LN18@isWordBoun
$LN17@isWordBoun:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv208[ebp], eax
$LN18@isWordBoun:
	mov	edx, DWORD PTR tv208[ebp]
	mov	DWORD PTR _prevChar$41227[ebp], edx
; Line 2555
	push	11					; 0000000bH
	mov	eax, DWORD PTR _prevChar$41227[ebp]
	push	eax
	call	_u_hasBinaryProperty_56
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@isWordBoun
	mov	eax, DWORD PTR _prevChar$41227[ebp]
	push	eax
	call	_u_charType_56
	add	esp, 4
	movsx	ecx, al
	cmp	ecx, 16					; 00000010H
	je	SHORT $LN1@isWordBoun
; Line 2556
	mov	esi, esp
	mov	eax, DWORD PTR _prevChar$41227[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+112]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+112]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _prevCIsWord$[ebp], al
; Line 2557
	jmp	SHORT $LN3@isWordBoun
$LN1@isWordBoun:
; Line 2559
	jmp	$LN4@isWordBoun
$LN3@isWordBoun:
; Line 2560
	movsx	eax, BYTE PTR _cIsWord$[ebp]
	movsx	ecx, BYTE PTR _prevCIsWord$[ebp]
	xor	eax, ecx
	mov	BYTE PTR _isBoundary$[ebp], al
; Line 2561
	mov	al, BYTE PTR _isBoundary$[ebp]
$LN11@isWordBoun:
; Line 2562
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?isWordBoundary@RegexMatcher@icu_56@@AAEC_J@Z ENDP	; icu_56::RegexMatcher::isWordBoundary
_TEXT	ENDS
PUBLIC	?isChunkWordBoundary@RegexMatcher@icu_56@@AAECH@Z ; icu_56::RegexMatcher::isChunkWordBoundary
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isChunkWordBoundary@RegexMatcher@icu_56@@AAECH@Z
_TEXT	SEGMENT
tv335 = -312						; size = 4
tv314 = -312						; size = 4
tv281 = -312						; size = 4
tv261 = -312						; size = 4
tv238 = -312						; size = 4
tv332 = -308						; size = 8
tv311 = -308						; size = 8
tv278 = -308						; size = 8
tv258 = -308						; size = 8
tv235 = -308						; size = 8
___c2$41258 = -104					; size = 2
_prevChar$41256 = -92					; size = 4
_prevCIsWord$ = -77					; size = 1
___c2$41240 = -68					; size = 2
_c$41238 = -56						; size = 4
_inputBuf$ = -44					; size = 4
_cIsWord$ = -29						; size = 1
_isBoundary$ = -17					; size = 1
_this$ = -8						; size = 4
_pos$ = 8						; size = 4
?isChunkWordBoundary@RegexMatcher@icu_56@@AAECH@Z PROC	; icu_56::RegexMatcher::isChunkWordBoundary, COMDAT
; _this$ = ecx
; Line 2564
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2565
	mov	BYTE PTR _isBoundary$[ebp], 0
; Line 2566
	mov	BYTE PTR _cIsWord$[ebp], 0
; Line 2568
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _inputBuf$[ebp], edx
; Line 2570
	mov	eax, DWORD PTR _pos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv235[ebp], eax
	mov	DWORD PTR tv235[ebp+4], edx
	mov	DWORD PTR tv238[ebp], ecx
	mov	edx, DWORD PTR tv238[ebp]
	mov	eax, DWORD PTR tv235[ebp+4]
	cmp	eax, DWORD PTR [edx+84]
	jl	SHORT $LN15@isChunkWor
	jg	SHORT $LN18@isChunkWor
	mov	ecx, DWORD PTR tv238[ebp]
	mov	edx, DWORD PTR tv235[ebp]
	cmp	edx, DWORD PTR [ecx+80]
	jb	SHORT $LN15@isChunkWor
$LN18@isChunkWor:
; Line 2571
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 2572
	jmp	$LN14@isChunkWor
$LN15@isChunkWor:
; Line 2576
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _c$41238[ebp], edx
	mov	eax, DWORD PTR _c$41238[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN13@isChunkWor
	mov	eax, DWORD PTR _c$41238[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN12@isChunkWor
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv258[ebp], eax
	mov	DWORD PTR tv258[ebp+4], edx
	mov	DWORD PTR tv261[ebp], ecx
	mov	edx, DWORD PTR tv261[ebp]
	mov	eax, DWORD PTR tv258[ebp]
	cmp	eax, DWORD PTR [edx+80]
	jne	SHORT $LN19@isChunkWor
	mov	ecx, DWORD PTR tv261[ebp]
	mov	edx, DWORD PTR tv258[ebp+4]
	cmp	edx, DWORD PTR [ecx+84]
	je	SHORT $LN11@isChunkWor
$LN19@isChunkWor:
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax*2+2]
	mov	WORD PTR ___c2$41240[ebp], dx
	movzx	eax, WORD PTR ___c2$41240[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN11@isChunkWor
	mov	eax, DWORD PTR _c$41238[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$41240[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$41238[ebp], edx
$LN11@isChunkWor:
	jmp	SHORT $LN13@isChunkWor
$LN12@isChunkWor:
	mov	eax, DWORD PTR _pos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv278[ebp], eax
	mov	DWORD PTR tv278[ebp+4], edx
	mov	DWORD PTR tv281[ebp], ecx
	mov	edx, DWORD PTR tv281[ebp]
	mov	eax, DWORD PTR tv278[ebp+4]
	cmp	eax, DWORD PTR [edx+76]
	jl	SHORT $LN13@isChunkWor
	jg	SHORT $LN20@isChunkWor
	mov	ecx, DWORD PTR tv281[ebp]
	mov	edx, DWORD PTR tv278[ebp]
	cmp	edx, DWORD PTR [ecx+72]
	jbe	SHORT $LN13@isChunkWor
$LN20@isChunkWor:
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax*2-2]
	mov	WORD PTR ___c2$41240[ebp], dx
	movzx	eax, WORD PTR ___c2$41240[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN13@isChunkWor
	movzx	eax, WORD PTR ___c2$41240[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _c$41238[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$41238[ebp], edx
$LN13@isChunkWor:
; Line 2577
	push	11					; 0000000bH
	mov	eax, DWORD PTR _c$41238[ebp]
	push	eax
	call	_u_hasBinaryProperty_56
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@isChunkWor
	mov	eax, DWORD PTR _c$41238[ebp]
	push	eax
	call	_u_charType_56
	add	esp, 4
	movsx	ecx, al
	cmp	ecx, 16					; 00000010H
	jne	SHORT $LN8@isChunkWor
$LN7@isChunkWor:
; Line 2579
	xor	al, al
	jmp	$LN16@isChunkWor
$LN8@isChunkWor:
; Line 2581
	mov	esi, esp
	mov	eax, DWORD PTR _c$41238[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+112]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+112]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _cIsWord$[ebp], al
$LN14@isChunkWor:
; Line 2586
	mov	BYTE PTR _prevCIsWord$[ebp], 0
$LN6@isChunkWor:
; Line 2588
	mov	eax, DWORD PTR _pos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv311[ebp], eax
	mov	DWORD PTR tv311[ebp+4], edx
	mov	DWORD PTR tv314[ebp], ecx
	mov	edx, DWORD PTR tv314[ebp]
	mov	eax, DWORD PTR tv311[ebp+4]
	cmp	eax, DWORD PTR [edx+76]
	jg	SHORT $LN4@isChunkWor
	jl	SHORT $LN21@isChunkWor
	mov	ecx, DWORD PTR tv314[ebp]
	mov	edx, DWORD PTR tv311[ebp]
	cmp	edx, DWORD PTR [ecx+72]
	ja	SHORT $LN4@isChunkWor
$LN21@isChunkWor:
; Line 2589
	jmp	$LN5@isChunkWor
$LN4@isChunkWor:
; Line 2592
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _inputBuf$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	DWORD PTR _prevChar$41256[ebp], eax
	mov	eax, DWORD PTR _prevChar$41256[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN3@isChunkWor
	mov	eax, DWORD PTR _pos$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv332[ebp], eax
	mov	DWORD PTR tv332[ebp+4], edx
	mov	DWORD PTR tv335[ebp], ecx
	mov	edx, DWORD PTR tv335[ebp]
	mov	eax, DWORD PTR tv332[ebp+4]
	cmp	eax, DWORD PTR [edx+76]
	jl	SHORT $LN3@isChunkWor
	jg	SHORT $LN22@isChunkWor
	mov	ecx, DWORD PTR tv335[ebp]
	mov	edx, DWORD PTR tv332[ebp]
	cmp	edx, DWORD PTR [ecx+72]
	jbe	SHORT $LN3@isChunkWor
$LN22@isChunkWor:
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax*2-2]
	mov	WORD PTR ___c2$41258[ebp], dx
	movzx	eax, WORD PTR ___c2$41258[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN3@isChunkWor
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	movzx	eax, WORD PTR ___c2$41258[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _prevChar$41256[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _prevChar$41256[ebp], edx
$LN3@isChunkWor:
; Line 2594
	push	11					; 0000000bH
	mov	eax, DWORD PTR _prevChar$41256[ebp]
	push	eax
	call	_u_hasBinaryProperty_56
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@isChunkWor
	mov	eax, DWORD PTR _prevChar$41256[ebp]
	push	eax
	call	_u_charType_56
	add	esp, 4
	movsx	ecx, al
	cmp	ecx, 16					; 00000010H
	je	SHORT $LN1@isChunkWor
; Line 2595
	mov	esi, esp
	mov	eax, DWORD PTR _prevChar$41256[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+112]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+112]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _prevCIsWord$[ebp], al
; Line 2596
	jmp	SHORT $LN5@isChunkWor
$LN1@isChunkWor:
; Line 2598
	jmp	$LN6@isChunkWor
$LN5@isChunkWor:
; Line 2599
	movsx	eax, BYTE PTR _cIsWord$[ebp]
	movsx	ecx, BYTE PTR _prevCIsWord$[ebp]
	xor	eax, ecx
	mov	BYTE PTR _isBoundary$[ebp], al
; Line 2600
	mov	al, BYTE PTR _isBoundary$[ebp]
$LN16@isChunkWor:
; Line 2601
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?isChunkWordBoundary@RegexMatcher@icu_56@@AAECH@Z ENDP	; icu_56::RegexMatcher::isChunkWordBoundary
_TEXT	ENDS
PUBLIC	?isUWordBoundary@RegexMatcher@icu_56@@AAEC_J@Z	; icu_56::RegexMatcher::isUWordBoundary
EXTRN	__imp_?createWordInstance@BreakIterator@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z:PROC
EXTRN	__imp_?getEnglish@Locale@icu_56@@SAABV12@XZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isUWordBoundary@RegexMatcher@icu_56@@AAEC_J@Z
_TEXT	SEGMENT
tv184 = -232						; size = 4
_status$41274 = -32					; size = 4
_returnVal$ = -17					; size = 1
_this$ = -8						; size = 4
_pos$ = 8						; size = 8
?isUWordBoundary@RegexMatcher@icu_56@@AAEC_J@Z PROC	; icu_56::RegexMatcher::isUWordBoundary, COMDAT
; _this$ = ecx
; Line 2612
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2613
	mov	BYTE PTR _returnVal$[ebp], 0
; Line 2617
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+264], 0
	jne	$LN5@isUWordBou
; Line 2619
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	mov	esi, esp
	push	eax
	mov	edi, esp
	call	DWORD PTR __imp_?getEnglish@Locale@icu_56@@SAABV12@XZ
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp_?createWordInstance@BreakIterator@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+264], eax
; Line 2620
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@isUWordBou
; Line 2621
	xor	al, al
	jmp	$LN6@isUWordBou
$LN4@isUWordBou:
; Line 2623
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+264]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@isUWordBou:
; Line 2626
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv184[ebp], eax
	mov	ecx, DWORD PTR tv184[ebp]
	mov	edx, DWORD PTR _pos$[ebp+4]
	cmp	edx, DWORD PTR [ecx+84]
	jl	SHORT $LN3@isUWordBou
	jg	SHORT $LN8@isUWordBou
	mov	eax, DWORD PTR tv184[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	jb	SHORT $LN3@isUWordBou
$LN8@isUWordBou:
; Line 2627
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 2628
	mov	BYTE PTR _returnVal$[ebp], 1
; Line 2631
	jmp	SHORT $LN2@isUWordBou
$LN3@isUWordBou:
; Line 2632
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN1@isUWordBou
; Line 2634
	mov	DWORD PTR _status$41274[ebp], 0
; Line 2635
	lea	eax, DWORD PTR _status$41274[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _pos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	cdq
	mov	DWORD PTR _pos$[ebp], eax
	mov	DWORD PTR _pos$[ebp+4], edx
$LN1@isUWordBou:
; Line 2637
	mov	eax, DWORD PTR _pos$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _returnVal$[ebp], al
$LN2@isUWordBou:
; Line 2640
	mov	al, BYTE PTR _returnVal$[ebp]
$LN6@isUWordBou:
; Line 2641
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@isUWordBou
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN11@isUWordBou:
	DD	1
	DD	$LN10@isUWordBou
$LN10@isUWordBou:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN9@isUWordBou
$LN9@isUWordBou:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?isUWordBoundary@RegexMatcher@icu_56@@AAEC_J@Z ENDP	; icu_56::RegexMatcher::isUWordBoundary
_TEXT	ENDS
PUBLIC	?IncrementTime@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::IncrementTime
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IncrementTime@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?IncrementTime@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::IncrementTime, COMDAT
; _this$ = ecx
; Line 2654
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2655
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+232], 10000		; 00002710H
; Line 2656
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+228], ecx
; Line 2657
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+240], 0
	je	SHORT $LN3@IncrementT
; Line 2658
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+244]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN3@IncrementT
; Line 2659
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66323			; 00010313H
; Line 2660
	jmp	SHORT $LN4@IncrementT
$LN3@IncrementT:
; Line 2663
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	jle	SHORT $LN4@IncrementT
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+228]
	cmp	edx, DWORD PTR [ecx+224]
	jl	SHORT $LN4@IncrementT
; Line 2664
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66322			; 00010312H
$LN4@IncrementT:
; Line 2666
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IncrementTime@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::IncrementTime
_TEXT	ENDS
PUBLIC	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_dest$ = -44						; size = 4
_source$ = -32						; size = 4
_newFP$ = -20						; size = 4
_this$ = -8						; size = 4
_fp$ = 8						; size = 4
_savePatIdx$ = 12					; size = 8
_status$ = 20						; size = 4
?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::StateSave, COMDAT
; _this$ = ecx
; Line 2689
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2690
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@StateSave
; Line 2691
	mov	eax, DWORD PTR _fp$[ebp]
	jmp	$LN7@StateSave
$LN6@StateSave:
; Line 2694
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?reserveBlock@UVector64@icu_56@@QAEPA_JHAAW4UErrorCode@@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newFP$[ebp], eax
; Line 2695
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@StateSave
; Line 2699
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66321			; 00010311H
; Line 2704
	mov	eax, DWORD PTR _fp$[ebp]
	jmp	$LN7@StateSave
$LN5@StateSave:
; Line 2706
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 3
	mov	edx, DWORD PTR _newFP$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _fp$[ebp], edx
; Line 2709
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR _source$[ebp], eax
; Line 2710
	mov	eax, DWORD PTR _newFP$[ebp]
	mov	DWORD PTR _dest$[ebp], eax
$LN4@StateSave:
; Line 2712
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 8
	mov	DWORD PTR _dest$[ebp], edx
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 8
	mov	DWORD PTR _source$[ebp], eax
; Line 2713
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _newFP$[ebp]
	jne	SHORT $LN2@StateSave
; Line 2714
	jmp	SHORT $LN3@StateSave
$LN2@StateSave:
; Line 2716
	jmp	SHORT $LN4@StateSave
$LN3@StateSave:
; Line 2718
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+232], ecx
; Line 2719
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 0
	jg	SHORT $LN1@StateSave
; Line 2720
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementTime@RegexMatcher@icu_56@@AAEXAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::IncrementTime
$LN1@StateSave:
; Line 2722
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _savePatIdx$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _savePatIdx$[ebp+4]
	mov	DWORD PTR [eax+12], edx
; Line 2723
	mov	eax, DWORD PTR _newFP$[ebp]
$LN7@StateSave:
; Line 2724
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::StateSave
_TEXT	ENDS
PUBLIC	??_C@_1CE@MEMALIDK@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EC@IFFAOBGA@?$AAb?$AAa?$AAc?$AAk?$AAS?$AAe?$AAa?$AAr?$AAc?$AAh?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx@ ; `string'
PUBLIC	??_C@_1EC@KAEJIOLK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DM?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe@ ; `string'
PUBLIC	??_C@_1EO@CJAHANAB@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1FE@IOGLBMKK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAl?$AAo?$AAo?$AAp?$AAc?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU@ ; `string'
PUBLIC	??_C@_1DM@OBGLDKOO@?$AAf?$AAS?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@HBDCPLHI@?$AAc?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EC@CABCBFB@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh@ ; `string'
PUBLIC	??_C@_1EC@NBCFLCDA@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt@ ; `string'
PUBLIC	??_C@_1EA@MIPOIOOI@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EA@BLNKBNIJ@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@FKPOJNM@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@GDLEIHOB@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAM?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@BELDIKCK@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@ ; `string'
PUBLIC	??_C@_1DO@NDALOCFL@?$AAs?$AAa?$AAv?$AAe?$AAd?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EK@IFAFHMJP@?$AAd?$AAa?$AAt?$AAa?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAa?$AAt?$AAa?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_1EK@EFDCFDGH@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_1DK@MGMFMKKP@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAS?$AAt?$AAa?$AAr?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAg?$AAr?$AAo?$AAu?$AAp?$AAE?$AAn?$AAd?$AAI?$AAd?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@IOFPLLPJ@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DO@CCHGCLKC@?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAS?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FM@DFPIGJHK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe@ ; `string'
PUBLIC	??_C@_1FM@LKDMBKJF@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAi?$AAt?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR@ ; `string'
PUBLIC	??_C@_1CI@HFENNECI@?$AAl?$AAo?$AAo?$AAp?$AAL?$AAo?$AAc?$AA?$DO?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@ECBPPCBA@?$AA?$CK?$AAp?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FG@JDEBOKCN@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAi?$AAt?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR@ ; `string'
PUBLIC	??_C@_1EK@LNFOAHJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI@ ; `string'
PUBLIC	??_C@_1CK@KCCKOHDA@?$AAl?$AAo?$AAo?$AAp?$AAL?$AAo?$AAc?$AA?$DO?$AA?$DN?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EG@KKDBMEOE@?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$DN@ ; `string'
PUBLIC	??_C@_1BI@LHJBDJG@?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EO@MCNNJIPP@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_1DM@GCGJLILJ@?$AAp?$AAr?$AAe?$AAv?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EO@PNACHIHF@?$AAf?$AAr?$AAa?$AAm?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAf?$AAr?$AAa?$AAm?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1FK@GMJNKEFK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAo?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX@ ; `string'
PUBLIC	??_C@_1HA@LNOJICFB@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_1FC@OBCJPAPE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAC?$AAo?$AAm?$AAp?$AAi?$AAl?$AAe?$AAd?$AAP?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1EM@LLNCNHEM@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAs?$AAe?$AAt?$AAs?$AA?9?$AA?$DO?$AAs@ ; `string'
PUBLIC	??_C@_1EM@MGNFFFFE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAL?$AAA?$AAS@ ; `string'
PUBLIC	??_C@_1DM@HLNPLKHI@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAA?$AAn?$AAc?$AAh?$AAo?$AAr?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@NBHICIKP@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAn?$AAc?$AAh?$AAo?$AAr?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@IMACNBLG@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr?$AAa?$AA?$FL?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$FN?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr@ ; `string'
PUBLIC	??_C@_1DG@LCGIFGJK@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr?$AAa?$AA?$FL?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA2?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EO@HKGBPPJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_1BO@MDJGAPBB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@MEDILEED@?$AAo?$AAp?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAS?$AAT?$AAR?$AAI?$AAN?$AAG?$AA_?$AAL?$AAE?$AAN?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA ; `icu_56::RegexMatcher::MatchAt'::`2'::__LINE__Var
EXTRN	_u_foldCase_56:PROC
EXTRN	??1CaseFoldingUTextIterator@icu_56@@QAE@XZ:PROC	; icu_56::CaseFoldingUTextIterator::~CaseFoldingUTextIterator
EXTRN	?next@CaseFoldingUTextIterator@icu_56@@QAEHXZ:PROC ; icu_56::CaseFoldingUTextIterator::next
EXTRN	?inExpansion@CaseFoldingUTextIterator@icu_56@@QAECXZ:PROC ; icu_56::CaseFoldingUTextIterator::inExpansion
EXTRN	??0CaseFoldingUTextIterator@icu_56@@QAE@AAUUText@@@Z:PROC ; icu_56::CaseFoldingUTextIterator::CaseFoldingUTextIterator
EXTRN	__imp_?setSize@UVector64@icu_56@@QAEXH@Z:PROC
EXTRN	__imp_?size@UVector64@icu_56@@QBEHXZ:PROC
EXTRN	__imp_?elementAt@UVector@icu_56@@QBEPAXH@Z:PROC
EXTRN	__imp_?size@UVector@icu_56@@QBEHXZ:PROC
EXTRN	__imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z:PROC
EXTRN	__imp_?getBuffer@UVector64@icu_56@@QBEPA_JXZ:PROC
;	COMDAT ??_C@_1CE@MEMALIDK@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@MEMALIDK@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'f'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'f', 00H, 'I', 00H, 'n', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'I', 00H, 'd', 00H, 'x', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@IFFAOBGA@?$AAb?$AAa?$AAc?$AAk?$AAS?$AAe?$AAa?$AAr?$AAc?$AAh?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx@
CONST	SEGMENT
??_C@_1EC@IFFAOBGA@?$AAb?$AAa?$AAc?$AAk?$AAS?$AAe?$AAa?$AAr?$AAc?$AAh?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx@ DB 'b'
	DB	00H, 'a', 00H, 'c', 00H, 'k', 00H, 'S', 00H, 'e', 00H, 'a', 00H
	DB	'r', 00H, 'c', 00H, 'h', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'x', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'f', 00H
	DB	'p', 00H, '-', 00H, '>', 00H, 'f', 00H, 'I', 00H, 'n', 00H, 'p'
	DB	00H, 'u', 00H, 't', 00H, 'I', 00H, 'd', 00H, 'x', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@KAEJIOLK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DM?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe@
CONST	SEGMENT
??_C@_1EC@KAEJIOLK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DM?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	'>', 00H, '=', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'o', 00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H
	DB	'e', 00H, '<', 00H, 'f', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@CJAHANAB@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@
CONST	SEGMENT
??_C@_1EO@CJAHANAB@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'L', 00H, 'o', 00H
	DB	'c', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, 'L', 00H, 'o', 00H, 'c', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'f', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@IOGLBMKK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAl?$AAo?$AAo?$AAp?$AAc?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU@
CONST	SEGMENT
??_C@_1FE@IOGLBMKK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAl?$AAo?$AAo?$AAp?$AAc?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU@ DB '('
	DB	00H, '(', 00H, 'u', 00H, 'i', 00H, 'n', 00H, 't', 00H, '3', 00H
	DB	'2', 00H, '_', 00H, 't', 00H, ')', 00H, '(', 00H, 'l', 00H, 'o'
	DB	00H, 'o', 00H, 'p', 00H, 'c', 00H, 'O', 00H, 'p', 00H, ')', 00H
	DB	' ', 00H, '>', 00H, '>', 00H, ' ', 00H, '2', 00H, '4', 00H, ')'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'U', 00H, 'R', 00H
	DB	'X', 00H, '_', 00H, 'L', 00H, 'O', 00H, 'O', 00H, 'P', 00H, '_'
	DB	00H, 'C', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@OBGLDKOO@?$AAf?$AAS?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@OBGLDKOO@?$AAf?$AAS?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'f'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H, ')'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, 'n', 00H, 'e', 00H, 'w', 00H
	DB	'S', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'S', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@HBDCPLHI@?$AAc?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@HBDCPLHI@?$AAc?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'u', 00H
	DB	'e', 00H, 'L', 00H, 'o', 00H, 'c', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, 'f', 00H, 'p', 00H, '-', 00H, '>', 00H, 'f', 00H, 'P', 00H
	DB	'a', 00H, 't', 00H, 'I', 00H, 'd', 00H, 'x', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@CABCBFB@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh@
CONST	SEGMENT
??_C@_1EC@CABCBFB@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh@ DB 'o'
	DB	00H, 'r', 00H, 'i', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'L'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'f', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'L'
	DB	00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@NBCFLCDA@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt@
CONST	SEGMENT
??_C@_1EC@NBCFLCDA@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt@ DB 'o'
	DB	00H, 'r', 00H, 'i', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'L'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'f', 00H, 'A', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 'L', 00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@MIPOIOOI@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@MIPOIOOI@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'e', 00H
	DB	'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'L', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'f', 00H
	DB	'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'L', 00H, 'e'
	DB	00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@BLNKBNIJ@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@BLNKBNIJ@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'e', 00H
	DB	'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'L', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'f', 00H
	DB	'A', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'L'
	DB	00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@FKPOJNM@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@FKPOJNM@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'm'
	DB	00H, 'i', 00H, 'n', 00H, 'M', 00H, 'L', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@GDLEIHOB@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAM?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@GDLEIHOB@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAM?$AAL?$AA?$AA@ DB 'm'
	DB	00H, 'i', 00H, 'n', 00H, 'M', 00H, 'L', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'x', 00H, 'M', 00H, 'L'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@BELDIKCK@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@BELDIKCK@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'S', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'n'
	DB	00H, 'e', 00H, 'w', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
CONST	SEGMENT
??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	'>', 00H, '=', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'o', 00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H
	DB	'e', 00H, '+', 00H, '1', 00H, '<', 00H, 'f', 00H, 'P', 00H, 'a'
	DB	00H, 't', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H, '-', 00H
	DB	'>', 00H, 'f', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@NDALOCFL@?$AAs?$AAa?$AAv?$AAe?$AAd?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@NDALOCFL@?$AAs?$AAa?$AAv?$AAe?$AAd?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?$AA@ DB 's'
	DB	00H, 'a', 00H, 'v', 00H, 'e', 00H, 'd', 00H, 'I', 00H, 'n', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'I', 00H, 'd', 00H, 'x', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'f', 00H, 'p', 00H, '-', 00H
	DB	'>', 00H, 'f', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't'
	DB	00H, 'I', 00H, 'd', 00H, 'x', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@IFAFHMJP@?$AAd?$AAa?$AAt?$AAa?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAa?$AAt?$AAa?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
CONST	SEGMENT
??_C@_1EK@IFAFHMJP@?$AAd?$AAa?$AAt?$AAa?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAa?$AAt?$AAa?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@ DB 'd'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, 'L', 00H, 'o', 00H, 'c', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'L', 00H, 'o', 00H, 'c', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'f'
	DB	00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@EFDCFDGH@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
CONST	SEGMENT
??_C@_1EK@EFDCFDGH@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'f'
	DB	00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@MGMFMKKP@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAS?$AAt?$AAa?$AAr?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAg?$AAr?$AAo?$AAu?$AAp?$AAE?$AAn?$AAd?$AAI?$AAd?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@MGMFMKKP@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAS?$AAt?$AAa?$AAr?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAg?$AAr?$AAo?$AAu?$AAp?$AAE?$AAn?$AAd?$AAI?$AAd?$AAx?$AA?$AA@ DB 'g'
	DB	00H, 'r', 00H, 'o', 00H, 'u', 00H, 'p', 00H, 'S', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 'I', 00H, 'd', 00H, 'x', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'g', 00H, 'r', 00H, 'o', 00H
	DB	'u', 00H, 'p', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'I', 00H, 'd'
	DB	00H, 'x', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@IOFPLLPJ@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@IOFPLLPJ@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'f', 00H, 'F', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@CCHGCLKC@?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAS?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@CCHGCLKC@?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAS?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, 'f', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '(', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@DFPIGJHK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe@
CONST	SEGMENT
??_C@_1FM@DFPIGJHK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'f'
	DB	00H, 'P', 00H, 'a', 00H, 't', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, '-', 00H, '>', 00H, 'f', 00H, 'D', 00H, 'a', 00H, 't'
	DB	00H, 'a', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@LKDMBKJF@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAi?$AAt?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR@
CONST	SEGMENT
??_C@_1FM@LKDMBKJF@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAi?$AAt?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR@ DB '('
	DB	00H, '(', 00H, 'u', 00H, 'i', 00H, 'n', 00H, 't', 00H, '3', 00H
	DB	'2', 00H, '_', 00H, 't', 00H, ')', 00H, '(', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'O', 00H, 'p', 00H, ')', 00H, ' ', 00H
	DB	'>', 00H, '>', 00H, ' ', 00H, '2', 00H, '4', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'U', 00H, 'R', 00H, 'X', 00H
	DB	'_', 00H, 'C', 00H, 'T', 00H, 'R', 00H, '_', 00H, 'I', 00H, 'N'
	DB	00H, 'I', 00H, 'T', 00H, '_', 00H, 'N', 00H, 'G', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@HFENNECI@?$AAl?$AAo?$AAo?$AAp?$AAL?$AAo?$AAc?$AA?$DO?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@HFENNECI@?$AAl?$AAo?$AAo?$AAp?$AAL?$AAo?$AAc?$AA?$DO?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@ DB 'l'
	DB	00H, 'o', 00H, 'o', 00H, 'p', 00H, 'L', 00H, 'o', 00H, 'c', 00H
	DB	'>', 00H, 'f', 00H, 'p', 00H, '-', 00H, '>', 00H, 'f', 00H, 'P'
	DB	00H, 'a', 00H, 't', 00H, 'I', 00H, 'd', 00H, 'x', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@ECBPPCBA@?$AA?$CK?$AAp?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@ECBPPCBA@?$AA?$CK?$AAp?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB '*'
	DB	00H, 'p', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'm'
	DB	00H, 'a', 00H, 'x', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@JDEBOKCN@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAi?$AAt?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR@
CONST	SEGMENT
??_C@_1FG@JDEBOKCN@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAi?$AAt?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR@ DB '('
	DB	00H, '(', 00H, 'u', 00H, 'i', 00H, 'n', 00H, 't', 00H, '3', 00H
	DB	'2', 00H, '_', 00H, 't', 00H, ')', 00H, '(', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'O', 00H, 'p', 00H, ')', 00H, ' ', 00H
	DB	'>', 00H, '>', 00H, ' ', 00H, '2', 00H, '4', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'U', 00H, 'R', 00H, 'X', 00H
	DB	'_', 00H, 'C', 00H, 'T', 00H, 'R', 00H, '_', 00H, 'I', 00H, 'N'
	DB	00H, 'I', 00H, 'T', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@LNFOAHJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI@
CONST	SEGMENT
??_C@_1EK@LNFOAHJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	'>', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'f', 00H, 'p', 00H, '-', 00H, '>'
	DB	00H, 'f', 00H, 'P', 00H, 'a', 00H, 't', 00H, 'I', 00H, 'd', 00H
	DB	'x', 00H, '-', 00H, '2', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@KCCKOHDA@?$AAl?$AAo?$AAo?$AAp?$AAL?$AAo?$AAc?$AA?$DO?$AA?$DN?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@KCCKOHDA@?$AAl?$AAo?$AAo?$AAp?$AAL?$AAo?$AAc?$AA?$DO?$AA?$DN?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@ DB 'l'
	DB	00H, 'o', 00H, 'o', 00H, 'p', 00H, 'L', 00H, 'o', 00H, 'c', 00H
	DB	'>', 00H, '=', 00H, 'f', 00H, 'p', 00H, '-', 00H, '>', 00H, 'f'
	DB	00H, 'P', 00H, 'a', 00H, 't', 00H, 'I', 00H, 'd', 00H, 'x', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@KKDBMEOE@?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$DN@
CONST	SEGMENT
??_C@_1EG@KKDBMEOE@?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$DN@ DB 'm'
	DB	00H, 'a', 00H, 'x', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H
	DB	't', 00H, '>', 00H, '=', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'x', 00H, 'C', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 't', 00H, '=', 00H, '=', 00H, '-', 00H
	DB	'1', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@LHJBDJG@?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@LHJBDJG@?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ DB 'm'
	DB	00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H
	DB	't', 00H, '>', 00H, '=', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@MCNNJIPP@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
CONST	SEGMENT
??_C@_1EO@MCNNJIPP@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'f'
	DB	00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, '-', 00H, '2', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@GCGJLILJ@?$AAp?$AAr?$AAe?$AAv?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@GCGJLILJ@?$AAp?$AAr?$AAe?$AAv?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?$AA@ DB 'p'
	DB	00H, 'r', 00H, 'e', 00H, 'v', 00H, 'I', 00H, 'n', 00H, 'p', 00H
	DB	'u', 00H, 't', 00H, 'I', 00H, 'd', 00H, 'x', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, 'f', 00H, 'p', 00H, '-', 00H, '>', 00H
	DB	'f', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'I'
	DB	00H, 'd', 00H, 'x', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@PNACHIHF@?$AAf?$AAr?$AAa?$AAm?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAf?$AAr?$AAa?$AAm?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@
CONST	SEGMENT
??_C@_1EO@PNACHIHF@?$AAf?$AAr?$AAa?$AAm?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAf?$AAr?$AAa?$AAm?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@ DB 'f'
	DB	00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'L', 00H, 'o', 00H
	DB	'c', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, 'L', 00H, 'o', 00H, 'c', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'f', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@GMJNKEFK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAo?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX@
CONST	SEGMENT
??_C@_1FK@GMJNKEFK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAo?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX@ DB '('
	DB	00H, '(', 00H, 'u', 00H, 'i', 00H, 'n', 00H, 't', 00H, '3', 00H
	DB	'2', 00H, '_', 00H, 't', 00H, ')', 00H, '(', 00H, 's', 00H, 't'
	DB	00H, 'o', 00H, 'O', 00H, 'p', 00H, ')', 00H, ' ', 00H, '>', 00H
	DB	'>', 00H, ' ', 00H, '2', 00H, '4', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'U', 00H, 'R', 00H, 'X', 00H, '_', 00H
	DB	'S', 00H, 'T', 00H, 'O', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P'
	DB	00H, '_', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@LNOJICFB@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr@
CONST	SEGMENT
??_C@_1HA@LNOJICFB@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'o', 00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'f', 00H, 'P'
	DB	00H, 'a', 00H, 't', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'-', 00H, '>', 00H, 'f', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, 'P', 00H, 'a', 00H
	DB	't', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, '(', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@OBCJPAPE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAC?$AAo?$AAm?$AAp?$AAi?$AAl?$AAe?$AAd?$AAP?$AAa?$AAt@
CONST	SEGMENT
??_C@_1FC@OBCJPAPE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAC?$AAo?$AAm?$AAp?$AAi?$AAl?$AAe?$AAd?$AAP?$AAa?$AAt@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'f', 00H, 'P', 00H, 'a', 00H, 't'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H, '-', 00H, '>', 00H
	DB	'f', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 'd', 00H, 'P', 00H, 'a', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@LLNCNHEM@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAs?$AAe?$AAt?$AAs?$AA?9?$AA?$DO?$AAs@
CONST	SEGMENT
??_C@_1EM@LLNCNHEM@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAs?$AAe?$AAt?$AAs?$AA?9?$AA?$DO?$AAs@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'o', 00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H, 's', 00H, 'e'
	DB	00H, 't', 00H, 's', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@MGNFFFFE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAL?$AAA?$AAS@
CONST	SEGMENT
??_C@_1EM@MGNFFFFE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAL?$AAA?$AAS@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'o', 00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'U', 00H, 'R'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, 'A', 00H, 'S', 00H, 'T', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HLNPLKHI@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAA?$AAn?$AAc?$AAh?$AAo?$AAr?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HLNPLKHI@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAA?$AAn?$AAc?$AAh?$AAo?$AAr?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@ DB 'f'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'f', 00H, 'I', 00H, 'n', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'I', 00H, 'd', 00H, 'x', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'f', 00H, 'A', 00H, 'n', 00H
	DB	'c', 00H, 'h', 00H, 'o', 00H, 'r', 00H, 'L', 00H, 'i', 00H, 'm'
	DB	00H, 'i', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@NBHICIKP@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAn?$AAc?$AAh?$AAo?$AAr?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@NBHICIKP@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAn?$AAc?$AAh?$AAo?$AAr?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ DB 'f'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'f', 00H, 'I', 00H, 'n', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'I', 00H, 'd', 00H, 'x', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, 'f', 00H, 'A', 00H, 'n', 00H
	DB	'c', 00H, 'h', 00H, 'o', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 'r', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@IMACNBLG@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr?$AAa?$AA?$FL?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$FN?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr@
CONST	SEGMENT
??_C@_1FK@IMACNBLG@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr?$AAa?$AA?$FL?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$FN?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr@ DB 'f'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'f', 00H, 'E', 00H, 'x', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, '[', 00H, 'o', 00H, 'p', 00H, 'V'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ']', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'f', 00H, 'p', 00H, '-', 00H, '>'
	DB	00H, 'f', 00H, 'E', 00H, 'x', 00H, 't', 00H, 'r', 00H, 'a', 00H
	DB	'[', 00H, 'o', 00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u'
	DB	00H, 'e', 00H, '+', 00H, '1', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@LCGIFGJK@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr?$AAa?$AA?$FL?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA2?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@LCGIFGJK@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr?$AAa?$AA?$FL?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA2?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'f'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'f', 00H, 'E', 00H, 'x', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, '[', 00H, 'o', 00H, 'p', 00H, 'V'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '+', 00H, '2', 00H
	DB	']', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@HKGBPPJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
CONST	SEGMENT
??_C@_1EO@HKGBPPJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@ DB 'o'
	DB	00H, 'p', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'f'
	DB	00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, '-', 00H, '3', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MDJGAPBB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MDJGAPBB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'L', 00H
	DB	'e', 00H, 'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '2'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@MEDILEED@?$AAo?$AAp?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAS?$AAT?$AAR?$AAI?$AAN?$AAG?$AA_?$AAL?$AAE?$AAN?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@MEDILEED@?$AAo?$AAp?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAS?$AAT?$AAR?$AAI?$AAN?$AAG?$AA_?$AAL?$AAE?$AAN?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'U', 00H, 'R', 00H, 'X', 00H, '_'
	DB	00H, 'S', 00H, 'T', 00H, 'R', 00H, 'I', 00H, 'N', 00H, 'G', 00H
	DB	'_', 00H, 'L', 00H, 'E', 00H, 'N', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA DD 0aafH ; `icu_56::RegexMatcher::MatchAt'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$21
	DD	00H
	DD	FLAT:__unwindfunclet$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$22
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$23
__ehfuncinfo$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv9057 = -2328						; size = 8
tv8834 = -2328						; size = 8
tv5946 = -2328						; size = 4
tv545 = -2328						; size = 4
tv10645 = -2324						; size = 8
tv10488 = -2324						; size = 4
tv10269 = -2324						; size = 8
tv9959 = -2324						; size = 4
tv9496 = -2324						; size = 4
tv9364 = -2324						; size = 4
tv9131 = -2324						; size = 8
tv9111 = -2324						; size = 8
tv9094 = -2324						; size = 8
tv9004 = -2324						; size = 4
tv8908 = -2324						; size = 8
tv8888 = -2324						; size = 8
tv8871 = -2324						; size = 8
tv8781 = -2324						; size = 4
tv6251 = -2324						; size = 4
tv6146 = -2324						; size = 4
tv6053 = -2324						; size = 4
tv5945 = -2324						; size = 4
tv5791 = -2324						; size = 4
tv538 = -2324						; size = 4
tv11207 = -2320						; size = 8
tv11004 = -2320						; size = 8
tv10830 = -2320						; size = 8
tv10723 = -2320						; size = 4
tv10562 = -2320						; size = 8
tv10485 = -2320						; size = 8
tv10345 = -2320						; size = 4
tv10186 = -2320						; size = 8
tv9910 = -2320						; size = 8
tv9756 = -2320						; size = 8
tv9729 = -2320						; size = 4
tv9493 = -2320						; size = 8
tv9477 = -2320						; size = 8
tv9361 = -2320						; size = 8
tv9346 = -2320						; size = 8
tv9323 = -2320						; size = 8
tv9291 = -2320						; size = 8
tv9154 = -2320						; size = 4
tv9054 = -2320						; size = 8
tv9001 = -2320						; size = 8
tv8922 = -2320						; size = 4
tv8831 = -2320						; size = 8
tv8778 = -2320						; size = 8
tv8558 = -2320						; size = 8
tv8524 = -2320						; size = 4
tv8457 = -2320						; size = 4
tv8393 = -2320						; size = 8
tv8359 = -2320						; size = 4
tv8287 = -2320						; size = 8
tv8253 = -2320						; size = 4
tv8130 = -2320						; size = 8
tv8096 = -2320						; size = 4
tv7981 = -2320						; size = 8
tv7943 = -2320						; size = 4
tv7860 = -2320						; size = 8
tv7820 = -2320						; size = 4
tv7800 = -2320						; size = 4
tv7787 = -2320						; size = 4
tv7720 = -2320						; size = 4
tv7646 = -2320						; size = 4
tv7536 = -2320						; size = 4
tv7419 = -2320						; size = 4
tv7288 = -2320						; size = 4
tv7173 = -2320						; size = 8
tv7139 = -2320						; size = 4
tv7035 = -2320						; size = 8
tv7001 = -2320						; size = 4
tv6924 = -2320						; size = 8
tv6890 = -2320						; size = 4
tv6817 = -2320						; size = 8
tv6783 = -2320						; size = 4
tv6766 = -2320						; size = 4
tv6754 = -2320						; size = 4
tv6681 = -2320						; size = 8
tv6647 = -2320						; size = 4
tv6581 = -2320						; size = 8
tv6550 = -2320						; size = 4
tv6538 = -2320						; size = 4
tv6522 = -2320						; size = 4
tv6502 = -2320						; size = 4
tv6468 = -2320						; size = 8
tv6442 = -2320						; size = 4
tv6425 = -2320						; size = 4
tv6390 = -2320						; size = 8
tv6361 = -2320						; size = 4
tv6329 = -2320						; size = 4
tv6297 = -2320						; size = 8
tv6268 = -2320						; size = 4
tv6193 = -2320						; size = 8
tv6164 = -2320						; size = 4
tv6065 = -2320						; size = 4
tv5995 = -2320						; size = 8
tv5966 = -2320						; size = 4
tv5944 = -2320						; size = 4
tv5910 = -2320						; size = 4
tv5875 = -2320						; size = 4
tv5745 = -2320						; size = 8
tv5620 = -2320						; size = 8
tv5593 = -2320						; size = 4
tv4616 = -2320						; size = 8
tv4587 = -2320						; size = 4
tv4529 = -2320						; size = 8
tv4511 = -2320						; size = 4
tv4408 = -2320						; size = 8
tv4292 = -2320						; size = 8
tv4096 = -2320						; size = 8
tv4078 = -2320						; size = 4
tv3903 = -2320						; size = 8
tv3885 = -2320						; size = 4
tv3762 = -2320						; size = 8
tv3715 = -2320						; size = 8
tv3616 = -2320						; size = 8
tv3392 = -2320						; size = 8
tv3296 = -2320						; size = 8
tv2786 = -2320						; size = 8
tv2711 = -2320						; size = 8
tv2636 = -2320						; size = 8
tv2567 = -2320						; size = 8
tv2484 = -2320						; size = 8
tv2452 = -2320						; size = 8
tv2359 = -2320						; size = 8
tv2294 = -2320						; size = 8
tv2203 = -2320						; size = 8
tv2078 = -2320						; size = 8
tv2003 = -2320						; size = 8
tv1915 = -2320						; size = 8
tv1897 = -2320						; size = 4
tv1856 = -2320						; size = 8
tv1807 = -2320						; size = 8
tv1789 = -2320						; size = 4
tv1733 = -2320						; size = 8
tv1684 = -2320						; size = 8
tv1666 = -2320						; size = 4
tv1580 = -2320						; size = 8
tv1424 = -2320						; size = 8
tv1350 = -2320						; size = 8
tv1266 = -2320						; size = 8
tv1181 = -2320						; size = 8
tv1078 = -2320						; size = 8
tv958 = -2320						; size = 4
tv891 = -2320						; size = 4
tv788 = -2320						; size = 4
tv672 = -2320						; size = 8
tv597 = -2320						; size = 8
tv519 = -2320						; size = 4
tv484 = -2320						; size = 8
tv343 = -2320						; size = 8
tv273 = -2320						; size = 8
tv209 = -2320						; size = 8
tv11286 = -2316						; size = 4
tv11180 = -2316						; size = 4
tv11173 = -2316						; size = 4
tv11161 = -2316						; size = 4
tv11075 = -2316						; size = 4
tv11019 = -2316						; size = 4
tv10905 = -2316						; size = 4
tv10845 = -2316						; size = 4
tv10756 = -2316						; size = 4
tv10744 = -2316						; size = 4
tv10722 = -2316						; size = 4
tv10673 = -2316						; size = 4
tv10661 = -2316						; size = 4
tv10644 = -2316						; size = 4
tv10625 = -2316						; size = 4
tv10529 = -2316						; size = 4
tv10508 = -2316						; size = 4
tv10378 = -2316						; size = 4
tv10366 = -2316						; size = 4
tv10344 = -2316						; size = 4
tv10303 = -2316						; size = 4
tv10291 = -2316						; size = 4
tv10268 = -2316						; size = 4
tv10249 = -2316						; size = 4
tv10153 = -2316						; size = 4
tv10132 = -2316						; size = 4
tv9728 = -2316						; size = 4
tv9603 = -2316						; size = 4
tv9591 = -2316						; size = 4
tv9153 = -2316						; size = 4
tv9130 = -2316						; size = 4
tv9110 = -2316						; size = 4
tv9093 = -2316						; size = 4
tv8921 = -2316						; size = 4
tv8907 = -2316						; size = 4
tv8887 = -2316						; size = 4
tv8870 = -2316						; size = 4
tv8699 = -2316						; size = 4
tv8687 = -2316						; size = 4
tv8523 = -2316						; size = 4
tv8456 = -2316						; size = 4
tv8358 = -2316						; size = 4
tv8252 = -2316						; size = 4
tv8095 = -2316						; size = 4
tv7942 = -2316						; size = 4
tv7819 = -2316						; size = 4
tv7799 = -2316						; size = 4
tv7786 = -2316						; size = 4
tv7719 = -2316						; size = 4
tv7645 = -2316						; size = 4
tv7535 = -2316						; size = 4
tv7418 = -2316						; size = 4
tv7287 = -2316						; size = 4
tv7138 = -2316						; size = 4
tv7000 = -2316						; size = 4
tv6889 = -2316						; size = 4
tv6782 = -2316						; size = 4
tv6765 = -2316						; size = 4
tv6753 = -2316						; size = 4
tv6646 = -2316						; size = 4
tv6549 = -2316						; size = 4
tv6537 = -2316						; size = 4
tv6521 = -2316						; size = 4
tv6501 = -2316						; size = 4
tv6441 = -2316						; size = 4
tv6424 = -2316						; size = 4
tv6360 = -2316						; size = 4
tv6328 = -2316						; size = 4
tv6267 = -2316						; size = 4
tv6163 = -2316						; size = 4
tv6064 = -2316						; size = 4
tv5965 = -2316						; size = 4
tv5943 = -2316						; size = 4
tv5909 = -2316						; size = 4
tv5874 = -2316						; size = 4
tv5592 = -2316						; size = 4
tv4580 = -2316						; size = 4
tv4504 = -2316						; size = 4
tv4381 = -2316						; size = 4
tv4257 = -2316						; size = 4
tv4071 = -2316						; size = 4
tv3878 = -2316						; size = 4
tv3594 = -2316						; size = 4
tv2762 = -2316						; size = 4
tv2693 = -2316						; size = 4
tv2663 = -2316						; size = 4
tv2618 = -2316						; size = 4
tv2540 = -2316						; size = 4
tv2415 = -2316						; size = 4
tv2266 = -2316						; size = 4
tv2152 = -2316						; size = 4
tv2060 = -2316						; size = 4
tv2030 = -2316						; size = 4
tv1985 = -2316						; size = 4
tv1941 = -2316						; size = 4
tv1890 = -2316						; size = 4
tv1838 = -2316						; size = 4
tv1782 = -2316						; size = 4
tv1715 = -2316						; size = 4
tv1659 = -2316						; size = 4
tv1562 = -2316						; size = 4
tv1406 = -2316						; size = 4
tv1322 = -2316						; size = 4
tv1237 = -2316						; size = 4
tv1149 = -2316						; size = 4
tv1047 = -2316						; size = 4
tv951 = -2316						; size = 4
tv884 = -2316						; size = 4
tv836 = -2316						; size = 4
tv781 = -2316						; size = 4
tv755 = -2316						; size = 4
tv653 = -2316						; size = 4
tv577 = -2316						; size = 4
tv512 = -2316						; size = 4
tv466 = -2316						; size = 4
tv305 = -2316						; size = 4
tv190 = -2316						; size = 4
tv140 = -2316						; size = 4
tv1155 = -2313						; size = 1
_prevOp$42101 = -2116					; size = 4
_twoPrevC$42099 = -2104					; size = 4
_prevC$42098 = -2092					; size = 4
___offset$42093 = -2080					; size = 8
_stackLoc$42083 = -2064					; size = 4
_loopcOp$42079 = -2052					; size = 4
_c$42074 = -2040					; size = 4
___offset$42065 = -2028					; size = 8
_ix$42062 = -2012					; size = 8
_stackLoc$42058 = -1996					; size = 4
_loopcOp$42053 = -1984					; size = 4
_c$42047 = -1972					; size = 4
___offset$42038 = -1960					; size = 8
_ix$42037 = -1944					; size = 8
_s$42035 = -1928					; size = 4
_s8$42034 = -1916					; size = 4
_newStackSize$42027 = -1904				; size = 4
_originalInputLen$42023 = -1892				; size = 8
_restoreInputLen$42016 = -1876				; size = 8
___offset$42008 = -1860					; size = 8
_lbStartIdx$42003 = -1844				; size = 4
_continueLoc$41996 = -1832				; size = 4
_maxML$41994 = -1820					; size = 4
_minML$41992 = -1808					; size = 4
_originalInputLen$41986 = -1796				; size = 8
_restoreInputLen$41977 = -1780				; size = 8
___offset$41968 = -1764					; size = 8
_lbStartIdx$41963 = -1748				; size = 4
_maxML$41956 = -1736					; size = 4
_minML$41954 = -1724					; size = 4
___c2$41942 = -1712					; size = 2
_inputIterator$41936 = -1700				; size = 20
___offset$41931 = -1672					; size = 8
_success$41930 = -1653					; size = 1
_cText$41929 = -1644					; size = 4
_cPattern$41928 = -1632					; size = 4
_patternStringLen$41927 = -1620				; size = 4
_patternStringIdx$41923 = -1608				; size = 4
_patternString$41922 = -1596				; size = 4
_c$41917 = -1584					; size = 4
___offset$41912 = -1572					; size = 8
_i$41904 = -1556					; size = 4
_newFP$41903 = -1544					; size = 4
_newStackSize$41898 = -1532				; size = 4
_stackSize$41897 = -1520				; size = 4
_savedInputIdx$41886 = -1508				; size = 8
_dataLoc$41883 = -1492					; size = 4
_instrOperandLoc$41881 = -1480				; size = 4
_inputChar$41871 = -1468				; size = 4
_captureGroupChar$41870 = -1456				; size = 4
_success$41864 = -1441					; size = 1
_inputItr$41863 = -1432					; size = 20
_captureGroupItr$41862 = -1404				; size = 20
_groupEndIdx$41858 = -1376				; size = 8
_groupStartIdx$41857 = -1360				; size = 8
_inputChar$41850 = -1344				; size = 4
_captureGroupChar$41849 = -1332				; size = 4
_success$41843 = -1317					; size = 1
___offset$41838 = -1308					; size = 8
___offset$41833 = -1292					; size = 8
_groupEndIdx$41828 = -1276				; size = 8
_groupStartIdx$41827 = -1260				; size = 8
_i$41818 = -1244					; size = 4
_newFP$41815 = -1232					; size = 4
_newStackSize$41811 = -1220				; size = 4
_pLastInputIdx$41804 = -1208				; size = 4
_maxCount$41795 = -1196					; size = 4
_minCount$41793 = -1184					; size = 4
_pCounter$41792 = -1172					; size = 4
_initOp$41787 = -1160					; size = 4
_maxCount$41776 = -1148					; size = 4
_minCount$41774 = -1136					; size = 4
_loopLoc$41773 = -1124					; size = 4
_instrOperandLoc$41771 = -1112				; size = 4
_pLastInputIdx$41766 = -1100				; size = 4
_maxCount$41757 = -1088					; size = 4
_minCount$41755 = -1076					; size = 4
_pCounter$41754 = -1064					; size = 4
_initOp$41749 = -1052					; size = 4
_maxCount$41733 = -1040					; size = 4
_minCount$41731 = -1028					; size = 4
_loopLoc$41730 = -1016					; size = 4
_instrOperandLoc$41728 = -1004				; size = 4
_prevInputIdx$41721 = -992				; size = 8
_frameLoc$41718 = -976					; size = 4
_stoOp$41713 = -964					; size = 4
_c$41700 = -952						; size = 4
___offset$41695 = -940					; size = 8
_nextc$41689 = -924					; size = 4
_c$41687 = -912						; size = 4
___offset$41682 = -900					; size = 8
_c$41676 = -884						; size = 4
___offset$41671 = -872					; size = 8
_s$41664 = -856						; size = 4
_s8$41661 = -844					; size = 4
_c$41657 = -832						; size = 4
___offset$41652 = -820					; size = 8
_s$41645 = -804						; size = 4
_s8$41642 = -792					; size = 4
_c$41640 = -780						; size = 4
___offset$41635 = -768					; size = 8
_s$41626 = -752						; size = 4
_s8$41623 = -740					; size = 4
_c$41621 = -728						; size = 4
___offset$41616 = -716					; size = 8
_success$41613 = -697					; size = 1
_sets$41552 = -688					; size = 4
_c$41551 = -676						; size = 4
___offset$41546 = -664					; size = 8
_success$41538 = -645					; size = 1
_c$41537 = -636						; size = 4
___offset$41532 = -624					; size = 8
_c$41524 = -608						; size = 4
___offset$41519 = -596					; size = 8
_success$41511 = -577					; size = 1
_ctype$41510 = -565					; size = 1
_c$41509 = -556						; size = 4
___offset$41504 = -544					; size = 8
_success$41491 = -525					; size = 1
_ctype$41490 = -513					; size = 1
_c$41489 = -504						; size = 4
___offset$41484 = -492					; size = 8
_success$41477 = -473					; size = 1
_success$41472 = -461					; size = 1
_c$41468 = -452						; size = 4
___offset$41463 = -440					; size = 8
_c$41454 = -424						; size = 4
___offset$41449 = -412					; size = 8
___offset$41437 = -396					; size = 8
_c$41430 = -380						; size = 4
___offset$41425 = -368					; size = 8
_c$41420 = -352						; size = 4
___offset$41415 = -340					; size = 8
_nextC$41409 = -324					; size = 4
_c$41402 = -312						; size = 4
___offset$41397 = -300					; size = 8
___c2$41372 = -284					; size = 2
_success$41366 = -269					; size = 1
_patternChar$41365 = -260				; size = 4
_inputChar$41364 = -248					; size = 4
___offset$41359 = -236					; size = 8
_patternStringIndex$41358 = -220			; size = 4
_patternString$41357 = -208				; size = 4
_stringLen$41351 = -196					; size = 4
_stringStartIdx$41348 = -184				; size = 4
_c$41343 = -172						; size = 4
___offset$41338 = -160					; size = 8
_i$ = -144						; size = 4
_fp$ = -132						; size = 4
_sets$ = -120						; size = 4
_litText$ = -108					; size = 4
_pat$ = -96						; size = 4
_opValue$ = -84						; size = 4
_opType$ = -72						; size = 4
_op$ = -60						; size = 4
_backSearchIndex$ = -48					; size = 8
_isMatch$ = -29						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_startIdx$ = 8						; size = 8
_toEnd$ = 16						; size = 1
_status$ = 20						; size = 4
?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::MatchAt, COMDAT
; _this$ = ecx
; Line 2735
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2316				; 0000090cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-2328]
	mov	ecx, 579				; 00000243H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 2736
	mov	BYTE PTR _isMatch$[ebp], 0
; Line 2738
	mov	DWORD PTR _backSearchIndex$[ebp], -1
	mov	DWORD PTR _backSearchIndex$[ebp+4], 2147483647 ; 7fffffffH
; Line 2774
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN339@MatchAt
; Line 2775
	jmp	$LN340@MatchAt
$LN339@MatchAt:
; Line 2780
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+16]
	call	DWORD PTR __imp_?getBuffer@UVector64@icu_56@@QBEPA_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pat$[ebp], eax
; Line 2782
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _litText$[ebp], eax
; Line 2783
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _sets$[ebp], edx
; Line 2785
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+100]
	mov	DWORD PTR [edx+32], eax
; Line 2786
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resetStack@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@XZ ; icu_56::RegexMatcher::resetStack
	mov	DWORD PTR _fp$[ebp], eax
; Line 2787
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN338@MatchAt
; Line 2788
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 2789
	jmp	$LN340@MatchAt
$LN338@MatchAt:
; Line 2792
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
; Line 2793
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _startIdx$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _startIdx$[ebp+4]
	mov	DWORD PTR [eax+4], edx
; Line 2797
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN337@MatchAt
$LN336@MatchAt:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN337@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+104]
	jge	SHORT $LN334@MatchAt
; Line 2798
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+edx*8], 0
	mov	DWORD PTR [ecx+edx*8+4], 0
; Line 2799
	jmp	SHORT $LN336@MatchAt
$LN334@MatchAt:
; Line 2806
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _op$[ebp], edx
; Line 2807
	mov	eax, DWORD PTR _op$[ebp]
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _opType$[ebp], eax
; Line 2808
	mov	eax, DWORD PTR _op$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _opValue$[ebp], eax
; Line 2817
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 2819
	mov	eax, DWORD PTR _opType$[ebp]
	mov	DWORD PTR tv140[ebp], eax
	mov	ecx, DWORD PTR tv140[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv140[ebp], ecx
	cmp	DWORD PTR tv140[ebp], 57		; 00000039H
	ja	$LN3@MatchAt
	mov	edx, DWORD PTR tv140[ebp]
	jmp	DWORD PTR $LN756@MatchAt[edx*4]
$LN330@MatchAt:
; Line 2823
	jmp	$LN331@MatchAt
$LN329@MatchAt:
; Line 2830
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 2831
	jmp	$LN331@MatchAt
$LN328@MatchAt:
; Line 2835
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5592[ebp], eax
	mov	DWORD PTR tv5593[ebp], ecx
	mov	edx, DWORD PTR tv5592[ebp]
	mov	eax, DWORD PTR tv5593[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jg	$LN327@MatchAt
	jl	SHORT $LN609@MatchAt
	mov	edx, DWORD PTR tv5592[ebp]
	mov	eax, DWORD PTR tv5593[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jae	$LN327@MatchAt
$LN609@MatchAt:
; Line 2836
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41338[ebp], eax
	mov	DWORD PTR ___offset$41338[ebp+4], edx
	cmp	DWORD PTR ___offset$41338[ebp+4], 0
	jl	SHORT $LN326@MatchAt
	jg	SHORT $LN610@MatchAt
	cmp	DWORD PTR ___offset$41338[ebp], 0
	jb	SHORT $LN326@MatchAt
$LN610@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv5620[ebp], eax
	mov	DWORD PTR tv5620[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41338[ebp+4]
	cmp	edx, DWORD PTR tv5620[ebp+4]
	jg	SHORT $LN326@MatchAt
	jl	SHORT $LN611@MatchAt
	mov	eax, DWORD PTR ___offset$41338[ebp]
	cmp	eax, DWORD PTR tv5620[ebp]
	ja	SHORT $LN326@MatchAt
$LN611@MatchAt:
	mov	eax, DWORD PTR ___offset$41338[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN325@MatchAt
$LN326@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN325@MatchAt:
; Line 2837
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN342@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN342@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv190[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN343@MatchAt
$LN342@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv190[ebp], eax
$LN343@MatchAt:
	mov	ecx, DWORD PTR tv190[ebp]
	mov	DWORD PTR _c$41343[ebp], ecx
; Line 2838
	mov	eax, DWORD PTR _c$41343[ebp]
	cmp	eax, DWORD PTR _opValue$[ebp]
	jne	$LN324@MatchAt
; Line 2839
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN344@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv209[ebp], eax
	mov	DWORD PTR tv209[ebp+4], edx
	jmp	SHORT $LN345@MatchAt
$LN344@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv209[ebp], eax
	mov	DWORD PTR tv209[ebp+4], edx
$LN345@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv209[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv209[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 2840
	jmp	$LN331@MatchAt
$LN324@MatchAt:
; Line 2842
	jmp	SHORT $LN323@MatchAt
$LN327@MatchAt:
; Line 2843
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
$LN323@MatchAt:
; Line 2845
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 2846
	jmp	$LN331@MatchAt
$LN322@MatchAt:
; Line 2855
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR _stringStartIdx$41348[ebp], eax
; Line 2856
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _op$[ebp], edx
; Line 2857
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 2858
	mov	eax, DWORD PTR _op$[ebp]
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _opType$[ebp], eax
; Line 2859
	mov	eax, DWORD PTR _op$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _stringLen$41351[ebp], eax
; Line 2860
	cmp	DWORD PTR _opType$[ebp], 5
	je	SHORT $LN346@MatchAt
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 125				; 0000007dH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DC@MEDILEED@?$AAo?$AAp?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAS?$AAT?$AAR?$AAI?$AAN?$AAG?$AA_?$AAL?$AAE?$AAN?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN346@MatchAt:
; Line 2861
	cmp	DWORD PTR _stringLen$41351[ebp], 2
	jge	SHORT $LN347@MatchAt
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 126				; 0000007eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BO@MDJGAPBB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN347@MatchAt:
; Line 2863
	mov	eax, DWORD PTR _stringStartIdx$41348[ebp]
	mov	ecx, DWORD PTR _litText$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _patternString$41357[ebp], edx
; Line 2864
	mov	DWORD PTR _patternStringIndex$41358[ebp], 0
; Line 2865
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41359[ebp], eax
	mov	DWORD PTR ___offset$41359[ebp+4], edx
	cmp	DWORD PTR ___offset$41359[ebp+4], 0
	jl	SHORT $LN321@MatchAt
	jg	SHORT $LN612@MatchAt
	cmp	DWORD PTR ___offset$41359[ebp], 0
	jb	SHORT $LN321@MatchAt
$LN612@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv5745[ebp], eax
	mov	DWORD PTR tv5745[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41359[ebp+4]
	cmp	edx, DWORD PTR tv5745[ebp+4]
	jg	SHORT $LN321@MatchAt
	jl	SHORT $LN613@MatchAt
	mov	eax, DWORD PTR ___offset$41359[ebp]
	cmp	eax, DWORD PTR tv5745[ebp]
	ja	SHORT $LN321@MatchAt
$LN613@MatchAt:
	mov	eax, DWORD PTR ___offset$41359[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN320@MatchAt
$LN321@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN320@MatchAt:
; Line 2868
	mov	BYTE PTR _success$41366[ebp], 1
$LN319@MatchAt:
; Line 2869
	mov	eax, DWORD PTR _patternStringIndex$41358[ebp]
	cmp	eax, DWORD PTR _stringLen$41351[ebp]
	jge	$LN318@MatchAt
; Line 2870
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN348@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv273[ebp], eax
	mov	DWORD PTR tv273[ebp+4], edx
	jmp	SHORT $LN349@MatchAt
$LN348@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv273[ebp], eax
	mov	DWORD PTR tv273[ebp+4], edx
$LN349@MatchAt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5791[ebp], ecx
	mov	edx, DWORD PTR tv5791[ebp]
	mov	eax, DWORD PTR tv273[ebp+4]
	cmp	eax, DWORD PTR [edx+100]
	jl	SHORT $LN317@MatchAt
	jg	SHORT $LN614@MatchAt
	mov	ecx, DWORD PTR tv5791[ebp]
	mov	edx, DWORD PTR tv273[ebp]
	cmp	edx, DWORD PTR [ecx+96]
	jb	SHORT $LN317@MatchAt
$LN614@MatchAt:
; Line 2871
	mov	BYTE PTR _success$41366[ebp], 0
; Line 2872
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 2873
	jmp	$LN318@MatchAt
$LN317@MatchAt:
; Line 2875
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN350@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN350@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv305[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN351@MatchAt
$LN350@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv305[ebp], eax
$LN351@MatchAt:
	mov	ecx, DWORD PTR tv305[ebp]
	mov	DWORD PTR _inputChar$41364[ebp], ecx
; Line 2876
	mov	eax, DWORD PTR _patternStringIndex$41358[ebp]
	mov	ecx, DWORD PTR _patternString$41357[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _patternChar$41365[ebp], edx
	mov	eax, DWORD PTR _patternStringIndex$41358[ebp]
	add	eax, 1
	mov	DWORD PTR _patternStringIndex$41358[ebp], eax
	mov	eax, DWORD PTR _patternChar$41365[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN316@MatchAt
	mov	eax, DWORD PTR _patternStringIndex$41358[ebp]
	cmp	eax, DWORD PTR _stringLen$41351[ebp]
	je	SHORT $LN316@MatchAt
	mov	eax, DWORD PTR _patternStringIndex$41358[ebp]
	mov	ecx, DWORD PTR _patternString$41357[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$41372[ebp], dx
	movzx	eax, WORD PTR ___c2$41372[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN316@MatchAt
	mov	eax, DWORD PTR _patternStringIndex$41358[ebp]
	add	eax, 1
	mov	DWORD PTR _patternStringIndex$41358[ebp], eax
	mov	eax, DWORD PTR _patternChar$41365[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$41372[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _patternChar$41365[ebp], edx
$LN316@MatchAt:
; Line 2877
	mov	eax, DWORD PTR _patternChar$41365[ebp]
	cmp	eax, DWORD PTR _inputChar$41364[ebp]
	je	SHORT $LN314@MatchAt
; Line 2878
	mov	BYTE PTR _success$41366[ebp], 0
; Line 2879
	jmp	SHORT $LN318@MatchAt
$LN314@MatchAt:
; Line 2881
	jmp	$LN319@MatchAt
$LN318@MatchAt:
; Line 2883
	movsx	eax, BYTE PTR _success$41366[ebp]
	test	eax, eax
	je	SHORT $LN313@MatchAt
; Line 2884
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN352@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv343[ebp], eax
	mov	DWORD PTR tv343[ebp+4], edx
	jmp	SHORT $LN353@MatchAt
$LN352@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv343[ebp], eax
	mov	DWORD PTR tv343[ebp+4], edx
$LN353@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv343[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv343[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 2885
	jmp	SHORT $LN312@MatchAt
$LN313@MatchAt:
; Line 2886
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN312@MatchAt:
; Line 2889
	jmp	$LN331@MatchAt
$LN311@MatchAt:
; Line 2893
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 2894
	jmp	$LN331@MatchAt
$LN310@MatchAt:
; Line 2900
	movsx	eax, BYTE PTR _toEnd$[ebp]
	test	eax, eax
	je	SHORT $LN309@MatchAt
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5874[ebp], eax
	mov	DWORD PTR tv5875[ebp], ecx
	mov	edx, DWORD PTR tv5874[ebp]
	mov	eax, DWORD PTR tv5875[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN615@MatchAt
	mov	edx, DWORD PTR tv5874[ebp]
	mov	eax, DWORD PTR tv5875[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN309@MatchAt
$LN615@MatchAt:
; Line 2902
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 2903
	jmp	$LN331@MatchAt
$LN309@MatchAt:
; Line 2905
	mov	BYTE PTR _isMatch$[ebp], 1
; Line 2906
	jmp	$breakFromLoop$41384
$LN307@MatchAt:
; Line 2914
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN354@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 3
	cmp	DWORD PTR _opValue$[ebp], ecx
	jl	SHORT $LN355@MatchAt
$LN354@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 179				; 000000b3H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@HKGBPPJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN355@MatchAt:
; Line 2915
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+32], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+36], edx
; Line 2916
	jmp	$LN331@MatchAt
$LN306@MatchAt:
; Line 2920
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN356@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 3
	cmp	DWORD PTR _opValue$[ebp], ecx
	jl	SHORT $LN357@MatchAt
$LN356@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 185				; 000000b9H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@HKGBPPJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN357@MatchAt:
; Line 2921
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv5909[ebp], ecx
	mov	DWORD PTR tv5910[ebp], eax
	mov	edx, DWORD PTR tv5910[ebp]
	mov	eax, DWORD PTR tv5909[ebp]
	cmp	DWORD PTR [eax+edx*8+36], 0
	jg	SHORT $LN358@MatchAt
	jl	SHORT $LN616@MatchAt
	mov	ecx, DWORD PTR tv5910[ebp]
	mov	edx, DWORD PTR tv5909[ebp]
	cmp	DWORD PTR [edx+ecx*8+32], 0
	jae	SHORT $LN358@MatchAt
$LN616@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 186				; 000000baH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DG@LCGIFGJK@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr?$AAa?$AA?$FL?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA2?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN358@MatchAt:
; Line 2922
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	esi, DWORD PTR _fp$[ebp]
	mov	edi, DWORD PTR [esi+edx*8+32]
	mov	DWORD PTR [ecx+eax*8+16], edi
	mov	edx, DWORD PTR [esi+edx*8+36]
	mov	DWORD PTR [ecx+eax*8+20], edx
; Line 2923
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+24], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+28], edx
; Line 2924
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	esi, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv5943[ebp], ecx
	mov	DWORD PTR tv5944[ebp], eax
	mov	DWORD PTR tv5945[ebp], esi
	mov	DWORD PTR tv5946[ebp], edx
	mov	eax, DWORD PTR tv5944[ebp]
	mov	ecx, DWORD PTR tv5943[ebp]
	mov	edx, DWORD PTR tv5946[ebp]
	mov	esi, DWORD PTR tv5945[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+20]
	cmp	eax, DWORD PTR [esi+edx*8+28]
	jl	SHORT $LN359@MatchAt
	jg	SHORT $LN617@MatchAt
	mov	ecx, DWORD PTR tv5944[ebp]
	mov	edx, DWORD PTR tv5943[ebp]
	mov	eax, DWORD PTR tv5946[ebp]
	mov	esi, DWORD PTR tv5945[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8+16]
	cmp	ecx, DWORD PTR [esi+eax*8+24]
	jbe	SHORT $LN359@MatchAt
$LN617@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 189				; 000000bdH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FK@IMACNBLG@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr?$AAa?$AA?$FL?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$FN?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN359@MatchAt:
; Line 2925
	jmp	$LN331@MatchAt
$LN305@MatchAt:
; Line 2931
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5965[ebp], eax
	mov	DWORD PTR tv5966[ebp], ecx
	mov	edx, DWORD PTR tv5965[ebp]
	mov	eax, DWORD PTR tv5966[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jl	SHORT $LN304@MatchAt
	jg	SHORT $LN618@MatchAt
	mov	edx, DWORD PTR tv5965[ebp]
	mov	eax, DWORD PTR tv5966[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jb	SHORT $LN304@MatchAt
$LN618@MatchAt:
; Line 2933
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 2934
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 2935
	jmp	$LN331@MatchAt
$LN304@MatchAt:
; Line 2938
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41397[ebp], eax
	mov	DWORD PTR ___offset$41397[ebp+4], edx
	cmp	DWORD PTR ___offset$41397[ebp+4], 0
	jl	SHORT $LN303@MatchAt
	jg	SHORT $LN619@MatchAt
	cmp	DWORD PTR ___offset$41397[ebp], 0
	jb	SHORT $LN303@MatchAt
$LN619@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv5995[ebp], eax
	mov	DWORD PTR tv5995[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41397[ebp+4]
	cmp	edx, DWORD PTR tv5995[ebp+4]
	jg	SHORT $LN303@MatchAt
	jl	SHORT $LN620@MatchAt
	mov	eax, DWORD PTR ___offset$41397[ebp]
	cmp	eax, DWORD PTR tv5995[ebp]
	ja	SHORT $LN303@MatchAt
$LN620@MatchAt:
	mov	eax, DWORD PTR ___offset$41397[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN302@MatchAt
$LN303@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN302@MatchAt:
; Line 2942
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN360@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN360@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv466[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN361@MatchAt
$LN360@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv466[ebp], eax
$LN361@MatchAt:
	mov	ecx, DWORD PTR tv466[ebp]
	mov	DWORD PTR _c$41402[ebp], ecx
; Line 2943
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN362@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv484[ebp], eax
	mov	DWORD PTR tv484[ebp+4], edx
	jmp	SHORT $LN363@MatchAt
$LN362@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv484[ebp], eax
	mov	DWORD PTR tv484[ebp+4], edx
$LN363@MatchAt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6053[ebp], ecx
	mov	edx, DWORD PTR tv6053[ebp]
	mov	eax, DWORD PTR tv484[ebp+4]
	cmp	eax, DWORD PTR [edx+68]
	jl	$LN301@MatchAt
	jg	SHORT $LN621@MatchAt
	mov	ecx, DWORD PTR tv6053[ebp]
	mov	edx, DWORD PTR tv484[ebp]
	cmp	edx, DWORD PTR [ecx+64]
	jb	$LN301@MatchAt
$LN621@MatchAt:
; Line 2944
	mov	eax, DWORD PTR _c$41402[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN300@MatchAt
; Line 2946
	cmp	DWORD PTR _c$41402[ebp], 10		; 0000000aH
	jne	$LN298@MatchAt
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6064[ebp], eax
	mov	DWORD PTR tv6065[ebp], ecx
	mov	edx, DWORD PTR tv6064[ebp]
	mov	eax, DWORD PTR tv6065[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	jl	$LN298@MatchAt
	jg	SHORT $LN622@MatchAt
	mov	edx, DWORD PTR tv6064[ebp]
	mov	eax, DWORD PTR tv6065[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	jbe	$LN298@MatchAt
$LN622@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN364@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN364@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv512[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv512[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv512[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv519[ebp], edx
	jmp	SHORT $LN365@MatchAt
$LN364@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv519[ebp], eax
$LN365@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax+40], 0
	jle	SHORT $LN366@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	cmp	edx, 55296				; 0000d800H
	jge	SHORT $LN366@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	sub	edx, 1
	mov	DWORD PTR tv538[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR tv538[ebp]
	mov	DWORD PTR [ecx+40], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR tv538[ebp]
	movzx	ecx, WORD PTR [edx+eax*2]
	mov	DWORD PTR tv545[ebp], ecx
	jmp	SHORT $LN367@MatchAt
$LN366@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv545[ebp], eax
$LN367@MatchAt:
	cmp	DWORD PTR tv545[ebp], 13		; 0000000dH
	je	SHORT $LN300@MatchAt
$LN298@MatchAt:
; Line 2948
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 2949
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 2951
	jmp	$LN331@MatchAt
$LN300@MatchAt:
; Line 2954
	jmp	$LN297@MatchAt
$LN301@MatchAt:
; Line 2955
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN368@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN368@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv577[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN369@MatchAt
$LN368@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv577[ebp], eax
$LN369@MatchAt:
	mov	ecx, DWORD PTR tv577[ebp]
	mov	DWORD PTR _nextC$41409[ebp], ecx
; Line 2956
	cmp	DWORD PTR _c$41402[ebp], 13		; 0000000dH
	jne	$LN297@MatchAt
	cmp	DWORD PTR _nextC$41409[ebp], 10		; 0000000aH
	jne	$LN297@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN370@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv597[ebp], eax
	mov	DWORD PTR tv597[ebp+4], edx
	jmp	SHORT $LN371@MatchAt
$LN370@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv597[ebp], eax
	mov	DWORD PTR tv597[ebp+4], edx
$LN371@MatchAt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6146[ebp], ecx
	mov	edx, DWORD PTR tv6146[ebp]
	mov	eax, DWORD PTR tv597[ebp+4]
	cmp	eax, DWORD PTR [edx+68]
	jl	SHORT $LN297@MatchAt
	jg	SHORT $LN623@MatchAt
	mov	ecx, DWORD PTR tv6146[ebp]
	mov	edx, DWORD PTR tv597[ebp]
	cmp	edx, DWORD PTR [ecx+64]
	jb	SHORT $LN297@MatchAt
$LN623@MatchAt:
; Line 2957
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 2958
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 2959
	jmp	$LN331@MatchAt
$LN297@MatchAt:
; Line 2963
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 2965
	jmp	$LN331@MatchAt
$LN295@MatchAt:
; Line 2969
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6163[ebp], eax
	mov	DWORD PTR tv6164[ebp], ecx
	mov	edx, DWORD PTR tv6163[ebp]
	mov	eax, DWORD PTR tv6164[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jl	SHORT $LN294@MatchAt
	jg	SHORT $LN624@MatchAt
	mov	edx, DWORD PTR tv6163[ebp]
	mov	eax, DWORD PTR tv6164[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jb	SHORT $LN294@MatchAt
$LN624@MatchAt:
; Line 2971
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 2972
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 2973
	jmp	$LN331@MatchAt
; Line 2974
	jmp	$LN293@MatchAt
$LN294@MatchAt:
; Line 2975
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41415[ebp], eax
	mov	DWORD PTR ___offset$41415[ebp+4], edx
	cmp	DWORD PTR ___offset$41415[ebp+4], 0
	jl	SHORT $LN292@MatchAt
	jg	SHORT $LN625@MatchAt
	cmp	DWORD PTR ___offset$41415[ebp], 0
	jb	SHORT $LN292@MatchAt
$LN625@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv6193[ebp], eax
	mov	DWORD PTR tv6193[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41415[ebp+4]
	cmp	edx, DWORD PTR tv6193[ebp+4]
	jg	SHORT $LN292@MatchAt
	jl	SHORT $LN626@MatchAt
	mov	eax, DWORD PTR ___offset$41415[ebp]
	cmp	eax, DWORD PTR tv6193[ebp]
	ja	SHORT $LN292@MatchAt
$LN626@MatchAt:
	mov	eax, DWORD PTR ___offset$41415[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN291@MatchAt
$LN292@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN291@MatchAt:
; Line 2976
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN372@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN372@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv653[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN373@MatchAt
$LN372@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv653[ebp], eax
$LN373@MatchAt:
	mov	ecx, DWORD PTR tv653[ebp]
	mov	DWORD PTR _c$41420[ebp], ecx
; Line 2978
	cmp	DWORD PTR _c$41420[ebp], 10		; 0000000aH
	jne	$LN293@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN374@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv672[ebp], eax
	mov	DWORD PTR tv672[ebp+4], edx
	jmp	SHORT $LN375@MatchAt
$LN374@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv672[ebp], eax
	mov	DWORD PTR tv672[ebp+4], edx
$LN375@MatchAt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6251[ebp], ecx
	mov	edx, DWORD PTR tv6251[ebp]
	mov	eax, DWORD PTR tv672[ebp]
	cmp	eax, DWORD PTR [edx+64]
	jne	SHORT $LN293@MatchAt
	mov	ecx, DWORD PTR tv6251[ebp]
	mov	edx, DWORD PTR tv672[ebp+4]
	cmp	edx, DWORD PTR [ecx+68]
	jne	SHORT $LN293@MatchAt
; Line 2979
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 2980
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 2981
	jmp	$LN331@MatchAt
$LN293@MatchAt:
; Line 2986
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 2987
	jmp	$LN331@MatchAt
$LN289@MatchAt:
; Line 2992
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6267[ebp], eax
	mov	DWORD PTR tv6268[ebp], ecx
	mov	edx, DWORD PTR tv6267[ebp]
	mov	eax, DWORD PTR tv6268[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jl	SHORT $LN288@MatchAt
	jg	SHORT $LN627@MatchAt
	mov	edx, DWORD PTR tv6267[ebp]
	mov	eax, DWORD PTR tv6268[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jb	SHORT $LN288@MatchAt
$LN627@MatchAt:
; Line 2994
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 2995
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 2996
	jmp	$LN331@MatchAt
$LN288@MatchAt:
; Line 3000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41425[ebp], eax
	mov	DWORD PTR ___offset$41425[ebp+4], edx
	cmp	DWORD PTR ___offset$41425[ebp+4], 0
	jl	SHORT $LN287@MatchAt
	jg	SHORT $LN628@MatchAt
	cmp	DWORD PTR ___offset$41425[ebp], 0
	jb	SHORT $LN287@MatchAt
$LN628@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv6297[ebp], eax
	mov	DWORD PTR tv6297[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41425[ebp+4]
	cmp	edx, DWORD PTR tv6297[ebp+4]
	jg	SHORT $LN287@MatchAt
	jl	SHORT $LN629@MatchAt
	mov	eax, DWORD PTR ___offset$41425[ebp]
	cmp	eax, DWORD PTR tv6297[ebp]
	ja	SHORT $LN287@MatchAt
$LN629@MatchAt:
	mov	eax, DWORD PTR ___offset$41425[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN286@MatchAt
$LN287@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN286@MatchAt:
; Line 3001
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN376@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN376@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv755[ebp], edx
	jmp	SHORT $LN377@MatchAt
$LN376@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_current32_56
	add	esp, 4
	mov	DWORD PTR tv755[ebp], eax
$LN377@MatchAt:
	mov	edx, DWORD PTR tv755[ebp]
	mov	DWORD PTR _c$41430[ebp], edx
; Line 3002
	mov	eax, DWORD PTR _c$41430[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN285@MatchAt
; Line 3006
	cmp	DWORD PTR _c$41430[ebp], 10		; 0000000aH
	jne	$LN283@MatchAt
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6328[ebp], eax
	mov	DWORD PTR tv6329[ebp], ecx
	mov	edx, DWORD PTR tv6328[ebp]
	mov	eax, DWORD PTR tv6329[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	jl	$LN283@MatchAt
	jg	SHORT $LN630@MatchAt
	mov	edx, DWORD PTR tv6328[ebp]
	mov	eax, DWORD PTR tv6329[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	jbe	$LN283@MatchAt
$LN630@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN378@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN378@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv781[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv781[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv781[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv788[ebp], edx
	jmp	SHORT $LN379@MatchAt
$LN378@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv788[ebp], eax
$LN379@MatchAt:
	cmp	DWORD PTR tv788[ebp], 13		; 0000000dH
	je	SHORT $LN285@MatchAt
$LN283@MatchAt:
; Line 3007
	jmp	$LN331@MatchAt
$LN285@MatchAt:
; Line 3011
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3013
	jmp	$LN331@MatchAt
$LN282@MatchAt:
; Line 3018
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6360[ebp], eax
	mov	DWORD PTR tv6361[ebp], ecx
	mov	edx, DWORD PTR tv6360[ebp]
	mov	eax, DWORD PTR tv6361[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jl	SHORT $LN281@MatchAt
	jg	SHORT $LN631@MatchAt
	mov	edx, DWORD PTR tv6360[ebp]
	mov	eax, DWORD PTR tv6361[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jb	SHORT $LN281@MatchAt
$LN631@MatchAt:
; Line 3020
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3021
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 3022
	jmp	$LN331@MatchAt
$LN281@MatchAt:
; Line 3026
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41437[ebp], eax
	mov	DWORD PTR ___offset$41437[ebp+4], edx
	cmp	DWORD PTR ___offset$41437[ebp+4], 0
	jl	SHORT $LN280@MatchAt
	jg	SHORT $LN632@MatchAt
	cmp	DWORD PTR ___offset$41437[ebp], 0
	jb	SHORT $LN280@MatchAt
$LN632@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv6390[ebp], eax
	mov	DWORD PTR tv6390[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41437[ebp+4]
	cmp	edx, DWORD PTR tv6390[ebp+4]
	jg	SHORT $LN280@MatchAt
	jl	SHORT $LN633@MatchAt
	mov	eax, DWORD PTR ___offset$41437[ebp]
	cmp	eax, DWORD PTR tv6390[ebp]
	ja	SHORT $LN280@MatchAt
$LN633@MatchAt:
	mov	eax, DWORD PTR ___offset$41437[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN279@MatchAt
$LN280@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN279@MatchAt:
; Line 3027
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN380@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN380@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv836[ebp], edx
	jmp	SHORT $LN381@MatchAt
$LN380@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_current32_56
	add	esp, 4
	mov	DWORD PTR tv836[ebp], eax
$LN381@MatchAt:
	cmp	DWORD PTR tv836[ebp], 10		; 0000000aH
	je	SHORT $LN278@MatchAt
; Line 3028
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN278@MatchAt:
; Line 3031
	jmp	$LN331@MatchAt
$LN277@MatchAt:
; Line 3035
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6424[ebp], eax
	mov	DWORD PTR tv6425[ebp], ecx
	mov	edx, DWORD PTR tv6424[ebp]
	mov	eax, DWORD PTR tv6425[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	jne	SHORT $LN634@MatchAt
	mov	edx, DWORD PTR tv6424[ebp]
	mov	eax, DWORD PTR tv6425[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	je	SHORT $LN276@MatchAt
$LN634@MatchAt:
; Line 3036
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN276@MatchAt:
; Line 3038
	jmp	$LN331@MatchAt
$LN275@MatchAt:
; Line 3043
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6441[ebp], eax
	mov	DWORD PTR tv6442[ebp], ecx
	mov	edx, DWORD PTR tv6441[ebp]
	mov	eax, DWORD PTR tv6442[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	jne	SHORT $LN274@MatchAt
	mov	edx, DWORD PTR tv6441[ebp]
	mov	eax, DWORD PTR tv6442[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	jne	SHORT $LN274@MatchAt
; Line 3045
	jmp	$LN331@MatchAt
$LN274@MatchAt:
; Line 3049
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41449[ebp], eax
	mov	DWORD PTR ___offset$41449[ebp+4], edx
	cmp	DWORD PTR ___offset$41449[ebp+4], 0
	jl	SHORT $LN273@MatchAt
	jg	SHORT $LN635@MatchAt
	cmp	DWORD PTR ___offset$41449[ebp], 0
	jb	SHORT $LN273@MatchAt
$LN635@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv6468[ebp], eax
	mov	DWORD PTR tv6468[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41449[ebp+4]
	cmp	edx, DWORD PTR tv6468[ebp+4]
	jg	SHORT $LN273@MatchAt
	jl	SHORT $LN636@MatchAt
	mov	eax, DWORD PTR ___offset$41449[ebp]
	cmp	eax, DWORD PTR tv6468[ebp]
	ja	SHORT $LN273@MatchAt
$LN636@MatchAt:
	mov	eax, DWORD PTR ___offset$41449[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN272@MatchAt
$LN273@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN272@MatchAt:
; Line 3050
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN382@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN382@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv884[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv884[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv884[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv891[ebp], edx
	jmp	SHORT $LN383@MatchAt
$LN382@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv891[ebp], eax
$LN383@MatchAt:
	mov	edx, DWORD PTR tv891[ebp]
	mov	DWORD PTR _c$41454[ebp], edx
; Line 3051
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6501[ebp], eax
	mov	DWORD PTR tv6502[ebp], ecx
	mov	edx, DWORD PTR tv6501[ebp]
	mov	eax, DWORD PTR tv6502[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jg	SHORT $LN271@MatchAt
	jl	SHORT $LN637@MatchAt
	mov	edx, DWORD PTR tv6501[ebp]
	mov	eax, DWORD PTR tv6502[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jae	SHORT $LN271@MatchAt
$LN637@MatchAt:
	mov	eax, DWORD PTR _c$41454[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN271@MatchAt
; Line 3054
	jmp	$LN331@MatchAt
$LN271@MatchAt:
; Line 3057
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3059
	jmp	$LN331@MatchAt
$LN270@MatchAt:
; Line 3064
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6521[ebp], eax
	mov	DWORD PTR tv6522[ebp], ecx
	mov	edx, DWORD PTR tv6521[ebp]
	mov	eax, DWORD PTR tv6522[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	jg	SHORT $LN384@MatchAt
	jl	SHORT $LN638@MatchAt
	mov	edx, DWORD PTR tv6521[ebp]
	mov	eax, DWORD PTR tv6522[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	jae	SHORT $LN384@MatchAt
$LN638@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 329				; 00000149H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DM@NBHICIKP@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAn?$AAc?$AAh?$AAo?$AAr?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN384@MatchAt:
; Line 3065
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6537[ebp], eax
	mov	DWORD PTR tv6538[ebp], ecx
	mov	edx, DWORD PTR tv6537[ebp]
	mov	eax, DWORD PTR tv6538[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	jg	SHORT $LN269@MatchAt
	jl	SHORT $LN639@MatchAt
	mov	edx, DWORD PTR tv6537[ebp]
	mov	eax, DWORD PTR tv6538[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	ja	SHORT $LN269@MatchAt
$LN639@MatchAt:
; Line 3067
	jmp	$LN331@MatchAt
$LN269@MatchAt:
; Line 3070
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6549[ebp], eax
	mov	DWORD PTR tv6550[ebp], ecx
	mov	edx, DWORD PTR tv6549[ebp]
	mov	eax, DWORD PTR tv6550[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jl	SHORT $LN385@MatchAt
	jg	SHORT $LN640@MatchAt
	mov	edx, DWORD PTR tv6549[ebp]
	mov	eax, DWORD PTR tv6550[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jbe	SHORT $LN385@MatchAt
$LN640@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 335				; 0000014fH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DM@HLNPLKHI@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAA?$AAn?$AAc?$AAh?$AAo?$AAr?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN385@MatchAt:
; Line 3071
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41463[ebp], eax
	mov	DWORD PTR ___offset$41463[ebp+4], edx
	cmp	DWORD PTR ___offset$41463[ebp+4], 0
	jl	SHORT $LN268@MatchAt
	jg	SHORT $LN641@MatchAt
	cmp	DWORD PTR ___offset$41463[ebp], 0
	jb	SHORT $LN268@MatchAt
$LN641@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv6581[ebp], eax
	mov	DWORD PTR tv6581[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41463[ebp+4]
	cmp	edx, DWORD PTR tv6581[ebp+4]
	jg	SHORT $LN268@MatchAt
	jl	SHORT $LN642@MatchAt
	mov	eax, DWORD PTR ___offset$41463[ebp]
	cmp	eax, DWORD PTR tv6581[ebp]
	ja	SHORT $LN268@MatchAt
$LN642@MatchAt:
	mov	eax, DWORD PTR ___offset$41463[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN267@MatchAt
$LN268@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN267@MatchAt:
; Line 3072
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN386@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN386@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv951[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv951[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv951[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv958[ebp], edx
	jmp	SHORT $LN387@MatchAt
$LN386@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv958[ebp], eax
$LN387@MatchAt:
	mov	edx, DWORD PTR tv958[ebp]
	mov	DWORD PTR _c$41468[ebp], edx
; Line 3073
	cmp	DWORD PTR _c$41468[ebp], 10		; 0000000aH
	je	SHORT $LN266@MatchAt
; Line 3075
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN266@MatchAt:
; Line 3078
	jmp	$LN331@MatchAt
$LN265@MatchAt:
; Line 3082
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isWordBoundary@RegexMatcher@icu_56@@AAEC_J@Z ; icu_56::RegexMatcher::isWordBoundary
	mov	BYTE PTR _success$41472[ebp], al
; Line 3083
	cmp	DWORD PTR _opValue$[ebp], 0
	setne	al
	movsx	ecx, al
	movsx	edx, BYTE PTR _success$41472[ebp]
	xor	edx, ecx
	mov	BYTE PTR _success$41472[ebp], dl
; Line 3084
	movsx	eax, BYTE PTR _success$41472[ebp]
	test	eax, eax
	jne	SHORT $LN264@MatchAt
; Line 3085
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN264@MatchAt:
; Line 3088
	jmp	$LN331@MatchAt
$LN263@MatchAt:
; Line 3093
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isUWordBoundary@RegexMatcher@icu_56@@AAEC_J@Z ; icu_56::RegexMatcher::isUWordBoundary
	mov	BYTE PTR _success$41477[ebp], al
; Line 3094
	cmp	DWORD PTR _opValue$[ebp], 0
	setne	al
	movsx	ecx, al
	movsx	edx, BYTE PTR _success$41477[ebp]
	xor	edx, ecx
	mov	BYTE PTR _success$41477[ebp], dl
; Line 3095
	movsx	eax, BYTE PTR _success$41477[ebp]
	test	eax, eax
	jne	SHORT $LN262@MatchAt
; Line 3096
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN262@MatchAt:
; Line 3099
	jmp	$LN331@MatchAt
$LN261@MatchAt:
; Line 3104
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6646[ebp], eax
	mov	DWORD PTR tv6647[ebp], ecx
	mov	edx, DWORD PTR tv6646[ebp]
	mov	eax, DWORD PTR tv6647[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN260@MatchAt
	jg	SHORT $LN643@MatchAt
	mov	edx, DWORD PTR tv6646[ebp]
	mov	eax, DWORD PTR tv6647[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN260@MatchAt
$LN643@MatchAt:
; Line 3105
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3106
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3107
	jmp	$LN331@MatchAt
$LN260@MatchAt:
; Line 3110
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41484[ebp], eax
	mov	DWORD PTR ___offset$41484[ebp+4], edx
	cmp	DWORD PTR ___offset$41484[ebp+4], 0
	jl	SHORT $LN259@MatchAt
	jg	SHORT $LN644@MatchAt
	cmp	DWORD PTR ___offset$41484[ebp], 0
	jb	SHORT $LN259@MatchAt
$LN644@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv6681[ebp], eax
	mov	DWORD PTR tv6681[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41484[ebp+4]
	cmp	edx, DWORD PTR tv6681[ebp+4]
	jg	SHORT $LN259@MatchAt
	jl	SHORT $LN645@MatchAt
	mov	eax, DWORD PTR ___offset$41484[ebp]
	cmp	eax, DWORD PTR tv6681[ebp]
	ja	SHORT $LN259@MatchAt
$LN645@MatchAt:
	mov	eax, DWORD PTR ___offset$41484[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN258@MatchAt
$LN259@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN258@MatchAt:
; Line 3112
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN388@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN388@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv1047[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN389@MatchAt
$LN388@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv1047[ebp], eax
$LN389@MatchAt:
	mov	ecx, DWORD PTR tv1047[ebp]
	mov	DWORD PTR _c$41489[ebp], ecx
; Line 3113
	mov	eax, DWORD PTR _c$41489[ebp]
	push	eax
	call	_u_charType_56
	add	esp, 4
	mov	BYTE PTR _ctype$41490[ebp], al
; Line 3114
	movsx	eax, BYTE PTR _ctype$41490[ebp]
	cmp	eax, 9
	sete	cl
	mov	BYTE PTR _success$41491[ebp], cl
; Line 3115
	cmp	DWORD PTR _opValue$[ebp], 0
	setne	al
	movsx	ecx, al
	movsx	edx, BYTE PTR _success$41491[ebp]
	xor	edx, ecx
	mov	BYTE PTR _success$41491[ebp], dl
; Line 3116
	movsx	eax, BYTE PTR _success$41491[ebp]
	test	eax, eax
	je	SHORT $LN257@MatchAt
; Line 3117
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN390@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv1078[ebp], eax
	mov	DWORD PTR tv1078[ebp+4], edx
	jmp	SHORT $LN391@MatchAt
$LN390@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1078[ebp], eax
	mov	DWORD PTR tv1078[ebp+4], edx
$LN391@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv1078[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv1078[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3118
	jmp	SHORT $LN256@MatchAt
$LN257@MatchAt:
; Line 3119
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN256@MatchAt:
; Line 3122
	jmp	$LN331@MatchAt
$LN255@MatchAt:
; Line 3126
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN253@MatchAt
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6753[ebp], eax
	mov	DWORD PTR tv6754[ebp], ecx
	mov	edx, DWORD PTR tv6753[ebp]
	mov	eax, DWORD PTR tv6754[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+120]
	jne	SHORT $LN253@MatchAt
	mov	edx, DWORD PTR tv6753[ebp]
	mov	eax, DWORD PTR tv6754[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+124]
	je	SHORT $LN254@MatchAt
$LN253@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	jne	SHORT $LN252@MatchAt
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6765[ebp], eax
	mov	DWORD PTR tv6766[ebp], ecx
	mov	edx, DWORD PTR tv6765[ebp]
	mov	eax, DWORD PTR tv6766[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+88]
	jne	SHORT $LN252@MatchAt
	mov	edx, DWORD PTR tv6765[ebp]
	mov	eax, DWORD PTR tv6766[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+92]
	je	SHORT $LN254@MatchAt
$LN252@MatchAt:
; Line 3127
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN254@MatchAt:
; Line 3129
	jmp	$LN331@MatchAt
$LN251@MatchAt:
; Line 3134
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6782[ebp], eax
	mov	DWORD PTR tv6783[ebp], ecx
	mov	edx, DWORD PTR tv6782[ebp]
	mov	eax, DWORD PTR tv6783[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN250@MatchAt
	jg	SHORT $LN648@MatchAt
	mov	edx, DWORD PTR tv6782[ebp]
	mov	eax, DWORD PTR tv6783[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN250@MatchAt
$LN648@MatchAt:
; Line 3135
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3136
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3137
	jmp	$LN331@MatchAt
$LN250@MatchAt:
; Line 3139
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41504[ebp], eax
	mov	DWORD PTR ___offset$41504[ebp+4], edx
	cmp	DWORD PTR ___offset$41504[ebp+4], 0
	jl	SHORT $LN249@MatchAt
	jg	SHORT $LN649@MatchAt
	cmp	DWORD PTR ___offset$41504[ebp], 0
	jb	SHORT $LN249@MatchAt
$LN649@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv6817[ebp], eax
	mov	DWORD PTR tv6817[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41504[ebp+4]
	cmp	edx, DWORD PTR tv6817[ebp+4]
	jg	SHORT $LN249@MatchAt
	jl	SHORT $LN650@MatchAt
	mov	eax, DWORD PTR ___offset$41504[ebp]
	cmp	eax, DWORD PTR tv6817[ebp]
	ja	SHORT $LN249@MatchAt
$LN650@MatchAt:
	mov	eax, DWORD PTR ___offset$41504[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN248@MatchAt
$LN249@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN248@MatchAt:
; Line 3140
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN392@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN392@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv1149[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN393@MatchAt
$LN392@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv1149[ebp], eax
$LN393@MatchAt:
	mov	ecx, DWORD PTR tv1149[ebp]
	mov	DWORD PTR _c$41509[ebp], ecx
; Line 3141
	mov	eax, DWORD PTR _c$41509[ebp]
	push	eax
	call	_u_charType_56
	add	esp, 4
	mov	BYTE PTR _ctype$41510[ebp], al
; Line 3142
	movsx	eax, BYTE PTR _ctype$41510[ebp]
	cmp	eax, 12					; 0000000cH
	je	SHORT $LN394@MatchAt
	cmp	DWORD PTR _c$41509[ebp], 9
	je	SHORT $LN394@MatchAt
	mov	BYTE PTR tv1155[ebp], 0
	jmp	SHORT $LN395@MatchAt
$LN394@MatchAt:
	mov	BYTE PTR tv1155[ebp], 1
$LN395@MatchAt:
	mov	cl, BYTE PTR tv1155[ebp]
	mov	BYTE PTR _success$41511[ebp], cl
; Line 3143
	cmp	DWORD PTR _opValue$[ebp], 0
	setne	al
	movsx	ecx, al
	movsx	edx, BYTE PTR _success$41511[ebp]
	xor	edx, ecx
	mov	BYTE PTR _success$41511[ebp], dl
; Line 3144
	movsx	eax, BYTE PTR _success$41511[ebp]
	test	eax, eax
	je	SHORT $LN247@MatchAt
; Line 3145
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN396@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv1181[ebp], eax
	mov	DWORD PTR tv1181[ebp+4], edx
	jmp	SHORT $LN397@MatchAt
$LN396@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1181[ebp], eax
	mov	DWORD PTR tv1181[ebp+4], edx
$LN397@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv1181[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv1181[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3146
	jmp	SHORT $LN246@MatchAt
$LN247@MatchAt:
; Line 3147
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN246@MatchAt:
; Line 3150
	jmp	$LN331@MatchAt
$LN245@MatchAt:
; Line 3155
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6889[ebp], eax
	mov	DWORD PTR tv6890[ebp], ecx
	mov	edx, DWORD PTR tv6889[ebp]
	mov	eax, DWORD PTR tv6890[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN244@MatchAt
	jg	SHORT $LN651@MatchAt
	mov	edx, DWORD PTR tv6889[ebp]
	mov	eax, DWORD PTR tv6890[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN244@MatchAt
$LN651@MatchAt:
; Line 3156
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3157
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3158
	jmp	$LN331@MatchAt
$LN244@MatchAt:
; Line 3160
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41519[ebp], eax
	mov	DWORD PTR ___offset$41519[ebp+4], edx
	cmp	DWORD PTR ___offset$41519[ebp+4], 0
	jl	SHORT $LN243@MatchAt
	jg	SHORT $LN652@MatchAt
	cmp	DWORD PTR ___offset$41519[ebp], 0
	jb	SHORT $LN243@MatchAt
$LN652@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv6924[ebp], eax
	mov	DWORD PTR tv6924[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41519[ebp+4]
	cmp	edx, DWORD PTR tv6924[ebp+4]
	jg	SHORT $LN243@MatchAt
	jl	SHORT $LN653@MatchAt
	mov	eax, DWORD PTR ___offset$41519[ebp]
	cmp	eax, DWORD PTR tv6924[ebp]
	ja	SHORT $LN243@MatchAt
$LN653@MatchAt:
	mov	eax, DWORD PTR ___offset$41519[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN242@MatchAt
$LN243@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN242@MatchAt:
; Line 3161
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN398@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN398@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv1237[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN399@MatchAt
$LN398@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv1237[ebp], eax
$LN399@MatchAt:
	mov	ecx, DWORD PTR tv1237[ebp]
	mov	DWORD PTR _c$41524[ebp], ecx
; Line 3162
	mov	eax, DWORD PTR _c$41524[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN241@MatchAt
; Line 3163
	cmp	DWORD PTR _c$41524[ebp], 13		; 0000000dH
	jne	SHORT $LN240@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_current32_56
	add	esp, 4
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN240@MatchAt
; Line 3164
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_next32_56
	add	esp, 4
$LN240@MatchAt:
; Line 3166
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN400@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv1266[ebp], eax
	mov	DWORD PTR tv1266[ebp+4], edx
	jmp	SHORT $LN401@MatchAt
$LN400@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1266[ebp], eax
	mov	DWORD PTR tv1266[ebp+4], edx
$LN401@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv1266[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv1266[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3167
	jmp	SHORT $LN239@MatchAt
$LN241@MatchAt:
; Line 3168
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN239@MatchAt:
; Line 3171
	jmp	$LN331@MatchAt
$LN238@MatchAt:
; Line 3176
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7000[ebp], eax
	mov	DWORD PTR tv7001[ebp], ecx
	mov	edx, DWORD PTR tv7000[ebp]
	mov	eax, DWORD PTR tv7001[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN237@MatchAt
	jg	SHORT $LN654@MatchAt
	mov	edx, DWORD PTR tv7000[ebp]
	mov	eax, DWORD PTR tv7001[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN237@MatchAt
$LN654@MatchAt:
; Line 3177
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3178
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3179
	jmp	$LN331@MatchAt
$LN237@MatchAt:
; Line 3181
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41532[ebp], eax
	mov	DWORD PTR ___offset$41532[ebp+4], edx
	cmp	DWORD PTR ___offset$41532[ebp+4], 0
	jl	SHORT $LN236@MatchAt
	jg	SHORT $LN655@MatchAt
	cmp	DWORD PTR ___offset$41532[ebp], 0
	jb	SHORT $LN236@MatchAt
$LN655@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv7035[ebp], eax
	mov	DWORD PTR tv7035[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41532[ebp+4]
	cmp	edx, DWORD PTR tv7035[ebp+4]
	jg	SHORT $LN236@MatchAt
	jl	SHORT $LN656@MatchAt
	mov	eax, DWORD PTR ___offset$41532[ebp]
	cmp	eax, DWORD PTR tv7035[ebp]
	ja	SHORT $LN236@MatchAt
$LN656@MatchAt:
	mov	eax, DWORD PTR ___offset$41532[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN235@MatchAt
$LN236@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN235@MatchAt:
; Line 3182
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN402@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN402@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv1322[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN403@MatchAt
$LN402@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv1322[ebp], eax
$LN403@MatchAt:
	mov	ecx, DWORD PTR tv1322[ebp]
	mov	DWORD PTR _c$41537[ebp], ecx
; Line 3183
	mov	eax, DWORD PTR _c$41537[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	mov	BYTE PTR _success$41538[ebp], al
; Line 3184
	cmp	DWORD PTR _opValue$[ebp], 0
	setne	al
	movsx	ecx, al
	movsx	edx, BYTE PTR _success$41538[ebp]
	xor	edx, ecx
	mov	BYTE PTR _success$41538[ebp], dl
; Line 3185
	movsx	eax, BYTE PTR _success$41538[ebp]
	test	eax, eax
	je	SHORT $LN234@MatchAt
; Line 3186
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN404@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv1350[ebp], eax
	mov	DWORD PTR tv1350[ebp+4], edx
	jmp	SHORT $LN405@MatchAt
$LN404@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1350[ebp], eax
	mov	DWORD PTR tv1350[ebp+4], edx
$LN405@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv1350[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv1350[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3187
	jmp	SHORT $LN233@MatchAt
$LN234@MatchAt:
; Line 3188
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN233@MatchAt:
; Line 3191
	jmp	$LN331@MatchAt
$LN232@MatchAt:
; Line 3201
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7138[ebp], eax
	mov	DWORD PTR tv7139[ebp], ecx
	mov	edx, DWORD PTR tv7138[ebp]
	mov	eax, DWORD PTR tv7139[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN231@MatchAt
	jg	SHORT $LN657@MatchAt
	mov	edx, DWORD PTR tv7138[ebp]
	mov	eax, DWORD PTR tv7139[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN231@MatchAt
$LN657@MatchAt:
; Line 3202
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3203
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3204
	jmp	$LN331@MatchAt
$LN231@MatchAt:
; Line 3207
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41546[ebp], eax
	mov	DWORD PTR ___offset$41546[ebp+4], edx
	cmp	DWORD PTR ___offset$41546[ebp+4], 0
	jl	SHORT $LN230@MatchAt
	jg	SHORT $LN658@MatchAt
	cmp	DWORD PTR ___offset$41546[ebp], 0
	jb	SHORT $LN230@MatchAt
$LN658@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv7173[ebp], eax
	mov	DWORD PTR tv7173[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41546[ebp+4]
	cmp	edx, DWORD PTR tv7173[ebp+4]
	jg	SHORT $LN230@MatchAt
	jl	SHORT $LN659@MatchAt
	mov	eax, DWORD PTR ___offset$41546[ebp]
	cmp	eax, DWORD PTR tv7173[ebp]
	ja	SHORT $LN230@MatchAt
$LN659@MatchAt:
	mov	eax, DWORD PTR ___offset$41546[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN229@MatchAt
$LN230@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN229@MatchAt:
; Line 3212
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN406@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN406@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv1406[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN407@MatchAt
$LN406@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv1406[ebp], eax
$LN407@MatchAt:
	mov	ecx, DWORD PTR tv1406[ebp]
	mov	DWORD PTR _c$41551[ebp], ecx
; Line 3213
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN408@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv1424[ebp], eax
	mov	DWORD PTR tv1424[ebp+4], edx
	jmp	SHORT $LN409@MatchAt
$LN408@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1424[ebp], eax
	mov	DWORD PTR tv1424[ebp+4], edx
$LN409@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv1424[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv1424[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR _sets$41552[ebp], edx
; Line 3215
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN228@MatchAt
	jmp	$GC_Extend$41554
$LN228@MatchAt:
; Line 3216
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN226@MatchAt
	jmp	$GC_Control$41557
$LN226@MatchAt:
; Line 3217
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN224@MatchAt
	jmp	$GC_L$41560
$LN224@MatchAt:
; Line 3218
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN222@MatchAt
	jmp	$GC_V$41563
$LN222@MatchAt:
; Line 3219
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN220@MatchAt
	jmp	$GC_T$41566
$LN220@MatchAt:
; Line 3220
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN218@MatchAt
	jmp	$GC_V$41563
$LN218@MatchAt:
; Line 3221
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT __unwind$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$8
	jmp	$GC_T$41566
__unwind$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$8:
; Line 3222
	jmp	$GC_Extend$41554
$GC_L$41560:
; Line 3227
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7287[ebp], eax
	mov	DWORD PTR tv7288[ebp], ecx
	mov	edx, DWORD PTR tv7287[ebp]
	mov	eax, DWORD PTR tv7288[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN213@MatchAt
	jg	SHORT __unwind$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$9
	mov	edx, DWORD PTR tv7287[ebp]
	mov	eax, DWORD PTR tv7288[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN213@MatchAt
__unwind$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$9:
	jmp	$GC_Done$41574
$LN213@MatchAt:
; Line 3228
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN410@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN410@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv1562[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN411@MatchAt
$LN410@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv1562[ebp], eax
$LN411@MatchAt:
	mov	ecx, DWORD PTR tv1562[ebp]
	mov	DWORD PTR _c$41551[ebp], ecx
; Line 3229
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN412@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv1580[ebp], eax
	mov	DWORD PTR tv1580[ebp+4], edx
	jmp	SHORT $LN413@MatchAt
$LN412@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1580[ebp], eax
	mov	DWORD PTR tv1580[ebp+4], edx
$LN413@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv1580[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv1580[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3230
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN211@MatchAt
	jmp	$GC_L$41560
$LN211@MatchAt:
; Line 3231
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN210@MatchAt
	jmp	$GC_V$41563
$LN210@MatchAt:
; Line 3232
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN208@MatchAt
	jmp	$GC_T$41566
$LN208@MatchAt:
; Line 3233
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN206@MatchAt
	jmp	$GC_V$41563
$LN206@MatchAt:
; Line 3234
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN414@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN414@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv1659[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv1659[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv1659[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv1666[ebp], edx
	jmp	SHORT $LN415@MatchAt
$LN414@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv1666[ebp], eax
$LN415@MatchAt:
; Line 3235
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN416@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv1684[ebp], eax
	mov	DWORD PTR tv1684[ebp+4], edx
	jmp	SHORT $LN417@MatchAt
$LN416@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1684[ebp], eax
	mov	DWORD PTR tv1684[ebp+4], edx
$LN417@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv1684[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv1684[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3236
	jmp	$GC_Extend$41554
$GC_V$41563:
; Line 3239
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7418[ebp], eax
	mov	DWORD PTR tv7419[ebp], ecx
	mov	edx, DWORD PTR tv7418[ebp]
	mov	eax, DWORD PTR tv7419[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN203@MatchAt
	jg	SHORT __unwind$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$14
	mov	edx, DWORD PTR tv7418[ebp]
	mov	eax, DWORD PTR tv7419[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN203@MatchAt
__unwind$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$14:
	jmp	$GC_Done$41574
$LN203@MatchAt:
; Line 3240
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN418@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN418@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv1715[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN419@MatchAt
$LN418@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv1715[ebp], eax
$LN419@MatchAt:
	mov	ecx, DWORD PTR tv1715[ebp]
	mov	DWORD PTR _c$41551[ebp], ecx
; Line 3241
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN420@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv1733[ebp], eax
	mov	DWORD PTR tv1733[ebp+4], edx
	jmp	SHORT $LN421@MatchAt
$LN420@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1733[ebp], eax
	mov	DWORD PTR tv1733[ebp+4], edx
$LN421@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv1733[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv1733[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3242
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN201@MatchAt
	jmp	$GC_V$41563
$LN201@MatchAt:
; Line 3243
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN200@MatchAt
	jmp	$GC_T$41566
$LN200@MatchAt:
; Line 3244
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN422@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN422@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv1782[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv1782[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv1782[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv1789[ebp], edx
	jmp	SHORT $LN423@MatchAt
$LN422@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv1789[ebp], eax
$LN423@MatchAt:
; Line 3245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN424@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv1807[ebp], eax
	mov	DWORD PTR tv1807[ebp+4], edx
	jmp	SHORT $LN425@MatchAt
$LN424@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1807[ebp], eax
	mov	DWORD PTR tv1807[ebp+4], edx
$LN425@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv1807[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv1807[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3246
	jmp	$GC_Extend$41554
$GC_T$41566:
; Line 3249
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7535[ebp], eax
	mov	DWORD PTR tv7536[ebp], ecx
	mov	edx, DWORD PTR tv7535[ebp]
	mov	eax, DWORD PTR tv7536[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN197@MatchAt
	jg	SHORT __unwind$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$17
	mov	edx, DWORD PTR tv7535[ebp]
	mov	eax, DWORD PTR tv7536[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN197@MatchAt
__unwind$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$17:
	jmp	$GC_Done$41574
$LN197@MatchAt:
; Line 3250
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN426@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN426@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv1838[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN427@MatchAt
$LN426@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv1838[ebp], eax
$LN427@MatchAt:
	mov	ecx, DWORD PTR tv1838[ebp]
	mov	DWORD PTR _c$41551[ebp], ecx
; Line 3251
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN428@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv1856[ebp], eax
	mov	DWORD PTR tv1856[ebp+4], edx
	jmp	SHORT $LN429@MatchAt
$LN428@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1856[ebp], eax
	mov	DWORD PTR tv1856[ebp+4], edx
$LN429@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv1856[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv1856[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3252
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN195@MatchAt
	jmp	$GC_T$41566
$LN195@MatchAt:
; Line 3253
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN430@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN430@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv1890[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv1890[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv1890[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv1897[ebp], edx
	jmp	SHORT $LN431@MatchAt
$LN430@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv1897[ebp], eax
$LN431@MatchAt:
; Line 3254
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN432@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv1915[ebp], eax
	mov	DWORD PTR tv1915[ebp+4], edx
	jmp	SHORT $LN433@MatchAt
$LN432@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1915[ebp], eax
	mov	DWORD PTR tv1915[ebp+4], edx
$LN433@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv1915[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv1915[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$GC_Extend$41554:
; Line 3260
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7645[ebp], eax
	mov	DWORD PTR tv7646[ebp], ecx
	mov	edx, DWORD PTR tv7645[ebp]
	mov	eax, DWORD PTR tv7646[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN191@MatchAt
	jg	SHORT $LN663@MatchAt
	mov	edx, DWORD PTR tv7645[ebp]
	mov	eax, DWORD PTR tv7646[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN191@MatchAt
$LN663@MatchAt:
; Line 3261
	jmp	__unwind$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$19
$LN191@MatchAt:
; Line 3263
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN434@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN434@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv1941[ebp], edx
	jmp	SHORT $LN435@MatchAt
$LN434@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_current32_56
	add	esp, 4
	mov	DWORD PTR tv1941[ebp], eax
$LN435@MatchAt:
	mov	edx, DWORD PTR tv1941[ebp]
	mov	DWORD PTR _c$41551[ebp], edx
; Line 3264
	mov	esi, esp
	mov	eax, DWORD PTR _c$41551[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$41552[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _sets$41552[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN190@MatchAt
; Line 3265
	jmp	__unwind$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$19
$LN190@MatchAt:
; Line 3267
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN436@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN436@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv1985[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN437@MatchAt
$LN436@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv1985[ebp], eax
$LN437@MatchAt:
; Line 3268
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN438@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv2003[ebp], eax
	mov	DWORD PTR tv2003[ebp+4], edx
	jmp	SHORT $LN439@MatchAt
$LN438@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv2003[ebp], eax
	mov	DWORD PTR tv2003[ebp+4], edx
$LN439@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv2003[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv2003[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3269
	jmp	$GC_Extend$41554
__unwind$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$19:
; Line 3270
	jmp	$GC_Done$41574
$GC_Control$41557:
; Line 3275
	cmp	DWORD PTR _c$41551[ebp], 13		; 0000000dH
	jne	$GC_Done$41574
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7719[ebp], eax
	mov	DWORD PTR tv7720[ebp], ecx
	mov	edx, DWORD PTR tv7719[ebp]
	mov	eax, DWORD PTR tv7720[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jg	$GC_Done$41574
	jl	SHORT $LN664@MatchAt
	mov	edx, DWORD PTR tv7719[ebp]
	mov	eax, DWORD PTR tv7720[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jae	$GC_Done$41574
$LN664@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN440@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN440@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv2030[ebp], edx
	jmp	SHORT $LN441@MatchAt
$LN440@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_current32_56
	add	esp, 4
	mov	DWORD PTR tv2030[ebp], eax
$LN441@MatchAt:
	cmp	DWORD PTR tv2030[ebp], 10		; 0000000aH
	jne	$GC_Done$41574
; Line 3276
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN442@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN442@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv2060[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN443@MatchAt
$LN442@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv2060[ebp], eax
$LN443@MatchAt:
	mov	ecx, DWORD PTR tv2060[ebp]
	mov	DWORD PTR _c$41551[ebp], ecx
; Line 3277
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN444@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv2078[ebp], eax
	mov	DWORD PTR tv2078[ebp+4], edx
	jmp	SHORT $LN445@MatchAt
$LN444@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv2078[ebp], eax
	mov	DWORD PTR tv2078[ebp+4], edx
$LN445@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv2078[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv2078[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$GC_Done$41574:
; Line 3281
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7786[ebp], eax
	mov	DWORD PTR tv7787[ebp], ecx
	mov	edx, DWORD PTR tv7786[ebp]
	mov	eax, DWORD PTR tv7787[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN187@MatchAt
	jg	SHORT $LN665@MatchAt
	mov	edx, DWORD PTR tv7786[ebp]
	mov	eax, DWORD PTR tv7787[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN187@MatchAt
$LN665@MatchAt:
; Line 3282
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
$LN187@MatchAt:
; Line 3284
	jmp	$LN331@MatchAt
$LN186@MatchAt:
; Line 3291
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7799[ebp], eax
	mov	DWORD PTR tv7800[ebp], ecx
	mov	edx, DWORD PTR tv7799[ebp]
	mov	eax, DWORD PTR tv7800[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jg	SHORT $LN185@MatchAt
	jl	SHORT $LN666@MatchAt
	mov	edx, DWORD PTR tv7799[ebp]
	mov	eax, DWORD PTR tv7800[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jae	SHORT $LN185@MatchAt
$LN666@MatchAt:
; Line 3292
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3293
	jmp	SHORT $LN184@MatchAt
$LN185@MatchAt:
; Line 3294
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3295
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
$LN184@MatchAt:
; Line 3297
	jmp	$LN331@MatchAt
$LN183@MatchAt:
; Line 3308
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7819[ebp], eax
	mov	DWORD PTR tv7820[ebp], ecx
	mov	edx, DWORD PTR tv7819[ebp]
	mov	eax, DWORD PTR tv7820[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN182@MatchAt
	jg	SHORT $LN667@MatchAt
	mov	edx, DWORD PTR tv7819[ebp]
	mov	eax, DWORD PTR tv7820[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN182@MatchAt
$LN667@MatchAt:
; Line 3309
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3310
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3311
	jmp	$LN331@MatchAt
$LN182@MatchAt:
; Line 3314
	mov	eax, DWORD PTR _opValue$[ebp]
	and	eax, 8388608				; 00800000H
	cmp	eax, 8388608				; 00800000H
	sete	cl
	mov	BYTE PTR _success$41613[ebp], cl
; Line 3315
	mov	eax, DWORD PTR _opValue$[ebp]
	and	eax, -8388609				; ff7fffffH
	mov	DWORD PTR _opValue$[ebp], eax
; Line 3316
	jle	SHORT $LN446@MatchAt
	cmp	DWORD PTR _opValue$[ebp], 13		; 0000000dH
	jl	SHORT $LN447@MatchAt
$LN446@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 581				; 00000245H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EM@MGNFFFFE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAL?$AAA?$AAS@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN447@MatchAt:
; Line 3318
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41616[ebp], eax
	mov	DWORD PTR ___offset$41616[ebp+4], edx
	cmp	DWORD PTR ___offset$41616[ebp+4], 0
	jl	SHORT $LN181@MatchAt
	jg	SHORT $LN668@MatchAt
	cmp	DWORD PTR ___offset$41616[ebp], 0
	jb	SHORT $LN181@MatchAt
$LN668@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv7860[ebp], eax
	mov	DWORD PTR tv7860[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41616[ebp+4]
	cmp	edx, DWORD PTR tv7860[ebp+4]
	jg	SHORT $LN181@MatchAt
	jl	SHORT $LN669@MatchAt
	mov	eax, DWORD PTR ___offset$41616[ebp]
	cmp	eax, DWORD PTR tv7860[ebp]
	ja	SHORT $LN181@MatchAt
$LN669@MatchAt:
	mov	eax, DWORD PTR ___offset$41616[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN180@MatchAt
$LN181@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN180@MatchAt:
; Line 3319
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN448@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN448@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv2152[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN449@MatchAt
$LN448@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv2152[ebp], eax
$LN449@MatchAt:
	mov	ecx, DWORD PTR tv2152[ebp]
	mov	DWORD PTR _c$41621[ebp], ecx
; Line 3320
	cmp	DWORD PTR _c$41621[ebp], 256		; 00000100H
	jge	SHORT $LN179@MatchAt
; Line 3321
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR _s8$41623[ebp], edx
; Line 3322
	mov	eax, DWORD PTR _c$41621[ebp]
	push	eax
	mov	ecx, DWORD PTR _s8$41623[ebp]
	call	?contains@Regex8BitSet@icu_56@@QAECH@Z	; icu_56::Regex8BitSet::contains
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN178@MatchAt
; Line 3323
	movsx	eax, BYTE PTR _success$41613[ebp]
	test	eax, eax
	sete	cl
	mov	BYTE PTR _success$41613[ebp], cl
$LN178@MatchAt:
; Line 3325
	jmp	SHORT $LN177@MatchAt
$LN179@MatchAt:
; Line 3326
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _s$41626[ebp], ecx
; Line 3327
	mov	esi, esp
	mov	eax, DWORD PTR _c$41621[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$41626[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _s$41626[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN177@MatchAt
; Line 3328
	movsx	eax, BYTE PTR _success$41613[ebp]
	test	eax, eax
	sete	cl
	mov	BYTE PTR _success$41613[ebp], cl
$LN177@MatchAt:
; Line 3331
	movsx	eax, BYTE PTR _success$41613[ebp]
	test	eax, eax
	je	SHORT $LN175@MatchAt
; Line 3332
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN450@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv2203[ebp], eax
	mov	DWORD PTR tv2203[ebp+4], edx
	jmp	SHORT $LN451@MatchAt
$LN450@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv2203[ebp], eax
	mov	DWORD PTR tv2203[ebp+4], edx
$LN451@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv2203[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv2203[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3333
	jmp	SHORT $LN174@MatchAt
$LN175@MatchAt:
; Line 3335
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN174@MatchAt:
; Line 3338
	jmp	$LN331@MatchAt
$LN173@MatchAt:
; Line 3345
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7942[ebp], eax
	mov	DWORD PTR tv7943[ebp], ecx
	mov	edx, DWORD PTR tv7942[ebp]
	mov	eax, DWORD PTR tv7943[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN172@MatchAt
	jg	SHORT $LN670@MatchAt
	mov	edx, DWORD PTR tv7942[ebp]
	mov	eax, DWORD PTR tv7943[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN172@MatchAt
$LN670@MatchAt:
; Line 3346
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3347
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3348
	jmp	$LN331@MatchAt
$LN172@MatchAt:
; Line 3351
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN452@MatchAt
	cmp	DWORD PTR _opValue$[ebp], 13		; 0000000dH
	jl	SHORT $LN453@MatchAt
$LN452@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 616				; 00000268H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EM@MGNFFFFE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAL?$AAA?$AAS@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN453@MatchAt:
; Line 3353
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41635[ebp], eax
	mov	DWORD PTR ___offset$41635[ebp+4], edx
	cmp	DWORD PTR ___offset$41635[ebp+4], 0
	jl	SHORT $LN171@MatchAt
	jg	SHORT $LN671@MatchAt
	cmp	DWORD PTR ___offset$41635[ebp], 0
	jb	SHORT $LN171@MatchAt
$LN671@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv7981[ebp], eax
	mov	DWORD PTR tv7981[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41635[ebp+4]
	cmp	edx, DWORD PTR tv7981[ebp+4]
	jg	SHORT $LN171@MatchAt
	jl	SHORT $LN672@MatchAt
	mov	eax, DWORD PTR ___offset$41635[ebp]
	cmp	eax, DWORD PTR tv7981[ebp]
	ja	SHORT $LN171@MatchAt
$LN672@MatchAt:
	mov	eax, DWORD PTR ___offset$41635[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN170@MatchAt
$LN171@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN170@MatchAt:
; Line 3355
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN454@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN454@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv2266[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN455@MatchAt
$LN454@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv2266[ebp], eax
$LN455@MatchAt:
	mov	ecx, DWORD PTR tv2266[ebp]
	mov	DWORD PTR _c$41640[ebp], ecx
; Line 3356
	cmp	DWORD PTR _c$41640[ebp], 256		; 00000100H
	jge	$LN169@MatchAt
; Line 3357
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR _s8$41642[ebp], edx
; Line 3358
	mov	eax, DWORD PTR _c$41640[ebp]
	push	eax
	mov	ecx, DWORD PTR _s8$41642[ebp]
	call	?contains@Regex8BitSet@icu_56@@QAECH@Z	; icu_56::Regex8BitSet::contains
	movsx	ecx, al
	test	ecx, ecx
	jne	$LN168@MatchAt
; Line 3359
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN456@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv2294[ebp], eax
	mov	DWORD PTR tv2294[ebp+4], edx
	jmp	SHORT $LN457@MatchAt
$LN456@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv2294[ebp], eax
	mov	DWORD PTR tv2294[ebp+4], edx
$LN457@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv2294[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv2294[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3360
	jmp	$LN331@MatchAt
$LN168@MatchAt:
; Line 3362
	jmp	$LN167@MatchAt
$LN169@MatchAt:
; Line 3363
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _s$41645[ebp], ecx
; Line 3364
	mov	esi, esp
	mov	eax, DWORD PTR _c$41640[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$41645[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _s$41645[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	$LN167@MatchAt
; Line 3365
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN458@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv2359[ebp], eax
	mov	DWORD PTR tv2359[ebp+4], edx
	jmp	SHORT $LN459@MatchAt
$LN458@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv2359[ebp], eax
	mov	DWORD PTR tv2359[ebp+4], edx
$LN459@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv2359[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv2359[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3366
	jmp	$LN331@MatchAt
$LN167@MatchAt:
; Line 3370
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3372
	jmp	$LN331@MatchAt
$LN165@MatchAt:
; Line 3376
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv8095[ebp], eax
	mov	DWORD PTR tv8096[ebp], ecx
	mov	edx, DWORD PTR tv8095[ebp]
	mov	eax, DWORD PTR tv8096[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN164@MatchAt
	jg	SHORT $LN673@MatchAt
	mov	edx, DWORD PTR tv8095[ebp]
	mov	eax, DWORD PTR tv8096[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN164@MatchAt
$LN673@MatchAt:
; Line 3377
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3378
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3379
	jmp	$LN331@MatchAt
; Line 3380
	jmp	$LN163@MatchAt
$LN164@MatchAt:
; Line 3381
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41652[ebp], eax
	mov	DWORD PTR ___offset$41652[ebp+4], edx
	cmp	DWORD PTR ___offset$41652[ebp+4], 0
	jl	SHORT $LN162@MatchAt
	jg	SHORT $LN674@MatchAt
	cmp	DWORD PTR ___offset$41652[ebp], 0
	jb	SHORT $LN162@MatchAt
$LN674@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv8130[ebp], eax
	mov	DWORD PTR tv8130[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41652[ebp+4]
	cmp	edx, DWORD PTR tv8130[ebp+4]
	jg	SHORT $LN162@MatchAt
	jl	SHORT $LN675@MatchAt
	mov	eax, DWORD PTR ___offset$41652[ebp]
	cmp	eax, DWORD PTR tv8130[ebp]
	ja	SHORT $LN162@MatchAt
$LN675@MatchAt:
	mov	eax, DWORD PTR ___offset$41652[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN161@MatchAt
$LN162@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN161@MatchAt:
; Line 3384
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN460@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN460@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv2415[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN461@MatchAt
$LN460@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv2415[ebp], eax
$LN461@MatchAt:
	mov	ecx, DWORD PTR tv2415[ebp]
	mov	DWORD PTR _c$41657[ebp], ecx
; Line 3385
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN462@MatchAt
	mov	esi, esp
	mov	ecx, DWORD PTR _sets$[ebp]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _opValue$[ebp], eax
	jl	SHORT $LN463@MatchAt
$LN462@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 650				; 0000028aH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EM@LLNCNHEM@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAs?$AAe?$AAt?$AAs?$AA?9?$AA?$DO?$AAs@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN463@MatchAt:
; Line 3386
	cmp	DWORD PTR _c$41657[ebp], 256		; 00000100H
	jge	$LN160@MatchAt
; Line 3387
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR _s8$41661[ebp], edx
; Line 3388
	mov	eax, DWORD PTR _c$41657[ebp]
	push	eax
	mov	ecx, DWORD PTR _s8$41661[ebp]
	call	?contains@Regex8BitSet@icu_56@@QAECH@Z	; icu_56::Regex8BitSet::contains
	movsx	ecx, al
	test	ecx, ecx
	je	$LN159@MatchAt
; Line 3389
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN464@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv2452[ebp], eax
	mov	DWORD PTR tv2452[ebp+4], edx
	jmp	SHORT $LN465@MatchAt
$LN464@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv2452[ebp], eax
	mov	DWORD PTR tv2452[ebp+4], edx
$LN465@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv2452[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv2452[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3390
	jmp	$LN331@MatchAt
$LN159@MatchAt:
; Line 3392
	jmp	$LN158@MatchAt
$LN160@MatchAt:
; Line 3393
	mov	esi, esp
	mov	eax, DWORD PTR _opValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$[ebp]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$41664[ebp], eax
; Line 3394
	mov	esi, esp
	mov	eax, DWORD PTR _c$41657[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$41664[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _s$41664[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	$LN158@MatchAt
; Line 3396
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN466@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv2484[ebp], eax
	mov	DWORD PTR tv2484[ebp+4], edx
	jmp	SHORT $LN467@MatchAt
$LN466@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv2484[ebp], eax
	mov	DWORD PTR tv2484[ebp+4], edx
$LN467@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv2484[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv2484[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3397
	jmp	$LN331@MatchAt
$LN158@MatchAt:
; Line 3402
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN163@MatchAt:
; Line 3404
	jmp	$LN331@MatchAt
$LN156@MatchAt:
; Line 3410
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv8252[ebp], eax
	mov	DWORD PTR tv8253[ebp], ecx
	mov	edx, DWORD PTR tv8252[ebp]
	mov	eax, DWORD PTR tv8253[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN155@MatchAt
	jg	SHORT $LN676@MatchAt
	mov	edx, DWORD PTR tv8252[ebp]
	mov	eax, DWORD PTR tv8253[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN155@MatchAt
$LN676@MatchAt:
; Line 3412
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3413
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3414
	jmp	$LN331@MatchAt
$LN155@MatchAt:
; Line 3417
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41671[ebp], eax
	mov	DWORD PTR ___offset$41671[ebp+4], edx
	cmp	DWORD PTR ___offset$41671[ebp+4], 0
	jl	SHORT $LN154@MatchAt
	jg	SHORT $LN677@MatchAt
	cmp	DWORD PTR ___offset$41671[ebp], 0
	jb	SHORT $LN154@MatchAt
$LN677@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv8287[ebp], eax
	mov	DWORD PTR tv8287[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41671[ebp+4]
	cmp	edx, DWORD PTR tv8287[ebp+4]
	jg	SHORT $LN154@MatchAt
	jl	SHORT $LN678@MatchAt
	mov	eax, DWORD PTR ___offset$41671[ebp]
	cmp	eax, DWORD PTR tv8287[ebp]
	ja	SHORT $LN154@MatchAt
$LN678@MatchAt:
	mov	eax, DWORD PTR ___offset$41671[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN153@MatchAt
$LN154@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN153@MatchAt:
; Line 3420
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN468@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN468@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv2540[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN469@MatchAt
$LN468@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv2540[ebp], eax
$LN469@MatchAt:
	mov	ecx, DWORD PTR tv2540[ebp]
	mov	DWORD PTR _c$41676[ebp], ecx
; Line 3421
	mov	eax, DWORD PTR _c$41676[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN152@MatchAt
; Line 3423
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3424
	jmp	$LN331@MatchAt
$LN152@MatchAt:
; Line 3426
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN470@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv2567[ebp], eax
	mov	DWORD PTR tv2567[ebp+4], edx
	jmp	SHORT $LN471@MatchAt
$LN470@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv2567[ebp], eax
	mov	DWORD PTR tv2567[ebp+4], edx
$LN471@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv2567[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv2567[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3428
	jmp	$LN331@MatchAt
$LN151@MatchAt:
; Line 3434
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv8358[ebp], eax
	mov	DWORD PTR tv8359[ebp], ecx
	mov	edx, DWORD PTR tv8358[ebp]
	mov	eax, DWORD PTR tv8359[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN150@MatchAt
	jg	SHORT $LN679@MatchAt
	mov	edx, DWORD PTR tv8358[ebp]
	mov	eax, DWORD PTR tv8359[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN150@MatchAt
$LN679@MatchAt:
; Line 3436
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3437
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3438
	jmp	$LN331@MatchAt
$LN150@MatchAt:
; Line 3441
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41682[ebp], eax
	mov	DWORD PTR ___offset$41682[ebp+4], edx
	cmp	DWORD PTR ___offset$41682[ebp+4], 0
	jl	SHORT $LN149@MatchAt
	jg	SHORT $LN680@MatchAt
	cmp	DWORD PTR ___offset$41682[ebp], 0
	jb	SHORT $LN149@MatchAt
$LN680@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv8393[ebp], eax
	mov	DWORD PTR tv8393[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41682[ebp+4]
	cmp	edx, DWORD PTR tv8393[ebp+4]
	jg	SHORT $LN149@MatchAt
	jl	SHORT $LN681@MatchAt
	mov	eax, DWORD PTR ___offset$41682[ebp]
	cmp	eax, DWORD PTR tv8393[ebp]
	ja	SHORT $LN149@MatchAt
$LN681@MatchAt:
	mov	eax, DWORD PTR ___offset$41682[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN148@MatchAt
$LN149@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN148@MatchAt:
; Line 3446
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN472@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN472@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv2618[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN473@MatchAt
$LN472@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv2618[ebp], eax
$LN473@MatchAt:
	mov	ecx, DWORD PTR tv2618[ebp]
	mov	DWORD PTR _c$41687[ebp], ecx
; Line 3447
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN474@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv2636[ebp], eax
	mov	DWORD PTR tv2636[ebp+4], edx
	jmp	SHORT $LN475@MatchAt
$LN474@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv2636[ebp], eax
	mov	DWORD PTR tv2636[ebp+4], edx
$LN475@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv2636[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv2636[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3448
	cmp	DWORD PTR _c$41687[ebp], 13		; 0000000dH
	jne	$LN147@MatchAt
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv8456[ebp], eax
	mov	DWORD PTR tv8457[ebp], ecx
	mov	edx, DWORD PTR tv8456[ebp]
	mov	eax, DWORD PTR tv8457[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jg	$LN147@MatchAt
	jl	SHORT $LN682@MatchAt
	mov	edx, DWORD PTR tv8456[ebp]
	mov	eax, DWORD PTR tv8457[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jae	$LN147@MatchAt
$LN682@MatchAt:
; Line 3450
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN476@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN476@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv2663[ebp], edx
	jmp	SHORT $LN477@MatchAt
$LN476@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_current32_56
	add	esp, 4
	mov	DWORD PTR tv2663[ebp], eax
$LN477@MatchAt:
	mov	edx, DWORD PTR tv2663[ebp]
	mov	DWORD PTR _nextc$41689[ebp], edx
; Line 3451
	cmp	DWORD PTR _nextc$41689[ebp], 10		; 0000000aH
	jne	$LN147@MatchAt
; Line 3452
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN478@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN478@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv2693[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN479@MatchAt
$LN478@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv2693[ebp], eax
$LN479@MatchAt:
; Line 3453
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN480@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv2711[ebp], eax
	mov	DWORD PTR tv2711[ebp+4], edx
	jmp	SHORT $LN481@MatchAt
$LN480@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv2711[ebp], eax
	mov	DWORD PTR tv2711[ebp+4], edx
$LN481@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv2711[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv2711[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN147@MatchAt:
; Line 3457
	jmp	$LN331@MatchAt
$LN145@MatchAt:
; Line 3464
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv8523[ebp], eax
	mov	DWORD PTR tv8524[ebp], ecx
	mov	edx, DWORD PTR tv8523[ebp]
	mov	eax, DWORD PTR tv8524[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN144@MatchAt
	jg	SHORT $LN683@MatchAt
	mov	edx, DWORD PTR tv8523[ebp]
	mov	eax, DWORD PTR tv8524[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN144@MatchAt
$LN683@MatchAt:
; Line 3466
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3467
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3468
	jmp	$LN331@MatchAt
$LN144@MatchAt:
; Line 3471
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41695[ebp], eax
	mov	DWORD PTR ___offset$41695[ebp+4], edx
	cmp	DWORD PTR ___offset$41695[ebp+4], 0
	jl	SHORT $LN143@MatchAt
	jg	SHORT $LN684@MatchAt
	cmp	DWORD PTR ___offset$41695[ebp], 0
	jb	SHORT $LN143@MatchAt
$LN684@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv8558[ebp], eax
	mov	DWORD PTR tv8558[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41695[ebp+4]
	cmp	edx, DWORD PTR tv8558[ebp+4]
	jg	SHORT $LN143@MatchAt
	jl	SHORT $LN685@MatchAt
	mov	eax, DWORD PTR ___offset$41695[ebp]
	cmp	eax, DWORD PTR tv8558[ebp]
	ja	SHORT $LN143@MatchAt
$LN685@MatchAt:
	mov	eax, DWORD PTR ___offset$41695[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN142@MatchAt
$LN143@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN142@MatchAt:
; Line 3474
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN482@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN482@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv2762[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN483@MatchAt
$LN482@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv2762[ebp], eax
$LN483@MatchAt:
	mov	ecx, DWORD PTR tv2762[ebp]
	mov	DWORD PTR _c$41700[ebp], ecx
; Line 3475
	cmp	DWORD PTR _c$41700[ebp], 10		; 0000000aH
	jne	SHORT $LN141@MatchAt
; Line 3477
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3478
	jmp	SHORT $LN140@MatchAt
$LN141@MatchAt:
; Line 3479
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN484@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv2786[ebp], eax
	mov	DWORD PTR tv2786[ebp+4], edx
	jmp	SHORT $LN485@MatchAt
$LN484@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv2786[ebp], eax
	mov	DWORD PTR tv2786[ebp+4], edx
$LN485@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv2786[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv2786[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN140@MatchAt:
; Line 3482
	jmp	$LN331@MatchAt
$LN139@MatchAt:
; Line 3486
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 3487
	jmp	$LN331@MatchAt
$LN138@MatchAt:
; Line 3490
	mov	BYTE PTR _isMatch$[ebp], 0
; Line 3491
	jmp	$breakFromLoop$41384
$LN136@MatchAt:
; Line 3494
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+16]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _opValue$[ebp], eax
	jl	SHORT $LN486@MatchAt
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 759				; 000002f7H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FC@OBCJPAPE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAC?$AAo?$AAm?$AAp?$AAi?$AAl?$AAe?$AAd?$AAP?$AAa?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN486@MatchAt:
; Line 3495
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 3496
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 3497
	jmp	$LN331@MatchAt
$LN135@MatchAt:
; Line 3505
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN487@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+16]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _opValue$[ebp], eax
	jl	SHORT $LN488@MatchAt
$LN487@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 770				; 00000302H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1HA@LNOJICFB@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN488@MatchAt:
; Line 3506
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-8]
	mov	DWORD PTR _stoOp$41713[ebp], edx
; Line 3507
	mov	eax, DWORD PTR _stoOp$41713[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 35					; 00000023H
	je	SHORT $LN489@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 772				; 00000304H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FK@GMJNKEFK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAo?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN489@MatchAt:
; Line 3508
	mov	eax, DWORD PTR _stoOp$41713[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _frameLoc$41718[ebp], eax
; Line 3509
	jl	SHORT $LN490@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _frameLoc$41718[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN491@MatchAt
$LN490@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 774				; 00000306H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@PNACHIHF@?$AAf?$AAr?$AAa?$AAm?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAf?$AAr?$AAa?$AAm?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN491@MatchAt:
; Line 3510
	mov	eax, DWORD PTR _frameLoc$41718[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _prevInputIdx$41721[ebp], edx
	mov	eax, DWORD PTR [ecx+eax*8+20]
	mov	DWORD PTR _prevInputIdx$41721[ebp+4], eax
; Line 3511
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv8687[ebp], eax
	mov	ecx, DWORD PTR tv8687[ebp]
	mov	edx, DWORD PTR _prevInputIdx$41721[ebp+4]
	cmp	edx, DWORD PTR [ecx+4]
	jl	SHORT $LN492@MatchAt
	jg	SHORT $LN686@MatchAt
	mov	eax, DWORD PTR tv8687[ebp]
	mov	ecx, DWORD PTR _prevInputIdx$41721[ebp]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN492@MatchAt
$LN686@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 776				; 00000308H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DM@GCGJLILJ@?$AAp?$AAr?$AAe?$AAv?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN492@MatchAt:
; Line 3512
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv8699[ebp], eax
	mov	ecx, DWORD PTR tv8699[ebp]
	mov	edx, DWORD PTR _prevInputIdx$41721[ebp+4]
	cmp	edx, DWORD PTR [ecx+4]
	jg	SHORT $LN134@MatchAt
	jl	SHORT $LN687@MatchAt
	mov	eax, DWORD PTR tv8699[ebp]
	mov	ecx, DWORD PTR _prevInputIdx$41721[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN134@MatchAt
$LN687@MatchAt:
; Line 3514
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 3515
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 3516
	mov	eax, DWORD PTR _frameLoc$41718[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+16], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+20], edx
$LN134@MatchAt:
; Line 3521
	jmp	$LN331@MatchAt
$LN133@MatchAt:
; Line 3525
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN493@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 2
	cmp	DWORD PTR _opValue$[ebp], ecx
	jl	SHORT $LN494@MatchAt
$LN493@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 790				; 00000316H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@MCNNJIPP@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN494@MatchAt:
; Line 3526
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+eax*8+16], 0
	mov	DWORD PTR [ecx+eax*8+20], 0
; Line 3530
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _instrOperandLoc$41728[ebp], ecx
; Line 3531
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 3
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 3532
	mov	eax, DWORD PTR _instrOperandLoc$41728[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*8+4]
	and	eax, 0
	mov	DWORD PTR _loopLoc$41730[ebp], edx
; Line 3533
	mov	eax, DWORD PTR _instrOperandLoc$41728[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+8]
	mov	DWORD PTR _minCount$41731[ebp], edx
; Line 3534
	mov	eax, DWORD PTR _instrOperandLoc$41728[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _maxCount$41733[ebp], edx
; Line 3535
	cmp	DWORD PTR _minCount$41731[ebp], 0
	jge	SHORT $LN495@MatchAt
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 800				; 00000320H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BI@LHJBDJG@?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN495@MatchAt:
; Line 3536
	mov	eax, DWORD PTR _maxCount$41733[ebp]
	cmp	eax, DWORD PTR _minCount$41731[ebp]
	jge	SHORT $LN496@MatchAt
	cmp	DWORD PTR _maxCount$41733[ebp], -1
	je	SHORT $LN496@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 801				; 00000321H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EG@KKDBMEOE@?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN496@MatchAt:
; Line 3537
	mov	eax, DWORD PTR _loopLoc$41730[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv8778[ebp], eax
	mov	DWORD PTR tv8778[ebp+4], edx
	mov	DWORD PTR tv8781[ebp], ecx
	mov	edx, DWORD PTR tv8781[ebp]
	mov	eax, DWORD PTR tv8778[ebp+4]
	cmp	eax, DWORD PTR [edx+12]
	jg	SHORT $LN497@MatchAt
	jl	SHORT $LN688@MatchAt
	mov	ecx, DWORD PTR tv8781[ebp]
	mov	edx, DWORD PTR tv8778[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN497@MatchAt
$LN688@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 802				; 00000322H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CK@KCCKOHDA@?$AAl?$AAo?$AAo?$AAp?$AAL?$AAo?$AAc?$AA?$DO?$AA?$DN?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN497@MatchAt:
; Line 3539
	cmp	DWORD PTR _minCount$41731[ebp], 0
	jne	SHORT $LN132@MatchAt
; Line 3540
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _loopLoc$41730[ebp]
	add	eax, 1
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
$LN132@MatchAt:
; Line 3542
	cmp	DWORD PTR _maxCount$41733[ebp], -1
	jne	SHORT $LN131@MatchAt
; Line 3543
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+24], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+28], edx
	jmp	SHORT $LN130@MatchAt
$LN131@MatchAt:
; Line 3544
	cmp	DWORD PTR _maxCount$41733[ebp], 0
	jne	SHORT $LN130@MatchAt
; Line 3545
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN130@MatchAt:
; Line 3548
	jmp	$LN331@MatchAt
$LN128@MatchAt:
; Line 3552
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN498@MatchAt
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx+8]
	sub	esi, 2
	mov	ecx, DWORD PTR [ecx+12]
	sbb	ecx, 0
	mov	DWORD PTR tv8831[ebp], eax
	mov	DWORD PTR tv8831[ebp+4], edx
	mov	DWORD PTR tv8834[ebp], esi
	mov	DWORD PTR tv8834[ebp+4], ecx
	mov	edx, DWORD PTR tv8831[ebp+4]
	cmp	edx, DWORD PTR tv8834[ebp+4]
	jl	SHORT $LN499@MatchAt
	jg	SHORT $LN498@MatchAt
	mov	eax, DWORD PTR tv8831[ebp]
	cmp	eax, DWORD PTR tv8834[ebp]
	jb	SHORT $LN499@MatchAt
$LN498@MatchAt:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 817				; 00000331H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EK@LNFOAHJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN499@MatchAt:
; Line 3553
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _initOp$41749[ebp], edx
; Line 3554
	mov	eax, DWORD PTR _initOp$41749[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 25					; 00000019H
	je	SHORT $LN500@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 819				; 00000333H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FG@JDEBOKCN@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAi?$AAt?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN500@MatchAt:
; Line 3555
	mov	eax, DWORD PTR _initOp$41749[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _fp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _pCounter$41754[ebp], edx
; Line 3556
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _minCount$41755[ebp], edx
; Line 3557
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _maxCount$41757[ebp], edx
; Line 3558
	mov	eax, DWORD PTR _pCounter$41754[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _pCounter$41754[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 3559
	mov	eax, DWORD PTR _maxCount$41757[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _pCounter$41754[ebp]
	mov	DWORD PTR tv8870[ebp], edx
	mov	DWORD PTR tv8871[ebp], eax
	mov	DWORD PTR tv8871[ebp+4], ecx
	mov	eax, DWORD PTR tv8870[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR tv8871[ebp+4]
	jb	$LN127@MatchAt
	ja	SHORT $LN690@MatchAt
	mov	edx, DWORD PTR tv8870[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv8871[ebp]
	jb	SHORT $LN127@MatchAt
$LN690@MatchAt:
	cmp	DWORD PTR _maxCount$41757[ebp], -1
	je	SHORT $LN127@MatchAt
; Line 3560
	mov	eax, DWORD PTR _maxCount$41757[ebp]
	cdq
	mov	ecx, DWORD PTR _pCounter$41754[ebp]
	mov	DWORD PTR tv8887[ebp], ecx
	mov	DWORD PTR tv8888[ebp], eax
	mov	DWORD PTR tv8888[ebp+4], edx
	mov	edx, DWORD PTR tv8887[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv8888[ebp]
	jne	SHORT $LN691@MatchAt
	mov	ecx, DWORD PTR tv8887[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR tv8888[ebp+4]
	je	SHORT $LN501@MatchAt
$LN691@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 825				; 00000339H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CM@ECBPPCBA@?$AA?$CK?$AAp?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN501@MatchAt:
; Line 3561
	jmp	$LN331@MatchAt
$LN127@MatchAt:
; Line 3563
	mov	eax, DWORD PTR _minCount$41755[ebp]
	cdq
	mov	ecx, DWORD PTR _pCounter$41754[ebp]
	mov	DWORD PTR tv8907[ebp], ecx
	mov	DWORD PTR tv8908[ebp], eax
	mov	DWORD PTR tv8908[ebp+4], edx
	mov	edx, DWORD PTR tv8907[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR tv8908[ebp+4]
	jl	$LN126@MatchAt
	jg	SHORT $LN692@MatchAt
	mov	ecx, DWORD PTR tv8907[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv8908[ebp]
	jb	$LN126@MatchAt
$LN692@MatchAt:
; Line 3564
	cmp	DWORD PTR _maxCount$41757[ebp], -1
	jne	SHORT $LN125@MatchAt
; Line 3567
	mov	eax, DWORD PTR _initOp$41749[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _fp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _pLastInputIdx$41766[ebp], edx
; Line 3568
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _pLastInputIdx$41766[ebp]
	mov	DWORD PTR tv8921[ebp], eax
	mov	DWORD PTR tv8922[ebp], ecx
	mov	edx, DWORD PTR tv8921[ebp]
	mov	eax, DWORD PTR tv8922[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN124@MatchAt
	mov	edx, DWORD PTR tv8921[ebp]
	mov	eax, DWORD PTR tv8922[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN124@MatchAt
; Line 3569
	jmp	$LN331@MatchAt
; Line 3570
	jmp	SHORT $LN125@MatchAt
$LN124@MatchAt:
; Line 3571
	mov	eax, DWORD PTR _pLastInputIdx$41766[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN125@MatchAt:
; Line 3574
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
$LN126@MatchAt:
; Line 3576
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 4
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 3578
	jmp	$LN331@MatchAt
$LN122@MatchAt:
; Line 3583
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN502@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 2
	cmp	DWORD PTR _opValue$[ebp], ecx
	jl	SHORT $LN503@MatchAt
$LN502@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 848				; 00000350H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@MCNNJIPP@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN503@MatchAt:
; Line 3584
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+eax*8+16], 0
	mov	DWORD PTR [ecx+eax*8+20], 0
; Line 3588
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _instrOperandLoc$41771[ebp], ecx
; Line 3589
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 3
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 3590
	mov	eax, DWORD PTR _instrOperandLoc$41771[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*8+4]
	and	eax, 0
	mov	DWORD PTR _loopLoc$41773[ebp], edx
; Line 3591
	mov	eax, DWORD PTR _instrOperandLoc$41771[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+8]
	mov	DWORD PTR _minCount$41774[ebp], edx
; Line 3592
	mov	eax, DWORD PTR _instrOperandLoc$41771[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _maxCount$41776[ebp], edx
; Line 3593
	cmp	DWORD PTR _minCount$41774[ebp], 0
	jge	SHORT $LN504@MatchAt
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 858				; 0000035aH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BI@LHJBDJG@?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN504@MatchAt:
; Line 3594
	mov	eax, DWORD PTR _maxCount$41776[ebp]
	cmp	eax, DWORD PTR _minCount$41774[ebp]
	jge	SHORT $LN505@MatchAt
	cmp	DWORD PTR _maxCount$41776[ebp], -1
	je	SHORT $LN505@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 859				; 0000035bH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EG@KKDBMEOE@?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN505@MatchAt:
; Line 3595
	mov	eax, DWORD PTR _loopLoc$41773[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv9001[ebp], eax
	mov	DWORD PTR tv9001[ebp+4], edx
	mov	DWORD PTR tv9004[ebp], ecx
	mov	edx, DWORD PTR tv9004[ebp]
	mov	eax, DWORD PTR tv9001[ebp+4]
	cmp	eax, DWORD PTR [edx+12]
	jg	SHORT $LN506@MatchAt
	jl	SHORT $LN693@MatchAt
	mov	ecx, DWORD PTR tv9004[ebp]
	mov	edx, DWORD PTR tv9001[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN506@MatchAt
$LN693@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 860				; 0000035cH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CI@HFENNECI@?$AAl?$AAo?$AAo?$AAp?$AAL?$AAo?$AAc?$AA?$DO?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN506@MatchAt:
; Line 3596
	cmp	DWORD PTR _maxCount$41776[ebp], -1
	jne	SHORT $LN121@MatchAt
; Line 3597
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+24], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+28], edx
$LN121@MatchAt:
; Line 3600
	cmp	DWORD PTR _minCount$41774[ebp], 0
	jne	SHORT $LN120@MatchAt
; Line 3601
	cmp	DWORD PTR _maxCount$41776[ebp], 0
	je	SHORT $LN119@MatchAt
; Line 3602
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
$LN119@MatchAt:
; Line 3604
	mov	eax, DWORD PTR _loopLoc$41773[ebp]
	add	eax, 1
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
$LN120@MatchAt:
; Line 3607
	jmp	$LN331@MatchAt
$LN118@MatchAt:
; Line 3612
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN507@MatchAt
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx+8]
	sub	esi, 2
	mov	ecx, DWORD PTR [ecx+12]
	sbb	ecx, 0
	mov	DWORD PTR tv9054[ebp], eax
	mov	DWORD PTR tv9054[ebp+4], edx
	mov	DWORD PTR tv9057[ebp], esi
	mov	DWORD PTR tv9057[ebp+4], ecx
	mov	edx, DWORD PTR tv9054[ebp+4]
	cmp	edx, DWORD PTR tv9057[ebp+4]
	jl	SHORT $LN508@MatchAt
	jg	SHORT $LN507@MatchAt
	mov	eax, DWORD PTR tv9054[ebp]
	cmp	eax, DWORD PTR tv9057[ebp]
	jb	SHORT $LN508@MatchAt
$LN507@MatchAt:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 877				; 0000036dH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EK@LNFOAHJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN508@MatchAt:
; Line 3613
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _initOp$41787[ebp], edx
; Line 3614
	mov	eax, DWORD PTR _initOp$41787[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 26					; 0000001aH
	je	SHORT $LN509@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 879				; 0000036fH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FM@LKDMBKJF@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAi?$AAt?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN509@MatchAt:
; Line 3615
	mov	eax, DWORD PTR _initOp$41787[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _fp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _pCounter$41792[ebp], edx
; Line 3616
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _minCount$41793[ebp], edx
; Line 3617
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _maxCount$41795[ebp], edx
; Line 3619
	mov	eax, DWORD PTR _pCounter$41792[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _pCounter$41792[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 3620
	mov	eax, DWORD PTR _maxCount$41795[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _pCounter$41792[ebp]
	mov	DWORD PTR tv9093[ebp], edx
	mov	DWORD PTR tv9094[ebp], eax
	mov	DWORD PTR tv9094[ebp+4], ecx
	mov	eax, DWORD PTR tv9093[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR tv9094[ebp+4]
	jb	$LN117@MatchAt
	ja	SHORT $LN695@MatchAt
	mov	edx, DWORD PTR tv9093[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv9094[ebp]
	jb	SHORT $LN117@MatchAt
$LN695@MatchAt:
	cmp	DWORD PTR _maxCount$41795[ebp], -1
	je	SHORT $LN117@MatchAt
; Line 3624
	mov	eax, DWORD PTR _maxCount$41795[ebp]
	cdq
	mov	ecx, DWORD PTR _pCounter$41792[ebp]
	mov	DWORD PTR tv9110[ebp], ecx
	mov	DWORD PTR tv9111[ebp], eax
	mov	DWORD PTR tv9111[ebp+4], edx
	mov	edx, DWORD PTR tv9110[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv9111[ebp]
	jne	SHORT $LN696@MatchAt
	mov	ecx, DWORD PTR tv9110[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR tv9111[ebp+4]
	je	SHORT $LN510@MatchAt
$LN696@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 889				; 00000379H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CM@ECBPPCBA@?$AA?$CK?$AAp?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN510@MatchAt:
; Line 3625
	jmp	$LN331@MatchAt
$LN117@MatchAt:
; Line 3628
	mov	eax, DWORD PTR _minCount$41793[ebp]
	cdq
	mov	ecx, DWORD PTR _pCounter$41792[ebp]
	mov	DWORD PTR tv9130[ebp], ecx
	mov	DWORD PTR tv9131[ebp], eax
	mov	DWORD PTR tv9131[ebp+4], edx
	mov	edx, DWORD PTR tv9130[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR tv9131[ebp+4]
	jg	SHORT $LN116@MatchAt
	jl	SHORT $LN697@MatchAt
	mov	ecx, DWORD PTR tv9130[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv9131[ebp]
	jae	SHORT $LN116@MatchAt
$LN697@MatchAt:
; Line 3631
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 4
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 3632
	jmp	$LN115@MatchAt
$LN116@MatchAt:
; Line 3637
	cmp	DWORD PTR _maxCount$41795[ebp], -1
	jne	SHORT $LN114@MatchAt
; Line 3638
	mov	eax, DWORD PTR _initOp$41787[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _fp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _pLastInputIdx$41804[ebp], edx
; Line 3639
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _pLastInputIdx$41804[ebp]
	mov	DWORD PTR tv9153[ebp], eax
	mov	DWORD PTR tv9154[ebp], ecx
	mov	edx, DWORD PTR tv9153[ebp]
	mov	eax, DWORD PTR tv9154[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN113@MatchAt
	mov	edx, DWORD PTR tv9153[ebp]
	mov	eax, DWORD PTR tv9154[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN113@MatchAt
; Line 3640
	jmp	$LN331@MatchAt
$LN113@MatchAt:
; Line 3642
	mov	eax, DWORD PTR _pLastInputIdx$41804[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN114@MatchAt:
; Line 3649
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 4
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
$LN115@MatchAt:
; Line 3652
	jmp	$LN331@MatchAt
$LN112@MatchAt:
; Line 3655
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN511@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	cmp	edx, DWORD PTR [ecx+104]
	jl	SHORT $LN512@MatchAt
$LN511@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 920				; 00000398H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FM@DFPIGJHK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN512@MatchAt:
; Line 3656
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+156]
	mov	esi, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR [ecx+esi*8], eax
	mov	DWORD PTR [ecx+esi*8+4], edx
; Line 3657
	jmp	$LN331@MatchAt
$LN111@MatchAt:
; Line 3661
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN513@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	cmp	edx, DWORD PTR [ecx+104]
	jl	SHORT $LN514@MatchAt
$LN513@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 926				; 0000039eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FM@DFPIGJHK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN514@MatchAt:
; Line 3662
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _newStackSize$41811[ebp], eax
; Line 3663
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _newStackSize$41811[ebp], eax
	jle	SHORT $LN515@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 928				; 000003a0H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DO@CCHGCLKC@?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAS?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN515@MatchAt:
; Line 3664
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?getBuffer@UVector64@icu_56@@QBEPA_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _newStackSize$41811[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 3
	sub	edx, ecx
	mov	DWORD PTR _newFP$41815[ebp], edx
; Line 3665
	mov	eax, DWORD PTR _newFP$41815[ebp]
	cmp	eax, DWORD PTR _fp$[ebp]
	jne	SHORT $LN110@MatchAt
; Line 3666
	jmp	$LN331@MatchAt
$LN110@MatchAt:
; Line 3669
	mov	DWORD PTR _i$41818[ebp], 0
	jmp	SHORT $LN109@MatchAt
$LN108@MatchAt:
	mov	eax, DWORD PTR _i$41818[ebp]
	add	eax, 1
	mov	DWORD PTR _i$41818[ebp], eax
$LN109@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$41818[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN107@MatchAt
; Line 3670
	mov	eax, DWORD PTR _i$41818[ebp]
	mov	ecx, DWORD PTR _newFP$41815[ebp]
	mov	edx, DWORD PTR _i$41818[ebp]
	mov	esi, DWORD PTR _fp$[ebp]
	mov	edi, DWORD PTR [esi+edx*8]
	mov	DWORD PTR [ecx+eax*8], edi
	mov	edx, DWORD PTR [esi+edx*8+4]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 3671
	jmp	SHORT $LN108@MatchAt
$LN107@MatchAt:
; Line 3672
	mov	eax, DWORD PTR _newFP$41815[ebp]
	mov	DWORD PTR _fp$[ebp], eax
; Line 3673
	mov	esi, esp
	mov	eax, DWORD PTR _newStackSize$41811[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+148]
	call	DWORD PTR __imp_?setSize@UVector64@icu_56@@QAEXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3675
	jmp	$LN331@MatchAt
$LN106@MatchAt:
; Line 3679
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _opValue$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN516@MatchAt
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 944				; 000003b0H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CK@IOFPLLPJ@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN516@MatchAt:
; Line 3680
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _groupStartIdx$41827[ebp], edx
	mov	eax, DWORD PTR [ecx+eax*8+20]
	mov	DWORD PTR _groupStartIdx$41827[ebp+4], eax
; Line 3681
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _groupEndIdx$41828[ebp], edx
	mov	eax, DWORD PTR [ecx+eax*8+28]
	mov	DWORD PTR _groupEndIdx$41828[ebp+4], eax
; Line 3682
	mov	eax, DWORD PTR _groupStartIdx$41827[ebp+4]
	cmp	eax, DWORD PTR _groupEndIdx$41828[ebp+4]
	jl	SHORT $LN517@MatchAt
	jg	SHORT $LN698@MatchAt
	mov	ecx, DWORD PTR _groupStartIdx$41827[ebp]
	cmp	ecx, DWORD PTR _groupEndIdx$41828[ebp]
	jbe	SHORT $LN517@MatchAt
$LN698@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 947				; 000003b3H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DK@MGMFMKKP@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAS?$AAt?$AAa?$AAr?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAg?$AAr?$AAo?$AAu?$AAp?$AAE?$AAn?$AAd?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN517@MatchAt:
; Line 3683
	cmp	DWORD PTR _groupStartIdx$41827[ebp+4], 0
	jg	SHORT $LN105@MatchAt
	jl	SHORT $LN699@MatchAt
	cmp	DWORD PTR _groupStartIdx$41827[ebp], 0
	jae	SHORT $LN105@MatchAt
$LN699@MatchAt:
; Line 3685
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3686
	jmp	$LN331@MatchAt
$LN105@MatchAt:
; Line 3688
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _groupStartIdx$41827[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _groupStartIdx$41827[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41833[ebp], edx
	mov	DWORD PTR ___offset$41833[ebp+4], eax
	cmp	DWORD PTR ___offset$41833[ebp+4], 0
	jl	SHORT $LN104@MatchAt
	jg	SHORT $LN700@MatchAt
	cmp	DWORD PTR ___offset$41833[ebp], 0
	jb	SHORT $LN104@MatchAt
$LN700@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv9291[ebp], eax
	mov	DWORD PTR tv9291[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41833[ebp+4]
	cmp	edx, DWORD PTR tv9291[ebp+4]
	jg	SHORT $LN104@MatchAt
	jl	SHORT $LN701@MatchAt
	mov	eax, DWORD PTR ___offset$41833[ebp]
	cmp	eax, DWORD PTR tv9291[ebp]
	ja	SHORT $LN104@MatchAt
$LN701@MatchAt:
	mov	eax, DWORD PTR ___offset$41833[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN103@MatchAt
$LN104@MatchAt:
	mov	eax, DWORD PTR _groupStartIdx$41827[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _groupStartIdx$41827[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN103@MatchAt:
; Line 3689
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41838[ebp], eax
	mov	DWORD PTR ___offset$41838[ebp+4], edx
	cmp	DWORD PTR ___offset$41838[ebp+4], 0
	jl	SHORT $LN102@MatchAt
	jg	SHORT $LN702@MatchAt
	cmp	DWORD PTR ___offset$41838[ebp], 0
	jb	SHORT $LN102@MatchAt
$LN702@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv9323[ebp], eax
	mov	DWORD PTR tv9323[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41838[ebp+4]
	cmp	edx, DWORD PTR tv9323[ebp+4]
	jg	SHORT $LN102@MatchAt
	jl	SHORT $LN703@MatchAt
	mov	eax, DWORD PTR ___offset$41838[ebp]
	cmp	eax, DWORD PTR tv9323[ebp]
	ja	SHORT $LN102@MatchAt
$LN703@MatchAt:
	mov	eax, DWORD PTR ___offset$41838[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN101@MatchAt
$LN102@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN101@MatchAt:
; Line 3695
	mov	BYTE PTR _success$41843[ebp], 1
$LN100@MatchAt:
; Line 3697
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_utext_getNativeIndex_56
	add	esp, 4
	mov	DWORD PTR tv9346[ebp], eax
	mov	DWORD PTR tv9346[ebp+4], edx
	mov	edx, DWORD PTR tv9346[ebp+4]
	cmp	edx, DWORD PTR _groupEndIdx$41828[ebp+4]
	jl	SHORT $LN98@MatchAt
	jg	SHORT $LN704@MatchAt
	mov	eax, DWORD PTR tv9346[ebp]
	cmp	eax, DWORD PTR _groupEndIdx$41828[ebp]
	jb	SHORT $LN98@MatchAt
$LN704@MatchAt:
; Line 3698
	mov	BYTE PTR _success$41843[ebp], 1
; Line 3699
	jmp	$LN99@MatchAt
$LN98@MatchAt:
; Line 3701
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_getNativeIndex_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv9361[ebp], eax
	mov	DWORD PTR tv9361[ebp+4], edx
	mov	DWORD PTR tv9364[ebp], ecx
	mov	edx, DWORD PTR tv9364[ebp]
	mov	eax, DWORD PTR tv9361[ebp+4]
	cmp	eax, DWORD PTR [edx+100]
	jl	SHORT $LN97@MatchAt
	jg	SHORT $LN705@MatchAt
	mov	ecx, DWORD PTR tv9364[ebp]
	mov	edx, DWORD PTR tv9361[ebp]
	cmp	edx, DWORD PTR [ecx+96]
	jb	SHORT $LN97@MatchAt
$LN705@MatchAt:
; Line 3702
	mov	BYTE PTR _success$41843[ebp], 0
; Line 3703
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3704
	jmp	SHORT $LN99@MatchAt
$LN97@MatchAt:
; Line 3706
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR _captureGroupChar$41849[ebp], eax
; Line 3707
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR _inputChar$41850[ebp], eax
; Line 3708
	mov	eax, DWORD PTR _inputChar$41850[ebp]
	cmp	eax, DWORD PTR _captureGroupChar$41849[ebp]
	je	SHORT $LN96@MatchAt
; Line 3709
	mov	BYTE PTR _success$41843[ebp], 0
; Line 3710
	jmp	SHORT $LN99@MatchAt
$LN96@MatchAt:
; Line 3712
	jmp	$LN100@MatchAt
$LN99@MatchAt:
; Line 3714
	movsx	eax, BYTE PTR _success$41843[ebp]
	test	eax, eax
	je	SHORT $LN95@MatchAt
; Line 3715
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN518@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv3296[ebp], eax
	mov	DWORD PTR tv3296[ebp+4], edx
	jmp	SHORT $LN519@MatchAt
$LN518@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv3296[ebp], eax
	mov	DWORD PTR tv3296[ebp+4], edx
$LN519@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv3296[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv3296[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3716
	jmp	SHORT $LN94@MatchAt
$LN95@MatchAt:
; Line 3717
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN94@MatchAt:
; Line 3720
	jmp	$LN331@MatchAt
$LN93@MatchAt:
; Line 3726
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _opValue$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN520@MatchAt
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 991				; 000003dfH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CK@IOFPLLPJ@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN520@MatchAt:
; Line 3727
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _groupStartIdx$41857[ebp], edx
	mov	eax, DWORD PTR [ecx+eax*8+20]
	mov	DWORD PTR _groupStartIdx$41857[ebp+4], eax
; Line 3728
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _groupEndIdx$41858[ebp], edx
	mov	eax, DWORD PTR [ecx+eax*8+28]
	mov	DWORD PTR _groupEndIdx$41858[ebp+4], eax
; Line 3729
	mov	eax, DWORD PTR _groupStartIdx$41857[ebp+4]
	cmp	eax, DWORD PTR _groupEndIdx$41858[ebp+4]
	jl	SHORT $LN521@MatchAt
	jg	SHORT $LN706@MatchAt
	mov	ecx, DWORD PTR _groupStartIdx$41857[ebp]
	cmp	ecx, DWORD PTR _groupEndIdx$41858[ebp]
	jbe	SHORT $LN521@MatchAt
$LN706@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 994				; 000003e2H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DK@MGMFMKKP@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAS?$AAt?$AAa?$AAr?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAg?$AAr?$AAo?$AAu?$AAp?$AAE?$AAn?$AAd?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN521@MatchAt:
; Line 3730
	cmp	DWORD PTR _groupStartIdx$41857[ebp+4], 0
	jg	SHORT $LN92@MatchAt
	jl	SHORT $LN707@MatchAt
	cmp	DWORD PTR _groupStartIdx$41857[ebp], 0
	jae	SHORT $LN92@MatchAt
$LN707@MatchAt:
; Line 3732
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3733
	jmp	$LN331@MatchAt
$LN92@MatchAt:
; Line 3735
	mov	eax, DWORD PTR _groupStartIdx$41857[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _groupStartIdx$41857[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
; Line 3736
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
; Line 3737
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	lea	ecx, DWORD PTR _captureGroupItr$41862[ebp]
	call	??0CaseFoldingUTextIterator@icu_56@@QAE@AAUUText@@@Z ; icu_56::CaseFoldingUTextIterator::CaseFoldingUTextIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3738
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	lea	ecx, DWORD PTR _inputItr$41863[ebp]
	call	??0CaseFoldingUTextIterator@icu_56@@QAE@AAUUText@@@Z ; icu_56::CaseFoldingUTextIterator::CaseFoldingUTextIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 3744
	mov	BYTE PTR _success$41864[ebp], 1
$LN91@MatchAt:
; Line 3746
	lea	ecx, DWORD PTR _captureGroupItr$41862[ebp]
	call	?inExpansion@CaseFoldingUTextIterator@icu_56@@QAECXZ ; icu_56::CaseFoldingUTextIterator::inExpansion
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN89@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_utext_getNativeIndex_56
	add	esp, 4
	mov	DWORD PTR tv9477[ebp], eax
	mov	DWORD PTR tv9477[ebp+4], edx
	mov	edx, DWORD PTR tv9477[ebp+4]
	cmp	edx, DWORD PTR _groupEndIdx$41858[ebp+4]
	jl	SHORT $LN89@MatchAt
	jg	SHORT $LN708@MatchAt
	mov	eax, DWORD PTR tv9477[ebp]
	cmp	eax, DWORD PTR _groupEndIdx$41858[ebp]
	jb	SHORT $LN89@MatchAt
$LN708@MatchAt:
; Line 3747
	mov	BYTE PTR _success$41864[ebp], 1
; Line 3748
	jmp	$LN90@MatchAt
$LN89@MatchAt:
; Line 3750
	lea	ecx, DWORD PTR _inputItr$41863[ebp]
	call	?inExpansion@CaseFoldingUTextIterator@icu_56@@QAECXZ ; icu_56::CaseFoldingUTextIterator::inExpansion
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN88@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_getNativeIndex_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv9493[ebp], eax
	mov	DWORD PTR tv9493[ebp+4], edx
	mov	DWORD PTR tv9496[ebp], ecx
	mov	edx, DWORD PTR tv9496[ebp]
	mov	eax, DWORD PTR tv9493[ebp+4]
	cmp	eax, DWORD PTR [edx+100]
	jl	SHORT $LN88@MatchAt
	jg	SHORT $LN709@MatchAt
	mov	ecx, DWORD PTR tv9496[ebp]
	mov	edx, DWORD PTR tv9493[ebp]
	cmp	edx, DWORD PTR [ecx+96]
	jb	SHORT $LN88@MatchAt
$LN709@MatchAt:
; Line 3751
	mov	BYTE PTR _success$41864[ebp], 0
; Line 3752
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3753
	jmp	SHORT $LN90@MatchAt
$LN88@MatchAt:
; Line 3755
	lea	ecx, DWORD PTR _captureGroupItr$41862[ebp]
	call	?next@CaseFoldingUTextIterator@icu_56@@QAEHXZ ; icu_56::CaseFoldingUTextIterator::next
	mov	DWORD PTR _captureGroupChar$41870[ebp], eax
; Line 3756
	lea	ecx, DWORD PTR _inputItr$41863[ebp]
	call	?next@CaseFoldingUTextIterator@icu_56@@QAEHXZ ; icu_56::CaseFoldingUTextIterator::next
	mov	DWORD PTR _inputChar$41871[ebp], eax
; Line 3757
	mov	eax, DWORD PTR _inputChar$41871[ebp]
	cmp	eax, DWORD PTR _captureGroupChar$41870[ebp]
	je	SHORT $LN87@MatchAt
; Line 3758
	mov	BYTE PTR _success$41864[ebp], 0
; Line 3759
	jmp	SHORT $LN90@MatchAt
$LN87@MatchAt:
; Line 3761
	jmp	$LN91@MatchAt
$LN90@MatchAt:
; Line 3763
	movsx	eax, BYTE PTR _success$41864[ebp]
	test	eax, eax
	je	SHORT $LN86@MatchAt
	lea	ecx, DWORD PTR _inputItr$41863[ebp]
	call	?inExpansion@CaseFoldingUTextIterator@icu_56@@QAECXZ ; icu_56::CaseFoldingUTextIterator::inExpansion
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN86@MatchAt
; Line 3767
	mov	BYTE PTR _success$41864[ebp], 0
$LN86@MatchAt:
; Line 3770
	movsx	eax, BYTE PTR _success$41864[ebp]
	test	eax, eax
	je	SHORT $LN85@MatchAt
; Line 3771
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN522@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv3392[ebp], eax
	mov	DWORD PTR tv3392[ebp+4], edx
	jmp	SHORT $LN523@MatchAt
$LN522@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv3392[ebp], eax
	mov	DWORD PTR tv3392[ebp+4], edx
$LN523@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv3392[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv3392[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3772
	jmp	SHORT $LN84@MatchAt
$LN85@MatchAt:
; Line 3773
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN84@MatchAt:
; Line 3776
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _inputItr$41863[ebp]
	call	??1CaseFoldingUTextIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUTextIterator::~CaseFoldingUTextIterator
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _captureGroupItr$41862[ebp]
	call	??1CaseFoldingUTextIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUTextIterator::~CaseFoldingUTextIterator
; Line 3777
	jmp	$LN331@MatchAt
$LN83@MatchAt:
; Line 3781
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN524@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _opValue$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN525@MatchAt
$LN524@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1046				; 00000416H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EK@EFDCFDGH@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN525@MatchAt:
; Line 3782
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+16], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+20], edx
; Line 3784
	jmp	$LN331@MatchAt
$LN82@MatchAt:
; Line 3788
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _instrOperandLoc$41881[ebp], ecx
; Line 3789
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 3790
	mov	eax, DWORD PTR _instrOperandLoc$41881[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*8+4]
	and	eax, 0
	mov	DWORD PTR _dataLoc$41883[ebp], edx
; Line 3791
	cmp	DWORD PTR _dataLoc$41883[ebp], 0
	jl	SHORT $LN526@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dataLoc$41883[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN527@MatchAt
$LN526@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1056				; 00000420H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EK@IFAFHMJP@?$AAd?$AAa?$AAt?$AAa?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAa?$AAt?$AAa?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN527@MatchAt:
; Line 3792
	mov	eax, DWORD PTR _dataLoc$41883[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _savedInputIdx$41886[ebp], edx
	mov	eax, DWORD PTR [ecx+eax*8+20]
	mov	DWORD PTR _savedInputIdx$41886[ebp+4], eax
; Line 3793
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv9591[ebp], eax
	mov	ecx, DWORD PTR tv9591[ebp]
	mov	edx, DWORD PTR _savedInputIdx$41886[ebp+4]
	cmp	edx, DWORD PTR [ecx+4]
	jl	SHORT $LN528@MatchAt
	jg	SHORT $LN710@MatchAt
	mov	eax, DWORD PTR tv9591[ebp]
	mov	ecx, DWORD PTR _savedInputIdx$41886[ebp]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN528@MatchAt
$LN710@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1058				; 00000422H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DO@NDALOCFL@?$AAs?$AAa?$AAv?$AAe?$AAd?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN528@MatchAt:
; Line 3794
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv9603[ebp], eax
	mov	ecx, DWORD PTR tv9603[ebp]
	mov	edx, DWORD PTR _savedInputIdx$41886[ebp+4]
	cmp	edx, DWORD PTR [ecx+4]
	jg	SHORT $LN81@MatchAt
	jl	SHORT $LN711@MatchAt
	mov	eax, DWORD PTR tv9603[ebp]
	mov	ecx, DWORD PTR _savedInputIdx$41886[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN81@MatchAt
$LN711@MatchAt:
; Line 3795
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 3796
	jmp	SHORT $LN80@MatchAt
$LN81@MatchAt:
; Line 3797
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN80@MatchAt:
; Line 3800
	jmp	$LN331@MatchAt
$LN79@MatchAt:
; Line 3806
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN529@MatchAt
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN530@MatchAt
$LN529@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1071				; 0000042fH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN530@MatchAt:
; Line 3807
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+156]
	mov	esi, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR [ecx+esi*8], eax
	mov	DWORD PTR [ecx+esi*8+4], edx
; Line 3808
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*8+8], esi
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx*8+12], eax
; Line 3809
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+88], edx
	mov	ecx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+92], ecx
; Line 3810
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+96], edx
	mov	ecx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+100], ecx
; Line 3812
	jmp	$LN331@MatchAt
$LN78@MatchAt:
; Line 3818
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN531@MatchAt
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN532@MatchAt
$LN531@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1083				; 0000043bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN532@MatchAt:
; Line 3819
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stackSize$41897[ebp], eax
; Line 3820
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _newStackSize$41898[ebp], eax
; Line 3821
	mov	eax, DWORD PTR _stackSize$41897[ebp]
	cmp	eax, DWORD PTR _newStackSize$41898[ebp]
	jge	SHORT $LN533@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1086				; 0000043eH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DE@BELDIKCK@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN533@MatchAt:
; Line 3822
	mov	eax, DWORD PTR _stackSize$41897[ebp]
	cmp	eax, DWORD PTR _newStackSize$41898[ebp]
	jle	$LN77@MatchAt
; Line 3826
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?getBuffer@UVector64@icu_56@@QBEPA_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _newStackSize$41898[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 3
	sub	edx, ecx
	mov	DWORD PTR _newFP$41903[ebp], edx
; Line 3828
	mov	DWORD PTR _i$41904[ebp], 0
	jmp	SHORT $LN76@MatchAt
$LN75@MatchAt:
	mov	eax, DWORD PTR _i$41904[ebp]
	add	eax, 1
	mov	DWORD PTR _i$41904[ebp], eax
$LN76@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$41904[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN74@MatchAt
; Line 3829
	mov	eax, DWORD PTR _i$41904[ebp]
	mov	ecx, DWORD PTR _newFP$41903[ebp]
	mov	edx, DWORD PTR _i$41904[ebp]
	mov	esi, DWORD PTR _fp$[ebp]
	mov	edi, DWORD PTR [esi+edx*8]
	mov	DWORD PTR [ecx+eax*8], edi
	mov	edx, DWORD PTR [esi+edx*8+4]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 3830
	jmp	SHORT $LN75@MatchAt
$LN74@MatchAt:
; Line 3831
	mov	eax, DWORD PTR _newFP$41903[ebp]
	mov	DWORD PTR _fp$[ebp], eax
; Line 3832
	mov	esi, esp
	mov	eax, DWORD PTR _newStackSize$41898[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+148]
	call	DWORD PTR __imp_?setSize@UVector64@icu_56@@QAEXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN77@MatchAt:
; Line 3834
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	esi, DWORD PTR [ecx+eax*8+8]
	mov	DWORD PTR [edx], esi
	mov	ecx, DWORD PTR [ecx+eax*8+12]
	mov	DWORD PTR [edx+4], ecx
; Line 3838
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+88], edx
	mov	ecx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+92], ecx
; Line 3839
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+96], edx
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+100], ecx
; Line 3841
	jmp	$LN331@MatchAt
$LN73@MatchAt:
; Line 3847
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv9728[ebp], eax
	mov	DWORD PTR tv9729[ebp], ecx
	mov	edx, DWORD PTR tv9728[ebp]
	mov	eax, DWORD PTR tv9729[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jg	$LN72@MatchAt
	jl	SHORT $LN712@MatchAt
	mov	edx, DWORD PTR tv9728[ebp]
	mov	eax, DWORD PTR tv9729[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jae	$LN72@MatchAt
$LN712@MatchAt:
; Line 3848
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41912[ebp], eax
	mov	DWORD PTR ___offset$41912[ebp+4], edx
	cmp	DWORD PTR ___offset$41912[ebp+4], 0
	jl	SHORT $LN71@MatchAt
	jg	SHORT $LN713@MatchAt
	cmp	DWORD PTR ___offset$41912[ebp], 0
	jb	SHORT $LN71@MatchAt
$LN713@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv9756[ebp], eax
	mov	DWORD PTR tv9756[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41912[ebp+4]
	cmp	edx, DWORD PTR tv9756[ebp+4]
	jg	SHORT $LN71@MatchAt
	jl	SHORT $LN714@MatchAt
	mov	eax, DWORD PTR ___offset$41912[ebp]
	cmp	eax, DWORD PTR tv9756[ebp]
	ja	SHORT $LN71@MatchAt
$LN714@MatchAt:
	mov	eax, DWORD PTR ___offset$41912[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN70@MatchAt
$LN71@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN70@MatchAt:
; Line 3850
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN534@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN534@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv3594[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN535@MatchAt
$LN534@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv3594[ebp], eax
$LN535@MatchAt:
	mov	ecx, DWORD PTR tv3594[ebp]
	mov	DWORD PTR _c$41917[ebp], ecx
; Line 3851
	push	0
	mov	eax, DWORD PTR _c$41917[ebp]
	push	eax
	call	_u_foldCase_56
	add	esp, 8
	cmp	eax, DWORD PTR _opValue$[ebp]
	jne	$LN69@MatchAt
; Line 3852
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN536@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv3616[ebp], eax
	mov	DWORD PTR tv3616[ebp+4], edx
	jmp	SHORT $LN537@MatchAt
$LN536@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv3616[ebp], eax
	mov	DWORD PTR tv3616[ebp+4], edx
$LN537@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv3616[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv3616[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3853
	jmp	$LN331@MatchAt
$LN69@MatchAt:
; Line 3855
	jmp	SHORT $LN68@MatchAt
$LN72@MatchAt:
; Line 3856
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
$LN68@MatchAt:
; Line 3859
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3860
	jmp	$LN331@MatchAt
$LN67@MatchAt:
; Line 3869
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _litText$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _patternString$41922[ebp], edx
; Line 3870
	mov	DWORD PTR _patternStringIdx$41923[ebp], 0
; Line 3872
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _op$[ebp], edx
; Line 3873
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 3874
	mov	eax, DWORD PTR _op$[ebp]
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _opType$[ebp], eax
; Line 3875
	mov	eax, DWORD PTR _op$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _opValue$[ebp], eax
; Line 3876
	cmp	DWORD PTR _opType$[ebp], 5
	je	SHORT $LN538@MatchAt
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1141				; 00000475H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DC@MEDILEED@?$AAo?$AAp?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAS?$AAT?$AAR?$AAI?$AAN?$AAG?$AA_?$AAL?$AAE?$AAN?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN538@MatchAt:
; Line 3877
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR _patternStringLen$41927[ebp], eax
; Line 3882
	mov	BYTE PTR _success$41930[ebp], 1
; Line 3884
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41931[ebp], eax
	mov	DWORD PTR ___offset$41931[ebp+4], edx
	cmp	DWORD PTR ___offset$41931[ebp+4], 0
	jl	SHORT $LN66@MatchAt
	jg	SHORT $LN715@MatchAt
	cmp	DWORD PTR ___offset$41931[ebp], 0
	jb	SHORT $LN66@MatchAt
$LN715@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv9910[ebp], eax
	mov	DWORD PTR tv9910[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41931[ebp+4]
	cmp	edx, DWORD PTR tv9910[ebp+4]
	jg	SHORT $LN66@MatchAt
	jl	SHORT $LN716@MatchAt
	mov	eax, DWORD PTR ___offset$41931[ebp]
	cmp	eax, DWORD PTR tv9910[ebp]
	ja	SHORT $LN66@MatchAt
$LN716@MatchAt:
	mov	eax, DWORD PTR ___offset$41931[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN65@MatchAt
$LN66@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN65@MatchAt:
; Line 3885
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	lea	ecx, DWORD PTR _inputIterator$41936[ebp]
	call	??0CaseFoldingUTextIterator@icu_56@@QAE@AAUUText@@@Z ; icu_56::CaseFoldingUTextIterator::CaseFoldingUTextIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 2
$LN64@MatchAt:
; Line 3886
	mov	eax, DWORD PTR _patternStringIdx$41923[ebp]
	cmp	eax, DWORD PTR _patternStringLen$41927[ebp]
	jge	$LN63@MatchAt
; Line 3887
	lea	ecx, DWORD PTR _inputIterator$41936[ebp]
	call	?inExpansion@CaseFoldingUTextIterator@icu_56@@QAECXZ ; icu_56::CaseFoldingUTextIterator::inExpansion
	movsx	eax, al
	test	eax, eax
	jne	$LN62@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN539@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv3715[ebp], eax
	mov	DWORD PTR tv3715[ebp+4], edx
	jmp	SHORT $LN540@MatchAt
$LN539@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv3715[ebp], eax
	mov	DWORD PTR tv3715[ebp+4], edx
$LN540@MatchAt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv9959[ebp], ecx
	mov	edx, DWORD PTR tv9959[ebp]
	mov	eax, DWORD PTR tv3715[ebp+4]
	cmp	eax, DWORD PTR [edx+100]
	jl	SHORT $LN62@MatchAt
	jg	SHORT $LN717@MatchAt
	mov	ecx, DWORD PTR tv9959[ebp]
	mov	edx, DWORD PTR tv3715[ebp]
	cmp	edx, DWORD PTR [ecx+96]
	jb	SHORT $LN62@MatchAt
$LN717@MatchAt:
; Line 3888
	mov	BYTE PTR _success$41930[ebp], 0
; Line 3889
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 3890
	jmp	$LN63@MatchAt
$LN62@MatchAt:
; Line 3892
	mov	eax, DWORD PTR _patternStringIdx$41923[ebp]
	mov	ecx, DWORD PTR _patternString$41922[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _cPattern$41928[ebp], edx
	mov	eax, DWORD PTR _patternStringIdx$41923[ebp]
	add	eax, 1
	mov	DWORD PTR _patternStringIdx$41923[ebp], eax
	mov	eax, DWORD PTR _cPattern$41928[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN61@MatchAt
	mov	eax, DWORD PTR _patternStringIdx$41923[ebp]
	cmp	eax, DWORD PTR _patternStringLen$41927[ebp]
	je	SHORT $LN61@MatchAt
	mov	eax, DWORD PTR _patternStringIdx$41923[ebp]
	mov	ecx, DWORD PTR _patternString$41922[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$41942[ebp], dx
	movzx	eax, WORD PTR ___c2$41942[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN61@MatchAt
	mov	eax, DWORD PTR _patternStringIdx$41923[ebp]
	add	eax, 1
	mov	DWORD PTR _patternStringIdx$41923[ebp], eax
	mov	eax, DWORD PTR _cPattern$41928[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$41942[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _cPattern$41928[ebp], edx
$LN61@MatchAt:
; Line 3893
	lea	ecx, DWORD PTR _inputIterator$41936[ebp]
	call	?next@CaseFoldingUTextIterator@icu_56@@QAEHXZ ; icu_56::CaseFoldingUTextIterator::next
	mov	DWORD PTR _cText$41929[ebp], eax
; Line 3894
	mov	eax, DWORD PTR _cText$41929[ebp]
	cmp	eax, DWORD PTR _cPattern$41928[ebp]
	je	SHORT $LN59@MatchAt
; Line 3895
	mov	BYTE PTR _success$41930[ebp], 0
; Line 3896
	jmp	SHORT $LN63@MatchAt
$LN59@MatchAt:
; Line 3898
	jmp	$LN64@MatchAt
$LN63@MatchAt:
; Line 3899
	lea	ecx, DWORD PTR _inputIterator$41936[ebp]
	call	?inExpansion@CaseFoldingUTextIterator@icu_56@@QAECXZ ; icu_56::CaseFoldingUTextIterator::inExpansion
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN58@MatchAt
; Line 3900
	mov	BYTE PTR _success$41930[ebp], 0
$LN58@MatchAt:
; Line 3903
	movsx	eax, BYTE PTR _success$41930[ebp]
	test	eax, eax
	je	SHORT $LN57@MatchAt
; Line 3904
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN541@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv3762[ebp], eax
	mov	DWORD PTR tv3762[ebp+4], edx
	jmp	SHORT $LN542@MatchAt
$LN541@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv3762[ebp], eax
	mov	DWORD PTR tv3762[ebp+4], edx
$LN542@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv3762[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv3762[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 3905
	jmp	SHORT $LN56@MatchAt
$LN57@MatchAt:
; Line 3906
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN56@MatchAt:
; Line 3908
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inputIterator$41936[ebp]
	call	??1CaseFoldingUTextIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUTextIterator::~CaseFoldingUTextIterator
; Line 3910
	jmp	$LN331@MatchAt
$LN55@MatchAt:
; Line 3917
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN543@MatchAt
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN544@MatchAt
$LN543@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1182				; 0000049eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN544@MatchAt:
; Line 3918
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+156]
	mov	esi, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR [ecx+esi*8], eax
	mov	DWORD PTR [ecx+esi*8+4], edx
; Line 3919
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*8+8], esi
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx*8+12], eax
; Line 3921
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR [ecx+edx*8+16], -1
	mov	DWORD PTR [ecx+edx*8+20], -1
; Line 3924
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+96]
	mov	DWORD PTR [ecx+edx*8+24], esi
	mov	eax, DWORD PTR [eax+100]
	mov	DWORD PTR [ecx+edx*8+28], eax
; Line 3925
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+96], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+100], ecx
; Line 3927
	jmp	$LN331@MatchAt
$LN54@MatchAt:
; Line 3937
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _minML$41954[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 3938
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _maxML$41956[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 3939
	mov	eax, DWORD PTR _minML$41954[ebp]
	cmp	eax, DWORD PTR _maxML$41956[ebp]
	jle	SHORT $LN545@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1204				; 000004b4H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BO@GDLEIHOB@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAM?$AAL?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN545@MatchAt:
; Line 3940
	cmp	DWORD PTR _minML$41954[ebp], 0
	jge	SHORT $LN546@MatchAt
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1205				; 000004b5H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BG@FKPOJNM@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN546@MatchAt:
; Line 3943
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN547@MatchAt
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN548@MatchAt
$LN547@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1208				; 000004b8H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN548@MatchAt:
; Line 3944
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+16]
	mov	DWORD PTR _lbStartIdx$41963[ebp], eax
; Line 3945
	mov	eax, DWORD PTR _lbStartIdx$41963[ebp]
	mov	DWORD PTR tv10132[ebp], eax
	mov	ecx, DWORD PTR tv10132[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jg	SHORT $LN53@MatchAt
	jl	SHORT $LN718@MatchAt
	mov	edx, DWORD PTR tv10132[ebp]
	cmp	DWORD PTR [edx], 0
	jae	SHORT $LN53@MatchAt
$LN718@MatchAt:
; Line 3947
	mov	eax, DWORD PTR _minML$41954[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+4]
	sbb	eax, edx
	mov	ecx, DWORD PTR _lbStartIdx$41963[ebp]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], eax
; Line 3948
	jmp	$LN52@MatchAt
$LN53@MatchAt:
; Line 3951
	mov	eax, DWORD PTR _lbStartIdx$41963[ebp]
	mov	DWORD PTR tv10153[ebp], eax
	mov	ecx, DWORD PTR tv10153[ebp]
	mov	edx, DWORD PTR tv10153[ebp]
	mov	eax, DWORD PTR [ecx]
	or	eax, DWORD PTR [edx+4]
	jne	SHORT $LN51@MatchAt
; Line 3952
	mov	eax, DWORD PTR _lbStartIdx$41963[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _lbStartIdx$41963[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 3953
	jmp	$LN52@MatchAt
$LN51@MatchAt:
; Line 3954
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _lbStartIdx$41963[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$41968[ebp], eax
	mov	DWORD PTR ___offset$41968[ebp+4], edx
	cmp	DWORD PTR ___offset$41968[ebp+4], 0
	jl	SHORT $LN49@MatchAt
	jg	SHORT $LN719@MatchAt
	cmp	DWORD PTR ___offset$41968[ebp], 0
	jb	SHORT $LN49@MatchAt
$LN719@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv10186[ebp], eax
	mov	DWORD PTR tv10186[ebp+4], edx
	mov	edx, DWORD PTR ___offset$41968[ebp+4]
	cmp	edx, DWORD PTR tv10186[ebp+4]
	jg	SHORT $LN49@MatchAt
	jl	SHORT $LN720@MatchAt
	mov	eax, DWORD PTR ___offset$41968[ebp]
	cmp	eax, DWORD PTR tv10186[ebp]
	ja	SHORT $LN49@MatchAt
$LN720@MatchAt:
	mov	eax, DWORD PTR ___offset$41968[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN48@MatchAt
$LN49@MatchAt:
	mov	eax, DWORD PTR _lbStartIdx$41963[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN48@MatchAt:
; Line 3955
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN549@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN549@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv3878[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv3878[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv3878[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv3885[ebp], edx
	jmp	SHORT $LN550@MatchAt
$LN549@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv3885[ebp], eax
$LN550@MatchAt:
; Line 3956
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN551@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv3903[ebp], eax
	mov	DWORD PTR tv3903[ebp+4], edx
	jmp	SHORT $LN552@MatchAt
$LN551@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv3903[ebp], eax
	mov	DWORD PTR tv3903[ebp+4], edx
$LN552@MatchAt:
	mov	ecx, DWORD PTR _lbStartIdx$41963[ebp]
	mov	edx, DWORD PTR tv3903[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv3903[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN52@MatchAt:
; Line 3960
	mov	eax, DWORD PTR _lbStartIdx$41963[ebp]
	mov	DWORD PTR tv10249[ebp], eax
	mov	ecx, DWORD PTR tv10249[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN46@MatchAt
	jg	SHORT $LN721@MatchAt
	mov	edx, DWORD PTR tv10249[ebp]
	cmp	DWORD PTR [edx], 0
	jb	SHORT $LN46@MatchAt
$LN721@MatchAt:
	mov	eax, DWORD PTR _maxML$41956[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+4]
	sbb	eax, edx
	mov	ecx, DWORD PTR _lbStartIdx$41963[ebp]
	mov	DWORD PTR tv10268[ebp], ecx
	mov	DWORD PTR tv10269[ebp], esi
	mov	DWORD PTR tv10269[ebp+4], eax
	mov	edx, DWORD PTR tv10268[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR tv10269[ebp+4]
	jg	$LN47@MatchAt
	jl	SHORT $LN46@MatchAt
	mov	ecx, DWORD PTR tv10268[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv10269[ebp]
	jae	$LN47@MatchAt
$LN46@MatchAt:
; Line 3964
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3965
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _restoreInputLen$41977[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	mov	DWORD PTR _restoreInputLen$41977[ebp+4], ecx
; Line 3966
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv10291[ebp], eax
	mov	ecx, DWORD PTR tv10291[ebp]
	mov	edx, DWORD PTR _restoreInputLen$41977[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jg	SHORT $LN553@MatchAt
	jl	SHORT $LN723@MatchAt
	mov	eax, DWORD PTR tv10291[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$41977[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jae	SHORT $LN553@MatchAt
$LN723@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1231				; 000004cfH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EA@BLNKBNIJ@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN553@MatchAt:
; Line 3967
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv10303[ebp], eax
	mov	ecx, DWORD PTR tv10303[ebp]
	mov	edx, DWORD PTR _restoreInputLen$41977[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jl	SHORT $LN554@MatchAt
	jg	SHORT $LN724@MatchAt
	mov	eax, DWORD PTR tv10303[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$41977[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN554@MatchAt
$LN724@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1232				; 000004d0H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EA@MIPOIOOI@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN554@MatchAt:
; Line 3968
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$41977[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	edx, DWORD PTR _restoreInputLen$41977[ebp+4]
	mov	DWORD PTR [eax+100], edx
; Line 3969
	jmp	$LN331@MatchAt
$LN47@MatchAt:
; Line 3974
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 3
	mov	eax, DWORD PTR [ecx+12]
	sbb	eax, 0
	push	eax
	push	edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 3975
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _lbStartIdx$41963[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 3977
	jmp	$LN331@MatchAt
$LN45@MatchAt:
; Line 3982
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN555@MatchAt
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN556@MatchAt
$LN555@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1247				; 000004dfH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN556@MatchAt:
; Line 3983
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv10344[ebp], eax
	mov	DWORD PTR tv10345[ebp], ecx
	mov	edx, DWORD PTR tv10344[ebp]
	mov	eax, DWORD PTR tv10345[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN725@MatchAt
	mov	edx, DWORD PTR tv10344[ebp]
	mov	eax, DWORD PTR tv10345[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN44@MatchAt
$LN725@MatchAt:
; Line 3989
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 3990
	jmp	$LN331@MatchAt
$LN44@MatchAt:
; Line 3996
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _originalInputLen$41986[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	mov	DWORD PTR _originalInputLen$41986[ebp+4], ecx
; Line 3997
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv10366[ebp], eax
	mov	ecx, DWORD PTR tv10366[ebp]
	mov	edx, DWORD PTR _originalInputLen$41986[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jg	SHORT $LN557@MatchAt
	jl	SHORT $LN726@MatchAt
	mov	eax, DWORD PTR tv10366[ebp]
	mov	ecx, DWORD PTR _originalInputLen$41986[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jae	SHORT $LN557@MatchAt
$LN726@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1262				; 000004eeH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@NBCFLCDA@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN557@MatchAt:
; Line 3998
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv10378[ebp], eax
	mov	ecx, DWORD PTR tv10378[ebp]
	mov	edx, DWORD PTR _originalInputLen$41986[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jl	SHORT $LN558@MatchAt
	jg	SHORT $LN727@MatchAt
	mov	eax, DWORD PTR tv10378[ebp]
	mov	ecx, DWORD PTR _originalInputLen$41986[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN558@MatchAt
$LN727@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1263				; 000004efH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@CABCBFB@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN558@MatchAt:
; Line 3999
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _originalInputLen$41986[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	edx, DWORD PTR _originalInputLen$41986[ebp+4]
	mov	DWORD PTR [eax+100], edx
; Line 4001
	jmp	$LN331@MatchAt
$LN43@MatchAt:
; Line 4010
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _minML$41992[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 4011
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _maxML$41994[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 4012
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _continueLoc$41996[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 4013
	mov	eax, DWORD PTR _continueLoc$41996[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _continueLoc$41996[ebp], eax
; Line 4014
	mov	eax, DWORD PTR _minML$41992[ebp]
	cmp	eax, DWORD PTR _maxML$41994[ebp]
	jle	SHORT $LN559@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1279				; 000004ffH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BO@GDLEIHOB@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAM?$AAL?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN559@MatchAt:
; Line 4015
	cmp	DWORD PTR _minML$41992[ebp], 0
	jge	SHORT $LN560@MatchAt
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1280				; 00000500H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BG@FKPOJNM@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN560@MatchAt:
; Line 4016
	mov	eax, DWORD PTR _continueLoc$41996[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv10485[ebp], eax
	mov	DWORD PTR tv10485[ebp+4], edx
	mov	DWORD PTR tv10488[ebp], ecx
	mov	edx, DWORD PTR tv10488[ebp]
	mov	eax, DWORD PTR tv10485[ebp+4]
	cmp	eax, DWORD PTR [edx+12]
	jg	SHORT $LN561@MatchAt
	jl	SHORT $LN728@MatchAt
	mov	ecx, DWORD PTR tv10488[ebp]
	mov	edx, DWORD PTR tv10485[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN561@MatchAt
$LN728@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1281				; 00000501H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DE@HBDCPLHI@?$AAc?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN561@MatchAt:
; Line 4019
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN562@MatchAt
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN563@MatchAt
$LN562@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1284				; 00000504H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN563@MatchAt:
; Line 4020
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+16]
	mov	DWORD PTR _lbStartIdx$42003[ebp], eax
; Line 4021
	mov	eax, DWORD PTR _lbStartIdx$42003[ebp]
	mov	DWORD PTR tv10508[ebp], eax
	mov	ecx, DWORD PTR tv10508[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jg	SHORT $LN42@MatchAt
	jl	SHORT $LN729@MatchAt
	mov	edx, DWORD PTR tv10508[ebp]
	cmp	DWORD PTR [edx], 0
	jae	SHORT $LN42@MatchAt
$LN729@MatchAt:
; Line 4023
	mov	eax, DWORD PTR _minML$41992[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+4]
	sbb	eax, edx
	mov	ecx, DWORD PTR _lbStartIdx$42003[ebp]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], eax
; Line 4024
	jmp	$LN41@MatchAt
$LN42@MatchAt:
; Line 4027
	mov	eax, DWORD PTR _lbStartIdx$42003[ebp]
	mov	DWORD PTR tv10529[ebp], eax
	mov	ecx, DWORD PTR tv10529[ebp]
	mov	edx, DWORD PTR tv10529[ebp]
	mov	eax, DWORD PTR [ecx]
	or	eax, DWORD PTR [edx+4]
	jne	SHORT $LN40@MatchAt
; Line 4028
	mov	eax, DWORD PTR _lbStartIdx$42003[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _lbStartIdx$42003[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 4029
	jmp	$LN41@MatchAt
$LN40@MatchAt:
; Line 4030
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _lbStartIdx$42003[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$42008[ebp], eax
	mov	DWORD PTR ___offset$42008[ebp+4], edx
	cmp	DWORD PTR ___offset$42008[ebp+4], 0
	jl	SHORT $LN38@MatchAt
	jg	SHORT $LN730@MatchAt
	cmp	DWORD PTR ___offset$42008[ebp], 0
	jb	SHORT $LN38@MatchAt
$LN730@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv10562[ebp], eax
	mov	DWORD PTR tv10562[ebp+4], edx
	mov	edx, DWORD PTR ___offset$42008[ebp+4]
	cmp	edx, DWORD PTR tv10562[ebp+4]
	jg	SHORT $LN38@MatchAt
	jl	SHORT $LN731@MatchAt
	mov	eax, DWORD PTR ___offset$42008[ebp]
	cmp	eax, DWORD PTR tv10562[ebp]
	ja	SHORT $LN38@MatchAt
$LN731@MatchAt:
	mov	eax, DWORD PTR ___offset$42008[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN37@MatchAt
$LN38@MatchAt:
	mov	eax, DWORD PTR _lbStartIdx$42003[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN37@MatchAt:
; Line 4031
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN564@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN564@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv4071[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv4071[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv4071[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv4078[ebp], edx
	jmp	SHORT $LN565@MatchAt
$LN564@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv4078[ebp], eax
$LN565@MatchAt:
; Line 4032
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN566@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv4096[ebp], eax
	mov	DWORD PTR tv4096[ebp+4], edx
	jmp	SHORT $LN567@MatchAt
$LN566@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv4096[ebp], eax
	mov	DWORD PTR tv4096[ebp+4], edx
$LN567@MatchAt:
	mov	ecx, DWORD PTR _lbStartIdx$42003[ebp]
	mov	edx, DWORD PTR tv4096[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv4096[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN41@MatchAt:
; Line 4036
	mov	eax, DWORD PTR _lbStartIdx$42003[ebp]
	mov	DWORD PTR tv10625[ebp], eax
	mov	ecx, DWORD PTR tv10625[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN35@MatchAt
	jg	SHORT $LN732@MatchAt
	mov	edx, DWORD PTR tv10625[ebp]
	cmp	DWORD PTR [edx], 0
	jb	SHORT $LN35@MatchAt
$LN732@MatchAt:
	mov	eax, DWORD PTR _maxML$41994[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+4]
	sbb	eax, edx
	mov	ecx, DWORD PTR _lbStartIdx$42003[ebp]
	mov	DWORD PTR tv10644[ebp], ecx
	mov	DWORD PTR tv10645[ebp], esi
	mov	DWORD PTR tv10645[ebp+4], eax
	mov	edx, DWORD PTR tv10644[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR tv10645[ebp+4]
	jg	$LN36@MatchAt
	jl	SHORT $LN35@MatchAt
	mov	ecx, DWORD PTR tv10644[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv10645[ebp]
	jae	$LN36@MatchAt
$LN35@MatchAt:
; Line 4040
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _restoreInputLen$42016[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	mov	DWORD PTR _restoreInputLen$42016[ebp+4], ecx
; Line 4041
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv10661[ebp], eax
	mov	ecx, DWORD PTR tv10661[ebp]
	mov	edx, DWORD PTR _restoreInputLen$42016[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jg	SHORT $LN568@MatchAt
	jl	SHORT $LN734@MatchAt
	mov	eax, DWORD PTR tv10661[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$42016[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jae	SHORT $LN568@MatchAt
$LN734@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1306				; 0000051aH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EA@BLNKBNIJ@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN568@MatchAt:
; Line 4042
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv10673[ebp], eax
	mov	ecx, DWORD PTR tv10673[ebp]
	mov	edx, DWORD PTR _restoreInputLen$42016[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jl	SHORT $LN569@MatchAt
	jg	SHORT $LN735@MatchAt
	mov	eax, DWORD PTR tv10673[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$42016[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN569@MatchAt
$LN735@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1307				; 0000051bH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EA@MIPOIOOI@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN569@MatchAt:
; Line 4043
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$42016[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	edx, DWORD PTR _restoreInputLen$42016[ebp+4]
	mov	DWORD PTR [eax+100], edx
; Line 4044
	mov	eax, DWORD PTR _continueLoc$41996[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 4045
	jmp	$LN331@MatchAt
$LN36@MatchAt:
; Line 4050
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	sbb	eax, 0
	push	eax
	push	edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 4051
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _lbStartIdx$42003[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 4053
	jmp	$LN331@MatchAt
$LN34@MatchAt:
; Line 4058
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN570@MatchAt
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN571@MatchAt
$LN570@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1323				; 0000052bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN571@MatchAt:
; Line 4059
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv10722[ebp], eax
	mov	DWORD PTR tv10723[ebp], ecx
	mov	edx, DWORD PTR tv10722[ebp]
	mov	eax, DWORD PTR tv10723[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN736@MatchAt
	mov	edx, DWORD PTR tv10722[ebp]
	mov	eax, DWORD PTR tv10723[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN33@MatchAt
$LN736@MatchAt:
; Line 4065
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4066
	jmp	$LN331@MatchAt
$LN33@MatchAt:
; Line 4075
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _originalInputLen$42023[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	mov	DWORD PTR _originalInputLen$42023[ebp+4], ecx
; Line 4076
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv10744[ebp], eax
	mov	ecx, DWORD PTR tv10744[ebp]
	mov	edx, DWORD PTR _originalInputLen$42023[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jg	SHORT $LN572@MatchAt
	jl	SHORT $LN737@MatchAt
	mov	eax, DWORD PTR tv10744[ebp]
	mov	ecx, DWORD PTR _originalInputLen$42023[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jae	SHORT $LN572@MatchAt
$LN737@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1341				; 0000053dH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@NBCFLCDA@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN572@MatchAt:
; Line 4077
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv10756[ebp], eax
	mov	ecx, DWORD PTR tv10756[ebp]
	mov	edx, DWORD PTR _originalInputLen$42023[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jl	SHORT $LN573@MatchAt
	jg	SHORT $LN738@MatchAt
	mov	eax, DWORD PTR tv10756[ebp]
	mov	ecx, DWORD PTR _originalInputLen$42023[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN573@MatchAt
$LN738@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1342				; 0000053eH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@CABCBFB@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN573@MatchAt:
; Line 4078
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _originalInputLen$42023[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	edx, DWORD PTR _originalInputLen$42023[ebp+4]
	mov	DWORD PTR [eax+100], edx
; Line 4082
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN574@MatchAt
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN575@MatchAt
$LN574@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1347				; 00000543H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN575@MatchAt:
; Line 4083
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _newStackSize$42027[ebp], eax
; Line 4084
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR _newStackSize$42027[ebp]
	jg	SHORT $LN576@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1349				; 00000545H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DM@OBGLDKOO@?$AAf?$AAS?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN576@MatchAt:
; Line 4085
	mov	esi, esp
	mov	eax, DWORD PTR _newStackSize$42027[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+148]
	call	DWORD PTR __imp_?setSize@UVector64@icu_56@@QAEXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4089
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4091
	jmp	$LN331@MatchAt
$LN32@MatchAt:
; Line 4100
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN577@MatchAt
	mov	esi, esp
	mov	ecx, DWORD PTR _sets$[ebp]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _opValue$[ebp], eax
	jl	SHORT $LN578@MatchAt
$LN577@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1365				; 00000555H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EM@LLNCNHEM@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAs?$AAe?$AAt?$AAs?$AA?9?$AA?$DO?$AAs@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN578@MatchAt:
; Line 4101
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR _s8$42034[ebp], edx
; Line 4102
	mov	esi, esp
	mov	eax, DWORD PTR _opValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$[ebp]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$42035[ebp], eax
; Line 4106
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ix$42037[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ix$42037[ebp+4], edx
; Line 4107
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _ix$42037[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _ix$42037[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$42038[ebp], edx
	mov	DWORD PTR ___offset$42038[ebp+4], eax
	cmp	DWORD PTR ___offset$42038[ebp+4], 0
	jl	SHORT $LN31@MatchAt
	jg	SHORT $LN739@MatchAt
	cmp	DWORD PTR ___offset$42038[ebp], 0
	jb	SHORT $LN31@MatchAt
$LN739@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv10830[ebp], eax
	mov	DWORD PTR tv10830[ebp+4], edx
	mov	edx, DWORD PTR ___offset$42038[ebp+4]
	cmp	edx, DWORD PTR tv10830[ebp+4]
	jg	SHORT $LN31@MatchAt
	jl	SHORT $LN740@MatchAt
	mov	eax, DWORD PTR ___offset$42038[ebp]
	cmp	eax, DWORD PTR tv10830[ebp]
	ja	SHORT $LN31@MatchAt
$LN740@MatchAt:
	mov	eax, DWORD PTR ___offset$42038[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN29@MatchAt
$LN31@MatchAt:
	mov	eax, DWORD PTR _ix$42037[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ix$42037[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN29@MatchAt:
; Line 4109
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv10845[ebp], eax
	mov	ecx, DWORD PTR tv10845[ebp]
	mov	edx, DWORD PTR _ix$42037[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN27@MatchAt
	jg	SHORT $LN741@MatchAt
	mov	eax, DWORD PTR tv10845[ebp]
	mov	ecx, DWORD PTR _ix$42037[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN27@MatchAt
$LN741@MatchAt:
; Line 4110
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4111
	jmp	$LN28@MatchAt
$LN27@MatchAt:
; Line 4113
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN579@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN579@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv4257[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN580@MatchAt
$LN579@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv4257[ebp], eax
$LN580@MatchAt:
	mov	ecx, DWORD PTR tv4257[ebp]
	mov	DWORD PTR _c$42047[ebp], ecx
; Line 4114
	cmp	DWORD PTR _c$42047[ebp], 256		; 00000100H
	jge	SHORT $LN26@MatchAt
; Line 4115
	mov	eax, DWORD PTR _c$42047[ebp]
	push	eax
	mov	ecx, DWORD PTR _s8$42034[ebp]
	call	?contains@Regex8BitSet@icu_56@@QAECH@Z	; icu_56::Regex8BitSet::contains
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@MatchAt
; Line 4116
	jmp	$LN28@MatchAt
$LN25@MatchAt:
; Line 4118
	jmp	SHORT $LN24@MatchAt
$LN26@MatchAt:
; Line 4119
	mov	esi, esp
	mov	eax, DWORD PTR _c$42047[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$42035[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _s$42035[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@MatchAt
; Line 4120
	jmp	$LN28@MatchAt
$LN24@MatchAt:
; Line 4123
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN581@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv4292[ebp], eax
	mov	DWORD PTR tv4292[ebp+4], edx
	jmp	SHORT $LN582@MatchAt
$LN581@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv4292[ebp], eax
	mov	DWORD PTR tv4292[ebp+4], edx
$LN582@MatchAt:
	mov	ecx, DWORD PTR tv4292[ebp]
	mov	DWORD PTR _ix$42037[ebp], ecx
	mov	edx, DWORD PTR tv4292[ebp+4]
	mov	DWORD PTR _ix$42037[ebp+4], edx
; Line 4124
	jmp	$LN29@MatchAt
$LN28@MatchAt:
; Line 4128
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv10905[ebp], eax
	mov	ecx, DWORD PTR tv10905[ebp]
	mov	edx, DWORD PTR _ix$42037[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN22@MatchAt
	mov	eax, DWORD PTR tv10905[ebp]
	mov	ecx, DWORD PTR _ix$42037[ebp+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN22@MatchAt
; Line 4129
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 4130
	jmp	$LN331@MatchAt
$LN22@MatchAt:
; Line 4136
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _loopcOp$42053[ebp], edx
; Line 4137
	mov	eax, DWORD PTR _loopcOp$42053[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 51					; 00000033H
	je	SHORT $LN583@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1402				; 0000057aH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FE@IOGLBMKK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAl?$AAo?$AAo?$AAp?$AAc?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN583@MatchAt:
; Line 4138
	mov	eax, DWORD PTR _loopcOp$42053[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _stackLoc$42058[ebp], eax
; Line 4139
	jl	SHORT $LN584@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stackLoc$42058[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN585@MatchAt
$LN584@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1404				; 0000057cH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@CJAHANAB@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN585@MatchAt:
; Line 4140
	mov	eax, DWORD PTR _stackLoc$42058[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+16], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+20], edx
; Line 4141
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _ix$42037[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ix$42037[ebp+4]
	mov	DWORD PTR [eax+4], edx
; Line 4146
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 4147
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 4149
	jmp	$LN331@MatchAt
$LN21@MatchAt:
; Line 4160
	mov	eax, DWORD PTR _opValue$[ebp]
	and	eax, 1
	je	SHORT $LN20@MatchAt
; Line 4162
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _ix$42062[ebp], ecx
	mov	edx, DWORD PTR [eax+100]
	mov	DWORD PTR _ix$42062[ebp+4], edx
; Line 4163
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4164
	jmp	$LN19@MatchAt
$LN20@MatchAt:
; Line 4167
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ix$42062[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ix$42062[ebp+4], edx
; Line 4168
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _ix$42062[ebp]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _ix$42062[ebp+4]
	sbb	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$42065[ebp], edx
	mov	DWORD PTR ___offset$42065[ebp+4], eax
	cmp	DWORD PTR ___offset$42065[ebp+4], 0
	jl	SHORT $LN18@MatchAt
	jg	SHORT $LN742@MatchAt
	cmp	DWORD PTR ___offset$42065[ebp], 0
	jb	SHORT $LN18@MatchAt
$LN742@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv11004[ebp], eax
	mov	DWORD PTR tv11004[ebp+4], edx
	mov	edx, DWORD PTR ___offset$42065[ebp+4]
	cmp	edx, DWORD PTR tv11004[ebp+4]
	jg	SHORT $LN18@MatchAt
	jl	SHORT $LN743@MatchAt
	mov	eax, DWORD PTR ___offset$42065[ebp]
	cmp	eax, DWORD PTR tv11004[ebp]
	ja	SHORT $LN18@MatchAt
$LN743@MatchAt:
	mov	eax, DWORD PTR ___offset$42065[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN16@MatchAt
$LN18@MatchAt:
	mov	eax, DWORD PTR _ix$42062[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ix$42062[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN16@MatchAt:
; Line 4170
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv11019[ebp], eax
	mov	ecx, DWORD PTR tv11019[ebp]
	mov	edx, DWORD PTR _ix$42062[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN14@MatchAt
	jg	SHORT $LN744@MatchAt
	mov	eax, DWORD PTR tv11019[ebp]
	mov	ecx, DWORD PTR _ix$42062[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN14@MatchAt
$LN744@MatchAt:
; Line 4171
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4172
	jmp	$LN19@MatchAt
$LN14@MatchAt:
; Line 4174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN586@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN586@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [edx+48]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv4381[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+40], edx
	jmp	SHORT $LN587@MatchAt
$LN586@MatchAt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR tv4381[ebp], eax
$LN587@MatchAt:
	mov	ecx, DWORD PTR tv4381[ebp]
	mov	DWORD PTR _c$42074[ebp], ecx
; Line 4175
	mov	eax, DWORD PTR _c$42074[ebp]
	and	eax, 127				; 0000007fH
	cmp	eax, 41					; 00000029H
	jg	SHORT $LN13@MatchAt
; Line 4178
	cmp	DWORD PTR _c$42074[ebp], 10		; 0000000aH
	je	SHORT $LN11@MatchAt
	mov	eax, DWORD PTR _opValue$[ebp]
	and	eax, 2
	jne	SHORT $LN13@MatchAt
	mov	eax, DWORD PTR _c$42074[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@MatchAt
$LN11@MatchAt:
; Line 4180
	jmp	$LN19@MatchAt
$LN13@MatchAt:
; Line 4183
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN588@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv4408[ebp], eax
	mov	DWORD PTR tv4408[ebp+4], edx
	jmp	SHORT $LN589@MatchAt
$LN588@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv4408[ebp], eax
	mov	DWORD PTR tv4408[ebp+4], edx
$LN589@MatchAt:
	mov	ecx, DWORD PTR tv4408[ebp]
	mov	DWORD PTR _ix$42062[ebp], ecx
	mov	edx, DWORD PTR tv4408[ebp+4]
	mov	DWORD PTR _ix$42062[ebp+4], edx
; Line 4184
	jmp	$LN16@MatchAt
$LN19@MatchAt:
; Line 4189
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv11075[ebp], eax
	mov	ecx, DWORD PTR tv11075[ebp]
	mov	edx, DWORD PTR _ix$42062[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN10@MatchAt
	mov	eax, DWORD PTR tv11075[ebp]
	mov	ecx, DWORD PTR _ix$42062[ebp+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN10@MatchAt
; Line 4190
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 4191
	jmp	$LN331@MatchAt
$LN10@MatchAt:
; Line 4197
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _loopcOp$42079[ebp], edx
; Line 4198
	mov	eax, DWORD PTR _loopcOp$42079[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 51					; 00000033H
	je	SHORT $LN590@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1463				; 000005b7H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FE@IOGLBMKK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAl?$AAo?$AAo?$AAp?$AAc?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN590@MatchAt:
; Line 4199
	mov	eax, DWORD PTR _loopcOp$42079[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _stackLoc$42083[ebp], eax
; Line 4200
	jl	SHORT $LN591@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stackLoc$42083[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN592@MatchAt
$LN591@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1465				; 000005b9H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@CJAHANAB@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN592@MatchAt:
; Line 4201
	mov	eax, DWORD PTR _stackLoc$42083[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+16], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+20], edx
; Line 4202
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _ix$42062[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ix$42062[ebp+4]
	mov	DWORD PTR [eax+4], edx
; Line 4207
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 4208
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 4210
	jmp	$LN331@MatchAt
$LN9@MatchAt:
; Line 4215
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN593@MatchAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _opValue$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN594@MatchAt
$LN593@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1480				; 000005c8H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@KAEJIOLK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DM?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN594@MatchAt:
; Line 4216
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _backSearchIndex$[ebp], edx
	mov	eax, DWORD PTR [ecx+eax*8+20]
	mov	DWORD PTR _backSearchIndex$[ebp+4], eax
; Line 4217
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv11161[ebp], eax
	mov	ecx, DWORD PTR tv11161[ebp]
	mov	edx, DWORD PTR _backSearchIndex$[ebp+4]
	cmp	edx, DWORD PTR [ecx+4]
	jl	SHORT $LN595@MatchAt
	jg	SHORT $LN745@MatchAt
	mov	eax, DWORD PTR tv11161[ebp]
	mov	ecx, DWORD PTR _backSearchIndex$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN595@MatchAt
$LN745@MatchAt:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	edx, 1482				; 000005caH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@IFFAOBGA@?$AAb?$AAa?$AAc?$AAk?$AAS?$AAe?$AAa?$AAr?$AAc?$AAh?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN595@MatchAt:
; Line 4218
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv11173[ebp], eax
	mov	ecx, DWORD PTR tv11173[ebp]
	mov	edx, DWORD PTR _backSearchIndex$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN8@MatchAt
	mov	eax, DWORD PTR tv11173[ebp]
	mov	ecx, DWORD PTR _backSearchIndex$[ebp+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN8@MatchAt
; Line 4222
	jmp	$LN331@MatchAt
$LN8@MatchAt:
; Line 4229
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv11180[ebp], eax
	mov	ecx, DWORD PTR tv11180[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jg	SHORT $LN596@MatchAt
	jl	SHORT $LN746@MatchAt
	mov	edx, DWORD PTR tv11180[ebp]
	cmp	DWORD PTR [edx], 0
	ja	SHORT $LN596@MatchAt
$LN746@MatchAt:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	eax, 1494				; 000005d6H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CE@MEMALIDK@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN596@MatchAt:
; Line 4230
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR ___offset$42093[ebp], eax
	mov	DWORD PTR ___offset$42093[ebp+4], edx
	cmp	DWORD PTR ___offset$42093[ebp+4], 0
	jl	SHORT $LN7@MatchAt
	jg	SHORT $LN747@MatchAt
	cmp	DWORD PTR ___offset$42093[ebp], 0
	jb	SHORT $LN7@MatchAt
$LN747@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+28]
	cdq
	mov	DWORD PTR tv11207[ebp], eax
	mov	DWORD PTR tv11207[ebp+4], edx
	mov	edx, DWORD PTR ___offset$42093[ebp+4]
	cmp	edx, DWORD PTR tv11207[ebp+4]
	jg	SHORT $LN7@MatchAt
	jl	SHORT $LN748@MatchAt
	mov	eax, DWORD PTR ___offset$42093[ebp]
	cmp	eax, DWORD PTR tv11207[ebp]
	ja	SHORT $LN7@MatchAt
$LN748@MatchAt:
	mov	eax, DWORD PTR ___offset$42093[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN6@MatchAt
$LN7@MatchAt:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
$LN6@MatchAt:
; Line 4231
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN597@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN597@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv4504[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv4504[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv4504[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv4511[ebp], edx
	jmp	SHORT $LN598@MatchAt
$LN597@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv4511[ebp], eax
$LN598@MatchAt:
	mov	edx, DWORD PTR tv4511[ebp]
	mov	DWORD PTR _prevC$42098[ebp], edx
; Line 4232
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN599@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv4529[ebp], eax
	mov	DWORD PTR tv4529[ebp+4], edx
	jmp	SHORT $LN600@MatchAt
$LN599@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv4529[ebp], eax
	mov	DWORD PTR tv4529[ebp+4], edx
$LN600@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv4529[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv4529[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 4234
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN601@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+48]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	cmp	eax, 55296				; 0000d800H
	jge	SHORT $LN601@MatchAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	DWORD PTR tv4580[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv4580[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR tv4580[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR tv4587[ebp], edx
	jmp	SHORT $LN602@MatchAt
$LN601@MatchAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR tv4587[ebp], eax
$LN602@MatchAt:
	mov	edx, DWORD PTR tv4587[ebp]
	mov	DWORD PTR _twoPrevC$42099[ebp], edx
; Line 4237
	cmp	DWORD PTR _prevC$42098[ebp], 10		; 0000000aH
	jne	$LN5@MatchAt
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv11286[ebp], eax
	mov	ecx, DWORD PTR tv11286[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _backSearchIndex$[ebp+4]
	jl	$LN5@MatchAt
	jg	SHORT $LN749@MatchAt
	mov	eax, DWORD PTR tv11286[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _backSearchIndex$[ebp]
	jbe	$LN5@MatchAt
$LN749@MatchAt:
	cmp	DWORD PTR _twoPrevC$42099[ebp], 13	; 0000000dH
	jne	$LN5@MatchAt
; Line 4238
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR [eax+12]
	sbb	edx, 0
	push	0
	push	8
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _prevOp$42101[ebp], edx
; Line 4239
	mov	eax, DWORD PTR _prevOp$42101[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 52					; 00000034H
	jne	SHORT $LN5@MatchAt
; Line 4241
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+40]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN603@MatchAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+40]
	cdq
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv4616[ebp], eax
	mov	DWORD PTR tv4616[ebp+4], edx
	jmp	SHORT $LN604@MatchAt
$LN603@MatchAt:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv4616[ebp], eax
	mov	DWORD PTR tv4616[ebp+4], edx
$LN604@MatchAt:
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR tv4616[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR tv4616[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN5@MatchAt:
; Line 4246
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	mov	eax, DWORD PTR [ecx+12]
	sbb	eax, 0
	push	eax
	push	edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 4248
	jmp	SHORT $LN331@MatchAt
$LN3@MatchAt:
; Line 4255
	xor	eax, eax
	jne	SHORT $LN331@MatchAt
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1520				; 000005f0H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN331@MatchAt:
; Line 4258
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@MatchAt
; Line 4259
	mov	BYTE PTR _isMatch$[ebp], 0
; Line 4260
	jmp	SHORT $breakFromLoop$41384
$LN2@MatchAt:
; Line 4262
	jmp	$LN334@MatchAt
$breakFromLoop$41384:
; Line 4265
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _isMatch$[ebp]
	mov	BYTE PTR [eax+106], cl
; Line 4266
	movsx	eax, BYTE PTR _isMatch$[ebp]
	test	eax, eax
	je	SHORT $LN1@MatchAt
; Line 4267
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+128], edx
	mov	ecx, DWORD PTR [ecx+124]
	mov	DWORD PTR [eax+132], ecx
; Line 4268
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _startIdx$[ebp]
	mov	DWORD PTR [eax+112], ecx
	mov	edx, DWORD PTR _startIdx$[ebp+4]
	mov	DWORD PTR [eax+116], edx
; Line 4269
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+120], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+124], ecx
$LN1@MatchAt:
; Line 4282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+152], ecx
$LN340@MatchAt:
; Line 4286
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN755@MatchAt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 2328				; 00000918H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN755@MatchAt:
	DD	3
	DD	$LN754@MatchAt
$LN754@MatchAt:
	DD	-1404					; fffffa84H
	DD	20					; 00000014H
	DD	$LN750@MatchAt
	DD	-1432					; fffffa68H
	DD	20					; 00000014H
	DD	$LN751@MatchAt
	DD	-1700					; fffff95cH
	DD	20					; 00000014H
	DD	$LN752@MatchAt
$LN752@MatchAt:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN751@MatchAt:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN750@MatchAt:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	71					; 00000047H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
	npad	1
$LN756@MatchAt:
	DD	$LN329@MatchAt
	DD	$LN310@MatchAt
	DD	$LN328@MatchAt
	DD	$LN322@MatchAt
	DD	$LN3@MatchAt
	DD	$LN311@MatchAt
	DD	$LN330@MatchAt
	DD	$LN307@MatchAt
	DD	$LN306@MatchAt
	DD	$LN183@MatchAt
	DD	$LN165@MatchAt
	DD	$LN156@MatchAt
	DD	$LN139@MatchAt
	DD	$LN138@MatchAt
	DD	$LN136@MatchAt
	DD	$LN265@MatchAt
	DD	$LN255@MatchAt
	DD	$LN135@MatchAt
	DD	$LN232@MatchAt
	DD	$LN186@MatchAt
	DD	$LN151@MatchAt
	DD	$LN261@MatchAt
	DD	$LN277@MatchAt
	DD	$LN305@MatchAt
	DD	$LN133@MatchAt
	DD	$LN122@MatchAt
	DD	$LN145@MatchAt
	DD	$LN128@MatchAt
	DD	$LN118@MatchAt
	DD	$LN270@MatchAt
	DD	$LN3@MatchAt
	DD	$LN112@MatchAt
	DD	$LN111@MatchAt
	DD	$LN106@MatchAt
	DD	$LN83@MatchAt
	DD	$LN82@MatchAt
	DD	$LN79@MatchAt
	DD	$LN78@MatchAt
	DD	$LN73@MatchAt
	DD	$LN67@MatchAt
	DD	$LN93@MatchAt
	DD	$LN289@MatchAt
	DD	$LN275@MatchAt
	DD	$LN55@MatchAt
	DD	$LN54@MatchAt
	DD	$LN45@MatchAt
	DD	$LN43@MatchAt
	DD	$LN34@MatchAt
	DD	$LN173@MatchAt
	DD	$LN32@MatchAt
	DD	$LN9@MatchAt
	DD	$LN21@MatchAt
	DD	$LN263@MatchAt
	DD	$LN295@MatchAt
	DD	$LN282@MatchAt
	DD	$LN251@MatchAt
	DD	$LN245@MatchAt
	DD	$LN238@MatchAt
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$21:
	lea	ecx, DWORD PTR _captureGroupItr$41862[ebp]
	jmp	??1CaseFoldingUTextIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUTextIterator::~CaseFoldingUTextIterator
__unwindfunclet$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$22:
	lea	ecx, DWORD PTR _inputItr$41863[ebp]
	jmp	??1CaseFoldingUTextIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUTextIterator::~CaseFoldingUTextIterator
__unwindfunclet$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z$23:
	lea	ecx, DWORD PTR _inputIterator$41936[ebp]
	jmp	??1CaseFoldingUTextIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUTextIterator::~CaseFoldingUTextIterator
__ehhandler$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2332]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MatchAt@RegexMatcher@icu_56@@AAEX_JCAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::MatchAt
PUBLIC	?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA ; `icu_56::RegexMatcher::MatchChunkAt'::`2'::__LINE__Var
EXTRN	??1CaseFoldingUCharIterator@icu_56@@QAE@XZ:PROC	; icu_56::CaseFoldingUCharIterator::~CaseFoldingUCharIterator
EXTRN	?getIndex@CaseFoldingUCharIterator@icu_56@@QAE_JXZ:PROC ; icu_56::CaseFoldingUCharIterator::getIndex
EXTRN	?inExpansion@CaseFoldingUCharIterator@icu_56@@QAECXZ:PROC ; icu_56::CaseFoldingUCharIterator::inExpansion
EXTRN	?next@CaseFoldingUCharIterator@icu_56@@QAEHXZ:PROC ; icu_56::CaseFoldingUCharIterator::next
EXTRN	??0CaseFoldingUCharIterator@icu_56@@QAE@PB_W_J1@Z:PROC ; icu_56::CaseFoldingUCharIterator::CaseFoldingUCharIterator
;	COMDAT ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA DD 010cdH ; `icu_56::RegexMatcher::MatchChunkAt'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$21
	DD	00H
	DD	FLAT:__unwindfunclet$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$22
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$23
__ehfuncinfo$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv6550 = -2204						; size = 8
tv6327 = -2204						; size = 8
tv3508 = -2204						; size = 4
tv8465 = -2200						; size = 8
tv8379 = -2200						; size = 4
tv8358 = -2200						; size = 4
tv8263 = -2200						; size = 4
tv8232 = -2200						; size = 4
tv8210 = -2200						; size = 4
tv8119 = -2200						; size = 4
tv8078 = -2200						; size = 4
tv8056 = -2200						; size = 4
tv7880 = -2200						; size = 8
tv7744 = -2200						; size = 4
tv7525 = -2200						; size = 8
tv7012 = -2200						; size = 4
tv6991 = -2200						; size = 4
tv6624 = -2200						; size = 8
tv6604 = -2200						; size = 8
tv6587 = -2200						; size = 8
tv6497 = -2200						; size = 4
tv6401 = -2200						; size = 8
tv6381 = -2200						; size = 8
tv6364 = -2200						; size = 8
tv6274 = -2200						; size = 4
tv6192 = -2200						; size = 4
tv6171 = -2200						; size = 4
tv3791 = -2200						; size = 8
tv3773 = -2200						; size = 8
tv3713 = -2200						; size = 8
tv3609 = -2200						; size = 4
tv3572 = -2200						; size = 8
tv3534 = -2200						; size = 8
tv3507 = -2200						; size = 4
tv8376 = -2196						; size = 8
tv8355 = -2196						; size = 8
tv8260 = -2196						; size = 8
tv8229 = -2196						; size = 8
tv8207 = -2196						; size = 8
tv8116 = -2196						; size = 8
tv8075 = -2196						; size = 8
tv8053 = -2196						; size = 8
tv7958 = -2196						; size = 4
tv7741 = -2196						; size = 8
tv7601 = -2196						; size = 4
tv7176 = -2196						; size = 4
tv7138 = -2196						; size = 4
tv7009 = -2196						; size = 8
tv6988 = -2196						; size = 8
tv6647 = -2196						; size = 4
tv6547 = -2196						; size = 8
tv6494 = -2196						; size = 8
tv6415 = -2196						; size = 4
tv6324 = -2196						; size = 8
tv6271 = -2196						; size = 8
tv6189 = -2196						; size = 8
tv6168 = -2196						; size = 8
tv6063 = -2196						; size = 4
tv6018 = -2196						; size = 4
tv5982 = -2196						; size = 4
tv5929 = -2196						; size = 4
tv5891 = -2196						; size = 4
tv5846 = -2196						; size = 4
tv5800 = -2196						; size = 4
tv5755 = -2196						; size = 4
tv5697 = -2196						; size = 4
tv5645 = -2196						; size = 4
tv5588 = -2196						; size = 4
tv5539 = -2196						; size = 4
tv5482 = -2196						; size = 4
tv5431 = -2196						; size = 4
tv5411 = -2196						; size = 4
tv5398 = -2196						; size = 4
tv5361 = -2196						; size = 4
tv5257 = -2196						; size = 4
tv5219 = -2196						; size = 4
tv5112 = -2196						; size = 4
tv5074 = -2196						; size = 4
tv4960 = -2196						; size = 4
tv4922 = -2196						; size = 4
tv4794 = -2196						; size = 4
tv4756 = -2196						; size = 4
tv4667 = -2196						; size = 4
tv4622 = -2196						; size = 4
tv4576 = -2196						; size = 4
tv4531 = -2196						; size = 4
tv4427 = -2196						; size = 4
tv4389 = -2196						; size = 4
tv4349 = -2196						; size = 4
tv4304 = -2196						; size = 4
tv4257 = -2196						; size = 4
tv4212 = -2196						; size = 4
tv4195 = -2196						; size = 4
tv4183 = -2196						; size = 4
tv4136 = -2196						; size = 4
tv4091 = -2196						; size = 4
tv4028 = -2196						; size = 4
tv4016 = -2196						; size = 4
tv4000 = -2196						; size = 4
tv3981 = -2196						; size = 4
tv3950 = -2196						; size = 4
tv3933 = -2196						; size = 4
tv3897 = -2196						; size = 4
tv3860 = -2196						; size = 4
tv3828 = -2196						; size = 4
tv3674 = -2196						; size = 4
tv3639 = -2196						; size = 4
tv3606 = -2196						; size = 8
tv3552 = -2196						; size = 4
tv3506 = -2196						; size = 4
tv3472 = -2196						; size = 4
tv3437 = -2196						; size = 4
tv3284 = -2196						; size = 4
tv3246 = -2196						; size = 4
tv8539 = -2192						; size = 4
tv8464 = -2192						; size = 4
tv8422 = -2192						; size = 4
tv8386 = -2192						; size = 4
tv7991 = -2192						; size = 4
tv7979 = -2192						; size = 4
tv7957 = -2192						; size = 4
tv7908 = -2192						; size = 4
tv7896 = -2192						; size = 4
tv7879 = -2192						; size = 4
tv7860 = -2192						; size = 4
tv7826 = -2192						; size = 4
tv7785 = -2192						; size = 4
tv7764 = -2192						; size = 4
tv7634 = -2192						; size = 4
tv7622 = -2192						; size = 4
tv7600 = -2192						; size = 4
tv7559 = -2192						; size = 4
tv7547 = -2192						; size = 4
tv7524 = -2192						; size = 4
tv7505 = -2192						; size = 4
tv7471 = -2192						; size = 4
tv7430 = -2192						; size = 4
tv7409 = -2192						; size = 4
tv7175 = -2192						; size = 4
tv7137 = -2192						; size = 4
tv6821 = -2192						; size = 4
tv6646 = -2192						; size = 4
tv6623 = -2192						; size = 4
tv6603 = -2192						; size = 4
tv6586 = -2192						; size = 4
tv6414 = -2192						; size = 4
tv6400 = -2192						; size = 4
tv6380 = -2192						; size = 4
tv6363 = -2192						; size = 4
tv6062 = -2192						; size = 4
tv6017 = -2192						; size = 4
tv5981 = -2192						; size = 4
tv5928 = -2192						; size = 4
tv5890 = -2192						; size = 4
tv5845 = -2192						; size = 4
tv5799 = -2192						; size = 4
tv5754 = -2192						; size = 4
tv5696 = -2192						; size = 4
tv5644 = -2192						; size = 4
tv5587 = -2192						; size = 4
tv5538 = -2192						; size = 4
tv5481 = -2192						; size = 4
tv5430 = -2192						; size = 4
tv5410 = -2192						; size = 4
tv5397 = -2192						; size = 4
tv5360 = -2192						; size = 4
tv5325 = -2192						; size = 4
tv5256 = -2192						; size = 4
tv5218 = -2192						; size = 4
tv5181 = -2192						; size = 4
tv5111 = -2192						; size = 4
tv5073 = -2192						; size = 4
tv5036 = -2192						; size = 4
tv4959 = -2192						; size = 4
tv4921 = -2192						; size = 4
tv4884 = -2192						; size = 4
tv4793 = -2192						; size = 4
tv4755 = -2192						; size = 4
tv4666 = -2192						; size = 4
tv4621 = -2192						; size = 4
tv4575 = -2192						; size = 4
tv4530 = -2192						; size = 4
tv4488 = -2192						; size = 4
tv4426 = -2192						; size = 4
tv4388 = -2192						; size = 4
tv4348 = -2192						; size = 4
tv4303 = -2192						; size = 4
tv4256 = -2192						; size = 4
tv4211 = -2192						; size = 4
tv4194 = -2192						; size = 4
tv4182 = -2192						; size = 4
tv4135 = -2192						; size = 4
tv4090 = -2192						; size = 4
tv4027 = -2192						; size = 4
tv4015 = -2192						; size = 4
tv3999 = -2192						; size = 4
tv3980 = -2192						; size = 4
tv3949 = -2192						; size = 4
tv3932 = -2192						; size = 4
tv3896 = -2192						; size = 4
tv3859 = -2192						; size = 4
tv3827 = -2192						; size = 4
tv3790 = -2192						; size = 4
tv3772 = -2192						; size = 4
tv3712 = -2192						; size = 4
tv3673 = -2192						; size = 4
tv3638 = -2192						; size = 4
tv3571 = -2192						; size = 4
tv3551 = -2192						; size = 4
tv3533 = -2192						; size = 4
tv3505 = -2192						; size = 4
tv3471 = -2192						; size = 4
tv3436 = -2192						; size = 4
tv3283 = -2192						; size = 4
tv3245 = -2192						; size = 4
tv1562 = -2192						; size = 4
tv220 = -2192						; size = 4
tv143 = -2192						; size = 4
tv659 = -2189						; size = 1
_prevOp$42853 = -1992					; size = 4
___c2$42848 = -1980					; size = 2
_prevC$42846 = -1968					; size = 4
_stackLoc$42838 = -1956					; size = 4
_loopcOp$42834 = -1944					; size = 4
___c2$42825 = -1932					; size = 2
_c$42823 = -1920					; size = 4
_ix$42814 = -1908					; size = 4
_stackLoc$42811 = -1896					; size = 4
_loopcOp$42807 = -1884					; size = 4
___c2$42796 = -1872					; size = 2
_c$42794 = -1860					; size = 4
_ix$42788 = -1848					; size = 4
_s$42786 = -1836					; size = 4
_s8$42785 = -1824					; size = 4
_newStackSize$42779 = -1812				; size = 4
_originalInputLen$42775 = -1800				; size = 8
_restoreInputLen$42768 = -1784				; size = 8
_lbStartIdx$42760 = -1768				; size = 4
_continueLoc$42754 = -1756				; size = 4
_maxML$42752 = -1744					; size = 4
_minML$42750 = -1732					; size = 4
_originalInputLen$42746 = -1720				; size = 8
_restoreInputLen$42739 = -1704				; size = 8
_lbStartIdx$42730 = -1688				; size = 4
_maxML$42725 = -1676					; size = 4
_minML$42723 = -1664					; size = 4
___c2$42710 = -1652					; size = 2
_inputIterator$42705 = -1640				; size = 40
_patternStringIdx$42704 = -1592				; size = 4
_success$42703 = -1577					; size = 1
_cPattern$42702 = -1568					; size = 4
_cText$42701 = -1556					; size = 4
_patternStringLen$42700 = -1544				; size = 4
_patternString$42696 = -1532				; size = 4
___c2$42688 = -1520					; size = 2
_c$42686 = -1508					; size = 4
_i$42678 = -1496					; size = 4
_newFP$42677 = -1484					; size = 4
_newStackSize$42673 = -1472				; size = 4
_stackSize$42672 = -1460				; size = 4
_savedInputIdx$42662 = -1448				; size = 4
_dataLoc$42660 = -1436					; size = 4
_instrOperandLoc$42658 = -1424				; size = 4
_inputChar$42648 = -1412				; size = 4
_captureGroupChar$42646 = -1400				; size = 4
_success$42642 = -1385					; size = 1
_inputItr$42641 = -1376					; size = 40
_captureGroupItr$42640 = -1328				; size = 40
_groupEndIdx$42636 = -1280				; size = 8
_groupStartIdx$42635 = -1264				; size = 8
_groupIndex$42624 = -1248				; size = 8
_success$42623 = -1229					; size = 1
_inputIndex$42620 = -1220				; size = 8
_groupEndIdx$42618 = -1204				; size = 8
_groupStartIdx$42617 = -1188				; size = 8
_i$42609 = -1172					; size = 4
_newFP$42606 = -1160					; size = 4
_newStackSize$42603 = -1148				; size = 4
_pLastInputIdx$42597 = -1136				; size = 4
_maxCount$42588 = -1124					; size = 4
_minCount$42586 = -1112					; size = 4
_pCounter$42585 = -1100					; size = 4
_initOp$42581 = -1088					; size = 4
_maxCount$42571 = -1076					; size = 4
_minCount$42569 = -1064					; size = 4
_loopLoc$42568 = -1052					; size = 4
_instrOperandLoc$42566 = -1040				; size = 4
_pLastInputIdx$42561 = -1028				; size = 4
_maxCount$42553 = -1016					; size = 4
_minCount$42551 = -1004					; size = 4
_pCounter$42550 = -992					; size = 4
_initOp$42546 = -980					; size = 4
_maxCount$42534 = -968					; size = 4
_minCount$42532 = -956					; size = 4
_loopLoc$42531 = -944					; size = 4
_instrOperandLoc$42529 = -932				; size = 4
_prevInputIdx$42523 = -920				; size = 4
_frameLoc$42521 = -908					; size = 4
_stoOp$42517 = -896					; size = 4
___c2$42504 = -884					; size = 2
_c$42502 = -872						; size = 4
___c2$42492 = -860					; size = 2
_c$42490 = -848						; size = 4
___c2$42481 = -836					; size = 2
_c$42479 = -824						; size = 4
_s$42472 = -812						; size = 4
_s8$42469 = -800					; size = 4
___c2$42464 = -788					; size = 2
_c$42462 = -776						; size = 4
_s$42455 = -764						; size = 4
_s8$42452 = -752					; size = 4
___c2$42447 = -740					; size = 2
_c$42445 = -728						; size = 4
_s$42437 = -716						; size = 4
_s8$42434 = -704					; size = 4
___c2$42429 = -692					; size = 2
_c$42427 = -680						; size = 4
_success$42425 = -665					; size = 1
___c2$42409 = -656					; size = 2
___c2$42399 = -644					; size = 2
___c2$42393 = -632					; size = 2
___c2$42385 = -620					; size = 2
___c2$42377 = -608					; size = 2
___c2$42369 = -596					; size = 2
___c2$42357 = -584					; size = 2
_sets$42332 = -572					; size = 4
___c2$42328 = -560					; size = 2
_c$42326 = -548						; size = 4
_success$42319 = -533					; size = 1
___c2$42315 = -524					; size = 2
_c$42313 = -512						; size = 4
___c2$42304 = -500					; size = 2
___c2$42298 = -488					; size = 2
_c2$42296 = -476					; size = 2
___c2$42290 = -464					; size = 2
_c$42288 = -452						; size = 4
_success$42281 = -437					; size = 1
_ctype$42280 = -425					; size = 1
___c2$42276 = -416					; size = 2
_c$42274 = -404						; size = 4
_success$42262 = -389					; size = 1
_ctype$42261 = -377					; size = 1
___c2$42257 = -368					; size = 2
_c$42255 = -356						; size = 4
_success$42248 = -341					; size = 1
_success$42242 = -329					; size = 1
_c$42238 = -320						; size = 2
_c$42231 = -308						; size = 2
_c$42217 = -296						; size = 4
___c2$42194 = -284					; size = 2
_c$42192 = -272						; size = 4
_success$42166 = -257					; size = 1
_pEnd$42165 = -248					; size = 4
_pPat$42164 = -236					; size = 4
_pInpLimit$42163 = -224					; size = 4
_pInp$42162 = -212					; size = 4
_stringLen$42156 = -200					; size = 4
_stringStartIdx$42155 = -188				; size = 4
___c2$42147 = -176					; size = 2
_c$42145 = -164						; size = 4
_i$ = -152						; size = 4
_fp$ = -140						; size = 4
_inputBuf$ = -128					; size = 4
_sets$ = -116						; size = 4
_litText$ = -104					; size = 4
_pat$ = -92						; size = 4
_opValue$ = -80						; size = 4
_opType$ = -68						; size = 4
_op$ = -56						; size = 4
_backSearchIndex$ = -44					; size = 4
_isMatch$ = -29						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_startIdx$ = 8						; size = 4
_toEnd$ = 12						; size = 1
_status$ = 16						; size = 4
?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z PROC ; icu_56::RegexMatcher::MatchChunkAt, COMDAT
; _this$ = ecx
; Line 4301
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2192				; 00000890H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-2204]
	mov	ecx, 548				; 00000224H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4302
	mov	BYTE PTR _isMatch$[ebp], 0
; Line 4304
	mov	DWORD PTR _backSearchIndex$[ebp], 2147483647 ; 7fffffffH
; Line 4339
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN341@MatchChunk
; Line 4340
	jmp	$LN342@MatchChunk
$LN341@MatchChunk:
; Line 4345
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+16]
	call	DWORD PTR __imp_?getBuffer@UVector64@icu_56@@QBEPA_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pat$[ebp], eax
; Line 4347
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	call	DWORD PTR __imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _litText$[ebp], eax
; Line 4348
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _sets$[ebp], edx
; Line 4350
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _inputBuf$[ebp], edx
; Line 4352
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+100]
	mov	DWORD PTR [edx+32], eax
; Line 4353
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resetStack@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@XZ ; icu_56::RegexMatcher::resetStack
	mov	DWORD PTR _fp$[ebp], eax
; Line 4354
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN340@MatchChunk
; Line 4355
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax], edx
; Line 4356
	jmp	$LN342@MatchChunk
$LN340@MatchChunk:
; Line 4359
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
; Line 4360
	mov	eax, DWORD PTR _startIdx$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 4364
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN339@MatchChunk
$LN338@MatchChunk:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN339@MatchChunk:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+104]
	jge	SHORT $LN336@MatchChunk
; Line 4365
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+edx*8], 0
	mov	DWORD PTR [ecx+edx*8+4], 0
; Line 4366
	jmp	SHORT $LN338@MatchChunk
$LN336@MatchChunk:
; Line 4373
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _op$[ebp], edx
; Line 4374
	mov	eax, DWORD PTR _op$[ebp]
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _opType$[ebp], eax
; Line 4375
	mov	eax, DWORD PTR _op$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _opValue$[ebp], eax
; Line 4384
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 4386
	mov	eax, DWORD PTR _opType$[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR tv143[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv143[ebp], ecx
	cmp	DWORD PTR tv143[ebp], 57		; 00000039H
	ja	$LN3@MatchChunk
	mov	edx, DWORD PTR tv143[ebp]
	jmp	DWORD PTR $LN572@MatchChunk[edx*4]
$LN332@MatchChunk:
; Line 4390
	jmp	$LN333@MatchChunk
$LN331@MatchChunk:
; Line 4397
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4398
	jmp	$LN333@MatchChunk
$LN330@MatchChunk:
; Line 4402
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3245[ebp], eax
	mov	DWORD PTR tv3246[ebp], ecx
	mov	edx, DWORD PTR tv3245[ebp]
	mov	eax, DWORD PTR tv3246[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jg	$LN329@MatchChunk
	jl	SHORT $LN453@MatchChunk
	mov	edx, DWORD PTR tv3245[ebp]
	mov	eax, DWORD PTR tv3246[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jae	$LN329@MatchChunk
$LN453@MatchChunk:
; Line 4404
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42145[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42145[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN328@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3283[ebp], eax
	mov	DWORD PTR tv3284[ebp], ecx
	mov	edx, DWORD PTR tv3283[ebp]
	mov	eax, DWORD PTR tv3284[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN454@MatchChunk
	mov	edx, DWORD PTR tv3283[ebp]
	mov	eax, DWORD PTR tv3284[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN328@MatchChunk
$LN454@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42147[ebp], dx
	movzx	eax, WORD PTR ___c2$42147[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN328@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42145[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42147[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42145[ebp], edx
$LN328@MatchChunk:
; Line 4405
	mov	eax, DWORD PTR _c$42145[ebp]
	cmp	eax, DWORD PTR _opValue$[ebp]
	jne	SHORT $LN326@MatchChunk
; Line 4406
	jmp	$LN333@MatchChunk
$LN326@MatchChunk:
; Line 4408
	jmp	SHORT $LN325@MatchChunk
$LN329@MatchChunk:
; Line 4409
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
$LN325@MatchChunk:
; Line 4411
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4412
	jmp	$LN333@MatchChunk
$LN324@MatchChunk:
; Line 4420
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR _stringStartIdx$42155[ebp], eax
; Line 4423
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _op$[ebp], edx
; Line 4424
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 4425
	mov	eax, DWORD PTR _op$[ebp]
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _opType$[ebp], eax
; Line 4426
	mov	eax, DWORD PTR _op$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _stringLen$42156[ebp], eax
; Line 4427
	cmp	DWORD PTR _opType$[ebp], 5
	je	SHORT $LN344@MatchChunk
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 126				; 0000007eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DC@MEDILEED@?$AAo?$AAp?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAS?$AAT?$AAR?$AAI?$AAN?$AAG?$AA_?$AAL?$AAE?$AAN?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN344@MatchChunk:
; Line 4428
	cmp	DWORD PTR _stringLen$42156[ebp], 2
	jge	SHORT $LN345@MatchChunk
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 127				; 0000007fH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BO@MDJGAPBB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN345@MatchChunk:
; Line 4430
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	add	eax, DWORD PTR _inputBuf$[ebp]
	mov	DWORD PTR _pInp$42162[ebp], eax
; Line 4431
	mov	eax, DWORD PTR _this$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR [eax+96]
	push	edx
	call	__allmul
	add	eax, DWORD PTR _inputBuf$[ebp]
	mov	DWORD PTR _pInpLimit$42163[ebp], eax
; Line 4432
	mov	eax, DWORD PTR _stringStartIdx$42155[ebp]
	mov	ecx, DWORD PTR _litText$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pPat$42164[ebp], edx
; Line 4433
	mov	eax, DWORD PTR _stringLen$42156[ebp]
	mov	ecx, DWORD PTR _pInp$42162[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pEnd$42165[ebp], edx
; Line 4434
	mov	BYTE PTR _success$42166[ebp], 1
$LN323@MatchChunk:
; Line 4435
	mov	eax, DWORD PTR _pInp$42162[ebp]
	cmp	eax, DWORD PTR _pEnd$42165[ebp]
	jae	$LN322@MatchChunk
; Line 4436
	mov	eax, DWORD PTR _pInp$42162[ebp]
	cmp	eax, DWORD PTR _pInpLimit$42163[ebp]
	jb	SHORT $LN321@MatchChunk
; Line 4437
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4438
	mov	BYTE PTR _success$42166[ebp], 0
; Line 4439
	jmp	SHORT $LN322@MatchChunk
$LN321@MatchChunk:
; Line 4441
	mov	eax, DWORD PTR _pPat$42164[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _pInp$42162[ebp]
	movzx	eax, WORD PTR [edx]
	mov	edx, DWORD PTR _pPat$42164[ebp]
	add	edx, 2
	mov	DWORD PTR _pPat$42164[ebp], edx
	mov	edx, DWORD PTR _pInp$42162[ebp]
	add	edx, 2
	mov	DWORD PTR _pInp$42162[ebp], edx
	cmp	eax, ecx
	je	SHORT $LN346@MatchChunk
	mov	DWORD PTR tv220[ebp], 1
	jmp	SHORT $LN347@MatchChunk
$LN346@MatchChunk:
	mov	DWORD PTR tv220[ebp], 0
$LN347@MatchChunk:
	cmp	DWORD PTR tv220[ebp], 0
	je	SHORT $LN320@MatchChunk
; Line 4442
	mov	BYTE PTR _success$42166[ebp], 0
; Line 4443
	jmp	SHORT $LN322@MatchChunk
$LN320@MatchChunk:
; Line 4445
	jmp	$LN323@MatchChunk
$LN322@MatchChunk:
; Line 4447
	movsx	eax, BYTE PTR _success$42166[ebp]
	test	eax, eax
	je	SHORT $LN319@MatchChunk
; Line 4448
	mov	eax, DWORD PTR _stringLen$42156[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	add	eax, DWORD PTR [ecx]
	adc	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 4449
	jmp	SHORT $LN318@MatchChunk
$LN319@MatchChunk:
; Line 4450
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN318@MatchChunk:
; Line 4453
	jmp	$LN333@MatchChunk
$LN317@MatchChunk:
; Line 4457
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 4458
	jmp	$LN333@MatchChunk
$LN316@MatchChunk:
; Line 4464
	movsx	eax, BYTE PTR _toEnd$[ebp]
	test	eax, eax
	je	SHORT $LN315@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3436[ebp], eax
	mov	DWORD PTR tv3437[ebp], ecx
	mov	edx, DWORD PTR tv3436[ebp]
	mov	eax, DWORD PTR tv3437[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN455@MatchChunk
	mov	edx, DWORD PTR tv3436[ebp]
	mov	eax, DWORD PTR tv3437[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN315@MatchChunk
$LN455@MatchChunk:
; Line 4466
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4467
	jmp	$LN333@MatchChunk
$LN315@MatchChunk:
; Line 4469
	mov	BYTE PTR _isMatch$[ebp], 1
; Line 4470
	jmp	$breakFromLoop$42179
$LN313@MatchChunk:
; Line 4478
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN348@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 3
	cmp	DWORD PTR _opValue$[ebp], ecx
	jl	SHORT $LN349@MatchChunk
$LN348@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 177				; 000000b1H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@HKGBPPJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN349@MatchChunk:
; Line 4479
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+32], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+36], edx
; Line 4480
	jmp	$LN333@MatchChunk
$LN312@MatchChunk:
; Line 4484
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN350@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 3
	cmp	DWORD PTR _opValue$[ebp], ecx
	jl	SHORT $LN351@MatchChunk
$LN350@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 183				; 000000b7H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@HKGBPPJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN351@MatchChunk:
; Line 4485
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv3471[ebp], ecx
	mov	DWORD PTR tv3472[ebp], eax
	mov	edx, DWORD PTR tv3472[ebp]
	mov	eax, DWORD PTR tv3471[ebp]
	cmp	DWORD PTR [eax+edx*8+36], 0
	jg	SHORT $LN352@MatchChunk
	jl	SHORT $LN456@MatchChunk
	mov	ecx, DWORD PTR tv3472[ebp]
	mov	edx, DWORD PTR tv3471[ebp]
	cmp	DWORD PTR [edx+ecx*8+32], 0
	jae	SHORT $LN352@MatchChunk
$LN456@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 184				; 000000b8H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DG@LCGIFGJK@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr?$AAa?$AA?$FL?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA2?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN352@MatchChunk:
; Line 4486
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	esi, DWORD PTR _fp$[ebp]
	mov	edi, DWORD PTR [esi+edx*8+32]
	mov	DWORD PTR [ecx+eax*8+16], edi
	mov	edx, DWORD PTR [esi+edx*8+36]
	mov	DWORD PTR [ecx+eax*8+20], edx
; Line 4487
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+24], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+28], edx
; Line 4488
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	esi, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv3505[ebp], ecx
	mov	DWORD PTR tv3506[ebp], eax
	mov	DWORD PTR tv3507[ebp], esi
	mov	DWORD PTR tv3508[ebp], edx
	mov	eax, DWORD PTR tv3506[ebp]
	mov	ecx, DWORD PTR tv3505[ebp]
	mov	edx, DWORD PTR tv3508[ebp]
	mov	esi, DWORD PTR tv3507[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+20]
	cmp	eax, DWORD PTR [esi+edx*8+28]
	jl	SHORT $LN353@MatchChunk
	jg	SHORT $LN457@MatchChunk
	mov	ecx, DWORD PTR tv3506[ebp]
	mov	edx, DWORD PTR tv3505[ebp]
	mov	eax, DWORD PTR tv3508[ebp]
	mov	esi, DWORD PTR tv3507[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8+16]
	cmp	ecx, DWORD PTR [esi+eax*8+24]
	jbe	SHORT $LN353@MatchChunk
$LN457@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 187				; 000000bbH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FK@IMACNBLG@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr?$AAa?$AA?$FL?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$FN?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAt?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN353@MatchChunk:
; Line 4489
	jmp	$LN333@MatchChunk
$LN311@MatchChunk:
; Line 4494
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, 2
	mov	edx, DWORD PTR [eax+68]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv3533[ebp], eax
	mov	DWORD PTR tv3534[ebp], ecx
	mov	DWORD PTR tv3534[ebp+4], edx
	mov	ecx, DWORD PTR tv3533[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR tv3534[ebp+4]
	jg	SHORT $LN310@MatchChunk
	jl	SHORT $LN458@MatchChunk
	mov	eax, DWORD PTR tv3533[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR tv3534[ebp]
	jae	SHORT $LN310@MatchChunk
$LN458@MatchChunk:
; Line 4497
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4498
	jmp	$LN333@MatchChunk
$LN310@MatchChunk:
; Line 4500
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3551[ebp], eax
	mov	DWORD PTR tv3552[ebp], ecx
	mov	edx, DWORD PTR tv3551[ebp]
	mov	eax, DWORD PTR tv3552[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jl	SHORT $LN309@MatchChunk
	jg	SHORT $LN459@MatchChunk
	mov	edx, DWORD PTR tv3551[ebp]
	mov	eax, DWORD PTR tv3552[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jb	SHORT $LN309@MatchChunk
$LN459@MatchChunk:
; Line 4502
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4503
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 4504
	jmp	$LN333@MatchChunk
$LN309@MatchChunk:
; Line 4509
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+68]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv3571[ebp], eax
	mov	DWORD PTR tv3572[ebp], ecx
	mov	DWORD PTR tv3572[ebp+4], edx
	mov	ecx, DWORD PTR tv3571[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv3572[ebp]
	jne	$LN308@MatchChunk
	mov	eax, DWORD PTR tv3571[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR tv3572[ebp+4]
	jne	$LN308@MatchChunk
; Line 4511
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42192[ebp], edx
	mov	eax, DWORD PTR _c$42192[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN307@MatchChunk
	mov	eax, DWORD PTR _c$42192[ebp]
	and	eax, 1024				; 00000400H
	jne	$LN306@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3606[ebp], ecx
	mov	DWORD PTR tv3606[ebp+4], edx
	mov	DWORD PTR tv3609[ebp], eax
	mov	ecx, DWORD PTR tv3609[ebp]
	mov	edx, DWORD PTR tv3606[ebp]
	cmp	edx, DWORD PTR [ecx+64]
	jne	SHORT $LN460@MatchChunk
	mov	eax, DWORD PTR tv3609[ebp]
	mov	ecx, DWORD PTR tv3606[ebp+4]
	cmp	ecx, DWORD PTR [eax+68]
	je	SHORT $LN305@MatchChunk
$LN460@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42194[ebp], dx
	movzx	eax, WORD PTR ___c2$42194[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN305@MatchChunk
	mov	eax, DWORD PTR _c$42192[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42194[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42192[ebp], edx
$LN305@MatchChunk:
	jmp	$LN307@MatchChunk
$LN306@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3638[ebp], eax
	mov	DWORD PTR tv3639[ebp], ecx
	mov	edx, DWORD PTR tv3638[ebp]
	mov	eax, DWORD PTR tv3639[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	jl	SHORT $LN307@MatchChunk
	jg	SHORT $LN461@MatchChunk
	mov	edx, DWORD PTR tv3638[ebp]
	mov	eax, DWORD PTR tv3639[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	jbe	SHORT $LN307@MatchChunk
$LN461@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42194[ebp], dx
	movzx	eax, WORD PTR ___c2$42194[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN307@MatchChunk
	movzx	eax, WORD PTR ___c2$42194[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _c$42192[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42192[ebp], edx
$LN307@MatchChunk:
; Line 4513
	mov	eax, DWORD PTR _c$42192[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN302@MatchChunk
; Line 4514
	cmp	DWORD PTR _c$42192[ebp], 10		; 0000000aH
	jne	SHORT $LN300@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3673[ebp], eax
	mov	DWORD PTR tv3674[ebp], ecx
	mov	edx, DWORD PTR tv3673[ebp]
	mov	eax, DWORD PTR tv3674[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	jl	SHORT $LN300@MatchChunk
	jg	SHORT $LN462@MatchChunk
	mov	edx, DWORD PTR tv3673[ebp]
	mov	eax, DWORD PTR tv3674[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	jbe	SHORT $LN300@MatchChunk
$LN462@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN302@MatchChunk
$LN300@MatchChunk:
; Line 4516
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4517
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 4518
	jmp	$LN333@MatchChunk
$LN302@MatchChunk:
; Line 4521
	jmp	$LN299@MatchChunk
$LN308@MatchChunk:
; Line 4522
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, 2
	mov	edx, DWORD PTR [eax+68]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv3712[ebp], eax
	mov	DWORD PTR tv3713[ebp], ecx
	mov	DWORD PTR tv3713[ebp+4], edx
	mov	ecx, DWORD PTR tv3712[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv3713[ebp]
	jne	SHORT $LN299@MatchChunk
	mov	eax, DWORD PTR tv3712[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR tv3713[ebp+4]
	jne	SHORT $LN299@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN299@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN299@MatchChunk
; Line 4523
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4524
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 4525
	jmp	$LN333@MatchChunk
$LN299@MatchChunk:
; Line 4528
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4530
	jmp	$LN333@MatchChunk
$LN297@MatchChunk:
; Line 4534
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+68]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv3772[ebp], eax
	mov	DWORD PTR tv3773[ebp], ecx
	mov	DWORD PTR tv3773[ebp+4], edx
	mov	ecx, DWORD PTR tv3772[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR tv3773[ebp+4]
	jl	$LN296@MatchChunk
	jg	SHORT $LN463@MatchChunk
	mov	eax, DWORD PTR tv3772[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR tv3773[ebp]
	jb	$LN296@MatchChunk
$LN463@MatchChunk:
; Line 4536
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+68]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv3790[ebp], eax
	mov	DWORD PTR tv3791[ebp], ecx
	mov	DWORD PTR tv3791[ebp+4], edx
	mov	ecx, DWORD PTR tv3790[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv3791[ebp]
	jne	SHORT $LN295@MatchChunk
	mov	eax, DWORD PTR tv3790[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR tv3791[ebp+4]
	jne	SHORT $LN295@MatchChunk
; Line 4538
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN294@MatchChunk
; Line 4539
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4540
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 4541
	jmp	$LN333@MatchChunk
$LN294@MatchChunk:
; Line 4543
	jmp	SHORT $LN296@MatchChunk
$LN295@MatchChunk:
; Line 4545
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4546
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 4547
	jmp	$LN333@MatchChunk
$LN296@MatchChunk:
; Line 4552
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4553
	jmp	$LN333@MatchChunk
$LN292@MatchChunk:
; Line 4558
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3827[ebp], eax
	mov	DWORD PTR tv3828[ebp], ecx
	mov	edx, DWORD PTR tv3827[ebp]
	mov	eax, DWORD PTR tv3828[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jl	SHORT $LN291@MatchChunk
	jg	SHORT $LN464@MatchChunk
	mov	edx, DWORD PTR tv3827[ebp]
	mov	eax, DWORD PTR tv3828[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jb	SHORT $LN291@MatchChunk
$LN464@MatchChunk:
; Line 4560
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4561
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 4562
	jmp	$LN333@MatchChunk
$LN291@MatchChunk:
; Line 4566
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42217[ebp], edx
; Line 4567
	mov	eax, DWORD PTR _c$42217[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN290@MatchChunk
; Line 4571
	cmp	DWORD PTR _c$42217[ebp], 10		; 0000000aH
	jne	SHORT $LN288@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3859[ebp], eax
	mov	DWORD PTR tv3860[ebp], ecx
	mov	edx, DWORD PTR tv3859[ebp]
	mov	eax, DWORD PTR tv3860[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	jl	SHORT $LN288@MatchChunk
	jg	SHORT $LN465@MatchChunk
	mov	edx, DWORD PTR tv3859[ebp]
	mov	eax, DWORD PTR tv3860[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	jbe	SHORT $LN288@MatchChunk
$LN465@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN290@MatchChunk
$LN288@MatchChunk:
; Line 4572
	jmp	$LN333@MatchChunk
$LN290@MatchChunk:
; Line 4576
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4578
	jmp	$LN333@MatchChunk
$LN287@MatchChunk:
; Line 4583
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3896[ebp], eax
	mov	DWORD PTR tv3897[ebp], ecx
	mov	edx, DWORD PTR tv3896[ebp]
	mov	eax, DWORD PTR tv3897[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jl	SHORT $LN286@MatchChunk
	jg	SHORT $LN466@MatchChunk
	mov	edx, DWORD PTR tv3896[ebp]
	mov	eax, DWORD PTR tv3897[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jb	SHORT $LN286@MatchChunk
$LN466@MatchChunk:
; Line 4585
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4586
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
; Line 4587
	jmp	$LN333@MatchChunk
$LN286@MatchChunk:
; Line 4591
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	cmp	edx, 10					; 0000000aH
	je	SHORT $LN285@MatchChunk
; Line 4592
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN285@MatchChunk:
; Line 4595
	jmp	$LN333@MatchChunk
$LN284@MatchChunk:
; Line 4599
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3932[ebp], eax
	mov	DWORD PTR tv3933[ebp], ecx
	mov	edx, DWORD PTR tv3932[ebp]
	mov	eax, DWORD PTR tv3933[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	jne	SHORT $LN467@MatchChunk
	mov	edx, DWORD PTR tv3932[ebp]
	mov	eax, DWORD PTR tv3933[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	je	SHORT $LN283@MatchChunk
$LN467@MatchChunk:
; Line 4600
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN283@MatchChunk:
; Line 4602
	jmp	$LN333@MatchChunk
$LN282@MatchChunk:
; Line 4607
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3949[ebp], eax
	mov	DWORD PTR tv3950[ebp], ecx
	mov	edx, DWORD PTR tv3949[ebp]
	mov	eax, DWORD PTR tv3950[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	jne	SHORT $LN281@MatchChunk
	mov	edx, DWORD PTR tv3949[ebp]
	mov	eax, DWORD PTR tv3950[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	jne	SHORT $LN281@MatchChunk
; Line 4609
	jmp	$LN333@MatchChunk
$LN281@MatchChunk:
; Line 4613
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _c$42231[ebp], dx
; Line 4615
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3980[ebp], eax
	mov	DWORD PTR tv3981[ebp], ecx
	mov	edx, DWORD PTR tv3980[ebp]
	mov	eax, DWORD PTR tv3981[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jg	SHORT $LN280@MatchChunk
	jl	SHORT $LN468@MatchChunk
	mov	edx, DWORD PTR tv3980[ebp]
	mov	eax, DWORD PTR tv3981[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jae	SHORT $LN280@MatchChunk
$LN468@MatchChunk:
	movzx	eax, WORD PTR _c$42231[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN280@MatchChunk
; Line 4618
	jmp	$LN333@MatchChunk
$LN280@MatchChunk:
; Line 4621
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4623
	jmp	$LN333@MatchChunk
$LN279@MatchChunk:
; Line 4628
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3999[ebp], eax
	mov	DWORD PTR tv4000[ebp], ecx
	mov	edx, DWORD PTR tv3999[ebp]
	mov	eax, DWORD PTR tv4000[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	jg	SHORT $LN354@MatchChunk
	jl	SHORT $LN469@MatchChunk
	mov	edx, DWORD PTR tv3999[ebp]
	mov	eax, DWORD PTR tv4000[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	jae	SHORT $LN354@MatchChunk
$LN469@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 327				; 00000147H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DM@NBHICIKP@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAn?$AAc?$AAh?$AAo?$AAr?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN354@MatchChunk:
; Line 4629
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4015[ebp], eax
	mov	DWORD PTR tv4016[ebp], ecx
	mov	edx, DWORD PTR tv4015[ebp]
	mov	eax, DWORD PTR tv4016[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+60]
	jg	SHORT $LN278@MatchChunk
	jl	SHORT $LN470@MatchChunk
	mov	edx, DWORD PTR tv4015[ebp]
	mov	eax, DWORD PTR tv4016[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+56]
	ja	SHORT $LN278@MatchChunk
$LN470@MatchChunk:
; Line 4631
	jmp	$LN333@MatchChunk
$LN278@MatchChunk:
; Line 4634
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4027[ebp], eax
	mov	DWORD PTR tv4028[ebp], ecx
	mov	edx, DWORD PTR tv4027[ebp]
	mov	eax, DWORD PTR tv4028[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jl	SHORT $LN355@MatchChunk
	jg	SHORT $LN471@MatchChunk
	mov	edx, DWORD PTR tv4027[ebp]
	mov	eax, DWORD PTR tv4028[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jbe	SHORT $LN355@MatchChunk
$LN471@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 333				; 0000014dH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DM@HLNPLKHI@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAA?$AAn?$AAc?$AAh?$AAo?$AAr?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN355@MatchChunk:
; Line 4635
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _c$42238[ebp], dx
; Line 4636
	movzx	eax, WORD PTR _c$42238[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN277@MatchChunk
; Line 4638
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN277@MatchChunk:
; Line 4641
	jmp	$LN333@MatchChunk
$LN276@MatchChunk:
; Line 4645
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isChunkWordBoundary@RegexMatcher@icu_56@@AAECH@Z ; icu_56::RegexMatcher::isChunkWordBoundary
	mov	BYTE PTR _success$42242[ebp], al
; Line 4646
	cmp	DWORD PTR _opValue$[ebp], 0
	setne	al
	movsx	ecx, al
	movsx	edx, BYTE PTR _success$42242[ebp]
	xor	edx, ecx
	mov	BYTE PTR _success$42242[ebp], dl
; Line 4647
	movsx	eax, BYTE PTR _success$42242[ebp]
	test	eax, eax
	jne	SHORT $LN275@MatchChunk
; Line 4648
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN275@MatchChunk:
; Line 4651
	jmp	$LN333@MatchChunk
$LN274@MatchChunk:
; Line 4656
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isUWordBoundary@RegexMatcher@icu_56@@AAEC_J@Z ; icu_56::RegexMatcher::isUWordBoundary
	mov	BYTE PTR _success$42248[ebp], al
; Line 4657
	cmp	DWORD PTR _opValue$[ebp], 0
	setne	al
	movsx	ecx, al
	movsx	edx, BYTE PTR _success$42248[ebp]
	xor	edx, ecx
	mov	BYTE PTR _success$42248[ebp], dl
; Line 4658
	movsx	eax, BYTE PTR _success$42248[ebp]
	test	eax, eax
	jne	SHORT $LN273@MatchChunk
; Line 4659
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN273@MatchChunk:
; Line 4662
	jmp	$LN333@MatchChunk
$LN272@MatchChunk:
; Line 4667
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4090[ebp], eax
	mov	DWORD PTR tv4091[ebp], ecx
	mov	edx, DWORD PTR tv4090[ebp]
	mov	eax, DWORD PTR tv4091[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN271@MatchChunk
	jg	SHORT $LN472@MatchChunk
	mov	edx, DWORD PTR tv4090[ebp]
	mov	eax, DWORD PTR tv4091[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN271@MatchChunk
$LN472@MatchChunk:
; Line 4668
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4669
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4670
	jmp	$LN333@MatchChunk
$LN271@MatchChunk:
; Line 4674
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42255[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42255[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN270@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4135[ebp], eax
	mov	DWORD PTR tv4136[ebp], ecx
	mov	edx, DWORD PTR tv4135[ebp]
	mov	eax, DWORD PTR tv4136[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN473@MatchChunk
	mov	edx, DWORD PTR tv4135[ebp]
	mov	eax, DWORD PTR tv4136[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN270@MatchChunk
$LN473@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42257[ebp], dx
	movzx	eax, WORD PTR ___c2$42257[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN270@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42255[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42257[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42255[ebp], edx
$LN270@MatchChunk:
; Line 4675
	mov	eax, DWORD PTR _c$42255[ebp]
	push	eax
	call	_u_charType_56
	add	esp, 4
	mov	BYTE PTR _ctype$42261[ebp], al
; Line 4676
	movsx	eax, BYTE PTR _ctype$42261[ebp]
	cmp	eax, 9
	sete	cl
	mov	BYTE PTR _success$42262[ebp], cl
; Line 4677
	cmp	DWORD PTR _opValue$[ebp], 0
	setne	al
	movsx	ecx, al
	movsx	edx, BYTE PTR _success$42262[ebp]
	xor	edx, ecx
	mov	BYTE PTR _success$42262[ebp], dl
; Line 4678
	movsx	eax, BYTE PTR _success$42262[ebp]
	test	eax, eax
	jne	SHORT $LN268@MatchChunk
; Line 4679
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN268@MatchChunk:
; Line 4682
	jmp	$LN333@MatchChunk
$LN267@MatchChunk:
; Line 4686
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN265@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4182[ebp], eax
	mov	DWORD PTR tv4183[ebp], ecx
	mov	edx, DWORD PTR tv4182[ebp]
	mov	eax, DWORD PTR tv4183[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+120]
	jne	SHORT $LN265@MatchChunk
	mov	edx, DWORD PTR tv4182[ebp]
	mov	eax, DWORD PTR tv4183[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+124]
	je	SHORT $LN266@MatchChunk
$LN265@MatchChunk:
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	jne	SHORT $LN264@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4194[ebp], eax
	mov	DWORD PTR tv4195[ebp], ecx
	mov	edx, DWORD PTR tv4194[ebp]
	mov	eax, DWORD PTR tv4195[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+88]
	jne	SHORT $LN264@MatchChunk
	mov	edx, DWORD PTR tv4194[ebp]
	mov	eax, DWORD PTR tv4195[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+92]
	je	SHORT $LN266@MatchChunk
$LN264@MatchChunk:
; Line 4687
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN266@MatchChunk:
; Line 4689
	jmp	$LN333@MatchChunk
$LN263@MatchChunk:
; Line 4694
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4211[ebp], eax
	mov	DWORD PTR tv4212[ebp], ecx
	mov	edx, DWORD PTR tv4211[ebp]
	mov	eax, DWORD PTR tv4212[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN262@MatchChunk
	jg	SHORT $LN476@MatchChunk
	mov	edx, DWORD PTR tv4211[ebp]
	mov	eax, DWORD PTR tv4212[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN262@MatchChunk
$LN476@MatchChunk:
; Line 4695
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4696
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4697
	jmp	$LN333@MatchChunk
$LN262@MatchChunk:
; Line 4700
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42274[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42274[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN261@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4256[ebp], eax
	mov	DWORD PTR tv4257[ebp], ecx
	mov	edx, DWORD PTR tv4256[ebp]
	mov	eax, DWORD PTR tv4257[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN477@MatchChunk
	mov	edx, DWORD PTR tv4256[ebp]
	mov	eax, DWORD PTR tv4257[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN261@MatchChunk
$LN477@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42276[ebp], dx
	movzx	eax, WORD PTR ___c2$42276[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN261@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42274[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42276[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42274[ebp], edx
$LN261@MatchChunk:
; Line 4701
	mov	eax, DWORD PTR _c$42274[ebp]
	push	eax
	call	_u_charType_56
	add	esp, 4
	mov	BYTE PTR _ctype$42280[ebp], al
; Line 4702
	movsx	eax, BYTE PTR _ctype$42280[ebp]
	cmp	eax, 12					; 0000000cH
	je	SHORT $LN356@MatchChunk
	cmp	DWORD PTR _c$42274[ebp], 9
	je	SHORT $LN356@MatchChunk
	mov	BYTE PTR tv659[ebp], 0
	jmp	SHORT $LN357@MatchChunk
$LN356@MatchChunk:
	mov	BYTE PTR tv659[ebp], 1
$LN357@MatchChunk:
	mov	cl, BYTE PTR tv659[ebp]
	mov	BYTE PTR _success$42281[ebp], cl
; Line 4703
	cmp	DWORD PTR _opValue$[ebp], 0
	setne	al
	movsx	ecx, al
	movsx	edx, BYTE PTR _success$42281[ebp]
	xor	edx, ecx
	mov	BYTE PTR _success$42281[ebp], dl
; Line 4704
	movsx	eax, BYTE PTR _success$42281[ebp]
	test	eax, eax
	jne	SHORT $LN259@MatchChunk
; Line 4705
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN259@MatchChunk:
; Line 4708
	jmp	$LN333@MatchChunk
$LN258@MatchChunk:
; Line 4713
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4303[ebp], eax
	mov	DWORD PTR tv4304[ebp], ecx
	mov	edx, DWORD PTR tv4303[ebp]
	mov	eax, DWORD PTR tv4304[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN257@MatchChunk
	jg	SHORT $LN478@MatchChunk
	mov	edx, DWORD PTR tv4303[ebp]
	mov	eax, DWORD PTR tv4304[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN257@MatchChunk
$LN478@MatchChunk:
; Line 4714
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4715
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4716
	jmp	$LN333@MatchChunk
$LN257@MatchChunk:
; Line 4719
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42288[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42288[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN256@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4348[ebp], eax
	mov	DWORD PTR tv4349[ebp], ecx
	mov	edx, DWORD PTR tv4348[ebp]
	mov	eax, DWORD PTR tv4349[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN479@MatchChunk
	mov	edx, DWORD PTR tv4348[ebp]
	mov	eax, DWORD PTR tv4349[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN256@MatchChunk
$LN479@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42290[ebp], dx
	movzx	eax, WORD PTR ___c2$42290[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN256@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42288[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42290[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42288[ebp], edx
$LN256@MatchChunk:
; Line 4720
	mov	eax, DWORD PTR _c$42288[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN254@MatchChunk
; Line 4721
	cmp	DWORD PTR _c$42288[ebp], 13		; 0000000dH
	jne	$LN253@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4388[ebp], eax
	mov	DWORD PTR tv4389[ebp], ecx
	mov	edx, DWORD PTR tv4388[ebp]
	mov	eax, DWORD PTR tv4389[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jg	$LN253@MatchChunk
	jl	SHORT $LN480@MatchChunk
	mov	edx, DWORD PTR tv4388[ebp]
	mov	eax, DWORD PTR tv4389[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jae	$LN253@MatchChunk
$LN480@MatchChunk:
; Line 4724
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _c2$42296[ebp], dx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	movzx	eax, WORD PTR _c2$42296[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN252@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4426[ebp], eax
	mov	DWORD PTR tv4427[ebp], ecx
	mov	edx, DWORD PTR tv4426[ebp]
	mov	eax, DWORD PTR tv4427[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN481@MatchChunk
	mov	edx, DWORD PTR tv4426[ebp]
	mov	eax, DWORD PTR tv4427[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN252@MatchChunk
$LN481@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42298[ebp], dx
	movzx	eax, WORD PTR ___c2$42298[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN252@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	movzx	eax, WORD PTR _c2$42296[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42298[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	WORD PTR _c2$42296[ebp], dx
$LN252@MatchChunk:
; Line 4725
	movzx	eax, WORD PTR _c2$42296[ebp]
	cmp	eax, 10					; 0000000aH
	je	$LN253@MatchChunk
; Line 4726
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _c2$42296[ebp], dx
	movzx	eax, WORD PTR _c2$42296[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	$LN253@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv4488[ebp], eax
	mov	ecx, DWORD PTR tv4488[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	$LN253@MatchChunk
	jg	SHORT $LN482@MatchChunk
	mov	edx, DWORD PTR tv4488[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT $LN253@MatchChunk
$LN482@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42304[ebp], dx
	movzx	eax, WORD PTR ___c2$42304[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN253@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	movzx	eax, WORD PTR ___c2$42304[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _c2$42296[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	WORD PTR _c2$42296[ebp], dx
$LN253@MatchChunk:
; Line 4729
	jmp	SHORT $LN247@MatchChunk
$LN254@MatchChunk:
; Line 4730
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN247@MatchChunk:
; Line 4733
	jmp	$LN333@MatchChunk
$LN246@MatchChunk:
; Line 4738
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4530[ebp], eax
	mov	DWORD PTR tv4531[ebp], ecx
	mov	edx, DWORD PTR tv4530[ebp]
	mov	eax, DWORD PTR tv4531[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN245@MatchChunk
	jg	SHORT $LN483@MatchChunk
	mov	edx, DWORD PTR tv4530[ebp]
	mov	eax, DWORD PTR tv4531[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN245@MatchChunk
$LN483@MatchChunk:
; Line 4739
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4740
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4741
	jmp	$LN333@MatchChunk
$LN245@MatchChunk:
; Line 4744
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42313[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42313[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN244@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4575[ebp], eax
	mov	DWORD PTR tv4576[ebp], ecx
	mov	edx, DWORD PTR tv4575[ebp]
	mov	eax, DWORD PTR tv4576[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN484@MatchChunk
	mov	edx, DWORD PTR tv4575[ebp]
	mov	eax, DWORD PTR tv4576[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN244@MatchChunk
$LN484@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42315[ebp], dx
	movzx	eax, WORD PTR ___c2$42315[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN244@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42313[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42315[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42313[ebp], edx
$LN244@MatchChunk:
; Line 4745
	mov	eax, DWORD PTR _c$42313[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	mov	BYTE PTR _success$42319[ebp], al
; Line 4746
	cmp	DWORD PTR _opValue$[ebp], 0
	setne	al
	movsx	ecx, al
	movsx	edx, BYTE PTR _success$42319[ebp]
	xor	edx, ecx
	mov	BYTE PTR _success$42319[ebp], dl
; Line 4747
	movsx	eax, BYTE PTR _success$42319[ebp]
	test	eax, eax
	jne	SHORT $LN242@MatchChunk
; Line 4748
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN242@MatchChunk:
; Line 4751
	jmp	$LN333@MatchChunk
$LN241@MatchChunk:
; Line 4762
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4621[ebp], eax
	mov	DWORD PTR tv4622[ebp], ecx
	mov	edx, DWORD PTR tv4621[ebp]
	mov	eax, DWORD PTR tv4622[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN240@MatchChunk
	jg	SHORT $LN485@MatchChunk
	mov	edx, DWORD PTR tv4621[ebp]
	mov	eax, DWORD PTR tv4622[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN240@MatchChunk
$LN485@MatchChunk:
; Line 4763
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4764
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4765
	jmp	$LN333@MatchChunk
$LN240@MatchChunk:
; Line 4771
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42326[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN239@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4666[ebp], eax
	mov	DWORD PTR tv4667[ebp], ecx
	mov	edx, DWORD PTR tv4666[ebp]
	mov	eax, DWORD PTR tv4667[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN486@MatchChunk
	mov	edx, DWORD PTR tv4666[ebp]
	mov	eax, DWORD PTR tv4667[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN239@MatchChunk
$LN486@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42328[ebp], dx
	movzx	eax, WORD PTR ___c2$42328[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN239@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42328[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42326[ebp], edx
$LN239@MatchChunk:
; Line 4772
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR _sets$42332[ebp], edx
; Line 4773
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN237@MatchChunk
	jmp	$GC_Extend$42334
$LN237@MatchChunk:
; Line 4774
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN235@MatchChunk
	jmp	$GC_Control$42337
$LN235@MatchChunk:
; Line 4775
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN233@MatchChunk
	jmp	$GC_L$42340
$LN233@MatchChunk:
; Line 4776
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN231@MatchChunk
	jmp	$GC_V$42343
$LN231@MatchChunk:
; Line 4777
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN229@MatchChunk
	jmp	$GC_T$42346
$LN229@MatchChunk:
; Line 4778
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN227@MatchChunk
	jmp	$GC_V$42343
$LN227@MatchChunk:
; Line 4779
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT __unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$8
	jmp	$GC_T$42346
__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$8:
; Line 4780
	jmp	$GC_Extend$42334
$GC_L$42340:
; Line 4785
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4755[ebp], eax
	mov	DWORD PTR tv4756[ebp], ecx
	mov	edx, DWORD PTR tv4755[ebp]
	mov	eax, DWORD PTR tv4756[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN222@MatchChunk
	jg	SHORT __unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$9
	mov	edx, DWORD PTR tv4755[ebp]
	mov	eax, DWORD PTR tv4756[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN222@MatchChunk
__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$9:
	jmp	$GC_Done$42354
$LN222@MatchChunk:
; Line 4786
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42326[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN220@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4793[ebp], eax
	mov	DWORD PTR tv4794[ebp], ecx
	mov	edx, DWORD PTR tv4793[ebp]
	mov	eax, DWORD PTR tv4794[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN488@MatchChunk
	mov	edx, DWORD PTR tv4793[ebp]
	mov	eax, DWORD PTR tv4794[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN220@MatchChunk
$LN488@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42357[ebp], dx
	movzx	eax, WORD PTR ___c2$42357[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN220@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42357[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42326[ebp], edx
$LN220@MatchChunk:
; Line 4787
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN218@MatchChunk
	jmp	$GC_L$42340
$LN218@MatchChunk:
; Line 4788
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN217@MatchChunk
	jmp	$GC_V$42343
$LN217@MatchChunk:
; Line 4789
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN215@MatchChunk
	jmp	$GC_T$42346
$LN215@MatchChunk:
; Line 4790
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN213@MatchChunk
	jmp	$GC_V$42343
$LN213@MatchChunk:
; Line 4791
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42326[ebp], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$13
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv4884[ebp], eax
	mov	ecx, DWORD PTR tv4884[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$13
	jg	SHORT $LN489@MatchChunk
	mov	edx, DWORD PTR tv4884[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT __unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$13
$LN489@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42369[ebp], dx
	movzx	eax, WORD PTR ___c2$42369[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT __unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$13
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	movzx	eax, WORD PTR ___c2$42369[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _c$42326[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42326[ebp], edx
__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$13:
; Line 4792
	jmp	$GC_Extend$42334
$GC_V$42343:
; Line 4795
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4921[ebp], eax
	mov	DWORD PTR tv4922[ebp], ecx
	mov	edx, DWORD PTR tv4921[ebp]
	mov	eax, DWORD PTR tv4922[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN208@MatchChunk
	jg	SHORT __unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$14
	mov	edx, DWORD PTR tv4921[ebp]
	mov	eax, DWORD PTR tv4922[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN208@MatchChunk
__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$14:
	jmp	$GC_Done$42354
$LN208@MatchChunk:
; Line 4796
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42326[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN206@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv4959[ebp], eax
	mov	DWORD PTR tv4960[ebp], ecx
	mov	edx, DWORD PTR tv4959[ebp]
	mov	eax, DWORD PTR tv4960[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN491@MatchChunk
	mov	edx, DWORD PTR tv4959[ebp]
	mov	eax, DWORD PTR tv4960[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN206@MatchChunk
$LN491@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42377[ebp], dx
	movzx	eax, WORD PTR ___c2$42377[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN206@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42377[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42326[ebp], edx
$LN206@MatchChunk:
; Line 4797
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN204@MatchChunk
	jmp	$GC_V$42343
$LN204@MatchChunk:
; Line 4798
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN203@MatchChunk
	jmp	$GC_T$42346
$LN203@MatchChunk:
; Line 4799
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42326[ebp], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$16
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv5036[ebp], eax
	mov	ecx, DWORD PTR tv5036[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$16
	jg	SHORT $LN492@MatchChunk
	mov	edx, DWORD PTR tv5036[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT __unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$16
$LN492@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42385[ebp], dx
	movzx	eax, WORD PTR ___c2$42385[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT __unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$16
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	movzx	eax, WORD PTR ___c2$42385[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _c$42326[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42326[ebp], edx
__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$16:
; Line 4800
	jmp	$GC_Extend$42334
$GC_T$42346:
; Line 4803
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5073[ebp], eax
	mov	DWORD PTR tv5074[ebp], ecx
	mov	edx, DWORD PTR tv5073[ebp]
	mov	eax, DWORD PTR tv5074[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN198@MatchChunk
	jg	SHORT __unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$17
	mov	edx, DWORD PTR tv5073[ebp]
	mov	eax, DWORD PTR tv5074[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN198@MatchChunk
__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$17:
	jmp	$GC_Done$42354
$LN198@MatchChunk:
; Line 4804
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42326[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN196@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5111[ebp], eax
	mov	DWORD PTR tv5112[ebp], ecx
	mov	edx, DWORD PTR tv5111[ebp]
	mov	eax, DWORD PTR tv5112[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN494@MatchChunk
	mov	edx, DWORD PTR tv5111[ebp]
	mov	eax, DWORD PTR tv5112[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN196@MatchChunk
$LN494@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42393[ebp], dx
	movzx	eax, WORD PTR ___c2$42393[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN196@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42393[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42326[ebp], edx
$LN196@MatchChunk:
; Line 4805
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN194@MatchChunk
	jmp	$GC_T$42346
$LN194@MatchChunk:
; Line 4806
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42326[ebp], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	$GC_Extend$42334
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv5181[ebp], eax
	mov	ecx, DWORD PTR tv5181[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	$GC_Extend$42334
	jg	SHORT $LN495@MatchChunk
	mov	edx, DWORD PTR tv5181[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT $GC_Extend$42334
$LN495@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42399[ebp], dx
	movzx	eax, WORD PTR ___c2$42399[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $GC_Extend$42334
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	movzx	eax, WORD PTR ___c2$42399[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _c$42326[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42326[ebp], edx
$GC_Extend$42334:
; Line 4812
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5218[ebp], eax
	mov	DWORD PTR tv5219[ebp], ecx
	mov	edx, DWORD PTR tv5218[ebp]
	mov	eax, DWORD PTR tv5219[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN188@MatchChunk
	jg	SHORT $LN496@MatchChunk
	mov	edx, DWORD PTR tv5218[ebp]
	mov	eax, DWORD PTR tv5219[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN188@MatchChunk
$LN496@MatchChunk:
; Line 4813
	jmp	__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$19
$LN188@MatchChunk:
; Line 4815
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42326[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN187@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5256[ebp], eax
	mov	DWORD PTR tv5257[ebp], ecx
	mov	edx, DWORD PTR tv5256[ebp]
	mov	eax, DWORD PTR tv5257[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN497@MatchChunk
	mov	edx, DWORD PTR tv5256[ebp]
	mov	eax, DWORD PTR tv5257[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN187@MatchChunk
$LN497@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42409[ebp], dx
	movzx	eax, WORD PTR ___c2$42409[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN187@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42326[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42409[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42326[ebp], edx
$LN187@MatchChunk:
; Line 4816
	mov	esi, esp
	mov	eax, DWORD PTR _c$42326[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$42332[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _sets$42332[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	$LN185@MatchChunk
; Line 4817
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN184@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv5325[ebp], eax
	mov	ecx, DWORD PTR tv5325[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN184@MatchChunk
	jg	SHORT $LN498@MatchChunk
	mov	edx, DWORD PTR tv5325[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT $LN184@MatchChunk
$LN498@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	and	edx, -1024				; fffffc00H
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN184@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$LN184@MatchChunk:
; Line 4818
	jmp	SHORT __unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$19
$LN185@MatchChunk:
; Line 4820
	jmp	$GC_Extend$42334
__unwind$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$19:
; Line 4821
	jmp	$GC_Done$42354
$GC_Control$42337:
; Line 4826
	cmp	DWORD PTR _c$42326[ebp], 13		; 0000000dH
	jne	SHORT $GC_Done$42354
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5360[ebp], eax
	mov	DWORD PTR tv5361[ebp], ecx
	mov	edx, DWORD PTR tv5360[ebp]
	mov	eax, DWORD PTR tv5361[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jg	SHORT $GC_Done$42354
	jl	SHORT $LN499@MatchChunk
	mov	edx, DWORD PTR tv5360[ebp]
	mov	eax, DWORD PTR tv5361[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jae	SHORT $GC_Done$42354
$LN499@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $GC_Done$42354
; Line 4827
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$GC_Done$42354:
; Line 4831
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5397[ebp], eax
	mov	DWORD PTR tv5398[ebp], ecx
	mov	edx, DWORD PTR tv5397[ebp]
	mov	eax, DWORD PTR tv5398[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN181@MatchChunk
	jg	SHORT $LN500@MatchChunk
	mov	edx, DWORD PTR tv5397[ebp]
	mov	eax, DWORD PTR tv5398[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN181@MatchChunk
$LN500@MatchChunk:
; Line 4832
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
$LN181@MatchChunk:
; Line 4834
	jmp	$LN333@MatchChunk
$LN180@MatchChunk:
; Line 4841
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5410[ebp], eax
	mov	DWORD PTR tv5411[ebp], ecx
	mov	edx, DWORD PTR tv5410[ebp]
	mov	eax, DWORD PTR tv5411[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jg	SHORT $LN179@MatchChunk
	jl	SHORT $LN501@MatchChunk
	mov	edx, DWORD PTR tv5410[ebp]
	mov	eax, DWORD PTR tv5411[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+64]
	jae	SHORT $LN179@MatchChunk
$LN501@MatchChunk:
; Line 4842
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4843
	jmp	SHORT $LN178@MatchChunk
$LN179@MatchChunk:
; Line 4844
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4845
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+145], 1
$LN178@MatchChunk:
; Line 4847
	jmp	$LN333@MatchChunk
$LN177@MatchChunk:
; Line 4858
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5430[ebp], eax
	mov	DWORD PTR tv5431[ebp], ecx
	mov	edx, DWORD PTR tv5430[ebp]
	mov	eax, DWORD PTR tv5431[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN176@MatchChunk
	jg	SHORT $LN502@MatchChunk
	mov	edx, DWORD PTR tv5430[ebp]
	mov	eax, DWORD PTR tv5431[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN176@MatchChunk
$LN502@MatchChunk:
; Line 4859
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4860
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4861
	jmp	$LN333@MatchChunk
$LN176@MatchChunk:
; Line 4864
	mov	eax, DWORD PTR _opValue$[ebp]
	and	eax, 8388608				; 00800000H
	cmp	eax, 8388608				; 00800000H
	sete	cl
	mov	BYTE PTR _success$42425[ebp], cl
; Line 4865
	mov	eax, DWORD PTR _opValue$[ebp]
	and	eax, -8388609				; ff7fffffH
	mov	DWORD PTR _opValue$[ebp], eax
; Line 4866
	jle	SHORT $LN358@MatchChunk
	cmp	DWORD PTR _opValue$[ebp], 13		; 0000000dH
	jl	SHORT $LN359@MatchChunk
$LN358@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 565				; 00000235H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EM@MGNFFFFE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAL?$AAA?$AAS@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN359@MatchChunk:
; Line 4869
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42427[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42427[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN175@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5481[ebp], eax
	mov	DWORD PTR tv5482[ebp], ecx
	mov	edx, DWORD PTR tv5481[ebp]
	mov	eax, DWORD PTR tv5482[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN503@MatchChunk
	mov	edx, DWORD PTR tv5481[ebp]
	mov	eax, DWORD PTR tv5482[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN175@MatchChunk
$LN503@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42429[ebp], dx
	movzx	eax, WORD PTR ___c2$42429[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN175@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42427[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42429[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42427[ebp], edx
$LN175@MatchChunk:
; Line 4870
	cmp	DWORD PTR _c$42427[ebp], 256		; 00000100H
	jge	SHORT $LN173@MatchChunk
; Line 4871
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR _s8$42434[ebp], edx
; Line 4872
	mov	eax, DWORD PTR _c$42427[ebp]
	push	eax
	mov	ecx, DWORD PTR _s8$42434[ebp]
	call	?contains@Regex8BitSet@icu_56@@QAECH@Z	; icu_56::Regex8BitSet::contains
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN172@MatchChunk
; Line 4873
	movsx	eax, BYTE PTR _success$42425[ebp]
	test	eax, eax
	sete	cl
	mov	BYTE PTR _success$42425[ebp], cl
$LN172@MatchChunk:
; Line 4875
	jmp	SHORT $LN171@MatchChunk
$LN173@MatchChunk:
; Line 4876
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _s$42437[ebp], ecx
; Line 4877
	mov	esi, esp
	mov	eax, DWORD PTR _c$42427[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$42437[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _s$42437[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN171@MatchChunk
; Line 4878
	movsx	eax, BYTE PTR _success$42425[ebp]
	test	eax, eax
	sete	cl
	mov	BYTE PTR _success$42425[ebp], cl
$LN171@MatchChunk:
; Line 4881
	movsx	eax, BYTE PTR _success$42425[ebp]
	test	eax, eax
	jne	SHORT $LN169@MatchChunk
; Line 4882
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN169@MatchChunk:
; Line 4885
	jmp	$LN333@MatchChunk
$LN168@MatchChunk:
; Line 4892
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5538[ebp], eax
	mov	DWORD PTR tv5539[ebp], ecx
	mov	edx, DWORD PTR tv5538[ebp]
	mov	eax, DWORD PTR tv5539[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN167@MatchChunk
	jg	SHORT $LN504@MatchChunk
	mov	edx, DWORD PTR tv5538[ebp]
	mov	eax, DWORD PTR tv5539[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN167@MatchChunk
$LN504@MatchChunk:
; Line 4893
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4894
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4895
	jmp	$LN333@MatchChunk
$LN167@MatchChunk:
; Line 4898
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN360@MatchChunk
	cmp	DWORD PTR _opValue$[ebp], 13		; 0000000dH
	jl	SHORT $LN361@MatchChunk
$LN360@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 597				; 00000255H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EM@MGNFFFFE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAL?$AAA?$AAS@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN361@MatchChunk:
; Line 4901
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42445[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42445[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN166@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5587[ebp], eax
	mov	DWORD PTR tv5588[ebp], ecx
	mov	edx, DWORD PTR tv5587[ebp]
	mov	eax, DWORD PTR tv5588[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN505@MatchChunk
	mov	edx, DWORD PTR tv5587[ebp]
	mov	eax, DWORD PTR tv5588[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN166@MatchChunk
$LN505@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42447[ebp], dx
	movzx	eax, WORD PTR ___c2$42447[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN166@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42445[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42447[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42445[ebp], edx
$LN166@MatchChunk:
; Line 4902
	cmp	DWORD PTR _c$42445[ebp], 256		; 00000100H
	jge	SHORT $LN164@MatchChunk
; Line 4903
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR _s8$42452[ebp], edx
; Line 4904
	mov	eax, DWORD PTR _c$42445[ebp]
	push	eax
	mov	ecx, DWORD PTR _s8$42452[ebp]
	call	?contains@Regex8BitSet@icu_56@@QAECH@Z	; icu_56::Regex8BitSet::contains
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN163@MatchChunk
; Line 4905
	jmp	$LN333@MatchChunk
$LN163@MatchChunk:
; Line 4907
	jmp	SHORT $LN162@MatchChunk
$LN164@MatchChunk:
; Line 4908
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _s$42455[ebp], ecx
; Line 4909
	mov	esi, esp
	mov	eax, DWORD PTR _c$42445[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$42455[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _s$42455[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN162@MatchChunk
; Line 4910
	jmp	$LN333@MatchChunk
$LN162@MatchChunk:
; Line 4913
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4915
	jmp	$LN333@MatchChunk
$LN160@MatchChunk:
; Line 4920
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5644[ebp], eax
	mov	DWORD PTR tv5645[ebp], ecx
	mov	edx, DWORD PTR tv5644[ebp]
	mov	eax, DWORD PTR tv5645[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN159@MatchChunk
	jg	SHORT $LN506@MatchChunk
	mov	edx, DWORD PTR tv5644[ebp]
	mov	eax, DWORD PTR tv5645[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN159@MatchChunk
$LN506@MatchChunk:
; Line 4921
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4922
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4923
	jmp	$LN333@MatchChunk
$LN159@MatchChunk:
; Line 4926
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN362@MatchChunk
	mov	esi, esp
	mov	ecx, DWORD PTR _sets$[ebp]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _opValue$[ebp], eax
	jl	SHORT $LN363@MatchChunk
$LN362@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 625				; 00000271H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EM@LLNCNHEM@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAs?$AAe?$AAt?$AAs?$AA?9?$AA?$DO?$AAs@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN363@MatchChunk:
; Line 4930
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42462[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42462[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN158@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5696[ebp], eax
	mov	DWORD PTR tv5697[ebp], ecx
	mov	edx, DWORD PTR tv5696[ebp]
	mov	eax, DWORD PTR tv5697[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN507@MatchChunk
	mov	edx, DWORD PTR tv5696[ebp]
	mov	eax, DWORD PTR tv5697[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN158@MatchChunk
$LN507@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42464[ebp], dx
	movzx	eax, WORD PTR ___c2$42464[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN158@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42462[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42464[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42462[ebp], edx
$LN158@MatchChunk:
; Line 4931
	cmp	DWORD PTR _c$42462[ebp], 256		; 00000100H
	jge	SHORT $LN156@MatchChunk
; Line 4932
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR _s8$42469[ebp], edx
; Line 4933
	mov	eax, DWORD PTR _c$42462[ebp]
	push	eax
	mov	ecx, DWORD PTR _s8$42469[ebp]
	call	?contains@Regex8BitSet@icu_56@@QAECH@Z	; icu_56::Regex8BitSet::contains
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN155@MatchChunk
; Line 4935
	jmp	$LN333@MatchChunk
$LN155@MatchChunk:
; Line 4937
	jmp	SHORT $LN154@MatchChunk
$LN156@MatchChunk:
; Line 4938
	mov	esi, esp
	mov	eax, DWORD PTR _opValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$[ebp]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$42472[ebp], eax
; Line 4939
	mov	esi, esp
	mov	eax, DWORD PTR _c$42462[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$42472[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _s$42472[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN154@MatchChunk
; Line 4941
	jmp	$LN333@MatchChunk
$LN154@MatchChunk:
; Line 4946
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4948
	jmp	$LN333@MatchChunk
$LN152@MatchChunk:
; Line 4954
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5754[ebp], eax
	mov	DWORD PTR tv5755[ebp], ecx
	mov	edx, DWORD PTR tv5754[ebp]
	mov	eax, DWORD PTR tv5755[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN151@MatchChunk
	jg	SHORT $LN508@MatchChunk
	mov	edx, DWORD PTR tv5754[ebp]
	mov	eax, DWORD PTR tv5755[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN151@MatchChunk
$LN508@MatchChunk:
; Line 4956
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4957
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4958
	jmp	$LN333@MatchChunk
$LN151@MatchChunk:
; Line 4963
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42479[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42479[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN150@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5799[ebp], eax
	mov	DWORD PTR tv5800[ebp], ecx
	mov	edx, DWORD PTR tv5799[ebp]
	mov	eax, DWORD PTR tv5800[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN509@MatchChunk
	mov	edx, DWORD PTR tv5799[ebp]
	mov	eax, DWORD PTR tv5800[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN150@MatchChunk
$LN509@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42481[ebp], dx
	movzx	eax, WORD PTR ___c2$42481[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN150@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42479[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42481[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42479[ebp], edx
$LN150@MatchChunk:
; Line 4964
	mov	eax, DWORD PTR _c$42479[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN148@MatchChunk
; Line 4966
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4967
	jmp	$LN333@MatchChunk
$LN148@MatchChunk:
; Line 4970
	jmp	$LN333@MatchChunk
$LN147@MatchChunk:
; Line 4976
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5845[ebp], eax
	mov	DWORD PTR tv5846[ebp], ecx
	mov	edx, DWORD PTR tv5845[ebp]
	mov	eax, DWORD PTR tv5846[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN146@MatchChunk
	jg	SHORT $LN510@MatchChunk
	mov	edx, DWORD PTR tv5845[ebp]
	mov	eax, DWORD PTR tv5846[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN146@MatchChunk
$LN510@MatchChunk:
; Line 4978
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 4979
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 4980
	jmp	$LN333@MatchChunk
$LN146@MatchChunk:
; Line 4986
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42490[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42490[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN145@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5890[ebp], eax
	mov	DWORD PTR tv5891[ebp], ecx
	mov	edx, DWORD PTR tv5890[ebp]
	mov	eax, DWORD PTR tv5891[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN511@MatchChunk
	mov	edx, DWORD PTR tv5890[ebp]
	mov	eax, DWORD PTR tv5891[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN145@MatchChunk
$LN511@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42492[ebp], dx
	movzx	eax, WORD PTR ___c2$42492[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN145@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42490[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42492[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42490[ebp], edx
$LN145@MatchChunk:
; Line 4987
	cmp	DWORD PTR _c$42490[ebp], 13		; 0000000dH
	jne	$LN143@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5928[ebp], eax
	mov	DWORD PTR tv5929[ebp], ecx
	mov	edx, DWORD PTR tv5928[ebp]
	mov	eax, DWORD PTR tv5929[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jg	$LN143@MatchChunk
	jl	SHORT $LN512@MatchChunk
	mov	edx, DWORD PTR tv5928[ebp]
	mov	eax, DWORD PTR tv5929[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jae	$LN143@MatchChunk
$LN512@MatchChunk:
; Line 4989
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	cmp	edx, 10					; 0000000aH
	jne	$LN143@MatchChunk
; Line 4990
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	and	edx, -1024				; fffffc00H
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	eax, DWORD PTR [eax+4]
	adc	eax, 0
	mov	esi, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], eax
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN364@MatchChunk
	mov	DWORD PTR tv1562[ebp], 1
	jmp	SHORT $LN365@MatchChunk
$LN364@MatchChunk:
	mov	DWORD PTR tv1562[ebp], 0
$LN365@MatchChunk:
	cmp	DWORD PTR tv1562[ebp], 0
	je	$LN143@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv5981[ebp], eax
	mov	DWORD PTR tv5982[ebp], ecx
	mov	edx, DWORD PTR tv5981[ebp]
	mov	eax, DWORD PTR tv5982[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN513@MatchChunk
	mov	edx, DWORD PTR tv5981[ebp]
	mov	eax, DWORD PTR tv5982[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN143@MatchChunk
$LN513@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN143@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$LN143@MatchChunk:
; Line 4994
	jmp	$LN333@MatchChunk
$LN140@MatchChunk:
; Line 5001
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6017[ebp], eax
	mov	DWORD PTR tv6018[ebp], ecx
	mov	edx, DWORD PTR tv6017[ebp]
	mov	eax, DWORD PTR tv6018[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN139@MatchChunk
	jg	SHORT $LN514@MatchChunk
	mov	edx, DWORD PTR tv6017[ebp]
	mov	eax, DWORD PTR tv6018[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN139@MatchChunk
$LN514@MatchChunk:
; Line 5003
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 5004
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 5005
	jmp	$LN333@MatchChunk
$LN139@MatchChunk:
; Line 5010
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42502[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42502[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN138@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6062[ebp], eax
	mov	DWORD PTR tv6063[ebp], ecx
	mov	edx, DWORD PTR tv6062[ebp]
	mov	eax, DWORD PTR tv6063[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN515@MatchChunk
	mov	edx, DWORD PTR tv6062[ebp]
	mov	eax, DWORD PTR tv6063[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN138@MatchChunk
$LN515@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42504[ebp], dx
	movzx	eax, WORD PTR ___c2$42504[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN138@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42502[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42504[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42502[ebp], edx
$LN138@MatchChunk:
; Line 5011
	cmp	DWORD PTR _c$42502[ebp], 10		; 0000000aH
	jne	SHORT $LN136@MatchChunk
; Line 5013
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN136@MatchChunk:
; Line 5016
	jmp	$LN333@MatchChunk
$LN135@MatchChunk:
; Line 5020
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 5021
	jmp	$LN333@MatchChunk
$LN134@MatchChunk:
; Line 5024
	mov	BYTE PTR _isMatch$[ebp], 0
; Line 5025
	jmp	$breakFromLoop$42179
$LN132@MatchChunk:
; Line 5028
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+16]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _opValue$[ebp], eax
	jl	SHORT $LN366@MatchChunk
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 727				; 000002d7H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FC@OBCJPAPE@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?9?$AA?$DO?$AAf?$AAC?$AAo?$AAm?$AAp?$AAi?$AAl?$AAe?$AAd?$AAP?$AAa?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN366@MatchChunk:
; Line 5029
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 5030
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 5031
	jmp	$LN333@MatchChunk
$LN131@MatchChunk:
; Line 5039
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN367@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+16]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _opValue$[ebp], eax
	jl	SHORT $LN368@MatchChunk
$LN367@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 738				; 000002e2H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1HA@LNOJICFB@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN368@MatchChunk:
; Line 5040
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-8]
	mov	DWORD PTR _stoOp$42517[ebp], edx
; Line 5041
	mov	eax, DWORD PTR _stoOp$42517[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 35					; 00000023H
	je	SHORT $LN369@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 740				; 000002e4H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FK@GMJNKEFK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAo?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN369@MatchChunk:
; Line 5042
	mov	eax, DWORD PTR _stoOp$42517[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _frameLoc$42521[ebp], eax
; Line 5043
	jl	SHORT $LN370@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _frameLoc$42521[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN371@MatchChunk
$LN370@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 742				; 000002e6H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@PNACHIHF@?$AAf?$AAr?$AAa?$AAm?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAf?$AAr?$AAa?$AAm?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN371@MatchChunk:
; Line 5044
	mov	eax, DWORD PTR _frameLoc$42521[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _prevInputIdx$42523[ebp], edx
; Line 5045
	mov	eax, DWORD PTR _prevInputIdx$42523[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv6168[ebp], eax
	mov	DWORD PTR tv6168[ebp+4], edx
	mov	DWORD PTR tv6171[ebp], ecx
	mov	edx, DWORD PTR tv6171[ebp]
	mov	eax, DWORD PTR tv6168[ebp+4]
	cmp	eax, DWORD PTR [edx+4]
	jl	SHORT $LN372@MatchChunk
	jg	SHORT $LN516@MatchChunk
	mov	ecx, DWORD PTR tv6171[ebp]
	mov	edx, DWORD PTR tv6168[ebp]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN372@MatchChunk
$LN516@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 744				; 000002e8H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DM@GCGJLILJ@?$AAp?$AAr?$AAe?$AAv?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN372@MatchChunk:
; Line 5046
	mov	eax, DWORD PTR _prevInputIdx$42523[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv6189[ebp], eax
	mov	DWORD PTR tv6189[ebp+4], edx
	mov	DWORD PTR tv6192[ebp], ecx
	mov	edx, DWORD PTR tv6192[ebp]
	mov	eax, DWORD PTR tv6189[ebp+4]
	cmp	eax, DWORD PTR [edx+4]
	jg	SHORT $LN130@MatchChunk
	jl	SHORT $LN517@MatchChunk
	mov	ecx, DWORD PTR tv6192[ebp]
	mov	edx, DWORD PTR tv6189[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN130@MatchChunk
$LN517@MatchChunk:
; Line 5048
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 5049
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 5050
	mov	eax, DWORD PTR _frameLoc$42521[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+16], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+20], edx
$LN130@MatchChunk:
; Line 5055
	jmp	$LN333@MatchChunk
$LN129@MatchChunk:
; Line 5059
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN373@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 2
	cmp	DWORD PTR _opValue$[ebp], ecx
	jl	SHORT $LN374@MatchChunk
$LN373@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 758				; 000002f6H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@MCNNJIPP@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN374@MatchChunk:
; Line 5060
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+eax*8+16], 0
	mov	DWORD PTR [ecx+eax*8+20], 0
; Line 5064
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _instrOperandLoc$42529[ebp], ecx
; Line 5065
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 3
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5066
	mov	eax, DWORD PTR _instrOperandLoc$42529[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*8+4]
	and	eax, 0
	mov	DWORD PTR _loopLoc$42531[ebp], edx
; Line 5067
	mov	eax, DWORD PTR _instrOperandLoc$42529[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+8]
	mov	DWORD PTR _minCount$42532[ebp], edx
; Line 5068
	mov	eax, DWORD PTR _instrOperandLoc$42529[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _maxCount$42534[ebp], edx
; Line 5069
	cmp	DWORD PTR _minCount$42532[ebp], 0
	jge	SHORT $LN375@MatchChunk
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 768				; 00000300H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BI@LHJBDJG@?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN375@MatchChunk:
; Line 5070
	mov	eax, DWORD PTR _maxCount$42534[ebp]
	cmp	eax, DWORD PTR _minCount$42532[ebp]
	jge	SHORT $LN376@MatchChunk
	cmp	DWORD PTR _maxCount$42534[ebp], -1
	je	SHORT $LN376@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 769				; 00000301H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EG@KKDBMEOE@?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN376@MatchChunk:
; Line 5071
	mov	eax, DWORD PTR _loopLoc$42531[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv6271[ebp], eax
	mov	DWORD PTR tv6271[ebp+4], edx
	mov	DWORD PTR tv6274[ebp], ecx
	mov	edx, DWORD PTR tv6274[ebp]
	mov	eax, DWORD PTR tv6271[ebp+4]
	cmp	eax, DWORD PTR [edx+12]
	jg	SHORT $LN377@MatchChunk
	jl	SHORT $LN518@MatchChunk
	mov	ecx, DWORD PTR tv6274[ebp]
	mov	edx, DWORD PTR tv6271[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN377@MatchChunk
$LN518@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 770				; 00000302H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CK@KCCKOHDA@?$AAl?$AAo?$AAo?$AAp?$AAL?$AAo?$AAc?$AA?$DO?$AA?$DN?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN377@MatchChunk:
; Line 5073
	cmp	DWORD PTR _minCount$42532[ebp], 0
	jne	SHORT $LN128@MatchChunk
; Line 5074
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _loopLoc$42531[ebp]
	add	eax, 1
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
$LN128@MatchChunk:
; Line 5076
	cmp	DWORD PTR _maxCount$42534[ebp], -1
	jne	SHORT $LN127@MatchChunk
; Line 5077
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+24], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+28], edx
	jmp	SHORT $LN126@MatchChunk
$LN127@MatchChunk:
; Line 5078
	cmp	DWORD PTR _maxCount$42534[ebp], 0
	jne	SHORT $LN126@MatchChunk
; Line 5079
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN126@MatchChunk:
; Line 5082
	jmp	$LN333@MatchChunk
$LN124@MatchChunk:
; Line 5086
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN378@MatchChunk
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx+8]
	sub	esi, 2
	mov	ecx, DWORD PTR [ecx+12]
	sbb	ecx, 0
	mov	DWORD PTR tv6324[ebp], eax
	mov	DWORD PTR tv6324[ebp+4], edx
	mov	DWORD PTR tv6327[ebp], esi
	mov	DWORD PTR tv6327[ebp+4], ecx
	mov	edx, DWORD PTR tv6324[ebp+4]
	cmp	edx, DWORD PTR tv6327[ebp+4]
	jl	SHORT $LN379@MatchChunk
	jg	SHORT $LN378@MatchChunk
	mov	eax, DWORD PTR tv6324[ebp]
	cmp	eax, DWORD PTR tv6327[ebp]
	jb	SHORT $LN379@MatchChunk
$LN378@MatchChunk:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 785				; 00000311H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EK@LNFOAHJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN379@MatchChunk:
; Line 5087
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _initOp$42546[ebp], edx
; Line 5088
	mov	eax, DWORD PTR _initOp$42546[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 25					; 00000019H
	je	SHORT $LN380@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 787				; 00000313H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FG@JDEBOKCN@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAi?$AAt?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN380@MatchChunk:
; Line 5089
	mov	eax, DWORD PTR _initOp$42546[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _fp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _pCounter$42550[ebp], edx
; Line 5090
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _minCount$42551[ebp], edx
; Line 5091
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _maxCount$42553[ebp], edx
; Line 5092
	mov	eax, DWORD PTR _pCounter$42550[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _pCounter$42550[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 5093
	mov	eax, DWORD PTR _maxCount$42553[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _pCounter$42550[ebp]
	mov	DWORD PTR tv6363[ebp], edx
	mov	DWORD PTR tv6364[ebp], eax
	mov	DWORD PTR tv6364[ebp+4], ecx
	mov	eax, DWORD PTR tv6363[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR tv6364[ebp+4]
	jb	$LN123@MatchChunk
	ja	SHORT $LN520@MatchChunk
	mov	edx, DWORD PTR tv6363[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv6364[ebp]
	jb	SHORT $LN123@MatchChunk
$LN520@MatchChunk:
	cmp	DWORD PTR _maxCount$42553[ebp], -1
	je	SHORT $LN123@MatchChunk
; Line 5094
	mov	eax, DWORD PTR _maxCount$42553[ebp]
	cdq
	mov	ecx, DWORD PTR _pCounter$42550[ebp]
	mov	DWORD PTR tv6380[ebp], ecx
	mov	DWORD PTR tv6381[ebp], eax
	mov	DWORD PTR tv6381[ebp+4], edx
	mov	edx, DWORD PTR tv6380[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv6381[ebp]
	jne	SHORT $LN521@MatchChunk
	mov	ecx, DWORD PTR tv6380[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR tv6381[ebp+4]
	je	SHORT $LN381@MatchChunk
$LN521@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 793				; 00000319H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CM@ECBPPCBA@?$AA?$CK?$AAp?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN381@MatchChunk:
; Line 5095
	jmp	$LN333@MatchChunk
$LN123@MatchChunk:
; Line 5097
	mov	eax, DWORD PTR _minCount$42551[ebp]
	cdq
	mov	ecx, DWORD PTR _pCounter$42550[ebp]
	mov	DWORD PTR tv6400[ebp], ecx
	mov	DWORD PTR tv6401[ebp], eax
	mov	DWORD PTR tv6401[ebp+4], edx
	mov	edx, DWORD PTR tv6400[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR tv6401[ebp+4]
	jl	$LN122@MatchChunk
	jg	SHORT $LN522@MatchChunk
	mov	ecx, DWORD PTR tv6400[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv6401[ebp]
	jb	$LN122@MatchChunk
$LN522@MatchChunk:
; Line 5098
	cmp	DWORD PTR _maxCount$42553[ebp], -1
	jne	SHORT $LN121@MatchChunk
; Line 5101
	mov	eax, DWORD PTR _initOp$42546[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _fp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _pLastInputIdx$42561[ebp], edx
; Line 5102
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _pLastInputIdx$42561[ebp]
	mov	DWORD PTR tv6414[ebp], eax
	mov	DWORD PTR tv6415[ebp], ecx
	mov	edx, DWORD PTR tv6414[ebp]
	mov	eax, DWORD PTR tv6415[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN120@MatchChunk
	mov	edx, DWORD PTR tv6414[ebp]
	mov	eax, DWORD PTR tv6415[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN120@MatchChunk
; Line 5103
	jmp	$LN333@MatchChunk
; Line 5104
	jmp	SHORT $LN121@MatchChunk
$LN120@MatchChunk:
; Line 5105
	mov	eax, DWORD PTR _pLastInputIdx$42561[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN121@MatchChunk:
; Line 5108
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
$LN122@MatchChunk:
; Line 5110
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 4
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 5112
	jmp	$LN333@MatchChunk
$LN118@MatchChunk:
; Line 5117
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN382@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 2
	cmp	DWORD PTR _opValue$[ebp], ecx
	jl	SHORT $LN383@MatchChunk
$LN382@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 816				; 00000330H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@MCNNJIPP@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN383@MatchChunk:
; Line 5118
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+eax*8+16], 0
	mov	DWORD PTR [ecx+eax*8+20], 0
; Line 5122
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _instrOperandLoc$42566[ebp], ecx
; Line 5123
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 3
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5124
	mov	eax, DWORD PTR _instrOperandLoc$42566[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*8+4]
	and	eax, 0
	mov	DWORD PTR _loopLoc$42568[ebp], edx
; Line 5125
	mov	eax, DWORD PTR _instrOperandLoc$42566[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+8]
	mov	DWORD PTR _minCount$42569[ebp], edx
; Line 5126
	mov	eax, DWORD PTR _instrOperandLoc$42566[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _maxCount$42571[ebp], edx
; Line 5127
	cmp	DWORD PTR _minCount$42569[ebp], 0
	jge	SHORT $LN384@MatchChunk
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 826				; 0000033aH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BI@LHJBDJG@?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN384@MatchChunk:
; Line 5128
	mov	eax, DWORD PTR _maxCount$42571[ebp]
	cmp	eax, DWORD PTR _minCount$42569[ebp]
	jge	SHORT $LN385@MatchChunk
	cmp	DWORD PTR _maxCount$42571[ebp], -1
	je	SHORT $LN385@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 827				; 0000033bH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EG@KKDBMEOE@?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DO?$AA?$DN?$AAm?$AAi?$AAn?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN385@MatchChunk:
; Line 5129
	mov	eax, DWORD PTR _loopLoc$42568[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv6494[ebp], eax
	mov	DWORD PTR tv6494[ebp+4], edx
	mov	DWORD PTR tv6497[ebp], ecx
	mov	edx, DWORD PTR tv6497[ebp]
	mov	eax, DWORD PTR tv6494[ebp+4]
	cmp	eax, DWORD PTR [edx+12]
	jg	SHORT $LN386@MatchChunk
	jl	SHORT $LN523@MatchChunk
	mov	ecx, DWORD PTR tv6497[ebp]
	mov	edx, DWORD PTR tv6494[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN386@MatchChunk
$LN523@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 828				; 0000033cH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CI@HFENNECI@?$AAl?$AAo?$AAo?$AAp?$AAL?$AAo?$AAc?$AA?$DO?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN386@MatchChunk:
; Line 5130
	cmp	DWORD PTR _maxCount$42571[ebp], -1
	jne	SHORT $LN117@MatchChunk
; Line 5131
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+24], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+28], edx
$LN117@MatchChunk:
; Line 5134
	cmp	DWORD PTR _minCount$42569[ebp], 0
	jne	SHORT $LN116@MatchChunk
; Line 5135
	cmp	DWORD PTR _maxCount$42571[ebp], 0
	je	SHORT $LN115@MatchChunk
; Line 5136
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
$LN115@MatchChunk:
; Line 5138
	mov	eax, DWORD PTR _loopLoc$42568[ebp]
	add	eax, 1
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
$LN116@MatchChunk:
; Line 5141
	jmp	$LN333@MatchChunk
$LN114@MatchChunk:
; Line 5146
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN387@MatchChunk
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx+8]
	sub	esi, 2
	mov	ecx, DWORD PTR [ecx+12]
	sbb	ecx, 0
	mov	DWORD PTR tv6547[ebp], eax
	mov	DWORD PTR tv6547[ebp+4], edx
	mov	DWORD PTR tv6550[ebp], esi
	mov	DWORD PTR tv6550[ebp+4], ecx
	mov	edx, DWORD PTR tv6547[ebp+4]
	cmp	edx, DWORD PTR tv6550[ebp+4]
	jl	SHORT $LN388@MatchChunk
	jg	SHORT $LN387@MatchChunk
	mov	eax, DWORD PTR tv6547[ebp]
	cmp	eax, DWORD PTR tv6550[ebp]
	jb	SHORT $LN388@MatchChunk
$LN387@MatchChunk:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 845				; 0000034dH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EK@LNFOAHJK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN388@MatchChunk:
; Line 5147
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _initOp$42581[ebp], edx
; Line 5148
	mov	eax, DWORD PTR _initOp$42581[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 26					; 0000001aH
	je	SHORT $LN389@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 847				; 0000034fH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FM@LKDMBKJF@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAi?$AAt?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN389@MatchChunk:
; Line 5149
	mov	eax, DWORD PTR _initOp$42581[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _fp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _pCounter$42585[ebp], edx
; Line 5150
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _minCount$42586[ebp], edx
; Line 5151
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _maxCount$42588[ebp], edx
; Line 5153
	mov	eax, DWORD PTR _pCounter$42585[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _pCounter$42585[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 5154
	mov	eax, DWORD PTR _maxCount$42588[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _pCounter$42585[ebp]
	mov	DWORD PTR tv6586[ebp], edx
	mov	DWORD PTR tv6587[ebp], eax
	mov	DWORD PTR tv6587[ebp+4], ecx
	mov	eax, DWORD PTR tv6586[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR tv6587[ebp+4]
	jb	$LN113@MatchChunk
	ja	SHORT $LN525@MatchChunk
	mov	edx, DWORD PTR tv6586[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv6587[ebp]
	jb	SHORT $LN113@MatchChunk
$LN525@MatchChunk:
	cmp	DWORD PTR _maxCount$42588[ebp], -1
	je	SHORT $LN113@MatchChunk
; Line 5158
	mov	eax, DWORD PTR _maxCount$42588[ebp]
	cdq
	mov	ecx, DWORD PTR _pCounter$42585[ebp]
	mov	DWORD PTR tv6603[ebp], ecx
	mov	DWORD PTR tv6604[ebp], eax
	mov	DWORD PTR tv6604[ebp+4], edx
	mov	edx, DWORD PTR tv6603[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv6604[ebp]
	jne	SHORT $LN526@MatchChunk
	mov	ecx, DWORD PTR tv6603[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR tv6604[ebp+4]
	je	SHORT $LN390@MatchChunk
$LN526@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 857				; 00000359H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CM@ECBPPCBA@?$AA?$CK?$AAp?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN390@MatchChunk:
; Line 5159
	jmp	$LN333@MatchChunk
$LN113@MatchChunk:
; Line 5162
	mov	eax, DWORD PTR _minCount$42586[ebp]
	cdq
	mov	ecx, DWORD PTR _pCounter$42585[ebp]
	mov	DWORD PTR tv6623[ebp], ecx
	mov	DWORD PTR tv6624[ebp], eax
	mov	DWORD PTR tv6624[ebp+4], edx
	mov	edx, DWORD PTR tv6623[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR tv6624[ebp+4]
	jg	SHORT $LN112@MatchChunk
	jl	SHORT $LN527@MatchChunk
	mov	ecx, DWORD PTR tv6623[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv6624[ebp]
	jae	SHORT $LN112@MatchChunk
$LN527@MatchChunk:
; Line 5165
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 4
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 5166
	jmp	$LN111@MatchChunk
$LN112@MatchChunk:
; Line 5171
	cmp	DWORD PTR _maxCount$42588[ebp], -1
	jne	SHORT $LN110@MatchChunk
; Line 5172
	mov	eax, DWORD PTR _initOp$42581[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR _fp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _pLastInputIdx$42597[ebp], edx
; Line 5173
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _pLastInputIdx$42597[ebp]
	mov	DWORD PTR tv6646[ebp], eax
	mov	DWORD PTR tv6647[ebp], ecx
	mov	edx, DWORD PTR tv6646[ebp]
	mov	eax, DWORD PTR tv6647[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN109@MatchChunk
	mov	edx, DWORD PTR tv6646[ebp]
	mov	eax, DWORD PTR tv6647[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN109@MatchChunk
; Line 5174
	jmp	$LN333@MatchChunk
$LN109@MatchChunk:
; Line 5176
	mov	eax, DWORD PTR _pLastInputIdx$42597[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN110@MatchChunk:
; Line 5183
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 4
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
$LN111@MatchChunk:
; Line 5186
	jmp	$LN333@MatchChunk
$LN108@MatchChunk:
; Line 5189
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN391@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	cmp	edx, DWORD PTR [ecx+104]
	jl	SHORT $LN392@MatchChunk
$LN391@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 888				; 00000378H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FM@DFPIGJHK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN392@MatchChunk:
; Line 5190
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+156]
	mov	esi, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR [ecx+esi*8], eax
	mov	DWORD PTR [ecx+esi*8+4], edx
; Line 5191
	jmp	$LN333@MatchChunk
$LN107@MatchChunk:
; Line 5195
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN393@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	cmp	edx, DWORD PTR [ecx+104]
	jl	SHORT $LN394@MatchChunk
$LN393@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 894				; 0000037eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FM@DFPIGJHK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN394@MatchChunk:
; Line 5196
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _newStackSize$42603[ebp], eax
; Line 5197
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _newStackSize$42603[ebp], eax
	jle	SHORT $LN395@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 896				; 00000380H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DO@CCHGCLKC@?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAS?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN395@MatchChunk:
; Line 5198
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?getBuffer@UVector64@icu_56@@QBEPA_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _newStackSize$42603[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 3
	sub	edx, ecx
	mov	DWORD PTR _newFP$42606[ebp], edx
; Line 5199
	mov	eax, DWORD PTR _newFP$42606[ebp]
	cmp	eax, DWORD PTR _fp$[ebp]
	jne	SHORT $LN106@MatchChunk
; Line 5200
	jmp	$LN333@MatchChunk
$LN106@MatchChunk:
; Line 5203
	mov	DWORD PTR _i$42609[ebp], 0
	jmp	SHORT $LN105@MatchChunk
$LN104@MatchChunk:
	mov	eax, DWORD PTR _i$42609[ebp]
	add	eax, 1
	mov	DWORD PTR _i$42609[ebp], eax
$LN105@MatchChunk:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$42609[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN103@MatchChunk
; Line 5204
	mov	eax, DWORD PTR _i$42609[ebp]
	mov	ecx, DWORD PTR _newFP$42606[ebp]
	mov	edx, DWORD PTR _i$42609[ebp]
	mov	esi, DWORD PTR _fp$[ebp]
	mov	edi, DWORD PTR [esi+edx*8]
	mov	DWORD PTR [ecx+eax*8], edi
	mov	edx, DWORD PTR [esi+edx*8+4]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 5205
	jmp	SHORT $LN104@MatchChunk
$LN103@MatchChunk:
; Line 5206
	mov	eax, DWORD PTR _newFP$42606[ebp]
	mov	DWORD PTR _fp$[ebp], eax
; Line 5207
	mov	esi, esp
	mov	eax, DWORD PTR _newStackSize$42603[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+148]
	call	DWORD PTR __imp_?setSize@UVector64@icu_56@@QAEXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5209
	jmp	$LN333@MatchChunk
$LN102@MatchChunk:
; Line 5213
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _opValue$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN396@MatchChunk
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 912				; 00000390H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CK@IOFPLLPJ@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN396@MatchChunk:
; Line 5214
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _groupStartIdx$42617[ebp], edx
	mov	eax, DWORD PTR [ecx+eax*8+20]
	mov	DWORD PTR _groupStartIdx$42617[ebp+4], eax
; Line 5215
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _groupEndIdx$42618[ebp], edx
	mov	eax, DWORD PTR [ecx+eax*8+28]
	mov	DWORD PTR _groupEndIdx$42618[ebp+4], eax
; Line 5216
	mov	eax, DWORD PTR _groupStartIdx$42617[ebp+4]
	cmp	eax, DWORD PTR _groupEndIdx$42618[ebp+4]
	jl	SHORT $LN397@MatchChunk
	jg	SHORT $LN528@MatchChunk
	mov	ecx, DWORD PTR _groupStartIdx$42617[ebp]
	cmp	ecx, DWORD PTR _groupEndIdx$42618[ebp]
	jbe	SHORT $LN397@MatchChunk
$LN528@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 915				; 00000393H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DK@MGMFMKKP@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAS?$AAt?$AAa?$AAr?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAg?$AAr?$AAo?$AAu?$AAp?$AAE?$AAn?$AAd?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN397@MatchChunk:
; Line 5217
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _inputIndex$42620[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _inputIndex$42620[ebp+4], edx
; Line 5218
	cmp	DWORD PTR _groupStartIdx$42617[ebp+4], 0
	jg	SHORT $LN101@MatchChunk
	jl	SHORT $LN529@MatchChunk
	cmp	DWORD PTR _groupStartIdx$42617[ebp], 0
	jae	SHORT $LN101@MatchChunk
$LN529@MatchChunk:
; Line 5220
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 5221
	jmp	$LN333@MatchChunk
$LN101@MatchChunk:
; Line 5223
	mov	BYTE PTR _success$42623[ebp], 1
; Line 5224
	mov	eax, DWORD PTR _groupStartIdx$42617[ebp]
	mov	DWORD PTR _groupIndex$42624[ebp], eax
	mov	ecx, DWORD PTR _groupStartIdx$42617[ebp+4]
	mov	DWORD PTR _groupIndex$42624[ebp+4], ecx
	jmp	SHORT $LN100@MatchChunk
$LN99@MatchChunk:
	mov	eax, DWORD PTR _groupIndex$42624[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _groupIndex$42624[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _groupIndex$42624[ebp], eax
	mov	DWORD PTR _groupIndex$42624[ebp+4], ecx
	mov	edx, DWORD PTR _inputIndex$42620[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _inputIndex$42620[ebp+4]
	adc	eax, 0
	mov	DWORD PTR _inputIndex$42620[ebp], edx
	mov	DWORD PTR _inputIndex$42620[ebp+4], eax
$LN100@MatchChunk:
	mov	eax, DWORD PTR _groupIndex$42624[ebp+4]
	cmp	eax, DWORD PTR _groupEndIdx$42618[ebp+4]
	jg	$LN98@MatchChunk
	jl	SHORT $LN530@MatchChunk
	mov	ecx, DWORD PTR _groupIndex$42624[ebp]
	cmp	ecx, DWORD PTR _groupEndIdx$42618[ebp]
	jae	$LN98@MatchChunk
$LN530@MatchChunk:
; Line 5225
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv6821[ebp], eax
	mov	ecx, DWORD PTR tv6821[ebp]
	mov	edx, DWORD PTR _inputIndex$42620[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jl	SHORT $LN97@MatchChunk
	jg	SHORT $LN531@MatchChunk
	mov	eax, DWORD PTR tv6821[ebp]
	mov	ecx, DWORD PTR _inputIndex$42620[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jb	SHORT $LN97@MatchChunk
$LN531@MatchChunk:
; Line 5226
	mov	BYTE PTR _success$42623[ebp], 0
; Line 5227
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 5228
	jmp	SHORT $LN98@MatchChunk
$LN97@MatchChunk:
; Line 5230
	push	0
	push	2
	mov	eax, DWORD PTR _groupIndex$42624[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _groupIndex$42624[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _inputBuf$[ebp]
	movzx	esi, WORD PTR [edx+eax]
	push	0
	push	2
	mov	eax, DWORD PTR _inputIndex$42620[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _inputIndex$42620[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _inputBuf$[ebp]
	movzx	eax, WORD PTR [edx+eax]
	cmp	esi, eax
	je	SHORT $LN96@MatchChunk
; Line 5231
	mov	BYTE PTR _success$42623[ebp], 0
; Line 5232
	jmp	SHORT $LN98@MatchChunk
$LN96@MatchChunk:
; Line 5234
	jmp	$LN99@MatchChunk
$LN98@MatchChunk:
; Line 5235
	movsx	eax, BYTE PTR _success$42623[ebp]
	test	eax, eax
	je	SHORT $LN95@MatchChunk
; Line 5236
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _inputIndex$42620[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _inputIndex$42620[ebp+4]
	mov	DWORD PTR [eax+4], edx
; Line 5237
	jmp	SHORT $LN94@MatchChunk
$LN95@MatchChunk:
; Line 5238
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN94@MatchChunk:
; Line 5241
	jmp	$LN333@MatchChunk
$LN93@MatchChunk:
; Line 5245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _opValue$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN398@MatchChunk
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 944				; 000003b0H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CK@IOFPLLPJ@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN398@MatchChunk:
; Line 5246
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _groupStartIdx$42635[ebp], edx
	mov	eax, DWORD PTR [ecx+eax*8+20]
	mov	DWORD PTR _groupStartIdx$42635[ebp+4], eax
; Line 5247
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+24]
	mov	DWORD PTR _groupEndIdx$42636[ebp], edx
	mov	eax, DWORD PTR [ecx+eax*8+28]
	mov	DWORD PTR _groupEndIdx$42636[ebp+4], eax
; Line 5248
	mov	eax, DWORD PTR _groupStartIdx$42635[ebp+4]
	cmp	eax, DWORD PTR _groupEndIdx$42636[ebp+4]
	jl	SHORT $LN399@MatchChunk
	jg	SHORT $LN532@MatchChunk
	mov	ecx, DWORD PTR _groupStartIdx$42635[ebp]
	cmp	ecx, DWORD PTR _groupEndIdx$42636[ebp]
	jbe	SHORT $LN399@MatchChunk
$LN532@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 947				; 000003b3H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DK@MGMFMKKP@?$AAg?$AAr?$AAo?$AAu?$AAp?$AAS?$AAt?$AAa?$AAr?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAg?$AAr?$AAo?$AAu?$AAp?$AAE?$AAn?$AAd?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN399@MatchChunk:
; Line 5249
	cmp	DWORD PTR _groupStartIdx$42635[ebp+4], 0
	jg	SHORT $LN92@MatchChunk
	jl	SHORT $LN533@MatchChunk
	cmp	DWORD PTR _groupStartIdx$42635[ebp], 0
	jae	SHORT $LN92@MatchChunk
$LN533@MatchChunk:
; Line 5251
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 5252
	jmp	$LN333@MatchChunk
$LN92@MatchChunk:
; Line 5254
	mov	eax, DWORD PTR _groupEndIdx$42636[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _groupEndIdx$42636[ebp]
	push	ecx
	mov	edx, DWORD PTR _groupStartIdx$42635[ebp+4]
	push	edx
	mov	eax, DWORD PTR _groupStartIdx$42635[ebp]
	push	eax
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _captureGroupItr$42640[ebp]
	call	??0CaseFoldingUCharIterator@icu_56@@QAE@PB_W_J1@Z ; icu_56::CaseFoldingUCharIterator::CaseFoldingUCharIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 5255
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR [eax+96]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _inputBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inputItr$42641[ebp]
	call	??0CaseFoldingUCharIterator@icu_56@@QAE@PB_W_J1@Z ; icu_56::CaseFoldingUCharIterator::CaseFoldingUCharIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 5261
	mov	BYTE PTR _success$42642[ebp], 1
$LN91@MatchChunk:
; Line 5263
	lea	ecx, DWORD PTR _captureGroupItr$42640[ebp]
	call	?next@CaseFoldingUCharIterator@icu_56@@QAEHXZ ; icu_56::CaseFoldingUCharIterator::next
	mov	DWORD PTR _captureGroupChar$42646[ebp], eax
; Line 5264
	cmp	DWORD PTR _captureGroupChar$42646[ebp], -1
	jne	SHORT $LN89@MatchChunk
; Line 5265
	mov	BYTE PTR _success$42642[ebp], 1
; Line 5266
	jmp	SHORT $LN90@MatchChunk
$LN89@MatchChunk:
; Line 5268
	lea	ecx, DWORD PTR _inputItr$42641[ebp]
	call	?next@CaseFoldingUCharIterator@icu_56@@QAEHXZ ; icu_56::CaseFoldingUCharIterator::next
	mov	DWORD PTR _inputChar$42648[ebp], eax
; Line 5269
	cmp	DWORD PTR _inputChar$42648[ebp], -1
	jne	SHORT $LN88@MatchChunk
; Line 5270
	mov	BYTE PTR _success$42642[ebp], 0
; Line 5271
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 5272
	jmp	SHORT $LN90@MatchChunk
$LN88@MatchChunk:
; Line 5274
	mov	eax, DWORD PTR _inputChar$42648[ebp]
	cmp	eax, DWORD PTR _captureGroupChar$42646[ebp]
	je	SHORT $LN87@MatchChunk
; Line 5275
	mov	BYTE PTR _success$42642[ebp], 0
; Line 5276
	jmp	SHORT $LN90@MatchChunk
$LN87@MatchChunk:
; Line 5278
	jmp	SHORT $LN91@MatchChunk
$LN90@MatchChunk:
; Line 5280
	movsx	eax, BYTE PTR _success$42642[ebp]
	test	eax, eax
	je	SHORT $LN86@MatchChunk
	lea	ecx, DWORD PTR _inputItr$42641[ebp]
	call	?inExpansion@CaseFoldingUCharIterator@icu_56@@QAECXZ ; icu_56::CaseFoldingUCharIterator::inExpansion
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN86@MatchChunk
; Line 5284
	mov	BYTE PTR _success$42642[ebp], 0
$LN86@MatchChunk:
; Line 5287
	movsx	eax, BYTE PTR _success$42642[ebp]
	test	eax, eax
	je	SHORT $LN85@MatchChunk
; Line 5288
	lea	ecx, DWORD PTR _inputItr$42641[ebp]
	call	?getIndex@CaseFoldingUCharIterator@icu_56@@QAE_JXZ ; icu_56::CaseFoldingUCharIterator::getIndex
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 5289
	jmp	SHORT $LN84@MatchChunk
$LN85@MatchChunk:
; Line 5290
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN84@MatchChunk:
; Line 5292
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _inputItr$42641[ebp]
	call	??1CaseFoldingUCharIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUCharIterator::~CaseFoldingUCharIterator
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _captureGroupItr$42640[ebp]
	call	??1CaseFoldingUCharIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUCharIterator::~CaseFoldingUCharIterator
; Line 5293
	jmp	$LN333@MatchChunk
$LN83@MatchChunk:
; Line 5297
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN400@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _opValue$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN401@MatchChunk
$LN400@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 996				; 000003e4H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EK@EFDCFDGH@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN401@MatchChunk:
; Line 5298
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+16], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+20], edx
; Line 5300
	jmp	$LN333@MatchChunk
$LN82@MatchChunk:
; Line 5304
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _instrOperandLoc$42658[ebp], ecx
; Line 5305
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5306
	mov	eax, DWORD PTR _instrOperandLoc$42658[ebp]
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	and	edx, 16777215				; 00ffffffH
	mov	eax, DWORD PTR [ecx+eax*8+4]
	and	eax, 0
	mov	DWORD PTR _dataLoc$42660[ebp], edx
; Line 5307
	cmp	DWORD PTR _dataLoc$42660[ebp], 0
	jl	SHORT $LN402@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dataLoc$42660[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN403@MatchChunk
$LN402@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1006				; 000003eeH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EK@IFAFHMJP@?$AAd?$AAa?$AAt?$AAa?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAa?$AAt?$AAa?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN403@MatchChunk:
; Line 5308
	mov	eax, DWORD PTR _dataLoc$42660[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _savedInputIdx$42662[ebp], edx
; Line 5309
	mov	eax, DWORD PTR _savedInputIdx$42662[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv6988[ebp], eax
	mov	DWORD PTR tv6988[ebp+4], edx
	mov	DWORD PTR tv6991[ebp], ecx
	mov	edx, DWORD PTR tv6991[ebp]
	mov	eax, DWORD PTR tv6988[ebp+4]
	cmp	eax, DWORD PTR [edx+4]
	jl	SHORT $LN404@MatchChunk
	jg	SHORT $LN534@MatchChunk
	mov	ecx, DWORD PTR tv6991[ebp]
	mov	edx, DWORD PTR tv6988[ebp]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN404@MatchChunk
$LN534@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1008				; 000003f0H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DO@NDALOCFL@?$AAs?$AAa?$AAv?$AAe?$AAd?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN404@MatchChunk:
; Line 5310
	mov	eax, DWORD PTR _savedInputIdx$42662[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv7009[ebp], eax
	mov	DWORD PTR tv7009[ebp+4], edx
	mov	DWORD PTR tv7012[ebp], ecx
	mov	edx, DWORD PTR tv7012[ebp]
	mov	eax, DWORD PTR tv7009[ebp+4]
	cmp	eax, DWORD PTR [edx+4]
	jg	SHORT $LN81@MatchChunk
	jl	SHORT $LN535@MatchChunk
	mov	ecx, DWORD PTR tv7012[ebp]
	mov	edx, DWORD PTR tv7009[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN81@MatchChunk
$LN535@MatchChunk:
; Line 5311
	mov	eax, DWORD PTR _opValue$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 5312
	jmp	SHORT $LN80@MatchChunk
$LN81@MatchChunk:
; Line 5313
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN80@MatchChunk:
; Line 5316
	jmp	$LN333@MatchChunk
$LN79@MatchChunk:
; Line 5322
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN405@MatchChunk
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN406@MatchChunk
$LN405@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1021				; 000003fdH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN406@MatchChunk:
; Line 5323
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+156]
	mov	esi, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR [ecx+esi*8], eax
	mov	DWORD PTR [ecx+esi*8+4], edx
; Line 5324
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*8+8], esi
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx*8+12], eax
; Line 5325
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+88], edx
	mov	ecx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+92], ecx
; Line 5326
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+96], edx
	mov	ecx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+100], ecx
; Line 5328
	jmp	$LN333@MatchChunk
$LN78@MatchChunk:
; Line 5334
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN407@MatchChunk
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN408@MatchChunk
$LN407@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1033				; 00000409H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN408@MatchChunk:
; Line 5335
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stackSize$42672[ebp], eax
; Line 5336
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _newStackSize$42673[ebp], eax
; Line 5337
	mov	eax, DWORD PTR _stackSize$42672[ebp]
	cmp	eax, DWORD PTR _newStackSize$42673[ebp]
	jge	SHORT $LN409@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1036				; 0000040cH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DE@BELDIKCK@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN409@MatchChunk:
; Line 5338
	mov	eax, DWORD PTR _stackSize$42672[ebp]
	cmp	eax, DWORD PTR _newStackSize$42673[ebp]
	jle	$LN77@MatchChunk
; Line 5342
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?getBuffer@UVector64@icu_56@@QBEPA_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _newStackSize$42673[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 3
	sub	edx, ecx
	mov	DWORD PTR _newFP$42677[ebp], edx
; Line 5344
	mov	DWORD PTR _i$42678[ebp], 0
	jmp	SHORT $LN76@MatchChunk
$LN75@MatchChunk:
	mov	eax, DWORD PTR _i$42678[ebp]
	add	eax, 1
	mov	DWORD PTR _i$42678[ebp], eax
$LN76@MatchChunk:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$42678[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN74@MatchChunk
; Line 5345
	mov	eax, DWORD PTR _i$42678[ebp]
	mov	ecx, DWORD PTR _newFP$42677[ebp]
	mov	edx, DWORD PTR _i$42678[ebp]
	mov	esi, DWORD PTR _fp$[ebp]
	mov	edi, DWORD PTR [esi+edx*8]
	mov	DWORD PTR [ecx+eax*8], edi
	mov	edx, DWORD PTR [esi+edx*8+4]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 5346
	jmp	SHORT $LN75@MatchChunk
$LN74@MatchChunk:
; Line 5347
	mov	eax, DWORD PTR _newFP$42677[ebp]
	mov	DWORD PTR _fp$[ebp], eax
; Line 5348
	mov	esi, esp
	mov	eax, DWORD PTR _newStackSize$42673[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+148]
	call	DWORD PTR __imp_?setSize@UVector64@icu_56@@QAEXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN77@MatchChunk:
; Line 5350
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	esi, DWORD PTR [ecx+eax*8+8]
	mov	DWORD PTR [edx], esi
	mov	ecx, DWORD PTR [ecx+eax*8+12]
	mov	DWORD PTR [edx+4], ecx
; Line 5354
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+88], edx
	mov	ecx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+92], ecx
; Line 5355
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+96], edx
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+100], ecx
; Line 5357
	jmp	$LN333@MatchChunk
$LN73@MatchChunk:
; Line 5360
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7137[ebp], eax
	mov	DWORD PTR tv7138[ebp], ecx
	mov	edx, DWORD PTR tv7137[ebp]
	mov	eax, DWORD PTR tv7138[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	jg	$LN72@MatchChunk
	jl	SHORT $LN536@MatchChunk
	mov	edx, DWORD PTR tv7137[ebp]
	mov	eax, DWORD PTR tv7138[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jae	$LN72@MatchChunk
$LN536@MatchChunk:
; Line 5362
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _c$42686[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42686[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN71@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7175[ebp], eax
	mov	DWORD PTR tv7176[ebp], ecx
	mov	edx, DWORD PTR tv7175[ebp]
	mov	eax, DWORD PTR tv7176[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN537@MatchChunk
	mov	edx, DWORD PTR tv7175[ebp]
	mov	eax, DWORD PTR tv7176[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN71@MatchChunk
$LN537@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42688[ebp], dx
	movzx	eax, WORD PTR ___c2$42688[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN71@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _c$42686[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42688[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42686[ebp], edx
$LN71@MatchChunk:
; Line 5363
	push	0
	mov	eax, DWORD PTR _c$42686[ebp]
	push	eax
	call	_u_foldCase_56
	add	esp, 8
	cmp	eax, DWORD PTR _opValue$[ebp]
	jne	SHORT $LN69@MatchChunk
; Line 5364
	jmp	$LN333@MatchChunk
$LN69@MatchChunk:
; Line 5366
	jmp	SHORT $LN68@MatchChunk
$LN72@MatchChunk:
; Line 5367
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
$LN68@MatchChunk:
; Line 5369
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 5370
	jmp	$LN333@MatchChunk
$LN67@MatchChunk:
; Line 5378
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _litText$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _patternString$42696[ebp], edx
; Line 5380
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _op$[ebp], edx
; Line 5381
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5382
	mov	eax, DWORD PTR _op$[ebp]
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _opType$[ebp], eax
; Line 5383
	mov	eax, DWORD PTR _op$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _opValue$[ebp], eax
; Line 5384
	cmp	DWORD PTR _opType$[ebp], 5
	je	SHORT $LN410@MatchChunk
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1083				; 0000043bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DC@MEDILEED@?$AAo?$AAp?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU?$AAR?$AAX?$AA_?$AAS?$AAT?$AAR?$AAI?$AAN?$AAG?$AA_?$AAL?$AAE?$AAN?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN410@MatchChunk:
; Line 5385
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR _patternStringLen$42700[ebp], eax
; Line 5389
	mov	BYTE PTR _success$42703[ebp], 1
; Line 5390
	mov	DWORD PTR _patternStringIdx$42704[ebp], 0
; Line 5391
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR [eax+96]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _inputBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inputIterator$42705[ebp]
	call	??0CaseFoldingUCharIterator@icu_56@@QAE@PB_W_J1@Z ; icu_56::CaseFoldingUCharIterator::CaseFoldingUCharIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 2
$LN66@MatchChunk:
; Line 5392
	mov	eax, DWORD PTR _patternStringIdx$42704[ebp]
	cmp	eax, DWORD PTR _patternStringLen$42700[ebp]
	jge	$LN65@MatchChunk
; Line 5393
	mov	eax, DWORD PTR _patternStringIdx$42704[ebp]
	mov	ecx, DWORD PTR _patternString$42696[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _cPattern$42702[ebp], edx
	mov	eax, DWORD PTR _patternStringIdx$42704[ebp]
	add	eax, 1
	mov	DWORD PTR _patternStringIdx$42704[ebp], eax
	mov	eax, DWORD PTR _cPattern$42702[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN64@MatchChunk
	mov	eax, DWORD PTR _patternStringIdx$42704[ebp]
	cmp	eax, DWORD PTR _patternStringLen$42700[ebp]
	je	SHORT $LN64@MatchChunk
	mov	eax, DWORD PTR _patternStringIdx$42704[ebp]
	mov	ecx, DWORD PTR _patternString$42696[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$42710[ebp], dx
	movzx	eax, WORD PTR ___c2$42710[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN64@MatchChunk
	mov	eax, DWORD PTR _patternStringIdx$42704[ebp]
	add	eax, 1
	mov	DWORD PTR _patternStringIdx$42704[ebp], eax
	mov	eax, DWORD PTR _cPattern$42702[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42710[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _cPattern$42702[ebp], edx
$LN64@MatchChunk:
; Line 5394
	lea	ecx, DWORD PTR _inputIterator$42705[ebp]
	call	?next@CaseFoldingUCharIterator@icu_56@@QAEHXZ ; icu_56::CaseFoldingUCharIterator::next
	mov	DWORD PTR _cText$42701[ebp], eax
; Line 5395
	mov	eax, DWORD PTR _cText$42701[ebp]
	cmp	eax, DWORD PTR _cPattern$42702[ebp]
	je	SHORT $LN62@MatchChunk
; Line 5396
	mov	BYTE PTR _success$42703[ebp], 0
; Line 5397
	cmp	DWORD PTR _cText$42701[ebp], -1
	jne	SHORT $LN61@MatchChunk
; Line 5398
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
$LN61@MatchChunk:
; Line 5400
	jmp	SHORT $LN65@MatchChunk
$LN62@MatchChunk:
; Line 5402
	jmp	$LN66@MatchChunk
$LN65@MatchChunk:
; Line 5403
	lea	ecx, DWORD PTR _inputIterator$42705[ebp]
	call	?inExpansion@CaseFoldingUCharIterator@icu_56@@QAECXZ ; icu_56::CaseFoldingUCharIterator::inExpansion
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN60@MatchChunk
; Line 5404
	mov	BYTE PTR _success$42703[ebp], 0
$LN60@MatchChunk:
; Line 5407
	movsx	eax, BYTE PTR _success$42703[ebp]
	test	eax, eax
	je	SHORT $LN59@MatchChunk
; Line 5408
	lea	ecx, DWORD PTR _inputIterator$42705[ebp]
	call	?getIndex@CaseFoldingUCharIterator@icu_56@@QAE_JXZ ; icu_56::CaseFoldingUCharIterator::getIndex
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 5409
	jmp	SHORT $LN58@MatchChunk
$LN59@MatchChunk:
; Line 5410
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
$LN58@MatchChunk:
; Line 5412
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inputIterator$42705[ebp]
	call	??1CaseFoldingUCharIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUCharIterator::~CaseFoldingUCharIterator
; Line 5413
	jmp	$LN333@MatchChunk
$LN57@MatchChunk:
; Line 5420
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN411@MatchChunk
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN412@MatchChunk
$LN411@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1119				; 0000045fH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN412@MatchChunk:
; Line 5421
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+156]
	mov	esi, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR [ecx+esi*8], eax
	mov	DWORD PTR [ecx+esi*8+4], edx
; Line 5422
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*8+8], esi
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx*8+12], eax
; Line 5424
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	DWORD PTR [ecx+edx*8+16], -1
	mov	DWORD PTR [ecx+edx*8+20], -1
; Line 5427
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+96]
	mov	DWORD PTR [ecx+edx*8+24], esi
	mov	eax, DWORD PTR [eax+100]
	mov	DWORD PTR [ecx+edx*8+28], eax
; Line 5428
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+96], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+100], ecx
; Line 5430
	jmp	$LN333@MatchChunk
$LN56@MatchChunk:
; Line 5440
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _minML$42723[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5441
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _maxML$42725[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5442
	mov	eax, DWORD PTR _minML$42723[ebp]
	cmp	eax, DWORD PTR _maxML$42725[ebp]
	jle	SHORT $LN413@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1141				; 00000475H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BO@GDLEIHOB@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAM?$AAL?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN413@MatchChunk:
; Line 5443
	cmp	DWORD PTR _minML$42723[ebp], 0
	jge	SHORT $LN414@MatchChunk
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1142				; 00000476H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BG@FKPOJNM@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN414@MatchChunk:
; Line 5446
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN415@MatchChunk
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN416@MatchChunk
$LN415@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1145				; 00000479H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN416@MatchChunk:
; Line 5447
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+16]
	mov	DWORD PTR _lbStartIdx$42730[ebp], eax
; Line 5448
	mov	eax, DWORD PTR _lbStartIdx$42730[ebp]
	mov	DWORD PTR tv7409[ebp], eax
	mov	ecx, DWORD PTR tv7409[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jg	SHORT $LN55@MatchChunk
	jl	SHORT $LN538@MatchChunk
	mov	edx, DWORD PTR tv7409[ebp]
	cmp	DWORD PTR [edx], 0
	jae	SHORT $LN55@MatchChunk
$LN538@MatchChunk:
; Line 5450
	mov	eax, DWORD PTR _minML$42723[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+4]
	sbb	eax, edx
	mov	ecx, DWORD PTR _lbStartIdx$42730[ebp]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], eax
; Line 5451
	jmp	$LN54@MatchChunk
$LN55@MatchChunk:
; Line 5454
	mov	eax, DWORD PTR _lbStartIdx$42730[ebp]
	mov	DWORD PTR tv7430[ebp], eax
	mov	ecx, DWORD PTR tv7430[ebp]
	mov	edx, DWORD PTR tv7430[ebp]
	mov	eax, DWORD PTR [ecx]
	or	eax, DWORD PTR [edx+4]
	jne	SHORT $LN53@MatchChunk
; Line 5455
	mov	eax, DWORD PTR _lbStartIdx$42730[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _lbStartIdx$42730[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 5456
	jmp	$LN54@MatchChunk
$LN53@MatchChunk:
; Line 5457
	mov	eax, DWORD PTR _lbStartIdx$42730[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _lbStartIdx$42730[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _lbStartIdx$42730[ebp]
	push	0
	push	2
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN54@MatchChunk
	mov	eax, DWORD PTR _lbStartIdx$42730[ebp]
	mov	DWORD PTR tv7471[ebp], eax
	mov	ecx, DWORD PTR tv7471[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN54@MatchChunk
	jg	SHORT $LN539@MatchChunk
	mov	edx, DWORD PTR tv7471[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT $LN54@MatchChunk
$LN539@MatchChunk:
	mov	eax, DWORD PTR _lbStartIdx$42730[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	and	edx, -1024				; fffffc00H
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN54@MatchChunk
	mov	eax, DWORD PTR _lbStartIdx$42730[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _lbStartIdx$42730[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$LN54@MatchChunk:
; Line 5461
	mov	eax, DWORD PTR _lbStartIdx$42730[ebp]
	mov	DWORD PTR tv7505[ebp], eax
	mov	ecx, DWORD PTR tv7505[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN49@MatchChunk
	jg	SHORT $LN540@MatchChunk
	mov	edx, DWORD PTR tv7505[ebp]
	cmp	DWORD PTR [edx], 0
	jb	SHORT $LN49@MatchChunk
$LN540@MatchChunk:
	mov	eax, DWORD PTR _maxML$42725[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+4]
	sbb	eax, edx
	mov	ecx, DWORD PTR _lbStartIdx$42730[ebp]
	mov	DWORD PTR tv7524[ebp], ecx
	mov	DWORD PTR tv7525[ebp], esi
	mov	DWORD PTR tv7525[ebp+4], eax
	mov	edx, DWORD PTR tv7524[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR tv7525[ebp+4]
	jg	$LN50@MatchChunk
	jl	SHORT $LN49@MatchChunk
	mov	ecx, DWORD PTR tv7524[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv7525[ebp]
	jae	$LN50@MatchChunk
$LN49@MatchChunk:
; Line 5465
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 5466
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _restoreInputLen$42739[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	mov	DWORD PTR _restoreInputLen$42739[ebp+4], ecx
; Line 5467
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7547[ebp], eax
	mov	ecx, DWORD PTR tv7547[ebp]
	mov	edx, DWORD PTR _restoreInputLen$42739[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jg	SHORT $LN417@MatchChunk
	jl	SHORT $LN542@MatchChunk
	mov	eax, DWORD PTR tv7547[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$42739[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jae	SHORT $LN417@MatchChunk
$LN542@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1166				; 0000048eH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EA@BLNKBNIJ@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN417@MatchChunk:
; Line 5468
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7559[ebp], eax
	mov	ecx, DWORD PTR tv7559[ebp]
	mov	edx, DWORD PTR _restoreInputLen$42739[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jl	SHORT $LN418@MatchChunk
	jg	SHORT $LN543@MatchChunk
	mov	eax, DWORD PTR tv7559[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$42739[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN418@MatchChunk
$LN543@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1167				; 0000048fH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EA@MIPOIOOI@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN418@MatchChunk:
; Line 5469
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$42739[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	edx, DWORD PTR _restoreInputLen$42739[ebp+4]
	mov	DWORD PTR [eax+100], edx
; Line 5470
	jmp	$LN333@MatchChunk
$LN50@MatchChunk:
; Line 5475
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 3
	mov	eax, DWORD PTR [ecx+12]
	sbb	eax, 0
	push	eax
	push	edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 5476
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _lbStartIdx$42730[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 5478
	jmp	$LN333@MatchChunk
$LN48@MatchChunk:
; Line 5483
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN419@MatchChunk
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN420@MatchChunk
$LN419@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1182				; 0000049eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN420@MatchChunk:
; Line 5484
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7600[ebp], eax
	mov	DWORD PTR tv7601[ebp], ecx
	mov	edx, DWORD PTR tv7600[ebp]
	mov	eax, DWORD PTR tv7601[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN544@MatchChunk
	mov	edx, DWORD PTR tv7600[ebp]
	mov	eax, DWORD PTR tv7601[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN47@MatchChunk
$LN544@MatchChunk:
; Line 5490
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 5491
	jmp	$LN333@MatchChunk
$LN47@MatchChunk:
; Line 5497
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _originalInputLen$42746[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	mov	DWORD PTR _originalInputLen$42746[ebp+4], ecx
; Line 5498
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7622[ebp], eax
	mov	ecx, DWORD PTR tv7622[ebp]
	mov	edx, DWORD PTR _originalInputLen$42746[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jg	SHORT $LN421@MatchChunk
	jl	SHORT $LN545@MatchChunk
	mov	eax, DWORD PTR tv7622[ebp]
	mov	ecx, DWORD PTR _originalInputLen$42746[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jae	SHORT $LN421@MatchChunk
$LN545@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1197				; 000004adH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@NBCFLCDA@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN421@MatchChunk:
; Line 5499
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7634[ebp], eax
	mov	ecx, DWORD PTR tv7634[ebp]
	mov	edx, DWORD PTR _originalInputLen$42746[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jl	SHORT $LN422@MatchChunk
	jg	SHORT $LN546@MatchChunk
	mov	eax, DWORD PTR tv7634[ebp]
	mov	ecx, DWORD PTR _originalInputLen$42746[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN422@MatchChunk
$LN546@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1198				; 000004aeH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@CABCBFB@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN422@MatchChunk:
; Line 5500
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _originalInputLen$42746[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	edx, DWORD PTR _originalInputLen$42746[ebp+4]
	mov	DWORD PTR [eax+100], edx
; Line 5502
	jmp	$LN333@MatchChunk
$LN46@MatchChunk:
; Line 5511
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _minML$42750[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5512
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _maxML$42752[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5513
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _continueLoc$42754[ebp], edx
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5514
	mov	eax, DWORD PTR _continueLoc$42754[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _continueLoc$42754[ebp], eax
; Line 5515
	mov	eax, DWORD PTR _minML$42750[ebp]
	cmp	eax, DWORD PTR _maxML$42752[ebp]
	jle	SHORT $LN423@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1214				; 000004beH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BO@GDLEIHOB@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AAM?$AAL?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN423@MatchChunk:
; Line 5516
	cmp	DWORD PTR _minML$42750[ebp], 0
	jge	SHORT $LN424@MatchChunk
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1215				; 000004bfH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BG@FKPOJNM@?$AAm?$AAi?$AAn?$AAM?$AAL?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN424@MatchChunk:
; Line 5517
	mov	eax, DWORD PTR _continueLoc$42754[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv7741[ebp], eax
	mov	DWORD PTR tv7741[ebp+4], edx
	mov	DWORD PTR tv7744[ebp], ecx
	mov	edx, DWORD PTR tv7744[ebp]
	mov	eax, DWORD PTR tv7741[ebp+4]
	cmp	eax, DWORD PTR [edx+12]
	jg	SHORT $LN425@MatchChunk
	jl	SHORT $LN547@MatchChunk
	mov	ecx, DWORD PTR tv7744[ebp]
	mov	edx, DWORD PTR tv7741[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN425@MatchChunk
$LN547@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1216				; 000004c0H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DE@HBDCPLHI@?$AAc?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAP?$AAa?$AAt?$AAI?$AAd?$AAx?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN425@MatchChunk:
; Line 5520
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN426@MatchChunk
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN427@MatchChunk
$LN426@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1219				; 000004c3H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN427@MatchChunk:
; Line 5521
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+16]
	mov	DWORD PTR _lbStartIdx$42760[ebp], eax
; Line 5522
	mov	eax, DWORD PTR _lbStartIdx$42760[ebp]
	mov	DWORD PTR tv7764[ebp], eax
	mov	ecx, DWORD PTR tv7764[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jg	SHORT $LN45@MatchChunk
	jl	SHORT $LN548@MatchChunk
	mov	edx, DWORD PTR tv7764[ebp]
	cmp	DWORD PTR [edx], 0
	jae	SHORT $LN45@MatchChunk
$LN548@MatchChunk:
; Line 5524
	mov	eax, DWORD PTR _minML$42750[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+4]
	sbb	eax, edx
	mov	ecx, DWORD PTR _lbStartIdx$42760[ebp]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], eax
; Line 5525
	jmp	$LN44@MatchChunk
$LN45@MatchChunk:
; Line 5528
	mov	eax, DWORD PTR _lbStartIdx$42760[ebp]
	mov	DWORD PTR tv7785[ebp], eax
	mov	ecx, DWORD PTR tv7785[ebp]
	mov	edx, DWORD PTR tv7785[ebp]
	mov	eax, DWORD PTR [ecx]
	or	eax, DWORD PTR [edx+4]
	jne	SHORT $LN43@MatchChunk
; Line 5529
	mov	eax, DWORD PTR _lbStartIdx$42760[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _lbStartIdx$42760[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 5530
	jmp	$LN44@MatchChunk
$LN43@MatchChunk:
; Line 5531
	mov	eax, DWORD PTR _lbStartIdx$42760[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _lbStartIdx$42760[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _lbStartIdx$42760[ebp]
	push	0
	push	2
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN44@MatchChunk
	mov	eax, DWORD PTR _lbStartIdx$42760[ebp]
	mov	DWORD PTR tv7826[ebp], eax
	mov	ecx, DWORD PTR tv7826[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN44@MatchChunk
	jg	SHORT $LN549@MatchChunk
	mov	edx, DWORD PTR tv7826[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT $LN44@MatchChunk
$LN549@MatchChunk:
	mov	eax, DWORD PTR _lbStartIdx$42760[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	and	edx, -1024				; fffffc00H
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN44@MatchChunk
	mov	eax, DWORD PTR _lbStartIdx$42760[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _lbStartIdx$42760[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$LN44@MatchChunk:
; Line 5535
	mov	eax, DWORD PTR _lbStartIdx$42760[ebp]
	mov	DWORD PTR tv7860[ebp], eax
	mov	ecx, DWORD PTR tv7860[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN39@MatchChunk
	jg	SHORT $LN550@MatchChunk
	mov	edx, DWORD PTR tv7860[ebp]
	cmp	DWORD PTR [edx], 0
	jb	SHORT $LN39@MatchChunk
$LN550@MatchChunk:
	mov	eax, DWORD PTR _maxML$42752[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [ecx]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+4]
	sbb	eax, edx
	mov	ecx, DWORD PTR _lbStartIdx$42760[ebp]
	mov	DWORD PTR tv7879[ebp], ecx
	mov	DWORD PTR tv7880[ebp], esi
	mov	DWORD PTR tv7880[ebp+4], eax
	mov	edx, DWORD PTR tv7879[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR tv7880[ebp+4]
	jg	$LN40@MatchChunk
	jl	SHORT $LN39@MatchChunk
	mov	ecx, DWORD PTR tv7879[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv7880[ebp]
	jae	$LN40@MatchChunk
$LN39@MatchChunk:
; Line 5539
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _restoreInputLen$42768[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	mov	DWORD PTR _restoreInputLen$42768[ebp+4], ecx
; Line 5540
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7896[ebp], eax
	mov	ecx, DWORD PTR tv7896[ebp]
	mov	edx, DWORD PTR _restoreInputLen$42768[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jg	SHORT $LN428@MatchChunk
	jl	SHORT $LN552@MatchChunk
	mov	eax, DWORD PTR tv7896[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$42768[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jae	SHORT $LN428@MatchChunk
$LN552@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1239				; 000004d7H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EA@BLNKBNIJ@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN428@MatchChunk:
; Line 5541
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7908[ebp], eax
	mov	ecx, DWORD PTR tv7908[ebp]
	mov	edx, DWORD PTR _restoreInputLen$42768[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jl	SHORT $LN429@MatchChunk
	jg	SHORT $LN553@MatchChunk
	mov	eax, DWORD PTR tv7908[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$42768[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN429@MatchChunk
$LN553@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1240				; 000004d8H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EA@MIPOIOOI@?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN429@MatchChunk:
; Line 5542
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _restoreInputLen$42768[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	edx, DWORD PTR _restoreInputLen$42768[ebp+4]
	mov	DWORD PTR [eax+100], edx
; Line 5543
	mov	eax, DWORD PTR _continueLoc$42754[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 5544
	jmp	$LN333@MatchChunk
$LN40@MatchChunk:
; Line 5549
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	sbb	eax, 0
	push	eax
	push	edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 5550
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _lbStartIdx$42760[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 5552
	jmp	$LN333@MatchChunk
$LN38@MatchChunk:
; Line 5557
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN430@MatchChunk
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN431@MatchChunk
$LN430@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1256				; 000004e8H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN431@MatchChunk:
; Line 5558
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7957[ebp], eax
	mov	DWORD PTR tv7958[ebp], ecx
	mov	edx, DWORD PTR tv7957[ebp]
	mov	eax, DWORD PTR tv7958[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+96]
	jne	SHORT $LN554@MatchChunk
	mov	edx, DWORD PTR tv7957[ebp]
	mov	eax, DWORD PTR tv7958[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+100]
	je	SHORT $LN37@MatchChunk
$LN554@MatchChunk:
; Line 5564
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 5565
	jmp	$LN333@MatchChunk
$LN37@MatchChunk:
; Line 5574
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	DWORD PTR _originalInputLen$42775[ebp], eax
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	mov	DWORD PTR _originalInputLen$42775[ebp+4], ecx
; Line 5575
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7979[ebp], eax
	mov	ecx, DWORD PTR tv7979[ebp]
	mov	edx, DWORD PTR _originalInputLen$42775[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	jg	SHORT $LN432@MatchChunk
	jl	SHORT $LN555@MatchChunk
	mov	eax, DWORD PTR tv7979[ebp]
	mov	ecx, DWORD PTR _originalInputLen$42775[ebp]
	cmp	ecx, DWORD PTR [eax+96]
	jae	SHORT $LN432@MatchChunk
$LN555@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1274				; 000004faH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@NBCFLCDA@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAf?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN432@MatchChunk:
; Line 5576
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv7991[ebp], eax
	mov	ecx, DWORD PTR tv7991[ebp]
	mov	edx, DWORD PTR _originalInputLen$42775[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jl	SHORT $LN433@MatchChunk
	jg	SHORT $LN556@MatchChunk
	mov	eax, DWORD PTR tv7991[ebp]
	mov	ecx, DWORD PTR _originalInputLen$42775[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN433@MatchChunk
$LN556@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1275				; 000004fbH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@CABCBFB@?$AAo?$AAr?$AAi?$AAg?$AAi?$AAn?$AAa?$AAl?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN433@MatchChunk:
; Line 5577
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _originalInputLen$42775[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	edx, DWORD PTR _originalInputLen$42775[ebp+4]
	mov	DWORD PTR [eax+100], edx
; Line 5581
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN434@MatchChunk
	mov	eax, DWORD PTR _opValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+104]
	jl	SHORT $LN435@MatchChunk
$LN434@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1280				; 00000500H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FI@PKGNNNLG@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$CL?$AA1?$AA?$DM?$AAf?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN435@MatchChunk:
; Line 5582
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _opValue$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _newStackSize$42779[ebp], eax
; Line 5583
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	call	DWORD PTR __imp_?size@UVector64@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR _newStackSize$42779[ebp]
	jg	SHORT $LN436@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1282				; 00000502H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1DM@OBGLDKOO@?$AAf?$AAS?$AAt?$AAa?$AAc?$AAk?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAn?$AAe?$AAw?$AAS?$AAt?$AAa?$AAc?$AAk?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN436@MatchChunk:
; Line 5584
	mov	esi, esp
	mov	eax, DWORD PTR _newStackSize$42779[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+148]
	call	DWORD PTR __imp_?setSize@UVector64@icu_56@@QAEXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5588
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	call	DWORD PTR __imp_?popFrame@UVector64@icu_56@@QAEPA_JH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
; Line 5590
	jmp	$LN333@MatchChunk
$LN36@MatchChunk:
; Line 5599
	cmp	DWORD PTR _opValue$[ebp], 0
	jle	SHORT $LN437@MatchChunk
	mov	esi, esp
	mov	ecx, DWORD PTR _sets$[ebp]
	call	DWORD PTR __imp_?size@UVector@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _opValue$[ebp], eax
	jl	SHORT $LN438@MatchChunk
$LN437@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1298				; 00000512H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EM@LLNCNHEM@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAs?$AAe?$AAt?$AAs?$AA?9?$AA?$DO?$AAs@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN438@MatchChunk:
; Line 5600
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _opValue$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR _s8$42785[ebp], edx
; Line 5601
	mov	esi, esp
	mov	eax, DWORD PTR _opValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sets$[ebp]
	call	DWORD PTR __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$42786[ebp], eax
; Line 5605
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ix$42788[ebp], ecx
$LN35@MatchChunk:
; Line 5607
	mov	eax, DWORD PTR _ix$42788[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv8053[ebp], eax
	mov	DWORD PTR tv8053[ebp+4], edx
	mov	DWORD PTR tv8056[ebp], ecx
	mov	edx, DWORD PTR tv8056[ebp]
	mov	eax, DWORD PTR tv8053[ebp+4]
	cmp	eax, DWORD PTR [edx+100]
	jl	SHORT $LN33@MatchChunk
	jg	SHORT $LN557@MatchChunk
	mov	ecx, DWORD PTR tv8056[ebp]
	mov	edx, DWORD PTR tv8053[ebp]
	cmp	edx, DWORD PTR [ecx+96]
	jb	SHORT $LN33@MatchChunk
$LN557@MatchChunk:
; Line 5608
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 5609
	jmp	$LN34@MatchChunk
$LN33@MatchChunk:
; Line 5612
	mov	eax, DWORD PTR _ix$42788[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _c$42794[ebp], edx
	mov	eax, DWORD PTR _ix$42788[ebp]
	add	eax, 1
	mov	DWORD PTR _ix$42788[ebp], eax
	mov	eax, DWORD PTR _c$42794[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN32@MatchChunk
	mov	eax, DWORD PTR _ix$42788[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv8075[ebp], eax
	mov	DWORD PTR tv8075[ebp+4], edx
	mov	DWORD PTR tv8078[ebp], ecx
	mov	edx, DWORD PTR tv8078[ebp]
	mov	eax, DWORD PTR tv8075[ebp]
	cmp	eax, DWORD PTR [edx+96]
	jne	SHORT $LN558@MatchChunk
	mov	ecx, DWORD PTR tv8078[ebp]
	mov	edx, DWORD PTR tv8075[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	je	SHORT $LN32@MatchChunk
$LN558@MatchChunk:
	mov	eax, DWORD PTR _ix$42788[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$42796[ebp], dx
	movzx	eax, WORD PTR ___c2$42796[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN32@MatchChunk
	mov	eax, DWORD PTR _ix$42788[ebp]
	add	eax, 1
	mov	DWORD PTR _ix$42788[ebp], eax
	mov	eax, DWORD PTR _c$42794[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42796[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42794[ebp], edx
$LN32@MatchChunk:
; Line 5613
	cmp	DWORD PTR _c$42794[ebp], 256		; 00000100H
	jge	SHORT $LN30@MatchChunk
; Line 5614
	mov	eax, DWORD PTR _c$42794[ebp]
	push	eax
	mov	ecx, DWORD PTR _s8$42785[ebp]
	call	?contains@Regex8BitSet@icu_56@@QAECH@Z	; icu_56::Regex8BitSet::contains
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN29@MatchChunk
; Line 5615
	mov	eax, DWORD PTR _ix$42788[ebp]
	sub	eax, 1
	mov	DWORD PTR _ix$42788[ebp], eax
	mov	ecx, DWORD PTR _ix$42788[ebp]
	mov	edx, DWORD PTR _inputBuf$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN28@MatchChunk
	cmp	DWORD PTR _ix$42788[ebp], 0
	jle	SHORT $LN28@MatchChunk
	mov	eax, DWORD PTR _ix$42788[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN28@MatchChunk
	mov	eax, DWORD PTR _ix$42788[ebp]
	sub	eax, 1
	mov	DWORD PTR _ix$42788[ebp], eax
$LN28@MatchChunk:
; Line 5616
	jmp	$LN34@MatchChunk
$LN29@MatchChunk:
; Line 5618
	jmp	$LN27@MatchChunk
$LN30@MatchChunk:
; Line 5619
	mov	esi, esp
	mov	eax, DWORD PTR _c$42794[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$42786[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _s$42786[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN27@MatchChunk
; Line 5620
	mov	eax, DWORD PTR _ix$42788[ebp]
	sub	eax, 1
	mov	DWORD PTR _ix$42788[ebp], eax
	mov	ecx, DWORD PTR _ix$42788[ebp]
	mov	edx, DWORD PTR _inputBuf$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN25@MatchChunk
	cmp	DWORD PTR _ix$42788[ebp], 0
	jle	SHORT $LN25@MatchChunk
	mov	eax, DWORD PTR _ix$42788[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN25@MatchChunk
	mov	eax, DWORD PTR _ix$42788[ebp]
	sub	eax, 1
	mov	DWORD PTR _ix$42788[ebp], eax
$LN25@MatchChunk:
; Line 5621
	jmp	SHORT $LN34@MatchChunk
$LN27@MatchChunk:
; Line 5624
	jmp	$LN35@MatchChunk
$LN34@MatchChunk:
; Line 5628
	mov	eax, DWORD PTR _ix$42788[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv8116[ebp], eax
	mov	DWORD PTR tv8116[ebp+4], edx
	mov	DWORD PTR tv8119[ebp], ecx
	mov	edx, DWORD PTR tv8119[ebp]
	mov	eax, DWORD PTR tv8116[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN24@MatchChunk
	mov	ecx, DWORD PTR tv8119[ebp]
	mov	edx, DWORD PTR tv8116[ebp+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN24@MatchChunk
; Line 5629
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5630
	jmp	$LN333@MatchChunk
$LN24@MatchChunk:
; Line 5636
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _loopcOp$42807[ebp], edx
; Line 5637
	mov	eax, DWORD PTR _loopcOp$42807[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 51					; 00000033H
	je	SHORT $LN439@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1336				; 00000538H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FE@IOGLBMKK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAl?$AAo?$AAo?$AAp?$AAc?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN439@MatchChunk:
; Line 5638
	mov	eax, DWORD PTR _loopcOp$42807[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _stackLoc$42811[ebp], eax
; Line 5639
	jl	SHORT $LN440@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stackLoc$42811[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN441@MatchChunk
$LN440@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1338				; 0000053aH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@CJAHANAB@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN441@MatchChunk:
; Line 5640
	mov	eax, DWORD PTR _stackLoc$42811[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+16], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+20], edx
; Line 5641
	mov	eax, DWORD PTR _ix$42788[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 5646
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 5647
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5649
	jmp	$LN333@MatchChunk
$LN23@MatchChunk:
; Line 5660
	mov	eax, DWORD PTR _opValue$[ebp]
	and	eax, 1
	je	SHORT $LN22@MatchChunk
; Line 5662
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _ix$42814[ebp], ecx
; Line 5663
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 5664
	jmp	$LN21@MatchChunk
$LN22@MatchChunk:
; Line 5667
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ix$42814[ebp], ecx
$LN20@MatchChunk:
; Line 5669
	mov	eax, DWORD PTR _ix$42814[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv8207[ebp], eax
	mov	DWORD PTR tv8207[ebp+4], edx
	mov	DWORD PTR tv8210[ebp], ecx
	mov	edx, DWORD PTR tv8210[ebp]
	mov	eax, DWORD PTR tv8207[ebp+4]
	cmp	eax, DWORD PTR [edx+100]
	jl	SHORT $LN18@MatchChunk
	jg	SHORT $LN559@MatchChunk
	mov	ecx, DWORD PTR tv8210[ebp]
	mov	edx, DWORD PTR tv8207[ebp]
	cmp	edx, DWORD PTR [ecx+96]
	jb	SHORT $LN18@MatchChunk
$LN559@MatchChunk:
; Line 5670
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], 1
; Line 5671
	jmp	$LN21@MatchChunk
$LN18@MatchChunk:
; Line 5674
	mov	eax, DWORD PTR _ix$42814[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _c$42823[ebp], edx
	mov	eax, DWORD PTR _ix$42814[ebp]
	add	eax, 1
	mov	DWORD PTR _ix$42814[ebp], eax
	mov	eax, DWORD PTR _c$42823[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN17@MatchChunk
	mov	eax, DWORD PTR _ix$42814[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv8229[ebp], eax
	mov	DWORD PTR tv8229[ebp+4], edx
	mov	DWORD PTR tv8232[ebp], ecx
	mov	edx, DWORD PTR tv8232[ebp]
	mov	eax, DWORD PTR tv8229[ebp]
	cmp	eax, DWORD PTR [edx+96]
	jne	SHORT $LN560@MatchChunk
	mov	ecx, DWORD PTR tv8232[ebp]
	mov	edx, DWORD PTR tv8229[ebp+4]
	cmp	edx, DWORD PTR [ecx+100]
	je	SHORT $LN17@MatchChunk
$LN560@MatchChunk:
	mov	eax, DWORD PTR _ix$42814[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$42825[ebp], dx
	movzx	eax, WORD PTR ___c2$42825[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN17@MatchChunk
	mov	eax, DWORD PTR _ix$42814[ebp]
	add	eax, 1
	mov	DWORD PTR _ix$42814[ebp], eax
	mov	eax, DWORD PTR _c$42823[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$42825[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$42823[ebp], edx
$LN17@MatchChunk:
; Line 5675
	mov	eax, DWORD PTR _c$42823[ebp]
	and	eax, 127				; 0000007fH
	cmp	eax, 41					; 00000029H
	jg	$LN15@MatchChunk
; Line 5678
	cmp	DWORD PTR _c$42823[ebp], 10		; 0000000aH
	je	SHORT $LN13@MatchChunk
	mov	eax, DWORD PTR _opValue$[ebp]
	and	eax, 2
	jne	SHORT $LN15@MatchChunk
	mov	eax, DWORD PTR _c$42823[ebp]
	push	eax
	call	?isLineTerminator@icu_56@@YACH@Z	; icu_56::isLineTerminator
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@MatchChunk
$LN13@MatchChunk:
; Line 5681
	mov	eax, DWORD PTR _ix$42814[ebp]
	sub	eax, 1
	mov	DWORD PTR _ix$42814[ebp], eax
	mov	ecx, DWORD PTR _ix$42814[ebp]
	mov	edx, DWORD PTR _inputBuf$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN12@MatchChunk
	cmp	DWORD PTR _ix$42814[ebp], 0
	jle	SHORT $LN12@MatchChunk
	mov	eax, DWORD PTR _ix$42814[ebp]
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN12@MatchChunk
	mov	eax, DWORD PTR _ix$42814[ebp]
	sub	eax, 1
	mov	DWORD PTR _ix$42814[ebp], eax
$LN12@MatchChunk:
; Line 5682
	jmp	SHORT $LN21@MatchChunk
$LN15@MatchChunk:
; Line 5685
	jmp	$LN20@MatchChunk
$LN21@MatchChunk:
; Line 5690
	mov	eax, DWORD PTR _ix$42814[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv8260[ebp], eax
	mov	DWORD PTR tv8260[ebp+4], edx
	mov	DWORD PTR tv8263[ebp], ecx
	mov	edx, DWORD PTR tv8263[ebp]
	mov	eax, DWORD PTR tv8260[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN11@MatchChunk
	mov	ecx, DWORD PTR tv8263[ebp]
	mov	edx, DWORD PTR tv8260[ebp+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN11@MatchChunk
; Line 5691
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5692
	jmp	$LN333@MatchChunk
$LN11@MatchChunk:
; Line 5698
	mov	eax, DWORD PTR _fp$[ebp]
	push	0
	push	8
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _loopcOp$42834[ebp], edx
; Line 5699
	mov	eax, DWORD PTR _loopcOp$42834[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 51					; 00000033H
	je	SHORT $LN442@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1398				; 00000576H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1FE@IOGLBMKK@?$AA?$CI?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAl?$AAo?$AAo?$AAp?$AAc?$AAO?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA4?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAU@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN442@MatchChunk:
; Line 5700
	mov	eax, DWORD PTR _loopcOp$42834[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _stackLoc$42838[ebp], eax
; Line 5701
	jl	SHORT $LN443@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stackLoc$42838[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN444@MatchChunk
$LN443@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1400				; 00000578H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EO@CJAHANAB@?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AAL?$AAo?$AAc?$AA?5?$AA?$DM?$AA?5?$AAf?$AAF?$AAr?$AAa@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN444@MatchChunk:
; Line 5702
	mov	eax, DWORD PTR _stackLoc$42838[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR _fp$[ebp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8+16], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*8+20], edx
; Line 5703
	mov	eax, DWORD PTR _ix$42814[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 5708
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 5709
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 5711
	jmp	$LN333@MatchChunk
$LN10@MatchChunk:
; Line 5716
	cmp	DWORD PTR _opValue$[ebp], 0
	jl	SHORT $LN445@MatchChunk
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _opValue$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN446@MatchChunk
$LN445@MatchChunk:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	edx, 1415				; 00000587H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@KAEJIOLK@?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?$DM?$AAf?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAi?$AAz?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN446@MatchChunk:
; Line 5717
	mov	eax, DWORD PTR _opValue$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	mov	DWORD PTR _backSearchIndex$[ebp], edx
; Line 5718
	mov	eax, DWORD PTR _backSearchIndex$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv8355[ebp], eax
	mov	DWORD PTR tv8355[ebp+4], edx
	mov	DWORD PTR tv8358[ebp], ecx
	mov	edx, DWORD PTR tv8358[ebp]
	mov	eax, DWORD PTR tv8355[ebp+4]
	cmp	eax, DWORD PTR [edx+4]
	jl	SHORT $LN447@MatchChunk
	jg	SHORT $LN561@MatchChunk
	mov	ecx, DWORD PTR tv8358[ebp]
	mov	edx, DWORD PTR tv8355[ebp]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN447@MatchChunk
$LN561@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1417				; 00000589H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EC@IFFAOBGA@?$AAb?$AAa?$AAc?$AAk?$AAS?$AAe?$AAa?$AAr?$AAc?$AAh?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN447@MatchChunk:
; Line 5719
	mov	eax, DWORD PTR _backSearchIndex$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv8376[ebp], eax
	mov	DWORD PTR tv8376[ebp+4], edx
	mov	DWORD PTR tv8379[ebp], ecx
	mov	edx, DWORD PTR tv8379[ebp]
	mov	eax, DWORD PTR tv8376[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN9@MatchChunk
	mov	ecx, DWORD PTR tv8379[ebp]
	mov	edx, DWORD PTR tv8376[ebp+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN9@MatchChunk
; Line 5723
	jmp	$LN333@MatchChunk
$LN9@MatchChunk:
; Line 5730
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv8386[ebp], eax
	mov	ecx, DWORD PTR tv8386[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jg	SHORT $LN448@MatchChunk
	jl	SHORT $LN562@MatchChunk
	mov	edx, DWORD PTR tv8386[ebp]
	cmp	DWORD PTR [edx], 0
	ja	SHORT $LN448@MatchChunk
$LN562@MatchChunk:
	mov	eax, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	eax, 1429				; 00000595H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CE@MEMALIDK@?$AAf?$AAp?$AA?9?$AA?$DO?$AAf?$AAI?$AAn?$AAp?$AAu?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN448@MatchChunk:
; Line 5732
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _prevC$42846[ebp], edx
	mov	eax, DWORD PTR _prevC$42846[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	$LN8@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv8422[ebp], eax
	mov	ecx, DWORD PTR tv8422[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	$LN8@MatchChunk
	jg	SHORT $LN563@MatchChunk
	mov	edx, DWORD PTR tv8422[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT $LN8@MatchChunk
$LN563@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR ___c2$42848[ebp], dx
	movzx	eax, WORD PTR ___c2$42848[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN8@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	movzx	eax, WORD PTR ___c2$42848[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _prevC$42846[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _prevC$42846[ebp], edx
$LN8@MatchChunk:
; Line 5736
	cmp	DWORD PTR _prevC$42846[ebp], 10		; 0000000aH
	jne	$LN6@MatchChunk
	mov	eax, DWORD PTR _backSearchIndex$[ebp]
	cdq
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv8464[ebp], ecx
	mov	DWORD PTR tv8465[ebp], eax
	mov	DWORD PTR tv8465[ebp+4], edx
	mov	edx, DWORD PTR tv8464[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR tv8465[ebp+4]
	jl	$LN6@MatchChunk
	jg	SHORT $LN564@MatchChunk
	mov	ecx, DWORD PTR tv8464[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR tv8465[ebp]
	jbe	$LN6@MatchChunk
$LN564@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	cmp	edx, 13					; 0000000dH
	jne	$LN6@MatchChunk
; Line 5737
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR [eax+12]
	sbb	edx, 0
	push	0
	push	8
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _pat$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _prevOp$42853[ebp], edx
; Line 5738
	mov	eax, DWORD PTR _prevOp$42853[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, 52					; 00000034H
	jne	$LN6@MatchChunk
; Line 5740
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	0
	push	2
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN6@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR tv8539[ebp], eax
	mov	ecx, DWORD PTR tv8539[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN6@MatchChunk
	jg	SHORT $LN565@MatchChunk
	mov	edx, DWORD PTR tv8539[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT $LN6@MatchChunk
$LN565@MatchChunk:
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	push	0
	push	2
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _inputBuf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	and	edx, -1024				; fffffc00H
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN6@MatchChunk
	mov	eax, DWORD PTR _fp$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, 0
	mov	eax, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$LN6@MatchChunk:
; Line 5745
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	mov	eax, DWORD PTR [ecx+12]
	sbb	eax, 0
	push	eax
	push	edx
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StateSave@RegexMatcher@icu_56@@AAEPAUREStackFrame@2@PAU32@_JAAW4UErrorCode@@@Z ; icu_56::RegexMatcher::StateSave
	mov	DWORD PTR _fp$[ebp], eax
; Line 5747
	jmp	SHORT $LN333@MatchChunk
$LN3@MatchChunk:
; Line 5754
	xor	eax, eax
	jne	SHORT $LN333@MatchChunk
	mov	ecx, DWORD PTR ?__LINE__Var@?1??MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z@4JA
	add	ecx, 1453				; 000005adH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KOEBMNIJ@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN333@MatchChunk:
; Line 5757
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@MatchChunk
; Line 5758
	mov	BYTE PTR _isMatch$[ebp], 0
; Line 5759
	jmp	SHORT $breakFromLoop$42179
$LN2@MatchChunk:
; Line 5761
	jmp	$LN336@MatchChunk
$breakFromLoop$42179:
; Line 5764
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _isMatch$[ebp]
	mov	BYTE PTR [eax+106], cl
; Line 5765
	movsx	eax, BYTE PTR _isMatch$[ebp]
	test	eax, eax
	je	SHORT $LN1@MatchChunk
; Line 5766
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+128], edx
	mov	ecx, DWORD PTR [ecx+124]
	mov	DWORD PTR [eax+132], ecx
; Line 5767
	mov	eax, DWORD PTR _startIdx$[ebp]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], eax
	mov	DWORD PTR [ecx+116], edx
; Line 5768
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+120], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+124], ecx
$LN1@MatchChunk:
; Line 5781
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fp$[ebp]
	mov	DWORD PTR [eax+152], ecx
$LN342@MatchChunk:
; Line 5786
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN571@MatchChunk
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 2204				; 0000089cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN571@MatchChunk:
	DD	3
	DD	$LN570@MatchChunk
$LN570@MatchChunk:
	DD	-1328					; fffffad0H
	DD	40					; 00000028H
	DD	$LN566@MatchChunk
	DD	-1376					; fffffaa0H
	DD	40					; 00000028H
	DD	$LN567@MatchChunk
	DD	-1640					; fffff998H
	DD	40					; 00000028H
	DD	$LN568@MatchChunk
$LN568@MatchChunk:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN567@MatchChunk:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN566@MatchChunk:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	71					; 00000047H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
	npad	1
$LN572@MatchChunk:
	DD	$LN331@MatchChunk
	DD	$LN316@MatchChunk
	DD	$LN330@MatchChunk
	DD	$LN324@MatchChunk
	DD	$LN3@MatchChunk
	DD	$LN317@MatchChunk
	DD	$LN332@MatchChunk
	DD	$LN313@MatchChunk
	DD	$LN312@MatchChunk
	DD	$LN177@MatchChunk
	DD	$LN160@MatchChunk
	DD	$LN152@MatchChunk
	DD	$LN135@MatchChunk
	DD	$LN134@MatchChunk
	DD	$LN132@MatchChunk
	DD	$LN276@MatchChunk
	DD	$LN267@MatchChunk
	DD	$LN131@MatchChunk
	DD	$LN241@MatchChunk
	DD	$LN180@MatchChunk
	DD	$LN147@MatchChunk
	DD	$LN272@MatchChunk
	DD	$LN284@MatchChunk
	DD	$LN311@MatchChunk
	DD	$LN129@MatchChunk
	DD	$LN118@MatchChunk
	DD	$LN140@MatchChunk
	DD	$LN124@MatchChunk
	DD	$LN114@MatchChunk
	DD	$LN279@MatchChunk
	DD	$LN3@MatchChunk
	DD	$LN108@MatchChunk
	DD	$LN107@MatchChunk
	DD	$LN102@MatchChunk
	DD	$LN83@MatchChunk
	DD	$LN82@MatchChunk
	DD	$LN79@MatchChunk
	DD	$LN78@MatchChunk
	DD	$LN73@MatchChunk
	DD	$LN67@MatchChunk
	DD	$LN93@MatchChunk
	DD	$LN292@MatchChunk
	DD	$LN282@MatchChunk
	DD	$LN57@MatchChunk
	DD	$LN56@MatchChunk
	DD	$LN48@MatchChunk
	DD	$LN46@MatchChunk
	DD	$LN38@MatchChunk
	DD	$LN168@MatchChunk
	DD	$LN36@MatchChunk
	DD	$LN10@MatchChunk
	DD	$LN23@MatchChunk
	DD	$LN274@MatchChunk
	DD	$LN297@MatchChunk
	DD	$LN287@MatchChunk
	DD	$LN263@MatchChunk
	DD	$LN258@MatchChunk
	DD	$LN246@MatchChunk
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$21:
	lea	ecx, DWORD PTR _captureGroupItr$42640[ebp]
	jmp	??1CaseFoldingUCharIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUCharIterator::~CaseFoldingUCharIterator
__unwindfunclet$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$22:
	lea	ecx, DWORD PTR _inputItr$42641[ebp]
	jmp	??1CaseFoldingUCharIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUCharIterator::~CaseFoldingUCharIterator
__unwindfunclet$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z$23:
	lea	ecx, DWORD PTR _inputIterator$42705[ebp]
	jmp	??1CaseFoldingUCharIterator@icu_56@@QAE@XZ ; icu_56::CaseFoldingUCharIterator::~CaseFoldingUCharIterator
__ehhandler$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MatchChunkAt@RegexMatcher@icu_56@@AAEXHCAAW4UErrorCode@@@Z ENDP ; icu_56::RegexMatcher::MatchChunkAt
PUBLIC	?getStaticClassID@RegexMatcher@icu_56@@SAPAXXZ	; icu_56::RegexMatcher::getStaticClassID
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getStaticClassID@RegexMatcher@icu_56@@SAPAXXZ
_TEXT	SEGMENT
?getStaticClassID@RegexMatcher@icu_56@@SAPAXXZ PROC	; icu_56::RegexMatcher::getStaticClassID, COMDAT
; Line 5789
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, OFFSET ?classID@?1??getStaticClassID@RegexMatcher@icu_56@@SAPAXXZ@4DA
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getStaticClassID@RegexMatcher@icu_56@@SAPAXXZ ENDP	; icu_56::RegexMatcher::getStaticClassID
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getDynamicClassID@RegexMatcher@icu_56@@UBEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getDynamicClassID@RegexMatcher@icu_56@@UBEPAXXZ PROC	; icu_56::RegexMatcher::getDynamicClassID, COMDAT
; _this$ = ecx
; Line 5789
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?getStaticClassID@RegexMatcher@icu_56@@SAPAXXZ ; icu_56::RegexMatcher::getStaticClassID
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getDynamicClassID@RegexMatcher@icu_56@@UBEPAXXZ ENDP	; icu_56::RegexMatcher::getDynamicClassID
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ PROC	; icu_56::MaybeStackArray<wchar_t,40>::MaybeStackArray<wchar_t,40>, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\cmemory.h
; Line 310
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 40			; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ ENDP	; icu_56::MaybeStackArray<wchar_t,40>::MaybeStackArray<wchar_t,40>
_TEXT	ENDS
PUBLIC	?releaseArray@?$MaybeStackArray@_W$0CI@@icu_56@@AAEXXZ ; icu_56::MaybeStackArray<wchar_t,40>::releaseArray
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ PROC	; icu_56::MaybeStackArray<wchar_t,40>::~MaybeStackArray<wchar_t,40>, COMDAT
; _this$ = ecx
; Line 314
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?releaseArray@?$MaybeStackArray@_W$0CI@@icu_56@@AAEXXZ ; icu_56::MaybeStackArray<wchar_t,40>::releaseArray
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$MaybeStackArray@_W$0CI@@icu_56@@QAE@XZ ENDP	; icu_56::MaybeStackArray<wchar_t,40>::~MaybeStackArray<wchar_t,40>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getCapacity@?$MaybeStackArray@_W$0CI@@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getCapacity@?$MaybeStackArray@_W$0CI@@icu_56@@QBEHXZ PROC ; icu_56::MaybeStackArray<wchar_t,40>::getCapacity, COMDAT
; _this$ = ecx
; Line 319
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getCapacity@?$MaybeStackArray@_W$0CI@@icu_56@@QBEHXZ ENDP ; icu_56::MaybeStackArray<wchar_t,40>::getCapacity
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getAlias@?$MaybeStackArray@_W$0CI@@icu_56@@QBEPA_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getAlias@?$MaybeStackArray@_W$0CI@@icu_56@@QBEPA_WXZ PROC ; icu_56::MaybeStackArray<wchar_t,40>::getAlias, COMDAT
; _this$ = ecx
; Line 324
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getAlias@?$MaybeStackArray@_W$0CI@@icu_56@@QBEPA_WXZ ENDP ; icu_56::MaybeStackArray<wchar_t,40>::getAlias
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?releaseArray@?$MaybeStackArray@_W$0CI@@icu_56@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?releaseArray@?$MaybeStackArray@_W$0CI@@icu_56@@AAEXXZ PROC ; icu_56::MaybeStackArray<wchar_t,40>::releaseArray, COMDAT
; _this$ = ecx
; Line 387
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 388
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN2@releaseArr
; Line 389
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN2@releaseArr:
; Line 391
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?releaseArray@?$MaybeStackArray@_W$0CI@@icu_56@@AAEXXZ ENDP ; icu_56::MaybeStackArray<wchar_t,40>::releaseArray
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$MaybeStackArray@_W$0CI@@icu_56@@QAEPA_WHH@Z
_TEXT	SEGMENT
_p$46983 = -20						; size = 4
_this$ = -8						; size = 4
_newCapacity$ = 8					; size = 4
_length$ = 12						; size = 4
?resize@?$MaybeStackArray@_W$0CI@@icu_56@@QAEPA_WHH@Z PROC ; icu_56::MaybeStackArray<wchar_t,40>::resize, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 416
	cmp	DWORD PTR _newCapacity$[ebp], 0
	jle	$LN6@resize
; Line 420
	mov	eax, DWORD PTR _newCapacity$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _p$46983[ebp], eax
; Line 421
	cmp	DWORD PTR _p$46983[ebp], 0
	je	SHORT $LN5@resize
; Line 422
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN4@resize
; Line 423
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN3@resize
; Line 424
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx
$LN3@resize:
; Line 426
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _newCapacity$[ebp]
	jle	SHORT $LN2@resize
; Line 427
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR _length$[ebp], eax
$LN2@resize:
; Line 429
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _length$[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$46983[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@resize:
; Line 431
	mov	ecx, DWORD PTR _this$[ebp]
	call	?releaseArray@?$MaybeStackArray@_W$0CI@@icu_56@@AAEXXZ ; icu_56::MaybeStackArray<wchar_t,40>::releaseArray
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$46983[ebp]
	mov	DWORD PTR [eax], ecx
; Line 433
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 434
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 1
$LN5@resize:
; Line 436
	mov	eax, DWORD PTR _p$46983[ebp]
	jmp	SHORT $LN7@resize
; Line 437
	jmp	SHORT $LN7@resize
$LN6@resize:
; Line 438
	xor	eax, eax
$LN7@resize:
; Line 440
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$MaybeStackArray@_W$0CI@@icu_56@@QAEPA_WHH@Z ENDP ; icu_56::MaybeStackArray<wchar_t,40>::resize
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?orphanOrClone@?$MaybeStackArray@_W$0CI@@icu_56@@QAEPA_WHAAH@Z
_TEXT	SEGMENT
_p$ = -20						; size = 4
_this$ = -8						; size = 4
_length$ = 8						; size = 4
_resultCapacity$ = 12					; size = 4
?orphanOrClone@?$MaybeStackArray@_W$0CI@@icu_56@@QAEPA_WHAAH@Z PROC ; icu_56::MaybeStackArray<wchar_t,40>::orphanOrClone, COMDAT
; _this$ = ecx
; Line 443
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 445
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN6@orphanOrCl
; Line 446
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN5@orphanOrCl
$LN6@orphanOrCl:
; Line 447
	cmp	DWORD PTR _length$[ebp], 0
	jg	SHORT $LN4@orphanOrCl
; Line 448
	xor	eax, eax
	jmp	$LN7@orphanOrCl
; Line 449
	jmp	SHORT $LN5@orphanOrCl
$LN4@orphanOrCl:
; Line 450
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN2@orphanOrCl
; Line 451
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _length$[ebp], ecx
$LN2@orphanOrCl:
; Line 453
	mov	eax, DWORD PTR _length$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 457
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@orphanOrCl
; Line 458
	xor	eax, eax
	jmp	SHORT $LN7@orphanOrCl
$LN1@orphanOrCl:
; Line 460
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _length$[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN5@orphanOrCl:
; Line 462
	mov	eax, DWORD PTR _resultCapacity$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 463
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 464
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 40			; 00000028H
; Line 465
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0
; Line 466
	mov	eax, DWORD PTR _p$[ebp]
$LN7@orphanOrCl:
; Line 467
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?orphanOrClone@?$MaybeStackArray@_W$0CI@@icu_56@@QAEPA_WHAAH@Z ENDP ; icu_56::MaybeStackArray<wchar_t,40>::orphanOrClone
_TEXT	ENDS
END
