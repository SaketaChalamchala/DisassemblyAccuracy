; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\i18n\bocsu.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\include\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_u_writeIdenticalLevelRun_56
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_writeIdenticalLevelRun_56
_TEXT	SEGMENT
___c2$31546 = -156					; size = 2
_c$31544 = -144						; size = 4
_lastSafe$31537 = -132					; size = 4
_p$31533 = -120						; size = 4
_buffer$31531 = -108					; size = 4
_i$ = -96						; size = 4
_capacity$ = -84					; size = 4
_scratch$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_prev$ = 8						; size = 4
_s$ = 12						; size = 4
_length$ = 16						; size = 4
_sink$ = 20						; size = 4
_u_writeIdenticalLevelRun_56 PROC			; COMDAT
; File d:\mozilla\intl\icu\source\i18n\bocsu.cpp
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 103
	mov	DWORD PTR _i$[ebp], 0
$LN12@u_writeIde:
; Line 104
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN11@u_writeIde
; Line 105
	mov	esi, esp
	lea	eax, DWORD PTR _capacity$[ebp]
	push	eax
	push	64					; 00000040H
	lea	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	shl	edx, 1
	push	edx
	push	1
	mov	eax, DWORD PTR _sink$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _sink$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buffer$31531[ebp], eax
; Line 110
	cmp	DWORD PTR _capacity$[ebp], 16		; 00000010H
	jge	SHORT $LN10@u_writeIde
; Line 111
	lea	eax, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR _buffer$31531[ebp], eax
; Line 112
	mov	DWORD PTR _capacity$[ebp], 64		; 00000040H
$LN10@u_writeIde:
; Line 114
	mov	eax, DWORD PTR _buffer$31531[ebp]
	mov	DWORD PTR _p$31533[ebp], eax
; Line 115
	mov	eax, DWORD PTR _capacity$[ebp]
	mov	ecx, DWORD PTR _p$31533[ebp]
	lea	edx, DWORD PTR [ecx+eax-4]
	mov	DWORD PTR _lastSafe$31537[ebp], edx
$LN9@u_writeIde:
; Line 116
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN8@u_writeIde
	mov	eax, DWORD PTR _p$31533[ebp]
	cmp	eax, DWORD PTR _lastSafe$31537[ebp]
	ja	$LN8@u_writeIde
; Line 117
	cmp	DWORD PTR _prev$[ebp], 19968		; 00004e00H
	jl	SHORT $LN6@u_writeIde
	cmp	DWORD PTR _prev$[ebp], 40960		; 0000a000H
	jl	SHORT $LN7@u_writeIde
$LN6@u_writeIde:
; Line 118
	mov	eax, DWORD PTR _prev$[ebp]
	and	eax, -128				; ffffff80H
	add	eax, 80					; 00000050H
	mov	DWORD PTR _prev$[ebp], eax
; Line 119
	jmp	SHORT $LN5@u_writeIde
$LN7@u_writeIde:
; Line 124
	mov	DWORD PTR _prev$[ebp], 30292		; 00007654H
$LN5@u_writeIde:
; Line 128
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _c$31544[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _c$31544[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN4@u_writeIde
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	je	SHORT $LN4@u_writeIde
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$31546[ebp], dx
	movzx	eax, WORD PTR ___c2$31546[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN4@u_writeIde
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _c$31544[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$31546[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$31544[ebp], edx
$LN4@u_writeIde:
; Line 129
	cmp	DWORD PTR _c$31544[ebp], 65534		; 0000fffeH
	jne	SHORT $LN2@u_writeIde
; Line 130
	mov	eax, DWORD PTR _p$31533[ebp]
	mov	BYTE PTR [eax], 2
	mov	ecx, DWORD PTR _p$31533[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$31533[ebp], ecx
; Line 131
	mov	DWORD PTR _prev$[ebp], 0
; Line 132
	jmp	SHORT $LN1@u_writeIde
$LN2@u_writeIde:
; Line 133
	mov	eax, DWORD PTR _p$31533[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$31544[ebp]
	sub	ecx, DWORD PTR _prev$[ebp]
	push	ecx
	call	?u_writeDiff@@YAPAEHPAE@Z		; u_writeDiff
	add	esp, 8
	mov	DWORD PTR _p$31533[ebp], eax
; Line 134
	mov	eax, DWORD PTR _c$31544[ebp]
	mov	DWORD PTR _prev$[ebp], eax
$LN1@u_writeIde:
; Line 136
	jmp	$LN9@u_writeIde
$LN8@u_writeIde:
; Line 137
	mov	eax, DWORD PTR _p$31533[ebp]
	sub	eax, DWORD PTR _buffer$31531[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _buffer$31531[ebp]
	push	ecx
	mov	edx, DWORD PTR _sink$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _sink$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 138
	jmp	$LN12@u_writeIde
$LN11@u_writeIde:
; Line 139
	mov	eax, DWORD PTR _prev$[ebp]
; Line 140
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@u_writeIde
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@u_writeIde:
	DD	2
	DD	$LN17@u_writeIde
$LN17@u_writeIde:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN15@u_writeIde
	DD	-84					; ffffffacH
	DD	4
	DD	$LN16@u_writeIde
$LN16@u_writeIde:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
$LN15@u_writeIde:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_u_writeIdenticalLevelRun_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?u_writeDiff@@YAPAEHPAE@Z
_TEXT	SEGMENT
_m$31500 = -8						; size = 4
_diff$ = 8						; size = 4
_p$ = 12						; size = 4
?u_writeDiff@@YAPAEHPAE@Z PROC				; u_writeDiff, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 32
	cmp	DWORD PTR _diff$[ebp], -80		; ffffffb0H
	jl	$LN18@u_writeDif
; Line 33
	cmp	DWORD PTR _diff$[ebp], 80		; 00000050H
	jg	SHORT $LN17@u_writeDif
; Line 34
	mov	eax, DWORD PTR _diff$[ebp]
	add	eax, 129				; 00000081H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	$LN16@u_writeDif
$LN17@u_writeDif:
; Line 35
	cmp	DWORD PTR _diff$[ebp], 10667		; 000029abH
	jg	SHORT $LN15@u_writeDif
; Line 36
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	add	eax, 210				; 000000d2H
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 37
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	add	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	jmp	$LN16@u_writeDif
$LN15@u_writeDif:
; Line 38
	cmp	DWORD PTR _diff$[ebp], 192785		; 0002f111H
	jg	SHORT $LN13@u_writeDif
; Line 39
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	add	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+2], dl
; Line 40
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _diff$[ebp], eax
; Line 41
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	add	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 42
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	add	eax, 252				; 000000fcH
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], al
; Line 43
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
; Line 44
	jmp	SHORT $LN16@u_writeDif
$LN13@u_writeDif:
; Line 45
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	add	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+3], dl
; Line 46
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _diff$[ebp], eax
; Line 47
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	add	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+2], dl
; Line 48
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _diff$[ebp], eax
; Line 49
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	add	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 50
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH
; Line 51
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
$LN16@u_writeDif:
; Line 53
	jmp	$LN11@u_writeDif
$LN18@u_writeDif:
; Line 56
	cmp	DWORD PTR _diff$[ebp], -10668		; ffffd654H
	jl	SHORT $LN10@u_writeDif
; Line 57
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _m$31500[ebp], edx
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _diff$[ebp], eax
	cmp	DWORD PTR _m$31500[ebp], 0
	jge	SHORT $LN9@u_writeDif
	mov	eax, DWORD PTR _diff$[ebp]
	sub	eax, 1
	mov	DWORD PTR _diff$[ebp], eax
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 253				; 000000fdH
	mov	DWORD PTR _m$31500[ebp], eax
$LN9@u_writeDif:
; Line 58
	mov	eax, DWORD PTR _diff$[ebp]
	add	eax, 49					; 00000031H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 59
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	$LN11@u_writeDif
$LN10@u_writeDif:
; Line 60
	cmp	DWORD PTR _diff$[ebp], -192786		; fffd0eeeH
	jl	$LN7@u_writeDif
; Line 61
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _m$31500[ebp], edx
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _diff$[ebp], eax
	cmp	DWORD PTR _m$31500[ebp], 0
	jge	SHORT $LN6@u_writeDif
	mov	eax, DWORD PTR _diff$[ebp]
	sub	eax, 1
	mov	DWORD PTR _diff$[ebp], eax
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 253				; 000000fdH
	mov	DWORD PTR _m$31500[ebp], eax
$LN6@u_writeDif:
; Line 62
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+2], al
; Line 63
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _m$31500[ebp], edx
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _diff$[ebp], eax
	cmp	DWORD PTR _m$31500[ebp], 0
	jge	SHORT $LN5@u_writeDif
	mov	eax, DWORD PTR _diff$[ebp]
	sub	eax, 1
	mov	DWORD PTR _diff$[ebp], eax
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 253				; 000000fdH
	mov	DWORD PTR _m$31500[ebp], eax
$LN5@u_writeDif:
; Line 64
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 65
	mov	eax, DWORD PTR _diff$[ebp]
	add	eax, 7
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
; Line 66
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
; Line 67
	jmp	$LN11@u_writeDif
$LN7@u_writeDif:
; Line 68
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _m$31500[ebp], edx
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _diff$[ebp], eax
	cmp	DWORD PTR _m$31500[ebp], 0
	jge	SHORT $LN3@u_writeDif
	mov	eax, DWORD PTR _diff$[ebp]
	sub	eax, 1
	mov	DWORD PTR _diff$[ebp], eax
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 253				; 000000fdH
	mov	DWORD PTR _m$31500[ebp], eax
$LN3@u_writeDif:
; Line 69
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+3], al
; Line 70
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _m$31500[ebp], edx
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _diff$[ebp], eax
	cmp	DWORD PTR _m$31500[ebp], 0
	jge	SHORT $LN2@u_writeDif
	mov	eax, DWORD PTR _diff$[ebp]
	sub	eax, 1
	mov	DWORD PTR _diff$[ebp], eax
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 253				; 000000fdH
	mov	DWORD PTR _m$31500[ebp], eax
$LN2@u_writeDif:
; Line 71
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+2], al
; Line 72
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _m$31500[ebp], edx
	mov	eax, DWORD PTR _diff$[ebp]
	cdq
	mov	ecx, 253				; 000000fdH
	idiv	ecx
	mov	DWORD PTR _diff$[ebp], eax
	cmp	DWORD PTR _m$31500[ebp], 0
	jge	SHORT $LN1@u_writeDif
	mov	eax, DWORD PTR _diff$[ebp]
	sub	eax, 1
	mov	DWORD PTR _diff$[ebp], eax
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 253				; 000000fdH
	mov	DWORD PTR _m$31500[ebp], eax
$LN1@u_writeDif:
; Line 73
	mov	eax, DWORD PTR _m$31500[ebp]
	add	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 74
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 3
; Line 75
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
$LN11@u_writeDif:
; Line 78
	mov	eax, DWORD PTR _p$[ebp]
; Line 79
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?u_writeDiff@@YAPAEHPAE@Z ENDP				; u_writeDiff
_TEXT	ENDS
END
