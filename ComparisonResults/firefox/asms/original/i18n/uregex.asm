; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\i18n\uregex.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\include\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??9RegexPattern@icu_56@@QBECABV01@@Z		; icu_56::RegexPattern::operator!=
EXTRN	??8RegexPattern@icu_56@@QBECABV01@@Z:PROC	; icu_56::RegexPattern::operator==
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9RegexPattern@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_that$ = 8						; size = 4
??9RegexPattern@icu_56@@QBECABV01@@Z PROC		; icu_56::RegexPattern::operator!=, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\regex.h
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8RegexPattern@icu_56@@QBECABV01@@Z	; icu_56::RegexPattern::operator==
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9RegexPattern@icu_56@@QBECABV01@@Z ENDP		; icu_56::RegexPattern::operator!=
_TEXT	ENDS
PUBLIC	??0RegularExpression@icu_56@@QAE@XZ		; icu_56::RegularExpression::RegularExpression
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0RegularExpression@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0RegularExpression@icu_56@@QAE@XZ PROC		; icu_56::RegularExpression::RegularExpression, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\uregex.cpp
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 1919252592		; 72657870H
; Line 52
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 53
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 54
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 56
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 57
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 58
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 59
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 0
; Line 60
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0RegularExpression@icu_56@@QAE@XZ ENDP		; icu_56::RegularExpression::RegularExpression
_TEXT	ENDS
PUBLIC	?umtx_atomic_dec@icu_56@@YAHPCJ@Z		; icu_56::umtx_atomic_dec
PUBLIC	??1RegularExpression@icu_56@@QAE@XZ		; icu_56::RegularExpression::~RegularExpression
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1RegularExpression@icu_56@@QAE@XZ
_TEXT	SEGMENT
tv94 = -256						; size = 4
tv75 = -256						; size = 4
$T77546 = -248						; size = 4
$T77547 = -236						; size = 4
$T77550 = -224						; size = 4
$T77551 = -212						; size = 4
_this$ = -8						; size = 4
??1RegularExpression@icu_56@@QAE@XZ PROC		; icu_56::RegularExpression::~RegularExpression, COMDAT
; _this$ = ecx
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T77547[ebp], ecx
	mov	edx, DWORD PTR $T77547[ebp]
	mov	DWORD PTR $T77546[ebp], edx
	cmp	DWORD PTR $T77546[ebp], 0
	je	SHORT $LN5@RegularExp
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T77546[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T77546[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@RegularExp
$LN5@RegularExp:
	mov	DWORD PTR tv75[ebp], 0
$LN6@RegularExp:
; Line 64
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN2@RegularExp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?umtx_atomic_dec@icu_56@@YAHPCJ@Z	; icu_56::umtx_atomic_dec
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@RegularExp
; Line 66
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T77551[ebp], ecx
	mov	edx, DWORD PTR $T77551[ebp]
	mov	DWORD PTR $T77550[ebp], edx
	cmp	DWORD PTR $T77550[ebp], 0
	je	SHORT $LN7@RegularExp
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T77550[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T77550[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN8@RegularExp
$LN7@RegularExp:
	mov	DWORD PTR tv94[ebp], 0
$LN8@RegularExp:
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 68
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN2@RegularExp:
; Line 70
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	je	SHORT $LN1@RegularExp
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN1@RegularExp
; Line 71
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN1@RegularExp:
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 74
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1RegularExpression@icu_56@@QAE@XZ ENDP		; icu_56::RegularExpression::~RegularExpression
_TEXT	ENDS
EXTRN	__imp__InterlockedDecrement@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?umtx_atomic_dec@icu_56@@YAHPCJ@Z
_TEXT	SEGMENT
_var$ = 8						; size = 4
?umtx_atomic_dec@icu_56@@YAHPCJ@Z PROC			; icu_56::umtx_atomic_dec, COMDAT
; File d:\mozilla\intl\icu\source\common\umutex.h
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 116
	mov	esi, esp
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	DWORD PTR __imp__InterlockedDecrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 117
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?umtx_atomic_dec@icu_56@@YAHPCJ@Z ENDP			; icu_56::umtx_atomic_dec
_TEXT	ENDS
PUBLIC	??_GRegularExpression@icu_56@@QAEPAXI@Z		; icu_56::RegularExpression::`scalar deleting destructor'
PUBLIC	_uregex_open_56
EXTRN	_utext_close_56:PROC
EXTRN	?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAW4UErrorCode@@@Z:PROC ; icu_56::RegexPattern::compile
EXTRN	?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAUUParseError@@AAW4UErrorCode@@@Z:PROC ; icu_56::RegexPattern::compile
EXTRN	_utext_openUChars_56:PROC
EXTRN	_u_memcpy_56:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	__imp_??2UMemory@icu_56@@SAPAXI@Z:PROC
EXTRN	_u_strlen_56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_open_56
_TEXT	SEGMENT
tv211 = -436						; size = 4
tv94 = -436						; size = 4
tv81 = -436						; size = 4
$T77558 = -428						; size = 4
$T77559 = -416						; size = 4
$T77562 = -404						; size = 4
$T77563 = -392						; size = 4
$T77566 = -380						; size = 4
$T77567 = -368						; size = 4
_patText$ = -164					; size = 112
_patBuf$ = -44						; size = 4
_refC$ = -32						; size = 4
_re$ = -20						; size = 4
_actualPatLen$ = -8					; size = 4
_pattern$ = 8						; size = 4
_patternLength$ = 12					; size = 4
_flags$ = 16						; size = 4
_pe$ = 20						; size = 4
_status$ = 24						; size = 4
_uregex_open_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\i18n\uregex.cpp
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 436				; 000001b4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-436]
	mov	ecx, 109				; 0000006dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 113
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN11@uregex_ope
; Line 114
	xor	eax, eax
	jmp	$LN12@uregex_ope
$LN11@uregex_ope:
; Line 116
	cmp	DWORD PTR _pattern$[ebp], 0
	je	SHORT $LN9@uregex_ope
	cmp	DWORD PTR _patternLength$[ebp], -1
	jl	SHORT $LN9@uregex_ope
	cmp	DWORD PTR _patternLength$[ebp], 0
	jne	SHORT $LN10@uregex_ope
$LN9@uregex_ope:
; Line 117
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 118
	xor	eax, eax
	jmp	$LN12@uregex_ope
$LN10@uregex_ope:
; Line 120
	mov	eax, DWORD PTR _patternLength$[ebp]
	mov	DWORD PTR _actualPatLen$[ebp], eax
; Line 121
	cmp	DWORD PTR _actualPatLen$[ebp], -1
	jne	SHORT $LN8@uregex_ope
; Line 122
	mov	eax, DWORD PTR _pattern$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _actualPatLen$[ebp], eax
$LN8@uregex_ope:
; Line 125
	mov	esi, esp
	push	36					; 00000024H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T77559[ebp], eax
	cmp	DWORD PTR $T77559[ebp], 0
	je	SHORT $LN14@uregex_ope
	mov	ecx, DWORD PTR $T77559[ebp]
	call	??0RegularExpression@icu_56@@QAE@XZ	; icu_56::RegularExpression::RegularExpression
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN15@uregex_ope
$LN14@uregex_ope:
	mov	DWORD PTR tv81[ebp], 0
$LN15@uregex_ope:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T77558[ebp], eax
	mov	ecx, DWORD PTR $T77558[ebp]
	mov	DWORD PTR _re$[ebp], ecx
; Line 126
	push	4
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _refC$[ebp], eax
; Line 127
	mov	eax, DWORD PTR _actualPatLen$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _patBuf$[ebp], eax
; Line 128
	cmp	DWORD PTR _re$[ebp], 0
	je	SHORT $LN6@uregex_ope
	cmp	DWORD PTR _refC$[ebp], 0
	je	SHORT $LN6@uregex_ope
	cmp	DWORD PTR _patBuf$[ebp], 0
	jne	SHORT $LN7@uregex_ope
$LN6@uregex_ope:
; Line 129
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 130
	mov	eax, DWORD PTR _re$[ebp]
	mov	DWORD PTR $T77563[ebp], eax
	mov	ecx, DWORD PTR $T77563[ebp]
	mov	DWORD PTR $T77562[ebp], ecx
	cmp	DWORD PTR $T77562[ebp], 0
	je	SHORT $LN16@uregex_ope
	push	1
	mov	ecx, DWORD PTR $T77562[ebp]
	call	??_GRegularExpression@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN17@uregex_ope
$LN16@uregex_ope:
	mov	DWORD PTR tv94[ebp], 0
$LN17@uregex_ope:
; Line 131
	mov	eax, DWORD PTR _refC$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 132
	mov	eax, DWORD PTR _patBuf$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 133
	xor	eax, eax
	jmp	$LN12@uregex_ope
$LN7@uregex_ope:
; Line 135
	mov	eax, DWORD PTR _re$[ebp]
	mov	ecx, DWORD PTR _refC$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 136
	mov	eax, DWORD PTR _re$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx], 1
; Line 143
	mov	eax, DWORD PTR _re$[ebp]
	mov	ecx, DWORD PTR _patBuf$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 144
	mov	eax, DWORD PTR _re$[ebp]
	mov	ecx, DWORD PTR _patternLength$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 145
	mov	eax, DWORD PTR _actualPatLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pattern$[ebp]
	push	ecx
	mov	edx, DWORD PTR _patBuf$[ebp]
	push	edx
	call	_u_memcpy_56
	add	esp, 12					; 0000000cH
; Line 146
	xor	eax, eax
	mov	ecx, DWORD PTR _actualPatLen$[ebp]
	mov	edx, DWORD PTR _patBuf$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 148
	mov	DWORD PTR _patText$[ebp], 878368812	; 345ad82cH
	mov	DWORD PTR _patText$[ebp+4], 0
	mov	DWORD PTR _patText$[ebp+8], 0
	mov	DWORD PTR _patText$[ebp+12], 112	; 00000070H
	mov	DWORD PTR _patText$[ebp+16], 0
	mov	DWORD PTR _patText$[ebp+20], 0
	mov	DWORD PTR _patText$[ebp+24], 0
	mov	DWORD PTR _patText$[ebp+28], 0
	mov	DWORD PTR _patText$[ebp+32], 0
	mov	DWORD PTR _patText$[ebp+36], 0
	mov	DWORD PTR _patText$[ebp+40], 0
	mov	DWORD PTR _patText$[ebp+44], 0
	mov	DWORD PTR _patText$[ebp+48], 0
	mov	DWORD PTR _patText$[ebp+52], 0
	mov	DWORD PTR _patText$[ebp+56], 0
	mov	DWORD PTR _patText$[ebp+60], 0
	mov	DWORD PTR _patText$[ebp+64], 0
	mov	DWORD PTR _patText$[ebp+68], 0
	mov	DWORD PTR _patText$[ebp+72], 0
	mov	DWORD PTR _patText$[ebp+76], 0
	mov	DWORD PTR _patText$[ebp+80], 0
	mov	DWORD PTR _patText$[ebp+84], 0
	mov	DWORD PTR _patText$[ebp+88], 0
	mov	DWORD PTR _patText$[ebp+92], 0
	mov	DWORD PTR _patText$[ebp+96], 0
	mov	DWORD PTR _patText$[ebp+100], 0
	mov	DWORD PTR _patText$[ebp+104], 0
	mov	DWORD PTR _patText$[ebp+108], 0
; Line 149
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _patternLength$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _patBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _patText$[ebp]
	push	edx
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
; Line 154
	cmp	DWORD PTR _pe$[ebp], 0
	je	SHORT $LN5@uregex_ope
; Line 155
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pe$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	lea	eax, DWORD PTR _patText$[ebp]
	push	eax
	call	?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAUUParseError@@AAW4UErrorCode@@@Z ; icu_56::RegexPattern::compile
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _re$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 156
	jmp	SHORT $LN4@uregex_ope
$LN5@uregex_ope:
; Line 157
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	lea	edx, DWORD PTR _patText$[ebp]
	push	edx
	call	?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAW4UErrorCode@@@Z ; icu_56::RegexPattern::compile
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _re$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN4@uregex_ope:
; Line 159
	lea	eax, DWORD PTR _patText$[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
; Line 161
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@uregex_ope
; Line 162
	jmp	SHORT $ErrorExit$69984
$LN3@uregex_ope:
; Line 168
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _re$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _re$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _re$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 169
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $ErrorExit$69984
; Line 170
	mov	eax, DWORD PTR _re$[ebp]
	jmp	SHORT $LN12@uregex_ope
$ErrorExit$69984:
; Line 174
	mov	eax, DWORD PTR _re$[ebp]
	mov	DWORD PTR $T77567[ebp], eax
	mov	ecx, DWORD PTR $T77567[ebp]
	mov	DWORD PTR $T77566[ebp], ecx
	cmp	DWORD PTR $T77566[ebp], 0
	je	SHORT $LN18@uregex_ope
	push	1
	mov	ecx, DWORD PTR $T77566[ebp]
	call	??_GRegularExpression@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv211[ebp], eax
	jmp	SHORT $LN19@uregex_ope
$LN18@uregex_ope:
	mov	DWORD PTR tv211[ebp], 0
$LN19@uregex_ope:
; Line 175
	xor	eax, eax
$LN12@uregex_ope:
; Line 177
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@uregex_ope
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 436				; 000001b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN22@uregex_ope:
	DD	1
	DD	$LN21@uregex_ope
$LN21@uregex_ope:
	DD	-164					; ffffff5cH
	DD	112					; 00000070H
	DD	$LN20@uregex_ope
$LN20@uregex_ope:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_uregex_open_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_SUCCESS@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_SUCCESS@@YACW4UErrorCode@@@Z PROC			; U_SUCCESS, COMDAT
; File d:\mozilla\intl\icu\include\unicode\utypes.h
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setle	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_SUCCESS@@YACW4UErrorCode@@@Z ENDP			; U_SUCCESS
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
EXTRN	__imp_??3UMemory@icu_56@@SAXPAX@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GRegularExpression@icu_56@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GRegularExpression@icu_56@@QAEPAXI@Z PROC		; icu_56::RegularExpression::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RegularExpression@icu_56@@QAE@XZ	; icu_56::RegularExpression::~RegularExpression
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRegularExpression@icu_56@@QAEPAXI@Z ENDP		; icu_56::RegularExpression::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_uregex_openUText_56
EXTRN	_utext_extract_56:PROC
EXTRN	_utext_nativeLength_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_openUText_56
_TEXT	SEGMENT
tv218 = -464						; size = 4
tv131 = -464						; size = 4
tv79 = -464						; size = 4
$T77582 = -456						; size = 4
$T77583 = -444						; size = 4
$T77586 = -432						; size = 4
$T77587 = -420						; size = 4
$T77590 = -408						; size = 4
$T77591 = -396						; size = 4
_patText$ = -192					; size = 112
_patBuf$ = -72						; size = 4
_refC$ = -60						; size = 4
_pattern16Length$ = -48					; size = 4
_lengthStatus$ = -36					; size = 4
_re$ = -24						; size = 4
_patternNativeLength$ = -12				; size = 8
_pattern$ = 8						; size = 4
_flags$ = 12						; size = 4
_pe$ = 16						; size = 4
_status$ = 20						; size = 4
_uregex_openUText_56 PROC				; COMDAT
; File d:\mozilla\intl\icu\source\i18n\uregex.cpp
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 464				; 000001d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-464]
	mov	ecx, 116				; 00000074H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 190
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN10@uregex_ope@2
; Line 191
	xor	eax, eax
	jmp	$LN11@uregex_ope@2
$LN10@uregex_ope@2:
; Line 193
	cmp	DWORD PTR _pattern$[ebp], 0
	jne	SHORT $LN9@uregex_ope@2
; Line 194
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 195
	xor	eax, eax
	jmp	$LN11@uregex_ope@2
$LN9@uregex_ope@2:
; Line 198
	mov	eax, DWORD PTR _pattern$[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	mov	DWORD PTR _patternNativeLength$[ebp], eax
	mov	DWORD PTR _patternNativeLength$[ebp+4], edx
; Line 200
	mov	eax, DWORD PTR _patternNativeLength$[ebp]
	or	eax, DWORD PTR _patternNativeLength$[ebp+4]
	jne	SHORT $LN8@uregex_ope@2
; Line 201
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 202
	xor	eax, eax
	jmp	$LN11@uregex_ope@2
$LN8@uregex_ope@2:
; Line 205
	mov	esi, esp
	push	36					; 00000024H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T77583[ebp], eax
	cmp	DWORD PTR $T77583[ebp], 0
	je	SHORT $LN13@uregex_ope@2
	mov	ecx, DWORD PTR $T77583[ebp]
	call	??0RegularExpression@icu_56@@QAE@XZ	; icu_56::RegularExpression::RegularExpression
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN14@uregex_ope@2
$LN13@uregex_ope@2:
	mov	DWORD PTR tv79[ebp], 0
$LN14@uregex_ope@2:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T77582[ebp], eax
	mov	ecx, DWORD PTR $T77582[ebp]
	mov	DWORD PTR _re$[ebp], ecx
; Line 207
	mov	DWORD PTR _lengthStatus$[ebp], 0
; Line 208
	lea	eax, DWORD PTR _lengthStatus$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _patternNativeLength$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _patternNativeLength$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _pattern$[ebp]
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _pattern16Length$[ebp], eax
; Line 210
	push	4
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _refC$[ebp], eax
; Line 211
	mov	eax, DWORD PTR _pattern16Length$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _patBuf$[ebp], eax
; Line 212
	cmp	DWORD PTR _re$[ebp], 0
	je	SHORT $LN6@uregex_ope@2
	cmp	DWORD PTR _refC$[ebp], 0
	je	SHORT $LN6@uregex_ope@2
	cmp	DWORD PTR _patBuf$[ebp], 0
	jne	SHORT $LN7@uregex_ope@2
$LN6@uregex_ope@2:
; Line 213
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 214
	mov	eax, DWORD PTR _re$[ebp]
	mov	DWORD PTR $T77587[ebp], eax
	mov	ecx, DWORD PTR $T77587[ebp]
	mov	DWORD PTR $T77586[ebp], ecx
	cmp	DWORD PTR $T77586[ebp], 0
	je	SHORT $LN15@uregex_ope@2
	push	1
	mov	ecx, DWORD PTR $T77586[ebp]
	call	??_GRegularExpression@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN16@uregex_ope@2
$LN15@uregex_ope@2:
	mov	DWORD PTR tv131[ebp], 0
$LN16@uregex_ope@2:
; Line 215
	mov	eax, DWORD PTR _refC$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 216
	mov	eax, DWORD PTR _patBuf$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 217
	xor	eax, eax
	jmp	$LN11@uregex_ope@2
$LN7@uregex_ope@2:
; Line 219
	mov	eax, DWORD PTR _re$[ebp]
	mov	ecx, DWORD PTR _refC$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 220
	mov	eax, DWORD PTR _re$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx], 1
; Line 227
	mov	eax, DWORD PTR _re$[ebp]
	mov	ecx, DWORD PTR _patBuf$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 228
	mov	eax, DWORD PTR _re$[ebp]
	mov	ecx, DWORD PTR _pattern16Length$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 229
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pattern16Length$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _patBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _patternNativeLength$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _patternNativeLength$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _pattern$[ebp]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
; Line 231
	mov	DWORD PTR _patText$[ebp], 878368812	; 345ad82cH
	mov	DWORD PTR _patText$[ebp+4], 0
	mov	DWORD PTR _patText$[ebp+8], 0
	mov	DWORD PTR _patText$[ebp+12], 112	; 00000070H
	mov	DWORD PTR _patText$[ebp+16], 0
	mov	DWORD PTR _patText$[ebp+20], 0
	mov	DWORD PTR _patText$[ebp+24], 0
	mov	DWORD PTR _patText$[ebp+28], 0
	mov	DWORD PTR _patText$[ebp+32], 0
	mov	DWORD PTR _patText$[ebp+36], 0
	mov	DWORD PTR _patText$[ebp+40], 0
	mov	DWORD PTR _patText$[ebp+44], 0
	mov	DWORD PTR _patText$[ebp+48], 0
	mov	DWORD PTR _patText$[ebp+52], 0
	mov	DWORD PTR _patText$[ebp+56], 0
	mov	DWORD PTR _patText$[ebp+60], 0
	mov	DWORD PTR _patText$[ebp+64], 0
	mov	DWORD PTR _patText$[ebp+68], 0
	mov	DWORD PTR _patText$[ebp+72], 0
	mov	DWORD PTR _patText$[ebp+76], 0
	mov	DWORD PTR _patText$[ebp+80], 0
	mov	DWORD PTR _patText$[ebp+84], 0
	mov	DWORD PTR _patText$[ebp+88], 0
	mov	DWORD PTR _patText$[ebp+92], 0
	mov	DWORD PTR _patText$[ebp+96], 0
	mov	DWORD PTR _patText$[ebp+100], 0
	mov	DWORD PTR _patText$[ebp+104], 0
	mov	DWORD PTR _patText$[ebp+108], 0
; Line 232
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _pattern16Length$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _patBuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _patText$[ebp]
	push	edx
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
; Line 237
	cmp	DWORD PTR _pe$[ebp], 0
	je	SHORT $LN5@uregex_ope@2
; Line 238
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pe$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	lea	eax, DWORD PTR _patText$[ebp]
	push	eax
	call	?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAUUParseError@@AAW4UErrorCode@@@Z ; icu_56::RegexPattern::compile
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _re$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 239
	jmp	SHORT $LN4@uregex_ope@2
$LN5@uregex_ope@2:
; Line 240
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	lea	edx, DWORD PTR _patText$[ebp]
	push	edx
	call	?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAW4UErrorCode@@@Z ; icu_56::RegexPattern::compile
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _re$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN4@uregex_ope@2:
; Line 242
	lea	eax, DWORD PTR _patText$[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
; Line 244
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@uregex_ope@2
; Line 245
	jmp	SHORT $ErrorExit$70027
$LN3@uregex_ope@2:
; Line 251
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _re$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _re$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _re$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 252
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $ErrorExit$70027
; Line 253
	mov	eax, DWORD PTR _re$[ebp]
	jmp	SHORT $LN11@uregex_ope@2
$ErrorExit$70027:
; Line 257
	mov	eax, DWORD PTR _re$[ebp]
	mov	DWORD PTR $T77591[ebp], eax
	mov	ecx, DWORD PTR $T77591[ebp]
	mov	DWORD PTR $T77590[ebp], ecx
	cmp	DWORD PTR $T77590[ebp], 0
	je	SHORT $LN17@uregex_ope@2
	push	1
	mov	ecx, DWORD PTR $T77590[ebp]
	call	??_GRegularExpression@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv218[ebp], eax
	jmp	SHORT $LN18@uregex_ope@2
$LN17@uregex_ope@2:
	mov	DWORD PTR tv218[ebp], 0
$LN18@uregex_ope@2:
; Line 258
	xor	eax, eax
$LN11@uregex_ope@2:
; Line 260
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@uregex_ope@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 464				; 000001d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@uregex_ope@2:
	DD	2
	DD	$LN21@uregex_ope@2
$LN21@uregex_ope@2:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN19@uregex_ope@2
	DD	-192					; ffffff40H
	DD	112					; 00000070H
	DD	$LN20@uregex_ope@2
$LN20@uregex_ope@2:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN19@uregex_ope@2:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uregex_openUText_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_close_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_close_56
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T77600 = -236						; size = 4
$T77601 = -224						; size = 4
_status$ = -20						; size = 4
_re$ = -8						; size = 4
_re2$ = 8						; size = 4
_uregex_close_56 PROC					; COMDAT
; Line 268
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 269
	mov	eax, DWORD PTR _re2$[ebp]
	mov	DWORD PTR _re$[ebp], eax
; Line 270
	mov	DWORD PTR _status$[ebp], 0
; Line 271
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _re$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_clo
; Line 272
	jmp	SHORT $LN2@uregex_clo
$LN1@uregex_clo:
; Line 274
	mov	eax, DWORD PTR _re$[ebp]
	mov	DWORD PTR $T77601[ebp], eax
	mov	ecx, DWORD PTR $T77601[ebp]
	mov	DWORD PTR $T77600[ebp], ecx
	cmp	DWORD PTR $T77600[ebp], 0
	je	SHORT $LN4@uregex_clo
	push	1
	mov	ecx, DWORD PTR $T77600[ebp]
	call	??_GRegularExpression@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN2@uregex_clo
$LN4@uregex_clo:
	mov	DWORD PTR tv74[ebp], 0
$LN2@uregex_clo:
; Line 275
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@uregex_clo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@uregex_clo:
	DD	1
	DD	$LN7@uregex_clo
$LN7@uregex_clo:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@uregex_clo
$LN6@uregex_clo:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uregex_close_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_re$ = 8						; size = 4
_requiresText$ = 12					; size = 1
_status$ = 16						; size = 4
?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z PROC ; validateRE, COMDAT
; Line 85
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 86
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@validateRE
; Line 87
	xor	al, al
	jmp	SHORT $LN5@validateRE
$LN4@validateRE:
; Line 89
	cmp	DWORD PTR _re$[ebp], 0
	je	SHORT $LN2@validateRE
	mov	eax, DWORD PTR _re$[ebp]
	cmp	DWORD PTR [eax], 1919252592		; 72657870H
	je	SHORT $LN3@validateRE
$LN2@validateRE:
; Line 90
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 91
	xor	al, al
	jmp	SHORT $LN5@validateRE
$LN3@validateRE:
; Line 94
	movsx	eax, BYTE PTR _requiresText$[ebp]
	test	eax, eax
	je	SHORT $LN1@validateRE
	mov	eax, DWORD PTR _re$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN1@validateRE
	mov	eax, DWORD PTR _re$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	jne	SHORT $LN1@validateRE
; Line 95
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66306			; 00010302H
; Line 96
	xor	al, al
	jmp	SHORT $LN5@validateRE
$LN1@validateRE:
; Line 98
	mov	al, 1
$LN5@validateRE:
; Line 99
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ENDP ; validateRE
_TEXT	ENDS
PUBLIC	?umtx_atomic_inc@icu_56@@YAHPCJ@Z		; icu_56::umtx_atomic_inc
PUBLIC	_uregex_clone_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_clone_56
_TEXT	SEGMENT
tv128 = -268						; size = 4
tv77 = -268						; size = 4
$T77611 = -260						; size = 4
$T77612 = -248						; size = 4
$T77615 = -236						; size = 4
$T77616 = -224						; size = 4
_clone$ = -20						; size = 4
_source$ = -8						; size = 4
_source2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_clone_56 PROC					; COMDAT
; Line 284
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 285
	mov	eax, DWORD PTR _source2$[ebp]
	mov	DWORD PTR _source$[ebp], eax
; Line 286
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN3@uregex_clo@2
; Line 287
	xor	eax, eax
	jmp	$LN4@uregex_clo@2
$LN3@uregex_clo@2:
; Line 290
	mov	esi, esp
	push	36					; 00000024H
	call	DWORD PTR __imp_??2UMemory@icu_56@@SAPAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T77612[ebp], eax
	cmp	DWORD PTR $T77612[ebp], 0
	je	SHORT $LN6@uregex_clo@2
	mov	ecx, DWORD PTR $T77612[ebp]
	call	??0RegularExpression@icu_56@@QAE@XZ	; icu_56::RegularExpression::RegularExpression
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN7@uregex_clo@2
$LN6@uregex_clo@2:
	mov	DWORD PTR tv77[ebp], 0
$LN7@uregex_clo@2:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T77611[ebp], eax
	mov	ecx, DWORD PTR $T77611[ebp]
	mov	DWORD PTR _clone$[ebp], ecx
; Line 291
	cmp	DWORD PTR _clone$[ebp], 0
	jne	SHORT $LN2@uregex_clo@2
; Line 292
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 293
	xor	eax, eax
	jmp	$LN4@uregex_clo@2
$LN2@uregex_clo@2:
; Line 296
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _clone$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 297
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@uregex_clo@2
; Line 298
	mov	eax, DWORD PTR _clone$[ebp]
	mov	DWORD PTR $T77616[ebp], eax
	mov	ecx, DWORD PTR $T77616[ebp]
	mov	DWORD PTR $T77615[ebp], ecx
	cmp	DWORD PTR $T77615[ebp], 0
	je	SHORT $LN8@uregex_clo@2
	push	1
	mov	ecx, DWORD PTR $T77615[ebp]
	call	??_GRegularExpression@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN9@uregex_clo@2
$LN8@uregex_clo@2:
	mov	DWORD PTR tv128[ebp], 0
$LN9@uregex_clo@2:
; Line 299
	xor	eax, eax
	jmp	SHORT $LN4@uregex_clo@2
$LN1@uregex_clo@2:
; Line 302
	mov	eax, DWORD PTR _clone$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 303
	mov	eax, DWORD PTR _clone$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 304
	mov	eax, DWORD PTR _clone$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
; Line 305
	mov	eax, DWORD PTR _clone$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
; Line 306
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?umtx_atomic_inc@icu_56@@YAHPCJ@Z	; icu_56::umtx_atomic_inc
	add	esp, 4
; Line 309
	mov	eax, DWORD PTR _clone$[ebp]
$LN4@uregex_clo@2:
; Line 310
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_clone_56 ENDP
_TEXT	ENDS
EXTRN	__imp__InterlockedIncrement@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?umtx_atomic_inc@icu_56@@YAHPCJ@Z
_TEXT	SEGMENT
_var$ = 8						; size = 4
?umtx_atomic_inc@icu_56@@YAHPCJ@Z PROC			; icu_56::umtx_atomic_inc, COMDAT
; File d:\mozilla\intl\icu\source\common\umutex.h
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 112
	mov	esi, esp
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	DWORD PTR __imp__InterlockedIncrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 113
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?umtx_atomic_inc@icu_56@@YAHPCJ@Z ENDP			; icu_56::umtx_atomic_inc
_TEXT	ENDS
PUBLIC	_uregex_pattern_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_pattern_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_patLength$ = 12					; size = 4
_status$ = 16						; size = 4
_uregex_pattern_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\i18n\uregex.cpp
; Line 323
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 324
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 326
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN2@uregex_pat
; Line 327
	xor	eax, eax
	jmp	SHORT $LN3@uregex_pat
$LN2@uregex_pat:
; Line 329
	cmp	DWORD PTR _patLength$[ebp], 0
	je	SHORT $LN1@uregex_pat
; Line 330
	mov	eax, DWORD PTR _patLength$[ebp]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx
$LN1@uregex_pat:
; Line 332
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [eax+12]
$LN3@uregex_pat:
; Line 333
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_pattern_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_patternUText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_patternUText_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_patternUText_56 PROC				; COMDAT
; Line 343
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 344
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 345
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 346
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_patternUText_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_flags_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_flags_56
_TEXT	SEGMENT
_flags$ = -20						; size = 4
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_flags_56 PROC					; COMDAT
; Line 355
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 356
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 357
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_fla
; Line 358
	xor	eax, eax
	jmp	SHORT $LN2@uregex_fla
$LN1@uregex_fla:
; Line 360
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _flags$[ebp], eax
; Line 361
	mov	eax, DWORD PTR _flags$[ebp]
$LN2@uregex_fla:
; Line 362
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_flags_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_setText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_setText_56
_TEXT	SEGMENT
_input$ = -128						; size = 112
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_text$ = 12						; size = 4
_textLength$ = 16					; size = 4
_status$ = 20						; size = 4
_uregex_setText_56 PROC					; COMDAT
; Line 374
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 375
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 376
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN4@uregex_set
; Line 377
	jmp	$LN5@uregex_set
$LN4@uregex_set:
; Line 379
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN2@uregex_set
	cmp	DWORD PTR _textLength$[ebp], -1
	jge	SHORT $LN3@uregex_set
$LN2@uregex_set:
; Line 380
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 381
	jmp	$LN5@uregex_set
$LN3@uregex_set:
; Line 384
	mov	eax, DWORD PTR _regexp$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	je	SHORT $LN1@uregex_set
	mov	eax, DWORD PTR _regexp$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN1@uregex_set
; Line 385
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN1@uregex_set:
; Line 388
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 389
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR _textLength$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 390
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	BYTE PTR [eax+32], 0
; Line 392
	mov	DWORD PTR _input$[ebp], 878368812	; 345ad82cH
	mov	DWORD PTR _input$[ebp+4], 0
	mov	DWORD PTR _input$[ebp+8], 0
	mov	DWORD PTR _input$[ebp+12], 112		; 00000070H
	mov	DWORD PTR _input$[ebp+16], 0
	mov	DWORD PTR _input$[ebp+20], 0
	mov	DWORD PTR _input$[ebp+24], 0
	mov	DWORD PTR _input$[ebp+28], 0
	mov	DWORD PTR _input$[ebp+32], 0
	mov	DWORD PTR _input$[ebp+36], 0
	mov	DWORD PTR _input$[ebp+40], 0
	mov	DWORD PTR _input$[ebp+44], 0
	mov	DWORD PTR _input$[ebp+48], 0
	mov	DWORD PTR _input$[ebp+52], 0
	mov	DWORD PTR _input$[ebp+56], 0
	mov	DWORD PTR _input$[ebp+60], 0
	mov	DWORD PTR _input$[ebp+64], 0
	mov	DWORD PTR _input$[ebp+68], 0
	mov	DWORD PTR _input$[ebp+72], 0
	mov	DWORD PTR _input$[ebp+76], 0
	mov	DWORD PTR _input$[ebp+80], 0
	mov	DWORD PTR _input$[ebp+84], 0
	mov	DWORD PTR _input$[ebp+88], 0
	mov	DWORD PTR _input$[ebp+92], 0
	mov	DWORD PTR _input$[ebp+96], 0
	mov	DWORD PTR _input$[ebp+100], 0
	mov	DWORD PTR _input$[ebp+104], 0
	mov	DWORD PTR _input$[ebp+108], 0
; Line 393
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _textLength$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	lea	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
; Line 394
	mov	esi, esp
	lea	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 395
	lea	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_utext_close_56
	add	esp, 4
$LN5@uregex_set:
; Line 396
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@uregex_set
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@uregex_set:
	DD	1
	DD	$LN8@uregex_set
$LN8@uregex_set:
	DD	-128					; ffffff80H
	DD	112					; 00000070H
	DD	$LN7@uregex_set
$LN7@uregex_set:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_uregex_setText_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_setUText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_setUText_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_text$ = 12						; size = 4
_status$ = 16						; size = 4
_uregex_setUText_56 PROC				; COMDAT
; Line 407
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 408
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 409
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN3@uregex_set@2
; Line 410
	jmp	SHORT $LN4@uregex_set@2
$LN3@uregex_set@2:
; Line 412
	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN2@uregex_set@2
; Line 413
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 414
	jmp	SHORT $LN4@uregex_set@2
$LN2@uregex_set@2:
; Line 417
	mov	eax, DWORD PTR _regexp$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	je	SHORT $LN1@uregex_set@2
	mov	eax, DWORD PTR _regexp$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN1@uregex_set@2
; Line 418
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN1@uregex_set@2:
; Line 421
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 422
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	DWORD PTR [eax+28], -1
; Line 423
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	BYTE PTR [eax+32], 1
; Line 424
	mov	esi, esp
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@uregex_set@2:
; Line 425
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_setUText_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_getText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_getText_56
_TEXT	SEGMENT
tv192 = -264						; size = 8
tv179 = -260						; size = 4
tv174 = -260						; size = 4
_inputChars$70123 = -60					; size = 4
_lengthStatus$70122 = -48				; size = 4
_inputNativeLength$70118 = -36				; size = 8
_inputText$70117 = -20					; size = 4
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_textLength$ = 12					; size = 4
_status$ = 16						; size = 4
_uregex_getText_56 PROC					; COMDAT
; Line 437
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 438
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 439
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN5@uregex_get
; Line 440
	xor	eax, eax
	jmp	$LN6@uregex_get
$LN5@uregex_get:
; Line 443
	mov	eax, DWORD PTR _regexp$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	$LN4@uregex_get
; Line 445
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+112]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _inputText$70117[ebp], eax
; Line 446
	mov	eax, DWORD PTR _inputText$70117[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	mov	DWORD PTR _inputNativeLength$70118[ebp], eax
	mov	DWORD PTR _inputNativeLength$70118[ebp+4], edx
; Line 447
	mov	eax, DWORD PTR _inputText$70117[ebp]
	mov	DWORD PTR tv174[ebp], eax
	mov	ecx, DWORD PTR tv174[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	SHORT $LN3@uregex_get
	mov	edx, DWORD PTR tv174[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN3@uregex_get
	mov	eax, DWORD PTR _inputText$70117[ebp]
	mov	DWORD PTR tv179[ebp], eax
	mov	ecx, DWORD PTR tv179[ebp]
	mov	edx, DWORD PTR _inputNativeLength$70118[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jne	SHORT $LN3@uregex_get
	mov	eax, DWORD PTR tv179[ebp]
	mov	ecx, DWORD PTR _inputNativeLength$70118[ebp+4]
	cmp	ecx, DWORD PTR [eax+20]
	jne	SHORT $LN3@uregex_get
	mov	eax, DWORD PTR _inputText$70117[ebp]
	mov	eax, DWORD PTR [eax+28]
	cdq
	mov	DWORD PTR tv192[ebp], eax
	mov	DWORD PTR tv192[ebp+4], edx
	mov	ecx, DWORD PTR _inputNativeLength$70118[ebp]
	cmp	ecx, DWORD PTR tv192[ebp]
	jne	SHORT $LN3@uregex_get
	mov	edx, DWORD PTR _inputNativeLength$70118[ebp+4]
	cmp	edx, DWORD PTR tv192[ebp+4]
	jne	SHORT $LN3@uregex_get
; Line 448
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR _inputText$70117[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+24], edx
; Line 449
	mov	eax, DWORD PTR _inputNativeLength$70118[ebp]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 450
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	BYTE PTR [eax+32], 0
; Line 451
	jmp	SHORT $LN4@uregex_get
$LN3@uregex_get:
; Line 452
	mov	DWORD PTR _lengthStatus$70122[ebp], 0
; Line 453
	lea	eax, DWORD PTR _lengthStatus$70122[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _inputNativeLength$70118[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _inputNativeLength$70118[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _inputText$70117[ebp]
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 454
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	lea	edx, DWORD PTR [ecx+ecx+2]
	push	edx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _inputChars$70123[ebp], eax
; Line 456
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _inputChars$70123[ebp]
	push	eax
	mov	ecx, DWORD PTR _inputNativeLength$70118[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _inputNativeLength$70118[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _inputText$70117[ebp]
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
; Line 457
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR _inputChars$70123[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 458
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	BYTE PTR [eax+32], 1
$LN4@uregex_get:
; Line 462
	cmp	DWORD PTR _textLength$[ebp], 0
	je	SHORT $LN1@uregex_get
; Line 463
	mov	eax, DWORD PTR _textLength$[ebp]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax], edx
$LN1@uregex_get:
; Line 465
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [eax+24]
$LN6@uregex_get:
; Line 466
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@uregex_get
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@uregex_get:
	DD	1
	DD	$LN9@uregex_get
$LN9@uregex_get:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN8@uregex_get
$LN8@uregex_get:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uregex_getText_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_getUText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_getUText_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_dest$ = 12						; size = 4
_status$ = 16						; size = 4
_uregex_getUText_56 PROC				; COMDAT
; Line 477
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 478
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 479
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_get@2
; Line 480
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	SHORT $LN2@uregex_get@2
$LN1@uregex_get@2:
; Line 482
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_get@2:
; Line 483
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_getUText_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_refreshUText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_refreshUText_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_text$ = 12						; size = 4
_status$ = 16						; size = 4
_uregex_refreshUText_56 PROC				; COMDAT
; Line 494
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 495
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 496
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_ref
; Line 497
	jmp	SHORT $LN2@uregex_ref
$LN1@uregex_ref:
; Line 499
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_ref:
; Line 500
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_refreshUText_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_matches64_56
PUBLIC	_uregex_matches_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_matches_56
_TEXT	SEGMENT
_regexp2$ = 8						; size = 4
_startIndex$ = 12					; size = 4
_status$ = 16						; size = 4
_uregex_matches_56 PROC					; COMDAT
; Line 511
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 512
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _startIndex$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _regexp2$[ebp]
	push	ecx
	call	_uregex_matches64_56
	add	esp, 16					; 00000010H
; Line 513
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_matches_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uregex_matches64_56
_TEXT	SEGMENT
_result$ = -17						; size = 1
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_startIndex$ = 12					; size = 8
_status$ = 20						; size = 4
_uregex_matches64_56 PROC				; COMDAT
; Line 518
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 519
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 520
	mov	BYTE PTR _result$[ebp], 0
; Line 521
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN3@uregex_mat
; Line 522
	mov	al, BYTE PTR _result$[ebp]
	jmp	SHORT $LN4@uregex_mat
$LN3@uregex_mat:
; Line 524
	mov	eax, DWORD PTR _startIndex$[ebp]
	and	eax, DWORD PTR _startIndex$[ebp+4]
	cmp	eax, -1
	jne	SHORT $LN2@uregex_mat
; Line 525
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _result$[ebp], al
; Line 526
	jmp	SHORT $LN1@uregex_mat
$LN2@uregex_mat:
; Line 527
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startIndex$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _result$[ebp], al
$LN1@uregex_mat:
; Line 529
	mov	al, BYTE PTR _result$[ebp]
$LN4@uregex_mat:
; Line 530
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_matches64_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_lookingAt64_56
PUBLIC	_uregex_lookingAt_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_lookingAt_56
_TEXT	SEGMENT
_regexp2$ = 8						; size = 4
_startIndex$ = 12					; size = 4
_status$ = 16						; size = 4
_uregex_lookingAt_56 PROC				; COMDAT
; Line 541
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 542
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _startIndex$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _regexp2$[ebp]
	push	ecx
	call	_uregex_lookingAt64_56
	add	esp, 16					; 00000010H
; Line 543
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_lookingAt_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uregex_lookingAt64_56
_TEXT	SEGMENT
_result$ = -17						; size = 1
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_startIndex$ = 12					; size = 8
_status$ = 20						; size = 4
_uregex_lookingAt64_56 PROC				; COMDAT
; Line 548
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 549
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 550
	mov	BYTE PTR _result$[ebp], 0
; Line 551
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN3@uregex_loo
; Line 552
	mov	al, BYTE PTR _result$[ebp]
	jmp	SHORT $LN4@uregex_loo
$LN3@uregex_loo:
; Line 554
	mov	eax, DWORD PTR _startIndex$[ebp]
	and	eax, DWORD PTR _startIndex$[ebp+4]
	cmp	eax, -1
	jne	SHORT $LN2@uregex_loo
; Line 555
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _result$[ebp], al
; Line 556
	jmp	SHORT $LN1@uregex_loo
$LN2@uregex_loo:
; Line 557
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startIndex$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _result$[ebp], al
$LN1@uregex_loo:
; Line 559
	mov	al, BYTE PTR _result$[ebp]
$LN4@uregex_loo:
; Line 560
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_lookingAt64_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_find64_56
PUBLIC	_uregex_find_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_find_56
_TEXT	SEGMENT
_regexp2$ = 8						; size = 4
_startIndex$ = 12					; size = 4
_status$ = 16						; size = 4
_uregex_find_56 PROC					; COMDAT
; Line 572
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 573
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _startIndex$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _regexp2$[ebp]
	push	ecx
	call	_uregex_find64_56
	add	esp, 16					; 00000010H
; Line 574
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_find_56 ENDP
_TEXT	ENDS
EXTRN	?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ:PROC ; icu_56::RegexMatcher::resetPreserveRegion
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_find64_56
_TEXT	SEGMENT
_result$ = -17						; size = 1
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_startIndex$ = 12					; size = 8
_status$ = 20						; size = 4
_uregex_find64_56 PROC					; COMDAT
; Line 579
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 580
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 581
	mov	BYTE PTR _result$[ebp], 0
; Line 582
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN3@uregex_fin
; Line 583
	mov	al, BYTE PTR _result$[ebp]
	jmp	SHORT $LN4@uregex_fin
$LN3@uregex_fin:
; Line 585
	mov	eax, DWORD PTR _startIndex$[ebp]
	and	eax, DWORD PTR _startIndex$[ebp+4]
	cmp	eax, -1
	jne	SHORT $LN2@uregex_fin
; Line 586
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ ; icu_56::RegexMatcher::resetPreserveRegion
; Line 587
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _result$[ebp], al
; Line 588
	jmp	SHORT $LN1@uregex_fin
$LN2@uregex_fin:
; Line 589
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startIndex$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _result$[ebp], al
$LN1@uregex_fin:
; Line 591
	mov	al, BYTE PTR _result$[ebp]
$LN4@uregex_fin:
; Line 592
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_find64_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_findNext_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_findNext_56
_TEXT	SEGMENT
_result$ = -17						; size = 1
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_findNext_56 PROC				; COMDAT
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 603
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 604
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_fin@2
; Line 605
	xor	al, al
	jmp	SHORT $LN2@uregex_fin@2
$LN1@uregex_fin@2:
; Line 607
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _result$[ebp], al
; Line 608
	mov	al, BYTE PTR _result$[ebp]
$LN2@uregex_fin@2:
; Line 609
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_findNext_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_groupCount_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_groupCount_56
_TEXT	SEGMENT
_result$ = -20						; size = 4
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_groupCount_56 PROC				; COMDAT
; Line 618
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 619
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 620
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_gro
; Line 621
	xor	eax, eax
	jmp	SHORT $LN2@uregex_gro
$LN1@uregex_gro:
; Line 623
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
; Line 624
	mov	eax, DWORD PTR _result$[ebp]
$LN2@uregex_gro:
; Line 625
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_groupCount_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uregex_groupNumberFromName_56
EXTRN	__imp_??1UnicodeString@icu_56@@UAE@XZ:PROC
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@PB_WH@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_groupNumberFromName_56
_TEXT	SEGMENT
$T70220 = -288						; size = 64
_result$ = -24						; size = 4
_regexp$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_regexp2$ = 8						; size = 4
_groupName$ = 12					; size = 4
_nameLength$ = 16					; size = 4
_status$ = 20						; size = 4
_uregex_groupNumberFromName_56 PROC			; COMDAT
; Line 637
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 638
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 639
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_gro@2
; Line 640
	xor	eax, eax
	jmp	SHORT $LN2@uregex_gro@2
$LN1@uregex_gro@2:
; Line 642
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _nameLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _groupName$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T70220[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@PB_WH@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR $T70220[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 643
	mov	eax, DWORD PTR _result$[ebp]
$LN2@uregex_gro@2:
; Line 644
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_groupNumberFromName_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_groupNumberFromCName_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_groupNumberFromCName_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_groupName$ = 12					; size = 4
_nameLength$ = 16					; size = 4
_status$ = 20						; size = 4
_uregex_groupNumberFromCName_56 PROC			; COMDAT
; Line 650
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 651
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 652
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_gro@3
; Line 653
	xor	eax, eax
	jmp	SHORT $LN2@uregex_gro@3
$LN1@uregex_gro@3:
; Line 655
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nameLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _groupName$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_gro@3:
; Line 656
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_groupNumberFromCName_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_group_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_group_56
_TEXT	SEGMENT
_length$70258 = -100					; size = 4
_limit$70256 = -88					; size = 8
_start$70255 = -72					; size = 8
_copyLength$70248 = -56					; size = 4
_fullLength$70247 = -44					; size = 4
_endIx$70245 = -32					; size = 4
_startIx$70244 = -20					; size = 4
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_groupNum$ = 12						; size = 4
_dest$ = 16						; size = 4
_destCapacity$ = 20					; size = 4
_status$ = 24						; size = 4
_uregex_group_56 PROC					; COMDAT
; Line 668
	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 669
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 670
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN13@uregex_gro@4
; Line 671
	xor	eax, eax
	jmp	$LN14@uregex_gro@4
$LN13@uregex_gro@4:
; Line 673
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN11@uregex_gro@4
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN12@uregex_gro@4
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN12@uregex_gro@4
$LN11@uregex_gro@4:
; Line 674
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 675
	xor	eax, eax
	jmp	$LN14@uregex_gro@4
$LN12@uregex_gro@4:
; Line 678
	cmp	DWORD PTR _destCapacity$[ebp], 0
	je	SHORT $LN9@uregex_gro@4
	mov	eax, DWORD PTR _regexp$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	$LN10@uregex_gro@4
$LN9@uregex_gro@4:
; Line 685
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _startIx$70244[ebp], eax
; Line 686
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _endIx$70245[ebp], eax
; Line 687
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@uregex_gro@4
; Line 688
	xor	eax, eax
	jmp	$LN14@uregex_gro@4
$LN8@uregex_gro@4:
; Line 694
	mov	eax, DWORD PTR _endIx$70245[ebp]
	sub	eax, DWORD PTR _startIx$70244[ebp]
	mov	DWORD PTR _fullLength$70247[ebp], eax
; Line 695
	mov	eax, DWORD PTR _fullLength$70247[ebp]
	mov	DWORD PTR _copyLength$70248[ebp], eax
; Line 696
	mov	eax, DWORD PTR _copyLength$70248[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN7@uregex_gro@4
; Line 697
	xor	eax, eax
	mov	ecx, DWORD PTR _copyLength$70248[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN6@uregex_gro@4
$LN7@uregex_gro@4:
; Line 698
	mov	eax, DWORD PTR _copyLength$70248[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jne	SHORT $LN5@uregex_gro@4
; Line 699
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], -124			; ffffff84H
; Line 700
	jmp	SHORT $LN6@uregex_gro@4
$LN5@uregex_gro@4:
; Line 701
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR _copyLength$70248[ebp], eax
; Line 702
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN6@uregex_gro@4:
; Line 708
	cmp	DWORD PTR _copyLength$70248[ebp], 0
	jle	SHORT $LN3@uregex_gro@4
; Line 709
	mov	eax, DWORD PTR _copyLength$70248[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _startIx$70244[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_u_memcpy_56
	add	esp, 12					; 0000000cH
$LN3@uregex_gro@4:
; Line 711
	mov	eax, DWORD PTR _fullLength$70247[ebp]
	jmp	$LN14@uregex_gro@4
; Line 712
	jmp	$LN14@uregex_gro@4
$LN10@uregex_gro@4:
; Line 713
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start$70255[ebp], eax
	mov	DWORD PTR _start$70255[ebp+4], edx
; Line 714
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _limit$70256[ebp], eax
	mov	DWORD PTR _limit$70256[ebp+4], edx
; Line 715
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@uregex_gro@4
; Line 716
	xor	eax, eax
	jmp	SHORT $LN14@uregex_gro@4
$LN1@uregex_gro@4:
; Line 721
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$70256[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _limit$70256[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$70255[ebp+4]
	push	edx
	mov	eax, DWORD PTR _start$70255[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+112]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _length$70258[ebp], eax
; Line 722
	mov	eax, DWORD PTR _length$70258[ebp]
$LN14@uregex_gro@4:
; Line 725
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_group_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_groupUText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_groupUText_56
_TEXT	SEGMENT
tv76 = -220						; size = 4
_emptyTextStatus$70269 = -20				; size = 4
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_groupNum$ = 12						; size = 4
_dest$ = 16						; size = 4
_groupLength$ = 20					; size = 4
_status$ = 24						; size = 4
_uregex_groupUText_56 PROC				; COMDAT
; Line 738
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 739
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 740
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_gro@5
; Line 741
	mov	DWORD PTR _emptyTextStatus$70269[ebp], 0
; Line 742
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN4@uregex_gro@5
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN5@uregex_gro@5
$LN4@uregex_gro@5:
	lea	ecx, DWORD PTR _emptyTextStatus$70269[ebp]
	push	ecx
	push	0
	push	0
	push	0
	push	0
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv76[ebp], eax
$LN5@uregex_gro@5:
	mov	eax, DWORD PTR tv76[ebp]
	jmp	SHORT $LN2@uregex_gro@5
$LN1@uregex_gro@5:
; Line 745
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _groupNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_gro@5:
; Line 746
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@uregex_gro@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@uregex_gro@5:
	DD	1
	DD	$LN7@uregex_gro@5
$LN7@uregex_gro@5:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@uregex_gro@5
$LN6@uregex_gro@5:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uregex_groupUText_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_start64_56
PUBLIC	_uregex_start_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_start_56
_TEXT	SEGMENT
_regexp2$ = 8						; size = 4
_groupNum$ = 12						; size = 4
_status$ = 16						; size = 4
_uregex_start_56 PROC					; COMDAT
; Line 756
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 757
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp2$[ebp]
	push	edx
	call	_uregex_start64_56
	add	esp, 12					; 0000000cH
; Line 758
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_start_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uregex_start64_56
_TEXT	SEGMENT
_result$ = -20						; size = 4
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_groupNum$ = 12						; size = 4
_status$ = 16						; size = 4
_uregex_start64_56 PROC					; COMDAT
; Line 763
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 764
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 765
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_sta
; Line 766
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN2@uregex_sta
$LN1@uregex_sta:
; Line 768
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
; Line 769
	mov	eax, DWORD PTR _result$[ebp]
	cdq
$LN2@uregex_sta:
; Line 770
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_start64_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_end64_56
PUBLIC	_uregex_end_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_end_56
_TEXT	SEGMENT
_regexp2$ = 8						; size = 4
_groupNum$ = 12						; size = 4
_status$ = 16						; size = 4
_uregex_end_56 PROC					; COMDAT
; Line 780
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 781
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp2$[ebp]
	push	edx
	call	_uregex_end64_56
	add	esp, 12					; 0000000cH
; Line 782
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_end_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uregex_end64_56
_TEXT	SEGMENT
_result$ = -20						; size = 4
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_groupNum$ = 12						; size = 4
_status$ = 16						; size = 4
_uregex_end64_56 PROC					; COMDAT
; Line 787
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 788
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 789
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_end
; Line 790
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN2@uregex_end
$LN1@uregex_end:
; Line 792
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
; Line 793
	mov	eax, DWORD PTR _result$[ebp]
	cdq
$LN2@uregex_end:
; Line 794
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_end64_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_reset64_56
PUBLIC	_uregex_reset_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_reset_56
_TEXT	SEGMENT
_regexp2$ = 8						; size = 4
_index$ = 12						; size = 4
_status$ = 16						; size = 4
_uregex_reset_56 PROC					; COMDAT
; Line 804
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 805
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _index$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _regexp2$[ebp]
	push	ecx
	call	_uregex_reset64_56
	add	esp, 16					; 00000010H
; Line 806
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_reset_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uregex_reset64_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_index$ = 12						; size = 8
_status$ = 20						; size = 4
_uregex_reset64_56 PROC					; COMDAT
; Line 811
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 812
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 813
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_res
; Line 814
	jmp	SHORT $LN2@uregex_res
$LN1@uregex_res:
; Line 816
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_res:
; Line 817
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_reset64_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_setRegion64_56
PUBLIC	_uregex_setRegion_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_setRegion_56
_TEXT	SEGMENT
_regexp2$ = 8						; size = 4
_regionStart$ = 12					; size = 4
_regionLimit$ = 16					; size = 4
_status$ = 20						; size = 4
_uregex_setRegion_56 PROC				; COMDAT
; Line 829
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 830
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	eax, DWORD PTR _regionLimit$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _regionStart$[ebp]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _regexp2$[ebp]
	push	ecx
	call	_uregex_setRegion64_56
	add	esp, 24					; 00000018H
; Line 831
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_setRegion_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uregex_setRegion64_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_regionStart$ = 12					; size = 8
_regionLimit$ = 20					; size = 8
_status$ = 28						; size = 4
_uregex_setRegion64_56 PROC				; COMDAT
; Line 837
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 838
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 839
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_set@3
; Line 840
	jmp	SHORT $LN2@uregex_set@3
$LN1@uregex_set@3:
; Line 842
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regionLimit$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _regionLimit$[ebp]
	push	edx
	mov	eax, DWORD PTR _regionStart$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _regionStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_set@3:
; Line 843
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_setRegion64_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_setRegionAndStart_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_setRegionAndStart_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_regionStart$ = 12					; size = 8
_regionLimit$ = 20					; size = 8
_startIndex$ = 28					; size = 8
_status$ = 36						; size = 4
_uregex_setRegionAndStart_56 PROC			; COMDAT
; Line 856
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 857
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 858
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_set@4
; Line 859
	jmp	SHORT $LN2@uregex_set@4
$LN1@uregex_set@4:
; Line 861
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startIndex$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _regionLimit$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _regionLimit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regionStart$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _regionStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_set@4:
; Line 862
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_setRegionAndStart_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_regionStart64_56
PUBLIC	_uregex_regionStart_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_regionStart_56
_TEXT	SEGMENT
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_regionStart_56 PROC				; COMDAT
; Line 871
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 872
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp2$[ebp]
	push	ecx
	call	_uregex_regionStart64_56
	add	esp, 8
; Line 873
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_regionStart_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uregex_regionStart64_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_regionStart64_56 PROC				; COMDAT
; Line 877
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 878
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 879
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_reg
; Line 880
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN2@uregex_reg
$LN1@uregex_reg:
; Line 882
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+128]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	cdq
$LN2@uregex_reg:
; Line 883
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_regionStart64_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_regionEnd64_56
PUBLIC	_uregex_regionEnd_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_regionEnd_56
_TEXT	SEGMENT
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_regionEnd_56 PROC				; COMDAT
; Line 893
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 894
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp2$[ebp]
	push	ecx
	call	_uregex_regionEnd64_56
	add	esp, 8
; Line 895
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_regionEnd_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uregex_regionEnd64_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_regionEnd64_56 PROC				; COMDAT
; Line 899
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 900
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 901
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_reg@2
; Line 902
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN2@uregex_reg@2
$LN1@uregex_reg@2:
; Line 904
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+136]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	cdq
$LN2@uregex_reg@2:
; Line 905
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_regionEnd64_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_hasTransparentBounds_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_hasTransparentBounds_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_hasTransparentBounds_56 PROC			; COMDAT
; Line 915
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 916
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 917
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_has
; Line 918
	xor	al, al
	jmp	SHORT $LN2@uregex_has
$LN1@uregex_has:
; Line 920
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+144]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_has:
; Line 921
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_hasTransparentBounds_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_useTransparentBounds_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_useTransparentBounds_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_b$ = 12						; size = 1
_status$ = 16						; size = 4
_uregex_useTransparentBounds_56 PROC			; COMDAT
; Line 932
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 933
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 934
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_use
; Line 935
	jmp	SHORT $LN2@uregex_use
$LN1@uregex_use:
; Line 937
	mov	esi, esp
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_use:
; Line 938
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_useTransparentBounds_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_hasAnchoringBounds_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_hasAnchoringBounds_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_hasAnchoringBounds_56 PROC			; COMDAT
; Line 948
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 949
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 950
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_has@2
; Line 951
	xor	al, al
	jmp	SHORT $LN2@uregex_has@2
$LN1@uregex_has@2:
; Line 953
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+152]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_has@2:
; Line 954
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_hasAnchoringBounds_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_useAnchoringBounds_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_useAnchoringBounds_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_b$ = 12						; size = 1
_status$ = 16						; size = 4
_uregex_useAnchoringBounds_56 PROC			; COMDAT
; Line 965
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 966
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 967
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_use@2
; Line 968
	jmp	SHORT $LN2@uregex_use@2
$LN1@uregex_use@2:
; Line 970
	mov	esi, esp
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_use@2:
; Line 971
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_useAnchoringBounds_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_hitEnd_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_hitEnd_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_hitEnd_56 PROC					; COMDAT
; Line 981
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 982
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 983
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_hit
; Line 984
	xor	al, al
	jmp	SHORT $LN2@uregex_hit
$LN1@uregex_hit:
; Line 986
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+160]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_hit:
; Line 987
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_hitEnd_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_requireEnd_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_requireEnd_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_requireEnd_56 PROC				; COMDAT
; Line 997
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 998
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 999
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@uregex_req
; Line 1000
	xor	al, al
	jmp	SHORT $LN2@uregex_req
$LN1@uregex_req:
; Line 1002
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+164]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_req:
; Line 1003
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_requireEnd_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_setTimeLimit_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_setTimeLimit_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_limit$ = 12						; size = 4
_status$ = 16						; size = 4
_uregex_setTimeLimit_56 PROC				; COMDAT
; Line 1014
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1015
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1016
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@uregex_set@5
; Line 1017
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_set@5:
; Line 1019
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_setTimeLimit_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_getTimeLimit_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_getTimeLimit_56
_TEXT	SEGMENT
_regexp$ = -20						; size = 4
_retVal$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_getTimeLimit_56 PROC				; COMDAT
; Line 1030
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1031
	mov	DWORD PTR _retVal$[ebp], 0
; Line 1032
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1033
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@uregex_get@3
; Line 1034
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+216]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _retVal$[ebp], eax
$LN1@uregex_get@3:
; Line 1036
	mov	eax, DWORD PTR _retVal$[ebp]
; Line 1037
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_getTimeLimit_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_setStackLimit_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_setStackLimit_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_limit$ = 12						; size = 4
_status$ = 16						; size = 4
_uregex_setStackLimit_56 PROC				; COMDAT
; Line 1049
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1050
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1051
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@uregex_set@6
; Line 1052
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_set@6:
; Line 1054
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_setStackLimit_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_getStackLimit_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_getStackLimit_56
_TEXT	SEGMENT
_regexp$ = -20						; size = 4
_retVal$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_status$ = 12						; size = 4
_uregex_getStackLimit_56 PROC				; COMDAT
; Line 1065
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1066
	mov	DWORD PTR _retVal$[ebp], 0
; Line 1067
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1068
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@uregex_get@4
; Line 1069
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+224]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _retVal$[ebp], eax
$LN1@uregex_get@4:
; Line 1071
	mov	eax, DWORD PTR _retVal$[ebp]
; Line 1072
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_getStackLimit_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_setMatchCallback_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_setMatchCallback_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_callback$ = 12						; size = 4
_context$ = 16						; size = 4
_status$ = 20						; size = 4
_uregex_setMatchCallback_56 PROC			; COMDAT
; Line 1084
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1085
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1086
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@uregex_set@7
; Line 1087
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_set@7:
; Line 1089
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_setMatchCallback_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_getMatchCallback_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_getMatchCallback_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_callback$ = 12						; size = 4
_context$ = 16						; size = 4
_status$ = 20						; size = 4
_uregex_getMatchCallback_56 PROC			; COMDAT
; Line 1101
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1102
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1103
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@uregex_get@5
; Line 1104
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+232]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_get@5:
; Line 1106
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_getMatchCallback_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_setFindProgressCallback_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_setFindProgressCallback_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_callback$ = 12						; size = 4
_context$ = 16						; size = 4
_status$ = 20						; size = 4
_uregex_setFindProgressCallback_56 PROC			; COMDAT
; Line 1118
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1119
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1120
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@uregex_set@8
; Line 1121
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+236]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_set@8:
; Line 1123
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_setFindProgressCallback_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_getFindProgressCallback_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_getFindProgressCallback_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_callback$ = 12						; size = 4
_context$ = 16						; size = 4
_status$ = 20						; size = 4
_uregex_getFindProgressCallback_56 PROC			; COMDAT
; Line 1135
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1136
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1137
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@uregex_get@6
; Line 1138
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+240]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@uregex_get@6:
; Line 1140
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_getFindProgressCallback_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_appendTail_56
PUBLIC	_uregex_appendReplacement_56
PUBLIC	_uregex_replaceAll_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_replaceAll_56
_TEXT	SEGMENT
_findStatus$ = -32					; size = 4
_len$ = -20						; size = 4
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_replacementText$ = 12					; size = 4
_replacementLength$ = 16				; size = 4
_destBuf$ = 20						; size = 4
_destCapacity$ = 24					; size = 4
_status$ = 28						; size = 4
_uregex_replaceAll_56 PROC				; COMDAT
; Line 1154
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1155
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1156
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN7@uregex_rep
; Line 1157
	xor	eax, eax
	jmp	$LN8@uregex_rep
$LN7@uregex_rep:
; Line 1161
	cmp	DWORD PTR _replacementText$[ebp], 0
	je	SHORT $LN5@uregex_rep
	cmp	DWORD PTR _replacementLength$[ebp], -1
	jl	SHORT $LN5@uregex_rep
	cmp	DWORD PTR _destBuf$[ebp], 0
	jne	SHORT $LN4@uregex_rep
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jg	SHORT $LN5@uregex_rep
$LN4@uregex_rep:
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jge	SHORT $LN6@uregex_rep
$LN5@uregex_rep:
; Line 1162
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1163
	xor	eax, eax
	jmp	$LN8@uregex_rep
$LN6@uregex_rep:
; Line 1166
	mov	DWORD PTR _len$[ebp], 0
; Line 1168
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp2$[ebp]
	push	ecx
	call	_uregex_reset_56
	add	esp, 12					; 0000000cH
; Line 1175
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _findStatus$[ebp], ecx
$LN3@uregex_rep:
; Line 1176
	lea	eax, DWORD PTR _findStatus$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp2$[ebp]
	push	ecx
	call	_uregex_findNext_56
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@uregex_rep
; Line 1178
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _replacementLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replacementText$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp2$[ebp]
	push	edx
	call	_uregex_appendReplacement_56
	add	esp, 24					; 00000018H
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 1179
	jmp	SHORT $LN3@uregex_rep
$LN2@uregex_rep:
; Line 1180
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp2$[ebp]
	push	eax
	call	_uregex_appendTail_56
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 1182
	mov	eax, DWORD PTR _findStatus$[ebp]
	push	eax
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@uregex_rep
; Line 1186
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _findStatus$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@uregex_rep:
; Line 1189
	mov	eax, DWORD PTR _len$[ebp]
$LN8@uregex_rep:
; Line 1190
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@uregex_rep
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@uregex_rep:
	DD	1
	DD	$LN11@uregex_rep
$LN11@uregex_rep:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@uregex_rep
$LN10@uregex_rep:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uregex_replaceAll_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_replaceAllUText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_replaceAllUText_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_replacementText$ = 12					; size = 4
_dest$ = 16						; size = 4
_status$ = 20						; size = 4
_uregex_replaceAllUText_56 PROC				; COMDAT
; Line 1202
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1203
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1204
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN2@uregex_rep@2
; Line 1205
	xor	eax, eax
	jmp	SHORT $LN3@uregex_rep@2
$LN2@uregex_rep@2:
; Line 1207
	cmp	DWORD PTR _replacementText$[ebp], 0
	jne	SHORT $LN1@uregex_rep@2
; Line 1208
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1209
	xor	eax, eax
	jmp	SHORT $LN3@uregex_rep@2
$LN1@uregex_rep@2:
; Line 1212
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _replacementText$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dest$[ebp], eax
; Line 1213
	mov	eax, DWORD PTR _dest$[ebp]
$LN3@uregex_rep@2:
; Line 1214
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_replaceAllUText_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_replaceFirst_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_replaceFirst_56
_TEXT	SEGMENT
_findSucceeded$ = -29					; size = 1
_len$ = -20						; size = 4
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_replacementText$ = 12					; size = 4
_replacementLength$ = 16				; size = 4
_destBuf$ = 20						; size = 4
_destCapacity$ = 24					; size = 4
_status$ = 28						; size = 4
_uregex_replaceFirst_56 PROC				; COMDAT
; Line 1228
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1229
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1230
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN5@uregex_rep@3
; Line 1231
	xor	eax, eax
	jmp	$LN6@uregex_rep@3
$LN5@uregex_rep@3:
; Line 1235
	cmp	DWORD PTR _replacementText$[ebp], 0
	je	SHORT $LN3@uregex_rep@3
	cmp	DWORD PTR _replacementLength$[ebp], -1
	jl	SHORT $LN3@uregex_rep@3
	cmp	DWORD PTR _destBuf$[ebp], 0
	jne	SHORT $LN2@uregex_rep@3
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jg	SHORT $LN3@uregex_rep@3
$LN2@uregex_rep@3:
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jge	SHORT $LN4@uregex_rep@3
$LN3@uregex_rep@3:
; Line 1236
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1237
	xor	eax, eax
	jmp	SHORT $LN6@uregex_rep@3
$LN4@uregex_rep@3:
; Line 1240
	mov	DWORD PTR _len$[ebp], 0
; Line 1242
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp2$[ebp]
	push	ecx
	call	_uregex_reset_56
	add	esp, 12					; 0000000cH
; Line 1243
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _regexp2$[ebp]
	push	ecx
	call	_uregex_find_56
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _findSucceeded$[ebp], al
; Line 1244
	movsx	eax, BYTE PTR _findSucceeded$[ebp]
	test	eax, eax
	je	SHORT $LN1@uregex_rep@3
; Line 1246
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _replacementLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replacementText$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp2$[ebp]
	push	edx
	call	_uregex_appendReplacement_56
	add	esp, 24					; 00000018H
	mov	DWORD PTR _len$[ebp], eax
$LN1@uregex_rep@3:
; Line 1248
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp2$[ebp]
	push	eax
	call	_uregex_appendTail_56
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 1250
	mov	eax, DWORD PTR _len$[ebp]
$LN6@uregex_rep@3:
; Line 1251
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_replaceFirst_56 ENDP
_TEXT	ENDS
PUBLIC	_uregex_replaceFirstUText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_replaceFirstUText_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_replacementText$ = 12					; size = 4
_dest$ = 16						; size = 4
_status$ = 20						; size = 4
_uregex_replaceFirstUText_56 PROC			; COMDAT
; Line 1263
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1264
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1265
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN2@uregex_rep@4
; Line 1266
	xor	eax, eax
	jmp	SHORT $LN3@uregex_rep@4
$LN2@uregex_rep@4:
; Line 1268
	cmp	DWORD PTR _replacementText$[ebp], 0
	jne	SHORT $LN1@uregex_rep@4
; Line 1269
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1270
	xor	eax, eax
	jmp	SHORT $LN3@uregex_rep@4
$LN1@uregex_rep@4:
; Line 1273
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _replacementText$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+180]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dest$[ebp], eax
; Line 1274
	mov	eax, DWORD PTR _dest$[ebp]
$LN3@uregex_rep@4:
; Line 1275
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_replaceFirstUText_56 ENDP
_TEXT	ENDS
PUBLIC	?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z ; icu_56::RegexCImpl::appendReplacement
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_appendReplacement_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_replacementText$ = 12					; size = 4
_replacementLength$ = 16				; size = 4
_destBuf$ = 20						; size = 4
_destCapacity$ = 24					; size = 4
_status$ = 28						; size = 4
_uregex_appendReplacement_56 PROC			; COMDAT
; Line 1587
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1589
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1591
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _replacementLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replacementText$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	push	edx
	call	?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z ; icu_56::RegexCImpl::appendReplacement
	add	esp, 24					; 00000018H
; Line 1592
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_appendReplacement_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CA@BEAIEIMD@?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAD?$AAO?$AAL?$AAL?$AAA?$AAR?$AAS?$AAI?$AAG?$AAN?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@KDFMMPOE@?$AAd?$AAe?$AAs?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FG@DFDDLAOB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ ; `string'
PUBLIC	?__LINE__Var@?1??appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a ; `icu_56::RegexCImpl::appendReplacement'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
EXTRN	_uhash_geti_56:PROC
EXTRN	__imp_?append@UnicodeString@icu_56@@QAEAAV12@H@Z:PROC
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@XZ:PROC
EXTRN	_u_charDigitValue_56:PROC
EXTRN	__imp_?size@UVector32@icu_56@@QBEHXZ:PROC
EXTRN	_u_isdigit_56:PROC
EXTRN	_u_unescapeAt_56:PROC
EXTRN	_uregex_ucstr_unescape_charAt_56:PROC
EXTRN	__imp___wassert:PROC
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ??_C@_1CA@BEAIEIMD@?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAD?$AAO?$AAL?$AAL?$AAA?$AAR?$AAS?$AAI?$AAG?$AAN?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@BEAIEIMD@?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAD?$AAO?$AAL?$AAL?$AAA?$AAR?$AAS?$AAI?$AAG?$AAN?$AA?$AA@ DB 'c'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'D', 00H, 'O', 00H
	DB	'L', 00H, 'L', 00H, 'A', 00H, 'R', 00H, 'S', 00H, 'I', 00H, 'G'
	DB	00H, 'N', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@KDFMMPOE@?$AAd?$AAe?$AAs?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@KDFMMPOE@?$AAd?$AAe?$AAs?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'd'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'I', 00H, 'd', 00H, 'x', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@DFDDLAOB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
CONST	SEGMENT
??_C@_1FG@DFDDLAOB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'i', 00H, '1', 00H, '8', 00H, 'n', 00H, '\', 00H, 'u', 00H
	DB	'r', 00H, 'e', 00H, 'g', 00H, 'e', 00H, 'x', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a
_DATA	SEGMENT
?__LINE__Var@?1??appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a DD 053eH ; `icu_56::RegexCImpl::appendReplacement'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z$0
__ehfuncinfo$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv413 = -540						; size = 4
tv168 = -540						; size = 4
tv408 = -536						; size = 4
tv352 = -536						; size = 4
tv331 = -536						; size = 4
tv163 = -536						; size = 4
___c2$70674 = -336					; size = 2
_groupName$70667 = -324					; size = 64
_digitVal$70660 = -252					; size = 4
___c2$70650 = -240					; size = 2
_numCaptureGroups$70644 = -228				; size = 4
_numDigits$70643 = -216					; size = 4
___c2$70633 = -204					; size = 2
_c32$70631 = -192					; size = 4
_groupNum$70628 = -180					; size = 4
_escapedChar$70619 = -168				; size = 4
_c$70613 = -156						; size = 2
_replIdx$ = -144					; size = 4
_possibleOverflowError$70604 = -132			; size = 4
_tempStatus$70599 = -120				; size = 4
_lastMatchEnd$70594 = -108				; size = 4
_matchStart$70593 = -96					; size = 4
_i$ = -84						; size = 4
_destIdx$ = -72						; size = 4
_capacity$ = -60					; size = 4
_dest$ = -48						; size = 4
_m$ = -36						; size = 4
_pendingBufferOverflow$ = -21				; size = 1
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_regexp$ = 8						; size = 4
_replacementText$ = 12					; size = 4
_replacementLength$ = 16				; size = 4
_destBuf$ = 20						; size = 4
_destCapacity$ = 24					; size = 4
_status$ = 28						; size = 4
?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z PROC ; icu_56::RegexCImpl::appendReplacement, COMDAT
; Line 1342
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-540]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1347
	mov	BYTE PTR _pendingBufferOverflow$[ebp], 0
; Line 1348
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN72@appendRepl
	cmp	DWORD PTR _destCapacity$[ebp], 0
	je	SHORT $LN72@appendRepl
	mov	eax, DWORD PTR _destCapacity$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN72@appendRepl
; Line 1349
	mov	BYTE PTR _pendingBufferOverflow$[ebp], 1
; Line 1350
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
$LN72@appendRepl:
; Line 1356
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN71@appendRepl
; Line 1357
	xor	eax, eax
	jmp	$LN73@appendRepl
$LN71@appendRepl:
; Line 1362
	cmp	DWORD PTR _replacementText$[ebp], 0
	je	SHORT $LN69@appendRepl
	cmp	DWORD PTR _replacementLength$[ebp], -1
	jl	SHORT $LN69@appendRepl
	cmp	DWORD PTR _destCapacity$[ebp], 0
	je	SHORT $LN69@appendRepl
	cmp	DWORD PTR _destBuf$[ebp], 0
	je	SHORT $LN69@appendRepl
	mov	eax, DWORD PTR _destBuf$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN68@appendRepl
	mov	eax, DWORD PTR _destCapacity$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN69@appendRepl
$LN68@appendRepl:
	mov	eax, DWORD PTR _destCapacity$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN70@appendRepl
$LN69@appendRepl:
; Line 1363
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1364
	xor	eax, eax
	jmp	$LN73@appendRepl
$LN70@appendRepl:
; Line 1367
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _m$[ebp], ecx
; Line 1368
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	jne	SHORT $LN67@appendRepl
; Line 1369
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66306			; 00010302H
; Line 1370
	xor	eax, eax
	jmp	$LN73@appendRepl
$LN67@appendRepl:
; Line 1373
	mov	eax, DWORD PTR _destBuf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _dest$[ebp], ecx
; Line 1374
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _capacity$[ebp], ecx
; Line 1375
	mov	DWORD PTR _destIdx$[ebp], 0
; Line 1381
	cmp	DWORD PTR _replacementLength$[ebp], -1
	jne	SHORT $LN66@appendRepl
; Line 1382
	mov	eax, DWORD PTR _replacementText$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _replacementLength$[ebp], eax
$LN66@appendRepl:
; Line 1386
	mov	eax, DWORD PTR _regexp$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	$LN65@appendRepl
; Line 1389
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN64@appendRepl
; Line 1390
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _lastMatchEnd$70594[ebp], ecx
; Line 1391
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _matchStart$70593[ebp], ecx
; Line 1392
	jmp	SHORT $LN63@appendRepl
$LN64@appendRepl:
; Line 1394
	mov	DWORD PTR _tempStatus$70599[ebp], 0
; Line 1395
	lea	eax, DWORD PTR _tempStatus$70599[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	push	edx
	mov	eax, DWORD PTR [ecx+128]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _lastMatchEnd$70594[ebp], eax
; Line 1396
	mov	DWORD PTR _tempStatus$70599[ebp], 0
; Line 1397
	lea	eax, DWORD PTR _tempStatus$70599[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	mov	eax, DWORD PTR [ecx+112]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	push	edx
	mov	eax, DWORD PTR [ecx+128]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	add	eax, DWORD PTR _lastMatchEnd$70594[ebp]
	mov	DWORD PTR _matchStart$70593[ebp], eax
$LN63@appendRepl:
; Line 1399
	mov	eax, DWORD PTR _lastMatchEnd$70594[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN62@appendRepl
$LN61@appendRepl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN62@appendRepl:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _matchStart$70593[ebp]
	jge	SHORT $LN60@appendRepl
; Line 1400
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destIdx$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	push	eax
	call	?appendToBuf@@YAX_WPAHPA_WH@Z		; appendToBuf
	add	esp, 16					; 00000010H
; Line 1401
	jmp	SHORT $LN61@appendRepl
$LN60@appendRepl:
	jmp	$LN59@appendRepl
$LN65@appendRepl:
; Line 1403
	mov	DWORD PTR _possibleOverflowError$70604[ebp], 0
; Line 1406
	mov	eax, DWORD PTR _capacity$[ebp]
	sub	eax, DWORD PTR _destIdx$[ebp]
	test	eax, eax
	jle	SHORT $LN75@appendRepl
	mov	ecx, DWORD PTR _capacity$[ebp]
	sub	ecx, DWORD PTR _destIdx$[ebp]
	mov	DWORD PTR tv163[ebp], ecx
	jmp	SHORT $LN76@appendRepl
$LN75@appendRepl:
	mov	DWORD PTR tv163[ebp], 0
$LN76@appendRepl:
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN77@appendRepl
	mov	DWORD PTR tv168[ebp], 0
	jmp	SHORT $LN78@appendRepl
$LN77@appendRepl:
	mov	edx, DWORD PTR _destIdx$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR tv168[ebp], ecx
$LN78@appendRepl:
	lea	edx, DWORD PTR _possibleOverflowError$70604[ebp]
	push	edx
	mov	eax, DWORD PTR tv163[ebp]
	push	eax
	mov	ecx, DWORD PTR tv168[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+116]
	push	eax
	mov	ecx, DWORD PTR [edx+112]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+132]
	push	eax
	mov	ecx, DWORD PTR [edx+128]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	add	eax, DWORD PTR _destIdx$[ebp]
	mov	DWORD PTR _destIdx$[ebp], eax
$LN59@appendRepl:
; Line 1408
	cmp	DWORD PTR _destIdx$[ebp], 0
	jge	SHORT $LN79@appendRepl
	mov	eax, DWORD PTR ?__LINE__Var@?1??appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a
	add	eax, 66					; 00000042H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FG@DFDDLAOB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BK@KDFMMPOE@?$AAd?$AAe?$AAs?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN79@appendRepl:
; Line 1411
	mov	DWORD PTR _replIdx$[ebp], 0
$LN58@appendRepl:
; Line 1412
	mov	eax, DWORD PTR _replIdx$[ebp]
	cmp	eax, DWORD PTR _replacementLength$[ebp]
	jge	$LN57@appendRepl
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN57@appendRepl
; Line 1413
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c$70613[ebp], dx
; Line 1414
	mov	eax, DWORD PTR _replIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _replIdx$[ebp], eax
; Line 1415
	movzx	eax, WORD PTR _c$70613[ebp]
	cmp	eax, 36					; 00000024H
	je	SHORT $LN56@appendRepl
	movzx	eax, WORD PTR _c$70613[ebp]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN56@appendRepl
; Line 1418
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destIdx$[ebp]
	push	edx
	movzx	eax, WORD PTR _c$70613[ebp]
	push	eax
	call	?appendToBuf@@YAX_WPAHPA_WH@Z		; appendToBuf
	add	esp, 16					; 00000010H
; Line 1419
	jmp	$LN58@appendRepl
$LN56@appendRepl:
; Line 1422
	movzx	eax, WORD PTR _c$70613[ebp]
	cmp	eax, 92					; 0000005cH
	jne	$LN55@appendRepl
; Line 1428
	mov	eax, DWORD PTR _replIdx$[ebp]
	cmp	eax, DWORD PTR _replacementLength$[ebp]
	jl	SHORT $LN54@appendRepl
; Line 1429
	jmp	$LN57@appendRepl
$LN54@appendRepl:
; Line 1431
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c$70613[ebp], dx
; Line 1433
	movzx	eax, WORD PTR _c$70613[ebp]
	cmp	eax, 85					; 00000055H
	je	SHORT $LN52@appendRepl
	movzx	eax, WORD PTR _c$70613[ebp]
	cmp	eax, 117				; 00000075H
	jne	$LN53@appendRepl
$LN52@appendRepl:
; Line 1439
	mov	eax, DWORD PTR _replacementText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replacementLength$[ebp]
	push	ecx
	lea	edx, DWORD PTR _replIdx$[ebp]
	push	edx
	push	OFFSET _uregex_ucstr_unescape_charAt_56
	call	_u_unescapeAt_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _escapedChar$70619[ebp], eax
; Line 1441
	cmp	DWORD PTR _escapedChar$70619[ebp], -1
	je	SHORT $LN53@appendRepl
; Line 1442
	cmp	DWORD PTR _escapedChar$70619[ebp], 65535 ; 0000ffffH
	jg	SHORT $LN50@appendRepl
; Line 1443
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destIdx$[ebp]
	push	edx
	movzx	eax, WORD PTR _escapedChar$70619[ebp]
	push	eax
	call	?appendToBuf@@YAX_WPAHPA_WH@Z		; appendToBuf
	add	esp, 16					; 00000010H
; Line 1444
	jmp	SHORT $LN49@appendRepl
$LN50@appendRepl:
; Line 1445
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destIdx$[ebp]
	push	edx
	mov	eax, DWORD PTR _escapedChar$70619[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	push	eax
	call	?appendToBuf@@YAX_WPAHPA_WH@Z		; appendToBuf
	add	esp, 16					; 00000010H
; Line 1446
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destIdx$[ebp]
	push	edx
	mov	eax, DWORD PTR _escapedChar$70619[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	push	eax
	call	?appendToBuf@@YAX_WPAHPA_WH@Z		; appendToBuf
	add	esp, 16					; 00000010H
$LN49@appendRepl:
; Line 1448
	jmp	$LN58@appendRepl
$LN53@appendRepl:
; Line 1455
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destIdx$[ebp]
	push	edx
	movzx	eax, WORD PTR _c$70613[ebp]
	push	eax
	call	?appendToBuf@@YAX_WPAHPA_WH@Z		; appendToBuf
	add	esp, 16					; 00000010H
; Line 1457
	mov	eax, DWORD PTR _replIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _replIdx$[ebp], eax
; Line 1458
	jmp	$LN58@appendRepl
$LN55@appendRepl:
; Line 1464
	mov	DWORD PTR _groupNum$70628[ebp], 0
; Line 1465
	movzx	eax, WORD PTR _c$70613[ebp]
	cmp	eax, 36					; 00000024H
	je	SHORT $LN80@appendRepl
	mov	ecx, DWORD PTR ?__LINE__Var@?1??appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a
	add	ecx, 123				; 0000007bH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FG@DFDDLAOB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CA@BEAIEIMD@?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAD?$AAO?$AAL?$AAL?$AAA?$AAR?$AAS?$AAI?$AAG?$AAN?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN80@appendRepl:
; Line 1467
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _c32$70631[ebp], edx
	mov	eax, DWORD PTR _c32$70631[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN48@appendRepl
	mov	eax, DWORD PTR _c32$70631[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN47@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _replacementLength$[ebp]
	je	SHORT $LN46@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	mov	dx, WORD PTR [ecx+eax*2+2]
	mov	WORD PTR ___c2$70633[ebp], dx
	movzx	eax, WORD PTR ___c2$70633[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN46@appendRepl
	mov	eax, DWORD PTR _c32$70631[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$70633[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c32$70631[ebp], edx
$LN46@appendRepl:
	jmp	SHORT $LN48@appendRepl
$LN47@appendRepl:
	cmp	DWORD PTR _replIdx$[ebp], 0
	jle	SHORT $LN48@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	mov	dx, WORD PTR [ecx+eax*2-2]
	mov	WORD PTR ___c2$70633[ebp], dx
	movzx	eax, WORD PTR ___c2$70633[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN48@appendRepl
	movzx	eax, WORD PTR ___c2$70633[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _c32$70631[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c32$70631[ebp], edx
$LN48@appendRepl:
; Line 1468
	mov	eax, DWORD PTR _c32$70631[ebp]
	push	eax
	call	_u_isdigit_56
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN43@appendRepl
; Line 1469
	mov	DWORD PTR _numDigits$70643[ebp], 0
; Line 1470
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	ecx, DWORD PTR [ecx+108]
	call	DWORD PTR __imp_?size@UVector32@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _numCaptureGroups$70644[ebp], eax
$LN42@appendRepl:
; Line 1472
	mov	eax, DWORD PTR _replIdx$[ebp]
	cmp	eax, DWORD PTR _replacementLength$[ebp]
	jl	SHORT $LN40@appendRepl
; Line 1473
	jmp	$LN41@appendRepl
$LN40@appendRepl:
; Line 1475
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _c32$70631[ebp], edx
	mov	eax, DWORD PTR _c32$70631[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN39@appendRepl
	mov	eax, DWORD PTR _c32$70631[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN38@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _replacementLength$[ebp]
	je	SHORT $LN37@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	mov	dx, WORD PTR [ecx+eax*2+2]
	mov	WORD PTR ___c2$70650[ebp], dx
	movzx	eax, WORD PTR ___c2$70650[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN37@appendRepl
	mov	eax, DWORD PTR _c32$70631[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$70650[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c32$70631[ebp], edx
$LN37@appendRepl:
	jmp	SHORT $LN39@appendRepl
$LN38@appendRepl:
	cmp	DWORD PTR _replIdx$[ebp], 0
	jle	SHORT $LN39@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	mov	dx, WORD PTR [ecx+eax*2-2]
	mov	WORD PTR ___c2$70650[ebp], dx
	movzx	eax, WORD PTR ___c2$70650[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN39@appendRepl
	movzx	eax, WORD PTR ___c2$70650[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _c32$70631[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c32$70631[ebp], edx
$LN39@appendRepl:
; Line 1476
	mov	eax, DWORD PTR _c32$70631[ebp]
	push	eax
	call	_u_isdigit_56
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN34@appendRepl
; Line 1477
	jmp	$LN41@appendRepl
$LN34@appendRepl:
; Line 1480
	mov	eax, DWORD PTR _c32$70631[ebp]
	push	eax
	call	_u_charDigitValue_56
	add	esp, 4
	mov	DWORD PTR _digitVal$70660[ebp], eax
; Line 1481
	mov	eax, DWORD PTR _groupNum$70628[ebp]
	imul	eax, 10					; 0000000aH
	add	eax, DWORD PTR _digitVal$70660[ebp]
	cmp	eax, DWORD PTR _numCaptureGroups$70644[ebp]
	jg	$LN33@appendRepl
; Line 1482
	mov	eax, DWORD PTR _groupNum$70628[ebp]
	imul	eax, 10					; 0000000aH
	add	eax, DWORD PTR _digitVal$70660[ebp]
	mov	DWORD PTR _groupNum$70628[ebp], eax
; Line 1483
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	mov	eax, DWORD PTR _replIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _replIdx$[ebp], eax
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN81@appendRepl
	mov	DWORD PTR tv331[ebp], 1
	jmp	SHORT $LN82@appendRepl
$LN81@appendRepl:
	mov	DWORD PTR tv331[ebp], 0
$LN82@appendRepl:
	cmp	DWORD PTR tv331[ebp], 0
	je	SHORT $LN32@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	cmp	eax, DWORD PTR _replacementLength$[ebp]
	je	SHORT $LN32@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN32@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _replIdx$[ebp], eax
$LN32@appendRepl:
; Line 1484
	mov	eax, DWORD PTR _numDigits$70643[ebp]
	add	eax, 1
	mov	DWORD PTR _numDigits$70643[ebp], eax
; Line 1485
	jmp	SHORT $LN31@appendRepl
$LN33@appendRepl:
; Line 1486
	cmp	DWORD PTR _numDigits$70643[ebp], 0
	jne	SHORT $LN30@appendRepl
; Line 1487
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
$LN30@appendRepl:
; Line 1489
	jmp	SHORT $LN41@appendRepl
$LN31@appendRepl:
; Line 1491
	jmp	$LN42@appendRepl
$LN41@appendRepl:
	jmp	$LN29@appendRepl
$LN43@appendRepl:
; Line 1492
	cmp	DWORD PTR _c32$70631[ebp], 123		; 0000007bH
	jne	$LN28@appendRepl
; Line 1494
	mov	esi, esp
	lea	ecx, DWORD PTR _groupName$70667[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1495
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	mov	eax, DWORD PTR _replIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _replIdx$[ebp], eax
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN83@appendRepl
	mov	DWORD PTR tv352[ebp], 1
	jmp	SHORT $LN84@appendRepl
$LN83@appendRepl:
	mov	DWORD PTR tv352[ebp], 0
$LN84@appendRepl:
	cmp	DWORD PTR tv352[ebp], 0
	je	SHORT $LN26@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	cmp	eax, DWORD PTR _replacementLength$[ebp]
	je	SHORT $LN26@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN26@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _replIdx$[ebp], eax
$LN26@appendRepl:
; Line 1496
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN25@appendRepl
	cmp	DWORD PTR _c32$70631[ebp], 125		; 0000007dH
	je	$LN25@appendRepl
; Line 1497
	mov	eax, DWORD PTR _replIdx$[ebp]
	cmp	eax, DWORD PTR _replacementLength$[ebp]
	jl	SHORT $LN24@appendRepl
; Line 1498
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66325			; 00010315H
; Line 1499
	jmp	$LN25@appendRepl
$LN24@appendRepl:
; Line 1501
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _c32$70631[ebp], edx
	mov	eax, DWORD PTR _replIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _replIdx$[ebp], eax
	mov	eax, DWORD PTR _c32$70631[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN23@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	cmp	eax, DWORD PTR _replacementLength$[ebp]
	je	SHORT $LN23@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	mov	ecx, DWORD PTR _replacementText$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$70674[ebp], dx
	movzx	eax, WORD PTR ___c2$70674[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN23@appendRepl
	mov	eax, DWORD PTR _replIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _replIdx$[ebp], eax
	mov	eax, DWORD PTR _c32$70631[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$70674[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c32$70631[ebp], edx
$LN23@appendRepl:
; Line 1504
	cmp	DWORD PTR _c32$70631[ebp], 65		; 00000041H
	jl	SHORT $LN19@appendRepl
	cmp	DWORD PTR _c32$70631[ebp], 90		; 0000005aH
	jle	SHORT $LN20@appendRepl
$LN19@appendRepl:
	cmp	DWORD PTR _c32$70631[ebp], 97		; 00000061H
	jl	SHORT $LN18@appendRepl
	cmp	DWORD PTR _c32$70631[ebp], 122		; 0000007aH
	jle	SHORT $LN20@appendRepl
$LN18@appendRepl:
	cmp	DWORD PTR _c32$70631[ebp], 49		; 00000031H
	jl	SHORT $LN21@appendRepl
	cmp	DWORD PTR _c32$70631[ebp], 57		; 00000039H
	jg	SHORT $LN21@appendRepl
$LN20@appendRepl:
; Line 1505
	mov	esi, esp
	mov	eax, DWORD PTR _c32$70631[ebp]
	push	eax
	lea	ecx, DWORD PTR _groupName$70667[ebp]
	call	DWORD PTR __imp_?append@UnicodeString@icu_56@@QAEAAV12@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN17@appendRepl
$LN21@appendRepl:
; Line 1506
	cmp	DWORD PTR _c32$70631[ebp], 125		; 0000007dH
	jne	SHORT $LN16@appendRepl
; Line 1507
	lea	eax, DWORD PTR _groupName$70667[ebp]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+148]
	push	eax
	call	_uhash_geti_56
	add	esp, 8
	mov	DWORD PTR _groupNum$70628[ebp], eax
; Line 1508
	cmp	DWORD PTR _groupNum$70628[ebp], 0
	jne	SHORT $LN15@appendRepl
; Line 1510
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66325			; 00010315H
$LN15@appendRepl:
; Line 1512
	jmp	SHORT $LN17@appendRepl
$LN16@appendRepl:
; Line 1514
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66325			; 00010315H
$LN17@appendRepl:
; Line 1516
	jmp	$LN26@appendRepl
$LN25@appendRepl:
; Line 1517
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _groupName$70667[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN29@appendRepl
$LN28@appendRepl:
; Line 1519
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66325			; 00010315H
$LN29@appendRepl:
; Line 1524
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN12@appendRepl
; Line 1526
	mov	eax, DWORD PTR _capacity$[ebp]
	sub	eax, DWORD PTR _destIdx$[ebp]
	test	eax, eax
	jle	SHORT $LN85@appendRepl
	mov	ecx, DWORD PTR _capacity$[ebp]
	sub	ecx, DWORD PTR _destIdx$[ebp]
	mov	DWORD PTR tv408[ebp], ecx
	jmp	SHORT $LN86@appendRepl
$LN85@appendRepl:
	mov	DWORD PTR tv408[ebp], 0
$LN86@appendRepl:
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN87@appendRepl
	mov	DWORD PTR tv413[ebp], 0
	jmp	SHORT $LN88@appendRepl
$LN87@appendRepl:
	mov	edx, DWORD PTR _destIdx$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR tv413[ebp], ecx
$LN88@appendRepl:
	mov	edx, DWORD PTR _status$[ebp]
	push	edx
	mov	eax, DWORD PTR tv408[ebp]
	push	eax
	mov	ecx, DWORD PTR tv413[ebp]
	push	ecx
	mov	edx, DWORD PTR _groupNum$70628[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	push	eax
	call	_uregex_group_56
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _destIdx$[ebp]
	mov	DWORD PTR _destIdx$[ebp], eax
; Line 1527
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN12@appendRepl
; Line 1531
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
$LN12@appendRepl:
; Line 1535
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN10@appendRepl
; Line 1537
	jmp	SHORT $LN57@appendRepl
$LN10@appendRepl:
; Line 1539
	jmp	$LN58@appendRepl
$LN57@appendRepl:
; Line 1545
	mov	eax, DWORD PTR _destIdx$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN9@appendRepl
; Line 1546
	xor	eax, eax
	mov	ecx, DWORD PTR _destIdx$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN8@appendRepl
$LN9@appendRepl:
; Line 1547
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@appendRepl
; Line 1548
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR _destIdx$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN6@appendRepl
; Line 1549
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], -124			; ffffff84H
; Line 1550
	jmp	SHORT $LN8@appendRepl
$LN6@appendRepl:
; Line 1551
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN8@appendRepl:
; Line 1558
	cmp	DWORD PTR _destIdx$[ebp], 0
	jle	SHORT $LN4@appendRepl
	mov	eax, DWORD PTR _destCapacity$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@appendRepl
; Line 1559
	mov	eax, DWORD PTR _destIdx$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN3@appendRepl
; Line 1560
	mov	eax, DWORD PTR _destBuf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIdx$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _destBuf$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1561
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _destIdx$[ebp]
	mov	edx, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1562
	jmp	SHORT $LN4@appendRepl
$LN3@appendRepl:
; Line 1563
	mov	eax, DWORD PTR _destBuf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _capacity$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _destBuf$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1564
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@appendRepl:
; Line 1571
	movsx	eax, BYTE PTR _pendingBufferOverflow$[ebp]
	test	eax, eax
	je	SHORT $LN1@appendRepl
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@appendRepl
; Line 1572
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@appendRepl:
; Line 1575
	mov	eax, DWORD PTR _destIdx$[ebp]
$LN73@appendRepl:
; Line 1576
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN100@appendRepl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 540				; 0000021cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN100@appendRepl:
	DD	5
	DD	$LN99@appendRepl
$LN99@appendRepl:
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN93@appendRepl
	DD	-120					; ffffff88H
	DD	4
	DD	$LN94@appendRepl
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN95@appendRepl
	DD	-144					; ffffff70H
	DD	4
	DD	$LN96@appendRepl
	DD	-324					; fffffebcH
	DD	64					; 00000040H
	DD	$LN97@appendRepl
$LN97@appendRepl:
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN96@appendRepl:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN95@appendRepl:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	79					; 0000004fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN94@appendRepl:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN93@appendRepl:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR _groupName$70667[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-544]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z ENDP ; icu_56::RegexCImpl::appendReplacement
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?appendToBuf@@YAX_WPAHPA_WH@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
_idx$ = 12						; size = 4
_buf$ = 16						; size = 4
_bufCapacity$ = 20					; size = 4
?appendToBuf@@YAX_WPAHPA_WH@Z PROC			; appendToBuf, COMDAT
; Line 1326
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1327
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _bufCapacity$[ebp]
	jge	SHORT $LN1@appendToBu
; Line 1328
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN1@appendToBu:
; Line 1330
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1331
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?appendToBuf@@YAX_WPAHPA_WH@Z ENDP			; appendToBuf
_TEXT	ENDS
PUBLIC	_uregex_appendReplacementUText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_appendReplacementUText_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_replText$ = 12						; size = 4
_dest$ = 16						; size = 4
_status$ = 20						; size = 4
_uregex_appendReplacementUText_56 PROC			; COMDAT
; Line 1601
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1602
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1603
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replText$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1604
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_appendReplacementUText_56 ENDP
_TEXT	ENDS
PUBLIC	?appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PAPA_WPAHPAW4UErrorCode@@@Z ; icu_56::RegexCImpl::appendTail
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_appendTail_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_destBuf$ = 12						; size = 4
_destCapacity$ = 16					; size = 4
_status$ = 20						; size = 4
_uregex_appendTail_56 PROC				; COMDAT
; Line 1741
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1742
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1743
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	push	eax
	call	?appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PAPA_WPAHPAW4UErrorCode@@@Z ; icu_56::RegexCImpl::appendTail
	add	esp, 16					; 00000010H
; Line 1744
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_appendTail_56 ENDP
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a ; `icu_56::RegexCImpl::appendTail'::`2'::__LINE__Var
;	COMDAT ?__LINE__Var@?1??appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a
_DATA	SEGMENT
?__LINE__Var@?1??appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a DD 0650H ; `icu_56::RegexCImpl::appendTail'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PAPA_WPAHPAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv86 = -328						; size = 8
_srcIdx$70755 = -124					; size = 8
_c$70749 = -108						; size = 2
_status$70742 = -96					; size = 4
_nativeIdx$70736 = -84					; size = 8
_srcIdx$70735 = -68					; size = 4
_dest$ = -56						; size = 4
_destCap$ = -44						; size = 4
_destIdx$ = -32						; size = 4
_m$ = -20						; size = 4
_pendingBufferOverflow$ = -5				; size = 1
_regexp$ = 8						; size = 4
_destBuf$ = 12						; size = 4
_destCapacity$ = 16					; size = 4
_status$ = 20						; size = 4
?appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PAPA_WPAHPAW4UErrorCode@@@Z PROC ; icu_56::RegexCImpl::appendTail, COMDAT
; Line 1616
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1621
	mov	BYTE PTR _pendingBufferOverflow$[ebp], 0
; Line 1622
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN29@appendTail
	cmp	DWORD PTR _destCapacity$[ebp], 0
	je	SHORT $LN29@appendTail
	mov	eax, DWORD PTR _destCapacity$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN29@appendTail
; Line 1623
	mov	BYTE PTR _pendingBufferOverflow$[ebp], 1
; Line 1624
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
$LN29@appendTail:
; Line 1627
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN28@appendTail
; Line 1628
	xor	eax, eax
	jmp	$LN30@appendTail
$LN28@appendTail:
; Line 1633
	cmp	DWORD PTR _destCapacity$[ebp], 0
	je	SHORT $LN26@appendTail
	cmp	DWORD PTR _destBuf$[ebp], 0
	je	SHORT $LN26@appendTail
	mov	eax, DWORD PTR _destBuf$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN25@appendTail
	mov	eax, DWORD PTR _destCapacity$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN26@appendTail
$LN25@appendTail:
	mov	eax, DWORD PTR _destCapacity$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN27@appendTail
$LN26@appendTail:
; Line 1635
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1636
	xor	eax, eax
	jmp	$LN30@appendTail
$LN27@appendTail:
; Line 1639
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _m$[ebp], ecx
; Line 1641
	mov	DWORD PTR _destIdx$[ebp], 0
; Line 1642
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _destCap$[ebp], ecx
; Line 1643
	mov	eax, DWORD PTR _destBuf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _dest$[ebp], ecx
; Line 1645
	mov	eax, DWORD PTR _regexp$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	$LN24@appendTail
; Line 1647
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN32@appendTail
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR [edx+124]
	mov	DWORD PTR tv86[ebp+4], ecx
	jmp	SHORT $LN33@appendTail
$LN32@appendTail:
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR [edx+132]
	mov	DWORD PTR tv86[ebp+4], ecx
$LN33@appendTail:
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _nativeIdx$70736[ebp], edx
	mov	eax, DWORD PTR tv86[ebp+4]
	mov	DWORD PTR _nativeIdx$70736[ebp+4], eax
; Line 1648
	mov	eax, DWORD PTR _nativeIdx$70736[ebp]
	and	eax, DWORD PTR _nativeIdx$70736[ebp+4]
	cmp	eax, -1
	jne	SHORT $LN23@appendTail
; Line 1649
	mov	DWORD PTR _srcIdx$70735[ebp], 0
	jmp	SHORT $LN19@appendTail
$LN23@appendTail:
; Line 1650
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN21@appendTail
; Line 1651
	mov	eax, DWORD PTR _nativeIdx$70736[ebp]
	mov	DWORD PTR _srcIdx$70735[ebp], eax
; Line 1652
	jmp	SHORT $LN19@appendTail
$LN21@appendTail:
; Line 1653
	mov	DWORD PTR _status$70742[ebp], 0
; Line 1654
	lea	eax, DWORD PTR _status$70742[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _nativeIdx$70736[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nativeIdx$70736[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _srcIdx$70735[ebp], eax
$LN19@appendTail:
; Line 1658
	cmp	DWORD PTR _destIdx$[ebp], 0
	jge	SHORT $LN34@appendTail
	mov	eax, DWORD PTR ?__LINE__Var@?1??appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a
	add	eax, 42					; 0000002aH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FG@DFDDLAOB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BK@KDFMMPOE@?$AAd?$AAe?$AAs?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN34@appendTail:
; Line 1660
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR _srcIdx$70735[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN17@appendTail
; Line 1661
	jmp	SHORT $LN18@appendTail
$LN17@appendTail:
; Line 1663
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _srcIdx$70735[ebp]
	mov	ax, WORD PTR [ecx+edx*2]
	mov	WORD PTR _c$70749[ebp], ax
; Line 1664
	movzx	eax, WORD PTR _c$70749[ebp]
	test	eax, eax
	jne	SHORT $LN16@appendTail
	mov	eax, DWORD PTR _regexp$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN16@appendTail
; Line 1665
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR _srcIdx$70735[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 1666
	jmp	SHORT $LN18@appendTail
$LN16@appendTail:
; Line 1669
	mov	eax, DWORD PTR _destIdx$[ebp]
	cmp	eax, DWORD PTR _destCap$[ebp]
	jge	SHORT $LN15@appendTail
; Line 1670
	mov	eax, DWORD PTR _destIdx$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR _c$70749[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 1671
	jmp	SHORT $LN14@appendTail
$LN15@appendTail:
; Line 1675
	mov	eax, DWORD PTR _regexp$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jle	SHORT $LN14@appendTail
; Line 1676
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, DWORD PTR _srcIdx$70735[ebp]
	add	ecx, DWORD PTR _destIdx$[ebp]
	mov	DWORD PTR _destIdx$[ebp], ecx
; Line 1677
	jmp	SHORT $LN18@appendTail
$LN14@appendTail:
; Line 1680
	mov	eax, DWORD PTR _srcIdx$70735[ebp]
	add	eax, 1
	mov	DWORD PTR _srcIdx$70735[ebp], eax
; Line 1681
	mov	eax, DWORD PTR _destIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _destIdx$[ebp], eax
; Line 1682
	jmp	$LN19@appendTail
$LN18@appendTail:
	jmp	SHORT $LN12@appendTail
$LN24@appendTail:
; Line 1685
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN11@appendTail
; Line 1687
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _srcIdx$70755[ebp], ecx
	mov	edx, DWORD PTR [eax+124]
	mov	DWORD PTR _srcIdx$70755[ebp+4], edx
; Line 1688
	jmp	SHORT $LN10@appendTail
$LN11@appendTail:
; Line 1691
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _srcIdx$70755[ebp], ecx
	mov	edx, DWORD PTR [eax+132]
	mov	DWORD PTR _srcIdx$70755[ebp+4], edx
; Line 1692
	mov	eax, DWORD PTR _srcIdx$70755[ebp]
	and	eax, DWORD PTR _srcIdx$70755[ebp+4]
	cmp	eax, -1
	jne	SHORT $LN10@appendTail
; Line 1695
	mov	DWORD PTR _srcIdx$70755[ebp], 0
	mov	DWORD PTR _srcIdx$70755[ebp+4], 0
$LN10@appendTail:
; Line 1699
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	push	edx
	mov	eax, DWORD PTR _srcIdx$70755[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _srcIdx$70755[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _destIdx$[ebp], eax
$LN12@appendTail:
; Line 1706
	mov	eax, DWORD PTR _destIdx$[ebp]
	cmp	eax, DWORD PTR _destCap$[ebp]
	jge	SHORT $LN8@appendTail
; Line 1707
	xor	eax, eax
	mov	ecx, DWORD PTR _destIdx$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN7@appendTail
$LN8@appendTail:
; Line 1708
	mov	eax, DWORD PTR _destIdx$[ebp]
	cmp	eax, DWORD PTR _destCap$[ebp]
	jne	SHORT $LN6@appendTail
; Line 1709
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], -124			; ffffff84H
; Line 1710
	jmp	SHORT $LN7@appendTail
$LN6@appendTail:
; Line 1711
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN7@appendTail:
; Line 1718
	mov	eax, DWORD PTR _destIdx$[ebp]
	cmp	eax, DWORD PTR _destCap$[ebp]
	jge	SHORT $LN4@appendTail
; Line 1719
	mov	eax, DWORD PTR _destBuf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIdx$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _destBuf$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1720
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _destIdx$[ebp]
	mov	edx, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN3@appendTail
$LN4@appendTail:
; Line 1721
	mov	eax, DWORD PTR _destBuf$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@appendTail
; Line 1722
	mov	eax, DWORD PTR _destBuf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destCap$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _destBuf$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1723
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@appendTail:
; Line 1726
	movsx	eax, BYTE PTR _pendingBufferOverflow$[ebp]
	test	eax, eax
	je	SHORT $LN1@appendTail
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@appendTail
; Line 1727
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@appendTail:
; Line 1730
	mov	eax, DWORD PTR _destIdx$[ebp]
$LN30@appendTail:
; Line 1731
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@appendTail
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@appendTail:
	DD	1
	DD	$LN36@appendTail
$LN36@appendTail:
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN35@appendTail
$LN35@appendTail:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PAPA_WPAHPAW4UErrorCode@@@Z ENDP ; icu_56::RegexCImpl::appendTail
_TEXT	ENDS
PUBLIC	_uregex_appendTailUText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_appendTailUText_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_dest$ = 12						; size = 4
_status$ = 16						; size = 4
_uregex_appendTailUText_56 PROC				; COMDAT
; Line 1753
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1754
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1755
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+196]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1756
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_appendTailUText_56 ENDP
_TEXT	ENDS
PUBLIC	?split@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PA_WHPAHQAPA_WHPAW4UErrorCode@@@Z ; icu_56::RegexCImpl::split
PUBLIC	_uregex_split_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_split_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_destBuf$ = 12						; size = 4
_destCapacity$ = 16					; size = 4
_requiredCapacity$ = 20					; size = 4
_destFields$ = 24					; size = 4
_destFieldsCapacity$ = 28				; size = 4
_status$ = 32						; size = 4
_uregex_split_56 PROC					; COMDAT
; Line 1944
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1945
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1946
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _regexp$[ebp]
	push	ecx
	call	?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z ; validateRE
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN4@uregex_spl
; Line 1947
	xor	eax, eax
	jmp	SHORT $LN5@uregex_spl
$LN4@uregex_spl:
; Line 1952
	cmp	DWORD PTR _destBuf$[ebp], 0
	jne	SHORT $LN1@uregex_spl
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jg	SHORT $LN2@uregex_spl
$LN1@uregex_spl:
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN2@uregex_spl
	cmp	DWORD PTR _destFields$[ebp], 0
	je	SHORT $LN2@uregex_spl
	cmp	DWORD PTR _destFieldsCapacity$[ebp], 1
	jge	SHORT $LN3@uregex_spl
$LN2@uregex_spl:
; Line 1953
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1954
	xor	eax, eax
	jmp	SHORT $LN5@uregex_spl
$LN3@uregex_spl:
; Line 1957
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destFieldsCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destFields$[ebp]
	push	edx
	mov	eax, DWORD PTR _requiredCapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	push	eax
	call	?split@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PA_WHPAHQAPA_WHPAW4UErrorCode@@@Z ; icu_56::RegexCImpl::split
	add	esp, 28					; 0000001cH
$LN5@uregex_spl:
; Line 1958
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_split_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?split@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PA_WHPAHQAPA_WHPAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv226 = -324						; size = 4
tv194 = -324						; size = 4
tv165 = -324						; size = 4
tv136 = -324						; size = 4
_j$ = -124						; size = 4
_t$70814 = -112						; size = 4
_groupNum$70809 = -100					; size = 4
_tStatus$ = -88						; size = 4
_numCaptureGroups$ = -76				; size = 4
_destIdx$ = -64						; size = 4
_i$ = -52						; size = 4
_inputLen$ = -40					; size = 8
_nextOutputStringStart$ = -24				; size = 8
_inputText$ = -8					; size = 4
_regexp$ = 8						; size = 4
_destBuf$ = 12						; size = 4
_destCapacity$ = 16					; size = 4
_requiredCapacity$ = 20					; size = 4
_destFields$ = 24					; size = 4
_destFieldsCapacity$ = 28				; size = 4
_status$ = 32						; size = 4
?split@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PA_WHPAHQAPA_WHPAW4UErrorCode@@@Z PROC ; icu_56::RegexCImpl::split, COMDAT
; Line 1808
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1812
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1813
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _inputText$[ebp], edx
; Line 1814
	mov	DWORD PTR _nextOutputStringStart$[ebp], 0
	mov	DWORD PTR _nextOutputStringStart$[ebp+4], 0
; Line 1815
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _inputLen$[ebp], edx
	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _inputLen$[ebp+4], eax
; Line 1816
	mov	eax, DWORD PTR _inputLen$[ebp]
	or	eax, DWORD PTR _inputLen$[ebp+4]
	jne	SHORT $LN26@split
; Line 1817
	xor	eax, eax
	jmp	$LN27@split
$LN26@split:
; Line 1824
	mov	DWORD PTR _destIdx$[ebp], 0
; Line 1825
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _numCaptureGroups$[ebp], eax
; Line 1826
	mov	DWORD PTR _tStatus$[ebp], 0
; Line 1827
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN25@split
$LN24@split:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN25@split:
; Line 1828
	mov	eax, DWORD PTR _destFieldsCapacity$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jl	$LN22@split
; Line 1835
	mov	eax, DWORD PTR _inputLen$[ebp+4]
	cmp	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	jl	$LN21@split
	jg	SHORT $LN37@split
	mov	ecx, DWORD PTR _inputLen$[ebp]
	cmp	ecx, DWORD PTR _nextOutputStringStart$[ebp]
	jbe	$LN21@split
$LN37@split:
; Line 1836
	mov	eax, DWORD PTR _destFieldsCapacity$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	je	SHORT $LN20@split
; Line 1839
	mov	eax, DWORD PTR _destFieldsCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1840
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _destFields$[ebp]
	mov	edx, DWORD PTR _destFields$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	sub	eax, DWORD PTR [edx]
	sar	eax, 1
	mov	DWORD PTR _destIdx$[ebp], eax
$LN20@split:
; Line 1843
	mov	eax, DWORD PTR _destIdx$[ebp]
	mov	ecx, DWORD PTR _destBuf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _destFields$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1845
	mov	eax, DWORD PTR _destCapacity$[ebp]
	sub	eax, DWORD PTR _destIdx$[ebp]
	test	eax, eax
	jle	SHORT $LN29@split
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	sub	ecx, DWORD PTR _destIdx$[ebp]
	mov	DWORD PTR tv136[ebp], ecx
	jmp	SHORT $LN30@split
$LN29@split:
	mov	DWORD PTR tv136[ebp], 0
$LN30@split:
	mov	edx, DWORD PTR _status$[ebp]
	push	edx
	mov	eax, DWORD PTR tv136[ebp]
	push	eax
	mov	ecx, DWORD PTR _destIdx$[ebp]
	mov	edx, DWORD PTR _destBuf$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _inputLen$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _inputLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inputText$[ebp]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	ecx, DWORD PTR _destIdx$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _destIdx$[ebp], edx
$LN21@split:
; Line 1847
	jmp	$LN23@split
$LN22@split:
; Line 1850
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	$LN19@split
; Line 1853
	mov	eax, DWORD PTR _destIdx$[ebp]
	mov	ecx, DWORD PTR _destBuf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _destFields$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1856
	mov	eax, DWORD PTR _destCapacity$[ebp]
	sub	eax, DWORD PTR _destIdx$[ebp]
	test	eax, eax
	jle	SHORT $LN31@split
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	sub	ecx, DWORD PTR _destIdx$[ebp]
	mov	DWORD PTR tv165[ebp], ecx
	jmp	SHORT $LN32@split
$LN31@split:
	mov	DWORD PTR tv165[ebp], 0
$LN32@split:
	lea	edx, DWORD PTR _tStatus$[ebp]
	push	edx
	mov	eax, DWORD PTR tv165[ebp]
	push	eax
	mov	ecx, DWORD PTR _destIdx$[ebp]
	mov	edx, DWORD PTR _destBuf$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+116]
	push	eax
	mov	ecx, DWORD PTR [edx+112]
	push	ecx
	mov	edx, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _nextOutputStringStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inputText$[ebp]
	push	ecx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	edx, DWORD PTR _destIdx$[ebp]
	lea	eax, DWORD PTR [edx+eax+1]
	mov	DWORD PTR _destIdx$[ebp], eax
; Line 1857
	cmp	DWORD PTR _tStatus$[ebp], 15		; 0000000fH
	jne	SHORT $LN18@split
; Line 1858
	mov	DWORD PTR _tStatus$[ebp], 0
; Line 1859
	jmp	SHORT $LN17@split
$LN18@split:
; Line 1860
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _tStatus$[ebp]
	mov	DWORD PTR [eax], ecx
$LN17@split:
; Line 1862
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR _nextOutputStringStart$[ebp], edx
	mov	eax, DWORD PTR [ecx+124]
	mov	DWORD PTR _nextOutputStringStart$[ebp+4], eax
; Line 1867
	mov	DWORD PTR _groupNum$70809[ebp], 1
	jmp	SHORT $LN16@split
$LN15@split:
	mov	eax, DWORD PTR _groupNum$70809[ebp]
	add	eax, 1
	mov	DWORD PTR _groupNum$70809[ebp], eax
$LN16@split:
	mov	eax, DWORD PTR _groupNum$70809[ebp]
	cmp	eax, DWORD PTR _numCaptureGroups$[ebp]
	jg	$LN14@split
; Line 1869
	mov	eax, DWORD PTR _destFieldsCapacity$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN13@split
; Line 1870
	jmp	$LN14@split
$LN13@split:
; Line 1872
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1875
	mov	eax, DWORD PTR _destIdx$[ebp]
	mov	ecx, DWORD PTR _destBuf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _destFields$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1876
	mov	DWORD PTR _tStatus$[ebp], 0
; Line 1881
	mov	eax, DWORD PTR _destCapacity$[ebp]
	sub	eax, DWORD PTR _destIdx$[ebp]
	test	eax, eax
	jle	SHORT $LN33@split
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	sub	ecx, DWORD PTR _destIdx$[ebp]
	mov	DWORD PTR tv194[ebp], ecx
	jmp	SHORT $LN34@split
$LN33@split:
	mov	DWORD PTR tv194[ebp], 0
$LN34@split:
	lea	edx, DWORD PTR _tStatus$[ebp]
	push	edx
	mov	eax, DWORD PTR tv194[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _destFields$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _groupNum$70809[ebp]
	push	ecx
	mov	edx, DWORD PTR _regexp$[ebp]
	push	edx
	call	_uregex_group_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _t$70814[ebp], eax
; Line 1882
	mov	eax, DWORD PTR _t$70814[ebp]
	mov	ecx, DWORD PTR _destIdx$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _destIdx$[ebp], edx
; Line 1884
	cmp	DWORD PTR _tStatus$[ebp], 15		; 0000000fH
	jne	SHORT $LN12@split
; Line 1885
	mov	DWORD PTR _tStatus$[ebp], 0
; Line 1886
	jmp	SHORT $LN11@split
$LN12@split:
; Line 1887
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _tStatus$[ebp]
	mov	DWORD PTR [eax], ecx
$LN11@split:
; Line 1889
	jmp	$LN15@split
$LN14@split:
; Line 1891
	mov	eax, DWORD PTR _nextOutputStringStart$[ebp]
	cmp	eax, DWORD PTR _inputLen$[ebp]
	jne	SHORT $LN10@split
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp+4]
	cmp	ecx, DWORD PTR _inputLen$[ebp+4]
	jne	SHORT $LN10@split
; Line 1894
	mov	eax, DWORD PTR _destIdx$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN9@split
; Line 1895
	xor	eax, eax
	mov	ecx, DWORD PTR _destIdx$[ebp]
	mov	edx, DWORD PTR _destBuf$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN9@split:
; Line 1897
	mov	eax, DWORD PTR _destFieldsCapacity$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN8@split
; Line 1898
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@split:
; Line 1900
	mov	eax, DWORD PTR _destIdx$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN7@split
; Line 1901
	mov	eax, DWORD PTR _destIdx$[ebp]
	mov	ecx, DWORD PTR _destBuf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _destFields$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
$LN7@split:
; Line 1903
	mov	eax, DWORD PTR _destIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _destIdx$[ebp], eax
; Line 1904
	jmp	SHORT $LN23@split
$LN10@split:
; Line 1908
	jmp	SHORT $LN6@split
$LN19@split:
; Line 1912
	mov	eax, DWORD PTR _destIdx$[ebp]
	mov	ecx, DWORD PTR _destBuf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _destFields$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1914
	mov	eax, DWORD PTR _destCapacity$[ebp]
	sub	eax, DWORD PTR _destIdx$[ebp]
	test	eax, eax
	jle	SHORT $LN35@split
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	sub	ecx, DWORD PTR _destIdx$[ebp]
	mov	DWORD PTR tv226[ebp], ecx
	jmp	SHORT $LN36@split
$LN35@split:
	mov	DWORD PTR tv226[ebp], 0
$LN36@split:
	mov	edx, DWORD PTR _status$[ebp]
	push	edx
	mov	eax, DWORD PTR tv226[ebp]
	push	eax
	mov	ecx, DWORD PTR _destIdx$[ebp]
	mov	edx, DWORD PTR _destBuf$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _inputLen$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _inputLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _nextOutputStringStart$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _nextOutputStringStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inputText$[ebp]
	push	edx
	call	_utext_extract_56
	add	esp, 32					; 00000020H
	mov	ecx, DWORD PTR _destIdx$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _destIdx$[ebp], edx
; Line 1915
	jmp	SHORT $LN23@split
$LN6@split:
; Line 1917
	jmp	$LN24@split
$LN23@split:
; Line 1921
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN5@split
$LN4@split:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN5@split:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _destFieldsCapacity$[ebp]
	jge	SHORT $LN3@split
; Line 1922
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _destFields$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
; Line 1923
	jmp	SHORT $LN4@split
$LN3@split:
; Line 1925
	cmp	DWORD PTR _requiredCapacity$[ebp], 0
	je	SHORT $LN2@split
; Line 1926
	mov	eax, DWORD PTR _requiredCapacity$[ebp]
	mov	ecx, DWORD PTR _destIdx$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@split:
; Line 1928
	mov	eax, DWORD PTR _destIdx$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jle	SHORT $LN1@split
; Line 1929
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@split:
; Line 1931
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
$LN27@split:
; Line 1932
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN40@split
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN40@split:
	DD	1
	DD	$LN39@split
$LN39@split:
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN38@split
$LN38@split:
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?split@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PA_WHPAHQAPA_WHPAW4UErrorCode@@@Z ENDP ; icu_56::RegexCImpl::split
_TEXT	ENDS
PUBLIC	_uregex_splitUText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uregex_splitUText_56
_TEXT	SEGMENT
_regexp$ = -8						; size = 4
_regexp2$ = 8						; size = 4
_destFields$ = 12					; size = 4
_destFieldsCapacity$ = 16				; size = 4
_status$ = 20						; size = 4
_uregex_splitUText_56 PROC				; COMDAT
; Line 1968
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1969
	mov	eax, DWORD PTR _regexp2$[ebp]
	mov	DWORD PTR _regexp$[ebp], eax
; Line 1970
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destFieldsCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destFields$[ebp]
	push	edx
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _regexp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx]
	mov	edi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+112]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _regexp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _regexp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+204]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1971
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uregex_splitUText_56 ENDP
_TEXT	ENDS
END
