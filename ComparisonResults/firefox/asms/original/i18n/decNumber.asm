; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\i18n\decNumber.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_d2utable DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
_uarrone DB	01H
	ORG $+1
_DECPOWERS DD	01H
	DD	0aH
	DD	064H
	DD	03e8H
	DD	02710H
	DD	0186a0H
	DD	0f4240H
	DD	0989680H
	DD	05f5e100H
	DD	03b9aca00H
_multies DD	020001H
	DD	06667H
	DD	0147bH
	DD	0419H
	DD	0d2H
_LNnn	DW	02338H
	DW	021ccH
	DW	0207cH
	DW	01f48H
	DW	01e2cH
	DW	01d20H
	DW	01c28H
	DW	01b3cH
	DW	01a5cH
	DW	0198cH
	DW	018c4H
	DW	01804H
	DW	01750H
	DW	016a0H
	DW	015fcH
	DW	01558H
	DW	014c0H
	DW	0142cH
	DW	0139cH
	DW	01314H
	DW	0128cH
	DW	0120cH
	DW	01190H
	DW	01118H
	DW	010a0H
	DW	01030H
	DW	0fc0H
	DW	09941H
	DW	09525H
	DW	09125H
	DW	08d3dH
	DW	0896dH
	DW	085b5H
	DW	08211H
	DW	07e85H
	DW	07b0dH
	DW	077a5H
	DW	07451H
	DW	07111H
	DW	06de1H
	DW	06ac1H
	DW	067b1H
	DW	064b1H
	DW	061bdH
	DW	05ed9H
	DW	05c01H
	DW	05935H
	DW	05679H
	DW	053c5H
	DW	05121H
	DW	04e85H
	DW	04bf5H
	DW	04971H
	DW	046f5H
	DW	04485H
	DW	0421dH
	DW	03fc1H
	DW	03d69H
	DW	03b1dH
	DW	038d9H
	DW	036a1H
	DW	0346dH
	DW	03241H
	DW	0301dH
	DW	02e01H
	DW	02be9H
	DW	029ddH
	DW	027d5H
	DW	025d5H
	DW	023d9H
	DW	021e5H
	DW	01ff9H
	DW	01e11H
	DW	01c2dH
	DW	01a51H
	DW	0187dH
	DW	016a9H
	DW	014ddH
	DW	01319H
	DW	01155H
	DW	09bfaH
	DW	08aceH
	DW	079d2H
	DW	06906H
	DW	05866H
	DW	047f2H
	DW	037aeH
	DW	02792H
	DW	0179eH
	DW	04e57H
_resmap	DB	00H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	05H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
CONST	ENDS
PUBLIC	_uprv_decNumberFromUInt32_56
PUBLIC	_uprv_decNumberFromInt32_56
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\i18n\decnumber.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _uprv_decNumberFromInt32_56
_TEXT	SEGMENT
_unsig$ = -8						; size = 4
_dn$ = 8						; size = 4
_in$ = 12						; size = 4
_uprv_decNumberFromInt32_56 PROC			; COMDAT
; Line 366
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 368
	cmp	DWORD PTR _in$[ebp], 0
	jl	SHORT $LN5@uprv_decNu
	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _unsig$[ebp], eax
; Line 369
	jmp	SHORT $LN4@uprv_decNu
$LN5@uprv_decNu:
; Line 370
	cmp	DWORD PTR _in$[ebp], -2147483648	; 80000000H
	jne	SHORT $LN3@uprv_decNu
	mov	DWORD PTR _unsig$[ebp], -2147483648	; 80000000H
	jmp	SHORT $LN4@uprv_decNu
$LN3@uprv_decNu:
; Line 371
	mov	eax, DWORD PTR _in$[ebp]
	neg	eax
	mov	DWORD PTR _unsig$[ebp], eax
$LN4@uprv_decNu:
; Line 374
	mov	eax, DWORD PTR _unsig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	push	ecx
	call	_uprv_decNumberFromUInt32_56
	add	esp, 8
; Line 375
	cmp	DWORD PTR _in$[ebp], 0
	jge	SHORT $LN1@uprv_decNu
	mov	eax, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [eax+8], 128			; 00000080H
$LN1@uprv_decNu:
; Line 376
	mov	eax, DWORD PTR _dn$[ebp]
; Line 377
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberFromInt32_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberZero_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberFromUInt32_56
_TEXT	SEGMENT
_up$ = -8						; size = 4
_dn$ = 8						; size = 4
_uin$ = 12						; size = 4
_uprv_decNumberFromUInt32_56 PROC			; COMDAT
; Line 379
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 381
	mov	eax, DWORD PTR _dn$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 382
	cmp	DWORD PTR _uin$[ebp], 0
	jne	SHORT $LN4@uprv_decNu@2
	mov	eax, DWORD PTR _dn$[ebp]
	jmp	SHORT $LN5@uprv_decNu@2
$LN4@uprv_decNu@2:
; Line 383
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _up$[ebp], eax
	jmp	SHORT $LN3@uprv_decNu@2
$LN2@uprv_decNu@2:
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
$LN3@uprv_decNu@2:
	cmp	DWORD PTR _uin$[ebp], 0
	jbe	SHORT $LN1@uprv_decNu@2
; Line 384
	mov	eax, DWORD PTR _uin$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	eax, DWORD PTR _up$[ebp]
	mov	BYTE PTR [eax], dl
; Line 385
	mov	eax, DWORD PTR _uin$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	DWORD PTR _uin$[ebp], eax
; Line 386
	jmp	SHORT $LN2@uprv_decNu@2
$LN1@uprv_decNu@2:
; Line 387
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	ecx, DWORD PTR _up$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _dn$[ebp]
	add	edx, 9
	push	edx
	call	_decGetDigits
	add	esp, 8
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 388
	mov	eax, DWORD PTR _dn$[ebp]
$LN5@uprv_decNu@2:
; Line 389
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberFromUInt32_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberToInt32_56
EXTRN	_uprv_decContextSetStatus_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberToInt32_56
_TEXT	SEGMENT
_i$9742 = -56						; size = 4
_lo$9734 = -44						; size = 4
_hi$9733 = -32						; size = 4
_up$9732 = -20						; size = 4
_d$9731 = -8						; size = 4
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_uprv_decNumberToInt32_56 PROC				; COMDAT
; Line 401
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 407
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN10@uprv_decNu@3
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 10			; 0000000aH
	jg	SHORT $LN10@uprv_decNu@3
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN11@uprv_decNu@3
$LN10@uprv_decNu@3:
; Line 408
	jmp	$LN9@uprv_decNu@3
$LN11@uprv_decNu@3:
; Line 411
	mov	DWORD PTR _hi$9733[ebp], 0
; Line 412
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _up$9732[ebp], eax
; Line 413
	mov	eax, DWORD PTR _up$9732[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _lo$9734[ebp], ecx
; Line 418
	mov	eax, DWORD PTR _up$9732[ebp]
	add	eax, 1
	mov	DWORD PTR _up$9732[ebp], eax
; Line 420
	mov	DWORD PTR _d$9731[ebp], 1
	jmp	SHORT $LN8@uprv_decNu@3
$LN7@uprv_decNu@3:
	mov	eax, DWORD PTR _up$9732[ebp]
	add	eax, 1
	mov	DWORD PTR _up$9732[ebp], eax
	mov	ecx, DWORD PTR _d$9731[ebp]
	add	ecx, 1
	mov	DWORD PTR _d$9731[ebp], ecx
$LN8@uprv_decNu@3:
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _d$9731[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN6@uprv_decNu@3
	mov	eax, DWORD PTR _up$9732[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _d$9731[ebp]
	imul	ecx, DWORD PTR _DECPOWERS[edx*4-4]
	add	ecx, DWORD PTR _hi$9733[ebp]
	mov	DWORD PTR _hi$9733[ebp], ecx
	jmp	SHORT $LN7@uprv_decNu@3
$LN6@uprv_decNu@3:
; Line 422
	cmp	DWORD PTR _hi$9733[ebp], 214748364	; 0cccccccH
	ja	SHORT $LN4@uprv_decNu@3
	cmp	DWORD PTR _hi$9733[ebp], 214748364	; 0cccccccH
	jne	SHORT $LN5@uprv_decNu@3
	cmp	DWORD PTR _lo$9734[ebp], 7
	jbe	SHORT $LN5@uprv_decNu@3
$LN4@uprv_decNu@3:
; Line 424
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN3@uprv_decNu@3
	cmp	DWORD PTR _hi$9733[ebp], 214748364	; 0cccccccH
	jne	SHORT $LN3@uprv_decNu@3
	cmp	DWORD PTR _lo$9734[ebp], 8
	jne	SHORT $LN3@uprv_decNu@3
	mov	eax, -2147483648			; 80000000H
	jmp	SHORT $LN12@uprv_decNu@3
$LN3@uprv_decNu@3:
; Line 427
	jmp	SHORT $LN9@uprv_decNu@3
$LN5@uprv_decNu@3:
; Line 428
	mov	eax, DWORD PTR _hi$9733[ebp]
	mov	ecx, DWORD PTR _lo$9734[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _hi$9733[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _i$9742[ebp], ecx
; Line 429
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN1@uprv_decNu@3
	mov	eax, DWORD PTR _i$9742[ebp]
	neg	eax
	jmp	SHORT $LN12@uprv_decNu@3
$LN1@uprv_decNu@3:
; Line 430
	mov	eax, DWORD PTR _i$9742[ebp]
	jmp	SHORT $LN12@uprv_decNu@3
$LN9@uprv_decNu@3:
; Line 433
	push	128					; 00000080H
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	call	_uprv_decContextSetStatus_56
	add	esp, 8
; Line 434
	xor	eax, eax
$LN12@uprv_decNu@3:
; Line 435
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberToInt32_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberToUInt32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberToUInt32_56
_TEXT	SEGMENT
_lo$9756 = -44						; size = 4
_hi$9755 = -32						; size = 4
_up$9754 = -20						; size = 4
_d$9753 = -8						; size = 4
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_uprv_decNumberToUInt32_56 PROC				; COMDAT
; Line 437
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 443
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN9@uprv_decNu@4
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 10			; 0000000aH
	jg	SHORT $LN9@uprv_decNu@4
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@uprv_decNu@4
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN10@uprv_decNu@4
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN9@uprv_decNu@4
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN9@uprv_decNu@4
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN10@uprv_decNu@4
$LN9@uprv_decNu@4:
; Line 444
	jmp	$LN7@uprv_decNu@4
$LN10@uprv_decNu@4:
; Line 447
	mov	DWORD PTR _hi$9755[ebp], 0
; Line 448
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _up$9754[ebp], eax
; Line 449
	mov	eax, DWORD PTR _up$9754[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _lo$9756[ebp], ecx
; Line 454
	mov	eax, DWORD PTR _up$9754[ebp]
	add	eax, 1
	mov	DWORD PTR _up$9754[ebp], eax
; Line 456
	mov	DWORD PTR _d$9753[ebp], 1
	jmp	SHORT $LN6@uprv_decNu@4
$LN5@uprv_decNu@4:
	mov	eax, DWORD PTR _up$9754[ebp]
	add	eax, 1
	mov	DWORD PTR _up$9754[ebp], eax
	mov	ecx, DWORD PTR _d$9753[ebp]
	add	ecx, 1
	mov	DWORD PTR _d$9753[ebp], ecx
$LN6@uprv_decNu@4:
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _d$9753[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN4@uprv_decNu@4
	mov	eax, DWORD PTR _up$9754[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _d$9753[ebp]
	imul	ecx, DWORD PTR _DECPOWERS[edx*4-4]
	add	ecx, DWORD PTR _hi$9755[ebp]
	mov	DWORD PTR _hi$9755[ebp], ecx
	jmp	SHORT $LN5@uprv_decNu@4
$LN4@uprv_decNu@4:
; Line 459
	cmp	DWORD PTR _hi$9755[ebp], 429496729	; 19999999H
	ja	SHORT $LN2@uprv_decNu@4
	cmp	DWORD PTR _hi$9755[ebp], 429496729	; 19999999H
	jne	SHORT $LN3@uprv_decNu@4
	cmp	DWORD PTR _lo$9756[ebp], 5
	jbe	SHORT $LN3@uprv_decNu@4
$LN2@uprv_decNu@4:
; Line 460
	jmp	SHORT $LN7@uprv_decNu@4
$LN3@uprv_decNu@4:
	mov	eax, DWORD PTR _hi$9755[ebp]
	mov	ecx, DWORD PTR _lo$9756[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _hi$9755[ebp]
	lea	eax, DWORD PTR [edx+eax*2]
	jmp	SHORT $LN11@uprv_decNu@4
$LN7@uprv_decNu@4:
; Line 462
	push	128					; 00000080H
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	call	_uprv_decContextSetStatus_56
	add	esp, 8
; Line 463
	xor	eax, eax
$LN11@uprv_decNu@4:
; Line 464
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberToUInt32_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberToString_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberToString_56
_TEXT	SEGMENT
_dn$ = 8						; size = 4
_string$ = 12						; size = 4
_uprv_decNumberToString_56 PROC				; COMDAT
; Line 480
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 481
	push	0
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	push	ecx
	call	_decToString
	add	esp, 12					; 0000000cH
; Line 482
	mov	eax, DWORD PTR _string$[ebp]
; Line 483
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberToString_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberToEngString_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberToEngString_56
_TEXT	SEGMENT
_dn$ = 8						; size = 4
_string$ = 12						; size = 4
_uprv_decNumberToEngString_56 PROC			; COMDAT
; Line 485
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 486
	push	1
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	push	ecx
	call	_decToString
	add	esp, 12					; 0000000cH
; Line 487
	mov	eax, DWORD PTR _string$[ebp]
; Line 488
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberToEngString_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_03OJHLLCGB@inf?$AA@			; `string'
PUBLIC	??_C@_03OEIAHPBN@INF?$AA@			; `string'
PUBLIC	??_C@_08CGODDKPM@infinity?$AA@			; `string'
PUBLIC	??_C@_08FJEPAENL@INFINITY?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberFromString_56
EXTRN	_uprv_free_56:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_03OJHLLCGB@inf?$AA@
CONST	SEGMENT
??_C@_03OJHLLCGB@inf?$AA@ DB 'inf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OEIAHPBN@INF?$AA@
CONST	SEGMENT
??_C@_03OEIAHPBN@INF?$AA@ DB 'INF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08CGODDKPM@infinity?$AA@
CONST	SEGMENT
??_C@_08CGODDKPM@infinity?$AA@ DB 'infinity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJEPAENL@INFINITY?$AA@
CONST	SEGMENT
??_C@_08FJEPAENL@INFINITY?$AA@ DB 'INFINITY', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _uprv_decNumberFromString_56
_TEXT	SEGMENT
tv249 = -436						; size = 4
_needbytes$9872 = -236					; size = 4
_firstexp$9841 = -224					; size = 4
_nege$9840 = -209					; size = 1
_status$ = -200						; size = 4
_residue$ = -188					; size = 4
_up$ = -176						; size = 4
_c$ = -164						; size = 4
_last$ = -152						; size = 4
_cfirst$ = -140						; size = 4
_dotchar$ = -128					; size = 4
_d$ = -116						; size = 4
_allocres$ = -104					; size = 4
_resbuff$ = -92						; size = 45
_res$ = -36						; size = 4
_bits$ = -21						; size = 1
_exponent$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_dn$ = 8						; size = 4
_chars$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberFromString_56 PROC			; COMDAT
; Line 511
	push	ebp
	mov	ebp, esp
	sub	esp, 436				; 000001b4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-436]
	mov	ecx, 109				; 0000006dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 512
	mov	DWORD PTR _exponent$[ebp], 0
; Line 513
	mov	BYTE PTR _bits$[ebp], 0
; Line 517
	mov	DWORD PTR _allocres$[ebp], 0
; Line 518
	mov	DWORD PTR _d$[ebp], 0
; Line 519
	mov	DWORD PTR _dotchar$[ebp], 0
; Line 520
	mov	eax, DWORD PTR _chars$[ebp]
	mov	DWORD PTR _cfirst$[ebp], eax
; Line 521
	mov	DWORD PTR _last$[ebp], 0
; Line 528
	mov	DWORD PTR _status$[ebp], 0
$LN74@uprv_decNu@5:
; Line 536
	mov	eax, DWORD PTR _chars$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN71@uprv_decNu@5
$LN70@uprv_decNu@5:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN71@uprv_decNu@5:
; Line 537
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN68@uprv_decNu@5
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN68@uprv_decNu@5
; Line 538
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _last$[ebp], eax
; Line 539
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, 1
	mov	DWORD PTR _d$[ebp], eax
; Line 540
	jmp	SHORT $LN70@uprv_decNu@5
$LN68@uprv_decNu@5:
; Line 542
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN67@uprv_decNu@5
	cmp	DWORD PTR _dotchar$[ebp], 0
	jne	SHORT $LN67@uprv_decNu@5
; Line 543
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _dotchar$[ebp], eax
; Line 544
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _cfirst$[ebp]
	jne	SHORT $LN66@uprv_decNu@5
	mov	eax, DWORD PTR _cfirst$[ebp]
	add	eax, 1
	mov	DWORD PTR _cfirst$[ebp], eax
$LN66@uprv_decNu@5:
; Line 545
	jmp	SHORT $LN70@uprv_decNu@5
$LN67@uprv_decNu@5:
; Line 546
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _chars$[ebp]
	jne	SHORT $LN65@uprv_decNu@5
; Line 547
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN64@uprv_decNu@5
; Line 548
	mov	eax, DWORD PTR _cfirst$[ebp]
	add	eax, 1
	mov	DWORD PTR _cfirst$[ebp], eax
; Line 549
	mov	BYTE PTR _bits$[ebp], 128		; 00000080H
; Line 550
	jmp	$LN70@uprv_decNu@5
$LN64@uprv_decNu@5:
; Line 551
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 43					; 0000002bH
	jne	SHORT $LN65@uprv_decNu@5
; Line 552
	mov	eax, DWORD PTR _cfirst$[ebp]
	add	eax, 1
	mov	DWORD PTR _cfirst$[ebp], eax
; Line 553
	jmp	$LN70@uprv_decNu@5
$LN65@uprv_decNu@5:
; Line 556
	jmp	SHORT $LN69@uprv_decNu@5
; Line 557
	jmp	$LN70@uprv_decNu@5
$LN69@uprv_decNu@5:
; Line 559
	cmp	DWORD PTR _last$[ebp], 0
	jne	$LN62@uprv_decNu@5
; Line 560
	mov	DWORD PTR _status$[ebp], 1
; Line 561
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN61@uprv_decNu@5
	jmp	$LN72@uprv_decNu@5
$LN61@uprv_decNu@5:
; Line 567
	cmp	DWORD PTR _dotchar$[ebp], 0
	je	SHORT $LN60@uprv_decNu@5
	jmp	$LN72@uprv_decNu@5
$LN60@uprv_decNu@5:
; Line 568
	mov	eax, DWORD PTR _dn$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 570
	push	OFFSET ??_C@_08FJEPAENL@INFINITY?$AA@
	push	OFFSET ??_C@_08CGODDKPM@infinity?$AA@
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_decBiStr
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN58@uprv_decNu@5
	push	OFFSET ??_C@_03OEIAHPBN@INF?$AA@
	push	OFFSET ??_C@_03OJHLLCGB@inf?$AA@
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_decBiStr
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN59@uprv_decNu@5
$LN58@uprv_decNu@5:
; Line 571
	movzx	eax, BYTE PTR _bits$[ebp]
	or	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [ecx+8], al
; Line 572
	mov	DWORD PTR _status$[ebp], 0
; Line 573
	jmp	$LN72@uprv_decNu@5
$LN59@uprv_decNu@5:
; Line 577
	movzx	eax, BYTE PTR _bits$[ebp]
	or	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [ecx+8], al
; Line 578
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 115				; 00000073H
	je	SHORT $LN56@uprv_decNu@5
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 83					; 00000053H
	jne	SHORT $LN57@uprv_decNu@5
$LN56@uprv_decNu@5:
; Line 579
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 580
	movzx	eax, BYTE PTR _bits$[ebp]
	or	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [ecx+8], al
$LN57@uprv_decNu@5:
; Line 582
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 110				; 0000006eH
	je	SHORT $LN55@uprv_decNu@5
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 78					; 0000004eH
	je	SHORT $LN55@uprv_decNu@5
	jmp	$LN72@uprv_decNu@5
$LN55@uprv_decNu@5:
; Line 583
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 584
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 97					; 00000061H
	je	SHORT $LN54@uprv_decNu@5
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 65					; 00000041H
	je	SHORT $LN54@uprv_decNu@5
	jmp	$LN72@uprv_decNu@5
$LN54@uprv_decNu@5:
; Line 585
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 586
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 110				; 0000006eH
	je	SHORT $LN53@uprv_decNu@5
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 78					; 0000004eH
	je	SHORT $LN53@uprv_decNu@5
	jmp	$LN72@uprv_decNu@5
$LN53@uprv_decNu@5:
; Line 587
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 590
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _cfirst$[ebp], eax
$LN52@uprv_decNu@5:
	mov	eax, DWORD PTR _cfirst$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN51@uprv_decNu@5
	mov	eax, DWORD PTR _cfirst$[ebp]
	add	eax, 1
	mov	DWORD PTR _cfirst$[ebp], eax
	jmp	SHORT $LN52@uprv_decNu@5
$LN51@uprv_decNu@5:
; Line 591
	mov	eax, DWORD PTR _cfirst$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN50@uprv_decNu@5
; Line 592
	mov	DWORD PTR _status$[ebp], 0
; Line 593
	jmp	$LN72@uprv_decNu@5
$LN50@uprv_decNu@5:
; Line 596
	mov	eax, DWORD PTR _cfirst$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN49@uprv_decNu@5
$LN48@uprv_decNu@5:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, 1
	mov	DWORD PTR _d$[ebp], ecx
$LN49@uprv_decNu@5:
; Line 597
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN45@uprv_decNu@5
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jle	SHORT $LN46@uprv_decNu@5
$LN45@uprv_decNu@5:
	jmp	SHORT $LN47@uprv_decNu@5
$LN46@uprv_decNu@5:
; Line 598
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _last$[ebp], eax
; Line 599
	jmp	SHORT $LN48@uprv_decNu@5
$LN47@uprv_decNu@5:
; Line 600
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN44@uprv_decNu@5
	jmp	$LN72@uprv_decNu@5
$LN44@uprv_decNu@5:
; Line 601
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	cmp	DWORD PTR _d$[ebp], ecx
	jle	SHORT $LN43@uprv_decNu@5
; Line 604
	mov	eax, DWORD PTR _set$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN42@uprv_decNu@5
	jmp	$LN72@uprv_decNu@5
$LN42@uprv_decNu@5:
; Line 605
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN43@uprv_decNu@5
	jmp	$LN72@uprv_decNu@5
$LN43@uprv_decNu@5:
; Line 608
	mov	DWORD PTR _status$[ebp], 0
; Line 609
	mov	eax, DWORD PTR _dn$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _bits$[ebp], cl
	jmp	$LN40@uprv_decNu@5
$LN62@uprv_decNu@5:
; Line 612
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN40@uprv_decNu@5
; Line 616
	mov	DWORD PTR _status$[ebp], 1
; Line 617
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 101				; 00000065H
	je	SHORT $LN38@uprv_decNu@5
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 69					; 00000045H
	je	SHORT $LN38@uprv_decNu@5
	jmp	$LN72@uprv_decNu@5
$LN38@uprv_decNu@5:
; Line 620
	mov	BYTE PTR _nege$9840[ebp], 0
; Line 621
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 622
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN37@uprv_decNu@5
	mov	BYTE PTR _nege$9840[ebp], 1
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN36@uprv_decNu@5
$LN37@uprv_decNu@5:
; Line 623
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 43					; 0000002bH
	jne	SHORT $LN36@uprv_decNu@5
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN36@uprv_decNu@5:
; Line 624
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN33@uprv_decNu@5
	jmp	$LN72@uprv_decNu@5
$LN33@uprv_decNu@5:
; Line 626
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN32@uprv_decNu@5
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN32@uprv_decNu@5
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN33@uprv_decNu@5
$LN32@uprv_decNu@5:
; Line 627
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _firstexp$9841[ebp], eax
	jmp	SHORT $LN31@uprv_decNu@5
$LN30@uprv_decNu@5:
; Line 628
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN31@uprv_decNu@5:
; Line 629
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN27@uprv_decNu@5
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jle	SHORT $LN28@uprv_decNu@5
$LN27@uprv_decNu@5:
	jmp	SHORT $LN29@uprv_decNu@5
$LN28@uprv_decNu@5:
; Line 630
	mov	eax, DWORD PTR _exponent$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _exponent$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _exponent$[ebp], edx
; Line 631
	jmp	SHORT $LN30@uprv_decNu@5
$LN29@uprv_decNu@5:
; Line 633
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN26@uprv_decNu@5
	jmp	$LN72@uprv_decNu@5
$LN26@uprv_decNu@5:
; Line 638
	mov	eax, DWORD PTR _firstexp$9841[ebp]
	add	eax, 10					; 0000000aH
	cmp	DWORD PTR _c$[ebp], eax
	jb	SHORT $LN25@uprv_decNu@5
; Line 639
	mov	eax, DWORD PTR _firstexp$9841[ebp]
	add	eax, 10					; 0000000aH
	cmp	DWORD PTR _c$[ebp], eax
	ja	SHORT $LN23@uprv_decNu@5
	mov	eax, DWORD PTR _firstexp$9841[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 49					; 00000031H
	jle	SHORT $LN25@uprv_decNu@5
$LN23@uprv_decNu@5:
	mov	DWORD PTR _exponent$[ebp], 1999999998	; 773593feH
$LN25@uprv_decNu@5:
; Line 642
	movzx	eax, BYTE PTR _nege$9840[ebp]
	test	eax, eax
	je	SHORT $LN22@uprv_decNu@5
	mov	eax, DWORD PTR _exponent$[ebp]
	neg	eax
	mov	DWORD PTR _exponent$[ebp], eax
$LN22@uprv_decNu@5:
; Line 643
	mov	DWORD PTR _status$[ebp], 0
$LN40@uprv_decNu@5:
; Line 650
	mov	eax, DWORD PTR _cfirst$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN21@uprv_decNu@5
; Line 651
	mov	eax, DWORD PTR _cfirst$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN20@uprv_decNu@5
$LN19@uprv_decNu@5:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _cfirst$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cfirst$[ebp], ecx
$LN20@uprv_decNu@5:
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _last$[ebp]
	jae	SHORT $LN21@uprv_decNu@5
; Line 652
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN17@uprv_decNu@5
	jmp	SHORT $LN19@uprv_decNu@5
$LN17@uprv_decNu@5:
; Line 653
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	je	SHORT $LN16@uprv_decNu@5
	jmp	SHORT $LN21@uprv_decNu@5
$LN16@uprv_decNu@5:
; Line 654
	mov	eax, DWORD PTR _d$[ebp]
	sub	eax, 1
	mov	DWORD PTR _d$[ebp], eax
; Line 655
	jmp	SHORT $LN19@uprv_decNu@5
$LN21@uprv_decNu@5:
; Line 666
	cmp	DWORD PTR _dotchar$[ebp], 0
	je	SHORT $LN15@uprv_decNu@5
	mov	eax, DWORD PTR _dotchar$[ebp]
	cmp	eax, DWORD PTR _last$[ebp]
	jae	SHORT $LN15@uprv_decNu@5
; Line 667
	mov	eax, DWORD PTR _last$[ebp]
	sub	eax, DWORD PTR _dotchar$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _exponent$[ebp], ecx
$LN15@uprv_decNu@5:
; Line 672
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jg	SHORT $LN14@uprv_decNu@5
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _res$[ebp], eax
; Line 673
	jmp	SHORT $LN13@uprv_decNu@5
$LN14@uprv_decNu@5:
; Line 674
	cmp	DWORD PTR _d$[ebp], 49			; 00000031H
	jg	SHORT $LN77@uprv_decNu@5
	mov	eax, DWORD PTR _d$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv249[ebp], ecx
	jmp	SHORT $LN78@uprv_decNu@5
$LN77@uprv_decNu@5:
	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR tv249[ebp], edx
$LN78@uprv_decNu@5:
	mov	eax, DWORD PTR tv249[ebp]
	mov	DWORD PTR _needbytes$9872[ebp], eax
; Line 675
	lea	eax, DWORD PTR _resbuff$[ebp]
	mov	DWORD PTR _res$[ebp], eax
; Line 676
	cmp	DWORD PTR _needbytes$9872[ebp], 45	; 0000002dH
	jle	SHORT $LN13@uprv_decNu@5
; Line 677
	mov	eax, DWORD PTR _needbytes$9872[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocres$[ebp], eax
; Line 678
	cmp	DWORD PTR _allocres$[ebp], 0
	jne	SHORT $LN11@uprv_decNu@5
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _status$[ebp], eax
	jmp	$LN72@uprv_decNu@5
$LN11@uprv_decNu@5:
; Line 679
	mov	eax, DWORD PTR _allocres$[ebp]
	mov	DWORD PTR _res$[ebp], eax
$LN13@uprv_decNu@5:
; Line 705
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR _up$[ebp], eax
; Line 706
	mov	eax, DWORD PTR _last$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN10@uprv_decNu@5
$LN9@uprv_decNu@5:
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN10@uprv_decNu@5:
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _cfirst$[ebp]
	jb	SHORT $LN8@uprv_decNu@5
; Line 707
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN7@uprv_decNu@5
	jmp	SHORT $LN9@uprv_decNu@5
$LN7@uprv_decNu@5:
; Line 708
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _up$[ebp]
	mov	BYTE PTR [edx], cl
; Line 709
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
; Line 710
	jmp	SHORT $LN9@uprv_decNu@5
$LN8@uprv_decNu@5:
; Line 713
	mov	eax, DWORD PTR _dn$[ebp]
	mov	cl, BYTE PTR _bits$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 714
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 715
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 718
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN6@uprv_decNu@5
; Line 719
	mov	DWORD PTR _residue$[ebp], 0
; Line 720
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dn$[ebp]
	push	edx
	call	_decSetCoeff
	add	esp, 24					; 00000018H
; Line 722
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _dn$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 724
	jmp	SHORT $LN73@uprv_decNu@5
$LN6@uprv_decNu@5:
; Line 727
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _set$[ebp]
	mov	eax, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [edx+8]
	sub	edx, DWORD PTR [eax]
	cmp	ecx, edx
	jl	SHORT $LN3@uprv_decNu@5
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _set$[ebp]
	mov	eax, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [edx+4]
	sub	edx, DWORD PTR [eax]
	cmp	ecx, edx
	jle	SHORT $LN73@uprv_decNu@5
$LN3@uprv_decNu@5:
; Line 728
	mov	DWORD PTR _residue$[ebp], 0
; Line 729
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _dn$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
$LN73@uprv_decNu@5:
; Line 733
	xor	eax, eax
	jne	$LN74@uprv_decNu@5
$LN72@uprv_decNu@5:
; Line 735
	cmp	DWORD PTR _allocres$[ebp], 0
	je	SHORT $LN2@uprv_decNu@5
	mov	eax, DWORD PTR _allocres$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@uprv_decNu@5:
; Line 736
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@5
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dn$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@5:
; Line 737
	mov	eax, DWORD PTR _dn$[ebp]
; Line 738
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN83@uprv_decNu@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 436				; 000001b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN83@uprv_decNu@5:
	DD	3
	DD	$LN82@uprv_decNu@5
$LN82@uprv_decNu@5:
	DD	-92					; ffffffa4H
	DD	45					; 0000002dH
	DD	$LN79@uprv_decNu@5
	DD	-188					; ffffff44H
	DD	4
	DD	$LN80@uprv_decNu@5
	DD	-200					; ffffff38H
	DD	4
	DD	$LN81@uprv_decNu@5
$LN81@uprv_decNu@5:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN80@uprv_decNu@5:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN79@uprv_decNu@5:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_uprv_decNumberFromString_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberAbs_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberAbs_56
_TEXT	SEGMENT
_status$ = -32						; size = 4
_dzero$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberAbs_56 PROC				; COMDAT
; Line 760
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 762
	mov	DWORD PTR _status$[ebp], 0
; Line 768
	lea	eax, DWORD PTR _dzero$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 769
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dzero$[ebp+4], ecx
; Line 770
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	and	edx, 128				; 00000080H
	push	edx
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dzero$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 771
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@6
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@6:
; Line 775
	mov	eax, DWORD PTR _res$[ebp]
; Line 776
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@uprv_decNu@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@uprv_decNu@6:
	DD	2
	DD	$LN6@uprv_decNu@6
$LN6@uprv_decNu@6:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN4@uprv_decNu@6
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@uprv_decNu@6
$LN5@uprv_decNu@6:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN4@uprv_decNu@6:
	DB	100					; 00000064H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
_uprv_decNumberAbs_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberAdd_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberAdd_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberAdd_56 PROC				; COMDAT
; Line 792
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 793
	mov	DWORD PTR _status$[ebp], 0
; Line 794
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 795
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@7
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@7:
; Line 799
	mov	eax, DWORD PTR _res$[ebp]
; Line 800
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@7
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@7:
	DD	1
	DD	$LN5@uprv_decNu@7
$LN5@uprv_decNu@7:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@7
$LN4@uprv_decNu@7:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberAdd_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberAnd_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberAnd_56
_TEXT	SEGMENT
tv151 = -328						; size = 4
tv143 = -328						; size = 4
tv135 = -328						; size = 4
tv95 = -328						; size = 4
_j$9944 = -128						; size = 4
_i$9943 = -116						; size = 4
_b$9937 = -101						; size = 1
_a$9936 = -89						; size = 1
_msudigs$ = -80						; size = 4
_msuc$ = -68						; size = 4
_uc$ = -56						; size = 4
_msub$ = -44						; size = 4
_msua$ = -32						; size = 4
_ub$ = -20						; size = 4
_ua$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberAnd_56 PROC				; COMDAT
; Line 818
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 828
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN15@uprv_decNu@8
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN15@uprv_decNu@8
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	jne	SHORT $LN15@uprv_decNu@8
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN15@uprv_decNu@8
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN15@uprv_decNu@8
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN16@uprv_decNu@8
$LN15@uprv_decNu@8:
; Line 829
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decStatus
	add	esp, 12					; 0000000cH
; Line 830
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN17@uprv_decNu@8
$LN16@uprv_decNu@8:
; Line 834
	mov	eax, DWORD PTR _lhs$[ebp]
	add	eax, 9
	mov	DWORD PTR _ua$[ebp], eax
; Line 835
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 9
	mov	DWORD PTR _ub$[ebp], eax
; Line 836
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	mov	DWORD PTR _uc$[ebp], eax
; Line 837
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN19@uprv_decNu@8
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN20@uprv_decNu@8
$LN19@uprv_decNu@8:
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv95[ebp], edx
$LN20@uprv_decNu@8:
	mov	eax, DWORD PTR tv95[ebp]
	mov	ecx, DWORD PTR _ua$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msua$[ebp], edx
; Line 838
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN21@uprv_decNu@8
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN22@uprv_decNu@8
$LN21@uprv_decNu@8:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv135[ebp], edx
$LN22@uprv_decNu@8:
	mov	eax, DWORD PTR tv135[ebp]
	mov	ecx, DWORD PTR _ub$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msub$[ebp], edx
; Line 839
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN23@uprv_decNu@8
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN24@uprv_decNu@8
$LN23@uprv_decNu@8:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv143[ebp], edx
$LN24@uprv_decNu@8:
	mov	eax, DWORD PTR tv143[ebp]
	mov	ecx, DWORD PTR _uc$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msuc$[ebp], edx
; Line 840
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN25@uprv_decNu@8
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv151[ebp], eax
	jmp	SHORT $LN26@uprv_decNu@8
$LN25@uprv_decNu@8:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv151[ebp], edx
$LN26@uprv_decNu@8:
	mov	eax, DWORD PTR tv151[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	DWORD PTR _msudigs$[ebp], edx
	jmp	SHORT $LN14@uprv_decNu@8
$LN13@uprv_decNu@8:
; Line 841
	mov	eax, DWORD PTR _ua$[ebp]
	add	eax, 1
	mov	DWORD PTR _ua$[ebp], eax
	mov	ecx, DWORD PTR _ub$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ub$[ebp], ecx
	mov	edx, DWORD PTR _uc$[ebp]
	add	edx, 1
	mov	DWORD PTR _uc$[ebp], edx
$LN14@uprv_decNu@8:
	mov	eax, DWORD PTR _uc$[ebp]
	cmp	eax, DWORD PTR _msuc$[ebp]
	ja	$LN12@uprv_decNu@8
; Line 843
	mov	eax, DWORD PTR _ua$[ebp]
	cmp	eax, DWORD PTR _msua$[ebp]
	jbe	SHORT $LN11@uprv_decNu@8
	mov	BYTE PTR _a$9936[ebp], 0
	jmp	SHORT $LN10@uprv_decNu@8
$LN11@uprv_decNu@8:
; Line 844
	mov	eax, DWORD PTR _ua$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _a$9936[ebp], cl
$LN10@uprv_decNu@8:
; Line 845
	mov	eax, DWORD PTR _ub$[ebp]
	cmp	eax, DWORD PTR _msub$[ebp]
	jbe	SHORT $LN9@uprv_decNu@8
	mov	BYTE PTR _b$9937[ebp], 0
	jmp	SHORT $LN8@uprv_decNu@8
$LN9@uprv_decNu@8:
; Line 846
	mov	eax, DWORD PTR _ub$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$9937[ebp], cl
$LN8@uprv_decNu@8:
; Line 847
	mov	eax, DWORD PTR _uc$[ebp]
	mov	BYTE PTR [eax], 0
; Line 848
	movzx	eax, BYTE PTR _a$9936[ebp]
	movzx	ecx, BYTE PTR _b$9937[ebp]
	or	eax, ecx
	je	$LN7@uprv_decNu@8
; Line 850
	mov	eax, DWORD PTR _uc$[ebp]
	mov	BYTE PTR [eax], 0
; Line 852
	mov	DWORD PTR _i$9943[ebp], 0
	jmp	SHORT $LN6@uprv_decNu@8
$LN5@uprv_decNu@8:
	mov	eax, DWORD PTR _i$9943[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9943[ebp], eax
$LN6@uprv_decNu@8:
	cmp	DWORD PTR _i$9943[ebp], 1
	jge	$LN7@uprv_decNu@8
; Line 853
	movzx	eax, BYTE PTR _a$9936[ebp]
	movzx	ecx, BYTE PTR _b$9937[ebp]
	and	eax, ecx
	and	eax, 1
	je	SHORT $LN3@uprv_decNu@8
	mov	eax, DWORD PTR _uc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$9943[ebp]
	movzx	eax, BYTE PTR _DECPOWERS[edx*4]
	add	ecx, eax
	mov	edx, DWORD PTR _uc$[ebp]
	mov	BYTE PTR [edx], cl
$LN3@uprv_decNu@8:
; Line 854
	movzx	eax, BYTE PTR _a$9936[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _j$9944[ebp], edx
; Line 855
	movzx	eax, BYTE PTR _a$9936[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	BYTE PTR _a$9936[ebp], al
; Line 856
	movzx	eax, BYTE PTR _b$9937[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	or	edx, DWORD PTR _j$9944[ebp]
	mov	DWORD PTR _j$9944[ebp], edx
; Line 857
	movzx	eax, BYTE PTR _b$9937[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	BYTE PTR _b$9937[ebp], al
; Line 858
	cmp	DWORD PTR _j$9944[ebp], 1
	jle	SHORT $LN2@uprv_decNu@8
; Line 859
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decStatus
	add	esp, 12					; 0000000cH
; Line 860
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN17@uprv_decNu@8
$LN2@uprv_decNu@8:
; Line 862
	mov	eax, DWORD PTR _uc$[ebp]
	cmp	eax, DWORD PTR _msuc$[ebp]
	jne	SHORT $LN1@uprv_decNu@8
	mov	eax, DWORD PTR _msudigs$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$9943[ebp], eax
	jne	SHORT $LN1@uprv_decNu@8
	jmp	SHORT $LN7@uprv_decNu@8
$LN1@uprv_decNu@8:
; Line 863
	jmp	$LN5@uprv_decNu@8
$LN7@uprv_decNu@8:
; Line 865
	jmp	$LN13@uprv_decNu@8
$LN12@uprv_decNu@8:
; Line 867
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	mov	ecx, DWORD PTR _uc$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	add	edx, 9
	push	edx
	call	_decGetDigits
	add	esp, 8
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 868
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 869
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 0
; Line 870
	mov	eax, DWORD PTR _res$[ebp]
$LN17@uprv_decNu@8:
; Line 871
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberAnd_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberCompare_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberCompare_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberCompare_56 PROC				; COMDAT
; Line 886
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 887
	mov	DWORD PTR _status$[ebp], 0
; Line 888
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 889
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@9
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@9:
; Line 890
	mov	eax, DWORD PTR _res$[ebp]
; Line 891
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@9
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@9:
	DD	1
	DD	$LN5@uprv_decNu@9
$LN5@uprv_decNu@9:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@9
$LN4@uprv_decNu@9:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberCompare_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberCompareSignal_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberCompareSignal_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberCompareSignal_56 PROC			; COMDAT
; Line 906
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 907
	mov	DWORD PTR _status$[ebp], 0
; Line 908
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	6
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 909
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@10
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@10:
; Line 910
	mov	eax, DWORD PTR _res$[ebp]
; Line 911
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@10
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@10:
	DD	1
	DD	$LN5@uprv_decNu@10
$LN5@uprv_decNu@10:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@10
$LN4@uprv_decNu@10:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberCompareSignal_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberCompareTotal_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberCompareTotal_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberCompareTotal_56 PROC			; COMDAT
; Line 927
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 928
	mov	DWORD PTR _status$[ebp], 0
; Line 929
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 930
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@11
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@11:
; Line 931
	mov	eax, DWORD PTR _res$[ebp]
; Line 932
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@11
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@11:
	DD	1
	DD	$LN5@uprv_decNu@11
$LN5@uprv_decNu@11:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@11
$LN4@uprv_decNu@11:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberCompareTotal_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberCopy_56
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberCompareTotalMag_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberCompareTotalMag_56
_TEXT	SEGMENT
tv129 = -384						; size = 4
tv73 = -384						; size = 4
_b$ = -184						; size = 4
_a$ = -172						; size = 4
_allocbufb$ = -160					; size = 4
_bufb$ = -148						; size = 48
_allocbufa$ = -92					; size = 4
_bufa$ = -80						; size = 48
_needbytes$ = -24					; size = 4
_status$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberCompareTotalMag_56 PROC			; COMDAT
; Line 948
	push	ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 949
	mov	DWORD PTR _status$[ebp], 0
; Line 952
	mov	DWORD PTR _allocbufa$[ebp], 0
; Line 954
	mov	DWORD PTR _allocbufb$[ebp], 0
$LN12@uprv_decNu@12:
; Line 963
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	$LN9@uprv_decNu@12
; Line 964
	lea	eax, DWORD PTR _bufa$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 965
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN15@uprv_decNu@12
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN16@uprv_decNu@12
$LN15@uprv_decNu@12:
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv73[ebp], edx
$LN16@uprv_decNu@12:
	mov	eax, DWORD PTR tv73[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 966
	cmp	DWORD PTR _needbytes$[ebp], 48		; 00000030H
	jbe	SHORT $LN8@uprv_decNu@12
; Line 967
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbufa$[ebp], eax
; Line 968
	cmp	DWORD PTR _allocbufa$[ebp], 0
	jne	SHORT $LN7@uprv_decNu@12
; Line 969
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _status$[ebp], eax
; Line 970
	jmp	$LN10@uprv_decNu@12
$LN7@uprv_decNu@12:
; Line 971
	mov	eax, DWORD PTR _allocbufa$[ebp]
	mov	DWORD PTR _a$[ebp], eax
$LN8@uprv_decNu@12:
; Line 973
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 974
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _a$[ebp]
	mov	BYTE PTR [edx+8], cl
; Line 975
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _lhs$[ebp], eax
$LN9@uprv_decNu@12:
; Line 977
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	$LN6@uprv_decNu@12
; Line 978
	lea	eax, DWORD PTR _bufb$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 979
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN17@uprv_decNu@12
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN18@uprv_decNu@12
$LN17@uprv_decNu@12:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv129[ebp], edx
$LN18@uprv_decNu@12:
	mov	eax, DWORD PTR tv129[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 980
	cmp	DWORD PTR _needbytes$[ebp], 48		; 00000030H
	jbe	SHORT $LN5@uprv_decNu@12
; Line 981
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbufb$[ebp], eax
; Line 982
	cmp	DWORD PTR _allocbufb$[ebp], 0
	jne	SHORT $LN4@uprv_decNu@12
; Line 983
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _status$[ebp], eax
; Line 984
	jmp	SHORT $LN10@uprv_decNu@12
$LN4@uprv_decNu@12:
; Line 985
	mov	eax, DWORD PTR _allocbufb$[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN5@uprv_decNu@12:
; Line 987
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 988
	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [edx+8], cl
; Line 989
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _rhs$[ebp], eax
$LN6@uprv_decNu@12:
; Line 991
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 992
	xor	eax, eax
	jne	$LN12@uprv_decNu@12
$LN10@uprv_decNu@12:
; Line 994
	cmp	DWORD PTR _allocbufa$[ebp], 0
	je	SHORT $LN3@uprv_decNu@12
	mov	eax, DWORD PTR _allocbufa$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN3@uprv_decNu@12:
; Line 995
	cmp	DWORD PTR _allocbufb$[ebp], 0
	je	SHORT $LN2@uprv_decNu@12
	mov	eax, DWORD PTR _allocbufb$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@uprv_decNu@12:
; Line 996
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@12
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@12:
; Line 997
	mov	eax, DWORD PTR _res$[ebp]
; Line 998
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@uprv_decNu@12
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN23@uprv_decNu@12:
	DD	3
	DD	$LN22@uprv_decNu@12
$LN22@uprv_decNu@12:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN19@uprv_decNu@12
	DD	-80					; ffffffb0H
	DD	48					; 00000030H
	DD	$LN20@uprv_decNu@12
	DD	-148					; ffffff6cH
	DD	48					; 00000030H
	DD	$LN21@uprv_decNu@12
$LN21@uprv_decNu@12:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	98					; 00000062H
	DB	0
$LN20@uprv_decNu@12:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	0
$LN19@uprv_decNu@12:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberCompareTotalMag_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberDivide_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberDivide_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberDivide_56 PROC				; COMDAT
; Line 1013
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1014
	mov	DWORD PTR _status$[ebp], 0
; Line 1015
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decDivideOp
	add	esp, 24					; 00000018H
; Line 1016
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@13
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@13:
; Line 1020
	mov	eax, DWORD PTR _res$[ebp]
; Line 1021
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@13
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@uprv_decNu@13:
	DD	1
	DD	$LN5@uprv_decNu@13
$LN5@uprv_decNu@13:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@13
$LN4@uprv_decNu@13:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberDivide_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberDivideInteger_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberDivideInteger_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberDivideInteger_56 PROC			; COMDAT
; Line 1036
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1037
	mov	DWORD PTR _status$[ebp], 0
; Line 1038
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decDivideOp
	add	esp, 24					; 00000018H
; Line 1039
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@14
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@14:
; Line 1040
	mov	eax, DWORD PTR _res$[ebp]
; Line 1041
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@14
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@14:
	DD	1
	DD	$LN5@uprv_decNu@14
$LN5@uprv_decNu@14:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@14
$LN4@uprv_decNu@14:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberDivideInteger_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberExp_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberExp_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberExp_56 PROC				; COMDAT
; Line 1069
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1070
	mov	DWORD PTR _status$[ebp], 0
; Line 1083
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	call	_decCheckMath
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@uprv_decNu@15
$LN4@uprv_decNu@15:
; Line 1094
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decExpOp
	add	esp, 16					; 00000010H
; Line 1095
	xor	eax, eax
	jne	SHORT $LN4@uprv_decNu@15
$LN5@uprv_decNu@15:
; Line 1101
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@15
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@15:
; Line 1105
	mov	eax, DWORD PTR _res$[ebp]
; Line 1106
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@uprv_decNu@15
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@uprv_decNu@15:
	DD	1
	DD	$LN9@uprv_decNu@15
$LN9@uprv_decNu@15:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@uprv_decNu@15
$LN8@uprv_decNu@15:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberExp_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberFMA_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberFMA_56
_TEXT	SEGMENT
tv130 = -396						; size = 4
_dzero$ = -196						; size = 12
_acc$ = -176						; size = 4
_allocbufa$ = -164					; size = 4
_bufa$ = -152						; size = 84
_needbytes$ = -60					; size = 4
_dcmul$ = -48						; size = 28
_status$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_fhs$ = 20						; size = 4
_set$ = 24						; size = 4
_uprv_decNumberFMA_56 PROC				; COMDAT
; Line 1126
	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1127
	mov	DWORD PTR _status$[ebp], 0
; Line 1131
	mov	DWORD PTR _allocbufa$[ebp], 0
$LN13@uprv_decNu@16:
; Line 1149
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN8@uprv_decNu@16
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lhs$[ebp]
	push	edx
	call	_decCheckMath
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN9@uprv_decNu@16
$LN8@uprv_decNu@16:
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN7@uprv_decNu@16
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	call	_decCheckMath
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN9@uprv_decNu@16
$LN7@uprv_decNu@16:
	mov	eax, DWORD PTR _fhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN10@uprv_decNu@16
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fhs$[ebp]
	push	edx
	call	_decCheckMath
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN10@uprv_decNu@16
$LN9@uprv_decNu@16:
	jmp	$LN11@uprv_decNu@16
$LN10@uprv_decNu@16:
; Line 1151
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _dcmul$[ebp]
	rep movsd
; Line 1152
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _rhs$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _dcmul$[ebp], ecx
; Line 1154
	mov	DWORD PTR _dcmul$[ebp+4], 999999999	; 3b9ac9ffH
; Line 1155
	mov	DWORD PTR _dcmul$[ebp+8], -999999999	; c4653601H
; Line 1157
	lea	eax, DWORD PTR _bufa$[ebp]
	mov	DWORD PTR _acc$[ebp], eax
; Line 1158
	cmp	DWORD PTR _dcmul$[ebp], 49		; 00000031H
	jg	SHORT $LN16@uprv_decNu@16
	mov	eax, DWORD PTR _dcmul$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv130[ebp], ecx
	jmp	SHORT $LN17@uprv_decNu@16
$LN16@uprv_decNu@16:
	mov	edx, DWORD PTR _dcmul$[ebp]
	mov	DWORD PTR tv130[ebp], edx
$LN17@uprv_decNu@16:
	mov	eax, DWORD PTR tv130[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 1159
	cmp	DWORD PTR _needbytes$[ebp], 84		; 00000054H
	jbe	SHORT $LN6@uprv_decNu@16
; Line 1160
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbufa$[ebp], eax
; Line 1161
	cmp	DWORD PTR _allocbufa$[ebp], 0
	jne	SHORT $LN5@uprv_decNu@16
; Line 1162
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _status$[ebp], eax
; Line 1163
	jmp	$LN11@uprv_decNu@16
$LN5@uprv_decNu@16:
; Line 1164
	mov	eax, DWORD PTR _allocbufa$[ebp]
	mov	DWORD PTR _acc$[ebp], eax
$LN6@uprv_decNu@16:
; Line 1168
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dcmul$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _acc$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 1175
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN4@uprv_decNu@16
; Line 1176
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 1073741824				; 40000000H
	jne	SHORT $LN3@uprv_decNu@16
; Line 1177
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 1178
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 32			; 00000020H
; Line 1179
	jmp	SHORT $LN11@uprv_decNu@16
$LN3@uprv_decNu@16:
; Line 1181
	lea	eax, DWORD PTR _dzero$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 1182
	lea	eax, DWORD PTR _dzero$[ebp]
	mov	DWORD PTR _fhs$[ebp], eax
$LN4@uprv_decNu@16:
; Line 1190
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _acc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 1191
	xor	eax, eax
	jne	$LN13@uprv_decNu@16
$LN11@uprv_decNu@16:
; Line 1193
	cmp	DWORD PTR _allocbufa$[ebp], 0
	je	SHORT $LN2@uprv_decNu@16
	mov	eax, DWORD PTR _allocbufa$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@uprv_decNu@16:
; Line 1194
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@16
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@16:
; Line 1198
	mov	eax, DWORD PTR _res$[ebp]
; Line 1199
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@uprv_decNu@16
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@uprv_decNu@16:
	DD	4
	DD	$LN22@uprv_decNu@16
$LN22@uprv_decNu@16:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN18@uprv_decNu@16
	DD	-48					; ffffffd0H
	DD	28					; 0000001cH
	DD	$LN19@uprv_decNu@16
	DD	-152					; ffffff68H
	DD	84					; 00000054H
	DD	$LN20@uprv_decNu@16
	DD	-196					; ffffff3cH
	DD	12					; 0000000cH
	DD	$LN21@uprv_decNu@16
$LN21@uprv_decNu@16:
	DB	100					; 00000064H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
$LN20@uprv_decNu@16:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	0
$LN19@uprv_decNu@16:
	DB	100					; 00000064H
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	0
$LN18@uprv_decNu@16:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberFMA_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberInvert_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberInvert_56
_TEXT	SEGMENT
tv132 = -292						; size = 4
tv92 = -292						; size = 4
tv84 = -292						; size = 4
_j$10126 = -92						; size = 4
_i$10125 = -80						; size = 4
_a$10124 = -65						; size = 1
_msudigs$ = -56						; size = 4
_msuc$ = -44						; size = 4
_uc$ = -32						; size = 4
_msua$ = -20						; size = 4
_ua$ = -8						; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberInvert_56 PROC				; COMDAT
; Line 1216
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1224
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN12@uprv_decNu@17
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN12@uprv_decNu@17
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN13@uprv_decNu@17
$LN12@uprv_decNu@17:
; Line 1225
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decStatus
	add	esp, 12					; 0000000cH
; Line 1226
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN14@uprv_decNu@17
$LN13@uprv_decNu@17:
; Line 1229
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 9
	mov	DWORD PTR _ua$[ebp], eax
; Line 1230
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	mov	DWORD PTR _uc$[ebp], eax
; Line 1231
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN16@uprv_decNu@17
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN17@uprv_decNu@17
$LN16@uprv_decNu@17:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv84[ebp], edx
$LN17@uprv_decNu@17:
	mov	eax, DWORD PTR tv84[ebp]
	mov	ecx, DWORD PTR _ua$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msua$[ebp], edx
; Line 1232
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN18@uprv_decNu@17
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN19@uprv_decNu@17
$LN18@uprv_decNu@17:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv92[ebp], edx
$LN19@uprv_decNu@17:
	mov	eax, DWORD PTR tv92[ebp]
	mov	ecx, DWORD PTR _uc$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msuc$[ebp], edx
; Line 1233
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN20@uprv_decNu@17
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN21@uprv_decNu@17
$LN20@uprv_decNu@17:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv132[ebp], edx
$LN21@uprv_decNu@17:
	mov	eax, DWORD PTR tv132[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	DWORD PTR _msudigs$[ebp], edx
	jmp	SHORT $LN11@uprv_decNu@17
$LN10@uprv_decNu@17:
; Line 1234
	mov	eax, DWORD PTR _ua$[ebp]
	add	eax, 1
	mov	DWORD PTR _ua$[ebp], eax
	mov	ecx, DWORD PTR _uc$[ebp]
	add	ecx, 1
	mov	DWORD PTR _uc$[ebp], ecx
$LN11@uprv_decNu@17:
	mov	eax, DWORD PTR _uc$[ebp]
	cmp	eax, DWORD PTR _msuc$[ebp]
	ja	$LN9@uprv_decNu@17
; Line 1237
	mov	eax, DWORD PTR _ua$[ebp]
	cmp	eax, DWORD PTR _msua$[ebp]
	jbe	SHORT $LN8@uprv_decNu@17
	mov	BYTE PTR _a$10124[ebp], 0
	jmp	SHORT $LN7@uprv_decNu@17
$LN8@uprv_decNu@17:
; Line 1238
	mov	eax, DWORD PTR _ua$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _a$10124[ebp], cl
$LN7@uprv_decNu@17:
; Line 1239
	mov	eax, DWORD PTR _uc$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1242
	mov	DWORD PTR _i$10125[ebp], 0
	jmp	SHORT $LN6@uprv_decNu@17
$LN5@uprv_decNu@17:
	mov	eax, DWORD PTR _i$10125[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10125[ebp], eax
$LN6@uprv_decNu@17:
	cmp	DWORD PTR _i$10125[ebp], 1
	jge	SHORT $LN4@uprv_decNu@17
; Line 1243
	movzx	eax, BYTE PTR _a$10124[ebp]
	not	eax
	and	eax, 1
	je	SHORT $LN3@uprv_decNu@17
	mov	eax, DWORD PTR _uc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$10125[ebp]
	movzx	eax, BYTE PTR _DECPOWERS[edx*4]
	add	ecx, eax
	mov	edx, DWORD PTR _uc$[ebp]
	mov	BYTE PTR [edx], cl
$LN3@uprv_decNu@17:
; Line 1244
	movzx	eax, BYTE PTR _a$10124[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _j$10126[ebp], edx
; Line 1245
	movzx	eax, BYTE PTR _a$10124[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	BYTE PTR _a$10124[ebp], al
; Line 1246
	cmp	DWORD PTR _j$10126[ebp], 1
	jle	SHORT $LN2@uprv_decNu@17
; Line 1247
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decStatus
	add	esp, 12					; 0000000cH
; Line 1248
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN14@uprv_decNu@17
$LN2@uprv_decNu@17:
; Line 1250
	mov	eax, DWORD PTR _uc$[ebp]
	cmp	eax, DWORD PTR _msuc$[ebp]
	jne	SHORT $LN1@uprv_decNu@17
	mov	eax, DWORD PTR _msudigs$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$10125[ebp], eax
	jne	SHORT $LN1@uprv_decNu@17
	jmp	SHORT $LN4@uprv_decNu@17
$LN1@uprv_decNu@17:
; Line 1251
	jmp	$LN5@uprv_decNu@17
$LN4@uprv_decNu@17:
; Line 1252
	jmp	$LN10@uprv_decNu@17
$LN9@uprv_decNu@17:
; Line 1254
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	mov	ecx, DWORD PTR _uc$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	add	edx, 9
	push	edx
	call	_decGetDigits
	add	esp, 8
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1255
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1256
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 0
; Line 1257
	mov	eax, DWORD PTR _res$[ebp]
$LN14@uprv_decNu@17:
; Line 1258
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberInvert_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberLn_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberLn_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberLn_56 PROC				; COMDAT
; Line 1289
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1290
	mov	DWORD PTR _status$[ebp], 0
; Line 1301
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	call	_decCheckMath
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@uprv_decNu@18
$LN4@uprv_decNu@18:
; Line 1316
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decLnOp
	add	esp, 16					; 00000010H
; Line 1317
	xor	eax, eax
	jne	SHORT $LN4@uprv_decNu@18
$LN5@uprv_decNu@18:
; Line 1323
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@18
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@18:
; Line 1327
	mov	eax, DWORD PTR _res$[ebp]
; Line 1328
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@uprv_decNu@18
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@uprv_decNu@18:
	DD	1
	DD	$LN9@uprv_decNu@18
$LN9@uprv_decNu@18:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@uprv_decNu@18
$LN8@uprv_decNu@18:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberLn_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberCopyAbs_56
PUBLIC	_uprv_decNumberLogB_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberLogB_56
_TEXT	SEGMENT
_ae$10164 = -20						; size = 4
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberLogB_56 PROC				; COMDAT
; Line 1355
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1356
	mov	DWORD PTR _status$[ebp], 0
; Line 1363
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	je	SHORT $LN7@uprv_decNu@19
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decNaNs
	add	esp, 20					; 00000014H
	jmp	SHORT $LN6@uprv_decNu@19
$LN7@uprv_decNu@19:
; Line 1364
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN5@uprv_decNu@19
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopyAbs_56
	add	esp, 8
	jmp	SHORT $LN6@uprv_decNu@19
$LN5@uprv_decNu@19:
; Line 1365
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN3@uprv_decNu@19
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN3@uprv_decNu@19
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN3@uprv_decNu@19
; Line 1366
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 1367
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 192			; 000000c0H
; Line 1368
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 2
	mov	DWORD PTR _status$[ebp], eax
; Line 1370
	jmp	SHORT $LN6@uprv_decNu@19
$LN3@uprv_decNu@19:
; Line 1371
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _ae$10164[ebp], ecx
; Line 1372
	mov	eax, DWORD PTR _ae$10164[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberFromInt32_56
	add	esp, 8
$LN6@uprv_decNu@19:
; Line 1375
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@19
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@19:
; Line 1376
	mov	eax, DWORD PTR _res$[ebp]
; Line 1377
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@uprv_decNu@19
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@uprv_decNu@19:
	DD	1
	DD	$LN11@uprv_decNu@19
$LN11@uprv_decNu@19:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@uprv_decNu@19
$LN10@uprv_decNu@19:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberLogB_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberLog10_56
EXTRN	_uprv_decContextDefault_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberLog10_56
_TEXT	SEGMENT
tv186 = -548						; size = 4
tv149 = -548						; size = 4
tv142 = -548						; size = 4
_copystat$10205 = -348					; size = 4
_residue$10204 = -336					; size = 4
_aset$ = -324						; size = 28
_w$ = -288						; size = 4
_bufw$ = -276						; size = 24
_b$ = -244						; size = 4
_allocbufb$ = -232					; size = 4
_bufb$ = -220						; size = 60
_a$ = -152						; size = 4
_allocbufa$ = -140					; size = 4
_bufa$ = -128						; size = 60
_t$ = -60						; size = 4
_p$ = -48						; size = 4
_needbytes$ = -36					; size = 4
_ignore$ = -24						; size = 4
_status$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberLog10_56 PROC				; COMDAT
; Line 1415
	push	ebp
	mov	ebp, esp
	sub	esp, 548				; 00000224H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-548]
	mov	ecx, 137				; 00000089H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1416
	mov	DWORD PTR _status$[ebp], 0
	mov	DWORD PTR _ignore$[ebp], 0
; Line 1424
	mov	DWORD PTR _allocbufa$[ebp], 0
; Line 1425
	lea	eax, DWORD PTR _bufa$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 1427
	mov	DWORD PTR _allocbufb$[ebp], 0
; Line 1428
	lea	eax, DWORD PTR _bufb$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 1430
	lea	eax, DWORD PTR _bufw$[ebp]
	mov	DWORD PTR _w$[ebp], eax
; Line 1443
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	call	_decCheckMath
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN17@uprv_decNu@20
$LN16@uprv_decNu@20:
; Line 1459
	push	64					; 00000040H
	lea	eax, DWORD PTR _aset$[ebp]
	push	eax
	call	_uprv_decContextDefault_56
	add	esp, 8
; Line 1462
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 240				; 000000f0H
	jne	$LN13@uprv_decNu@20
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN12@uprv_decNu@20
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN12@uprv_decNu@20
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	$LN13@uprv_decNu@20
$LN12@uprv_decNu@20:
; Line 1463
	mov	DWORD PTR _residue$10204[ebp], 0
; Line 1464
	mov	DWORD PTR _copystat$10205[ebp], 0
; Line 1467
	mov	DWORD PTR _aset$[ebp], 1
; Line 1468
	lea	eax, DWORD PTR _copystat$10205[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$10204[ebp]
	push	ecx
	lea	edx, DWORD PTR _aset$[ebp]
	push	edx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 1470
	mov	eax, DWORD PTR _copystat$10205[ebp]
	and	eax, 32					; 00000020H
	jne	SHORT $LN13@uprv_decNu@20
	mov	eax, DWORD PTR _w$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	jne	SHORT $LN13@uprv_decNu@20
; Line 1475
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_uprv_decNumberFromInt32_56
	add	esp, 8
; Line 1476
	mov	DWORD PTR _residue$10204[ebp], 0
; Line 1477
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$10204[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 1478
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$10204[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 1479
	jmp	$LN17@uprv_decNu@20
$LN13@uprv_decNu@20:
; Line 1487
	mov	DWORD PTR _t$[ebp], 6
; Line 1490
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _set$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jle	SHORT $LN20@uprv_decNu@20
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR tv142[ebp], ecx
	jmp	SHORT $LN21@uprv_decNu@20
$LN20@uprv_decNu@20:
	mov	edx, DWORD PTR _set$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv142[ebp], eax
$LN21@uprv_decNu@20:
	mov	ecx, DWORD PTR tv142[ebp]
	add	ecx, 3
	mov	DWORD PTR _p$[ebp], ecx
; Line 1491
	cmp	DWORD PTR _p$[ebp], 49			; 00000031H
	jg	SHORT $LN22@uprv_decNu@20
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv149[ebp], ecx
	jmp	SHORT $LN23@uprv_decNu@20
$LN22@uprv_decNu@20:
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv149[ebp], edx
$LN23@uprv_decNu@20:
	mov	eax, DWORD PTR tv149[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 1492
	cmp	DWORD PTR _needbytes$[ebp], 60		; 0000003cH
	jbe	SHORT $LN10@uprv_decNu@20
; Line 1493
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbufa$[ebp], eax
; Line 1494
	cmp	DWORD PTR _allocbufa$[ebp], 0
	jne	SHORT $LN9@uprv_decNu@20
; Line 1495
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _status$[ebp], eax
; Line 1496
	jmp	$LN17@uprv_decNu@20
$LN9@uprv_decNu@20:
; Line 1497
	mov	eax, DWORD PTR _allocbufa$[ebp]
	mov	DWORD PTR _a$[ebp], eax
$LN10@uprv_decNu@20:
; Line 1499
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _aset$[ebp], eax
; Line 1500
	mov	DWORD PTR _aset$[ebp+4], 999999		; 000f423fH
; Line 1501
	mov	DWORD PTR _aset$[ebp+8], -999999	; fff0bdc1H
; Line 1502
	mov	BYTE PTR _aset$[ebp+24], 0
; Line 1503
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_decLnOp
	add	esp, 16					; 00000010H
; Line 1507
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 221				; 000000ddH
	je	SHORT $LN8@uprv_decNu@20
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 1073741824				; 40000000H
	jne	SHORT $LN8@uprv_decNu@20
	jmp	$LN17@uprv_decNu@20
$LN8@uprv_decNu@20:
; Line 1508
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN6@uprv_decNu@20
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN7@uprv_decNu@20
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN7@uprv_decNu@20
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN7@uprv_decNu@20
$LN6@uprv_decNu@20:
; Line 1509
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 1510
	jmp	$LN17@uprv_decNu@20
$LN7@uprv_decNu@20:
; Line 1513
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 3
	mov	DWORD PTR _p$[ebp], ecx
; Line 1514
	cmp	DWORD PTR _p$[ebp], 49			; 00000031H
	jg	SHORT $LN24@uprv_decNu@20
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv186[ebp], ecx
	jmp	SHORT $LN25@uprv_decNu@20
$LN24@uprv_decNu@20:
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv186[ebp], edx
$LN25@uprv_decNu@20:
	mov	eax, DWORD PTR tv186[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 1515
	cmp	DWORD PTR _needbytes$[ebp], 60		; 0000003cH
	jbe	SHORT $LN5@uprv_decNu@20
; Line 1516
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbufb$[ebp], eax
; Line 1517
	cmp	DWORD PTR _allocbufb$[ebp], 0
	jne	SHORT $LN4@uprv_decNu@20
; Line 1518
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _status$[ebp], eax
; Line 1519
	jmp	$LN17@uprv_decNu@20
$LN4@uprv_decNu@20:
; Line 1520
	mov	eax, DWORD PTR _allocbufb$[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN5@uprv_decNu@20:
; Line 1522
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 1524
	mov	eax, DWORD PTR _w$[ebp]
	mov	BYTE PTR [eax+10], 1
	mov	eax, DWORD PTR _w$[ebp]
	mov	BYTE PTR [eax+9], 0
; Line 1528
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 2
; Line 1530
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _aset$[ebp], eax
; Line 1531
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_decLnOp
	add	esp, 16					; 00000010H
; Line 1533
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _aset$[ebp], ecx
; Line 1534
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	128					; 00000080H
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decDivideOp
	add	esp, 24					; 00000018H
; Line 1535
	xor	eax, eax
	jne	$LN16@uprv_decNu@20
$LN17@uprv_decNu@20:
; Line 1537
	cmp	DWORD PTR _allocbufa$[ebp], 0
	je	SHORT $LN3@uprv_decNu@20
	mov	eax, DWORD PTR _allocbufa$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN3@uprv_decNu@20:
; Line 1538
	cmp	DWORD PTR _allocbufb$[ebp], 0
	je	SHORT $LN2@uprv_decNu@20
	mov	eax, DWORD PTR _allocbufb$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@uprv_decNu@20:
; Line 1543
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@20
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@20:
; Line 1547
	mov	eax, DWORD PTR _res$[ebp]
; Line 1548
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@uprv_decNu@20
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 548				; 00000224H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN35@uprv_decNu@20:
	DD	8
	DD	$LN34@uprv_decNu@20
$LN34@uprv_decNu@20:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN26@uprv_decNu@20
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN27@uprv_decNu@20
	DD	-128					; ffffff80H
	DD	60					; 0000003cH
	DD	$LN28@uprv_decNu@20
	DD	-220					; ffffff24H
	DD	60					; 0000003cH
	DD	$LN29@uprv_decNu@20
	DD	-276					; fffffeecH
	DD	24					; 00000018H
	DD	$LN30@uprv_decNu@20
	DD	-324					; fffffebcH
	DD	28					; 0000001cH
	DD	$LN31@uprv_decNu@20
	DD	-336					; fffffeb0H
	DD	4
	DD	$LN32@uprv_decNu@20
	DD	-348					; fffffea4H
	DD	4
	DD	$LN33@uprv_decNu@20
$LN33@uprv_decNu@20:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN32@uprv_decNu@20:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN31@uprv_decNu@20:
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN30@uprv_decNu@20:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	119					; 00000077H
	DB	0
$LN29@uprv_decNu@20:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	98					; 00000062H
	DB	0
$LN28@uprv_decNu@20:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	0
$LN27@uprv_decNu@20:
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
$LN26@uprv_decNu@20:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberLog10_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberMax_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberMax_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberMax_56 PROC				; COMDAT
; Line 1566
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1567
	mov	DWORD PTR _status$[ebp], 0
; Line 1568
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 1569
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@21
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@21:
; Line 1573
	mov	eax, DWORD PTR _res$[ebp]
; Line 1574
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@21
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@21:
	DD	1
	DD	$LN5@uprv_decNu@21
$LN5@uprv_decNu@21:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@21
$LN4@uprv_decNu@21:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberMax_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberMaxMag_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberMaxMag_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberMaxMag_56 PROC				; COMDAT
; Line 1589
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1590
	mov	DWORD PTR _status$[ebp], 0
; Line 1591
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	7
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 1592
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@22
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@22:
; Line 1596
	mov	eax, DWORD PTR _res$[ebp]
; Line 1597
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@22
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@22:
	DD	1
	DD	$LN5@uprv_decNu@22
$LN5@uprv_decNu@22:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@22
$LN4@uprv_decNu@22:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberMaxMag_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberMin_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberMin_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberMin_56 PROC				; COMDAT
; Line 1612
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1613
	mov	DWORD PTR _status$[ebp], 0
; Line 1614
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 1615
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@23
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@23:
; Line 1619
	mov	eax, DWORD PTR _res$[ebp]
; Line 1620
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@23
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@23:
	DD	1
	DD	$LN5@uprv_decNu@23
$LN5@uprv_decNu@23:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@23
$LN4@uprv_decNu@23:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberMin_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberMinMag_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberMinMag_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberMinMag_56 PROC				; COMDAT
; Line 1635
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1636
	mov	DWORD PTR _status$[ebp], 0
; Line 1637
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 1638
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@24
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@24:
; Line 1642
	mov	eax, DWORD PTR _res$[ebp]
; Line 1643
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@24
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@24:
	DD	1
	DD	$LN5@uprv_decNu@24
$LN5@uprv_decNu@24:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@24
$LN4@uprv_decNu@24:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberMinMag_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberMinus_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberMinus_56
_TEXT	SEGMENT
_status$ = -32						; size = 4
_dzero$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberMinus_56 PROC				; COMDAT
; Line 1660
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1662
	mov	DWORD PTR _status$[ebp], 0
; Line 1668
	lea	eax, DWORD PTR _dzero$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 1669
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dzero$[ebp+4], ecx
; Line 1670
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	lea	eax, DWORD PTR _dzero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 1671
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@25
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@25:
; Line 1675
	mov	eax, DWORD PTR _res$[ebp]
; Line 1676
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@uprv_decNu@25
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@uprv_decNu@25:
	DD	2
	DD	$LN6@uprv_decNu@25
$LN6@uprv_decNu@25:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN4@uprv_decNu@25
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@uprv_decNu@25
$LN5@uprv_decNu@25:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN4@uprv_decNu@25:
	DB	100					; 00000064H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
_uprv_decNumberMinus_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberNextMinus_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberNextMinus_56
_TEXT	SEGMENT
_status$ = -68						; size = 4
_workset$ = -56						; size = 28
_dtiny$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberNextMinus_56 PROC			; COMDAT
; Line 1690
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1692
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _workset$[ebp]
	rep movsd
; Line 1693
	mov	DWORD PTR _status$[ebp], 0
; Line 1699
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 64					; 00000040H
	jne	SHORT $LN2@uprv_decNu@26
; Line 1700
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decSetMaxValue
	add	esp, 8
; Line 1702
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN3@uprv_decNu@26
$LN2@uprv_decNu@26:
; Line 1704
	lea	eax, DWORD PTR _dtiny$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 1705
	mov	BYTE PTR _dtiny$[ebp+9], 1
; Line 1706
	mov	DWORD PTR _dtiny$[ebp+4], -1000000000	; c4653600H
; Line 1707
	mov	DWORD PTR _workset$[ebp+12], 6
; Line 1708
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	128					; 00000080H
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dtiny$[ebp]
	push	edx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 1709
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 1073741952				; 40000080H
	mov	DWORD PTR _status$[ebp], eax
; Line 1710
	je	SHORT $LN1@uprv_decNu@26
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@26:
; Line 1711
	mov	eax, DWORD PTR _res$[ebp]
$LN3@uprv_decNu@26:
; Line 1712
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@uprv_decNu@26
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@uprv_decNu@26:
	DD	3
	DD	$LN8@uprv_decNu@26
$LN8@uprv_decNu@26:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN5@uprv_decNu@26
	DD	-56					; ffffffc8H
	DD	28					; 0000001cH
	DD	$LN6@uprv_decNu@26
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN7@uprv_decNu@26
$LN7@uprv_decNu@26:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN6@uprv_decNu@26:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN5@uprv_decNu@26:
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	121					; 00000079H
	DB	0
_uprv_decNumberNextMinus_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberNextPlus_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberNextPlus_56
_TEXT	SEGMENT
_status$ = -68						; size = 4
_workset$ = -56						; size = 28
_dtiny$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberNextPlus_56 PROC				; COMDAT
; Line 1726
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1728
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _workset$[ebp]
	rep movsd
; Line 1729
	mov	DWORD PTR _status$[ebp], 0
; Line 1735
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 192				; 000000c0H
	jne	SHORT $LN2@uprv_decNu@27
; Line 1736
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decSetMaxValue
	add	esp, 8
; Line 1737
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 128			; 00000080H
; Line 1739
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN3@uprv_decNu@27
$LN2@uprv_decNu@27:
; Line 1741
	lea	eax, DWORD PTR _dtiny$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 1742
	mov	BYTE PTR _dtiny$[ebp+9], 1
; Line 1743
	mov	DWORD PTR _dtiny$[ebp+4], -1000000000	; c4653600H
; Line 1744
	mov	DWORD PTR _workset$[ebp+12], 0
; Line 1745
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dtiny$[ebp]
	push	edx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 1746
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 1073741952				; 40000080H
	mov	DWORD PTR _status$[ebp], eax
; Line 1747
	je	SHORT $LN1@uprv_decNu@27
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@27:
; Line 1748
	mov	eax, DWORD PTR _res$[ebp]
$LN3@uprv_decNu@27:
; Line 1749
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@uprv_decNu@27
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@uprv_decNu@27:
	DD	3
	DD	$LN8@uprv_decNu@27
$LN8@uprv_decNu@27:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN5@uprv_decNu@27
	DD	-56					; ffffffc8H
	DD	28					; 0000001cH
	DD	$LN6@uprv_decNu@27
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN7@uprv_decNu@27
$LN7@uprv_decNu@27:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN6@uprv_decNu@27:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN5@uprv_decNu@27:
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	121					; 00000079H
	DB	0
_uprv_decNumberNextPlus_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberIsNormal_56
PUBLIC	_uprv_decNumberCopySign_56
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberNextToward_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberNextToward_56
_TEXT	SEGMENT
_sub$10326 = -89					; size = 1
_status$ = -80						; size = 4
_result$ = -68						; size = 4
_workset$ = -56						; size = 28
_dtiny$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberNextToward_56 PROC			; COMDAT
; Line 1766
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1768
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _workset$[ebp]
	rep movsd
; Line 1770
	mov	DWORD PTR _status$[ebp], 0
; Line 1775
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	jne	SHORT $LN12@uprv_decNu@28
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	je	SHORT $LN13@uprv_decNu@28
$LN12@uprv_decNu@28:
; Line 1776
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decNaNs
	add	esp, 20					; 00000014H
; Line 1778
	jmp	$LN11@uprv_decNu@28
$LN13@uprv_decNu@28:
; Line 1779
	push	0
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lhs$[ebp]
	push	ecx
	call	_decCompare
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
; Line 1780
	cmp	DWORD PTR _result$[ebp], -2147483648	; 80000000H
	jne	SHORT $LN10@uprv_decNu@28
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _status$[ebp], eax
; Line 1781
	jmp	$LN11@uprv_decNu@28
$LN10@uprv_decNu@28:
; Line 1782
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN8@uprv_decNu@28
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lhs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_uprv_decNumberCopySign_56
	add	esp, 12					; 0000000cH
; Line 1783
	jmp	$LN11@uprv_decNu@28
$LN8@uprv_decNu@28:
; Line 1785
	cmp	DWORD PTR _result$[ebp], 0
	jge	SHORT $LN6@uprv_decNu@28
; Line 1787
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 192				; 000000c0H
	jne	SHORT $LN5@uprv_decNu@28
; Line 1788
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decSetMaxValue
	add	esp, 8
; Line 1789
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 128			; 00000080H
; Line 1790
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN14@uprv_decNu@28
$LN5@uprv_decNu@28:
; Line 1792
	mov	DWORD PTR _workset$[ebp+12], 0
; Line 1793
	mov	BYTE PTR _sub$10326[ebp], 0
; Line 1795
	jmp	SHORT $LN4@uprv_decNu@28
$LN6@uprv_decNu@28:
; Line 1797
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 64					; 00000040H
	jne	SHORT $LN3@uprv_decNu@28
; Line 1798
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decSetMaxValue
	add	esp, 8
; Line 1799
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN14@uprv_decNu@28
$LN3@uprv_decNu@28:
; Line 1801
	mov	DWORD PTR _workset$[ebp+12], 6
; Line 1802
	mov	BYTE PTR _sub$10326[ebp], 128		; 00000080H
$LN4@uprv_decNu@28:
; Line 1804
	lea	eax, DWORD PTR _dtiny$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 1805
	mov	BYTE PTR _dtiny$[ebp+9], 1
; Line 1806
	mov	DWORD PTR _dtiny$[ebp+4], -1000000000	; c4653600H
; Line 1807
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sub$10326[ebp]
	push	ecx
	lea	edx, DWORD PTR _workset$[ebp]
	push	edx
	lea	eax, DWORD PTR _dtiny$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lhs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 1810
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberIsNormal_56
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@uprv_decNu@28
	mov	DWORD PTR _status$[ebp], 0
$LN11@uprv_decNu@28:
; Line 1814
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@28
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@28:
; Line 1815
	mov	eax, DWORD PTR _res$[ebp]
$LN14@uprv_decNu@28:
; Line 1816
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@uprv_decNu@28
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@uprv_decNu@28:
	DD	3
	DD	$LN19@uprv_decNu@28
$LN19@uprv_decNu@28:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN16@uprv_decNu@28
	DD	-56					; ffffffc8H
	DD	28					; 0000001cH
	DD	$LN17@uprv_decNu@28
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN18@uprv_decNu@28
$LN18@uprv_decNu@28:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN17@uprv_decNu@28:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN16@uprv_decNu@28:
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	121					; 00000079H
	DB	0
_uprv_decNumberNextToward_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberOr_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberOr_56
_TEXT	SEGMENT
tv151 = -328						; size = 4
tv143 = -328						; size = 4
tv135 = -328						; size = 4
tv95 = -328						; size = 4
_j$10362 = -128						; size = 4
_i$10361 = -116						; size = 4
_b$10355 = -101						; size = 1
_a$10354 = -89						; size = 1
_msudigs$ = -80						; size = 4
_msuc$ = -68						; size = 4
_uc$ = -56						; size = 4
_msub$ = -44						; size = 4
_msua$ = -32						; size = 4
_ub$ = -20						; size = 4
_ua$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberOr_56 PROC				; COMDAT
; Line 1834
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1844
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN15@uprv_decNu@29
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN15@uprv_decNu@29
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	jne	SHORT $LN15@uprv_decNu@29
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN15@uprv_decNu@29
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN15@uprv_decNu@29
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN16@uprv_decNu@29
$LN15@uprv_decNu@29:
; Line 1845
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decStatus
	add	esp, 12					; 0000000cH
; Line 1846
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN17@uprv_decNu@29
$LN16@uprv_decNu@29:
; Line 1849
	mov	eax, DWORD PTR _lhs$[ebp]
	add	eax, 9
	mov	DWORD PTR _ua$[ebp], eax
; Line 1850
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 9
	mov	DWORD PTR _ub$[ebp], eax
; Line 1851
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	mov	DWORD PTR _uc$[ebp], eax
; Line 1852
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN19@uprv_decNu@29
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN20@uprv_decNu@29
$LN19@uprv_decNu@29:
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv95[ebp], edx
$LN20@uprv_decNu@29:
	mov	eax, DWORD PTR tv95[ebp]
	mov	ecx, DWORD PTR _ua$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msua$[ebp], edx
; Line 1853
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN21@uprv_decNu@29
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN22@uprv_decNu@29
$LN21@uprv_decNu@29:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv135[ebp], edx
$LN22@uprv_decNu@29:
	mov	eax, DWORD PTR tv135[ebp]
	mov	ecx, DWORD PTR _ub$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msub$[ebp], edx
; Line 1854
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN23@uprv_decNu@29
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN24@uprv_decNu@29
$LN23@uprv_decNu@29:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv143[ebp], edx
$LN24@uprv_decNu@29:
	mov	eax, DWORD PTR tv143[ebp]
	mov	ecx, DWORD PTR _uc$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msuc$[ebp], edx
; Line 1855
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN25@uprv_decNu@29
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv151[ebp], eax
	jmp	SHORT $LN26@uprv_decNu@29
$LN25@uprv_decNu@29:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv151[ebp], edx
$LN26@uprv_decNu@29:
	mov	eax, DWORD PTR tv151[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	DWORD PTR _msudigs$[ebp], edx
	jmp	SHORT $LN14@uprv_decNu@29
$LN13@uprv_decNu@29:
; Line 1856
	mov	eax, DWORD PTR _ua$[ebp]
	add	eax, 1
	mov	DWORD PTR _ua$[ebp], eax
	mov	ecx, DWORD PTR _ub$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ub$[ebp], ecx
	mov	edx, DWORD PTR _uc$[ebp]
	add	edx, 1
	mov	DWORD PTR _uc$[ebp], edx
$LN14@uprv_decNu@29:
	mov	eax, DWORD PTR _uc$[ebp]
	cmp	eax, DWORD PTR _msuc$[ebp]
	ja	$LN12@uprv_decNu@29
; Line 1858
	mov	eax, DWORD PTR _ua$[ebp]
	cmp	eax, DWORD PTR _msua$[ebp]
	jbe	SHORT $LN11@uprv_decNu@29
	mov	BYTE PTR _a$10354[ebp], 0
	jmp	SHORT $LN10@uprv_decNu@29
$LN11@uprv_decNu@29:
; Line 1859
	mov	eax, DWORD PTR _ua$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _a$10354[ebp], cl
$LN10@uprv_decNu@29:
; Line 1860
	mov	eax, DWORD PTR _ub$[ebp]
	cmp	eax, DWORD PTR _msub$[ebp]
	jbe	SHORT $LN9@uprv_decNu@29
	mov	BYTE PTR _b$10355[ebp], 0
	jmp	SHORT $LN8@uprv_decNu@29
$LN9@uprv_decNu@29:
; Line 1861
	mov	eax, DWORD PTR _ub$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$10355[ebp], cl
$LN8@uprv_decNu@29:
; Line 1862
	mov	eax, DWORD PTR _uc$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1863
	movzx	eax, BYTE PTR _a$10354[ebp]
	movzx	ecx, BYTE PTR _b$10355[ebp]
	or	eax, ecx
	je	$LN7@uprv_decNu@29
; Line 1866
	mov	DWORD PTR _i$10361[ebp], 0
	jmp	SHORT $LN6@uprv_decNu@29
$LN5@uprv_decNu@29:
	mov	eax, DWORD PTR _i$10361[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10361[ebp], eax
$LN6@uprv_decNu@29:
	cmp	DWORD PTR _i$10361[ebp], 1
	jge	$LN7@uprv_decNu@29
; Line 1867
	movzx	eax, BYTE PTR _a$10354[ebp]
	movzx	ecx, BYTE PTR _b$10355[ebp]
	or	eax, ecx
	and	eax, 1
	je	SHORT $LN3@uprv_decNu@29
	mov	eax, DWORD PTR _uc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$10361[ebp]
	movzx	eax, BYTE PTR _DECPOWERS[edx*4]
	add	ecx, eax
	mov	edx, DWORD PTR _uc$[ebp]
	mov	BYTE PTR [edx], cl
$LN3@uprv_decNu@29:
; Line 1868
	movzx	eax, BYTE PTR _a$10354[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _j$10362[ebp], edx
; Line 1869
	movzx	eax, BYTE PTR _a$10354[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	BYTE PTR _a$10354[ebp], al
; Line 1870
	movzx	eax, BYTE PTR _b$10355[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	or	edx, DWORD PTR _j$10362[ebp]
	mov	DWORD PTR _j$10362[ebp], edx
; Line 1871
	movzx	eax, BYTE PTR _b$10355[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	BYTE PTR _b$10355[ebp], al
; Line 1872
	cmp	DWORD PTR _j$10362[ebp], 1
	jle	SHORT $LN2@uprv_decNu@29
; Line 1873
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decStatus
	add	esp, 12					; 0000000cH
; Line 1874
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN17@uprv_decNu@29
$LN2@uprv_decNu@29:
; Line 1876
	mov	eax, DWORD PTR _uc$[ebp]
	cmp	eax, DWORD PTR _msuc$[ebp]
	jne	SHORT $LN1@uprv_decNu@29
	mov	eax, DWORD PTR _msudigs$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$10361[ebp], eax
	jne	SHORT $LN1@uprv_decNu@29
	jmp	SHORT $LN7@uprv_decNu@29
$LN1@uprv_decNu@29:
; Line 1877
	jmp	$LN5@uprv_decNu@29
$LN7@uprv_decNu@29:
; Line 1879
	jmp	$LN13@uprv_decNu@29
$LN12@uprv_decNu@29:
; Line 1881
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	mov	ecx, DWORD PTR _uc$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	add	edx, 9
	push	edx
	call	_decGetDigits
	add	esp, 8
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1882
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1883
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 0
; Line 1884
	mov	eax, DWORD PTR _res$[ebp]
$LN17@uprv_decNu@29:
; Line 1885
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberOr_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberPlus_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberPlus_56
_TEXT	SEGMENT
_status$ = -32						; size = 4
_dzero$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberPlus_56 PROC				; COMDAT
; Line 1904
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1906
	mov	DWORD PTR _status$[ebp], 0
; Line 1911
	lea	eax, DWORD PTR _dzero$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 1912
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dzero$[ebp+4], ecx
; Line 1913
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	lea	eax, DWORD PTR _dzero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 1914
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@30
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@30:
; Line 1918
	mov	eax, DWORD PTR _res$[ebp]
; Line 1919
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@uprv_decNu@30
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@uprv_decNu@30:
	DD	2
	DD	$LN6@uprv_decNu@30
$LN6@uprv_decNu@30:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN4@uprv_decNu@30
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@uprv_decNu@30
$LN5@uprv_decNu@30:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN4@uprv_decNu@30:
	DB	100					; 00000064H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
_uprv_decNumberPlus_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberMultiply_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberMultiply_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberMultiply_56 PROC				; COMDAT
; Line 1934
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1935
	mov	DWORD PTR _status$[ebp], 0
; Line 1936
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 1937
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@31
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@31:
; Line 1941
	mov	eax, DWORD PTR _res$[ebp]
; Line 1942
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@31
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@uprv_decNu@31:
	DD	1
	DD	$LN5@uprv_decNu@31
$LN5@uprv_decNu@31:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@31
$LN4@uprv_decNu@31:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberMultiply_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberPower_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberPower_56
_TEXT	SEGMENT
tv307 = -632						; size = 4
tv254 = -632						; size = 4
_inv$10483 = -432					; size = 4
_shift$10479 = -420					; size = 4
_rbits$10460 = -405					; size = 1
_rbits$10452 = -393					; size = 1
_shift$10441 = -384					; size = 4
_rhsneg$10433 = -369					; size = 1
_invbuff$ = -360					; size = 60
_dac$ = -292						; size = 4
_dacbuff$ = -280					; size = 60
_dnOne$ = -212						; size = 12
_aset$ = -192						; size = 28
_bits$ = -153						; size = 1
_status$ = -144						; size = 4
_residue$ = -132					; size = 4
_seenbit$ = -117					; size = 1
_needbytes$ = -108					; size = 4
_i$ = -96						; size = 4
_isoddint$ = -81					; size = 1
_useint$ = -69						; size = 1
_rhsint$ = -57						; size = 1
_n$ = -48						; size = 4
_reqdigits$ = -36					; size = 4
_allocinv$ = -24					; size = 4
_allocdac$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberPower_56 PROC				; COMDAT
; Line 1971
	push	ebp
	mov	ebp, esp
	sub	esp, 632				; 00000278H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-632]
	mov	ecx, 158				; 0000009eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1976
	mov	DWORD PTR _allocdac$[ebp], 0
; Line 1977
	mov	DWORD PTR _allocinv$[ebp], 0
; Line 1978
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _reqdigits$[ebp], ecx
; Line 1980
	mov	BYTE PTR _rhsint$[ebp], 0
; Line 1981
	mov	BYTE PTR _useint$[ebp], 0
; Line 1982
	mov	BYTE PTR _isoddint$[ebp], 0
; Line 1989
	mov	DWORD PTR _residue$[ebp], 0
; Line 1990
	mov	DWORD PTR _status$[ebp], 0
; Line 1991
	mov	BYTE PTR _bits$[ebp], 0
; Line 1996
	lea	eax, DWORD PTR _dacbuff$[ebp]
	mov	DWORD PTR _dac$[ebp], eax
$LN59@uprv_decNu@32:
; Line 2022
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 112				; 00000070H
	je	$LN56@uprv_decNu@32
; Line 2023
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	jne	SHORT $LN54@uprv_decNu@32
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	je	SHORT $LN55@uprv_decNu@32
$LN54@uprv_decNu@32:
; Line 2024
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decNaNs
	add	esp, 20					; 00000014H
; Line 2025
	jmp	$LN57@uprv_decNu@32
$LN55@uprv_decNu@32:
; Line 2026
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	$LN56@uprv_decNu@32
; Line 2027
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	mov	BYTE PTR _rhsneg$10433[ebp], cl
; Line 2029
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN52@uprv_decNu@32
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN51@uprv_decNu@32
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN51@uprv_decNu@32
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN52@uprv_decNu@32
$LN51@uprv_decNu@32:
; Line 2030
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 128				; 00000080H
	mov	DWORD PTR _status$[ebp], eax
; Line 2031
	jmp	$LN50@uprv_decNu@32
$LN52@uprv_decNu@32:
; Line 2032
	lea	eax, DWORD PTR _dnOne$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 2033
	mov	BYTE PTR _dnOne$[ebp+9], 1
; Line 2034
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dnOne$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	call	_uprv_decNumberCompare_56
	add	esp, 16					; 00000010H
; Line 2035
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 2036
	mov	eax, DWORD PTR _dac$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN49@uprv_decNu@32
; Line 2037
	movzx	eax, BYTE PTR _rhsneg$10433[ebp]
	test	eax, eax
	je	SHORT $LN48@uprv_decNu@32
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [edx+8], cl
$LN48@uprv_decNu@32:
; Line 2039
	jmp	SHORT $LN50@uprv_decNu@32
$LN49@uprv_decNu@32:
	mov	eax, DWORD PTR _dac$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN46@uprv_decNu@32
; Line 2041
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR _shift$10441[ebp], ecx
; Line 2042
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 2043
	mov	eax, DWORD PTR _shift$10441[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _res$[ebp]
	add	ecx, 9
	push	ecx
	call	_decShiftToMost
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], eax
; Line 2044
	mov	eax, DWORD PTR _shift$10441[ebp]
	neg	eax
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2045
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 2080				; 00000820H
	mov	DWORD PTR _status$[ebp], eax
; Line 2047
	jmp	SHORT $LN50@uprv_decNu@32
$LN46@uprv_decNu@32:
; Line 2048
	movzx	eax, BYTE PTR _rhsneg$10433[ebp]
	test	eax, eax
	jne	SHORT $LN50@uprv_decNu@32
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [edx+8], cl
$LN50@uprv_decNu@32:
; Line 2051
	jmp	$LN57@uprv_decNu@32
$LN56@uprv_decNu@32:
; Line 2056
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	call	_decGetInt
	add	esp, 4
	mov	DWORD PTR _n$[ebp], eax
; Line 2057
	cmp	DWORD PTR _n$[ebp], -2147483648		; 80000000H
	je	SHORT $LN43@uprv_decNu@32
; Line 2058
	mov	BYTE PTR _rhsint$[ebp], 1
; Line 2059
	movzx	eax, BYTE PTR _n$[ebp]
	and	eax, 1
	mov	BYTE PTR _isoddint$[ebp], al
; Line 2060
	cmp	DWORD PTR _n$[ebp], -2147483646		; 80000002H
	je	SHORT $LN43@uprv_decNu@32
	cmp	DWORD PTR _n$[ebp], -2147483645		; 80000003H
	je	SHORT $LN43@uprv_decNu@32
; Line 2061
	mov	BYTE PTR _useint$[ebp], 1
$LN43@uprv_decNu@32:
; Line 2065
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN41@uprv_decNu@32
	movzx	eax, BYTE PTR _isoddint$[ebp]
	test	eax, eax
	je	SHORT $LN41@uprv_decNu@32
	mov	BYTE PTR _bits$[ebp], 128		; 00000080H
$LN41@uprv_decNu@32:
; Line 2068
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	$LN40@uprv_decNu@32
; Line 2069
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _rbits$10452[ebp], cl
; Line 2070
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 2071
	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN39@uprv_decNu@32
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 2072
	jmp	SHORT $LN38@uprv_decNu@32
$LN39@uprv_decNu@32:
; Line 2074
	movzx	eax, BYTE PTR _rhsint$[ebp]
	test	eax, eax
	jne	SHORT $LN37@uprv_decNu@32
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN37@uprv_decNu@32
; Line 2075
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 128				; 00000080H
	mov	DWORD PTR _status$[ebp], eax
; Line 2076
	jmp	$LN57@uprv_decNu@32
$LN37@uprv_decNu@32:
; Line 2077
	movzx	eax, BYTE PTR _rbits$10452[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN36@uprv_decNu@32
	movzx	eax, BYTE PTR _bits$[ebp]
	or	eax, 64					; 00000040H
	mov	BYTE PTR _bits$[ebp], al
$LN36@uprv_decNu@32:
; Line 2079
	mov	eax, DWORD PTR _res$[ebp]
	mov	cl, BYTE PTR _bits$[ebp]
	mov	BYTE PTR [eax+8], cl
$LN38@uprv_decNu@32:
; Line 2081
	jmp	$LN57@uprv_decNu@32
$LN40@uprv_decNu@32:
; Line 2084
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN35@uprv_decNu@32
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN35@uprv_decNu@32
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN35@uprv_decNu@32
; Line 2085
	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN34@uprv_decNu@32
; Line 2092
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 128				; 00000080H
	mov	DWORD PTR _status$[ebp], eax
; Line 2094
	jmp	SHORT $LN33@uprv_decNu@32
$LN34@uprv_decNu@32:
; Line 2095
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _rbits$10460[ebp], cl
; Line 2096
	movzx	eax, BYTE PTR _rbits$10460[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN32@uprv_decNu@32
; Line 2102
	movzx	eax, BYTE PTR _bits$[ebp]
	or	eax, 64					; 00000040H
	mov	BYTE PTR _bits$[ebp], al
$LN32@uprv_decNu@32:
; Line 2104
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 2106
	mov	eax, DWORD PTR _res$[ebp]
	mov	cl, BYTE PTR _bits$[ebp]
	mov	BYTE PTR [eax+8], cl
$LN33@uprv_decNu@32:
; Line 2108
	jmp	$LN57@uprv_decNu@32
$LN35@uprv_decNu@32:
; Line 2112
	movzx	eax, BYTE PTR _useint$[ebp]
	test	eax, eax
	jne	$LN31@uprv_decNu@32
; Line 2115
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN30@uprv_decNu@32
; Line 2116
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 128				; 00000080H
	mov	DWORD PTR _status$[ebp], eax
; Line 2117
	jmp	$LN57@uprv_decNu@32
$LN30@uprv_decNu@32:
; Line 2119
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lhs$[ebp]
	push	edx
	call	_decCheckMath
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN28@uprv_decNu@32
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	call	_decCheckMath
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN29@uprv_decNu@32
$LN28@uprv_decNu@32:
	jmp	$LN57@uprv_decNu@32
$LN29@uprv_decNu@32:
; Line 2121
	push	64					; 00000040H
	lea	eax, DWORD PTR _aset$[ebp]
	push	eax
	call	_uprv_decContextDefault_56
	add	esp, 8
; Line 2122
	mov	DWORD PTR _aset$[ebp+4], 999999		; 000f423fH
; Line 2123
	mov	DWORD PTR _aset$[ebp+8], -999999	; fff0bdc1H
; Line 2124
	mov	BYTE PTR _aset$[ebp+24], 0
; Line 2136
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN62@uprv_decNu@32
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv254[ebp], ecx
	jmp	SHORT $LN63@uprv_decNu@32
$LN62@uprv_decNu@32:
	mov	edx, DWORD PTR _lhs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv254[ebp], eax
$LN63@uprv_decNu@32:
	mov	ecx, DWORD PTR tv254[ebp]
	add	ecx, 10					; 0000000aH
	mov	DWORD PTR _aset$[ebp], ecx
; Line 2139
	jmp	$LN27@uprv_decNu@32
$LN31@uprv_decNu@32:
; Line 2140
	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN26@uprv_decNu@32
; Line 2142
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 2143
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 2144
	jmp	$LN57@uprv_decNu@32
$LN26@uprv_decNu@32:
; Line 2146
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN25@uprv_decNu@32
	mov	eax, DWORD PTR _n$[ebp]
	neg	eax
	mov	DWORD PTR _n$[ebp], eax
$LN25@uprv_decNu@32:
; Line 2148
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _aset$[ebp]
	rep movsd
; Line 2149
	mov	DWORD PTR _aset$[ebp+12], 3
; Line 2151
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _rhs$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _reqdigits$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+2]
	mov	DWORD PTR _aset$[ebp], ecx
; Line 2156
	cmp	DWORD PTR _aset$[ebp], 999999999	; 3b9ac9ffH
	jle	SHORT $LN27@uprv_decNu@32
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 128				; 00000080H
	mov	DWORD PTR _status$[ebp], eax
	jmp	$LN57@uprv_decNu@32
$LN27@uprv_decNu@32:
; Line 2161
	cmp	DWORD PTR _aset$[ebp], 49		; 00000031H
	jg	SHORT $LN64@uprv_decNu@32
	mov	eax, DWORD PTR _aset$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv307[ebp], ecx
	jmp	SHORT $LN65@uprv_decNu@32
$LN64@uprv_decNu@32:
	mov	edx, DWORD PTR _aset$[ebp]
	mov	DWORD PTR tv307[ebp], edx
$LN65@uprv_decNu@32:
	mov	eax, DWORD PTR tv307[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 2163
	cmp	DWORD PTR _needbytes$[ebp], 60		; 0000003cH
	jbe	SHORT $LN23@uprv_decNu@32
; Line 2164
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocdac$[ebp], eax
; Line 2165
	cmp	DWORD PTR _allocdac$[ebp], 0
	jne	SHORT $LN22@uprv_decNu@32
; Line 2166
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _status$[ebp], eax
; Line 2167
	jmp	$LN57@uprv_decNu@32
$LN22@uprv_decNu@32:
; Line 2168
	mov	eax, DWORD PTR _allocdac$[ebp]
	mov	DWORD PTR _dac$[ebp], eax
$LN23@uprv_decNu@32:
; Line 2172
	movzx	eax, BYTE PTR _useint$[ebp]
	test	eax, eax
	jne	$LN21@uprv_decNu@32
; Line 2176
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	call	_decLnOp
	add	esp, 16					; 00000010H
; Line 2178
	mov	eax, DWORD PTR _dac$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	$LN20@uprv_decNu@32
	mov	eax, DWORD PTR _dac$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN20@uprv_decNu@32
	mov	eax, DWORD PTR _dac$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN20@uprv_decNu@32
; Line 2180
	mov	eax, DWORD PTR _dac$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 2181
	movzx	eax, BYTE PTR _rhsint$[ebp]
	test	eax, eax
	jne	SHORT $LN19@uprv_decNu@32
; Line 2182
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR _shift$10479[ebp], ecx
; Line 2183
	mov	eax, DWORD PTR _shift$10479[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _dac$[ebp]
	add	ecx, 9
	push	ecx
	call	_decShiftToMost
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _dac$[ebp]
	mov	DWORD PTR [edx], eax
; Line 2184
	mov	eax, DWORD PTR _shift$10479[ebp]
	neg	eax
	mov	ecx, DWORD PTR _dac$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2185
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 2080				; 00000820H
	mov	DWORD PTR _status$[ebp], eax
$LN19@uprv_decNu@32:
; Line 2188
	jmp	SHORT $LN18@uprv_decNu@32
$LN20@uprv_decNu@32:
; Line 2189
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dac$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 2190
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dac$[ebp]
	push	edx
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	call	_decExpOp
	add	esp, 16					; 00000010H
$LN18@uprv_decNu@32:
; Line 2195
	jmp	$LN17@uprv_decNu@32
$LN21@uprv_decNu@32:
; Line 2196
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 2197
	mov	eax, DWORD PTR _dac$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 2201
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	$LN16@uprv_decNu@32
; Line 2202
	lea	eax, DWORD PTR _invbuff$[ebp]
	mov	DWORD PTR _inv$10483[ebp], eax
; Line 2203
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dnOne$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 2208
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	128					; 00000080H
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lhs$[ebp]
	push	edx
	lea	eax, DWORD PTR _dnOne$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dac$[ebp]
	push	ecx
	call	_decDivideOp
	add	esp, 24					; 00000018H
; Line 2210
	cmp	DWORD PTR _needbytes$[ebp], 60		; 0000003cH
	jbe	SHORT $LN15@uprv_decNu@32
; Line 2211
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocinv$[ebp], eax
; Line 2212
	cmp	DWORD PTR _allocinv$[ebp], 0
	jne	SHORT $LN14@uprv_decNu@32
; Line 2213
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _status$[ebp], eax
; Line 2214
	jmp	$LN57@uprv_decNu@32
$LN14@uprv_decNu@32:
; Line 2215
	mov	eax, DWORD PTR _allocinv$[ebp]
	mov	DWORD PTR _inv$10483[ebp], eax
$LN15@uprv_decNu@32:
; Line 2218
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inv$10483[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 2219
	lea	eax, DWORD PTR _dnOne$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dac$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 2220
	mov	eax, DWORD PTR _inv$10483[ebp]
	mov	DWORD PTR _lhs$[ebp], eax
$LN16@uprv_decNu@32:
; Line 2227
	mov	BYTE PTR _seenbit$[ebp], 0
; Line 2228
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN13@uprv_decNu@32
$LN12@uprv_decNu@32:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@uprv_decNu@32:
; Line 2230
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 8704				; 00002200H
	je	SHORT $LN10@uprv_decNu@32
; Line 2231
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 512				; 00000200H
	jne	SHORT $LN8@uprv_decNu@32
	mov	eax, DWORD PTR _dac$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN10@uprv_decNu@32
	mov	eax, DWORD PTR _dac$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN10@uprv_decNu@32
	mov	eax, DWORD PTR _dac$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN10@uprv_decNu@32
$LN8@uprv_decNu@32:
	jmp	SHORT $LN11@uprv_decNu@32
$LN10@uprv_decNu@32:
; Line 2235
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 2236
	jns	SHORT $LN7@uprv_decNu@32
; Line 2237
	mov	BYTE PTR _seenbit$[ebp], 1
; Line 2238
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dac$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
$LN7@uprv_decNu@32:
; Line 2240
	cmp	DWORD PTR _i$[ebp], 31			; 0000001fH
	jne	SHORT $LN6@uprv_decNu@32
	jmp	SHORT $LN11@uprv_decNu@32
$LN6@uprv_decNu@32:
; Line 2241
	movzx	eax, BYTE PTR _seenbit$[ebp]
	test	eax, eax
	jne	SHORT $LN5@uprv_decNu@32
	jmp	$LN12@uprv_decNu@32
$LN5@uprv_decNu@32:
; Line 2242
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dac$[ebp]
	push	edx
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dac$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 2243
	jmp	$LN12@uprv_decNu@32
$LN11@uprv_decNu@32:
; Line 2246
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 8704				; 00002200H
	je	SHORT $LN17@uprv_decNu@32
; Line 2259
	mov	eax, DWORD PTR _dac$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, -129				; ffffff7fH
	movzx	edx, BYTE PTR _bits$[ebp]
	or	ecx, edx
	mov	eax, DWORD PTR _dac$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 2262
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 2263
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 2264
	jmp	SHORT $LN57@uprv_decNu@32
$LN17@uprv_decNu@32:
; Line 2277
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _dac$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 2278
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 2282
	xor	eax, eax
	jne	$LN59@uprv_decNu@32
$LN57@uprv_decNu@32:
; Line 2284
	cmp	DWORD PTR _allocdac$[ebp], 0
	je	SHORT $LN3@uprv_decNu@32
	mov	eax, DWORD PTR _allocdac$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN3@uprv_decNu@32:
; Line 2285
	cmp	DWORD PTR _allocinv$[ebp], 0
	je	SHORT $LN2@uprv_decNu@32
	mov	eax, DWORD PTR _allocinv$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@uprv_decNu@32:
; Line 2290
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@32
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@32:
; Line 2294
	mov	eax, DWORD PTR _res$[ebp]
; Line 2295
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN73@uprv_decNu@32
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 632				; 00000278H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN73@uprv_decNu@32:
	DD	6
	DD	$LN72@uprv_decNu@32
$LN72@uprv_decNu@32:
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN66@uprv_decNu@32
	DD	-144					; ffffff70H
	DD	4
	DD	$LN67@uprv_decNu@32
	DD	-192					; ffffff40H
	DD	28					; 0000001cH
	DD	$LN68@uprv_decNu@32
	DD	-212					; ffffff2cH
	DD	12					; 0000000cH
	DD	$LN69@uprv_decNu@32
	DD	-280					; fffffee8H
	DD	60					; 0000003cH
	DD	$LN70@uprv_decNu@32
	DD	-360					; fffffe98H
	DD	60					; 0000003cH
	DD	$LN71@uprv_decNu@32
$LN71@uprv_decNu@32:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN70@uprv_decNu@32:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN69@uprv_decNu@32:
	DB	100					; 00000064H
	DB	110					; 0000006eH
	DB	79					; 0000004fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN68@uprv_decNu@32:
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN67@uprv_decNu@32:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN66@uprv_decNu@32:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
_uprv_decNumberPower_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberQuantize_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberQuantize_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberQuantize_56 PROC				; COMDAT
; Line 2316
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2317
	mov	DWORD PTR _status$[ebp], 0
; Line 2318
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decQuantizeOp
	add	esp, 24					; 00000018H
; Line 2319
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@33
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@33:
; Line 2320
	mov	eax, DWORD PTR _res$[ebp]
; Line 2321
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@33
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@33:
	DD	1
	DD	$LN5@uprv_decNu@33
$LN5@uprv_decNu@33:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@33
$LN4@uprv_decNu@33:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberQuantize_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberReduce_56
PUBLIC	_uprv_decNumberNormalize_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberNormalize_56
_TEXT	SEGMENT
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberNormalize_56 PROC			; COMDAT
; Line 2336
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2337
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_uprv_decNumberReduce_56
	add	esp, 12					; 0000000cH
; Line 2338
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberNormalize_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_decNumberReduce_56
_TEXT	SEGMENT
_dropped$ = -32						; size = 4
_residue$ = -20						; size = 4
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberReduce_56 PROC				; COMDAT
; Line 2341
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2345
	mov	DWORD PTR _status$[ebp], 0
; Line 2346
	mov	DWORD PTR _residue$[ebp], 0
$LN5@uprv_decNu@34:
; Line 2367
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	je	SHORT $LN2@uprv_decNu@34
; Line 2368
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decNaNs
	add	esp, 20					; 00000014H
; Line 2369
	jmp	SHORT $LN3@uprv_decNu@34
$LN2@uprv_decNu@34:
; Line 2373
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 2374
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 2375
	lea	eax, DWORD PTR _dropped$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decTrim
	add	esp, 20					; 00000014H
; Line 2377
	xor	eax, eax
	jne	SHORT $LN5@uprv_decNu@34
$LN3@uprv_decNu@34:
; Line 2382
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@34
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@34:
; Line 2383
	mov	eax, DWORD PTR _res$[ebp]
; Line 2384
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@uprv_decNu@34
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@uprv_decNu@34:
	DD	3
	DD	$LN11@uprv_decNu@34
$LN11@uprv_decNu@34:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@uprv_decNu@34
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@uprv_decNu@34
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@uprv_decNu@34
$LN10@uprv_decNu@34:
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN9@uprv_decNu@34:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN8@uprv_decNu@34:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberReduce_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberRescale_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberRescale_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberRescale_56 PROC				; COMDAT
; Line 2405
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2406
	mov	DWORD PTR _status$[ebp], 0
; Line 2407
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decQuantizeOp
	add	esp, 24					; 00000018H
; Line 2408
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@35
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@35:
; Line 2409
	mov	eax, DWORD PTR _res$[ebp]
; Line 2410
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@35
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@35:
	DD	1
	DD	$LN5@uprv_decNu@35
$LN5@uprv_decNu@35:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@35
$LN4@uprv_decNu@35:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberRescale_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberRemainder_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberRemainder_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberRemainder_56 PROC			; COMDAT
; Line 2425
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2426
	mov	DWORD PTR _status$[ebp], 0
; Line 2427
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decDivideOp
	add	esp, 24					; 00000018H
; Line 2428
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@36
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@36:
; Line 2432
	mov	eax, DWORD PTR _res$[ebp]
; Line 2433
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@36
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@36:
	DD	1
	DD	$LN5@uprv_decNu@36
$LN5@uprv_decNu@36:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@36
$LN4@uprv_decNu@36:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberRemainder_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberRemainderNear_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberRemainderNear_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberRemainderNear_56 PROC			; COMDAT
; Line 2448
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2449
	mov	DWORD PTR _status$[ebp], 0
; Line 2450
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decDivideOp
	add	esp, 24					; 00000018H
; Line 2451
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@37
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@37:
; Line 2455
	mov	eax, DWORD PTR _res$[ebp]
; Line 2456
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@37
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@37:
	DD	1
	DD	$LN5@uprv_decNu@37
$LN5@uprv_decNu@37:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@37
$LN4@uprv_decNu@37:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberRemainderNear_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberRotate_56
EXTRN	_abs:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberRotate_56
_TEXT	SEGMENT
tv178 = -316						; size = 4
tv159 = -316						; size = 4
tv148 = -316						; size = 4
tv139 = -316						; size = 4
_save$10613 = -116					; size = 4
_rem$10606 = -104					; size = 4
_save$10604 = -92					; size = 4
_msumax$10599 = -80					; size = 4
_msu$10598 = -68					; size = 4
_msudigits$10597 = -56					; size = 4
_shift$10596 = -44					; size = 4
_units$10595 = -32					; size = 4
_rotate$ = -20						; size = 4
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberRotate_56 PROC				; COMDAT
; Line 2484
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2485
	mov	DWORD PTR _status$[ebp], 0
; Line 2493
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	jne	SHORT $LN19@uprv_decNu@38
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	je	SHORT $LN20@uprv_decNu@38
$LN19@uprv_decNu@38:
; Line 2494
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decNaNs
	add	esp, 20					; 00000014H
	jmp	$LN18@uprv_decNu@38
$LN20@uprv_decNu@38:
; Line 2496
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	jne	SHORT $LN16@uprv_decNu@38
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN17@uprv_decNu@38
$LN16@uprv_decNu@38:
; Line 2497
	mov	DWORD PTR _status$[ebp], 128		; 00000080H
; Line 2498
	jmp	$LN18@uprv_decNu@38
$LN17@uprv_decNu@38:
; Line 2499
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	call	_decGetInt
	add	esp, 4
	mov	DWORD PTR _rotate$[ebp], eax
; Line 2502
	cmp	DWORD PTR _rotate$[ebp], -2147483648	; 80000000H
	je	SHORT $LN13@uprv_decNu@38
	cmp	DWORD PTR _rotate$[ebp], -2147483645	; 80000003H
	je	SHORT $LN13@uprv_decNu@38
	cmp	DWORD PTR _rotate$[ebp], -2147483646	; 80000002H
	je	SHORT $LN13@uprv_decNu@38
	mov	eax, DWORD PTR _rotate$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _set$[ebp]
	cmp	eax, DWORD PTR [ecx]
	jle	SHORT $LN14@uprv_decNu@38
$LN13@uprv_decNu@38:
; Line 2503
	mov	DWORD PTR _status$[ebp], 128		; 00000080H
; Line 2504
	jmp	$LN18@uprv_decNu@38
$LN14@uprv_decNu@38:
; Line 2505
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 2507
	cmp	DWORD PTR _rotate$[ebp], 0
	jge	SHORT $LN11@uprv_decNu@38
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _rotate$[ebp]
	mov	DWORD PTR _rotate$[ebp], ecx
$LN11@uprv_decNu@38:
; Line 2509
	cmp	DWORD PTR _rotate$[ebp], 0
	je	$LN18@uprv_decNu@38
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _rotate$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	$LN18@uprv_decNu@38
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	jne	$LN18@uprv_decNu@38
; Line 2513
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN23@uprv_decNu@38
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN24@uprv_decNu@38
$LN23@uprv_decNu@38:
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv139[ebp], edx
$LN24@uprv_decNu@38:
	mov	eax, DWORD PTR tv139[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _msu$10598[ebp], edx
; Line 2514
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN25@uprv_decNu@38
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv148[ebp], eax
	jmp	SHORT $LN26@uprv_decNu@38
$LN25@uprv_decNu@38:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv148[ebp], edx
$LN26@uprv_decNu@38:
	mov	eax, DWORD PTR tv148[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _msumax$10599[ebp], edx
; Line 2515
	mov	eax, DWORD PTR _msu$10598[ebp]
	add	eax, 1
	mov	DWORD PTR _msu$10598[ebp], eax
	jmp	SHORT $LN9@uprv_decNu@38
$LN8@uprv_decNu@38:
	mov	eax, DWORD PTR _msu$10598[ebp]
	add	eax, 1
	mov	DWORD PTR _msu$10598[ebp], eax
$LN9@uprv_decNu@38:
	mov	eax, DWORD PTR _msu$10598[ebp]
	cmp	eax, DWORD PTR _msumax$10599[ebp]
	ja	SHORT $LN7@uprv_decNu@38
	mov	eax, DWORD PTR _msu$10598[ebp]
	mov	BYTE PTR [eax], 0
	jmp	SHORT $LN8@uprv_decNu@38
$LN7@uprv_decNu@38:
; Line 2516
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 2517
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN27@uprv_decNu@38
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv159[ebp], eax
	jmp	SHORT $LN28@uprv_decNu@38
$LN27@uprv_decNu@38:
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv159[ebp], edx
$LN28@uprv_decNu@38:
	mov	eax, DWORD PTR tv159[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	DWORD PTR _msudigits$10597[ebp], edx
; Line 2550
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _rotate$[ebp]
	mov	DWORD PTR _rotate$[ebp], ecx
; Line 2551
	mov	eax, DWORD PTR _rotate$[ebp]
	mov	DWORD PTR _units$10595[ebp], eax
; Line 2552
	mov	eax, DWORD PTR _rotate$[ebp]
	and	eax, -2147483648			; 80000000H
	jns	SHORT $LN34@uprv_decNu@38
	dec	eax
	or	eax, -1
	inc	eax
$LN34@uprv_decNu@38:
	mov	DWORD PTR _shift$10596[ebp], eax
; Line 2553
	cmp	DWORD PTR _shift$10596[ebp], 0
	jbe	$LN6@uprv_decNu@38
; Line 2554
	mov	eax, DWORD PTR _res$[ebp]
	movzx	eax, BYTE PTR [eax+9]
	mov	ecx, DWORD PTR _shift$10596[ebp]
	xor	edx, edx
	div	DWORD PTR _DECPOWERS[ecx*4]
	mov	DWORD PTR _save$10604[ebp], edx
; Line 2555
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN29@uprv_decNu@38
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv178[ebp], eax
	jmp	SHORT $LN30@uprv_decNu@38
$LN29@uprv_decNu@38:
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv178[ebp], edx
$LN30@uprv_decNu@38:
	mov	eax, DWORD PTR _shift$10596[ebp]
	push	eax
	mov	ecx, DWORD PTR tv178[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	add	edx, 9
	push	edx
	call	_decShiftToLeast
	add	esp, 12					; 0000000cH
; Line 2556
	mov	eax, DWORD PTR _shift$10596[ebp]
	cmp	eax, DWORD PTR _msudigits$10597[ebp]
	jbe	SHORT $LN5@uprv_decNu@38
; Line 2557
	mov	ecx, DWORD PTR _shift$10596[ebp]
	sub	ecx, DWORD PTR _msudigits$10597[ebp]
	mov	eax, DWORD PTR _save$10604[ebp]
	xor	edx, edx
	div	DWORD PTR _DECPOWERS[ecx*4]
	mov	DWORD PTR _rem$10606[ebp], edx
; Line 2558
	mov	ecx, DWORD PTR _shift$10596[ebp]
	sub	ecx, DWORD PTR _msudigits$10597[ebp]
	mov	eax, DWORD PTR _save$10604[ebp]
	xor	edx, edx
	div	DWORD PTR _DECPOWERS[ecx*4]
	mov	edx, DWORD PTR _msumax$10599[ebp]
	mov	BYTE PTR [edx], al
; Line 2560
	mov	eax, DWORD PTR _msumax$10599[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	mov	edx, DWORD PTR _shift$10596[ebp]
	sub	edx, DWORD PTR _msudigits$10597[ebp]
	mov	eax, 1
	sub	eax, edx
	mov	edx, DWORD PTR _rem$10606[ebp]
	imul	edx, DWORD PTR _DECPOWERS[eax*4]
	movzx	eax, dl
	add	ecx, eax
	mov	edx, DWORD PTR _msumax$10599[ebp]
	mov	BYTE PTR [edx-1], cl
; Line 2562
	jmp	SHORT $LN6@uprv_decNu@38
$LN5@uprv_decNu@38:
; Line 2563
	mov	eax, DWORD PTR _msumax$10599[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _msudigits$10597[ebp]
	sub	edx, DWORD PTR _shift$10596[ebp]
	mov	eax, DWORD PTR _save$10604[ebp]
	imul	eax, DWORD PTR _DECPOWERS[edx*4]
	movzx	edx, al
	add	ecx, edx
	mov	eax, DWORD PTR _msumax$10599[ebp]
	mov	BYTE PTR [eax], cl
$LN6@uprv_decNu@38:
; Line 2568
	cmp	DWORD PTR _units$10595[ebp], 0
	jbe	$LN3@uprv_decNu@38
; Line 2572
	mov	eax, 1
	sub	eax, DWORD PTR _msudigits$10597[ebp]
	mov	DWORD PTR _shift$10596[ebp], eax
; Line 2573
	je	SHORT $LN2@uprv_decNu@38
; Line 2574
	mov	eax, DWORD PTR _res$[ebp]
	movzx	eax, BYTE PTR [eax+9]
	mov	ecx, DWORD PTR _shift$10596[ebp]
	xor	edx, edx
	div	DWORD PTR _DECPOWERS[ecx*4]
	mov	DWORD PTR _save$10613[ebp], edx
; Line 2575
	mov	eax, DWORD PTR _shift$10596[ebp]
	push	eax
	mov	ecx, DWORD PTR _units$10595[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	add	edx, 9
	push	edx
	call	_decShiftToLeast
	add	esp, 12					; 0000000cH
; Line 2576
	mov	eax, DWORD PTR _msumax$10599[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _msudigits$10597[ebp]
	mov	eax, DWORD PTR _save$10613[ebp]
	imul	eax, DWORD PTR _DECPOWERS[edx*4]
	movzx	edx, al
	add	ecx, edx
	mov	eax, DWORD PTR _msumax$10599[ebp]
	mov	BYTE PTR [eax], cl
$LN2@uprv_decNu@38:
; Line 2581
	mov	eax, DWORD PTR _msumax$10599[ebp]
	push	eax
	mov	ecx, DWORD PTR _units$10595[ebp]
	mov	edx, DWORD PTR _res$[ebp]
	lea	eax, DWORD PTR [edx+ecx+9]
	push	eax
	call	_decReverse
	add	esp, 8
; Line 2582
	mov	eax, DWORD PTR _units$10595[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	push	eax
	call	_decReverse
	add	esp, 8
; Line 2583
	mov	eax, DWORD PTR _msumax$10599[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	add	ecx, 9
	push	ecx
	call	_decReverse
	add	esp, 8
$LN3@uprv_decNu@38:
; Line 2587
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	mov	ecx, DWORD PTR _msumax$10599[ebp]
	sub	ecx, eax
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	add	edx, 9
	push	edx
	call	_decGetDigits
	add	esp, 8
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
$LN18@uprv_decNu@38:
; Line 2591
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@38
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@38:
; Line 2592
	mov	eax, DWORD PTR _res$[ebp]
; Line 2593
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@uprv_decNu@38
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN33@uprv_decNu@38:
	DD	1
	DD	$LN32@uprv_decNu@38
$LN32@uprv_decNu@38:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN31@uprv_decNu@38
$LN31@uprv_decNu@38:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberRotate_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberSameQuantum_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberSameQuantum_56
_TEXT	SEGMENT
_ret$ = -5						; size = 1
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_uprv_decNumberSameQuantum_56 PROC			; COMDAT
; Line 2605
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2606
	mov	BYTE PTR _ret$[ebp], 0
; Line 2612
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 112				; 00000070H
	je	SHORT $LN6@uprv_decNu@39
; Line 2613
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	je	SHORT $LN5@uprv_decNu@39
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	je	SHORT $LN5@uprv_decNu@39
	mov	BYTE PTR _ret$[ebp], 1
	jmp	SHORT $LN4@uprv_decNu@39
$LN5@uprv_decNu@39:
; Line 2614
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN4@uprv_decNu@39
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN4@uprv_decNu@39
	mov	BYTE PTR _ret$[ebp], 1
$LN4@uprv_decNu@39:
; Line 2617
	jmp	SHORT $LN2@uprv_decNu@39
$LN6@uprv_decNu@39:
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN2@uprv_decNu@39
	mov	BYTE PTR _ret$[ebp], 1
$LN2@uprv_decNu@39:
; Line 2619
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 2620
	mov	eax, DWORD PTR _res$[ebp]
	mov	cl, BYTE PTR _ret$[ebp]
	mov	BYTE PTR [eax+9], cl
; Line 2621
	mov	eax, DWORD PTR _res$[ebp]
; Line 2622
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberSameQuantum_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberScaleB_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberScaleB_56
_TEXT	SEGMENT
_residue$ = -32						; size = 4
_status$ = -20						; size = 4
_reqexp$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberScaleB_56 PROC				; COMDAT
; Line 2640
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2642
	mov	DWORD PTR _status$[ebp], 0
; Line 2650
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	jne	SHORT $LN10@uprv_decNu@40
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	je	SHORT $LN11@uprv_decNu@40
$LN10@uprv_decNu@40:
; Line 2651
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decNaNs
	add	esp, 20					; 00000014H
	jmp	$LN9@uprv_decNu@40
$LN11@uprv_decNu@40:
; Line 2653
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	jne	SHORT $LN7@uprv_decNu@40
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN8@uprv_decNu@40
$LN7@uprv_decNu@40:
; Line 2654
	mov	DWORD PTR _status$[ebp], 128		; 00000080H
; Line 2655
	jmp	$LN9@uprv_decNu@40
$LN8@uprv_decNu@40:
; Line 2657
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	call	_decGetInt
	add	esp, 4
	mov	DWORD PTR _reqexp$[ebp], eax
; Line 2660
	cmp	DWORD PTR _reqexp$[ebp], -2147483648	; 80000000H
	je	SHORT $LN4@uprv_decNu@40
	cmp	DWORD PTR _reqexp$[ebp], -2147483645	; 80000003H
	je	SHORT $LN4@uprv_decNu@40
	cmp	DWORD PTR _reqexp$[ebp], -2147483646	; 80000002H
	je	SHORT $LN4@uprv_decNu@40
	mov	eax, DWORD PTR _reqexp$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _set$[ebp]
	add	edx, DWORD PTR [ecx+4]
	shl	edx, 1
	cmp	eax, edx
	jle	SHORT $LN5@uprv_decNu@40
$LN4@uprv_decNu@40:
; Line 2661
	mov	DWORD PTR _status$[ebp], 128		; 00000080H
; Line 2662
	jmp	SHORT $LN9@uprv_decNu@40
$LN5@uprv_decNu@40:
; Line 2663
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 2664
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	jne	SHORT $LN9@uprv_decNu@40
; Line 2665
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _reqexp$[ebp]
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 2666
	mov	DWORD PTR _residue$[ebp], 0
; Line 2667
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
$LN9@uprv_decNu@40:
; Line 2671
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@40
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@40:
; Line 2672
	mov	eax, DWORD PTR _res$[ebp]
; Line 2673
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@uprv_decNu@40
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@uprv_decNu@40:
	DD	2
	DD	$LN16@uprv_decNu@40
$LN16@uprv_decNu@40:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@uprv_decNu@40
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN15@uprv_decNu@40
$LN15@uprv_decNu@40:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN14@uprv_decNu@40:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberScaleB_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberShift_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberShift_56
_TEXT	SEGMENT
tv162 = -220						; size = 4
_shift$ = -20						; size = 4
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberShift_56 PROC				; COMDAT
; Line 2697
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2698
	mov	DWORD PTR _status$[ebp], 0
; Line 2706
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	jne	SHORT $LN19@uprv_decNu@41
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	je	SHORT $LN20@uprv_decNu@41
$LN19@uprv_decNu@41:
; Line 2707
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decNaNs
	add	esp, 20					; 00000014H
	jmp	$LN18@uprv_decNu@41
$LN20@uprv_decNu@41:
; Line 2709
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	jne	SHORT $LN16@uprv_decNu@41
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN17@uprv_decNu@41
$LN16@uprv_decNu@41:
; Line 2710
	mov	DWORD PTR _status$[ebp], 128		; 00000080H
; Line 2711
	jmp	$LN18@uprv_decNu@41
$LN17@uprv_decNu@41:
; Line 2712
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	call	_decGetInt
	add	esp, 4
	mov	DWORD PTR _shift$[ebp], eax
; Line 2715
	cmp	DWORD PTR _shift$[ebp], -2147483648	; 80000000H
	je	SHORT $LN13@uprv_decNu@41
	cmp	DWORD PTR _shift$[ebp], -2147483645	; 80000003H
	je	SHORT $LN13@uprv_decNu@41
	cmp	DWORD PTR _shift$[ebp], -2147483646	; 80000002H
	je	SHORT $LN13@uprv_decNu@41
	mov	eax, DWORD PTR _shift$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _set$[ebp]
	cmp	eax, DWORD PTR [ecx]
	jle	SHORT $LN14@uprv_decNu@41
$LN13@uprv_decNu@41:
; Line 2716
	mov	DWORD PTR _status$[ebp], 128		; 00000080H
; Line 2717
	jmp	$LN18@uprv_decNu@41
$LN14@uprv_decNu@41:
; Line 2718
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 2719
	cmp	DWORD PTR _shift$[ebp], 0
	je	$LN18@uprv_decNu@41
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	jne	$LN18@uprv_decNu@41
; Line 2720
	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN10@uprv_decNu@41
; Line 2721
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN9@uprv_decNu@41
; Line 2722
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+9], 0
; Line 2723
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2725
	jmp	SHORT $LN8@uprv_decNu@41
$LN9@uprv_decNu@41:
; Line 2727
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _shift$[ebp]
	mov	edx, DWORD PTR _set$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jle	SHORT $LN7@uprv_decNu@41
; Line 2728
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _shift$[ebp]
	mov	edx, DWORD PTR _set$[ebp]
	sub	ecx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decDecap
	add	esp, 8
$LN7@uprv_decNu@41:
; Line 2732
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax], 1
	jg	SHORT $LN5@uprv_decNu@41
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	je	SHORT $LN8@uprv_decNu@41
$LN5@uprv_decNu@41:
; Line 2733
	mov	eax, DWORD PTR _shift$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	push	eax
	call	_decShiftToMost
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
$LN8@uprv_decNu@41:
; Line 2736
	jmp	SHORT $LN18@uprv_decNu@41
$LN10@uprv_decNu@41:
; Line 2737
	mov	eax, DWORD PTR _shift$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _res$[ebp]
	cmp	eax, DWORD PTR [ecx]
	jl	SHORT $LN3@uprv_decNu@41
; Line 2738
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+9], 0
; Line 2739
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2741
	jmp	SHORT $LN18@uprv_decNu@41
$LN3@uprv_decNu@41:
; Line 2742
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN23@uprv_decNu@41
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv162[ebp], eax
	jmp	SHORT $LN24@uprv_decNu@41
$LN23@uprv_decNu@41:
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv162[ebp], edx
$LN24@uprv_decNu@41:
	mov	eax, DWORD PTR _shift$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR tv162[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	add	edx, 9
	push	edx
	call	_decShiftToLeast
	add	esp, 12					; 0000000cH
; Line 2743
	mov	eax, DWORD PTR _shift$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], edx
$LN18@uprv_decNu@41:
; Line 2749
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@41
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@41:
; Line 2750
	mov	eax, DWORD PTR _res$[ebp]
; Line 2751
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@uprv_decNu@41
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@uprv_decNu@41:
	DD	1
	DD	$LN26@uprv_decNu@41
$LN26@uprv_decNu@41:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN25@uprv_decNu@41
$LN25@uprv_decNu@41:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberShift_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberSquareRoot_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberSquareRoot_56
_TEXT	SEGMENT
tv470 = -780						; size = 4
tv243 = -780						; size = 4
tv165 = -780						; size = 4
tv152 = -780						; size = 4
tv145 = -780						; size = 4
tv143 = -780						; size = 4
_ae$10790 = -580					; size = 4
_maxdrop$10785 = -568					; size = 4
_maxexp$10784 = -556					; size = 4
_todrop$10781 = -544					; size = 4
_mstatus$10775 = -532					; size = 4
_t$ = -520						; size = 4
_buft$ = -508						; size = 24
_b$ = -476						; size = 4
_a$ = -464						; size = 4
_f$ = -452						; size = 4
_allocbufb$ = -440					; size = 4
_allocbufa$ = -428					; size = 4
_allocbuff$ = -416					; size = 4
_bufb$ = -404						; size = 60
_bufa$ = -336						; size = 60
_buff$ = -268						; size = 48
_dropped$ = -212					; size = 4
_needbytes$ = -200					; size = 4
_ideal$ = -188						; size = 4
_exp$ = -176						; size = 4
_rstatus$ = -164					; size = 4
_ignore$ = -152						; size = 4
_status$ = -140						; size = 4
_residue$ = -128					; size = 4
_workp$ = -116						; size = 4
_maxp$ = -104						; size = 4
_dzero$ = -92						; size = 12
_approxset$ = -72					; size = 28
_workset$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberSquareRoot_56 PROC			; COMDAT
; Line 2830
	push	ebp
	mov	ebp, esp
	sub	esp, 780				; 0000030cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-780]
	mov	ecx, 195				; 000000c3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2835
	mov	DWORD PTR _residue$[ebp], 0
; Line 2836
	mov	DWORD PTR _status$[ebp], 0
	mov	DWORD PTR _ignore$[ebp], 0
; Line 2852
	mov	DWORD PTR _allocbuff$[ebp], 0
; Line 2853
	mov	DWORD PTR _allocbufa$[ebp], 0
; Line 2854
	mov	DWORD PTR _allocbufb$[ebp], 0
; Line 2855
	lea	eax, DWORD PTR _buff$[ebp]
	mov	DWORD PTR _f$[ebp], eax
; Line 2856
	lea	eax, DWORD PTR _bufa$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 2857
	lea	eax, DWORD PTR _bufb$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 2860
	lea	eax, DWORD PTR _buft$[ebp]
	mov	DWORD PTR _t$[ebp], eax
$LN42@uprv_decNu@42:
; Line 2882
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN39@uprv_decNu@42
; Line 2883
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN38@uprv_decNu@42
; Line 2884
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN37@uprv_decNu@42
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 128				; 00000080H
	mov	DWORD PTR _status$[ebp], eax
	jmp	SHORT $LN36@uprv_decNu@42
$LN37@uprv_decNu@42:
; Line 2885
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
$LN36@uprv_decNu@42:
; Line 2887
	jmp	SHORT $LN35@uprv_decNu@42
$LN38@uprv_decNu@42:
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decNaNs
	add	esp, 20					; 00000014H
$LN35@uprv_decNu@42:
; Line 2888
	jmp	$LN40@uprv_decNu@42
$LN39@uprv_decNu@42:
; Line 2894
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [eax+4]
	and	eax, -2					; fffffffeH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _ideal$[ebp], eax
; Line 2897
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN34@uprv_decNu@42
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN34@uprv_decNu@42
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN34@uprv_decNu@42
; Line 2898
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 2899
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _ideal$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 2901
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 2902
	jmp	$LN40@uprv_decNu@42
$LN34@uprv_decNu@42:
; Line 2906
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN33@uprv_decNu@42
; Line 2907
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 128				; 00000080H
	mov	DWORD PTR _status$[ebp], eax
; Line 2908
	jmp	$LN40@uprv_decNu@42
$LN33@uprv_decNu@42:
; Line 2918
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _rhs$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jge	SHORT $LN45@uprv_decNu@42
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv143[ebp], ecx
	jmp	SHORT $LN46@uprv_decNu@42
$LN45@uprv_decNu@42:
	mov	edx, DWORD PTR _set$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	DWORD PTR tv143[ebp], eax
$LN46@uprv_decNu@42:
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR _workp$[ebp], ecx
; Line 2919
	cmp	DWORD PTR _workp$[ebp], 7
	jge	SHORT $LN47@uprv_decNu@42
	mov	DWORD PTR tv145[ebp], 7
	jmp	SHORT $LN48@uprv_decNu@42
$LN47@uprv_decNu@42:
	mov	eax, DWORD PTR _workp$[ebp]
	mov	DWORD PTR tv145[ebp], eax
$LN48@uprv_decNu@42:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR _workp$[ebp], ecx
; Line 2920
	mov	eax, DWORD PTR _workp$[ebp]
	add	eax, 2
	mov	DWORD PTR _maxp$[ebp], eax
; Line 2922
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN49@uprv_decNu@42
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv152[ebp], eax
	jmp	SHORT $LN50@uprv_decNu@42
$LN49@uprv_decNu@42:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv152[ebp], edx
$LN50@uprv_decNu@42:
	mov	eax, DWORD PTR tv152[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 2923
	cmp	DWORD PTR _needbytes$[ebp], 48		; 00000030H
	jle	SHORT $LN32@uprv_decNu@42
; Line 2924
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbuff$[ebp], eax
; Line 2925
	cmp	DWORD PTR _allocbuff$[ebp], 0
	jne	SHORT $LN31@uprv_decNu@42
; Line 2926
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _status$[ebp], eax
; Line 2927
	jmp	$LN40@uprv_decNu@42
$LN31@uprv_decNu@42:
; Line 2928
	mov	eax, DWORD PTR _allocbuff$[ebp]
	mov	DWORD PTR _f$[ebp], eax
$LN32@uprv_decNu@42:
; Line 2931
	cmp	DWORD PTR _maxp$[ebp], 49		; 00000031H
	jg	SHORT $LN51@uprv_decNu@42
	mov	eax, DWORD PTR _maxp$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv165[ebp], ecx
	jmp	SHORT $LN52@uprv_decNu@42
$LN51@uprv_decNu@42:
	mov	edx, DWORD PTR _maxp$[ebp]
	mov	DWORD PTR tv165[ebp], edx
$LN52@uprv_decNu@42:
	mov	eax, DWORD PTR tv165[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 2932
	cmp	DWORD PTR _needbytes$[ebp], 60		; 0000003cH
	jle	SHORT $LN30@uprv_decNu@42
; Line 2933
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbufa$[ebp], eax
; Line 2934
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbufb$[ebp], eax
; Line 2935
	cmp	DWORD PTR _allocbufa$[ebp], 0
	je	SHORT $LN28@uprv_decNu@42
	cmp	DWORD PTR _allocbufb$[ebp], 0
	jne	SHORT $LN29@uprv_decNu@42
$LN28@uprv_decNu@42:
; Line 2936
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _status$[ebp], eax
; Line 2937
	jmp	$LN40@uprv_decNu@42
$LN29@uprv_decNu@42:
; Line 2938
	mov	eax, DWORD PTR _allocbufa$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 2939
	mov	eax, DWORD PTR _allocbufb$[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN30@uprv_decNu@42:
; Line 2943
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 2944
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _f$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _exp$[ebp], ecx
; Line 2945
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 2948
	push	64					; 00000040H
	lea	eax, DWORD PTR _workset$[ebp]
	push	eax
	call	_uprv_decContextDefault_56
	add	esp, 8
; Line 2949
	mov	DWORD PTR _workset$[ebp+4], 999999999	; 3b9ac9ffH
; Line 2950
	mov	DWORD PTR _workset$[ebp+8], -999999999	; c4653601H
; Line 2956
	mov	eax, DWORD PTR _workp$[ebp]
	mov	DWORD PTR _workset$[ebp], eax
; Line 2957
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+8], 0
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax], 3
; Line 2958
	mov	eax, DWORD PTR _a$[ebp]
	mov	BYTE PTR [eax+8], 0
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 3
; Line 2959
	mov	eax, DWORD PTR _exp$[ebp]
	and	eax, 1
	jne	SHORT $LN27@uprv_decNu@42
; Line 2961
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+4], -3			; fffffffdH
; Line 2962
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+4], -3			; fffffffdH
; Line 2970
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+9], 9
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+10], 5
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+11], 2
; Line 2971
	mov	eax, DWORD PTR _a$[ebp]
	mov	BYTE PTR [eax+9], 9
	mov	eax, DWORD PTR _a$[ebp]
	mov	BYTE PTR [eax+10], 1
	mov	eax, DWORD PTR _a$[ebp]
	mov	BYTE PTR [eax+11], 8
; Line 2974
	jmp	SHORT $LN26@uprv_decNu@42
$LN27@uprv_decNu@42:
; Line 2976
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 2977
	mov	eax, DWORD PTR _exp$[ebp]
	add	eax, 1
	mov	DWORD PTR _exp$[ebp], eax
; Line 2978
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+4], -4			; fffffffcH
; Line 2979
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+4], -2			; fffffffeH
; Line 2987
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+9], 9
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+10], 1
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+11], 8
; Line 2988
	mov	eax, DWORD PTR _a$[ebp]
	mov	BYTE PTR [eax+9], 9
	mov	eax, DWORD PTR _a$[ebp]
	mov	BYTE PTR [eax+10], 5
	mov	eax, DWORD PTR _a$[ebp]
	mov	BYTE PTR [eax+11], 2
$LN26@uprv_decNu@42:
; Line 2992
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 2993
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 2998
	lea	eax, DWORD PTR _dzero$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 2999
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 3000
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+9], 5
; Line 3001
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+4], -1
; Line 3002
	mov	DWORD PTR _workset$[ebp], 3
$LN25@uprv_decNu@42:
; Line 3003
	mov	eax, DWORD PTR _workset$[ebp]
	cmp	eax, DWORD PTR _maxp$[ebp]
	jge	$LN24@uprv_decNu@42
; Line 3005
	mov	eax, DWORD PTR _workset$[ebp]
	lea	ecx, DWORD PTR [eax+eax-2]
	cmp	ecx, DWORD PTR _maxp$[ebp]
	jle	SHORT $LN53@uprv_decNu@42
	mov	edx, DWORD PTR _maxp$[ebp]
	mov	DWORD PTR tv243[ebp], edx
	jmp	SHORT $LN54@uprv_decNu@42
$LN53@uprv_decNu@42:
	mov	eax, DWORD PTR _workset$[ebp]
	lea	ecx, DWORD PTR [eax+eax-2]
	mov	DWORD PTR tv243[ebp], ecx
$LN54@uprv_decNu@42:
	mov	edx, DWORD PTR tv243[ebp]
	mov	DWORD PTR _workset$[ebp], edx
; Line 3008
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	128					; 00000080H
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decDivideOp
	add	esp, 24					; 00000018H
; Line 3009
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 3010
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 3011
	jmp	$LN25@uprv_decNu@42
$LN24@uprv_decNu@42:
; Line 3017
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _approxset$[ebp]
	rep movsd
; Line 3018
	mov	DWORD PTR _approxset$[ebp+12], 3
; Line 3019
	mov	eax, DWORD PTR _exp$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 3020
	mov	DWORD PTR _rstatus$[ebp], 0
; Line 3021
	mov	DWORD PTR _residue$[ebp], 0
; Line 3022
	lea	eax, DWORD PTR _rstatus$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	lea	edx, DWORD PTR _approxset$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 3023
	lea	eax, DWORD PTR _rstatus$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	lea	edx, DWORD PTR _approxset$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 3027
	mov	eax, DWORD PTR _rstatus$[ebp]
	and	eax, 512				; 00000200H
	je	SHORT $LN23@uprv_decNu@42
; Line 3028
	mov	eax, DWORD PTR _rstatus$[ebp]
	mov	DWORD PTR _status$[ebp], eax
; Line 3029
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 3030
	jmp	$LN40@uprv_decNu@42
$LN23@uprv_decNu@42:
; Line 3034
	mov	eax, DWORD PTR _rstatus$[ebp]
	and	eax, -2081				; fffff7dfH
	or	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR _status$[ebp], eax
; Line 3037
	mov	eax, DWORD PTR _exp$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, eax
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 3044
	mov	eax, DWORD PTR _workset$[ebp]
	sub	eax, 1
	mov	DWORD PTR _workset$[ebp], eax
; Line 3045
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	sub	ecx, 1
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3046
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	128					; 00000080H
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 3047
	mov	DWORD PTR _workset$[ebp+12], 1
; Line 3048
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 3049
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 3050
	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	$LN22@uprv_decNu@42
; Line 3052
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3053
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 3054
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	128					; 00000080H
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 3056
	mov	eax, DWORD PTR _exp$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _approxset$[ebp+8]
	sub	ecx, eax
	mov	DWORD PTR _approxset$[ebp+8], ecx
; Line 3057
	mov	eax, DWORD PTR _exp$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _approxset$[ebp+4]
	sub	ecx, eax
	mov	DWORD PTR _approxset$[ebp+4], ecx
; Line 3058
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _approxset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	lea	eax, DWORD PTR _dzero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 3060
	jmp	$LN21@uprv_decNu@42
$LN22@uprv_decNu@42:
; Line 3061
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 3062
	mov	DWORD PTR _workset$[ebp+12], 5
; Line 3063
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 3064
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 3065
	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	$LN21@uprv_decNu@42
; Line 3066
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3067
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 3068
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 3070
	mov	eax, DWORD PTR _exp$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _approxset$[ebp+8]
	sub	ecx, eax
	mov	DWORD PTR _approxset$[ebp+8], ecx
; Line 3071
	mov	eax, DWORD PTR _exp$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _approxset$[ebp+4]
	sub	ecx, eax
	mov	DWORD PTR _approxset$[ebp+4], ecx
; Line 3072
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _approxset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	lea	eax, DWORD PTR _dzero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
$LN21@uprv_decNu@42:
; Line 3079
	mov	eax, DWORD PTR _exp$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 3083
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 3084
	lea	eax, DWORD PTR _dropped$[ebp]
	push	eax
	push	1
	push	1
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_decTrim
	add	esp, 20					; 00000014H
; Line 3090
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+ecx-1]
	cmp	edx, DWORD PTR _workp$[ebp]
	jle	SHORT $LN19@uprv_decNu@42
; Line 3091
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 2080				; 00000820H
	mov	DWORD PTR _status$[ebp], eax
; Line 3093
	jmp	$LN18@uprv_decNu@42
$LN19@uprv_decNu@42:
; Line 3094
	mov	DWORD PTR _mstatus$10775[ebp], 0
; Line 3095
	lea	eax, DWORD PTR _mstatus$10775[ebp]
	push	eax
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 3096
	mov	eax, DWORD PTR _mstatus$10775[ebp]
	and	eax, 512				; 00000200H
	je	SHORT $LN17@uprv_decNu@42
; Line 3097
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 2080				; 00000820H
	mov	DWORD PTR _status$[ebp], eax
; Line 3099
	jmp	$LN18@uprv_decNu@42
$LN17@uprv_decNu@42:
; Line 3100
	lea	eax, DWORD PTR _mstatus$10775[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _workset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 3101
	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN14@uprv_decNu@42
	mov	eax, DWORD PTR _t$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN14@uprv_decNu@42
	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN15@uprv_decNu@42
$LN14@uprv_decNu@42:
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 2080				; 00000820H
	mov	DWORD PTR _status$[ebp], eax
; Line 3102
	jmp	$LN18@uprv_decNu@42
$LN15@uprv_decNu@42:
; Line 3105
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _ideal$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _todrop$10781[ebp], ecx
; Line 3106
	jns	SHORT $LN12@uprv_decNu@42
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 2048				; 00000800H
	mov	DWORD PTR _status$[ebp], eax
; Line 3107
	jmp	$LN18@uprv_decNu@42
$LN12@uprv_decNu@42:
; Line 3109
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	DWORD PTR _maxexp$10784[ebp], edx
; Line 3110
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _maxexp$10784[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _maxdrop$10785[ebp], ecx
; Line 3111
	mov	eax, DWORD PTR _todrop$10781[ebp]
	cmp	eax, DWORD PTR _maxdrop$10785[ebp]
	jle	SHORT $LN10@uprv_decNu@42
	mov	eax, DWORD PTR _set$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN10@uprv_decNu@42
; Line 3112
	mov	eax, DWORD PTR _maxdrop$10785[ebp]
	mov	DWORD PTR _todrop$10781[ebp], eax
; Line 3113
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 1024				; 00000400H
	mov	DWORD PTR _status$[ebp], eax
$LN10@uprv_decNu@42:
; Line 3115
	mov	eax, DWORD PTR _dropped$[ebp]
	cmp	eax, DWORD PTR _todrop$10781[ebp]
	jge	SHORT $LN9@uprv_decNu@42
; Line 3116
	mov	eax, DWORD PTR _dropped$[ebp]
	mov	DWORD PTR _todrop$10781[ebp], eax
; Line 3117
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, 1024				; 00000400H
	mov	DWORD PTR _status$[ebp], eax
$LN9@uprv_decNu@42:
; Line 3119
	cmp	DWORD PTR _todrop$10781[ebp], 0
	jle	SHORT $LN18@uprv_decNu@42
; Line 3120
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN55@uprv_decNu@42
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv470[ebp], eax
	jmp	SHORT $LN56@uprv_decNu@42
$LN55@uprv_decNu@42:
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv470[ebp], edx
$LN56@uprv_decNu@42:
	mov	eax, DWORD PTR _todrop$10781[ebp]
	push	eax
	mov	ecx, DWORD PTR tv470[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, 9
	push	edx
	call	_decShiftToLeast
	add	esp, 12					; 0000000cH
; Line 3121
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _todrop$10781[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3122
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _todrop$10781[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx], ecx
$LN18@uprv_decNu@42:
; Line 3131
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 8192				; 00002000H
	je	SHORT $LN7@uprv_decNu@42
; Line 3132
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _ae$10790[ebp], ecx
; Line 3135
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	cmp	DWORD PTR _ae$10790[ebp], ecx
	jl	SHORT $LN6@uprv_decNu@42
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, -12289				; ffffcfffH
	mov	DWORD PTR _status$[ebp], eax
$LN6@uprv_decNu@42:
; Line 3140
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 32					; 00000020H
	jne	SHORT $LN7@uprv_decNu@42
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, -8193				; ffffdfffH
	mov	DWORD PTR _status$[ebp], eax
$LN7@uprv_decNu@42:
; Line 3143
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 3144
	xor	eax, eax
	jne	$LN42@uprv_decNu@42
$LN40@uprv_decNu@42:
; Line 3146
	cmp	DWORD PTR _allocbuff$[ebp], 0
	je	SHORT $LN4@uprv_decNu@42
	mov	eax, DWORD PTR _allocbuff$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN4@uprv_decNu@42:
; Line 3147
	cmp	DWORD PTR _allocbufa$[ebp], 0
	je	SHORT $LN3@uprv_decNu@42
	mov	eax, DWORD PTR _allocbufa$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN3@uprv_decNu@42:
; Line 3148
	cmp	DWORD PTR _allocbufb$[ebp], 0
	je	SHORT $LN2@uprv_decNu@42
	mov	eax, DWORD PTR _allocbufb$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@uprv_decNu@42:
; Line 3152
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@42
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@42:
; Line 3156
	mov	eax, DWORD PTR _res$[ebp]
; Line 3157
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN71@uprv_decNu@42
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 780				; 0000030cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN71@uprv_decNu@42:
	DD	13					; 0000000dH
	DD	$LN70@uprv_decNu@42
$LN70@uprv_decNu@42:
	DD	-36					; ffffffdcH
	DD	28					; 0000001cH
	DD	$LN57@uprv_decNu@42
	DD	-72					; ffffffb8H
	DD	28					; 0000001cH
	DD	$LN58@uprv_decNu@42
	DD	-92					; ffffffa4H
	DD	12					; 0000000cH
	DD	$LN59@uprv_decNu@42
	DD	-128					; ffffff80H
	DD	4
	DD	$LN60@uprv_decNu@42
	DD	-140					; ffffff74H
	DD	4
	DD	$LN61@uprv_decNu@42
	DD	-152					; ffffff68H
	DD	4
	DD	$LN62@uprv_decNu@42
	DD	-164					; ffffff5cH
	DD	4
	DD	$LN63@uprv_decNu@42
	DD	-212					; ffffff2cH
	DD	4
	DD	$LN64@uprv_decNu@42
	DD	-268					; fffffef4H
	DD	48					; 00000030H
	DD	$LN65@uprv_decNu@42
	DD	-336					; fffffeb0H
	DD	60					; 0000003cH
	DD	$LN66@uprv_decNu@42
	DD	-404					; fffffe6cH
	DD	60					; 0000003cH
	DD	$LN67@uprv_decNu@42
	DD	-508					; fffffe04H
	DD	24					; 00000018H
	DD	$LN68@uprv_decNu@42
	DD	-532					; fffffdecH
	DD	4
	DD	$LN69@uprv_decNu@42
$LN69@uprv_decNu@42:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN68@uprv_decNu@42:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN67@uprv_decNu@42:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	98					; 00000062H
	DB	0
$LN66@uprv_decNu@42:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	0
$LN65@uprv_decNu@42:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN64@uprv_decNu@42:
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN63@uprv_decNu@42:
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN62@uprv_decNu@42:
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
$LN61@uprv_decNu@42:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN60@uprv_decNu@42:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN59@uprv_decNu@42:
	DB	100					; 00000064H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
$LN58@uprv_decNu@42:
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN57@uprv_decNu@42:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_uprv_decNumberSquareRoot_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberSubtract_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberSubtract_56
_TEXT	SEGMENT
_status$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberSubtract_56 PROC				; COMDAT
; Line 3175
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3176
	mov	DWORD PTR _status$[ebp], 0
; Line 3178
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 3179
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@43
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@43:
; Line 3183
	mov	eax, DWORD PTR _res$[ebp]
; Line 3184
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@43
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@uprv_decNu@43:
	DD	1
	DD	$LN5@uprv_decNu@43
$LN5@uprv_decNu@43:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@uprv_decNu@43
$LN4@uprv_decNu@43:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_uprv_decNumberSubtract_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberToIntegralExact_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberToIntegralExact_56
_TEXT	SEGMENT
_status$ = -68						; size = 4
_workset$ = -56						; size = 28
_dn$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberToIntegralExact_56 PROC			; COMDAT
; Line 3208
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3211
	mov	DWORD PTR _status$[ebp], 0
; Line 3218
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN6@uprv_decNu@44
; Line 3219
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN5@uprv_decNu@44
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
	jmp	SHORT $LN4@uprv_decNu@44
$LN5@uprv_decNu@44:
; Line 3220
	lea	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decNaNs
	add	esp, 20					; 00000014H
$LN4@uprv_decNu@44:
; Line 3222
	jmp	SHORT $LN3@uprv_decNu@44
$LN6@uprv_decNu@44:
; Line 3224
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jl	SHORT $LN2@uprv_decNu@44
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
	jmp	SHORT $LN7@uprv_decNu@44
$LN2@uprv_decNu@44:
; Line 3226
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _workset$[ebp]
	rep movsd
; Line 3227
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _workset$[ebp], ecx
; Line 3228
	mov	DWORD PTR _workset$[ebp+16], 0
; Line 3229
	lea	eax, DWORD PTR _dn$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 3230
	lea	eax, DWORD PTR _workset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberQuantize_56
	add	esp, 16					; 00000010H
; Line 3231
	mov	eax, DWORD PTR _status$[ebp]
	or	eax, DWORD PTR _workset$[ebp+20]
	mov	DWORD PTR _status$[ebp], eax
$LN3@uprv_decNu@44:
; Line 3233
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@uprv_decNu@44
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decStatus
	add	esp, 12					; 0000000cH
$LN1@uprv_decNu@44:
; Line 3234
	mov	eax, DWORD PTR _res$[ebp]
$LN7@uprv_decNu@44:
; Line 3235
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@uprv_decNu@44
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@uprv_decNu@44:
	DD	3
	DD	$LN12@uprv_decNu@44
$LN12@uprv_decNu@44:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN9@uprv_decNu@44
	DD	-56					; ffffffc8H
	DD	28					; 0000001cH
	DD	$LN10@uprv_decNu@44
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN11@uprv_decNu@44
$LN11@uprv_decNu@44:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN10@uprv_decNu@44:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN9@uprv_decNu@44:
	DB	100					; 00000064H
	DB	110					; 0000006eH
	DB	0
_uprv_decNumberToIntegralExact_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberToIntegralValue_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberToIntegralValue_56
_TEXT	SEGMENT
_workset$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_uprv_decNumberToIntegralValue_56 PROC			; COMDAT
; Line 3238
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3239
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _workset$[ebp]
	rep movsd
; Line 3240
	mov	DWORD PTR _workset$[ebp+16], 0
; Line 3241
	lea	eax, DWORD PTR _workset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_uprv_decNumberToIntegralExact_56
	add	esp, 12					; 0000000cH
; Line 3244
	mov	eax, DWORD PTR _workset$[ebp+20]
	and	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _set$[ebp]
	or	eax, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _set$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 3245
	mov	eax, DWORD PTR _res$[ebp]
; Line 3246
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@uprv_decNu@45
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@uprv_decNu@45:
	DD	1
	DD	$LN4@uprv_decNu@45
$LN4@uprv_decNu@45:
	DD	-36					; ffffffdcH
	DD	28					; 0000001cH
	DD	$LN3@uprv_decNu@45
$LN3@uprv_decNu@45:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_uprv_decNumberToIntegralValue_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberXor_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberXor_56
_TEXT	SEGMENT
tv151 = -328						; size = 4
tv143 = -328						; size = 4
tv135 = -328						; size = 4
tv95 = -328						; size = 4
_j$10865 = -128						; size = 4
_i$10864 = -116						; size = 4
_b$10858 = -101						; size = 1
_a$10857 = -89						; size = 1
_msudigs$ = -80						; size = 4
_msuc$ = -68						; size = 4
_uc$ = -56						; size = 4
_msub$ = -44						; size = 4
_msua$ = -32						; size = 4
_ub$ = -20						; size = 4
_ua$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_uprv_decNumberXor_56 PROC				; COMDAT
; Line 3264
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3274
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN15@uprv_decNu@46
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN15@uprv_decNu@46
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	jne	SHORT $LN15@uprv_decNu@46
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN15@uprv_decNu@46
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN15@uprv_decNu@46
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN16@uprv_decNu@46
$LN15@uprv_decNu@46:
; Line 3275
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decStatus
	add	esp, 12					; 0000000cH
; Line 3276
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN17@uprv_decNu@46
$LN16@uprv_decNu@46:
; Line 3279
	mov	eax, DWORD PTR _lhs$[ebp]
	add	eax, 9
	mov	DWORD PTR _ua$[ebp], eax
; Line 3280
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 9
	mov	DWORD PTR _ub$[ebp], eax
; Line 3281
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	mov	DWORD PTR _uc$[ebp], eax
; Line 3282
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN19@uprv_decNu@46
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN20@uprv_decNu@46
$LN19@uprv_decNu@46:
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv95[ebp], edx
$LN20@uprv_decNu@46:
	mov	eax, DWORD PTR tv95[ebp]
	mov	ecx, DWORD PTR _ua$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msua$[ebp], edx
; Line 3283
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN21@uprv_decNu@46
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN22@uprv_decNu@46
$LN21@uprv_decNu@46:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv135[ebp], edx
$LN22@uprv_decNu@46:
	mov	eax, DWORD PTR tv135[ebp]
	mov	ecx, DWORD PTR _ub$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msub$[ebp], edx
; Line 3284
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN23@uprv_decNu@46
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN24@uprv_decNu@46
$LN23@uprv_decNu@46:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv143[ebp], edx
$LN24@uprv_decNu@46:
	mov	eax, DWORD PTR tv143[ebp]
	mov	ecx, DWORD PTR _uc$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msuc$[ebp], edx
; Line 3285
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN25@uprv_decNu@46
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv151[ebp], eax
	jmp	SHORT $LN26@uprv_decNu@46
$LN25@uprv_decNu@46:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv151[ebp], edx
$LN26@uprv_decNu@46:
	mov	eax, DWORD PTR tv151[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	DWORD PTR _msudigs$[ebp], edx
	jmp	SHORT $LN14@uprv_decNu@46
$LN13@uprv_decNu@46:
; Line 3286
	mov	eax, DWORD PTR _ua$[ebp]
	add	eax, 1
	mov	DWORD PTR _ua$[ebp], eax
	mov	ecx, DWORD PTR _ub$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ub$[ebp], ecx
	mov	edx, DWORD PTR _uc$[ebp]
	add	edx, 1
	mov	DWORD PTR _uc$[ebp], edx
$LN14@uprv_decNu@46:
	mov	eax, DWORD PTR _uc$[ebp]
	cmp	eax, DWORD PTR _msuc$[ebp]
	ja	$LN12@uprv_decNu@46
; Line 3288
	mov	eax, DWORD PTR _ua$[ebp]
	cmp	eax, DWORD PTR _msua$[ebp]
	jbe	SHORT $LN11@uprv_decNu@46
	mov	BYTE PTR _a$10857[ebp], 0
	jmp	SHORT $LN10@uprv_decNu@46
$LN11@uprv_decNu@46:
; Line 3289
	mov	eax, DWORD PTR _ua$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _a$10857[ebp], cl
$LN10@uprv_decNu@46:
; Line 3290
	mov	eax, DWORD PTR _ub$[ebp]
	cmp	eax, DWORD PTR _msub$[ebp]
	jbe	SHORT $LN9@uprv_decNu@46
	mov	BYTE PTR _b$10858[ebp], 0
	jmp	SHORT $LN8@uprv_decNu@46
$LN9@uprv_decNu@46:
; Line 3291
	mov	eax, DWORD PTR _ub$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$10858[ebp], cl
$LN8@uprv_decNu@46:
; Line 3292
	mov	eax, DWORD PTR _uc$[ebp]
	mov	BYTE PTR [eax], 0
; Line 3293
	movzx	eax, BYTE PTR _a$10857[ebp]
	movzx	ecx, BYTE PTR _b$10858[ebp]
	or	eax, ecx
	je	$LN7@uprv_decNu@46
; Line 3296
	mov	DWORD PTR _i$10864[ebp], 0
	jmp	SHORT $LN6@uprv_decNu@46
$LN5@uprv_decNu@46:
	mov	eax, DWORD PTR _i$10864[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10864[ebp], eax
$LN6@uprv_decNu@46:
	cmp	DWORD PTR _i$10864[ebp], 1
	jge	$LN7@uprv_decNu@46
; Line 3297
	movzx	eax, BYTE PTR _a$10857[ebp]
	movzx	ecx, BYTE PTR _b$10858[ebp]
	xor	eax, ecx
	and	eax, 1
	je	SHORT $LN3@uprv_decNu@46
	mov	eax, DWORD PTR _uc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$10864[ebp]
	movzx	eax, BYTE PTR _DECPOWERS[edx*4]
	add	ecx, eax
	mov	edx, DWORD PTR _uc$[ebp]
	mov	BYTE PTR [edx], cl
$LN3@uprv_decNu@46:
; Line 3298
	movzx	eax, BYTE PTR _a$10857[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _j$10865[ebp], edx
; Line 3299
	movzx	eax, BYTE PTR _a$10857[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	BYTE PTR _a$10857[ebp], al
; Line 3300
	movzx	eax, BYTE PTR _b$10858[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	or	edx, DWORD PTR _j$10865[ebp]
	mov	DWORD PTR _j$10865[ebp], edx
; Line 3301
	movzx	eax, BYTE PTR _b$10858[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	BYTE PTR _b$10858[ebp], al
; Line 3302
	cmp	DWORD PTR _j$10865[ebp], 1
	jle	SHORT $LN2@uprv_decNu@46
; Line 3303
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	push	128					; 00000080H
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decStatus
	add	esp, 12					; 0000000cH
; Line 3304
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN17@uprv_decNu@46
$LN2@uprv_decNu@46:
; Line 3306
	mov	eax, DWORD PTR _uc$[ebp]
	cmp	eax, DWORD PTR _msuc$[ebp]
	jne	SHORT $LN1@uprv_decNu@46
	mov	eax, DWORD PTR _msudigs$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$10864[ebp], eax
	jne	SHORT $LN1@uprv_decNu@46
	jmp	SHORT $LN7@uprv_decNu@46
$LN1@uprv_decNu@46:
; Line 3307
	jmp	$LN5@uprv_decNu@46
$LN7@uprv_decNu@46:
; Line 3309
	jmp	$LN13@uprv_decNu@46
$LN12@uprv_decNu@46:
; Line 3311
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	mov	ecx, DWORD PTR _uc$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	add	edx, 9
	push	edx
	call	_decGetDigits
	add	esp, 8
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 3312
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 3313
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 0
; Line 3314
	mov	eax, DWORD PTR _res$[ebp]
$LN17@uprv_decNu@46:
; Line 3315
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberXor_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberClass_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberClass_56
_TEXT	SEGMENT
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_uprv_decNumberClass_56 PROC				; COMDAT
; Line 3328
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3329
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN9@uprv_decNu@47
; Line 3330
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN8@uprv_decNu@47
	mov	eax, 1
	jmp	$LN10@uprv_decNu@47
$LN8@uprv_decNu@47:
; Line 3331
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 16					; 00000010H
	je	SHORT $LN7@uprv_decNu@47
	xor	eax, eax
	jmp	$LN10@uprv_decNu@47
$LN7@uprv_decNu@47:
; Line 3333
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN6@uprv_decNu@47
	mov	eax, 2
	jmp	$LN10@uprv_decNu@47
$LN6@uprv_decNu@47:
; Line 3334
	mov	eax, 9
	jmp	$LN10@uprv_decNu@47
$LN9@uprv_decNu@47:
; Line 3337
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	push	ecx
	call	_uprv_decNumberIsNormal_56
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@uprv_decNu@47
; Line 3338
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN4@uprv_decNu@47
	mov	eax, 3
	jmp	SHORT $LN10@uprv_decNu@47
$LN4@uprv_decNu@47:
; Line 3339
	mov	eax, 8
	jmp	SHORT $LN10@uprv_decNu@47
$LN5@uprv_decNu@47:
; Line 3342
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN3@uprv_decNu@47
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN3@uprv_decNu@47
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN3@uprv_decNu@47
; Line 3343
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN2@uprv_decNu@47
	mov	eax, 5
	jmp	SHORT $LN10@uprv_decNu@47
$LN2@uprv_decNu@47:
; Line 3344
	mov	eax, 6
	jmp	SHORT $LN10@uprv_decNu@47
$LN3@uprv_decNu@47:
; Line 3346
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN1@uprv_decNu@47
	mov	eax, 4
	jmp	SHORT $LN10@uprv_decNu@47
$LN1@uprv_decNu@47:
; Line 3347
	mov	eax, 7
$LN10@uprv_decNu@47:
; Line 3348
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberClass_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_07DJMIGIHO@Invalid?$AA@			; `string'
PUBLIC	??_C@_04NLILHOGP@sNaN?$AA@			; `string'
PUBLIC	??_C@_03ICJPMMHB@NaN?$AA@			; `string'
PUBLIC	??_C@_09BLDCEMOH@?9Infinity?$AA@		; `string'
PUBLIC	??_C@_09BGCMDMKA@?$CLInfinity?$AA@		; `string'
PUBLIC	??_C@_0L@ELIBADCO@?9Subnormal?$AA@		; `string'
PUBLIC	??_C@_0L@KDDEMJGN@?$CLSubnormal?$AA@		; `string'
PUBLIC	??_C@_05DOEEFDLJ@?9Zero?$AA@			; `string'
PUBLIC	??_C@_05OIBNLAKE@?$CLZero?$AA@			; `string'
PUBLIC	??_C@_07NPDLPNHH@?9Normal?$AA@			; `string'
PUBLIC	??_C@_07BJFEPEPA@?$CLNormal?$AA@		; `string'
PUBLIC	_uprv_decNumberClassToString_56
;	COMDAT ??_C@_07DJMIGIHO@Invalid?$AA@
CONST	SEGMENT
??_C@_07DJMIGIHO@Invalid?$AA@ DB 'Invalid', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NLILHOGP@sNaN?$AA@
CONST	SEGMENT
??_C@_04NLILHOGP@sNaN?$AA@ DB 'sNaN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICJPMMHB@NaN?$AA@
CONST	SEGMENT
??_C@_03ICJPMMHB@NaN?$AA@ DB 'NaN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09BLDCEMOH@?9Infinity?$AA@
CONST	SEGMENT
??_C@_09BLDCEMOH@?9Infinity?$AA@ DB '-Infinity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BGCMDMKA@?$CLInfinity?$AA@
CONST	SEGMENT
??_C@_09BGCMDMKA@?$CLInfinity?$AA@ DB '+Infinity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ELIBADCO@?9Subnormal?$AA@
CONST	SEGMENT
??_C@_0L@ELIBADCO@?9Subnormal?$AA@ DB '-Subnormal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KDDEMJGN@?$CLSubnormal?$AA@
CONST	SEGMENT
??_C@_0L@KDDEMJGN@?$CLSubnormal?$AA@ DB '+Subnormal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DOEEFDLJ@?9Zero?$AA@
CONST	SEGMENT
??_C@_05DOEEFDLJ@?9Zero?$AA@ DB '-Zero', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OIBNLAKE@?$CLZero?$AA@
CONST	SEGMENT
??_C@_05OIBNLAKE@?$CLZero?$AA@ DB '+Zero', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NPDLPNHH@?9Normal?$AA@
CONST	SEGMENT
??_C@_07NPDLPNHH@?9Normal?$AA@ DB '-Normal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BJFEPEPA@?$CLNormal?$AA@
CONST	SEGMENT
??_C@_07BJFEPEPA@?$CLNormal?$AA@ DB '+Normal', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _uprv_decNumberClassToString_56
_TEXT	SEGMENT
_eclass$ = 8						; size = 4
_uprv_decNumberClassToString_56 PROC			; COMDAT
; Line 3356
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3357
	cmp	DWORD PTR _eclass$[ebp], 8
	jne	SHORT $LN10@uprv_decNu@48
	mov	eax, OFFSET ??_C@_07BJFEPEPA@?$CLNormal?$AA@
	jmp	SHORT $LN11@uprv_decNu@48
$LN10@uprv_decNu@48:
; Line 3358
	cmp	DWORD PTR _eclass$[ebp], 3
	jne	SHORT $LN9@uprv_decNu@48
	mov	eax, OFFSET ??_C@_07NPDLPNHH@?9Normal?$AA@
	jmp	SHORT $LN11@uprv_decNu@48
$LN9@uprv_decNu@48:
; Line 3359
	cmp	DWORD PTR _eclass$[ebp], 6
	jne	SHORT $LN8@uprv_decNu@48
	mov	eax, OFFSET ??_C@_05OIBNLAKE@?$CLZero?$AA@
	jmp	SHORT $LN11@uprv_decNu@48
$LN8@uprv_decNu@48:
; Line 3360
	cmp	DWORD PTR _eclass$[ebp], 5
	jne	SHORT $LN7@uprv_decNu@48
	mov	eax, OFFSET ??_C@_05DOEEFDLJ@?9Zero?$AA@
	jmp	SHORT $LN11@uprv_decNu@48
$LN7@uprv_decNu@48:
; Line 3361
	cmp	DWORD PTR _eclass$[ebp], 7
	jne	SHORT $LN6@uprv_decNu@48
	mov	eax, OFFSET ??_C@_0L@KDDEMJGN@?$CLSubnormal?$AA@
	jmp	SHORT $LN11@uprv_decNu@48
$LN6@uprv_decNu@48:
; Line 3362
	cmp	DWORD PTR _eclass$[ebp], 4
	jne	SHORT $LN5@uprv_decNu@48
	mov	eax, OFFSET ??_C@_0L@ELIBADCO@?9Subnormal?$AA@
	jmp	SHORT $LN11@uprv_decNu@48
$LN5@uprv_decNu@48:
; Line 3363
	cmp	DWORD PTR _eclass$[ebp], 9
	jne	SHORT $LN4@uprv_decNu@48
	mov	eax, OFFSET ??_C@_09BGCMDMKA@?$CLInfinity?$AA@
	jmp	SHORT $LN11@uprv_decNu@48
$LN4@uprv_decNu@48:
; Line 3364
	cmp	DWORD PTR _eclass$[ebp], 2
	jne	SHORT $LN3@uprv_decNu@48
	mov	eax, OFFSET ??_C@_09BLDCEMOH@?9Infinity?$AA@
	jmp	SHORT $LN11@uprv_decNu@48
$LN3@uprv_decNu@48:
; Line 3365
	cmp	DWORD PTR _eclass$[ebp], 1
	jne	SHORT $LN2@uprv_decNu@48
	mov	eax, OFFSET ??_C@_03ICJPMMHB@NaN?$AA@
	jmp	SHORT $LN11@uprv_decNu@48
$LN2@uprv_decNu@48:
; Line 3366
	cmp	DWORD PTR _eclass$[ebp], 0
	jne	SHORT $LN1@uprv_decNu@48
	mov	eax, OFFSET ??_C@_04NLILHOGP@sNaN?$AA@
	jmp	SHORT $LN11@uprv_decNu@48
$LN1@uprv_decNu@48:
; Line 3367
	mov	eax, OFFSET ??_C@_07DJMIGIHO@Invalid?$AA@
$LN11@uprv_decNu@48:
; Line 3368
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberClassToString_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_decNumberCopy_56
_TEXT	SEGMENT
tv82 = -232						; size = 4
_d$10920 = -32						; size = 4
_s$10919 = -20						; size = 4
_smsup$10918 = -8					; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_uprv_decNumberCopy_56 PROC				; COMDAT
; Line 3381
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3387
	mov	eax, DWORD PTR _dest$[ebp]
	cmp	eax, DWORD PTR _src$[ebp]
	jne	SHORT $LN5@uprv_decNu@49
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN6@uprv_decNu@49
$LN5@uprv_decNu@49:
; Line 3393
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax+8], dl
; Line 3394
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 3395
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 3396
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx+9]
	mov	BYTE PTR [eax+9], dl
; Line 3397
	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax], 1
	jle	SHORT $LN4@uprv_decNu@49
; Line 3402
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _d$10920[ebp], eax
; Line 3403
	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN8@uprv_decNu@49
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN9@uprv_decNu@49
$LN8@uprv_decNu@49:
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv82[ebp], edx
$LN9@uprv_decNu@49:
	mov	eax, DWORD PTR tv82[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	lea	edx, DWORD PTR [ecx+eax+9]
	mov	DWORD PTR _smsup$10918[ebp], edx
; Line 3404
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _s$10919[ebp], eax
	jmp	SHORT $LN3@uprv_decNu@49
$LN2@uprv_decNu@49:
	mov	eax, DWORD PTR _s$10919[ebp]
	add	eax, 1
	mov	DWORD PTR _s$10919[ebp], eax
	mov	ecx, DWORD PTR _d$10920[ebp]
	add	ecx, 1
	mov	DWORD PTR _d$10920[ebp], ecx
$LN3@uprv_decNu@49:
	mov	eax, DWORD PTR _s$10919[ebp]
	cmp	eax, DWORD PTR _smsup$10918[ebp]
	jae	SHORT $LN4@uprv_decNu@49
	mov	eax, DWORD PTR _d$10920[ebp]
	mov	ecx, DWORD PTR _s$10919[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN2@uprv_decNu@49
$LN4@uprv_decNu@49:
; Line 3406
	mov	eax, DWORD PTR _dest$[ebp]
$LN6@uprv_decNu@49:
; Line 3407
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberCopy_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_decNumberCopyAbs_56
_TEXT	SEGMENT
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_uprv_decNumberCopyAbs_56 PROC				; COMDAT
; Line 3421
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3425
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 3426
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [edx+8], cl
; Line 3427
	mov	eax, DWORD PTR _res$[ebp]
; Line 3428
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberCopyAbs_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberCopyNegate_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberCopyNegate_56
_TEXT	SEGMENT
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_uprv_decNumberCopyNegate_56 PROC			; COMDAT
; Line 3442
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3446
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 3447
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	xor	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [edx+8], cl
; Line 3448
	mov	eax, DWORD PTR _res$[ebp]
; Line 3449
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberCopyNegate_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_decNumberCopySign_56
_TEXT	SEGMENT
_sign$ = -5						; size = 1
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_uprv_decNumberCopySign_56 PROC				; COMDAT
; Line 3464
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3469
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	mov	BYTE PTR _sign$[ebp], cl
; Line 3470
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 3471
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [edx+8], cl
; Line 3472
	movzx	eax, BYTE PTR _sign$[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	or	edx, eax
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], dl
; Line 3473
	mov	eax, DWORD PTR _res$[ebp]
; Line 3474
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberCopySign_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberGetBCD_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberGetBCD_56
_TEXT	SEGMENT
_up$ = -20						; size = 4
_ub$ = -8						; size = 4
_dn$ = 8						; size = 4
_bcd$ = 12						; size = 4
_uprv_decNumberGetBCD_56 PROC				; COMDAT
; Line 3486
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3487
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _bcd$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _ub$[ebp], eax
; Line 3488
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _up$[ebp], eax
	jmp	SHORT $LN3@uprv_decNu@50
$LN2@uprv_decNu@50:
; Line 3491
	mov	eax, DWORD PTR _ub$[ebp]
	sub	eax, 1
	mov	DWORD PTR _ub$[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 1
	mov	DWORD PTR _up$[ebp], ecx
$LN3@uprv_decNu@50:
	mov	eax, DWORD PTR _ub$[ebp]
	cmp	eax, DWORD PTR _bcd$[ebp]
	jb	SHORT $LN1@uprv_decNu@50
	mov	eax, DWORD PTR _ub$[ebp]
	mov	ecx, DWORD PTR _up$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN2@uprv_decNu@50
$LN1@uprv_decNu@50:
; Line 3505
	mov	eax, DWORD PTR _bcd$[ebp]
; Line 3506
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberGetBCD_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberSetBCD_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberSetBCD_56
_TEXT	SEGMENT
tv70 = -220						; size = 4
_ub$ = -20						; size = 4
_up$ = -8						; size = 4
_dn$ = 8						; size = 4
_bcd$ = 12						; size = 4
_n$ = 16						; size = 4
_uprv_decNumberSetBCD_56 PROC				; COMDAT
; Line 3520
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3521
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN6@uprv_decNu@51
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN7@uprv_decNu@51
$LN6@uprv_decNu@51:
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv70[ebp], edx
$LN7@uprv_decNu@51:
	mov	eax, DWORD PTR tv70[ebp]
	mov	ecx, DWORD PTR _dn$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _up$[ebp], edx
; Line 3522
	mov	eax, DWORD PTR _bcd$[ebp]
	mov	DWORD PTR _ub$[ebp], eax
	jmp	SHORT $LN3@uprv_decNu@51
$LN2@uprv_decNu@51:
; Line 3525
	mov	eax, DWORD PTR _ub$[ebp]
	add	eax, 1
	mov	DWORD PTR _ub$[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _up$[ebp], ecx
$LN3@uprv_decNu@51:
	mov	eax, DWORD PTR _bcd$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	cmp	DWORD PTR _ub$[ebp], eax
	jae	SHORT $LN1@uprv_decNu@51
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR _ub$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN2@uprv_decNu@51
$LN1@uprv_decNu@51:
; Line 3535
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 3536
	mov	eax, DWORD PTR _dn$[ebp]
; Line 3537
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberSetBCD_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_decNumberIsNormal_56
_TEXT	SEGMENT
_ae$ = -8						; size = 4
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_uprv_decNumberIsNormal_56 PROC				; COMDAT
; Line 3545
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3551
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN3@uprv_decNu@52
	xor	eax, eax
	jmp	SHORT $LN4@uprv_decNu@52
$LN3@uprv_decNu@52:
; Line 3552
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN2@uprv_decNu@52
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@uprv_decNu@52
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN2@uprv_decNu@52
	xor	eax, eax
	jmp	SHORT $LN4@uprv_decNu@52
$LN2@uprv_decNu@52:
; Line 3554
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _dn$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _ae$[ebp], ecx
; Line 3555
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _ae$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN1@uprv_decNu@52
	xor	eax, eax
	jmp	SHORT $LN4@uprv_decNu@52
$LN1@uprv_decNu@52:
; Line 3556
	mov	eax, 1
$LN4@uprv_decNu@52:
; Line 3557
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberIsNormal_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_decNumberIsSubnormal_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberIsSubnormal_56
_TEXT	SEGMENT
_ae$ = -8						; size = 4
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_uprv_decNumberIsSubnormal_56 PROC			; COMDAT
; Line 3565
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3571
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN3@uprv_decNu@53
	xor	eax, eax
	jmp	SHORT $LN4@uprv_decNu@53
$LN3@uprv_decNu@53:
; Line 3572
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN2@uprv_decNu@53
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@uprv_decNu@53
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN2@uprv_decNu@53
	xor	eax, eax
	jmp	SHORT $LN4@uprv_decNu@53
$LN2@uprv_decNu@53:
; Line 3574
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _dn$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _ae$[ebp], ecx
; Line 3575
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _ae$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN1@uprv_decNu@53
	mov	eax, 1
	jmp	SHORT $LN4@uprv_decNu@53
$LN1@uprv_decNu@53:
; Line 3576
	xor	eax, eax
$LN4@uprv_decNu@53:
; Line 3577
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberIsSubnormal_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uprv_decNumberTrim_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_decNumberTrim_56
_TEXT	SEGMENT
_set$ = -48						; size = 28
_dropped$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_dn$ = 8						; size = 4
_uprv_decNumberTrim_56 PROC				; COMDAT
; Line 3589
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3595
	push	0
	lea	eax, DWORD PTR _set$[ebp]
	push	eax
	call	_uprv_decContextDefault_56
	add	esp, 8
; Line 3596
	lea	eax, DWORD PTR _dropped$[ebp]
	push	eax
	push	1
	push	0
	lea	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dn$[ebp]
	push	edx
	call	_decTrim
	add	esp, 20					; 00000014H
; Line 3597
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@uprv_decNu@54
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@uprv_decNu@54:
	DD	2
	DD	$LN5@uprv_decNu@54
$LN5@uprv_decNu@54:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@uprv_decNu@54
	DD	-48					; ffffffd0H
	DD	28					; 0000001cH
	DD	$LN4@uprv_decNu@54
$LN4@uprv_decNu@54:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN3@uprv_decNu@54:
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_uprv_decNumberTrim_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@PPAFNJNB@decNumber?53?461?$AA@		; `string'
PUBLIC	_uprv_decNumberVersion_56
;	COMDAT ??_C@_0P@PPAFNJNB@decNumber?53?461?$AA@
CONST	SEGMENT
??_C@_0P@PPAFNJNB@decNumber?53?461?$AA@ DB 'decNumber 3.61', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _uprv_decNumberVersion_56
_TEXT	SEGMENT
_uprv_decNumberVersion_56 PROC				; COMDAT
; Line 3604
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3605
	mov	eax, OFFSET ??_C@_0P@PPAFNJNB@decNumber?53?461?$AA@
; Line 3606
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberVersion_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_decNumberZero_56
_TEXT	SEGMENT
_dn$ = 8						; size = 4
_uprv_decNumberZero_56 PROC				; COMDAT
; Line 3617
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3623
	mov	eax, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [eax+8], 0
; Line 3624
	mov	eax, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 3625
	mov	eax, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [eax], 1
; Line 3626
	mov	eax, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [eax+9], 0
; Line 3627
	mov	eax, DWORD PTR _dn$[ebp]
; Line 3628
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_decNumberZero_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_05KMOPHDFI@inity?$AA@			; `string'
PUBLIC	??_C@_03EJEJBNFP@Inf?$AA@			; `string'
EXTRN	_strcpy:PROC
;	COMDAT ??_C@_05KMOPHDFI@inity?$AA@
CONST	SEGMENT
??_C@_05KMOPHDFI@inity?$AA@ DB 'inity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EJEJBNFP@Inf?$AA@
CONST	SEGMENT
??_C@_03EJEJBNFP@Inf?$AA@ DB 'Inf', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _decToString
_TEXT	SEGMENT
tv143 = -328						; size = 4
tv71 = -328						; size = 4
_had$11081 = -125					; size = 1
_n$11040 = -116						; size = 4
_adj$11031 = -104					; size = 4
_pow$ = -92						; size = 4
_u$ = -80						; size = 4
_up$ = -68						; size = 4
_c$ = -56						; size = 4
_cut$ = -44						; size = 4
_pre$ = -32						; size = 4
_e$ = -20						; size = 4
_exp$ = -8						; size = 4
_dn$ = 8						; size = 4
_string$ = 12						; size = 4
_eng$ = 16						; size = 1
_decToString PROC					; COMDAT
; Line 3650
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3651
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _exp$[ebp], ecx
; Line 3655
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 3656
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN82@decToStrin
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN83@decToStrin
$LN82@decToStrin:
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv71[ebp], edx
$LN83@decToStrin:
	mov	eax, DWORD PTR tv71[ebp]
	mov	ecx, DWORD PTR _dn$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _up$[ebp], edx
; Line 3665
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN79@decToStrin
; Line 3666
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
; Line 3667
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN79@decToStrin:
; Line 3669
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	$LN78@decToStrin
; Line 3670
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN77@decToStrin
; Line 3671
	push	OFFSET ??_C@_03EJEJBNFP@Inf?$AA@
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 3672
	push	OFFSET ??_C@_05KMOPHDFI@inity?$AA@
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 3
	push	eax
	call	_strcpy
	add	esp, 8
; Line 3673
	jmp	$LN80@decToStrin
$LN77@decToStrin:
; Line 3675
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 16					; 00000010H
	je	SHORT $LN76@decToStrin
; Line 3676
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 115			; 00000073H
; Line 3677
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN76@decToStrin:
; Line 3679
	push	OFFSET ??_C@_03ICJPMMHB@NaN?$AA@
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 3680
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 3
	mov	DWORD PTR _c$[ebp], eax
; Line 3683
	cmp	DWORD PTR _exp$[ebp], 0
	jne	SHORT $LN74@decToStrin
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN78@decToStrin
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN78@decToStrin
$LN74@decToStrin:
	jmp	$LN80@decToStrin
$LN78@decToStrin:
; Line 3688
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN84@decToStrin
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN85@decToStrin
$LN84@decToStrin:
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv143[ebp], edx
$LN85@decToStrin:
	mov	eax, DWORD PTR tv143[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	DWORD PTR _cut$[ebp], edx
; Line 3689
	mov	eax, DWORD PTR _cut$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cut$[ebp], eax
; Line 3691
	cmp	DWORD PTR _exp$[ebp], 0
	jne	$LN73@decToStrin
	jmp	SHORT $LN72@decToStrin
$LN71@decToStrin:
; Line 3692
	mov	eax, DWORD PTR _up$[ebp]
	sub	eax, 1
	mov	DWORD PTR _up$[ebp], eax
$LN72@decToStrin:
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	cmp	DWORD PTR _up$[ebp], eax
	jb	$LN70@decToStrin
; Line 3693
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _u$[ebp], ecx
	jmp	SHORT $LN69@decToStrin
$LN68@decToStrin:
; Line 3694
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _cut$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _cut$[ebp], ecx
$LN69@decToStrin:
	cmp	DWORD PTR _cut$[ebp], 0
	jl	$LN67@decToStrin
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	eax, DWORD PTR _cut$[ebp]
	mov	ecx, DWORD PTR _DECPOWERS[eax*4]
	shl	ecx, 1
	mov	DWORD PTR _pow$[ebp], ecx
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jbe	SHORT $LN66@decToStrin
	mov	eax, DWORD PTR _pow$[ebp]
	shl	eax, 2
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN65@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN65@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN64@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN64@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
$LN66@decToStrin:
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN63@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN63@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN62@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN62@decToStrin:
	jmp	$LN68@decToStrin
$LN67@decToStrin:
; Line 3695
	mov	DWORD PTR _cut$[ebp], 0
; Line 3696
	jmp	$LN71@decToStrin
$LN70@decToStrin:
; Line 3697
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 0
; Line 3698
	jmp	$LN80@decToStrin
$LN73@decToStrin:
; Line 3701
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _exp$[ebp]
	mov	DWORD PTR _pre$[ebp], ecx
; Line 3702
	mov	DWORD PTR _e$[ebp], 0
; Line 3703
	cmp	DWORD PTR _exp$[ebp], 0
	jg	SHORT $LN60@decToStrin
	cmp	DWORD PTR _pre$[ebp], -5		; fffffffbH
	jge	$LN61@decToStrin
$LN60@decToStrin:
; Line 3704
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _exp$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _e$[ebp], eax
; Line 3705
	mov	DWORD PTR _pre$[ebp], 1
; Line 3706
	movzx	eax, BYTE PTR _eng$[ebp]
	test	eax, eax
	je	$LN61@decToStrin
	cmp	DWORD PTR _e$[ebp], 0
	je	$LN61@decToStrin
; Line 3710
	cmp	DWORD PTR _e$[ebp], 0
	jge	SHORT $LN58@decToStrin
; Line 3711
	mov	eax, DWORD PTR _e$[ebp]
	neg	eax
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _adj$11031[ebp], edx
; Line 3712
	cmp	DWORD PTR _adj$11031[ebp], 0
	je	SHORT $LN57@decToStrin
	mov	eax, 3
	sub	eax, DWORD PTR _adj$11031[ebp]
	mov	DWORD PTR _adj$11031[ebp], eax
$LN57@decToStrin:
; Line 3714
	jmp	SHORT $LN56@decToStrin
$LN58@decToStrin:
; Line 3715
	mov	eax, DWORD PTR _e$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _adj$11031[ebp], edx
$LN56@decToStrin:
; Line 3717
	mov	eax, DWORD PTR _e$[ebp]
	sub	eax, DWORD PTR _adj$11031[ebp]
	mov	DWORD PTR _e$[ebp], eax
; Line 3721
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN54@decToStrin
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN54@decToStrin
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN55@decToStrin
$LN54@decToStrin:
	mov	eax, DWORD PTR _pre$[ebp]
	add	eax, DWORD PTR _adj$11031[ebp]
	mov	DWORD PTR _pre$[ebp], eax
; Line 3722
	jmp	SHORT $LN61@decToStrin
$LN55@decToStrin:
; Line 3723
	cmp	DWORD PTR _adj$11031[ebp], 0
	je	SHORT $LN61@decToStrin
; Line 3724
	mov	eax, DWORD PTR _e$[ebp]
	add	eax, 3
	mov	DWORD PTR _e$[ebp], eax
; Line 3725
	mov	eax, 2
	sub	eax, DWORD PTR _adj$11031[ebp]
	neg	eax
	mov	DWORD PTR _pre$[ebp], eax
$LN61@decToStrin:
; Line 3732
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _u$[ebp], ecx
; Line 3733
	cmp	DWORD PTR _pre$[ebp], 0
	jle	$LN51@decToStrin
; Line 3734
	mov	eax, DWORD PTR _pre$[ebp]
	mov	DWORD PTR _n$11040[ebp], eax
	jmp	SHORT $LN50@decToStrin
$LN49@decToStrin:
; Line 3735
	mov	eax, DWORD PTR _pre$[ebp]
	sub	eax, 1
	mov	DWORD PTR _pre$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _cut$[ebp]
	sub	edx, 1
	mov	DWORD PTR _cut$[ebp], edx
$LN50@decToStrin:
	cmp	DWORD PTR _pre$[ebp], 0
	jle	$LN48@decToStrin
; Line 3736
	cmp	DWORD PTR _cut$[ebp], 0
	jge	SHORT $LN47@decToStrin
; Line 3737
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	cmp	DWORD PTR _up$[ebp], eax
	jne	SHORT $LN46@decToStrin
	jmp	$LN48@decToStrin
$LN46@decToStrin:
; Line 3738
	mov	eax, DWORD PTR _up$[ebp]
	sub	eax, 1
	mov	DWORD PTR _up$[ebp], eax
; Line 3739
	mov	DWORD PTR _cut$[ebp], 0
; Line 3740
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _u$[ebp], ecx
$LN47@decToStrin:
; Line 3742
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	eax, DWORD PTR _cut$[ebp]
	mov	ecx, DWORD PTR _DECPOWERS[eax*4]
	shl	ecx, 1
	mov	DWORD PTR _pow$[ebp], ecx
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jbe	SHORT $LN45@decToStrin
	mov	eax, DWORD PTR _pow$[ebp]
	shl	eax, 2
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN44@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN44@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN43@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN43@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
$LN45@decToStrin:
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN42@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN42@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN41@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN41@decToStrin:
; Line 3743
	jmp	$LN49@decToStrin
$LN48@decToStrin:
; Line 3744
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _n$11040[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN40@decToStrin
; Line 3745
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 46			; 0000002eH
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN39@decToStrin
$LN38@decToStrin:
; Line 3746
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _cut$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _cut$[ebp], ecx
$LN39@decToStrin:
; Line 3747
	cmp	DWORD PTR _cut$[ebp], 0
	jge	SHORT $LN36@decToStrin
; Line 3748
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	cmp	DWORD PTR _up$[ebp], eax
	jne	SHORT $LN35@decToStrin
	jmp	$LN37@decToStrin
$LN35@decToStrin:
; Line 3749
	mov	eax, DWORD PTR _up$[ebp]
	sub	eax, 1
	mov	DWORD PTR _up$[ebp], eax
; Line 3750
	mov	DWORD PTR _cut$[ebp], 0
; Line 3751
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _u$[ebp], ecx
$LN36@decToStrin:
; Line 3753
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	eax, DWORD PTR _cut$[ebp]
	mov	ecx, DWORD PTR _DECPOWERS[eax*4]
	shl	ecx, 1
	mov	DWORD PTR _pow$[ebp], ecx
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jbe	SHORT $LN34@decToStrin
	mov	eax, DWORD PTR _pow$[ebp]
	shl	eax, 2
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN33@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN33@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN32@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN32@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
$LN34@decToStrin:
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN31@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN31@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN30@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN30@decToStrin:
; Line 3754
	jmp	$LN38@decToStrin
$LN37@decToStrin:
; Line 3756
	jmp	SHORT $LN29@decToStrin
$LN40@decToStrin:
	jmp	SHORT $LN28@decToStrin
$LN27@decToStrin:
	mov	eax, DWORD PTR _pre$[ebp]
	sub	eax, 1
	mov	DWORD PTR _pre$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
$LN28@decToStrin:
	cmp	DWORD PTR _pre$[ebp], 0
	jle	SHORT $LN29@decToStrin
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	jmp	SHORT $LN27@decToStrin
$LN29@decToStrin:
; Line 3758
	jmp	$LN25@decToStrin
$LN51@decToStrin:
; Line 3759
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 3760
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 46			; 0000002eH
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN24@decToStrin
$LN23@decToStrin:
; Line 3761
	mov	eax, DWORD PTR _pre$[ebp]
	add	eax, 1
	mov	DWORD PTR _pre$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
$LN24@decToStrin:
	cmp	DWORD PTR _pre$[ebp], 0
	jge	SHORT $LN22@decToStrin
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	jmp	SHORT $LN23@decToStrin
$LN22@decToStrin:
; Line 3762
	jmp	SHORT $LN21@decToStrin
$LN20@decToStrin:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _cut$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _cut$[ebp], ecx
$LN21@decToStrin:
; Line 3763
	cmp	DWORD PTR _cut$[ebp], 0
	jge	SHORT $LN18@decToStrin
; Line 3764
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	cmp	DWORD PTR _up$[ebp], eax
	jne	SHORT $LN17@decToStrin
	jmp	$LN25@decToStrin
$LN17@decToStrin:
; Line 3765
	mov	eax, DWORD PTR _up$[ebp]
	sub	eax, 1
	mov	DWORD PTR _up$[ebp], eax
; Line 3766
	mov	DWORD PTR _cut$[ebp], 0
; Line 3767
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _u$[ebp], ecx
$LN18@decToStrin:
; Line 3769
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	eax, DWORD PTR _cut$[ebp]
	mov	ecx, DWORD PTR _DECPOWERS[eax*4]
	shl	ecx, 1
	mov	DWORD PTR _pow$[ebp], ecx
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jbe	SHORT $LN16@decToStrin
	mov	eax, DWORD PTR _pow$[ebp]
	shl	eax, 2
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN15@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN15@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN14@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN14@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
$LN16@decToStrin:
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN13@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN13@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN12@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN12@decToStrin:
; Line 3770
	jmp	$LN20@decToStrin
$LN25@decToStrin:
; Line 3776
	cmp	DWORD PTR _e$[ebp], 0
	je	$LN11@decToStrin
; Line 3777
	mov	BYTE PTR _had$11081[ebp], 0
; Line 3778
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 69			; 00000045H
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 3779
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 43			; 0000002bH
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 3780
	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR _u$[ebp], eax
; Line 3781
	cmp	DWORD PTR _e$[ebp], 0
	jge	SHORT $LN10@decToStrin
; Line 3782
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax-1], 45			; 0000002dH
; Line 3783
	mov	eax, DWORD PTR _e$[ebp]
	neg	eax
	mov	DWORD PTR _u$[ebp], eax
$LN10@decToStrin:
; Line 3786
	mov	DWORD PTR _cut$[ebp], 9
	jmp	SHORT $LN9@decToStrin
$LN8@decToStrin:
	mov	eax, DWORD PTR _cut$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cut$[ebp], eax
$LN9@decToStrin:
	cmp	DWORD PTR _cut$[ebp], 0
	jl	$LN11@decToStrin
; Line 3787
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	eax, DWORD PTR _cut$[ebp]
	mov	ecx, DWORD PTR _DECPOWERS[eax*4]
	shl	ecx, 1
	mov	DWORD PTR _pow$[ebp], ecx
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jbe	SHORT $LN6@decToStrin
	mov	eax, DWORD PTR _pow$[ebp]
	shl	eax, 2
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN5@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN5@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN4@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN4@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
$LN6@decToStrin:
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN3@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN3@decToStrin:
	mov	eax, DWORD PTR _pow$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pow$[ebp], eax
	mov	eax, DWORD PTR _u$[ebp]
	cmp	eax, DWORD PTR _pow$[ebp]
	jb	SHORT $LN2@decToStrin
	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, DWORD PTR _pow$[ebp]
	mov	DWORD PTR _u$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
$LN2@decToStrin:
; Line 3788
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN1@decToStrin
	movzx	eax, BYTE PTR _had$11081[ebp]
	test	eax, eax
	jne	SHORT $LN1@decToStrin
	jmp	$LN8@decToStrin
$LN1@decToStrin:
; Line 3789
	mov	BYTE PTR _had$11081[ebp], 1
; Line 3790
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 3791
	jmp	$LN8@decToStrin
$LN11@decToStrin:
; Line 3793
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 0
$LN80@decToStrin:
; Line 3795
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_decToString ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CA@OPPHKMDO@?$AAl?$AAh?$AAs?$AA?9?$AA?$DO?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@FIPFOBLM@?$AAr?$AAh?$AAs?$AA?9?$AA?$DO?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FI@KDDHHPIP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ ; `string'
PUBLIC	?__LINE__Var@?1??decAddOp@@9@9@0911e54c		; `decAddOp'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1CA@OPPHKMDO@?$AAl?$AAh?$AAs?$AA?9?$AA?$DO?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@OPPHKMDO@?$AAl?$AAh?$AAs?$AA?9?$AA?$DO?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'l'
	DB	00H, 'h', 00H, 's', 00H, '-', 00H, '>', 00H, 'd', 00H, 'i', 00H
	DB	'g', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@FIPFOBLM@?$AAr?$AAh?$AAs?$AA?9?$AA?$DO?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@FIPFOBLM@?$AAr?$AAh?$AAs?$AA?9?$AA?$DO?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'r'
	DB	00H, 'h', 00H, 's', 00H, '-', 00H, '>', 00H, 'd', 00H, 'i', 00H
	DB	'g', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@KDDHHPIP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
CONST	SEGMENT
??_C@_1FI@KDDHHPIP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'i', 00H, '1', 00H, '8', 00H, 'n', 00H, '\', 00H, 'd', 00H
	DB	'e', 00H, 'c', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??decAddOp@@9@9@0911e54c
_DATA	SEGMENT
?__LINE__Var@?1??decAddOp@@9@9@0911e54c DD 0efaH	; `decAddOp'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _decAddOp
_TEXT	SEGMENT
tv413 = -532						; size = 4
tv448 = -528						; size = 4
tv433 = -528						; size = 4
tv404 = -528						; size = 4
tv370 = -528						; size = 4
tv351 = -528						; size = 4
tv296 = -528						; size = 4
_need$11169 = -328					; size = 4
_shift$11161 = -316					; size = 4
_t$11158 = -304						; size = 4
_swapped$11156 = -289					; size = 1
_partial$11144 = -280					; size = 4
_rexp$11140 = -268					; size = 4
_adjust$11139 = -256					; size = 4
_lexp$11129 = -244					; size = 4
_adjust$11128 = -232					; size = 4
_padding$ = -220					; size = 4
_reqdigits$ = -208					; size = 4
_allocacc$ = -196					; size = 4
_accbuff$ = -184					; size = 92
_acc$ = -84						; size = 4
_diffsign$ = -69					; size = 1
_bits$ = -57						; size = 1
_residue$ = -48						; size = 4
_mult$ = -36						; size = 4
_maxdigits$ = -24					; size = 4
_rhsshift$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_negate$ = 24						; size = 1
_status$ = 28						; size = 4
_decAddOp PROC						; COMDAT
; Line 3834
	push	ebp
	mov	ebp, esp
	sub	esp, 532				; 00000214H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 133				; 00000085H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3849
	mov	DWORD PTR _allocacc$[ebp], 0
; Line 3850
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _reqdigits$[ebp], ecx
$LN48@decAddOp:
; Line 3876
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	xor	ecx, eax
	movzx	edx, BYTE PTR _negate$[ebp]
	xor	ecx, edx
	and	ecx, 128				; 00000080H
	mov	BYTE PTR _diffsign$[ebp], cl
; Line 3879
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 112				; 00000070H
	je	$LN45@decAddOp
; Line 3880
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 112				; 00000070H
	and	ecx, 48					; 00000030H
	je	SHORT $LN44@decAddOp
; Line 3881
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decNaNs
	add	esp, 20					; 00000014H
; Line 3882
	jmp	SHORT $LN43@decAddOp
$LN44@decAddOp:
; Line 3883
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN42@decAddOp
; Line 3885
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN41@decAddOp
	movzx	eax, BYTE PTR _diffsign$[ebp]
	test	eax, eax
	je	SHORT $LN41@decAddOp
; Line 3886
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 3887
	jmp	$LN46@decAddOp
$LN41@decAddOp:
; Line 3889
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	mov	BYTE PTR _bits$[ebp], cl
	jmp	SHORT $LN40@decAddOp
$LN42@decAddOp:
; Line 3891
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	movzx	edx, BYTE PTR _negate$[ebp]
	xor	ecx, edx
	and	ecx, 128				; 00000080H
	mov	BYTE PTR _bits$[ebp], cl
$LN40@decAddOp:
; Line 3892
	movzx	eax, BYTE PTR _bits$[ebp]
	or	eax, 64					; 00000040H
	mov	BYTE PTR _bits$[ebp], al
; Line 3893
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 3894
	mov	eax, DWORD PTR _res$[ebp]
	mov	cl, BYTE PTR _bits$[ebp]
	mov	BYTE PTR [eax+8], cl
$LN43@decAddOp:
; Line 3896
	jmp	$LN46@decAddOp
$LN45@decAddOp:
; Line 3900
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	$LN39@decAddOp
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	$LN39@decAddOp
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	$LN39@decAddOp
; Line 3902
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _lexp$11129[ebp], ecx
; Line 3903
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _bits$[ebp], cl
; Line 3904
	mov	DWORD PTR _residue$[ebp], 0
; Line 3905
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 3906
	movzx	eax, BYTE PTR _negate$[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	xor	edx, eax
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], dl
; Line 3911
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _lexp$11129[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _adjust$11128[ebp], ecx
; Line 3912
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN38@decAddOp
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN38@decAddOp
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN38@decAddOp
; Line 3913
	cmp	DWORD PTR _adjust$11128[ebp], 0
	jge	SHORT $LN37@decAddOp
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _lexp$11129[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN37@decAddOp:
; Line 3915
	movzx	eax, BYTE PTR _diffsign$[ebp]
	test	eax, eax
	je	SHORT $LN36@decAddOp
; Line 3916
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax+12], 6
	je	SHORT $LN35@decAddOp
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 0
	jmp	SHORT $LN36@decAddOp
$LN35@decAddOp:
; Line 3917
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 128			; 00000080H
$LN36@decAddOp:
; Line 3920
	jmp	SHORT $LN33@decAddOp
$LN38@decAddOp:
; Line 3921
	cmp	DWORD PTR _adjust$11128[ebp], 0
	jge	SHORT $LN33@decAddOp
; Line 3922
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _adjust$11128[ebp]
	mov	edx, DWORD PTR _set$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jle	SHORT $LN31@decAddOp
; Line 3923
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _adjust$11128[ebp], edx
; Line 3924
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN31@decAddOp:
; Line 3926
	mov	eax, DWORD PTR _adjust$11128[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	push	eax
	call	_decShiftToMost
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 3927
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _adjust$11128[ebp]
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN33@decAddOp:
; Line 3933
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 3934
	jmp	$LN46@decAddOp
$LN39@decAddOp:
; Line 3936
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	$LN30@decAddOp
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	$LN30@decAddOp
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	$LN30@decAddOp
; Line 3938
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _rexp$11140[ebp], ecx
; Line 3939
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _bits$[ebp], cl
; Line 3940
	mov	DWORD PTR _residue$[ebp], 0
; Line 3941
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 3947
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _rexp$11140[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _adjust$11139[ebp], ecx
; Line 3948
	jns	SHORT $LN29@decAddOp
; Line 3949
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _adjust$11139[ebp]
	mov	edx, DWORD PTR _set$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jle	SHORT $LN28@decAddOp
; Line 3950
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _adjust$11139[ebp], edx
; Line 3951
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN28@decAddOp:
; Line 3953
	mov	eax, DWORD PTR _adjust$11139[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	push	eax
	call	_decShiftToMost
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 3954
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _adjust$11139[ebp]
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN29@decAddOp:
; Line 3959
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 3960
	jmp	$LN46@decAddOp
$LN30@decAddOp:
; Line 3966
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _padding$[ebp], edx
; Line 3976
	jne	$LN27@decAddOp
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jg	$LN27@decAddOp
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jl	$LN27@decAddOp
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax+4], edx
	jg	$LN27@decAddOp
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _reqdigits$[ebp]
	jg	$LN27@decAddOp
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _reqdigits$[ebp]
	jg	$LN27@decAddOp
; Line 3977
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	mov	DWORD PTR _partial$11144[ebp], ecx
; Line 3978
	movzx	eax, BYTE PTR _diffsign$[ebp]
	test	eax, eax
	jne	SHORT $LN26@decAddOp
; Line 3979
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	add	ecx, DWORD PTR _partial$11144[ebp]
	mov	DWORD PTR _partial$11144[ebp], ecx
; Line 3982
	cmp	DWORD PTR _partial$11144[ebp], 9
	jg	SHORT $LN25@decAddOp
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jge	SHORT $LN24@decAddOp
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _partial$11144[ebp]
	cmp	edx, DWORD PTR _DECPOWERS[ecx*4]
	jge	SHORT $LN25@decAddOp
$LN24@decAddOp:
; Line 3983
	mov	eax, DWORD PTR _res$[ebp]
	cmp	eax, DWORD PTR _lhs$[ebp]
	je	SHORT $LN23@decAddOp
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
$LN23@decAddOp:
; Line 3984
	mov	eax, DWORD PTR _res$[ebp]
	mov	cl, BYTE PTR _partial$11144[ebp]
	mov	BYTE PTR [eax+9], cl
; Line 3985
	jmp	$LN46@decAddOp
$LN25@decAddOp:
; Line 3989
	jmp	$LN27@decAddOp
$LN26@decAddOp:
; Line 3990
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _partial$11144[ebp]
	sub	edx, ecx
	mov	DWORD PTR _partial$11144[ebp], edx
; Line 3991
	cmp	DWORD PTR _partial$11144[ebp], 0
	jle	SHORT $LN27@decAddOp
; Line 3992
	mov	eax, DWORD PTR _res$[ebp]
	cmp	eax, DWORD PTR _lhs$[ebp]
	je	SHORT $LN20@decAddOp
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
$LN20@decAddOp:
; Line 3993
	mov	eax, DWORD PTR _res$[ebp]
	mov	cl, BYTE PTR _partial$11144[ebp]
	mov	BYTE PTR [eax+9], cl
; Line 3995
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN51@decAddOp
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv296[ebp], eax
	jmp	SHORT $LN52@decAddOp
$LN51@decAddOp:
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv296[ebp], edx
$LN52@decAddOp:
	mov	eax, DWORD PTR tv296[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	add	ecx, 9
	push	ecx
	call	_decGetDigits
	add	esp, 8
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], eax
; Line 3996
	jmp	$LN46@decAddOp
$LN27@decAddOp:
; Line 4009
	mov	DWORD PTR _rhsshift$[ebp], 0
; Line 4010
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _bits$[ebp], cl
; Line 4011
	mov	DWORD PTR _mult$[ebp], 1
; Line 4014
	cmp	DWORD PTR _padding$[ebp], 0
	je	$LN19@decAddOp
; Line 4018
	mov	BYTE PTR _swapped$11156[ebp], 0
; Line 4019
	cmp	DWORD PTR _padding$[ebp], 0
	jge	SHORT $LN18@decAddOp
; Line 4021
	mov	eax, DWORD PTR _padding$[ebp]
	neg	eax
	mov	DWORD PTR _padding$[ebp], eax
; Line 4022
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	movzx	edx, BYTE PTR _negate$[ebp]
	xor	ecx, edx
	mov	BYTE PTR _bits$[ebp], cl
; Line 4023
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	DWORD PTR _t$11158[ebp], eax
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR _lhs$[ebp], eax
	mov	eax, DWORD PTR _t$11158[ebp]
	mov	DWORD PTR _rhs$[ebp], eax
; Line 4024
	mov	BYTE PTR _swapped$11156[ebp], 1
$LN18@decAddOp:
; Line 4030
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _padding$[ebp]
	mov	edx, DWORD PTR _lhs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _reqdigits$[ebp]
	lea	eax, DWORD PTR [eax+edx+1]
	cmp	ecx, eax
	jle	$LN17@decAddOp
; Line 4033
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR _reqdigits$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _shift$11161[ebp], ecx
; Line 4034
	mov	DWORD PTR _residue$[ebp], 1
; Line 4035
	movzx	eax, BYTE PTR _diffsign$[ebp]
	test	eax, eax
	je	SHORT $LN16@decAddOp
	mov	eax, DWORD PTR _residue$[ebp]
	neg	eax
	mov	DWORD PTR _residue$[ebp], eax
$LN16@decAddOp:
; Line 4037
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 4039
	cmp	DWORD PTR _shift$11161[ebp], 0
	jle	SHORT $LN15@decAddOp
; Line 4040
	mov	eax, DWORD PTR _shift$11161[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	push	eax
	call	_decShiftToMost
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 4041
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _shift$11161[ebp]
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN15@decAddOp:
; Line 4044
	movzx	eax, BYTE PTR _swapped$11156[ebp]
	test	eax, eax
	jne	SHORT $LN14@decAddOp
	movzx	eax, BYTE PTR _negate$[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	xor	edx, eax
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], dl
$LN14@decAddOp:
; Line 4045
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 4046
	jmp	$LN46@decAddOp
$LN17@decAddOp:
; Line 4049
	mov	eax, DWORD PTR _padding$[ebp]
	add	eax, 1
	cmp	eax, 49					; 00000031H
	jg	SHORT $LN53@decAddOp
	mov	ecx, DWORD PTR _padding$[ebp]
	movzx	edx, BYTE PTR _d2utable[ecx+1]
	mov	DWORD PTR tv351[ebp], edx
	jmp	SHORT $LN54@decAddOp
$LN53@decAddOp:
	mov	eax, DWORD PTR _padding$[ebp]
	add	eax, 1
	mov	DWORD PTR tv351[ebp], eax
$LN54@decAddOp:
	mov	ecx, DWORD PTR tv351[ebp]
	sub	ecx, 1
	mov	DWORD PTR _rhsshift$[ebp], ecx
; Line 4050
	mov	eax, DWORD PTR _padding$[ebp]
	sub	eax, DWORD PTR _rhsshift$[ebp]
	mov	ecx, DWORD PTR _DECPOWERS[eax*4]
	mov	DWORD PTR _mult$[ebp], ecx
$LN19@decAddOp:
; Line 4053
	movzx	eax, BYTE PTR _diffsign$[ebp]
	test	eax, eax
	je	SHORT $LN13@decAddOp
	mov	eax, DWORD PTR _mult$[ebp]
	neg	eax
	mov	DWORD PTR _mult$[ebp], eax
$LN13@decAddOp:
; Line 4056
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _padding$[ebp]
	mov	DWORD PTR _maxdigits$[ebp], ecx
; Line 4057
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _maxdigits$[ebp]
	jle	SHORT $LN12@decAddOp
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _maxdigits$[ebp], ecx
$LN12@decAddOp:
; Line 4061
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	mov	DWORD PTR _acc$[ebp], eax
; Line 4066
	mov	eax, DWORD PTR _maxdigits$[ebp]
	cmp	eax, DWORD PTR _reqdigits$[ebp]
	jge	SHORT $LN10@decAddOp
	mov	eax, DWORD PTR _res$[ebp]
	cmp	eax, DWORD PTR _rhs$[ebp]
	jne	$LN11@decAddOp
	cmp	DWORD PTR _rhsshift$[ebp], 0
	jle	SHORT $LN11@decAddOp
$LN10@decAddOp:
; Line 4069
	cmp	DWORD PTR _maxdigits$[ebp], 49		; 00000031H
	jg	SHORT $LN55@decAddOp
	mov	eax, DWORD PTR _maxdigits$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv370[ebp], ecx
	jmp	SHORT $LN56@decAddOp
$LN55@decAddOp:
	mov	edx, DWORD PTR _maxdigits$[ebp]
	mov	DWORD PTR tv370[ebp], edx
$LN56@decAddOp:
	mov	eax, DWORD PTR tv370[ebp]
	add	eax, 1
	mov	DWORD PTR _need$11169[ebp], eax
; Line 4070
	lea	eax, DWORD PTR _accbuff$[ebp]
	mov	DWORD PTR _acc$[ebp], eax
; Line 4071
	cmp	DWORD PTR _need$11169[ebp], 92		; 0000005cH
	jbe	SHORT $LN11@decAddOp
; Line 4073
	mov	eax, DWORD PTR _need$11169[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocacc$[ebp], eax
; Line 4074
	cmp	DWORD PTR _allocacc$[ebp], 0
	jne	SHORT $LN8@decAddOp
; Line 4075
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4076
	jmp	$LN46@decAddOp
$LN8@decAddOp:
; Line 4077
	mov	eax, DWORD PTR _allocacc$[ebp]
	mov	DWORD PTR _acc$[ebp], eax
$LN11@decAddOp:
; Line 4081
	movzx	eax, BYTE PTR _bits$[ebp]
	and	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [ecx+8], al
; Line 4082
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 4091
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN57@decAddOp
	mov	ecx, DWORD PTR ?__LINE__Var@?1??decAddOp@@9@9@0911e54c
	add	ecx, 257				; 00000101H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KDDHHPIP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CA@FIPFOBLM@?$AAr?$AAh?$AAs?$AA?9?$AA?$DO?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN57@decAddOp:
; Line 4092
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN58@decAddOp
	mov	ecx, DWORD PTR ?__LINE__Var@?1??decAddOp@@9@9@0911e54c
	add	ecx, 258				; 00000102H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@KDDHHPIP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1CA@OPPHKMDO@?$AAl?$AAh?$AAs?$AA?9?$AA?$DO?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN58@decAddOp:
; Line 4096
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN59@decAddOp
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv404[ebp], eax
	jmp	SHORT $LN60@decAddOp
$LN59@decAddOp:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv404[ebp], edx
$LN60@decAddOp:
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN61@decAddOp
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv413[ebp], eax
	jmp	SHORT $LN62@decAddOp
$LN61@decAddOp:
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv413[ebp], edx
$LN62@decAddOp:
	mov	eax, DWORD PTR _mult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _acc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhsshift$[ebp]
	push	edx
	mov	eax, DWORD PTR tv404[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 9
	push	ecx
	mov	edx, DWORD PTR tv413[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	add	eax, 9
	push	eax
	call	_decUnitAddSub
	add	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 4097
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN7@decAddOp
; Line 4098
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4099
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	xor	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [edx+8], cl
$LN7@decAddOp:
; Line 4108
	mov	DWORD PTR _residue$[ebp], 0
; Line 4109
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	cmp	DWORD PTR _acc$[ebp], eax
	je	SHORT $LN6@decAddOp
; Line 4115
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _reqdigits$[ebp]
	jle	SHORT $LN5@decAddOp
; Line 4116
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN63@decAddOp
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv433[ebp], eax
	jmp	SHORT $LN64@decAddOp
$LN63@decAddOp:
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv433[ebp], edx
$LN64@decAddOp:
	mov	eax, DWORD PTR tv433[ebp]
	push	eax
	mov	ecx, DWORD PTR _acc$[ebp]
	push	ecx
	call	_decGetDigits
	add	esp, 8
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], eax
$LN5@decAddOp:
; Line 4117
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _acc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decSetCoeff
	add	esp, 24					; 00000018H
$LN6@decAddOp:
; Line 4151
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN65@decAddOp
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv448[ebp], eax
	jmp	SHORT $LN66@decAddOp
$LN65@decAddOp:
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv448[ebp], edx
$LN66@decAddOp:
	mov	eax, DWORD PTR tv448[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	add	ecx, 9
	push	ecx
	call	_decGetDigits
	add	esp, 8
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], eax
; Line 4154
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 4164
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN47@decAddOp
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN47@decAddOp
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN47@decAddOp
	movzx	eax, BYTE PTR _diffsign$[ebp]
	test	eax, eax
	je	SHORT $LN47@decAddOp
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN47@decAddOp
; Line 4165
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax+12], 6
	jne	SHORT $LN3@decAddOp
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [edx+8], cl
	jmp	SHORT $LN47@decAddOp
$LN3@decAddOp:
; Line 4166
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [edx+8], cl
$LN47@decAddOp:
; Line 4168
	xor	eax, eax
	jne	$LN48@decAddOp
$LN46@decAddOp:
; Line 4170
	cmp	DWORD PTR _allocacc$[ebp], 0
	je	SHORT $LN1@decAddOp
	mov	eax, DWORD PTR _allocacc$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@decAddOp:
; Line 4175
	mov	eax, DWORD PTR _res$[ebp]
; Line 4176
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN70@decAddOp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN70@decAddOp:
	DD	2
	DD	$LN69@decAddOp
$LN69@decAddOp:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN67@decAddOp
	DD	-184					; ffffff48H
	DD	92					; 0000005cH
	DD	$LN68@decAddOp
$LN68@decAddOp:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN67@decAddOp:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
_decAddOp ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _decDivideOp
_TEXT	SEGMENT
tv628 = -904						; size = 4
tv613 = -904						; size = 4
tv558 = -904						; size = 4
tv533 = -904						; size = 4
tv345 = -904						; size = 4
tv312 = -904						; size = 4
tv298 = -904						; size = 4
tv277 = -904						; size = 4
tv263 = -904						; size = 4
_allnines$11382 = -701					; size = 1
_exprem$11381 = -692					; size = 4
_expunits$11380 = -680					; size = 4
_exp$11379 = -668					; size = 4
_half$11375 = -656					; size = 4
_up$11369 = -644					; size = 4
_tarunits$11368 = -632					; size = 4
_compare$11367 = -620					; size = 4
_exp$11360 = -608					; size = 4
_quotdigits$11358 = -596				; size = 4
_quotlsu$11357 = -584					; size = 4
_wasodd$11356 = -569					; size = 1
_postshift$11355 = -560					; size = 4
_v2$11318 = -545					; size = 1
_pv2$11317 = -536					; size = 4
_pv1$11316 = -524					; size = 4
_u$11297 = -512						; size = 4
_cut$ = -500						; size = 4
_shift$ = -488						; size = 4
_pow$ = -476						; size = 4
_source$ = -464						; size = 4
_target$ = -452						; size = 4
_bits$ = -437						; size = 1
_maxexponent$ = -428					; size = 4
_exponent$ = -416					; size = 4
_reqdigits$ = -404					; size = 4
_residue$ = -392					; size = 4
_thisunit$ = -377					; size = 1
_mult$ = -368						; size = 4
_maxdigits$ = -356					; size = 4
_var1initpad$ = -344					; size = 4
_var2ulen$ = -332					; size = 4
_var2units$ = -320					; size = 4
_var1units$ = -308					; size = 4
_msu2pair$ = -296					; size = 4
_msu2plus$ = -284					; size = 4
_msu2$ = -272						; size = 4
_var2$ = -260						; size = 4
_msu1$ = -248						; size = 4
_varalloc$ = -236					; size = 4
_var1$ = -224						; size = 4
_varbuff$ = -212					; size = 73
_accdigits$ = -128					; size = 4
_accunits$ = -116					; size = 4
_acclength$ = -104					; size = 4
_accnext$ = -92						; size = 4
_allocacc$ = -80					; size = 4
_acc$ = -68						; size = 4
_accbuff$ = -56						; size = 47
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_op$ = 24						; size = 1
_status$ = 28						; size = 4
_decDivideOp PROC					; COMDAT
; Line 4250
	push	ebp
	mov	ebp, esp
	sub	esp, 904				; 00000388H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-904]
	mov	ecx, 226				; 000000e2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 4256
	lea	eax, DWORD PTR _accbuff$[ebp]
	mov	DWORD PTR _acc$[ebp], eax
; Line 4257
	mov	DWORD PTR _allocacc$[ebp], 0
; Line 4264
	lea	eax, DWORD PTR _varbuff$[ebp]
	mov	DWORD PTR _var1$[ebp], eax
; Line 4265
	mov	DWORD PTR _varalloc$[ebp], 0
; Line 4275
	mov	DWORD PTR _var1initpad$[ebp], 0
; Line 4280
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _reqdigits$[ebp], ecx
; Line 4282
	mov	DWORD PTR _maxexponent$[ebp], 0
$LN121@decDivideO:
; Line 4314
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	xor	ecx, eax
	and	ecx, 128				; 00000080H
	mov	BYTE PTR _bits$[ebp], cl
; Line 4317
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 112				; 00000070H
	je	$LN118@decDivideO
; Line 4318
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 112				; 00000070H
	and	ecx, 48					; 00000030H
	je	SHORT $LN117@decDivideO
; Line 4319
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decNaNs
	add	esp, 20					; 00000014H
; Line 4320
	jmp	$LN119@decDivideO
$LN117@decDivideO:
; Line 4323
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN116@decDivideO
; Line 4325
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	jne	SHORT $LN114@decDivideO
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 80					; 00000050H
	je	SHORT $LN115@decDivideO
$LN114@decDivideO:
; Line 4326
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4327
	jmp	$LN119@decDivideO
$LN115@decDivideO:
; Line 4330
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 4331
	movzx	eax, BYTE PTR _bits$[ebp]
	or	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [ecx+8], al
; Line 4332
	jmp	$LN119@decDivideO
; Line 4334
	jmp	$LN118@decDivideO
$LN116@decDivideO:
; Line 4335
	mov	DWORD PTR _residue$[ebp], 0
; Line 4336
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 80					; 00000050H
	je	SHORT $LN112@decDivideO
; Line 4338
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 4340
	jmp	SHORT $LN111@decDivideO
$LN112@decDivideO:
; Line 4341
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 4342
	mov	eax, DWORD PTR _res$[ebp]
	mov	cl, BYTE PTR _bits$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 4345
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN111@decDivideO
; Line 4346
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 4347
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN111@decDivideO:
; Line 4350
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 4351
	jmp	$LN119@decDivideO
$LN118@decDivideO:
; Line 4356
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	$LN109@decDivideO
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	$LN109@decDivideO
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	$LN109@decDivideO
; Line 4357
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN108@decDivideO
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN108@decDivideO
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN108@decDivideO
; Line 4358
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 4359
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 8
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4361
	jmp	SHORT $LN107@decDivideO
$LN108@decDivideO:
; Line 4362
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 4363
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 80					; 00000050H
	je	SHORT $LN106@decDivideO
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4364
	jmp	SHORT $LN107@decDivideO
$LN106@decDivideO:
; Line 4365
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4366
	movzx	eax, BYTE PTR _bits$[ebp]
	or	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [ecx+8], al
$LN107@decDivideO:
; Line 4369
	jmp	$LN119@decDivideO
$LN109@decDivideO:
; Line 4372
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	$LN104@decDivideO
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	$LN104@decDivideO
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	$LN104@decDivideO
; Line 4377
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN103@decDivideO
; Line 4378
	mov	DWORD PTR _residue$[ebp], 0
; Line 4379
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _exponent$[ebp], edx
; Line 4380
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 4381
	mov	eax, DWORD PTR _res$[ebp]
	mov	cl, BYTE PTR _bits$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 4382
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 4383
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
	jmp	SHORT $LN102@decDivideO
$LN103@decDivideO:
; Line 4385
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN101@decDivideO
; Line 4386
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 4387
	mov	eax, DWORD PTR _res$[ebp]
	mov	cl, BYTE PTR _bits$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 4389
	jmp	SHORT $LN102@decDivideO
$LN101@decDivideO:
; Line 4390
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _exponent$[ebp], ecx
; Line 4391
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 4392
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN102@decDivideO
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN102@decDivideO:
; Line 4397
	jmp	$LN119@decDivideO
$LN104@decDivideO:
; Line 4403
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _lhs$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _rhs$[ebp]
	add	edx, DWORD PTR [eax]
	sub	ecx, edx
	mov	DWORD PTR _exponent$[ebp], ecx
; Line 4408
	jns	$LN98@decDivideO
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 128				; 00000080H
	je	$LN98@decDivideO
; Line 4409
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN97@decDivideO
; Line 4410
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 4414
	mov	eax, DWORD PTR _res$[ebp]
	mov	cl, BYTE PTR _bits$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 4415
	jmp	$LN119@decDivideO
$LN97@decDivideO:
; Line 4418
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jg	SHORT $LN98@decDivideO
; Line 4419
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 64					; 00000040H
	jne	SHORT $LN94@decDivideO
	cmp	DWORD PTR _exponent$[ebp], -1
	jge	SHORT $LN98@decDivideO
$LN94@decDivideO:
; Line 4422
	mov	DWORD PTR _residue$[ebp], 0
; Line 4423
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 4424
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 4425
	jmp	$LN119@decDivideO
$LN98@decDivideO:
; Line 4435
	mov	eax, DWORD PTR _reqdigits$[ebp]
	add	eax, 1
	cmp	eax, 49					; 00000031H
	jg	SHORT $LN124@decDivideO
	mov	ecx, DWORD PTR _reqdigits$[ebp]
	movzx	edx, BYTE PTR _d2utable[ecx+1]
	mov	DWORD PTR tv263[ebp], edx
	jmp	SHORT $LN125@decDivideO
$LN124@decDivideO:
	mov	eax, DWORD PTR _reqdigits$[ebp]
	add	eax, 1
	mov	DWORD PTR tv263[ebp], eax
$LN125@decDivideO:
	mov	ecx, DWORD PTR tv263[ebp]
	mov	DWORD PTR _acclength$[ebp], ecx
; Line 4436
	cmp	DWORD PTR _acclength$[ebp], 47		; 0000002fH
	jbe	SHORT $LN93@decDivideO
; Line 4438
	mov	eax, DWORD PTR _acclength$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocacc$[ebp], eax
; Line 4439
	cmp	DWORD PTR _allocacc$[ebp], 0
	jne	SHORT $LN92@decDivideO
; Line 4440
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4441
	jmp	$LN119@decDivideO
$LN92@decDivideO:
; Line 4442
	mov	eax, DWORD PTR _allocacc$[ebp]
	mov	DWORD PTR _acc$[ebp], eax
$LN93@decDivideO:
; Line 4456
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _reqdigits$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	DWORD PTR _maxdigits$[ebp], eax
; Line 4457
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _maxdigits$[ebp]
	jle	SHORT $LN91@decDivideO
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _maxdigits$[ebp], ecx
$LN91@decDivideO:
; Line 4458
	cmp	DWORD PTR _maxdigits$[ebp], 49		; 00000031H
	jg	SHORT $LN126@decDivideO
	mov	eax, DWORD PTR _maxdigits$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv277[ebp], ecx
	jmp	SHORT $LN127@decDivideO
$LN126@decDivideO:
	mov	edx, DWORD PTR _maxdigits$[ebp]
	mov	DWORD PTR tv277[ebp], edx
$LN127@decDivideO:
	mov	eax, DWORD PTR tv277[ebp]
	add	eax, 2
	mov	DWORD PTR _var1units$[ebp], eax
; Line 4460
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN90@decDivideO
	mov	eax, DWORD PTR _var1units$[ebp]
	add	eax, 1
	mov	DWORD PTR _var1units$[ebp], eax
$LN90@decDivideO:
; Line 4461
	mov	eax, DWORD PTR _var1units$[ebp]
	add	eax, 1
	cmp	eax, 73					; 00000049H
	jbe	SHORT $LN89@decDivideO
; Line 4463
	mov	eax, DWORD PTR _var1units$[ebp]
	add	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _varalloc$[ebp], eax
; Line 4464
	cmp	DWORD PTR _varalloc$[ebp], 0
	jne	SHORT $LN88@decDivideO
; Line 4465
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4466
	jmp	$LN119@decDivideO
$LN88@decDivideO:
; Line 4467
	mov	eax, DWORD PTR _varalloc$[ebp]
	mov	DWORD PTR _var1$[ebp], eax
$LN89@decDivideO:
; Line 4476
	mov	eax, DWORD PTR _var1units$[ebp]
	mov	ecx, DWORD PTR _var1$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msu1$[ebp], edx
; Line 4477
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN128@decDivideO
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv298[ebp], eax
	jmp	SHORT $LN129@decDivideO
$LN128@decDivideO:
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv298[ebp], edx
$LN129@decDivideO:
	mov	eax, DWORD PTR tv298[ebp]
	mov	ecx, DWORD PTR _lhs$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _source$[ebp], edx
; Line 4478
	mov	eax, DWORD PTR _msu1$[ebp]
	mov	DWORD PTR _target$[ebp], eax
	jmp	SHORT $LN87@decDivideO
$LN86@decDivideO:
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 1
	mov	DWORD PTR _source$[ebp], eax
	mov	ecx, DWORD PTR _target$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
$LN87@decDivideO:
	mov	eax, DWORD PTR _lhs$[ebp]
	add	eax, 9
	cmp	DWORD PTR _source$[ebp], eax
	jb	SHORT $LN85@decDivideO
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN86@decDivideO
$LN85@decDivideO:
; Line 4479
	jmp	SHORT $LN84@decDivideO
$LN83@decDivideO:
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 1
	mov	DWORD PTR _target$[ebp], eax
$LN84@decDivideO:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _var1$[ebp]
	jb	SHORT $LN82@decDivideO
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 0
	jmp	SHORT $LN83@decDivideO
$LN82@decDivideO:
; Line 4482
	mov	eax, DWORD PTR _var1units$[ebp]
	mov	DWORD PTR _var2ulen$[ebp], eax
; Line 4483
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN130@decDivideO
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv312[ebp], eax
	jmp	SHORT $LN131@decDivideO
$LN130@decDivideO:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv312[ebp], edx
$LN131@decDivideO:
	mov	eax, DWORD PTR tv312[ebp]
	mov	DWORD PTR _var2units$[ebp], eax
; Line 4484
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 9
	mov	DWORD PTR _var2$[ebp], eax
; Line 4485
	mov	eax, DWORD PTR _var2units$[ebp]
	mov	ecx, DWORD PTR _var2$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _msu2$[ebp], edx
; Line 4489
	mov	eax, DWORD PTR _msu2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _msu2plus$[ebp], ecx
; Line 4490
	cmp	DWORD PTR _var2units$[ebp], 1
	jle	SHORT $LN81@decDivideO
	mov	eax, DWORD PTR _msu2plus$[ebp]
	add	eax, 1
	mov	DWORD PTR _msu2plus$[ebp], eax
$LN81@decDivideO:
; Line 4491
	mov	eax, DWORD PTR _msu2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, 10					; 0000000aH
	mov	DWORD PTR _msu2pair$[ebp], ecx
; Line 4492
	cmp	DWORD PTR _var2units$[ebp], 1
	jle	SHORT $LN80@decDivideO
; Line 4493
	mov	eax, DWORD PTR _msu2$[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	add	ecx, DWORD PTR _msu2pair$[ebp]
	mov	DWORD PTR _msu2pair$[ebp], ecx
; Line 4494
	cmp	DWORD PTR _var2units$[ebp], 2
	jle	SHORT $LN80@decDivideO
	mov	eax, DWORD PTR _msu2pair$[ebp]
	add	eax, 1
	mov	DWORD PTR _msu2pair$[ebp], eax
$LN80@decDivideO:
; Line 4503
	mov	DWORD PTR _pow$[ebp], OFFSET _DECPOWERS+4
	jmp	SHORT $LN78@decDivideO
$LN77@decDivideO:
	mov	eax, DWORD PTR _pow$[ebp]
	add	eax, 4
	mov	DWORD PTR _pow$[ebp], eax
$LN78@decDivideO:
	mov	eax, DWORD PTR _msu1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pow$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jb	SHORT $LN76@decDivideO
	mov	eax, DWORD PTR _exponent$[ebp]
	sub	eax, 1
	mov	DWORD PTR _exponent$[ebp], eax
	jmp	SHORT $LN77@decDivideO
$LN76@decDivideO:
; Line 4504
	mov	DWORD PTR _pow$[ebp], OFFSET _DECPOWERS+4
	jmp	SHORT $LN75@decDivideO
$LN74@decDivideO:
	mov	eax, DWORD PTR _pow$[ebp]
	add	eax, 4
	mov	DWORD PTR _pow$[ebp], eax
$LN75@decDivideO:
	mov	eax, DWORD PTR _msu2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pow$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jb	SHORT $LN73@decDivideO
	mov	eax, DWORD PTR _exponent$[ebp]
	add	eax, 1
	mov	DWORD PTR _exponent$[ebp], eax
	jmp	SHORT $LN74@decDivideO
$LN73@decDivideO:
; Line 4511
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 128				; 00000080H
	jne	$LN72@decDivideO
; Line 4514
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN132@decDivideO
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv345[ebp], eax
	jmp	SHORT $LN133@decDivideO
$LN132@decDivideO:
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv345[ebp], edx
$LN133@decDivideO:
	mov	eax, DWORD PTR _var1units$[ebp]
	sub	eax, DWORD PTR tv345[ebp]
	mov	DWORD PTR _var1initpad$[ebp], eax
; Line 4516
	cmp	DWORD PTR _exponent$[ebp], 0
	jge	SHORT $LN71@decDivideO
	mov	eax, DWORD PTR _exponent$[ebp]
	neg	eax
	mov	DWORD PTR _cut$[ebp], eax
	jmp	SHORT $LN70@decDivideO
$LN71@decDivideO:
; Line 4517
	mov	eax, DWORD PTR _exponent$[ebp]
	and	eax, -2147483648			; 80000000H
	jns	SHORT $LN147@decDivideO
	dec	eax
	or	eax, -1
	inc	eax
$LN147@decDivideO:
	mov	ecx, 1
	sub	ecx, eax
	mov	DWORD PTR _cut$[ebp], ecx
$LN70@decDivideO:
; Line 4518
	mov	eax, DWORD PTR _cut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var1units$[ebp]
	push	ecx
	mov	edx, DWORD PTR _var1$[ebp]
	push	edx
	call	_decShiftToLeast
	add	esp, 12					; 0000000cH
; Line 4519
	mov	eax, DWORD PTR _exponent$[ebp]
	add	eax, DWORD PTR _cut$[ebp]
	mov	DWORD PTR _exponent$[ebp], eax
; Line 4520
	mov	eax, DWORD PTR _var1initpad$[ebp]
	sub	eax, DWORD PTR _cut$[ebp]
	mov	DWORD PTR _var1initpad$[ebp], eax
; Line 4522
	mov	eax, DWORD PTR _msu1$[ebp]
	mov	DWORD PTR _u$11297[ebp], eax
	jmp	SHORT $LN69@decDivideO
$LN68@decDivideO:
	mov	eax, DWORD PTR _cut$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cut$[ebp], eax
	mov	ecx, DWORD PTR _u$11297[ebp]
	sub	ecx, 1
	mov	DWORD PTR _u$11297[ebp], ecx
$LN69@decDivideO:
	cmp	DWORD PTR _cut$[ebp], 1
	jl	SHORT $LN67@decDivideO
	mov	eax, DWORD PTR _u$11297[ebp]
	mov	BYTE PTR [eax], 0
	jmp	SHORT $LN68@decDivideO
$LN67@decDivideO:
; Line 4524
	jmp	SHORT $LN66@decDivideO
$LN72@decDivideO:
; Line 4525
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _maxexponent$[ebp], edx
; Line 4528
	mov	eax, DWORD PTR _msu1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _msu2$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jge	SHORT $LN66@decDivideO
; Line 4529
	mov	eax, DWORD PTR _var2ulen$[ebp]
	sub	eax, 1
	mov	DWORD PTR _var2ulen$[ebp], eax
; Line 4530
	mov	eax, DWORD PTR _exponent$[ebp]
	sub	eax, 1
	mov	DWORD PTR _exponent$[ebp], eax
$LN66@decDivideO:
; Line 4535
	mov	DWORD PTR _accunits$[ebp], 0
; Line 4536
	mov	DWORD PTR _accdigits$[ebp], 0
; Line 4537
	mov	eax, DWORD PTR _acclength$[ebp]
	mov	ecx, DWORD PTR _acc$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _accnext$[ebp], edx
$LN64@decDivideO:
; Line 4539
	mov	BYTE PTR _thisunit$[ebp], 0
$LN62@decDivideO:
; Line 4544
	jmp	SHORT $LN60@decDivideO
$LN59@decDivideO:
	mov	eax, DWORD PTR _msu1$[ebp]
	sub	eax, 1
	mov	DWORD PTR _msu1$[ebp], eax
$LN60@decDivideO:
	mov	eax, DWORD PTR _msu1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN58@decDivideO
	mov	eax, DWORD PTR _msu1$[ebp]
	cmp	eax, DWORD PTR _var1$[ebp]
	jbe	SHORT $LN58@decDivideO
	mov	eax, DWORD PTR _var1units$[ebp]
	sub	eax, 1
	mov	DWORD PTR _var1units$[ebp], eax
	jmp	SHORT $LN59@decDivideO
$LN58@decDivideO:
; Line 4546
	mov	eax, DWORD PTR _var1units$[ebp]
	cmp	eax, DWORD PTR _var2ulen$[ebp]
	jge	SHORT $LN57@decDivideO
	jmp	$LN61@decDivideO
$LN57@decDivideO:
; Line 4547
	mov	eax, DWORD PTR _var1units$[ebp]
	cmp	eax, DWORD PTR _var2ulen$[ebp]
	jne	$LN56@decDivideO
; Line 4551
	mov	eax, DWORD PTR _msu2$[ebp]
	mov	DWORD PTR _pv2$11317[ebp], eax
; Line 4552
	mov	eax, DWORD PTR _msu1$[ebp]
	mov	DWORD PTR _pv1$11316[ebp], eax
	jmp	SHORT $LN55@decDivideO
$LN54@decDivideO:
	mov	eax, DWORD PTR _pv1$11316[ebp]
	sub	eax, 1
	mov	DWORD PTR _pv1$11316[ebp], eax
	mov	ecx, DWORD PTR _pv2$11317[ebp]
	sub	ecx, 1
	mov	DWORD PTR _pv2$11317[ebp], ecx
$LN55@decDivideO:
; Line 4554
	mov	BYTE PTR _v2$11318[ebp], 0
; Line 4555
	mov	eax, DWORD PTR _pv2$11317[ebp]
	cmp	eax, DWORD PTR _var2$[ebp]
	jb	SHORT $LN52@decDivideO
	mov	eax, DWORD PTR _pv2$11317[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _v2$11318[ebp], cl
$LN52@decDivideO:
; Line 4556
	mov	eax, DWORD PTR _pv1$11316[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _v2$11318[ebp]
	cmp	ecx, edx
	je	SHORT $LN51@decDivideO
	jmp	SHORT $LN53@decDivideO
$LN51@decDivideO:
; Line 4557
	mov	eax, DWORD PTR _pv1$11316[ebp]
	cmp	eax, DWORD PTR _var1$[ebp]
	jne	SHORT $LN50@decDivideO
	jmp	SHORT $LN53@decDivideO
$LN50@decDivideO:
; Line 4558
	jmp	SHORT $LN54@decDivideO
$LN53@decDivideO:
; Line 4560
	mov	eax, DWORD PTR _pv1$11316[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _v2$11318[ebp]
	cmp	ecx, edx
	jge	SHORT $LN49@decDivideO
	jmp	$LN61@decDivideO
$LN49@decDivideO:
; Line 4561
	mov	eax, DWORD PTR _pv1$11316[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _v2$11318[ebp]
	cmp	ecx, edx
	jne	SHORT $LN48@decDivideO
; Line 4565
	mov	al, BYTE PTR _thisunit$[ebp]
	add	al, 1
	mov	BYTE PTR _thisunit$[ebp], al
; Line 4566
	mov	eax, DWORD PTR _var1$[ebp]
	mov	BYTE PTR [eax], 0
; Line 4567
	mov	DWORD PTR _var1units$[ebp], 1
; Line 4568
	jmp	$LN61@decDivideO
$LN48@decDivideO:
; Line 4573
	mov	eax, DWORD PTR _msu1$[ebp]
	movzx	eax, BYTE PTR [eax]
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _msu1$[ebp]
	movzx	edx, BYTE PTR [ecx-1]
	add	eax, edx
	cdq
	idiv	DWORD PTR _msu2pair$[ebp]
	mov	DWORD PTR _mult$[ebp], eax
; Line 4575
	jmp	SHORT $LN47@decDivideO
$LN56@decDivideO:
; Line 4578
	mov	eax, DWORD PTR _msu1$[ebp]
	movzx	eax, BYTE PTR [eax]
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _msu1$[ebp]
	movzx	edx, BYTE PTR [ecx-1]
	add	eax, edx
	cdq
	idiv	DWORD PTR _msu2plus$[ebp]
	mov	DWORD PTR _mult$[ebp], eax
$LN47@decDivideO:
; Line 4580
	cmp	DWORD PTR _mult$[ebp], 0
	jne	SHORT $LN46@decDivideO
	mov	DWORD PTR _mult$[ebp], 1
$LN46@decDivideO:
; Line 4582
	movzx	eax, BYTE PTR _thisunit$[ebp]
	add	eax, DWORD PTR _mult$[ebp]
	mov	BYTE PTR _thisunit$[ebp], al
; Line 4585
	mov	eax, DWORD PTR _var2ulen$[ebp]
	sub	eax, DWORD PTR _var2units$[ebp]
	mov	DWORD PTR _shift$[ebp], eax
; Line 4593
	mov	eax, DWORD PTR _mult$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _var1$[ebp]
	add	ecx, DWORD PTR _shift$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _var2units$[ebp]
	push	edx
	mov	eax, DWORD PTR _var2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var1units$[ebp]
	sub	ecx, DWORD PTR _shift$[ebp]
	push	ecx
	mov	edx, DWORD PTR _var1$[ebp]
	add	edx, DWORD PTR _shift$[ebp]
	push	edx
	call	_decUnitAddSub
	add	esp, 28					; 0000001cH
; Line 4599
	jmp	$LN62@decDivideO
$LN61@decDivideO:
; Line 4603
	cmp	DWORD PTR _accunits$[ebp], 0
	jne	SHORT $LN44@decDivideO
	movzx	eax, BYTE PTR _thisunit$[ebp]
	test	eax, eax
	je	SHORT $LN45@decDivideO
$LN44@decDivideO:
; Line 4604
	mov	eax, DWORD PTR _accnext$[ebp]
	mov	cl, BYTE PTR _thisunit$[ebp]
	mov	BYTE PTR [eax], cl
; Line 4606
	cmp	DWORD PTR _accunits$[ebp], 0
	jne	SHORT $LN43@decDivideO
; Line 4607
	mov	eax, DWORD PTR _accdigits$[ebp]
	add	eax, 1
	mov	DWORD PTR _accdigits$[ebp], eax
; Line 4608
	mov	DWORD PTR _pow$[ebp], OFFSET _DECPOWERS+4
	jmp	SHORT $LN42@decDivideO
$LN41@decDivideO:
	mov	eax, DWORD PTR _pow$[ebp]
	add	eax, 4
	mov	DWORD PTR _pow$[ebp], eax
$LN42@decDivideO:
	movzx	eax, BYTE PTR _thisunit$[ebp]
	mov	ecx, DWORD PTR _pow$[ebp]
	cmp	eax, DWORD PTR [ecx]
	jb	SHORT $LN40@decDivideO
	mov	eax, DWORD PTR _accdigits$[ebp]
	add	eax, 1
	mov	DWORD PTR _accdigits$[ebp], eax
	jmp	SHORT $LN41@decDivideO
$LN40@decDivideO:
; Line 4610
	jmp	SHORT $LN39@decDivideO
$LN43@decDivideO:
	mov	eax, DWORD PTR _accdigits$[ebp]
	add	eax, 1
	mov	DWORD PTR _accdigits$[ebp], eax
$LN39@decDivideO:
; Line 4611
	mov	eax, DWORD PTR _accunits$[ebp]
	add	eax, 1
	mov	DWORD PTR _accunits$[ebp], eax
; Line 4612
	mov	eax, DWORD PTR _accnext$[ebp]
	sub	eax, 1
	mov	DWORD PTR _accnext$[ebp], eax
; Line 4613
	mov	eax, DWORD PTR _accdigits$[ebp]
	cmp	eax, DWORD PTR _reqdigits$[ebp]
	jle	SHORT $LN45@decDivideO
	jmp	SHORT $LN63@decDivideO
$LN45@decDivideO:
; Line 4618
	mov	eax, DWORD PTR _var1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN37@decDivideO
	cmp	DWORD PTR _var1units$[ebp], 1
	jne	SHORT $LN37@decDivideO
; Line 4619
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 80					; 00000050H
	je	SHORT $LN36@decDivideO
	jmp	SHORT $LN63@decDivideO
$LN36@decDivideO:
; Line 4620
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN37@decDivideO
	mov	eax, DWORD PTR _exponent$[ebp]
	cmp	eax, DWORD PTR _maxexponent$[ebp]
	jg	SHORT $LN37@decDivideO
	jmp	SHORT $LN63@decDivideO
$LN37@decDivideO:
; Line 4625
	cmp	DWORD PTR _exponent$[ebp], 0
	jne	SHORT $LN34@decDivideO
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN34@decDivideO
	jmp	SHORT $LN63@decDivideO
$LN34@decDivideO:
; Line 4629
	mov	eax, DWORD PTR _var2ulen$[ebp]
	sub	eax, 1
	mov	DWORD PTR _var2ulen$[ebp], eax
; Line 4630
	mov	eax, DWORD PTR _exponent$[ebp]
	sub	eax, 1
	mov	DWORD PTR _exponent$[ebp], eax
; Line 4631
	jmp	$LN64@decDivideO
$LN63@decDivideO:
; Line 4638
	cmp	DWORD PTR _accunits$[ebp], 0
	jne	SHORT $LN33@decDivideO
; Line 4639
	mov	DWORD PTR _accunits$[ebp], 1
; Line 4640
	mov	DWORD PTR _accdigits$[ebp], 1
; Line 4641
	mov	eax, DWORD PTR _accnext$[ebp]
	mov	BYTE PTR [eax], 0
	jmp	SHORT $LN32@decDivideO
$LN33@decDivideO:
; Line 4643
	mov	eax, DWORD PTR _accnext$[ebp]
	add	eax, 1
	mov	DWORD PTR _accnext$[ebp], eax
$LN32@decDivideO:
; Line 4646
	mov	DWORD PTR _residue$[ebp], 0
; Line 4647
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN31@decDivideO
; Line 4649
	mov	eax, DWORD PTR _var1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN29@decDivideO
	cmp	DWORD PTR _var1units$[ebp], 1
	jle	SHORT $LN28@decDivideO
$LN29@decDivideO:
	mov	DWORD PTR _residue$[ebp], 1
$LN28@decDivideO:
; Line 4680
	jmp	$LN27@decDivideO
$LN31@decDivideO:
; Line 4682
	mov	eax, DWORD PTR _accdigits$[ebp]
	add	eax, DWORD PTR _exponent$[ebp]
	cmp	eax, DWORD PTR _reqdigits$[ebp]
	jle	SHORT $LN26@decDivideO
; Line 4683
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 4
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4684
	jmp	$LN119@decDivideO
$LN26@decDivideO:
; Line 4686
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 80					; 00000050H
	je	$LN27@decDivideO
; Line 4690
	mov	BYTE PTR _wasodd$11356[ebp], 0
; Line 4694
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _bits$[ebp], cl
; Line 4698
	mov	eax, DWORD PTR _var1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN24@decDivideO
	cmp	DWORD PTR _var1units$[ebp], 1
	jne	SHORT $LN24@decDivideO
; Line 4699
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _exp$11360[ebp], ecx
; Line 4700
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _exp$11360[ebp]
	jge	SHORT $LN23@decDivideO
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _exp$11360[ebp], ecx
$LN23@decDivideO:
; Line 4701
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 4705
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _exp$11360[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 4706
	movzx	eax, BYTE PTR _bits$[ebp]
	and	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [ecx+8], al
; Line 4707
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 4708
	jmp	$LN119@decDivideO
$LN24@decDivideO:
; Line 4711
	mov	eax, DWORD PTR _accnext$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 1
	je	SHORT $LN22@decDivideO
	mov	BYTE PTR _wasodd$11356[ebp], 1
$LN22@decDivideO:
; Line 4712
	mov	eax, DWORD PTR _accnext$[ebp]
	mov	DWORD PTR _quotlsu$11357[ebp], eax
; Line 4713
	mov	eax, DWORD PTR _accdigits$[ebp]
	mov	DWORD PTR _quotdigits$11358[ebp], eax
; Line 4719
	mov	eax, DWORD PTR _var1initpad$[ebp]
	add	eax, DWORD PTR _exponent$[ebp]
	mov	ecx, DWORD PTR _lhs$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _rhs$[ebp]
	add	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _postshift$11355[ebp], eax
; Line 4721
	mov	eax, DWORD PTR _var1initpad$[ebp]
	cmp	eax, DWORD PTR _postshift$11355[ebp]
	jge	SHORT $LN21@decDivideO
	mov	eax, DWORD PTR _var1initpad$[ebp]
	mov	DWORD PTR _postshift$11355[ebp], eax
$LN21@decDivideO:
; Line 4724
	mov	eax, DWORD PTR _postshift$11355[ebp]
	push	eax
	mov	ecx, DWORD PTR _var1units$[ebp]
	push	ecx
	mov	edx, DWORD PTR _var1$[ebp]
	push	edx
	call	_decShiftToLeast
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _var1units$[ebp], eax
; Line 4725
	mov	eax, DWORD PTR _var1$[ebp]
	mov	DWORD PTR _accnext$[ebp], eax
; Line 4726
	mov	eax, DWORD PTR _var1units$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var1$[ebp]
	push	ecx
	call	_decGetDigits
	add	esp, 8
	mov	DWORD PTR _accdigits$[ebp], eax
; Line 4727
	cmp	DWORD PTR _accdigits$[ebp], 49		; 00000031H
	jg	SHORT $LN134@decDivideO
	mov	eax, DWORD PTR _accdigits$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv533[ebp], ecx
	jmp	SHORT $LN135@decDivideO
$LN134@decDivideO:
	mov	edx, DWORD PTR _accdigits$[ebp]
	mov	DWORD PTR tv533[ebp], edx
$LN135@decDivideO:
	mov	eax, DWORD PTR tv533[ebp]
	mov	DWORD PTR _accunits$[ebp], eax
; Line 4729
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _exponent$[ebp], ecx
; Line 4730
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _exponent$[ebp]
	jge	SHORT $LN20@decDivideO
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _exponent$[ebp], ecx
$LN20@decDivideO:
; Line 4735
	movzx	eax, BYTE PTR _op$[ebp]
	and	eax, 16					; 00000010H
	je	$LN27@decDivideO
; Line 4742
	push	1
	mov	eax, DWORD PTR _accnext$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _accunits$[ebp]
	push	ecx
	mov	edx, DWORD PTR _accnext$[ebp]
	push	edx
	mov	eax, DWORD PTR _accunits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _accnext$[ebp]
	push	ecx
	call	_decUnitAddSub
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _tarunits$11368[ebp], eax
; Line 4749
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN136@decDivideO
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv558[ebp], eax
	jmp	SHORT $LN137@decDivideO
$LN136@decDivideO:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv558[ebp], edx
$LN137@decDivideO:
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _exponent$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv558[ebp]
	push	edx
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 9
	push	eax
	mov	ecx, DWORD PTR _tarunits$11368[ebp]
	push	ecx
	mov	edx, DWORD PTR _accnext$[ebp]
	push	edx
	call	_decUnitCompare
	add	esp, 20					; 00000014H
	mov	DWORD PTR _compare$11367[ebp], eax
; Line 4750
	cmp	DWORD PTR _compare$11367[ebp], -2147483648 ; 80000000H
	jne	SHORT $LN18@decDivideO
; Line 4751
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4752
	jmp	$LN119@decDivideO
$LN18@decDivideO:
; Line 4756
	mov	eax, DWORD PTR _accnext$[ebp]
	mov	DWORD PTR _up$11369[ebp], eax
	jmp	SHORT $LN17@decDivideO
$LN16@decDivideO:
	mov	eax, DWORD PTR _up$11369[ebp]
	add	eax, 1
	mov	DWORD PTR _up$11369[ebp], eax
$LN17@decDivideO:
	mov	eax, DWORD PTR _accnext$[ebp]
	add	eax, DWORD PTR _tarunits$11368[ebp]
	cmp	DWORD PTR _up$11369[ebp], eax
	jae	SHORT $LN15@decDivideO
; Line 4758
	mov	eax, DWORD PTR _up$11369[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 1
	mov	DWORD PTR _half$11375[ebp], ecx
; Line 4759
	mov	eax, DWORD PTR _up$11369[ebp]
	movzx	eax, BYTE PTR [eax]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _up$11369[ebp]
	mov	BYTE PTR [ecx], al
; Line 4760
	cmp	DWORD PTR _half$11375[ebp], 0
	jne	SHORT $LN14@decDivideO
	jmp	SHORT $LN16@decDivideO
$LN14@decDivideO:
; Line 4761
	mov	eax, DWORD PTR _up$11369[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	add	ecx, 5
	mov	edx, DWORD PTR _up$11369[ebp]
	mov	BYTE PTR [edx-1], cl
; Line 4762
	jmp	SHORT $LN16@decDivideO
$LN15@decDivideO:
; Line 4765
	cmp	DWORD PTR _compare$11367[ebp], 0
	jg	SHORT $LN12@decDivideO
	cmp	DWORD PTR _compare$11367[ebp], 0
	jne	$LN27@decDivideO
	movzx	eax, BYTE PTR _wasodd$11356[ebp]
	test	eax, eax
	je	$LN27@decDivideO
$LN12@decDivideO:
; Line 4771
	mov	BYTE PTR _allnines$11382[ebp], 0
; Line 4772
	mov	eax, DWORD PTR _quotdigits$11358[ebp]
	cmp	eax, DWORD PTR _reqdigits$[ebp]
	jne	SHORT $LN11@decDivideO
; Line 4773
	mov	eax, DWORD PTR _quotlsu$11357[ebp]
	mov	DWORD PTR _up$11369[ebp], eax
	jmp	SHORT $LN10@decDivideO
$LN9@decDivideO:
	mov	eax, DWORD PTR _up$11369[ebp]
	add	eax, 1
	mov	DWORD PTR _up$11369[ebp], eax
$LN10@decDivideO:
; Line 4774
	cmp	DWORD PTR _quotdigits$11358[ebp], 1
	jle	SHORT $LN7@decDivideO
; Line 4775
	mov	eax, DWORD PTR _up$11369[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	je	SHORT $LN6@decDivideO
	jmp	SHORT $LN11@decDivideO
$LN6@decDivideO:
; Line 4777
	jmp	SHORT $LN5@decDivideO
$LN7@decDivideO:
; Line 4778
	mov	eax, DWORD PTR _up$11369[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _quotdigits$11358[ebp]
	mov	eax, DWORD PTR _DECPOWERS[edx*4]
	sub	eax, 1
	cmp	ecx, eax
	jne	SHORT $LN4@decDivideO
	mov	BYTE PTR _allnines$11382[ebp], 1
$LN4@decDivideO:
; Line 4779
	jmp	SHORT $LN11@decDivideO
$LN5@decDivideO:
; Line 4781
	mov	eax, DWORD PTR _quotdigits$11358[ebp]
	sub	eax, 1
	mov	DWORD PTR _quotdigits$11358[ebp], eax
; Line 4782
	jmp	SHORT $LN9@decDivideO
$LN11@decDivideO:
; Line 4784
	movzx	eax, BYTE PTR _allnines$11382[ebp]
	test	eax, eax
	je	SHORT $LN3@decDivideO
; Line 4785
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 4
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4786
	jmp	$LN119@decDivideO
$LN3@decDivideO:
; Line 4790
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _exponent$[ebp]
	mov	DWORD PTR _exp$11379[ebp], ecx
; Line 4792
	mov	eax, DWORD PTR _exp$11379[ebp]
	mov	DWORD PTR _expunits$11380[ebp], eax
; Line 4793
	mov	eax, DWORD PTR _exp$11379[ebp]
	and	eax, -2147483648			; 80000000H
	jns	SHORT $LN148@decDivideO
	dec	eax
	or	eax, -1
	inc	eax
$LN148@decDivideO:
	mov	DWORD PTR _exprem$11381[ebp], eax
; Line 4797
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN138@decDivideO
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv613[ebp], eax
	jmp	SHORT $LN139@decDivideO
$LN138@decDivideO:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv613[ebp], edx
$LN139@decDivideO:
	mov	eax, DWORD PTR _exprem$11381[ebp]
	mov	ecx, DWORD PTR _DECPOWERS[eax*4]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _accnext$[ebp]
	push	edx
	mov	eax, DWORD PTR _expunits$11380[ebp]
	push	eax
	mov	ecx, DWORD PTR tv613[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	add	edx, 9
	push	edx
	mov	eax, DWORD PTR _accunits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _accnext$[ebp]
	push	ecx
	call	_decUnitAddSub
	add	esp, 28					; 0000001cH
	neg	eax
	mov	DWORD PTR _accunits$[ebp], eax
; Line 4798
	mov	eax, DWORD PTR _accunits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _accnext$[ebp]
	push	ecx
	call	_decGetDigits
	add	esp, 8
	mov	DWORD PTR _accdigits$[ebp], eax
; Line 4799
	cmp	DWORD PTR _accdigits$[ebp], 49		; 00000031H
	jg	SHORT $LN140@decDivideO
	mov	eax, DWORD PTR _accdigits$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv628[ebp], ecx
	jmp	SHORT $LN141@decDivideO
$LN140@decDivideO:
	mov	edx, DWORD PTR _accdigits$[ebp]
	mov	DWORD PTR tv628[ebp], edx
$LN141@decDivideO:
	mov	eax, DWORD PTR tv628[ebp]
	mov	DWORD PTR _accunits$[ebp], eax
; Line 4801
	movzx	eax, BYTE PTR _bits$[ebp]
	xor	eax, 128				; 00000080H
	mov	BYTE PTR _bits$[ebp], al
$LN27@decDivideO:
; Line 4808
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 4809
	movzx	eax, BYTE PTR _bits$[ebp]
	and	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [ecx+8], al
; Line 4812
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _accdigits$[ebp]
	push	edx
	mov	eax, DWORD PTR _accnext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_decSetCoeff
	add	esp, 24					; 00000018H
; Line 4814
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 4820
	xor	eax, eax
	jne	$LN121@decDivideO
$LN119@decDivideO:
; Line 4822
	cmp	DWORD PTR _varalloc$[ebp], 0
	je	SHORT $LN2@decDivideO
	mov	eax, DWORD PTR _varalloc$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@decDivideO:
; Line 4823
	cmp	DWORD PTR _allocacc$[ebp], 0
	je	SHORT $LN1@decDivideO
	mov	eax, DWORD PTR _allocacc$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@decDivideO:
; Line 4828
	mov	eax, DWORD PTR _res$[ebp]
; Line 4829
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN146@decDivideO
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 904				; 00000388H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN146@decDivideO:
	DD	3
	DD	$LN145@decDivideO
$LN145@decDivideO:
	DD	-56					; ffffffc8H
	DD	47					; 0000002fH
	DD	$LN142@decDivideO
	DD	-212					; ffffff2cH
	DD	73					; 00000049H
	DD	$LN143@decDivideO
	DD	-392					; fffffe78H
	DD	4
	DD	$LN144@decDivideO
$LN144@decDivideO:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN143@decDivideO:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN142@decDivideO:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_decDivideOp ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EI@JCJLIMFM@?$AAi?$AAa?$AAc?$AAc?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?1?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA6?$AA4@ ; `string'
PUBLIC	?__LINE__Var@?1??decMultiplyOp@@9@9@0911e54c	; `decMultiplyOp'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
EXTRN	__allmul:PROC
EXTRN	__aulldiv:PROC
;	COMDAT ??_C@_1EI@JCJLIMFM@?$AAi?$AAa?$AAc?$AAc?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?1?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA6?$AA4@
CONST	SEGMENT
??_C@_1EI@JCJLIMFM@?$AAi?$AAa?$AAc?$AAc?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?1?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA6?$AA4@ DB 'i'
	DB	00H, 'a', 00H, 'c', 00H, 'c', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '7', 00H, 'f', 00H, 'f', 00H, 'f'
	DB	00H, 'f', 00H, 'f', 00H, 'f', 00H, 'f', 00H, '/', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'u'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, '6', 00H, '4', 00H, '_', 00H
	DB	't', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??decMultiplyOp@@9@9@0911e54c
_DATA	SEGMENT
?__LINE__Var@?1??decMultiplyOp@@9@9@0911e54c DD 01306H	; `decMultiplyOp'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _decMultiplyOp
_TEXT	SEGMENT
tv325 = -1060						; size = 4
tv562 = -1056						; size = 4
tv344 = -1056						; size = 4
tv337 = -1056						; size = 4
tv319 = -1056						; size = 4
_part$11533 = -856					; size = 4
_item$11528 = -844					; size = 4
_carry2$11519 = -832					; size = 4
_hold$11460 = -820					; size = 4
_p$ = -808						; size = 4
_lp$ = -796						; size = 4
_up$ = -784						; size = 4
_cup$ = -772						; size = 4
_count$ = -760						; size = 4
_carry$ = -748						; size = 4
_lcarry$ = -736						; size = 8
_lazy$ = -720						; size = 4
_iacc$ = -708						; size = 4
_irhs$ = -696						; size = 4
_ilhs$ = -684						; size = 4
_rmsi$ = -672						; size = 4
_lmsi$ = -660						; size = 4
_rip$ = -648						; size = 4
_lip$ = -636						; size = 4
_zoff$ = -624						; size = 4
_zacc$ = -612						; size = 4
_zaccbuff$ = -600					; size = 160
_allocrhi$ = -432					; size = 4
_zrhi$ = -420						; size = 4
_zrhibuff$ = -408					; size = 40
_alloclhi$ = -360					; size = 4
_zlhi$ = -348						; size = 4
_zlhibuff$ = -336					; size = 40
_shift$ = -288						; size = 4
_madlength$ = -276					; size = 4
_mermsup$ = -264					; size = 4
_mer$ = -252						; size = 4
_accbuff$ = -240					; size = 145
_allocacc$ = -84					; size = 4
_needbytes$ = -72					; size = 4
_acc$ = -60						; size = 4
_bits$ = -45						; size = 1
_residue$ = -36						; size = 4
_exponent$ = -24					; size = 4
_accunits$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_status$ = 24						; size = 4
_decMultiplyOp PROC					; COMDAT
; Line 4870
	push	ebp
	mov	ebp, esp
	sub	esp, 1060				; 00000424H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1060]
	mov	ecx, 265				; 00000109H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 4873
	mov	DWORD PTR _residue$[ebp], 0
; Line 4877
	mov	DWORD PTR _allocacc$[ebp], 0
; Line 4900
	lea	eax, DWORD PTR _zlhibuff$[ebp]
	mov	DWORD PTR _zlhi$[ebp], eax
; Line 4901
	mov	DWORD PTR _alloclhi$[ebp], 0
; Line 4903
	lea	eax, DWORD PTR _zrhibuff$[ebp]
	mov	DWORD PTR _zrhi$[ebp], eax
; Line 4904
	mov	DWORD PTR _allocrhi$[ebp], 0
; Line 4907
	lea	eax, DWORD PTR _zaccbuff$[ebp]
	mov	DWORD PTR _zacc$[ebp], eax
; Line 4934
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	xor	ecx, eax
	and	ecx, 128				; 00000080H
	mov	BYTE PTR _bits$[ebp], cl
; Line 4937
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 112				; 00000070H
	je	$LN62@decMultipl
; Line 4938
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 112				; 00000070H
	and	ecx, 48					; 00000030H
	je	SHORT $LN61@decMultipl
; Line 4939
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decNaNs
	add	esp, 20					; 00000014H
; Line 4940
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN63@decMultipl
$LN61@decMultipl:
; Line 4943
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	jne	SHORT $LN58@decMultipl
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN58@decMultipl
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN58@decMultipl
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN59@decMultipl
$LN58@decMultipl:
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	jne	SHORT $LN60@decMultipl
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN60@decMultipl
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN60@decMultipl
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN60@decMultipl
$LN59@decMultipl:
; Line 4944
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4945
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN63@decMultipl
$LN60@decMultipl:
; Line 4946
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 4947
	movzx	eax, BYTE PTR _bits$[ebp]
	or	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [ecx+8], al
; Line 4948
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN63@decMultipl
$LN62@decMultipl:
; Line 4954
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN55@decMultipl
; Line 4955
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	DWORD PTR _hold$11460[ebp], eax
; Line 4956
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR _lhs$[ebp], eax
; Line 4957
	mov	eax, DWORD PTR _hold$11460[ebp]
	mov	DWORD PTR _rhs$[ebp], eax
$LN55@decMultipl:
; Line 4982
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 2
	jle	$LN52@decMultipl
; Line 4984
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 8
	cdq
	mov	ecx, 9
	idiv	ecx
	mov	DWORD PTR _ilhs$[ebp], eax
; Line 4985
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 8
	cdq
	mov	ecx, 9
	idiv	ecx
	mov	DWORD PTR _irhs$[ebp], eax
; Line 4986
	mov	eax, DWORD PTR _ilhs$[ebp]
	add	eax, DWORD PTR _irhs$[ebp]
	mov	DWORD PTR _iacc$[ebp], eax
; Line 4989
	mov	eax, DWORD PTR _ilhs$[ebp]
	shl	eax, 2
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 4990
	cmp	DWORD PTR _needbytes$[ebp], 40		; 00000028H
	jle	SHORT $LN51@decMultipl
; Line 4991
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _alloclhi$[ebp], eax
; Line 4992
	mov	eax, DWORD PTR _alloclhi$[ebp]
	mov	DWORD PTR _zlhi$[ebp], eax
$LN51@decMultipl:
; Line 4993
	mov	eax, DWORD PTR _irhs$[ebp]
	shl	eax, 2
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 4994
	cmp	DWORD PTR _needbytes$[ebp], 40		; 00000028H
	jle	SHORT $LN50@decMultipl
; Line 4995
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocrhi$[ebp], eax
; Line 4996
	mov	eax, DWORD PTR _allocrhi$[ebp]
	mov	DWORD PTR _zrhi$[ebp], eax
$LN50@decMultipl:
; Line 5008
	cmp	DWORD PTR _iacc$[ebp], 268435455	; 0fffffffH
	jbe	SHORT $LN65@decMultipl
	mov	eax, DWORD PTR ?__LINE__Var@?1??decMultiplyOp@@9@9@0911e54c
	add	eax, 138				; 0000008aH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KDDHHPIP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1EI@JCJLIMFM@?$AAi?$AAa?$AAc?$AAc?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?1?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AAi?$AAn?$AAt?$AA6?$AA4@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN65@decMultipl:
; Line 5009
	mov	eax, DWORD PTR _iacc$[ebp]
	shl	eax, 3
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 5011
	mov	eax, DWORD PTR _iacc$[ebp]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _zoff$[ebp], eax
; Line 5012
	mov	eax, DWORD PTR _zoff$[ebp]
	mov	ecx, DWORD PTR _needbytes$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _needbytes$[ebp], edx
; Line 5014
	cmp	DWORD PTR _needbytes$[ebp], 160		; 000000a0H
	jle	SHORT $LN49@decMultipl
; Line 5015
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocacc$[ebp], eax
; Line 5016
	mov	eax, DWORD PTR _allocacc$[ebp]
	mov	DWORD PTR _zacc$[ebp], eax
$LN49@decMultipl:
; Line 5017
	cmp	DWORD PTR _zlhi$[ebp], 0
	je	SHORT $LN47@decMultipl
	cmp	DWORD PTR _zrhi$[ebp], 0
	je	SHORT $LN47@decMultipl
	cmp	DWORD PTR _zacc$[ebp], 0
	jne	SHORT $LN48@decMultipl
$LN47@decMultipl:
; Line 5018
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5019
	jmp	$LN53@decMultipl
$LN48@decMultipl:
; Line 5021
	mov	eax, DWORD PTR _zacc$[ebp]
	mov	DWORD PTR _acc$[ebp], eax
; Line 5023
	mov	eax, DWORD PTR _zoff$[ebp]
	mov	ecx, DWORD PTR _zacc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _zacc$[ebp], edx
; Line 5027
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _lhs$[ebp]
	add	edx, 9
	mov	DWORD PTR _cup$[ebp], edx
	mov	eax, DWORD PTR _zlhi$[ebp]
	mov	DWORD PTR _lip$[ebp], eax
	jmp	SHORT $LN46@decMultipl
$LN45@decMultipl:
	mov	eax, DWORD PTR _lip$[ebp]
	add	eax, 4
	mov	DWORD PTR _lip$[ebp], eax
$LN46@decMultipl:
	cmp	DWORD PTR _count$[ebp], 0
	jle	$LN44@decMultipl
; Line 5029
	mov	DWORD PTR _p$[ebp], 0
	mov	eax, DWORD PTR _lip$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN43@decMultipl
$LN42@decMultipl:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _cup$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cup$[ebp], ecx
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
$LN43@decMultipl:
	cmp	DWORD PTR _p$[ebp], 9
	jge	SHORT $LN41@decMultipl
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN41@decMultipl
; Line 5030
	mov	eax, DWORD PTR _cup$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	imul	ecx, DWORD PTR _DECPOWERS[edx*4]
	mov	eax, DWORD PTR _lip$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _lip$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN42@decMultipl
$LN41@decMultipl:
	jmp	$LN45@decMultipl
$LN44@decMultipl:
; Line 5031
	mov	eax, DWORD PTR _lip$[ebp]
	sub	eax, 4
	mov	DWORD PTR _lmsi$[ebp], eax
; Line 5032
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	add	edx, 9
	mov	DWORD PTR _cup$[ebp], edx
	mov	eax, DWORD PTR _zrhi$[ebp]
	mov	DWORD PTR _rip$[ebp], eax
	jmp	SHORT $LN40@decMultipl
$LN39@decMultipl:
	mov	eax, DWORD PTR _rip$[ebp]
	add	eax, 4
	mov	DWORD PTR _rip$[ebp], eax
$LN40@decMultipl:
	cmp	DWORD PTR _count$[ebp], 0
	jle	$LN38@decMultipl
; Line 5034
	mov	DWORD PTR _p$[ebp], 0
	mov	eax, DWORD PTR _rip$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN37@decMultipl
$LN36@decMultipl:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _cup$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cup$[ebp], ecx
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
$LN37@decMultipl:
	cmp	DWORD PTR _p$[ebp], 9
	jge	SHORT $LN35@decMultipl
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN35@decMultipl
; Line 5035
	mov	eax, DWORD PTR _cup$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	imul	ecx, DWORD PTR _DECPOWERS[edx*4]
	mov	eax, DWORD PTR _rip$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _rip$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN36@decMultipl
$LN35@decMultipl:
	jmp	$LN39@decMultipl
$LN38@decMultipl:
; Line 5036
	mov	eax, DWORD PTR _rip$[ebp]
	sub	eax, 4
	mov	DWORD PTR _rmsi$[ebp], eax
; Line 5039
	mov	eax, DWORD PTR _zacc$[ebp]
	mov	DWORD PTR _lp$[ebp], eax
	jmp	SHORT $LN34@decMultipl
$LN33@decMultipl:
	mov	eax, DWORD PTR _lp$[ebp]
	add	eax, 8
	mov	DWORD PTR _lp$[ebp], eax
$LN34@decMultipl:
	mov	eax, DWORD PTR _iacc$[ebp]
	mov	ecx, DWORD PTR _zacc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	cmp	DWORD PTR _lp$[ebp], edx
	jae	SHORT $LN32@decMultipl
	mov	eax, DWORD PTR _lp$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	jmp	SHORT $LN33@decMultipl
$LN32@decMultipl:
; Line 5058
	mov	DWORD PTR _lazy$[ebp], 18		; 00000012H
; Line 5059
	mov	eax, DWORD PTR _zrhi$[ebp]
	mov	DWORD PTR _rip$[ebp], eax
	jmp	SHORT $LN31@decMultipl
$LN30@decMultipl:
	mov	eax, DWORD PTR _rip$[ebp]
	add	eax, 4
	mov	DWORD PTR _rip$[ebp], eax
$LN31@decMultipl:
	mov	eax, DWORD PTR _rip$[ebp]
	cmp	eax, DWORD PTR _rmsi$[ebp]
	ja	$LN29@decMultipl
; Line 5060
	mov	eax, DWORD PTR _rip$[ebp]
	sub	eax, DWORD PTR _zrhi$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _zacc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _lp$[ebp], edx
; Line 5061
	mov	eax, DWORD PTR _zlhi$[ebp]
	mov	DWORD PTR _lip$[ebp], eax
	jmp	SHORT $LN28@decMultipl
$LN27@decMultipl:
	mov	eax, DWORD PTR _lip$[ebp]
	add	eax, 4
	mov	DWORD PTR _lip$[ebp], eax
	mov	ecx, DWORD PTR _lp$[ebp]
	add	ecx, 8
	mov	DWORD PTR _lp$[ebp], ecx
$LN28@decMultipl:
	mov	eax, DWORD PTR _lip$[ebp]
	cmp	eax, DWORD PTR _lmsi$[ebp]
	ja	SHORT $LN26@decMultipl
; Line 5062
	mov	eax, DWORD PTR _lip$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _rip$[ebp]
	mov	edx, DWORD PTR [ecx]
	mul	edx
	mov	ecx, DWORD PTR _lp$[ebp]
	add	eax, DWORD PTR [ecx]
	adc	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 5063
	jmp	SHORT $LN27@decMultipl
$LN26@decMultipl:
; Line 5064
	mov	eax, DWORD PTR _lazy$[ebp]
	sub	eax, 1
	mov	DWORD PTR _lazy$[ebp], eax
; Line 5065
	cmp	DWORD PTR _lazy$[ebp], 0
	jle	SHORT $LN25@decMultipl
	mov	eax, DWORD PTR _rip$[ebp]
	cmp	eax, DWORD PTR _rmsi$[ebp]
	je	SHORT $LN25@decMultipl
	jmp	$LN30@decMultipl
$LN25@decMultipl:
; Line 5066
	mov	DWORD PTR _lazy$[ebp], 18		; 00000012H
; Line 5068
	mov	eax, DWORD PTR _zacc$[ebp]
	mov	DWORD PTR _lp$[ebp], eax
	jmp	SHORT $LN24@decMultipl
$LN23@decMultipl:
	mov	eax, DWORD PTR _lp$[ebp]
	add	eax, 8
	mov	DWORD PTR _lp$[ebp], eax
$LN24@decMultipl:
	mov	eax, DWORD PTR _iacc$[ebp]
	mov	ecx, DWORD PTR _zacc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	cmp	DWORD PTR _lp$[ebp], edx
	jae	$LN22@decMultipl
; Line 5069
	mov	eax, DWORD PTR _lp$[ebp]
	mov	DWORD PTR tv562[ebp], eax
	mov	ecx, DWORD PTR tv562[ebp]
	cmp	DWORD PTR [ecx+4], 0
	ja	SHORT $LN21@decMultipl
	jb	SHORT $LN74@decMultipl
	mov	edx, DWORD PTR tv562[ebp]
	cmp	DWORD PTR [edx], 1000000000		; 3b9aca00H
	jae	SHORT $LN21@decMultipl
$LN74@decMultipl:
	jmp	SHORT $LN23@decMultipl
$LN21@decMultipl:
; Line 5070
	mov	eax, DWORD PTR _lp$[ebp]
	push	0
	push	1000000000				; 3b9aca00H
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__aulldiv
	mov	DWORD PTR _lcarry$[ebp], eax
	mov	DWORD PTR _lcarry$[ebp+4], edx
; Line 5075
	cmp	DWORD PTR _lcarry$[ebp+4], 0
	ja	SHORT $LN20@decMultipl
	jb	SHORT $LN75@decMultipl
	cmp	DWORD PTR _lcarry$[ebp], 1000000000	; 3b9aca00H
	jae	SHORT $LN20@decMultipl
$LN75@decMultipl:
	mov	eax, DWORD PTR _lcarry$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 5076
	jmp	$LN19@decMultipl
$LN20@decMultipl:
; Line 5077
	push	0
	push	1000000000				; 3b9aca00H
	mov	eax, DWORD PTR _lcarry$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _lcarry$[ebp]
	push	ecx
	call	__aulldiv
	mov	DWORD PTR _carry2$11519[ebp], eax
; Line 5078
	mov	eax, DWORD PTR _carry2$11519[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _lp$[ebp]
	add	eax, DWORD PTR [edx+16]
	adc	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _lp$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+20], ecx
; Line 5079
	mov	eax, DWORD PTR _carry2$11519[ebp]
	xor	ecx, ecx
	push	232830643				; 0de0b6b3H
	push	-1486618624				; a7640000H
	push	ecx
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	esi, DWORD PTR [ecx]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+4]
	sbb	eax, edx
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], eax
; Line 5080
	mov	eax, DWORD PTR _carry2$11519[ebp]
	mov	ecx, 1000000000				; 3b9aca00H
	mul	ecx
	mov	ecx, DWORD PTR _lcarry$[ebp]
	sub	ecx, eax
	mov	eax, DWORD PTR _lcarry$[ebp+4]
	sbb	eax, edx
	mov	DWORD PTR _carry$[ebp], ecx
$LN19@decMultipl:
; Line 5082
	mov	eax, DWORD PTR _carry$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _lp$[ebp]
	add	eax, DWORD PTR [edx+8]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _lp$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
; Line 5083
	mov	eax, DWORD PTR _carry$[ebp]
	mov	ecx, 1000000000				; 3b9aca00H
	mul	ecx
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	esi, DWORD PTR [ecx]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+4]
	sbb	eax, edx
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], eax
; Line 5084
	jmp	$LN23@decMultipl
$LN22@decMultipl:
; Line 5085
	jmp	$LN30@decMultipl
$LN29@decMultipl:
; Line 5093
	mov	eax, DWORD PTR _zacc$[ebp]
	mov	DWORD PTR _lp$[ebp], eax
	mov	ecx, DWORD PTR _acc$[ebp]
	mov	DWORD PTR _up$[ebp], ecx
	jmp	SHORT $LN18@decMultipl
$LN17@decMultipl:
	mov	eax, DWORD PTR _lp$[ebp]
	add	eax, 8
	mov	DWORD PTR _lp$[ebp], eax
$LN18@decMultipl:
	mov	eax, DWORD PTR _iacc$[ebp]
	mov	ecx, DWORD PTR _zacc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	cmp	DWORD PTR _lp$[ebp], edx
	jae	$LN16@decMultipl
; Line 5094
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _item$11528[ebp], ecx
; Line 5095
	mov	DWORD PTR _p$[ebp], 0
	jmp	SHORT $LN15@decMultipl
$LN14@decMultipl:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 1
	mov	DWORD PTR _up$[ebp], ecx
$LN15@decMultipl:
	cmp	DWORD PTR _p$[ebp], 8
	jge	SHORT $LN13@decMultipl
; Line 5096
	mov	eax, DWORD PTR _item$11528[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	DWORD PTR _part$11533[ebp], eax
; Line 5097
	mov	eax, DWORD PTR _part$11533[ebp]
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _item$11528[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _up$[ebp]
	mov	BYTE PTR [edx], cl
; Line 5098
	mov	eax, DWORD PTR _part$11533[ebp]
	mov	DWORD PTR _item$11528[ebp], eax
; Line 5099
	jmp	SHORT $LN14@decMultipl
$LN13@decMultipl:
; Line 5100
	mov	eax, DWORD PTR _up$[ebp]
	mov	cl, BYTE PTR _item$11528[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
; Line 5101
	jmp	$LN17@decMultipl
$LN16@decMultipl:
; Line 5102
	mov	eax, DWORD PTR _up$[ebp]
	sub	eax, DWORD PTR _acc$[ebp]
	mov	DWORD PTR _accunits$[ebp], eax
; Line 5104
	jmp	$LN12@decMultipl
$LN52@decMultipl:
; Line 5108
	lea	eax, DWORD PTR _accbuff$[ebp]
	mov	DWORD PTR _acc$[ebp], eax
; Line 5109
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN66@decMultipl
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv319[ebp], eax
	jmp	SHORT $LN67@decMultipl
$LN66@decMultipl:
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv319[ebp], edx
$LN67@decMultipl:
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN68@decMultipl
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv325[ebp], eax
	jmp	SHORT $LN69@decMultipl
$LN68@decMultipl:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv325[ebp], edx
$LN69@decMultipl:
	mov	eax, DWORD PTR tv319[ebp]
	add	eax, DWORD PTR tv325[ebp]
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 5110
	cmp	DWORD PTR _needbytes$[ebp], 145		; 00000091H
	jle	SHORT $LN11@decMultipl
; Line 5111
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocacc$[ebp], eax
; Line 5112
	cmp	DWORD PTR _allocacc$[ebp], 0
	jne	SHORT $LN10@decMultipl
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	$LN53@decMultipl
$LN10@decMultipl:
; Line 5113
	mov	eax, DWORD PTR _allocacc$[ebp]
	mov	DWORD PTR _acc$[ebp], eax
$LN11@decMultipl:
; Line 5121
	mov	DWORD PTR _accunits$[ebp], 1
; Line 5122
	mov	eax, DWORD PTR _acc$[ebp]
	mov	BYTE PTR [eax], 0
; Line 5123
	mov	DWORD PTR _shift$[ebp], 0
; Line 5124
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN70@decMultipl
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv337[ebp], eax
	jmp	SHORT $LN71@decMultipl
$LN70@decMultipl:
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv337[ebp], edx
$LN71@decMultipl:
	mov	eax, DWORD PTR tv337[ebp]
	mov	DWORD PTR _madlength$[ebp], eax
; Line 5125
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN72@decMultipl
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv344[ebp], eax
	jmp	SHORT $LN73@decMultipl
$LN72@decMultipl:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv344[ebp], edx
$LN73@decMultipl:
	mov	eax, DWORD PTR tv344[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	lea	edx, DWORD PTR [ecx+eax+9]
	mov	DWORD PTR _mermsup$[ebp], edx
; Line 5127
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 9
	mov	DWORD PTR _mer$[ebp], eax
	jmp	SHORT $LN9@decMultipl
$LN8@decMultipl:
	mov	eax, DWORD PTR _mer$[ebp]
	add	eax, 1
	mov	DWORD PTR _mer$[ebp], eax
$LN9@decMultipl:
	mov	eax, DWORD PTR _mer$[ebp]
	cmp	eax, DWORD PTR _mermsup$[ebp]
	jae	SHORT $LN12@decMultipl
; Line 5130
	mov	eax, DWORD PTR _mer$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@decMultipl
; Line 5133
	mov	eax, DWORD PTR _mer$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _acc$[ebp]
	add	edx, DWORD PTR _shift$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _madlength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lhs$[ebp]
	add	ecx, 9
	push	ecx
	mov	edx, DWORD PTR _accunits$[ebp]
	sub	edx, DWORD PTR _shift$[ebp]
	push	edx
	mov	eax, DWORD PTR _acc$[ebp]
	add	eax, DWORD PTR _shift$[ebp]
	push	eax
	call	_decUnitAddSub
	add	esp, 28					; 0000001cH
	add	eax, DWORD PTR _shift$[ebp]
	mov	DWORD PTR _accunits$[ebp], eax
; Line 5134
	jmp	SHORT $LN5@decMultipl
$LN6@decMultipl:
; Line 5135
	mov	eax, DWORD PTR _acc$[ebp]
	add	eax, DWORD PTR _accunits$[ebp]
	mov	BYTE PTR [eax], 0
; Line 5136
	mov	eax, DWORD PTR _accunits$[ebp]
	add	eax, 1
	mov	DWORD PTR _accunits$[ebp], eax
$LN5@decMultipl:
; Line 5139
	mov	eax, DWORD PTR _shift$[ebp]
	add	eax, 1
	mov	DWORD PTR _shift$[ebp], eax
; Line 5140
	jmp	$LN8@decMultipl
$LN12@decMultipl:
; Line 5152
	mov	eax, DWORD PTR _res$[ebp]
	mov	cl, BYTE PTR _bits$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 5153
	mov	eax, DWORD PTR _accunits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _acc$[ebp]
	push	ecx
	call	_decGetDigits
	add	esp, 8
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], eax
; Line 5160
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _rhs$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _exponent$[ebp], ecx
; Line 5161
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jge	SHORT $LN4@decMultipl
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jge	SHORT $LN4@decMultipl
	cmp	DWORD PTR _exponent$[ebp], 0
	jle	SHORT $LN4@decMultipl
; Line 5162
	mov	DWORD PTR _exponent$[ebp], -1999999998	; 88ca6c02H
$LN4@decMultipl:
; Line 5163
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _exponent$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 5167
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _acc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decSetCoeff
	add	esp, 24					; 00000018H
; Line 5168
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 5169
	xor	eax, eax
	jne	$LN55@decMultipl
$LN53@decMultipl:
; Line 5171
	cmp	DWORD PTR _allocacc$[ebp], 0
	je	SHORT $LN3@decMultipl
	mov	eax, DWORD PTR _allocacc$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN3@decMultipl:
; Line 5177
	cmp	DWORD PTR _allocrhi$[ebp], 0
	je	SHORT $LN2@decMultipl
	mov	eax, DWORD PTR _allocrhi$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@decMultipl:
; Line 5178
	cmp	DWORD PTR _alloclhi$[ebp], 0
	je	SHORT $LN1@decMultipl
	mov	eax, DWORD PTR _alloclhi$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@decMultipl:
; Line 5180
	mov	eax, DWORD PTR _res$[ebp]
$LN63@decMultipl:
; Line 5181
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN82@decMultipl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1060				; 00000424H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN82@decMultipl:
	DD	5
	DD	$LN81@decMultipl
$LN81@decMultipl:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN76@decMultipl
	DD	-240					; ffffff10H
	DD	145					; 00000091H
	DD	$LN77@decMultipl
	DD	-336					; fffffeb0H
	DD	40					; 00000028H
	DD	$LN78@decMultipl
	DD	-408					; fffffe68H
	DD	40					; 00000028H
	DD	$LN79@decMultipl
	DD	-600					; fffffda8H
	DD	160					; 000000a0H
	DD	$LN80@decMultipl
$LN80@decMultipl:
	DB	122					; 0000007aH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN79@decMultipl:
	DB	122					; 0000007aH
	DB	114					; 00000072H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN78@decMultipl:
	DB	122					; 0000007aH
	DB	108					; 0000006cH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN77@decMultipl:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN76@decMultipl:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
_decMultiplyOp ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _decExpOp
_TEXT	SEGMENT
tv264 = -1008						; size = 4
tv248 = -1008						; size = 4
tv237 = -1008						; size = 4
tv225 = -1008						; size = 4
tv180 = -1008						; size = 4
_n$11650 = -808						; size = 4
_i$11649 = -796						; size = 4
_seenbit$11648 = -784					; size = 4
_newrhs$11624 = -772					; size = 4
_use$11621 = -760					; size = 4
_lever$11620 = -748					; size = 4
_maxlever$11619 = -736					; size = 4
_shift$11615 = -724					; size = 4
_numone$ = -712						; size = 12
_d$ = -692						; size = 4
_bufd$ = -680						; size = 36
_a$ = -636						; size = 4
_allocbufa$ = -624					; size = 4
_bufa$ = -612						; size = 180
_t$ = -424						; size = 4
_allocbuft$ = -412					; size = 4
_buft$ = -400						; size = 96
_allocrhs$ = -296					; size = 4
_bufr$ = -284						; size = 84
_comp$ = -192						; size = 4
_dset$ = -180						; size = 28
_tset$ = -144						; size = 28
_aset$ = -108						; size = 28
_x$ = -72						; size = 4
_needbytes$ = -60					; size = 4
_residue$ = -48						; size = 4
_p$ = -36						; size = 4
_h$ = -24						; size = 4
_ignore$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_status$ = 20						; size = 4
_decExpOp PROC						; COMDAT
; Line 5263
	push	ebp
	mov	ebp, esp
	sub	esp, 1008				; 000003f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1008]
	mov	ecx, 252				; 000000fcH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5264
	mov	DWORD PTR _ignore$[ebp], 0
; Line 5269
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 5277
	mov	DWORD PTR _allocrhs$[ebp], 0
; Line 5285
	mov	DWORD PTR _allocbuft$[ebp], 0
; Line 5286
	lea	eax, DWORD PTR _buft$[ebp]
	mov	DWORD PTR _t$[ebp], eax
; Line 5289
	mov	DWORD PTR _allocbufa$[ebp], 0
; Line 5290
	lea	eax, DWORD PTR _bufa$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 5294
	lea	eax, DWORD PTR _bufd$[ebp]
	mov	DWORD PTR _d$[ebp], eax
$LN40@decExpOp:
; Line 5303
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN37@decExpOp
; Line 5304
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN36@decExpOp
; Line 5305
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN35@decExpOp
; Line 5306
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
	jmp	SHORT $LN34@decExpOp
$LN35@decExpOp:
; Line 5307
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
$LN34@decExpOp:
; Line 5309
	jmp	SHORT $LN33@decExpOp
$LN36@decExpOp:
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decNaNs
	add	esp, 20					; 00000014H
$LN33@decExpOp:
; Line 5310
	jmp	$LN38@decExpOp
$LN37@decExpOp:
; Line 5312
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN32@decExpOp
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN32@decExpOp
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN32@decExpOp
; Line 5313
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 5314
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 5315
	jmp	$LN38@decExpOp
$LN32@decExpOp:
; Line 5331
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 5332
	mov	eax, DWORD PTR _d$[ebp]
	mov	BYTE PTR [eax+9], 4
; Line 5333
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 5334
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN31@decExpOp
	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN31@decExpOp:
; Line 5335
	push	1
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	call	_decCompare
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _comp$[ebp], eax
; Line 5336
	cmp	DWORD PTR _comp$[ebp], -2147483648	; 80000000H
	jne	SHORT $LN30@decExpOp
; Line 5337
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5338
	jmp	$LN38@decExpOp
$LN30@decExpOp:
; Line 5339
	cmp	DWORD PTR _comp$[ebp], 0
	jl	SHORT $LN29@decExpOp
; Line 5340
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR _shift$11615[ebp], ecx
; Line 5341
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 5342
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 5343
	mov	eax, DWORD PTR _shift$11615[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _res$[ebp]
	add	ecx, 9
	push	ecx
	call	_decShiftToMost
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], eax
; Line 5344
	mov	eax, DWORD PTR _shift$11615[ebp]
	neg	eax
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 5345
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2080				; 00000820H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5346
	jmp	$LN38@decExpOp
$LN29@decExpOp:
; Line 5350
	push	64					; 00000040H
	lea	eax, DWORD PTR _aset$[ebp]
	push	eax
	call	_uprv_decContextDefault_56
	add	esp, 8
; Line 5352
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _aset$[ebp+4], ecx
; Line 5353
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _aset$[ebp+8], ecx
; Line 5354
	mov	BYTE PTR _aset$[ebp+24], 0
; Line 5358
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _rhs$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _h$[ebp], ecx
; Line 5364
	cmp	DWORD PTR _h$[ebp], 8
	jle	SHORT $LN28@decExpOp
; Line 5368
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 5369
	mov	eax, DWORD PTR _a$[ebp]
	mov	BYTE PTR [eax+9], 2
; Line 5370
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN27@decExpOp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+4], -2			; fffffffeH
$LN27@decExpOp:
; Line 5371
	mov	DWORD PTR _h$[ebp], 8
; Line 5372
	mov	DWORD PTR _p$[ebp], 9
; Line 5374
	jmp	$LN26@decExpOp
$LN28@decExpOp:
; Line 5375
	mov	eax, DWORD PTR _rhs$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 8
	setg	cl
	mov	DWORD PTR _maxlever$11619[ebp], ecx
; Line 5386
	mov	eax, 8
	sub	eax, DWORD PTR _h$[ebp]
	cmp	eax, DWORD PTR _maxlever$11619[ebp]
	jle	SHORT $LN43@decExpOp
	mov	ecx, DWORD PTR _maxlever$11619[ebp]
	mov	DWORD PTR tv180[ebp], ecx
	jmp	SHORT $LN44@decExpOp
$LN43@decExpOp:
	mov	edx, 8
	sub	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv180[ebp], edx
$LN44@decExpOp:
	mov	eax, DWORD PTR tv180[ebp]
	mov	DWORD PTR _lever$11620[ebp], eax
; Line 5387
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	sub	ecx, DWORD PTR _lever$11620[ebp]
	mov	DWORD PTR _use$11621[ebp], ecx
; Line 5388
	mov	eax, DWORD PTR _h$[ebp]
	add	eax, DWORD PTR _lever$11620[ebp]
	mov	DWORD PTR _h$[ebp], eax
; Line 5389
	jns	SHORT $LN25@decExpOp
; Line 5390
	mov	eax, DWORD PTR _use$11621[ebp]
	add	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _use$11621[ebp], eax
; Line 5391
	mov	DWORD PTR _h$[ebp], 0
$LN25@decExpOp:
; Line 5394
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _use$11621[ebp]
	je	$LN24@decExpOp
; Line 5395
	lea	eax, DWORD PTR _bufr$[ebp]
	mov	DWORD PTR _newrhs$11624[ebp], eax
; Line 5396
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN45@decExpOp
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv225[ebp], eax
	jmp	SHORT $LN46@decExpOp
$LN45@decExpOp:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv225[ebp], edx
$LN46@decExpOp:
	mov	eax, DWORD PTR tv225[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 5397
	cmp	DWORD PTR _needbytes$[ebp], 84		; 00000054H
	jbe	SHORT $LN23@decExpOp
; Line 5398
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocrhs$[ebp], eax
; Line 5399
	cmp	DWORD PTR _allocrhs$[ebp], 0
	jne	SHORT $LN22@decExpOp
; Line 5400
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5401
	jmp	$LN38@decExpOp
$LN22@decExpOp:
; Line 5402
	mov	eax, DWORD PTR _allocrhs$[ebp]
	mov	DWORD PTR _newrhs$11624[ebp], eax
$LN23@decExpOp:
; Line 5404
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newrhs$11624[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 5405
	mov	eax, DWORD PTR _newrhs$11624[ebp]
	mov	ecx, DWORD PTR _use$11621[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 5406
	mov	eax, DWORD PTR _newrhs$11624[ebp]
	mov	DWORD PTR _x$[ebp], eax
$LN24@decExpOp:
; Line 5420
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN47@decExpOp
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv237[ebp], ecx
	jmp	SHORT $LN48@decExpOp
$LN47@decExpOp:
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv237[ebp], eax
$LN48@decExpOp:
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR tv237[ebp]
	lea	eax, DWORD PTR [edx+ecx+2]
	mov	DWORD PTR _p$[ebp], eax
; Line 5428
	mov	eax, DWORD PTR _p$[ebp]
	shl	eax, 1
	cmp	eax, 49					; 00000031H
	jg	SHORT $LN49@decExpOp
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR _d2utable[ecx*2]
	mov	DWORD PTR tv248[ebp], edx
	jmp	SHORT $LN50@decExpOp
$LN49@decExpOp:
	mov	eax, DWORD PTR _p$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv248[ebp], eax
$LN50@decExpOp:
	mov	ecx, DWORD PTR tv248[ebp]
	add	ecx, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], ecx
; Line 5429
	cmp	DWORD PTR _needbytes$[ebp], 180		; 000000b4H
	jbe	SHORT $LN21@decExpOp
; Line 5430
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbufa$[ebp], eax
; Line 5431
	cmp	DWORD PTR _allocbufa$[ebp], 0
	jne	SHORT $LN20@decExpOp
; Line 5432
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5433
	jmp	$LN38@decExpOp
$LN20@decExpOp:
; Line 5434
	mov	eax, DWORD PTR _allocbufa$[ebp]
	mov	DWORD PTR _a$[ebp], eax
$LN21@decExpOp:
; Line 5440
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	cmp	eax, 49					; 00000031H
	jg	SHORT $LN51@decExpOp
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR _d2utable[ecx+2]
	mov	DWORD PTR tv264[ebp], edx
	jmp	SHORT $LN52@decExpOp
$LN51@decExpOp:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR tv264[ebp], eax
$LN52@decExpOp:
	mov	ecx, DWORD PTR tv264[ebp]
	add	ecx, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], ecx
; Line 5441
	cmp	DWORD PTR _needbytes$[ebp], 96		; 00000060H
	jbe	SHORT $LN19@decExpOp
; Line 5442
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbuft$[ebp], eax
; Line 5443
	cmp	DWORD PTR _allocbuft$[ebp], 0
	jne	SHORT $LN18@decExpOp
; Line 5444
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5445
	jmp	$LN38@decExpOp
$LN18@decExpOp:
; Line 5446
	mov	eax, DWORD PTR _allocbuft$[ebp]
	mov	DWORD PTR _t$[ebp], eax
$LN19@decExpOp:
; Line 5449
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 5450
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
	mov	eax, DWORD PTR _a$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 5451
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
	mov	eax, DWORD PTR _d$[ebp]
	mov	BYTE PTR [eax+9], 2
; Line 5452
	lea	eax, DWORD PTR _numone$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
	mov	BYTE PTR _numone$[ebp+9], 1
; Line 5455
	push	64					; 00000040H
	lea	eax, DWORD PTR _tset$[ebp]
	push	eax
	call	_uprv_decContextDefault_56
	add	esp, 8
; Line 5456
	mov	ecx, 7
	lea	esi, DWORD PTR _tset$[ebp]
	lea	edi, DWORD PTR _dset$[ebp]
	rep movsd
; Line 5458
	mov	eax, DWORD PTR _p$[ebp]
	shl	eax, 1
	mov	DWORD PTR _aset$[ebp], eax
; Line 5460
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _tset$[ebp], eax
; Line 5461
	mov	DWORD PTR _tset$[ebp+8], -999999999	; c4653601H
$LN17@decExpOp:
; Line 5471
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 5472
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 5473
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	128					; 00000080H
	lea	ecx, DWORD PTR _tset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	_decDivideOp
	add	esp, 24					; 00000018H
; Line 5479
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _t$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [edx+eax+1]
	cmp	ecx, edx
	jl	SHORT $LN15@decExpOp
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _p$[ebp]
	jl	SHORT $LN15@decExpOp
	jmp	SHORT $LN26@decExpOp
$LN15@decExpOp:
; Line 5480
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _dset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _numone$[ebp]
	push	edx
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 5481
	jmp	$LN17@decExpOp
$LN26@decExpOp:
; Line 5493
	cmp	DWORD PTR _h$[ebp], 0
	jle	$LN14@decExpOp
; Line 5494
	mov	DWORD PTR _seenbit$11648[ebp], 0
; Line 5496
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _DECPOWERS[eax*4]
	mov	DWORD PTR _n$11650[ebp], ecx
; Line 5497
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _aset$[ebp], eax
; Line 5501
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 5502
	mov	DWORD PTR _i$11649[ebp], 1
	jmp	SHORT $LN13@decExpOp
$LN12@decExpOp:
	mov	eax, DWORD PTR _i$11649[ebp]
	add	eax, 1
	mov	DWORD PTR _i$11649[ebp], eax
$LN13@decExpOp:
; Line 5504
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 8704				; 00002200H
	je	SHORT $LN10@decExpOp
; Line 5505
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 512				; 00000200H
	jne	SHORT $LN8@decExpOp
	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN10@decExpOp
	mov	eax, DWORD PTR _t$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN10@decExpOp
	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN10@decExpOp
$LN8@decExpOp:
	jmp	$LN11@decExpOp
$LN10@decExpOp:
; Line 5506
	mov	eax, DWORD PTR _n$11650[ebp]
	shl	eax, 1
	mov	DWORD PTR _n$11650[ebp], eax
; Line 5507
	jns	SHORT $LN7@decExpOp
; Line 5508
	mov	DWORD PTR _seenbit$11648[ebp], 1
; Line 5509
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
$LN7@decExpOp:
; Line 5511
	cmp	DWORD PTR _i$11649[ebp], 31		; 0000001fH
	jne	SHORT $LN6@decExpOp
	jmp	SHORT $LN11@decExpOp
$LN6@decExpOp:
; Line 5512
	cmp	DWORD PTR _seenbit$11648[ebp], 0
	jne	SHORT $LN5@decExpOp
	jmp	$LN12@decExpOp
$LN5@decExpOp:
; Line 5513
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 5514
	jmp	$LN12@decExpOp
$LN11@decExpOp:
; Line 5516
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _a$[ebp], eax
$LN14@decExpOp:
; Line 5520
	mov	DWORD PTR _residue$[ebp], 1
; Line 5521
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN4@decExpOp
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN4@decExpOp
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN4@decExpOp
	mov	DWORD PTR _residue$[ebp], 0
$LN4@decExpOp:
; Line 5522
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _aset$[ebp], ecx
; Line 5523
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	lea	edx, DWORD PTR _aset$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 5524
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 5525
	xor	eax, eax
	jne	$LN40@decExpOp
$LN38@decExpOp:
; Line 5527
	cmp	DWORD PTR _allocrhs$[ebp], 0
	je	SHORT $LN3@decExpOp
	mov	eax, DWORD PTR _allocrhs$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN3@decExpOp:
; Line 5528
	cmp	DWORD PTR _allocbufa$[ebp], 0
	je	SHORT $LN2@decExpOp
	mov	eax, DWORD PTR _allocbufa$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@decExpOp:
; Line 5529
	cmp	DWORD PTR _allocbuft$[ebp], 0
	je	SHORT $LN1@decExpOp
	mov	eax, DWORD PTR _allocbuft$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@decExpOp:
; Line 5531
	mov	eax, DWORD PTR _res$[ebp]
; Line 5532
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN64@decExpOp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1008				; 000003f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN64@decExpOp:
	DD	10					; 0000000aH
	DD	$LN63@decExpOp
$LN63@decExpOp:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN53@decExpOp
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN54@decExpOp
	DD	-108					; ffffff94H
	DD	28					; 0000001cH
	DD	$LN55@decExpOp
	DD	-144					; ffffff70H
	DD	28					; 0000001cH
	DD	$LN56@decExpOp
	DD	-180					; ffffff4cH
	DD	28					; 0000001cH
	DD	$LN57@decExpOp
	DD	-284					; fffffee4H
	DD	84					; 00000054H
	DD	$LN58@decExpOp
	DD	-400					; fffffe70H
	DD	96					; 00000060H
	DD	$LN59@decExpOp
	DD	-612					; fffffd9cH
	DD	180					; 000000b4H
	DD	$LN60@decExpOp
	DD	-680					; fffffd58H
	DD	36					; 00000024H
	DD	$LN61@decExpOp
	DD	-712					; fffffd38H
	DD	12					; 0000000cH
	DD	$LN62@decExpOp
$LN62@decExpOp:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN61@decExpOp:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	100					; 00000064H
	DB	0
$LN60@decExpOp:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	0
$LN59@decExpOp:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN58@decExpOp:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	0
$LN57@decExpOp:
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN56@decExpOp:
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN55@decExpOp:
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN54@decExpOp:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN53@decExpOp:
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
_decExpOp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@FDAAIMKH@0?4693147180559945309417232121458@ ; `string'
PUBLIC	??_C@_0CK@DHKLINEO@2?4302585092994045684017991454684@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0CL@FDAAIMKH@0?4693147180559945309417232121458@
CONST	SEGMENT
??_C@_0CL@FDAAIMKH@0?4693147180559945309417232121458@ DB '0.6931471805599'
	DB	'453094172321214581765680755', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DHKLINEO@2?4302585092994045684017991454684@
CONST	SEGMENT
??_C@_0CK@DHKLINEO@2?4302585092994045684017991454684@ DB '2.3025850929940'
	DB	'45684017991454684364207601', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _decLnOp
_TEXT	SEGMENT
tv194 = -628						; size = 4
tv174 = -628						; size = 4
tv197 = -624						; size = 4
tv177 = -624						; size = 4
tv164 = -624						; size = 4
tv190 = -620						; size = 4
tv170 = -620						; size = 4
tv163 = -620						; size = 4
tv187 = -616						; size = 4
tv167 = -616						; size = 4
tv160 = -616						; size = 4
_bset$ = -416						; size = 28
_aset$ = -380						; size = 28
_cmp$ = -344						; size = 12
_numone$ = -324						; size = 12
_b$ = -304						; size = 4
_allocbufb$ = -292					; size = 4
_bufb$ = -280						; size = 96
_a$ = -176						; size = 4
_allocbufa$ = -164					; size = 4
_bufa$ = -152						; size = 60
_t$ = -84						; size = 4
_pp$ = -72						; size = 4
_p$ = -60						; size = 4
_r$ = -48						; size = 4
_residue$ = -36						; size = 4
_needbytes$ = -24					; size = 4
_ignore$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_rhs$ = 12						; size = 4
_set$ = 16						; size = 4
_status$ = 20						; size = 4
_decLnOp PROC						; COMDAT
; Line 5627
	push	ebp
	mov	ebp, esp
	sub	esp, 628				; 00000274H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-628]
	mov	ecx, 157				; 0000009dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5628
	mov	DWORD PTR _ignore$[ebp], 0
; Line 5639
	mov	DWORD PTR _allocbufa$[ebp], 0
; Line 5640
	lea	eax, DWORD PTR _bufa$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 5642
	mov	DWORD PTR _allocbufb$[ebp], 0
; Line 5643
	lea	eax, DWORD PTR _bufb$[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN33@decLnOp:
; Line 5655
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN30@decLnOp
; Line 5656
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN29@decLnOp
; Line 5657
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN28@decLnOp
; Line 5658
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN27@decLnOp
$LN28@decLnOp:
; Line 5659
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
$LN27@decLnOp:
; Line 5661
	jmp	SHORT $LN26@decLnOp
$LN29@decLnOp:
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decNaNs
	add	esp, 20					; 00000014H
$LN26@decLnOp:
; Line 5662
	jmp	$LN31@decLnOp
$LN30@decLnOp:
; Line 5664
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN25@decLnOp
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN25@decLnOp
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN25@decLnOp
; Line 5665
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 5666
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 192			; 000000c0H
; Line 5667
	jmp	$LN31@decLnOp
$LN25@decLnOp:
; Line 5670
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN24@decLnOp
; Line 5671
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5672
	jmp	$LN31@decLnOp
$LN24@decLnOp:
; Line 5677
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN23@decLnOp
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 40			; 00000028H
	jg	$LN23@decLnOp
; Line 5679
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN22@decLnOp
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 1
	jne	SHORT $LN22@decLnOp
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 2
	jne	SHORT $LN22@decLnOp
; Line 5683
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _aset$[ebp]
	rep movsd
	mov	DWORD PTR _aset$[ebp+12], 3
; Line 5685
	lea	eax, DWORD PTR _aset$[ebp]
	push	eax
	push	OFFSET ??_C@_0CK@DHKLINEO@2?4302585092994045684017991454684@
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberFromString_56
	add	esp, 12					; 0000000cH
; Line 5686
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2080				; 00000820H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5687
	jmp	$LN31@decLnOp
$LN22@decLnOp:
; Line 5688
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 2
	jne	SHORT $LN23@decLnOp
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN23@decLnOp
; Line 5689
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _aset$[ebp]
	rep movsd
	mov	DWORD PTR _aset$[ebp+12], 3
; Line 5691
	lea	eax, DWORD PTR _aset$[ebp]
	push	eax
	push	OFFSET ??_C@_0CL@FDAAIMKH@0?4693147180559945309417232121458@
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberFromString_56
	add	esp, 12					; 0000000cH
; Line 5692
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2080				; 00000820H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5693
	jmp	$LN31@decLnOp
$LN23@decLnOp:
; Line 5701
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 7
	jge	SHORT $LN36@decLnOp
	mov	DWORD PTR tv160[ebp], 7
	jmp	SHORT $LN37@decLnOp
$LN36@decLnOp:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv160[ebp], edx
$LN37@decLnOp:
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR tv160[ebp]
	jge	SHORT $LN40@decLnOp
	mov	edx, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [edx], 7
	jge	SHORT $LN38@decLnOp
	mov	DWORD PTR tv163[ebp], 7
	jmp	SHORT $LN39@decLnOp
$LN38@decLnOp:
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv163[ebp], ecx
$LN39@decLnOp:
	mov	edx, DWORD PTR tv163[ebp]
	mov	DWORD PTR tv164[ebp], edx
	jmp	SHORT $LN41@decLnOp
$LN40@decLnOp:
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv164[ebp], ecx
$LN41@decLnOp:
	mov	edx, DWORD PTR tv164[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
; Line 5709
	cmp	DWORD PTR _p$[ebp], 16			; 00000010H
	jge	SHORT $LN42@decLnOp
	mov	DWORD PTR tv167[ebp], 16		; 00000010H
	jmp	SHORT $LN43@decLnOp
$LN42@decLnOp:
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv167[ebp], eax
$LN43@decLnOp:
	cmp	DWORD PTR tv167[ebp], 49		; 00000031H
	jg	SHORT $LN48@decLnOp
	cmp	DWORD PTR _p$[ebp], 16			; 00000010H
	jge	SHORT $LN44@decLnOp
	mov	DWORD PTR tv170[ebp], 16		; 00000010H
	jmp	SHORT $LN45@decLnOp
$LN44@decLnOp:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv170[ebp], ecx
$LN45@decLnOp:
	mov	edx, DWORD PTR tv170[ebp]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv177[ebp], eax
	jmp	SHORT $LN49@decLnOp
$LN48@decLnOp:
	cmp	DWORD PTR _p$[ebp], 16			; 00000010H
	jge	SHORT $LN46@decLnOp
	mov	DWORD PTR tv174[ebp], 16		; 00000010H
	jmp	SHORT $LN47@decLnOp
$LN46@decLnOp:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv174[ebp], ecx
$LN47@decLnOp:
	mov	edx, DWORD PTR tv174[ebp]
	mov	DWORD PTR tv177[ebp], edx
$LN49@decLnOp:
	mov	eax, DWORD PTR tv177[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 5710
	cmp	DWORD PTR _needbytes$[ebp], 60		; 0000003cH
	jbe	SHORT $LN20@decLnOp
; Line 5711
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbufa$[ebp], eax
; Line 5712
	cmp	DWORD PTR _allocbufa$[ebp], 0
	jne	SHORT $LN19@decLnOp
; Line 5713
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5714
	jmp	$LN31@decLnOp
$LN19@decLnOp:
; Line 5715
	mov	eax, DWORD PTR _allocbufa$[ebp]
	mov	DWORD PTR _a$[ebp], eax
$LN20@decLnOp:
; Line 5717
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pp$[ebp], ecx
; Line 5718
	cmp	DWORD PTR _pp$[ebp], 16			; 00000010H
	jge	SHORT $LN50@decLnOp
	mov	DWORD PTR tv187[ebp], 16		; 00000010H
	jmp	SHORT $LN51@decLnOp
$LN50@decLnOp:
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR tv187[ebp], eax
$LN51@decLnOp:
	cmp	DWORD PTR tv187[ebp], 49		; 00000031H
	jg	SHORT $LN56@decLnOp
	cmp	DWORD PTR _pp$[ebp], 16			; 00000010H
	jge	SHORT $LN52@decLnOp
	mov	DWORD PTR tv190[ebp], 16		; 00000010H
	jmp	SHORT $LN53@decLnOp
$LN52@decLnOp:
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	DWORD PTR tv190[ebp], ecx
$LN53@decLnOp:
	mov	edx, DWORD PTR tv190[ebp]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv197[ebp], eax
	jmp	SHORT $LN57@decLnOp
$LN56@decLnOp:
	cmp	DWORD PTR _pp$[ebp], 16			; 00000010H
	jge	SHORT $LN54@decLnOp
	mov	DWORD PTR tv194[ebp], 16		; 00000010H
	jmp	SHORT $LN55@decLnOp
$LN54@decLnOp:
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	DWORD PTR tv194[ebp], ecx
$LN55@decLnOp:
	mov	edx, DWORD PTR tv194[ebp]
	mov	DWORD PTR tv197[ebp], edx
$LN57@decLnOp:
	mov	eax, DWORD PTR tv197[ebp]
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _needbytes$[ebp], eax
; Line 5719
	cmp	DWORD PTR _needbytes$[ebp], 96		; 00000060H
	jbe	SHORT $LN18@decLnOp
; Line 5720
	mov	eax, DWORD PTR _needbytes$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocbufb$[ebp], eax
; Line 5721
	cmp	DWORD PTR _allocbufb$[ebp], 0
	jne	SHORT $LN17@decLnOp
; Line 5722
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5723
	jmp	$LN31@decLnOp
$LN17@decLnOp:
; Line 5724
	mov	eax, DWORD PTR _allocbufb$[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN18@decLnOp:
; Line 5736
	push	64					; 00000040H
	lea	eax, DWORD PTR _aset$[ebp]
	push	eax
	call	_uprv_decContextDefault_56
	add	esp, 8
; Line 5737
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _rhs$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _r$[ebp], ecx
; Line 5738
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_uprv_decNumberFromInt32_56
	add	esp, 8
; Line 5739
	push	2302585					; 00232279H
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_uprv_decNumberFromInt32_56
	add	esp, 8
; Line 5740
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+4], -6			; fffffffaH
; Line 5741
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 5744
	mov	DWORD PTR _residue$[ebp], 0
; Line 5745
	mov	DWORD PTR _aset$[ebp], 2
	mov	DWORD PTR _aset$[ebp+12], 5
; Line 5746
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	lea	edx, DWORD PTR _aset$[ebp]
	push	edx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 5747
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 5748
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_decGetInt
	add	esp, 4
	mov	DWORD PTR _t$[ebp], eax
; Line 5749
	cmp	DWORD PTR _t$[ebp], 10			; 0000000aH
	jge	SHORT $LN16@decLnOp
	mov	eax, DWORD PTR _t$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _t$[ebp], edx
$LN16@decLnOp:
; Line 5750
	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, WORD PTR _LNnn[eax*2-20]
	mov	DWORD PTR _t$[ebp], ecx
; Line 5751
	mov	eax, DWORD PTR _t$[ebp]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_uprv_decNumberFromInt32_56
	add	esp, 8
; Line 5752
	mov	eax, DWORD PTR _t$[ebp]
	and	eax, 3
	neg	eax
	sub	eax, 3
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 5753
	mov	eax, DWORD PTR _b$[ebp]
	mov	BYTE PTR [eax+8], 128			; 00000080H
; Line 5754
	mov	DWORD PTR _aset$[ebp], 16		; 00000010H
	mov	DWORD PTR _aset$[ebp+12], 3
; Line 5755
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 5760
	lea	eax, DWORD PTR _numone$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
	mov	BYTE PTR _numone$[ebp+9], 1
; Line 5764
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _aset$[ebp+4], ecx
; Line 5765
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _aset$[ebp+8], ecx
; Line 5766
	mov	BYTE PTR _aset$[ebp+24], 0
; Line 5768
	mov	ecx, 7
	lea	esi, DWORD PTR _aset$[ebp]
	lea	edi, DWORD PTR _bset$[ebp]
	rep movsd
; Line 5769
	mov	DWORD PTR _bset$[ebp+4], 1999998	; 001e847eH
; Line 5770
	mov	DWORD PTR _bset$[ebp+8], -1999998	; ffe17b82H
; Line 5774
	mov	DWORD PTR _pp$[ebp], 9
; Line 5777
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _aset$[ebp], eax
; Line 5778
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _bset$[ebp], ecx
$LN15@decLnOp:
; Line 5789
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	xor	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _a$[ebp]
	mov	BYTE PTR [edx+8], cl
; Line 5790
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_decExpOp
	add	esp, 16					; 00000010H
; Line 5791
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	xor	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _a$[ebp]
	mov	BYTE PTR [edx+8], cl
; Line 5793
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decMultiplyOp
	add	esp, 20					; 00000014H
; Line 5794
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	128					; 00000080H
	lea	ecx, DWORD PTR _bset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _numone$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 5805
	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN11@decLnOp
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN11@decLnOp
	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN12@decLnOp
$LN11@decLnOp:
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _set$[ebp]
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [edx+eax+1]
	cmp	ecx, edx
	jl	$LN13@decLnOp
$LN12@decLnOp:
; Line 5806
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _p$[ebp]
	jne	SHORT $LN10@decLnOp
	jmp	$LN14@decLnOp
$LN10@decLnOp:
; Line 5807
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN9@decLnOp
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN9@decLnOp
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN9@decLnOp
; Line 5808
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _numone$[ebp]
	push	edx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cmp$[ebp]
	push	ecx
	call	_decCompareOp
	add	esp, 24					; 00000018H
; Line 5809
	movzx	eax, BYTE PTR _cmp$[ebp+9]
	test	eax, eax
	jne	SHORT $LN8@decLnOp
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	SHORT $LN7@decLnOp
$LN8@decLnOp:
; Line 5810
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2080				; 00000820H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN7@decLnOp:
; Line 5811
	jmp	$LN14@decLnOp
$LN9@decLnOp:
; Line 5814
	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN13@decLnOp
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN13@decLnOp
	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN13@decLnOp
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN13@decLnOp:
; Line 5818
	lea	eax, DWORD PTR _ignore$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _aset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decAddOp
	add	esp, 24					; 00000018H
; Line 5819
	mov	eax, DWORD PTR _pp$[ebp]
	cmp	eax, DWORD PTR _p$[ebp]
	jne	SHORT $LN5@decLnOp
	jmp	$LN15@decLnOp
$LN5@decLnOp:
; Line 5821
	mov	eax, DWORD PTR _pp$[ebp]
	shl	eax, 1
	mov	DWORD PTR _pp$[ebp], eax
; Line 5822
	mov	eax, DWORD PTR _pp$[ebp]
	cmp	eax, DWORD PTR _p$[ebp]
	jle	SHORT $LN4@decLnOp
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pp$[ebp], eax
$LN4@decLnOp:
; Line 5823
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _aset$[ebp], eax
; Line 5824
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _bset$[ebp], ecx
; Line 5825
	jmp	$LN15@decLnOp
$LN14@decLnOp:
; Line 5835
	mov	DWORD PTR _residue$[ebp], 1
; Line 5836
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN3@decLnOp
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN3@decLnOp
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN3@decLnOp
	mov	DWORD PTR _residue$[ebp], 0
$LN3@decLnOp:
; Line 5837
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _aset$[ebp], ecx
; Line 5838
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	lea	edx, DWORD PTR _aset$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 5839
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 5840
	xor	eax, eax
	jne	$LN33@decLnOp
$LN31@decLnOp:
; Line 5842
	cmp	DWORD PTR _allocbufa$[ebp], 0
	je	SHORT $LN2@decLnOp
	mov	eax, DWORD PTR _allocbufa$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@decLnOp:
; Line 5843
	cmp	DWORD PTR _allocbufb$[ebp], 0
	je	SHORT $LN1@decLnOp
	mov	eax, DWORD PTR _allocbufb$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@decLnOp:
; Line 5845
	mov	eax, DWORD PTR _res$[ebp]
; Line 5846
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN68@decLnOp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 628				; 00000274H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN68@decLnOp:
	DD	8
	DD	$LN67@decLnOp
$LN67@decLnOp:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN59@decLnOp
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN60@decLnOp
	DD	-152					; ffffff68H
	DD	60					; 0000003cH
	DD	$LN61@decLnOp
	DD	-280					; fffffee8H
	DD	96					; 00000060H
	DD	$LN62@decLnOp
	DD	-324					; fffffebcH
	DD	12					; 0000000cH
	DD	$LN63@decLnOp
	DD	-344					; fffffea8H
	DD	12					; 0000000cH
	DD	$LN64@decLnOp
	DD	-380					; fffffe84H
	DD	28					; 0000001cH
	DD	$LN65@decLnOp
	DD	-416					; fffffe60H
	DD	28					; 0000001cH
	DD	$LN66@decLnOp
$LN66@decLnOp:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN65@decLnOp:
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN64@decLnOp:
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN63@decLnOp:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN62@decLnOp:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	98					; 00000062H
	DB	0
$LN61@decLnOp:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	0
$LN60@decLnOp:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN59@decLnOp:
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
_decLnOp ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _decQuantizeOp
_TEXT	SEGMENT
_workset$11789 = -108					; size = 28
_adjust$11786 = -72					; size = 4
_etiny$ = -60						; size = 4
_residue$ = -48						; size = 4
_reqexp$ = -36						; size = 4
_reqdigits$ = -24					; size = 4
_inrhs$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_quant$ = 24						; size = 1
_status$ = 28						; size = 4
_decQuantizeOp PROC					; COMDAT
; Line 5875
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5880
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR _inrhs$[ebp], eax
; Line 5881
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _reqdigits$[ebp], ecx
; Line 5883
	mov	DWORD PTR _residue$[ebp], 0
; Line 5884
	mov	eax, DWORD PTR _reqdigits$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	DWORD PTR _etiny$[ebp], edx
$LN22@decQuantiz:
; Line 5909
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 112				; 00000070H
	je	SHORT $LN19@decQuantiz
; Line 5911
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 112				; 00000070H
	and	ecx, 48					; 00000030H
	je	SHORT $LN18@decQuantiz
; Line 5912
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decNaNs
	add	esp, 20					; 00000014H
	jmp	SHORT $LN17@decQuantiz
$LN18@decQuantiz:
; Line 5914
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	xor	ecx, eax
	and	ecx, 64					; 00000040H
	je	SHORT $LN16@decQuantiz
; Line 5915
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN17@decQuantiz
$LN16@decQuantiz:
; Line 5917
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
$LN17@decQuantiz:
; Line 5918
	jmp	$LN20@decQuantiz
$LN19@decQuantiz:
; Line 5922
	movzx	eax, BYTE PTR _quant$[ebp]
	test	eax, eax
	je	SHORT $LN14@decQuantiz
	mov	eax, DWORD PTR _inrhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _reqexp$[ebp], ecx
; Line 5923
	jmp	SHORT $LN13@decQuantiz
$LN14@decQuantiz:
; Line 5927
	mov	eax, DWORD PTR _inrhs$[ebp]
	push	eax
	call	_decGetInt
	add	esp, 4
	mov	DWORD PTR _reqexp$[ebp], eax
$LN13@decQuantiz:
; Line 5937
	cmp	DWORD PTR _reqexp$[ebp], -2147483648	; 80000000H
	je	SHORT $LN11@decQuantiz
	cmp	DWORD PTR _reqexp$[ebp], -2147483645	; 80000003H
	je	SHORT $LN11@decQuantiz
	cmp	DWORD PTR _reqexp$[ebp], -2147483646	; 80000002H
	je	SHORT $LN11@decQuantiz
	mov	eax, DWORD PTR _reqexp$[ebp]
	cmp	eax, DWORD PTR _etiny$[ebp]
	jl	SHORT $LN11@decQuantiz
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _reqexp$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN12@decQuantiz
$LN11@decQuantiz:
; Line 5938
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5939
	jmp	$LN20@decQuantiz
$LN12@decQuantiz:
; Line 5942
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN10@decQuantiz
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN10@decQuantiz
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN10@decQuantiz
; Line 5943
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 5944
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _reqexp$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 5949
	jmp	$LN9@decQuantiz
$LN10@decQuantiz:
; Line 5950
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _reqexp$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _adjust$11786[ebp], ecx
; Line 5952
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _adjust$11786[ebp]
	cmp	ecx, DWORD PTR _reqdigits$[ebp]
	jle	SHORT $LN8@decQuantiz
; Line 5953
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5954
	jmp	$LN20@decQuantiz
$LN8@decQuantiz:
; Line 5957
	cmp	DWORD PTR _adjust$11786[ebp], 0
	jle	$LN7@decQuantiz
; Line 5961
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _workset$11789[ebp]
	rep movsd
; Line 5962
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _adjust$11786[ebp]
	mov	DWORD PTR _workset$11789[ebp], ecx
; Line 5964
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	lea	edx, DWORD PTR _workset$11789[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 5965
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	lea	edx, DWORD PTR _workset$11789[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decApplyRound
	add	esp, 16					; 00000010H
; Line 5966
	mov	DWORD PTR _residue$[ebp], 0
; Line 5969
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _reqexp$[ebp]
	jle	SHORT $LN6@decQuantiz
; Line 5972
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _reqdigits$[ebp]
	jne	SHORT $LN5@decQuantiz
; Line 5973
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -2081				; fffff7dfH
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5974
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5975
	jmp	$LN20@decQuantiz
$LN5@decQuantiz:
; Line 5977
	push	1
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	add	edx, 9
	push	edx
	call	_decShiftToMost
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 5978
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN6@decQuantiz:
; Line 5984
	jmp	SHORT $LN9@decQuantiz
$LN7@decQuantiz:
; Line 5988
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 5990
	cmp	DWORD PTR _adjust$11786[ebp], 0
	jge	SHORT $LN9@decQuantiz
; Line 5991
	mov	eax, DWORD PTR _adjust$11786[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	push	eax
	call	_decShiftToMost
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 5992
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _adjust$11786[ebp]
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN9@decQuantiz:
; Line 5999
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [eax+4], edx
	jle	SHORT $LN2@decQuantiz
; Line 6000
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 6001
	jmp	SHORT $LN20@decQuantiz
; Line 6003
	jmp	SHORT $LN21@decQuantiz
$LN2@decQuantiz:
; Line 6004
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
; Line 6005
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -8193				; ffffdfffH
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN21@decQuantiz:
; Line 6007
	xor	eax, eax
	jne	$LN22@decQuantiz
$LN20@decQuantiz:
; Line 6013
	mov	eax, DWORD PTR _res$[ebp]
; Line 6014
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@decQuantiz
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@decQuantiz:
	DD	2
	DD	$LN27@decQuantiz
$LN27@decQuantiz:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN25@decQuantiz
	DD	-108					; ffffff94H
	DD	28					; 0000001cH
	DD	$LN26@decQuantiz
$LN26@decQuantiz:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN25@decQuantiz:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
_decQuantizeOp ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decCompareOp
_TEXT	SEGMENT
tv170 = -272						; size = 4
tv272 = -268						; size = 4
tv161 = -268						; size = 4
_srhs$11861 = -65					; size = 1
_slhs$11860 = -53					; size = 1
_choice$11858 = -44					; size = 4
_residue$11857 = -32					; size = 4
_merged$ = -17						; size = 1
_result$ = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_op$ = 24						; size = 1
_status$ = 28						; size = 4
_decCompareOp PROC					; COMDAT
; Line 6048
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6053
	mov	DWORD PTR _result$[ebp], 0
$LN58@decCompare:
; Line 6079
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 4
	jne	SHORT $LN55@decCompare
; Line 6080
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN54@decCompare
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	jne	SHORT $LN54@decCompare
; Line 6081
	mov	DWORD PTR _result$[ebp], -1
; Line 6082
	jmp	$LN56@decCompare
$LN54@decCompare:
; Line 6084
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	jne	SHORT $LN55@decCompare
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN55@decCompare
; Line 6085
	mov	DWORD PTR _result$[ebp], 1
; Line 6086
	jmp	$LN56@decCompare
$LN55@decCompare:
; Line 6092
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 48					; 00000030H
	mov	BYTE PTR _merged$[ebp], cl
; Line 6093
	movzx	eax, BYTE PTR _merged$[ebp]
	test	eax, eax
	je	$LN52@decCompare
; Line 6094
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 1
	jne	SHORT $LN51@decCompare
	jmp	$LN50@decCompare
$LN51@decCompare:
; Line 6095
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 6
	jne	SHORT $LN49@decCompare
; Line 6096
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1073741952				; 40000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	$LN50@decCompare
$LN49@decCompare:
; Line 6097
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 4
	jne	$LN47@decCompare
; Line 6100
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	jne	SHORT $LN46@decCompare
	mov	DWORD PTR _result$[ebp], -1
	jmp	$LN45@decCompare
$LN46@decCompare:
; Line 6101
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	jne	SHORT $LN44@decCompare
	mov	DWORD PTR _result$[ebp], 1
	jmp	$LN45@decCompare
$LN44@decCompare:
; Line 6103
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 16					; 00000010H
	je	SHORT $LN42@decCompare
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN42@decCompare
	mov	DWORD PTR _result$[ebp], -1
	jmp	$LN45@decCompare
$LN42@decCompare:
; Line 6104
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN40@decCompare
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 16					; 00000010H
	je	SHORT $LN40@decCompare
	mov	DWORD PTR _result$[ebp], 1
; Line 6105
	jmp	SHORT $LN45@decCompare
$LN40@decCompare:
; Line 6108
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN61@decCompare
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN62@decCompare
$LN61@decCompare:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv161[ebp], edx
$LN62@decCompare:
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN63@decCompare
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv170[ebp], eax
	jmp	SHORT $LN64@decCompare
$LN63@decCompare:
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv170[ebp], edx
$LN64@decCompare:
	push	0
	mov	eax, DWORD PTR tv161[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 9
	push	ecx
	mov	edx, DWORD PTR tv170[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	add	eax, 9
	push	eax
	call	_decUnitCompare
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
$LN45@decCompare:
; Line 6111
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN38@decCompare
	mov	eax, DWORD PTR _result$[ebp]
	neg	eax
	mov	DWORD PTR _result$[ebp], eax
$LN38@decCompare:
; Line 6112
	jmp	$LN56@decCompare
	jmp	SHORT $LN50@decCompare
$LN47@decCompare:
; Line 6115
	movzx	eax, BYTE PTR _merged$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN36@decCompare
; Line 6116
	jmp	SHORT $LN50@decCompare
$LN36@decCompare:
; Line 6118
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	je	SHORT $LN33@decCompare
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 48					; 00000030H
	jne	SHORT $LN50@decCompare
$LN33@decCompare:
; Line 6120
	mov	BYTE PTR _op$[ebp], 2
; Line 6121
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN32@decCompare
	mov	DWORD PTR _result$[ebp], -1
	jmp	SHORT $LN31@decCompare
$LN32@decCompare:
; Line 6122
	mov	DWORD PTR _result$[ebp], 1
$LN31@decCompare:
; Line 6123
	jmp	SHORT $LN56@decCompare
$LN50@decCompare:
; Line 6126
	mov	BYTE PTR _op$[ebp], 5
; Line 6127
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rhs$[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decNaNs
	add	esp, 20					; 00000014H
; Line 6128
	jmp	SHORT $LN56@decCompare
$LN52@decCompare:
; Line 6131
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 7
	je	SHORT $LN29@decCompare
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 8
	jne	SHORT $LN30@decCompare
$LN29@decCompare:
	push	1
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lhs$[ebp]
	push	ecx
	call	_decCompare
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	jmp	SHORT $LN57@decCompare
$LN30@decCompare:
; Line 6132
	push	0
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lhs$[ebp]
	push	ecx
	call	_decCompare
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
$LN57@decCompare:
; Line 6133
	xor	eax, eax
	jne	$LN58@decCompare
$LN56@decCompare:
; Line 6135
	cmp	DWORD PTR _result$[ebp], -2147483648	; 80000000H
	jne	SHORT $LN27@decCompare
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 6136
	jmp	$LN26@decCompare
$LN27@decCompare:
; Line 6137
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 1
	je	SHORT $LN24@decCompare
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 6
	je	SHORT $LN24@decCompare
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 4
	jne	SHORT $LN25@decCompare
$LN24@decCompare:
; Line 6138
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 4
	jne	SHORT $LN23@decCompare
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN23@decCompare
; Line 6141
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN23@decCompare
; Line 6142
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN21@decCompare
	mov	DWORD PTR _result$[ebp], -1
	jmp	SHORT $LN20@decCompare
$LN21@decCompare:
; Line 6143
	mov	DWORD PTR _result$[ebp], 1
$LN20@decCompare:
; Line 6144
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN23@decCompare
	mov	eax, DWORD PTR _result$[ebp]
	neg	eax
	mov	DWORD PTR _result$[ebp], eax
$LN23@decCompare:
; Line 6147
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 6148
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@decCompare
; Line 6149
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 6150
	cmp	DWORD PTR _result$[ebp], 0
	jge	SHORT $LN18@decCompare
	mov	eax, DWORD PTR _res$[ebp]
	mov	BYTE PTR [eax+8], 128			; 00000080H
$LN18@decCompare:
; Line 6151
	jmp	$LN26@decCompare
$LN25@decCompare:
; Line 6153
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 5
	jne	SHORT $LN15@decCompare
; Line 6154
	jmp	$LN26@decCompare
$LN15@decCompare:
; Line 6155
	mov	DWORD PTR _residue$11857[ebp], 0
; Line 6158
	cmp	DWORD PTR _result$[ebp], 0
	jne	$LN13@decCompare
; Line 6160
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	mov	BYTE PTR _slhs$11860[ebp], cl
; Line 6161
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	mov	BYTE PTR _srhs$11861[ebp], cl
; Line 6169
	movzx	eax, BYTE PTR _slhs$11860[ebp]
	movzx	ecx, BYTE PTR _srhs$11861[ebp]
	cmp	eax, ecx
	je	SHORT $LN12@decCompare
; Line 6170
	movzx	eax, BYTE PTR _slhs$11860[ebp]
	test	eax, eax
	je	SHORT $LN11@decCompare
	mov	DWORD PTR _result$[ebp], -1
	jmp	SHORT $LN10@decCompare
$LN11@decCompare:
; Line 6171
	mov	DWORD PTR _result$[ebp], 1
$LN10@decCompare:
; Line 6173
	jmp	SHORT $LN13@decCompare
$LN12@decCompare:
	movzx	eax, BYTE PTR _slhs$11860[ebp]
	test	eax, eax
	je	SHORT $LN8@decCompare
	movzx	eax, BYTE PTR _srhs$11861[ebp]
	test	eax, eax
	je	SHORT $LN8@decCompare
; Line 6174
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN7@decCompare
	mov	DWORD PTR _result$[ebp], 1
	jmp	SHORT $LN6@decCompare
$LN7@decCompare:
; Line 6175
	mov	DWORD PTR _result$[ebp], -1
$LN6@decCompare:
; Line 6178
	jmp	SHORT $LN13@decCompare
$LN8@decCompare:
; Line 6179
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN4@decCompare
	mov	DWORD PTR _result$[ebp], 1
	jmp	SHORT $LN13@decCompare
$LN4@decCompare:
; Line 6180
	mov	DWORD PTR _result$[ebp], -1
$LN13@decCompare:
; Line 6185
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 3
	je	SHORT $LN1@decCompare
	movzx	eax, BYTE PTR _op$[ebp]
	cmp	eax, 8
	jne	SHORT $LN2@decCompare
$LN1@decCompare:
	mov	eax, DWORD PTR _result$[ebp]
	neg	eax
	mov	DWORD PTR _result$[ebp], eax
$LN2@decCompare:
; Line 6186
	cmp	DWORD PTR _result$[ebp], 0
	jle	SHORT $LN65@decCompare
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	DWORD PTR tv272[ebp], eax
	jmp	SHORT $LN66@decCompare
$LN65@decCompare:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR tv272[ebp], ecx
$LN66@decCompare:
	mov	edx, DWORD PTR tv272[ebp]
	mov	DWORD PTR _choice$11858[ebp], edx
; Line 6188
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$11857[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _choice$11858[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_decCopyFit
	add	esp, 20					; 00000014H
; Line 6189
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _residue$11857[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decFinalize
	add	esp, 16					; 00000010H
$LN26@decCompare:
; Line 6196
	mov	eax, DWORD PTR _res$[ebp]
; Line 6197
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN69@decCompare
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN69@decCompare:
	DD	1
	DD	$LN68@decCompare
$LN68@decCompare:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN67@decCompare
$LN67@decCompare:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
_decCompareOp ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decCompare
_TEXT	SEGMENT
tv177 = -248						; size = 4
tv168 = -244						; size = 4
_temp$11901 = -44					; size = 4
_compare$ = -32						; size = 4
_sigr$ = -20						; size = 4
_result$ = -8						; size = 4
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
_abs_c$ = 16						; size = 1
_decCompare PROC					; COMDAT
; Line 6212
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6217
	mov	DWORD PTR _result$[ebp], 1
; Line 6218
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN18@decCompare@2
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN18@decCompare@2
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN18@decCompare@2
	mov	DWORD PTR _result$[ebp], 0
$LN18@decCompare@2:
; Line 6219
	movzx	eax, BYTE PTR _abs_c$[ebp]
	test	eax, eax
	je	SHORT $LN17@decCompare@2
; Line 6220
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN16@decCompare@2
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN16@decCompare@2
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN16@decCompare@2
	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN19@decCompare@2
$LN16@decCompare@2:
; Line 6222
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN15@decCompare@2
	or	eax, -1
	jmp	$LN19@decCompare@2
$LN15@decCompare@2:
; Line 6225
	jmp	$LN14@decCompare@2
$LN17@decCompare@2:
; Line 6226
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@decCompare@2
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN13@decCompare@2
	mov	DWORD PTR _result$[ebp], -1
$LN13@decCompare@2:
; Line 6227
	mov	DWORD PTR _sigr$[ebp], 1
; Line 6228
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN12@decCompare@2
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN12@decCompare@2
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN12@decCompare@2
	mov	DWORD PTR _sigr$[ebp], 0
	jmp	SHORT $LN11@decCompare@2
$LN12@decCompare@2:
; Line 6229
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN11@decCompare@2
	mov	DWORD PTR _sigr$[ebp], -1
$LN11@decCompare@2:
; Line 6230
	mov	eax, DWORD PTR _result$[ebp]
	cmp	eax, DWORD PTR _sigr$[ebp]
	jle	SHORT $LN9@decCompare@2
	mov	eax, 1
	jmp	$LN19@decCompare@2
$LN9@decCompare@2:
; Line 6231
	mov	eax, DWORD PTR _result$[ebp]
	cmp	eax, DWORD PTR _sigr$[ebp]
	jge	SHORT $LN8@decCompare@2
	or	eax, -1
	jmp	$LN19@decCompare@2
$LN8@decCompare@2:
; Line 6232
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN14@decCompare@2
	xor	eax, eax
	jmp	$LN19@decCompare@2
$LN14@decCompare@2:
; Line 6236
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	or	ecx, eax
	and	ecx, 64					; 00000040H
	je	SHORT $LN6@decCompare@2
; Line 6237
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN5@decCompare@2
; Line 6238
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN4@decCompare@2
	mov	DWORD PTR _result$[ebp], 0
	jmp	SHORT $LN5@decCompare@2
$LN4@decCompare@2:
; Line 6239
	mov	eax, DWORD PTR _result$[ebp]
	neg	eax
	mov	DWORD PTR _result$[ebp], eax
$LN5@decCompare@2:
; Line 6241
	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN19@decCompare@2
$LN6@decCompare@2:
; Line 6244
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN2@decCompare@2
; Line 6246
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	DWORD PTR _temp$11901[ebp], eax
; Line 6247
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR _lhs$[ebp], eax
; Line 6248
	mov	eax, DWORD PTR _temp$11901[ebp]
	mov	DWORD PTR _rhs$[ebp], eax
; Line 6249
	mov	eax, DWORD PTR _result$[ebp]
	neg	eax
	mov	DWORD PTR _result$[ebp], eax
$LN2@decCompare@2:
; Line 6253
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN21@decCompare@2
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN22@decCompare@2
$LN21@decCompare@2:
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv168[ebp], edx
$LN22@decCompare@2:
	mov	eax, DWORD PTR _lhs$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN23@decCompare@2
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv177[ebp], eax
	jmp	SHORT $LN24@decCompare@2
$LN23@decCompare@2:
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv177[ebp], edx
$LN24@decCompare@2:
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR tv168[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 9
	push	ecx
	mov	edx, DWORD PTR tv177[ebp]
	push	edx
	mov	eax, DWORD PTR _lhs$[ebp]
	add	eax, 9
	push	eax
	call	_decUnitCompare
	add	esp, 20					; 00000014H
	mov	DWORD PTR _compare$[ebp], eax
; Line 6254
	cmp	DWORD PTR _compare$[ebp], -2147483648	; 80000000H
	je	SHORT $LN1@decCompare@2
	mov	eax, DWORD PTR _compare$[ebp]
	imul	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _compare$[ebp], eax
$LN1@decCompare@2:
; Line 6255
	mov	eax, DWORD PTR _compare$[ebp]
$LN19@decCompare@2:
; Line 6256
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_decCompare ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _decUnitCompare
_TEXT	SEGMENT
tv134 = -404						; size = 4
tv94 = -404						; size = 4
tv85 = -404						; size = 4
_result$ = -204						; size = 4
_exprem$ = -192						; size = 4
_expunits$ = -180					; size = 4
_u$ = -168						; size = 4
_r$ = -156						; size = 4
_l$ = -144						; size = 4
_need$ = -132						; size = 4
_accunits$ = -120					; size = 4
_allocacc$ = -108					; size = 4
_accbuff$ = -96						; size = 73
_acc$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_alength$ = 12						; size = 4
_b$ = 16						; size = 4
_blength$ = 20						; size = 4
_exp$ = 24						; size = 4
_decUnitCompare PROC					; COMDAT
; Line 6276
	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-404]
	mov	ecx, 101				; 00000065H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 6279
	mov	DWORD PTR _allocacc$[ebp], 0
; Line 6284
	cmp	DWORD PTR _exp$[ebp], 0
	jne	$LN18@decUnitCom
; Line 6285
	mov	eax, DWORD PTR _alength$[ebp]
	cmp	eax, DWORD PTR _blength$[ebp]
	jle	SHORT $LN17@decUnitCom
	mov	eax, 1
	jmp	$LN19@decUnitCom
$LN17@decUnitCom:
; Line 6286
	mov	eax, DWORD PTR _alength$[ebp]
	cmp	eax, DWORD PTR _blength$[ebp]
	jge	SHORT $LN16@decUnitCom
	or	eax, -1
	jmp	$LN19@decUnitCom
$LN16@decUnitCom:
; Line 6288
	mov	eax, DWORD PTR _alength$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _l$[ebp], edx
; Line 6289
	mov	eax, DWORD PTR _alength$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _r$[ebp], edx
	jmp	SHORT $LN15@decUnitCom
$LN14@decUnitCom:
; Line 6290
	mov	eax, DWORD PTR _l$[ebp]
	sub	eax, 1
	mov	DWORD PTR _l$[ebp], eax
	mov	ecx, DWORD PTR _r$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _r$[ebp], ecx
$LN15@decUnitCom:
	mov	eax, DWORD PTR _l$[ebp]
	cmp	eax, DWORD PTR _a$[ebp]
	jb	SHORT $LN13@decUnitCom
; Line 6291
	mov	eax, DWORD PTR _l$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _r$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jle	SHORT $LN12@decUnitCom
	mov	eax, 1
	jmp	$LN19@decUnitCom
$LN12@decUnitCom:
; Line 6292
	mov	eax, DWORD PTR _l$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _r$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jge	SHORT $LN11@decUnitCom
	or	eax, -1
	jmp	$LN19@decUnitCom
$LN11@decUnitCom:
; Line 6293
	jmp	SHORT $LN14@decUnitCom
$LN13@decUnitCom:
; Line 6294
	xor	eax, eax
	jmp	$LN19@decUnitCom
$LN18@decUnitCom:
; Line 6299
	cmp	DWORD PTR _exp$[ebp], 49		; 00000031H
	jg	SHORT $LN21@decUnitCom
	mov	eax, DWORD PTR _exp$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv85[ebp], ecx
	jmp	SHORT $LN22@decUnitCom
$LN21@decUnitCom:
	mov	edx, DWORD PTR _exp$[ebp]
	mov	DWORD PTR tv85[ebp], edx
$LN22@decUnitCom:
	mov	eax, DWORD PTR _blength$[ebp]
	add	eax, DWORD PTR tv85[ebp]
	cmp	DWORD PTR _alength$[ebp], eax
	jle	SHORT $LN10@decUnitCom
	mov	eax, 1
	jmp	$LN19@decUnitCom
$LN10@decUnitCom:
; Line 6300
	cmp	DWORD PTR _exp$[ebp], 49		; 00000031H
	jg	SHORT $LN23@decUnitCom
	mov	eax, DWORD PTR _exp$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv94[ebp], ecx
	jmp	SHORT $LN24@decUnitCom
$LN23@decUnitCom:
	mov	edx, DWORD PTR _exp$[ebp]
	mov	DWORD PTR tv94[ebp], edx
$LN24@decUnitCom:
	mov	eax, DWORD PTR _alength$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _blength$[ebp]
	add	ecx, DWORD PTR tv94[ebp]
	cmp	eax, ecx
	jge	SHORT $LN9@decUnitCom
	or	eax, -1
	jmp	$LN19@decUnitCom
$LN9@decUnitCom:
; Line 6305
	cmp	DWORD PTR _exp$[ebp], 49		; 00000031H
	jg	SHORT $LN25@decUnitCom
	mov	eax, DWORD PTR _exp$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv134[ebp], ecx
	jmp	SHORT $LN26@decUnitCom
$LN25@decUnitCom:
	mov	edx, DWORD PTR _exp$[ebp]
	mov	DWORD PTR tv134[ebp], edx
$LN26@decUnitCom:
	mov	eax, DWORD PTR _blength$[ebp]
	add	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR _need$[ebp], eax
; Line 6306
	mov	eax, DWORD PTR _need$[ebp]
	cmp	eax, DWORD PTR _alength$[ebp]
	jge	SHORT $LN8@decUnitCom
	mov	eax, DWORD PTR _alength$[ebp]
	mov	DWORD PTR _need$[ebp], eax
$LN8@decUnitCom:
; Line 6307
	mov	eax, DWORD PTR _need$[ebp]
	add	eax, 2
	mov	DWORD PTR _need$[ebp], eax
; Line 6308
	lea	eax, DWORD PTR _accbuff$[ebp]
	mov	DWORD PTR _acc$[ebp], eax
; Line 6309
	cmp	DWORD PTR _need$[ebp], 73		; 00000049H
	jbe	SHORT $LN7@decUnitCom
; Line 6310
	mov	eax, DWORD PTR _need$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocacc$[ebp], eax
; Line 6311
	cmp	DWORD PTR _allocacc$[ebp], 0
	jne	SHORT $LN6@decUnitCom
	mov	eax, -2147483648			; 80000000H
	jmp	$LN19@decUnitCom
$LN6@decUnitCom:
; Line 6312
	mov	eax, DWORD PTR _allocacc$[ebp]
	mov	DWORD PTR _acc$[ebp], eax
$LN7@decUnitCom:
; Line 6315
	mov	eax, DWORD PTR _exp$[ebp]
	mov	DWORD PTR _expunits$[ebp], eax
; Line 6316
	mov	eax, DWORD PTR _exp$[ebp]
	and	eax, -2147483648			; 80000000H
	jns	SHORT $LN30@decUnitCom
	dec	eax
	or	eax, -1
	inc	eax
$LN30@decUnitCom:
	mov	DWORD PTR _exprem$[ebp], eax
; Line 6319
	mov	eax, DWORD PTR _exprem$[ebp]
	mov	ecx, DWORD PTR _DECPOWERS[eax*4]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _acc$[ebp]
	push	edx
	mov	eax, DWORD PTR _expunits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _alength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_decUnitAddSub
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _accunits$[ebp], eax
; Line 6321
	cmp	DWORD PTR _accunits$[ebp], 0
	jge	SHORT $LN5@decUnitCom
	mov	DWORD PTR _result$[ebp], -1
; Line 6322
	jmp	SHORT $LN4@decUnitCom
$LN5@decUnitCom:
; Line 6324
	mov	eax, DWORD PTR _acc$[ebp]
	mov	DWORD PTR _u$[ebp], eax
$LN3@decUnitCom:
	mov	eax, DWORD PTR _accunits$[ebp]
	mov	ecx, DWORD PTR _acc$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	cmp	DWORD PTR _u$[ebp], edx
	jae	SHORT $LN2@decUnitCom
	mov	eax, DWORD PTR _u$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN2@decUnitCom
	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 1
	mov	DWORD PTR _u$[ebp], eax
	jmp	SHORT $LN3@decUnitCom
$LN2@decUnitCom:
; Line 6325
	mov	eax, DWORD PTR _u$[ebp]
	movzx	ecx, BYTE PTR [eax]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR _result$[ebp], ecx
$LN4@decUnitCom:
; Line 6328
	cmp	DWORD PTR _allocacc$[ebp], 0
	je	SHORT $LN1@decUnitCom
	mov	eax, DWORD PTR _allocacc$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@decUnitCom:
; Line 6329
	mov	eax, DWORD PTR _result$[ebp]
$LN19@decUnitCom:
; Line 6330
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@decUnitCom
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 404				; 00000194H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN29@decUnitCom:
	DD	1
	DD	$LN28@decUnitCom
$LN28@decUnitCom:
	DD	-96					; ffffffa0H
	DD	73					; 00000049H
	DD	$LN27@decUnitCom
$LN27@decUnitCom:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_decUnitCompare ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decUnitAddSub
_TEXT	SEGMENT
_hold$11986 = -92					; size = 4
_est$ = -80						; size = 4
_add$ = -68						; size = 4
_carry$ = -56						; size = 4
_maxC$ = -44						; size = 4
_minC$ = -32						; size = 4
_clsu$ = -20						; size = 4
_alsu$ = -8						; size = 4
_a$ = 8							; size = 4
_alength$ = 12						; size = 4
_b$ = 16						; size = 4
_blength$ = 20						; size = 4
_bshift$ = 24						; size = 4
_c$ = 28						; size = 4
_m$ = 32						; size = 4
_decUnitAddSub PROC					; COMDAT
; Line 6381
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6382
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _alsu$[ebp], eax
; Line 6383
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _clsu$[ebp], eax
; Line 6386
	mov	DWORD PTR _carry$[ebp], 0
; Line 6397
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _alength$[ebp]
	mov	DWORD PTR _maxC$[ebp], eax
; Line 6398
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _blength$[ebp]
	mov	DWORD PTR _minC$[ebp], eax
; Line 6399
	cmp	DWORD PTR _bshift$[ebp], 0
	je	SHORT $LN30@decUnitAdd
; Line 6400
	mov	eax, DWORD PTR _minC$[ebp]
	add	eax, DWORD PTR _bshift$[ebp]
	mov	DWORD PTR _minC$[ebp], eax
; Line 6402
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jne	SHORT $LN29@decUnitAdd
	mov	eax, DWORD PTR _bshift$[ebp]
	cmp	eax, DWORD PTR _alength$[ebp]
	jg	SHORT $LN29@decUnitAdd
; Line 6403
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _bshift$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 6404
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _bshift$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 6406
	jmp	SHORT $LN30@decUnitAdd
$LN29@decUnitAdd:
	jmp	SHORT $LN27@decUnitAdd
$LN26@decUnitAdd:
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 1
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
$LN27@decUnitAdd:
	mov	eax, DWORD PTR _clsu$[ebp]
	add	eax, DWORD PTR _bshift$[ebp]
	cmp	DWORD PTR _c$[ebp], eax
	jae	SHORT $LN30@decUnitAdd
; Line 6407
	mov	eax, DWORD PTR _alsu$[ebp]
	add	eax, DWORD PTR _alength$[ebp]
	cmp	DWORD PTR _a$[ebp], eax
	jae	SHORT $LN24@decUnitAdd
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN23@decUnitAdd
$LN24@decUnitAdd:
; Line 6408
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 0
$LN23@decUnitAdd:
; Line 6409
	jmp	SHORT $LN26@decUnitAdd
$LN30@decUnitAdd:
; Line 6411
	mov	eax, DWORD PTR _minC$[ebp]
	cmp	eax, DWORD PTR _maxC$[ebp]
	jbe	SHORT $LN22@decUnitAdd
; Line 6412
	mov	eax, DWORD PTR _minC$[ebp]
	mov	DWORD PTR _hold$11986[ebp], eax
; Line 6413
	mov	eax, DWORD PTR _maxC$[ebp]
	mov	DWORD PTR _minC$[ebp], eax
; Line 6414
	mov	eax, DWORD PTR _hold$11986[ebp]
	mov	DWORD PTR _maxC$[ebp], eax
$LN22@decUnitAdd:
; Line 6415
	jmp	SHORT $LN21@decUnitAdd
$LN20@decUnitAdd:
; Line 6421
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN21@decUnitAdd:
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _minC$[ebp]
	jae	$LN19@decUnitAdd
; Line 6422
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], ecx
; Line 6423
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 1
	mov	DWORD PTR _a$[ebp], eax
; Line 6424
	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], ecx
; Line 6425
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 1
	mov	DWORD PTR _b$[ebp], eax
; Line 6427
	cmp	DWORD PTR _carry$[ebp], 9
	ja	SHORT $LN18@decUnitAdd
; Line 6428
	mov	eax, DWORD PTR _c$[ebp]
	mov	cl, BYTE PTR _carry$[ebp]
	mov	BYTE PTR [eax], cl
; Line 6429
	mov	DWORD PTR _carry$[ebp], 0
; Line 6430
	jmp	SHORT $LN20@decUnitAdd
$LN18@decUnitAdd:
; Line 6470
	cmp	DWORD PTR _carry$[ebp], 0
	jl	SHORT $LN17@decUnitAdd
; Line 6471
	mov	eax, DWORD PTR _carry$[ebp]
	shr	eax, 1
	imul	eax, DWORD PTR _multies+4
	shr	eax, 17					; 00000011H
	mov	DWORD PTR _est$[ebp], eax
; Line 6472
	mov	eax, DWORD PTR _est$[ebp]
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _carry$[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
; Line 6473
	mov	eax, DWORD PTR _est$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 6474
	jmp	$LN20@decUnitAdd
$LN17@decUnitAdd:
; Line 6477
	mov	eax, DWORD PTR _carry$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _carry$[ebp], eax
; Line 6478
	mov	eax, DWORD PTR _carry$[ebp]
	shr	eax, 1
	imul	eax, DWORD PTR _multies+4
	shr	eax, 17					; 00000011H
	mov	DWORD PTR _est$[ebp], eax
; Line 6479
	mov	eax, DWORD PTR _est$[ebp]
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _carry$[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
; Line 6480
	mov	eax, DWORD PTR _est$[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR _carry$[ebp], eax
; Line 6498
	jmp	$LN20@decUnitAdd
$LN19@decUnitAdd:
; Line 6502
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _maxC$[ebp]
	jae	$LN16@decUnitAdd
	jmp	SHORT $LN15@decUnitAdd
$LN14@decUnitAdd:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN15@decUnitAdd:
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _maxC$[ebp]
	jae	$LN16@decUnitAdd
; Line 6503
	mov	eax, DWORD PTR _alsu$[ebp]
	add	eax, DWORD PTR _alength$[ebp]
	cmp	DWORD PTR _a$[ebp], eax
	jae	SHORT $LN12@decUnitAdd
; Line 6504
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], ecx
; Line 6505
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 1
	mov	DWORD PTR _a$[ebp], eax
; Line 6507
	jmp	SHORT $LN11@decUnitAdd
$LN12@decUnitAdd:
; Line 6508
	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, BYTE PTR [eax]
	imul	ecx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR _carry$[ebp]
	mov	DWORD PTR _carry$[ebp], ecx
; Line 6509
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 1
	mov	DWORD PTR _b$[ebp], eax
$LN11@decUnitAdd:
; Line 6513
	cmp	DWORD PTR _carry$[ebp], 9
	ja	SHORT $LN10@decUnitAdd
; Line 6514
	mov	eax, DWORD PTR _c$[ebp]
	mov	cl, BYTE PTR _carry$[ebp]
	mov	BYTE PTR [eax], cl
; Line 6515
	mov	DWORD PTR _carry$[ebp], 0
; Line 6516
	jmp	SHORT $LN14@decUnitAdd
$LN10@decUnitAdd:
; Line 6556
	cmp	DWORD PTR _carry$[ebp], 0
	jl	SHORT $LN9@decUnitAdd
; Line 6557
	mov	eax, DWORD PTR _carry$[ebp]
	shr	eax, 1
	imul	eax, DWORD PTR _multies+4
	shr	eax, 17					; 00000011H
	mov	DWORD PTR _est$[ebp], eax
; Line 6558
	mov	eax, DWORD PTR _est$[ebp]
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _carry$[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
; Line 6559
	mov	eax, DWORD PTR _est$[ebp]
	mov	DWORD PTR _carry$[ebp], eax
; Line 6560
	jmp	$LN14@decUnitAdd
$LN9@decUnitAdd:
; Line 6563
	mov	eax, DWORD PTR _carry$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _carry$[ebp], eax
; Line 6564
	mov	eax, DWORD PTR _carry$[ebp]
	shr	eax, 1
	imul	eax, DWORD PTR _multies+4
	shr	eax, 17					; 00000011H
	mov	DWORD PTR _est$[ebp], eax
; Line 6565
	mov	eax, DWORD PTR _est$[ebp]
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _carry$[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [edx], cl
; Line 6566
	mov	eax, DWORD PTR _est$[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR _carry$[ebp], eax
; Line 6584
	jmp	$LN14@decUnitAdd
$LN16@decUnitAdd:
; Line 6588
	cmp	DWORD PTR _carry$[ebp], 0
	jne	SHORT $LN8@decUnitAdd
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _clsu$[ebp]
	jmp	$LN31@decUnitAdd
$LN8@decUnitAdd:
; Line 6589
	cmp	DWORD PTR _carry$[ebp], 0
	jle	SHORT $LN7@decUnitAdd
; Line 6590
	mov	eax, DWORD PTR _c$[ebp]
	mov	cl, BYTE PTR _carry$[ebp]
	mov	BYTE PTR [eax], cl
; Line 6591
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 6592
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _clsu$[ebp]
	jmp	SHORT $LN31@decUnitAdd
$LN7@decUnitAdd:
; Line 6595
	mov	DWORD PTR _add$[ebp], 1
; Line 6596
	mov	eax, DWORD PTR _clsu$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN6@decUnitAdd
$LN5@decUnitAdd:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN6@decUnitAdd:
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _maxC$[ebp]
	jae	SHORT $LN4@decUnitAdd
; Line 6597
	mov	eax, DWORD PTR _add$[ebp]
	add	eax, 9
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sub	eax, edx
	mov	DWORD PTR _add$[ebp], eax
; Line 6598
	cmp	DWORD PTR _add$[ebp], 9
	jg	SHORT $LN3@decUnitAdd
; Line 6599
	mov	eax, DWORD PTR _c$[ebp]
	mov	cl, BYTE PTR _add$[ebp]
	mov	BYTE PTR [eax], cl
; Line 6600
	mov	DWORD PTR _add$[ebp], 0
; Line 6602
	jmp	SHORT $LN2@decUnitAdd
$LN3@decUnitAdd:
; Line 6603
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [eax], 0
; Line 6604
	mov	DWORD PTR _add$[ebp], 1
$LN2@decUnitAdd:
; Line 6606
	jmp	SHORT $LN5@decUnitAdd
$LN4@decUnitAdd:
; Line 6611
	mov	eax, DWORD PTR _add$[ebp]
	sub	eax, DWORD PTR _carry$[ebp]
	sub	eax, 1
	je	SHORT $LN1@decUnitAdd
; Line 6612
	mov	eax, DWORD PTR _add$[ebp]
	sub	eax, DWORD PTR _carry$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	mov	BYTE PTR [ecx], al
; Line 6613
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN1@decUnitAdd:
; Line 6615
	mov	eax, DWORD PTR _clsu$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
$LN31@decUnitAdd:
; Line 6616
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_decUnitAddSub ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decTrim
_TEXT	SEGMENT
tv160 = -268						; size = 4
_maxd$12057 = -68					; size = 4
_quot$12048 = -56					; size = 4
_up$ = -44						; size = 4
_cut$ = -32						; size = 4
_exp$ = -20						; size = 4
_d$ = -8						; size = 4
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_all$ = 16						; size = 1
_noclamp$ = 20						; size = 1
_dropped$ = 24						; size = 4
_decTrim PROC						; COMDAT
; Line 6634
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6643
	mov	eax, DWORD PTR _dropped$[ebp]
	mov	DWORD PTR [eax], 0
; Line 6645
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN14@decTrim
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	and	ecx, 1
	je	SHORT $LN15@decTrim
$LN14@decTrim:
	mov	eax, DWORD PTR _dn$[ebp]
	jmp	$LN16@decTrim
$LN15@decTrim:
; Line 6646
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN13@decTrim
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN13@decTrim
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN13@decTrim
; Line 6647
	mov	eax, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 6648
	mov	eax, DWORD PTR _dn$[ebp]
	jmp	$LN16@decTrim
$LN13@decTrim:
; Line 6652
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _exp$[ebp], ecx
; Line 6653
	mov	DWORD PTR _cut$[ebp], 1
; Line 6654
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _up$[ebp], eax
; Line 6655
	mov	DWORD PTR _d$[ebp], 0
	jmp	SHORT $LN12@decTrim
$LN11@decTrim:
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, 1
	mov	DWORD PTR _d$[ebp], eax
$LN12@decTrim:
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	cmp	DWORD PTR _d$[ebp], ecx
	jge	SHORT $LN10@decTrim
; Line 6658
	mov	eax, DWORD PTR _up$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _cut$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _cut$[ebp]
	imul	edx, DWORD PTR _multies[eax*4]
	shr	edx, 17					; 00000011H
	mov	DWORD PTR _quot$12048[ebp], edx
; Line 6659
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _cut$[ebp]
	mov	eax, DWORD PTR _quot$12048[ebp]
	imul	eax, DWORD PTR _DECPOWERS[edx*4]
	sub	ecx, eax
	je	SHORT $LN9@decTrim
	jmp	SHORT $LN10@decTrim
$LN9@decTrim:
; Line 6664
	movzx	eax, BYTE PTR _all$[ebp]
	test	eax, eax
	jne	SHORT $LN8@decTrim
; Line 6666
	cmp	DWORD PTR _exp$[ebp], 0
	jg	SHORT $LN8@decTrim
; Line 6667
	cmp	DWORD PTR _exp$[ebp], 0
	jne	SHORT $LN6@decTrim
	jmp	SHORT $LN10@decTrim
$LN6@decTrim:
; Line 6668
	mov	eax, DWORD PTR _exp$[ebp]
	add	eax, 1
	mov	DWORD PTR _exp$[ebp], eax
$LN8@decTrim:
; Line 6671
	mov	eax, DWORD PTR _cut$[ebp]
	add	eax, 1
	mov	DWORD PTR _cut$[ebp], eax
; Line 6672
	cmp	DWORD PTR _cut$[ebp], 1
	jbe	SHORT $LN5@decTrim
; Line 6673
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
; Line 6674
	mov	DWORD PTR _cut$[ebp], 1
$LN5@decTrim:
; Line 6676
	jmp	$LN11@decTrim
$LN10@decTrim:
; Line 6677
	cmp	DWORD PTR _d$[ebp], 0
	jne	SHORT $LN4@decTrim
	mov	eax, DWORD PTR _dn$[ebp]
	jmp	$LN16@decTrim
$LN4@decTrim:
; Line 6680
	mov	eax, DWORD PTR _set$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN3@decTrim
	movzx	eax, BYTE PTR _noclamp$[ebp]
	test	eax, eax
	jne	SHORT $LN3@decTrim
; Line 6681
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _dn$[ebp]
	sub	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _maxd$12057[ebp], edx
; Line 6682
	cmp	DWORD PTR _maxd$12057[ebp], 0
	jg	SHORT $LN2@decTrim
	mov	eax, DWORD PTR _dn$[ebp]
	jmp	SHORT $LN16@decTrim
$LN2@decTrim:
; Line 6683
	mov	eax, DWORD PTR _d$[ebp]
	cmp	eax, DWORD PTR _maxd$12057[ebp]
	jle	SHORT $LN3@decTrim
	mov	eax, DWORD PTR _maxd$12057[ebp]
	mov	DWORD PTR _d$[ebp], eax
$LN3@decTrim:
; Line 6687
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN18@decTrim
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv160[ebp], eax
	jmp	SHORT $LN19@decTrim
$LN18@decTrim:
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv160[ebp], edx
$LN19@decTrim:
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv160[ebp]
	push	ecx
	mov	edx, DWORD PTR _dn$[ebp]
	add	edx, 9
	push	edx
	call	_decShiftToLeast
	add	esp, 12					; 0000000cH
; Line 6688
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 6689
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 6690
	mov	eax, DWORD PTR _dropped$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 6691
	mov	eax, DWORD PTR _dn$[ebp]
$LN16@decTrim:
; Line 6692
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_decTrim ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decReverse
_TEXT	SEGMENT
_temp$ = -5						; size = 1
_ulo$ = 8						; size = 4
_uhi$ = 12						; size = 4
_decReverse PROC					; COMDAT
; Line 6704
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6706
	jmp	SHORT $LN3@decReverse
$LN2@decReverse:
	mov	eax, DWORD PTR _ulo$[ebp]
	add	eax, 1
	mov	DWORD PTR _ulo$[ebp], eax
	mov	ecx, DWORD PTR _uhi$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _uhi$[ebp], ecx
$LN3@decReverse:
	mov	eax, DWORD PTR _ulo$[ebp]
	cmp	eax, DWORD PTR _uhi$[ebp]
	jae	SHORT $LN4@decReverse
; Line 6707
	mov	eax, DWORD PTR _ulo$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _temp$[ebp], cl
; Line 6708
	mov	eax, DWORD PTR _ulo$[ebp]
	mov	ecx, DWORD PTR _uhi$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 6709
	mov	eax, DWORD PTR _uhi$[ebp]
	mov	cl, BYTE PTR _temp$[ebp]
	mov	BYTE PTR [eax], cl
; Line 6710
	jmp	SHORT $LN2@decReverse
$LN4@decReverse:
; Line 6712
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_decReverse ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decShiftToMost
_TEXT	SEGMENT
tv141 = -280						; size = 4
tv93 = -280						; size = 4
tv86 = -280						; size = 4
tv78 = -280						; size = 4
_rem$12094 = -80					; size = 4
_quot$12092 = -68					; size = 4
_next$ = -56						; size = 4
_cut$ = -44						; size = 4
_first$ = -32						; size = 4
_source$ = -20						; size = 4
_target$ = -8						; size = 4
_uar$ = 8						; size = 4
_digits$ = 12						; size = 4
_shift$ = 16						; size = 4
_decShiftToMost PROC					; COMDAT
; Line 6727
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6732
	cmp	DWORD PTR _shift$[ebp], 0
	jne	SHORT $LN14@decShiftTo
	mov	eax, DWORD PTR _digits$[ebp]
	jmp	$LN15@decShiftTo
$LN14@decShiftTo:
; Line 6733
	mov	eax, DWORD PTR _digits$[ebp]
	add	eax, DWORD PTR _shift$[ebp]
	cmp	eax, 1
	jg	SHORT $LN13@decShiftTo
; Line 6734
	mov	eax, DWORD PTR _uar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _shift$[ebp]
	imul	ecx, DWORD PTR _DECPOWERS[edx*4]
	mov	eax, DWORD PTR _uar$[ebp]
	mov	BYTE PTR [eax], cl
; Line 6735
	mov	eax, DWORD PTR _digits$[ebp]
	add	eax, DWORD PTR _shift$[ebp]
	jmp	$LN15@decShiftTo
$LN13@decShiftTo:
; Line 6738
	mov	DWORD PTR _next$[ebp], 0
; Line 6739
	cmp	DWORD PTR _digits$[ebp], 49		; 00000031H
	jg	SHORT $LN17@decShiftTo
	mov	eax, DWORD PTR _digits$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv78[ebp], ecx
	jmp	SHORT $LN18@decShiftTo
$LN17@decShiftTo:
	mov	edx, DWORD PTR _digits$[ebp]
	mov	DWORD PTR tv78[ebp], edx
$LN18@decShiftTo:
	mov	eax, DWORD PTR tv78[ebp]
	mov	ecx, DWORD PTR _uar$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _source$[ebp], edx
; Line 6740
	cmp	DWORD PTR _shift$[ebp], 49		; 00000031H
	jg	SHORT $LN19@decShiftTo
	mov	eax, DWORD PTR _shift$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN20@decShiftTo
$LN19@decShiftTo:
	mov	edx, DWORD PTR _shift$[ebp]
	mov	DWORD PTR tv86[ebp], edx
$LN20@decShiftTo:
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR _target$[ebp], eax
; Line 6741
	cmp	DWORD PTR _shift$[ebp], 49		; 00000031H
	jg	SHORT $LN21@decShiftTo
	mov	eax, DWORD PTR _shift$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv93[ebp], ecx
	jmp	SHORT $LN22@decShiftTo
$LN21@decShiftTo:
	mov	edx, DWORD PTR _shift$[ebp]
	mov	DWORD PTR tv93[ebp], edx
$LN22@decShiftTo:
	mov	eax, DWORD PTR tv93[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, eax
	mov	edx, 1
	sub	edx, ecx
	mov	DWORD PTR _cut$[ebp], edx
; Line 6742
	jne	SHORT $LN12@decShiftTo
	jmp	SHORT $LN11@decShiftTo
$LN10@decShiftTo:
; Line 6743
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 1
	mov	DWORD PTR _source$[ebp], eax
	mov	ecx, DWORD PTR _target$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
$LN11@decShiftTo:
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _uar$[ebp]
	jb	SHORT $LN9@decShiftTo
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN10@decShiftTo
$LN9@decShiftTo:
; Line 6745
	jmp	$LN8@decShiftTo
$LN12@decShiftTo:
; Line 6746
	mov	eax, DWORD PTR _digits$[ebp]
	add	eax, DWORD PTR _shift$[ebp]
	cmp	eax, 49					; 00000031H
	jg	SHORT $LN23@decShiftTo
	mov	ecx, DWORD PTR _digits$[ebp]
	add	ecx, DWORD PTR _shift$[ebp]
	movzx	edx, BYTE PTR _d2utable[ecx]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN24@decShiftTo
$LN23@decShiftTo:
	mov	eax, DWORD PTR _digits$[ebp]
	add	eax, DWORD PTR _shift$[ebp]
	mov	DWORD PTR tv141[ebp], eax
$LN24@decShiftTo:
	mov	ecx, DWORD PTR tv141[ebp]
	mov	edx, DWORD PTR _uar$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _first$[ebp], eax
	jmp	SHORT $LN7@decShiftTo
$LN6@decShiftTo:
; Line 6747
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 1
	mov	DWORD PTR _source$[ebp], eax
	mov	ecx, DWORD PTR _target$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
$LN7@decShiftTo:
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _uar$[ebp]
	jb	SHORT $LN8@decShiftTo
; Line 6750
	mov	eax, DWORD PTR _source$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _cut$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _cut$[ebp]
	imul	edx, DWORD PTR _multies[eax*4]
	shr	edx, 17					; 00000011H
	mov	DWORD PTR _quot$12092[ebp], edx
; Line 6751
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _cut$[ebp]
	mov	eax, DWORD PTR _quot$12092[ebp]
	imul	eax, DWORD PTR _DECPOWERS[edx*4]
	sub	ecx, eax
	mov	DWORD PTR _rem$12094[ebp], ecx
; Line 6752
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, DWORD PTR _quot$12092[ebp]
	mov	DWORD PTR _next$[ebp], eax
; Line 6757
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _first$[ebp]
	ja	SHORT $LN4@decShiftTo
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _next$[ebp]
	mov	BYTE PTR [eax], cl
$LN4@decShiftTo:
; Line 6758
	mov	eax, 1
	sub	eax, DWORD PTR _cut$[ebp]
	mov	ecx, DWORD PTR _rem$12094[ebp]
	imul	ecx, DWORD PTR _DECPOWERS[eax*4]
	mov	DWORD PTR _next$[ebp], ecx
; Line 6759
	jmp	SHORT $LN6@decShiftTo
$LN8@decShiftTo:
; Line 6760
	jmp	SHORT $LN3@decShiftTo
$LN2@decShiftTo:
; Line 6763
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 1
	mov	DWORD PTR _target$[ebp], eax
$LN3@decShiftTo:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _uar$[ebp]
	jb	SHORT $LN1@decShiftTo
; Line 6764
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _next$[ebp]
	mov	BYTE PTR [eax], cl
; Line 6765
	mov	DWORD PTR _next$[ebp], 0
; Line 6766
	jmp	SHORT $LN2@decShiftTo
$LN1@decShiftTo:
; Line 6767
	mov	eax, DWORD PTR _digits$[ebp]
	add	eax, DWORD PTR _shift$[ebp]
$LN15@decShiftTo:
; Line 6768
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_decShiftToMost ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decShiftToLeast
_TEXT	SEGMENT
tv95 = -268						; size = 4
tv80 = -268						; size = 4
tv71 = -268						; size = 4
_rem$ = -68						; size = 4
_quot$ = -56						; size = 4
_count$ = -44						; size = 4
_cut$ = -32						; size = 4
_up$ = -20						; size = 4
_target$ = -8						; size = 4
_uar$ = 8						; size = 4
_units$ = 12						; size = 4
_shift$ = 16						; size = 4
_decShiftToLeast PROC					; COMDAT
; Line 6783
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6788
	cmp	DWORD PTR _shift$[ebp], 0
	jne	SHORT $LN11@decShiftTo@2
	mov	eax, DWORD PTR _units$[ebp]
	jmp	$LN12@decShiftTo@2
$LN11@decShiftTo@2:
; Line 6789
	mov	eax, DWORD PTR _shift$[ebp]
	cmp	eax, DWORD PTR _units$[ebp]
	jne	SHORT $LN10@decShiftTo@2
; Line 6790
	mov	eax, DWORD PTR _uar$[ebp]
	mov	BYTE PTR [eax], 0
; Line 6791
	mov	eax, 1
	jmp	$LN12@decShiftTo@2
$LN10@decShiftTo@2:
; Line 6794
	mov	eax, DWORD PTR _uar$[ebp]
	mov	DWORD PTR _target$[ebp], eax
; Line 6795
	cmp	DWORD PTR _shift$[ebp], 49		; 00000031H
	jg	SHORT $LN14@decShiftTo@2
	mov	eax, DWORD PTR _shift$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN15@decShiftTo@2
$LN14@decShiftTo@2:
	mov	edx, DWORD PTR _shift$[ebp]
	mov	DWORD PTR tv71[ebp], edx
$LN15@decShiftTo@2:
	mov	eax, DWORD PTR tv71[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _cut$[ebp], ecx
; Line 6796
	cmp	DWORD PTR _cut$[ebp], 1
	jne	SHORT $LN9@decShiftTo@2
; Line 6797
	cmp	DWORD PTR _shift$[ebp], 49		; 00000031H
	jg	SHORT $LN16@decShiftTo@2
	mov	eax, DWORD PTR _shift$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN17@decShiftTo@2
$LN16@decShiftTo@2:
	mov	edx, DWORD PTR _shift$[ebp]
	mov	DWORD PTR tv80[ebp], edx
$LN17@decShiftTo@2:
	mov	eax, DWORD PTR _uar$[ebp]
	add	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR _up$[ebp], eax
	jmp	SHORT $LN8@decShiftTo@2
$LN7@decShiftTo@2:
; Line 6798
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 1
	mov	DWORD PTR _up$[ebp], ecx
$LN8@decShiftTo@2:
	mov	eax, DWORD PTR _uar$[ebp]
	add	eax, DWORD PTR _units$[ebp]
	cmp	DWORD PTR _up$[ebp], eax
	jae	SHORT $LN6@decShiftTo@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _up$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN7@decShiftTo@2
$LN6@decShiftTo@2:
; Line 6799
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, DWORD PTR _uar$[ebp]
	jmp	$LN12@decShiftTo@2
$LN9@decShiftTo@2:
; Line 6803
	mov	eax, DWORD PTR _shift$[ebp]
	sub	eax, DWORD PTR _cut$[ebp]
	cmp	eax, 49					; 00000031H
	jg	SHORT $LN18@decShiftTo@2
	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, DWORD PTR _cut$[ebp]
	movzx	edx, BYTE PTR _d2utable[ecx]
	mov	DWORD PTR tv95[ebp], edx
	jmp	SHORT $LN19@decShiftTo@2
$LN18@decShiftTo@2:
	mov	eax, DWORD PTR _shift$[ebp]
	sub	eax, DWORD PTR _cut$[ebp]
	mov	DWORD PTR tv95[ebp], eax
$LN19@decShiftTo@2:
	mov	ecx, DWORD PTR _uar$[ebp]
	add	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR _up$[ebp], ecx
; Line 6804
	mov	eax, DWORD PTR _units$[ebp]
	sub	eax, DWORD PTR _shift$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 6806
	mov	eax, DWORD PTR _up$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _cut$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _cut$[ebp]
	imul	edx, DWORD PTR _multies[eax*4]
	shr	edx, 17					; 00000011H
	mov	DWORD PTR _quot$[ebp], edx
	jmp	SHORT $LN5@decShiftTo@2
$LN4@decShiftTo@2:
; Line 6810
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
$LN5@decShiftTo@2:
; Line 6811
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _quot$[ebp]
	mov	BYTE PTR [eax], cl
; Line 6812
	mov	eax, 1
	sub	eax, DWORD PTR _cut$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _count$[ebp], ecx
; Line 6813
	cmp	DWORD PTR _count$[ebp], 0
	jg	SHORT $LN2@decShiftTo@2
	jmp	SHORT $LN3@decShiftTo@2
$LN2@decShiftTo@2:
; Line 6814
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
; Line 6815
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _quot$[ebp], ecx
; Line 6817
	mov	eax, DWORD PTR _quot$[ebp]
	mov	ecx, DWORD PTR _cut$[ebp]
	shr	eax, cl
	mov	ecx, DWORD PTR _cut$[ebp]
	imul	eax, DWORD PTR _multies[ecx*4]
	shr	eax, 17					; 00000011H
	mov	DWORD PTR _quot$[ebp], eax
; Line 6818
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _cut$[ebp]
	mov	eax, DWORD PTR _quot$[ebp]
	imul	eax, DWORD PTR _DECPOWERS[edx*4]
	sub	ecx, eax
	mov	DWORD PTR _rem$[ebp], ecx
; Line 6823
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, 1
	sub	edx, DWORD PTR _cut$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	imul	eax, DWORD PTR _DECPOWERS[edx*4]
	add	ecx, eax
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx], cl
; Line 6824
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, DWORD PTR _cut$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 6825
	cmp	DWORD PTR _count$[ebp], 0
	jg	SHORT $LN1@decShiftTo@2
	jmp	SHORT $LN3@decShiftTo@2
$LN1@decShiftTo@2:
; Line 6826
	jmp	$LN4@decShiftTo@2
$LN3@decShiftTo@2:
; Line 6827
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, DWORD PTR _uar$[ebp]
	add	eax, 1
$LN12@decShiftTo@2:
; Line 6828
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_decShiftToLeast ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decCopyFit
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_set$ = 16						; size = 4
_residue$ = 20						; size = 4
_status$ = 24						; size = 4
_decCopyFit PROC					; COMDAT
; Line 6886
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6887
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax+8], dl
; Line 6888
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 6889
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 9
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_decSetCoeff
	add	esp, 24					; 00000018H
; Line 6890
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_decCopyFit ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BC@MPIGOCPD@?$AAc?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??decSetCoeff@@9@9@0911e54c	; `decSetCoeff'::`2'::__LINE__Var
;	COMDAT ??_C@_1BC@MPIGOCPD@?$AAc?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@MPIGOCPD@?$AAc?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@ DB 'c'
	DB	00H, 'u', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'4', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??decSetCoeff@@9@9@0911e54c
_DATA	SEGMENT
?__LINE__Var@?1??decSetCoeff@@9@9@0911e54c DD 01b14H	; `decSetCoeff'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _decSetCoeff
_TEXT	SEGMENT
_rem$12195 = -116					; size = 4
_quot$12194 = -104					; size = 4
_discard1$12193 = -92					; size = 4
_half$12180 = -77					; size = 1
_temp$ = -68						; size = 4
_count$ = -56						; size = 4
_target$ = -44						; size = 4
_up$ = -32						; size = 4
_cut$ = -20						; size = 4
_discard$ = -8						; size = 4
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_lsu$ = 16						; size = 4
_len$ = 20						; size = 4
_residue$ = 24						; size = 4
_status$ = 28						; size = 4
_decSetCoeff PROC					; COMDAT
; Line 6932
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 6942
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _discard$[ebp], ecx
; Line 6943
	cmp	DWORD PTR _discard$[ebp], 0
	jg	SHORT $LN42@decSetCoef
; Line 6944
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	cmp	eax, DWORD PTR _lsu$[ebp]
	je	SHORT $LN41@decSetCoef
; Line 6946
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 6947
	mov	eax, DWORD PTR _lsu$[ebp]
	mov	DWORD PTR _up$[ebp], eax
; Line 6948
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _target$[ebp], eax
	jmp	SHORT $LN40@decSetCoef
$LN39@decSetCoef:
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 1
	mov	DWORD PTR _up$[ebp], ecx
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
$LN40@decSetCoef:
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN38@decSetCoef
; Line 6949
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _up$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN39@decSetCoef
$LN38@decSetCoef:
; Line 6950
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], ecx
$LN41@decSetCoef:
; Line 6953
	mov	eax, DWORD PTR _residue$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN37@decSetCoef
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2080				; 00000820H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN37@decSetCoef:
; Line 6954
	jmp	$LN43@decSetCoef
$LN42@decSetCoef:
; Line 6958
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _discard$[ebp]
	mov	edx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 6959
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2048				; 00000800H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 6960
	mov	eax, DWORD PTR _residue$[ebp]
	cmp	DWORD PTR [eax], 1
	jle	SHORT $LN36@decSetCoef
	mov	eax, DWORD PTR _residue$[ebp]
	mov	DWORD PTR [eax], 1
$LN36@decSetCoef:
; Line 6962
	mov	eax, DWORD PTR _discard$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jle	SHORT $LN35@decSetCoef
; Line 6965
	mov	eax, DWORD PTR _residue$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN34@decSetCoef
; Line 6966
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 6967
	mov	eax, DWORD PTR _lsu$[ebp]
	mov	DWORD PTR _up$[ebp], eax
	jmp	SHORT $LN33@decSetCoef
$LN32@decSetCoef:
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
$LN33@decSetCoef:
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN34@decSetCoef
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN30@decSetCoef
; Line 6968
	mov	eax, DWORD PTR _residue$[ebp]
	mov	DWORD PTR [eax], 1
; Line 6969
	jmp	SHORT $LN34@decSetCoef
$LN30@decSetCoef:
; Line 6971
	jmp	SHORT $LN32@decSetCoef
$LN34@decSetCoef:
; Line 6972
	mov	eax, DWORD PTR _residue$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN29@decSetCoef
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN29@decSetCoef:
; Line 6973
	mov	eax, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [eax+9], 0
; Line 6974
	mov	eax, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [eax], 1
; Line 6975
	jmp	$LN43@decSetCoef
$LN35@decSetCoef:
; Line 6984
	mov	DWORD PTR _count$[ebp], 0
; Line 6985
	mov	eax, DWORD PTR _lsu$[ebp]
	mov	DWORD PTR _up$[ebp], eax
	jmp	SHORT $LN28@decSetCoef
$LN27@decSetCoef:
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
$LN28@decSetCoef:
; Line 6986
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 6987
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _discard$[ebp]
	jl	SHORT $LN25@decSetCoef
	jmp	SHORT $LN26@decSetCoef
$LN25@decSetCoef:
; Line 6988
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN24@decSetCoef
	mov	eax, DWORD PTR _residue$[ebp]
	mov	DWORD PTR [eax], 1
$LN24@decSetCoef:
; Line 6989
	jmp	SHORT $LN27@decSetCoef
$LN26@decSetCoef:
; Line 6992
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _discard$[ebp]
	sub	ecx, eax
	sub	ecx, 1
	mov	DWORD PTR _cut$[ebp], ecx
; Line 6993
	jne	$LN23@decSetCoef
; Line 6994
	movzx	eax, BYTE PTR _DECPOWERS+4
	sar	eax, 1
	mov	BYTE PTR _half$12180[ebp], al
; Line 6996
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _half$12180[ebp]
	cmp	ecx, edx
	jl	SHORT $LN22@decSetCoef
; Line 6997
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _half$12180[ebp]
	cmp	ecx, edx
	jle	SHORT $LN21@decSetCoef
	mov	eax, DWORD PTR _residue$[ebp]
	mov	DWORD PTR [eax], 7
	jmp	SHORT $LN20@decSetCoef
$LN21@decSetCoef:
; Line 6998
	mov	eax, DWORD PTR _residue$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 5
	mov	edx, DWORD PTR _residue$[ebp]
	mov	DWORD PTR [edx], ecx
$LN20@decSetCoef:
; Line 7000
	jmp	SHORT $LN19@decSetCoef
$LN22@decSetCoef:
; Line 7001
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN19@decSetCoef
	mov	eax, DWORD PTR _residue$[ebp]
	mov	DWORD PTR [eax], 3
$LN19@decSetCoef:
; Line 7003
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN17@decSetCoef
; Line 7004
	mov	eax, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [eax+9], 0
; Line 7005
	mov	eax, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [eax], 1
; Line 7007
	jmp	SHORT $LN16@decSetCoef
$LN17@decSetCoef:
; Line 7008
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
; Line 7009
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 7010
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
; Line 7012
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _target$[ebp], eax
	jmp	SHORT $LN15@decSetCoef
$LN14@decSetCoef:
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 1
	mov	DWORD PTR _up$[ebp], ecx
	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx
$LN15@decSetCoef:
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN16@decSetCoef
; Line 7013
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _up$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN14@decSetCoef
$LN16@decSetCoef:
; Line 7017
	jmp	$LN12@decSetCoef
$LN23@decSetCoef:
; Line 7020
	cmp	DWORD PTR _cut$[ebp], 0
	jne	SHORT $LN11@decSetCoef
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _quot$12194[ebp], ecx
; Line 7021
	jmp	SHORT $LN10@decSetCoef
$LN11@decSetCoef:
; Line 7023
	cmp	DWORD PTR _cut$[ebp], 4
	jbe	SHORT $LN45@decSetCoef
	mov	eax, DWORD PTR ?__LINE__Var@?1??decSetCoeff@@9@9@0911e54c
	add	eax, 91					; 0000005bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@KDDHHPIP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
	push	OFFSET ??_C@_1BC@MPIGOCPD@?$AAc?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN45@decSetCoef:
; Line 7024
	mov	eax, DWORD PTR _up$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _cut$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _cut$[ebp]
	imul	edx, DWORD PTR _multies[eax*4]
	shr	edx, 17					; 00000011H
	mov	DWORD PTR _quot$12194[ebp], edx
; Line 7025
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _cut$[ebp]
	mov	eax, DWORD PTR _quot$12194[ebp]
	imul	eax, DWORD PTR _DECPOWERS[edx*4]
	sub	ecx, eax
	mov	DWORD PTR _rem$12195[ebp], ecx
; Line 7030
	je	SHORT $LN10@decSetCoef
	mov	eax, DWORD PTR _residue$[ebp]
	mov	DWORD PTR [eax], 1
$LN10@decSetCoef:
; Line 7034
	mov	eax, DWORD PTR _quot$12194[ebp]
	imul	eax, 6554				; 0000199aH
	shr	eax, 16					; 00000010H
	mov	DWORD PTR _temp$[ebp], eax
; Line 7036
	mov	eax, DWORD PTR _temp$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _temp$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR _quot$12194[ebp]
	sub	eax, edx
	mov	DWORD PTR _discard1$12193[ebp], eax
; Line 7037
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _quot$12194[ebp], eax
; Line 7044
	mov	eax, DWORD PTR _discard1$12193[ebp]
	movzx	ecx, BYTE PTR _resmap[eax]
	mov	edx, DWORD PTR _residue$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _residue$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 7045
	mov	eax, DWORD PTR _cut$[ebp]
	add	eax, 1
	mov	DWORD PTR _cut$[ebp], eax
; Line 7049
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN8@decSetCoef
; Line 7050
	mov	eax, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [eax+9], 0
; Line 7051
	mov	eax, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [eax], 1
; Line 7053
	jmp	$LN12@decSetCoef
$LN8@decSetCoef:
; Line 7054
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
; Line 7055
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 7057
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _target$[ebp], eax
	jmp	SHORT $LN6@decSetCoef
$LN5@decSetCoef:
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
$LN6@decSetCoef:
; Line 7058
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _quot$12194[ebp]
	mov	BYTE PTR [eax], cl
; Line 7059
	mov	eax, 1
	sub	eax, DWORD PTR _cut$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _count$[ebp], ecx
; Line 7060
	cmp	DWORD PTR _count$[ebp], 0
	jg	SHORT $LN3@decSetCoef
	jmp	SHORT $LN12@decSetCoef
$LN3@decSetCoef:
; Line 7061
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
; Line 7062
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _quot$12194[ebp], ecx
; Line 7064
	mov	eax, DWORD PTR _quot$12194[ebp]
	mov	ecx, DWORD PTR _cut$[ebp]
	shr	eax, cl
	mov	ecx, DWORD PTR _cut$[ebp]
	imul	eax, DWORD PTR _multies[ecx*4]
	shr	eax, 17					; 00000011H
	mov	DWORD PTR _quot$12194[ebp], eax
; Line 7065
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _cut$[ebp]
	mov	eax, DWORD PTR _quot$12194[ebp]
	imul	eax, DWORD PTR _DECPOWERS[edx*4]
	sub	ecx, eax
	mov	DWORD PTR _rem$12195[ebp], ecx
; Line 7070
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, 1
	sub	edx, DWORD PTR _cut$[ebp]
	mov	eax, DWORD PTR _rem$12195[ebp]
	imul	eax, DWORD PTR _DECPOWERS[edx*4]
	add	ecx, eax
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx], cl
; Line 7071
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, DWORD PTR _cut$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 7072
	cmp	DWORD PTR _count$[ebp], 0
	jg	SHORT $LN2@decSetCoef
	jmp	SHORT $LN12@decSetCoef
$LN2@decSetCoef:
; Line 7073
	jmp	$LN5@decSetCoef
$LN12@decSetCoef:
; Line 7077
	mov	eax, DWORD PTR _residue$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN43@decSetCoef
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN43@decSetCoef:
; Line 7079
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_decSetCoeff ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decApplyRound
_TEXT	SEGMENT
tv224 = -280						; size = 4
tv66 = -280						; size = 4
_count$12276 = -80					; size = 4
_sup$12275 = -68					; size = 4
_up$12274 = -56						; size = 4
_count$12261 = -44					; size = 4
_up$12260 = -32						; size = 4
_lsd5$12230 = -20					; size = 4
_bump$ = -8						; size = 4
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_residue$ = 16						; size = 4
_status$ = 20						; size = 4
_decApplyRound PROC					; COMDAT
; Line 7114
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7118
	cmp	DWORD PTR _residue$[ebp], 0
	jne	SHORT $LN56@decApplyRo
	jmp	$LN57@decApplyRo
$LN56@decApplyRo:
; Line 7120
	mov	DWORD PTR _bump$[ebp], 0
; Line 7123
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 7
	ja	$LN26@decApplyRo
	mov	edx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN61@decApplyRo[edx*4]
$LN53@decApplyRo:
; Line 7130
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	eax, BYTE PTR [eax+9]
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _lsd5$12230[ebp], edx
; Line 7131
	cmp	DWORD PTR _residue$[ebp], 0
	jge	SHORT $LN52@decApplyRo
	cmp	DWORD PTR _lsd5$12230[ebp], 1
	je	SHORT $LN52@decApplyRo
	mov	DWORD PTR _bump$[ebp], -1
	jmp	SHORT $LN51@decApplyRo
$LN52@decApplyRo:
; Line 7132
	cmp	DWORD PTR _residue$[ebp], 0
	jle	SHORT $LN51@decApplyRo
	cmp	DWORD PTR _lsd5$12230[ebp], 0
	jne	SHORT $LN51@decApplyRo
	mov	DWORD PTR _bump$[ebp], 1
$LN51@decApplyRo:
; Line 7134
	jmp	$LN54@decApplyRo
$LN49@decApplyRo:
; Line 7138
	cmp	DWORD PTR _residue$[ebp], 0
	jge	SHORT $LN48@decApplyRo
	mov	DWORD PTR _bump$[ebp], -1
$LN48@decApplyRo:
; Line 7139
	jmp	$LN54@decApplyRo
$LN47@decApplyRo:
; Line 7142
	cmp	DWORD PTR _residue$[ebp], 5
	jle	SHORT $LN46@decApplyRo
	mov	DWORD PTR _bump$[ebp], 1
$LN46@decApplyRo:
; Line 7143
	jmp	$LN54@decApplyRo
$LN45@decApplyRo:
; Line 7146
	cmp	DWORD PTR _residue$[ebp], 5
	jle	SHORT $LN44@decApplyRo
	mov	DWORD PTR _bump$[ebp], 1
	jmp	SHORT $LN43@decApplyRo
$LN44@decApplyRo:
; Line 7147
	cmp	DWORD PTR _residue$[ebp], 5
	jne	SHORT $LN43@decApplyRo
; Line 7149
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	and	ecx, 1
	je	SHORT $LN43@decApplyRo
	mov	DWORD PTR _bump$[ebp], 1
$LN43@decApplyRo:
; Line 7151
	jmp	$LN54@decApplyRo
$LN40@decApplyRo:
; Line 7154
	cmp	DWORD PTR _residue$[ebp], 5
	jl	SHORT $LN39@decApplyRo
	mov	DWORD PTR _bump$[ebp], 1
$LN39@decApplyRo:
; Line 7155
	jmp	SHORT $LN54@decApplyRo
$LN38@decApplyRo:
; Line 7158
	cmp	DWORD PTR _residue$[ebp], 0
	jle	SHORT $LN37@decApplyRo
	mov	DWORD PTR _bump$[ebp], 1
$LN37@decApplyRo:
; Line 7159
	jmp	SHORT $LN54@decApplyRo
$LN36@decApplyRo:
; Line 7164
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	SHORT $LN35@decApplyRo
; Line 7165
	cmp	DWORD PTR _residue$[ebp], 0
	jge	SHORT $LN34@decApplyRo
	mov	DWORD PTR _bump$[ebp], -1
$LN34@decApplyRo:
; Line 7167
	jmp	SHORT $LN33@decApplyRo
$LN35@decApplyRo:
; Line 7168
	cmp	DWORD PTR _residue$[ebp], 0
	jle	SHORT $LN33@decApplyRo
	mov	DWORD PTR _bump$[ebp], 1
$LN33@decApplyRo:
; Line 7170
	jmp	SHORT $LN54@decApplyRo
$LN31@decApplyRo:
; Line 7175
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	jne	SHORT $LN30@decApplyRo
; Line 7176
	cmp	DWORD PTR _residue$[ebp], 0
	jge	SHORT $LN29@decApplyRo
	mov	DWORD PTR _bump$[ebp], -1
$LN29@decApplyRo:
; Line 7178
	jmp	SHORT $LN28@decApplyRo
$LN30@decApplyRo:
; Line 7179
	cmp	DWORD PTR _residue$[ebp], 0
	jle	SHORT $LN28@decApplyRo
	mov	DWORD PTR _bump$[ebp], 1
$LN28@decApplyRo:
; Line 7181
	jmp	SHORT $LN54@decApplyRo
$LN26@decApplyRo:
; Line 7184
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN54@decApplyRo:
; Line 7192
	cmp	DWORD PTR _bump$[ebp], 0
	jne	SHORT $LN25@decApplyRo
	jmp	$LN57@decApplyRo
$LN25@decApplyRo:
; Line 7199
	cmp	DWORD PTR _bump$[ebp], 0
	jle	$LN24@decApplyRo
; Line 7201
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$12261[ebp], ecx
; Line 7202
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _up$12260[ebp], eax
	jmp	SHORT $LN23@decApplyRo
$LN22@decApplyRo:
	mov	eax, DWORD PTR _up$12260[ebp]
	add	eax, 1
	mov	DWORD PTR _up$12260[ebp], eax
$LN23@decApplyRo:
; Line 7203
	cmp	DWORD PTR _count$12261[ebp], 1
	ja	$LN20@decApplyRo
; Line 7205
	mov	eax, DWORD PTR _up$12260[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _count$12261[ebp]
	mov	eax, DWORD PTR _DECPOWERS[edx*4]
	sub	eax, 1
	cmp	ecx, eax
	je	SHORT $LN19@decApplyRo
	jmp	$LN21@decApplyRo
$LN19@decApplyRo:
; Line 7207
	mov	eax, DWORD PTR _up$12260[ebp]
	mov	ecx, DWORD PTR _count$12261[ebp]
	mov	dl, BYTE PTR _DECPOWERS[ecx*4-4]
	mov	BYTE PTR [eax], dl
; Line 7208
	mov	eax, DWORD PTR _up$12260[ebp]
	sub	eax, 1
	mov	DWORD PTR _up$12260[ebp], eax
	jmp	SHORT $LN18@decApplyRo
$LN17@decApplyRo:
	mov	eax, DWORD PTR _up$12260[ebp]
	sub	eax, 1
	mov	DWORD PTR _up$12260[ebp], eax
$LN18@decApplyRo:
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	cmp	DWORD PTR _up$12260[ebp], eax
	jb	SHORT $LN16@decApplyRo
	mov	eax, DWORD PTR _up$12260[ebp]
	mov	BYTE PTR [eax], 0
	jmp	SHORT $LN17@decApplyRo
$LN16@decApplyRo:
; Line 7209
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 7211
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _dn$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax+4]
	add	edx, 1
	cmp	ecx, edx
	jle	SHORT $LN15@decApplyRo
; Line 7212
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dn$[ebp]
	push	edx
	call	_decSetOverflow
	add	esp, 12					; 0000000cH
$LN15@decApplyRo:
; Line 7214
	jmp	$LN57@decApplyRo
$LN20@decApplyRo:
; Line 7217
	mov	eax, DWORD PTR _up$12260[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	je	SHORT $LN14@decApplyRo
	jmp	SHORT $LN21@decApplyRo
$LN14@decApplyRo:
; Line 7218
	mov	eax, DWORD PTR _count$12261[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$12261[ebp], eax
; Line 7219
	jmp	$LN22@decApplyRo
$LN21@decApplyRo:
; Line 7221
	jmp	$LN13@decApplyRo
$LN24@decApplyRo:
; Line 7225
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$12276[ebp], ecx
; Line 7226
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _up$12274[ebp], eax
	jmp	SHORT $LN12@decApplyRo
$LN11@decApplyRo:
	mov	eax, DWORD PTR _up$12274[ebp]
	add	eax, 1
	mov	DWORD PTR _up$12274[ebp], eax
$LN12@decApplyRo:
; Line 7227
	cmp	DWORD PTR _count$12276[ebp], 1
	ja	$LN9@decApplyRo
; Line 7229
	mov	eax, DWORD PTR _up$12274[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _count$12276[ebp]
	cmp	ecx, DWORD PTR _DECPOWERS[edx*4-4]
	je	SHORT $LN8@decApplyRo
	jmp	$LN13@decApplyRo
$LN8@decApplyRo:
; Line 7231
	mov	eax, DWORD PTR _up$12274[ebp]
	mov	DWORD PTR _sup$12275[ebp], eax
; Line 7232
	mov	eax, DWORD PTR _count$12276[ebp]
	movzx	ecx, BYTE PTR _DECPOWERS[eax*4]
	sub	ecx, 1
	mov	edx, DWORD PTR _up$12274[ebp]
	mov	BYTE PTR [edx], cl
; Line 7234
	mov	eax, DWORD PTR _up$12274[ebp]
	sub	eax, 1
	mov	DWORD PTR _up$12274[ebp], eax
	jmp	SHORT $LN7@decApplyRo
$LN6@decApplyRo:
	mov	eax, DWORD PTR _up$12274[ebp]
	sub	eax, 1
	mov	DWORD PTR _up$12274[ebp], eax
$LN7@decApplyRo:
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	cmp	DWORD PTR _up$12274[ebp], eax
	jb	SHORT $LN5@decApplyRo
	movzx	eax, BYTE PTR _DECPOWERS+4
	sub	eax, 1
	mov	ecx, DWORD PTR _up$12274[ebp]
	mov	BYTE PTR [ecx], al
	jmp	SHORT $LN6@decApplyRo
$LN5@decApplyRo:
; Line 7235
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 7242
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _set$[ebp]
	mov	eax, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [edx+8]
	sub	edx, DWORD PTR [eax]
	add	edx, 1
	cmp	ecx, edx
	jne	SHORT $LN4@decApplyRo
; Line 7243
	cmp	DWORD PTR _count$12276[ebp], 1
	jne	SHORT $LN3@decApplyRo
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN3@decApplyRo
	mov	eax, DWORD PTR _sup$12275[ebp]
	mov	BYTE PTR [eax], 0
; Line 7244
	jmp	SHORT $LN2@decApplyRo
$LN3@decApplyRo:
; Line 7245
	mov	eax, DWORD PTR _count$12276[ebp]
	movzx	ecx, BYTE PTR _DECPOWERS[eax*4-4]
	sub	ecx, 1
	mov	edx, DWORD PTR _sup$12275[ebp]
	mov	BYTE PTR [edx], cl
; Line 7246
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@decApplyRo:
; Line 7248
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 7249
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 14368				; 00003820H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN4@decApplyRo:
; Line 7251
	jmp	SHORT $LN57@decApplyRo
$LN9@decApplyRo:
; Line 7255
	mov	eax, DWORD PTR _up$12274[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@decApplyRo
	jmp	SHORT $LN13@decApplyRo
$LN1@decApplyRo:
; Line 7256
	mov	eax, DWORD PTR _count$12276[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$12276[ebp], eax
; Line 7257
	jmp	$LN11@decApplyRo
$LN13@decApplyRo:
; Line 7262
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN59@decApplyRo
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv224[ebp], eax
	jmp	SHORT $LN60@decApplyRo
$LN59@decApplyRo:
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv224[ebp], edx
$LN60@decApplyRo:
	mov	eax, DWORD PTR _bump$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	add	ecx, 9
	push	ecx
	push	0
	push	1
	push	OFFSET _uarrone
	mov	edx, DWORD PTR tv224[ebp]
	push	edx
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	push	eax
	call	_decUnitAddSub
	add	esp, 28					; 0000001cH
$LN57@decApplyRo:
; Line 7263
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN61@decApplyRo:
	DD	$LN36@decApplyRo
	DD	$LN38@decApplyRo
	DD	$LN40@decApplyRo
	DD	$LN45@decApplyRo
	DD	$LN47@decApplyRo
	DD	$LN49@decApplyRo
	DD	$LN31@decApplyRo
	DD	$LN53@decApplyRo
_decApplyRound ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _decFinalize
_TEXT	SEGMENT
_nmin$12305 = -56					; size = 12
_comp$12304 = -36					; size = 4
_tinyexp$ = -24						; size = 4
_shift$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_residue$ = 16						; size = 4
_status$ = 20						; size = 4
_decFinalize PROC					; COMDAT
; Line 7318
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 7320
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	DWORD PTR _tinyexp$[ebp], edx
; Line 7328
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _tinyexp$[ebp]
	jg	$LN10@decFinaliz
; Line 7332
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _tinyexp$[ebp]
	jge	SHORT $LN9@decFinaliz
; Line 7334
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _dn$[ebp]
	push	eax
	call	_decSetSubnormal
	add	esp, 16					; 00000010H
; Line 7335
	jmp	$LN11@decFinaliz
$LN9@decFinaliz:
; Line 7338
	lea	eax, DWORD PTR _nmin$12305[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 7339
	mov	BYTE PTR _nmin$12305[ebp+9], 1
; Line 7340
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nmin$12305[ebp+4], ecx
; Line 7341
	push	1
	lea	eax, DWORD PTR _nmin$12305[ebp]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	push	ecx
	call	_decCompare
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _comp$12304[ebp], eax
; Line 7342
	cmp	DWORD PTR _comp$12304[ebp], -2147483648	; 80000000H
	jne	SHORT $LN8@decFinaliz
; Line 7343
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 7344
	jmp	$LN11@decFinaliz
$LN8@decFinaliz:
; Line 7346
	mov	eax, DWORD PTR _residue$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN10@decFinaliz
	cmp	DWORD PTR _comp$12304[ebp], 0
	jne	SHORT $LN10@decFinaliz
; Line 7347
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _residue$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	push	ecx
	call	_decApplyRound
	add	esp, 16					; 00000010H
; Line 7348
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	mov	eax, DWORD PTR _dn$[ebp]
	push	eax
	call	_decSetSubnormal
	add	esp, 16					; 00000010H
; Line 7349
	jmp	$LN11@decFinaliz
$LN10@decFinaliz:
; Line 7354
	mov	eax, DWORD PTR _residue$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@decFinaliz
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _residue$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	push	ecx
	call	_decApplyRound
	add	esp, 16					; 00000010H
$LN6@decFinaliz:
; Line 7357
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax+4], edx
	jg	SHORT $LN5@decFinaliz
	jmp	$LN11@decFinaliz
$LN5@decFinaliz:
; Line 7361
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax+4], edx
	jle	SHORT $LN4@decFinaliz
; Line 7362
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dn$[ebp]
	push	edx
	call	_decSetOverflow
	add	esp, 12					; 0000000cH
; Line 7363
	jmp	$LN11@decFinaliz
$LN4@decFinaliz:
; Line 7366
	mov	eax, DWORD PTR _set$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN3@decFinaliz
	jmp	SHORT $LN11@decFinaliz
$LN3@decFinaliz:
; Line 7369
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, edx
	mov	DWORD PTR _shift$[ebp], ecx
; Line 7372
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN1@decFinaliz
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN1@decFinaliz
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN2@decFinaliz
$LN1@decFinaliz:
; Line 7373
	mov	eax, DWORD PTR _shift$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	push	eax
	call	_decShiftToMost
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [ecx], eax
$LN2@decFinaliz:
; Line 7375
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _shift$[ebp]
	mov	edx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 7376
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN11@decFinaliz:
; Line 7378
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@decFinaliz
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@decFinaliz:
	DD	1
	DD	$LN14@decFinaliz
$LN14@decFinaliz:
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN13@decFinaliz
$LN13@decFinaliz:
	DB	110					; 0000006eH
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
_decFinalize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decSetOverflow
_TEXT	SEGMENT
tv89 = -232						; size = 4
_emax$12326 = -32					; size = 4
_sign$ = -17						; size = 1
_needmax$ = -5						; size = 1
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_status$ = 16						; size = 4
_decSetOverflow PROC					; COMDAT
; Line 7391
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7392
	mov	BYTE PTR _needmax$[ebp], 0
; Line 7393
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	mov	BYTE PTR _sign$[ebp], cl
; Line 7395
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN14@decSetOver
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN14@decSetOver
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN14@decSetOver
; Line 7396
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _emax$12326[ebp], ecx
; Line 7397
	mov	eax, DWORD PTR _set$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN13@decSetOver
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _emax$12326[ebp]
	sub	edx, ecx
	mov	DWORD PTR _emax$12326[ebp], edx
$LN13@decSetOver:
; Line 7398
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _emax$12326[ebp]
	jle	SHORT $LN12@decSetOver
; Line 7399
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _emax$12326[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 7400
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN12@decSetOver:
; Line 7402
	jmp	$LN15@decSetOver
$LN14@decSetOver:
; Line 7405
	mov	eax, DWORD PTR _dn$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 7406
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv89[ebp], ecx
	cmp	DWORD PTR tv89[ebp], 7
	ja	SHORT $LN10@decSetOver
	mov	edx, DWORD PTR tv89[ebp]
	jmp	DWORD PTR $LN17@decSetOver[edx*4]
$LN9@decSetOver:
; Line 7408
	mov	BYTE PTR _needmax$[ebp], 1
; Line 7409
	jmp	SHORT $LN10@decSetOver
$LN8@decSetOver:
; Line 7411
	mov	BYTE PTR _needmax$[ebp], 1
; Line 7412
	jmp	SHORT $LN10@decSetOver
$LN7@decSetOver:
; Line 7414
	movzx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	je	SHORT $LN6@decSetOver
	mov	BYTE PTR _needmax$[ebp], 1
$LN6@decSetOver:
; Line 7415
	jmp	SHORT $LN10@decSetOver
$LN5@decSetOver:
; Line 7417
	movzx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jne	SHORT $LN10@decSetOver
	mov	BYTE PTR _needmax$[ebp], 1
$LN10@decSetOver:
; Line 7421
	movzx	eax, BYTE PTR _needmax$[ebp]
	test	eax, eax
	je	SHORT $LN2@decSetOver
; Line 7422
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	push	ecx
	call	_decSetMaxValue
	add	esp, 8
; Line 7423
	mov	eax, DWORD PTR _dn$[ebp]
	mov	cl, BYTE PTR _sign$[ebp]
	mov	BYTE PTR [eax+8], cl
	jmp	SHORT $LN1@decSetOver
$LN2@decSetOver:
; Line 7425
	movzx	eax, BYTE PTR _sign$[ebp]
	or	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [ecx+8], al
$LN1@decSetOver:
; Line 7426
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2592				; 00000a20H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN15@decSetOver:
; Line 7427
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@decSetOver:
	DD	$LN7@decSetOver
	DD	$LN10@decSetOver
	DD	$LN10@decSetOver
	DD	$LN10@decSetOver
	DD	$LN10@decSetOver
	DD	$LN9@decSetOver
	DD	$LN5@decSetOver
	DD	$LN8@decSetOver
_decSetOverflow ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decSetMaxValue
_TEXT	SEGMENT
_count$ = -20						; size = 4
_up$ = -8						; size = 4
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_decSetMaxValue PROC					; COMDAT
; Line 7437
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7439
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$[ebp], ecx
; Line 7440
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 7442
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _up$[ebp], eax
	jmp	SHORT $LN5@decSetMaxV
$LN4@decSetMaxV:
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
$LN5@decSetMaxV:
; Line 7443
	cmp	DWORD PTR _count$[ebp], 1
	jle	SHORT $LN2@decSetMaxV
	mov	eax, DWORD PTR _up$[ebp]
	mov	BYTE PTR [eax], 9
; Line 7444
	jmp	SHORT $LN1@decSetMaxV
$LN2@decSetMaxV:
; Line 7445
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _DECPOWERS[eax*4]
	sub	ecx, 1
	mov	edx, DWORD PTR _up$[ebp]
	mov	BYTE PTR [edx], cl
; Line 7446
	jmp	SHORT $LN3@decSetMaxV
$LN1@decSetMaxV:
; Line 7448
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 7449
	jmp	SHORT $LN4@decSetMaxV
$LN3@decSetMaxV:
; Line 7450
	mov	eax, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [eax+8], 0
; Line 7451
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 7452
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_decSetMaxValue ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _decSetSubnormal
_TEXT	SEGMENT
_adjust$ = -60						; size = 4
_etiny$ = -48						; size = 4
_workset$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_dn$ = 8						; size = 4
_set$ = 12						; size = 4
_residue$ = 16						; size = 4
_status$ = 20						; size = 4
_decSetSubnormal PROC					; COMDAT
; Line 7472
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 7488
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _set$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, ecx
	mov	DWORD PTR _etiny$[ebp], eax
; Line 7490
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN7@decSetSubn
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN7@decSetSubn
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN7@decSetSubn
; Line 7498
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _etiny$[ebp]
	jge	SHORT $LN6@decSetSubn
; Line 7499
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _etiny$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 7500
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN6@decSetSubn:
; Line 7502
	jmp	$LN8@decSetSubn
$LN7@decSetSubn:
; Line 7505
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 4096				; 00001000H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 7506
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _etiny$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _adjust$[ebp], ecx
; Line 7507
	cmp	DWORD PTR _adjust$[ebp], 0
	jg	SHORT $LN5@decSetSubn
; Line 7511
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 32					; 00000020H
	je	SHORT $LN4@decSetSubn
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN4@decSetSubn:
; Line 7512
	jmp	$LN8@decSetSubn
$LN5@decSetSubn:
; Line 7517
	mov	esi, DWORD PTR _set$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _workset$[ebp]
	rep movsd
; Line 7518
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _adjust$[ebp]
	mov	DWORD PTR _workset$[ebp], ecx
; Line 7519
	mov	eax, DWORD PTR _workset$[ebp+8]
	sub	eax, DWORD PTR _adjust$[ebp]
	mov	DWORD PTR _workset$[ebp+8], eax
; Line 7521
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _residue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dn$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	add	ecx, 9
	push	ecx
	lea	edx, DWORD PTR _workset$[ebp]
	push	edx
	mov	eax, DWORD PTR _dn$[ebp]
	push	eax
	call	_decSetCoeff
	add	esp, 24					; 00000018H
; Line 7522
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _residue$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _workset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dn$[ebp]
	push	ecx
	call	_decApplyRound
	add	esp, 16					; 00000010H
; Line 7526
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@decSetSubn
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@decSetSubn:
; Line 7530
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _etiny$[ebp]
	jle	SHORT $LN2@decSetSubn
; Line 7531
	push	1
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dn$[ebp]
	add	edx, 9
	push	edx
	call	_decShiftToMost
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 7532
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN2@decSetSubn:
; Line 7536
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN8@decSetSubn
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN8@decSetSubn
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN8@decSetSubn
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN8@decSetSubn:
; Line 7537
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@decSetSubn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@decSetSubn:
	DD	1
	DD	$LN11@decSetSubn
$LN11@decSetSubn:
	DD	-36					; ffffffdcH
	DD	28					; 0000001cH
	DD	$LN10@decSetSubn
$LN10@decSetSubn:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_decSetSubnormal ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decCheckMath
_TEXT	SEGMENT
_save$ = -8						; size = 4
_rhs$ = 8						; size = 4
_set$ = 12						; size = 4
_status$ = 16						; size = 4
_decCheckMath PROC					; COMDAT
; Line 7558
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7559
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _save$[ebp], ecx
; Line 7562
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 999999			; 000f423fH
	jg	SHORT $LN5@decCheckMa
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax+4], 999999		; 000f423fH
	jg	SHORT $LN5@decCheckMa
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	neg	ecx
	cmp	ecx, 999999				; 000f423fH
	jle	SHORT $LN6@decCheckMa
$LN5@decCheckMa:
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 7563
	jmp	SHORT $LN4@decCheckMa
$LN6@decCheckMa:
; Line 7566
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 999999			; 000f423fH
	jg	SHORT $LN2@decCheckMa
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _rhs$[ebp]
	add	ecx, DWORD PTR [edx]
	cmp	ecx, 1000000				; 000f4240H
	jg	SHORT $LN2@decCheckMa
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _rhs$[ebp]
	add	ecx, DWORD PTR [edx]
	cmp	ecx, -1999996				; ffe17b84H
	jge	SHORT $LN4@decCheckMa
$LN2@decCheckMa:
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN1@decCheckMa
	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN1@decCheckMa
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	je	SHORT $LN4@decCheckMa
$LN1@decCheckMa:
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
$LN4@decCheckMa:
; Line 7567
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR _save$[ebp]
	setne	al
; Line 7568
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_decCheckMath ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decGetInt
_TEXT	SEGMENT
_save$12413 = -92					; size = 4
_rem$12407 = -80					; size = 4
_count$12399 = -68					; size = 4
_neg$ = -53						; size = 1
_ilength$ = -44						; size = 4
_got$ = -32						; size = 4
_up$ = -20						; size = 4
_theInt$ = -8						; size = 4
_dn$ = 8						; size = 4
_decGetInt PROC						; COMDAT
; Line 7585
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7589
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _dn$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _ilength$[ebp], ecx
; Line 7590
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 128				; 00000080H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	BYTE PTR _neg$[ebp], cl
; Line 7600
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN25@decGetInt
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN25@decGetInt
	mov	eax, DWORD PTR _dn$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 112				; 00000070H
	jne	SHORT $LN25@decGetInt
	xor	eax, eax
	jmp	$LN26@decGetInt
$LN25@decGetInt:
; Line 7602
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	DWORD PTR _up$[ebp], eax
; Line 7603
	mov	DWORD PTR _theInt$[ebp], 0
; Line 7604
	mov	eax, DWORD PTR _dn$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jl	SHORT $LN24@decGetInt
; Line 7606
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _got$[ebp], ecx
; Line 7608
	jmp	$LN23@decGetInt
$LN24@decGetInt:
; Line 7609
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	mov	DWORD PTR _count$12399[ebp], ecx
	jmp	SHORT $LN22@decGetInt
$LN21@decGetInt:
; Line 7611
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
$LN22@decGetInt:
	cmp	DWORD PTR _count$12399[ebp], 1
	jl	SHORT $LN20@decGetInt
; Line 7612
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN19@decGetInt
	mov	eax, -2147483648			; 80000000H
	jmp	$LN26@decGetInt
$LN19@decGetInt:
; Line 7613
	mov	eax, DWORD PTR _count$12399[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$12399[ebp], eax
; Line 7614
	jmp	SHORT $LN21@decGetInt
$LN20@decGetInt:
; Line 7615
	cmp	DWORD PTR _count$12399[ebp], 0
	jne	SHORT $LN18@decGetInt
	mov	DWORD PTR _got$[ebp], 0
; Line 7616
	jmp	SHORT $LN23@decGetInt
$LN18@decGetInt:
; Line 7620
	mov	eax, DWORD PTR _up$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _count$12399[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _count$12399[ebp]
	imul	edx, DWORD PTR _multies[eax*4]
	shr	edx, 17					; 00000011H
	mov	DWORD PTR _theInt$[ebp], edx
; Line 7621
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _count$12399[ebp]
	mov	eax, DWORD PTR _theInt$[ebp]
	imul	eax, DWORD PTR _DECPOWERS[edx*4]
	sub	ecx, eax
	mov	DWORD PTR _rem$12407[ebp], ecx
; Line 7626
	je	SHORT $LN16@decGetInt
	mov	eax, -2147483648			; 80000000H
	jmp	$LN26@decGetInt
$LN16@decGetInt:
; Line 7628
	mov	eax, 1
	sub	eax, DWORD PTR _count$12399[ebp]
	mov	DWORD PTR _got$[ebp], eax
; Line 7629
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
$LN23@decGetInt:
; Line 7635
	cmp	DWORD PTR _got$[ebp], 0
	jne	SHORT $LN15@decGetInt
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _theInt$[ebp], ecx
	mov	eax, DWORD PTR _got$[ebp]
	add	eax, 1
	mov	DWORD PTR _got$[ebp], eax
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
$LN15@decGetInt:
; Line 7637
	cmp	DWORD PTR _ilength$[ebp], 11		; 0000000bH
	jge	$LN14@decGetInt
; Line 7638
	mov	eax, DWORD PTR _theInt$[ebp]
	mov	DWORD PTR _save$12413[ebp], eax
	jmp	SHORT $LN13@decGetInt
$LN12@decGetInt:
; Line 7640
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 1
	mov	DWORD PTR _up$[ebp], eax
$LN13@decGetInt:
	mov	eax, DWORD PTR _got$[ebp]
	cmp	eax, DWORD PTR _ilength$[ebp]
	jge	SHORT $LN11@decGetInt
; Line 7641
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _got$[ebp]
	imul	ecx, DWORD PTR _DECPOWERS[edx*4]
	add	ecx, DWORD PTR _theInt$[ebp]
	mov	DWORD PTR _theInt$[ebp], ecx
; Line 7642
	mov	eax, DWORD PTR _got$[ebp]
	add	eax, 1
	mov	DWORD PTR _got$[ebp], eax
; Line 7643
	jmp	SHORT $LN12@decGetInt
$LN11@decGetInt:
; Line 7644
	cmp	DWORD PTR _ilength$[ebp], 10		; 0000000aH
	jne	SHORT $LN14@decGetInt
; Line 7645
	mov	ecx, DWORD PTR _got$[ebp]
	mov	eax, DWORD PTR _theInt$[ebp]
	cdq
	idiv	DWORD PTR _DECPOWERS[ecx*4-4]
	mov	edx, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [edx-1]
	cmp	eax, ecx
	je	SHORT $LN9@decGetInt
	mov	DWORD PTR _ilength$[ebp], 11		; 0000000bH
	jmp	SHORT $LN8@decGetInt
$LN9@decGetInt:
; Line 7647
	movzx	eax, BYTE PTR _neg$[ebp]
	test	eax, eax
	je	SHORT $LN7@decGetInt
	cmp	DWORD PTR _theInt$[ebp], 1999999997	; 773593fdH
	jle	SHORT $LN7@decGetInt
	mov	DWORD PTR _ilength$[ebp], 11		; 0000000bH
	jmp	SHORT $LN8@decGetInt
$LN7@decGetInt:
; Line 7648
	movzx	eax, BYTE PTR _neg$[ebp]
	test	eax, eax
	jne	SHORT $LN8@decGetInt
	cmp	DWORD PTR _theInt$[ebp], 999999999	; 3b9ac9ffH
	jle	SHORT $LN8@decGetInt
	mov	DWORD PTR _ilength$[ebp], 11		; 0000000bH
$LN8@decGetInt:
; Line 7649
	cmp	DWORD PTR _ilength$[ebp], 11		; 0000000bH
	jne	SHORT $LN14@decGetInt
	mov	eax, DWORD PTR _save$12413[ebp]
	mov	DWORD PTR _theInt$[ebp], eax
$LN14@decGetInt:
; Line 7653
	cmp	DWORD PTR _ilength$[ebp], 10		; 0000000aH
	jle	SHORT $LN3@decGetInt
; Line 7654
	mov	eax, DWORD PTR _theInt$[ebp]
	and	eax, 1
	je	SHORT $LN2@decGetInt
	mov	eax, -2147483645			; 80000003H
	jmp	SHORT $LN26@decGetInt
$LN2@decGetInt:
; Line 7655
	mov	eax, -2147483646			; 80000002H
	jmp	SHORT $LN26@decGetInt
$LN3@decGetInt:
; Line 7658
	movzx	eax, BYTE PTR _neg$[ebp]
	test	eax, eax
	je	SHORT $LN1@decGetInt
	mov	eax, DWORD PTR _theInt$[ebp]
	neg	eax
	mov	DWORD PTR _theInt$[ebp], eax
$LN1@decGetInt:
; Line 7659
	mov	eax, DWORD PTR _theInt$[ebp]
$LN26@decGetInt:
; Line 7660
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_decGetInt ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decDecap
_TEXT	SEGMENT
tv88 = -220						; size = 4
tv76 = -220						; size = 4
_cut$ = -20						; size = 4
_msu$ = -8						; size = 4
_dn$ = 8						; size = 4
_drop$ = 12						; size = 4
_decDecap PROC						; COMDAT
; Line 7674
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7677
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR _drop$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN2@decDecap
; Line 7683
	mov	eax, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [eax+9], 0
; Line 7684
	mov	eax, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [eax], 1
; Line 7685
	mov	eax, DWORD PTR _dn$[ebp]
	jmp	$LN3@decDecap
$LN2@decDecap:
; Line 7687
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _drop$[ebp]
	cmp	ecx, 49					; 00000031H
	jg	SHORT $LN5@decDecap
	mov	edx, DWORD PTR _dn$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _drop$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN6@decDecap
$LN5@decDecap:
	mov	edx, DWORD PTR _dn$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _drop$[ebp]
	mov	DWORD PTR tv76[ebp], eax
$LN6@decDecap:
	mov	ecx, DWORD PTR tv76[ebp]
	mov	edx, DWORD PTR _dn$[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	DWORD PTR _msu$[ebp], eax
; Line 7688
	mov	eax, DWORD PTR _dn$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _drop$[ebp]
	cmp	ecx, 49					; 00000031H
	jg	SHORT $LN7@decDecap
	mov	edx, DWORD PTR _dn$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _drop$[ebp]
	movzx	ecx, BYTE PTR _d2utable[eax]
	mov	DWORD PTR tv88[ebp], ecx
	jmp	SHORT $LN8@decDecap
$LN7@decDecap:
	mov	edx, DWORD PTR _dn$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _drop$[ebp]
	mov	DWORD PTR tv88[ebp], eax
$LN8@decDecap:
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _drop$[ebp]
	mov	eax, DWORD PTR tv88[ebp]
	sub	eax, 1
	sub	edx, eax
	mov	DWORD PTR _cut$[ebp], edx
; Line 7689
	cmp	DWORD PTR _cut$[ebp], 1
	je	SHORT $LN1@decDecap
	mov	eax, DWORD PTR _msu$[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	ecx, DWORD PTR _cut$[ebp]
	xor	edx, edx
	div	DWORD PTR _DECPOWERS[ecx*4]
	mov	eax, DWORD PTR _msu$[ebp]
	mov	BYTE PTR [eax], dl
$LN1@decDecap:
; Line 7691
	mov	eax, DWORD PTR _dn$[ebp]
	add	eax, 9
	mov	ecx, DWORD PTR _msu$[ebp]
	sub	ecx, eax
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _dn$[ebp]
	add	edx, 9
	push	edx
	call	_decGetDigits
	add	esp, 8
	mov	ecx, DWORD PTR _dn$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 7692
	mov	eax, DWORD PTR _dn$[ebp]
$LN3@decDecap:
; Line 7693
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_decDecap ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decBiStr
_TEXT	SEGMENT
_targ$ = 8						; size = 4
_str1$ = 12						; size = 4
_str2$ = 16						; size = 4
_decBiStr PROC						; COMDAT
; Line 7710
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7711
	jmp	SHORT $LN5@decBiStr
$LN4@decBiStr:
	mov	eax, DWORD PTR _targ$[ebp]
	add	eax, 1
	mov	DWORD PTR _targ$[ebp], eax
	mov	ecx, DWORD PTR _str1$[ebp]
	add	ecx, 1
	mov	DWORD PTR _str1$[ebp], ecx
	mov	edx, DWORD PTR _str2$[ebp]
	add	edx, 1
	mov	DWORD PTR _str2$[ebp], edx
$LN5@decBiStr:
; Line 7712
	mov	eax, DWORD PTR _targ$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _str1$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN2@decBiStr
	mov	eax, DWORD PTR _targ$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _str2$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN2@decBiStr
	xor	al, al
	jmp	SHORT $LN6@decBiStr
$LN2@decBiStr:
; Line 7714
	mov	eax, DWORD PTR _targ$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN1@decBiStr
	jmp	SHORT $LN3@decBiStr
$LN1@decBiStr:
; Line 7715
	jmp	SHORT $LN4@decBiStr
$LN3@decBiStr:
; Line 7716
	mov	al, 1
$LN6@decBiStr:
; Line 7717
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_decBiStr ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decNaNs
_TEXT	SEGMENT
tv134 = -232						; size = 4
tv90 = -232						; size = 4
_uresp1$12476 = -32					; size = 4
_ur$12475 = -20						; size = 4
_ul$12474 = -8						; size = 4
_res$ = 8						; size = 4
_lhs$ = 12						; size = 4
_rhs$ = 16						; size = 4
_set$ = 20						; size = 4
_status$ = 24						; size = 4
_decNaNs PROC						; COMDAT
; Line 7735
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7738
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 16					; 00000010H
	je	SHORT $LN14@decNaNs
; Line 7739
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1073741952				; 40000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN13@decNaNs
$LN14@decNaNs:
; Line 7740
	cmp	DWORD PTR _rhs$[ebp], 0
	jne	SHORT $LN12@decNaNs
	jmp	SHORT $LN13@decNaNs
$LN12@decNaNs:
; Line 7741
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 16					; 00000010H
	je	SHORT $LN10@decNaNs
; Line 7742
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR _lhs$[ebp], eax
; Line 7743
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1073741952				; 40000080H
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN13@decNaNs
$LN10@decNaNs:
; Line 7745
	mov	eax, DWORD PTR _lhs$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN8@decNaNs
	jmp	SHORT $LN13@decNaNs
$LN8@decNaNs:
; Line 7746
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR _lhs$[ebp], eax
$LN13@decNaNs:
; Line 7749
	mov	eax, DWORD PTR _lhs$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jg	SHORT $LN6@decNaNs
	mov	eax, DWORD PTR _lhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	_uprv_decNumberCopy_56
	add	esp, 8
; Line 7750
	jmp	$LN5@decNaNs
$LN6@decNaNs:
; Line 7754
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _lhs$[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax+8], dl
; Line 7755
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN17@decNaNs
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN18@decNaNs
$LN17@decNaNs:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv90[ebp], edx
$LN18@decNaNs:
	mov	eax, DWORD PTR tv90[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	lea	edx, DWORD PTR [ecx+eax+9]
	mov	DWORD PTR _uresp1$12476[ebp], edx
; Line 7756
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, 9
	mov	DWORD PTR _ur$12475[ebp], eax
	mov	ecx, DWORD PTR _lhs$[ebp]
	add	ecx, 9
	mov	DWORD PTR _ul$12474[ebp], ecx
	jmp	SHORT $LN4@decNaNs
$LN3@decNaNs:
	mov	eax, DWORD PTR _ur$12475[ebp]
	add	eax, 1
	mov	DWORD PTR _ur$12475[ebp], eax
	mov	ecx, DWORD PTR _ul$12474[ebp]
	add	ecx, 1
	mov	DWORD PTR _ul$12474[ebp], ecx
$LN4@decNaNs:
	mov	eax, DWORD PTR _ur$12475[ebp]
	cmp	eax, DWORD PTR _uresp1$12476[ebp]
	jae	SHORT $LN2@decNaNs
	mov	eax, DWORD PTR _ur$12475[ebp]
	mov	ecx, DWORD PTR _ul$12474[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN3@decNaNs
$LN2@decNaNs:
; Line 7757
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 49			; 00000031H
	jg	SHORT $LN19@decNaNs
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR _d2utable[edx]
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN20@decNaNs
$LN19@decNaNs:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv134[ebp], edx
$LN20@decNaNs:
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [eax], ecx
; Line 7759
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jle	SHORT $LN5@decNaNs
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_decDecap
	add	esp, 8
$LN5@decNaNs:
; Line 7762
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, -17				; ffffffefH
	mov	edx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [edx+8], cl
; Line 7763
	mov	eax, DWORD PTR _res$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _res$[ebp]
	mov	BYTE PTR [edx+8], cl
; Line 7764
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 7766
	mov	eax, DWORD PTR _res$[ebp]
; Line 7767
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_decNaNs ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decStatus
_TEXT	SEGMENT
_dn$ = 8						; size = 4
_status$ = 12						; size = 4
_set$ = 16						; size = 4
_decStatus PROC						; COMDAT
; Line 7784
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7785
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 221				; 000000ddH
	je	SHORT $LN3@decStatus
; Line 7787
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, 1073741824				; 40000000H
	je	SHORT $LN2@decStatus
	mov	eax, DWORD PTR _status$[ebp]
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR _status$[ebp], eax
; Line 7788
	jmp	SHORT $LN3@decStatus
$LN2@decStatus:
; Line 7789
	mov	eax, DWORD PTR _dn$[ebp]
	push	eax
	call	_uprv_decNumberZero_56
	add	esp, 4
; Line 7790
	mov	eax, DWORD PTR _dn$[ebp]
	mov	BYTE PTR [eax+8], 32			; 00000020H
$LN3@decStatus:
; Line 7793
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	call	_uprv_decContextSetStatus_56
	add	esp, 8
; Line 7795
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_decStatus ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _decGetDigits
_TEXT	SEGMENT
_digits$ = -20						; size = 4
_up$ = -8						; size = 4
_uar$ = 8						; size = 4
_len$ = 12						; size = 4
_decGetDigits PROC					; COMDAT
; Line 7810
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7811
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _uar$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _up$[ebp], edx
; Line 7812
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _digits$[ebp], eax
	jmp	SHORT $LN5@decGetDigi
$LN4@decGetDigi:
; Line 7821
	mov	eax, DWORD PTR _up$[ebp]
	sub	eax, 1
	mov	DWORD PTR _up$[ebp], eax
$LN5@decGetDigi:
	mov	eax, DWORD PTR _up$[ebp]
	cmp	eax, DWORD PTR _uar$[ebp]
	jb	SHORT $LN3@decGetDigi
; Line 7822
	mov	eax, DWORD PTR _up$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN2@decGetDigi
; Line 7823
	cmp	DWORD PTR _digits$[ebp], 1
	jne	SHORT $LN1@decGetDigi
	jmp	SHORT $LN3@decGetDigi
$LN1@decGetDigi:
; Line 7824
	mov	eax, DWORD PTR _digits$[ebp]
	sub	eax, 1
	mov	DWORD PTR _digits$[ebp], eax
; Line 7825
	jmp	SHORT $LN4@decGetDigi
$LN2@decGetDigi:
; Line 7842
	jmp	SHORT $LN3@decGetDigi
; Line 7843
	jmp	SHORT $LN4@decGetDigi
$LN3@decGetDigi:
; Line 7844
	mov	eax, DWORD PTR _digits$[ebp]
; Line 7845
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_decGetDigits ENDP
_TEXT	ENDS
END
