; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\i18n\utmscale.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_timeScaleTable DQ 0000000000002710H
	DQ	00003883122cd800H
	DQ	fffc80a0906f9f9bH
	DQ	00030e594b36b065H
	DQ	8000000000000329H
	DQ	7ffffffffffffcd7H
	DQ	00003883122cd801H
	DQ	00003883122cd7ffH
	DQ	0000000000001388H
	DQ	8000000000001388H
	DQ	7fffffffffffec77H
	DQ	0000000000989680H
	DQ	0000000e7791f700H
	DQ	ffffff1ac8d9331bH
	DQ	000000c84802dee5H
	DQ	8000000000000000H
	DQ	7fffffffffffffffH
	DQ	0000000e7791f701H
	DQ	0000000e7791f6ffH
	DQ	00000000004c4b40H
	DQ	80000000004c4b40H
	DQ	7fffffffffb3b4bfH
	DQ	0000000000002710H
	DQ	00003883122cd800H
	DQ	fffc80a0906f9f9bH
	DQ	00030e594b36b065H
	DQ	8000000000000329H
	DQ	7ffffffffffffcd7H
	DQ	00003883122cd801H
	DQ	00003883122cd7ffH
	DQ	0000000000001388H
	DQ	8000000000001388H
	DQ	7fffffffffffec77H
	DQ	0000000000000001H
	DQ	0701ce1722770000H
	DQ	8000000000000000H
	DQ	78fe31e8dd88ffffH
	DQ	8701ce1722770000H
	DQ	7fffffffffffffffH
	DQ	0701ce1722770000H
	DQ	0701ce1722770000H
	DQ	0000000000000000H
	DQ	8000000000000000H
	DQ	7fffffffffffffffH
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	8000000000000000H
	DQ	7fffffffffffffffH
	DQ	8000000000000000H
	DQ	7fffffffffffffffH
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	8000000000000000H
	DQ	7fffffffffffffffH
	DQ	0000000000989680H
	DQ	0000000dfb6c4680H
	DQ	ffffff1b44fee39bH
	DQ	000000c8c4288f65H
	DQ	8000000000000000H
	DQ	7fffffffffffffffH
	DQ	0000000dfb6c4681H
	DQ	0000000dfb6c467fH
	DQ	00000000004c4b40H
	DQ	80000000004c4b40H
	DQ	7fffffffffb3b4bfH
	DQ	0000000000989680H
	DQ	0000000eb1e1bf80H
	DQ	ffffff1a8e896a9bH
	DQ	000000c80db31665H
	DQ	8000000000000000H
	DQ	7fffffffffffffffH
	DQ	0000000eb1e1bf81H
	DQ	0000000eb1e1bf7fH
	DQ	00000000004c4b40H
	DQ	80000000004c4b40H
	DQ	7fffffffffb3b4bfH
	DQ	000000c92a69c000H
	DQ	00000000000a955aH
	DQ	ffffffffff5286a7H
	DQ	0000000000984ea5H
	DQ	8000000000000000H
	DQ	7fffffffffffffffH
	DQ	00000000000a955bH
	DQ	00000000000a9559H
	DQ	000000649534e000H
	DQ	800000649534e000H
	DQ	7fffff9b6acb1fffH
	DQ	000000c92a69c000H
	DQ	00000000000a955aH
	DQ	ffffffffff5286a7H
	DQ	0000000000984ea5H
	DQ	8000000000000000H
	DQ	7fffffffffffffffH
	DQ	00000000000a955bH
	DQ	00000000000a9559H
	DQ	000000649534e000H
	DQ	800000649534e000H
	DQ	7fffff9b6acb1fffH
	DQ	000000000000000aH
	DQ	00dcbffeff2bc000H
	DQ	f256733434077334H
	DQ	0bf00ccdcda10cccH
	DQ	8000000000000004H
	DQ	7ffffffffffffffcH
	DQ	00dcbffeff2bc001H
	DQ	00dcbffeff2bbfffH
	DQ	0000000000000005H
	DQ	8000000000000005H
	DQ	7ffffffffffffffaH
CONST	ENDS
PUBLIC	_utmscale_getTimeScaleValue_56
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\i18n\utmscale.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _utmscale_getTimeScaleValue_56
_TEXT	SEGMENT
_timeScale$ = 8						; size = 4
_value$ = 12						; size = 4
_status$ = 16						; size = 4
_utmscale_getTimeScaleValue_56 PROC			; COMDAT
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 40
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN3@utmscale_g
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@utmscale_g
$LN3@utmscale_g:
; Line 41
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN5@utmscale_g
$LN4@utmscale_g:
; Line 45
	cmp	DWORD PTR _timeScale$[ebp], 0
	jl	SHORT $LN1@utmscale_g
	cmp	DWORD PTR _timeScale$[ebp], 10		; 0000000aH
	jge	SHORT $LN1@utmscale_g
	cmp	DWORD PTR _value$[ebp], 0
	jl	SHORT $LN1@utmscale_g
	cmp	DWORD PTR _value$[ebp], 11		; 0000000bH
	jl	SHORT $LN2@utmscale_g
$LN1@utmscale_g:
; Line 47
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 48
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN5@utmscale_g
$LN2@utmscale_g:
; Line 51
	mov	ecx, DWORD PTR _timeScale$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _timeScaleTable[ecx+edx*8]
	mov	edx, DWORD PTR _timeScaleTable[ecx+edx*8+4]
$LN5@utmscale_g:
; Line 52
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utmscale_getTimeScaleValue_56 ENDP
_TEXT	ENDS
PUBLIC	_utmscale_fromInt64_56
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utmscale_fromInt64_56
_TEXT	SEGMENT
tv93 = -208						; size = 4
tv85 = -208						; size = 4
_data$ = -8						; size = 4
_otherTime$ = 8						; size = 8
_timeScale$ = 16					; size = 4
_status$ = 20						; size = 4
_utmscale_fromInt64_56 PROC				; COMDAT
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 59
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN5@utmscale_f
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN6@utmscale_f
$LN5@utmscale_f:
; Line 60
	xor	eax, eax
	xor	edx, edx
	jmp	$LN7@utmscale_f
$LN6@utmscale_f:
; Line 63
	cmp	DWORD PTR _timeScale$[ebp], 0
	jl	SHORT $LN3@utmscale_f
	cmp	DWORD PTR _timeScale$[ebp], 10		; 0000000aH
	jl	SHORT $LN4@utmscale_f
$LN3@utmscale_f:
; Line 64
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 65
	xor	eax, eax
	xor	edx, edx
	jmp	$LN7@utmscale_f
$LN4@utmscale_f:
; Line 68
	mov	eax, DWORD PTR _timeScale$[ebp]
	imul	eax, 88					; 00000058H
	add	eax, OFFSET _timeScaleTable
	mov	DWORD PTR _data$[ebp], eax
; Line 70
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	mov	edx, DWORD PTR _otherTime$[ebp+4]
	cmp	edx, DWORD PTR [ecx+20]
	jl	SHORT $LN1@utmscale_f
	jg	SHORT $LN9@utmscale_f
	mov	eax, DWORD PTR tv85[ebp]
	mov	ecx, DWORD PTR _otherTime$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN1@utmscale_f
$LN9@utmscale_f:
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR tv93[ebp]
	mov	edx, DWORD PTR _otherTime$[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jl	SHORT $LN2@utmscale_f
	jg	SHORT $LN1@utmscale_f
	mov	eax, DWORD PTR tv93[ebp]
	mov	ecx, DWORD PTR _otherTime$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN2@utmscale_f
$LN1@utmscale_f:
; Line 71
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 72
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN7@utmscale_f
$LN2@utmscale_f:
; Line 75
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _otherTime$[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _otherTime$[ebp+4]
	adc	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [eax+4]
	push	esi
	mov	eax, DWORD PTR [eax]
	push	eax
	push	edx
	push	ecx
	call	__allmul
$LN7@utmscale_f:
; Line 76
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utmscale_fromInt64_56 ENDP
_TEXT	ENDS
PUBLIC	_utmscale_toInt64_56
EXTRN	__alldiv:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utmscale_toInt64_56
_TEXT	SEGMENT
tv226 = -208						; size = 4
tv160 = -208						; size = 4
tv147 = -208						; size = 4
tv139 = -208						; size = 4
_data$ = -8						; size = 4
_universalTime$ = 8					; size = 8
_timeScale$ = 16					; size = 4
_status$ = 20						; size = 4
_utmscale_toInt64_56 PROC				; COMDAT
; Line 80
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 83
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN8@utmscale_t
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN9@utmscale_t
$LN8@utmscale_t:
; Line 84
	xor	eax, eax
	xor	edx, edx
	jmp	$LN10@utmscale_t
$LN9@utmscale_t:
; Line 87
	cmp	DWORD PTR _timeScale$[ebp], 0
	jl	SHORT $LN6@utmscale_t
	cmp	DWORD PTR _timeScale$[ebp], 10		; 0000000aH
	jl	SHORT $LN7@utmscale_t
$LN6@utmscale_t:
; Line 88
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 89
	xor	eax, eax
	xor	edx, edx
	jmp	$LN10@utmscale_t
$LN7@utmscale_t:
; Line 92
	mov	eax, DWORD PTR _timeScale$[ebp]
	imul	eax, 88					; 00000058H
	add	eax, OFFSET _timeScaleTable
	mov	DWORD PTR _data$[ebp], eax
; Line 94
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv139[ebp], eax
	mov	ecx, DWORD PTR tv139[ebp]
	mov	edx, DWORD PTR _universalTime$[ebp+4]
	cmp	edx, DWORD PTR [ecx+36]
	jl	SHORT $LN4@utmscale_t
	jg	SHORT $LN12@utmscale_t
	mov	eax, DWORD PTR tv139[ebp]
	mov	ecx, DWORD PTR _universalTime$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jb	SHORT $LN4@utmscale_t
$LN12@utmscale_t:
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	ecx, DWORD PTR tv147[ebp]
	mov	edx, DWORD PTR _universalTime$[ebp+4]
	cmp	edx, DWORD PTR [ecx+44]
	jl	SHORT $LN5@utmscale_t
	jg	SHORT $LN4@utmscale_t
	mov	eax, DWORD PTR tv147[ebp]
	mov	ecx, DWORD PTR _universalTime$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jbe	SHORT $LN5@utmscale_t
$LN4@utmscale_t:
; Line 95
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 96
	xor	eax, eax
	xor	edx, edx
	jmp	$LN10@utmscale_t
$LN5@utmscale_t:
; Line 99
	cmp	DWORD PTR _universalTime$[ebp+4], 0
	jg	$LN3@utmscale_t
	jl	SHORT $LN14@utmscale_t
	cmp	DWORD PTR _universalTime$[ebp], 0
	jae	$LN3@utmscale_t
$LN14@utmscale_t:
; Line 100
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv160[ebp], eax
	mov	ecx, DWORD PTR tv160[ebp]
	mov	edx, DWORD PTR _universalTime$[ebp+4]
	cmp	edx, DWORD PTR [ecx+76]
	jg	SHORT $LN2@utmscale_t
	jl	SHORT $LN15@utmscale_t
	mov	eax, DWORD PTR tv160[ebp]
	mov	ecx, DWORD PTR _universalTime$[ebp]
	cmp	ecx, DWORD PTR [eax+72]
	jae	SHORT $LN2@utmscale_t
$LN15@utmscale_t:
; Line 101
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _universalTime$[ebp]
	add	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _universalTime$[ebp+4]
	adc	edx, DWORD PTR [eax+68]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [eax+4]
	push	esi
	mov	eax, DWORD PTR [eax]
	push	eax
	push	edx
	push	ecx
	call	__alldiv
	mov	ecx, DWORD PTR _data$[ebp]
	sub	eax, DWORD PTR [ecx+48]
	sbb	edx, DWORD PTR [ecx+52]
	jmp	$LN10@utmscale_t
$LN2@utmscale_t:
; Line 104
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _universalTime$[ebp]
	sub	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _universalTime$[ebp+4]
	sbb	edx, DWORD PTR [eax+68]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [eax+4]
	push	esi
	mov	eax, DWORD PTR [eax]
	push	eax
	push	edx
	push	ecx
	call	__alldiv
	mov	ecx, DWORD PTR _data$[ebp]
	sub	eax, DWORD PTR [ecx+8]
	sbb	edx, DWORD PTR [ecx+12]
	jmp	SHORT $LN10@utmscale_t
$LN3@utmscale_t:
; Line 107
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR tv226[ebp], eax
	mov	ecx, DWORD PTR tv226[ebp]
	mov	edx, DWORD PTR _universalTime$[ebp+4]
	cmp	edx, DWORD PTR [ecx+84]
	jl	SHORT $LN1@utmscale_t
	jg	SHORT $LN16@utmscale_t
	mov	eax, DWORD PTR tv226[ebp]
	mov	ecx, DWORD PTR _universalTime$[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	jbe	SHORT $LN1@utmscale_t
$LN16@utmscale_t:
; Line 108
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _universalTime$[ebp]
	sub	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _universalTime$[ebp+4]
	sbb	edx, DWORD PTR [eax+68]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [eax+4]
	push	esi
	mov	eax, DWORD PTR [eax]
	push	eax
	push	edx
	push	ecx
	call	__alldiv
	mov	ecx, DWORD PTR _data$[ebp]
	sub	eax, DWORD PTR [ecx+56]
	sbb	edx, DWORD PTR [ecx+60]
	jmp	SHORT $LN10@utmscale_t
$LN1@utmscale_t:
; Line 111
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _universalTime$[ebp]
	add	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _universalTime$[ebp+4]
	adc	edx, DWORD PTR [eax+68]
	mov	eax, DWORD PTR _data$[ebp]
	mov	esi, DWORD PTR [eax+4]
	push	esi
	mov	eax, DWORD PTR [eax]
	push	eax
	push	edx
	push	ecx
	call	__alldiv
	mov	ecx, DWORD PTR _data$[ebp]
	sub	eax, DWORD PTR [ecx+8]
	sbb	edx, DWORD PTR [ecx+12]
$LN10@utmscale_t:
; Line 112
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utmscale_toInt64_56 ENDP
_TEXT	ENDS
END
