; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\i18n\inputext.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\include\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??0InputText@icu_56@@QAE@AAW4UErrorCode@@@Z	; icu_56::InputText::InputText
EXTRN	_uprv_malloc_56:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0InputText@icu_56@@QAE@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_status$ = 8						; size = 4
??0InputText@icu_56@@QAE@AAW4UErrorCode@@@Z PROC	; icu_56::InputText::InputText, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\inputext.cpp
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	8192					; 00002000H
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	push	512					; 00000200H
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 37
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@InputText
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@InputText
$LN1@InputText:
; Line 38
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
$LN3@InputText:
; Line 40
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0InputText@icu_56@@QAE@AAW4UErrorCode@@@Z ENDP	; icu_56::InputText::InputText
_TEXT	ENDS
PUBLIC	??1InputText@icu_56@@QAE@XZ			; icu_56::InputText::~InputText
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1InputText@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1InputText@icu_56@@QAE@XZ PROC			; icu_56::InputText::~InputText, COMDAT
; _this$ = ecx
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 44
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 47
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1InputText@icu_56@@QAE@XZ ENDP			; icu_56::InputText::~InputText
_TEXT	ENDS
PUBLIC	?setText@InputText@icu_56@@QAEXPBDH@Z		; icu_56::InputText::setText
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setText@InputText@icu_56@@QAEXPBDH@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
_in$ = 8						; size = 4
_len$ = 12						; size = 4
?setText@InputText@icu_56@@QAEXPBDH@Z PROC		; icu_56::InputText::setText, COMDAT
; _this$ = ecx
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 52
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
; Line 53
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 54
	cmp	DWORD PTR _len$[ebp], -1
	jne	SHORT $LN3@setText
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@setText
$LN3@setText:
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN4@setText:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 55
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setText@InputText@icu_56@@QAEXPBDH@Z ENDP		; icu_56::InputText::setText
_TEXT	ENDS
PUBLIC	?setDeclaredEncoding@InputText@icu_56@@QAEXPBDH@Z ; icu_56::InputText::setDeclaredEncoding
EXTRN	__imp__strncpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setDeclaredEncoding@InputText@icu_56@@QAEXPBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_encoding$ = 8						; size = 4
_len$ = 12						; size = 4
?setDeclaredEncoding@InputText@icu_56@@QAEXPBDH@Z PROC	; icu_56::InputText::setDeclaredEncoding, COMDAT
; _this$ = ecx
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 59
	cmp	DWORD PTR _encoding$[ebp], 0
	je	SHORT $LN3@setDeclare
; Line 60
	cmp	DWORD PTR _len$[ebp], -1
	jne	SHORT $LN1@setDeclare
; Line 61
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN1@setDeclare:
; Line 64
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 66
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 67
	push	1
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoding$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@setDeclare:
; Line 69
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setDeclaredEncoding@InputText@icu_56@@QAEXPBDH@Z ENDP	; icu_56::InputText::setDeclaredEncoding
_TEXT	ENDS
PUBLIC	?isSet@InputText@icu_56@@QBECXZ			; icu_56::InputText::isSet
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isSet@InputText@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isSet@InputText@icu_56@@QBECXZ PROC			; icu_56::InputText::isSet, COMDAT
; _this$ = ecx
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	setne	al
; Line 74
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isSet@InputText@icu_56@@QBECXZ ENDP			; icu_56::InputText::isSet
_TEXT	ENDS
PUBLIC	?MungeInput@InputText@icu_56@@QAEXC@Z		; icu_56::InputText::MungeInput
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?MungeInput@InputText@icu_56@@QAEXC@Z
_TEXT	SEGMENT
_i$8775 = -104						; size = 4
_limit$8767 = -92					; size = 4
_badTags$ = -80						; size = 4
_openTags$ = -68					; size = 4
_inMarkup$ = -53					; size = 1
_b$ = -41						; size = 1
_dsti$ = -32						; size = 4
_srci$ = -20						; size = 4
_this$ = -8						; size = 4
_fStripTags$ = 8					; size = 1
?MungeInput@InputText@icu_56@@QAEXC@Z PROC		; icu_56::InputText::MungeInput, COMDAT
; _this$ = ecx
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 83
	mov	DWORD PTR _srci$[ebp], 0
; Line 84
	mov	DWORD PTR _dsti$[ebp], 0
; Line 86
	mov	BYTE PTR _inMarkup$[ebp], 0
; Line 87
	mov	DWORD PTR _openTags$[ebp], 0
; Line 88
	mov	DWORD PTR _badTags$[ebp], 0
; Line 97
	movsx	eax, BYTE PTR _fStripTags$[ebp]
	test	eax, eax
	je	$LN21@MungeInput
; Line 98
	mov	DWORD PTR _srci$[ebp], 0
	jmp	SHORT $LN20@MungeInput
$LN19@MungeInput:
	mov	eax, DWORD PTR _srci$[ebp]
	add	eax, 1
	mov	DWORD PTR _srci$[ebp], eax
$LN20@MungeInput:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _srci$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN18@MungeInput
	cmp	DWORD PTR _dsti$[ebp], 8192		; 00002000H
	jge	SHORT $LN18@MungeInput
; Line 99
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _srci$[ebp]
	mov	al, BYTE PTR [ecx+edx]
	mov	BYTE PTR _b$[ebp], al
; Line 101
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 60					; 0000003cH
	jne	SHORT $LN17@MungeInput
; Line 102
	movzx	eax, BYTE PTR _inMarkup$[ebp]
	test	eax, eax
	je	SHORT $LN16@MungeInput
; Line 103
	mov	eax, DWORD PTR _badTags$[ebp]
	add	eax, 1
	mov	DWORD PTR _badTags$[ebp], eax
$LN16@MungeInput:
; Line 106
	mov	BYTE PTR _inMarkup$[ebp], 1
; Line 107
	mov	eax, DWORD PTR _openTags$[ebp]
	add	eax, 1
	mov	DWORD PTR _openTags$[ebp], eax
$LN17@MungeInput:
; Line 110
	movzx	eax, BYTE PTR _inMarkup$[ebp]
	test	eax, eax
	jne	SHORT $LN15@MungeInput
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _dsti$[ebp]
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _dsti$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dsti$[ebp], ecx
$LN15@MungeInput:
; Line 114
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 62					; 0000003eH
	jne	SHORT $LN14@MungeInput
; Line 115
	mov	BYTE PTR _inMarkup$[ebp], 0
$LN14@MungeInput:
; Line 117
	jmp	$LN19@MungeInput
$LN18@MungeInput:
; Line 119
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dsti$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN21@MungeInput:
; Line 128
	cmp	DWORD PTR _openTags$[ebp], 5
	jl	SHORT $LN12@MungeInput
	mov	eax, DWORD PTR _openTags$[ebp]
	cdq
	mov	ecx, 5
	idiv	ecx
	cmp	eax, DWORD PTR _badTags$[ebp]
	jl	SHORT $LN12@MungeInput
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 100			; 00000064H
	jge	SHORT $LN13@MungeInput
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 600			; 00000258H
	jle	SHORT $LN13@MungeInput
$LN12@MungeInput:
; Line 130
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _limit$8767[ebp], ecx
; Line 132
	cmp	DWORD PTR _limit$8767[ebp], 8192	; 00002000H
	jle	SHORT $LN11@MungeInput
; Line 133
	mov	DWORD PTR _limit$8767[ebp], 8192	; 00002000H
$LN11@MungeInput:
; Line 136
	mov	DWORD PTR _srci$[ebp], 0
	jmp	SHORT $LN10@MungeInput
$LN9@MungeInput:
	mov	eax, DWORD PTR _srci$[ebp]
	add	eax, 1
	mov	DWORD PTR _srci$[ebp], eax
$LN10@MungeInput:
	mov	eax, DWORD PTR _srci$[ebp]
	cmp	eax, DWORD PTR _limit$8767[ebp]
	jge	SHORT $LN8@MungeInput
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _srci$[ebp]
	mov	esi, DWORD PTR _srci$[ebp]
	mov	cl, BYTE PTR [ecx+esi]
	mov	BYTE PTR [eax+edx], cl
; Line 138
	jmp	SHORT $LN9@MungeInput
$LN8@MungeInput:
; Line 140
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _srci$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN13@MungeInput:
; Line 148
	push	512					; 00000200H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 150
	mov	DWORD PTR _srci$[ebp], 0
	jmp	SHORT $LN7@MungeInput
$LN6@MungeInput:
	mov	eax, DWORD PTR _srci$[ebp]
	add	eax, 1
	mov	DWORD PTR _srci$[ebp], eax
$LN7@MungeInput:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _srci$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN5@MungeInput
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _srci$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+eax*2]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _srci$[ebp]
	movzx	edx, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	WORD PTR [ecx+edx*2], ax
; Line 152
	jmp	SHORT $LN6@MungeInput
$LN5@MungeInput:
; Line 154
	mov	DWORD PTR _i$8775[ebp], 128		; 00000080H
	jmp	SHORT $LN4@MungeInput
$LN3@MungeInput:
	mov	eax, DWORD PTR _i$8775[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8775[ebp], eax
$LN4@MungeInput:
	cmp	DWORD PTR _i$8775[ebp], 159		; 0000009fH
	jg	SHORT $LN22@MungeInput
; Line 155
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$8775[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	test	eax, eax
	je	SHORT $LN1@MungeInput
; Line 156
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
; Line 157
	jmp	SHORT $LN22@MungeInput
$LN1@MungeInput:
; Line 159
	jmp	SHORT $LN3@MungeInput
$LN22@MungeInput:
; Line 160
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?MungeInput@InputText@icu_56@@QAEXC@Z ENDP		; icu_56::InputText::MungeInput
_TEXT	ENDS
END
