; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\i18n\nfrs.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
CONST	SEGMENT
_gPercentPercent DW 025H
	DW	025H
	DW	00H
	ORG $+2
_gNoparse DW	040H
	DW	06eH
	DW	06fH
	DW	070H
	DW	061H
	DW	072H
	DW	073H
	DW	065H
	DW	00H
	ORG $+2
_asciiDigits DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\include\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??9DecimalFormatSymbols@icu_56@@QBECABV01@@Z	; icu_56::DecimalFormatSymbols::operator!=
EXTRN	??8DecimalFormatSymbols@icu_56@@QBECABV01@@Z:PROC ; icu_56::DecimalFormatSymbols::operator==
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9DecimalFormatSymbols@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??9DecimalFormatSymbols@icu_56@@QBECABV01@@Z PROC	; icu_56::DecimalFormatSymbols::operator!=, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\dcfmtsym.h
; Line 247
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8DecimalFormatSymbols@icu_56@@QBECABV01@@Z ; icu_56::DecimalFormatSymbols::operator==
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9DecimalFormatSymbols@icu_56@@QBECABV01@@Z ENDP	; icu_56::DecimalFormatSymbols::operator!=
_TEXT	ENDS
PUBLIC	?isCustomCurrencySymbol@DecimalFormatSymbols@icu_56@@QBECXZ ; icu_56::DecimalFormatSymbols::isCustomCurrencySymbol
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isCustomCurrencySymbol@DecimalFormatSymbols@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isCustomCurrencySymbol@DecimalFormatSymbols@icu_56@@QBECXZ PROC ; icu_56::DecimalFormatSymbols::isCustomCurrencySymbol, COMDAT
; _this$ = ecx
; Line 362
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 363
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+2768]
; Line 364
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isCustomCurrencySymbol@DecimalFormatSymbols@icu_56@@QBECXZ ENDP ; icu_56::DecimalFormatSymbols::isCustomCurrencySymbol
_TEXT	ENDS
PUBLIC	?isCustomIntlCurrencySymbol@DecimalFormatSymbols@icu_56@@QBECXZ ; icu_56::DecimalFormatSymbols::isCustomIntlCurrencySymbol
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isCustomIntlCurrencySymbol@DecimalFormatSymbols@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isCustomIntlCurrencySymbol@DecimalFormatSymbols@icu_56@@QBECXZ PROC ; icu_56::DecimalFormatSymbols::isCustomIntlCurrencySymbol, COMDAT
; _this$ = ecx
; Line 369
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 370
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+2769]
; Line 371
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isCustomIntlCurrencySymbol@DecimalFormatSymbols@icu_56@@QBECXZ ENDP ; icu_56::DecimalFormatSymbols::isCustomIntlCurrencySymbol
_TEXT	ENDS
PUBLIC	?getSymbol@DecimalFormatSymbols@icu_56@@QBE?AVUnicodeString@2@W4ENumberFormatSymbol@12@@Z ; icu_56::DecimalFormatSymbols::getSymbol
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getSymbol@DecimalFormatSymbols@icu_56@@QBE?AVUnicodeString@2@W4ENumberFormatSymbol@12@@Z
_TEXT	SEGMENT
$T46330 = -224						; size = 4
_strPtr$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_symbol$ = 12						; size = 4
?getSymbol@DecimalFormatSymbols@icu_56@@QBE?AVUnicodeString@2@W4ENumberFormatSymbol@12@@Z PROC ; icu_56::DecimalFormatSymbols::getSymbol, COMDAT
; _this$ = ecx
; Line 435
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T46330[ebp], 0
; Line 437
	cmp	DWORD PTR _symbol$[ebp], 28		; 0000001cH
	jge	SHORT $LN2@getSymbol
; Line 438
	mov	eax, DWORD PTR _symbol$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _strPtr$[ebp], edx
; Line 439
	jmp	SHORT $LN1@getSymbol
$LN2@getSymbol:
; Line 440
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1796				; 00000704H
	mov	DWORD PTR _strPtr$[ebp], eax
$LN1@getSymbol:
; Line 442
	mov	esi, esp
	mov	eax, DWORD PTR _strPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T46330[ebp]
	or	ecx, 1
	mov	DWORD PTR $T46330[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 443
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?getSymbol@DecimalFormatSymbols@icu_56@@QBE?AVUnicodeString@2@W4ENumberFormatSymbol@12@@Z ENDP ; icu_56::DecimalFormatSymbols::getSymbol
_TEXT	ENDS
PUBLIC	?getConstSymbol@DecimalFormatSymbols@icu_56@@QBEABVUnicodeString@2@W4ENumberFormatSymbol@12@@Z ; icu_56::DecimalFormatSymbols::getConstSymbol
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getConstSymbol@DecimalFormatSymbols@icu_56@@QBEABVUnicodeString@2@W4ENumberFormatSymbol@12@@Z
_TEXT	SEGMENT
_strPtr$ = -20						; size = 4
_this$ = -8						; size = 4
_symbol$ = 8						; size = 4
?getConstSymbol@DecimalFormatSymbols@icu_56@@QBEABVUnicodeString@2@W4ENumberFormatSymbol@12@@Z PROC ; icu_56::DecimalFormatSymbols::getConstSymbol, COMDAT
; _this$ = ecx
; Line 448
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 450
	cmp	DWORD PTR _symbol$[ebp], 28		; 0000001cH
	jge	SHORT $LN2@getConstSy
; Line 451
	mov	eax, DWORD PTR _symbol$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _strPtr$[ebp], edx
; Line 452
	jmp	SHORT $LN1@getConstSy
$LN2@getConstSy:
; Line 453
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1796				; 00000704H
	mov	DWORD PTR _strPtr$[ebp], eax
$LN1@getConstSy:
; Line 455
	mov	eax, DWORD PTR _strPtr$[ebp]
; Line 456
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?getConstSymbol@DecimalFormatSymbols@icu_56@@QBEABVUnicodeString@2@W4ENumberFormatSymbol@12@@Z ENDP ; icu_56::DecimalFormatSymbols::getConstSymbol
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z ; icu_56::DecimalFormatSymbols::setSymbol
EXTRN	__imp_??1UnicodeString@icu_56@@UAE@XZ:PROC
EXTRN	__imp_??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z:PROC
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@H@Z:PROC
EXTRN	_u_charDigitValue_56:PROC
EXTRN	__imp_?char32At@UnicodeString@icu_56@@QBEHH@Z:PROC
EXTRN	__imp_?countChar32@UnicodeString@icu_56@@QBEHHH@Z:PROC
EXTRN	__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z$0
__ehfuncinfo$?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z
_TEXT	SEGMENT
tv138 = -324						; size = 4
tv139 = -320						; size = 4
$T36098 = -312						; size = 64
_i$36093 = -45						; size = 1
_sym$36091 = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_symbol$ = 8						; size = 4
_value$ = 12						; size = 4
_propogateDigits$ = 16					; size = 1
?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z PROC ; icu_56::DecimalFormatSymbols::setSymbol, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	cmp	DWORD PTR _symbol$[ebp], 8
	jne	SHORT $LN9@setSymbol
; Line 466
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2768], 1
	jmp	SHORT $LN8@setSymbol
$LN9@setSymbol:
; Line 468
	cmp	DWORD PTR _symbol$[ebp], 9
	jne	SHORT $LN8@setSymbol
; Line 469
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2769], 1
$LN8@setSymbol:
; Line 471
	cmp	DWORD PTR _symbol$[ebp], 28		; 0000001cH
	jge	SHORT $LN6@setSymbol
; Line 472
	mov	esi, esp
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _symbol$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+4]
	call	DWORD PTR __imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@setSymbol:
; Line 477
	movsx	eax, BYTE PTR _propogateDigits$[ebp]
	test	eax, eax
	je	$LN10@setSymbol
	cmp	DWORD PTR _symbol$[ebp], 4
	jne	$LN10@setSymbol
	mov	esi, esp
	push	2147483647				; 7fffffffH
	push	0
	mov	ecx, DWORD PTR _value$[ebp]
	call	DWORD PTR __imp_?countChar32@UnicodeString@icu_56@@QBEHHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	$LN10@setSymbol
; Line 478
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _value$[ebp]
	call	DWORD PTR __imp_?char32At@UnicodeString@icu_56@@QBEHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _sym$36091[ebp], eax
; Line 479
	mov	eax, DWORD PTR _sym$36091[ebp]
	push	eax
	call	_u_charDigitValue_56
	add	esp, 4
	test	eax, eax
	jne	$LN10@setSymbol
; Line 480
	mov	BYTE PTR _i$36093[ebp], 1
	jmp	SHORT $LN3@setSymbol
$LN2@setSymbol:
	mov	al, BYTE PTR _i$36093[ebp]
	add	al, 1
	mov	BYTE PTR _i$36093[ebp], al
$LN3@setSymbol:
	movsx	eax, BYTE PTR _i$36093[ebp]
	cmp	eax, 9
	jg	$LN10@setSymbol
; Line 481
	mov	eax, DWORD PTR _sym$36091[ebp]
	add	eax, 1
	mov	DWORD PTR _sym$36091[ebp], eax
; Line 482
	mov	esi, esp
	mov	eax, DWORD PTR _sym$36091[ebp]
	push	eax
	lea	ecx, DWORD PTR $T36098[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv139[ebp], eax
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR tv138[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	mov	edx, DWORD PTR tv138[ebp]
	push	edx
	movsx	eax, BYTE PTR _i$36093[ebp]
	add	eax, 17					; 00000011H
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax+4]
	call	DWORD PTR __imp_??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR $T36098[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 483
	jmp	$LN2@setSymbol
$LN10@setSymbol:
; Line 486
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR $T36098[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-328]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?setSymbol@DecimalFormatSymbols@icu_56@@QAEXW4ENumberFormatSymbol@12@ABVUnicodeString@2@C@Z ENDP ; icu_56::DecimalFormatSymbols::setSymbol
PUBLIC	?getLocale@DecimalFormatSymbols@icu_56@@QBE?AVLocale@2@XZ ; icu_56::DecimalFormatSymbols::getLocale
EXTRN	__imp_??0Locale@icu_56@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getLocale@DecimalFormatSymbols@icu_56@@QBE?AVLocale@2@XZ
_TEXT	SEGMENT
$T46352 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getLocale@DecimalFormatSymbols@icu_56@@QBE?AVLocale@2@XZ PROC ; icu_56::DecimalFormatSymbols::getLocale, COMDAT
; _this$ = ecx
; Line 491
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T46352[ebp], 0
; Line 492
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1860				; 00000744H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0Locale@icu_56@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR $T46352[ebp]
	or	ecx, 1
	mov	DWORD PTR $T46352[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 493
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getLocale@DecimalFormatSymbols@icu_56@@QBE?AVLocale@2@XZ ENDP ; icu_56::DecimalFormatSymbols::getLocale
_TEXT	ENDS
PUBLIC	?getCurrencyPattern@DecimalFormatSymbols@icu_56@@QBEPB_WXZ ; icu_56::DecimalFormatSymbols::getCurrencyPattern
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getCurrencyPattern@DecimalFormatSymbols@icu_56@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getCurrencyPattern@DecimalFormatSymbols@icu_56@@QBEPB_WXZ PROC ; icu_56::DecimalFormatSymbols::getCurrencyPattern, COMDAT
; _this$ = ecx
; Line 497
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 498
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+2380]
; Line 499
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrencyPattern@DecimalFormatSymbols@icu_56@@QBEPB_WXZ ENDP ; icu_56::DecimalFormatSymbols::getCurrencyPattern
_TEXT	ENDS
PUBLIC	??9Formattable@icu_56@@QBECABV01@@Z		; icu_56::Formattable::operator!=
EXTRN	??8Formattable@icu_56@@QBECABV01@@Z:PROC	; icu_56::Formattable::operator==
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9Formattable@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??9Formattable@icu_56@@QBECABV01@@Z PROC		; icu_56::Formattable::operator!=, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\fmtable.h
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8Formattable@icu_56@@QBECABV01@@Z	; icu_56::Formattable::operator==
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9Formattable@icu_56@@QBECABV01@@Z ENDP		; icu_56::Formattable::operator!=
_TEXT	ENDS
PUBLIC	?getDouble@Formattable@icu_56@@QBENXZ		; icu_56::Formattable::getDouble
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getDouble@Formattable@icu_56@@QBENXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getDouble@Formattable@icu_56@@QBENXZ PROC		; icu_56::Formattable::getDouble, COMDAT
; _this$ = ecx
; Line 295
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getDouble@Formattable@icu_56@@QBENXZ ENDP		; icu_56::Formattable::getDouble
_TEXT	ENDS
PUBLIC	?getLong@Formattable@icu_56@@QBEHXZ		; icu_56::Formattable::getLong
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getLong@Formattable@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getLong@Formattable@icu_56@@QBEHXZ PROC		; icu_56::Formattable::getLong, COMDAT
; _this$ = ecx
; Line 317
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getLong@Formattable@icu_56@@QBEHXZ ENDP		; icu_56::Formattable::getLong
_TEXT	ENDS
PUBLIC	?getInt64@Formattable@icu_56@@QBE_JXZ		; icu_56::Formattable::getInt64
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getInt64@Formattable@icu_56@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getInt64@Formattable@icu_56@@QBE_JXZ PROC		; icu_56::Formattable::getInt64, COMDAT
; _this$ = ecx
; Line 343
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getInt64@Formattable@icu_56@@QBE_JXZ ENDP		; icu_56::Formattable::getInt64
_TEXT	ENDS
PUBLIC	?getDate@Formattable@icu_56@@QBENXZ		; icu_56::Formattable::getDate
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getDate@Formattable@icu_56@@QBENXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getDate@Formattable@icu_56@@QBENXZ PROC		; icu_56::Formattable::getDate, COMDAT
; _this$ = ecx
; Line 368
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getDate@Formattable@icu_56@@QBENXZ ENDP		; icu_56::Formattable::getDate
_TEXT	ENDS
PUBLIC	?getString@Formattable@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z ; icu_56::Formattable::getString
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getString@Formattable@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_result$ = 8						; size = 4
?getString@Formattable@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z PROC ; icu_56::Formattable::getString, COMDAT
; _this$ = ecx
; Line 388
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _result$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getString@Formattable@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z ENDP ; icu_56::Formattable::getString
_TEXT	ENDS
PUBLIC	?getArray@Formattable@icu_56@@QBEPBV12@AAH@Z	; icu_56::Formattable::getArray
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getArray@Formattable@icu_56@@QBEPBV12@AAH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_count$ = 8						; size = 4
?getArray@Formattable@icu_56@@QBEPBV12@AAH@Z PROC	; icu_56::Formattable::getArray, COMDAT
; _this$ = ecx
; Line 446
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?getArray@Formattable@icu_56@@QBEPBV12@AAH@Z ENDP	; icu_56::Formattable::getArray
_TEXT	ENDS
PUBLIC	??AFormattable@icu_56@@QAEAAV01@H@Z		; icu_56::Formattable::operator[]
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??AFormattable@icu_56@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??AFormattable@icu_56@@QAEAAV01@H@Z PROC		; icu_56::Formattable::operator[], COMDAT
; _this$ = ecx
; Line 467
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??AFormattable@icu_56@@QAEAAV01@H@Z ENDP		; icu_56::Formattable::operator[]
_TEXT	ENDS
PUBLIC	?getDigitList@Formattable@icu_56@@QBEPAVDigitList@2@XZ ; icu_56::Formattable::getDigitList
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getDigitList@Formattable@icu_56@@QBEPAVDigitList@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getDigitList@Formattable@icu_56@@QBEPAVDigitList@2@XZ PROC ; icu_56::Formattable::getDigitList, COMDAT
; _this$ = ecx
; Line 654
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getDigitList@Formattable@icu_56@@QBEPAVDigitList@2@XZ ENDP ; icu_56::Formattable::getDigitList
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	?getDate@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z ; icu_56::Formattable::getDate
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?getDate@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?getDate@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z PROC ; icu_56::Formattable::getDate, COMDAT
; _this$ = ecx
; Line 715
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 716
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN2@getDate
; Line 717
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@getDate
; Line 718
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 3
$LN1@getDate:
; Line 720
	fldz
	jmp	SHORT $LN3@getDate
$LN2@getDate:
; Line 722
	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR [eax+8]
$LN3@getDate:
; Line 723
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getDate@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z ENDP ; icu_56::Formattable::getDate
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_SUCCESS@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_SUCCESS@@YACW4UErrorCode@@@Z PROC			; U_SUCCESS, COMDAT
; File d:\mozilla\intl\icu\include\unicode\utypes.h
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setle	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_SUCCESS@@YACW4UErrorCode@@@Z ENDP			; U_SUCCESS
_TEXT	ENDS
PUBLIC	?getString@Formattable@icu_56@@QBEABVUnicodeString@2@XZ ; icu_56::Formattable::getString
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getString@Formattable@icu_56@@QBEABVUnicodeString@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getString@Formattable@icu_56@@QBEABVUnicodeString@2@XZ PROC ; icu_56::Formattable::getString, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\fmtable.h
; Line 725
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 726
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 727
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getString@Formattable@icu_56@@QBEABVUnicodeString@2@XZ ENDP ; icu_56::Formattable::getString
_TEXT	ENDS
PUBLIC	?getString@Formattable@icu_56@@QAEAAVUnicodeString@2@XZ ; icu_56::Formattable::getString
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getString@Formattable@icu_56@@QAEAAVUnicodeString@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getString@Formattable@icu_56@@QAEAAVUnicodeString@2@XZ PROC ; icu_56::Formattable::getString, COMDAT
; _this$ = ecx
; Line 729
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 730
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 731
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getString@Formattable@icu_56@@QAEAAVUnicodeString@2@XZ ENDP ; icu_56::Formattable::getString
_TEXT	ENDS
PUBLIC	?getLong@Formattable@icu_56@@QBEHPAW4UErrorCode@@@Z ; icu_56::Formattable::getLong
EXTRN	?getLong@Formattable@icu_56@@QBEHAAW4UErrorCode@@@Z:PROC ; icu_56::Formattable::getLong
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getLong@Formattable@icu_56@@QBEHPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_status$ = 8						; size = 4
?getLong@Formattable@icu_56@@QBEHPAW4UErrorCode@@@Z PROC ; icu_56::Formattable::getLong, COMDAT
; _this$ = ecx
; Line 734
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 735
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getLong@Formattable@icu_56@@QBEHAAW4UErrorCode@@@Z ; icu_56::Formattable::getLong
; Line 736
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getLong@Formattable@icu_56@@QBEHPAW4UErrorCode@@@Z ENDP ; icu_56::Formattable::getLong
_TEXT	ENDS
PUBLIC	?toUFormattable@Formattable@icu_56@@QAEPAPAXXZ	; icu_56::Formattable::toUFormattable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?toUFormattable@Formattable@icu_56@@QAEPAPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?toUFormattable@Formattable@icu_56@@QAEPAPAXXZ PROC	; icu_56::Formattable::toUFormattable, COMDAT
; _this$ = ecx
; Line 739
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 740
	mov	eax, DWORD PTR _this$[ebp]
; Line 741
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?toUFormattable@Formattable@icu_56@@QAEPAPAXXZ ENDP	; icu_56::Formattable::toUFormattable
_TEXT	ENDS
PUBLIC	?toUFormattable@Formattable@icu_56@@QBEPBQAXXZ	; icu_56::Formattable::toUFormattable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?toUFormattable@Formattable@icu_56@@QBEPBQAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?toUFormattable@Formattable@icu_56@@QBEPBQAXXZ PROC	; icu_56::Formattable::toUFormattable, COMDAT
; _this$ = ecx
; Line 743
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 744
	mov	eax, DWORD PTR _this$[ebp]
; Line 745
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?toUFormattable@Formattable@icu_56@@QBEPBQAXXZ ENDP	; icu_56::Formattable::toUFormattable
_TEXT	ENDS
PUBLIC	?fromUFormattable@Formattable@icu_56@@SAPAV12@PAPAX@Z ; icu_56::Formattable::fromUFormattable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?fromUFormattable@Formattable@icu_56@@SAPAV12@PAPAX@Z
_TEXT	SEGMENT
_fmt$ = 8						; size = 4
?fromUFormattable@Formattable@icu_56@@SAPAV12@PAPAX@Z PROC ; icu_56::Formattable::fromUFormattable, COMDAT
; Line 747
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 748
	mov	eax, DWORD PTR _fmt$[ebp]
; Line 749
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?fromUFormattable@Formattable@icu_56@@SAPAV12@PAPAX@Z ENDP ; icu_56::Formattable::fromUFormattable
_TEXT	ENDS
PUBLIC	?fromUFormattable@Formattable@icu_56@@SAPBV12@PBQAX@Z ; icu_56::Formattable::fromUFormattable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?fromUFormattable@Formattable@icu_56@@SAPBV12@PBQAX@Z
_TEXT	SEGMENT
_fmt$ = 8						; size = 4
?fromUFormattable@Formattable@icu_56@@SAPBV12@PBQAX@Z PROC ; icu_56::Formattable::fromUFormattable, COMDAT
; Line 751
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 752
	mov	eax, DWORD PTR _fmt$[ebp]
; Line 753
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?fromUFormattable@Formattable@icu_56@@SAPBV12@PBQAX@Z ENDP ; icu_56::Formattable::fromUFormattable
_TEXT	ENDS
PUBLIC	??_7FieldPosition@icu_56@@6B@			; icu_56::FieldPosition::`vftable'
PUBLIC	??0FieldPosition@icu_56@@QAE@XZ			; icu_56::FieldPosition::FieldPosition
PUBLIC	??_R4FieldPosition@icu_56@@6B@			; icu_56::FieldPosition::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFieldPosition@icu_56@@@8		; icu_56::FieldPosition `RTTI Type Descriptor'
PUBLIC	??_R3FieldPosition@icu_56@@8			; icu_56::FieldPosition::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FieldPosition@icu_56@@8			; icu_56::FieldPosition::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FieldPosition@icu_56@@8		; icu_56::FieldPosition::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@UObject@icu_56@@8			; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVUObject@icu_56@@@8			; icu_56::UObject `RTTI Type Descriptor'
PUBLIC	??_R3UObject@icu_56@@8				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UObject@icu_56@@8				; icu_56::UObject::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVUMemory@icu_56@@@8			; icu_56::UMemory `RTTI Type Descriptor'
PUBLIC	??_R3UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EFieldPosition@icu_56@@UAEPAXI@Z		; icu_56::FieldPosition::`vector deleting destructor'
EXTRN	__imp_??0UObject@icu_56@@QAE@XZ:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?getDynamicClassID@FieldPosition@icu_56@@UBEPAXXZ:PROC ; icu_56::FieldPosition::getDynamicClassID
;	COMDAT ??_R1A@?0A@EA@UMemory@icu_56@@8
; File d:\mozilla\intl\icu\source\i18n\unicode\fieldpos.h
rdata$r	SEGMENT
??_R1A@?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UMemory@icu_56@@8
rdata$r	SEGMENT
??_R2UMemory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UMemory@icu_56@@8
rdata$r	SEGMENT
??_R3UMemory@icu_56@@8 DD 00H				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUMemory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUMemory@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUMemory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R13?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UObject@icu_56@@8
rdata$r	SEGMENT
??_R2UObject@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UObject@icu_56@@8
rdata$r	SEGMENT
??_R3UObject@icu_56@@8 DD 00H				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUObject@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUObject@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUObject@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@UObject@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UObject@icu_56@@8 DD FLAT:??_R0?AVUObject@icu_56@@@8 ; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FieldPosition@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FieldPosition@icu_56@@8 DD FLAT:??_R0?AVFieldPosition@icu_56@@@8 ; icu_56::FieldPosition::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FieldPosition@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2FieldPosition@icu_56@@8
rdata$r	SEGMENT
??_R2FieldPosition@icu_56@@8 DD FLAT:??_R1A@?0A@EA@FieldPosition@icu_56@@8 ; icu_56::FieldPosition::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3FieldPosition@icu_56@@8
rdata$r	SEGMENT
??_R3FieldPosition@icu_56@@8 DD 00H			; icu_56::FieldPosition::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2FieldPosition@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFieldPosition@icu_56@@@8
_DATA	SEGMENT
??_R0?AVFieldPosition@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::FieldPosition `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFieldPosition@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FieldPosition@icu_56@@6B@
rdata$r	SEGMENT
??_R4FieldPosition@icu_56@@6B@ DD 00H			; icu_56::FieldPosition::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFieldPosition@icu_56@@@8
	DD	FLAT:??_R3FieldPosition@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7FieldPosition@icu_56@@6B@
CONST	SEGMENT
??_7FieldPosition@icu_56@@6B@ DD FLAT:??_R4FieldPosition@icu_56@@6B@ ; icu_56::FieldPosition::`vftable'
	DD	FLAT:??_EFieldPosition@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@FieldPosition@icu_56@@UBEPAXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0FieldPosition@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0FieldPosition@icu_56@@QAE@XZ PROC			; icu_56::FieldPosition::FieldPosition, COMDAT
; _this$ = ecx
; Line 118
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FieldPosition@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0FieldPosition@icu_56@@QAE@XZ ENDP			; icu_56::FieldPosition::FieldPosition
_TEXT	ENDS
PUBLIC	??0FieldPosition@icu_56@@QAE@H@Z		; icu_56::FieldPosition::FieldPosition
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0FieldPosition@icu_56@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_field$ = 8						; size = 4
??0FieldPosition@icu_56@@QAE@H@Z PROC			; icu_56::FieldPosition::FieldPosition, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FieldPosition@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _field$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0FieldPosition@icu_56@@QAE@H@Z ENDP			; icu_56::FieldPosition::FieldPosition
_TEXT	ENDS
PUBLIC	??0FieldPosition@icu_56@@QAE@ABV01@@Z		; icu_56::FieldPosition::FieldPosition
EXTRN	__imp_??0UObject@icu_56@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0FieldPosition@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_copy$ = 8						; size = 4
??0FieldPosition@icu_56@@QAE@ABV01@@Z PROC		; icu_56::FieldPosition::FieldPosition, COMDAT
; _this$ = ecx
; Line 140
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FieldPosition@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0FieldPosition@icu_56@@QAE@ABV01@@Z ENDP		; icu_56::FieldPosition::FieldPosition
_TEXT	ENDS
PUBLIC	?getField@FieldPosition@icu_56@@QBEHXZ		; icu_56::FieldPosition::getField
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getField@FieldPosition@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getField@FieldPosition@icu_56@@QBEHXZ PROC		; icu_56::FieldPosition::getField, COMDAT
; _this$ = ecx
; Line 190
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getField@FieldPosition@icu_56@@QBEHXZ ENDP		; icu_56::FieldPosition::getField
_TEXT	ENDS
PUBLIC	?getBeginIndex@FieldPosition@icu_56@@QBEHXZ	; icu_56::FieldPosition::getBeginIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getBeginIndex@FieldPosition@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getBeginIndex@FieldPosition@icu_56@@QBEHXZ PROC	; icu_56::FieldPosition::getBeginIndex, COMDAT
; _this$ = ecx
; Line 197
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getBeginIndex@FieldPosition@icu_56@@QBEHXZ ENDP	; icu_56::FieldPosition::getBeginIndex
_TEXT	ENDS
PUBLIC	?getEndIndex@FieldPosition@icu_56@@QBEHXZ	; icu_56::FieldPosition::getEndIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getEndIndex@FieldPosition@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getEndIndex@FieldPosition@icu_56@@QBEHXZ PROC		; icu_56::FieldPosition::getEndIndex, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getEndIndex@FieldPosition@icu_56@@QBEHXZ ENDP		; icu_56::FieldPosition::getEndIndex
_TEXT	ENDS
PUBLIC	?setField@FieldPosition@icu_56@@QAEXH@Z		; icu_56::FieldPosition::setField
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setField@FieldPosition@icu_56@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_f$ = 8							; size = 4
?setField@FieldPosition@icu_56@@QAEXH@Z PROC		; icu_56::FieldPosition::setField, COMDAT
; _this$ = ecx
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+4], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?setField@FieldPosition@icu_56@@QAEXH@Z ENDP		; icu_56::FieldPosition::setField
_TEXT	ENDS
PUBLIC	?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z	; icu_56::FieldPosition::setBeginIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bi$ = 8						; size = 4
?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z PROC	; icu_56::FieldPosition::setBeginIndex, COMDAT
; _this$ = ecx
; Line 220
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bi$[ebp]
	mov	DWORD PTR [eax+8], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z ENDP	; icu_56::FieldPosition::setBeginIndex
_TEXT	ENDS
PUBLIC	?setEndIndex@FieldPosition@icu_56@@QAEXH@Z	; icu_56::FieldPosition::setEndIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setEndIndex@FieldPosition@icu_56@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ei$ = 8						; size = 4
?setEndIndex@FieldPosition@icu_56@@QAEXH@Z PROC		; icu_56::FieldPosition::setEndIndex, COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ei$[ebp]
	mov	DWORD PTR [eax+12], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?setEndIndex@FieldPosition@icu_56@@QAEXH@Z ENDP		; icu_56::FieldPosition::setEndIndex
_TEXT	ENDS
PUBLIC	??_GFieldPosition@icu_56@@UAEPAXI@Z		; icu_56::FieldPosition::`scalar deleting destructor'
EXTRN	__imp_??3UMemory@icu_56@@SAXPAX@Z:PROC
EXTRN	??1FieldPosition@icu_56@@UAE@XZ:PROC		; icu_56::FieldPosition::~FieldPosition
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GFieldPosition@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GFieldPosition@icu_56@@UAEPAXI@Z PROC		; icu_56::FieldPosition::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FieldPosition@icu_56@@UAE@XZ		; icu_56::FieldPosition::~FieldPosition
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFieldPosition@icu_56@@UAEPAXI@Z ENDP		; icu_56::FieldPosition::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??_VUMemory@icu_56@@SAXPAX@Z:PROC
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EFieldPosition@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EFieldPosition@icu_56@@UAEPAXI@Z PROC		; icu_56::FieldPosition::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1FieldPosition@icu_56@@UAE@XZ	; icu_56::FieldPosition::~FieldPosition
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp_??_VUMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FieldPosition@icu_56@@UAE@XZ		; icu_56::FieldPosition::~FieldPosition
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFieldPosition@icu_56@@UAEPAXI@Z ENDP		; icu_56::FieldPosition::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::FieldPosition::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_copy$ = 8						; size = 4
??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::FieldPosition::operator=, COMDAT
; _this$ = ecx
; Line 265
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 266
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 267
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
; Line 268
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 269
	mov	eax, DWORD PTR _this$[ebp]
; Line 270
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::FieldPosition::operator=
_TEXT	ENDS
PUBLIC	??8FieldPosition@icu_56@@QBECABV01@@Z		; icu_56::FieldPosition::operator==
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??8FieldPosition@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
tv73 = -205						; size = 1
_this$ = -8						; size = 4
_copy$ = 8						; size = 4
??8FieldPosition@icu_56@@QBECABV01@@Z PROC		; icu_56::FieldPosition::operator==, COMDAT
; _this$ = ecx
; Line 274
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 277
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv73[ebp]
; Line 278
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8FieldPosition@icu_56@@QBECABV01@@Z ENDP		; icu_56::FieldPosition::operator==
_TEXT	ENDS
PUBLIC	??9FieldPosition@icu_56@@QBECABV01@@Z		; icu_56::FieldPosition::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9FieldPosition@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_copy$ = 8						; size = 4
??9FieldPosition@icu_56@@QBECABV01@@Z PROC		; icu_56::FieldPosition::operator!=, COMDAT
; _this$ = ecx
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 283
	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8FieldPosition@icu_56@@QBECABV01@@Z	; icu_56::FieldPosition::operator==
	movsx	ecx, al
	test	ecx, ecx
	sete	al
; Line 284
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9FieldPosition@icu_56@@QBECABV01@@Z ENDP		; icu_56::FieldPosition::operator!=
_TEXT	ENDS
PUBLIC	??9FieldPositionIterator@icu_56@@QBECABV01@@Z	; icu_56::FieldPositionIterator::operator!=
EXTRN	??8FieldPositionIterator@icu_56@@QBECABV01@@Z:PROC ; icu_56::FieldPositionIterator::operator==
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9FieldPositionIterator@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
??9FieldPositionIterator@icu_56@@QBECABV01@@Z PROC	; icu_56::FieldPositionIterator::operator!=, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\fpositer.h
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8FieldPositionIterator@icu_56@@QBECABV01@@Z ; icu_56::FieldPositionIterator::operator==
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9FieldPositionIterator@icu_56@@QBECABV01@@Z ENDP	; icu_56::FieldPositionIterator::operator!=
_TEXT	ENDS
PUBLIC	??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z ; icu_56::FieldPositionIterator::operator=
EXTRN	__imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z PROC	; icu_56::FieldPositionIterator::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z ENDP	; icu_56::FieldPositionIterator::operator=
_TEXT	ENDS
PUBLIC	??9Format@icu_56@@QBECABV01@@Z			; icu_56::Format::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9Format@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??9Format@icu_56@@QBECABV01@@Z PROC			; icu_56::Format::operator!=, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\format.h
; Line 119
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9Format@icu_56@@QBECABV01@@Z ENDP			; icu_56::Format::operator!=
_TEXT	ENDS
PUBLIC	?getNumber@Measure@icu_56@@QBEABVFormattable@2@XZ ; icu_56::Measure::getNumber
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getNumber@Measure@icu_56@@QBEABVFormattable@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getNumber@Measure@icu_56@@QBEABVFormattable@2@XZ PROC	; icu_56::Measure::getNumber, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\measure.h
; Line 148
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 149
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
; Line 150
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumber@Measure@icu_56@@QBEABVFormattable@2@XZ ENDP	; icu_56::Measure::getNumber
_TEXT	ENDS
PUBLIC	?getUnit@Measure@icu_56@@QBEABVMeasureUnit@2@XZ	; icu_56::Measure::getUnit
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getUnit@Measure@icu_56@@QBEABVMeasureUnit@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getUnit@Measure@icu_56@@QBEABVMeasureUnit@2@XZ PROC	; icu_56::Measure::getUnit, COMDAT
; _this$ = ecx
; Line 152
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 153
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+232]
; Line 154
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getUnit@Measure@icu_56@@QBEABVMeasureUnit@2@XZ ENDP	; icu_56::Measure::getUnit
_TEXT	ENDS
PUBLIC	??_7MeasureUnit@icu_56@@6B@			; icu_56::MeasureUnit::`vftable'
PUBLIC	??0MeasureUnit@icu_56@@QAE@XZ			; icu_56::MeasureUnit::MeasureUnit
PUBLIC	??_R4MeasureUnit@icu_56@@6B@			; icu_56::MeasureUnit::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMeasureUnit@icu_56@@@8			; icu_56::MeasureUnit `RTTI Type Descriptor'
PUBLIC	??_R3MeasureUnit@icu_56@@8			; icu_56::MeasureUnit::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MeasureUnit@icu_56@@8			; icu_56::MeasureUnit::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MeasureUnit@icu_56@@8		; icu_56::MeasureUnit::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EMeasureUnit@icu_56@@UAEPAXI@Z		; icu_56::MeasureUnit::`vector deleting destructor'
EXTRN	?getDynamicClassID@MeasureUnit@icu_56@@UBEPAXXZ:PROC ; icu_56::MeasureUnit::getDynamicClassID
EXTRN	?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ:PROC ; icu_56::MeasureUnit::clone
EXTRN	??8MeasureUnit@icu_56@@UBECABVUObject@1@@Z:PROC	; icu_56::MeasureUnit::operator==
;	COMDAT ??_R1A@?0A@EA@MeasureUnit@icu_56@@8
; File d:\mozilla\intl\icu\source\i18n\unicode\measunit.h
rdata$r	SEGMENT
??_R1A@?0A@EA@MeasureUnit@icu_56@@8 DD FLAT:??_R0?AVMeasureUnit@icu_56@@@8 ; icu_56::MeasureUnit::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MeasureUnit@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2MeasureUnit@icu_56@@8
rdata$r	SEGMENT
??_R2MeasureUnit@icu_56@@8 DD FLAT:??_R1A@?0A@EA@MeasureUnit@icu_56@@8 ; icu_56::MeasureUnit::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3MeasureUnit@icu_56@@8
rdata$r	SEGMENT
??_R3MeasureUnit@icu_56@@8 DD 00H			; icu_56::MeasureUnit::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2MeasureUnit@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMeasureUnit@icu_56@@@8
_DATA	SEGMENT
??_R0?AVMeasureUnit@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::MeasureUnit `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMeasureUnit@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MeasureUnit@icu_56@@6B@
rdata$r	SEGMENT
??_R4MeasureUnit@icu_56@@6B@ DD 00H			; icu_56::MeasureUnit::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMeasureUnit@icu_56@@@8
	DD	FLAT:??_R3MeasureUnit@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7MeasureUnit@icu_56@@6B@
CONST	SEGMENT
??_7MeasureUnit@icu_56@@6B@ DD FLAT:??_R4MeasureUnit@icu_56@@6B@ ; icu_56::MeasureUnit::`vftable'
	DD	FLAT:??_EMeasureUnit@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@MeasureUnit@icu_56@@UBEPAXXZ
	DD	FLAT:?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ
	DD	FLAT:??8MeasureUnit@icu_56@@UBECABVUObject@1@@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0MeasureUnit@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0MeasureUnit@icu_56@@QAE@XZ PROC			; icu_56::MeasureUnit::MeasureUnit, COMDAT
; _this$ = ecx
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MeasureUnit@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 44
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0MeasureUnit@icu_56@@QAE@XZ ENDP			; icu_56::MeasureUnit::MeasureUnit
_TEXT	ENDS
PUBLIC	??9MeasureUnit@icu_56@@QBECABVUObject@1@@Z	; icu_56::MeasureUnit::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9MeasureUnit@icu_56@@QBECABVUObject@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??9MeasureUnit@icu_56@@QBECABVUObject@1@@Z PROC		; icu_56::MeasureUnit::operator!=, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 85
	mov	esi, esp
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	sete	al
; Line 86
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9MeasureUnit@icu_56@@QBECABVUObject@1@@Z ENDP		; icu_56::MeasureUnit::operator!=
_TEXT	ENDS
PUBLIC	??0MeasureUnit@icu_56@@AAE@HH@Z			; icu_56::MeasureUnit::MeasureUnit
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0MeasureUnit@icu_56@@AAE@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_typeId$ = 8						; size = 4
_subTypeId$ = 12					; size = 4
??0MeasureUnit@icu_56@@AAE@HH@Z PROC			; icu_56::MeasureUnit::MeasureUnit, COMDAT
; _this$ = ecx
; Line 1275
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MeasureUnit@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _typeId$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _subTypeId$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1276
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
; Line 1277
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0MeasureUnit@icu_56@@AAE@HH@Z ENDP			; icu_56::MeasureUnit::MeasureUnit
_TEXT	ENDS
PUBLIC	??_GMeasureUnit@icu_56@@UAEPAXI@Z		; icu_56::MeasureUnit::`scalar deleting destructor'
EXTRN	??1MeasureUnit@icu_56@@UAE@XZ:PROC		; icu_56::MeasureUnit::~MeasureUnit
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GMeasureUnit@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GMeasureUnit@icu_56@@UAEPAXI@Z PROC			; icu_56::MeasureUnit::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MeasureUnit@icu_56@@UAE@XZ		; icu_56::MeasureUnit::~MeasureUnit
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMeasureUnit@icu_56@@UAEPAXI@Z ENDP			; icu_56::MeasureUnit::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_EMeasureUnit@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EMeasureUnit@icu_56@@UAEPAXI@Z PROC			; icu_56::MeasureUnit::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1MeasureUnit@icu_56@@UAE@XZ	; icu_56::MeasureUnit::~MeasureUnit
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp_??_VUMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MeasureUnit@icu_56@@UAE@XZ		; icu_56::MeasureUnit::~MeasureUnit
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EMeasureUnit@icu_56@@UAEPAXI@Z ENDP			; icu_56::MeasureUnit::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getISOCurrency@CurrencyUnit@icu_56@@QBEPB_WXZ	; icu_56::CurrencyUnit::getISOCurrency
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getISOCurrency@CurrencyUnit@icu_56@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getISOCurrency@CurrencyUnit@icu_56@@QBEPB_WXZ PROC	; icu_56::CurrencyUnit::getISOCurrency, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\currunit.h
; Line 103
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
; Line 105
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getISOCurrency@CurrencyUnit@icu_56@@QBEPB_WXZ ENDP	; icu_56::CurrencyUnit::getISOCurrency
_TEXT	ENDS
PUBLIC	?getCurrency@CurrencyAmount@icu_56@@QBEABVCurrencyUnit@2@XZ ; icu_56::CurrencyAmount::getCurrency
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getCurrency@CurrencyAmount@icu_56@@QBEABVCurrencyUnit@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getCurrency@CurrencyAmount@icu_56@@QBEABVCurrencyUnit@2@XZ PROC ; icu_56::CurrencyAmount::getCurrency, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\curramt.h
; Line 119
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 120
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getUnit@Measure@icu_56@@QBEABVMeasureUnit@2@XZ ; icu_56::Measure::getUnit
; Line 121
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getCurrency@CurrencyAmount@icu_56@@QBEABVCurrencyUnit@2@XZ ENDP ; icu_56::CurrencyAmount::getCurrency
_TEXT	ENDS
PUBLIC	?getISOCurrency@CurrencyAmount@icu_56@@QBEPB_WXZ ; icu_56::CurrencyAmount::getISOCurrency
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getISOCurrency@CurrencyAmount@icu_56@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getISOCurrency@CurrencyAmount@icu_56@@QBEPB_WXZ PROC	; icu_56::CurrencyAmount::getISOCurrency, COMDAT
; _this$ = ecx
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 124
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCurrency@CurrencyAmount@icu_56@@QBEABVCurrencyUnit@2@XZ ; icu_56::CurrencyAmount::getCurrency
	mov	ecx, eax
	call	?getISOCurrency@CurrencyUnit@icu_56@@QBEPB_WXZ ; icu_56::CurrencyUnit::getISOCurrency
; Line 125
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getISOCurrency@CurrencyAmount@icu_56@@QBEPB_WXZ ENDP	; icu_56::CurrencyAmount::getISOCurrency
_TEXT	ENDS
PUBLIC	??_7NumberFormatFactory@icu_56@@6B@		; icu_56::NumberFormatFactory::`vftable'
PUBLIC	??0NumberFormatFactory@icu_56@@QAE@XZ		; icu_56::NumberFormatFactory::NumberFormatFactory
PUBLIC	??_R4NumberFormatFactory@icu_56@@6B@		; icu_56::NumberFormatFactory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNumberFormatFactory@icu_56@@@8		; icu_56::NumberFormatFactory `RTTI Type Descriptor'
PUBLIC	??_R3NumberFormatFactory@icu_56@@8		; icu_56::NumberFormatFactory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NumberFormatFactory@icu_56@@8		; icu_56::NumberFormatFactory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NumberFormatFactory@icu_56@@8	; icu_56::NumberFormatFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ENumberFormatFactory@icu_56@@UAEPAXI@Z	; icu_56::NumberFormatFactory::`vector deleting destructor'
EXTRN	?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:PROC ; icu_56::UObject::getDynamicClassID
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@NumberFormatFactory@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NumberFormatFactory@icu_56@@8 DD FLAT:??_R0?AVNumberFormatFactory@icu_56@@@8 ; icu_56::NumberFormatFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NumberFormatFactory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2NumberFormatFactory@icu_56@@8
rdata$r	SEGMENT
??_R2NumberFormatFactory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@NumberFormatFactory@icu_56@@8 ; icu_56::NumberFormatFactory::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3NumberFormatFactory@icu_56@@8
rdata$r	SEGMENT
??_R3NumberFormatFactory@icu_56@@8 DD 00H		; icu_56::NumberFormatFactory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2NumberFormatFactory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNumberFormatFactory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVNumberFormatFactory@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::NumberFormatFactory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNumberFormatFactory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4NumberFormatFactory@icu_56@@6B@
rdata$r	SEGMENT
??_R4NumberFormatFactory@icu_56@@6B@ DD 00H		; icu_56::NumberFormatFactory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNumberFormatFactory@icu_56@@@8
	DD	FLAT:??_R3NumberFormatFactory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7NumberFormatFactory@icu_56@@6B@
CONST	SEGMENT
??_7NumberFormatFactory@icu_56@@6B@ DD FLAT:??_R4NumberFormatFactory@icu_56@@6B@ ; icu_56::NumberFormatFactory::`vftable'
	DD	FLAT:??_ENumberFormatFactory@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0NumberFormatFactory@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0NumberFormatFactory@icu_56@@QAE@XZ PROC		; icu_56::NumberFormatFactory::NumberFormatFactory, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7NumberFormatFactory@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0NumberFormatFactory@icu_56@@QAE@XZ ENDP		; icu_56::NumberFormatFactory::NumberFormatFactory
_TEXT	ENDS
PUBLIC	??0NumberFormatFactory@icu_56@@QAE@ABV01@@Z	; icu_56::NumberFormatFactory::NumberFormatFactory
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0NumberFormatFactory@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0NumberFormatFactory@icu_56@@QAE@ABV01@@Z PROC	; icu_56::NumberFormatFactory::NumberFormatFactory, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UObject@icu_56@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7NumberFormatFactory@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0NumberFormatFactory@icu_56@@QAE@ABV01@@Z ENDP	; icu_56::NumberFormatFactory::NumberFormatFactory
_TEXT	ENDS
PUBLIC	??4NumberFormatFactory@icu_56@@QAEAAV01@ABV01@@Z ; icu_56::NumberFormatFactory::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4NumberFormatFactory@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4NumberFormatFactory@icu_56@@QAEAAV01@ABV01@@Z PROC	; icu_56::NumberFormatFactory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4NumberFormatFactory@icu_56@@QAEAAV01@ABV01@@Z ENDP	; icu_56::NumberFormatFactory::operator=
_TEXT	ENDS
PUBLIC	??_GNumberFormatFactory@icu_56@@UAEPAXI@Z	; icu_56::NumberFormatFactory::`scalar deleting destructor'
EXTRN	??1NumberFormatFactory@icu_56@@UAE@XZ:PROC	; icu_56::NumberFormatFactory::~NumberFormatFactory
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GNumberFormatFactory@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GNumberFormatFactory@icu_56@@UAEPAXI@Z PROC		; icu_56::NumberFormatFactory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1NumberFormatFactory@icu_56@@UAE@XZ	; icu_56::NumberFormatFactory::~NumberFormatFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GNumberFormatFactory@icu_56@@UAEPAXI@Z ENDP		; icu_56::NumberFormatFactory::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_ENumberFormatFactory@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ENumberFormatFactory@icu_56@@UAEPAXI@Z PROC		; icu_56::NumberFormatFactory::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1NumberFormatFactory@icu_56@@UAE@XZ ; icu_56::NumberFormatFactory::~NumberFormatFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@3
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp_??_VUMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1NumberFormatFactory@icu_56@@UAE@XZ	; icu_56::NumberFormatFactory::~NumberFormatFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ENumberFormatFactory@icu_56@@UAEPAXI@Z ENDP		; icu_56::NumberFormatFactory::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7SimpleNumberFormatFactory@icu_56@@6B@	; icu_56::SimpleNumberFormatFactory::`vftable'
PUBLIC	??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z ; icu_56::SimpleNumberFormatFactory::SimpleNumberFormatFactory
PUBLIC	??_R4SimpleNumberFormatFactory@icu_56@@6B@	; icu_56::SimpleNumberFormatFactory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSimpleNumberFormatFactory@icu_56@@@8	; icu_56::SimpleNumberFormatFactory `RTTI Type Descriptor'
PUBLIC	??_R3SimpleNumberFormatFactory@icu_56@@8	; icu_56::SimpleNumberFormatFactory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimpleNumberFormatFactory@icu_56@@8	; icu_56::SimpleNumberFormatFactory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimpleNumberFormatFactory@icu_56@@8 ; icu_56::SimpleNumberFormatFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_ESimpleNumberFormatFactory@icu_56@@UAEPAXI@Z	; icu_56::SimpleNumberFormatFactory::`vector deleting destructor'
EXTRN	?visible@SimpleNumberFormatFactory@icu_56@@UBECXZ:PROC ; icu_56::SimpleNumberFormatFactory::visible
EXTRN	?getSupportedIDs@SimpleNumberFormatFactory@icu_56@@UBEPBVUnicodeString@2@AAHAAW4UErrorCode@@@Z:PROC ; icu_56::SimpleNumberFormatFactory::getSupportedIDs
;	COMDAT ??_R1A@?0A@EA@SimpleNumberFormatFactory@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimpleNumberFormatFactory@icu_56@@8 DD FLAT:??_R0?AVSimpleNumberFormatFactory@icu_56@@@8 ; icu_56::SimpleNumberFormatFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimpleNumberFormatFactory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2SimpleNumberFormatFactory@icu_56@@8
rdata$r	SEGMENT
??_R2SimpleNumberFormatFactory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@SimpleNumberFormatFactory@icu_56@@8 ; icu_56::SimpleNumberFormatFactory::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NumberFormatFactory@icu_56@@8
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3SimpleNumberFormatFactory@icu_56@@8
rdata$r	SEGMENT
??_R3SimpleNumberFormatFactory@icu_56@@8 DD 00H		; icu_56::SimpleNumberFormatFactory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2SimpleNumberFormatFactory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimpleNumberFormatFactory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVSimpleNumberFormatFactory@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::SimpleNumberFormatFactory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimpleNumberFormatFactory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SimpleNumberFormatFactory@icu_56@@6B@
rdata$r	SEGMENT
??_R4SimpleNumberFormatFactory@icu_56@@6B@ DD 00H	; icu_56::SimpleNumberFormatFactory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSimpleNumberFormatFactory@icu_56@@@8
	DD	FLAT:??_R3SimpleNumberFormatFactory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7SimpleNumberFormatFactory@icu_56@@6B@
CONST	SEGMENT
??_7SimpleNumberFormatFactory@icu_56@@6B@ DD FLAT:??_R4SimpleNumberFormatFactory@icu_56@@6B@ ; icu_56::SimpleNumberFormatFactory::`vftable'
	DD	FLAT:??_ESimpleNumberFormatFactory@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
	DD	FLAT:?visible@SimpleNumberFormatFactory@icu_56@@UBECXZ
	DD	FLAT:?getSupportedIDs@SimpleNumberFormatFactory@icu_56@@UBEPBVUnicodeString@2@AAHAAW4UErrorCode@@@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z$0
__ehfuncinfo$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z PROC	; icu_56::SimpleNumberFormatFactory::SimpleNumberFormatFactory, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0NumberFormatFactory@icu_56@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SimpleNumberFormatFactory@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1NumberFormatFactory@icu_56@@UAE@XZ	; icu_56::NumberFormatFactory::~NumberFormatFactory
__ehhandler$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z ENDP	; icu_56::SimpleNumberFormatFactory::SimpleNumberFormatFactory
PUBLIC	??_GSimpleNumberFormatFactory@icu_56@@UAEPAXI@Z	; icu_56::SimpleNumberFormatFactory::`scalar deleting destructor'
EXTRN	??1SimpleNumberFormatFactory@icu_56@@UAE@XZ:PROC ; icu_56::SimpleNumberFormatFactory::~SimpleNumberFormatFactory
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GSimpleNumberFormatFactory@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GSimpleNumberFormatFactory@icu_56@@UAEPAXI@Z PROC	; icu_56::SimpleNumberFormatFactory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SimpleNumberFormatFactory@icu_56@@UAE@XZ ; icu_56::SimpleNumberFormatFactory::~SimpleNumberFormatFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSimpleNumberFormatFactory@icu_56@@UAEPAXI@Z ENDP	; icu_56::SimpleNumberFormatFactory::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_ESimpleNumberFormatFactory@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ESimpleNumberFormatFactory@icu_56@@UAEPAXI@Z PROC	; icu_56::SimpleNumberFormatFactory::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1SimpleNumberFormatFactory@icu_56@@UAE@XZ ; icu_56::SimpleNumberFormatFactory::~SimpleNumberFormatFactory
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	72					; 00000048H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@4
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp_??_VUMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SimpleNumberFormatFactory@icu_56@@UAE@XZ ; icu_56::SimpleNumberFormatFactory::~SimpleNumberFormatFactory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ESimpleNumberFormatFactory@icu_56@@UAEPAXI@Z ENDP	; icu_56::SimpleNumberFormatFactory::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?isParseIntegerOnly@NumberFormat@icu_56@@QBECXZ	; icu_56::NumberFormat::isParseIntegerOnly
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isParseIntegerOnly@NumberFormat@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isParseIntegerOnly@NumberFormat@icu_56@@QBECXZ PROC	; icu_56::NumberFormat::isParseIntegerOnly, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\numfmt.h
; Line 1170
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1171
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+340]
; Line 1172
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isParseIntegerOnly@NumberFormat@icu_56@@QBECXZ ENDP	; icu_56::NumberFormat::isParseIntegerOnly
_TEXT	ENDS
PUBLIC	?isLenient@NumberFormat@icu_56@@UBECXZ		; icu_56::NumberFormat::isLenient
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isLenient@NumberFormat@icu_56@@UBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isLenient@NumberFormat@icu_56@@UBECXZ PROC		; icu_56::NumberFormat::isLenient, COMDAT
; _this$ = ecx
; Line 1176
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1177
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+341]
; Line 1178
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isLenient@NumberFormat@icu_56@@UBECXZ ENDP		; icu_56::NumberFormat::isLenient
_TEXT	ENDS
PUBLIC	?isLenient@RuleBasedNumberFormat@icu_56@@UBECXZ	; icu_56::RuleBasedNumberFormat::isLenient
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isLenient@RuleBasedNumberFormat@icu_56@@UBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isLenient@RuleBasedNumberFormat@icu_56@@UBECXZ PROC	; icu_56::RuleBasedNumberFormat::isLenient, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\unicode\rbnf.h
; Line 1053
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1054
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+592]
; Line 1055
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isLenient@RuleBasedNumberFormat@icu_56@@UBECXZ ENDP	; icu_56::RuleBasedNumberFormat::isLenient
_TEXT	ENDS
PUBLIC	?getDefaultRuleSet@RuleBasedNumberFormat@icu_56@@ABEPAVNFRuleSet@2@XZ ; icu_56::RuleBasedNumberFormat::getDefaultRuleSet
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getDefaultRuleSet@RuleBasedNumberFormat@icu_56@@ABEPAVNFRuleSet@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getDefaultRuleSet@RuleBasedNumberFormat@icu_56@@ABEPAVNFRuleSet@2@XZ PROC ; icu_56::RuleBasedNumberFormat::getDefaultRuleSet, COMDAT
; _this$ = ecx
; Line 1060
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1061
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+368]
; Line 1062
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getDefaultRuleSet@RuleBasedNumberFormat@icu_56@@ABEPAVNFRuleSet@2@XZ ENDP ; icu_56::RuleBasedNumberFormat::getDefaultRuleSet
_TEXT	ENDS
PUBLIC	??1NFRuleList@icu_56@@QAE@XZ			; icu_56::NFRuleList::~NFRuleList
PUBLIC	??_C@_1BC@ECMHAIJJ@?$AA?$CF?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@ ; `string'
PUBLIC	??0NFRuleList@icu_56@@QAE@I@Z			; icu_56::NFRuleList::NFRuleList
PUBLIC	__$ArrayPad$
PUBLIC	??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z ; icu_56::NFRuleSet::NFRuleSet
EXTRN	__imp_?truncate@UnicodeString@icu_56@@QAECH@Z:PROC
EXTRN	__imp_?endsWith@UnicodeString@icu_56@@QBECPB_WH@Z:PROC
EXTRN	__imp_?indexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z:PROC
EXTRN	__imp_?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z:PROC
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z:PROC
EXTRN	__imp_?remove@UnicodeString@icu_56@@QAEAAV12@HH@Z:PROC
EXTRN	__imp_?isWhiteSpace@PatternProps@icu_56@@SACH@Z:PROC
EXTRN	__imp_?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z:PROC
EXTRN	__imp_?indexOf@UnicodeString@icu_56@@QBEH_W@Z:PROC
EXTRN	__imp_?charAt@UnicodeString@icu_56@@QBE_WH@Z:PROC
EXTRN	__imp_?length@UnicodeString@icu_56@@QBEHXZ:PROC
EXTRN	__imp_??0UnicodeString@icu_56@@QAE@XZ:PROC
;	COMDAT ??_C@_1BC@ECMHAIJJ@?$AA?$CF?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@
; File d:\mozilla\intl\icu\source\i18n\nfrs.cpp
CONST	SEGMENT
??_C@_1BC@ECMHAIJJ@?$AA?$CF?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@ DB '%'
	DB	00H, 'd', 00H, 'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z$3
__ehfuncinfo$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv195 = -336						; size = 4
tv197 = -332						; size = 4
$T39194 = -324						; size = 64
_pos$39186 = -60					; size = 4
_description$ = -48					; size = 4
_i$39178 = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__owner$ = 8						; size = 4
_descriptions$ = 12					; size = 4
_index$ = 16						; size = 4
_status$ = 20						; size = 4
??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z PROC ; icu_56::NFRuleSet::NFRuleSet, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0NFRuleList@icu_56@@QAE@I@Z		; icu_56::NFRuleList::NFRuleList
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __owner$[ebp]
	mov	DWORD PTR [eax+100], ecx
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??0NFRuleList@icu_56@@QAE@I@Z		; icu_56::NFRuleList::NFRuleList
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+116], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+117], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+118], 1
; Line 142
	mov	DWORD PTR _i$39178[ebp], 0
	jmp	SHORT $LN13@NFRuleSet
$LN12@NFRuleSet:
	mov	eax, DWORD PTR _i$39178[ebp]
	add	eax, 1
	mov	DWORD PTR _i$39178[ebp], eax
$LN13@NFRuleSet:
	cmp	DWORD PTR _i$39178[ebp], 6
	jge	SHORT $LN11@NFRuleSet
; Line 143
	mov	eax, DWORD PTR _i$39178[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+76], 0
; Line 144
	jmp	SHORT $LN12@NFRuleSet
$LN11@NFRuleSet:
; Line 146
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN10@NFRuleSet
; Line 147
	jmp	$LN14@NFRuleSet
$LN10@NFRuleSet:
; Line 150
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _descriptions$[ebp]
	mov	DWORD PTR _description$[ebp], eax
; Line 152
	mov	esi, esp
	mov	ecx, DWORD PTR _description$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN9@NFRuleSet
; Line 154
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 9
; Line 155
	jmp	$LN14@NFRuleSet
$LN9@NFRuleSet:
; Line 162
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _description$[ebp]
	call	DWORD PTR __imp_?charAt@UnicodeString@icu_56@@QBE_WH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, ax
	cmp	eax, 37					; 00000025H
	jne	$LN8@NFRuleSet
; Line 163
	mov	esi, esp
	push	58					; 0000003aH
	mov	ecx, DWORD PTR _description$[ebp]
	call	DWORD PTR __imp_?indexOf@UnicodeString@icu_56@@QBEH_W@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pos$39186[ebp], eax
; Line 164
	cmp	DWORD PTR _pos$39186[ebp], -1
	jne	SHORT $LN7@NFRuleSet
; Line 166
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 9
; Line 167
	jmp	$LN6@NFRuleSet
$LN7@NFRuleSet:
; Line 168
	mov	esi, esp
	mov	eax, DWORD PTR _pos$39186[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _description$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@NFRuleSet:
; Line 169
	mov	esi, esp
	mov	ecx, DWORD PTR _description$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _pos$39186[ebp], eax
	jge	SHORT $LN4@NFRuleSet
	mov	eax, DWORD PTR _pos$39186[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$39186[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _pos$39186[ebp]
	push	ecx
	mov	ecx, DWORD PTR _description$[ebp]
	call	DWORD PTR __imp_?charAt@UnicodeString@icu_56@@QBE_WH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, ax
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp_?isWhiteSpace@PatternProps@icu_56@@SACH@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN4@NFRuleSet
; Line 170
	jmp	SHORT $LN5@NFRuleSet
$LN4@NFRuleSet:
; Line 171
	mov	esi, esp
	mov	eax, DWORD PTR _pos$39186[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _description$[ebp]
	call	DWORD PTR __imp_?remove@UnicodeString@icu_56@@QAEAAV12@HH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@NFRuleSet:
; Line 173
	jmp	SHORT $LN3@NFRuleSet
$LN8@NFRuleSet:
; Line 174
	mov	esi, esp
	push	-1
	push	OFFSET ??_C@_1BC@ECMHAIJJ@?$AA?$CF?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@
	push	1
	lea	ecx, DWORD PTR $T39194[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv197[ebp], eax
	mov	eax, DWORD PTR tv197[ebp]
	mov	DWORD PTR tv195[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	esi, esp
	mov	ecx, DWORD PTR tv195[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	esi, esp
	lea	ecx, DWORD PTR $T39194[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@NFRuleSet:
; Line 177
	mov	esi, esp
	mov	ecx, DWORD PTR _description$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@NFRuleSet
; Line 179
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 9
$LN2@NFRuleSet:
; Line 182
	mov	esi, esp
	push	0
	push	2
	push	OFFSET _gPercentPercent
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?indexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	setne	al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+117], al
; Line 184
	mov	esi, esp
	push	8
	push	OFFSET _gNoparse
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?endsWith@UnicodeString@icu_56@@QBECPB_WH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN14@NFRuleSet
; Line 185
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+118], 0
; Line 186
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 8
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?truncate@UnicodeString@icu_56@@QAECH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@NFRuleSet:
; Line 191
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1NFRuleList@icu_56@@QAE@XZ		; icu_56::NFRuleList::~NFRuleList
__unwindfunclet$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	jmp	??1NFRuleList@icu_56@@QAE@XZ		; icu_56::NFRuleList::~NFRuleList
__unwindfunclet$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z$3:
	mov	esi, esp
	lea	ecx, DWORD PTR $T39194[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-340]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0NFRuleSet@icu_56@@QAE@PAVRuleBasedNumberFormat@1@PAVUnicodeString@1@HAAW4UErrorCode@@@Z ENDP ; icu_56::NFRuleSet::NFRuleSet
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\include\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
EXTRN	_uprv_malloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0NFRuleList@icu_56@@QAE@I@Z
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
_capacity$ = 8						; size = 4
??0NFRuleList@icu_56@@QAE@I@Z PROC			; icu_56::NFRuleList::NFRuleList, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\nfrlist.h
; Line 42
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _capacity$[ebp], 0
	je	SHORT $LN3@NFRuleList
	mov	eax, DWORD PTR _capacity$[ebp]
	shl	eax, 2
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@NFRuleList
$LN3@NFRuleList:
	mov	DWORD PTR tv68[ebp], 0
$LN4@NFRuleList:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _capacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0NFRuleList@icu_56@@QAE@I@Z ENDP			; icu_56::NFRuleList::NFRuleList
_TEXT	ENDS
PUBLIC	??_GNFRule@icu_56@@QAEPAXI@Z			; icu_56::NFRule::`scalar deleting destructor'
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1NFRuleList@icu_56@@QAE@XZ
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T46509 = -236						; size = 4
$T46510 = -224						; size = 4
_i$38963 = -20						; size = 4
_this$ = -8						; size = 4
??1NFRuleList@icu_56@@QAE@XZ PROC			; icu_56::NFRuleList::~NFRuleList, COMDAT
; _this$ = ecx
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 44
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@NFRuleList@2
; Line 45
	mov	DWORD PTR _i$38963[ebp], 0
	jmp	SHORT $LN3@NFRuleList@2
$LN2@NFRuleList@2:
	mov	eax, DWORD PTR _i$38963[ebp]
	add	eax, 1
	mov	DWORD PTR _i$38963[ebp], eax
$LN3@NFRuleList@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$38963[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN1@NFRuleList@2
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$38963[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T46510[ebp], eax
	mov	ecx, DWORD PTR $T46510[ebp]
	mov	DWORD PTR $T46509[ebp], ecx
	cmp	DWORD PTR $T46509[ebp], 0
	je	SHORT $LN7@NFRuleList@2
	push	1
	mov	ecx, DWORD PTR $T46509[ebp]
	call	??_GNFRule@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN8@NFRuleList@2
$LN7@NFRuleList@2:
	mov	DWORD PTR tv74[ebp], 0
$LN8@NFRuleList@2:
; Line 47
	jmp	SHORT $LN2@NFRuleList@2
$LN1@NFRuleList@2:
; Line 48
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN5@NFRuleList@2:
; Line 50
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1NFRuleList@icu_56@@QAE@XZ ENDP			; icu_56::NFRuleList::~NFRuleList
_TEXT	ENDS
EXTRN	??1NFRule@icu_56@@QAE@XZ:PROC			; icu_56::NFRule::~NFRule
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GNFRule@icu_56@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GNFRule@icu_56@@QAEPAXI@Z PROC			; icu_56::NFRule::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1NFRule@icu_56@@QAE@XZ		; icu_56::NFRule::~NFRule
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp_??3UMemory@icu_56@@SAXPAX@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GNFRule@icu_56@@QAEPAXI@Z ENDP			; icu_56::NFRule::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?getBaseValue@NFRule@icu_56@@QBE_JXZ		; icu_56::NFRule::getBaseValue
PUBLIC	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z	; icu_56::NFRuleList::operator[]
PUBLIC	?size@NFRuleList@icu_56@@QBEIXZ			; icu_56::NFRuleList::size
PUBLIC	?last@NFRuleList@icu_56@@QBEPAVNFRule@2@XZ	; icu_56::NFRuleList::last
PUBLIC	?deleteAll@NFRuleList@icu_56@@QAEXXZ		; icu_56::NFRuleList::deleteAll
PUBLIC	__$ArrayPad$
PUBLIC	?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z ; icu_56::NFRuleSet::parseRules
EXTRN	?setBaseValue@NFRule@icu_56@@QAEX_JAAW4UErrorCode@@@Z:PROC ; icu_56::NFRule::setBaseValue
EXTRN	?makeRules@NFRule@icu_56@@SAXAAVUnicodeString@2@PAVNFRuleSet@2@PBV12@PBVRuleBasedNumberFormat@2@AAVNFRuleList@2@AAW4UErrorCode@@@Z:PROC ; icu_56::NFRule::makeRules
EXTRN	__imp_?indexOf@UnicodeString@icu_56@@QBEH_WH@Z:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT xdata$x
; File d:\mozilla\intl\icu\source\i18n\nfrs.cpp
xdata$x	SEGMENT
__unwindtable$?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z$0
__ehfuncinfo$?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_baseValue$39218 = -188					; size = 8
_rule$39217 = -172					; size = 4
_i$39213 = -160						; size = 4
_rulesSize$ = -148					; size = 4
_defaultBaseValue$ = -136				; size = 8
_p$39209 = -120						; size = 4
_oldP$ = -108						; size = 4
_currentDescription$ = -96				; size = 64
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_description$ = 8					; size = 4
_status$ = 12						; size = 4
?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z PROC ; icu_56::NFRuleSet::parseRules, COMDAT
; _this$ = ecx
; Line 195
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 201
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN11@parseRules
; Line 202
	jmp	$LN12@parseRules
$LN11@parseRules:
; Line 206
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?deleteAll@NFRuleList@icu_56@@QAEXXZ	; icu_56::NFRuleList::deleteAll
; Line 211
	mov	esi, esp
	lea	ecx, DWORD PTR _currentDescription$[ebp]
	call	DWORD PTR __imp_??0UnicodeString@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 212
	mov	DWORD PTR _oldP$[ebp], 0
$LN10@parseRules:
; Line 213
	mov	esi, esp
	mov	ecx, DWORD PTR _description$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _oldP$[ebp], eax
	jge	$LN9@parseRules
; Line 214
	mov	esi, esp
	mov	eax, DWORD PTR _oldP$[ebp]
	push	eax
	push	59					; 0000003bH
	mov	ecx, DWORD PTR _description$[ebp]
	call	DWORD PTR __imp_?indexOf@UnicodeString@icu_56@@QBEH_WH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$39209[ebp], eax
; Line 215
	cmp	DWORD PTR _p$39209[ebp], -1
	jne	SHORT $LN8@parseRules
; Line 216
	mov	esi, esp
	mov	ecx, DWORD PTR _description$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$39209[ebp], eax
$LN8@parseRules:
; Line 218
	mov	eax, DWORD PTR _p$39209[ebp]
	sub	eax, DWORD PTR _oldP$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _oldP$[ebp]
	push	ecx
	mov	edx, DWORD PTR _description$[ebp]
	push	edx
	lea	ecx, DWORD PTR _currentDescription$[ebp]
	call	DWORD PTR __imp_?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 219
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?last@NFRuleList@icu_56@@QBEPAVNFRule@2@XZ ; icu_56::NFRuleList::last
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR _currentDescription$[ebp]
	push	edx
	call	?makeRules@NFRule@icu_56@@SAXAAVUnicodeString@2@PAVNFRuleSet@2@PBV12@PBVRuleBasedNumberFormat@2@AAVNFRuleList@2@AAW4UErrorCode@@@Z ; icu_56::NFRule::makeRules
	add	esp, 24					; 00000018H
; Line 220
	mov	eax, DWORD PTR _p$39209[ebp]
	add	eax, 1
	mov	DWORD PTR _oldP$[ebp], eax
; Line 221
	jmp	$LN10@parseRules
$LN9@parseRules:
; Line 227
	mov	DWORD PTR _defaultBaseValue$[ebp], 0
	mov	DWORD PTR _defaultBaseValue$[ebp+4], 0
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	mov	DWORD PTR _rulesSize$[ebp], eax
; Line 233
	mov	DWORD PTR _i$39213[ebp], 0
	jmp	SHORT $LN7@parseRules
$LN6@parseRules:
	mov	eax, DWORD PTR _i$39213[ebp]
	add	eax, 1
	mov	DWORD PTR _i$39213[ebp], eax
$LN7@parseRules:
	mov	eax, DWORD PTR _i$39213[ebp]
	cmp	eax, DWORD PTR _rulesSize$[ebp]
	jge	$LN5@parseRules
; Line 234
	mov	eax, DWORD PTR _i$39213[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	DWORD PTR _rule$39217[ebp], eax
; Line 235
	mov	ecx, DWORD PTR _rule$39217[ebp]
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR _baseValue$39218[ebp], eax
	mov	DWORD PTR _baseValue$39218[ebp+4], edx
; Line 237
	mov	eax, DWORD PTR _baseValue$39218[ebp]
	or	eax, DWORD PTR _baseValue$39218[ebp+4]
	jne	SHORT $LN4@parseRules
; Line 243
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _defaultBaseValue$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _defaultBaseValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _rule$39217[ebp]
	call	?setBaseValue@NFRule@icu_56@@QAEX_JAAW4UErrorCode@@@Z ; icu_56::NFRule::setBaseValue
; Line 245
	jmp	SHORT $LN3@parseRules
$LN4@parseRules:
; Line 249
	mov	eax, DWORD PTR _baseValue$39218[ebp+4]
	cmp	eax, DWORD PTR _defaultBaseValue$[ebp+4]
	jg	SHORT $LN2@parseRules
	jl	SHORT $LN15@parseRules
	mov	ecx, DWORD PTR _baseValue$39218[ebp]
	cmp	ecx, DWORD PTR _defaultBaseValue$[ebp]
	jae	SHORT $LN2@parseRules
$LN15@parseRules:
; Line 251
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 9
; Line 252
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _currentDescription$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN12@parseRules
$LN2@parseRules:
; Line 254
	mov	eax, DWORD PTR _baseValue$39218[ebp]
	mov	DWORD PTR _defaultBaseValue$[ebp], eax
	mov	ecx, DWORD PTR _baseValue$39218[ebp+4]
	mov	DWORD PTR _defaultBaseValue$[ebp+4], ecx
$LN3@parseRules:
; Line 256
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	jne	SHORT $LN1@parseRules
; Line 257
	mov	eax, DWORD PTR _defaultBaseValue$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _defaultBaseValue$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _defaultBaseValue$[ebp], eax
	mov	DWORD PTR _defaultBaseValue$[ebp+4], ecx
$LN1@parseRules:
; Line 259
	jmp	$LN6@parseRules
$LN5@parseRules:
; Line 260
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _currentDescription$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@parseRules:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@parseRules
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN19@parseRules:
	DD	1
	DD	$LN18@parseRules
$LN18@parseRules:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN16@parseRules
$LN16@parseRules:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR _currentDescription$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-388]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?parseRules@NFRuleSet@icu_56@@QAEXAAVUnicodeString@2@AAW4UErrorCode@@@Z ENDP ; icu_56::NFRuleSet::parseRules
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getBaseValue@NFRule@icu_56@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getBaseValue@NFRule@icu_56@@QBE_JXZ PROC		; icu_56::NFRule::getBaseValue, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\nfrule.h
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getBaseValue@NFRule@icu_56@@QBE_JXZ ENDP		; icu_56::NFRule::getBaseValue
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z
_TEXT	SEGMENT
tv67 = -208						; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z PROC		; icu_56::NFRuleList::operator[], COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\nfrlist.h
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv67[ebp], ecx
	jmp	SHORT $LN4@operator@2
$LN3@operator@2:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator@2:
	mov	eax, DWORD PTR tv67[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ENDP		; icu_56::NFRuleList::operator[]
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?size@NFRuleList@icu_56@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@NFRuleList@icu_56@@QBEIXZ PROC			; icu_56::NFRuleList::size, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@NFRuleList@icu_56@@QBEIXZ ENDP			; icu_56::NFRuleList::size
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?last@NFRuleList@icu_56@@QBEPAVNFRule@2@XZ
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
?last@NFRuleList@icu_56@@QBEPAVNFRule@2@XZ PROC		; icu_56::NFRuleList::last, COMDAT
; _this$ = ecx
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jbe	SHORT $LN3@last
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@last
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax*4-4]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@last
$LN3@last:
	mov	DWORD PTR tv71[ebp], 0
$LN4@last:
	mov	eax, DWORD PTR tv71[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?last@NFRuleList@icu_56@@QBEPAVNFRule@2@XZ ENDP		; icu_56::NFRuleList::last
_TEXT	ENDS
PUBLIC	?release@NFRuleList@icu_56@@QAEPAPAVNFRule@2@XZ	; icu_56::NFRuleList::release
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?deleteAll@NFRuleList@icu_56@@QAEXXZ
_TEXT	SEGMENT
tv76 = -268						; size = 4
$T46544 = -260						; size = 4
$T46545 = -248						; size = 4
_i$38998 = -44						; size = 4
_size$ = -32						; size = 4
_tmp$ = -20						; size = 4
_this$ = -8						; size = 4
?deleteAll@NFRuleList@icu_56@@QAEXXZ PROC		; icu_56::NFRuleList::deleteAll, COMDAT
; _this$ = ecx
; Line 85
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	mov	DWORD PTR _tmp$[ebp], 0
; Line 87
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _size$[ebp], ecx
; Line 88
	cmp	DWORD PTR _size$[ebp], 0
	jle	SHORT $LN6@deleteAll
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	call	?release@NFRuleList@icu_56@@QAEPAPAVNFRule@2@XZ ; icu_56::NFRuleList::release
	mov	DWORD PTR _tmp$[ebp], eax
; Line 90
	mov	DWORD PTR _i$38998[ebp], 0
	jmp	SHORT $LN4@deleteAll
$LN3@deleteAll:
	mov	eax, DWORD PTR _i$38998[ebp]
	add	eax, 1
	mov	DWORD PTR _i$38998[ebp], eax
$LN4@deleteAll:
	mov	eax, DWORD PTR _i$38998[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN2@deleteAll
; Line 91
	mov	eax, DWORD PTR _i$38998[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T46545[ebp], edx
	mov	eax, DWORD PTR $T46545[ebp]
	mov	DWORD PTR $T46544[ebp], eax
	cmp	DWORD PTR $T46544[ebp], 0
	je	SHORT $LN8@deleteAll
	push	1
	mov	ecx, DWORD PTR $T46544[ebp]
	call	??_GNFRule@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN9@deleteAll
$LN8@deleteAll:
	mov	DWORD PTR tv76[ebp], 0
$LN9@deleteAll:
; Line 92
	jmp	SHORT $LN3@deleteAll
$LN2@deleteAll:
; Line 93
	cmp	DWORD PTR _tmp$[ebp], 0
	je	SHORT $LN6@deleteAll
; Line 94
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN6@deleteAll:
; Line 97
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deleteAll@NFRuleList@icu_56@@QAEXXZ ENDP		; icu_56::NFRuleList::deleteAll
_TEXT	ENDS
PUBLIC	?add@NFRuleList@icu_56@@QAEXPAVNFRule@2@@Z	; icu_56::NFRuleList::add
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?release@NFRuleList@icu_56@@QAEPAPAVNFRule@2@XZ
_TEXT	SEGMENT
_result$ = -20						; size = 4
_this$ = -8						; size = 4
?release@NFRuleList@icu_56@@QAEPAPAVNFRule@2@XZ PROC	; icu_56::NFRuleList::release, COMDAT
; _this$ = ecx
; Line 77
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 78
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?add@NFRuleList@icu_56@@QAEXPAVNFRule@2@@Z ; icu_56::NFRuleList::add
; Line 79
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _result$[ebp], ecx
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 81
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 82
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 83
	mov	eax, DWORD PTR _result$[ebp]
; Line 84
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?release@NFRuleList@icu_56@@QAEPAPAVNFRule@2@XZ ENDP	; icu_56::NFRuleList::release
_TEXT	ENDS
EXTRN	_uprv_realloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?add@NFRuleList@icu_56@@QAEXPAVNFRule@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_thing$ = 8						; size = 4
?add@NFRuleList@icu_56@@QAEXPAVNFRule@2@@Z PROC		; icu_56::NFRuleList::add, COMDAT
; _this$ = ecx
; Line 63
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 64
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@add
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 66
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_uprv_realloc_56
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN3@add:
; Line 68
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@add
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _thing$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 70
	jmp	SHORT $LN4@add
$LN2@add:
; Line 71
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN4@add:
; Line 74
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?add@NFRuleList@icu_56@@QAEXPAVNFRule@2@@Z ENDP		; icu_56::NFRuleList::add
_TEXT	ENDS
PUBLIC	?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z ; icu_56::NFRuleSet::setBestFractionRule
PUBLIC	?setNonNumericalRule@NFRuleSet@icu_56@@QAEXPAVNFRule@2@@Z ; icu_56::NFRuleSet::setNonNumericalRule
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setNonNumericalRule@NFRuleSet@icu_56@@QAEXPAVNFRule@2@@Z
_TEXT	SEGMENT
tv140 = -296						; size = 4
tv130 = -296						; size = 4
tv73 = -296						; size = 4
$T46554 = -288						; size = 4
$T46555 = -276						; size = 4
$T46558 = -264						; size = 4
$T46559 = -252						; size = 4
$T46562 = -240						; size = 4
$T46563 = -228						; size = 4
_baseValue$ = -24					; size = 8
_this$ = -8						; size = 4
_rule$ = 8						; size = 4
?setNonNumericalRule@NFRuleSet@icu_56@@QAEXPAVNFRule@2@@Z PROC ; icu_56::NFRuleSet::setNonNumericalRule, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\nfrs.cpp
; Line 266
	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 267
	mov	ecx, DWORD PTR _rule$[ebp]
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR _baseValue$[ebp], eax
	mov	DWORD PTR _baseValue$[ebp+4], edx
; Line 268
	mov	eax, DWORD PTR _baseValue$[ebp]
	and	eax, DWORD PTR _baseValue$[ebp+4]
	cmp	eax, -1
	jne	SHORT $LN11@setNonNume
; Line 269
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T46555[ebp], ecx
	mov	edx, DWORD PTR $T46555[ebp]
	mov	DWORD PTR $T46554[ebp], edx
	cmp	DWORD PTR $T46554[ebp], 0
	je	SHORT $LN14@setNonNume
	push	1
	mov	ecx, DWORD PTR $T46554[ebp]
	call	??_GNFRule@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN15@setNonNume
$LN14@setNonNume:
	mov	DWORD PTR tv73[ebp], 0
$LN15@setNonNume:
; Line 270
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rule$[ebp]
	mov	DWORD PTR [eax+76], ecx
	jmp	$LN12@setNonNume
$LN11@setNonNume:
; Line 272
	cmp	DWORD PTR _baseValue$[ebp], -2		; fffffffeH
	jne	SHORT $LN9@setNonNume
	cmp	DWORD PTR _baseValue$[ebp+4], -1
	jne	SHORT $LN9@setNonNume
; Line 273
	push	1
	mov	eax, DWORD PTR _rule$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z ; icu_56::NFRuleSet::setBestFractionRule
	jmp	$LN12@setNonNume
$LN9@setNonNume:
; Line 275
	cmp	DWORD PTR _baseValue$[ebp], -3		; fffffffdH
	jne	SHORT $LN7@setNonNume
	cmp	DWORD PTR _baseValue$[ebp+4], -1
	jne	SHORT $LN7@setNonNume
; Line 276
	push	1
	mov	eax, DWORD PTR _rule$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z ; icu_56::NFRuleSet::setBestFractionRule
	jmp	$LN12@setNonNume
$LN7@setNonNume:
; Line 278
	cmp	DWORD PTR _baseValue$[ebp], -4		; fffffffcH
	jne	SHORT $LN5@setNonNume
	cmp	DWORD PTR _baseValue$[ebp+4], -1
	jne	SHORT $LN5@setNonNume
; Line 279
	push	1
	mov	eax, DWORD PTR _rule$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z ; icu_56::NFRuleSet::setBestFractionRule
	jmp	$LN12@setNonNume
$LN5@setNonNume:
; Line 281
	cmp	DWORD PTR _baseValue$[ebp], -5		; fffffffbH
	jne	SHORT $LN3@setNonNume
	cmp	DWORD PTR _baseValue$[ebp+4], -1
	jne	SHORT $LN3@setNonNume
; Line 282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR $T46559[ebp], ecx
	mov	edx, DWORD PTR $T46559[ebp]
	mov	DWORD PTR $T46558[ebp], edx
	cmp	DWORD PTR $T46558[ebp], 0
	je	SHORT $LN16@setNonNume
	push	1
	mov	ecx, DWORD PTR $T46558[ebp]
	call	??_GNFRule@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN17@setNonNume
$LN16@setNonNume:
	mov	DWORD PTR tv130[ebp], 0
$LN17@setNonNume:
; Line 283
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rule$[ebp]
	mov	DWORD PTR [eax+92], ecx
	jmp	SHORT $LN12@setNonNume
$LN3@setNonNume:
; Line 285
	cmp	DWORD PTR _baseValue$[ebp], -6		; fffffffaH
	jne	SHORT $LN12@setNonNume
	cmp	DWORD PTR _baseValue$[ebp+4], -1
	jne	SHORT $LN12@setNonNume
; Line 286
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR $T46563[ebp], ecx
	mov	edx, DWORD PTR $T46563[ebp]
	mov	DWORD PTR $T46562[ebp], edx
	cmp	DWORD PTR $T46562[ebp], 0
	je	SHORT $LN18@setNonNume
	push	1
	mov	ecx, DWORD PTR $T46562[ebp]
	call	??_GNFRule@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN19@setNonNume
$LN18@setNonNume:
	mov	DWORD PTR tv140[ebp], 0
$LN19@setNonNume:
; Line 287
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rule$[ebp]
	mov	DWORD PTR [eax+96], ecx
$LN12@setNonNume:
; Line 289
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setNonNumericalRule@NFRuleSet@icu_56@@QAEXPAVNFRule@2@@Z ENDP ; icu_56::NFRuleSet::setNonNumericalRule
_TEXT	ENDS
PUBLIC	?getDecimalPoint@NFRule@icu_56@@QBE_WXZ		; icu_56::NFRule::getDecimalPoint
PUBLIC	__$ArrayPad$
EXTRN	?getDecimalFormatSymbols@RuleBasedNumberFormat@icu_56@@ABEPBVDecimalFormatSymbols@2@XZ:PROC ; icu_56::RuleBasedNumberFormat::getDecimalFormatSymbols
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z$0
__ehfuncinfo$?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z
_TEXT	SEGMENT
tv133 = -336						; size = 4
tv134 = -332						; size = 4
$T39256 = -324						; size = 64
$T46569 = -249						; size = 1
_decimalFormatSymbols$39255 = -48			; size = 4
_bestResult$ = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_originalIndex$ = 8					; size = 4
_newRule$ = 12						; size = 4
_rememberRule$ = 16					; size = 1
?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z PROC ; icu_56::NFRuleSet::setBestFractionRule, COMDAT
; _this$ = ecx
; Line 298
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 299
	movsx	eax, BYTE PTR _rememberRule$[ebp]
	test	eax, eax
	je	SHORT $LN4@setBestFra
; Line 300
	mov	eax, DWORD PTR _newRule$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	?add@NFRuleList@icu_56@@QAEXPAVNFRule@2@@Z ; icu_56::NFRuleList::add
$LN4@setBestFra:
; Line 302
	mov	eax, DWORD PTR _originalIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+76]
	mov	DWORD PTR _bestResult$[ebp], edx
; Line 303
	cmp	DWORD PTR _bestResult$[ebp], 0
	jne	SHORT $LN3@setBestFra
; Line 304
	mov	eax, DWORD PTR _originalIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newRule$[ebp]
	mov	DWORD PTR [ecx+eax*4+76], edx
; Line 306
	jmp	$LN5@setBestFra
$LN3@setBestFra:
; Line 308
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?getDecimalFormatSymbols@RuleBasedNumberFormat@icu_56@@ABEPBVDecimalFormatSymbols@2@XZ ; icu_56::RuleBasedNumberFormat::getDecimalFormatSymbols
	mov	DWORD PTR _decimalFormatSymbols$39255[ebp], eax
; Line 310
	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR $T39256[ebp]
	push	eax
	mov	ecx, DWORD PTR _decimalFormatSymbols$39255[ebp]
	call	?getSymbol@DecimalFormatSymbols@icu_56@@QBE?AVUnicodeString@2@W4ENumberFormatSymbol@12@@Z ; icu_56::DecimalFormatSymbols::getSymbol
	mov	DWORD PTR tv134[ebp], eax
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR tv133[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv133[ebp]
	call	DWORD PTR __imp_?charAt@UnicodeString@icu_56@@QBE_WH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	esi, ax
	mov	ecx, DWORD PTR _newRule$[ebp]
	call	?getDecimalPoint@NFRule@icu_56@@QBE_WXZ	; icu_56::NFRule::getDecimalPoint
	movzx	edx, ax
	xor	eax, eax
	cmp	esi, edx
	sete	al
	mov	BYTE PTR $T46569[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR $T39256[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, BYTE PTR $T46569[ebp]
	test	ecx, ecx
	je	SHORT $LN5@setBestFra
; Line 312
	mov	eax, DWORD PTR _originalIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newRule$[ebp]
	mov	DWORD PTR [ecx+eax*4+76], edx
$LN5@setBestFra:
; Line 316
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR $T39256[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-340]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z ENDP ; icu_56::NFRuleSet::setBestFractionRule
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getDecimalPoint@NFRule@icu_56@@QBE_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getDecimalPoint@NFRule@icu_56@@QBE_WXZ PROC		; icu_56::NFRule::getDecimalPoint, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\nfrule.h
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+14]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getDecimalPoint@NFRule@icu_56@@QBE_WXZ ENDP		; icu_56::NFRule::getDecimalPoint
_TEXT	ENDS
PUBLIC	??1NFRuleSet@icu_56@@QAE@XZ			; icu_56::NFRuleSet::~NFRuleSet
;	COMDAT xdata$x
; File d:\mozilla\intl\icu\source\i18n\nfrs.cpp
xdata$x	SEGMENT
__unwindtable$??1NFRuleSet@icu_56@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1NFRuleSet@icu_56@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1NFRuleSet@icu_56@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1NFRuleSet@icu_56@@QAE@XZ$2
__ehfuncinfo$??1NFRuleSet@icu_56@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1NFRuleSet@icu_56@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1NFRuleSet@icu_56@@QAE@XZ
_TEXT	SEGMENT
tv81 = -256						; size = 4
$T46581 = -248						; size = 4
$T46582 = -236						; size = 4
_i$39262 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1NFRuleSet@icu_56@@QAE@XZ PROC			; icu_56::NFRuleSet::~NFRuleSet, COMDAT
; _this$ = ecx
; Line 319
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1NFRuleSet@icu_56@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 320
	mov	DWORD PTR _i$39262[ebp], 0
	jmp	SHORT $LN4@NFRuleSet@2
$LN3@NFRuleSet@2:
	mov	eax, DWORD PTR _i$39262[ebp]
	add	eax, 1
	mov	DWORD PTR _i$39262[ebp], eax
$LN4@NFRuleSet@2:
	cmp	DWORD PTR _i$39262[ebp], 6
	jge	SHORT $LN5@NFRuleSet@2
; Line 323
	cmp	DWORD PTR _i$39262[ebp], 1
	je	SHORT $LN1@NFRuleSet@2
	cmp	DWORD PTR _i$39262[ebp], 2
	je	SHORT $LN1@NFRuleSet@2
	cmp	DWORD PTR _i$39262[ebp], 3
	je	SHORT $LN1@NFRuleSet@2
; Line 325
	mov	eax, DWORD PTR _i$39262[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+76]
	mov	DWORD PTR $T46582[ebp], edx
	mov	eax, DWORD PTR $T46582[ebp]
	mov	DWORD PTR $T46581[ebp], eax
	cmp	DWORD PTR $T46581[ebp], 0
	je	SHORT $LN7@NFRuleSet@2
	push	1
	mov	ecx, DWORD PTR $T46581[ebp]
	call	??_GNFRule@icu_56@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN1@NFRuleSet@2
$LN7@NFRuleSet@2:
	mov	DWORD PTR tv81[ebp], 0
$LN1@NFRuleSet@2:
; Line 328
	jmp	SHORT $LN3@NFRuleSet@2
$LN5@NFRuleSet@2:
; Line 329
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??1NFRuleList@icu_56@@QAE@XZ		; icu_56::NFRuleList::~NFRuleList
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1NFRuleList@icu_56@@QAE@XZ		; icu_56::NFRuleList::~NFRuleList
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1NFRuleSet@icu_56@@QAE@XZ$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1UnicodeString@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$??1NFRuleSet@icu_56@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1NFRuleList@icu_56@@QAE@XZ		; icu_56::NFRuleList::~NFRuleList
__unwindfunclet$??1NFRuleSet@icu_56@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	jmp	??1NFRuleList@icu_56@@QAE@XZ		; icu_56::NFRuleList::~NFRuleList
__ehhandler$??1NFRuleSet@icu_56@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1NFRuleSet@icu_56@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1NFRuleSet@icu_56@@QAE@XZ ENDP			; icu_56::NFRuleSet::~NFRuleSet
PUBLIC	??9NFRule@icu_56@@QBECABV01@@Z			; icu_56::NFRule::operator!=
PUBLIC	??8NFRuleSet@icu_56@@QBECABV01@@Z		; icu_56::NFRuleSet::operator==
EXTRN	__imp_??8UnicodeString@icu_56@@QBECABV01@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??8NFRuleSet@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_i$39287 = -32						; size = 4
_i$39282 = -20						; size = 4
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
??8NFRuleSet@icu_56@@QBECABV01@@Z PROC			; icu_56::NFRuleSet::operator==, COMDAT
; _this$ = ecx
; Line 346
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 349
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	mov	esi, eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	cmp	esi, eax
	jne	$LN9@operator@3
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+116]
	mov	edx, DWORD PTR _rhs$[ebp]
	movsx	eax, BYTE PTR [edx+116]
	cmp	ecx, eax
	jne	$LN9@operator@3
	mov	esi, esp
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??8UnicodeString@icu_56@@QBECABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	$LN9@operator@3
; Line 352
	mov	DWORD PTR _i$39282[ebp], 0
	jmp	SHORT $LN8@operator@3
$LN7@operator@3:
	mov	eax, DWORD PTR _i$39282[ebp]
	add	eax, 1
	mov	DWORD PTR _i$39282[ebp], eax
$LN8@operator@3:
	cmp	DWORD PTR _i$39282[ebp], 6
	jge	SHORT $LN6@operator@3
; Line 353
	mov	eax, DWORD PTR _i$39282[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+76]
	push	edx
	mov	eax, DWORD PTR _i$39282[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+76]
	push	edx
	call	?util_equalRules@icu_56@@YACPBVNFRule@1@0@Z ; icu_56::util_equalRules
	add	esp, 8
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN5@operator@3
; Line 354
	xor	al, al
	jmp	SHORT $LN10@operator@3
$LN5@operator@3:
; Line 356
	jmp	SHORT $LN7@operator@3
$LN6@operator@3:
; Line 359
	mov	DWORD PTR _i$39287[ebp], 0
	jmp	SHORT $LN4@operator@3
$LN3@operator@3:
	mov	eax, DWORD PTR _i$39287[ebp]
	add	eax, 1
	mov	DWORD PTR _i$39287[ebp], eax
$LN4@operator@3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	cmp	DWORD PTR _i$39287[ebp], eax
	jae	SHORT $LN2@operator@3
; Line 360
	mov	eax, DWORD PTR _i$39287[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	push	eax
	mov	ecx, DWORD PTR _i$39287[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	??9NFRule@icu_56@@QBECABV01@@Z		; icu_56::NFRule::operator!=
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@operator@3
; Line 361
	xor	al, al
	jmp	SHORT $LN10@operator@3
$LN1@operator@3:
; Line 363
	jmp	SHORT $LN3@operator@3
$LN2@operator@3:
; Line 364
	mov	al, 1
	jmp	SHORT $LN10@operator@3
$LN9@operator@3:
; Line 366
	xor	al, al
$LN10@operator@3:
; Line 367
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8NFRuleSet@icu_56@@QBECABV01@@Z ENDP			; icu_56::NFRuleSet::operator==
_TEXT	ENDS
EXTRN	??8NFRule@icu_56@@QBECABV01@@Z:PROC		; icu_56::NFRule::operator==
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9NFRule@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
??9NFRule@icu_56@@QBECABV01@@Z PROC			; icu_56::NFRule::operator!=, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\nfrule.h
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8NFRule@icu_56@@QBECABV01@@Z		; icu_56::NFRule::operator==
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9NFRule@icu_56@@QBECABV01@@Z ENDP			; icu_56::NFRule::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?util_equalRules@icu_56@@YACPBVNFRule@1@0@Z
_TEXT	SEGMENT
_rule1$ = 8						; size = 4
_rule2$ = 12						; size = 4
?util_equalRules@icu_56@@YACPBVNFRule@1@0@Z PROC	; icu_56::util_equalRules, COMDAT
; File d:\mozilla\intl\icu\source\i18n\nfrs.cpp
; Line 333
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 334
	cmp	DWORD PTR _rule1$[ebp], 0
	je	SHORT $LN4@util_equal
; Line 335
	cmp	DWORD PTR _rule2$[ebp], 0
	je	SHORT $LN3@util_equal
; Line 336
	mov	eax, DWORD PTR _rule2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rule1$[ebp]
	call	??8NFRule@icu_56@@QBECABV01@@Z		; icu_56::NFRule::operator==
	jmp	SHORT $LN5@util_equal
$LN3@util_equal:
; Line 337
	jmp	SHORT $LN2@util_equal
$LN4@util_equal:
; Line 338
	cmp	DWORD PTR _rule2$[ebp], 0
	jne	SHORT $LN2@util_equal
; Line 339
	mov	al, 1
	jmp	SHORT $LN5@util_equal
$LN2@util_equal:
; Line 341
	xor	al, al
$LN5@util_equal:
; Line 342
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?util_equalRules@icu_56@@YACPBVNFRule@1@0@Z ENDP	; icu_56::util_equalRules
_TEXT	ENDS
PUBLIC	?setDecimalFormatSymbols@NFRuleSet@icu_56@@QAEXABVDecimalFormatSymbols@2@AAW4UErrorCode@@@Z ; icu_56::NFRuleSet::setDecimalFormatSymbols
EXTRN	?setDecimalFormatSymbols@NFRule@icu_56@@QAEXABVDecimalFormatSymbols@2@AAW4UErrorCode@@@Z:PROC ; icu_56::NFRule::setDecimalFormatSymbols
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setDecimalFormatSymbols@NFRuleSet@icu_56@@QAEXABVDecimalFormatSymbols@2@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv176 = -292						; size = 8
tv173 = -284						; size = 8
_rule$39316 = -80					; size = 4
_nnrIdx$39312 = -68					; size = 4
_fractionRule$39310 = -56				; size = 4
_fIdx$39306 = -44					; size = 4
_nonNumericalIdx$39301 = -32				; size = 4
_i$39297 = -20						; size = 4
_this$ = -8						; size = 4
_newSymbols$ = 8					; size = 4
_status$ = 12						; size = 4
?setDecimalFormatSymbols@NFRuleSet@icu_56@@QAEXABVDecimalFormatSymbols@2@AAW4UErrorCode@@@Z PROC ; icu_56::NFRuleSet::setDecimalFormatSymbols, COMDAT
; _this$ = ecx
; Line 370
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 371
	mov	DWORD PTR _i$39297[ebp], 0
	jmp	SHORT $LN15@setDecimal
$LN14@setDecimal:
	mov	eax, DWORD PTR _i$39297[ebp]
	add	eax, 1
	mov	DWORD PTR _i$39297[ebp], eax
$LN15@setDecimal:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	cmp	DWORD PTR _i$39297[ebp], eax
	jae	SHORT $LN13@setDecimal
; Line 372
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newSymbols$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$39297[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?setDecimalFormatSymbols@NFRule@icu_56@@QAEXABVDecimalFormatSymbols@2@AAW4UErrorCode@@@Z ; icu_56::NFRule::setDecimalFormatSymbols
; Line 373
	jmp	SHORT $LN14@setDecimal
$LN13@setDecimal:
; Line 375
	mov	DWORD PTR _nonNumericalIdx$39301[ebp], 1
	jmp	SHORT $LN12@setDecimal
$LN11@setDecimal:
	mov	eax, DWORD PTR _nonNumericalIdx$39301[ebp]
	add	eax, 1
	mov	DWORD PTR _nonNumericalIdx$39301[ebp], eax
$LN12@setDecimal:
	cmp	DWORD PTR _nonNumericalIdx$39301[ebp], 3
	jg	$LN10@setDecimal
; Line 376
	mov	eax, DWORD PTR _nonNumericalIdx$39301[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+76], 0
	je	$LN9@setDecimal
; Line 377
	mov	DWORD PTR _fIdx$39306[ebp], 0
	jmp	SHORT $LN8@setDecimal
$LN7@setDecimal:
	mov	eax, DWORD PTR _fIdx$39306[ebp]
	add	eax, 1
	mov	DWORD PTR _fIdx$39306[ebp], eax
$LN8@setDecimal:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	cmp	DWORD PTR _fIdx$39306[ebp], eax
	jae	SHORT $LN9@setDecimal
; Line 378
	mov	eax, DWORD PTR _fIdx$39306[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	DWORD PTR _fractionRule$39310[ebp], eax
; Line 379
	mov	eax, DWORD PTR _nonNumericalIdx$39301[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+76]
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	esi, eax
	mov	edi, edx
	mov	ecx, DWORD PTR _fractionRule$39310[ebp]
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR tv173[ebp], esi
	mov	DWORD PTR tv173[ebp+4], edi
	mov	DWORD PTR tv176[ebp], eax
	mov	DWORD PTR tv176[ebp+4], edx
	mov	edx, DWORD PTR tv173[ebp]
	cmp	edx, DWORD PTR tv176[ebp]
	jne	SHORT $LN5@setDecimal
	mov	eax, DWORD PTR tv173[ebp+4]
	cmp	eax, DWORD PTR tv176[ebp+4]
	jne	SHORT $LN5@setDecimal
; Line 380
	push	0
	mov	eax, DWORD PTR _fractionRule$39310[ebp]
	push	eax
	mov	ecx, DWORD PTR _nonNumericalIdx$39301[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setBestFractionRule@NFRuleSet@icu_56@@QAEXHPAVNFRule@2@C@Z ; icu_56::NFRuleSet::setBestFractionRule
$LN5@setDecimal:
; Line 382
	jmp	$LN7@setDecimal
$LN9@setDecimal:
; Line 384
	jmp	$LN11@setDecimal
$LN10@setDecimal:
; Line 386
	mov	DWORD PTR _nnrIdx$39312[ebp], 0
	jmp	SHORT $LN4@setDecimal
$LN3@setDecimal:
	mov	eax, DWORD PTR _nnrIdx$39312[ebp]
	add	eax, 1
	mov	DWORD PTR _nnrIdx$39312[ebp], eax
$LN4@setDecimal:
	cmp	DWORD PTR _nnrIdx$39312[ebp], 6
	jae	SHORT $LN16@setDecimal
; Line 387
	mov	eax, DWORD PTR _nnrIdx$39312[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+76]
	mov	DWORD PTR _rule$39316[ebp], edx
; Line 388
	cmp	DWORD PTR _rule$39316[ebp], 0
	je	SHORT $LN1@setDecimal
; Line 389
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newSymbols$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _rule$39316[ebp]
	call	?setDecimalFormatSymbols@NFRule@icu_56@@QAEXABVDecimalFormatSymbols@2@AAW4UErrorCode@@@Z ; icu_56::NFRule::setDecimalFormatSymbols
$LN1@setDecimal:
; Line 391
	jmp	SHORT $LN3@setDecimal
$LN16@setDecimal:
; Line 392
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setDecimalFormatSymbols@NFRuleSet@icu_56@@QAEXABVDecimalFormatSymbols@2@AAW4UErrorCode@@@Z ENDP ; icu_56::NFRuleSet::setDecimalFormatSymbols
_TEXT	ENDS
PUBLIC	?findNormalRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@_J@Z ; icu_56::NFRuleSet::findNormalRule
PUBLIC	?format@NFRuleSet@icu_56@@QBEX_JAAVUnicodeString@2@HHAAW4UErrorCode@@@Z ; icu_56::NFRuleSet::format
EXTRN	?doFormat@NFRule@icu_56@@QBEX_JAAVUnicodeString@2@HHAAW4UErrorCode@@@Z:PROC ; icu_56::NFRule::doFormat
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?format@NFRuleSet@icu_56@@QBEX_JAAVUnicodeString@2@HHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_rule$ = -20						; size = 4
_this$ = -8						; size = 4
_number$ = 8						; size = 8
_toAppendTo$ = 16					; size = 4
_pos$ = 20						; size = 4
_recursionCount$ = 24					; size = 4
_status$ = 28						; size = 4
?format@NFRuleSet@icu_56@@QBEX_JAAVUnicodeString@2@HHAAW4UErrorCode@@@Z PROC ; icu_56::NFRuleSet::format, COMDAT
; _this$ = ecx
; Line 398
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 399
	cmp	DWORD PTR _recursionCount$[ebp], 64	; 00000040H
	jl	SHORT $LN2@format
; Line 401
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
; Line 402
	jmp	SHORT $LN3@format
$LN2@format:
; Line 404
	mov	eax, DWORD PTR _number$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _number$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findNormalRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@_J@Z ; icu_56::NFRuleSet::findNormalRule
	mov	DWORD PTR _rule$[ebp], eax
; Line 405
	cmp	DWORD PTR _rule$[ebp], 0
	je	SHORT $LN3@format
; Line 406
	mov	eax, DWORD PTR _recursionCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _recursionCount$[ebp], eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recursionCount$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toAppendTo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _number$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _number$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rule$[ebp]
	call	?doFormat@NFRule@icu_56@@QBEX_JAAVUnicodeString@2@HHAAW4UErrorCode@@@Z ; icu_56::NFRule::doFormat
$LN3@format:
; Line 408
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?format@NFRuleSet@icu_56@@QBEX_JAAVUnicodeString@2@HHAAW4UErrorCode@@@Z ENDP ; icu_56::NFRuleSet::format
_TEXT	ENDS
PUBLIC	?findDoubleRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@N@Z ; icu_56::NFRuleSet::findDoubleRule
PUBLIC	?format@NFRuleSet@icu_56@@QBEXNAAVUnicodeString@2@HHAAW4UErrorCode@@@Z ; icu_56::NFRuleSet::format
EXTRN	?doFormat@NFRule@icu_56@@QBEXNAAVUnicodeString@2@HHAAW4UErrorCode@@@Z:PROC ; icu_56::NFRule::doFormat
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?format@NFRuleSet@icu_56@@QBEXNAAVUnicodeString@2@HHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_rule$ = -20						; size = 4
_this$ = -8						; size = 4
_number$ = 8						; size = 8
_toAppendTo$ = 16					; size = 4
_pos$ = 20						; size = 4
_recursionCount$ = 24					; size = 4
_status$ = 28						; size = 4
?format@NFRuleSet@icu_56@@QBEXNAAVUnicodeString@2@HHAAW4UErrorCode@@@Z PROC ; icu_56::NFRuleSet::format, COMDAT
; _this$ = ecx
; Line 412
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 413
	cmp	DWORD PTR _recursionCount$[ebp], 64	; 00000040H
	jl	SHORT $LN2@format@2
; Line 415
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
; Line 416
	jmp	SHORT $LN3@format@2
$LN2@format@2:
; Line 418
	sub	esp, 8
	fld	QWORD PTR _number$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findDoubleRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@N@Z ; icu_56::NFRuleSet::findDoubleRule
	mov	DWORD PTR _rule$[ebp], eax
; Line 419
	cmp	DWORD PTR _rule$[ebp], 0
	je	SHORT $LN1@format@2
; Line 420
	mov	eax, DWORD PTR _recursionCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _recursionCount$[ebp], eax
	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recursionCount$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toAppendTo$[ebp]
	push	ecx
	sub	esp, 8
	fld	QWORD PTR _number$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _rule$[ebp]
	call	?doFormat@NFRule@icu_56@@QBEXNAAVUnicodeString@2@HHAAW4UErrorCode@@@Z ; icu_56::NFRule::doFormat
$LN1@format@2:
$LN3@format@2:
; Line 422
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?format@NFRuleSet@icu_56@@QBEXNAAVUnicodeString@2@HHAAW4UErrorCode@@@Z ENDP ; icu_56::NFRuleSet::format
_TEXT	ENDS
PUBLIC	?util64_fromDouble@icu_56@@YA_JN@Z		; icu_56::util64_fromDouble
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	?findFractionRuleSetRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@N@Z ; icu_56::NFRuleSet::findFractionRuleSetRule
PUBLIC	?isFractionRuleSet@NFRuleSet@icu_56@@QBECXZ	; icu_56::NFRuleSet::isFractionRuleSet
EXTRN	_uprv_floor_56:PROC
EXTRN	?getDefaultInfinityRule@RuleBasedNumberFormat@icu_56@@ABEPBVNFRule@2@XZ:PROC ; icu_56::RuleBasedNumberFormat::getDefaultInfinityRule
EXTRN	_uprv_isInfinite_56:PROC
EXTRN	?getDefaultNaNRule@RuleBasedNumberFormat@icu_56@@ABEPBVNFRule@2@XZ:PROC ; icu_56::RuleBasedNumberFormat::getDefaultNaNRule
EXTRN	_uprv_isNaN_56:PROC
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?findDoubleRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@N@Z
_TEXT	SEGMENT
_r$ = -48						; size = 8
_rule$39353 = -32					; size = 4
_rule$39347 = -20					; size = 4
_this$ = -8						; size = 4
_number$ = 8						; size = 8
?findDoubleRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@N@Z PROC ; icu_56::NFRuleSet::findDoubleRule, COMDAT
; _this$ = ecx
; Line 426
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 428
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isFractionRuleSet@NFRuleSet@icu_56@@QBECXZ ; icu_56::NFRuleSet::isFractionRuleSet
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN13@findDouble
; Line 429
	sub	esp, 8
	fld	QWORD PTR _number$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findFractionRuleSetRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@N@Z ; icu_56::NFRuleSet::findFractionRuleSetRule
	jmp	$LN14@findDouble
$LN13@findDouble:
; Line 432
	sub	esp, 8
	fld	QWORD PTR _number$[ebp]
	fstp	QWORD PTR [esp]
	call	_uprv_isNaN_56
	add	esp, 8
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN12@findDouble
; Line 433
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _rule$39347[ebp], ecx
; Line 434
	cmp	DWORD PTR _rule$39347[ebp], 0
	jne	SHORT $LN11@findDouble
; Line 435
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?getDefaultNaNRule@RuleBasedNumberFormat@icu_56@@ABEPBVNFRule@2@XZ ; icu_56::RuleBasedNumberFormat::getDefaultNaNRule
	mov	DWORD PTR _rule$39347[ebp], eax
$LN11@findDouble:
; Line 437
	mov	eax, DWORD PTR _rule$39347[ebp]
	jmp	$LN14@findDouble
$LN12@findDouble:
; Line 443
	fldz
	fcomp	QWORD PTR _number$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN8@findDouble
; Line 444
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN9@findDouble
; Line 445
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]
	jmp	$LN14@findDouble
; Line 446
	jmp	SHORT $LN8@findDouble
$LN9@findDouble:
; Line 447
	fld	QWORD PTR _number$[ebp]
	fchs
	fstp	QWORD PTR _number$[ebp]
$LN8@findDouble:
; Line 451
	sub	esp, 8
	fld	QWORD PTR _number$[ebp]
	fstp	QWORD PTR [esp]
	call	_uprv_isInfinite_56
	add	esp, 8
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN7@findDouble
; Line 452
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _rule$39353[ebp], ecx
; Line 453
	cmp	DWORD PTR _rule$39353[ebp], 0
	jne	SHORT $LN6@findDouble
; Line 454
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?getDefaultInfinityRule@RuleBasedNumberFormat@icu_56@@ABEPBVNFRule@2@XZ ; icu_56::RuleBasedNumberFormat::getDefaultInfinityRule
	mov	DWORD PTR _rule$39353[ebp], eax
$LN6@findDouble:
; Line 456
	mov	eax, DWORD PTR _rule$39353[ebp]
	jmp	$LN14@findDouble
$LN7@findDouble:
; Line 460
	sub	esp, 8
	fld	QWORD PTR _number$[ebp]
	fstp	QWORD PTR [esp]
	call	_uprv_floor_56
	add	esp, 8
	fld	QWORD PTR _number$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@findDouble
; Line 463
	fld1
	fcomp	QWORD PTR _number$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@findDouble
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	SHORT $LN4@findDouble
; Line 464
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+84]
	jmp	SHORT $LN14@findDouble
	jmp	SHORT $LN2@findDouble
$LN4@findDouble:
; Line 467
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN2@findDouble
; Line 468
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+80]
	jmp	SHORT $LN14@findDouble
$LN2@findDouble:
; Line 473
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+88], 0
	je	SHORT $LN1@findDouble
; Line 474
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+88]
	jmp	SHORT $LN14@findDouble
$LN1@findDouble:
; Line 479
	fld	QWORD PTR _number$[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	?util64_fromDouble@icu_56@@YA_JN@Z	; icu_56::util64_fromDouble
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
	mov	DWORD PTR _r$[ebp+4], edx
; Line 480
	mov	eax, DWORD PTR _r$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findNormalRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@_J@Z ; icu_56::NFRuleSet::findNormalRule
$LN14@findDouble:
; Line 481
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?findDoubleRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@N@Z ENDP ; icu_56::NFRuleSet::findDoubleRule
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isFractionRuleSet@NFRuleSet@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isFractionRuleSet@NFRuleSet@icu_56@@QBECXZ PROC	; icu_56::NFRuleSet::isFractionRuleSet, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\nfrs.h
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+116]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isFractionRuleSet@NFRuleSet@icu_56@@QBECXZ ENDP	; icu_56::NFRuleSet::isFractionRuleSet
_TEXT	ENDS
EXTRN	?shouldRollBack@NFRule@icu_56@@QBECN@Z:PROC	; icu_56::NFRule::shouldRollBack
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?findNormalRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@_J@Z
_TEXT	SEGMENT
tv207 = -260						; size = 8
tv189 = -260						; size = 8
_result$39382 = -56					; size = 4
_mid$39376 = -44					; size = 4
_lo$39372 = -32						; size = 4
_hi$ = -20						; size = 4
_this$ = -8						; size = 4
_number$ = 8						; size = 8
?findNormalRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@_J@Z PROC ; icu_56::NFRuleSet::findNormalRule, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\i18n\nfrs.cpp
; Line 485
	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 489
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	je	SHORT $LN14@findNormal
; Line 490
	fild	QWORD PTR _number$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findFractionRuleSetRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@N@Z ; icu_56::NFRuleSet::findFractionRuleSetRule
	jmp	$LN15@findNormal
$LN14@findNormal:
; Line 495
	cmp	DWORD PTR _number$[ebp+4], 0
	jg	SHORT $LN11@findNormal
	jl	SHORT $LN17@findNormal
	cmp	DWORD PTR _number$[ebp], 0
	jae	SHORT $LN11@findNormal
$LN17@findNormal:
; Line 496
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN12@findNormal
; Line 497
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]
	jmp	$LN15@findNormal
; Line 498
	jmp	SHORT $LN11@findNormal
$LN12@findNormal:
; Line 499
	mov	eax, DWORD PTR _number$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _number$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR _number$[ebp], eax
	mov	DWORD PTR _number$[ebp+4], ecx
$LN11@findNormal:
; Line 518
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	mov	DWORD PTR _hi$[ebp], eax
; Line 519
	cmp	DWORD PTR _hi$[ebp], 0
	jle	$LN10@findNormal
; Line 520
	mov	DWORD PTR _lo$39372[ebp], 0
$LN9@findNormal:
; Line 522
	mov	eax, DWORD PTR _lo$39372[ebp]
	cmp	eax, DWORD PTR _hi$[ebp]
	jge	$LN8@findNormal
; Line 523
	mov	eax, DWORD PTR _lo$39372[ebp]
	add	eax, DWORD PTR _hi$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _mid$39376[ebp], eax
; Line 524
	mov	eax, DWORD PTR _mid$39376[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR tv189[ebp], eax
	mov	DWORD PTR tv189[ebp+4], edx
	mov	ecx, DWORD PTR tv189[ebp]
	cmp	ecx, DWORD PTR _number$[ebp]
	jne	SHORT $LN7@findNormal
	mov	edx, DWORD PTR tv189[ebp+4]
	cmp	edx, DWORD PTR _number$[ebp+4]
	jne	SHORT $LN7@findNormal
; Line 525
	mov	eax, DWORD PTR _mid$39376[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	jmp	$LN15@findNormal
	jmp	SHORT $LN4@findNormal
$LN7@findNormal:
; Line 527
	mov	eax, DWORD PTR _mid$39376[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR tv207[ebp], eax
	mov	DWORD PTR tv207[ebp+4], edx
	mov	ecx, DWORD PTR tv207[ebp+4]
	cmp	ecx, DWORD PTR _number$[ebp+4]
	jl	SHORT $LN5@findNormal
	jg	SHORT $LN18@findNormal
	mov	edx, DWORD PTR tv207[ebp]
	cmp	edx, DWORD PTR _number$[ebp]
	jbe	SHORT $LN5@findNormal
$LN18@findNormal:
; Line 528
	mov	eax, DWORD PTR _mid$39376[ebp]
	mov	DWORD PTR _hi$[ebp], eax
; Line 530
	jmp	SHORT $LN4@findNormal
$LN5@findNormal:
; Line 531
	mov	eax, DWORD PTR _mid$39376[ebp]
	add	eax, 1
	mov	DWORD PTR _lo$39372[ebp], eax
$LN4@findNormal:
; Line 533
	jmp	$LN9@findNormal
$LN8@findNormal:
; Line 534
	cmp	DWORD PTR _hi$[ebp], 0
	jne	SHORT $LN3@findNormal
; Line 535
	xor	eax, eax
	jmp	SHORT $LN15@findNormal
$LN3@findNormal:
; Line 538
	mov	eax, DWORD PTR _hi$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	DWORD PTR _result$39382[ebp], eax
; Line 545
	fild	QWORD PTR _number$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _result$39382[ebp]
	call	?shouldRollBack@NFRule@icu_56@@QBECN@Z	; icu_56::NFRule::shouldRollBack
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@findNormal
; Line 546
	cmp	DWORD PTR _hi$[ebp], 1
	jne	SHORT $LN1@findNormal
; Line 547
	xor	eax, eax
	jmp	SHORT $LN15@findNormal
$LN1@findNormal:
; Line 549
	mov	eax, DWORD PTR _hi$[ebp]
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	DWORD PTR _result$39382[ebp], eax
$LN2@findNormal:
; Line 551
	mov	eax, DWORD PTR _result$39382[ebp]
	jmp	SHORT $LN15@findNormal
$LN10@findNormal:
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+88]
$LN15@findNormal:
; Line 555
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?findNormalRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@_J@Z ENDP ; icu_56::NFRuleSet::findNormalRule
_TEXT	ENDS
PUBLIC	__real@4000000000000000
EXTRN	_uprv_maxMantissa_56:PROC
EXTRN	__allrem:PROC
EXTRN	__allmul:PROC
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?findFractionRuleSetRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@N@Z
_TEXT	SEGMENT
tv309 = -336						; size = 8
tv323 = -328						; size = 8
tv306 = -328						; size = 8
tv265 = -328						; size = 8
_n$39409 = -124						; size = 8
_i$39400 = -108						; size = 4
_winner$ = -96						; size = 4
_difference$ = -84					; size = 8
_tempDifference$ = -68					; size = 8
_i$39392 = -52						; size = 4
_numerator$ = -40					; size = 8
_leastCommonMultiple$ = -24				; size = 8
_this$ = -8						; size = 4
_number$ = 8						; size = 8
?findFractionRuleSetRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@N@Z PROC ; icu_56::NFRuleSet::findFractionRuleSetRule, COMDAT
; _this$ = ecx
; Line 574
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 584
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR _leastCommonMultiple$[ebp], eax
	mov	DWORD PTR _leastCommonMultiple$[ebp+4], edx
; Line 587
	mov	DWORD PTR _i$39392[ebp], 1
	jmp	SHORT $LN12@findFracti
$LN11@findFracti:
	mov	eax, DWORD PTR _i$39392[ebp]
	add	eax, 1
	mov	DWORD PTR _i$39392[ebp], eax
$LN12@findFracti:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	cmp	DWORD PTR _i$39392[ebp], eax
	jae	SHORT $LN10@findFracti
; Line 588
	mov	eax, DWORD PTR _i$39392[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	push	edx
	push	eax
	mov	ecx, DWORD PTR _leastCommonMultiple$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _leastCommonMultiple$[ebp]
	push	edx
	call	?util_lcm@icu_56@@YA_J_J0@Z		; icu_56::util_lcm
	add	esp, 16					; 00000010H
	mov	DWORD PTR _leastCommonMultiple$[ebp], eax
	mov	DWORD PTR _leastCommonMultiple$[ebp+4], edx
; Line 589
	jmp	SHORT $LN11@findFracti
$LN10@findFracti:
; Line 590
	fild	QWORD PTR _leastCommonMultiple$[ebp]
	fmul	QWORD PTR _number$[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	?util64_fromDouble@icu_56@@YA_JN@Z	; icu_56::util64_fromDouble
	add	esp, 8
	mov	DWORD PTR _numerator$[ebp], eax
	mov	DWORD PTR _numerator$[ebp+4], edx
; Line 594
	call	_uprv_maxMantissa_56
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	?util64_fromDouble@icu_56@@YA_JN@Z	; icu_56::util64_fromDouble
	add	esp, 8
	mov	DWORD PTR _difference$[ebp], eax
	mov	DWORD PTR _difference$[ebp+4], edx
; Line 595
	mov	DWORD PTR _winner$[ebp], 0
; Line 596
	mov	DWORD PTR _i$39400[ebp], 0
	jmp	SHORT $LN9@findFracti
$LN8@findFracti:
	mov	eax, DWORD PTR _i$39400[ebp]
	add	eax, 1
	mov	DWORD PTR _i$39400[ebp], eax
$LN9@findFracti:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	cmp	DWORD PTR _i$39400[ebp], eax
	jae	$LN7@findFracti
; Line 603
	mov	eax, DWORD PTR _i$39400[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	push	edx
	push	eax
	mov	ecx, DWORD PTR _numerator$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _numerator$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _leastCommonMultiple$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _leastCommonMultiple$[ebp]
	push	ecx
	push	edx
	push	eax
	call	__allrem
	mov	DWORD PTR _tempDifference$[ebp], eax
	mov	DWORD PTR _tempDifference$[ebp+4], edx
; Line 609
	mov	eax, DWORD PTR _leastCommonMultiple$[ebp]
	sub	eax, DWORD PTR _tempDifference$[ebp]
	mov	ecx, DWORD PTR _leastCommonMultiple$[ebp+4]
	sbb	ecx, DWORD PTR _tempDifference$[ebp+4]
	mov	DWORD PTR tv265[ebp], eax
	mov	DWORD PTR tv265[ebp+4], ecx
	mov	edx, DWORD PTR tv265[ebp+4]
	cmp	edx, DWORD PTR _tempDifference$[ebp+4]
	jg	SHORT $LN6@findFracti
	jl	SHORT $LN15@findFracti
	mov	eax, DWORD PTR tv265[ebp]
	cmp	eax, DWORD PTR _tempDifference$[ebp]
	jae	SHORT $LN6@findFracti
$LN15@findFracti:
; Line 610
	mov	eax, DWORD PTR _leastCommonMultiple$[ebp]
	sub	eax, DWORD PTR _tempDifference$[ebp]
	mov	ecx, DWORD PTR _leastCommonMultiple$[ebp+4]
	sbb	ecx, DWORD PTR _tempDifference$[ebp+4]
	mov	DWORD PTR _tempDifference$[ebp], eax
	mov	DWORD PTR _tempDifference$[ebp+4], ecx
$LN6@findFracti:
; Line 617
	mov	eax, DWORD PTR _tempDifference$[ebp+4]
	cmp	eax, DWORD PTR _difference$[ebp+4]
	jg	SHORT $LN4@findFracti
	jl	SHORT $LN16@findFracti
	mov	ecx, DWORD PTR _tempDifference$[ebp]
	cmp	ecx, DWORD PTR _difference$[ebp]
	jae	SHORT $LN4@findFracti
$LN16@findFracti:
; Line 618
	mov	eax, DWORD PTR _tempDifference$[ebp]
	mov	DWORD PTR _difference$[ebp], eax
	mov	ecx, DWORD PTR _tempDifference$[ebp+4]
	mov	DWORD PTR _difference$[ebp+4], ecx
; Line 619
	mov	eax, DWORD PTR _i$39400[ebp]
	mov	DWORD PTR _winner$[ebp], eax
; Line 620
	mov	eax, DWORD PTR _difference$[ebp]
	or	eax, DWORD PTR _difference$[ebp+4]
	jne	SHORT $LN4@findFracti
; Line 621
	jmp	SHORT $LN7@findFracti
$LN4@findFracti:
; Line 624
	jmp	$LN8@findFracti
$LN7@findFracti:
; Line 633
	mov	esi, DWORD PTR _winner$[ebp]
	add	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	cmp	esi, eax
	jae	$LN2@findFracti
	mov	eax, DWORD PTR _winner$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	esi, eax
	mov	edi, edx
	mov	ecx, DWORD PTR _winner$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR tv306[ebp], esi
	mov	DWORD PTR tv306[ebp+4], edi
	mov	DWORD PTR tv309[ebp], eax
	mov	DWORD PTR tv309[ebp+4], edx
	mov	edx, DWORD PTR tv306[ebp]
	cmp	edx, DWORD PTR tv309[ebp]
	jne	SHORT $LN2@findFracti
	mov	eax, DWORD PTR tv306[ebp+4]
	cmp	eax, DWORD PTR tv309[ebp+4]
	jne	SHORT $LN2@findFracti
; Line 634
	mov	eax, DWORD PTR _winner$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR tv323[ebp], eax
	mov	DWORD PTR tv323[ebp+4], edx
	fild	QWORD PTR tv323[ebp]
	fmul	QWORD PTR _number$[ebp]
	fstp	QWORD PTR _n$39409[ebp]
; Line 635
	fld	QWORD PTR __real@3fe0000000000000
	fcomp	QWORD PTR _n$39409[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN1@findFracti
	fld	QWORD PTR __real@4000000000000000
	fcomp	QWORD PTR _n$39409[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN2@findFracti
$LN1@findFracti:
; Line 636
	mov	eax, DWORD PTR _winner$[ebp]
	add	eax, 1
	mov	DWORD PTR _winner$[ebp], eax
$LN2@findFracti:
; Line 641
	mov	eax, DWORD PTR _winner$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
; Line 642
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?findFractionRuleSetRule@NFRuleSet@icu_56@@ABEPBVNFRule@2@N@Z ENDP ; icu_56::NFRuleSet::findFractionRuleSetRule
_TEXT	ENDS
EXTRN	__alldiv:PROC
EXTRN	__allshl:PROC
EXTRN	__allshr:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?util_lcm@icu_56@@YA_J_J0@Z
_TEXT	SEGMENT
tv182 = -276						; size = 8
tv163 = -276						; size = 8
tv134 = -276						; size = 8
tv92 = -276						; size = 8
_gcd$ = -72						; size = 8
_t$ = -56						; size = 8
_p2$ = -40						; size = 4
_y1$ = -28						; size = 8
_x1$ = -12						; size = 8
_x$ = 8							; size = 8
_y$ = 16						; size = 8
?util_lcm@icu_56@@YA_J_J0@Z PROC			; icu_56::util_lcm, COMDAT
; Line 79
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 82
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x1$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp+4]
	mov	DWORD PTR _x1$[ebp+4], ecx
; Line 83
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y1$[ebp], eax
	mov	ecx, DWORD PTR _y$[ebp+4]
	mov	DWORD PTR _y1$[ebp+4], ecx
; Line 85
	mov	DWORD PTR _p2$[ebp], 0
$LN10@util_lcm:
; Line 86
	mov	eax, DWORD PTR _x1$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _x1$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv92[ebp], eax
	mov	DWORD PTR tv92[ebp+4], ecx
	mov	edx, DWORD PTR tv92[ebp]
	or	edx, DWORD PTR tv92[ebp+4]
	jne	SHORT $LN9@util_lcm
	mov	eax, DWORD PTR _y1$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _y1$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv134[ebp], eax
	mov	DWORD PTR tv134[ebp+4], ecx
	mov	edx, DWORD PTR tv134[ebp]
	or	edx, DWORD PTR tv134[ebp+4]
	jne	SHORT $LN9@util_lcm
; Line 87
	mov	eax, DWORD PTR _p2$[ebp]
	add	eax, 1
	mov	DWORD PTR _p2$[ebp], eax
; Line 88
	mov	eax, DWORD PTR _x1$[ebp]
	mov	edx, DWORD PTR _x1$[ebp+4]
	mov	cl, 1
	call	__allshr
	mov	DWORD PTR _x1$[ebp], eax
	mov	DWORD PTR _x1$[ebp+4], edx
; Line 89
	mov	eax, DWORD PTR _y1$[ebp]
	mov	edx, DWORD PTR _y1$[ebp+4]
	mov	cl, 1
	call	__allshr
	mov	DWORD PTR _y1$[ebp], eax
	mov	DWORD PTR _y1$[ebp+4], edx
; Line 90
	jmp	SHORT $LN10@util_lcm
$LN9@util_lcm:
; Line 93
	mov	eax, DWORD PTR _x1$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _x1$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv163[ebp], eax
	mov	DWORD PTR tv163[ebp+4], ecx
	cmp	DWORD PTR tv163[ebp], 1
	jne	SHORT $LN8@util_lcm
	cmp	DWORD PTR tv163[ebp+4], 0
	jne	SHORT $LN8@util_lcm
; Line 94
	mov	eax, DWORD PTR _y1$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _y1$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR _t$[ebp], eax
	mov	DWORD PTR _t$[ebp+4], ecx
; Line 95
	jmp	SHORT $LN6@util_lcm
$LN8@util_lcm:
; Line 96
	mov	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR _t$[ebp], eax
	mov	ecx, DWORD PTR _x1$[ebp+4]
	mov	DWORD PTR _t$[ebp+4], ecx
$LN6@util_lcm:
; Line 99
	mov	eax, DWORD PTR _t$[ebp]
	or	eax, DWORD PTR _t$[ebp+4]
	je	$LN5@util_lcm
$LN4@util_lcm:
; Line 100
	mov	eax, DWORD PTR _t$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _t$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv182[ebp], eax
	mov	DWORD PTR tv182[ebp+4], ecx
	mov	edx, DWORD PTR tv182[ebp]
	or	edx, DWORD PTR tv182[ebp+4]
	jne	SHORT $LN3@util_lcm
; Line 101
	mov	eax, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _t$[ebp+4]
	mov	cl, 1
	call	__allshr
	mov	DWORD PTR _t$[ebp], eax
	mov	DWORD PTR _t$[ebp+4], edx
; Line 102
	jmp	SHORT $LN4@util_lcm
$LN3@util_lcm:
; Line 103
	cmp	DWORD PTR _t$[ebp+4], 0
	jl	SHORT $LN2@util_lcm
	jg	SHORT $LN13@util_lcm
	cmp	DWORD PTR _t$[ebp], 0
	jbe	SHORT $LN2@util_lcm
$LN13@util_lcm:
; Line 104
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _x1$[ebp], eax
	mov	ecx, DWORD PTR _t$[ebp+4]
	mov	DWORD PTR _x1$[ebp+4], ecx
; Line 105
	jmp	SHORT $LN1@util_lcm
$LN2@util_lcm:
; Line 106
	mov	eax, DWORD PTR _t$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _t$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR _y1$[ebp], eax
	mov	DWORD PTR _y1$[ebp+4], ecx
$LN1@util_lcm:
; Line 108
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _y1$[ebp]
	mov	ecx, DWORD PTR _x1$[ebp+4]
	sbb	ecx, DWORD PTR _y1$[ebp+4]
	mov	DWORD PTR _t$[ebp], eax
	mov	DWORD PTR _t$[ebp+4], ecx
; Line 109
	jmp	$LN6@util_lcm
$LN5@util_lcm:
; Line 111
	mov	eax, DWORD PTR _x1$[ebp]
	mov	edx, DWORD PTR _x1$[ebp+4]
	mov	ecx, DWORD PTR _p2$[ebp]
	call	__allshl
	mov	DWORD PTR _gcd$[ebp], eax
	mov	DWORD PTR _gcd$[ebp+4], edx
; Line 114
	mov	eax, DWORD PTR _gcd$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _gcd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__alldiv
	mov	ecx, DWORD PTR _y$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	push	edx
	push	eax
	call	__allmul
; Line 115
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?util_lcm@icu_56@@YA_J_J0@Z ENDP			; icu_56::util_lcm
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z ; icu_56::NFRuleSet::parse
EXTRN	__imp_??1ParsePosition@icu_56@@UAE@XZ:PROC
EXTRN	??1Formattable@icu_56@@UAE@XZ:PROC		; icu_56::Formattable::~Formattable
EXTRN	__imp_??4ParsePosition@icu_56@@QAEAAV01@ABV01@@Z:PROC
EXTRN	??4Formattable@icu_56@@QAEAAV01@ABV01@@Z:PROC	; icu_56::Formattable::operator=
EXTRN	__imp_?getIndex@ParsePosition@icu_56@@QBEHXZ:PROC
EXTRN	?doParse@NFRule@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@CNAAVFormattable@2@@Z:PROC ; icu_56::NFRule::doParse
EXTRN	??0Formattable@icu_56@@QAE@XZ:PROC		; icu_56::Formattable::Formattable
EXTRN	__imp_??0ParsePosition@icu_56@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0ParsePosition@icu_56@@QAE@XZ:PROC
EXTRN	?setLong@Formattable@icu_56@@QAEXH@Z:PROC	; icu_56::Formattable::setLong
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z$3
__ehfuncinfo$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z
_TEXT	SEGMENT
tv256 = -808						; size = 8
$T46635 = -793						; size = 1
_success$39438 = -589					; size = 1
_tempResult$39437 = -580				; size = 224
_i$39432 = -348						; size = 4
_ub$39431 = -336					; size = 8
_success$39429 = -317					; size = 1
_tempResult$39428 = -308				; size = 224
_i$39423 = -76						; size = 4
_workingPos$ = -64					; size = 12
_highWaterMark$ = -44					; size = 12
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_text$ = 8						; size = 4
_pos$ = 12						; size = 4
_upperBound$ = 16					; size = 8
_result$ = 24						; size = 4
?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z PROC ; icu_56::NFRuleSet::parse, COMDAT
; _this$ = ecx
; Line 682
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 796				; 0000031cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-808]
	mov	ecx, 199				; 000000c7H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 687
	push	0
	mov	ecx, DWORD PTR _result$[ebp]
	call	?setLong@Formattable@icu_56@@QAEXH@Z	; icu_56::Formattable::setLong
; Line 690
	mov	esi, esp
	mov	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN10@parse
; Line 691
	xor	al, al
	jmp	$LN11@parse
$LN10@parse:
; Line 694
	mov	esi, esp
	lea	ecx, DWORD PTR _highWaterMark$[ebp]
	call	DWORD PTR __imp_??0ParsePosition@icu_56@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 695
	mov	esi, esp
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _workingPos$[ebp]
	call	DWORD PTR __imp_??0ParsePosition@icu_56@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 706
	mov	DWORD PTR _i$39423[ebp], 0
	jmp	SHORT $LN9@parse
$LN8@parse:
	mov	eax, DWORD PTR _i$39423[ebp]
	add	eax, 1
	mov	DWORD PTR _i$39423[ebp], eax
$LN9@parse:
	cmp	DWORD PTR _i$39423[ebp], 6
	jge	$LN7@parse
; Line 707
	mov	eax, DWORD PTR _i$39423[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+76], 0
	je	$LN6@parse
; Line 708
	lea	ecx, DWORD PTR _tempResult$39428[ebp]
	call	??0Formattable@icu_56@@QAE@XZ		; icu_56::Formattable::Formattable
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 709
	lea	eax, DWORD PTR _tempResult$39428[ebp]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _upperBound$[ebp]
	fstp	QWORD PTR [esp]
	push	0
	lea	ecx, DWORD PTR _workingPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$39423[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+76]
	call	?doParse@NFRule@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@CNAAVFormattable@2@@Z ; icu_56::NFRule::doParse
	mov	BYTE PTR _success$39429[ebp], al
; Line 710
	movsx	eax, BYTE PTR _success$39429[ebp]
	test	eax, eax
	je	SHORT $LN5@parse
	mov	esi, esp
	lea	ecx, DWORD PTR _workingPos$[ebp]
	call	DWORD PTR __imp_?getIndex@ParsePosition@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, eax
	mov	edi, esp
	lea	ecx, DWORD PTR _highWaterMark$[ebp]
	call	DWORD PTR __imp_?getIndex@ParsePosition@icu_56@@QBEHXZ
	cmp	edi, esp
	call	__RTC_CheckEsp
	cmp	esi, eax
	jle	SHORT $LN5@parse
; Line 711
	lea	eax, DWORD PTR _tempResult$39428[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	??4Formattable@icu_56@@QAEAAV01@ABV01@@Z ; icu_56::Formattable::operator=
; Line 712
	mov	esi, esp
	lea	eax, DWORD PTR _workingPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _highWaterMark$[ebp]
	call	DWORD PTR __imp_??4ParsePosition@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@parse:
; Line 714
	mov	esi, esp
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _workingPos$[ebp]
	call	DWORD PTR __imp_??4ParsePosition@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 715
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _tempResult$39428[ebp]
	call	??1Formattable@icu_56@@UAE@XZ		; icu_56::Formattable::~Formattable
$LN6@parse:
; Line 716
	jmp	$LN8@parse
$LN7@parse:
; Line 733
	sub	esp, 8
	fld	QWORD PTR _upperBound$[ebp]
	fstp	QWORD PTR [esp]
	call	?util64_fromDouble@icu_56@@YA_JN@Z	; icu_56::util64_fromDouble
	add	esp, 8
	mov	DWORD PTR _ub$39431[ebp], eax
	mov	DWORD PTR _ub$39431[ebp+4], edx
; Line 743
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	mov	DWORD PTR _i$39432[ebp], eax
$LN17@parse:
	mov	eax, DWORD PTR _i$39432[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$39432[ebp], eax
	js	$LN3@parse
	mov	esi, esp
	lea	ecx, DWORD PTR _highWaterMark$[ebp]
	call	DWORD PTR __imp_?getIndex@ParsePosition@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, eax
	mov	edi, esp
	mov	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	edi, esp
	call	__RTC_CheckEsp
	cmp	esi, eax
	jge	$LN3@parse
; Line 744
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	jne	SHORT $LN2@parse
	mov	eax, DWORD PTR _i$39432[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR tv256[ebp], eax
	mov	DWORD PTR tv256[ebp+4], edx
	mov	ecx, DWORD PTR tv256[ebp+4]
	cmp	ecx, DWORD PTR _ub$39431[ebp+4]
	jl	SHORT $LN2@parse
	jg	SHORT $LN18@parse
	mov	edx, DWORD PTR tv256[ebp]
	cmp	edx, DWORD PTR _ub$39431[ebp]
	jb	SHORT $LN2@parse
$LN18@parse:
; Line 745
	jmp	$LN17@parse
$LN2@parse:
; Line 747
	lea	ecx, DWORD PTR _tempResult$39437[ebp]
	call	??0Formattable@icu_56@@QAE@XZ		; icu_56::Formattable::Formattable
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 748
	lea	eax, DWORD PTR _tempResult$39437[ebp]
	push	eax
	sub	esp, 8
	fld	QWORD PTR _upperBound$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+116]
	push	edx
	lea	eax, DWORD PTR _workingPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$39432[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?doParse@NFRule@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@CNAAVFormattable@2@@Z ; icu_56::NFRule::doParse
	mov	BYTE PTR _success$39438[ebp], al
; Line 749
	movsx	eax, BYTE PTR _success$39438[ebp]
	test	eax, eax
	je	SHORT $LN1@parse
	mov	esi, esp
	lea	ecx, DWORD PTR _workingPos$[ebp]
	call	DWORD PTR __imp_?getIndex@ParsePosition@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, eax
	mov	edi, esp
	lea	ecx, DWORD PTR _highWaterMark$[ebp]
	call	DWORD PTR __imp_?getIndex@ParsePosition@icu_56@@QBEHXZ
	cmp	edi, esp
	call	__RTC_CheckEsp
	cmp	esi, eax
	jle	SHORT $LN1@parse
; Line 750
	lea	eax, DWORD PTR _tempResult$39437[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	??4Formattable@icu_56@@QAEAAV01@ABV01@@Z ; icu_56::Formattable::operator=
; Line 751
	mov	esi, esp
	lea	eax, DWORD PTR _workingPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _highWaterMark$[ebp]
	call	DWORD PTR __imp_??4ParsePosition@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@parse:
; Line 753
	mov	esi, esp
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _workingPos$[ebp]
	call	DWORD PTR __imp_??4ParsePosition@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 754
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _tempResult$39437[ebp]
	call	??1Formattable@icu_56@@UAE@XZ		; icu_56::Formattable::~Formattable
	jmp	$LN17@parse
$LN3@parse:
; Line 762
	mov	esi, esp
	lea	eax, DWORD PTR _highWaterMark$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	call	DWORD PTR __imp_??4ParsePosition@icu_56@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 764
	mov	BYTE PTR $T46635[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, esp
	lea	ecx, DWORD PTR _workingPos$[ebp]
	call	DWORD PTR __imp_??1ParsePosition@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR _highWaterMark$[ebp]
	call	DWORD PTR __imp_??1ParsePosition@icu_56@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	al, BYTE PTR $T46635[ebp]
$LN11@parse:
; Line 765
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@parse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 808				; 00000328H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN25@parse:
	DD	4
	DD	$LN24@parse
$LN24@parse:
	DD	-44					; ffffffd4H
	DD	12					; 0000000cH
	DD	$LN19@parse
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$LN20@parse
	DD	-308					; fffffeccH
	DD	224					; 000000e0H
	DD	$LN21@parse
	DD	-580					; fffffdbcH
	DD	224					; 000000e0H
	DD	$LN22@parse
$LN22@parse:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN21@parse:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN20@parse:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN19@parse:
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	87					; 00000057H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR _highWaterMark$[ebp]
	call	DWORD PTR __imp_??1ParsePosition@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z$1:
	mov	esi, esp
	lea	ecx, DWORD PTR _workingPos$[ebp]
	call	DWORD PTR __imp_??1ParsePosition@icu_56@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z$2:
	lea	ecx, DWORD PTR _tempResult$39428[ebp]
	jmp	??1Formattable@icu_56@@UAE@XZ		; icu_56::Formattable::~Formattable
__unwindfunclet$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z$3:
	lea	ecx, DWORD PTR _tempResult$39437[ebp]
	jmp	??1Formattable@icu_56@@UAE@XZ		; icu_56::Formattable::~Formattable
__ehhandler$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-812]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?parse@NFRuleSet@icu_56@@QBECABVUnicodeString@2@AAVParsePosition@2@NAAVFormattable@2@@Z ENDP ; icu_56::NFRuleSet::parse
PUBLIC	?appendRules@NFRuleSet@icu_56@@QBEXAAVUnicodeString@2@@Z ; icu_56::NFRuleSet::appendRules
EXTRN	?_appendRuleText@NFRule@icu_56@@QBEXAAVUnicodeString@2@@Z:PROC ; icu_56::NFRule::_appendRuleText
EXTRN	__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z:PROC
EXTRN	__imp_?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?appendRules@NFRuleSet@icu_56@@QBEXAAVUnicodeString@2@@Z
_TEXT	SEGMENT
tv223 = -268						; size = 8
tv220 = -260						; size = 8
tv200 = -260						; size = 8
tv191 = -260						; size = 8
tv182 = -260						; size = 8
_fractionRule$39460 = -56				; size = 4
_fIdx$39456 = -44					; size = 4
_rule$39452 = -32					; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_result$ = 8						; size = 4
?appendRules@NFRuleSet@icu_56@@QBEXAAVUnicodeString@2@@Z PROC ; icu_56::NFRuleSet::appendRules, COMDAT
; _this$ = ecx
; Line 769
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 773
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 774
	mov	esi, esp
	push	58					; 0000003aH
	mov	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 775
	mov	esi, esp
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 778
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@appendRule
$LN13@appendRule:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@appendRule:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN12@appendRule
; Line 779
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	ecx, eax
	call	?_appendRuleText@NFRule@icu_56@@QBEXAAVUnicodeString@2@@Z ; icu_56::NFRule::_appendRuleText
; Line 780
	mov	esi, esp
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 781
	jmp	SHORT $LN13@appendRule
$LN12@appendRule:
; Line 784
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@appendRule
$LN10@appendRule:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@appendRule:
	cmp	DWORD PTR _i$[ebp], 6
	jae	$LN15@appendRule
; Line 785
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+76]
	mov	DWORD PTR _rule$39452[ebp], edx
; Line 786
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+76], 0
	je	$LN8@appendRule
; Line 789
	mov	ecx, DWORD PTR _rule$39452[ebp]
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR tv182[ebp], eax
	mov	DWORD PTR tv182[ebp+4], edx
	cmp	DWORD PTR tv182[ebp], -2		; fffffffeH
	jne	SHORT $LN17@appendRule
	cmp	DWORD PTR tv182[ebp+4], -1
	je	SHORT $LN6@appendRule
$LN17@appendRule:
	mov	ecx, DWORD PTR _rule$39452[ebp]
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR tv191[ebp], eax
	mov	DWORD PTR tv191[ebp+4], edx
	cmp	DWORD PTR tv191[ebp], -3		; fffffffdH
	jne	SHORT $LN18@appendRule
	cmp	DWORD PTR tv191[ebp+4], -1
	je	SHORT $LN6@appendRule
$LN18@appendRule:
	mov	ecx, DWORD PTR _rule$39452[ebp]
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR tv200[ebp], eax
	mov	DWORD PTR tv200[ebp+4], edx
	cmp	DWORD PTR tv200[ebp], -4		; fffffffcH
	jne	$LN7@appendRule
	cmp	DWORD PTR tv200[ebp+4], -1
	jne	$LN7@appendRule
$LN6@appendRule:
; Line 791
	mov	DWORD PTR _fIdx$39456[ebp], 0
	jmp	SHORT $LN5@appendRule
$LN4@appendRule:
	mov	eax, DWORD PTR _fIdx$39456[ebp]
	add	eax, 1
	mov	DWORD PTR _fIdx$39456[ebp], eax
$LN5@appendRule:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	?size@NFRuleList@icu_56@@QBEIXZ		; icu_56::NFRuleList::size
	cmp	DWORD PTR _fIdx$39456[ebp], eax
	jae	SHORT $LN3@appendRule
; Line 792
	mov	eax, DWORD PTR _fIdx$39456[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??ANFRuleList@icu_56@@QBEPAVNFRule@1@I@Z ; icu_56::NFRuleList::operator[]
	mov	DWORD PTR _fractionRule$39460[ebp], eax
; Line 793
	mov	ecx, DWORD PTR _fractionRule$39460[ebp]
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	esi, eax
	mov	edi, edx
	mov	ecx, DWORD PTR _rule$39452[ebp]
	call	?getBaseValue@NFRule@icu_56@@QBE_JXZ	; icu_56::NFRule::getBaseValue
	mov	DWORD PTR tv220[ebp], esi
	mov	DWORD PTR tv220[ebp+4], edi
	mov	DWORD PTR tv223[ebp], eax
	mov	DWORD PTR tv223[ebp+4], edx
	mov	eax, DWORD PTR tv220[ebp]
	cmp	eax, DWORD PTR tv223[ebp]
	jne	SHORT $LN2@appendRule
	mov	ecx, DWORD PTR tv220[ebp+4]
	cmp	ecx, DWORD PTR tv223[ebp+4]
	jne	SHORT $LN2@appendRule
; Line 794
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fractionRule$39460[ebp]
	call	?_appendRuleText@NFRule@icu_56@@QBEXAAVUnicodeString@2@@Z ; icu_56::NFRule::_appendRuleText
; Line 795
	mov	esi, esp
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@appendRule:
; Line 797
	jmp	$LN4@appendRule
$LN3@appendRule:
; Line 799
	jmp	SHORT $LN8@appendRule
$LN7@appendRule:
; Line 800
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rule$39452[ebp]
	call	?_appendRuleText@NFRule@icu_56@@QBEXAAVUnicodeString@2@@Z ; icu_56::NFRule::_appendRuleText
; Line 801
	mov	esi, esp
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@appendRule:
; Line 804
	jmp	$LN10@appendRule
$LN15@appendRule:
; Line 805
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?appendRules@NFRuleSet@icu_56@@QBEXAAVUnicodeString@2@@Z ENDP ; icu_56::NFRuleSet::appendRules
_TEXT	ENDS
EXTRN	__ftol2:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?util64_fromDouble@icu_56@@YA_JN@Z
_TEXT	SEGMENT
tv74 = -237						; size = 1
_neg$39472 = -37					; size = 1
_mant$39468 = -28					; size = 8
_result$ = -12						; size = 8
_d$ = 8							; size = 8
?util64_fromDouble@icu_56@@YA_JN@Z PROC			; icu_56::util64_fromDouble, COMDAT
; Line 809
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 810
	mov	DWORD PTR _result$[ebp], 0
	mov	DWORD PTR _result$[ebp+4], 0
; Line 811
	sub	esp, 8
	fld	QWORD PTR _d$[ebp]
	fstp	QWORD PTR [esp]
	call	_uprv_isNaN_56
	add	esp, 8
	movsx	eax, al
	test	eax, eax
	jne	$LN1@util64_fro
; Line 812
	call	_uprv_maxMantissa_56
	fstp	QWORD PTR _mant$39468[ebp]
; Line 813
	fld	QWORD PTR _mant$39468[ebp]
	fchs
	fcomp	QWORD PTR _d$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@util64_fro
; Line 814
	fld	QWORD PTR _mant$39468[ebp]
	fchs
	fstp	QWORD PTR _d$[ebp]
	jmp	SHORT $LN3@util64_fro
$LN5@util64_fro:
; Line 815
	fld	QWORD PTR _mant$39468[ebp]
	fcomp	QWORD PTR _d$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@util64_fro
; Line 816
	fld	QWORD PTR _mant$39468[ebp]
	fstp	QWORD PTR _d$[ebp]
$LN3@util64_fro:
; Line 818
	fldz
	fcomp	QWORD PTR _d$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN9@util64_fro
	mov	BYTE PTR tv74[ebp], 1
	jmp	SHORT $LN10@util64_fro
$LN9@util64_fro:
	mov	BYTE PTR tv74[ebp], 0
$LN10@util64_fro:
	mov	al, BYTE PTR tv74[ebp]
	mov	BYTE PTR _neg$39472[ebp], al
; Line 819
	movsx	eax, BYTE PTR _neg$39472[ebp]
	test	eax, eax
	je	SHORT $LN2@util64_fro
; Line 820
	fld	QWORD PTR _d$[ebp]
	fchs
	fstp	QWORD PTR _d$[ebp]
$LN2@util64_fro:
; Line 822
	sub	esp, 8
	fld	QWORD PTR _d$[ebp]
	fstp	QWORD PTR [esp]
	call	_uprv_floor_56
	add	esp, 8
	call	__ftol2
	mov	DWORD PTR _result$[ebp], eax
	mov	DWORD PTR _result$[ebp+4], edx
; Line 823
	movsx	eax, BYTE PTR _neg$39472[ebp]
	test	eax, eax
	je	SHORT $LN1@util64_fro
; Line 824
	mov	eax, DWORD PTR _result$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _result$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR _result$[ebp], eax
	mov	DWORD PTR _result$[ebp+4], ecx
$LN1@util64_fro:
; Line 827
	mov	eax, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR _result$[ebp+4]
; Line 828
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?util64_fromDouble@icu_56@@YA_JN@Z ENDP			; icu_56::util64_fromDouble
_TEXT	ENDS
PUBLIC	?util64_pow@icu_56@@YA_JHI@Z			; icu_56::util64_pow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?util64_pow@icu_56@@YA_JHI@Z
_TEXT	SEGMENT
_n$39484 = -12						; size = 8
_r$ = 8							; size = 4
_e$ = 12						; size = 4
?util64_pow@icu_56@@YA_JHI@Z PROC			; icu_56::util64_pow, COMDAT
; Line 830
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 831
	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN6@util64_pow
; Line 832
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN7@util64_pow
	jmp	SHORT $LN7@util64_pow
$LN6@util64_pow:
; Line 833
	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN4@util64_pow
; Line 834
	mov	eax, 1
	xor	edx, edx
	jmp	SHORT $LN7@util64_pow
; Line 835
	jmp	SHORT $LN7@util64_pow
$LN4@util64_pow:
; Line 836
	mov	eax, DWORD PTR _r$[ebp]
	cdq
	mov	DWORD PTR _n$39484[ebp], eax
	mov	DWORD PTR _n$39484[ebp+4], edx
$LN2@util64_pow:
; Line 837
	mov	eax, DWORD PTR _e$[ebp]
	sub	eax, 1
	mov	DWORD PTR _e$[ebp], eax
	je	SHORT $LN1@util64_pow
; Line 838
	mov	eax, DWORD PTR _r$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _n$39484[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _n$39484[ebp]
	push	ecx
	call	__allmul
	mov	DWORD PTR _n$39484[ebp], eax
	mov	DWORD PTR _n$39484[ebp+4], edx
; Line 839
	jmp	SHORT $LN2@util64_pow
$LN1@util64_pow:
; Line 840
	mov	eax, DWORD PTR _n$39484[ebp]
	mov	edx, DWORD PTR _n$39484[ebp+4]
$LN7@util64_pow:
; Line 842
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?util64_pow@icu_56@@YA_JHI@Z ENDP			; icu_56::util64_pow
_TEXT	ENDS
PUBLIC	?util64_tou@icu_56@@YAI_JPA_WIIC@Z		; icu_56::util64_tou
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?util64_tou@icu_56@@YAI_JPA_WIIC@Z
_TEXT	SEGMENT
tv128 = -280						; size = 4
tv82 = -280						; size = 4
_c$39521 = -80						; size = 2
_d$39512 = -68						; size = 4
_m$39511 = -56						; size = 8
_n$39510 = -40						; size = 8
_p$ = -24						; size = 4
_base$ = -12						; size = 8
_w$ = 8							; size = 8
_buf$ = 16						; size = 4
_len$ = 20						; size = 4
_radix$ = 24						; size = 4
_raw$ = 28						; size = 1
?util64_tou@icu_56@@YAI_JPA_WIIC@Z PROC			; icu_56::util64_tou, COMDAT
; Line 976
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 977
	cmp	DWORD PTR _radix$[ebp], 36		; 00000024H
	jbe	SHORT $LN12@util64_tou
; Line 978
	mov	DWORD PTR _radix$[ebp], 36		; 00000024H
	jmp	SHORT $LN11@util64_tou
$LN12@util64_tou:
; Line 979
	cmp	DWORD PTR _radix$[ebp], 2
	jae	SHORT $LN11@util64_tou
; Line 980
	mov	DWORD PTR _radix$[ebp], 2
$LN11@util64_tou:
; Line 982
	mov	eax, DWORD PTR _radix$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _base$[ebp], eax
	mov	DWORD PTR _base$[ebp+4], ecx
; Line 984
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 985
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN9@util64_tou
	cmp	DWORD PTR _w$[ebp+4], 0
	jg	SHORT $LN9@util64_tou
	jl	SHORT $LN19@util64_tou
	cmp	DWORD PTR _w$[ebp], 0
	jae	SHORT $LN9@util64_tou
$LN19@util64_tou:
	cmp	DWORD PTR _radix$[ebp], 10		; 0000000aH
	jne	SHORT $LN9@util64_tou
	movsx	eax, BYTE PTR _raw$[ebp]
	test	eax, eax
	jne	SHORT $LN9@util64_tou
; Line 986
	mov	eax, DWORD PTR _w$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _w$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR _w$[ebp], eax
	mov	DWORD PTR _w$[ebp+4], ecx
; Line 987
	mov	eax, 45					; 0000002dH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
; Line 988
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$[ebp], eax
	jmp	SHORT $LN6@util64_tou
$LN9@util64_tou:
; Line 989
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN6@util64_tou
	mov	eax, DWORD PTR _w$[ebp]
	or	eax, DWORD PTR _w$[ebp+4]
	jne	SHORT $LN6@util64_tou
; Line 990
	movsx	ax, BYTE PTR _raw$[ebp]
	movzx	ecx, ax
	test	ecx, ecx
	je	SHORT $LN15@util64_tou
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN16@util64_tou
$LN15@util64_tou:
	movzx	edx, BYTE PTR _asciiDigits
	mov	DWORD PTR tv82[ebp], edx
$LN16@util64_tou:
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR tv82[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
; Line 991
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$[ebp], eax
$LN6@util64_tou:
; Line 994
	cmp	DWORD PTR _len$[ebp], 0
	je	$LN5@util64_tou
	mov	eax, DWORD PTR _w$[ebp]
	or	eax, DWORD PTR _w$[ebp+4]
	je	$LN5@util64_tou
; Line 995
	mov	eax, DWORD PTR _base$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	__alldiv
	mov	DWORD PTR _n$39510[ebp], eax
	mov	DWORD PTR _n$39510[ebp+4], edx
; Line 996
	mov	eax, DWORD PTR _base$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$39510[ebp+4]
	push	edx
	mov	eax, DWORD PTR _n$39510[ebp]
	push	eax
	call	__allmul
	mov	DWORD PTR _m$39511[ebp], eax
	mov	DWORD PTR _m$39511[ebp+4], edx
; Line 997
	mov	eax, DWORD PTR _w$[ebp]
	sub	eax, DWORD PTR _m$39511[ebp]
	mov	ecx, DWORD PTR _w$[ebp+4]
	sbb	ecx, DWORD PTR _m$39511[ebp+4]
	mov	DWORD PTR _d$39512[ebp], eax
; Line 998
	movsx	eax, BYTE PTR _raw$[ebp]
	test	eax, eax
	je	SHORT $LN17@util64_tou
	mov	ecx, DWORD PTR _d$39512[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	jmp	SHORT $LN18@util64_tou
$LN17@util64_tou:
	mov	edx, DWORD PTR _d$39512[ebp]
	movzx	eax, BYTE PTR _asciiDigits[edx]
	mov	DWORD PTR tv128[ebp], eax
$LN18@util64_tou:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR tv128[ebp]
	mov	WORD PTR [ecx], dx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 999
	mov	eax, DWORD PTR _n$39510[ebp]
	mov	DWORD PTR _w$[ebp], eax
	mov	ecx, DWORD PTR _n$39510[ebp+4]
	mov	DWORD PTR _w$[ebp+4], ecx
; Line 1000
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 1001
	jmp	$LN6@util64_tou
$LN5@util64_tou:
; Line 1002
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN4@util64_tou
; Line 1003
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx], ax
$LN4@util64_tou:
; Line 1006
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _buf$[ebp]
	sar	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 1007
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN2@util64_tou
; Line 1008
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 2
	mov	DWORD PTR _buf$[ebp], eax
$LN2@util64_tou:
; Line 1010
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _buf$[ebp]
	jbe	SHORT $LN1@util64_tou
; Line 1011
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$39521[ebp], cx
; Line 1012
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
; Line 1013
	mov	eax, DWORD PTR _buf$[ebp]
	mov	cx, WORD PTR _c$39521[ebp]
	mov	WORD PTR [eax], cx
; Line 1014
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 2
	mov	DWORD PTR _buf$[ebp], eax
; Line 1015
	jmp	SHORT $LN2@util64_tou
$LN1@util64_tou:
; Line 1017
	mov	eax, DWORD PTR _len$[ebp]
; Line 1018
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?util64_tou@icu_56@@YAI_JPA_WIIC@Z ENDP			; icu_56::util64_tou
_TEXT	ENDS
END
