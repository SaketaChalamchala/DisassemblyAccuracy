; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\pkgdata\pkgtypes.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_pkg_writeCharListWrap
EXTRN	_T_FileStream_write:PROC
EXTRN	_strcat:PROC
EXTRN	__imp__strncat:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
; File d:\mozilla\intl\icu\source\tools\pkgdata\pkgtypes.c
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _pkg_writeCharListWrap
_TEXT	SEGMENT
_buffer$ = -1044					; size = 1024
_ln$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_l$ = 12						; size = 4
_delim$ = 16						; size = 4
_brk$ = 20						; size = 4
_quote$ = 24						; size = 4
_pkg_writeCharListWrap PROC				; COMDAT
; Line 28
	push	ebp
	mov	ebp, esp
	sub	esp, 1240				; 000004d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1240]
	mov	ecx, 310				; 00000136H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 29
	mov	DWORD PTR _ln$[ebp], 0
$LN12@pkg_writeC:
; Line 31
	cmp	DWORD PTR _l$[ebp], 0
	je	$LN11@pkg_writeC
; Line 33
	mov	eax, DWORD PTR _l$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN10@pkg_writeC
; Line 35
	push	1
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	push	1020					; 000003fcH
	mov	edx, DWORD PTR _l$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 36
	mov	BYTE PTR _buffer$[ebp+1019], 0
; Line 38
	cmp	DWORD PTR _quote$[ebp], 0
	jge	SHORT $LN9@pkg_writeC
; Line 39
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movsx	ecx, BYTE PTR _buffer$[ebp+eax-1]
	cmp	ecx, 34					; 00000022H
	jne	SHORT $LN8@pkg_writeC
; Line 40
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _buffer$[ebp+eax-1], 0
$LN8@pkg_writeC:
; Line 42
	movsx	eax, BYTE PTR _buffer$[ebp]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN7@pkg_writeC
; Line 43
	lea	eax, DWORD PTR _buffer$[ebp+1]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN7@pkg_writeC:
; Line 44
	jmp	$LN6@pkg_writeC
$LN9@pkg_writeC:
; Line 45
	cmp	DWORD PTR _quote$[ebp], 0
	jle	$LN6@pkg_writeC
; Line 46
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 34					; 00000022H
	je	SHORT $LN4@pkg_writeC
; Line 47
	push	OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 48
	push	1
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	push	1020					; 000003fcH
	mov	edx, DWORD PTR _l$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncat
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@pkg_writeC:
; Line 50
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [edx]
	movsx	edx, BYTE PTR [ecx+eax-1]
	cmp	edx, 34					; 00000022H
	je	SHORT $LN6@pkg_writeC
; Line 51
	push	OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
$LN6@pkg_writeC:
; Line 54
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_T_FileStream_write
	add	esp, 12					; 0000000cH
; Line 56
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _ln$[ebp]
	mov	DWORD PTR _ln$[ebp], eax
$LN10@pkg_writeC:
; Line 59
	mov	eax, DWORD PTR _l$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@pkg_writeC
	cmp	DWORD PTR _delim$[ebp], 0
	je	SHORT $LN2@pkg_writeC
; Line 61
	cmp	DWORD PTR _ln$[ebp], 60			; 0000003cH
	jle	SHORT $LN1@pkg_writeC
	cmp	DWORD PTR _brk$[ebp], 0
	je	SHORT $LN1@pkg_writeC
; Line 62
	mov	DWORD PTR _ln$[ebp], 0
; Line 63
	mov	eax, DWORD PTR _brk$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _brk$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_T_FileStream_write
	add	esp, 12					; 0000000cH
$LN1@pkg_writeC:
; Line 65
	mov	eax, DWORD PTR _delim$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _delim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_T_FileStream_write
	add	esp, 12					; 0000000cH
$LN2@pkg_writeC:
; Line 67
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _l$[ebp], ecx
; Line 68
	jmp	$LN12@pkg_writeC
$LN11@pkg_writeC:
; Line 69
	xor	eax, eax
; Line 70
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@pkg_writeC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1240				; 000004d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@pkg_writeC:
	DD	1
	DD	$LN16@pkg_writeC
$LN16@pkg_writeC:
	DD	-1044					; fffffbecH
	DD	1024					; 00000400H
	DD	$LN15@pkg_writeC
$LN15@pkg_writeC:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_pkg_writeCharListWrap ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EA@LCGHKMPN@?$CFs?3?$CFd?3?5Internal?5error?0?5line?5too?5@ ; `string'
PUBLIC	??_C@_0DE@BCCCKHNP@d?3?2mozilla?2intl?2icu?2source?2tools@ ; `string'
PUBLIC	?__LINE__Var@?1??pkg_writeCharList@@9@9		; `pkg_writeCharList'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
PUBLIC	_pkg_writeCharList
EXTRN	__imp__exit:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
;	COMDAT ??_C@_0EA@LCGHKMPN@?$CFs?3?$CFd?3?5Internal?5error?0?5line?5too?5@
CONST	SEGMENT
??_C@_0EA@LCGHKMPN@?$CFs?3?$CFd?3?5Internal?5error?0?5line?5too?5@ DB '%s'
	DB	':%d: Internal error, line too long (greater than 1023 chars)', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@BCCCKHNP@d?3?2mozilla?2intl?2icu?2source?2tools@
CONST	SEGMENT
??_C@_0DE@BCCCKHNP@d?3?2mozilla?2intl?2icu?2source?2tools@ DB 'd:\mozilla'
	DB	'\intl\icu\source\tools\pkgdata\pkgtypes.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??pkg_writeCharList@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??pkg_writeCharList@@9@9 DD 04aH		; `pkg_writeCharList'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _pkg_writeCharList
_TEXT	SEGMENT
_buffer$ = -1032					; size = 1024
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_l$ = 12						; size = 4
_delim$ = 16						; size = 4
_quote$ = 20						; size = 4
_pkg_writeCharList PROC					; COMDAT
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 1228				; 000004ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1228]
	mov	ecx, 307				; 00000133H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
$LN12@pkg_writeC@2:
; Line 76
	cmp	DWORD PTR _l$[ebp], 0
	je	$LN11@pkg_writeC@2
; Line 78
	mov	eax, DWORD PTR _l$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN10@pkg_writeC@2
; Line 80
	push	1
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	push	1023					; 000003ffH
	mov	edx, DWORD PTR _l$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 81
	mov	BYTE PTR _buffer$[ebp+1023], 0
; Line 82
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	cmp	eax, 1023				; 000003ffH
	jb	SHORT $LN9@pkg_writeC@2
; Line 85
	mov	eax, DWORD PTR ?__LINE__Var@?1??pkg_writeCharList@@9@9
	add	eax, 11					; 0000000bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0DE@BCCCKHNP@d?3?2mozilla?2intl?2icu?2source?2tools@
	push	OFFSET ??_C@_0EA@LCGHKMPN@?$CFs?3?$CFd?3?5Internal?5error?0?5line?5too?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 86
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@pkg_writeC@2:
; Line 88
	cmp	DWORD PTR _quote$[ebp], 0
	jge	SHORT $LN8@pkg_writeC@2
; Line 89
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movsx	ecx, BYTE PTR _buffer$[ebp+eax-1]
	cmp	ecx, 34					; 00000022H
	jne	SHORT $LN7@pkg_writeC@2
; Line 90
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _buffer$[ebp+eax-1], 0
$LN7@pkg_writeC@2:
; Line 92
	movsx	eax, BYTE PTR _buffer$[ebp]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN6@pkg_writeC@2
; Line 93
	lea	eax, DWORD PTR _buffer$[ebp+1]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN6@pkg_writeC@2:
; Line 94
	jmp	SHORT $LN5@pkg_writeC@2
$LN8@pkg_writeC@2:
; Line 95
	cmp	DWORD PTR _quote$[ebp], 0
	jle	SHORT $LN5@pkg_writeC@2
; Line 96
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 34					; 00000022H
	je	SHORT $LN3@pkg_writeC@2
; Line 97
	push	OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 98
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
$LN3@pkg_writeC@2:
; Line 100
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [edx]
	movsx	edx, BYTE PTR [ecx+eax-1]
	cmp	edx, 34					; 00000022H
	je	SHORT $LN5@pkg_writeC@2
; Line 101
	push	OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
$LN5@pkg_writeC@2:
; Line 104
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_T_FileStream_write
	add	esp, 12					; 0000000cH
$LN10@pkg_writeC@2:
; Line 107
	mov	eax, DWORD PTR _l$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@pkg_writeC@2
	cmp	DWORD PTR _delim$[ebp], 0
	je	SHORT $LN1@pkg_writeC@2
; Line 109
	mov	eax, DWORD PTR _delim$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _delim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_T_FileStream_write
	add	esp, 12					; 0000000cH
$LN1@pkg_writeC@2:
; Line 111
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _l$[ebp], ecx
; Line 112
	jmp	$LN12@pkg_writeC@2
$LN11@pkg_writeC@2:
; Line 113
	xor	eax, eax
$LN14@pkg_writeC@2:
; Line 114
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@pkg_writeC@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1228				; 000004ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@pkg_writeC@2:
	DD	1
	DD	$LN16@pkg_writeC@2
$LN16@pkg_writeC@2:
	DD	-1032					; fffffbf8H
	DD	1024					; 00000400H
	DD	$LN15@pkg_writeC@2
$LN15@pkg_writeC@2:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_pkg_writeCharList ENDP
_TEXT	ENDS
PUBLIC	_pkg_countCharList
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _pkg_countCharList
_TEXT	SEGMENT
_c$ = -8						; size = 4
_l$ = 8							; size = 4
_pkg_countCharList PROC					; COMDAT
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 122
	mov	DWORD PTR _c$[ebp], 0
$LN2@pkg_countC:
; Line 123
	cmp	DWORD PTR _l$[ebp], 0
	je	SHORT $LN1@pkg_countC
; Line 125
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 126
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _l$[ebp], ecx
; Line 127
	jmp	SHORT $LN2@pkg_countC
$LN1@pkg_countC:
; Line 129
	mov	eax, DWORD PTR _c$[ebp]
; Line 130
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_pkg_countCharList ENDP
_TEXT	ENDS
PUBLIC	_pkg_prependToList
EXTRN	_uprv_malloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _pkg_prependToList
_TEXT	SEGMENT
_newList$ = -8						; size = 4
_l$ = 8							; size = 4
_str$ = 12						; size = 4
_pkg_prependToList PROC					; COMDAT
; Line 136
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 138
	push	8
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _newList$[ebp], eax
; Line 141
	cmp	DWORD PTR _newList$[ebp], 0
	jne	SHORT $LN1@pkg_prepen
; Line 142
	xor	eax, eax
	jmp	SHORT $LN2@pkg_prepen
$LN1@pkg_prepen:
; Line 145
	mov	eax, DWORD PTR _newList$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 146
	mov	eax, DWORD PTR _newList$[ebp]
	mov	ecx, DWORD PTR _l$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 147
	mov	eax, DWORD PTR _newList$[ebp]
$LN2@pkg_prepen:
; Line 148
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pkg_prependToList ENDP
_TEXT	ENDS
PUBLIC	_pkg_appendToList
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _pkg_appendToList
_TEXT	SEGMENT
_tmp$ = -20						; size = 4
_endptr$ = -8						; size = 4
_l$ = 8							; size = 4
_end$ = 12						; size = 4
_str$ = 16						; size = 4
_pkg_appendToList PROC					; COMDAT
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 157
	mov	DWORD PTR _endptr$[ebp], 0
; Line 159
	cmp	DWORD PTR _end$[ebp], 0
	jne	SHORT $LN8@pkg_append
; Line 161
	lea	eax, DWORD PTR _endptr$[ebp]
	mov	DWORD PTR _end$[ebp], eax
$LN8@pkg_append:
; Line 165
	mov	eax, DWORD PTR _end$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@pkg_append
	cmp	DWORD PTR _l$[ebp], 0
	je	SHORT $LN7@pkg_append
; Line 167
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR _tmp$[ebp], eax
$LN6@pkg_append:
; Line 168
	mov	eax, DWORD PTR _tmp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@pkg_append
; Line 170
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _tmp$[ebp], ecx
; Line 171
	jmp	SHORT $LN6@pkg_append
$LN5@pkg_append:
; Line 173
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@pkg_append:
; Line 177
	cmp	DWORD PTR _l$[ebp], 0
	jne	SHORT $LN4@pkg_append
; Line 179
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	push	0
	call	_pkg_prependToList
	add	esp, 8
	mov	DWORD PTR _l$[ebp], eax
; Line 181
	jmp	SHORT $LN3@pkg_append
$LN4@pkg_append:
; Line 183
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	push	0
	call	_pkg_prependToList
	add	esp, 8
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax
$LN3@pkg_append:
; Line 187
	mov	eax, DWORD PTR _end$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@pkg_append
; Line 189
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
; Line 191
	jmp	SHORT $LN1@pkg_append
$LN2@pkg_append:
; Line 193
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _l$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@pkg_append:
; Line 196
	mov	eax, DWORD PTR _l$[ebp]
; Line 197
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@pkg_append
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@pkg_append:
	DD	1
	DD	$LN12@pkg_append
$LN12@pkg_append:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN11@pkg_append
$LN11@pkg_append:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_pkg_appendToList ENDP
_TEXT	ENDS
PUBLIC	_convertToNativePathSeparators
EXTRN	__imp__strchr:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _convertToNativePathSeparators
_TEXT	SEGMENT
_itr$ = -8						; size = 4
_path$ = 8						; size = 4
_convertToNativePathSeparators PROC			; COMDAT
; Line 199
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@convertToN:
; Line 202
	mov	esi, esp
	push	47					; 0000002fH
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	call	DWORD PTR __imp__strchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _itr$[ebp], eax
	cmp	DWORD PTR _itr$[ebp], 0
	je	SHORT $LN1@convertToN
; Line 203
	mov	eax, DWORD PTR _itr$[ebp]
	mov	BYTE PTR [eax], 92			; 0000005cH
; Line 204
	jmp	SHORT $LN2@convertToN
$LN1@convertToN:
; Line 206
	mov	eax, DWORD PTR _path$[ebp]
; Line 207
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_convertToNativePathSeparators ENDP
_TEXT	ENDS
PUBLIC	_pkg_listContains
PUBLIC	??_C@_0CG@LLLLPABP@?$CD?$CD?5ERR?3?5Path?5too?5long?5?$FL?$CFd?5chars?$FN@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_pkg_appendUniqueDirToList
EXTRN	_uprv_strdup_56:PROC
EXTRN	__imp__strrchr:PROC
;	COMDAT ??_C@_0CG@LLLLPABP@?$CD?$CD?5ERR?3?5Path?5too?5long?5?$FL?$CFd?5chars?$FN@
CONST	SEGMENT
??_C@_0CG@LLLLPABP@?$CD?$CD?5ERR?3?5Path?5too?5long?5?$FL?$CFd?5chars?$FN@ DB '#'
	DB	'# ERR: Path too long [%d chars]: %s', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _pkg_appendUniqueDirToList
_TEXT	SEGMENT
_aPtr$9254 = -1056					; size = 4
_rPtr$ = -1044						; size = 4
_aBuf$ = -1032						; size = 1024
__$ArrayPad$ = -4					; size = 4
_l$ = 8							; size = 4
_end$ = 12						; size = 4
_strAlias$ = 16						; size = 4
_pkg_appendUniqueDirToList PROC				; COMDAT
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 1252				; 000004e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1252]
	mov	ecx, 313				; 00000139H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 212
	mov	esi, esp
	push	92					; 0000005cH
	mov	eax, DWORD PTR _strAlias$[ebp]
	push	eax
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rPtr$[ebp], eax
; Line 215
	mov	esi, esp
	push	47					; 0000002fH
	mov	eax, DWORD PTR _strAlias$[ebp]
	push	eax
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _aPtr$9254[ebp], eax
; Line 217
	cmp	DWORD PTR _rPtr$[ebp], 0
	je	SHORT $LN5@pkg_append@2
	cmp	DWORD PTR _aPtr$9254[ebp], 0
	je	SHORT $LN6@pkg_append@2
	mov	eax, DWORD PTR _aPtr$9254[ebp]
	cmp	eax, DWORD PTR _rPtr$[ebp]
	jbe	SHORT $LN6@pkg_append@2
$LN5@pkg_append@2:
; Line 219
	mov	eax, DWORD PTR _aPtr$9254[ebp]
	mov	DWORD PTR _rPtr$[ebp], eax
$LN6@pkg_append@2:
; Line 223
	cmp	DWORD PTR _rPtr$[ebp], 0
	jne	SHORT $LN4@pkg_append@2
; Line 224
	mov	eax, DWORD PTR _l$[ebp]
	jmp	$LN7@pkg_append@2
$LN4@pkg_append@2:
; Line 226
	mov	eax, DWORD PTR _rPtr$[ebp]
	sub	eax, DWORD PTR _strAlias$[ebp]
	cmp	eax, 1024				; 00000400H
	jb	SHORT $LN3@pkg_append@2
; Line 227
	mov	esi, esp
	mov	eax, DWORD PTR _strAlias$[ebp]
	push	eax
	push	1024					; 00000400H
	push	OFFSET ??_C@_0CG@LLLLPABP@?$CD?$CD?5ERR?3?5Path?5too?5long?5?$FL?$CFd?5chars?$FN@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 228
	mov	eax, DWORD PTR _l$[ebp]
	jmp	$LN7@pkg_append@2
$LN3@pkg_append@2:
; Line 230
	mov	eax, DWORD PTR _rPtr$[ebp]
	sub	eax, DWORD PTR _strAlias$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _strAlias$[ebp]
	push	ecx
	lea	edx, DWORD PTR _aBuf$[ebp]
	push	edx
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 231
	mov	eax, DWORD PTR _rPtr$[ebp]
	sub	eax, DWORD PTR _strAlias$[ebp]
	mov	BYTE PTR _aBuf$[ebp+eax], 0
; Line 232
	lea	eax, DWORD PTR _aBuf$[ebp]
	push	eax
	call	_convertToNativePathSeparators
	add	esp, 4
; Line 234
	lea	eax, DWORD PTR _aBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _l$[ebp]
	push	ecx
	call	_pkg_listContains
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN2@pkg_append@2
; Line 235
	lea	eax, DWORD PTR _aBuf$[ebp]
	push	eax
	call	_uprv_strdup_56
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l$[ebp]
	push	edx
	call	_pkg_appendToList
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN7@pkg_append@2
; Line 236
	jmp	SHORT $LN7@pkg_append@2
$LN2@pkg_append@2:
; Line 237
	mov	eax, DWORD PTR _l$[ebp]
$LN7@pkg_append@2:
; Line 239
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@pkg_append@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1252				; 000004e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@pkg_append@2:
	DD	1
	DD	$LN10@pkg_append@2
$LN10@pkg_append@2:
	DD	-1032					; fffffbf8H
	DD	1024					; 00000400H
	DD	$LN9@pkg_append@2
$LN9@pkg_append@2:
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_pkg_appendUniqueDirToList ENDP
_TEXT	ENDS
PUBLIC	_pkg_deleteList
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _pkg_deleteList
_TEXT	SEGMENT
_tmp$ = -8						; size = 4
_l$ = 8							; size = 4
_pkg_deleteList PROC					; COMDAT
; Line 280
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@pkg_delete:
; Line 282
	cmp	DWORD PTR _l$[ebp], 0
	je	SHORT $LN3@pkg_delete
; Line 284
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 285
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR _tmp$[ebp], eax
; Line 286
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _l$[ebp], ecx
; Line 287
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 288
	jmp	SHORT $LN2@pkg_delete
$LN3@pkg_delete:
; Line 289
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pkg_deleteList ENDP
_TEXT	ENDS
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _pkg_listContains
_TEXT	SEGMENT
_l$ = 8							; size = 4
_str$ = 12						; size = 4
_pkg_listContains PROC					; COMDAT
; Line 292
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 293
	jmp	SHORT $LN4@pkg_listCo
$LN3@pkg_listCo:
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _l$[ebp], ecx
$LN4@pkg_listCo:
	cmp	DWORD PTR _l$[ebp], 0
	je	SHORT $LN2@pkg_listCo
; Line 294
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _l$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@pkg_listCo
; Line 295
	mov	al, 1
	jmp	SHORT $LN5@pkg_listCo
$LN1@pkg_listCo:
; Line 297
	jmp	SHORT $LN3@pkg_listCo
$LN2@pkg_listCo:
; Line 299
	xor	al, al
$LN5@pkg_listCo:
; Line 300
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pkg_listContains ENDP
_TEXT	ENDS
END
