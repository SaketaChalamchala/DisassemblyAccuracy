; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\toolutil\swapimpl.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
EXTRN	_uspoof_swap_56:PROC
EXTRN	_uchar_swapNames_56:PROC
EXTRN	_udict_swap_56:PROC
EXTRN	_ubrk_swap_56:PROC
EXTRN	_ucol_swapInverseUCA_56:PROC
EXTRN	_ucol_swap_56:PROC
EXTRN	_unorm2_swap_56:PROC
EXTRN	_usprep_swap_56:PROC
EXTRN	_ucnv_swapAliases_56:PROC
EXTRN	_ucnv_swap_56:PROC
EXTRN	_ures_swap_56:PROC
CONST	SEGMENT
_swapFns DB	052H
	DB	065H
	DB	073H
	DB	042H
	DD	FLAT:_ures_swap_56
	DB	063H
	DB	06eH
	DB	076H
	DB	074H
	DD	FLAT:_ucnv_swap_56
	DB	043H
	DB	076H
	DB	041H
	DB	06cH
	DD	FLAT:_ucnv_swapAliases_56
	DB	053H
	DB	050H
	DB	052H
	DB	050H
	DD	FLAT:_usprep_swap_56
	DB	055H
	DB	050H
	DB	072H
	DB	06fH
	DD	FLAT:?uprops_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
	DB	063H
	DB	041H
	DB	053H
	DB	045H
	DD	FLAT:?ucase_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
	DB	042H
	DB	069H
	DB	044H
	DB	069H
	DD	FLAT:?ubidi_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
	DB	04eH
	DB	06fH
	DB	072H
	DB	06dH
	DD	FLAT:?unorm_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
	DB	04eH
	DB	072H
	DB	06dH
	DB	032H
	DD	FLAT:_unorm2_swap_56
	DB	055H
	DB	043H
	DB	06fH
	DB	06cH
	DD	FLAT:_ucol_swap_56
	DB	049H
	DB	06eH
	DB	076H
	DB	043H
	DD	FLAT:_ucol_swapInverseUCA_56
	DB	042H
	DB	072H
	DB	06bH
	DB	020H
	DD	FLAT:_ubrk_swap_56
	DB	044H
	DB	069H
	DB	063H
	DB	074H
	DD	FLAT:_udict_swap_56
	DB	070H
	DB	06eH
	DB	061H
	DB	06dH
	DD	FLAT:?upname_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
	DB	075H
	DB	06eH
	DB	061H
	DB	06dH
	DD	FLAT:_uchar_swapNames_56
	DB	043H
	DB	066H
	DB	075H
	DB	020H
	DD	FLAT:_uspoof_swap_56
	DB	054H
	DB	065H
	DB	073H
	DB	074H
	DD	FLAT:?test_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	_uprv_isInvariantUnicodeString
EXTRN	_uprv_isInvariantUString_56:PROC
EXTRN	__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ:PROC
EXTRN	__imp_?length@UnicodeString@icu_56@@QBEHXZ:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\uinvchar.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _uprv_isInvariantUnicodeString
_TEXT	SEGMENT
_s$ = 8							; size = 4
_uprv_isInvariantUnicodeString PROC			; COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 65
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?length@UnicodeString@icu_56@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_uprv_isInvariantUString_56
	add	esp, 8
; Line 66
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_isInvariantUnicodeString ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EN@CLKDOLBP@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@ ; `string'
PUBLIC	??_C@_0DP@MDBJMEFK@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@ ; `string'
PUBLIC	??_C@_0GG@OMBLPIJI@upname_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@ ; `string'
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_udata_readInt32_56:PROC
EXTRN	_udata_printError_56:PROC
EXTRN	_udata_swapDataHeader_56:PROC
;	COMDAT ??_C@_0EN@CLKDOLBP@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@
; File d:\mozilla\intl\icu\source\tools\toolutil\swapimpl.cpp
CONST	SEGMENT
??_C@_0EN@CLKDOLBP@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@ DB 'u'
	DB	'pname_swap(): too few bytes (%d after header, should be %d) f'
	DB	'or pnames.icu', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@MDBJMEFK@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@
CONST	SEGMENT
??_C@_0DP@MDBJMEFK@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@ DB 'u'
	DB	'pname_swap(): too few bytes (%d after header) for pnames.icu', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@OMBLPIJI@upname_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@
CONST	SEGMENT
??_C@_0GG@OMBLPIJI@upname_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@ DB 'up'
	DB	'name_swap(): data format %02x.%02x.%02x.%02x (format version '
	DB	'%02x) is not recognized as pnames.icu', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?upname_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_numBytesIndexesAndValueMaps$55525 = -80		; size = 4
_totalSize$ = -68					; size = 4
_inIndexes$ = -56					; size = 4
_outBytes$ = -44					; size = 4
_inBytes$ = -32						; size = 4
_pInfo$ = -20						; size = 4
_headerSize$ = -8					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
?upname_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z PROC ; upname_swap, COMDAT
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 77
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _headerSize$[ebp], eax
; Line 78
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN8@upname_swa
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN9@upname_swa
$LN8@upname_swa:
; Line 79
	xor	eax, eax
	jmp	$LN10@upname_swa
$LN9@upname_swa:
; Line 85
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pInfo$[ebp], eax
; Line 92
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 112				; 00000070H
	jne	SHORT $LN6@upname_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 110				; 0000006eH
	jne	SHORT $LN6@upname_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 97					; 00000061H
	jne	SHORT $LN6@upname_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 109				; 0000006dH
	jne	SHORT $LN6@upname_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 2
	je	SHORT $LN7@upname_swa
$LN6@upname_swa:
; Line 96
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0GG@OMBLPIJI@upname_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 28					; 0000001cH
; Line 97
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 98
	xor	eax, eax
	jmp	$LN10@upname_swa
$LN7@upname_swa:
; Line 101
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _inBytes$[ebp], eax
; Line 102
	mov	eax, DWORD PTR _outData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _outBytes$[ebp], eax
; Line 104
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN5@upname_swa
; Line 105
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 107
	cmp	DWORD PTR _length$[ebp], 32		; 00000020H
	jge	SHORT $LN5@upname_swa
; Line 109
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0DP@MDBJMEFK@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 110
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 111
	xor	eax, eax
	jmp	$LN10@upname_swa
$LN5@upname_swa:
; Line 115
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	DWORD PTR _inIndexes$[ebp], eax
; Line 116
	mov	eax, DWORD PTR _inIndexes$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _totalSize$[ebp], eax
; Line 117
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN3@upname_swa
; Line 118
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _totalSize$[ebp]
	jge	SHORT $LN2@upname_swa
; Line 121
	mov	eax, DWORD PTR _totalSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EN@CLKDOLBP@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 122
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 123
	xor	eax, eax
	jmp	SHORT $LN10@upname_swa
$LN2@upname_swa:
; Line 127
	mov	eax, DWORD PTR _inIndexes$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _numBytesIndexesAndValueMaps$55525[ebp], eax
; Line 130
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numBytesIndexesAndValueMaps$55525[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 133
	mov	eax, DWORD PTR _inBytes$[ebp]
	cmp	eax, DWORD PTR _outBytes$[ebp]
	je	SHORT $LN3@upname_swa
; Line 136
	push	1
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _numBytesIndexesAndValueMaps$55525[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _totalSize$[ebp]
	sub	ecx, DWORD PTR _numBytesIndexesAndValueMaps$55525[ebp]
	push	ecx
	mov	edx, DWORD PTR _inBytes$[ebp]
	add	edx, DWORD PTR _numBytesIndexesAndValueMaps$55525[ebp]
	push	edx
	mov	eax, DWORD PTR _outBytes$[ebp]
	add	eax, DWORD PTR _numBytesIndexesAndValueMaps$55525[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@upname_swa:
; Line 152
	mov	eax, DWORD PTR _headerSize$[ebp]
	add	eax, DWORD PTR _totalSize$[ebp]
$LN10@upname_swa:
; Line 153
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?upname_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z ENDP ; upname_swap
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\include\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	??_C@_0EO@NONMGKAC@uprops_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@ ; `string'
PUBLIC	??_C@_0GH@CMFJJHCK@uprops_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	_utrie2_swapAnyVersion_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_0EO@NONMGKAC@uprops_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@
; File d:\mozilla\intl\icu\source\tools\toolutil\swapimpl.cpp
CONST	SEGMENT
??_C@_0EO@NONMGKAC@uprops_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@ DB 'u'
	DB	'props_swap(): too few bytes (%d after header) for a Unicode p'
	DB	'roperties file', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@CMFJJHCK@uprops_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@
CONST	SEGMENT
??_C@_0GH@CMFJJHCK@uprops_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@ DB 'up'
	DB	'rops_swap(): data format %02x.%02x.%02x.%02x (format version '
	DB	'%02x) is not a Unicode properties file', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?uprops_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_outData32$55557 = -144					; size = 4
_dataTop$ = -132					; size = 4
_inData32$ = -120					; size = 4
_dataIndexes$ = -108					; size = 64
_i$ = -36						; size = 4
_headerSize$ = -24					; size = 4
_pInfo$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
?uprops_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z PROC ; uprops_swap, COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 168
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _headerSize$[ebp], eax
; Line 169
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN14@uprops_swa
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN15@uprops_swa
$LN14@uprops_swa:
; Line 170
	xor	eax, eax
	jmp	$LN16@uprops_swa
$LN15@uprops_swa:
; Line 174
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pInfo$[ebp], eax
; Line 184
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 85					; 00000055H
	jne	SHORT $LN12@uprops_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 80					; 00000050H
	jne	SHORT $LN12@uprops_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 114				; 00000072H
	jne	SHORT $LN12@uprops_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 111				; 0000006fH
	jne	SHORT $LN12@uprops_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 3
	jl	SHORT $LN12@uprops_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 7
	jg	SHORT $LN12@uprops_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 7
	jge	SHORT $LN13@uprops_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	cmp	ecx, 5
	jne	SHORT $LN12@uprops_swa
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	cmp	ecx, 2
	je	SHORT $LN13@uprops_swa
$LN12@uprops_swa:
; Line 188
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0GH@CMFJJHCK@uprops_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 28					; 0000001cH
; Line 189
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 190
	xor	eax, eax
	jmp	$LN16@uprops_swa
$LN13@uprops_swa:
; Line 194
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN10@uprops_swa
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN10@uprops_swa
; Line 196
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	push	eax
	push	OFFSET ??_C@_0EO@NONMGKAC@uprops_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 197
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 198
	xor	eax, eax
	jmp	$LN16@uprops_swa
$LN10@uprops_swa:
; Line 202
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _inData32$[ebp], eax
; Line 203
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@uprops_swa
$LN8@uprops_swa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@uprops_swa:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN7@uprops_swa
; Line 204
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _inData32$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_readInt32_56
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _dataIndexes$[ebp+ecx*4], eax
; Line 205
	jmp	SHORT $LN8@uprops_swa
$LN7@uprops_swa:
; Line 212
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN6@uprops_swa
; Line 220
	mov	DWORD PTR _i$[ebp], 9
	jmp	SHORT $LN5@uprops_swa
$LN4@uprops_swa:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@uprops_swa:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN3@uprops_swa
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dataIndexes$[ebp+eax*4]
	mov	DWORD PTR _dataTop$[ebp], ecx
	cmp	DWORD PTR _dataTop$[ebp], 0
	jne	SHORT $LN3@uprops_swa
	jmp	SHORT $LN4@uprops_swa
$LN3@uprops_swa:
; Line 222
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	mov	ecx, DWORD PTR _dataTop$[ebp]
	shl	ecx, 2
	cmp	eax, ecx
	jge	SHORT $LN2@uprops_swa
; Line 224
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	push	eax
	push	OFFSET ??_C@_0EO@NONMGKAC@uprops_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 225
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 226
	xor	eax, eax
	jmp	$LN16@uprops_swa
$LN2@uprops_swa:
; Line 229
	mov	eax, DWORD PTR _outData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _outData32$55557[ebp], eax
; Line 232
	mov	eax, DWORD PTR _inData32$[ebp]
	cmp	eax, DWORD PTR _outData32$55557[ebp]
	je	SHORT $LN1@uprops_swa
; Line 233
	push	1
	mov	eax, DWORD PTR _inData32$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _dataTop$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _inData32$[ebp]
	push	edx
	mov	eax, DWORD PTR _outData32$55557[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@uprops_swa:
; Line 237
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData32$55557[ebp]
	push	ecx
	push	64					; 00000040H
	mov	edx, DWORD PTR _inData32$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 247
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData32$55557[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	edx, DWORD PTR _dataIndexes$[ebp]
	lea	eax, DWORD PTR [edx*4-64]
	push	eax
	mov	ecx, DWORD PTR _inData32$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_utrie2_swapAnyVersion_56
	add	esp, 20					; 00000014H
; Line 258
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataIndexes$[ebp]
	mov	edx, DWORD PTR _outData32$55557[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _dataIndexes$[ebp+8]
	sub	ecx, DWORD PTR _dataIndexes$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _dataIndexes$[ebp]
	mov	eax, DWORD PTR _inData32$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 268
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataIndexes$[ebp+8]
	mov	edx, DWORD PTR _outData32$55557[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _dataIndexes$[ebp+12]
	sub	ecx, DWORD PTR _dataIndexes$[ebp+8]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _dataIndexes$[ebp+8]
	mov	eax, DWORD PTR _inData32$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 278
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataIndexes$[ebp+12]
	mov	edx, DWORD PTR _outData32$55557[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _dataIndexes$[ebp+16]
	sub	ecx, DWORD PTR _dataIndexes$[ebp+12]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _dataIndexes$[ebp+12]
	mov	eax, DWORD PTR _inData32$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_utrie2_swapAnyVersion_56
	add	esp, 20					; 00000014H
; Line 288
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataIndexes$[ebp+16]
	mov	edx, DWORD PTR _outData32$55557[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _dataIndexes$[ebp+24]
	sub	ecx, DWORD PTR _dataIndexes$[ebp+16]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _dataIndexes$[ebp+16]
	mov	eax, DWORD PTR _inData32$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 296
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataIndexes$[ebp+24]
	mov	edx, DWORD PTR _outData32$55557[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _dataIndexes$[ebp+28]
	sub	ecx, DWORD PTR _dataIndexes$[ebp+24]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _dataIndexes$[ebp+24]
	mov	eax, DWORD PTR _inData32$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@uprops_swa:
; Line 300
	mov	eax, DWORD PTR _dataIndexes$[ebp+28]
	mov	ecx, DWORD PTR _headerSize$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
$LN16@uprops_swa:
; Line 301
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@uprops_swa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@uprops_swa:
	DD	1
	DD	$LN19@uprops_swa
$LN19@uprops_swa:
	DD	-108					; ffffff94H
	DD	64					; 00000040H
	DD	$LN18@uprops_swa
$LN18@uprops_swa:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?uprops_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z ENDP ; uprops_swap
_TEXT	ENDS
PUBLIC	??_C@_1BK@EENNJCJN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DN?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GO@JNANCNBN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAt?$AAo?$AAo?$AAl?$AAs@ ; `string'
PUBLIC	?__LINE__Var@?1??ucase_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0 ; `ucase_swap'::`2'::__LINE__Var
PUBLIC	??_C@_0EM@JFFDJKJC@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ ; `string'
PUBLIC	??_C@_0EF@GABPKOFH@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ ; `string'
PUBLIC	??_C@_0GM@PALFENDF@ucase_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1BK@EENNJCJN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DN?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@EENNJCJN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DN?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'o'
	DB	00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, '=', 00H
	DB	'=', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@JNANCNBN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAt?$AAo?$AAo?$AAl?$AAs@
CONST	SEGMENT
??_C@_1GO@JNANCNBN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAt?$AAo?$AAo?$AAl?$AAs@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 't', 00H, 'i'
	DB	00H, 'l', 00H, '\', 00H, 's', 00H, 'w', 00H, 'a', 00H, 'p', 00H
	DB	'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ucase_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0
_DATA	SEGMENT
?__LINE__Var@?1??ucase_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0 DD 0134H ; `ucase_swap'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@JFFDJKJC@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
CONST	SEGMENT
??_C@_0EM@JFFDJKJC@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ DB 'u'
	DB	'case_swap(): too few bytes (%d after header) for all of case '
	DB	'mapping data', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@GABPKOFH@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
CONST	SEGMENT
??_C@_0EF@GABPKOFH@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ DB 'u'
	DB	'case_swap(): too few bytes (%d after header) for case mapping'
	DB	' data', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GM@PALFENDF@ucase_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@
CONST	SEGMENT
??_C@_0GM@PALFENDF@ucase_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@ DB 'u'
	DB	'case_swap(): data format %02x.%02x.%02x.%02x (format version '
	DB	'%02x) is not recognized as case mapping data', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ucase_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_size$ = -180						; size = 4
_count$ = -168						; size = 4
_offset$ = -156						; size = 4
_i$ = -144						; size = 4
_indexes$ = -132					; size = 64
_inIndexes$ = -60					; size = 4
_outBytes$ = -48					; size = 4
_inBytes$ = -36						; size = 4
_headerSize$ = -24					; size = 4
_pInfo$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
?ucase_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z PROC ; ucase_swap, COMDAT
; Line 308
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 321
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _headerSize$[ebp], eax
; Line 322
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN12@ucase_swap
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN13@ucase_swap
$LN12@ucase_swap:
; Line 323
	xor	eax, eax
	jmp	$LN14@ucase_swap
$LN13@ucase_swap:
; Line 327
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pInfo$[ebp], eax
; Line 337
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 99					; 00000063H
	jne	SHORT $LN10@ucase_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 65					; 00000041H
	jne	SHORT $LN10@ucase_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 83					; 00000053H
	jne	SHORT $LN10@ucase_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 69					; 00000045H
	jne	SHORT $LN10@ucase_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	SHORT $LN9@ucase_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	cmp	ecx, 5
	jne	SHORT $LN9@ucase_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	cmp	ecx, 2
	je	SHORT $LN11@ucase_swap
$LN9@ucase_swap:
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 2
	je	SHORT $LN11@ucase_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 3
	je	SHORT $LN11@ucase_swap
$LN10@ucase_swap:
; Line 341
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0GM@PALFENDF@ucase_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 28					; 0000001cH
; Line 342
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 343
	xor	eax, eax
	jmp	$LN14@ucase_swap
$LN11@ucase_swap:
; Line 346
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _inBytes$[ebp], eax
; Line 347
	mov	eax, DWORD PTR _outData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _outBytes$[ebp], eax
; Line 349
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	DWORD PTR _inIndexes$[ebp], eax
; Line 351
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN8@ucase_swap
; Line 352
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 353
	cmp	DWORD PTR _length$[ebp], 64		; 00000040H
	jge	SHORT $LN8@ucase_swap
; Line 355
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0EF@GABPKOFH@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 356
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 357
	xor	eax, eax
	jmp	$LN14@ucase_swap
$LN8@ucase_swap:
; Line 362
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@ucase_swap
$LN5@ucase_swap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@ucase_swap:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN4@ucase_swap
; Line 363
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _inIndexes$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_readInt32_56
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _indexes$[ebp+ecx*4], eax
; Line 364
	jmp	SHORT $LN5@ucase_swap
$LN4@ucase_swap:
; Line 367
	mov	eax, DWORD PTR _indexes$[ebp+4]
	mov	DWORD PTR _size$[ebp], eax
; Line 369
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN3@ucase_swap
; Line 370
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN2@ucase_swap
; Line 372
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0EM@JFFDJKJC@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 373
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 374
	xor	eax, eax
	jmp	$LN14@ucase_swap
$LN2@ucase_swap:
; Line 378
	mov	eax, DWORD PTR _inBytes$[ebp]
	cmp	eax, DWORD PTR _outBytes$[ebp]
	je	SHORT $LN1@ucase_swap
; Line 379
	push	1
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBytes$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ucase_swap:
; Line 382
	mov	DWORD PTR _offset$[ebp], 0
; Line 385
	mov	eax, DWORD PTR _indexes$[ebp]
	shl	eax, 2
	mov	DWORD PTR _count$[ebp], eax
; Line 386
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 387
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 390
	mov	eax, DWORD PTR _indexes$[ebp+8]
	mov	DWORD PTR _count$[ebp], eax
; Line 391
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_utrie2_swapAnyVersion_56
	add	esp, 20					; 00000014H
; Line 392
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 395
	mov	eax, DWORD PTR _indexes$[ebp+12]
	add	eax, DWORD PTR _indexes$[ebp+16]
	shl	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 396
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 397
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 399
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	je	SHORT $LN3@ucase_swap
	mov	ecx, DWORD PTR ?__LINE__Var@?1??ucase_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0
	add	ecx, 91					; 0000005bH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GO@JNANCNBN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAt?$AAo?$AAo?$AAl?$AAs@
	push	OFFSET ??_C@_1BK@EENNJCJN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DN?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@ucase_swap:
; Line 402
	mov	eax, DWORD PTR _headerSize$[ebp]
	add	eax, DWORD PTR _size$[ebp]
$LN14@ucase_swap:
; Line 403
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@ucase_swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@ucase_swap:
	DD	1
	DD	$LN18@ucase_swap
$LN18@ucase_swap:
	DD	-132					; ffffff7cH
	DD	64					; 00000040H
	DD	$LN17@ucase_swap
$LN17@ucase_swap:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?ucase_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z ENDP ; ucase_swap
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??ubidi_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0 ; `ubidi_swap'::`2'::__LINE__Var
PUBLIC	??_C@_0EM@PEBEPGMH@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ ; `string'
PUBLIC	??_C@_0EF@NMMPFKBE@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ ; `string'
PUBLIC	??_C@_0GM@JJLEJPIL@ubidi_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ?__LINE__Var@?1??ubidi_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0
_DATA	SEGMENT
?__LINE__Var@?1??ubidi_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0 DD 019aH ; `ubidi_swap'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@PEBEPGMH@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
CONST	SEGMENT
??_C@_0EM@PEBEPGMH@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ DB 'u'
	DB	'bidi_swap(): too few bytes (%d after header) for all of bidi/'
	DB	'shaping data', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@NMMPFKBE@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
CONST	SEGMENT
??_C@_0EF@NMMPFKBE@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ DB 'u'
	DB	'bidi_swap(): too few bytes (%d after header) for bidi/shaping'
	DB	' data', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GM@JJLEJPIL@ubidi_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@
CONST	SEGMENT
??_C@_0GM@JJLEJPIL@ubidi_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@ DB 'u'
	DB	'bidi_swap(): data format %02x.%02x.%02x.%02x (format version '
	DB	'%02x) is not recognized as bidi/shaping data', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ubidi_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_size$ = -180						; size = 4
_count$ = -168						; size = 4
_offset$ = -156						; size = 4
_i$ = -144						; size = 4
_indexes$ = -132					; size = 64
_inIndexes$ = -60					; size = 4
_outBytes$ = -48					; size = 4
_inBytes$ = -36						; size = 4
_headerSize$ = -24					; size = 4
_pInfo$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
?ubidi_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z PROC ; ubidi_swap, COMDAT
; Line 410
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 423
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _headerSize$[ebp], eax
; Line 424
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN12@ubidi_swap
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN13@ubidi_swap
$LN12@ubidi_swap:
; Line 425
	xor	eax, eax
	jmp	$LN14@ubidi_swap
$LN13@ubidi_swap:
; Line 429
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pInfo$[ebp], eax
; Line 439
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 66					; 00000042H
	jne	SHORT $LN10@ubidi_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 105				; 00000069H
	jne	SHORT $LN10@ubidi_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 68					; 00000044H
	jne	SHORT $LN10@ubidi_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 105				; 00000069H
	jne	SHORT $LN10@ubidi_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	SHORT $LN9@ubidi_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	cmp	ecx, 5
	jne	SHORT $LN9@ubidi_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	cmp	ecx, 2
	je	SHORT $LN11@ubidi_swap
$LN9@ubidi_swap:
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 2
	je	SHORT $LN11@ubidi_swap
$LN10@ubidi_swap:
; Line 443
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0GM@JJLEJPIL@ubidi_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 28					; 0000001cH
; Line 444
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 445
	xor	eax, eax
	jmp	$LN14@ubidi_swap
$LN11@ubidi_swap:
; Line 448
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _inBytes$[ebp], eax
; Line 449
	mov	eax, DWORD PTR _outData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _outBytes$[ebp], eax
; Line 451
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	DWORD PTR _inIndexes$[ebp], eax
; Line 453
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN8@ubidi_swap
; Line 454
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 455
	cmp	DWORD PTR _length$[ebp], 64		; 00000040H
	jge	SHORT $LN8@ubidi_swap
; Line 457
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0EF@NMMPFKBE@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 458
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 459
	xor	eax, eax
	jmp	$LN14@ubidi_swap
$LN8@ubidi_swap:
; Line 464
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@ubidi_swap
$LN5@ubidi_swap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@ubidi_swap:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN4@ubidi_swap
; Line 465
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _inIndexes$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_readInt32_56
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _indexes$[ebp+ecx*4], eax
; Line 466
	jmp	SHORT $LN5@ubidi_swap
$LN4@ubidi_swap:
; Line 469
	mov	eax, DWORD PTR _indexes$[ebp+4]
	mov	DWORD PTR _size$[ebp], eax
; Line 471
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN3@ubidi_swap
; Line 472
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN2@ubidi_swap
; Line 474
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0EM@PEBEPGMH@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 475
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 476
	xor	eax, eax
	jmp	$LN14@ubidi_swap
$LN2@ubidi_swap:
; Line 480
	mov	eax, DWORD PTR _inBytes$[ebp]
	cmp	eax, DWORD PTR _outBytes$[ebp]
	je	SHORT $LN1@ubidi_swap
; Line 481
	push	1
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBytes$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ubidi_swap:
; Line 484
	mov	DWORD PTR _offset$[ebp], 0
; Line 487
	mov	eax, DWORD PTR _indexes$[ebp]
	shl	eax, 2
	mov	DWORD PTR _count$[ebp], eax
; Line 488
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 489
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 492
	mov	eax, DWORD PTR _indexes$[ebp+8]
	mov	DWORD PTR _count$[ebp], eax
; Line 493
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_utrie2_swapAnyVersion_56
	add	esp, 20					; 00000014H
; Line 494
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 497
	mov	eax, DWORD PTR _indexes$[ebp+12]
	shl	eax, 2
	mov	DWORD PTR _count$[ebp], eax
; Line 498
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 499
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 502
	mov	eax, DWORD PTR _indexes$[ebp+20]
	sub	eax, DWORD PTR _indexes$[ebp+16]
	mov	DWORD PTR _count$[ebp], eax
; Line 503
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 504
	mov	eax, DWORD PTR _indexes$[ebp+28]
	sub	eax, DWORD PTR _indexes$[ebp+24]
	mov	DWORD PTR _count$[ebp], eax
; Line 505
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 507
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	je	SHORT $LN3@ubidi_swap
	mov	ecx, DWORD PTR ?__LINE__Var@?1??ubidi_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0
	add	ecx, 97					; 00000061H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GO@JNANCNBN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAt?$AAo?$AAo?$AAl?$AAs@
	push	OFFSET ??_C@_1BK@EENNJCJN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DN?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@ubidi_swap:
; Line 510
	mov	eax, DWORD PTR _headerSize$[ebp]
	add	eax, DWORD PTR _size$[ebp]
$LN14@ubidi_swap:
; Line 511
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@ubidi_swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@ubidi_swap:
	DD	1
	DD	$LN18@ubidi_swap
$LN18@ubidi_swap:
	DD	-132					; ffffff7cH
	DD	64					; 00000040H
	DD	$LN17@ubidi_swap
$LN17@ubidi_swap:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?ubidi_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z ENDP ; ubidi_swap
_TEXT	ENDS
PUBLIC	??_C@_0EE@MCFJHLJM@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ ; `string'
PUBLIC	??_C@_0DN@KLMKOPGN@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ ; `string'
PUBLIC	??_C@_0GE@CFFFBIMC@unorm_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	_utrie_swap_56:PROC
;	COMDAT ??_C@_0EE@MCFJHLJM@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
CONST	SEGMENT
??_C@_0EE@MCFJHLJM@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ DB 'u'
	DB	'norm_swap(): too few bytes (%d after header) for all of unorm'
	DB	'.icu', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@KLMKOPGN@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
CONST	SEGMENT
??_C@_0DN@KLMKOPGN@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@ DB 'u'
	DB	'norm_swap(): too few bytes (%d after header) for unorm.icu', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GE@CFFFBIMC@unorm_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@
CONST	SEGMENT
??_C@_0GE@CFFFBIMC@unorm_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@ DB 'u'
	DB	'norm_swap(): data format %02x.%02x.%02x.%02x (format version '
	DB	'%02x) is not recognized as unorm.icu', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?unorm_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_size$ = -244						; size = 4
_count$ = -232						; size = 4
_offset$ = -220						; size = 4
_i$ = -208						; size = 4
_indexes$ = -196					; size = 128
_inIndexes$ = -60					; size = 4
_outBytes$ = -48					; size = 4
_inBytes$ = -36						; size = 4
_headerSize$ = -24					; size = 4
_pInfo$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
?unorm_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z PROC ; unorm_swap, COMDAT
; Line 520
	push	ebp
	mov	ebp, esp
	sub	esp, 440				; 000001b8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-440]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 533
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _headerSize$[ebp], eax
; Line 534
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN13@unorm_swap
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN14@unorm_swap
$LN13@unorm_swap:
; Line 535
	xor	eax, eax
	jmp	$LN15@unorm_swap
$LN14@unorm_swap:
; Line 539
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pInfo$[ebp], eax
; Line 546
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 78					; 0000004eH
	jne	SHORT $LN11@unorm_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 111				; 0000006fH
	jne	SHORT $LN11@unorm_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 114				; 00000072H
	jne	SHORT $LN11@unorm_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 109				; 0000006dH
	jne	SHORT $LN11@unorm_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 2
	je	SHORT $LN12@unorm_swap
$LN11@unorm_swap:
; Line 550
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0GE@CFFFBIMC@unorm_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 28					; 0000001cH
; Line 551
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 552
	xor	eax, eax
	jmp	$LN15@unorm_swap
$LN12@unorm_swap:
; Line 555
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _inBytes$[ebp], eax
; Line 556
	mov	eax, DWORD PTR _outData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _outBytes$[ebp], eax
; Line 558
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	DWORD PTR _inIndexes$[ebp], eax
; Line 560
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN10@unorm_swap
; Line 561
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 562
	cmp	DWORD PTR _length$[ebp], 128		; 00000080H
	jge	SHORT $LN10@unorm_swap
; Line 564
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0DN@KLMKOPGN@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 565
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 566
	xor	eax, eax
	jmp	$LN15@unorm_swap
$LN10@unorm_swap:
; Line 571
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@unorm_swap
$LN7@unorm_swap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@unorm_swap:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	SHORT $LN6@unorm_swap
; Line 572
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _inIndexes$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_readInt32_56
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _indexes$[ebp+ecx*4], eax
; Line 573
	jmp	SHORT $LN7@unorm_swap
$LN6@unorm_swap:
; Line 583
	mov	eax, DWORD PTR _indexes$[ebp+40]
	mov	ecx, DWORD PTR _indexes$[ebp]
	lea	edx, DWORD PTR [ecx+eax+128]
	mov	eax, DWORD PTR _indexes$[ebp+4]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	edx, DWORD PTR _indexes$[ebp+8]
	lea	eax, DWORD PTR [ecx+edx*2]
	add	eax, DWORD PTR _indexes$[ebp+44]
	mov	ecx, DWORD PTR _indexes$[ebp+48]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _size$[ebp], edx
; Line 585
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN5@unorm_swap
; Line 586
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN4@unorm_swap
; Line 588
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0EE@MCFJHLJM@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 589
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 590
	xor	eax, eax
	jmp	$LN15@unorm_swap
$LN4@unorm_swap:
; Line 594
	mov	eax, DWORD PTR _inBytes$[ebp]
	cmp	eax, DWORD PTR _outBytes$[ebp]
	je	SHORT $LN3@unorm_swap
; Line 595
	push	1
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBytes$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@unorm_swap:
; Line 598
	mov	DWORD PTR _offset$[ebp], 0
; Line 601
	mov	DWORD PTR _count$[ebp], 128		; 00000080H
; Line 602
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 603
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 606
	mov	eax, DWORD PTR _indexes$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 607
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_utrie_swap_56
	add	esp, 20					; 00000014H
; Line 608
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 611
	mov	eax, DWORD PTR _indexes$[ebp+4]
	add	eax, DWORD PTR _indexes$[ebp+8]
	shl	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 612
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 613
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 616
	mov	eax, DWORD PTR _indexes$[ebp+40]
	mov	DWORD PTR _count$[ebp], eax
; Line 617
	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN2@unorm_swap
; Line 618
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_utrie_swap_56
	add	esp, 20					; 00000014H
; Line 619
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
$LN2@unorm_swap:
; Line 623
	mov	eax, DWORD PTR _indexes$[ebp+44]
	mov	DWORD PTR _count$[ebp], eax
; Line 624
	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN1@unorm_swap
; Line 625
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_utrie_swap_56
	add	esp, 20					; 00000014H
; Line 626
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
$LN1@unorm_swap:
; Line 630
	mov	eax, DWORD PTR _indexes$[ebp+48]
	shl	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 631
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 632
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
$LN5@unorm_swap:
; Line 635
	mov	eax, DWORD PTR _headerSize$[ebp]
	add	eax, DWORD PTR _size$[ebp]
$LN15@unorm_swap:
; Line 636
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@unorm_swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 440				; 000001b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@unorm_swap:
	DD	1
	DD	$LN18@unorm_swap
$LN18@unorm_swap:
	DD	-196					; ffffff3cH
	DD	128					; 00000080H
	DD	$LN17@unorm_swap
$LN17@unorm_swap:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?unorm_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z ENDP ; unorm_swap
_TEXT	ENDS
PUBLIC	??_C@_0EN@DKADDPLF@test_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5a@ ; `string'
PUBLIC	??_C@_0GC@BGHLJGFM@test_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@ ; `string'
PUBLIC	??_C@_0CJ@CPIOEIFK@test_swap?$CI?$CJ?3?5data?5header?5swap?5fa@ ; `string'
PUBLIC	??_C@_0BD@NCNAAAEN@pErrorCode?5is?5NULL?$AA@	; `string'
EXTRN	_u_errorName_56:PROC
;	COMDAT ??_C@_0EN@DKADDPLF@test_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5a@
CONST	SEGMENT
??_C@_0EN@DKADDPLF@test_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5a@ DB 't'
	DB	'est_swap(): too few bytes (%d after header, wanted %d) for al'
	DB	'l of testdata', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@BGHLJGFM@test_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@
CONST	SEGMENT
??_C@_0GC@BGHLJGFM@test_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@ DB 't'
	DB	'est_swap(): data format %02x.%02x.%02x.%02x (format version %'
	DB	'02x) is not recognized as testdata', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CPIOEIFK@test_swap?$CI?$CJ?3?5data?5header?5swap?5fa@
CONST	SEGMENT
??_C@_0CJ@CPIOEIFK@test_swap?$CI?$CJ?3?5data?5header?5swap?5fa@ DB 'test_'
	DB	'swap(): data header swap failed %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NCNAAAEN@pErrorCode?5is?5NULL?$AA@
CONST	SEGMENT
??_C@_0BD@NCNAAAEN@pErrorCode?5is?5NULL?$AA@ DB 'pErrorCode is NULL', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?test_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv78 = -292						; size = 4
_size$ = -92						; size = 4
_sizeStr$ = -80						; size = 4
_size16$ = -68						; size = 4
_offset$ = -56						; size = 4
_outBytes$ = -44					; size = 4
_inBytes$ = -32						; size = 4
_headerSize$ = -20					; size = 4
_pInfo$ = -8						; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
?test_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z PROC ; test_swap, COMDAT
; Line 644
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 654
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _headerSize$[ebp], eax
; Line 655
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN5@test_swap
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@test_swap
$LN5@test_swap:
; Line 656
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN9@test_swap
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_u_errorName_56
	add	esp, 4
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN10@test_swap
$LN9@test_swap:
	mov	DWORD PTR tv78[ebp], OFFSET ??_C@_0BD@NCNAAAEN@pErrorCode?5is?5NULL?$AA@
$LN10@test_swap:
	mov	edx, DWORD PTR tv78[ebp]
	push	edx
	push	OFFSET ??_C@_0CJ@CPIOEIFK@test_swap?$CI?$CJ?3?5data?5header?5swap?5fa@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 657
	xor	eax, eax
	jmp	$LN7@test_swap
$LN6@test_swap:
; Line 661
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pInfo$[ebp], eax
; Line 668
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 84					; 00000054H
	jne	SHORT $LN3@test_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 101				; 00000065H
	jne	SHORT $LN3@test_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 115				; 00000073H
	jne	SHORT $LN3@test_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 116				; 00000074H
	jne	SHORT $LN3@test_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	je	SHORT $LN4@test_swap
$LN3@test_swap:
; Line 672
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0GC@BGHLJGFM@test_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 28					; 0000001cH
; Line 673
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 674
	xor	eax, eax
	jmp	$LN7@test_swap
$LN4@test_swap:
; Line 677
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _inBytes$[ebp], eax
; Line 678
	mov	eax, DWORD PTR _outData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _outBytes$[ebp], eax
; Line 680
	mov	DWORD PTR _size16$[ebp], 2
; Line 681
	mov	DWORD PTR _sizeStr$[ebp], 5
; Line 682
	mov	eax, DWORD PTR _size16$[ebp]
	add	eax, DWORD PTR _sizeStr$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 684
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN2@test_swap
; Line 685
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN1@test_swap
; Line 687
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EN@DKADDPLF@test_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5a@
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 688
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 689
	xor	eax, eax
	jmp	SHORT $LN7@test_swap
$LN1@test_swap:
; Line 692
	mov	DWORD PTR _offset$[ebp], 0
; Line 694
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size16$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 695
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _size16$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 696
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sizeStr$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@test_swap:
; Line 699
	mov	eax, DWORD PTR _headerSize$[ebp]
	add	eax, DWORD PTR _size$[ebp]
$LN7@test_swap:
; Line 700
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?test_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z ENDP ; test_swap
_TEXT	ENDS
PUBLIC	??_C@_0EE@EFIIIKLK@udata_swap?$CI?$CJ?3?5unknown?5data?5forma@ ; `string'
PUBLIC	??_C@_0GG@GJJLELKE@udata_swap?$CI?$CJ?5warning?3?5swapped?5on@ ; `string'
PUBLIC	??_C@_0FC@KIDMIIEG@udata_swap?$CI?$CJ?3?5failure?5swapping?5d@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_udata_swap
EXTRN	_memcmp:PROC
EXTRN	_u_UCharsToChars_56:PROC
;	COMDAT ??_C@_0EE@EFIIIKLK@udata_swap?$CI?$CJ?3?5unknown?5data?5forma@
CONST	SEGMENT
??_C@_0EE@EFIIIKLK@udata_swap?$CI?$CJ?3?5unknown?5data?5forma@ DB 'udata_'
	DB	'swap(): unknown data format %02x.%02x.%02x.%02x ("%c%c%c%c")', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@GJJLELKE@udata_swap?$CI?$CJ?5warning?3?5swapped?5on@
CONST	SEGMENT
??_C@_0GG@GJJLELKE@udata_swap?$CI?$CJ?5warning?3?5swapped?5on@ DB 'udata_'
	DB	'swap() warning: swapped only %d out of %d bytes - data format'
	DB	' %02x.%02x.%02x.%02x ("%c%c%c%c")', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@KIDMIIEG@udata_swap?$CI?$CJ?3?5failure?5swapping?5d@
CONST	SEGMENT
??_C@_0FC@KIDMIIEG@udata_swap?$CI?$CJ?3?5failure?5swapping?5d@ DB 'udata_'
	DB	'swap(): failure swapping data format %02x.%02x.%02x.%02x ("%c'
	DB	'%c%c%c") - %s', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _udata_swap
_TEXT	SEGMENT
_u$55741 = -64						; size = 8
_swappedLength$ = -48					; size = 4
_i$ = -36						; size = 4
_pInfo$ = -24						; size = 4
_dataFormatChars$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_udata_swap PROC					; COMDAT
; Line 750
	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 755
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN11@udata_swap
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN12@udata_swap
$LN11@udata_swap:
; Line 756
	xor	eax, eax
	jmp	$LN13@udata_swap
$LN12@udata_swap:
; Line 766
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	push	-1
	mov	ecx, DWORD PTR _inData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
; Line 772
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN10@udata_swap
; Line 773
	xor	eax, eax
	jmp	$LN13@udata_swap
$LN10@udata_swap:
; Line 776
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pInfo$[ebp], eax
; Line 781
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	cx, BYTE PTR [eax+8]
	mov	WORD PTR _u$55741[ebp], cx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	cx, BYTE PTR [eax+9]
	mov	WORD PTR _u$55741[ebp+2], cx
; Line 782
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	cx, BYTE PTR [eax+10]
	mov	WORD PTR _u$55741[ebp+4], cx
; Line 783
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	cx, BYTE PTR [eax+11]
	mov	WORD PTR _u$55741[ebp+6], cx
; Line 785
	push	4
	lea	eax, DWORD PTR _u$55741[ebp]
	push	eax
	call	_uprv_isInvariantUString_56
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@udata_swap
; Line 786
	push	4
	lea	eax, DWORD PTR _dataFormatChars$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u$55741[ebp]
	push	ecx
	call	_u_UCharsToChars_56
	add	esp, 12					; 0000000cH
; Line 787
	jmp	SHORT $LN8@udata_swap
$LN9@udata_swap:
; Line 788
	mov	BYTE PTR _dataFormatChars$[ebp+3], 63	; 0000003fH
	mov	al, BYTE PTR _dataFormatChars$[ebp+3]
	mov	BYTE PTR _dataFormatChars$[ebp+2], al
	mov	cl, BYTE PTR _dataFormatChars$[ebp+2]
	mov	BYTE PTR _dataFormatChars$[ebp+1], cl
	mov	dl, BYTE PTR _dataFormatChars$[ebp+1]
	mov	BYTE PTR _dataFormatChars$[ebp], dl
$LN8@udata_swap:
; Line 793
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@udata_swap
$LN6@udata_swap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@udata_swap:
	cmp	DWORD PTR _i$[ebp], 17			; 00000011H
	jge	$LN5@udata_swap
; Line 794
	push	4
	mov	eax, DWORD PTR _pInfo$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR _swapFns[ecx*8]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN4@udata_swap
; Line 795
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _swapFns[edx*8+4]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _swappedLength$[ebp], eax
; Line 797
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@udata_swap
; Line 803
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_u_errorName_56
	add	esp, 4
	push	eax
	movsx	edx, BYTE PTR _dataFormatChars$[ebp+3]
	push	edx
	movsx	eax, BYTE PTR _dataFormatChars$[ebp+2]
	push	eax
	movsx	ecx, BYTE PTR _dataFormatChars$[ebp+1]
	push	ecx
	movsx	edx, BYTE PTR _dataFormatChars$[ebp]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0FC@KIDMIIEG@udata_swap?$CI?$CJ?3?5failure?5swapping?5d@
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_printError_56
	add	esp, 44					; 0000002cH
	jmp	SHORT $LN2@udata_swap
$LN3@udata_swap:
; Line 804
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 15					; 0000000fH
	cmp	DWORD PTR _swappedLength$[ebp], eax
	jge	SHORT $LN2@udata_swap
; Line 812
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_u_errorName_56
	add	esp, 4
	push	eax
	movsx	edx, BYTE PTR _dataFormatChars$[ebp+3]
	push	edx
	movsx	eax, BYTE PTR _dataFormatChars$[ebp+2]
	push	eax
	movsx	ecx, BYTE PTR _dataFormatChars$[ebp+1]
	push	ecx
	movsx	edx, BYTE PTR _dataFormatChars$[ebp]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _swappedLength$[ebp]
	push	eax
	push	OFFSET ??_C@_0GG@GJJLELKE@udata_swap?$CI?$CJ?5warning?3?5swapped?5on@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 52					; 00000034H
$LN2@udata_swap:
; Line 815
	mov	eax, DWORD PTR _swappedLength$[ebp]
	jmp	SHORT $LN13@udata_swap
$LN4@udata_swap:
; Line 817
	jmp	$LN6@udata_swap
$LN5@udata_swap:
; Line 824
	movsx	eax, BYTE PTR _dataFormatChars$[ebp+3]
	push	eax
	movsx	ecx, BYTE PTR _dataFormatChars$[ebp+2]
	push	ecx
	movsx	edx, BYTE PTR _dataFormatChars$[ebp+1]
	push	edx
	movsx	eax, BYTE PTR _dataFormatChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0EE@EFIIIKLK@udata_swap?$CI?$CJ?3?5unknown?5data?5forma@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 40					; 00000028H
; Line 826
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 827
	xor	eax, eax
$LN13@udata_swap:
; Line 828
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@udata_swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@udata_swap:
	DD	2
	DD	$LN17@udata_swap
$LN17@udata_swap:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN15@udata_swap
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN16@udata_swap
$LN16@udata_swap:
	DB	117					; 00000075H
	DB	0
$LN15@udata_swap:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
_udata_swap ENDP
_TEXT	ENDS
END
