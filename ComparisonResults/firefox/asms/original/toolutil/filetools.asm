; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\toolutil\filetools.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_isFileModTimeLater
EXTRN	_T_FileStream_file_exists:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\tools\toolutil\filetools.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _isFileModTimeLater
_TEXT	SEGMENT
_latest$4532 = -20					; size = 4
_isLatest$ = -5						; size = 1
_filePath$ = 8						; size = 4
_checkAgainst$ = 12					; size = 4
_isDir$ = 16						; size = 1
_isFileModTimeLater PROC				; COMDAT
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 44
	mov	BYTE PTR _isLatest$[ebp], 1
; Line 46
	cmp	DWORD PTR _filePath$[ebp], 0
	je	SHORT $LN7@isFileModT
	cmp	DWORD PTR _checkAgainst$[ebp], 0
	jne	SHORT $LN8@isFileModT
$LN7@isFileModT:
; Line 47
	xor	al, al
	jmp	SHORT $LN9@isFileModT
$LN8@isFileModT:
; Line 50
	movsx	eax, BYTE PTR _isDir$[ebp]
	cmp	eax, 1
	jne	SHORT $LN6@isFileModT
; Line 87
	jmp	SHORT $LN5@isFileModT
$LN6@isFileModT:
; Line 88
	mov	eax, DWORD PTR _checkAgainst$[ebp]
	push	eax
	call	_T_FileStream_file_exists
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@isFileModT
; Line 89
	mov	eax, DWORD PTR _checkAgainst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filePath$[ebp]
	push	ecx
	call	?whichFileModTimeIsLater@@YAHPBD0@Z	; whichFileModTimeIsLater
	add	esp, 8
	mov	DWORD PTR _latest$4532[ebp], eax
; Line 90
	cmp	DWORD PTR _latest$4532[ebp], 0
	jl	SHORT $LN2@isFileModT
	cmp	DWORD PTR _latest$4532[ebp], 2
	jne	SHORT $LN3@isFileModT
$LN2@isFileModT:
; Line 91
	mov	BYTE PTR _isLatest$[ebp], 0
$LN3@isFileModT:
; Line 93
	jmp	SHORT $LN5@isFileModT
$LN4@isFileModT:
; Line 94
	mov	BYTE PTR _isLatest$[ebp], 0
$LN5@isFileModT:
; Line 98
	mov	al, BYTE PTR _isLatest$[ebp]
$LN9@isFileModT:
; Line 99
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_isFileModTimeLater ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@FDHENEDB@Unable?5to?5get?5stats?5from?5file?3?5?$CF@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_0CJ@FDHENEDB@Unable?5to?5get?5stats?5from?5file?3?5?$CF@
CONST	SEGMENT
??_C@_0CJ@FDHENEDB@Unable?5to?5get?5stats?5from?5file?3?5?$CF@ DB 'Unable'
	DB	' to get stats from file: %s or %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?whichFileModTimeIsLater@@YAHPBD0@Z
_TEXT	SEGMENT
_diff$4546 = -172					; size = 8
_modtime2$4545 = -156					; size = 8
_modtime1$4544 = -140					; size = 8
_stbuf2$ = -124						; size = 48
_stbuf1$ = -68						; size = 48
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_file1$ = 8						; size = 4
_file2$ = 12						; size = 4
?whichFileModTimeIsLater@@YAHPBD0@Z PROC		; whichFileModTimeIsLater, COMDAT
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 368				; 00000170H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-368]
	mov	ecx, 92					; 0000005cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 103
	mov	DWORD PTR _result$[ebp], 0
; Line 106
	lea	eax, DWORD PTR _stbuf1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file1$[ebp]
	push	ecx
	call	_stat
	add	esp, 8
	test	eax, eax
	jne	$LN5@whichFileM
	lea	eax, DWORD PTR _stbuf2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file2$[ebp]
	push	ecx
	call	_stat
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@whichFileM
; Line 110
	mov	eax, DWORD PTR _stbuf1$[ebp+32]
	mov	DWORD PTR _modtime1$4544[ebp], eax
	mov	ecx, DWORD PTR _stbuf1$[ebp+36]
	mov	DWORD PTR _modtime1$4544[ebp+4], ecx
; Line 111
	mov	eax, DWORD PTR _stbuf2$[ebp+32]
	mov	DWORD PTR _modtime2$4545[ebp], eax
	mov	ecx, DWORD PTR _stbuf2$[ebp+36]
	mov	DWORD PTR _modtime2$4545[ebp+4], ecx
; Line 113
	mov	eax, DWORD PTR _modtime2$4545[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _modtime2$4545[ebp]
	push	ecx
	mov	edx, DWORD PTR _modtime1$4544[ebp+4]
	push	edx
	mov	eax, DWORD PTR _modtime1$4544[ebp]
	push	eax
	call	_difftime
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _diff$4546[ebp]
; Line 114
	fldz
	fcomp	QWORD PTR _diff$4546[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@whichFileM
; Line 115
	mov	DWORD PTR _result$[ebp], 2
	jmp	SHORT $LN2@whichFileM
$LN4@whichFileM:
; Line 116
	fldz
	fcomp	QWORD PTR _diff$4546[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@whichFileM
; Line 117
	mov	DWORD PTR _result$[ebp], 1
$LN2@whichFileM:
; Line 120
	jmp	SHORT $LN1@whichFileM
$LN5@whichFileM:
; Line 121
	mov	esi, esp
	mov	eax, DWORD PTR _file2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file1$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CJ@FDHENEDB@Unable?5to?5get?5stats?5from?5file?3?5?$CF@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 122
	mov	DWORD PTR _result$[ebp], -1
$LN1@whichFileM:
; Line 125
	mov	eax, DWORD PTR _result$[ebp]
; Line 126
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@whichFileM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 368				; 00000170H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@whichFileM:
	DD	2
	DD	$LN10@whichFileM
$LN10@whichFileM:
	DD	-68					; ffffffbcH
	DD	48					; 00000030H
	DD	$LN8@whichFileM
	DD	-124					; ffffff84H
	DD	48					; 00000030H
	DD	$LN9@whichFileM
$LN9@whichFileM:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	50					; 00000032H
	DB	0
$LN8@whichFileM:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	49					; 00000031H
	DB	0
?whichFileModTimeIsLater@@YAHPBD0@Z ENDP		; whichFileModTimeIsLater
_TEXT	ENDS
EXTRN	__imp___stat64i32:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _stat
_TEXT	SEGMENT
__Filename$ = 8						; size = 4
__Stat$ = 12						; size = 4
_stat	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sys\stat.inl
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 59
	mov	esi, esp
	mov	eax, DWORD PTR __Stat$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Filename$[ebp]
	push	ecx
	call	DWORD PTR __imp___stat64i32
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 60
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_stat	ENDP
_TEXT	ENDS
EXTRN	__imp___difftime64:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _difftime
_TEXT	SEGMENT
__Time1$ = 8						; size = 8
__Time2$ = 16						; size = 8
_difftime PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 84
	mov	esi, esp
	mov	eax, DWORD PTR __Time2$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Time2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Time1$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Time1$[ebp]
	push	eax
	call	DWORD PTR __imp___difftime64
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 85
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_difftime ENDP
_TEXT	ENDS
PUBLIC	_swapFileSepChar
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _swapFileSepChar
_TEXT	SEGMENT
tv74 = -217						; size = 1
_length$4558 = -20					; size = 4
_i$4557 = -8						; size = 4
_filePath$ = 8						; size = 4
_oldFileSepChar$ = 12					; size = 1
_newFileSepChar$ = 16					; size = 1
_swapFileSepChar PROC					; COMDAT
; File d:\mozilla\intl\icu\source\tools\toolutil\filetools.cpp
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 131
	mov	DWORD PTR _i$4557[ebp], 0
	mov	eax, DWORD PTR _filePath$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _length$4558[ebp], eax
	jmp	SHORT $LN3@swapFileSe
$LN2@swapFileSe:
	mov	eax, DWORD PTR _i$4557[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4557[ebp], eax
$LN3@swapFileSe:
	mov	eax, DWORD PTR _i$4557[ebp]
	cmp	eax, DWORD PTR _length$4558[ebp]
	jge	SHORT $LN4@swapFileSe
; Line 132
	mov	eax, DWORD PTR _filePath$[ebp]
	add	eax, DWORD PTR _i$4557[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _oldFileSepChar$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN6@swapFileSe
	mov	al, BYTE PTR _newFileSepChar$[ebp]
	mov	BYTE PTR tv74[ebp], al
	jmp	SHORT $LN7@swapFileSe
$LN6@swapFileSe:
	mov	ecx, DWORD PTR _filePath$[ebp]
	add	ecx, DWORD PTR _i$4557[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv74[ebp], dl
$LN7@swapFileSe:
	mov	eax, DWORD PTR _filePath$[ebp]
	add	eax, DWORD PTR _i$4557[ebp]
	mov	cl, BYTE PTR tv74[ebp]
	mov	BYTE PTR [eax], cl
; Line 133
	jmp	SHORT $LN2@swapFileSe
$LN4@swapFileSe:
; Line 134
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_swapFileSepChar ENDP
_TEXT	ENDS
END
