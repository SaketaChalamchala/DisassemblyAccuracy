; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\toolutil\pkg_genc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BH@KOIJKBFN@?6ICUDATA_?$CFs?7ENDS?6?7END?6?$AA@ ; `string'
PUBLIC	??_C@_07HNONFLJH@?7DWORD?5?$AA@			; `string'
PUBLIC	??_C@_0IO@HAACEBKH@?7TITLE?5?$CFs?6?$DL?5generated?5by?5genccod@ ; `string'
PUBLIC	??_C@_04FNABOIJL@masm?$AA@			; `string'
PUBLIC	??_C@_06LFCKFDAA@?4WORD?5?$AA@			; `string'
PUBLIC	??_C@_0DL@PLHIHHIC@?7?4SPACE?5?5$TEXT$?6?7?4SUBSPA?5$LIT$?6?$CF@ ; `string'
PUBLIC	??_C@_0L@HFIBKJC@aCC?9parisc?$AA@		; `string'
PUBLIC	??_C@_06OHOMCLAP@data4?5?$AA@			; `string'
PUBLIC	??_C@_0JA@LMBEAJJG@?7?4file?5?5?5?$CC?$CFs?4s?$CC?6?7?4type?5?5?5?$CFs?0?$EAobj@ ; `string'
PUBLIC	??_C@_08LHFJCNDL@aCC?9ia64?$AA@			; `string'
PUBLIC	??_C@_0CL@GHPHPDAD@?4globl?5?$CFs?$HLRO?$HN?6?7?4toc?6?$CFs?3?6?7?4csect?5@ ; `string'
PUBLIC	??_C@_03HPCNKCLA@xlc?$AA@			; `string'
PUBLIC	??_C@_07KEDGOHPO@?44byte?5?$AA@			; `string'
PUBLIC	??_C@_0GH@NGMKLENA@Drodata?4rodata?3?6?7?4type?5?5?5Drodata@ ; `string'
PUBLIC	??_C@_07BCGBNI@sun?9x86?$AA@			; `string'
PUBLIC	??_C@_06OLDIJAOM@?4word?5?$AA@			; `string'
PUBLIC	??_C@_0DE@CLHODDIG@?7?4section?5?$CC?4rodata?$CC?6?7?4align?5?5?516@ ; `string'
PUBLIC	??_C@_03OHFMDAD@sun?$AA@			; `string'
PUBLIC	??_C@_0CO@BJCKEFHH@?4globl?5?$CFs?6?7?4section?5?4rodata?6?7?4ba@ ; `string'
PUBLIC	??_C@_0M@HJLABNHC@gcc?9mingw64?$AA@		; `string'
PUBLIC	??_C@_0DA@KMCJDIME@?4globl?5_?$CFs?6?7?4section?5?4rodata?6?7?4b@ ; `string'
PUBLIC	??_C@_0L@CHCLDHLC@gcc?9cygwin?$AA@		; `string'
PUBLIC	??_C@_0GD@KLJFGLOB@?4globl?5_?$CFs?6?$CDifdef?5U_HIDE_DATA_SY@ ; `string'
PUBLIC	??_C@_0L@KFAJJBDI@gcc?9darwin?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_06JKKADEMK@?4long?5?$AA@			; `string'
PUBLIC	??_C@_0JG@DEJMOCIG@?4globl?5?$CFs?6?7?4section?5?4note?4GNU?9st@ ; `string'
PUBLIC	??_C@_03HMALKCEE@gcc?$AA@			; `string'
_BSS	SEGMENT
_hexType DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_assemblyHeaderIndex DD 0ffffffffH
_DATA	ENDS
CONST	SEGMENT
_assemblyHeader DD FLAT:??_C@_03HMALKCEE@gcc?$AA@
	DD	FLAT:??_C@_0JG@DEJMOCIG@?4globl?5?$CFs?6?7?4section?5?4note?4GNU?9st@
	DD	FLAT:??_C@_06JKKADEMK@?4long?5?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_0L@KFAJJBDI@gcc?9darwin?$AA@
	DD	FLAT:??_C@_0GD@KLJFGLOB@?4globl?5_?$CFs?6?$CDifdef?5U_HIDE_DATA_SY@
	DD	FLAT:??_C@_06JKKADEMK@?4long?5?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_0L@CHCLDHLC@gcc?9cygwin?$AA@
	DD	FLAT:??_C@_0DA@KMCJDIME@?4globl?5_?$CFs?6?7?4section?5?4rodata?6?7?4b@
	DD	FLAT:??_C@_06JKKADEMK@?4long?5?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_0M@HJLABNHC@gcc?9mingw64?$AA@
	DD	FLAT:??_C@_0CO@BJCKEFHH@?4globl?5?$CFs?6?7?4section?5?4rodata?6?7?4ba@
	DD	FLAT:??_C@_06JKKADEMK@?4long?5?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_03OHFMDAD@sun?$AA@
	DD	FLAT:??_C@_0DE@CLHODDIG@?7?4section?5?$CC?4rodata?$CC?6?7?4align?5?5?516@
	DD	FLAT:??_C@_06OLDIJAOM@?4word?5?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_07BCGBNI@sun?9x86?$AA@
	DD	FLAT:??_C@_0GH@NGMKLENA@Drodata?4rodata?3?6?7?4type?5?5?5Drodata@
	DD	FLAT:??_C@_07KEDGOHPO@?44byte?5?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_03HPCNKCLA@xlc?$AA@
	DD	FLAT:??_C@_0CL@GHPHPDAD@?4globl?5?$CFs?$HLRO?$HN?6?7?4toc?6?$CFs?3?6?7?4csect?5@
	DD	FLAT:??_C@_06JKKADEMK@?4long?5?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_08LHFJCNDL@aCC?9ia64?$AA@
	DD	FLAT:??_C@_0JA@LMBEAJJG@?7?4file?5?5?5?$CC?$CFs?4s?$CC?6?7?4type?5?5?5?$CFs?0?$EAobj@
	DD	FLAT:??_C@_06OHOMCLAP@data4?5?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_0L@HFIBKJC@aCC?9parisc?$AA@
	DD	FLAT:??_C@_0DL@PLHIHHIC@?7?4SPACE?5?5$TEXT$?6?7?4SUBSPA?5$LIT$?6?$CF@
	DD	FLAT:??_C@_06LFCKFDAA@?4WORD?5?$AA@
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_04FNABOIJL@masm?$AA@
	DD	FLAT:??_C@_0IO@HAACEBKH@?7TITLE?5?$CFs?6?$DL?5generated?5by?5genccod@
	DD	FLAT:??_C@_07HNONFLJH@?7DWORD?5?$AA@
	DD	FLAT:??_C@_0BH@KOIJKBFN@?6ICUDATA_?$CFs?7ENDS?6?7END?6?$AA@
	DB	01H
	ORG $+3
?hexToStr@?1??write32@@9@9 DB 030H			; `write32'::`2'::hexToStr
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
CONST	ENDS
;	COMDAT ??_C@_0BH@KOIJKBFN@?6ICUDATA_?$CFs?7ENDS?6?7END?6?$AA@
CONST	SEGMENT
??_C@_0BH@KOIJKBFN@?6ICUDATA_?$CFs?7ENDS?6?7END?6?$AA@ DB 0aH, 'ICUDATA_%'
	DB	's', 09H, 'ENDS', 0aH, 09H, 'END', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HNONFLJH@?7DWORD?5?$AA@
CONST	SEGMENT
??_C@_07HNONFLJH@?7DWORD?5?$AA@ DB 09H, 'DWORD ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IO@HAACEBKH@?7TITLE?5?$CFs?6?$DL?5generated?5by?5genccod@
CONST	SEGMENT
??_C@_0IO@HAACEBKH@?7TITLE?5?$CFs?6?$DL?5generated?5by?5genccod@ DB 09H, 'T'
	DB	'ITLE %s', 0aH, '; generated by genccode', 0aH, '.386', 0aH, '.'
	DB	'model flat', 0aH, 09H, 'PUBLIC _%s', 0aH, 'ICUDATA_%s', 09H, 'S'
	DB	'EGMENT READONLY PARA PUBLIC FLAT ''DATA''', 0aH, 09H, 'ALIGN '
	DB	'16', 0aH, '_%s', 09H, 'LABEL DWORD', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNABOIJL@masm?$AA@
CONST	SEGMENT
??_C@_04FNABOIJL@masm?$AA@ DB 'masm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFCKFDAA@?4WORD?5?$AA@
CONST	SEGMENT
??_C@_06LFCKFDAA@?4WORD?5?$AA@ DB '.WORD ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@PLHIHHIC@?7?4SPACE?5?5$TEXT$?6?7?4SUBSPA?5$LIT$?6?$CF@
CONST	SEGMENT
??_C@_0DL@PLHIHHIC@?7?4SPACE?5?5$TEXT$?6?7?4SUBSPA?5$LIT$?6?$CF@ DB 09H, '.'
	DB	'SPACE  $TEXT$', 0aH, 09H, '.SUBSPA $LIT$', 0aH, '%s', 0aH, 09H
	DB	'.EXPORT %s', 0aH, 09H, '.ALIGN  16', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HFIBKJC@aCC?9parisc?$AA@
CONST	SEGMENT
??_C@_0L@HFIBKJC@aCC?9parisc?$AA@ DB 'aCC-parisc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHOMCLAP@data4?5?$AA@
CONST	SEGMENT
??_C@_06OHOMCLAP@data4?5?$AA@ DB 'data4 ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0JA@LMBEAJJG@?7?4file?5?5?5?$CC?$CFs?4s?$CC?6?7?4type?5?5?5?$CFs?0?$EAobj@
CONST	SEGMENT
??_C@_0JA@LMBEAJJG@?7?4file?5?5?5?$CC?$CFs?4s?$CC?6?7?4type?5?5?5?$CFs?0?$EAobj@ DB 09H
	DB	'.file   "%s.s"', 0aH, 09H, '.type   %s,@object', 0aH, 09H, '.'
	DB	'global %s', 0aH, 09H, '.secalias .abe$0.rodata, ".rodata"', 0aH
	DB	09H, '.section .abe$0.rodata = "a", "progbits"', 0aH, 09H, '.a'
	DB	'lign  16', 0aH, '%s::', 09H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHFJCNDL@aCC?9ia64?$AA@
CONST	SEGMENT
??_C@_08LHFJCNDL@aCC?9ia64?$AA@ DB 'aCC-ia64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GHPHPDAD@?4globl?5?$CFs?$HLRO?$HN?6?7?4toc?6?$CFs?3?6?7?4csect?5@
CONST	SEGMENT
??_C@_0CL@GHPHPDAD@?4globl?5?$CFs?$HLRO?$HN?6?7?4toc?6?$CFs?3?6?7?4csect?5@ DB '.'
	DB	'globl %s{RO}', 0aH, 09H, '.toc', 0aH, '%s:', 0aH, 09H, '.csec'
	DB	't %s{RO}, 4', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HPCNKCLA@xlc?$AA@
CONST	SEGMENT
??_C@_03HPCNKCLA@xlc?$AA@ DB 'xlc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KEDGOHPO@?44byte?5?$AA@
CONST	SEGMENT
??_C@_07KEDGOHPO@?44byte?5?$AA@ DB '.4byte ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@NGMKLENA@Drodata?4rodata?3?6?7?4type?5?5?5Drodata@
CONST	SEGMENT
??_C@_0GH@NGMKLENA@Drodata?4rodata?3?6?7?4type?5?5?5Drodata@ DB 'Drodata.'
	DB	'rodata:', 0aH, 09H, '.type   Drodata.rodata,@object', 0aH, 09H
	DB	'.size   Drodata.rodata,0', 0aH, 09H, '.globl  %s', 0aH, 09H, '.'
	DB	'align  16', 0aH, '%s:', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BCGBNI@sun?9x86?$AA@
CONST	SEGMENT
??_C@_07BCGBNI@sun?9x86?$AA@ DB 'sun-x86', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLDIJAOM@?4word?5?$AA@
CONST	SEGMENT
??_C@_06OLDIJAOM@?4word?5?$AA@ DB '.word ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CLHODDIG@?7?4section?5?$CC?4rodata?$CC?6?7?4align?5?5?516@
CONST	SEGMENT
??_C@_0DE@CLHODDIG@?7?4section?5?$CC?4rodata?$CC?6?7?4align?5?5?516@ DB 09H
	DB	'.section ".rodata"', 0aH, 09H, '.align   16', 0aH, '.globl   '
	DB	'  %s', 0aH, '%s:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OHFMDAD@sun?$AA@
CONST	SEGMENT
??_C@_03OHFMDAD@sun?$AA@ DB 'sun', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@BJCKEFHH@?4globl?5?$CFs?6?7?4section?5?4rodata?6?7?4ba@
CONST	SEGMENT
??_C@_0CO@BJCKEFHH@?4globl?5?$CFs?6?7?4section?5?4rodata?6?7?4ba@ DB '.gl'
	DB	'obl %s', 0aH, 09H, '.section .rodata', 0aH, 09H, '.balign 16', 0aH
	DB	'%s:', 0aH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HJLABNHC@gcc?9mingw64?$AA@
CONST	SEGMENT
??_C@_0M@HJLABNHC@gcc?9mingw64?$AA@ DB 'gcc-mingw64', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KMCJDIME@?4globl?5_?$CFs?6?7?4section?5?4rodata?6?7?4b@
CONST	SEGMENT
??_C@_0DA@KMCJDIME@?4globl?5_?$CFs?6?7?4section?5?4rodata?6?7?4b@ DB '.gl'
	DB	'obl _%s', 0aH, 09H, '.section .rodata', 0aH, 09H, '.balign 16'
	DB	0aH, '_%s:', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CHCLDHLC@gcc?9cygwin?$AA@
CONST	SEGMENT
??_C@_0L@CHCLDHLC@gcc?9cygwin?$AA@ DB 'gcc-cygwin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@KLJFGLOB@?4globl?5_?$CFs?6?$CDifdef?5U_HIDE_DATA_SY@
CONST	SEGMENT
??_C@_0GD@KLJFGLOB@?4globl?5_?$CFs?6?$CDifdef?5U_HIDE_DATA_SY@ DB '.globl'
	DB	' _%s', 0aH, '#ifdef U_HIDE_DATA_SYMBOL', 0aH, 09H, '.private_'
	DB	'extern _%s', 0aH, '#endif', 0aH, 09H, '.data', 0aH, 09H, '.co'
	DB	'nst', 0aH, 09H, '.balign 16', 0aH, '_%s:', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KFAJJBDI@gcc?9darwin?$AA@
CONST	SEGMENT
??_C@_0L@KFAJJBDI@gcc?9darwin?$AA@ DB 'gcc-darwin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06JKKADEMK@?4long?5?$AA@
CONST	SEGMENT
??_C@_06JKKADEMK@?4long?5?$AA@ DB '.long ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0JG@DEJMOCIG@?4globl?5?$CFs?6?7?4section?5?4note?4GNU?9st@
CONST	SEGMENT
??_C@_0JG@DEJMOCIG@?4globl?5?$CFs?6?7?4section?5?4note?4GNU?9st@ DB '.glo'
	DB	'bl %s', 0aH, 09H, '.section .note.GNU-stack,"",%%progbits', 0aH
	DB	09H, '.section .rodata', 0aH, 09H, '.balign 16', 0aH, '#ifdef '
	DB	'U_HIDE_DATA_SYMBOL', 0aH, 09H, '.hidden %s', 0aH, '#endif', 0aH
	DB	09H, '.type %s,%%object', 0aH, '%s:', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMALKCEE@gcc?$AA@
CONST	SEGMENT
??_C@_03HMALKCEE@gcc?$AA@ DB 'gcc', 00H			; `string'
CONST	ENDS
PUBLIC	_checkAssemblyHeaderName
EXTRN	_strcmp:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\tools\toolutil\pkg_genc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _checkAssemblyHeaderName
_TEXT	SEGMENT
_idx$ = -8						; size = 4
_optAssembly$ = 8					; size = 4
_checkAssemblyHeaderName PROC				; COMDAT
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 234
	mov	DWORD PTR _assemblyHeaderIndex, -1
; Line 235
	mov	DWORD PTR _idx$[ebp], 0
	jmp	SHORT $LN4@checkAssem
$LN3@checkAssem:
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax
$LN4@checkAssem:
	cmp	DWORD PTR _idx$[ebp], 10		; 0000000aH
	jge	SHORT $LN2@checkAssem
; Line 236
	mov	eax, DWORD PTR _idx$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _assemblyHeader[eax]
	push	ecx
	mov	edx, DWORD PTR _optAssembly$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@checkAssem
; Line 237
	mov	eax, DWORD PTR _idx$[ebp]
	mov	DWORD PTR _assemblyHeaderIndex, eax
; Line 238
	mov	eax, DWORD PTR _idx$[ebp]
	imul	eax, 20					; 00000014H
	movsx	ecx, BYTE PTR _assemblyHeader[eax+16]
	mov	DWORD PTR _hexType, ecx
; Line 239
	mov	al, 1
	jmp	SHORT $LN5@checkAssem
$LN1@checkAssem:
; Line 241
	jmp	SHORT $LN3@checkAssem
$LN2@checkAssem:
; Line 243
	xor	al, al
$LN5@checkAssem:
; Line 244
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_checkAssemblyHeaderName ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MNMNLDAI@?$CJ?6?$AA@			; `string'
PUBLIC	??_C@_04KHEKMLOH@?0?5?$CFs?$AA@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	_printAssemblyHeadersToStdErr
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
;	COMDAT ??_C@_02MNMNLDAI@?$CJ?6?$AA@
CONST	SEGMENT
??_C@_02MNMNLDAI@?$CJ?6?$AA@ DB ')', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KHEKMLOH@?0?5?$CFs?$AA@
CONST	SEGMENT
??_C@_04KHEKMLOH@?0?5?$CFs?$AA@ DB ', %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _printAssemblyHeadersToStdErr
_TEXT	SEGMENT
_idx$ = -8						; size = 4
_printAssemblyHeadersToStdErr PROC			; COMDAT
; Line 248
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 250
	mov	esi, esp
	mov	eax, DWORD PTR _assemblyHeader
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 251
	mov	DWORD PTR _idx$[ebp], 1
	jmp	SHORT $LN3@printAssem
$LN2@printAssem:
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax
$LN3@printAssem:
	cmp	DWORD PTR _idx$[ebp], 10		; 0000000aH
	jge	SHORT $LN1@printAssem
; Line 252
	mov	eax, DWORD PTR _idx$[ebp]
	imul	eax, 20					; 00000014H
	mov	esi, esp
	mov	ecx, DWORD PTR _assemblyHeader[eax]
	push	ecx
	push	OFFSET ??_C@_04KHEKMLOH@?0?5?$CFs?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 253
	jmp	SHORT $LN2@printAssem
$LN1@printAssem:
; Line 255
	mov	esi, esp
	push	OFFSET ??_C@_02MNMNLDAI@?$CJ?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 256
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printAssemblyHeadersToStdErr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DK@GBDBEJCJ@genccode?3?5file?5write?5error?5while@ ; `string'
PUBLIC	??_C@_0DJ@NPOGDFKD@genccode?3?5file?5read?5error?5while?5@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_04DFJMCNEJ@_dat?$AA@			; `string'
PUBLIC	??_C@_0CJ@LLBHNLEL@genccode?3?5unable?5to?5open?5output?5@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_02KDPLEDJA@?4S?$AA@			; `string'
PUBLIC	??_C@_0CI@OOMMDHFE@genccode?3?5unable?5to?5open?5input?5f@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_writeAssemblyCode
EXTRN	_T_FileStream_close:PROC
EXTRN	_T_FileStream_error:PROC
EXTRN	_T_FileStream_read:PROC
EXTRN	_T_FileStream_writeLine:PROC
EXTRN	__imp__sprintf:PROC
EXTRN	_strlen:PROC
EXTRN	_strcat:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__exit:PROC
EXTRN	_T_FileStream_open:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0DK@GBDBEJCJ@genccode?3?5file?5write?5error?5while@
CONST	SEGMENT
??_C@_0DK@GBDBEJCJ@genccode?3?5file?5write?5error?5while@ DB 'genccode: f'
	DB	'ile write error while generating from file %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NPOGDFKD@genccode?3?5file?5read?5error?5while?5@
CONST	SEGMENT
??_C@_0DJ@NPOGDFKD@genccode?3?5file?5read?5error?5while?5@ DB 'genccode: '
	DB	'file read error while generating from file %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DFJMCNEJ@_dat?$AA@
CONST	SEGMENT
??_C@_04DFJMCNEJ@_dat?$AA@ DB '_dat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LLBHNLEL@genccode?3?5unable?5to?5open?5output?5@
CONST	SEGMENT
??_C@_0CJ@LLBHNLEL@genccode?3?5unable?5to?5open?5output?5@ DB 'genccode: '
	DB	'unable to open output file %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KDPLEDJA@?4S?$AA@
CONST	SEGMENT
??_C@_02KDPLEDJA@?4S?$AA@ DB '.S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OOMMDHFE@genccode?3?5unable?5to?5open?5input?5f@
CONST	SEGMENT
??_C@_0CI@OOMMDHFE@genccode?3?5unable?5to?5open?5input?5f@ DB 'genccode: '
	DB	'unable to open input file %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _writeAssemblyCode
_TEXT	SEGMENT
_length$ = -4248					; size = 4
_i$ = -4236						; size = 4
_out$ = -4224						; size = 4
_in$ = -4212						; size = 4
_bufferStr$ = -4200					; size = 4
_buffer$ = -4188					; size = 4096
_entry$ = -84						; size = 64
_column$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_destdir$ = 12						; size = 4
_optEntryPoint$ = 16					; size = 4
_optFilename$ = 20					; size = 4
_outFilePath$ = 24					; size = 4
_writeAssemblyCode PROC					; COMDAT
; Line 259
	push	ebp
	mov	ebp, esp
	mov	eax, 4444				; 0000115cH
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-4444]
	mov	ecx, 1111				; 00000457H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 260
	mov	DWORD PTR _column$[ebp], -1
; Line 263
	lea	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _bufferStr$[ebp], eax
; Line 267
	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_T_FileStream_open
	add	esp, 8
	mov	DWORD PTR _in$[ebp], eax
; Line 268
	cmp	DWORD PTR _in$[ebp], 0
	jne	SHORT $LN21@writeAssem
; Line 269
	mov	esi, esp
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CI@OOMMDHFE@genccode?3?5unable?5to?5open?5input?5f@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 270
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN21@writeAssem:
; Line 273
	mov	eax, DWORD PTR _optFilename$[ebp]
	push	eax
	push	OFFSET ??_C@_02KDPLEDJA@?4S?$AA@
	lea	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bufferStr$[ebp]
	push	edx
	mov	eax, DWORD PTR _destdir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_getOutFilename
	add	esp, 24					; 00000018H
; Line 274
	push	OFFSET ??_C@_01NOFIACDB@w?$AA@
	mov	eax, DWORD PTR _bufferStr$[ebp]
	push	eax
	call	_T_FileStream_open
	add	esp, 8
	mov	DWORD PTR _out$[ebp], eax
; Line 275
	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN20@writeAssem
; Line 276
	mov	esi, esp
	mov	eax, DWORD PTR _bufferStr$[ebp]
	push	eax
	push	OFFSET ??_C@_0CJ@LLBHNLEL@genccode?3?5unable?5to?5open?5output?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 277
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@writeAssem:
; Line 280
	cmp	DWORD PTR _outFilePath$[ebp], 0
	je	SHORT $LN19@writeAssem
; Line 281
	mov	eax, DWORD PTR _bufferStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outFilePath$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN19@writeAssem:
; Line 289
	cmp	DWORD PTR _optEntryPoint$[ebp], 0
	je	SHORT $LN18@writeAssem
; Line 290
	mov	eax, DWORD PTR _optEntryPoint$[ebp]
	push	eax
	lea	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 291
	push	OFFSET ??_C@_04DFJMCNEJ@_dat?$AA@
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
$LN18@writeAssem:
; Line 295
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
; Line 296
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@writeAssem
$LN16@writeAssem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN17@writeAssem:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jae	SHORT $LN15@writeAssem
; Line 297
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _entry$[ebp+eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN13@writeAssem
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _entry$[ebp+eax]
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN14@writeAssem
$LN13@writeAssem:
; Line 298
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _entry$[ebp+eax], 95		; 0000005fH
$LN14@writeAssem:
; Line 300
	jmp	SHORT $LN16@writeAssem
$LN15@writeAssem:
; Line 304
	mov	esi, esp
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	lea	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	lea	edx, DWORD PTR _entry$[ebp]
	push	edx
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	lea	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	lea	edx, DWORD PTR _entry$[ebp]
	push	edx
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	lea	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	mov	edx, DWORD PTR _assemblyHeaderIndex
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _assemblyHeader[edx+4]
	push	eax
	mov	ecx, DWORD PTR _bufferStr$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 305
	mov	eax, DWORD PTR _bufferStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_T_FileStream_writeLine
	add	esp, 8
; Line 306
	mov	eax, DWORD PTR _assemblyHeaderIndex
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _assemblyHeader[eax+8]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_T_FileStream_writeLine
	add	esp, 8
$LN12@writeAssem:
; Line 309
	push	4096					; 00001000H
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_T_FileStream_read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _length$[ebp], eax
; Line 310
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN10@writeAssem
; Line 311
	jmp	$LN11@writeAssem
$LN10@writeAssem:
; Line 313
	cmp	DWORD PTR _length$[ebp], 4096		; 00001000H
	je	SHORT $LN9@writeAssem
; Line 315
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@writeAssem
$LN7@writeAssem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@writeAssem:
	mov	eax, DWORD PTR _length$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	cmp	DWORD PTR _i$[ebp], edx
	jae	SHORT $LN9@writeAssem
; Line 316
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _buffer$[ebp+eax*4], 0
; Line 317
	jmp	SHORT $LN7@writeAssem
$LN9@writeAssem:
; Line 319
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@writeAssem
$LN4@writeAssem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@writeAssem:
	mov	eax, DWORD PTR _length$[ebp]
	shr	eax, 2
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN3@writeAssem
; Line 320
	mov	eax, DWORD PTR _column$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp+ecx*4]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_write32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _column$[ebp], eax
; Line 321
	jmp	SHORT $LN4@writeAssem
$LN3@writeAssem:
; Line 322
	jmp	$LN12@writeAssem
$LN11@writeAssem:
; Line 324
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_T_FileStream_writeLine
	add	esp, 8
; Line 328
	mov	esi, esp
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	lea	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	lea	edx, DWORD PTR _entry$[ebp]
	push	edx
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	lea	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	lea	edx, DWORD PTR _entry$[ebp]
	push	edx
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	lea	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	mov	edx, DWORD PTR _assemblyHeaderIndex
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _assemblyHeader[edx+12]
	push	eax
	mov	ecx, DWORD PTR _bufferStr$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 329
	mov	eax, DWORD PTR _bufferStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_T_FileStream_writeLine
	add	esp, 8
; Line 331
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_T_FileStream_error
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@writeAssem
; Line 332
	mov	esi, esp
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0DJ@NPOGDFKD@genccode?3?5file?5read?5error?5while?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 333
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@writeAssem:
; Line 336
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_T_FileStream_error
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@writeAssem
; Line 337
	mov	esi, esp
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0DK@GBDBEJCJ@genccode?3?5file?5write?5error?5while@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 338
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@writeAssem:
; Line 341
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_T_FileStream_close
	add	esp, 4
; Line 342
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_T_FileStream_close
	add	esp, 4
$LN23@writeAssem:
; Line 343
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@writeAssem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 4444				; 0000115cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN27@writeAssem:
	DD	2
	DD	$LN26@writeAssem
$LN26@writeAssem:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN24@writeAssem
	DD	-4188					; ffffefa4H
	DD	4096					; 00001000H
	DD	$LN25@writeAssem
$LN25@writeAssem:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN24@writeAssem:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
_writeAssemblyCode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@OPDEAPAJ@?6?$HN?6?$HN?$DL?6U_CDECL_END?6?$AA@ ; `string'
PUBLIC	??_C@_0MP@MOBJIGLO@?$CDifndef?5IN_GENERATED_CCODE?6?$CDdefi@ ; `string'
PUBLIC	??_C@_02HMLNHFGD@?4c?$AA@			; `string'
PUBLIC	??_C@_01IDAFKMJL@_?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_writeCCode
EXTRN	_T_FileStream_size:PROC
;	COMDAT ??_C@_0BD@OPDEAPAJ@?6?$HN?6?$HN?$DL?6U_CDECL_END?6?$AA@
CONST	SEGMENT
??_C@_0BD@OPDEAPAJ@?6?$HN?6?$HN?$DL?6U_CDECL_END?6?$AA@ DB 0aH, '}', 0aH, '}'
	DB	';', 0aH, 'U_CDECL_END', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0MP@MOBJIGLO@?$CDifndef?5IN_GENERATED_CCODE?6?$CDdefi@
CONST	SEGMENT
??_C@_0MP@MOBJIGLO@?$CDifndef?5IN_GENERATED_CCODE?6?$CDdefi@ DB '#ifndef '
	DB	'IN_GENERATED_CCODE', 0aH, '#define IN_GENERATED_CCODE', 0aH, '#'
	DB	'define U_DISABLE_RENAMING 1', 0aH, '#include "unicode/umachin'
	DB	'e.h"', 0aH, '#endif', 0aH, 'U_CDECL_BEGIN', 0aH, 'const struc'
	DB	't {', 0aH, '    double bogus;', 0aH, '    uint8_t bytes[%ld];'
	DB	' ', 0aH, '} %s={ 0.0, {', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HMLNHFGD@?4c?$AA@
CONST	SEGMENT
??_C@_02HMLNHFGD@?4c?$AA@ DB '.c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT
??_C@_01IDAFKMJL@_?$AA@ DB '_', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _writeCCode
_TEXT	SEGMENT
_length$ = -4236					; size = 4
_i$ = -4224						; size = 4
_out$ = -4212						; size = 4
_in$ = -4200						; size = 4
_entry$ = -4188						; size = 64
_buffer$ = -4116					; size = 4096
_column$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_destdir$ = 12						; size = 4
_optName$ = 16						; size = 4
_optFilename$ = 20					; size = 4
_outFilePath$ = 24					; size = 4
_writeCCode PROC					; COMDAT
; Line 346
	push	ebp
	mov	ebp, esp
	mov	eax, 4432				; 00001150H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-4432]
	mov	ecx, 1108				; 00000454H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 347
	mov	DWORD PTR _column$[ebp], -1
; Line 352
	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_T_FileStream_open
	add	esp, 8
	mov	DWORD PTR _in$[ebp], eax
; Line 353
	cmp	DWORD PTR _in$[ebp], 0
	jne	SHORT $LN18@writeCCode
; Line 354
	mov	esi, esp
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CI@OOMMDHFE@genccode?3?5unable?5to?5open?5input?5f@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 355
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@writeCCode:
; Line 358
	cmp	DWORD PTR _optName$[ebp], 0
	je	SHORT $LN17@writeCCode
; Line 359
	mov	eax, DWORD PTR _optName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 360
	push	OFFSET ??_C@_01IDAFKMJL@_?$AA@
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 361
	jmp	SHORT $LN16@writeCCode
$LN17@writeCCode:
; Line 362
	mov	BYTE PTR _entry$[ebp], 0
$LN16@writeCCode:
; Line 365
	mov	eax, DWORD PTR _optFilename$[ebp]
	push	eax
	push	OFFSET ??_C@_02HMLNHFGD@?4c?$AA@
	lea	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	lea	edx, DWORD PTR _entry$[ebp+eax]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destdir$[ebp]
	push	ecx
	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	call	_getOutFilename
	add	esp, 24					; 00000018H
; Line 366
	cmp	DWORD PTR _outFilePath$[ebp], 0
	je	SHORT $LN15@writeCCode
; Line 367
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outFilePath$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN15@writeCCode:
; Line 369
	push	OFFSET ??_C@_01NOFIACDB@w?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_T_FileStream_open
	add	esp, 8
	mov	DWORD PTR _out$[ebp], eax
; Line 370
	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN14@writeCCode
; Line 371
	mov	esi, esp
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	OFFSET ??_C@_0CJ@LLBHNLEL@genccode?3?5unable?5to?5open?5output?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 372
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@writeCCode:
; Line 376
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
; Line 377
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@writeCCode
$LN12@writeCCode:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@writeCCode:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jae	SHORT $LN11@writeCCode
; Line 378
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _entry$[ebp+eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN9@writeCCode
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _entry$[ebp+eax]
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN10@writeCCode
$LN9@writeCCode:
; Line 379
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _entry$[ebp+eax], 95		; 0000005fH
$LN10@writeCCode:
; Line 381
	jmp	SHORT $LN12@writeCCode
$LN11@writeCCode:
; Line 434
	mov	esi, esp
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_T_FileStream_size
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0MP@MOBJIGLO@?$CDifndef?5IN_GENERATED_CCODE?6?$CDdefi@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 435
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_T_FileStream_writeLine
	add	esp, 8
$LN8@writeCCode:
; Line 438
	push	4096					; 00001000H
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_T_FileStream_read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _length$[ebp], eax
; Line 439
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN6@writeCCode
; Line 440
	jmp	SHORT $LN7@writeCCode
$LN6@writeCCode:
; Line 442
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@writeCCode
$LN4@writeCCode:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@writeCCode:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jae	SHORT $LN3@writeCCode
; Line 443
	mov	eax, DWORD PTR _column$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _buffer$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_write8
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _column$[ebp], eax
; Line 444
	jmp	SHORT $LN4@writeCCode
$LN3@writeCCode:
; Line 445
	jmp	SHORT $LN8@writeCCode
$LN7@writeCCode:
; Line 447
	push	OFFSET ??_C@_0BD@OPDEAPAJ@?6?$HN?6?$HN?$DL?6U_CDECL_END?6?$AA@
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_T_FileStream_writeLine
	add	esp, 8
; Line 450
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_T_FileStream_error
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@writeCCode
; Line 451
	mov	esi, esp
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0DJ@NPOGDFKD@genccode?3?5file?5read?5error?5while?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 452
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@writeCCode:
; Line 455
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_T_FileStream_error
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@writeCCode
; Line 456
	mov	esi, esp
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0DK@GBDBEJCJ@genccode?3?5file?5write?5error?5while@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 457
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@writeCCode:
; Line 460
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_T_FileStream_close
	add	esp, 4
; Line 461
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_T_FileStream_close
	add	esp, 4
$LN20@writeCCode:
; Line 462
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@writeCCode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 4432				; 00001150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN24@writeCCode:
	DD	2
	DD	$LN23@writeCCode
$LN23@writeCCode:
	DD	-4116					; ffffefecH
	DD	4096					; 00001000H
	DD	$LN21@writeCCode
	DD	-4188					; ffffefa4H
	DD	64					; 00000040H
	DD	$LN22@writeCCode
$LN22@writeCCode:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
$LN21@writeCCode:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_writeCCode ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _write32
_TEXT	SEGMENT
_value$28389 = -129					; size = 1
_seenNonZero$28381 = -120				; size = 4
_ptrIdx$ = -108						; size = 4
_s$ = -96						; size = 4
_bitFieldStr$ = -84					; size = 64
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_bitField$ = 12						; size = 4
_column$ = 16						; size = 4
_write32 PROC						; COMDAT
; Line 465
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 468
	lea	eax, DWORD PTR _bitFieldStr$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 469
	lea	eax, DWORD PTR _bitField$[ebp]
	mov	DWORD PTR _ptrIdx$[ebp], eax
; Line 478
	cmp	DWORD PTR _column$[ebp], -1
	jne	SHORT $LN15@write32
; Line 480
	mov	DWORD PTR _column$[ebp], 1
	jmp	SHORT $LN14@write32
$LN15@write32:
; Line 481
	cmp	DWORD PTR _column$[ebp], 32		; 00000020H
	jae	SHORT $LN13@write32
; Line 482
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 44			; 0000002cH
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 483
	mov	eax, DWORD PTR _column$[ebp]
	add	eax, 1
	mov	DWORD PTR _column$[ebp], eax
; Line 484
	jmp	SHORT $LN14@write32
$LN13@write32:
; Line 485
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 10			; 0000000aH
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 486
	mov	eax, DWORD PTR _assemblyHeaderIndex
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _assemblyHeader[eax+8]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 487
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 488
	mov	DWORD PTR _column$[ebp], 1
$LN14@write32:
; Line 491
	cmp	DWORD PTR _bitField$[ebp], 10		; 0000000aH
	jae	SHORT $LN11@write32
; Line 493
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _bitField$[ebp]
	mov	dl, BYTE PTR ?hexToStr@?1??write32@@9@9[ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 495
	jmp	$LN10@write32
$LN11@write32:
; Line 496
	mov	DWORD PTR _seenNonZero$28381[ebp], 0
; Line 498
	cmp	DWORD PTR _hexType, 0
	jne	SHORT $LN9@write32
; Line 499
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 500
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 120			; 00000078H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
	jmp	SHORT $LN8@write32
$LN9@write32:
; Line 501
	cmp	DWORD PTR _hexType, 1
	jne	SHORT $LN8@write32
; Line 502
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
$LN8@write32:
; Line 509
	mov	DWORD PTR _i$[ebp], 3
	jmp	SHORT $LN6@write32
$LN5@write32:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@write32:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN4@write32
; Line 512
	mov	eax, DWORD PTR _ptrIdx$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _value$28389[ebp], cl
; Line 513
	movzx	eax, BYTE PTR _value$28389[ebp]
	test	eax, eax
	jne	SHORT $LN2@write32
	cmp	DWORD PTR _seenNonZero$28381[ebp], 0
	je	SHORT $LN3@write32
$LN2@write32:
; Line 514
	movzx	eax, BYTE PTR _value$28389[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR ?hexToStr@?1??write32@@9@9[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 515
	movzx	eax, BYTE PTR _value$28389[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR ?hexToStr@?1??write32@@9@9[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 516
	mov	DWORD PTR _seenNonZero$28381[ebp], 1
$LN3@write32:
; Line 518
	jmp	SHORT $LN5@write32
$LN4@write32:
; Line 519
	cmp	DWORD PTR _hexType, 1
	jne	SHORT $LN10@write32
; Line 520
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 104			; 00000068H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
$LN10@write32:
; Line 524
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 525
	lea	eax, DWORD PTR _bitFieldStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_T_FileStream_writeLine
	add	esp, 8
; Line 526
	mov	eax, DWORD PTR _column$[ebp]
; Line 527
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@write32
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@write32:
	DD	1
	DD	$LN19@write32
$LN19@write32:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN18@write32
$LN18@write32:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_write32 ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MLAGHBOD@?0?6?$AA@			; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
;	COMDAT ??_C@_02MLAGHBOD@?0?6?$AA@
CONST	SEGMENT
??_C@_02MLAGHBOD@?0?6?$AA@ DB ',', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _write8
_TEXT	SEGMENT
_i$ = -20						; size = 4
_s$ = -8						; size = 4
_out$ = 8						; size = 4
_byte$ = 12						; size = 1
_column$ = 16						; size = 4
_write8	PROC						; COMDAT
; Line 530
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 532
	mov	DWORD PTR _i$[ebp], 0
; Line 535
	movzx	eax, BYTE PTR _byte$[ebp]
	cmp	eax, 100				; 00000064H
	jl	SHORT $LN7@write8
; Line 536
	movzx	eax, BYTE PTR _byte$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _s$[ebp+edx], al
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 537
	movzx	eax, BYTE PTR _byte$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	BYTE PTR _byte$[ebp], dl
$LN7@write8:
; Line 539
	cmp	DWORD PTR _i$[ebp], 0
	jg	SHORT $LN5@write8
	movzx	eax, BYTE PTR _byte$[ebp]
	cmp	eax, 10					; 0000000aH
	jl	SHORT $LN6@write8
$LN5@write8:
; Line 540
	movzx	eax, BYTE PTR _byte$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _s$[ebp+edx], al
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 541
	movzx	eax, BYTE PTR _byte$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	BYTE PTR _byte$[ebp], dl
$LN6@write8:
; Line 543
	movzx	eax, BYTE PTR _byte$[ebp]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _s$[ebp+ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 544
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _s$[ebp+eax], 0
; Line 547
	cmp	DWORD PTR _column$[ebp], -1
	jne	SHORT $LN4@write8
; Line 549
	mov	DWORD PTR _column$[ebp], 1
	jmp	SHORT $LN3@write8
$LN4@write8:
; Line 550
	cmp	DWORD PTR _column$[ebp], 16		; 00000010H
	jae	SHORT $LN2@write8
; Line 551
	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_T_FileStream_writeLine
	add	esp, 8
; Line 552
	mov	eax, DWORD PTR _column$[ebp]
	add	eax, 1
	mov	DWORD PTR _column$[ebp], eax
; Line 553
	jmp	SHORT $LN3@write8
$LN2@write8:
; Line 554
	push	OFFSET ??_C@_02MLAGHBOD@?0?6?$AA@
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_T_FileStream_writeLine
	add	esp, 8
; Line 555
	mov	DWORD PTR _column$[ebp], 1
$LN3@write8:
; Line 557
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_T_FileStream_writeLine
	add	esp, 8
; Line 558
	mov	eax, DWORD PTR _column$[ebp]
; Line 559
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@write8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@write8:
	DD	1
	DD	$LN11@write8
$LN11@write8:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@write8
$LN10@write8:
	DB	115					; 00000073H
	DB	0
_write8	ENDP
_TEXT	ENDS
EXTRN	__imp__strrchr:PROC
EXTRN	_findBasename:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _getOutFilename
_TEXT	SEGMENT
_saveOutFilename$28446 = -32				; size = 4
_suffix$ = -20						; size = 4
_basename$ = -8						; size = 4
_inFilename$ = 8					; size = 4
_destdir$ = 12						; size = 4
_outFilename$ = 16					; size = 4
_entryName$ = 20					; size = 4
_newSuffix$ = 24					; size = 4
_optFilename$ = 28					; size = 4
_getOutFilename PROC					; COMDAT
; Line 588
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 589
	mov	eax, DWORD PTR _inFilename$[ebp]
	push	eax
	call	_findBasename
	add	esp, 4
	mov	DWORD PTR _basename$[ebp], eax
	mov	esi, esp
	push	46					; 0000002eH
	mov	eax, DWORD PTR _basename$[ebp]
	push	eax
	call	DWORD PTR __imp__strrchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _suffix$[ebp], eax
; Line 592
	cmp	DWORD PTR _destdir$[ebp], 0
	je	SHORT $LN14@getOutFile
	mov	eax, DWORD PTR _destdir$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN14@getOutFile
$LN19@getOutFile:
; Line 594
	mov	eax, DWORD PTR _outFilename$[ebp]
	mov	ecx, DWORD PTR _destdir$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _outFilename$[ebp]
	add	eax, 1
	mov	DWORD PTR _outFilename$[ebp], eax
	mov	ecx, DWORD PTR _destdir$[ebp]
	add	ecx, 1
	mov	DWORD PTR _destdir$[ebp], ecx
; Line 595
	mov	eax, DWORD PTR _destdir$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN19@getOutFile
; Line 596
	mov	eax, DWORD PTR _outFilename$[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN16@getOutFile
; Line 597
	mov	eax, DWORD PTR _outFilename$[ebp]
	mov	BYTE PTR [eax], 92			; 0000005cH
	mov	ecx, DWORD PTR _outFilename$[ebp]
	add	ecx, 1
	mov	DWORD PTR _outFilename$[ebp], ecx
$LN16@getOutFile:
; Line 599
	mov	eax, DWORD PTR _basename$[ebp]
	mov	DWORD PTR _inFilename$[ebp], eax
; Line 600
	jmp	SHORT $LN15@getOutFile
$LN14@getOutFile:
; Line 601
	mov	eax, DWORD PTR _inFilename$[ebp]
	cmp	eax, DWORD PTR _basename$[ebp]
	jae	SHORT $LN15@getOutFile
; Line 602
	mov	eax, DWORD PTR _outFilename$[ebp]
	mov	ecx, DWORD PTR _inFilename$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _outFilename$[ebp]
	add	eax, 1
	mov	DWORD PTR _outFilename$[ebp], eax
	mov	ecx, DWORD PTR _inFilename$[ebp]
	add	ecx, 1
	mov	DWORD PTR _inFilename$[ebp], ecx
; Line 603
	jmp	SHORT $LN14@getOutFile
$LN15@getOutFile:
; Line 606
	cmp	DWORD PTR _suffix$[ebp], 0
	jne	SHORT $LN12@getOutFile
; Line 608
	mov	eax, DWORD PTR _inFilename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _entryName$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 609
	cmp	DWORD PTR _optFilename$[ebp], 0
	je	SHORT $LN11@getOutFile
; Line 610
	mov	eax, DWORD PTR _optFilename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outFilename$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 611
	jmp	SHORT $LN10@getOutFile
$LN11@getOutFile:
; Line 612
	mov	eax, DWORD PTR _inFilename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outFilename$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN10@getOutFile:
; Line 614
	mov	eax, DWORD PTR _newSuffix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outFilename$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
; Line 615
	jmp	$LN21@getOutFile
$LN12@getOutFile:
; Line 616
	mov	eax, DWORD PTR _outFilename$[ebp]
	mov	DWORD PTR _saveOutFilename$28446[ebp], eax
$LN8@getOutFile:
; Line 618
	mov	eax, DWORD PTR _inFilename$[ebp]
	cmp	eax, DWORD PTR _suffix$[ebp]
	jae	SHORT $LN7@getOutFile
; Line 619
	mov	eax, DWORD PTR _inFilename$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN6@getOutFile
; Line 621
	mov	eax, DWORD PTR _entryName$[ebp]
	mov	BYTE PTR [eax], 95			; 0000005fH
	mov	ecx, DWORD PTR _outFilename$[ebp]
	mov	BYTE PTR [ecx], 95			; 0000005fH
	mov	edx, DWORD PTR _outFilename$[ebp]
	add	edx, 1
	mov	DWORD PTR _outFilename$[ebp], edx
	mov	eax, DWORD PTR _entryName$[ebp]
	add	eax, 1
	mov	DWORD PTR _entryName$[ebp], eax
; Line 622
	mov	eax, DWORD PTR _inFilename$[ebp]
	add	eax, 1
	mov	DWORD PTR _inFilename$[ebp], eax
; Line 624
	jmp	SHORT $LN5@getOutFile
$LN6@getOutFile:
; Line 625
	mov	eax, DWORD PTR _entryName$[ebp]
	mov	ecx, DWORD PTR _inFilename$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _outFilename$[ebp]
	mov	ecx, DWORD PTR _entryName$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _outFilename$[ebp]
	add	eax, 1
	mov	DWORD PTR _outFilename$[ebp], eax
	mov	ecx, DWORD PTR _entryName$[ebp]
	add	ecx, 1
	mov	DWORD PTR _entryName$[ebp], ecx
	mov	edx, DWORD PTR _inFilename$[ebp]
	add	edx, 1
	mov	DWORD PTR _inFilename$[ebp], edx
$LN5@getOutFile:
; Line 627
	jmp	SHORT $LN8@getOutFile
$LN7@getOutFile:
; Line 630
	mov	eax, DWORD PTR _entryName$[ebp]
	mov	BYTE PTR [eax], 95			; 0000005fH
	mov	ecx, DWORD PTR _outFilename$[ebp]
	mov	BYTE PTR [ecx], 95			; 0000005fH
	mov	edx, DWORD PTR _outFilename$[ebp]
	add	edx, 1
	mov	DWORD PTR _outFilename$[ebp], edx
	mov	eax, DWORD PTR _entryName$[ebp]
	add	eax, 1
	mov	DWORD PTR _entryName$[ebp], eax
; Line 631
	mov	eax, DWORD PTR _inFilename$[ebp]
	add	eax, 1
	mov	DWORD PTR _inFilename$[ebp], eax
$LN4@getOutFile:
; Line 634
	mov	eax, DWORD PTR _inFilename$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@getOutFile
; Line 635
	mov	eax, DWORD PTR _entryName$[ebp]
	mov	ecx, DWORD PTR _inFilename$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _outFilename$[ebp]
	mov	ecx, DWORD PTR _entryName$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _outFilename$[ebp]
	add	eax, 1
	mov	DWORD PTR _outFilename$[ebp], eax
	mov	ecx, DWORD PTR _entryName$[ebp]
	add	ecx, 1
	mov	DWORD PTR _entryName$[ebp], ecx
	mov	edx, DWORD PTR _inFilename$[ebp]
	add	edx, 1
	mov	DWORD PTR _inFilename$[ebp], edx
; Line 636
	jmp	SHORT $LN4@getOutFile
$LN3@getOutFile:
; Line 638
	mov	eax, DWORD PTR _entryName$[ebp]
	mov	BYTE PTR [eax], 0
; Line 640
	cmp	DWORD PTR _optFilename$[ebp], 0
	je	SHORT $LN2@getOutFile
; Line 641
	mov	eax, DWORD PTR _optFilename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveOutFilename$28446[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 642
	mov	eax, DWORD PTR _newSuffix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveOutFilename$28446[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
; Line 643
	jmp	SHORT $LN21@getOutFile
$LN2@getOutFile:
; Line 645
	mov	eax, DWORD PTR _newSuffix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outFilename$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN21@getOutFile:
; Line 648
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getOutFilename ENDP
_TEXT	ENDS
PUBLIC	??_C@_06HLMNBFAL@?4rdata?$AA@			; `string'
PUBLIC	??_C@_08FGJDPCJM@?4drectve?$AA@			; `string'
PUBLIC	??_C@_06GFHFNCKG@?0data?5?$AA@			; `string'
PUBLIC	??_C@_08IKODCFIJ@?9export?3?$AA@		; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_0DH@LIMFDJOJ@genccode?3?5?9?9match?9arch?5cpu?$DN?$CFhu?5b@ ; `string'
PUBLIC	??_C@_04PACIOCLB@?4obj?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_writeObjectCode
EXTRN	_T_FileStream_write:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_memset:PROC
EXTRN	__imp__printf:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_06HLMNBFAL@?4rdata?$AA@
CONST	SEGMENT
??_C@_06HLMNBFAL@?4rdata?$AA@ DB '.rdata', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FGJDPCJM@?4drectve?$AA@
CONST	SEGMENT
??_C@_08FGJDPCJM@?4drectve?$AA@ DB '.drectve', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GFHFNCKG@?0data?5?$AA@
CONST	SEGMENT
??_C@_06GFHFNCKG@?0data?5?$AA@ DB ',data ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IKODCFIJ@?9export?3?$AA@
CONST	SEGMENT
??_C@_08IKODCFIJ@?9export?3?$AA@ DB '-export:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@LIMFDJOJ@genccode?3?5?9?9match?9arch?5cpu?$DN?$CFhu?5b@
CONST	SEGMENT
??_C@_0DH@LIMFDJOJ@genccode?3?5?9?9match?9arch?5cpu?$DN?$CFhu?5b@ DB 'gen'
	DB	'ccode: --match-arch cpu=%hu bits=%hu big-endian=%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PACIOCLB@?4obj?$AA@
CONST	SEGMENT
??_C@_04PACIOCLB@?4obj?$AA@ DB '.obj', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _writeObjectCode
_TEXT	SEGMENT
_symbolNames$ = -4700					; size = 104
_symbols$ = -4588					; size = 18
_objHeader$ = -4560					; size = 200
_makeBigEndian$ = -4349					; size = 1
_bits$ = -4340						; size = 2
_cpu$ = -4328						; size = 2
_entryLengthOffset$ = -4316				; size = 4
_entryOffset$ = -4304					; size = 4
_size$ = -4292						; size = 4
_length$ = -4280					; size = 4
_entryLength$ = -4268					; size = 4
_i$ = -4256						; size = 4
_newSuffix$ = -4244					; size = 4
_out$ = -4232						; size = 4
_in$ = -4220						; size = 4
_entry$ = -4208						; size = 96
_buffer$ = -4104					; size = 4096
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_destdir$ = 12						; size = 4
_optEntryPoint$ = 16					; size = 4
_optMatchArch$ = 20					; size = 4
_optFilename$ = 24					; size = 4
_outFilePath$ = 28					; size = 4
_writeObjectCode PROC					; COMDAT
; Line 768
	push	ebp
	mov	ebp, esp
	mov	eax, 4896				; 00001320H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-4896]
	mov	ecx, 1224				; 000004c8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 770
	mov	BYTE PTR _entry$[ebp], 0
	push	95					; 0000005fH
	push	0
	lea	eax, DWORD PTR _entry$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 773
	mov	DWORD PTR _entryOffset$[ebp], 0
	mov	DWORD PTR _entryLengthOffset$[ebp], 0
; Line 1022
	mov	BYTE PTR _entry$[ebp], 95		; 0000005fH
; Line 1024
	mov	DWORD PTR _newSuffix$[ebp], OFFSET ??_C@_04PACIOCLB@?4obj?$AA@
; Line 1030
	mov	eax, DWORD PTR _optMatchArch$[ebp]
	push	eax
	lea	ecx, DWORD PTR _makeBigEndian$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bits$[ebp]
	push	edx
	lea	eax, DWORD PTR _cpu$[ebp]
	push	eax
	call	_getArchitecture
	add	esp, 16					; 00000010H
; Line 1031
	movsx	eax, BYTE PTR _makeBigEndian$[ebp]
	mov	esi, esp
	push	eax
	movzx	ecx, WORD PTR _bits$[ebp]
	push	ecx
	movzx	edx, WORD PTR _cpu$[ebp]
	push	edx
	push	OFFSET ??_C@_0DH@LIMFDJOJ@genccode?3?5?9?9match?9arch?5cpu?$DN?$CFhu?5b@
	call	DWORD PTR __imp__printf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1033
	movzx	eax, WORD PTR _cpu$[ebp]
	cmp	eax, 332				; 0000014cH
	jne	SHORT $LN16@writeObjec
; Line 1034
	mov	DWORD PTR _entryOffset$[ebp], 1
$LN16@writeObjec:
; Line 1038
	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_T_FileStream_open
	add	esp, 8
	mov	DWORD PTR _in$[ebp], eax
; Line 1039
	cmp	DWORD PTR _in$[ebp], 0
	jne	SHORT $LN15@writeObjec
; Line 1040
	mov	esi, esp
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CI@OOMMDHFE@genccode?3?5unable?5to?5open?5input?5f@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1041
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@writeObjec:
; Line 1043
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_T_FileStream_size
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax
; Line 1045
	mov	eax, DWORD PTR _optFilename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newSuffix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _entryOffset$[ebp]
	lea	eax, DWORD PTR _entry$[ebp+edx]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destdir$[ebp]
	push	edx
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_getOutFilename
	add	esp, 24					; 00000018H
; Line 1046
	cmp	DWORD PTR _outFilePath$[ebp], 0
	je	SHORT $LN14@writeObjec
; Line 1047
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outFilePath$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN14@writeObjec:
; Line 1050
	cmp	DWORD PTR _optEntryPoint$[ebp], 0
	je	SHORT $LN13@writeObjec
; Line 1051
	mov	eax, DWORD PTR _optEntryPoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _entryOffset$[ebp]
	lea	edx, DWORD PTR _entry$[ebp+ecx]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 1052
	push	OFFSET ??_C@_04DFJMCNEJ@_dat?$AA@
	mov	eax, DWORD PTR _entryOffset$[ebp]
	lea	ecx, DWORD PTR _entry$[ebp+eax]
	push	ecx
	call	_strcat
	add	esp, 8
$LN13@writeObjec:
; Line 1055
	mov	eax, DWORD PTR _entryLengthOffset$[ebp]
	lea	ecx, DWORD PTR _entry$[ebp+eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _entryLength$[ebp], eax
; Line 1056
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@writeObjec
$LN11@writeObjec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@writeObjec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _entryLength$[ebp]
	jge	SHORT $LN10@writeObjec
; Line 1057
	mov	eax, DWORD PTR _entryLengthOffset$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _entry$[ebp+eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN9@writeObjec
; Line 1058
	mov	eax, DWORD PTR _entryLengthOffset$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _entry$[ebp+eax], 95		; 0000005fH
$LN9@writeObjec:
; Line 1060
	jmp	SHORT $LN11@writeObjec
$LN10@writeObjec:
; Line 1063
	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_T_FileStream_open
	add	esp, 8
	mov	DWORD PTR _out$[ebp], eax
; Line 1064
	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN8@writeObjec
; Line 1065
	mov	esi, esp
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	OFFSET ??_C@_0CJ@LLBHNLEL@genccode?3?5unable?5to?5open?5output?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1066
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@writeObjec:
; Line 1119
	push	200					; 000000c8H
	push	0
	lea	eax, DWORD PTR _objHeader$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1120
	push	18					; 00000012H
	push	0
	lea	eax, DWORD PTR _symbols$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1121
	push	104					; 00000068H
	push	0
	lea	eax, DWORD PTR _symbolNames$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1124
	push	OFFSET ??_C@_08IKODCFIJ@?9export?3?$AA@
	lea	eax, DWORD PTR _objHeader$[ebp+100]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 1125
	mov	DWORD PTR _length$[ebp], 8
; Line 1126
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	lea	edx, DWORD PTR _objHeader$[ebp+ecx+100]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 1127
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _entryLength$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 1128
	push	OFFSET ??_C@_06GFHFNCKG@?0data?5?$AA@
	mov	eax, DWORD PTR _length$[ebp]
	lea	ecx, DWORD PTR _objHeader$[ebp+eax+100]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 1129
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 6
	mov	DWORD PTR _length$[ebp], eax
; Line 1132
	mov	ax, WORD PTR _cpu$[ebp]
	mov	WORD PTR _objHeader$[ebp], ax
; Line 1133
	mov	eax, 2
	mov	WORD PTR _objHeader$[ebp+2], ax
; Line 1134
	push	0
	call	_time
	add	esp, 4
	mov	DWORD PTR _objHeader$[ebp+4], eax
; Line 1135
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	lea	edx, DWORD PTR [ecx+eax+100]
	mov	DWORD PTR _objHeader$[ebp+8], edx
; Line 1136
	mov	DWORD PTR _objHeader$[ebp+12], 1
; Line 1139
	push	1
	push	OFFSET ??_C@_08FGJDPCJM@?4drectve?$AA@
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	push	8
	push	OFFSET ??_C@_08FGJDPCJM@?4drectve?$AA@
	lea	eax, DWORD PTR _objHeader$[ebp+20]
	push	eax
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1140
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _objHeader$[ebp+36], eax
; Line 1141
	mov	DWORD PTR _objHeader$[ebp+40], 100	; 00000064H
; Line 1142
	mov	DWORD PTR _objHeader$[ebp+56], 1051136	; 00100a00H
; Line 1145
	push	1
	push	OFFSET ??_C@_06HLMNBFAL@?4rdata?$AA@
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	push	6
	push	OFFSET ??_C@_06HLMNBFAL@?4rdata?$AA@
	lea	eax, DWORD PTR _objHeader$[ebp+60]
	push	eax
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1146
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _objHeader$[ebp+76], eax
; Line 1147
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _objHeader$[ebp+80], eax
; Line 1148
	mov	DWORD PTR _objHeader$[ebp+96], 1078984768 ; 40500040H
; Line 1151
	cmp	DWORD PTR _entryLength$[ebp], 8
	jg	SHORT $LN7@writeObjec
; Line 1152
	push	1
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	mov	ecx, DWORD PTR _entryLength$[ebp]
	push	ecx
	lea	edx, DWORD PTR _entry$[ebp]
	push	edx
	lea	eax, DWORD PTR _symbols$[ebp]
	push	eax
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1153
	mov	DWORD PTR _symbolNames$[ebp], 4
; Line 1154
	jmp	SHORT $LN6@writeObjec
$LN7@writeObjec:
; Line 1155
	mov	DWORD PTR _symbols$[ebp], 0
; Line 1156
	mov	DWORD PTR _symbols$[ebp+4], 4
; Line 1157
	mov	eax, DWORD PTR _entryLength$[ebp]
	add	eax, 5
	mov	DWORD PTR _symbolNames$[ebp], eax
; Line 1158
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	lea	ecx, DWORD PTR _symbolNames$[ebp+4]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN6@writeObjec:
; Line 1160
	mov	eax, 2
	mov	WORD PTR _symbols$[ebp+12], ax
; Line 1161
	mov	BYTE PTR _symbols$[ebp+16], 2
; Line 1164
	mov	eax, DWORD PTR _objHeader$[ebp+80]
	push	eax
	lea	ecx, DWORD PTR _objHeader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_T_FileStream_write
	add	esp, 12					; 0000000cH
$LN5@writeObjec:
; Line 1171
	push	4096					; 00001000H
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_T_FileStream_read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _length$[ebp], eax
; Line 1172
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN3@writeObjec
; Line 1173
	jmp	SHORT $LN4@writeObjec
$LN3@writeObjec:
; Line 1175
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_T_FileStream_write
	add	esp, 12					; 0000000cH
; Line 1176
	jmp	SHORT $LN5@writeObjec
$LN4@writeObjec:
; Line 1180
	push	18					; 00000012H
	lea	eax, DWORD PTR _symbols$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_T_FileStream_write
	add	esp, 12					; 0000000cH
; Line 1181
	mov	eax, DWORD PTR _symbolNames$[ebp]
	push	eax
	lea	ecx, DWORD PTR _symbolNames$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_T_FileStream_write
	add	esp, 12					; 0000000cH
; Line 1184
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_T_FileStream_error
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@writeObjec
; Line 1185
	mov	esi, esp
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0DJ@NPOGDFKD@genccode?3?5file?5read?5error?5while?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1186
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@writeObjec:
; Line 1189
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_T_FileStream_error
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@writeObjec
; Line 1190
	mov	esi, esp
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0DK@GBDBEJCJ@genccode?3?5file?5write?5error?5while@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1191
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@writeObjec:
; Line 1194
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_T_FileStream_close
	add	esp, 4
; Line 1195
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_T_FileStream_close
	add	esp, 4
$LN18@writeObjec:
; Line 1196
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@writeObjec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 4896				; 00001320H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN28@writeObjec:
	DD	8
	DD	$LN27@writeObjec
$LN27@writeObjec:
	DD	-4104					; ffffeff8H
	DD	4096					; 00001000H
	DD	$LN19@writeObjec
	DD	-4208					; ffffef90H
	DD	96					; 00000060H
	DD	$LN20@writeObjec
	DD	-4328					; ffffef18H
	DD	2
	DD	$LN21@writeObjec
	DD	-4340					; ffffef0cH
	DD	2
	DD	$LN22@writeObjec
	DD	-4349					; ffffef03H
	DD	1
	DD	$LN23@writeObjec
	DD	-4560					; ffffee30H
	DD	200					; 000000c8H
	DD	$LN24@writeObjec
	DD	-4588					; ffffee14H
	DD	18					; 00000012H
	DD	$LN25@writeObjec
	DD	-4700					; ffffeda4H
	DD	104					; 00000068H
	DD	$LN26@writeObjec
$LN26@writeObjec:
	DB	115					; 00000073H
	DB	121					; 00000079H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN25@writeObjec:
	DB	115					; 00000073H
	DB	121					; 00000079H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
$LN24@writeObjec:
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	72					; 00000048H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN23@writeObjec:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	0
$LN22@writeObjec:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN21@writeObjec:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	0
$LN20@writeObjec:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
$LN19@writeObjec:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_writeObjectCode ENDP
_TEXT	ENDS
EXTRN	__imp___time64:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 133
	mov	esi, esp
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	DWORD PTR __imp___time64
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 134
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@COFEICGD@genccode?3?5match?9arch?5file?5?$CFs?5is?5@ ; `string'
PUBLIC	??_C@_0CN@DMNONJLI@genccode?3?5unable?5to?5open?5match?9a@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0CL@COFEICGD@genccode?3?5match?9arch?5file?5?$CFs?5is?5@
; File d:\mozilla\intl\icu\source\tools\toolutil\pkg_genc.c
CONST	SEGMENT
??_C@_0CL@COFEICGD@genccode?3?5match?9arch?5file?5?$CFs?5is?5@ DB 'gencco'
	DB	'de: match-arch file %s is too short', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DMNONJLI@genccode?3?5unable?5to?5open?5match?9a@
CONST	SEGMENT
??_C@_0CN@DMNONJLI@genccode?3?5unable?5to?5open?5match?9a@ DB 'genccode: '
	DB	'unable to open match-arch file %s', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _getArchitecture
_TEXT	SEGMENT
_pHeader$ = -2104					; size = 4
_length$ = -2092					; size = 4
_in$ = -2080						; size = 4
_filename$ = -2068					; size = 4
_buffer$ = -2056					; size = 2048
__$ArrayPad$ = -4					; size = 4
_pCPU$ = 8						; size = 4
_pBits$ = 12						; size = 4
_pIsBigEndian$ = 16					; size = 4
_optMatchArch$ = 20					; size = 4
_getArchitecture PROC					; COMDAT
; Line 652
	push	ebp
	mov	ebp, esp
	sub	esp, 2300				; 000008fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2300]
	mov	ecx, 575				; 0000023fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 675
	cmp	DWORD PTR _optMatchArch$[ebp], 0
	je	SHORT $LN4@getArchite
; Line 676
	mov	eax, DWORD PTR _optMatchArch$[ebp]
	mov	DWORD PTR _filename$[ebp], eax
; Line 677
	jmp	SHORT $LN3@getArchite
$LN4@getArchite:
; Line 691
	mov	eax, 332				; 0000014cH
	mov	ecx, DWORD PTR _pCPU$[ebp]
	mov	WORD PTR [ecx], ax
; Line 693
	mov	eax, DWORD PTR _pCPU$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 332				; 0000014cH
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 32					; 00000020H
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _pBits$[ebp]
	mov	WORD PTR [edx], cx
; Line 694
	mov	eax, DWORD PTR _pIsBigEndian$[ebp]
	mov	BYTE PTR [eax], 0
; Line 698
	jmp	$LN6@getArchite
$LN3@getArchite:
; Line 701
	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_T_FileStream_open
	add	esp, 8
	mov	DWORD PTR _in$[ebp], eax
; Line 702
	cmp	DWORD PTR _in$[ebp], 0
	jne	SHORT $LN2@getArchite
; Line 703
	mov	esi, esp
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CN@DMNONJLI@genccode?3?5unable?5to?5open?5match?9a@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 704
	mov	esi, esp
	push	4
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@getArchite:
; Line 706
	push	2048					; 00000800H
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_T_FileStream_read
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _length$[ebp], eax
; Line 746
	cmp	DWORD PTR _length$[ebp], 20		; 00000014H
	jae	SHORT $LN1@getArchite
; Line 747
	mov	esi, esp
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CL@COFEICGD@genccode?3?5match?9arch?5file?5?$CFs?5is?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 748
	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@getArchite:
; Line 751
	lea	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _pHeader$[ebp], eax
; Line 752
	mov	eax, DWORD PTR _pCPU$[ebp]
	mov	ecx, DWORD PTR _pHeader$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
; Line 757
	mov	eax, DWORD PTR _pCPU$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 332				; 0000014cH
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 32					; 00000020H
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _pBits$[ebp]
	mov	WORD PTR [edx], cx
; Line 759
	mov	eax, DWORD PTR _pIsBigEndian$[ebp]
	mov	BYTE PTR [eax], 0
; Line 764
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_T_FileStream_close
	add	esp, 4
$LN6@getArchite:
; Line 765
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@getArchite
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2300				; 000008fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@getArchite:
	DD	1
	DD	$LN8@getArchite
$LN8@getArchite:
	DD	-2056					; fffff7f8H
	DD	2048					; 00000800H
	DD	$LN7@getArchite
$LN7@getArchite:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_getArchitecture ENDP
_TEXT	ENDS
END
