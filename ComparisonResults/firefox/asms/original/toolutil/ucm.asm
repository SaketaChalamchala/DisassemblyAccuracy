; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\toolutil\ucm.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	_ucm_printMapping
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\tools\toolutil\ucm.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ucm_printMapping
_TEXT	SEGMENT
tv80 = -200						; size = 4
tv72 = -196						; size = 4
_table$ = 8						; size = 4
_m$ = 12						; size = 4
_f$ = 16						; size = 4
_ucm_printMapping PROC					; COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 65
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN3@ucm_printM
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 4
	mov	DWORD PTR tv72[ebp], edx
	jmp	SHORT $LN4@ucm_printM
$LN3@ucm_printM:
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv72[ebp], ecx
$LN4@ucm_printM:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN5@ucm_printM
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv80[ebp], edx
	jmp	SHORT $LN6@ucm_printM
$LN5@ucm_printM:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv80[ebp], ecx
$LN6@ucm_printM:
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	mov	ecx, DWORD PTR tv80[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	_printMapping
	add	esp, 16					; 00000010H
; Line 66
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_printMapping ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_05EKIKELJJ@?5?$HM?$CFu?6?$AA@		; `string'
PUBLIC	??_C@_06MNBAJCJJ@?2x?$CF02X?$AA@		; `string'
PUBLIC	??_C@_08FDPBAGCL@?$DMU?$CF04lX?$DO?$AA@		; `string'
EXTRN	__imp__fputs:PROC
EXTRN	__imp__fputc:PROC
EXTRN	__imp__fprintf:PROC
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EKIKELJJ@?5?$HM?$CFu?6?$AA@
CONST	SEGMENT
??_C@_05EKIKELJJ@?5?$HM?$CFu?6?$AA@ DB ' |%u', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNBAJCJJ@?2x?$CF02X?$AA@
CONST	SEGMENT
??_C@_06MNBAJCJJ@?2x?$CF02X?$AA@ DB '\x%02X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FDPBAGCL@?$DMU?$CF04lX?$DO?$AA@
CONST	SEGMENT
??_C@_08FDPBAGCL@?$DMU?$CF04lX?$DO?$AA@ DB '<U%04lX>', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _printMapping
_TEXT	SEGMENT
_j$ = -8						; size = 4
_m$ = 8							; size = 4
_codePoints$ = 12					; size = 4
_bytes$ = 16						; size = 4
_f$ = 20						; size = 4
_printMapping PROC					; COMDAT
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 46
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN8@printMappi
$LN7@printMappi:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN8@printMappi:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	DWORD PTR _j$[ebp], ecx
	jge	SHORT $LN6@printMappi
; Line 47
	mov	esi, esp
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _codePoints$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_08FDPBAGCL@?$DMU?$CF04lX?$DO?$AA@
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 48
	jmp	SHORT $LN7@printMappi
$LN6@printMappi:
; Line 50
	mov	esi, esp
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	push	32					; 00000020H
	call	DWORD PTR __imp__fputc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 52
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN5@printMappi
$LN4@printMappi:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN5@printMappi:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	DWORD PTR _j$[ebp], ecx
	jge	SHORT $LN3@printMappi
; Line 53
	mov	eax, DWORD PTR _bytes$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_06MNBAJCJJ@?2x?$CF02X?$AA@
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 54
	jmp	SHORT $LN4@printMappi
$LN3@printMappi:
; Line 56
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	test	ecx, ecx
	jl	SHORT $LN2@printMappi
; Line 57
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_05EKIKELJJ@?5?$HM?$CFu?6?$AA@
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 58
	jmp	SHORT $LN9@printMappi
$LN2@printMappi:
; Line 59
	mov	esi, esp
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__fputs
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@printMappi:
; Line 61
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printMapping ENDP
_TEXT	ENDS
PUBLIC	_ucm_printTable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucm_printTable
_TEXT	SEGMENT
_map$9265 = -44						; size = 4
_length$ = -32						; size = 4
_i$ = -20						; size = 4
_m$ = -8						; size = 4
_table$ = 8						; size = 4
_f$ = 12						; size = 4
_byUnicode$ = 16					; size = 1
_ucm_printTable PROC					; COMDAT
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 73
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _m$[ebp], ecx
; Line 74
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _length$[ebp], ecx
; Line 75
	movsx	eax, BYTE PTR _byUnicode$[ebp]
	test	eax, eax
	je	SHORT $LN8@ucm_printT
; Line 76
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@ucm_printT
$LN6@ucm_printT:
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _m$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@ucm_printT:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN5@ucm_printT
; Line 77
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 78
	jmp	SHORT $LN6@ucm_printT
$LN5@ucm_printT:
; Line 79
	jmp	SHORT $LN9@ucm_printT
$LN8@ucm_printT:
; Line 80
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _map$9265[ebp], ecx
; Line 81
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ucm_printT
$LN2@ucm_printT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@ucm_printT:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN9@ucm_printT
; Line 82
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _map$9265[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 83
	jmp	SHORT $LN2@ucm_printT
$LN9@ucm_printT:
; Line 85
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_printTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@KPDCOECJ@ucm?5error?3?5sortTable?$CI?$CJ?1uprv_sort@ ; `string'
PUBLIC	??_C@_0CK@PMMPLNPI@ucm?5error?3?5unable?5to?5allocate?5re@ ; `string'
PUBLIC	_ucm_sortTable
EXTRN	_u_errorName_56:PROC
EXTRN	__imp__exit:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	_uprv_sortArray_56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_0DE@KPDCOECJ@ucm?5error?3?5sortTable?$CI?$CJ?1uprv_sort@
CONST	SEGMENT
??_C@_0DE@KPDCOECJ@ucm?5error?3?5sortTable?$CI?$CJ?1uprv_sort@ DB 'ucm er'
	DB	'ror: sortTable()/uprv_sortArray() fails - %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PMMPLNPI@ucm?5error?3?5unable?5to?5allocate?5re@
CONST	SEGMENT
??_C@_0CK@PMMPLNPI@ucm?5error?3?5unable?5to?5allocate?5re@ DB 'ucm error:'
	DB	' unable to allocate reverseMap', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_sortTable
_TEXT	SEGMENT
_i$ = -20						; size = 4
_errorCode$ = -8					; size = 4
_t$ = 8							; size = 4
_ucm_sortTable PROC					; COMDAT
; Line 220
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 224
	mov	eax, DWORD PTR _t$[ebp]
	movsx	ecx, BYTE PTR [eax+42]
	test	ecx, ecx
	je	SHORT $LN7@ucm_sortTa
; Line 225
	jmp	$LN9@ucm_sortTa
$LN7@ucm_sortTa:
; Line 228
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 233
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	push	OFFSET _compareMappingsUnicodeFirst
	push	12					; 0000000cH
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_uprv_sortArray_56
	add	esp, 28					; 0000001cH
; Line 236
	mov	eax, DWORD PTR _t$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN6@ucm_sortTa
; Line 243
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 244
	mov	eax, DWORD PTR _t$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN6@ucm_sortTa
; Line 245
	mov	esi, esp
	push	OFFSET ??_C@_0CK@PMMPLNPI@ucm?5error?3?5unable?5to?5allocate?5re@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 246
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@ucm_sortTa:
; Line 249
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ucm_sortTa
$LN3@ucm_sortTa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ucm_sortTa:
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@ucm_sortTa
; Line 250
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 251
	jmp	SHORT $LN3@ucm_sortTa
$LN2@ucm_sortTa:
; Line 256
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	push	OFFSET _compareMappingsBytesFirst
	push	4
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_uprv_sortArray_56
	add	esp, 28					; 0000001cH
; Line 258
	cmp	DWORD PTR _errorCode$[ebp], 0
	jle	SHORT $LN1@ucm_sortTa
; Line 260
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	call	_u_errorName_56
	add	esp, 4
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0DE@KPDCOECJ@ucm?5error?3?5sortTable?$CI?$CJ?1uprv_sort@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 261
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@ucm_sortTa:
; Line 264
	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax+42], 1
$LN9@ucm_sortTa:
; Line 265
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ucm_sortTa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@ucm_sortTa:
	DD	1
	DD	$LN11@ucm_sortTa
$LN11@ucm_sortTa:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@ucm_sortTa
$LN10@ucm_sortTa:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ucm_sortTable ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _compareMappingsUnicodeFirst
_TEXT	SEGMENT
_context$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
_compareMappingsUnicodeFirst PROC			; COMDAT
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 206
	push	1
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _left$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	_compareMappings
	add	esp, 20					; 00000014H
; Line 207
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_compareMappingsUnicodeFirst ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _compareMappings
_TEXT	SEGMENT
_result$ = -8						; size = 4
_lTable$ = 8						; size = 4
_l$ = 12						; size = 4
_rTable$ = 16						; size = 4
_r$ = 20						; size = 4
_uFirst$ = 24						; size = 1
_compareMappings PROC					; COMDAT
; Line 175
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 179
	movsx	eax, BYTE PTR _uFirst$[ebp]
	test	eax, eax
	je	SHORT $LN5@compareMap
; Line 181
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rTable$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l$[ebp]
	push	edx
	mov	eax, DWORD PTR _lTable$[ebp]
	push	eax
	call	_compareUnicode
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
; Line 182
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN4@compareMap
; Line 183
	push	0
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rTable$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l$[ebp]
	push	edx
	mov	eax, DWORD PTR _lTable$[ebp]
	push	eax
	call	_compareBytes
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
$LN4@compareMap:
; Line 185
	jmp	SHORT $LN3@compareMap
$LN5@compareMap:
; Line 187
	push	1
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rTable$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l$[ebp]
	push	edx
	mov	eax, DWORD PTR _lTable$[ebp]
	push	eax
	call	_compareBytes
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
; Line 188
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN3@compareMap
; Line 189
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rTable$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l$[ebp]
	push	edx
	mov	eax, DWORD PTR _lTable$[ebp]
	push	eax
	call	_compareUnicode
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
$LN3@compareMap:
; Line 193
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN1@compareMap
; Line 194
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN6@compareMap
$LN1@compareMap:
; Line 198
	mov	eax, DWORD PTR _l$[ebp]
	movsx	eax, BYTE PTR [eax+10]
	mov	ecx, DWORD PTR _r$[ebp]
	movsx	edx, BYTE PTR [ecx+10]
	sub	eax, edx
$LN6@compareMap:
; Line 199
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_compareMappings ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _compareUnicode
_TEXT	SEGMENT
tv84 = -256						; size = 4
tv77 = -256						; size = 4
_length$ = -56						; size = 4
_i$ = -44						; size = 4
_result$ = -32						; size = 4
_ru$ = -20						; size = 4
_lu$ = -8						; size = 4
_lTable$ = 8						; size = 4
_l$ = 12						; size = 4
_rTable$ = 16						; size = 4
_r$ = 20						; size = 4
_compareUnicode PROC					; COMDAT
; Line 91
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 95
	mov	eax, DWORD PTR _l$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN7@compareUni
	mov	eax, DWORD PTR _r$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN7@compareUni
; Line 97
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	jmp	$LN8@compareUni
$LN7@compareUni:
; Line 101
	mov	eax, DWORD PTR _l$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN10@compareUni
	mov	edx, DWORD PTR _l$[ebp]
	mov	DWORD PTR tv77[ebp], edx
	jmp	SHORT $LN11@compareUni
$LN10@compareUni:
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _lTable$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv77[ebp], ecx
$LN11@compareUni:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _lu$[ebp], edx
; Line 102
	mov	eax, DWORD PTR _r$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN12@compareUni
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN13@compareUni
$LN12@compareUni:
	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _rTable$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv84[ebp], ecx
$LN13@compareUni:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _ru$[ebp], edx
; Line 105
	mov	eax, DWORD PTR _l$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _r$[ebp]
	movsx	eax, BYTE PTR [edx+8]
	cmp	ecx, eax
	jg	SHORT $LN6@compareUni
; Line 106
	mov	eax, DWORD PTR _l$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	mov	DWORD PTR _length$[ebp], ecx
; Line 107
	jmp	SHORT $LN5@compareUni
$LN6@compareUni:
; Line 108
	mov	eax, DWORD PTR _r$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	mov	DWORD PTR _length$[ebp], ecx
$LN5@compareUni:
; Line 112
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@compareUni
$LN3@compareUni:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@compareUni:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN2@compareUni
; Line 113
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _lu$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _ru$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	sub	eax, DWORD PTR [esi+edx*4]
	mov	DWORD PTR _result$[ebp], eax
; Line 114
	je	SHORT $LN1@compareUni
; Line 115
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN8@compareUni
$LN1@compareUni:
; Line 117
	jmp	SHORT $LN3@compareUni
$LN2@compareUni:
; Line 120
	mov	eax, DWORD PTR _l$[ebp]
	movsx	eax, BYTE PTR [eax+8]
	mov	ecx, DWORD PTR _r$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	sub	eax, edx
$LN8@compareUni:
; Line 121
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_compareUnicode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _compareBytes
_TEXT	SEGMENT
tv130 = -256						; size = 4
tv90 = -256						; size = 4
_length$ = -56						; size = 4
_i$ = -44						; size = 4
_result$ = -32						; size = 4
_rb$ = -20						; size = 4
_lb$ = -8						; size = 4
_lTable$ = 8						; size = 4
_l$ = 12						; size = 4
_rTable$ = 16						; size = 4
_r$ = 20						; size = 4
_lexical$ = 24						; size = 1
_compareBytes PROC					; COMDAT
; Line 126
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 138
	movsx	eax, BYTE PTR _lexical$[ebp]
	test	eax, eax
	je	SHORT $LN10@compareByt
; Line 140
	mov	eax, DWORD PTR _l$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _r$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	cmp	ecx, eax
	jg	SHORT $LN9@compareByt
; Line 141
	mov	eax, DWORD PTR _l$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	DWORD PTR _length$[ebp], ecx
; Line 142
	jmp	SHORT $LN8@compareByt
$LN9@compareByt:
; Line 143
	mov	eax, DWORD PTR _r$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	DWORD PTR _length$[ebp], ecx
$LN8@compareByt:
; Line 145
	jmp	SHORT $LN7@compareByt
$LN10@compareByt:
; Line 147
	mov	eax, DWORD PTR _l$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _r$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	sub	ecx, eax
	mov	DWORD PTR _result$[ebp], ecx
; Line 148
	je	SHORT $LN6@compareByt
; Line 149
	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN11@compareByt
; Line 150
	jmp	SHORT $LN7@compareByt
$LN6@compareByt:
; Line 151
	mov	eax, DWORD PTR _l$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	DWORD PTR _length$[ebp], ecx
$LN7@compareByt:
; Line 156
	mov	eax, DWORD PTR _l$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN13@compareByt
	mov	edx, DWORD PTR _l$[ebp]
	add	edx, 4
	mov	DWORD PTR tv90[ebp], edx
	jmp	SHORT $LN14@compareByt
$LN13@compareByt:
	mov	eax, DWORD PTR _lTable$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _l$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv90[ebp], ecx
$LN14@compareByt:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR _lb$[ebp], eax
; Line 157
	mov	eax, DWORD PTR _r$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN15@compareByt
	mov	edx, DWORD PTR _r$[ebp]
	add	edx, 4
	mov	DWORD PTR tv130[ebp], edx
	jmp	SHORT $LN16@compareByt
$LN15@compareByt:
	mov	eax, DWORD PTR _rTable$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _r$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv130[ebp], ecx
$LN16@compareByt:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR _rb$[ebp], eax
; Line 160
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@compareByt
$LN3@compareByt:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@compareByt:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN2@compareByt
; Line 161
	mov	eax, DWORD PTR _lb$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _rb$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR _result$[ebp], ecx
; Line 162
	je	SHORT $LN1@compareByt
; Line 163
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN11@compareByt
$LN1@compareByt:
; Line 165
	jmp	SHORT $LN3@compareByt
$LN2@compareByt:
; Line 168
	mov	eax, DWORD PTR _l$[ebp]
	movsx	eax, BYTE PTR [eax+9]
	mov	ecx, DWORD PTR _r$[ebp]
	movsx	edx, BYTE PTR [ecx+9]
	sub	eax, edx
$LN11@compareByt:
; Line 169
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_compareBytes ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _compareMappingsBytesFirst
_TEXT	SEGMENT
_r$ = -32						; size = 4
_l$ = -20						; size = 4
_table$ = -8						; size = 4
_context$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
_compareMappingsBytesFirst PROC				; COMDAT
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 212
	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR _table$[ebp], eax
; Line 213
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _l$[ebp], ecx
	mov	eax, DWORD PTR _right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _r$[ebp], ecx
; Line 216
	push	0
	mov	eax, DWORD PTR _r$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _table$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	mov	eax, DWORD PTR _l$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _table$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_compareMappings
	add	esp, 20					; 00000014H
; Line 217
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_compareMappingsBytesFirst ENDP
_TEXT	ENDS
PUBLIC	_ucm_addMapping
PUBLIC	_ucm_moveMappings
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucm_moveMappings
_TEXT	SEGMENT
tv91 = -236						; size = 4
tv83 = -232						; size = 4
_flag$ = -29						; size = 1
_mbLimit$ = -20						; size = 4
_mb$ = -8						; size = 4
_base$ = 8						; size = 4
_ext$ = 12						; size = 4
_ucm_moveMappings PROC					; COMDAT
; Line 272
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 276
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mb$[ebp], ecx
; Line 277
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _mb$[ebp]
	mov	DWORD PTR _mbLimit$[ebp], ecx
$LN6@ucm_moveMa:
; Line 279
	mov	eax, DWORD PTR _mb$[ebp]
	cmp	eax, DWORD PTR _mbLimit$[ebp]
	jae	$LN7@ucm_moveMa
; Line 280
	mov	eax, DWORD PTR _mb$[ebp]
	mov	cl, BYTE PTR [eax+11]
	mov	BYTE PTR _flag$[ebp], cl
; Line 281
	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	je	$LN4@ucm_moveMa
; Line 283
	mov	eax, DWORD PTR _mb$[ebp]
	mov	BYTE PTR [eax+11], 0
; Line 285
	cmp	DWORD PTR _ext$[ebp], 0
	je	SHORT $LN3@ucm_moveMa
	movsx	eax, BYTE PTR _flag$[ebp]
	and	eax, 1
	je	SHORT $LN3@ucm_moveMa
; Line 287
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN9@ucm_moveMa
	mov	edx, DWORD PTR _mb$[ebp]
	add	edx, 4
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN10@ucm_moveMa
$LN9@ucm_moveMa:
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _mb$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv83[ebp], ecx
$LN10@ucm_moveMa:
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN11@ucm_moveMa
	mov	edx, DWORD PTR _mb$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN12@ucm_moveMa
$LN11@ucm_moveMa:
	mov	eax, DWORD PTR _mb$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv91[ebp], ecx
$LN12@ucm_moveMa:
	mov	edx, DWORD PTR tv83[ebp]
	push	edx
	mov	eax, DWORD PTR tv91[ebp]
	push	eax
	mov	ecx, DWORD PTR _mb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ext$[ebp]
	push	edx
	call	_ucm_addMapping
	add	esp, 16					; 00000010H
$LN3@ucm_moveMa:
; Line 291
	mov	eax, DWORD PTR _mbLimit$[ebp]
	sub	eax, 12					; 0000000cH
	cmp	DWORD PTR _mb$[ebp], eax
	jae	SHORT $LN2@ucm_moveMa
; Line 292
	push	1
	mov	eax, DWORD PTR _mbLimit$[ebp]
	sub	eax, 12					; 0000000cH
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _mbLimit$[ebp]
	sub	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _mb$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@ucm_moveMa:
; Line 294
	mov	eax, DWORD PTR _mbLimit$[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR _mbLimit$[ebp], eax
; Line 295
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 296
	mov	eax, DWORD PTR _base$[ebp]
	mov	BYTE PTR [eax+42], 0
; Line 297
	jmp	SHORT $LN1@ucm_moveMa
$LN4@ucm_moveMa:
; Line 298
	mov	eax, DWORD PTR _mb$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _mb$[ebp], eax
$LN1@ucm_moveMa:
; Line 300
	jmp	$LN6@ucm_moveMa
$LN7@ucm_moveMa:
; Line 301
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_moveMappings ENDP
_TEXT	ENDS
PUBLIC	_ucm_checkValidity
EXTRN	_ucm_countChars:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucm_checkValidity
_TEXT	SEGMENT
tv79 = -244						; size = 4
_isOK$ = -41						; size = 1
_count$ = -32						; size = 4
_mLimit$ = -20						; size = 4
_m$ = -8						; size = 4
_table$ = 8						; size = 4
_baseStates$ = 12					; size = 4
_ucm_checkValidity PROC					; COMDAT
; Line 530
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 535
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _m$[ebp], ecx
; Line 536
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR _mLimit$[ebp], ecx
; Line 537
	mov	BYTE PTR _isOK$[ebp], 1
$LN3@ucm_checkV:
; Line 539
	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _mLimit$[ebp]
	jae	$LN2@ucm_checkV
; Line 540
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN6@ucm_checkV
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 4
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN7@ucm_checkV
$LN6@ucm_checkV:
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv79[ebp], ecx
$LN7@ucm_checkV:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR tv79[ebp]
	push	edx
	mov	eax, DWORD PTR _baseStates$[ebp]
	push	eax
	call	_ucm_countChars
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _count$[ebp], eax
; Line 541
	cmp	DWORD PTR _count$[ebp], 1
	jge	SHORT $LN1@ucm_checkV
; Line 542
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 543
	mov	BYTE PTR _isOK$[ebp], 0
$LN1@ucm_checkV:
; Line 545
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _m$[ebp], eax
; Line 546
	jmp	$LN3@ucm_checkV
$LN2@ucm_checkV:
; Line 548
	mov	al, BYTE PTR _isOK$[ebp]
; Line 549
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_checkValidity ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EG@HOBDINMN@ucm?5error?3?5extension?5table?5conta@ ; `string'
PUBLIC	??_C@_0EF@IIHMOMMN@ucm?5error?3?5the?5base?5table?5contai@ ; `string'
PUBLIC	_ucm_checkBaseExt
;	COMDAT ??_C@_0EG@HOBDINMN@ucm?5error?3?5extension?5table?5conta@
CONST	SEGMENT
??_C@_0EG@HOBDINMN@ucm?5error?3?5extension?5table?5conta@ DB 'ucm error: '
	DB	'extension table contains mappings without precision flags', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@IIHMOMMN@ucm?5error?3?5the?5base?5table?5contai@
CONST	SEGMENT
??_C@_0EF@IIHMOMMN@ucm?5error?3?5the?5base?5table?5contai@ DB 'ucm error:'
	DB	' the base table contains mappings without precision flags', 0aH
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_checkBaseExt
_TEXT	SEGMENT
_result$ = -5						; size = 1
_baseStates$ = 8					; size = 4
_base$ = 12						; size = 4
_ext$ = 16						; size = 4
_moveTarget$ = 20					; size = 4
_intersectBase$ = 24					; size = 1
_ucm_checkBaseExt PROC					; COMDAT
; Line 554
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 558
	mov	eax, DWORD PTR _base$[ebp]
	movsx	ecx, BYTE PTR [eax+41]
	and	ecx, 2
	je	SHORT $LN5@ucm_checkB
; Line 559
	mov	esi, esp
	push	OFFSET ??_C@_0EF@IIHMOMMN@ucm?5error?3?5the?5base?5table?5contai@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 560
	xor	al, al
	jmp	$LN6@ucm_checkB
$LN5@ucm_checkB:
; Line 562
	mov	eax, DWORD PTR _ext$[ebp]
	movsx	ecx, BYTE PTR [eax+41]
	and	ecx, 2
	je	SHORT $LN4@ucm_checkB
; Line 563
	mov	esi, esp
	push	OFFSET ??_C@_0EG@HOBDINMN@ucm?5error?3?5extension?5table?5conta@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 564
	xor	al, al
	jmp	$LN6@ucm_checkB
$LN4@ucm_checkB:
; Line 568
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	call	_ucm_sortTable
	add	esp, 4
; Line 569
	mov	eax, DWORD PTR _ext$[ebp]
	push	eax
	call	_ucm_sortTable
	add	esp, 4
; Line 574
	movzx	eax, BYTE PTR _intersectBase$[ebp]
	push	eax
	cmp	DWORD PTR _moveTarget$[ebp], 0
	setne	cl
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _ext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _baseStates$[ebp]
	push	edx
	call	_checkBaseExtUnicode
	add	esp, 20					; 00000014H
	movzx	ebx, al
	movzx	eax, BYTE PTR _intersectBase$[ebp]
	push	eax
	cmp	DWORD PTR _moveTarget$[ebp], 0
	setne	cl
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _ext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _baseStates$[ebp]
	push	edx
	call	_checkBaseExtBytes
	add	esp, 20					; 00000014H
	movzx	eax, al
	or	ebx, eax
	mov	BYTE PTR _result$[ebp], bl
; Line 576
	movzx	eax, BYTE PTR _result$[ebp]
	and	eax, 2
	je	SHORT $LN3@ucm_checkB
; Line 577
	xor	al, al
	jmp	SHORT $LN6@ucm_checkB
$LN3@ucm_checkB:
; Line 580
	movzx	eax, BYTE PTR _result$[ebp]
	and	eax, 1
	je	SHORT $LN2@ucm_checkB
; Line 581
	push	0
	mov	eax, DWORD PTR _ext$[ebp]
	push	eax
	call	_ucm_moveMappings
	add	esp, 8
; Line 582
	mov	eax, DWORD PTR _moveTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_ucm_moveMappings
	add	esp, 8
; Line 583
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	call	_ucm_sortTable
	add	esp, 4
; Line 584
	mov	eax, DWORD PTR _ext$[ebp]
	push	eax
	call	_ucm_sortTable
	add	esp, 4
; Line 585
	cmp	DWORD PTR _moveTarget$[ebp], 0
	je	SHORT $LN2@ucm_checkB
; Line 586
	mov	eax, DWORD PTR _moveTarget$[ebp]
	push	eax
	call	_ucm_sortTable
	add	esp, 4
$LN2@ucm_checkB:
; Line 590
	mov	al, 1
$LN6@ucm_checkB:
; Line 591
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_checkBaseExt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0KL@GDLIFBBG@ucm?5error?3?5the?5base?5table?5contai@ ; `string'
PUBLIC	??_C@_0II@LDMAGCBC@ucm?5error?3?5the?5base?5table?5contai@ ; `string'
EXTRN	_memcmp:PROC
;	COMDAT ??_C@_0KL@GDLIFBBG@ucm?5error?3?5the?5base?5table?5contai@
CONST	SEGMENT
??_C@_0KL@GDLIFBBG@ucm?5error?3?5the?5base?5table?5contai@ DB 'ucm error:'
	DB	' the base table contains a mapping whose input sequence', 0aH
	DB	'           is the same as the input sequence of an extension '
	DB	'mapping', 0aH, '           but it maps differently', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0II@LDMAGCBC@ucm?5error?3?5the?5base?5table?5contai@
CONST	SEGMENT
??_C@_0II@LDMAGCBC@ucm?5error?3?5the?5base?5table?5contai@ DB 'ucm error:'
	DB	' the base table contains a mapping whose input sequence', 0aH
	DB	'           is a prefix of the input sequence of an extension '
	DB	'mapping', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _checkBaseExtUnicode
_TEXT	SEGMENT
tv231 = -272						; size = 4
tv169 = -272						; size = 4
tv222 = -268						; size = 4
tv161 = -268						; size = 4
_result$ = -65						; size = 1
_cmp$ = -56						; size = 4
_meLimit$ = -44						; size = 4
_mbLimit$ = -32						; size = 4
_me$ = -20						; size = 4
_mb$ = -8						; size = 4
_baseStates$ = 8					; size = 4
_base$ = 12						; size = 4
_ext$ = 16						; size = 4
_moveToExt$ = 20					; size = 1
_intersectBase$ = 24					; size = 1
_checkBaseExtUnicode PROC				; COMDAT
; Line 310
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 315
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mb$[ebp], ecx
; Line 316
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _mb$[ebp]
	mov	DWORD PTR _mbLimit$[ebp], ecx
; Line 318
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _me$[ebp], ecx
; Line 319
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _me$[ebp]
	mov	DWORD PTR _meLimit$[ebp], ecx
; Line 321
	mov	BYTE PTR _result$[ebp], 0
$LN26@checkBaseE:
; Line 326
	mov	eax, DWORD PTR _mb$[ebp]
	cmp	eax, DWORD PTR _mbLimit$[ebp]
	jne	SHORT $LN24@checkBaseE
; Line 327
	mov	al, BYTE PTR _result$[ebp]
	jmp	$LN29@checkBaseE
$LN24@checkBaseE:
; Line 330
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	test	ecx, ecx
	jl	SHORT $LN21@checkBaseE
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 2
	jle	SHORT $LN22@checkBaseE
$LN21@checkBaseE:
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 4
	jne	SHORT $LN23@checkBaseE
$LN22@checkBaseE:
; Line 331
	jmp	SHORT $LN20@checkBaseE
$LN23@checkBaseE:
; Line 334
	mov	eax, DWORD PTR _mb$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _mb$[ebp], eax
; Line 335
	jmp	SHORT $LN26@checkBaseE
$LN20@checkBaseE:
; Line 338
	mov	eax, DWORD PTR _me$[ebp]
	cmp	eax, DWORD PTR _meLimit$[ebp]
	jne	SHORT $LN18@checkBaseE
; Line 339
	mov	al, BYTE PTR _result$[ebp]
	jmp	$LN29@checkBaseE
$LN18@checkBaseE:
; Line 342
	mov	eax, DWORD PTR _me$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	test	ecx, ecx
	jl	SHORT $LN15@checkBaseE
	mov	eax, DWORD PTR _me$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 2
	jle	SHORT $LN16@checkBaseE
$LN15@checkBaseE:
	mov	eax, DWORD PTR _me$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 4
	jne	SHORT $LN17@checkBaseE
$LN16@checkBaseE:
; Line 343
	jmp	SHORT $LN19@checkBaseE
$LN17@checkBaseE:
; Line 346
	mov	eax, DWORD PTR _me$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _me$[ebp], eax
; Line 347
	jmp	SHORT $LN20@checkBaseE
$LN19@checkBaseE:
; Line 350
	mov	eax, DWORD PTR _me$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mb$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	call	_compareUnicode
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cmp$[ebp], eax
; Line 351
	cmp	DWORD PTR _cmp$[ebp], 0
	jge	$LN14@checkBaseE
; Line 352
	movsx	eax, BYTE PTR _intersectBase$[ebp]
	test	eax, eax
	je	SHORT $LN13@checkBaseE
	movsx	eax, BYTE PTR _intersectBase$[ebp]
	cmp	eax, 2
	jne	SHORT $LN12@checkBaseE
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	jle	SHORT $LN13@checkBaseE
$LN12@checkBaseE:
; Line 359
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+11]
	or	ecx, 1
	mov	edx, DWORD PTR _mb$[ebp]
	mov	BYTE PTR [edx+11], cl
; Line 360
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 1
	mov	BYTE PTR _result$[ebp], al
; Line 363
	jmp	$LN11@checkBaseE
$LN13@checkBaseE:
; Line 365
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _me$[ebp]
	movsx	eax, BYTE PTR [edx+8]
	cmp	ecx, eax
	jge	$LN11@checkBaseE
	mov	eax, DWORD PTR _me$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN31@checkBaseE
	mov	edx, DWORD PTR _me$[ebp]
	mov	DWORD PTR tv161[ebp], edx
	jmp	SHORT $LN32@checkBaseE
$LN31@checkBaseE:
	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ext$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv161[ebp], ecx
$LN32@checkBaseE:
	mov	edx, DWORD PTR _mb$[ebp]
	movsx	eax, BYTE PTR [edx+8]
	cmp	eax, 1
	jne	SHORT $LN33@checkBaseE
	mov	ecx, DWORD PTR _mb$[ebp]
	mov	DWORD PTR tv169[ebp], ecx
	jmp	SHORT $LN34@checkBaseE
$LN33@checkBaseE:
	mov	edx, DWORD PTR _mb$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv169[ebp], eax
$LN34@checkBaseE:
	mov	ecx, DWORD PTR _mb$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR tv161[ebp]
	push	eax
	mov	ecx, DWORD PTR tv169[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN11@checkBaseE
; Line 366
	movsx	eax, BYTE PTR _moveToExt$[ebp]
	test	eax, eax
	je	SHORT $LN9@checkBaseE
; Line 368
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+11]
	or	ecx, 1
	mov	edx, DWORD PTR _mb$[ebp]
	mov	BYTE PTR [edx+11], cl
; Line 369
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 1
	mov	BYTE PTR _result$[ebp], al
; Line 370
	jmp	SHORT $LN11@checkBaseE
$LN9@checkBaseE:
; Line 373
	mov	esi, esp
	push	OFFSET ??_C@_0II@LDMAGCBC@ucm?5error?3?5the?5base?5table?5contai@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 374
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _mb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 375
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _me$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 376
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 2
	mov	BYTE PTR _result$[ebp], al
$LN11@checkBaseE:
; Line 380
	mov	eax, DWORD PTR _mb$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _mb$[ebp], eax
	jmp	$LN7@checkBaseE
$LN14@checkBaseE:
; Line 381
	cmp	DWORD PTR _cmp$[ebp], 0
	jne	$LN6@checkBaseE
; Line 388
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	mov	edx, DWORD PTR _me$[ebp]
	movsx	eax, BYTE PTR [edx+10]
	cmp	ecx, eax
	jne	$LN5@checkBaseE
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _me$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	cmp	ecx, eax
	jne	$LN5@checkBaseE
	mov	eax, DWORD PTR _me$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN35@checkBaseE
	mov	edx, DWORD PTR _me$[ebp]
	add	edx, 4
	mov	DWORD PTR tv222[ebp], edx
	jmp	SHORT $LN36@checkBaseE
$LN35@checkBaseE:
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _me$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv222[ebp], ecx
$LN36@checkBaseE:
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN37@checkBaseE
	mov	edx, DWORD PTR _mb$[ebp]
	add	edx, 4
	mov	DWORD PTR tv231[ebp], edx
	jmp	SHORT $LN38@checkBaseE
$LN37@checkBaseE:
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _mb$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv231[ebp], ecx
$LN38@checkBaseE:
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR tv222[ebp]
	push	edx
	mov	eax, DWORD PTR tv231[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@checkBaseE
; Line 389
	mov	eax, DWORD PTR _me$[ebp]
	movsx	ecx, BYTE PTR [eax+11]
	or	ecx, 2
	mov	edx, DWORD PTR _me$[ebp]
	mov	BYTE PTR [edx+11], cl
; Line 390
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 1
	mov	BYTE PTR _result$[ebp], al
	jmp	$LN4@checkBaseE
$LN5@checkBaseE:
; Line 391
	movsx	eax, BYTE PTR _intersectBase$[ebp]
	test	eax, eax
	je	SHORT $LN3@checkBaseE
; Line 393
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+11]
	or	ecx, 1
	mov	edx, DWORD PTR _mb$[ebp]
	mov	BYTE PTR [edx+11], cl
; Line 394
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 1
	mov	BYTE PTR _result$[ebp], al
; Line 395
	jmp	SHORT $LN4@checkBaseE
$LN3@checkBaseE:
; Line 399
	mov	esi, esp
	push	OFFSET ??_C@_0KL@GDLIFBBG@ucm?5error?3?5the?5base?5table?5contai@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 400
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _mb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 401
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _me$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 402
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 2
	mov	BYTE PTR _result$[ebp], al
$LN4@checkBaseE:
; Line 405
	mov	eax, DWORD PTR _mb$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _mb$[ebp], eax
; Line 406
	jmp	SHORT $LN7@checkBaseE
$LN6@checkBaseE:
; Line 407
	mov	eax, DWORD PTR _me$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _me$[ebp], eax
$LN7@checkBaseE:
; Line 409
	jmp	$LN26@checkBaseE
$LN29@checkBaseE:
; Line 410
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_checkBaseExtUnicode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _checkBaseExtBytes
_TEXT	SEGMENT
tv241 = -332						; size = 4
tv180 = -332						; size = 4
tv233 = -328						; size = 4
tv171 = -328						; size = 4
_isSISO$ = -125						; size = 1
_result$ = -113						; size = 1
_cmp$ = -104						; size = 4
_eLimit$ = -92						; size = 4
_bLimit$ = -80						; size = 4
_e$ = -68						; size = 4
_b$ = -56						; size = 4
_extMap$ = -44						; size = 4
_baseMap$ = -32						; size = 4
_me$ = -20						; size = 4
_mb$ = -8						; size = 4
_baseStates$ = 8					; size = 4
_base$ = 12						; size = 4
_ext$ = 16						; size = 4
_moveToExt$ = 20					; size = 1
_intersectBase$ = 24					; size = 1
_checkBaseExtBytes PROC					; COMDAT
; Line 414
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 421
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _baseMap$[ebp], ecx
; Line 422
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _extMap$[ebp], ecx
; Line 424
	mov	DWORD PTR _e$[ebp], 0
	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _bLimit$[ebp], ecx
; Line 426
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _eLimit$[ebp], ecx
; Line 428
	mov	BYTE PTR _result$[ebp], 0
; Line 430
	mov	eax, DWORD PTR _baseStates$[ebp]
	movsx	ecx, BYTE PTR [eax+132113]
	cmp	ecx, 12					; 0000000cH
	sete	dl
	mov	BYTE PTR _isSISO$[ebp], dl
$LN28@checkBaseE@2:
; Line 434
	jmp	SHORT $LN26@checkBaseE@2
$LN25@checkBaseE@2:
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 1
	mov	DWORD PTR _b$[ebp], eax
$LN26@checkBaseE@2:
; Line 435
	mov	eax, DWORD PTR _b$[ebp]
	cmp	eax, DWORD PTR _bLimit$[ebp]
	jne	SHORT $LN23@checkBaseE@2
; Line 436
	mov	al, BYTE PTR _result$[ebp]
	jmp	$LN29@checkBaseE@2
$LN23@checkBaseE@2:
; Line 438
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _baseMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _base$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR _mb$[ebp], edx
; Line 440
	movsx	eax, BYTE PTR _intersectBase$[ebp]
	cmp	eax, 2
	jne	SHORT $LN22@checkBaseE@2
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	jne	SHORT $LN22@checkBaseE@2
; Line 445
	jmp	SHORT $LN25@checkBaseE@2
$LN22@checkBaseE@2:
; Line 448
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	test	ecx, ecx
	je	SHORT $LN20@checkBaseE@2
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 3
	jne	SHORT $LN21@checkBaseE@2
$LN20@checkBaseE@2:
; Line 449
	jmp	SHORT $LN19@checkBaseE@2
$LN21@checkBaseE@2:
; Line 451
	jmp	SHORT $LN25@checkBaseE@2
$LN19@checkBaseE@2:
; Line 454
	mov	eax, DWORD PTR _e$[ebp]
	cmp	eax, DWORD PTR _eLimit$[ebp]
	jne	SHORT $LN17@checkBaseE@2
; Line 455
	mov	al, BYTE PTR _result$[ebp]
	jmp	$LN29@checkBaseE@2
$LN17@checkBaseE@2:
; Line 457
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _extMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _ext$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR _me$[ebp], edx
; Line 459
	mov	eax, DWORD PTR _me$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	test	ecx, ecx
	je	SHORT $LN15@checkBaseE@2
	mov	eax, DWORD PTR _me$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 3
	jne	SHORT $LN16@checkBaseE@2
$LN15@checkBaseE@2:
; Line 460
	jmp	SHORT $LN18@checkBaseE@2
$LN16@checkBaseE@2:
; Line 463
	mov	eax, DWORD PTR _e$[ebp]
	add	eax, 1
	mov	DWORD PTR _e$[ebp], eax
; Line 464
	jmp	SHORT $LN19@checkBaseE@2
$LN18@checkBaseE@2:
; Line 467
	push	1
	mov	eax, DWORD PTR _me$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mb$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	call	_compareBytes
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cmp$[ebp], eax
; Line 468
	cmp	DWORD PTR _cmp$[ebp], 0
	jge	$LN14@checkBaseE@2
; Line 469
	movsx	eax, BYTE PTR _intersectBase$[ebp]
	test	eax, eax
	je	SHORT $LN13@checkBaseE@2
; Line 471
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+11]
	or	ecx, 1
	mov	edx, DWORD PTR _mb$[ebp]
	mov	BYTE PTR [edx+11], cl
; Line 472
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 1
	mov	BYTE PTR _result$[ebp], al
; Line 479
	jmp	$LN12@checkBaseE@2
$LN13@checkBaseE@2:
; Line 482
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _me$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	cmp	ecx, eax
	jge	$LN12@checkBaseE@2
	movsx	eax, BYTE PTR _isSISO$[ebp]
	test	eax, eax
	je	SHORT $LN10@checkBaseE@2
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	jle	$LN12@checkBaseE@2
$LN10@checkBaseE@2:
	mov	eax, DWORD PTR _me$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN31@checkBaseE@2
	mov	edx, DWORD PTR _me$[ebp]
	add	edx, 4
	mov	DWORD PTR tv171[ebp], edx
	jmp	SHORT $LN32@checkBaseE@2
$LN31@checkBaseE@2:
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _me$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv171[ebp], ecx
$LN32@checkBaseE@2:
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN33@checkBaseE@2
	mov	edx, DWORD PTR _mb$[ebp]
	add	edx, 4
	mov	DWORD PTR tv180[ebp], edx
	jmp	SHORT $LN34@checkBaseE@2
$LN33@checkBaseE@2:
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _mb$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv180[ebp], ecx
$LN34@checkBaseE@2:
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR tv171[ebp]
	push	edx
	mov	eax, DWORD PTR tv180[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN12@checkBaseE@2
; Line 483
	movsx	eax, BYTE PTR _moveToExt$[ebp]
	test	eax, eax
	je	SHORT $LN9@checkBaseE@2
; Line 485
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+11]
	or	ecx, 1
	mov	edx, DWORD PTR _mb$[ebp]
	mov	BYTE PTR [edx+11], cl
; Line 486
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 1
	mov	BYTE PTR _result$[ebp], al
; Line 487
	jmp	SHORT $LN12@checkBaseE@2
$LN9@checkBaseE@2:
; Line 490
	mov	esi, esp
	push	OFFSET ??_C@_0II@LDMAGCBC@ucm?5error?3?5the?5base?5table?5contai@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 491
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _mb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 492
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _me$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 493
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 2
	mov	BYTE PTR _result$[ebp], al
$LN12@checkBaseE@2:
; Line 497
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 1
	mov	DWORD PTR _b$[ebp], eax
	jmp	$LN7@checkBaseE@2
$LN14@checkBaseE@2:
; Line 498
	cmp	DWORD PTR _cmp$[ebp], 0
	jne	$LN6@checkBaseE@2
; Line 505
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	mov	edx, DWORD PTR _me$[ebp]
	movsx	eax, BYTE PTR [edx+10]
	cmp	ecx, eax
	jne	$LN5@checkBaseE@2
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _me$[ebp]
	movsx	eax, BYTE PTR [edx+8]
	cmp	ecx, eax
	jne	$LN5@checkBaseE@2
	mov	eax, DWORD PTR _me$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN35@checkBaseE@2
	mov	edx, DWORD PTR _me$[ebp]
	mov	DWORD PTR tv233[ebp], edx
	jmp	SHORT $LN36@checkBaseE@2
$LN35@checkBaseE@2:
	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ext$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv233[ebp], ecx
$LN36@checkBaseE@2:
	mov	edx, DWORD PTR _mb$[ebp]
	movsx	eax, BYTE PTR [edx+8]
	cmp	eax, 1
	jne	SHORT $LN37@checkBaseE@2
	mov	ecx, DWORD PTR _mb$[ebp]
	mov	DWORD PTR tv241[ebp], ecx
	jmp	SHORT $LN38@checkBaseE@2
$LN37@checkBaseE@2:
	mov	edx, DWORD PTR _mb$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv241[ebp], eax
$LN38@checkBaseE@2:
	mov	ecx, DWORD PTR _mb$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR tv233[ebp]
	push	eax
	mov	ecx, DWORD PTR tv241[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@checkBaseE@2
; Line 506
	mov	eax, DWORD PTR _me$[ebp]
	movsx	ecx, BYTE PTR [eax+11]
	or	ecx, 2
	mov	edx, DWORD PTR _me$[ebp]
	mov	BYTE PTR [edx+11], cl
; Line 507
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 1
	mov	BYTE PTR _result$[ebp], al
	jmp	$LN4@checkBaseE@2
$LN5@checkBaseE@2:
; Line 508
	movsx	eax, BYTE PTR _intersectBase$[ebp]
	test	eax, eax
	je	SHORT $LN3@checkBaseE@2
; Line 510
	mov	eax, DWORD PTR _mb$[ebp]
	movsx	ecx, BYTE PTR [eax+11]
	or	ecx, 1
	mov	edx, DWORD PTR _mb$[ebp]
	mov	BYTE PTR [edx+11], cl
; Line 511
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 1
	mov	BYTE PTR _result$[ebp], al
; Line 512
	jmp	SHORT $LN4@checkBaseE@2
$LN3@checkBaseE@2:
; Line 516
	mov	esi, esp
	push	OFFSET ??_C@_0KL@GDLIFBBG@ucm?5error?3?5the?5base?5table?5contai@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 517
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _mb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 518
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _me$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 519
	movzx	eax, BYTE PTR _result$[ebp]
	or	eax, 2
	mov	BYTE PTR _result$[ebp], al
$LN4@checkBaseE@2:
; Line 522
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 1
	mov	DWORD PTR _b$[ebp], eax
; Line 523
	jmp	SHORT $LN7@checkBaseE@2
$LN6@checkBaseE@2:
; Line 524
	mov	eax, DWORD PTR _e$[ebp]
	add	eax, 1
	mov	DWORD PTR _e$[ebp], eax
$LN7@checkBaseE@2:
; Line 526
	jmp	$LN28@checkBaseE@2
$LN29@checkBaseE@2:
; Line 527
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_checkBaseExtBytes ENDP
_TEXT	ENDS
PUBLIC	_ucm_mergeTables
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucm_mergeTables
_TEXT	SEGMENT
tv226 = -284						; size = 4
tv165 = -284						; size = 4
tv218 = -280						; size = 4
tv187 = -280						; size = 4
tv157 = -280						; size = 4
tv95 = -280						; size = 4
_cmp$ = -80						; size = 4
_toUTop$ = -68						; size = 4
_fromUTop$ = -56					; size = 4
_toUIndex$ = -44					; size = 4
_fromUIndex$ = -32					; size = 4
_toUMapping$ = -20					; size = 4
_fromUMapping$ = -8					; size = 4
_fromUTable$ = 8					; size = 4
_toUTable$ = 12						; size = 4
_subchar$ = 16						; size = 4
_subcharLength$ = 20					; size = 4
_subchar1$ = 24						; size = 1
_ucm_mergeTables PROC					; COMDAT
; Line 598
	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 602
	mov	eax, DWORD PTR _fromUTable$[ebp]
	push	eax
	call	_ucm_sortTable
	add	esp, 4
; Line 603
	mov	eax, DWORD PTR _toUTable$[ebp]
	push	eax
	call	_ucm_sortTable
	add	esp, 4
; Line 605
	mov	eax, DWORD PTR _fromUTable$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fromUMapping$[ebp], ecx
; Line 606
	mov	eax, DWORD PTR _toUTable$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _toUMapping$[ebp], ecx
; Line 608
	mov	eax, DWORD PTR _fromUTable$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _fromUTop$[ebp], ecx
; Line 609
	mov	eax, DWORD PTR _toUTable$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _toUTop$[ebp], ecx
; Line 611
	mov	DWORD PTR _toUIndex$[ebp], 0
	mov	eax, DWORD PTR _toUIndex$[ebp]
	mov	DWORD PTR _fromUIndex$[ebp], eax
$LN22@ucm_mergeT:
; Line 613
	mov	eax, DWORD PTR _fromUIndex$[ebp]
	cmp	eax, DWORD PTR _fromUTop$[ebp]
	jge	$LN10@ucm_mergeT
	mov	eax, DWORD PTR _toUIndex$[ebp]
	cmp	eax, DWORD PTR _toUTop$[ebp]
	jge	$LN10@ucm_mergeT
; Line 614
	push	1
	mov	eax, DWORD PTR _toUMapping$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toUTable$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fromUMapping$[ebp]
	push	edx
	mov	eax, DWORD PTR _fromUTable$[ebp]
	push	eax
	call	_compareMappings
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cmp$[ebp], eax
; Line 615
	cmp	DWORD PTR _cmp$[ebp], 0
	jne	SHORT $LN20@ucm_mergeT
; Line 617
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _fromUMapping$[ebp], eax
; Line 618
	mov	eax, DWORD PTR _toUMapping$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _toUMapping$[ebp], eax
; Line 620
	mov	eax, DWORD PTR _fromUIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _fromUIndex$[ebp], eax
; Line 621
	mov	eax, DWORD PTR _toUIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _toUIndex$[ebp], eax
	jmp	$LN19@ucm_mergeT
$LN20@ucm_mergeT:
; Line 622
	cmp	DWORD PTR _cmp$[ebp], 0
	jge	$LN18@ucm_mergeT
; Line 630
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, DWORD PTR _subcharLength$[ebp]
	jne	SHORT $LN15@ucm_mergeT
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN25@ucm_mergeT
	mov	edx, DWORD PTR _fromUMapping$[ebp]
	add	edx, 4
	mov	DWORD PTR tv95[ebp], edx
	jmp	SHORT $LN26@ucm_mergeT
$LN25@ucm_mergeT:
	mov	eax, DWORD PTR _fromUTable$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _fromUMapping$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv95[ebp], ecx
$LN26@ucm_mergeT:
	mov	eax, DWORD PTR _subcharLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _subchar$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv95[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN16@ucm_mergeT
$LN15@ucm_mergeT:
	movzx	eax, BYTE PTR _subchar1$[ebp]
	test	eax, eax
	je	SHORT $LN17@ucm_mergeT
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	jne	SHORT $LN17@ucm_mergeT
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	movzx	edx, BYTE PTR _subchar1$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN17@ucm_mergeT
$LN16@ucm_mergeT:
; Line 631
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	mov	BYTE PTR [eax+10], 2
; Line 632
	jmp	SHORT $LN14@ucm_mergeT
$LN17@ucm_mergeT:
; Line 633
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	mov	BYTE PTR [eax+10], 1
$LN14@ucm_mergeT:
; Line 636
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _fromUMapping$[ebp], eax
; Line 637
	mov	eax, DWORD PTR _fromUIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _fromUIndex$[ebp], eax
; Line 638
	jmp	$LN19@ucm_mergeT
$LN18@ucm_mergeT:
; Line 645
	mov	eax, DWORD PTR _toUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN11@ucm_mergeT
	mov	eax, DWORD PTR _toUMapping$[ebp]
	cmp	DWORD PTR [eax], 65533			; 0000fffdH
	je	$LN12@ucm_mergeT
	mov	eax, DWORD PTR _toUMapping$[ebp]
	cmp	DWORD PTR [eax], 26			; 0000001aH
	je	$LN12@ucm_mergeT
$LN11@ucm_mergeT:
; Line 646
	mov	eax, DWORD PTR _toUMapping$[ebp]
	mov	BYTE PTR [eax+10], 3
; Line 647
	mov	eax, DWORD PTR _toUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN27@ucm_mergeT
	mov	edx, DWORD PTR _toUMapping$[ebp]
	add	edx, 4
	mov	DWORD PTR tv157[ebp], edx
	jmp	SHORT $LN28@ucm_mergeT
$LN27@ucm_mergeT:
	mov	eax, DWORD PTR _toUTable$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _toUMapping$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv157[ebp], ecx
$LN28@ucm_mergeT:
	mov	eax, DWORD PTR _toUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN29@ucm_mergeT
	mov	edx, DWORD PTR _toUMapping$[ebp]
	mov	DWORD PTR tv165[ebp], edx
	jmp	SHORT $LN30@ucm_mergeT
$LN29@ucm_mergeT:
	mov	eax, DWORD PTR _toUMapping$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _toUTable$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv165[ebp], ecx
$LN30@ucm_mergeT:
	mov	edx, DWORD PTR tv157[ebp]
	push	edx
	mov	eax, DWORD PTR tv165[ebp]
	push	eax
	mov	ecx, DWORD PTR _toUMapping$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fromUTable$[ebp]
	push	edx
	call	_ucm_addMapping
	add	esp, 16					; 00000010H
; Line 650
	mov	eax, DWORD PTR _fromUIndex$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _fromUTable$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _fromUMapping$[ebp], eax
$LN12@ucm_mergeT:
; Line 653
	mov	eax, DWORD PTR _toUMapping$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _toUMapping$[ebp], eax
; Line 654
	mov	eax, DWORD PTR _toUIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _toUIndex$[ebp], eax
$LN19@ucm_mergeT:
; Line 656
	jmp	$LN22@ucm_mergeT
$LN10@ucm_mergeT:
; Line 659
	mov	eax, DWORD PTR _fromUIndex$[ebp]
	cmp	eax, DWORD PTR _fromUTop$[ebp]
	jge	$LN4@ucm_mergeT
; Line 664
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, DWORD PTR _subcharLength$[ebp]
	jne	SHORT $LN6@ucm_mergeT
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN31@ucm_mergeT
	mov	edx, DWORD PTR _fromUMapping$[ebp]
	add	edx, 4
	mov	DWORD PTR tv187[ebp], edx
	jmp	SHORT $LN32@ucm_mergeT
$LN31@ucm_mergeT:
	mov	eax, DWORD PTR _fromUTable$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _fromUMapping$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv187[ebp], ecx
$LN32@ucm_mergeT:
	mov	eax, DWORD PTR _subcharLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _subchar$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv187[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@ucm_mergeT
$LN6@ucm_mergeT:
	movzx	eax, BYTE PTR _subchar1$[ebp]
	test	eax, eax
	je	SHORT $LN8@ucm_mergeT
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	jne	SHORT $LN8@ucm_mergeT
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	movzx	edx, BYTE PTR _subchar1$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN8@ucm_mergeT
$LN7@ucm_mergeT:
; Line 665
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	mov	BYTE PTR [eax+10], 2
; Line 666
	jmp	SHORT $LN5@ucm_mergeT
$LN8@ucm_mergeT:
; Line 667
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	mov	BYTE PTR [eax+10], 1
$LN5@ucm_mergeT:
; Line 670
	mov	eax, DWORD PTR _fromUMapping$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _fromUMapping$[ebp], eax
; Line 671
	mov	eax, DWORD PTR _fromUIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _fromUIndex$[ebp], eax
; Line 672
	jmp	$LN10@ucm_mergeT
$LN4@ucm_mergeT:
; Line 674
	mov	eax, DWORD PTR _toUIndex$[ebp]
	cmp	eax, DWORD PTR _toUTop$[ebp]
	jge	$LN3@ucm_mergeT
; Line 678
	mov	eax, DWORD PTR _toUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN1@ucm_mergeT
	mov	eax, DWORD PTR _toUMapping$[ebp]
	cmp	DWORD PTR [eax], 65533			; 0000fffdH
	je	$LN2@ucm_mergeT
	mov	eax, DWORD PTR _toUMapping$[ebp]
	cmp	DWORD PTR [eax], 26			; 0000001aH
	je	SHORT $LN2@ucm_mergeT
$LN1@ucm_mergeT:
; Line 679
	mov	eax, DWORD PTR _toUMapping$[ebp]
	mov	BYTE PTR [eax+10], 3
; Line 680
	mov	eax, DWORD PTR _toUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN33@ucm_mergeT
	mov	edx, DWORD PTR _toUMapping$[ebp]
	add	edx, 4
	mov	DWORD PTR tv218[ebp], edx
	jmp	SHORT $LN34@ucm_mergeT
$LN33@ucm_mergeT:
	mov	eax, DWORD PTR _toUTable$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _toUMapping$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv218[ebp], ecx
$LN34@ucm_mergeT:
	mov	eax, DWORD PTR _toUMapping$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN35@ucm_mergeT
	mov	edx, DWORD PTR _toUMapping$[ebp]
	mov	DWORD PTR tv226[ebp], edx
	jmp	SHORT $LN36@ucm_mergeT
$LN35@ucm_mergeT:
	mov	eax, DWORD PTR _toUMapping$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _toUTable$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv226[ebp], ecx
$LN36@ucm_mergeT:
	mov	edx, DWORD PTR tv218[ebp]
	push	edx
	mov	eax, DWORD PTR tv226[ebp]
	push	eax
	mov	ecx, DWORD PTR _toUMapping$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fromUTable$[ebp]
	push	edx
	call	_ucm_addMapping
	add	esp, 16					; 00000010H
$LN2@ucm_mergeT:
; Line 683
	mov	eax, DWORD PTR _toUMapping$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _toUMapping$[ebp], eax
; Line 684
	mov	eax, DWORD PTR _toUIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _toUIndex$[ebp], eax
; Line 685
	jmp	$LN4@ucm_mergeT
$LN3@ucm_mergeT:
; Line 687
	mov	eax, DWORD PTR _fromUTable$[ebp]
	mov	BYTE PTR [eax+42], 0
; Line 688
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_mergeTables ENDP
_TEXT	ENDS
PUBLIC	_ucm_mappingType
PUBLIC	??_C@_0EA@EOCFOBDB@warning?3?5removing?5illegal?5mappin@ ; `string'
PUBLIC	_ucm_separateMappings
;	COMDAT ??_C@_0EA@EOCFOBDB@warning?3?5removing?5illegal?5mappin@
CONST	SEGMENT
??_C@_0EA@EOCFOBDB@warning?3?5removing?5illegal?5mappin@ DB 'warning: rem'
	DB	'oving illegal mapping from an SI/SO-stateful table', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_separateMappings
_TEXT	SEGMENT
tv168 = -272						; size = 4
tv144 = -272						; size = 4
tv160 = -268						; size = 4
tv136 = -268						; size = 4
_isOK$ = -65						; size = 1
_needsMove$ = -53					; size = 1
_type$ = -44						; size = 4
_mLimit$ = -32						; size = 4
_m$ = -20						; size = 4
_table$ = -8						; size = 4
_ucm$ = 8						; size = 4
_isSISO$ = 12						; size = 1
_ucm_separateMappings PROC				; COMDAT
; Line 693
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 699
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _table$[ebp], ecx
; Line 700
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _m$[ebp], ecx
; Line 701
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR _mLimit$[ebp], ecx
; Line 703
	mov	BYTE PTR _needsMove$[ebp], 0
; Line 704
	mov	BYTE PTR _isOK$[ebp], 1
	jmp	SHORT $LN11@ucm_separa
$LN10@ucm_separa:
; Line 706
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _m$[ebp], eax
$LN11@ucm_separa:
	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _mLimit$[ebp]
	jae	$LN9@ucm_separa
; Line 707
	movsx	eax, BYTE PTR _isSISO$[ebp]
	test	eax, eax
	je	$LN8@ucm_separa
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	jne	SHORT $LN8@ucm_separa
	mov	eax, DWORD PTR _m$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 14					; 0000000eH
	je	SHORT $LN7@ucm_separa
	mov	eax, DWORD PTR _m$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 15					; 0000000fH
	jne	SHORT $LN8@ucm_separa
$LN7@ucm_separa:
; Line 708
	mov	esi, esp
	push	OFFSET ??_C@_0EA@EOCFOBDB@warning?3?5removing?5illegal?5mappin@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 709
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_ucm_printMapping
	add	esp, 12					; 0000000cH
; Line 710
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+11]
	or	ecx, 2
	mov	edx, DWORD PTR _m$[ebp]
	mov	BYTE PTR [edx+11], cl
; Line 711
	mov	BYTE PTR _needsMove$[ebp], 1
; Line 712
	jmp	$LN10@ucm_separa
$LN8@ucm_separa:
; Line 717
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN14@ucm_separa
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 4
	mov	DWORD PTR tv136[ebp], edx
	jmp	SHORT $LN15@ucm_separa
$LN14@ucm_separa:
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv136[ebp], ecx
$LN15@ucm_separa:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN16@ucm_separa
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv144[ebp], edx
	jmp	SHORT $LN17@ucm_separa
$LN16@ucm_separa:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv144[ebp], ecx
$LN17@ucm_separa:
	mov	edx, DWORD PTR tv136[ebp]
	push	edx
	mov	eax, DWORD PTR tv144[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ucm$[ebp]
	add	edx, 8
	push	edx
	call	_ucm_mappingType
	add	esp, 16					; 00000010H
	mov	DWORD PTR _type$[ebp], eax
; Line 718
	cmp	DWORD PTR _type$[ebp], 0
	jge	$LN6@ucm_separa
; Line 720
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jg	SHORT $LN18@ucm_separa
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 4
	mov	DWORD PTR tv160[ebp], edx
	jmp	SHORT $LN19@ucm_separa
$LN18@ucm_separa:
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _m$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv160[ebp], ecx
$LN19@ucm_separa:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN20@ucm_separa
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv168[ebp], edx
	jmp	SHORT $LN21@ucm_separa
$LN20@ucm_separa:
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv168[ebp], ecx
$LN21@ucm_separa:
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	edx, DWORD PTR tv160[ebp]
	push	edx
	mov	eax, DWORD PTR tv168[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	call	_printMapping
	add	esp, 16					; 00000010H
; Line 721
	mov	BYTE PTR _isOK$[ebp], 0
	jmp	SHORT $LN5@ucm_separa
$LN6@ucm_separa:
; Line 722
	cmp	DWORD PTR _type$[ebp], 0
	jle	SHORT $LN5@ucm_separa
; Line 723
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+11]
	or	ecx, 1
	mov	edx, DWORD PTR _m$[ebp]
	mov	BYTE PTR [edx+11], cl
; Line 724
	mov	BYTE PTR _needsMove$[ebp], 1
$LN5@ucm_separa:
; Line 726
	jmp	$LN10@ucm_separa
$LN9@ucm_separa:
; Line 728
	movsx	eax, BYTE PTR _isOK$[ebp]
	test	eax, eax
	jne	SHORT $LN3@ucm_separa
; Line 729
	xor	al, al
	jmp	SHORT $LN12@ucm_separa
$LN3@ucm_separa:
; Line 731
	movsx	eax, BYTE PTR _needsMove$[ebp]
	test	eax, eax
	je	SHORT $LN2@ucm_separa
; Line 732
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ucm$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_ucm_moveMappings
	add	esp, 8
; Line 733
	push	0
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ucm$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ucm$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _ucm$[ebp]
	add	eax, 8
	push	eax
	call	_ucm_checkBaseExt
	add	esp, 20					; 00000014H
	jmp	SHORT $LN12@ucm_separa
; Line 734
	jmp	SHORT $LN12@ucm_separa
$LN2@ucm_separa:
; Line 735
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_ucm_sortTable
	add	esp, 4
; Line 736
	mov	al, 1
$LN12@ucm_separa:
; Line 738
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_separateMappings ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@EAEBNBFL@ucm?5error?3?5too?5many?5bytes?5on?5?$CC?$CFs@ ; `string'
PUBLIC	??_C@_0EB@GHKLNFAL@ucm?5error?3?5byte?5must?5be?5formatte@ ; `string'
PUBLIC	_ucm_parseBytes
EXTRN	__imp__strtoul:PROC
;	COMDAT ??_C@_0CD@EAEBNBFL@ucm?5error?3?5too?5many?5bytes?5on?5?$CC?$CFs@
CONST	SEGMENT
??_C@_0CD@EAEBNBFL@ucm?5error?3?5too?5many?5bytes?5on?5?$CC?$CFs@ DB 'ucm'
	DB	' error: too many bytes on "%s"', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@GHKLNFAL@ucm?5error?3?5byte?5must?5be?5formatte@
CONST	SEGMENT
??_C@_0EB@GHKLNFAL@ucm?5error?3?5byte?5must?5be?5formatte@ DB 'ucm error:'
	DB	' byte must be formatted as \xXX (2 hex digits) - "%s"', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_parseBytes
_TEXT	SEGMENT
_bLen$ = -41						; size = 1
_byte$ = -29						; size = 1
_end$ = -20						; size = 4
_s$ = -8						; size = 4
_bytes$ = 8						; size = 4
_line$ = 12						; size = 4
_ps$ = 16						; size = 4
_ucm_parseBytes PROC					; COMDAT
; Line 743
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 744
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
; Line 749
	mov	BYTE PTR _bLen$[ebp], 0
$LN7@ucm_parseB:
; Line 752
	movsx	eax, BYTE PTR _bLen$[ebp]
	test	eax, eax
	jle	SHORT $LN5@ucm_parseB
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 43					; 0000002bH
	jne	SHORT $LN5@ucm_parseB
; Line 753
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
$LN5@ucm_parseB:
; Line 755
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN4@ucm_parseB
; Line 756
	jmp	$LN6@ucm_parseB
$LN4@ucm_parseB:
; Line 761
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 120				; 00000078H
	jne	SHORT $LN2@ucm_parseB
	mov	esi, esp
	push	16					; 00000010H
	lea	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 2
	push	ecx
	call	DWORD PTR __imp__strtoul
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _byte$[ebp], al
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 4
	cmp	DWORD PTR _end$[ebp], edx
	je	SHORT $LN3@ucm_parseB
$LN2@ucm_parseB:
; Line 762
	mov	esi, esp
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0EB@GHKLNFAL@ucm?5error?3?5byte?5must?5be?5formatte@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 763
	or	al, -1
	jmp	SHORT $LN8@ucm_parseB
$LN3@ucm_parseB:
; Line 766
	movsx	eax, BYTE PTR _bLen$[ebp]
	cmp	eax, 31					; 0000001fH
	jne	SHORT $LN1@ucm_parseB
; Line 767
	mov	esi, esp
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0CD@EAEBNBFL@ucm?5error?3?5too?5many?5bytes?5on?5?$CC?$CFs@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 768
	or	al, -1
	jmp	SHORT $LN8@ucm_parseB
$LN1@ucm_parseB:
; Line 770
	movsx	eax, BYTE PTR _bLen$[ebp]
	mov	ecx, DWORD PTR _bytes$[ebp]
	mov	dl, BYTE PTR _byte$[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	al, BYTE PTR _bLen$[ebp]
	add	al, 1
	mov	BYTE PTR _bLen$[ebp], al
; Line 771
	mov	eax, DWORD PTR _end$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 772
	jmp	$LN7@ucm_parseB
$LN6@ucm_parseB:
; Line 774
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 775
	mov	al, BYTE PTR _bLen$[ebp]
$LN8@ucm_parseB:
; Line 776
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ucm_parseB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@ucm_parseB:
	DD	1
	DD	$LN11@ucm_parseB
$LN11@ucm_parseB:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@ucm_parseB
$LN10@ucm_parseB:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_ucm_parseBytes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@HMFHDCCB@ucm?5error?3?5fallback?5indicator?5mu@ ; `string'
PUBLIC	??_C@_0BN@JICJNCFF@ucm?5error?3?5no?5bytes?5on?5?$CC?$CFs?$CC?6?$AA@ ; `string'
PUBLIC	??_C@_0CE@GLKDIMDP@ucm?5error?3?5too?5many?5UChars?5on?5?$CC?$CF@ ; `string'
PUBLIC	??_C@_0CL@EFJBKJEG@ucm?5error?3?5no?5Unicode?5code?5point@ ; `string'
PUBLIC	??_C@_0CJ@MEKHBNOB@ucm?5error?3?5too?5many?5code?5points?5@ ; `string'
PUBLIC	??_C@_0EG@BHFFBENH@ucm?5error?3?5Unicode?5code?5point?5mu@ ; `string'
PUBLIC	??_C@_0FF@BFOMKOAL@ucm?5error?3?5Unicode?5code?5point?5mu@ ; `string'
PUBLIC	_ucm_parseMappingLine
EXTRN	_u_skipWhitespace:PROC
EXTRN	_u_strFromUTF32_56:PROC
;	COMDAT ??_C@_0DF@HMFHDCCB@ucm?5error?3?5fallback?5indicator?5mu@
CONST	SEGMENT
??_C@_0DF@HMFHDCCB@ucm?5error?3?5fallback?5indicator?5mu@ DB 'ucm error: '
	DB	'fallback indicator must be |0..|4 - "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JICJNCFF@ucm?5error?3?5no?5bytes?5on?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT
??_C@_0BN@JICJNCFF@ucm?5error?3?5no?5bytes?5on?5?$CC?$CFs?$CC?6?$AA@ DB 'u'
	DB	'cm error: no bytes on "%s"', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GLKDIMDP@ucm?5error?3?5too?5many?5UChars?5on?5?$CC?$CF@
CONST	SEGMENT
??_C@_0CE@GLKDIMDP@ucm?5error?3?5too?5many?5UChars?5on?5?$CC?$CF@ DB 'ucm'
	DB	' error: too many UChars on "%s"', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EFJBKJEG@ucm?5error?3?5no?5Unicode?5code?5point@
CONST	SEGMENT
??_C@_0CL@EFJBKJEG@ucm?5error?3?5no?5Unicode?5code?5point@ DB 'ucm error:'
	DB	' no Unicode code points on "%s"', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MEKHBNOB@ucm?5error?3?5too?5many?5code?5points?5@
CONST	SEGMENT
??_C@_0CJ@MEKHBNOB@ucm?5error?3?5too?5many?5code?5points?5@ DB 'ucm error'
	DB	': too many code points on "%s"', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@BHFFBENH@ucm?5error?3?5Unicode?5code?5point?5mu@
CONST	SEGMENT
??_C@_0EG@BHFFBENH@ucm?5error?3?5Unicode?5code?5point?5mu@ DB 'ucm error:'
	DB	' Unicode code point must be 0..d7ff or e000..10ffff - "%s"', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@BFOMKOAL@ucm?5error?3?5Unicode?5code?5point?5mu@
CONST	SEGMENT
??_C@_0FF@BFOMKOAL@ucm?5error?3?5Unicode?5code?5point?5mu@ DB 'ucm error:'
	DB	' Unicode code point must be formatted as <UXXXX> (1..6 hex di'
	DB	'gits) - "%s"', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_parseMappingLine
_TEXT	SEGMENT
_errorCode$9669 = -92					; size = 4
_f$ = -77						; size = 1
_bLen$ = -65						; size = 1
_uLen$ = -53						; size = 1
_u16Length$ = -44					; size = 4
_cp$ = -32						; size = 4
_end$ = -20						; size = 4
_s$ = -8						; size = 4
_m$ = 8							; size = 4
_codePoints$ = 12					; size = 4
_bytes$ = 16						; size = 4
_line$ = 20						; size = 4
_ucm_parseMappingLine PROC				; COMDAT
; Line 783
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 790
	mov	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 791
	mov	BYTE PTR _bLen$[ebp], 0
	mov	al, BYTE PTR _bLen$[ebp]
	mov	BYTE PTR _uLen$[ebp], al
$LN27@ucm_parseM:
; Line 796
	movsx	eax, BYTE PTR _uLen$[ebp]
	test	eax, eax
	jle	SHORT $LN25@ucm_parseM
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 43					; 0000002bH
	jne	SHORT $LN25@ucm_parseM
; Line 797
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
$LN25@ucm_parseM:
; Line 799
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN24@ucm_parseM
; Line 800
	jmp	$LN26@ucm_parseM
$LN24@ucm_parseM:
; Line 806
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 85					; 00000055H
	jne	SHORT $LN22@ucm_parseM
	mov	esi, esp
	push	16					; 00000010H
	lea	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 2
	push	ecx
	call	DWORD PTR __imp__strtoul
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cp$[ebp], eax
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	cmp	DWORD PTR _end$[ebp], edx
	je	SHORT $LN22@ucm_parseM
	mov	eax, DWORD PTR _end$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN23@ucm_parseM
$LN22@ucm_parseM:
; Line 807
	mov	esi, esp
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0FF@BFOMKOAL@ucm?5error?3?5Unicode?5code?5point?5mu@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 808
	xor	al, al
	jmp	$LN28@ucm_parseM
$LN23@ucm_parseM:
; Line 810
	cmp	DWORD PTR _cp$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN20@ucm_parseM
	mov	eax, DWORD PTR _cp$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN21@ucm_parseM
$LN20@ucm_parseM:
; Line 811
	mov	esi, esp
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0EG@BHFFBENH@ucm?5error?3?5Unicode?5code?5point?5mu@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 812
	xor	al, al
	jmp	$LN28@ucm_parseM
$LN21@ucm_parseM:
; Line 815
	movsx	eax, BYTE PTR _uLen$[ebp]
	cmp	eax, 19					; 00000013H
	jne	SHORT $LN19@ucm_parseM
; Line 816
	mov	esi, esp
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0CJ@MEKHBNOB@ucm?5error?3?5too?5many?5code?5points?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 817
	xor	al, al
	jmp	$LN28@ucm_parseM
$LN19@ucm_parseM:
; Line 819
	movsx	eax, BYTE PTR _uLen$[ebp]
	mov	ecx, DWORD PTR _codePoints$[ebp]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	al, BYTE PTR _uLen$[ebp]
	add	al, 1
	mov	BYTE PTR _uLen$[ebp], al
; Line 820
	mov	eax, DWORD PTR _end$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 821
	jmp	$LN27@ucm_parseM
$LN26@ucm_parseM:
; Line 823
	movsx	eax, BYTE PTR _uLen$[ebp]
	test	eax, eax
	jne	SHORT $LN18@ucm_parseM
; Line 824
	mov	esi, esp
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0CL@EFJBKJEG@ucm?5error?3?5no?5Unicode?5code?5point@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 825
	xor	al, al
	jmp	$LN28@ucm_parseM
	jmp	$LN17@ucm_parseM
$LN18@ucm_parseM:
; Line 826
	movsx	eax, BYTE PTR _uLen$[ebp]
	cmp	eax, 1
	jne	SHORT $LN16@ucm_parseM
; Line 827
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _codePoints$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 828
	jmp	SHORT $LN17@ucm_parseM
$LN16@ucm_parseM:
; Line 829
	mov	DWORD PTR _errorCode$9669[ebp], 0
; Line 830
	lea	eax, DWORD PTR _errorCode$9669[ebp]
	push	eax
	movsx	ecx, BYTE PTR _uLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _codePoints$[ebp]
	push	edx
	lea	eax, DWORD PTR _u16Length$[ebp]
	push	eax
	push	0
	push	0
	call	_u_strFromUTF32_56
	add	esp, 24					; 00000018H
; Line 833
	cmp	DWORD PTR _errorCode$9669[ebp], 0
	jle	SHORT $LN12@ucm_parseM
	cmp	DWORD PTR _errorCode$9669[ebp], 15	; 0000000fH
	jne	SHORT $LN13@ucm_parseM
$LN12@ucm_parseM:
	cmp	DWORD PTR _u16Length$[ebp], 19		; 00000013H
	jle	SHORT $LN17@ucm_parseM
$LN13@ucm_parseM:
; Line 834
	mov	esi, esp
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0CE@GLKDIMDP@ucm?5error?3?5too?5many?5UChars?5on?5?$CC?$CF@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 835
	xor	al, al
	jmp	$LN28@ucm_parseM
$LN17@ucm_parseM:
; Line 839
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 842
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	call	_ucm_parseBytes
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _bLen$[ebp], al
; Line 844
	movsx	eax, BYTE PTR _bLen$[ebp]
	test	eax, eax
	jge	SHORT $LN11@ucm_parseM
; Line 845
	xor	al, al
	jmp	$LN28@ucm_parseM
	jmp	SHORT $LN6@ucm_parseM
$LN11@ucm_parseM:
; Line 846
	movsx	eax, BYTE PTR _bLen$[ebp]
	test	eax, eax
	jne	SHORT $LN9@ucm_parseM
; Line 847
	mov	esi, esp
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@JICJNCFF@ucm?5error?3?5no?5bytes?5on?5?$CC?$CFs?$CC?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 848
	xor	al, al
	jmp	$LN28@ucm_parseM
	jmp	SHORT $LN6@ucm_parseM
$LN9@ucm_parseM:
; Line 849
	movsx	eax, BYTE PTR _bLen$[ebp]
	cmp	eax, 4
	jg	SHORT $LN6@ucm_parseM
; Line 850
	push	1
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	movsx	ecx, BYTE PTR _bLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 4
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN6@ucm_parseM:
; Line 855
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN4@ucm_parseM
; Line 856
	mov	BYTE PTR _f$[ebp], -1
; Line 857
	jmp	SHORT $LN5@ucm_parseM
	jmp	SHORT $LN3@ucm_parseM
$LN4@ucm_parseM:
; Line 858
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 124				; 0000007cH
	jne	SHORT $LN3@ucm_parseM
; Line 859
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	sub	ecx, 48					; 00000030H
	mov	BYTE PTR _f$[ebp], cl
; Line 860
	movzx	eax, BYTE PTR _f$[ebp]
	cmp	eax, 4
	jle	SHORT $LN1@ucm_parseM
; Line 861
	mov	esi, esp
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0DF@HMFHDCCB@ucm?5error?3?5fallback?5indicator?5mu@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 862
	xor	al, al
	jmp	SHORT $LN28@ucm_parseM
$LN1@ucm_parseM:
; Line 864
	jmp	SHORT $LN5@ucm_parseM
$LN3@ucm_parseM:
; Line 866
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 867
	jmp	SHORT $LN6@ucm_parseM
$LN5@ucm_parseM:
; Line 869
	mov	eax, DWORD PTR _m$[ebp]
	mov	cl, BYTE PTR _uLen$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 870
	mov	eax, DWORD PTR _m$[ebp]
	mov	cl, BYTE PTR _bLen$[ebp]
	mov	BYTE PTR [eax+9], cl
; Line 871
	mov	eax, DWORD PTR _m$[ebp]
	mov	cl, BYTE PTR _f$[ebp]
	mov	BYTE PTR [eax+10], cl
; Line 872
	mov	al, 1
$LN28@ucm_parseM:
; Line 873
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@ucm_parseM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN35@ucm_parseM:
	DD	4
	DD	$LN34@ucm_parseM
$LN34@ucm_parseM:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN30@ucm_parseM
	DD	-20					; ffffffecH
	DD	4
	DD	$LN31@ucm_parseM
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN32@ucm_parseM
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN33@ucm_parseM
$LN33@ucm_parseM:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN32@ucm_parseM:
	DB	117					; 00000075H
	DB	49					; 00000031H
	DB	54					; 00000036H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN31@ucm_parseM:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN30@ucm_parseM:
	DB	115					; 00000073H
	DB	0
_ucm_parseMappingLine ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@BDKHHBOF@ucm?5error?3?5unable?5to?5allocate?5a?5@ ; `string'
PUBLIC	_ucm_openTable
EXTRN	_memset:PROC
;	COMDAT ??_C@_0CK@BDKHHBOF@ucm?5error?3?5unable?5to?5allocate?5a?5@
CONST	SEGMENT
??_C@_0CK@BDKHHBOF@ucm?5error?3?5unable?5to?5allocate?5a?5@ DB 'ucm error'
	DB	': unable to allocate a UCMTable', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_openTable
_TEXT	SEGMENT
_table$ = -8						; size = 4
_ucm_openTable PROC					; COMDAT
; Line 878
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 879
	push	44					; 0000002cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _table$[ebp], eax
; Line 880
	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN1@ucm_openTa
; Line 881
	mov	esi, esp
	push	OFFSET ??_C@_0CK@BDKHHBOF@ucm?5error?3?5unable?5to?5allocate?5a?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 882
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@ucm_openTa:
; Line 885
	push	44					; 0000002cH
	push	0
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 886
	mov	eax, DWORD PTR _table$[ebp]
$LN3@ucm_openTa:
; Line 887
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_openTable ENDP
_TEXT	ENDS
PUBLIC	_ucm_closeTable
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucm_closeTable
_TEXT	SEGMENT
_table$ = 8						; size = 4
_ucm_closeTable PROC					; COMDAT
; Line 890
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 891
	cmp	DWORD PTR _table$[ebp], 0
	je	SHORT $LN2@ucm_closeT
; Line 892
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 893
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 894
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 895
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 896
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@ucm_closeT:
; Line 898
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_closeTable ENDP
_TEXT	ENDS
PUBLIC	_ucm_resetTable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucm_resetTable
_TEXT	SEGMENT
_table$ = 8						; size = 4
_ucm_resetTable PROC					; COMDAT
; Line 901
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 902
	cmp	DWORD PTR _table$[ebp], 0
	je	SHORT $LN2@ucm_resetT
; Line 903
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 904
	mov	eax, DWORD PTR _table$[ebp]
	mov	BYTE PTR [eax+41], 0
; Line 905
	mov	eax, DWORD PTR _table$[ebp]
	mov	BYTE PTR [eax+40], 0
; Line 906
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 907
	mov	eax, DWORD PTR _table$[ebp]
	mov	BYTE PTR [eax+42], 0
$LN2@ucm_resetT:
; Line 909
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_resetTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DN@HMHPLMLN@ucm?5error?3?5too?5many?5bytes?5in?5map@ ; `string'
PUBLIC	??_C@_0EB@GAPDKKEP@ucm?5error?3?5too?5many?5code?5points?5@ ; `string'
PUBLIC	??_C@_0CI@NDIGKBOO@ucm?5error?3?5unable?5to?5allocate?5?$CFd@ ; `string'
PUBLIC	??_C@_0CL@GPMHICEF@ucm?5error?3?5unable?5to?5allocate?5?$CFd@ ; `string'
PUBLIC	??_C@_0CN@ILCHCMNM@ucm?5error?3?5unable?5to?5allocate?5?$CFd@ ; `string'
EXTRN	_uprv_realloc_56:PROC
;	COMDAT ??_C@_0DN@HMHPLMLN@ucm?5error?3?5too?5many?5bytes?5in?5map@
CONST	SEGMENT
??_C@_0DN@HMHPLMLN@ucm?5error?3?5too?5many?5bytes?5in?5map@ DB 'ucm error'
	DB	': too many bytes in mappings with >4 charset bytes', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@GAPDKKEP@ucm?5error?3?5too?5many?5code?5points?5@
CONST	SEGMENT
??_C@_0EB@GAPDKKEP@ucm?5error?3?5too?5many?5code?5points?5@ DB 'ucm error'
	DB	': too many code points in multiple-code point mappings', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NDIGKBOO@ucm?5error?3?5unable?5to?5allocate?5?$CFd@
CONST	SEGMENT
??_C@_0CI@NDIGKBOO@ucm?5error?3?5unable?5to?5allocate?5?$CFd@ DB 'ucm err'
	DB	'or: unable to allocate %d bytes', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GPMHICEF@ucm?5error?3?5unable?5to?5allocate?5?$CFd@
CONST	SEGMENT
??_C@_0CL@GPMHICEF@ucm?5error?3?5unable?5to?5allocate?5?$CFd@ DB 'ucm err'
	DB	'or: unable to allocate %d UChar32s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@ILCHCMNM@ucm?5error?3?5unable?5to?5allocate?5?$CFd@
CONST	SEGMENT
??_C@_0CN@ILCHCMNM@ucm?5error?3?5unable?5to?5allocate?5?$CFd@ DB 'ucm err'
	DB	'or: unable to allocate %d UCMappings', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_addMapping
_TEXT	SEGMENT
_idx$ = -32						; size = 4
_c$ = -20						; size = 4
_tm$ = -8						; size = 4
_table$ = 8						; size = 4
_m$ = 12						; size = 4
_codePoints$ = 16					; size = 4
_bytes$ = 20						; size = 4
_ucm_addMapping PROC					; COMDAT
; Line 915
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 920
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jl	$LN21@ucm_addMap
; Line 922
	mov	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN20@ucm_addMap
; Line 923
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+4], 1000			; 000003e8H
; Line 924
	jmp	SHORT $LN19@ucm_addMap
$LN20@ucm_addMap:
; Line 925
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN19@ucm_addMap:
; Line 928
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_uprv_realloc_56
	add	esp, 8
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 929
	mov	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN18@ucm_addMap
; Line 931
	mov	esi, esp
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0CN@ILCHCMNM@ucm?5error?3?5unable?5to?5allocate?5?$CFd@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 932
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@ucm_addMap:
; Line 935
	mov	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN21@ucm_addMap
; Line 937
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 938
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN21@ucm_addMap:
; Line 942
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jle	SHORT $LN16@ucm_addMap
	mov	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN16@ucm_addMap
; Line 943
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+16], 10000		; 00002710H
; Line 944
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 2
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 945
	mov	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN16@ucm_addMap
; Line 947
	mov	esi, esp
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	OFFSET ??_C@_0CL@GPMHICEF@ucm?5error?3?5unable?5to?5allocate?5?$CFd@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 948
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@ucm_addMap:
; Line 952
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jle	SHORT $LN14@ucm_addMap
	mov	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN14@ucm_addMap
; Line 953
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+28], 10000		; 00002710H
; Line 954
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 955
	mov	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN14@ucm_addMap
; Line 957
	mov	esi, esp
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	push	OFFSET ??_C@_0CI@NDIGKBOO@ucm?5error?3?5unable?5to?5allocate?5?$CFd@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 958
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@ucm_addMap:
; Line 962
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jle	$LN12@ucm_addMap
; Line 963
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _idx$[ebp], ecx
; Line 964
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _table$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 965
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+16]
	jle	SHORT $LN11@ucm_addMap
; Line 966
	mov	esi, esp
	push	OFFSET ??_C@_0EB@GAPDKKEP@ucm?5error?3?5too?5many?5code?5points?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 967
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@ucm_addMap:
; Line 970
	push	1
	mov	eax, DWORD PTR _codePoints$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _codePoints$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _idx$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 971
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [eax], ecx
$LN12@ucm_addMap:
; Line 974
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 4
	jle	$LN10@ucm_addMap
; Line 975
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _idx$[ebp], ecx
; Line 976
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _table$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 977
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+28]
	jle	SHORT $LN9@ucm_addMap
; Line 978
	mov	esi, esp
	push	OFFSET ??_C@_0DN@HMHPLMLN@ucm?5error?3?5too?5many?5bytes?5in?5map@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 979
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@ucm_addMap:
; Line 982
	push	1
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _m$[ebp]
	movsx	edx, BYTE PTR [ecx+9]
	push	edx
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, DWORD PTR _idx$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 983
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN10@ucm_addMap:
; Line 987
	mov	DWORD PTR _idx$[ebp], 0
	jmp	SHORT $LN8@ucm_addMap
$LN7@ucm_addMap:
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax
$LN8@ucm_addMap:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	DWORD PTR _idx$[ebp], ecx
	jge	SHORT $LN6@ucm_addMap
; Line 988
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _codePoints$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _c$[ebp], edx
; Line 989
	cmp	DWORD PTR _c$[ebp], 65536		; 00010000H
	jl	SHORT $LN5@ucm_addMap
; Line 990
	mov	eax, DWORD PTR _table$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	or	ecx, 1
	mov	edx, DWORD PTR _table$[ebp]
	mov	BYTE PTR [edx+40], cl
	jmp	SHORT $LN4@ucm_addMap
$LN5@ucm_addMap:
; Line 991
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN4@ucm_addMap
; Line 992
	mov	eax, DWORD PTR _table$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	or	ecx, 2
	mov	edx, DWORD PTR _table$[ebp]
	mov	BYTE PTR [edx+40], cl
$LN4@ucm_addMap:
; Line 994
	jmp	SHORT $LN7@ucm_addMap
$LN6@ucm_addMap:
; Line 997
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	test	ecx, ecx
	jge	SHORT $LN2@ucm_addMap
; Line 998
	mov	eax, DWORD PTR _table$[ebp]
	movsx	ecx, BYTE PTR [eax+41]
	or	ecx, 2
	mov	edx, DWORD PTR _table$[ebp]
	mov	BYTE PTR [edx+41], cl
; Line 999
	jmp	SHORT $LN1@ucm_addMap
$LN2@ucm_addMap:
; Line 1000
	mov	eax, DWORD PTR _table$[ebp]
	movsx	ecx, BYTE PTR [eax+41]
	or	ecx, 1
	mov	edx, DWORD PTR _table$[ebp]
	mov	BYTE PTR [edx+41], cl
$LN1@ucm_addMap:
; Line 1003
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _table$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _tm$[ebp], ecx
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1004
	push	1
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tm$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1006
	mov	eax, DWORD PTR _table$[ebp]
	mov	BYTE PTR [eax+42], 0
$LN23@ucm_addMap:
; Line 1007
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_addMapping ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@FIDJIJID@ucm?5error?3?5unable?5to?5allocate?5a?5@ ; `string'
PUBLIC	_ucm_open
;	COMDAT ??_C@_0CJ@FIDJIJID@ucm?5error?3?5unable?5to?5allocate?5a?5@
CONST	SEGMENT
??_C@_0CJ@FIDJIJID@ucm?5error?3?5unable?5to?5allocate?5a?5@ DB 'ucm error'
	DB	': unable to allocate a UCMFile', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_open
_TEXT	SEGMENT
_ucm$ = -8						; size = 4
_ucm_open PROC						; COMDAT
; Line 1010
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1011
	push	132184					; 00020458H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _ucm$[ebp], eax
; Line 1012
	cmp	DWORD PTR _ucm$[ebp], 0
	jne	SHORT $LN1@ucm_open
; Line 1013
	mov	esi, esp
	push	OFFSET ??_C@_0CJ@FIDJIJID@ucm?5error?3?5unable?5to?5allocate?5a?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1014
	mov	esi, esp
	push	7
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@ucm_open:
; Line 1017
	push	132184					; 00020458H
	push	0
	mov	eax, DWORD PTR _ucm$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1019
	call	_ucm_openTable
	mov	ecx, DWORD PTR _ucm$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1020
	call	_ucm_openTable
	mov	ecx, DWORD PTR _ucm$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1022
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	DWORD PTR [eax+131080], 1
; Line 1023
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	BYTE PTR [eax+132120], -1
; Line 1024
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	BYTE PTR [eax+132121], -1
; Line 1025
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	DWORD PTR [eax+132112], 1
	mov	ecx, DWORD PTR _ucm$[ebp]
	mov	DWORD PTR [ecx+132108], 1
; Line 1027
	mov	eax, DWORD PTR _ucm$[ebp]
$LN3@ucm_open:
; Line 1028
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_open ENDP
_TEXT	ENDS
PUBLIC	_ucm_close
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucm_close
_TEXT	SEGMENT
_ucm$ = 8						; size = 4
_ucm_close PROC						; COMDAT
; Line 1031
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1032
	cmp	DWORD PTR _ucm$[ebp], 0
	je	SHORT $LN2@ucm_close
; Line 1033
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_ucm_closeTable
	add	esp, 4
; Line 1034
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_ucm_closeTable
	add	esp, 4
; Line 1035
	mov	eax, DWORD PTR _ucm$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@ucm_close:
; Line 1037
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_close ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucm_mappingType
_TEXT	SEGMENT
_count$ = -8						; size = 4
_baseStates$ = 8					; size = 4
_m$ = 12						; size = 4
_codePoints$ = 16					; size = 4
_bytes$ = 20						; size = 4
_ucm_mappingType PROC					; COMDAT
; Line 1043
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1045
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _baseStates$[ebp]
	push	eax
	call	_ucm_countChars
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _count$[ebp], eax
; Line 1046
	cmp	DWORD PTR _count$[ebp], 1
	jge	SHORT $LN7@ucm_mappin
; Line 1048
	or	eax, -1
	jmp	$LN8@ucm_mappin
$LN7@ucm_mappin:
; Line 1079
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN6@ucm_mappin
	cmp	DWORD PTR _count$[ebp], 1
	jne	SHORT $LN6@ucm_mappin
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 3
	jg	SHORT $LN6@ucm_mappin
	mov	eax, DWORD PTR _baseStates$[ebp]
	cmp	DWORD PTR [eax+132104], 1
	je	SHORT $LN5@ucm_mappin
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 2
	jne	SHORT $LN4@ucm_mappin
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	je	SHORT $LN6@ucm_mappin
$LN4@ucm_mappin:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 1
	jne	SHORT $LN3@ucm_mappin
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@ucm_mappin
$LN3@ucm_mappin:
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 1
	jg	SHORT $LN5@ucm_mappin
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 1
	jle	SHORT $LN5@ucm_mappin
	mov	eax, DWORD PTR _bytes$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@ucm_mappin
$LN5@ucm_mappin:
; Line 1080
	xor	eax, eax
	jmp	SHORT $LN8@ucm_mappin
; Line 1081
	jmp	SHORT $LN8@ucm_mappin
$LN6@ucm_mappin:
; Line 1082
	mov	eax, 1
$LN8@ucm_mappin:
; Line 1084
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_mappingType ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EE@DFPOEIMB@ucm?5error?3?5illegal?5?$DMsubchar1?$DO?5?$HM2@ ; `string'
PUBLIC	_ucm_addMappingAuto
;	COMDAT ??_C@_0EE@DFPOEIMB@ucm?5error?3?5illegal?5?$DMsubchar1?$DO?5?$HM2@
CONST	SEGMENT
??_C@_0EE@DFPOEIMB@ucm?5error?3?5illegal?5?$DMsubchar1?$DO?5?$HM2@ DB 'uc'
	DB	'm error: illegal <subchar1> |2 mapping from multiple code poi'
	DB	'nts', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_addMappingAuto
_TEXT	SEGMENT
_type$ = -8						; size = 4
_ucm$ = 8						; size = 4
_forBase$ = 12						; size = 1
_baseStates$ = 16					; size = 4
_m$ = 20						; size = 4
_codePoints$ = 24					; size = 4
_bytes$ = 28						; size = 4
_ucm_addMappingAuto PROC				; COMDAT
; Line 1090
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1093
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 2
	jne	SHORT $LN6@ucm_addMap@2
	mov	eax, DWORD PTR _m$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jle	SHORT $LN6@ucm_addMap@2
; Line 1094
	mov	esi, esp
	push	OFFSET ??_C@_0EE@DFPOEIMB@ucm?5error?3?5illegal?5?$DMsubchar1?$DO?5?$HM2@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1095
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _codePoints$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	_printMapping
	add	esp, 16					; 00000010H
; Line 1096
	xor	al, al
	jmp	$LN7@ucm_addMap@2
$LN6@ucm_addMap@2:
; Line 1099
	cmp	DWORD PTR _baseStates$[ebp], 0
	je	SHORT $LN5@ucm_addMap@2
; Line 1101
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _codePoints$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	mov	eax, DWORD PTR _baseStates$[ebp]
	push	eax
	call	_ucm_mappingType
	add	esp, 16					; 00000010H
	mov	DWORD PTR _type$[ebp], eax
; Line 1102
	cmp	DWORD PTR _type$[ebp], 0
	jge	SHORT $LN4@ucm_addMap@2
; Line 1104
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _codePoints$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	_printMapping
	add	esp, 16					; 00000010H
; Line 1105
	xor	al, al
	jmp	SHORT $LN7@ucm_addMap@2
$LN4@ucm_addMap@2:
; Line 1107
	jmp	SHORT $LN3@ucm_addMap@2
$LN5@ucm_addMap@2:
; Line 1109
	mov	DWORD PTR _type$[ebp], 1
$LN3@ucm_addMap@2:
; Line 1116
	movsx	eax, BYTE PTR _forBase$[ebp]
	test	eax, eax
	je	SHORT $LN2@ucm_addMap@2
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN2@ucm_addMap@2
; Line 1117
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _codePoints$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_ucm_addMapping
	add	esp, 16					; 00000010H
; Line 1118
	jmp	SHORT $LN1@ucm_addMap@2
$LN2@ucm_addMap@2:
; Line 1119
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _codePoints$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	mov	eax, DWORD PTR _ucm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_ucm_addMapping
	add	esp, 16					; 00000010H
$LN1@ucm_addMap@2:
; Line 1122
	mov	al, 1
$LN7@ucm_addMap@2:
; Line 1123
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_addMappingAuto ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ucm_addMappingFromLine
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucm_addMappingFromLine
_TEXT	SEGMENT
tv93 = -356						; size = 4
_s$ = -156						; size = 4
_bytes$ = -144						; size = 31
_codePoints$ = -104					; size = 76
_m$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_ucm$ = 8						; size = 4
_line$ = 12						; size = 4
_forBase$ = 16						; size = 1
_baseStates$ = 20					; size = 4
_ucm_addMappingFromLine PROC				; COMDAT
; Line 1126
	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 89					; 00000059H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1127
	mov	DWORD PTR _m$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _m$[ebp+4], eax
	mov	DWORD PTR _m$[ebp+8], eax
; Line 1134
	mov	eax, DWORD PTR _line$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 35					; 00000023H
	je	SHORT $LN1@ucm_addMap@3
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@ucm_addMap@3
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN1@ucm_addMap@3
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN2@ucm_addMap@3
$LN1@ucm_addMap@3:
; Line 1135
	mov	al, 1
	jmp	SHORT $LN3@ucm_addMap@3
$LN2@ucm_addMap@3:
; Line 1140
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _codePoints$[ebp]
	push	edx
	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	call	_ucm_parseMappingLine
	add	esp, 16					; 00000010H
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@ucm_addMap@3
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _codePoints$[ebp]
	push	eax
	lea	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _baseStates$[ebp]
	push	edx
	movzx	eax, BYTE PTR _forBase$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ucm$[ebp]
	push	ecx
	call	_ucm_addMappingAuto
	add	esp, 24					; 00000018H
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@ucm_addMap@3
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN6@ucm_addMap@3
$LN5@ucm_addMap@3:
	mov	DWORD PTR tv93[ebp], 0
$LN6@ucm_addMap@3:
	mov	al, BYTE PTR tv93[ebp]
$LN3@ucm_addMap@3:
; Line 1141
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ucm_addMap@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN11@ucm_addMap@3:
	DD	3
	DD	$LN10@ucm_addMap@3
$LN10@ucm_addMap@3:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN7@ucm_addMap@3
	DD	-104					; ffffff98H
	DD	76					; 0000004cH
	DD	$LN8@ucm_addMap@3
	DD	-144					; ffffff70H
	DD	31					; 0000001fH
	DD	$LN9@ucm_addMap@3
$LN9@ucm_addMap@3:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN8@ucm_addMap@3:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN7@ucm_addMap@3:
	DB	109					; 0000006dH
	DB	0
_ucm_addMappingFromLine ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@EJMIGPNB@END?5CHARMAP?$AA@		; `string'
PUBLIC	??_C@_0BM@NJFMKDPP@incomplete?5charmap?5section?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ucm_readTable
EXTRN	_strcmp:PROC
EXTRN	__imp__strchr:PROC
EXTRN	_T_FileStream_readLine:PROC
;	COMDAT ??_C@_0M@EJMIGPNB@END?5CHARMAP?$AA@
CONST	SEGMENT
??_C@_0M@EJMIGPNB@END?5CHARMAP?$AA@ DB 'END CHARMAP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NJFMKDPP@incomplete?5charmap?5section?6?$AA@
CONST	SEGMENT
??_C@_0BM@NJFMKDPP@incomplete?5charmap?5section?6?$AA@ DB 'incomplete cha'
	DB	'rmap section', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_readTable
_TEXT	SEGMENT
_isOK$ = -529						; size = 1
_end$ = -520						; size = 4
_line$ = -508						; size = 500
__$ArrayPad$ = -4					; size = 4
_ucm$ = 8						; size = 4
_convFile$ = 12						; size = 4
_forBase$ = 16						; size = 1
_baseStates$ = 20					; size = 4
_pErrorCode$ = 24					; size = 4
_ucm_readTable PROC					; COMDAT
; Line 1146
	push	ebp
	mov	ebp, esp
	sub	esp, 728				; 000002d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-728]
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1151
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN11@ucm_readTa
; Line 1152
	jmp	$LN12@ucm_readTa
$LN11@ucm_readTa:
; Line 1155
	mov	BYTE PTR _isOK$[ebp], 1
$LN10@ucm_readTa:
; Line 1159
	push	500					; 000001f4H
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _convFile$[ebp]
	push	ecx
	call	_T_FileStream_readLine
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@ucm_readTa
; Line 1160
	mov	esi, esp
	push	OFFSET ??_C@_0BM@NJFMKDPP@incomplete?5charmap?5section?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1161
	mov	BYTE PTR _isOK$[ebp], 0
; Line 1162
	jmp	$LN9@ucm_readTa
$LN8@ucm_readTa:
; Line 1166
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	DWORD PTR __imp__strchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end$[ebp], eax
$LN7@ucm_readTa:
; Line 1167
	lea	eax, DWORD PTR _line$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jae	SHORT $LN6@ucm_readTa
	mov	eax, DWORD PTR _end$[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN5@ucm_readTa
	mov	eax, DWORD PTR _end$[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN6@ucm_readTa
$LN5@ucm_readTa:
; Line 1168
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
; Line 1169
	jmp	SHORT $LN7@ucm_readTa
$LN6@ucm_readTa:
; Line 1170
	mov	eax, DWORD PTR _end$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1173
	movsx	eax, BYTE PTR _line$[ebp]
	test	eax, eax
	je	SHORT $LN3@ucm_readTa
	movsx	eax, BYTE PTR _line$[ebp]
	cmp	eax, 35					; 00000023H
	jne	SHORT $LN4@ucm_readTa
$LN3@ucm_readTa:
; Line 1174
	jmp	$LN10@ucm_readTa
$LN4@ucm_readTa:
; Line 1178
	push	OFFSET ??_C@_0M@EJMIGPNB@END?5CHARMAP?$AA@
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@ucm_readTa
; Line 1179
	jmp	SHORT $LN9@ucm_readTa
$LN2@ucm_readTa:
; Line 1182
	mov	eax, DWORD PTR _baseStates$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _forBase$[ebp]
	push	ecx
	lea	edx, DWORD PTR _line$[ebp]
	push	edx
	mov	eax, DWORD PTR _ucm$[ebp]
	push	eax
	call	_ucm_addMappingFromLine
	add	esp, 16					; 00000010H
	movsx	ecx, al
	movsx	edx, BYTE PTR _isOK$[ebp]
	and	edx, ecx
	mov	BYTE PTR _isOK$[ebp], dl
; Line 1183
	jmp	$LN10@ucm_readTa
$LN9@ucm_readTa:
; Line 1185
	movsx	eax, BYTE PTR _isOK$[ebp]
	test	eax, eax
	jne	SHORT $LN12@ucm_readTa
; Line 1186
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 13			; 0000000dH
$LN12@ucm_readTa:
; Line 1188
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ucm_readTa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 728				; 000002d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@ucm_readTa:
	DD	1
	DD	$LN16@ucm_readTa
$LN16@ucm_readTa:
	DD	-508					; fffffe04H
	DD	500					; 000001f4H
	DD	$LN15@ucm_readTa
$LN15@ucm_readTa:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
_ucm_readTable ENDP
_TEXT	ENDS
END
