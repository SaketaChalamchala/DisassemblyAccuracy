; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\toolutil\flagparser.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

_DATA	SEGMENT
_currentBufferSize DD 0200H
_DATA	ENDS
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	_parseFlagsFile
EXTRN	_T_FileStream_close:PROC
EXTRN	_strcpy:PROC
EXTRN	_T_FileStream_rewind:PROC
EXTRN	_strlen:PROC
EXTRN	_T_FileStream_readLine:PROC
EXTRN	_uprv_free_56:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	_T_FileStream_open:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
; File d:\mozilla\intl\icu\source\tools\toolutil\flagparser.c
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _parseFlagsFile
_TEXT	SEGMENT
tv151 = -280						; size = 4
_f$ = -80						; size = 4
_result$ = -68						; size = 4
_i$ = -56						; size = 4
_idx$ = -44						; size = 4
_allocateMoreSpace$ = -29				; size = 1
_tmpFlagBuffer$ = -20					; size = 4
_buffer$ = -8						; size = 4
_fileName$ = 8						; size = 4
_flagBuffer$ = 12					; size = 4
_flagBufferSize$ = 16					; size = 4
_flagNames$ = 20					; size = 4
_numOfFlags$ = 24					; size = 4
_status$ = 28						; size = 4
_parseFlagsFile PROC					; COMDAT
; Line 23
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 24
	mov	DWORD PTR _buffer$[ebp], 0
; Line 25
	mov	DWORD PTR _tmpFlagBuffer$[ebp], 0
; Line 26
	mov	BYTE PTR _allocateMoreSpace$[ebp], 0
; Line 28
	mov	DWORD PTR _result$[ebp], 0
; Line 30
	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	call	_T_FileStream_open
	add	esp, 8
	mov	DWORD PTR _f$[ebp], eax
; Line 31
	cmp	DWORD PTR _f$[ebp], 0
	jne	SHORT $LN25@parseFlags
; Line 32
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 4
; Line 33
	jmp	$parseFlagsFile_cleanup$3833
$LN25@parseFlags:
; Line 36
	mov	eax, DWORD PTR _currentBufferSize
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _buffer$[ebp], eax
; Line 37
	mov	eax, DWORD PTR _flagBufferSize$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tmpFlagBuffer$[ebp], eax
; Line 39
	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN23@parseFlags
	cmp	DWORD PTR _tmpFlagBuffer$[ebp], 0
	jne	SHORT $LN22@parseFlags
$LN23@parseFlags:
; Line 40
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 41
	jmp	$parseFlagsFile_cleanup$3833
$LN22@parseFlags:
; Line 45
	movsx	eax, BYTE PTR _allocateMoreSpace$[ebp]
	test	eax, eax
	je	SHORT $LN19@parseFlags
; Line 46
	mov	BYTE PTR _allocateMoreSpace$[ebp], 0
; Line 47
	mov	eax, DWORD PTR _currentBufferSize
	shl	eax, 1
	mov	DWORD PTR _currentBufferSize, eax
; Line 48
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 49
	mov	eax, DWORD PTR _currentBufferSize
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _buffer$[ebp], eax
; Line 50
	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN19@parseFlags
; Line 51
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 52
	jmp	$parseFlagsFile_cleanup$3833
$LN19@parseFlags:
; Line 55
	mov	DWORD PTR _i$[ebp], 0
$LN17@parseFlags:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numOfFlags$[ebp]
	jge	$LN21@parseFlags
; Line 56
	mov	eax, DWORD PTR _currentBufferSize
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	_T_FileStream_readLine
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN15@parseFlags
; Line 58
	jmp	$LN21@parseFlags
$LN15@parseFlags:
; Line 60
	mov	eax, DWORD PTR _buffer$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 35					; 00000023H
	jne	SHORT $LN14@parseFlags
; Line 61
	jmp	SHORT $LN17@parseFlags
$LN14@parseFlags:
; Line 64
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _currentBufferSize
	sub	ecx, 1
	cmp	eax, ecx
	jne	SHORT $LN13@parseFlags
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _currentBufferSize
	movsx	ecx, BYTE PTR [eax-2]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN13@parseFlags
; Line 66
	mov	BYTE PTR _allocateMoreSpace$[ebp], 1
; Line 67
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_T_FileStream_rewind
	add	esp, 4
; Line 68
	jmp	$LN21@parseFlags
; Line 69
	jmp	$LN12@parseFlags
$LN13@parseFlags:
; Line 70
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numOfFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flagNames$[ebp]
	push	edx
	mov	eax, DWORD PTR _flagBufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmpFlagBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _currentBufferSize
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_extractFlag
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _idx$[ebp], eax
; Line 71
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN11@parseFlags
; Line 72
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN10@parseFlags
; Line 73
	mov	eax, DWORD PTR _currentBufferSize
	mov	DWORD PTR _result$[ebp], eax
; Line 74
	jmp	SHORT $LN9@parseFlags
$LN10@parseFlags:
; Line 75
	mov	DWORD PTR _result$[ebp], -1
$LN9@parseFlags:
; Line 77
	jmp	SHORT $LN21@parseFlags
; Line 78
	jmp	SHORT $LN12@parseFlags
$LN11@parseFlags:
; Line 79
	cmp	DWORD PTR _flagNames$[ebp], 0
	je	SHORT $LN7@parseFlags
; Line 80
	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN6@parseFlags
; Line 81
	mov	eax, DWORD PTR _tmpFlagBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _flagBuffer$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 82
	jmp	SHORT $LN5@parseFlags
$LN6@parseFlags:
; Line 84
	jmp	$LN17@parseFlags
$LN5@parseFlags:
; Line 86
	jmp	SHORT $LN12@parseFlags
$LN7@parseFlags:
; Line 87
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _flagBuffer$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv151[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _tmpFlagBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv151[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
$LN12@parseFlags:
; Line 91
	jmp	$LN17@parseFlags
$LN21@parseFlags:
; Line 92
	movsx	eax, BYTE PTR _allocateMoreSpace$[ebp]
	test	eax, eax
	je	SHORT $parseFlagsFile_cleanup$3833
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	$LN22@parseFlags
$parseFlagsFile_cleanup$3833:
; Line 95
	mov	eax, DWORD PTR _tmpFlagBuffer$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 96
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 98
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_T_FileStream_close
	add	esp, 4
; Line 100
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@parseFlags
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	je	SHORT $LN2@parseFlags
; Line 101
	or	eax, -1
	jmp	SHORT $LN26@parseFlags
$LN2@parseFlags:
; Line 104
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@parseFlags
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN1@parseFlags
; Line 105
	mov	DWORD PTR _currentBufferSize, 512	; 00000200H
$LN1@parseFlags:
; Line 108
	mov	eax, DWORD PTR _result$[ebp]
$LN26@parseFlags:
; Line 109
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_parseFlagsFile ENDP
_TEXT	ENDS
EXTRN	__imp__strncmp:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _extractFlag
_TEXT	SEGMENT
_bufferWritten$ = -53					; size = 1
_offset$ = -44						; size = 4
_pBuffer$ = -32						; size = 4
_idx$ = -20						; size = 4
_i$ = -8						; size = 4
_buffer$ = 8						; size = 4
_bufferSize$ = 12					; size = 4
_flag$ = 16						; size = 4
_flagSize$ = 20						; size = 4
_flagNames$ = 24					; size = 4
_numOfFlags$ = 28					; size = 4
_status$ = 32						; size = 4
_extractFlag PROC					; COMDAT
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 116
	mov	DWORD PTR _idx$[ebp], -1
; Line 118
	mov	DWORD PTR _offset$[ebp], 0
; Line 119
	mov	BYTE PTR _bufferWritten$[ebp], 0
; Line 121
	mov	eax, DWORD PTR _buffer$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN13@extractFla
; Line 123
	mov	eax, DWORD PTR _bufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_getFlagOffset
	add	esp, 8
	mov	DWORD PTR _offset$[ebp], eax
; Line 124
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _pBuffer$[ebp], eax
; Line 125
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@extractFla
$LN11@extractFla:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@extractFla:
; Line 126
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _flagSize$[ebp]
	jl	SHORT $LN9@extractFla
; Line 127
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 128
	or	eax, -1
	jmp	$LN14@extractFla
$LN9@extractFla:
; Line 130
	mov	eax, DWORD PTR _pBuffer$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	jne	SHORT $LN8@extractFla
; Line 132
	mov	eax, DWORD PTR _flag$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 0
; Line 133
	jmp	SHORT $LN13@extractFla
$LN8@extractFla:
; Line 136
	mov	eax, DWORD PTR _flag$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
; Line 137
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN7@extractFla
; Line 138
	mov	BYTE PTR _bufferWritten$[ebp], 1
$LN7@extractFla:
; Line 140
	jmp	SHORT $LN11@extractFla
$LN13@extractFla:
; Line 143
	movsx	eax, BYTE PTR _bufferWritten$[ebp]
	test	eax, eax
	jne	SHORT $LN6@extractFla
; Line 144
	mov	eax, DWORD PTR _flag$[ebp]
	mov	BYTE PTR [eax], 0
$LN6@extractFla:
; Line 147
	cmp	DWORD PTR _flagNames$[ebp], 0
	je	SHORT $LN5@extractFla
	cmp	DWORD PTR _offset$[ebp], 0
	jle	SHORT $LN5@extractFla
; Line 148
	mov	eax, DWORD PTR _offset$[ebp]
	sub	eax, 1
	mov	DWORD PTR _offset$[ebp], eax
; Line 149
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@extractFla
$LN3@extractFla:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@extractFla:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numOfFlags$[ebp]
	jge	SHORT $LN5@extractFla
; Line 150
	push	1
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	1
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _flagNames$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _flagNames$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@extractFla
; Line 151
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _idx$[ebp], eax
; Line 152
	jmp	SHORT $LN5@extractFla
$LN1@extractFla:
; Line 154
	jmp	SHORT $LN3@extractFla
$LN5@extractFla:
; Line 157
	mov	eax, DWORD PTR _idx$[ebp]
$LN14@extractFla:
; Line 158
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_extractFlag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getFlagOffset
_TEXT	SEGMENT
_offset$ = -8						; size = 4
_buffer$ = 8						; size = 4
_bufferSize$ = 12					; size = 4
_getFlagOffset PROC					; COMDAT
; Line 163
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 164
	mov	DWORD PTR _offset$[ebp], 0
; Line 166
	mov	DWORD PTR _offset$[ebp], 0
	jmp	SHORT $LN6@getFlagOff
$LN5@getFlagOff:
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, 1
	mov	DWORD PTR _offset$[ebp], eax
$LN6@getFlagOff:
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	eax, DWORD PTR _bufferSize$[ebp]
	jge	SHORT $LN4@getFlagOff
; Line 167
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 61					; 0000003dH
	jne	SHORT $LN3@getFlagOff
; Line 168
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, 1
	mov	DWORD PTR _offset$[ebp], eax
; Line 169
	jmp	SHORT $LN4@getFlagOff
$LN3@getFlagOff:
; Line 171
	jmp	SHORT $LN5@getFlagOff
$LN4@getFlagOff:
; Line 173
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	eax, DWORD PTR _bufferSize$[ebp]
	je	SHORT $LN1@getFlagOff
	mov	eax, DWORD PTR _offset$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _bufferSize$[ebp]
	jne	SHORT $LN2@getFlagOff
$LN1@getFlagOff:
; Line 174
	mov	DWORD PTR _offset$[ebp], 0
$LN2@getFlagOff:
; Line 177
	mov	eax, DWORD PTR _offset$[ebp]
; Line 178
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getFlagOffset ENDP
_TEXT	ENDS
END
