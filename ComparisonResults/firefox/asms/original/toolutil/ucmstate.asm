; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\tools\toolutil\ucmstate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

PUBLIC	??_C@_0DE@OALGABMI@ucm?5error?3?5parse?5error?5in?5state?5@ ; `string'
PUBLIC	??_C@_0CJ@EGJLJGIG@ucm?5error?3?5too?5many?5states?5?$CImaxi@ ; `string'
PUBLIC	_ucm_addState
EXTRN	__imp__exit:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_0DE@OALGABMI@ucm?5error?3?5parse?5error?5in?5state?5@
; File d:\mozilla\intl\icu\source\tools\toolutil\ucmstate.c
CONST	SEGMENT
??_C@_0DE@OALGABMI@ucm?5error?3?5parse?5error?5in?5state?5@ DB 'ucm error'
	DB	': parse error in state definition at ''%s''', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EGJLJGIG@ucm?5error?3?5too?5many?5states?5?$CImaxi@
CONST	SEGMENT
??_C@_0CJ@EGJLJGIG@ucm?5error?3?5too?5many?5states?5?$CImaxi@ DB 'ucm err'
	DB	'or: too many states (maximum %u)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ucm_addState
_TEXT	SEGMENT
_error$ = -8						; size = 4
_states$ = 8						; size = 4
_s$ = 12						; size = 4
_ucm_addState PROC					; COMDAT
; Line 186
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 189
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132096], 128		; 00000080H
	jne	SHORT $LN2@ucm_addSta
; Line 190
	mov	esi, esp
	push	128					; 00000080H
	push	OFFSET ??_C@_0CJ@EGJLJGIG@ucm?5error?3?5too?5many?5states?5?$CImaxi@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 191
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@ucm_addSta:
; Line 195
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132096]
	mov	edx, DWORD PTR _states$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+131072]
	push	eax
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+132096]
	shl	edx, 10					; 0000000aH
	add	edx, DWORD PTR _states$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_parseState
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _error$[ebp], eax
; Line 196
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@ucm_addSta
; Line 197
	mov	esi, esp
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	push	OFFSET ??_C@_0DE@OALGABMI@ucm?5error?3?5parse?5error?5in?5state?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 198
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@ucm_addSta:
; Line 201
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132096]
	add	ecx, 1
	mov	edx, DWORD PTR _states$[ebp]
	mov	DWORD PTR [edx+132096], ecx
$LN4@ucm_addSta:
; Line 202
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_addState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LBPGAAKF@surrogates?$AA@		; `string'
PUBLIC	??_C@_07GLCKIJBG@initial?$AA@			; `string'
EXTRN	__imp__strtoul:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_u_skipWhitespace:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_0L@LBPGAAKF@surrogates?$AA@
CONST	SEGMENT
??_C@_0L@LBPGAAKF@surrogates?$AA@ DB 'surrogates', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GLCKIJBG@initial?$AA@
CONST	SEGMENT
??_C@_07GLCKIJBG@initial?$AA@ DB 'initial', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _parseState
_TEXT	SEGMENT
tv229 = -256						; size = 4
tv136 = -256						; size = 4
tv85 = -256						; size = 4
_entry$ = -56						; size = 4
_i$ = -44						; size = 4
_end$ = -32						; size = 4
_start$ = -20						; size = 4
_t$ = -8						; size = 4
_s$ = 8							; size = 4
_state$ = 12						; size = 4
_pFlags$ = 16						; size = 4
_parseState PROC					; COMDAT
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 56
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN47@parseState
$LN46@parseState:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN47@parseState:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN45@parseState
; Line 57
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+eax*4], -2140078081	; 8070ffffH
; Line 58
	jmp	SHORT $LN46@parseState
$LN45@parseState:
; Line 61
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 64
	push	1
	push	OFFSET ??_C@_07GLCKIJBG@initial?$AA@
	call	_uprv_checkValidMemory
	add	esp, 8
	push	1
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	push	7
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	OFFSET ??_C@_07GLCKIJBG@initial?$AA@
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN44@parseState
; Line 65
	mov	eax, DWORD PTR _pFlags$[ebp]
	mov	DWORD PTR [eax], 1
; Line 66
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 7
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 67
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
	cmp	ecx, 44					; 0000002cH
	je	SHORT $LN50@parseState
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN51@parseState
$LN50@parseState:
	mov	DWORD PTR tv85[ebp], 0
$LN51@parseState:
	cmp	DWORD PTR tv85[ebp], 0
	je	SHORT $LN43@parseState
; Line 68
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 1
	jmp	$LN48@parseState
$LN43@parseState:
; Line 69
	jmp	$LN37@parseState
$LN44@parseState:
; Line 70
	mov	eax, DWORD PTR _pFlags$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN41@parseState
	push	1
	push	OFFSET ??_C@_0L@LBPGAAKF@surrogates?$AA@
	call	_uprv_checkValidMemory
	add	esp, 8
	push	1
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@LBPGAAKF@surrogates?$AA@
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN41@parseState
; Line 71
	mov	eax, DWORD PTR _pFlags$[ebp]
	mov	DWORD PTR [eax], 2
; Line 72
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 10					; 0000000aH
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 73
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
	cmp	ecx, 44					; 0000002cH
	je	SHORT $LN52@parseState
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN53@parseState
$LN52@parseState:
	mov	DWORD PTR tv136[ebp], 0
$LN53@parseState:
	cmp	DWORD PTR tv136[ebp], 0
	je	SHORT $LN40@parseState
; Line 74
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 1
	jmp	$LN48@parseState
$LN40@parseState:
; Line 75
	jmp	SHORT $LN37@parseState
$LN41@parseState:
; Line 76
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN37@parseState
; Line 78
	xor	eax, eax
	jmp	$LN48@parseState
$LN37@parseState:
; Line 83
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 84
	mov	esi, esp
	push	16					; 00000010H
	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR __imp__strtoul
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start$[ebp], eax
; Line 85
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	je	SHORT $LN34@parseState
	cmp	DWORD PTR _start$[ebp], 255		; 000000ffH
	jbe	SHORT $LN35@parseState
$LN34@parseState:
; Line 86
	mov	eax, DWORD PTR _s$[ebp]
	jmp	$LN48@parseState
$LN35@parseState:
; Line 88
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 91
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN33@parseState
; Line 92
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 93
	mov	esi, esp
	push	16					; 00000010H
	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR __imp__strtoul
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _end$[ebp], eax
; Line 94
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	je	SHORT $LN31@parseState
	mov	eax, DWORD PTR _end$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jb	SHORT $LN31@parseState
	cmp	DWORD PTR _end$[ebp], 255		; 000000ffH
	jbe	SHORT $LN32@parseState
$LN31@parseState:
; Line 95
	mov	eax, DWORD PTR _s$[ebp]
	jmp	$LN48@parseState
$LN32@parseState:
; Line 97
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 98
	jmp	SHORT $LN30@parseState
$LN33@parseState:
; Line 99
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _end$[ebp], eax
$LN30@parseState:
; Line 103
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 58					; 0000003aH
	je	SHORT $LN29@parseState
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	je	SHORT $LN29@parseState
; Line 105
	mov	DWORD PTR _entry$[ebp], -2143289344	; 80400000H
; Line 106
	jmp	$LN28@parseState
$LN29@parseState:
; Line 107
	mov	DWORD PTR _entry$[ebp], 0
; Line 108
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 58					; 0000003aH
	jne	SHORT $LN27@parseState
; Line 110
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 111
	mov	esi, esp
	push	16					; 00000010H
	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR __imp__strtoul
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _i$[ebp], eax
; Line 112
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	je	SHORT $LN27@parseState
; Line 113
	cmp	DWORD PTR _i$[ebp], 127			; 0000007fH
	jbe	SHORT $LN25@parseState
; Line 114
	mov	eax, DWORD PTR _s$[ebp]
	jmp	$LN48@parseState
$LN25@parseState:
; Line 116
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 117
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -2130706433			; 80ffffffH
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 24					; 00000018H
	or	eax, ecx
	mov	DWORD PTR _entry$[ebp], eax
$LN27@parseState:
; Line 122
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	jne	$LN28@parseState
; Line 124
	mov	eax, DWORD PTR _entry$[ebp]
	or	eax, -2147483648			; 80000000H
	mov	DWORD PTR _entry$[ebp], eax
; Line 126
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 127
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 117				; 00000075H
	jne	SHORT $LN23@parseState
; Line 129
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -16777216				; ff000000H
	or	eax, 6291456				; 00600000H
	or	eax, 65534				; 0000fffeH
	mov	DWORD PTR _entry$[ebp], eax
; Line 130
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
	jmp	$LN28@parseState
$LN23@parseState:
; Line 131
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 112				; 00000070H
	jne	SHORT $LN21@parseState
; Line 132
	mov	eax, DWORD PTR _pFlags$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN20@parseState
; Line 133
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -15728641				; ff0fffffH
	or	eax, 5242880				; 00500000H
	mov	DWORD PTR _entry$[ebp], eax
; Line 134
	jmp	SHORT $LN19@parseState
$LN20@parseState:
; Line 135
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -15728641				; ff0fffffH
	or	eax, 4194304				; 00400000H
	mov	DWORD PTR _entry$[ebp], eax
$LN19@parseState:
; Line 137
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
	jmp	SHORT $LN28@parseState
$LN21@parseState:
; Line 138
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 115				; 00000073H
	jne	SHORT $LN17@parseState
; Line 139
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -15728641				; ff0fffffH
	or	eax, 8388608				; 00800000H
	mov	DWORD PTR _entry$[ebp], eax
; Line 140
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
	jmp	SHORT $LN28@parseState
$LN17@parseState:
; Line 141
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 105				; 00000069H
	jne	SHORT $LN15@parseState
; Line 143
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -16777216				; ff000000H
	or	eax, 7340032				; 00700000H
	or	eax, 65535				; 0000ffffH
	mov	DWORD PTR _entry$[ebp], eax
; Line 144
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 145
	jmp	SHORT $LN28@parseState
$LN15@parseState:
; Line 147
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -15728641				; ff0fffffH
	or	eax, 4194304				; 00400000H
	mov	DWORD PTR _entry$[ebp], eax
$LN28@parseState:
; Line 155
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	cmp	eax, 4
	jne	SHORT $LN12@parseState
; Line 156
	mov	eax, DWORD PTR _pFlags$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv229[ebp], ecx
	cmp	DWORD PTR tv229[ebp], 1
	je	SHORT $LN8@parseState
	cmp	DWORD PTR tv229[ebp], 2
	je	SHORT $LN7@parseState
	jmp	SHORT $LN12@parseState
; Line 159
	jmp	SHORT $LN12@parseState
$LN8@parseState:
; Line 162
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -16777216				; ff000000H
	or	eax, 65534				; 0000fffeH
	mov	DWORD PTR _entry$[ebp], eax
; Line 163
	jmp	SHORT $LN12@parseState
$LN7@parseState:
; Line 165
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -16777216				; ff000000H
	or	eax, 5242880				; 00500000H
	mov	DWORD PTR _entry$[ebp], eax
$LN12@parseState:
; Line 173
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN5@parseState
$LN4@parseState:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@parseState:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	ja	SHORT $LN3@parseState
; Line 174
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 175
	jmp	SHORT $LN4@parseState
$LN3@parseState:
; Line 177
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 44					; 0000002cH
	jne	SHORT $LN2@parseState
; Line 178
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 179
	jmp	SHORT $LN1@parseState
$LN2@parseState:
; Line 180
	mov	eax, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [eax]
	neg	eax
	sbb	eax, eax
	and	eax, DWORD PTR _s$[ebp]
	jmp	SHORT $LN48@parseState
$LN1@parseState:
; Line 182
	jmp	$LN37@parseState
$LN48@parseState:
; Line 183
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN56@parseState
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN56@parseState:
	DD	1
	DD	$LN55@parseState
$LN55@parseState:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN54@parseState
$LN54@parseState:
	DB	116					; 00000074H
	DB	0
_parseState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@GIGHBHBH@ucm?5error?3?5?$DMicu?3base?$DO?5without?5a?5@ ; `string'
PUBLIC	??_C@_08ICLGFNBB@icu?3base?$AA@			; `string'
PUBLIC	??_C@_0DF@POPBGCPA@ucm?5error?3?5?$DMicu?3state?$DO?5before?5th@ ; `string'
PUBLIC	??_C@_0FC@ECBFFCOB@ucm?5error?3?5?$DMicu?3state?$DO?5entry?5for@ ; `string'
PUBLIC	??_C@_09PFMGJGNC@icu?3state?$AA@		; `string'
PUBLIC	??_C@_0CE@BFJOJHCP@ucm?5error?3?5illegal?5?$DMmb_cur_min?$DO?5@ ; `string'
PUBLIC	??_C@_0L@BOGIPKJK@mb_cur_min?$AA@		; `string'
PUBLIC	??_C@_0CE@MCHFCFGO@ucm?5error?3?5illegal?5?$DMmb_cur_max?$DO?5@ ; `string'
PUBLIC	??_C@_0L@MODBOPF@mb_cur_max?$AA@		; `string'
PUBLIC	??_C@_0CF@HCOAGIGN@ucm?5error?3?5unknown?5?$DMuconv_class?$DO@ ; `string'
PUBLIC	??_C@_0BA@DIIKNLNO@EBCDIC_STATEFUL?$AA@		; `string'
PUBLIC	??_C@_04ELOJDJKC@MBCS?$AA@			; `string'
PUBLIC	??_C@_04JEDJBAEB@SBCS?$AA@			; `string'
PUBLIC	??_C@_04EGPJFLND@DBCS?$AA@			; `string'
PUBLIC	??_C@_0M@PJIHLACN@uconv_class?$AA@		; `string'
PUBLIC	??_C@_0DH@JJKDLJHL@ucm?5error?3?5incomplete?5header?5fie@ ; `string'
PUBLIC	??_C@_0CP@EFCFKNDH@ucm?5error?3?5no?5header?5field?5?$DMkey?$DO@ ; `string'
PUBLIC	??_C@_07GOGBKBKH@CHARMAP?$AA@			; `string'
PUBLIC	_ucm_parseHeaderLine
EXTRN	_strcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	_memcmp:PROC
;	COMDAT ??_C@_0DB@GIGHBHBH@ucm?5error?3?5?$DMicu?3base?$DO?5without?5a?5@
CONST	SEGMENT
??_C@_0DB@GIGHBHBH@ucm?5error?3?5?$DMicu?3base?$DO?5without?5a?5@ DB 'ucm'
	DB	' error: <icu:base> without a base table name', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08ICLGFNBB@icu?3base?$AA@
CONST	SEGMENT
??_C@_08ICLGFNBB@icu?3base?$AA@ DB 'icu:base', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@POPBGCPA@ucm?5error?3?5?$DMicu?3state?$DO?5before?5th@
CONST	SEGMENT
??_C@_0DF@POPBGCPA@ucm?5error?3?5?$DMicu?3state?$DO?5before?5th@ DB 'ucm '
	DB	'error: <icu:state> before the <mb_cur_max> line', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@ECBFFCOB@ucm?5error?3?5?$DMicu?3state?$DO?5entry?5for@
CONST	SEGMENT
??_C@_0FC@ECBFFCOB@ucm?5error?3?5?$DMicu?3state?$DO?5entry?5for@ DB 'ucm '
	DB	'error: <icu:state> entry for non-MBCS table or before the <uc'
	DB	'onv_class> line', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09PFMGJGNC@icu?3state?$AA@
CONST	SEGMENT
??_C@_09PFMGJGNC@icu?3state?$AA@ DB 'icu:state', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BFJOJHCP@ucm?5error?3?5illegal?5?$DMmb_cur_min?$DO?5@
CONST	SEGMENT
??_C@_0CE@BFJOJHCP@ucm?5error?3?5illegal?5?$DMmb_cur_min?$DO?5@ DB 'ucm e'
	DB	'rror: illegal <mb_cur_min> %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BOGIPKJK@mb_cur_min?$AA@
CONST	SEGMENT
??_C@_0L@BOGIPKJK@mb_cur_min?$AA@ DB 'mb_cur_min', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MCHFCFGO@ucm?5error?3?5illegal?5?$DMmb_cur_max?$DO?5@
CONST	SEGMENT
??_C@_0CE@MCHFCFGO@ucm?5error?3?5illegal?5?$DMmb_cur_max?$DO?5@ DB 'ucm e'
	DB	'rror: illegal <mb_cur_max> %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MODBOPF@mb_cur_max?$AA@
CONST	SEGMENT
??_C@_0L@MODBOPF@mb_cur_max?$AA@ DB 'mb_cur_max', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HCOAGIGN@ucm?5error?3?5unknown?5?$DMuconv_class?$DO@
CONST	SEGMENT
??_C@_0CF@HCOAGIGN@ucm?5error?3?5unknown?5?$DMuconv_class?$DO@ DB 'ucm er'
	DB	'ror: unknown <uconv_class> %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DIIKNLNO@EBCDIC_STATEFUL?$AA@
CONST	SEGMENT
??_C@_0BA@DIIKNLNO@EBCDIC_STATEFUL?$AA@ DB 'EBCDIC_STATEFUL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04ELOJDJKC@MBCS?$AA@
CONST	SEGMENT
??_C@_04ELOJDJKC@MBCS?$AA@ DB 'MBCS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JEDJBAEB@SBCS?$AA@
CONST	SEGMENT
??_C@_04JEDJBAEB@SBCS?$AA@ DB 'SBCS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EGPJFLND@DBCS?$AA@
CONST	SEGMENT
??_C@_04EGPJFLND@DBCS?$AA@ DB 'DBCS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PJIHLACN@uconv_class?$AA@
CONST	SEGMENT
??_C@_0M@PJIHLACN@uconv_class?$AA@ DB 'uconv_class', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@JJKDLJHL@ucm?5error?3?5incomplete?5header?5fie@
CONST	SEGMENT
??_C@_0DH@JJKDLJHL@ucm?5error?3?5incomplete?5header?5fie@ DB 'ucm error: '
	DB	'incomplete header field <key> in line "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EFCFKNDH@ucm?5error?3?5no?5header?5field?5?$DMkey?$DO@
CONST	SEGMENT
??_C@_0CP@EFCFKNDH@ucm?5error?3?5no?5header?5field?5?$DMkey?$DO@ DB 'ucm '
	DB	'error: no header field <key> in line "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GOGBKBKH@CHARMAP?$AA@
CONST	SEGMENT
??_C@_07GOGBKBKH@CHARMAP?$AA@ DB 'CHARMAP', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_parseHeaderLine
_TEXT	SEGMENT
tv240 = -244						; size = 4
_c$ = -41						; size = 1
_end$ = -32						; size = 4
_s$ = -20						; size = 4
_states$ = -8						; size = 4
_ucm$ = 8						; size = 4
_line$ = 12						; size = 4
_pKey$ = 16						; size = 4
_pValue$ = 20						; size = 4
_ucm_parseHeaderLine PROC				; COMDAT
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 211
	mov	eax, DWORD PTR _ucm$[ebp]
	add	eax, 8
	mov	DWORD PTR _states$[ebp], eax
; Line 214
	mov	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR _end$[ebp], eax
	jmp	SHORT $LN45@ucm_parseH
$LN44@ucm_parseH:
	mov	eax, DWORD PTR _end$[ebp]
	add	eax, 1
	mov	DWORD PTR _end$[ebp], eax
$LN45@ucm_parseH:
	mov	eax, DWORD PTR _end$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	movsx	edx, BYTE PTR _c$[ebp]
	test	edx, edx
	je	SHORT $LN40@ucm_parseH
; Line 215
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN41@ucm_parseH
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN41@ucm_parseH
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN42@ucm_parseH
$LN41@ucm_parseH:
; Line 216
	jmp	SHORT $LN40@ucm_parseH
$LN42@ucm_parseH:
; Line 218
	jmp	SHORT $LN44@ucm_parseH
$LN40@ucm_parseH:
; Line 219
	mov	eax, DWORD PTR _end$[ebp]
	cmp	eax, DWORD PTR _line$[ebp]
	jbe	SHORT $LN39@ucm_parseH
	mov	eax, DWORD PTR _end$[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN38@ucm_parseH
	mov	eax, DWORD PTR _end$[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 9
	jne	SHORT $LN39@ucm_parseH
$LN38@ucm_parseH:
; Line 220
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
; Line 221
	jmp	SHORT $LN40@ucm_parseH
$LN39@ucm_parseH:
; Line 222
	mov	eax, DWORD PTR _end$[ebp]
	mov	BYTE PTR [eax], 0
; Line 225
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 226
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN37@ucm_parseH
; Line 227
	mov	al, 1
	jmp	$LN47@ucm_parseH
$LN37@ucm_parseH:
; Line 231
	push	7
	push	OFFSET ??_C@_07GOGBKBKH@CHARMAP?$AA@
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN36@ucm_parseH
; Line 232
	xor	al, al
	jmp	$LN47@ucm_parseH
$LN36@ucm_parseH:
; Line 236
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN35@ucm_parseH
; Line 237
	mov	esi, esp
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0CP@EFCFKNDH@ucm?5error?3?5no?5header?5field?5?$DMkey?$DO@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 238
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@ucm_parseH:
; Line 240
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR _pKey$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], edx
$LN34@ucm_parseH:
; Line 241
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN33@ucm_parseH
; Line 242
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN32@ucm_parseH
; Line 243
	mov	esi, esp
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	push	OFFSET ??_C@_0DH@JJKDLJHL@ucm?5error?3?5incomplete?5header?5fie@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 244
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN32@ucm_parseH:
; Line 246
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 247
	jmp	SHORT $LN34@ucm_parseH
$LN33@ucm_parseH:
; Line 248
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 0
; Line 251
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	push	eax
	call	_u_skipWhitespace
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 252
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 34					; 00000022H
	je	SHORT $LN31@ucm_parseH
; Line 253
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 254
	jmp	SHORT $LN30@ucm_parseH
$LN31@ucm_parseH:
; Line 256
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _pValue$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 257
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR _end$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN30@ucm_parseH
	mov	eax, DWORD PTR _end$[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 34					; 00000022H
	jne	SHORT $LN30@ucm_parseH
; Line 258
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
	mov	ecx, DWORD PTR _end$[ebp]
	mov	BYTE PTR [ecx], 0
$LN30@ucm_parseH:
; Line 263
	push	OFFSET ??_C@_0M@PJIHLACN@uconv_class?$AA@
	mov	eax, DWORD PTR _pKey$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN28@ucm_parseH
; Line 264
	push	OFFSET ??_C@_04EGPJFLND@DBCS?$AA@
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@ucm_parseH
; Line 265
	mov	eax, DWORD PTR _states$[ebp]
	mov	BYTE PTR [eax+132112], 1
	jmp	$LN26@ucm_parseH
$LN27@ucm_parseH:
; Line 266
	push	OFFSET ??_C@_04JEDJBAEB@SBCS?$AA@
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@ucm_parseH
; Line 267
	mov	eax, DWORD PTR _states$[ebp]
	mov	BYTE PTR [eax+132112], 0
	jmp	$LN26@ucm_parseH
$LN25@ucm_parseH:
; Line 268
	push	OFFSET ??_C@_04ELOJDJKC@MBCS?$AA@
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@ucm_parseH
; Line 269
	mov	eax, DWORD PTR _states$[ebp]
	mov	BYTE PTR [eax+132112], 2
	jmp	SHORT $LN26@ucm_parseH
$LN23@ucm_parseH:
; Line 270
	push	OFFSET ??_C@_0BA@DIIKNLNO@EBCDIC_STATEFUL?$AA@
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@ucm_parseH
; Line 271
	mov	eax, DWORD PTR _states$[ebp]
	mov	BYTE PTR [eax+132112], 9
; Line 272
	jmp	SHORT $LN26@ucm_parseH
$LN21@ucm_parseH:
; Line 273
	mov	esi, esp
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0CF@HCOAGIGN@ucm?5error?3?5unknown?5?$DMuconv_class?$DO@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 274
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@ucm_parseH:
; Line 276
	mov	al, 1
	jmp	$LN47@ucm_parseH
	jmp	$LN19@ucm_parseH
$LN28@ucm_parseH:
; Line 277
	push	OFFSET ??_C@_0L@MODBOPF@mb_cur_max?$AA@
	mov	eax, DWORD PTR _pKey$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN18@ucm_parseH
; Line 278
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$[ebp], dl
; Line 279
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 49					; 00000031H
	jl	SHORT $LN17@ucm_parseH
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 52					; 00000034H
	jg	SHORT $LN17@ucm_parseH
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	jne	SHORT $LN17@ucm_parseH
; Line 280
	movsx	eax, BYTE PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	movsx	ecx, al
	mov	edx, DWORD PTR _states$[ebp]
	mov	DWORD PTR [edx+132104], ecx
; Line 281
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132104]
	sub	ecx, 1
	mov	edx, DWORD PTR _states$[ebp]
	mov	BYTE PTR [edx+132113], cl
; Line 282
	jmp	SHORT $LN16@ucm_parseH
$LN17@ucm_parseH:
; Line 283
	mov	esi, esp
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0CE@MCHFCFGO@ucm?5error?3?5illegal?5?$DMmb_cur_max?$DO?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 284
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@ucm_parseH:
; Line 286
	mov	al, 1
	jmp	$LN47@ucm_parseH
	jmp	$LN19@ucm_parseH
$LN18@ucm_parseH:
; Line 287
	push	OFFSET ??_C@_0L@BOGIPKJK@mb_cur_min?$AA@
	mov	eax, DWORD PTR _pKey$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN14@ucm_parseH
; Line 288
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$[ebp], dl
; Line 289
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 49					; 00000031H
	jl	SHORT $LN13@ucm_parseH
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 52					; 00000034H
	jg	SHORT $LN13@ucm_parseH
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	jne	SHORT $LN13@ucm_parseH
; Line 290
	movsx	eax, BYTE PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	movsx	ecx, al
	mov	edx, DWORD PTR _states$[ebp]
	mov	DWORD PTR [edx+132100], ecx
; Line 291
	jmp	SHORT $LN12@ucm_parseH
$LN13@ucm_parseH:
; Line 292
	mov	esi, esp
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0CE@BFJOJHCP@ucm?5error?3?5illegal?5?$DMmb_cur_min?$DO?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 293
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@ucm_parseH:
; Line 295
	mov	al, 1
	jmp	$LN47@ucm_parseH
	jmp	$LN19@ucm_parseH
$LN14@ucm_parseH:
; Line 296
	push	OFFSET ??_C@_09PFMGJGNC@icu?3state?$AA@
	mov	eax, DWORD PTR _pKey$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN10@ucm_parseH
; Line 298
	mov	eax, DWORD PTR _states$[ebp]
	movsx	ecx, BYTE PTR [eax+132112]
	mov	DWORD PTR tv240[ebp], ecx
	cmp	DWORD PTR tv240[ebp], 9
	ja	SHORT $LN5@ucm_parseH
	mov	edx, DWORD PTR tv240[ebp]
	movzx	eax, BYTE PTR $LN48@ucm_parseH[edx]
	jmp	DWORD PTR $LN49@ucm_parseH[eax*4]
$LN7@ucm_parseH:
; Line 302
	mov	eax, DWORD PTR _states$[ebp]
	mov	BYTE PTR [eax+132112], 2
; Line 303
	jmp	SHORT $LN8@ucm_parseH
$LN6@ucm_parseH:
; Line 305
	jmp	SHORT $LN8@ucm_parseH
$LN5@ucm_parseH:
; Line 307
	mov	esi, esp
	push	OFFSET ??_C@_0FC@ECBFFCOB@ucm?5error?3?5?$DMicu?3state?$DO?5entry?5for@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 308
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@ucm_parseH:
; Line 311
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132104], 0
	jne	SHORT $LN4@ucm_parseH
; Line 312
	mov	esi, esp
	push	OFFSET ??_C@_0DF@POPBGCPA@ucm?5error?3?5?$DMicu?3state?$DO?5before?5th@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 313
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@ucm_parseH:
; Line 315
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _states$[ebp]
	push	edx
	call	_ucm_addState
	add	esp, 8
; Line 316
	mov	al, 1
	jmp	SHORT $LN47@ucm_parseH
	jmp	SHORT $LN19@ucm_parseH
$LN10@ucm_parseH:
; Line 317
	push	OFFSET ??_C@_08ICLGFNBB@icu?3base?$AA@
	mov	eax, DWORD PTR _pKey$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@ucm_parseH
; Line 318
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN1@ucm_parseH
; Line 319
	mov	esi, esp
	push	OFFSET ??_C@_0DB@GIGHBHBH@ucm?5error?3?5?$DMicu?3base?$DO?5without?5a?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 320
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@ucm_parseH:
; Line 322
	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ucm$[ebp]
	add	edx, 132124				; 0002041cH
	push	edx
	call	_strcpy
	add	esp, 8
; Line 323
	mov	al, 1
	jmp	SHORT $LN47@ucm_parseH
$LN19@ucm_parseH:
; Line 326
	xor	al, al
$LN47@ucm_parseH:
; Line 327
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN49@ucm_parseH:
	DD	$LN7@ucm_parseH
	DD	$LN6@ucm_parseH
	DD	$LN5@ucm_parseH
$LN48@ucm_parseH:
	DB	0
	DB	0
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
_ucm_parseHeaderLine ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EN@DNAAGBGP@ucm?5error?3?5state?5?$CFd?5is?5?8initial?8@ ; `string'
PUBLIC	??_C@_0FB@LKHEJPIB@ucm?5error?3?5SI?1SO?5codepages?5must?5@ ; `string'
PUBLIC	??_C@_0EB@HBEKCODO@ucm?5error?3?5SI?1SO?5codepages?5must?5@ ; `string'
PUBLIC	??_C@_0EA@PIKMMIBH@ucm?5error?3?5SI?1SO?5codepages?5must?5@ ; `string'
PUBLIC	??_C@_0FI@FPDCOJKF@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@ ; `string'
PUBLIC	??_C@_0FH@NOJCHEB@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@ ; `string'
PUBLIC	??_C@_0EP@MOMPAHKI@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@ ; `string'
PUBLIC	??_C@_0CD@CCLPMOEM@ucm?5warning?3?5min?5B?1char?5too?5smal@ ; `string'
PUBLIC	??_C@_0CB@MJOEKEFF@ucm?5error?3?5max?5B?1char?5too?5large?6@ ; `string'
PUBLIC	??_C@_0CE@IKMGALEK@ucm?5error?3?5max?5B?1char?5?$DM?5min?5B?1ch@ ; `string'
PUBLIC	??_C@_0CG@LIEDMPPK@ucm?5error?3?5unknown?5charset?5struc@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02PMJKFNFC@40?$AA@			; `string'
PUBLIC	??_C@_05ELBPNFEC@41?9fe?$AA@			; `string'
PUBLIC	??_C@_0BM@ONCPHCDI@0?93f?33?0?540?32?0?541?9fe?31?0?5ff?33?$AA@ ; `string'
PUBLIC	??_C@_0DA@OPDLMLHK@error?3?5DBCS?5codepage?5with?5min?5or@ ; `string'
PUBLIC	??_C@_08EGJFENHL@0?9ff?31?4i?$AA@		; `string'
PUBLIC	??_C@_0BA@BEKGBPBE@0?9ff?31?4i?0?540?31?4?$AA@	; `string'
PUBLIC	??_C@_0BL@JMGGNBFM@0?940?31?4i?0?541?9fe?31?4?0?5ff?31?4i?$AA@ ; `string'
PUBLIC	??_C@_0DD@DMPHLACC@initial?0?50?93f?34?0?5e?31?4s?0?5f?30?4s?0?54@ ; `string'
PUBLIC	??_C@_0BD@OKHLDIO@0?9ff?0?5e?31?4s?0?5f?30?4s?$AA@ ; `string'
PUBLIC	??_C@_0DK@BJDJKNGL@error?3?5DBCS?5codepage?5with?5min?5B?1@ ; `string'
PUBLIC	??_C@_0ED@CIKEHNJK@ucm?5error?3?5missing?5state?5table?5i@ ; `string'
PUBLIC	??_C@_04LFFJLMDE@0?9ff?$AA@			; `string'
PUBLIC	??_C@_0CJ@DOMNBAHG@error?3?5SBCS?5codepage?5with?5max?5B?1@ ; `string'
PUBLIC	??_C@_0DE@KDMCFGMF@ucm?5error?3?5missing?5conversion?5ty@ ; `string'
PUBLIC	_ucm_processStates
;	COMDAT ??_C@_0EN@DNAAGBGP@ucm?5error?3?5state?5?$CFd?5is?5?8initial?8@
CONST	SEGMENT
??_C@_0EN@DNAAGBGP@ucm?5error?3?5state?5?$CFd?5is?5?8initial?8@ DB 'ucm e'
	DB	'rror: state %d is ''initial'' - not supported except for SI/S'
	DB	'O codepages', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@LKHEJPIB@ucm?5error?3?5SI?1SO?5codepages?5must?5@
CONST	SEGMENT
??_C@_0FB@LKHEJPIB@ucm?5error?3?5SI?1SO?5codepages?5must?5@ DB 'ucm error'
	DB	': SI/SO codepages must have in states 0 and 1 transitions e:1'
	DB	'.s, f:0.s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HBEKCODO@ucm?5error?3?5SI?1SO?5codepages?5must?5@
CONST	SEGMENT
??_C@_0EB@HBEKCODO@ucm?5error?3?5SI?1SO?5codepages?5must?5@ DB 'ucm error'
	DB	': SI/SO codepages must have at least 3 states (not %x)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@PIKMMIBH@ucm?5error?3?5SI?1SO?5codepages?5must?5@
CONST	SEGMENT
??_C@_0EA@PIKMMIBH@ucm?5error?3?5SI?1SO?5codepages?5must?5@ DB 'ucm error'
	DB	': SI/SO codepages must have max 2 bytes/char (not %x)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@FPDCOJKF@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@
CONST	SEGMENT
??_C@_0FI@FPDCOJKF@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@ DB 'ucm '
	DB	'error: state table entry [%x][%x] is not final but has an ini'
	DB	'tial next state of %x', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@NOJCHEB@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@
CONST	SEGMENT
??_C@_0FH@NOJCHEB@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@ DB 'ucm e'
	DB	'rror: state table entry [%x][%x] is final but has a non-initi'
	DB	'al next state of %x', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@MOMPAHKI@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@
CONST	SEGMENT
??_C@_0EP@MOMPAHKI@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@ DB 'ucm '
	DB	'error: state table entry [%x][%x] has a next state of %x that'
	DB	' is too high', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CCLPMOEM@ucm?5warning?3?5min?5B?1char?5too?5smal@
CONST	SEGMENT
??_C@_0CD@CCLPMOEM@ucm?5warning?3?5min?5B?1char?5too?5smal@ DB 'ucm warni'
	DB	'ng: min B/char too small', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MJOEKEFF@ucm?5error?3?5max?5B?1char?5too?5large?6@
CONST	SEGMENT
??_C@_0CB@MJOEKEFF@ucm?5error?3?5max?5B?1char?5too?5large?6@ DB 'ucm erro'
	DB	'r: max B/char too large', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IKMGALEK@ucm?5error?3?5max?5B?1char?5?$DM?5min?5B?1ch@
CONST	SEGMENT
??_C@_0CE@IKMGALEK@ucm?5error?3?5max?5B?1char?5?$DM?5min?5B?1ch@ DB 'ucm '
	DB	'error: max B/char < min B/char', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LIEDMPPK@ucm?5error?3?5unknown?5charset?5struc@
CONST	SEGMENT
??_C@_0CG@LIEDMPPK@ucm?5error?3?5unknown?5charset?5struc@ DB 'ucm error: '
	DB	'unknown charset structure', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02PMJKFNFC@40?$AA@
CONST	SEGMENT
??_C@_02PMJKFNFC@40?$AA@ DB '40', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ELBPNFEC@41?9fe?$AA@
CONST	SEGMENT
??_C@_05ELBPNFEC@41?9fe?$AA@ DB '41-fe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ONCPHCDI@0?93f?33?0?540?32?0?541?9fe?31?0?5ff?33?$AA@
CONST	SEGMENT
??_C@_0BM@ONCPHCDI@0?93f?33?0?540?32?0?541?9fe?31?0?5ff?33?$AA@ DB '0-3f:'
	DB	'3, 40:2, 41-fe:1, ff:3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OPDLMLHK@error?3?5DBCS?5codepage?5with?5min?5or@
CONST	SEGMENT
??_C@_0DA@OPDLMLHK@error?3?5DBCS?5codepage?5with?5min?5or@ DB 'error: DBC'
	DB	'S codepage with min or max B/char!=2', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGJFENHL@0?9ff?31?4i?$AA@
CONST	SEGMENT
??_C@_08EGJFENHL@0?9ff?31?4i?$AA@ DB '0-ff:1.i', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BEKGBPBE@0?9ff?31?4i?0?540?31?4?$AA@
CONST	SEGMENT
??_C@_0BA@BEKGBPBE@0?9ff?31?4i?0?540?31?4?$AA@ DB '0-ff:1.i, 40:1.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JMGGNBFM@0?940?31?4i?0?541?9fe?31?4?0?5ff?31?4i?$AA@
CONST	SEGMENT
??_C@_0BL@JMGGNBFM@0?940?31?4i?0?541?9fe?31?4?0?5ff?31?4i?$AA@ DB '0-40:1'
	DB	'.i, 41-fe:1., ff:1.i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@DMPHLACC@initial?0?50?93f?34?0?5e?31?4s?0?5f?30?4s?0?54@
CONST	SEGMENT
??_C@_0DD@DMPHLACC@initial?0?50?93f?34?0?5e?31?4s?0?5f?30?4s?0?54@ DB 'in'
	DB	'itial, 0-3f:4, e:1.s, f:0.s, 40:3, 41-fe:2, ff:4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OKHLDIO@0?9ff?0?5e?31?4s?0?5f?30?4s?$AA@
CONST	SEGMENT
??_C@_0BD@OKHLDIO@0?9ff?0?5e?31?4s?0?5f?30?4s?$AA@ DB '0-ff, e:1.s, f:0.s'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@BJDJKNGL@error?3?5DBCS?5codepage?5with?5min?5B?1@
CONST	SEGMENT
??_C@_0DK@BJDJKNGL@error?3?5DBCS?5codepage?5with?5min?5B?1@ DB 'error: DB'
	DB	'CS codepage with min B/char!=1 or max B/char!=2', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@CIKEHNJK@ucm?5error?3?5missing?5state?5table?5i@
CONST	SEGMENT
??_C@_0ED@CIKEHNJK@ucm?5error?3?5missing?5state?5table?5i@ DB 'ucm error:'
	DB	' missing state table information (<icu:state>) for MBCS', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04LFFJLMDE@0?9ff?$AA@
CONST	SEGMENT
??_C@_04LFFJLMDE@0?9ff?$AA@ DB '0-ff', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DOMNBAHG@error?3?5SBCS?5codepage?5with?5max?5B?1@
CONST	SEGMENT
??_C@_0CJ@DOMNBAHG@error?3?5SBCS?5codepage?5with?5max?5B?1@ DB 'error: SB'
	DB	'CS codepage with max B/char!=1', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@KDMCFGMF@ucm?5error?3?5missing?5conversion?5ty@
CONST	SEGMENT
??_C@_0DE@KDMCFGMF@ucm?5error?3?5missing?5conversion?5ty@ DB 'ucm error: '
	DB	'missing conversion type (<uconv_class>)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_processStates
_TEXT	SEGMENT
tv76 = -256						; size = 4
_action$8519 = -56					; size = 4
_count$ = -44						; size = 4
_cell$ = -32						; size = 4
_state$ = -20						; size = 4
_entry$ = -8						; size = 4
_states$ = 8						; size = 4
_ignoreSISOCheck$ = 12					; size = 1
_ucm_processStates PROC					; COMDAT
; Line 424
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 427
	mov	eax, DWORD PTR _states$[ebp]
	movsx	ecx, BYTE PTR [eax+132112]
	cmp	ecx, -1
	jne	SHORT $LN47@ucm_proces
; Line 428
	mov	esi, esp
	push	OFFSET ??_C@_0DE@KDMCFGMF@ucm?5error?3?5missing?5conversion?5ty@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 429
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN47@ucm_proces:
; Line 432
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132096], 0
	jne	$LN46@ucm_proces
; Line 433
	mov	eax, DWORD PTR _states$[ebp]
	movsx	ecx, BYTE PTR [eax+132112]
	mov	DWORD PTR tv76[ebp], ecx
	cmp	DWORD PTR tv76[ebp], 9
	ja	$LN34@ucm_proces
	mov	edx, DWORD PTR tv76[ebp]
	movzx	eax, BYTE PTR $LN50@ucm_proces[edx]
	jmp	DWORD PTR $LN51@ucm_proces[eax*4]
$LN43@ucm_proces:
; Line 436
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132104], 1
	je	SHORT $LN42@ucm_proces
; Line 437
	mov	esi, esp
	push	OFFSET ??_C@_0CJ@DOMNBAHG@error?3?5SBCS?5codepage?5with?5max?5B?1@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 438
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN42@ucm_proces:
; Line 440
	mov	eax, DWORD PTR _states$[ebp]
	mov	BYTE PTR [eax+132112], 2
; Line 441
	push	OFFSET ??_C@_04LFFJLMDE@0?9ff?$AA@
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_ucm_addState
	add	esp, 8
; Line 442
	jmp	$LN46@ucm_proces
$LN41@ucm_proces:
; Line 444
	mov	esi, esp
	push	OFFSET ??_C@_0ED@CIKEHNJK@ucm?5error?3?5missing?5state?5table?5i@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 445
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 446
	jmp	$LN46@ucm_proces
$LN40@ucm_proces:
; Line 449
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132100], 1
	jne	SHORT $LN38@ucm_proces
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132104], 2
	je	SHORT $LN39@ucm_proces
$LN38@ucm_proces:
; Line 450
	mov	esi, esp
	push	OFFSET ??_C@_0DK@BJDJKNGL@error?3?5DBCS?5codepage?5with?5min?5B?1@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 451
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN39@ucm_proces:
; Line 453
	mov	eax, DWORD PTR _states$[ebp]
	mov	BYTE PTR [eax+132112], 2
; Line 454
	push	OFFSET ??_C@_0BD@OKHLDIO@0?9ff?0?5e?31?4s?0?5f?30?4s?$AA@
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_ucm_addState
	add	esp, 8
; Line 455
	push	OFFSET ??_C@_0DD@DMPHLACC@initial?0?50?93f?34?0?5e?31?4s?0?5f?30?4s?0?54@
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_ucm_addState
	add	esp, 8
; Line 456
	push	OFFSET ??_C@_0BL@JMGGNBFM@0?940?31?4i?0?541?9fe?31?4?0?5ff?31?4i?$AA@
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_ucm_addState
	add	esp, 8
; Line 457
	push	OFFSET ??_C@_0BA@BEKGBPBE@0?9ff?31?4i?0?540?31?4?$AA@
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_ucm_addState
	add	esp, 8
; Line 458
	push	OFFSET ??_C@_08EGJFENHL@0?9ff?31?4i?$AA@
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_ucm_addState
	add	esp, 8
; Line 459
	jmp	$LN46@ucm_proces
$LN37@ucm_proces:
; Line 462
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132100], 2
	jne	SHORT $LN35@ucm_proces
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132104], 2
	je	SHORT $LN36@ucm_proces
$LN35@ucm_proces:
; Line 463
	mov	esi, esp
	push	OFFSET ??_C@_0DA@OPDLMLHK@error?3?5DBCS?5codepage?5with?5min?5or@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 464
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN36@ucm_proces:
; Line 466
	mov	eax, DWORD PTR _states$[ebp]
	mov	BYTE PTR [eax+132112], 2
; Line 467
	push	OFFSET ??_C@_0BM@ONCPHCDI@0?93f?33?0?540?32?0?541?9fe?31?0?5ff?33?$AA@
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_ucm_addState
	add	esp, 8
; Line 468
	push	OFFSET ??_C@_05ELBPNFEC@41?9fe?$AA@
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_ucm_addState
	add	esp, 8
; Line 469
	push	OFFSET ??_C@_02PMJKFNFC@40?$AA@
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_ucm_addState
	add	esp, 8
; Line 470
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_ucm_addState
	add	esp, 8
; Line 471
	jmp	SHORT $LN46@ucm_proces
$LN34@ucm_proces:
; Line 473
	mov	esi, esp
	push	OFFSET ??_C@_0CG@LIEDMPPK@ucm?5error?3?5unknown?5charset?5struc@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 474
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN46@ucm_proces:
; Line 485
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [eax+132104]
	cmp	edx, DWORD PTR [ecx+132100]
	jge	SHORT $LN33@ucm_proces
; Line 486
	mov	esi, esp
	push	OFFSET ??_C@_0CE@IKMGALEK@ucm?5error?3?5max?5B?1char?5?$DM?5min?5B?1ch@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 487
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN33@ucm_proces:
; Line 491
	mov	DWORD PTR _count$[ebp], 0
; Line 492
	mov	DWORD PTR _state$[ebp], 0
	jmp	SHORT $LN32@ucm_proces
$LN31@ucm_proces:
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1
	mov	DWORD PTR _state$[ebp], eax
$LN32@ucm_proces:
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	ecx, DWORD PTR [eax+132096]
	jge	SHORT $LN30@ucm_proces
; Line 493
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+131072]
	and	edx, 15					; 0000000fH
	cmp	edx, 1
	je	SHORT $LN29@ucm_proces
; Line 494
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN29@ucm_proces:
; Line 496
	jmp	SHORT $LN31@ucm_proces
$LN30@ucm_proces:
; Line 497
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [ecx+132104], eax
	jle	SHORT $LN28@ucm_proces
; Line 498
	mov	esi, esp
	push	OFFSET ??_C@_0CB@MJOEKEFF@ucm?5error?3?5max?5B?1char?5too?5large?6@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 499
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN28@ucm_proces:
; Line 502
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132100], 1
	jne	SHORT $LN27@ucm_proces
; Line 509
	mov	DWORD PTR _cell$[ebp], 0
	jmp	SHORT $LN26@ucm_proces
$LN25@ucm_proces:
	mov	eax, DWORD PTR _cell$[ebp]
	add	eax, 1
	mov	DWORD PTR _cell$[ebp], eax
$LN26@ucm_proces:
	cmp	DWORD PTR _cell$[ebp], 256		; 00000100H
	jge	SHORT $LN24@ucm_proces
; Line 510
	mov	eax, DWORD PTR _cell$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 514
	cmp	DWORD PTR _entry$[ebp], 0
	jge	SHORT $LN23@ucm_proces
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _action$8519[ebp], eax
	je	SHORT $LN22@ucm_proces
	cmp	DWORD PTR _action$8519[ebp], 6
	jne	SHORT $LN23@ucm_proces
$LN22@ucm_proces:
; Line 515
	jmp	SHORT $LN24@ucm_proces
$LN23@ucm_proces:
; Line 517
	jmp	SHORT $LN25@ucm_proces
$LN24@ucm_proces:
; Line 519
	cmp	DWORD PTR _cell$[ebp], 256		; 00000100H
	jne	SHORT $LN27@ucm_proces
; Line 520
	mov	esi, esp
	push	OFFSET ??_C@_0CD@CCLPMOEM@ucm?5warning?3?5min?5B?1char?5too?5smal@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN27@ucm_proces:
; Line 529
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132096]
	sub	ecx, 1
	mov	DWORD PTR _state$[ebp], ecx
	jmp	SHORT $LN20@ucm_proces
$LN19@ucm_proces:
	mov	eax, DWORD PTR _state$[ebp]
	sub	eax, 1
	mov	DWORD PTR _state$[ebp], eax
$LN20@ucm_proces:
	cmp	DWORD PTR _state$[ebp], 0
	jl	$LN18@ucm_proces
; Line 530
	mov	DWORD PTR _cell$[ebp], 0
	jmp	SHORT $LN17@ucm_proces
$LN16@ucm_proces:
	mov	eax, DWORD PTR _cell$[ebp]
	add	eax, 1
	mov	DWORD PTR _cell$[ebp], eax
$LN17@ucm_proces:
	cmp	DWORD PTR _cell$[ebp], 256		; 00000100H
	jge	$LN15@ucm_proces
; Line 531
	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _cell$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 532
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 127				; 0000007fH
	movzx	ecx, al
	mov	edx, DWORD PTR _states$[ebp]
	cmp	ecx, DWORD PTR [edx+132096]
	jl	SHORT $LN14@ucm_proces
; Line 534
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 127				; 0000007fH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _cell$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	push	OFFSET ??_C@_0EP@MOMPAHKI@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 535
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@ucm_proces:
; Line 537
	cmp	DWORD PTR _entry$[ebp], 0
	jge	SHORT $LN13@ucm_proces
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 127				; 0000007fH
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+131072]
	and	edx, 15					; 0000000fH
	cmp	edx, 1
	je	SHORT $LN13@ucm_proces
; Line 539
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 127				; 0000007fH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _cell$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	push	OFFSET ??_C@_0FH@NOJCHEB@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 540
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN12@ucm_proces
$LN13@ucm_proces:
; Line 541
	cmp	DWORD PTR _entry$[ebp], 0
	jl	SHORT $LN12@ucm_proces
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 127				; 0000007fH
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+131072]
	and	edx, 15					; 0000000fH
	cmp	edx, 1
	jne	SHORT $LN12@ucm_proces
; Line 543
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 127				; 0000007fH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _cell$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	push	OFFSET ??_C@_0FI@FPDCOJKF@ucm?5error?3?5state?5table?5entry?5?$FL?$CFx@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 544
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@ucm_proces:
; Line 546
	jmp	$LN16@ucm_proces
$LN15@ucm_proces:
; Line 547
	jmp	$LN19@ucm_proces
$LN18@ucm_proces:
; Line 550
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132096], 2
	jl	$LN10@ucm_proces
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+131076]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 1
	jne	$LN10@ucm_proces
; Line 551
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132104], 2
	je	SHORT $LN9@ucm_proces
; Line 552
	mov	esi, esp
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132104]
	push	ecx
	push	OFFSET ??_C@_0EA@PIKMMIBH@ucm?5error?3?5SI?1SO?5codepages?5must?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 553
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@ucm_proces:
; Line 555
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132096], 3
	jge	SHORT $LN8@ucm_proces
; Line 556
	mov	esi, esp
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132096]
	push	ecx
	push	OFFSET ??_C@_0EB@HBEKCODO@ucm?5error?3?5SI?1SO?5codepages?5must?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 557
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@ucm_proces:
; Line 565
	movsx	eax, BYTE PTR _ignoreSISOCheck$[ebp]
	test	eax, eax
	jne	SHORT $LN6@ucm_proces
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+56], -2122317824		; 81800000H
	jne	SHORT $LN7@ucm_proces
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+60], -2139095040		; 80800000H
	jne	SHORT $LN7@ucm_proces
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+1080], -2122317824	; 81800000H
	jne	SHORT $LN7@ucm_proces
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+1084], -2139095040	; 80800000H
	jne	SHORT $LN7@ucm_proces
$LN6@ucm_proces:
; Line 566
	mov	eax, DWORD PTR _states$[ebp]
	mov	BYTE PTR [eax+132113], 12		; 0000000cH
; Line 567
	jmp	SHORT $LN5@ucm_proces
$LN7@ucm_proces:
; Line 568
	mov	esi, esp
	push	OFFSET ??_C@_0FB@LKHEJPIB@ucm?5error?3?5SI?1SO?5codepages?5must?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 569
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@ucm_proces:
; Line 571
	mov	DWORD PTR _state$[ebp], 2
; Line 572
	jmp	SHORT $LN3@ucm_proces
$LN10@ucm_proces:
; Line 573
	mov	DWORD PTR _state$[ebp], 1
$LN3@ucm_proces:
; Line 577
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	ecx, DWORD PTR [eax+132096]
	jge	SHORT $LN2@ucm_proces
; Line 578
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+131072]
	and	edx, 15					; 0000000fH
	cmp	edx, 1
	jne	SHORT $LN1@ucm_proces
; Line 579
	mov	esi, esp
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	push	OFFSET ??_C@_0EN@DNAAGBGP@ucm?5error?3?5state?5?$CFd?5is?5?8initial?8@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 580
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@ucm_proces:
; Line 582
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1
	mov	DWORD PTR _state$[ebp], eax
; Line 583
	jmp	SHORT $LN3@ucm_proces
$LN2@ucm_proces:
; Line 585
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_sumUpStates
	add	esp, 4
$LN49@ucm_proces:
; Line 586
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN51@ucm_proces:
	DD	$LN43@ucm_proces
	DD	$LN37@ucm_proces
	DD	$LN41@ucm_proces
	DD	$LN40@ucm_proces
	DD	$LN34@ucm_proces
$LN50@ucm_proces:
	DB	0
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_ucm_processStates ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@JGGPFHFM@ucm?5error?3?5the?5state?5table?5conta@ ; `string'
;	COMDAT ??_C@_0CL@JGGPFHFM@ucm?5error?3?5the?5state?5table?5conta@
CONST	SEGMENT
??_C@_0CL@JGGPFHFM@ucm?5error?3?5the?5state?5table?5conta@ DB 'ucm error:'
	DB	' the state table contains loops', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _sumUpStates
_TEXT	SEGMENT
tv206 = -280						; size = 4
tv87 = -280						; size = 4
_sum2$8463 = -80					; size = 4
_allStatesReady$ = -65					; size = 1
_count$ = -56						; size = 4
_cell$ = -44						; size = 4
_state$ = -32						; size = 4
_sum$ = -20						; size = 4
_entry$ = -8						; size = 4
_states$ = 8						; size = 4
_sumUpStates PROC					; COMDAT
; Line 332
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 344
	mov	BYTE PTR _allStatesReady$[ebp], 0
; Line 345
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132096]
	mov	DWORD PTR _count$[ebp], ecx
	jmp	SHORT $LN32@sumUpState
$LN31@sumUpState:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN32@sumUpState:
	movsx	eax, BYTE PTR _allStatesReady$[ebp]
	test	eax, eax
	jne	$LN30@sumUpState
	cmp	DWORD PTR _count$[ebp], 0
	jl	$LN30@sumUpState
; Line 346
	mov	BYTE PTR _allStatesReady$[ebp], 1
; Line 347
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132096]
	sub	ecx, 1
	mov	DWORD PTR _state$[ebp], ecx
	jmp	SHORT $LN29@sumUpState
$LN28@sumUpState:
	mov	eax, DWORD PTR _state$[ebp]
	sub	eax, 1
	mov	DWORD PTR _state$[ebp], eax
$LN29@sumUpState:
	cmp	DWORD PTR _state$[ebp], 0
	jl	$LN27@sumUpState
; Line 348
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+131072]
	and	edx, 16					; 00000010H
	jne	$LN26@sumUpState
; Line 349
	mov	BYTE PTR _allStatesReady$[ebp], 0
; Line 350
	mov	DWORD PTR _sum$[ebp], 0
; Line 353
	mov	DWORD PTR _cell$[ebp], 0
	jmp	SHORT $LN25@sumUpState
$LN24@sumUpState:
	mov	eax, DWORD PTR _cell$[ebp]
	add	eax, 1
	mov	DWORD PTR _cell$[ebp], eax
$LN25@sumUpState:
	cmp	DWORD PTR _cell$[ebp], 256		; 00000100H
	jge	$LN23@sumUpState
; Line 354
	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _cell$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 355
	cmp	DWORD PTR _entry$[ebp], 0
	jge	SHORT $LN22@sumUpState
; Line 356
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR tv87[ebp], eax
	cmp	DWORD PTR tv87[ebp], 4
	je	SHORT $LN19@sumUpState
	cmp	DWORD PTR tv87[ebp], 5
	je	SHORT $LN18@sumUpState
	jmp	SHORT $LN22@sumUpState
$LN19@sumUpState:
; Line 358
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -1048576				; fff00000H
	or	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	shl	ecx, 10					; 0000000aH
	add	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR _cell$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 359
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, 1
	mov	DWORD PTR _sum$[ebp], eax
; Line 360
	jmp	SHORT $LN22@sumUpState
$LN18@sumUpState:
; Line 362
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -1048576				; fff00000H
	or	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	shl	ecx, 10					; 0000000aH
	add	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR _cell$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 363
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, 2
	mov	DWORD PTR _sum$[ebp], eax
$LN22@sumUpState:
; Line 370
	jmp	$LN24@sumUpState
$LN23@sumUpState:
; Line 373
	mov	DWORD PTR _cell$[ebp], 0
	jmp	SHORT $LN16@sumUpState
$LN15@sumUpState:
	mov	eax, DWORD PTR _cell$[ebp]
	add	eax, 1
	mov	DWORD PTR _cell$[ebp], eax
$LN16@sumUpState:
	cmp	DWORD PTR _cell$[ebp], 256		; 00000100H
	jge	SHORT $LN14@sumUpState
; Line 374
	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _cell$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 375
	cmp	DWORD PTR _entry$[ebp], 0
	jl	SHORT $LN13@sumUpState
; Line 376
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+131072]
	and	edx, 16					; 00000010H
	je	SHORT $LN12@sumUpState
; Line 377
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -16777216				; ff000000H
	or	eax, DWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	shl	ecx, 10					; 0000000aH
	add	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR _cell$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 378
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+131584]
	mov	DWORD PTR _sum$[ebp], edx
; Line 379
	jmp	SHORT $LN13@sumUpState
$LN12@sumUpState:
; Line 381
	mov	DWORD PTR _sum$[ebp], -1
; Line 382
	jmp	SHORT $LN14@sumUpState
$LN13@sumUpState:
; Line 385
	jmp	SHORT $LN15@sumUpState
$LN14@sumUpState:
; Line 387
	cmp	DWORD PTR _sum$[ebp], -1
	je	SHORT $LN26@sumUpState
; Line 388
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [ecx+eax*4+131584], edx
; Line 389
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+131072]
	or	edx, 16					; 00000010H
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	DWORD PTR [ecx+eax*4+131072], edx
$LN26@sumUpState:
; Line 392
	jmp	$LN28@sumUpState
$LN27@sumUpState:
; Line 393
	jmp	$LN31@sumUpState
$LN30@sumUpState:
; Line 395
	movsx	eax, BYTE PTR _allStatesReady$[ebp]
	test	eax, eax
	jne	SHORT $LN9@sumUpState
; Line 396
	mov	esi, esp
	push	OFFSET ??_C@_0CL@JGGPFHFM@ucm?5error?3?5the?5state?5table?5conta@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 397
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@sumUpState:
; Line 405
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+131584]
	mov	DWORD PTR _sum$[ebp], ecx
; Line 406
	mov	DWORD PTR _state$[ebp], 1
	jmp	SHORT $LN8@sumUpState
$LN7@sumUpState:
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1
	mov	DWORD PTR _state$[ebp], eax
$LN8@sumUpState:
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	ecx, DWORD PTR [eax+132096]
	jge	SHORT $LN6@sumUpState
; Line 407
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+131072]
	and	edx, 15					; 0000000fH
	cmp	edx, 1
	jne	SHORT $LN5@sumUpState
; Line 408
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum2$8463[ebp], eax
; Line 409
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+131584]
	mov	DWORD PTR _sum$[ebp], edx
; Line 410
	mov	DWORD PTR _cell$[ebp], 0
	jmp	SHORT $LN4@sumUpState
$LN3@sumUpState:
	mov	eax, DWORD PTR _cell$[ebp]
	add	eax, 1
	mov	DWORD PTR _cell$[ebp], eax
$LN4@sumUpState:
	cmp	DWORD PTR _cell$[ebp], 256		; 00000100H
	jge	SHORT $LN5@sumUpState
; Line 411
	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _cell$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 412
	cmp	DWORD PTR _entry$[ebp], 0
	jl	SHORT $LN1@sumUpState
; Line 413
	mov	eax, DWORD PTR _entry$[ebp]
	add	eax, DWORD PTR _sum2$8463[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	shl	ecx, 10					; 0000000aH
	add	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR _cell$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
$LN1@sumUpState:
; Line 415
	jmp	SHORT $LN3@sumUpState
$LN5@sumUpState:
; Line 417
	jmp	$LN7@sumUpState
$LN6@sumUpState:
; Line 420
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, 1
	and	eax, -2					; fffffffeH
	mov	DWORD PTR tv206[ebp], eax
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR tv206[ebp]
	mov	DWORD PTR [ecx+132108], edx
	mov	eax, DWORD PTR tv206[ebp]
$LN34@sumUpState:
; Line 421
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sumUpStates ENDP
_TEXT	ENDS
PUBLIC	_ucm_findFallback
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucm_findFallback
_TEXT	SEGMENT
_i$ = -8						; size = 4
_toUFallbacks$ = 8					; size = 4
_countToUFallbacks$ = 12				; size = 4
_offset$ = 16						; size = 4
_ucm_findFallback PROC					; COMDAT
; Line 591
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 594
	cmp	DWORD PTR _countToUFallbacks$[ebp], 0
	jne	SHORT $LN5@ucm_findFa
; Line 596
	or	eax, -1
	jmp	SHORT $LN6@ucm_findFa
$LN5@ucm_findFa:
; Line 600
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ucm_findFa
$LN3@ucm_findFa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ucm_findFa:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _countToUFallbacks$[ebp]
	jge	SHORT $LN2@ucm_findFa
; Line 601
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _toUFallbacks$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	cmp	edx, DWORD PTR [ecx+eax*8]
	jne	SHORT $LN1@ucm_findFa
; Line 602
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN6@ucm_findFa
$LN1@ucm_findFa:
; Line 604
	jmp	SHORT $LN3@ucm_findFa
$LN2@ucm_findFa:
; Line 605
	or	eax, -1
$LN6@ucm_findFa:
; Line 606
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucm_findFallback ENDP
_TEXT	ENDS
PUBLIC	_ucm_optimizeStates
EXTRN	_uprv_sortArray_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucm_optimizeStates
_TEXT	SEGMENT
_entry$ = -44						; size = 4
_cell$ = -32						; size = 4
_state$ = -20						; size = 4
_errorCode$ = -8					; size = 4
_states$ = 8						; size = 4
_pUnicodeCodeUnits$ = 12				; size = 4
_toUFallbacks$ = 16					; size = 4
_countToUFallbacks$ = 20				; size = 4
_verbose$ = 24						; size = 1
_ucm_optimizeStates PROC				; COMDAT
; Line 926
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 931
	mov	DWORD PTR _state$[ebp], 0
	jmp	SHORT $LN12@ucm_optimi
$LN11@ucm_optimi:
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1
	mov	DWORD PTR _state$[ebp], eax
$LN12@ucm_optimi:
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	ecx, DWORD PTR [eax+132096]
	jge	SHORT $LN10@ucm_optimi
; Line 932
	mov	DWORD PTR _cell$[ebp], 0
	jmp	SHORT $LN9@ucm_optimi
$LN8@ucm_optimi:
	mov	eax, DWORD PTR _cell$[ebp]
	add	eax, 1
	mov	DWORD PTR _cell$[ebp], eax
$LN9@ucm_optimi:
	cmp	DWORD PTR _cell$[ebp], 256		; 00000100H
	jge	SHORT $LN7@ucm_optimi
; Line 933
	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _cell$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 939
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -2130706433			; 80ffffffH
	cmp	eax, -2147418114			; 8000fffeH
	jne	SHORT $LN6@ucm_optimi
; Line 940
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -15728641				; ff0fffffH
	or	eax, 6291456				; 00600000H
	mov	ecx, DWORD PTR _state$[ebp]
	shl	ecx, 10					; 0000000aH
	add	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR _cell$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
$LN6@ucm_optimi:
; Line 942
	jmp	SHORT $LN8@ucm_optimi
$LN7@ucm_optimi:
; Line 943
	jmp	SHORT $LN11@ucm_optimi
$LN10@ucm_optimi:
; Line 946
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132104], 2
	jne	SHORT $LN5@ucm_optimi
; Line 947
	movzx	eax, BYTE PTR _verbose$[ebp]
	push	eax
	mov	ecx, DWORD PTR _countToUFallbacks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _toUFallbacks$[ebp]
	push	edx
	mov	eax, DWORD PTR _pUnicodeCodeUnits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _states$[ebp]
	push	ecx
	call	_compactToUnicode2
	add	esp, 20					; 00000014H
	jmp	SHORT $LN4@ucm_optimi
$LN5@ucm_optimi:
; Line 948
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132104], 2
	jle	SHORT $LN4@ucm_optimi
; Line 949
	movsx	eax, BYTE PTR _verbose$[ebp]
	test	eax, eax
	je	SHORT $LN4@ucm_optimi
; Line 950
	mov	eax, DWORD PTR _countToUFallbacks$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toUFallbacks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _states$[ebp]
	push	ecx
	call	_compactToUnicodeHelper
	add	esp, 16					; 00000010H
$LN4@ucm_optimi:
; Line 961
	cmp	DWORD PTR _countToUFallbacks$[ebp], 0
	jle	SHORT $LN13@ucm_optimi
; Line 962
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 965
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	push	0
	push	0
	push	OFFSET _compareFallbacks
	push	8
	mov	ecx, DWORD PTR _countToUFallbacks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _toUFallbacks$[ebp]
	push	edx
	call	_uprv_sortArray_56
	add	esp, 28					; 0000001cH
$LN13@ucm_optimi:
; Line 967
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ucm_optimi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@ucm_optimi:
	DD	1
	DD	$LN16@ucm_optimi
$LN16@ucm_optimi:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN15@ucm_optimi
$LN15@ucm_optimi:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ucm_optimizeStates ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EK@PHBNOOKN@cannot?5compact?5toUnicode?3?5out?5of@ ; `string'
PUBLIC	??_C@_0CJ@PLLBENEB@cannot?5compact?5toUnicode?3?5out?5of@ ; `string'
PUBLIC	??_C@_0EK@LDDFMEAL@cannot?5compact?5toUnicode?5because@ ; `string'
PUBLIC	??_C@_0CL@HIDMBOLJ@compacting?5toUnicode?5data?5saves?5@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	_uprv_free_56:PROC
EXTRN	_memcpy:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	__imp__printf:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0EK@PHBNOOKN@cannot?5compact?5toUnicode?3?5out?5of@
CONST	SEGMENT
??_C@_0EK@PHBNOOKN@cannot?5compact?5toUnicode?3?5out?5of@ DB 'cannot comp'
	DB	'act toUnicode: out of memory allocating %ld 16-bit code units'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PLLBENEB@cannot?5compact?5toUnicode?3?5out?5of@
CONST	SEGMENT
??_C@_0CJ@PLLBENEB@cannot?5compact?5toUnicode?3?5out?5of@ DB 'cannot comp'
	DB	'act toUnicode: out of memory', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@LDDFMEAL@cannot?5compact?5toUnicode?5because@
CONST	SEGMENT
??_C@_0EK@LDDFMEAL@cannot?5compact?5toUnicode?5because@ DB 'cannot compac'
	DB	't toUnicode because the maximum number of states is reached', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HIDMBOLJ@compacting?5toUnicode?5data?5saves?5@
CONST	SEGMENT
??_C@_0CL@HIDMBOLJ@compacting?5toUnicode?5data?5saves?5@ DB 'compacting t'
	DB	'oUnicode data saves %ld bytes', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _compactToUnicode2
_TEXT	SEGMENT
tv334 = -912						; size = 4
tv230 = -912						; size = 4
tv147 = -912						; size = 4
_unit$ = -712						; size = 2
_fallback$ = -700					; size = 4
_newState$ = -688					; size = 4
_trailState$ = -676					; size = 4
_leadState$ = -664					; size = 4
_j$ = -652						; size = 4
_i$ = -640						; size = 4
_sum$ = -628						; size = 4
_savings$ = -616					; size = 4
_oldTrailOffset$ = -604					; size = 4
_trailOffset$ = -592					; size = 4
_oldOffset$ = -580					; size = 4
_offset$ = -568						; size = 4
_entry$ = -556						; size = 4
_oldUnicodeCodeUnits$ = -544				; size = 4
_count$ = -532						; size = 512
_oldStateTable$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_states$ = 8						; size = 4
_pUnicodeCodeUnits$ = 12				; size = 4
_toUFallbacks$ = 16					; size = 4
_countToUFallbacks$ = 20				; size = 4
_verbose$ = 24						; size = 1
_compactToUnicode2 PROC					; COMDAT
; Line 617
	push	ebp
	mov	ebp, esp
	sub	esp, 912				; 00000390H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-912]
	mov	ecx, 228				; 000000e4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 626
	mov	eax, DWORD PTR _states$[ebp]
	movsx	ecx, BYTE PTR [eax+132113]
	cmp	ecx, 12					; 0000000cH
	jne	SHORT $LN73@compactToU
; Line 628
	mov	DWORD PTR _leadState$[ebp], 1
; Line 629
	jmp	SHORT $LN72@compactToU
$LN73@compactToU:
; Line 630
	mov	DWORD PTR _leadState$[ebp], 0
$LN72@compactToU:
; Line 634
	push	512					; 00000200H
	push	0
	lea	eax, DWORD PTR _count$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 635
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN71@compactToU
$LN70@compactToU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN71@compactToU:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	SHORT $LN69@compactToU
; Line 636
	mov	eax, DWORD PTR _leadState$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 637
	cmp	DWORD PTR _entry$[ebp], 0
	jl	SHORT $LN68@compactToU
; Line 638
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	mov	cx, WORD PTR _count$[ebp+eax*2]
	add	cx, 1
	mov	edx, DWORD PTR _entry$[ebp]
	shr	edx, 24					; 00000018H
	mov	WORD PTR _count$[ebp+edx*2], cx
$LN68@compactToU:
; Line 640
	jmp	SHORT $LN70@compactToU
$LN69@compactToU:
; Line 641
	mov	DWORD PTR _trailState$[ebp], 0
; Line 642
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN67@compactToU
$LN66@compactToU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN67@compactToU:
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+132096]
	jge	SHORT $LN65@compactToU
; Line 643
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _count$[ebp+eax*2]
	mov	edx, DWORD PTR _trailState$[ebp]
	movzx	eax, WORD PTR _count$[ebp+edx*2]
	cmp	ecx, eax
	jle	SHORT $LN64@compactToU
; Line 644
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _trailState$[ebp], eax
$LN64@compactToU:
; Line 646
	jmp	SHORT $LN66@compactToU
$LN65@compactToU:
; Line 649
	push	512					; 00000200H
	push	0
	lea	eax, DWORD PTR _count$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 650
	mov	DWORD PTR _savings$[ebp], 0
; Line 652
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN63@compactToU
$LN62@compactToU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN63@compactToU:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	$LN61@compactToU
; Line 653
	mov	eax, DWORD PTR _leadState$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 654
	cmp	DWORD PTR _entry$[ebp], 0
	jl	$LN60@compactToU
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	cmp	eax, DWORD PTR _trailState$[ebp]
	jne	$LN60@compactToU
; Line 656
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _offset$[ebp], eax
; Line 658
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN59@compactToU
$LN58@compactToU:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN59@compactToU:
	cmp	DWORD PTR _j$[ebp], 256			; 00000100H
	jge	$LN57@compactToU
; Line 659
	mov	eax, DWORD PTR _trailState$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 660
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR tv147[ebp], eax
	cmp	DWORD PTR tv147[ebp], 4
	je	SHORT $LN54@compactToU
	cmp	DWORD PTR tv147[ebp], 5
	je	SHORT $LN51@compactToU
	jmp	$LN55@compactToU
$LN54@compactToU:
; Line 662
	movzx	eax, WORD PTR _entry$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _entry$[ebp], eax
; Line 663
	mov	eax, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN53@compactToU
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _countToUFallbacks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _toUFallbacks$[ebp]
	push	edx
	call	_ucm_findFallback
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN53@compactToU
; Line 664
	mov	eax, DWORD PTR _i$[ebp]
	mov	cx, WORD PTR _count$[ebp+eax*2]
	add	cx, 1
	mov	edx, DWORD PTR _i$[ebp]
	mov	WORD PTR _count$[ebp+edx*2], cx
; Line 665
	jmp	SHORT $LN52@compactToU
$LN53@compactToU:
; Line 666
	mov	DWORD PTR _j$[ebp], 999			; 000003e7H
$LN52@compactToU:
; Line 668
	jmp	SHORT $LN55@compactToU
$LN51@compactToU:
; Line 670
	movzx	eax, WORD PTR _entry$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _entry$[ebp], eax
; Line 671
	mov	eax, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN50@compactToU
; Line 672
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _count$[ebp+eax*2]
	add	ecx, 2
	mov	edx, DWORD PTR _i$[ebp]
	mov	WORD PTR _count$[ebp+edx*2], cx
; Line 673
	jmp	SHORT $LN55@compactToU
$LN50@compactToU:
; Line 674
	mov	DWORD PTR _j$[ebp], 999			; 000003e7H
$LN55@compactToU:
; Line 680
	jmp	$LN58@compactToU
$LN57@compactToU:
; Line 681
	cmp	DWORD PTR _j$[ebp], 256			; 00000100H
	jne	SHORT $LN47@compactToU
; Line 683
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _count$[ebp+eax*2]
	add	ecx, DWORD PTR _savings$[ebp]
	mov	DWORD PTR _savings$[ebp], ecx
; Line 684
	jmp	SHORT $LN60@compactToU
$LN47@compactToU:
; Line 685
	xor	eax, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	WORD PTR _count$[ebp+ecx*2], ax
$LN60@compactToU:
; Line 688
	jmp	$LN62@compactToU
$LN61@compactToU:
; Line 690
	mov	eax, DWORD PTR _savings$[ebp]
	lea	ecx, DWORD PTR [eax+eax-1024]
	mov	DWORD PTR _savings$[ebp], ecx
; Line 691
	cmp	DWORD PTR _savings$[ebp], 0
	jg	SHORT $LN45@compactToU
; Line 692
	jmp	$LN74@compactToU
$LN45@compactToU:
; Line 694
	movsx	eax, BYTE PTR _verbose$[ebp]
	test	eax, eax
	je	SHORT $LN44@compactToU
; Line 695
	mov	esi, esp
	mov	eax, DWORD PTR _savings$[ebp]
	push	eax
	push	OFFSET ??_C@_0CL@HIDMBOLJ@compacting?5toUnicode?5data?5saves?5@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN44@compactToU:
; Line 697
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132096], 128		; 00000080H
	jl	SHORT $LN43@compactToU
; Line 698
	mov	esi, esp
	push	OFFSET ??_C@_0EK@LDDFMEAL@cannot?5compact?5toUnicode?5because@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 699
	jmp	$LN74@compactToU
$LN43@compactToU:
; Line 703
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132096]
	shl	ecx, 10					; 0000000aH
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _oldStateTable$[ebp], eax
; Line 704
	cmp	DWORD PTR _oldStateTable$[ebp], 0
	jne	SHORT $LN42@compactToU
; Line 705
	mov	esi, esp
	push	OFFSET ??_C@_0CJ@PLLBENEB@cannot?5compact?5toUnicode?3?5out?5of@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 706
	jmp	$LN74@compactToU
$LN42@compactToU:
; Line 708
	push	1
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+132096]
	shl	edx, 10					; 0000000aH
	push	edx
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldStateTable$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 715
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132096]
	mov	DWORD PTR _newState$[ebp], ecx
	mov	edx, DWORD PTR _states$[ebp]
	mov	eax, DWORD PTR [edx+132096]
	add	eax, 1
	mov	ecx, DWORD PTR _states$[ebp]
	mov	DWORD PTR [ecx+132096], eax
; Line 716
	mov	eax, DWORD PTR _newState$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	DWORD PTR [ecx+eax*4+131072], 0
; Line 718
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN41@compactToU
$LN40@compactToU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN41@compactToU:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	$LN39@compactToU
; Line 719
	mov	eax, DWORD PTR _trailState$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 720
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR tv230[ebp], eax
	cmp	DWORD PTR tv230[ebp], 4
	jb	SHORT $LN35@compactToU
	cmp	DWORD PTR tv230[ebp], 5
	jbe	SHORT $LN36@compactToU
	jmp	SHORT $LN35@compactToU
$LN36@compactToU:
; Line 723
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, -16777216				; ff000000H
	or	eax, 6291456				; 00600000H
	or	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _newState$[ebp]
	shl	ecx, 10					; 0000000aH
	add	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 724
	jmp	SHORT $LN37@compactToU
$LN35@compactToU:
; Line 726
	mov	eax, DWORD PTR _newState$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
$LN37@compactToU:
; Line 729
	jmp	$LN40@compactToU
$LN39@compactToU:
; Line 732
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN34@compactToU
$LN33@compactToU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN34@compactToU:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	SHORT $LN32@compactToU
; Line 733
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _count$[ebp+eax*2]
	test	ecx, ecx
	jle	SHORT $LN31@compactToU
; Line 734
	mov	eax, DWORD PTR _leadState$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	and	edx, -2130706433			; 80ffffffH
	mov	eax, DWORD PTR _newState$[ebp]
	shl	eax, 24					; 00000018H
	or	edx, eax
	mov	ecx, DWORD PTR _leadState$[ebp]
	shl	ecx, 10					; 0000000aH
	add	ecx, DWORD PTR _states$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
$LN31@compactToU:
; Line 736
	jmp	SHORT $LN33@compactToU
$LN32@compactToU:
; Line 739
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN30@compactToU
$LN29@compactToU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN30@compactToU:
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+132096]
	jge	SHORT $LN28@compactToU
; Line 740
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+131072]
	and	edx, -17				; ffffffefH
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	DWORD PTR [ecx+eax*4+131072], edx
; Line 741
	jmp	SHORT $LN29@compactToU
$LN28@compactToU:
; Line 742
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_sumUpStates
	add	esp, 4
	mov	DWORD PTR _sum$[ebp], eax
; Line 745
	mov	eax, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _oldUnicodeCodeUnits$[ebp], ecx
; Line 746
	cmp	DWORD PTR _sum$[ebp], 0
	jne	SHORT $LN27@compactToU
; Line 747
	mov	eax, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	DWORD PTR [eax], 0
; Line 748
	cmp	DWORD PTR _oldUnicodeCodeUnits$[ebp], 0
	je	SHORT $LN26@compactToU
; Line 749
	mov	eax, DWORD PTR _oldUnicodeCodeUnits$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN26@compactToU:
; Line 751
	mov	eax, DWORD PTR _oldStateTable$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 752
	jmp	$LN74@compactToU
$LN27@compactToU:
; Line 754
	mov	eax, DWORD PTR _sum$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 755
	mov	eax, DWORD PTR _pUnicodeCodeUnits$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN25@compactToU
; Line 757
	mov	esi, esp
	mov	eax, DWORD PTR _sum$[ebp]
	push	eax
	push	OFFSET ??_C@_0EK@PHBNOOKN@cannot?5compact?5toUnicode?3?5out?5of@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 759
	mov	eax, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	ecx, DWORD PTR _oldUnicodeCodeUnits$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 760
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR [eax+132096]
	sub	ecx, 1
	mov	edx, DWORD PTR _states$[ebp]
	mov	DWORD PTR [edx+132096], ecx
; Line 761
	push	1
	mov	eax, DWORD PTR _oldStateTable$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+132096]
	shl	edx, 10					; 0000000aH
	push	edx
	mov	eax, DWORD PTR _oldStateTable$[ebp]
	push	eax
	mov	ecx, DWORD PTR _states$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 762
	mov	eax, DWORD PTR _oldStateTable$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 763
	jmp	$LN74@compactToU
$LN25@compactToU:
; Line 765
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@compactToU
$LN23@compactToU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN24@compactToU:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sum$[ebp]
	jge	SHORT $LN22@compactToU
; Line 766
	mov	eax, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 65534				; 0000fffeH
	mov	eax, DWORD PTR _i$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 767
	jmp	SHORT $LN23@compactToU
$LN22@compactToU:
; Line 779
	mov	DWORD PTR _leadState$[ebp], 0
	jmp	SHORT $LN21@compactToU
$LN20@compactToU:
	mov	eax, DWORD PTR _leadState$[ebp]
	add	eax, 1
	mov	DWORD PTR _leadState$[ebp], eax
$LN21@compactToU:
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _leadState$[ebp]
	cmp	ecx, DWORD PTR [eax+132096]
	jge	$LN19@compactToU
; Line 780
	mov	eax, DWORD PTR _leadState$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+131072]
	and	edx, 15					; 0000000fH
	cmp	edx, 1
	jne	$LN18@compactToU
; Line 782
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@compactToU
$LN16@compactToU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN17@compactToU:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	$LN18@compactToU
; Line 783
	mov	eax, DWORD PTR _leadState$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 784
	cmp	DWORD PTR _entry$[ebp], 0
	jl	$LN14@compactToU
; Line 785
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	movzx	ecx, al
	mov	DWORD PTR _trailState$[ebp], ecx
; Line 787
	mov	eax, DWORD PTR _trailState$[ebp]
	cmp	eax, DWORD PTR _newState$[ebp]
	je	$LN14@compactToU
; Line 788
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _trailOffset$[ebp], eax
; Line 789
	mov	eax, DWORD PTR _leadState$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _oldStateTable$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _oldTrailOffset$[ebp], edx
; Line 791
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN12@compactToU
$LN11@compactToU:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@compactToU:
	cmp	DWORD PTR _j$[ebp], 256			; 00000100H
	jge	$LN14@compactToU
; Line 792
	mov	eax, DWORD PTR _trailState$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 794
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR tv334[ebp], eax
	cmp	DWORD PTR tv334[ebp], 4
	je	SHORT $LN7@compactToU
	cmp	DWORD PTR tv334[ebp], 5
	je	$LN5@compactToU
	jmp	$LN8@compactToU
$LN7@compactToU:
; Line 796
	movzx	eax, WORD PTR _entry$[ebp]
	add	eax, DWORD PTR _trailOffset$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 798
	mov	eax, DWORD PTR _trailState$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _oldStateTable$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	movzx	edx, WORD PTR [eax+ecx*4]
	add	edx, DWORD PTR _oldTrailOffset$[ebp]
	mov	DWORD PTR _oldOffset$[ebp], edx
; Line 799
	mov	eax, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _oldOffset$[ebp]
	mov	esi, DWORD PTR _oldUnicodeCodeUnits$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [ecx+edx*2], ax
	mov	ecx, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _offset$[ebp]
	mov	cx, WORD PTR [edx+eax*2]
	mov	WORD PTR _unit$[ebp], cx
; Line 800
	movzx	eax, WORD PTR _unit$[ebp]
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN6@compactToU
	mov	eax, DWORD PTR _oldOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _countToUFallbacks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _toUFallbacks$[ebp]
	push	edx
	call	_ucm_findFallback
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fallback$[ebp], eax
	cmp	DWORD PTR _fallback$[ebp], 0
	jl	SHORT $LN6@compactToU
; Line 801
	mov	eax, DWORD PTR _offset$[ebp]
	or	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR _fallback$[ebp]
	mov	edx, DWORD PTR _toUFallbacks$[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
$LN6@compactToU:
; Line 803
	jmp	$LN8@compactToU
$LN5@compactToU:
; Line 805
	movzx	eax, WORD PTR _entry$[ebp]
	add	eax, DWORD PTR _trailOffset$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 807
	mov	eax, DWORD PTR _trailState$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _oldStateTable$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	movzx	edx, WORD PTR [eax+ecx*4]
	add	edx, DWORD PTR _oldTrailOffset$[ebp]
	mov	DWORD PTR _oldOffset$[ebp], edx
; Line 808
	mov	eax, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _oldOffset$[ebp]
	mov	esi, DWORD PTR _oldUnicodeCodeUnits$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [ecx+edx*2], ax
	mov	ecx, DWORD PTR _offset$[ebp]
	add	ecx, 1
	mov	DWORD PTR _offset$[ebp], ecx
	mov	edx, DWORD PTR _oldOffset$[ebp]
	add	edx, 1
	mov	DWORD PTR _oldOffset$[ebp], edx
; Line 809
	mov	eax, DWORD PTR _pUnicodeCodeUnits$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _oldOffset$[ebp]
	mov	esi, DWORD PTR _oldUnicodeCodeUnits$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [ecx+edx*2], ax
$LN8@compactToU:
; Line 814
	jmp	$LN11@compactToU
$LN14@compactToU:
; Line 817
	jmp	$LN16@compactToU
$LN18@compactToU:
; Line 819
	jmp	$LN20@compactToU
$LN19@compactToU:
; Line 822
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@compactToU
$LN2@compactToU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@compactToU:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _countToUFallbacks$[ebp]
	jge	SHORT $LN1@compactToU
; Line 823
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _toUFallbacks$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	and	edx, 2147483647				; 7fffffffH
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _toUFallbacks$[ebp]
	mov	DWORD PTR [ecx+eax*8], edx
; Line 824
	jmp	SHORT $LN2@compactToU
$LN1@compactToU:
; Line 827
	mov	eax, DWORD PTR _oldUnicodeCodeUnits$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 828
	mov	eax, DWORD PTR _oldStateTable$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN74@compactToU:
; Line 829
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN78@compactToU
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 912				; 00000390H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN78@compactToU:
	DD	1
	DD	$LN77@compactToU
$LN77@compactToU:
	DD	-532					; fffffdecH
	DD	512					; 00000200H
	DD	$LN76@compactToU
$LN76@compactToU:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_compactToUnicode2 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0ED@EJCGFJBP@?5?5?5?5all?9unassigned?5sequences?5fro@ ; `string'
;	COMDAT ??_C@_0ED@EJCGFJBP@?5?5?5?5all?9unassigned?5sequences?5fro@
CONST	SEGMENT
??_C@_0ED@EJCGFJBP@?5?5?5?5all?9unassigned?5sequences?5fro@ DB '    all-u'
	DB	'nassigned sequences from initial state %ld use %ld bytes', 0aH
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _compactToUnicodeHelper
_TEXT	SEGMENT
_savings$ = -20						; size = 4
_state$ = -8						; size = 4
_states$ = 8						; size = 4
_unicodeCodeUnits$ = 12					; size = 4
_toUFallbacks$ = 16					; size = 4
_countToUFallbacks$ = 20				; size = 4
_compactToUnicodeHelper PROC				; COMDAT
; Line 899
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 903
	mov	DWORD PTR _state$[ebp], 0
	jmp	SHORT $LN5@compactToU@2
$LN4@compactToU@2:
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1
	mov	DWORD PTR _state$[ebp], eax
$LN5@compactToU@2:
	mov	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	ecx, DWORD PTR [eax+132096]
	jge	SHORT $LN6@compactToU@2
; Line 904
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _states$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+131072]
	and	edx, 15					; 0000000fH
	cmp	edx, 1
	jne	SHORT $LN2@compactToU@2
; Line 908
	push	0
	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _countToUFallbacks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _toUFallbacks$[ebp]
	push	edx
	mov	eax, DWORD PTR _unicodeCodeUnits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _states$[ebp]
	push	ecx
	call	_findUnassigned
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _savings$[ebp], eax
; Line 909
	cmp	DWORD PTR _savings$[ebp], 0
	jle	SHORT $LN2@compactToU@2
; Line 911
	mov	esi, esp
	mov	eax, DWORD PTR _savings$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	push	OFFSET ??_C@_0ED@EJCGFJBP@?5?5?5?5all?9unassigned?5sequences?5fro@
	call	DWORD PTR __imp__printf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@compactToU@2:
; Line 914
	jmp	SHORT $LN4@compactToU@2
$LN6@compactToU@2:
; Line 915
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_compactToUnicodeHelper ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EK@GEHOGJNE@?5?5?5?5all?9unassigned?5sequences?5fro@ ; `string'
;	COMDAT ??_C@_0EK@GEHOGJNE@?5?5?5?5all?9unassigned?5sequences?5fro@
CONST	SEGMENT
??_C@_0EK@GEHOGJNE@?5?5?5?5all?9unassigned?5sequences?5fro@ DB '    all-u'
	DB	'nassigned sequences from prefix 0x%02lx state %ld use %ld byt'
	DB	'es', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _findUnassigned
_TEXT	SEGMENT
tv129 = -268						; size = 4
_haveAssigned$ = -65					; size = 1
_belowSavings$ = -56					; size = 4
_localSavings$ = -44					; size = 4
_savings$ = -32						; size = 4
_entry$ = -20						; size = 4
_i$ = -8						; size = 4
_states$ = 8						; size = 4
_unicodeCodeUnits$ = 12					; size = 4
_toUFallbacks$ = 16					; size = 4
_countToUFallbacks$ = 20				; size = 4
_state$ = 24						; size = 4
_offset$ = 28						; size = 4
_b$ = 32						; size = 4
_findUnassigned PROC					; COMDAT
; Line 843
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 847
	mov	DWORD PTR _belowSavings$[ebp], 0
	mov	eax, DWORD PTR _belowSavings$[ebp]
	mov	DWORD PTR _localSavings$[ebp], eax
; Line 848
	mov	BYTE PTR _haveAssigned$[ebp], 0
; Line 849
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@findUnassi
$LN19@findUnassi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@findUnassi:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	$LN18@findUnassi
; Line 850
	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _entry$[ebp], edx
; Line 851
	cmp	DWORD PTR _entry$[ebp], 0
	jl	$LN17@findUnassi
; Line 857
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	and	ecx, 16777215				; 00ffffffH
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _entry$[ebp]
	shr	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _countToUFallbacks$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toUFallbacks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _unicodeCodeUnits$[ebp]
	push	edx
	mov	eax, DWORD PTR _states$[ebp]
	push	eax
	call	_findUnassigned
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _savings$[ebp], eax
; Line 858
	cmp	DWORD PTR _savings$[ebp], 0
	jge	SHORT $LN16@findUnassi
; Line 859
	mov	BYTE PTR _haveAssigned$[ebp], 1
	jmp	SHORT $LN15@findUnassi
$LN16@findUnassi:
; Line 860
	cmp	DWORD PTR _savings$[ebp], 0
	jle	SHORT $LN15@findUnassi
; Line 862
	mov	esi, esp
	mov	eax, DWORD PTR _savings$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 8
	or	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET ??_C@_0EK@GEHOGJNE@?5?5?5?5all?9unassigned?5sequences?5fro@
	call	DWORD PTR __imp__printf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 863
	mov	eax, DWORD PTR _belowSavings$[ebp]
	add	eax, DWORD PTR _savings$[ebp]
	mov	DWORD PTR _belowSavings$[ebp], eax
$LN15@findUnassi:
; Line 864
	jmp	$LN13@findUnassi
$LN17@findUnassi:
; Line 865
	movsx	eax, BYTE PTR _haveAssigned$[ebp]
	test	eax, eax
	jne	$LN13@findUnassi
; Line 866
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR tv129[ebp], eax
	cmp	DWORD PTR tv129[ebp], 4
	je	SHORT $LN9@findUnassi
	cmp	DWORD PTR tv129[ebp], 5
	je	SHORT $LN6@findUnassi
	jmp	SHORT $LN13@findUnassi
$LN9@findUnassi:
; Line 868
	movzx	eax, WORD PTR _entry$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _entry$[ebp], eax
; Line 869
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _unicodeCodeUnits$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65534				; 0000fffeH
	jne	SHORT $LN8@findUnassi
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _countToUFallbacks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _toUFallbacks$[ebp]
	push	edx
	call	_ucm_findFallback
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN8@findUnassi
; Line 870
	mov	eax, DWORD PTR _localSavings$[ebp]
	add	eax, 2
	mov	DWORD PTR _localSavings$[ebp], eax
; Line 871
	jmp	SHORT $LN7@findUnassi
$LN8@findUnassi:
; Line 872
	mov	BYTE PTR _haveAssigned$[ebp], 1
$LN7@findUnassi:
; Line 874
	jmp	SHORT $LN13@findUnassi
$LN6@findUnassi:
; Line 876
	movzx	eax, WORD PTR _entry$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _entry$[ebp], eax
; Line 877
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _unicodeCodeUnits$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65534				; 0000fffeH
	jne	SHORT $LN5@findUnassi
; Line 878
	mov	eax, DWORD PTR _localSavings$[ebp]
	add	eax, 4
	mov	DWORD PTR _localSavings$[ebp], eax
; Line 879
	jmp	SHORT $LN13@findUnassi
$LN5@findUnassi:
; Line 880
	mov	BYTE PTR _haveAssigned$[ebp], 1
$LN13@findUnassi:
; Line 887
	jmp	$LN19@findUnassi
$LN18@findUnassi:
; Line 888
	movsx	eax, BYTE PTR _haveAssigned$[ebp]
	test	eax, eax
	je	SHORT $LN2@findUnassi
; Line 889
	or	eax, -1
	jmp	SHORT $LN21@findUnassi
; Line 890
	jmp	SHORT $LN21@findUnassi
$LN2@findUnassi:
; Line 891
	mov	eax, DWORD PTR _localSavings$[ebp]
	add	eax, DWORD PTR _belowSavings$[ebp]
$LN21@findUnassi:
; Line 893
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_findUnassigned ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _compareFallbacks
_TEXT	SEGMENT
_context$ = 8						; size = 4
_fb1$ = 12						; size = 4
_fb2$ = 16						; size = 4
_compareFallbacks PROC					; COMDAT
; Line 918
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 919
	mov	eax, DWORD PTR _fb1$[ebp]
	mov	ecx, DWORD PTR _fb2$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
; Line 920
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_compareFallbacks ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FN@CPLKGCFK@ucm?5error?3?5SI?1SO?5?$CIlike?5EBCDIC?9st@ ; `string'
PUBLIC	??_C@_0EA@MMAPCBGC@ucm?5error?3?5byte?5sequence?5too?5sho@ ; `string'
PUBLIC	??_C@_0EH@OLGCGNFK@ucm?5error?3?5byte?5sequence?5reached@ ; `string'
PUBLIC	??_C@_0DE@COOEGFEG@ucm?5error?3?5byte?5sequence?5ends?5in@ ; `string'
PUBLIC	??_C@_0DA@GIBMLHDB@ucm?5error?3?5byte?5sequence?5ends?5in@ ; `string'
PUBLIC	??_C@_0CL@CKDKOGOO@ucm?5error?3?5there?5is?5no?5state?5inf@ ; `string'
PUBLIC	_ucm_countChars
;	COMDAT ??_C@_0FN@CPLKGCFK@ucm?5error?3?5SI?1SO?5?$CIlike?5EBCDIC?9st@
CONST	SEGMENT
??_C@_0FN@CPLKGCFK@ucm?5error?3?5SI?1SO?5?$CIlike?5EBCDIC?9st@ DB 'ucm er'
	DB	'ror: SI/SO (like EBCDIC-stateful) result with %d characters d'
	DB	'oes not contain all DBCS', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@MMAPCBGC@ucm?5error?3?5byte?5sequence?5too?5sho@
CONST	SEGMENT
??_C@_0EA@MMAPCBGC@ucm?5error?3?5byte?5sequence?5too?5sho@ DB 'ucm error:'
	DB	' byte sequence too short, ends in non-final state %u', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@OLGCGNFK@ucm?5error?3?5byte?5sequence?5reached@
CONST	SEGMENT
??_C@_0EH@OLGCGNFK@ucm?5error?3?5byte?5sequence?5reached@ DB 'ucm error: '
	DB	'byte sequence reached reserved action code, entry: 0x%02lx', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@COOEGFEG@ucm?5error?3?5byte?5sequence?5ends?5in@
CONST	SEGMENT
??_C@_0DE@COOEGFEG@ucm?5error?3?5byte?5sequence?5ends?5in@ DB 'ucm error:'
	DB	' byte sequence ends in state-change-only', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GIBMLHDB@ucm?5error?3?5byte?5sequence?5ends?5in@
CONST	SEGMENT
??_C@_0DA@GIBMLHDB@ucm?5error?3?5byte?5sequence?5ends?5in@ DB 'ucm error:'
	DB	' byte sequence ends in illegal state', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CKDKOGOO@ucm?5error?3?5there?5is?5no?5state?5inf@
CONST	SEGMENT
??_C@_0CL@CKDKOGOO@ucm?5error?3?5there?5is?5no?5state?5inf@ DB 'ucm error'
	DB	': there is no state information!', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucm_countChars
_TEXT	SEGMENT
tv90 = -256						; size = 4
_state$ = -53						; size = 1
_count$ = -44						; size = 4
_entry$ = -32						; size = 4
_i$ = -20						; size = 4
_offset$ = -8						; size = 4
_states$ = 8						; size = 4
_bytes$ = 12						; size = 4
_length$ = 16						; size = 4
_ucm_countChars PROC					; COMDAT
; Line 973
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 978
	mov	DWORD PTR _offset$[ebp], 0
; Line 979
	mov	DWORD PTR _count$[ebp], 0
; Line 980
	mov	BYTE PTR _state$[ebp], 0
; Line 982
	mov	eax, DWORD PTR _states$[ebp]
	cmp	DWORD PTR [eax+132096], 0
	jne	SHORT $LN15@ucm_countC
; Line 983
	mov	esi, esp
	push	OFFSET ??_C@_0CL@CKDKOGOO@ucm?5error?3?5there?5is?5no?5state?5inf@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 984
	or	eax, -1
	jmp	$LN16@ucm_countC
$LN15@ucm_countC:
; Line 988
	cmp	DWORD PTR _length$[ebp], 2
	jne	SHORT $LN14@ucm_countC
	mov	eax, DWORD PTR _states$[ebp]
	movsx	ecx, BYTE PTR [eax+132113]
	cmp	ecx, 12					; 0000000cH
	jne	SHORT $LN14@ucm_countC
; Line 989
	mov	BYTE PTR _state$[ebp], 1
$LN14@ucm_countC:
; Line 997
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@ucm_countC
$LN12@ucm_countC:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@ucm_countC:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN11@ucm_countC
; Line 998
	movzx	eax, BYTE PTR _state$[ebp]
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _states$[ebp]
	mov	ecx, DWORD PTR _bytes$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _entry$[ebp], eax
; Line 999
	cmp	DWORD PTR _entry$[ebp], 0
	jl	SHORT $LN10@ucm_countC
; Line 1000
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _state$[ebp], al
; Line 1001
	mov	eax, DWORD PTR _entry$[ebp]
	and	eax, 16777215				; 00ffffffH
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 1002
	jmp	$LN9@ucm_countC
$LN10@ucm_countC:
; Line 1003
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR tv90[ebp], eax
	cmp	DWORD PTR tv90[ebp], 8
	ja	$LN3@ucm_countC
	mov	ecx, DWORD PTR tv90[ebp]
	movzx	edx, BYTE PTR $LN18@ucm_countC[ecx]
	jmp	DWORD PTR $LN19@ucm_countC[edx*4]
$LN6@ucm_countC:
; Line 1005
	mov	esi, esp
	push	OFFSET ??_C@_0DA@GIBMLHDB@ucm?5error?3?5byte?5sequence?5ends?5in@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1006
	or	eax, -1
	jmp	$LN16@ucm_countC
$LN5@ucm_countC:
; Line 1008
	mov	esi, esp
	push	OFFSET ??_C@_0DE@COOEGFEG@ucm?5error?3?5byte?5sequence?5ends?5in@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1009
	or	eax, -1
	jmp	$LN16@ucm_countC
$LN4@ucm_countC:
; Line 1018
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 1019
	mov	eax, DWORD PTR _entry$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 127				; 0000007fH
	mov	BYTE PTR _state$[ebp], al
; Line 1020
	mov	DWORD PTR _offset$[ebp], 0
; Line 1021
	jmp	SHORT $LN9@ucm_countC
$LN3@ucm_countC:
; Line 1024
	mov	esi, esp
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	push	OFFSET ??_C@_0EH@OLGCGNFK@ucm?5error?3?5byte?5sequence?5reached@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1025
	or	eax, -1
	jmp	$LN16@ucm_countC
$LN9@ucm_countC:
; Line 1028
	jmp	$LN12@ucm_countC
$LN11@ucm_countC:
; Line 1030
	cmp	DWORD PTR _offset$[ebp], 0
	je	SHORT $LN2@ucm_countC
; Line 1031
	movzx	eax, BYTE PTR _state$[ebp]
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0EA@MMAPCBGC@ucm?5error?3?5byte?5sequence?5too?5sho@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1032
	or	eax, -1
	jmp	SHORT $LN16@ucm_countC
$LN2@ucm_countC:
; Line 1039
	cmp	DWORD PTR _count$[ebp], 1
	jle	SHORT $LN1@ucm_countC
	mov	eax, DWORD PTR _states$[ebp]
	movsx	ecx, BYTE PTR [eax+132113]
	cmp	ecx, 12					; 0000000cH
	jne	SHORT $LN1@ucm_countC
	mov	eax, DWORD PTR _count$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _length$[ebp], eax
	je	SHORT $LN1@ucm_countC
; Line 1040
	mov	esi, esp
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	OFFSET ??_C@_0FN@CPLKGCFK@ucm?5error?3?5SI?1SO?5?$CIlike?5EBCDIC?9st@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1041
	or	eax, -1
	jmp	SHORT $LN16@ucm_countC
$LN1@ucm_countC:
; Line 1044
	mov	eax, DWORD PTR _count$[ebp]
$LN16@ucm_countC:
; Line 1045
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@ucm_countC:
	DD	$LN4@ucm_countC
	DD	$LN6@ucm_countC
	DD	$LN5@ucm_countC
$LN18@ucm_countC:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	1
	DB	2
_ucm_countChars ENDP
_TEXT	ENDS
END
